// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clouddeploy

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A `DeployPolicy` inhibits manual or DeployPolicy-driven actions within a Delivery Pipeline or Target.
//
// To get more information about DeployPolicy, see:
//
// * [API documentation](https://cloud.google.com/deploy/docs/api/reference/rest/v1/projects.locations.deployPolicies)
// * How-to Guides
//   - [Restrict deploy behavior using policies](https://cloud.google.com/deploy/docs/deploy-policy)
//
// ## Example Usage
//
// ### Clouddeploy Deploy Policy Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/clouddeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := clouddeploy.NewDeployPolicy(ctx, "b-deploy-policy", &clouddeploy.DeployPolicyArgs{
//				Name:     pulumi.String("cd-policy"),
//				Location: pulumi.String("us-central1"),
//				Selectors: clouddeploy.DeployPolicySelectorArray{
//					&clouddeploy.DeployPolicySelectorArgs{
//						DeliveryPipeline: &clouddeploy.DeployPolicySelectorDeliveryPipelineArgs{
//							Id: pulumi.String("cd-pipeline"),
//						},
//					},
//				},
//				Rules: clouddeploy.DeployPolicyRuleArray{
//					&clouddeploy.DeployPolicyRuleArgs{
//						RolloutRestriction: &clouddeploy.DeployPolicyRuleRolloutRestrictionArgs{
//							Id: pulumi.String("rule"),
//							TimeWindows: &clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsArgs{
//								TimeZone: pulumi.String("America/Los_Angeles"),
//								WeeklyWindows: clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArray{
//									&clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs{
//										StartTime: &clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTimeArgs{
//											Hours:   pulumi.Int(0),
//											Minutes: pulumi.Int(0),
//										},
//										EndTime: &clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTimeArgs{
//											Hours:   pulumi.Int(24),
//											Minutes: pulumi.Int(0),
//										},
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Clouddeploy Deploy Policy Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/clouddeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := clouddeploy.NewDeployPolicy(ctx, "f-deploy-policy", &clouddeploy.DeployPolicyArgs{
//				Name:     pulumi.String("cd-policy"),
//				Location: pulumi.String("us-central1"),
//				Annotations: pulumi.StringMap{
//					"my_first_annotation":  pulumi.String("example-annotation-1"),
//					"my_second_annotation": pulumi.String("example-annotation-2"),
//				},
//				Labels: pulumi.StringMap{
//					"my_first_label":  pulumi.String("example-label-1"),
//					"my_second_label": pulumi.String("example-label-2"),
//				},
//				Description: pulumi.String("policy resource"),
//				Selectors: clouddeploy.DeployPolicySelectorArray{
//					&clouddeploy.DeployPolicySelectorArgs{
//						DeliveryPipeline: &clouddeploy.DeployPolicySelectorDeliveryPipelineArgs{
//							Id: pulumi.String("cd-pipeline"),
//							Labels: pulumi.StringMap{
//								"foo": pulumi.String("bar"),
//							},
//						},
//					},
//					&clouddeploy.DeployPolicySelectorArgs{
//						Target: &clouddeploy.DeployPolicySelectorTargetArgs{
//							Id: pulumi.String("dev"),
//							Labels: pulumi.StringMap{
//								"foo": pulumi.String("bar"),
//							},
//						},
//					},
//				},
//				Suspended: pulumi.Bool(true),
//				Rules: clouddeploy.DeployPolicyRuleArray{
//					&clouddeploy.DeployPolicyRuleArgs{
//						RolloutRestriction: &clouddeploy.DeployPolicyRuleRolloutRestrictionArgs{
//							Id: pulumi.String("rule"),
//							TimeWindows: &clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsArgs{
//								TimeZone: pulumi.String("America/Los_Angeles"),
//								WeeklyWindows: clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArray{
//									&clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs{
//										StartTime: &clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTimeArgs{
//											Hours:   pulumi.Int(0),
//											Minutes: pulumi.Int(0),
//										},
//										EndTime: &clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTimeArgs{
//											Hours:   pulumi.Int(13),
//											Minutes: pulumi.Int(0),
//										},
//									},
//								},
//							},
//						},
//					},
//					&clouddeploy.DeployPolicyRuleArgs{
//						RolloutRestriction: &clouddeploy.DeployPolicyRuleRolloutRestrictionArgs{
//							Id: pulumi.String("rule2"),
//							Invokers: pulumi.StringArray{
//								pulumi.String("USER"),
//							},
//							Actions: pulumi.StringArray{
//								pulumi.String("CREATE"),
//							},
//							TimeWindows: &clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsArgs{
//								TimeZone: pulumi.String("America/Los_Angeles"),
//								WeeklyWindows: clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArray{
//									&clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs{
//										StartTime: &clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTimeArgs{
//											Hours:   pulumi.Int(13),
//											Minutes: pulumi.Int(0),
//										},
//										EndTime: &clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTimeArgs{
//											Hours:   pulumi.Int(14),
//											Minutes: pulumi.Int(0),
//											Seconds: pulumi.Int(0),
//											Nanos:   pulumi.Int(0),
//										},
//										DaysOfWeeks: pulumi.StringArray{
//											pulumi.String("MONDAY"),
//										},
//									},
//								},
//								OneTimeWindows: clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsOneTimeWindowArray{
//									&clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsOneTimeWindowArgs{
//										StartTime: &clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsOneTimeWindowStartTimeArgs{
//											Hours:   pulumi.Int(0),
//											Minutes: pulumi.Int(0),
//										},
//										EndTime: &clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsOneTimeWindowEndTimeArgs{
//											Hours:   pulumi.Int(16),
//											Minutes: pulumi.Int(0),
//										},
//										StartDate: &clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsOneTimeWindowStartDateArgs{
//											Year:  pulumi.Int(2019),
//											Month: pulumi.Int(1),
//											Day:   pulumi.Int(1),
//										},
//										EndDate: &clouddeploy.DeployPolicyRuleRolloutRestrictionTimeWindowsOneTimeWindowEndDateArgs{
//											Year:  pulumi.Int(2019),
//											Month: pulumi.Int(12),
//											Day:   pulumi.Int(31),
//										},
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DeployPolicy can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/deployPolicies/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, DeployPolicy can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default projects/{{project}}/locations/{{location}}/deployPolicies/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default {{location}}/{{name}}
// ```
type DeployPolicy struct {
	pulumi.CustomResourceState

	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (`/`). * The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots(`.`), not longer than 253 characters in total, followed by a slash (`/`). See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more details.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Output only. Time at which the DeployPolicy was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the `DeployPolicy`. Max length is 255 characters.
	Description          pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The weak etag of the `DeployPolicy` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 63 characters.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location for the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of the `DeployPolicy`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Rules to apply. At least one rule must be present.
	// Structure is documented below.
	Rules DeployPolicyRuleArrayOutput `pulumi:"rules"`
	// Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
	// Structure is documented below.
	Selectors DeployPolicySelectorArrayOutput `pulumi:"selectors"`
	// When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
	Suspended pulumi.BoolPtrOutput `pulumi:"suspended"`
	// Output only. Unique identifier of the `DeployPolicy`.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. Time at which the DeployPolicy was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDeployPolicy registers a new resource with the given unique name, arguments, and options.
func NewDeployPolicy(ctx *pulumi.Context,
	name string, args *DeployPolicyArgs, opts ...pulumi.ResourceOption) (*DeployPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	if args.Selectors == nil {
		return nil, errors.New("invalid value for required argument 'Selectors'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeployPolicy
	err := ctx.RegisterResource("gcp:clouddeploy/deployPolicy:DeployPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployPolicy gets an existing DeployPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeployPolicyState, opts ...pulumi.ResourceOption) (*DeployPolicy, error) {
	var resource DeployPolicy
	err := ctx.ReadResource("gcp:clouddeploy/deployPolicy:DeployPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeployPolicy resources.
type deployPolicyState struct {
	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (`/`). * The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots(`.`), not longer than 253 characters in total, followed by a slash (`/`). See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more details.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Output only. Time at which the DeployPolicy was created.
	CreateTime *string `pulumi:"createTime"`
	// Description of the `DeployPolicy`. Max length is 255 characters.
	Description          *string           `pulumi:"description"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The weak etag of the `DeployPolicy` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 63 characters.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// Name of the `DeployPolicy`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Rules to apply. At least one rule must be present.
	// Structure is documented below.
	Rules []DeployPolicyRule `pulumi:"rules"`
	// Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
	// Structure is documented below.
	Selectors []DeployPolicySelector `pulumi:"selectors"`
	// When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
	Suspended *bool `pulumi:"suspended"`
	// Output only. Unique identifier of the `DeployPolicy`.
	Uid *string `pulumi:"uid"`
	// Output only. Time at which the DeployPolicy was updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type DeployPolicyState struct {
	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (`/`). * The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots(`.`), not longer than 253 characters in total, followed by a slash (`/`). See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more details.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Output only. Time at which the DeployPolicy was created.
	CreateTime pulumi.StringPtrInput
	// Description of the `DeployPolicy`. Max length is 255 characters.
	Description          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The weak etag of the `DeployPolicy` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 63 characters.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// Name of the `DeployPolicy`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Rules to apply. At least one rule must be present.
	// Structure is documented below.
	Rules DeployPolicyRuleArrayInput
	// Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
	// Structure is documented below.
	Selectors DeployPolicySelectorArrayInput
	// When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
	Suspended pulumi.BoolPtrInput
	// Output only. Unique identifier of the `DeployPolicy`.
	Uid pulumi.StringPtrInput
	// Output only. Time at which the DeployPolicy was updated.
	UpdateTime pulumi.StringPtrInput
}

func (DeployPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*deployPolicyState)(nil)).Elem()
}

type deployPolicyArgs struct {
	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (`/`). * The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots(`.`), not longer than 253 characters in total, followed by a slash (`/`). See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more details.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Description of the `DeployPolicy`. Max length is 255 characters.
	Description *string `pulumi:"description"`
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 63 characters.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location for the resource
	Location string `pulumi:"location"`
	// Name of the `DeployPolicy`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Rules to apply. At least one rule must be present.
	// Structure is documented below.
	Rules []DeployPolicyRule `pulumi:"rules"`
	// Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
	// Structure is documented below.
	Selectors []DeployPolicySelector `pulumi:"selectors"`
	// When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
	Suspended *bool `pulumi:"suspended"`
}

// The set of arguments for constructing a DeployPolicy resource.
type DeployPolicyArgs struct {
	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (`/`). * The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots(`.`), not longer than 253 characters in total, followed by a slash (`/`). See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more details.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Description of the `DeployPolicy`. Max length is 255 characters.
	Description pulumi.StringPtrInput
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 63 characters.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location for the resource
	Location pulumi.StringInput
	// Name of the `DeployPolicy`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Rules to apply. At least one rule must be present.
	// Structure is documented below.
	Rules DeployPolicyRuleArrayInput
	// Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
	// Structure is documented below.
	Selectors DeployPolicySelectorArrayInput
	// When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
	Suspended pulumi.BoolPtrInput
}

func (DeployPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deployPolicyArgs)(nil)).Elem()
}

type DeployPolicyInput interface {
	pulumi.Input

	ToDeployPolicyOutput() DeployPolicyOutput
	ToDeployPolicyOutputWithContext(ctx context.Context) DeployPolicyOutput
}

func (*DeployPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**DeployPolicy)(nil)).Elem()
}

func (i *DeployPolicy) ToDeployPolicyOutput() DeployPolicyOutput {
	return i.ToDeployPolicyOutputWithContext(context.Background())
}

func (i *DeployPolicy) ToDeployPolicyOutputWithContext(ctx context.Context) DeployPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployPolicyOutput)
}

// DeployPolicyArrayInput is an input type that accepts DeployPolicyArray and DeployPolicyArrayOutput values.
// You can construct a concrete instance of `DeployPolicyArrayInput` via:
//
//	DeployPolicyArray{ DeployPolicyArgs{...} }
type DeployPolicyArrayInput interface {
	pulumi.Input

	ToDeployPolicyArrayOutput() DeployPolicyArrayOutput
	ToDeployPolicyArrayOutputWithContext(context.Context) DeployPolicyArrayOutput
}

type DeployPolicyArray []DeployPolicyInput

func (DeployPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeployPolicy)(nil)).Elem()
}

func (i DeployPolicyArray) ToDeployPolicyArrayOutput() DeployPolicyArrayOutput {
	return i.ToDeployPolicyArrayOutputWithContext(context.Background())
}

func (i DeployPolicyArray) ToDeployPolicyArrayOutputWithContext(ctx context.Context) DeployPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployPolicyArrayOutput)
}

// DeployPolicyMapInput is an input type that accepts DeployPolicyMap and DeployPolicyMapOutput values.
// You can construct a concrete instance of `DeployPolicyMapInput` via:
//
//	DeployPolicyMap{ "key": DeployPolicyArgs{...} }
type DeployPolicyMapInput interface {
	pulumi.Input

	ToDeployPolicyMapOutput() DeployPolicyMapOutput
	ToDeployPolicyMapOutputWithContext(context.Context) DeployPolicyMapOutput
}

type DeployPolicyMap map[string]DeployPolicyInput

func (DeployPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeployPolicy)(nil)).Elem()
}

func (i DeployPolicyMap) ToDeployPolicyMapOutput() DeployPolicyMapOutput {
	return i.ToDeployPolicyMapOutputWithContext(context.Background())
}

func (i DeployPolicyMap) ToDeployPolicyMapOutputWithContext(ctx context.Context) DeployPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployPolicyMapOutput)
}

type DeployPolicyOutput struct{ *pulumi.OutputState }

func (DeployPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeployPolicy)(nil)).Elem()
}

func (o DeployPolicyOutput) ToDeployPolicyOutput() DeployPolicyOutput {
	return o
}

func (o DeployPolicyOutput) ToDeployPolicyOutputWithContext(ctx context.Context) DeployPolicyOutput {
	return o
}

// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (`/`). * The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots(`.`), not longer than 253 characters in total, followed by a slash (`/`). See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more details.
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o DeployPolicyOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeployPolicy) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Output only. Time at which the DeployPolicy was created.
func (o DeployPolicyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployPolicy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the `DeployPolicy`. Max length is 255 characters.
func (o DeployPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeployPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DeployPolicyOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeployPolicy) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o DeployPolicyOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeployPolicy) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The weak etag of the `DeployPolicy` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
func (o DeployPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 63 characters.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o DeployPolicyOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeployPolicy) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location for the resource
func (o DeployPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of the `DeployPolicy`.
func (o DeployPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o DeployPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o DeployPolicyOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeployPolicy) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Rules to apply. At least one rule must be present.
// Structure is documented below.
func (o DeployPolicyOutput) Rules() DeployPolicyRuleArrayOutput {
	return o.ApplyT(func(v *DeployPolicy) DeployPolicyRuleArrayOutput { return v.Rules }).(DeployPolicyRuleArrayOutput)
}

// Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
// Structure is documented below.
func (o DeployPolicyOutput) Selectors() DeployPolicySelectorArrayOutput {
	return o.ApplyT(func(v *DeployPolicy) DeployPolicySelectorArrayOutput { return v.Selectors }).(DeployPolicySelectorArrayOutput)
}

// When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
func (o DeployPolicyOutput) Suspended() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeployPolicy) pulumi.BoolPtrOutput { return v.Suspended }).(pulumi.BoolPtrOutput)
}

// Output only. Unique identifier of the `DeployPolicy`.
func (o DeployPolicyOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployPolicy) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Output only. Time at which the DeployPolicy was updated.
func (o DeployPolicyOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployPolicy) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type DeployPolicyArrayOutput struct{ *pulumi.OutputState }

func (DeployPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeployPolicy)(nil)).Elem()
}

func (o DeployPolicyArrayOutput) ToDeployPolicyArrayOutput() DeployPolicyArrayOutput {
	return o
}

func (o DeployPolicyArrayOutput) ToDeployPolicyArrayOutputWithContext(ctx context.Context) DeployPolicyArrayOutput {
	return o
}

func (o DeployPolicyArrayOutput) Index(i pulumi.IntInput) DeployPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeployPolicy {
		return vs[0].([]*DeployPolicy)[vs[1].(int)]
	}).(DeployPolicyOutput)
}

type DeployPolicyMapOutput struct{ *pulumi.OutputState }

func (DeployPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeployPolicy)(nil)).Elem()
}

func (o DeployPolicyMapOutput) ToDeployPolicyMapOutput() DeployPolicyMapOutput {
	return o
}

func (o DeployPolicyMapOutput) ToDeployPolicyMapOutputWithContext(ctx context.Context) DeployPolicyMapOutput {
	return o
}

func (o DeployPolicyMapOutput) MapIndex(k pulumi.StringInput) DeployPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeployPolicy {
		return vs[0].(map[string]*DeployPolicy)[vs[1].(string)]
	}).(DeployPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeployPolicyInput)(nil)).Elem(), &DeployPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeployPolicyArrayInput)(nil)).Elem(), DeployPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeployPolicyMapInput)(nil)).Elem(), DeployPolicyMap{})
	pulumi.RegisterOutputType(DeployPolicyOutput{})
	pulumi.RegisterOutputType(DeployPolicyArrayOutput{})
	pulumi.RegisterOutputType(DeployPolicyMapOutput{})
}
