// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clouddeploy

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TargetIamPolicy struct {
	pulumi.CustomResourceState

	Etag       pulumi.StringOutput `pulumi:"etag"`
	Location   pulumi.StringOutput `pulumi:"location"`
	Name       pulumi.StringOutput `pulumi:"name"`
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	Project    pulumi.StringOutput `pulumi:"project"`
}

// NewTargetIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewTargetIamPolicy(ctx *pulumi.Context,
	name string, args *TargetIamPolicyArgs, opts ...pulumi.ResourceOption) (*TargetIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TargetIamPolicy
	err := ctx.RegisterResource("gcp:clouddeploy/targetIamPolicy:TargetIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTargetIamPolicy gets an existing TargetIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTargetIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetIamPolicyState, opts ...pulumi.ResourceOption) (*TargetIamPolicy, error) {
	var resource TargetIamPolicy
	err := ctx.ReadResource("gcp:clouddeploy/targetIamPolicy:TargetIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TargetIamPolicy resources.
type targetIamPolicyState struct {
	Etag       *string `pulumi:"etag"`
	Location   *string `pulumi:"location"`
	Name       *string `pulumi:"name"`
	PolicyData *string `pulumi:"policyData"`
	Project    *string `pulumi:"project"`
}

type TargetIamPolicyState struct {
	Etag       pulumi.StringPtrInput
	Location   pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	PolicyData pulumi.StringPtrInput
	Project    pulumi.StringPtrInput
}

func (TargetIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetIamPolicyState)(nil)).Elem()
}

type targetIamPolicyArgs struct {
	Location   *string `pulumi:"location"`
	Name       *string `pulumi:"name"`
	PolicyData string  `pulumi:"policyData"`
	Project    *string `pulumi:"project"`
}

// The set of arguments for constructing a TargetIamPolicy resource.
type TargetIamPolicyArgs struct {
	Location   pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	PolicyData pulumi.StringInput
	Project    pulumi.StringPtrInput
}

func (TargetIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetIamPolicyArgs)(nil)).Elem()
}

type TargetIamPolicyInput interface {
	pulumi.Input

	ToTargetIamPolicyOutput() TargetIamPolicyOutput
	ToTargetIamPolicyOutputWithContext(ctx context.Context) TargetIamPolicyOutput
}

func (*TargetIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetIamPolicy)(nil)).Elem()
}

func (i *TargetIamPolicy) ToTargetIamPolicyOutput() TargetIamPolicyOutput {
	return i.ToTargetIamPolicyOutputWithContext(context.Background())
}

func (i *TargetIamPolicy) ToTargetIamPolicyOutputWithContext(ctx context.Context) TargetIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetIamPolicyOutput)
}

// TargetIamPolicyArrayInput is an input type that accepts TargetIamPolicyArray and TargetIamPolicyArrayOutput values.
// You can construct a concrete instance of `TargetIamPolicyArrayInput` via:
//
//	TargetIamPolicyArray{ TargetIamPolicyArgs{...} }
type TargetIamPolicyArrayInput interface {
	pulumi.Input

	ToTargetIamPolicyArrayOutput() TargetIamPolicyArrayOutput
	ToTargetIamPolicyArrayOutputWithContext(context.Context) TargetIamPolicyArrayOutput
}

type TargetIamPolicyArray []TargetIamPolicyInput

func (TargetIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetIamPolicy)(nil)).Elem()
}

func (i TargetIamPolicyArray) ToTargetIamPolicyArrayOutput() TargetIamPolicyArrayOutput {
	return i.ToTargetIamPolicyArrayOutputWithContext(context.Background())
}

func (i TargetIamPolicyArray) ToTargetIamPolicyArrayOutputWithContext(ctx context.Context) TargetIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetIamPolicyArrayOutput)
}

// TargetIamPolicyMapInput is an input type that accepts TargetIamPolicyMap and TargetIamPolicyMapOutput values.
// You can construct a concrete instance of `TargetIamPolicyMapInput` via:
//
//	TargetIamPolicyMap{ "key": TargetIamPolicyArgs{...} }
type TargetIamPolicyMapInput interface {
	pulumi.Input

	ToTargetIamPolicyMapOutput() TargetIamPolicyMapOutput
	ToTargetIamPolicyMapOutputWithContext(context.Context) TargetIamPolicyMapOutput
}

type TargetIamPolicyMap map[string]TargetIamPolicyInput

func (TargetIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetIamPolicy)(nil)).Elem()
}

func (i TargetIamPolicyMap) ToTargetIamPolicyMapOutput() TargetIamPolicyMapOutput {
	return i.ToTargetIamPolicyMapOutputWithContext(context.Background())
}

func (i TargetIamPolicyMap) ToTargetIamPolicyMapOutputWithContext(ctx context.Context) TargetIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetIamPolicyMapOutput)
}

type TargetIamPolicyOutput struct{ *pulumi.OutputState }

func (TargetIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetIamPolicy)(nil)).Elem()
}

func (o TargetIamPolicyOutput) ToTargetIamPolicyOutput() TargetIamPolicyOutput {
	return o
}

func (o TargetIamPolicyOutput) ToTargetIamPolicyOutputWithContext(ctx context.Context) TargetIamPolicyOutput {
	return o
}

func (o TargetIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o TargetIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o TargetIamPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetIamPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TargetIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o TargetIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type TargetIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (TargetIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetIamPolicy)(nil)).Elem()
}

func (o TargetIamPolicyArrayOutput) ToTargetIamPolicyArrayOutput() TargetIamPolicyArrayOutput {
	return o
}

func (o TargetIamPolicyArrayOutput) ToTargetIamPolicyArrayOutputWithContext(ctx context.Context) TargetIamPolicyArrayOutput {
	return o
}

func (o TargetIamPolicyArrayOutput) Index(i pulumi.IntInput) TargetIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TargetIamPolicy {
		return vs[0].([]*TargetIamPolicy)[vs[1].(int)]
	}).(TargetIamPolicyOutput)
}

type TargetIamPolicyMapOutput struct{ *pulumi.OutputState }

func (TargetIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetIamPolicy)(nil)).Elem()
}

func (o TargetIamPolicyMapOutput) ToTargetIamPolicyMapOutput() TargetIamPolicyMapOutput {
	return o
}

func (o TargetIamPolicyMapOutput) ToTargetIamPolicyMapOutputWithContext(ctx context.Context) TargetIamPolicyMapOutput {
	return o
}

func (o TargetIamPolicyMapOutput) MapIndex(k pulumi.StringInput) TargetIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TargetIamPolicy {
		return vs[0].(map[string]*TargetIamPolicy)[vs[1].(string)]
	}).(TargetIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TargetIamPolicyInput)(nil)).Elem(), &TargetIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetIamPolicyArrayInput)(nil)).Elem(), TargetIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetIamPolicyMapInput)(nil)).Elem(), TargetIamPolicyMap{})
	pulumi.RegisterOutputType(TargetIamPolicyOutput{})
	pulumi.RegisterOutputType(TargetIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(TargetIamPolicyMapOutput{})
}
