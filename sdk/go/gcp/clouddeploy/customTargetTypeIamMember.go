// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clouddeploy

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CustomTargetTypeIamMember struct {
	pulumi.CustomResourceState

	Condition CustomTargetTypeIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag      pulumi.StringOutput                         `pulumi:"etag"`
	Location  pulumi.StringOutput                         `pulumi:"location"`
	Member    pulumi.StringOutput                         `pulumi:"member"`
	Name      pulumi.StringOutput                         `pulumi:"name"`
	Project   pulumi.StringOutput                         `pulumi:"project"`
	Role      pulumi.StringOutput                         `pulumi:"role"`
}

// NewCustomTargetTypeIamMember registers a new resource with the given unique name, arguments, and options.
func NewCustomTargetTypeIamMember(ctx *pulumi.Context,
	name string, args *CustomTargetTypeIamMemberArgs, opts ...pulumi.ResourceOption) (*CustomTargetTypeIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomTargetTypeIamMember
	err := ctx.RegisterResource("gcp:clouddeploy/customTargetTypeIamMember:CustomTargetTypeIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomTargetTypeIamMember gets an existing CustomTargetTypeIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomTargetTypeIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomTargetTypeIamMemberState, opts ...pulumi.ResourceOption) (*CustomTargetTypeIamMember, error) {
	var resource CustomTargetTypeIamMember
	err := ctx.ReadResource("gcp:clouddeploy/customTargetTypeIamMember:CustomTargetTypeIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomTargetTypeIamMember resources.
type customTargetTypeIamMemberState struct {
	Condition *CustomTargetTypeIamMemberCondition `pulumi:"condition"`
	Etag      *string                             `pulumi:"etag"`
	Location  *string                             `pulumi:"location"`
	Member    *string                             `pulumi:"member"`
	Name      *string                             `pulumi:"name"`
	Project   *string                             `pulumi:"project"`
	Role      *string                             `pulumi:"role"`
}

type CustomTargetTypeIamMemberState struct {
	Condition CustomTargetTypeIamMemberConditionPtrInput
	Etag      pulumi.StringPtrInput
	Location  pulumi.StringPtrInput
	Member    pulumi.StringPtrInput
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringPtrInput
}

func (CustomTargetTypeIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*customTargetTypeIamMemberState)(nil)).Elem()
}

type customTargetTypeIamMemberArgs struct {
	Condition *CustomTargetTypeIamMemberCondition `pulumi:"condition"`
	Location  *string                             `pulumi:"location"`
	Member    string                              `pulumi:"member"`
	Name      *string                             `pulumi:"name"`
	Project   *string                             `pulumi:"project"`
	Role      string                              `pulumi:"role"`
}

// The set of arguments for constructing a CustomTargetTypeIamMember resource.
type CustomTargetTypeIamMemberArgs struct {
	Condition CustomTargetTypeIamMemberConditionPtrInput
	Location  pulumi.StringPtrInput
	Member    pulumi.StringInput
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringInput
}

func (CustomTargetTypeIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customTargetTypeIamMemberArgs)(nil)).Elem()
}

type CustomTargetTypeIamMemberInput interface {
	pulumi.Input

	ToCustomTargetTypeIamMemberOutput() CustomTargetTypeIamMemberOutput
	ToCustomTargetTypeIamMemberOutputWithContext(ctx context.Context) CustomTargetTypeIamMemberOutput
}

func (*CustomTargetTypeIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetTypeIamMember)(nil)).Elem()
}

func (i *CustomTargetTypeIamMember) ToCustomTargetTypeIamMemberOutput() CustomTargetTypeIamMemberOutput {
	return i.ToCustomTargetTypeIamMemberOutputWithContext(context.Background())
}

func (i *CustomTargetTypeIamMember) ToCustomTargetTypeIamMemberOutputWithContext(ctx context.Context) CustomTargetTypeIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetTypeIamMemberOutput)
}

// CustomTargetTypeIamMemberArrayInput is an input type that accepts CustomTargetTypeIamMemberArray and CustomTargetTypeIamMemberArrayOutput values.
// You can construct a concrete instance of `CustomTargetTypeIamMemberArrayInput` via:
//
//	CustomTargetTypeIamMemberArray{ CustomTargetTypeIamMemberArgs{...} }
type CustomTargetTypeIamMemberArrayInput interface {
	pulumi.Input

	ToCustomTargetTypeIamMemberArrayOutput() CustomTargetTypeIamMemberArrayOutput
	ToCustomTargetTypeIamMemberArrayOutputWithContext(context.Context) CustomTargetTypeIamMemberArrayOutput
}

type CustomTargetTypeIamMemberArray []CustomTargetTypeIamMemberInput

func (CustomTargetTypeIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomTargetTypeIamMember)(nil)).Elem()
}

func (i CustomTargetTypeIamMemberArray) ToCustomTargetTypeIamMemberArrayOutput() CustomTargetTypeIamMemberArrayOutput {
	return i.ToCustomTargetTypeIamMemberArrayOutputWithContext(context.Background())
}

func (i CustomTargetTypeIamMemberArray) ToCustomTargetTypeIamMemberArrayOutputWithContext(ctx context.Context) CustomTargetTypeIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetTypeIamMemberArrayOutput)
}

// CustomTargetTypeIamMemberMapInput is an input type that accepts CustomTargetTypeIamMemberMap and CustomTargetTypeIamMemberMapOutput values.
// You can construct a concrete instance of `CustomTargetTypeIamMemberMapInput` via:
//
//	CustomTargetTypeIamMemberMap{ "key": CustomTargetTypeIamMemberArgs{...} }
type CustomTargetTypeIamMemberMapInput interface {
	pulumi.Input

	ToCustomTargetTypeIamMemberMapOutput() CustomTargetTypeIamMemberMapOutput
	ToCustomTargetTypeIamMemberMapOutputWithContext(context.Context) CustomTargetTypeIamMemberMapOutput
}

type CustomTargetTypeIamMemberMap map[string]CustomTargetTypeIamMemberInput

func (CustomTargetTypeIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomTargetTypeIamMember)(nil)).Elem()
}

func (i CustomTargetTypeIamMemberMap) ToCustomTargetTypeIamMemberMapOutput() CustomTargetTypeIamMemberMapOutput {
	return i.ToCustomTargetTypeIamMemberMapOutputWithContext(context.Background())
}

func (i CustomTargetTypeIamMemberMap) ToCustomTargetTypeIamMemberMapOutputWithContext(ctx context.Context) CustomTargetTypeIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetTypeIamMemberMapOutput)
}

type CustomTargetTypeIamMemberOutput struct{ *pulumi.OutputState }

func (CustomTargetTypeIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetTypeIamMember)(nil)).Elem()
}

func (o CustomTargetTypeIamMemberOutput) ToCustomTargetTypeIamMemberOutput() CustomTargetTypeIamMemberOutput {
	return o
}

func (o CustomTargetTypeIamMemberOutput) ToCustomTargetTypeIamMemberOutputWithContext(ctx context.Context) CustomTargetTypeIamMemberOutput {
	return o
}

func (o CustomTargetTypeIamMemberOutput) Condition() CustomTargetTypeIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *CustomTargetTypeIamMember) CustomTargetTypeIamMemberConditionPtrOutput { return v.Condition }).(CustomTargetTypeIamMemberConditionPtrOutput)
}

func (o CustomTargetTypeIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomTargetTypeIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o CustomTargetTypeIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomTargetTypeIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o CustomTargetTypeIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomTargetTypeIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o CustomTargetTypeIamMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomTargetTypeIamMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CustomTargetTypeIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomTargetTypeIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o CustomTargetTypeIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomTargetTypeIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type CustomTargetTypeIamMemberArrayOutput struct{ *pulumi.OutputState }

func (CustomTargetTypeIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomTargetTypeIamMember)(nil)).Elem()
}

func (o CustomTargetTypeIamMemberArrayOutput) ToCustomTargetTypeIamMemberArrayOutput() CustomTargetTypeIamMemberArrayOutput {
	return o
}

func (o CustomTargetTypeIamMemberArrayOutput) ToCustomTargetTypeIamMemberArrayOutputWithContext(ctx context.Context) CustomTargetTypeIamMemberArrayOutput {
	return o
}

func (o CustomTargetTypeIamMemberArrayOutput) Index(i pulumi.IntInput) CustomTargetTypeIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomTargetTypeIamMember {
		return vs[0].([]*CustomTargetTypeIamMember)[vs[1].(int)]
	}).(CustomTargetTypeIamMemberOutput)
}

type CustomTargetTypeIamMemberMapOutput struct{ *pulumi.OutputState }

func (CustomTargetTypeIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomTargetTypeIamMember)(nil)).Elem()
}

func (o CustomTargetTypeIamMemberMapOutput) ToCustomTargetTypeIamMemberMapOutput() CustomTargetTypeIamMemberMapOutput {
	return o
}

func (o CustomTargetTypeIamMemberMapOutput) ToCustomTargetTypeIamMemberMapOutputWithContext(ctx context.Context) CustomTargetTypeIamMemberMapOutput {
	return o
}

func (o CustomTargetTypeIamMemberMapOutput) MapIndex(k pulumi.StringInput) CustomTargetTypeIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomTargetTypeIamMember {
		return vs[0].(map[string]*CustomTargetTypeIamMember)[vs[1].(string)]
	}).(CustomTargetTypeIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomTargetTypeIamMemberInput)(nil)).Elem(), &CustomTargetTypeIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomTargetTypeIamMemberArrayInput)(nil)).Elem(), CustomTargetTypeIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomTargetTypeIamMemberMapInput)(nil)).Elem(), CustomTargetTypeIamMemberMap{})
	pulumi.RegisterOutputType(CustomTargetTypeIamMemberOutput{})
	pulumi.RegisterOutputType(CustomTargetTypeIamMemberArrayOutput{})
	pulumi.RegisterOutputType(CustomTargetTypeIamMemberMapOutput{})
}
