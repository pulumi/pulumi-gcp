// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clouddeploy

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TargetIamMember struct {
	pulumi.CustomResourceState

	Condition TargetIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag      pulumi.StringOutput               `pulumi:"etag"`
	Location  pulumi.StringOutput               `pulumi:"location"`
	Member    pulumi.StringOutput               `pulumi:"member"`
	Name      pulumi.StringOutput               `pulumi:"name"`
	Project   pulumi.StringOutput               `pulumi:"project"`
	Role      pulumi.StringOutput               `pulumi:"role"`
}

// NewTargetIamMember registers a new resource with the given unique name, arguments, and options.
func NewTargetIamMember(ctx *pulumi.Context,
	name string, args *TargetIamMemberArgs, opts ...pulumi.ResourceOption) (*TargetIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TargetIamMember
	err := ctx.RegisterResource("gcp:clouddeploy/targetIamMember:TargetIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTargetIamMember gets an existing TargetIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTargetIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetIamMemberState, opts ...pulumi.ResourceOption) (*TargetIamMember, error) {
	var resource TargetIamMember
	err := ctx.ReadResource("gcp:clouddeploy/targetIamMember:TargetIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TargetIamMember resources.
type targetIamMemberState struct {
	Condition *TargetIamMemberCondition `pulumi:"condition"`
	Etag      *string                   `pulumi:"etag"`
	Location  *string                   `pulumi:"location"`
	Member    *string                   `pulumi:"member"`
	Name      *string                   `pulumi:"name"`
	Project   *string                   `pulumi:"project"`
	Role      *string                   `pulumi:"role"`
}

type TargetIamMemberState struct {
	Condition TargetIamMemberConditionPtrInput
	Etag      pulumi.StringPtrInput
	Location  pulumi.StringPtrInput
	Member    pulumi.StringPtrInput
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringPtrInput
}

func (TargetIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetIamMemberState)(nil)).Elem()
}

type targetIamMemberArgs struct {
	Condition *TargetIamMemberCondition `pulumi:"condition"`
	Location  *string                   `pulumi:"location"`
	Member    string                    `pulumi:"member"`
	Name      *string                   `pulumi:"name"`
	Project   *string                   `pulumi:"project"`
	Role      string                    `pulumi:"role"`
}

// The set of arguments for constructing a TargetIamMember resource.
type TargetIamMemberArgs struct {
	Condition TargetIamMemberConditionPtrInput
	Location  pulumi.StringPtrInput
	Member    pulumi.StringInput
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringInput
}

func (TargetIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetIamMemberArgs)(nil)).Elem()
}

type TargetIamMemberInput interface {
	pulumi.Input

	ToTargetIamMemberOutput() TargetIamMemberOutput
	ToTargetIamMemberOutputWithContext(ctx context.Context) TargetIamMemberOutput
}

func (*TargetIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetIamMember)(nil)).Elem()
}

func (i *TargetIamMember) ToTargetIamMemberOutput() TargetIamMemberOutput {
	return i.ToTargetIamMemberOutputWithContext(context.Background())
}

func (i *TargetIamMember) ToTargetIamMemberOutputWithContext(ctx context.Context) TargetIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetIamMemberOutput)
}

// TargetIamMemberArrayInput is an input type that accepts TargetIamMemberArray and TargetIamMemberArrayOutput values.
// You can construct a concrete instance of `TargetIamMemberArrayInput` via:
//
//	TargetIamMemberArray{ TargetIamMemberArgs{...} }
type TargetIamMemberArrayInput interface {
	pulumi.Input

	ToTargetIamMemberArrayOutput() TargetIamMemberArrayOutput
	ToTargetIamMemberArrayOutputWithContext(context.Context) TargetIamMemberArrayOutput
}

type TargetIamMemberArray []TargetIamMemberInput

func (TargetIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetIamMember)(nil)).Elem()
}

func (i TargetIamMemberArray) ToTargetIamMemberArrayOutput() TargetIamMemberArrayOutput {
	return i.ToTargetIamMemberArrayOutputWithContext(context.Background())
}

func (i TargetIamMemberArray) ToTargetIamMemberArrayOutputWithContext(ctx context.Context) TargetIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetIamMemberArrayOutput)
}

// TargetIamMemberMapInput is an input type that accepts TargetIamMemberMap and TargetIamMemberMapOutput values.
// You can construct a concrete instance of `TargetIamMemberMapInput` via:
//
//	TargetIamMemberMap{ "key": TargetIamMemberArgs{...} }
type TargetIamMemberMapInput interface {
	pulumi.Input

	ToTargetIamMemberMapOutput() TargetIamMemberMapOutput
	ToTargetIamMemberMapOutputWithContext(context.Context) TargetIamMemberMapOutput
}

type TargetIamMemberMap map[string]TargetIamMemberInput

func (TargetIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetIamMember)(nil)).Elem()
}

func (i TargetIamMemberMap) ToTargetIamMemberMapOutput() TargetIamMemberMapOutput {
	return i.ToTargetIamMemberMapOutputWithContext(context.Background())
}

func (i TargetIamMemberMap) ToTargetIamMemberMapOutputWithContext(ctx context.Context) TargetIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetIamMemberMapOutput)
}

type TargetIamMemberOutput struct{ *pulumi.OutputState }

func (TargetIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetIamMember)(nil)).Elem()
}

func (o TargetIamMemberOutput) ToTargetIamMemberOutput() TargetIamMemberOutput {
	return o
}

func (o TargetIamMemberOutput) ToTargetIamMemberOutputWithContext(ctx context.Context) TargetIamMemberOutput {
	return o
}

func (o TargetIamMemberOutput) Condition() TargetIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *TargetIamMember) TargetIamMemberConditionPtrOutput { return v.Condition }).(TargetIamMemberConditionPtrOutput)
}

func (o TargetIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o TargetIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o TargetIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o TargetIamMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetIamMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TargetIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o TargetIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type TargetIamMemberArrayOutput struct{ *pulumi.OutputState }

func (TargetIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetIamMember)(nil)).Elem()
}

func (o TargetIamMemberArrayOutput) ToTargetIamMemberArrayOutput() TargetIamMemberArrayOutput {
	return o
}

func (o TargetIamMemberArrayOutput) ToTargetIamMemberArrayOutputWithContext(ctx context.Context) TargetIamMemberArrayOutput {
	return o
}

func (o TargetIamMemberArrayOutput) Index(i pulumi.IntInput) TargetIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TargetIamMember {
		return vs[0].([]*TargetIamMember)[vs[1].(int)]
	}).(TargetIamMemberOutput)
}

type TargetIamMemberMapOutput struct{ *pulumi.OutputState }

func (TargetIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetIamMember)(nil)).Elem()
}

func (o TargetIamMemberMapOutput) ToTargetIamMemberMapOutput() TargetIamMemberMapOutput {
	return o
}

func (o TargetIamMemberMapOutput) ToTargetIamMemberMapOutputWithContext(ctx context.Context) TargetIamMemberMapOutput {
	return o
}

func (o TargetIamMemberMapOutput) MapIndex(k pulumi.StringInput) TargetIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TargetIamMember {
		return vs[0].(map[string]*TargetIamMember)[vs[1].(string)]
	}).(TargetIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TargetIamMemberInput)(nil)).Elem(), &TargetIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetIamMemberArrayInput)(nil)).Elem(), TargetIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetIamMemberMapInput)(nil)).Elem(), TargetIamMemberMap{})
	pulumi.RegisterOutputType(TargetIamMemberOutput{})
	pulumi.RegisterOutputType(TargetIamMemberArrayOutput{})
	pulumi.RegisterOutputType(TargetIamMemberMapOutput{})
}
