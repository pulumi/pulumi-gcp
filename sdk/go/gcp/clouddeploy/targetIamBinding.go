// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clouddeploy

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TargetIamBinding struct {
	pulumi.CustomResourceState

	Condition TargetIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag      pulumi.StringOutput                `pulumi:"etag"`
	Location  pulumi.StringOutput                `pulumi:"location"`
	Members   pulumi.StringArrayOutput           `pulumi:"members"`
	Name      pulumi.StringOutput                `pulumi:"name"`
	Project   pulumi.StringOutput                `pulumi:"project"`
	Role      pulumi.StringOutput                `pulumi:"role"`
}

// NewTargetIamBinding registers a new resource with the given unique name, arguments, and options.
func NewTargetIamBinding(ctx *pulumi.Context,
	name string, args *TargetIamBindingArgs, opts ...pulumi.ResourceOption) (*TargetIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TargetIamBinding
	err := ctx.RegisterResource("gcp:clouddeploy/targetIamBinding:TargetIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTargetIamBinding gets an existing TargetIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTargetIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetIamBindingState, opts ...pulumi.ResourceOption) (*TargetIamBinding, error) {
	var resource TargetIamBinding
	err := ctx.ReadResource("gcp:clouddeploy/targetIamBinding:TargetIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TargetIamBinding resources.
type targetIamBindingState struct {
	Condition *TargetIamBindingCondition `pulumi:"condition"`
	Etag      *string                    `pulumi:"etag"`
	Location  *string                    `pulumi:"location"`
	Members   []string                   `pulumi:"members"`
	Name      *string                    `pulumi:"name"`
	Project   *string                    `pulumi:"project"`
	Role      *string                    `pulumi:"role"`
}

type TargetIamBindingState struct {
	Condition TargetIamBindingConditionPtrInput
	Etag      pulumi.StringPtrInput
	Location  pulumi.StringPtrInput
	Members   pulumi.StringArrayInput
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringPtrInput
}

func (TargetIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetIamBindingState)(nil)).Elem()
}

type targetIamBindingArgs struct {
	Condition *TargetIamBindingCondition `pulumi:"condition"`
	Location  *string                    `pulumi:"location"`
	Members   []string                   `pulumi:"members"`
	Name      *string                    `pulumi:"name"`
	Project   *string                    `pulumi:"project"`
	Role      string                     `pulumi:"role"`
}

// The set of arguments for constructing a TargetIamBinding resource.
type TargetIamBindingArgs struct {
	Condition TargetIamBindingConditionPtrInput
	Location  pulumi.StringPtrInput
	Members   pulumi.StringArrayInput
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringInput
}

func (TargetIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetIamBindingArgs)(nil)).Elem()
}

type TargetIamBindingInput interface {
	pulumi.Input

	ToTargetIamBindingOutput() TargetIamBindingOutput
	ToTargetIamBindingOutputWithContext(ctx context.Context) TargetIamBindingOutput
}

func (*TargetIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetIamBinding)(nil)).Elem()
}

func (i *TargetIamBinding) ToTargetIamBindingOutput() TargetIamBindingOutput {
	return i.ToTargetIamBindingOutputWithContext(context.Background())
}

func (i *TargetIamBinding) ToTargetIamBindingOutputWithContext(ctx context.Context) TargetIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetIamBindingOutput)
}

// TargetIamBindingArrayInput is an input type that accepts TargetIamBindingArray and TargetIamBindingArrayOutput values.
// You can construct a concrete instance of `TargetIamBindingArrayInput` via:
//
//	TargetIamBindingArray{ TargetIamBindingArgs{...} }
type TargetIamBindingArrayInput interface {
	pulumi.Input

	ToTargetIamBindingArrayOutput() TargetIamBindingArrayOutput
	ToTargetIamBindingArrayOutputWithContext(context.Context) TargetIamBindingArrayOutput
}

type TargetIamBindingArray []TargetIamBindingInput

func (TargetIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetIamBinding)(nil)).Elem()
}

func (i TargetIamBindingArray) ToTargetIamBindingArrayOutput() TargetIamBindingArrayOutput {
	return i.ToTargetIamBindingArrayOutputWithContext(context.Background())
}

func (i TargetIamBindingArray) ToTargetIamBindingArrayOutputWithContext(ctx context.Context) TargetIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetIamBindingArrayOutput)
}

// TargetIamBindingMapInput is an input type that accepts TargetIamBindingMap and TargetIamBindingMapOutput values.
// You can construct a concrete instance of `TargetIamBindingMapInput` via:
//
//	TargetIamBindingMap{ "key": TargetIamBindingArgs{...} }
type TargetIamBindingMapInput interface {
	pulumi.Input

	ToTargetIamBindingMapOutput() TargetIamBindingMapOutput
	ToTargetIamBindingMapOutputWithContext(context.Context) TargetIamBindingMapOutput
}

type TargetIamBindingMap map[string]TargetIamBindingInput

func (TargetIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetIamBinding)(nil)).Elem()
}

func (i TargetIamBindingMap) ToTargetIamBindingMapOutput() TargetIamBindingMapOutput {
	return i.ToTargetIamBindingMapOutputWithContext(context.Background())
}

func (i TargetIamBindingMap) ToTargetIamBindingMapOutputWithContext(ctx context.Context) TargetIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetIamBindingMapOutput)
}

type TargetIamBindingOutput struct{ *pulumi.OutputState }

func (TargetIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetIamBinding)(nil)).Elem()
}

func (o TargetIamBindingOutput) ToTargetIamBindingOutput() TargetIamBindingOutput {
	return o
}

func (o TargetIamBindingOutput) ToTargetIamBindingOutputWithContext(ctx context.Context) TargetIamBindingOutput {
	return o
}

func (o TargetIamBindingOutput) Condition() TargetIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *TargetIamBinding) TargetIamBindingConditionPtrOutput { return v.Condition }).(TargetIamBindingConditionPtrOutput)
}

func (o TargetIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o TargetIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o TargetIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TargetIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o TargetIamBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetIamBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TargetIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o TargetIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type TargetIamBindingArrayOutput struct{ *pulumi.OutputState }

func (TargetIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetIamBinding)(nil)).Elem()
}

func (o TargetIamBindingArrayOutput) ToTargetIamBindingArrayOutput() TargetIamBindingArrayOutput {
	return o
}

func (o TargetIamBindingArrayOutput) ToTargetIamBindingArrayOutputWithContext(ctx context.Context) TargetIamBindingArrayOutput {
	return o
}

func (o TargetIamBindingArrayOutput) Index(i pulumi.IntInput) TargetIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TargetIamBinding {
		return vs[0].([]*TargetIamBinding)[vs[1].(int)]
	}).(TargetIamBindingOutput)
}

type TargetIamBindingMapOutput struct{ *pulumi.OutputState }

func (TargetIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetIamBinding)(nil)).Elem()
}

func (o TargetIamBindingMapOutput) ToTargetIamBindingMapOutput() TargetIamBindingMapOutput {
	return o
}

func (o TargetIamBindingMapOutput) ToTargetIamBindingMapOutputWithContext(ctx context.Context) TargetIamBindingMapOutput {
	return o
}

func (o TargetIamBindingMapOutput) MapIndex(k pulumi.StringInput) TargetIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TargetIamBinding {
		return vs[0].(map[string]*TargetIamBinding)[vs[1].(string)]
	}).(TargetIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TargetIamBindingInput)(nil)).Elem(), &TargetIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetIamBindingArrayInput)(nil)).Elem(), TargetIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetIamBindingMapInput)(nil)).Elem(), TargetIamBindingMap{})
	pulumi.RegisterOutputType(TargetIamBindingOutput{})
	pulumi.RegisterOutputType(TargetIamBindingArrayOutput{})
	pulumi.RegisterOutputType(TargetIamBindingMapOutput{})
}
