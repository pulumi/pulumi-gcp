// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityposture

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a deployment of a security posture on a resource. A posture contains user curated policy sets. A posture can
// be deployed on a project or on a folder or on an organization. To deploy a posture we need to populate the posture's name
// and its revisionId in the posture deployment configuration. Every update to a deployed posture generates a new revision_id.
// Thus, the updated revisionId should be used in the respective posture deployment's configuration to deploy that posture
// on a resource.
//
// To get more information about PostureDeployment, see:
// * How-to Guides
//   - [Create and deploy a posture](https://cloud.google.com/security-command-center/docs/how-to-use-security-posture)
//
// ## Import
//
// PostureDeployment can be imported using any of these accepted formats:
//
// * `{{parent}}/locations/{{location}}/postureDeployments/{{posture_deployment_id}}`
//
// When using the `pulumi import` command, PostureDeployment can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:securityposture/postureDeployment:PostureDeployment default {{parent}}/locations/{{location}}/postureDeployments/{{posture_deployment_id}}
// ```
type PostureDeployment struct {
	pulumi.CustomResourceState

	// Time the posture deployment was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the posture deployment.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// This is an output only optional field which will be filled in case when
	// PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
	// It denotes the desired posture to be deployed.
	DesiredPostureId pulumi.StringOutput `pulumi:"desiredPostureId"`
	// This is an output only optional field which will be filled in case when
	// PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
	// It denotes the desired posture revisionId to be deployed.
	DesiredPostureRevisionId pulumi.StringOutput `pulumi:"desiredPostureRevisionId"`
	// For Resource freshness validation (https://google.aip.dev/154)
	Etag pulumi.StringOutput `pulumi:"etag"`
	// This is a output only optional field which will be filled in case where
	// PostureDeployment enters a failure state like UPDATE_FAILED or
	// CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment's
	// CREATE/UPDATE/DELETE methods.
	FailureMessage pulumi.StringOutput `pulumi:"failureMessage"`
	// The location of the resource, eg. global`.
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of the posture deployment instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
	Parent pulumi.StringOutput `pulumi:"parent"`
	// ID of the posture deployment.
	//
	// ***
	PostureDeploymentId pulumi.StringOutput `pulumi:"postureDeploymentId"`
	// Relative name of the posture which needs to be deployed. It should be in the format:
	// organizations/{organization_id}/locations/{location}/postures/{posture_id}
	PostureId pulumi.StringOutput `pulumi:"postureId"`
	// Revision_id the posture which needs to be deployed.
	PostureRevisionId pulumi.StringOutput `pulumi:"postureRevisionId"`
	// If set, there are currently changes in flight to the posture deployment.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// State of the posture deployment. A posture deployment can be in the following terminal states:
	// ACTIVE, CREATE_FAILED, UPDATE_FAILED, DELETE_FAILED.
	State pulumi.StringOutput `pulumi:"state"`
	// The resource on which the posture should be deployed. This can be in one of the following formats:
	// projects/{project_number},
	// folders/{folder_number},
	// organizations/{organization_id}
	TargetResource pulumi.StringOutput `pulumi:"targetResource"`
	// Time the posture deployment was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewPostureDeployment registers a new resource with the given unique name, arguments, and options.
func NewPostureDeployment(ctx *pulumi.Context,
	name string, args *PostureDeploymentArgs, opts ...pulumi.ResourceOption) (*PostureDeployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	if args.PostureDeploymentId == nil {
		return nil, errors.New("invalid value for required argument 'PostureDeploymentId'")
	}
	if args.PostureId == nil {
		return nil, errors.New("invalid value for required argument 'PostureId'")
	}
	if args.PostureRevisionId == nil {
		return nil, errors.New("invalid value for required argument 'PostureRevisionId'")
	}
	if args.TargetResource == nil {
		return nil, errors.New("invalid value for required argument 'TargetResource'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PostureDeployment
	err := ctx.RegisterResource("gcp:securityposture/postureDeployment:PostureDeployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostureDeployment gets an existing PostureDeployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostureDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostureDeploymentState, opts ...pulumi.ResourceOption) (*PostureDeployment, error) {
	var resource PostureDeployment
	err := ctx.ReadResource("gcp:securityposture/postureDeployment:PostureDeployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostureDeployment resources.
type postureDeploymentState struct {
	// Time the posture deployment was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Description of the posture deployment.
	Description *string `pulumi:"description"`
	// This is an output only optional field which will be filled in case when
	// PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
	// It denotes the desired posture to be deployed.
	DesiredPostureId *string `pulumi:"desiredPostureId"`
	// This is an output only optional field which will be filled in case when
	// PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
	// It denotes the desired posture revisionId to be deployed.
	DesiredPostureRevisionId *string `pulumi:"desiredPostureRevisionId"`
	// For Resource freshness validation (https://google.aip.dev/154)
	Etag *string `pulumi:"etag"`
	// This is a output only optional field which will be filled in case where
	// PostureDeployment enters a failure state like UPDATE_FAILED or
	// CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment's
	// CREATE/UPDATE/DELETE methods.
	FailureMessage *string `pulumi:"failureMessage"`
	// The location of the resource, eg. global`.
	Location *string `pulumi:"location"`
	// Name of the posture deployment instance.
	Name *string `pulumi:"name"`
	// The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
	Parent *string `pulumi:"parent"`
	// ID of the posture deployment.
	//
	// ***
	PostureDeploymentId *string `pulumi:"postureDeploymentId"`
	// Relative name of the posture which needs to be deployed. It should be in the format:
	// organizations/{organization_id}/locations/{location}/postures/{posture_id}
	PostureId *string `pulumi:"postureId"`
	// Revision_id the posture which needs to be deployed.
	PostureRevisionId *string `pulumi:"postureRevisionId"`
	// If set, there are currently changes in flight to the posture deployment.
	Reconciling *bool `pulumi:"reconciling"`
	// State of the posture deployment. A posture deployment can be in the following terminal states:
	// ACTIVE, CREATE_FAILED, UPDATE_FAILED, DELETE_FAILED.
	State *string `pulumi:"state"`
	// The resource on which the posture should be deployed. This can be in one of the following formats:
	// projects/{project_number},
	// folders/{folder_number},
	// organizations/{organization_id}
	TargetResource *string `pulumi:"targetResource"`
	// Time the posture deployment was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type PostureDeploymentState struct {
	// Time the posture deployment was created in UTC.
	CreateTime pulumi.StringPtrInput
	// Description of the posture deployment.
	Description pulumi.StringPtrInput
	// This is an output only optional field which will be filled in case when
	// PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
	// It denotes the desired posture to be deployed.
	DesiredPostureId pulumi.StringPtrInput
	// This is an output only optional field which will be filled in case when
	// PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
	// It denotes the desired posture revisionId to be deployed.
	DesiredPostureRevisionId pulumi.StringPtrInput
	// For Resource freshness validation (https://google.aip.dev/154)
	Etag pulumi.StringPtrInput
	// This is a output only optional field which will be filled in case where
	// PostureDeployment enters a failure state like UPDATE_FAILED or
	// CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment's
	// CREATE/UPDATE/DELETE methods.
	FailureMessage pulumi.StringPtrInput
	// The location of the resource, eg. global`.
	Location pulumi.StringPtrInput
	// Name of the posture deployment instance.
	Name pulumi.StringPtrInput
	// The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
	Parent pulumi.StringPtrInput
	// ID of the posture deployment.
	//
	// ***
	PostureDeploymentId pulumi.StringPtrInput
	// Relative name of the posture which needs to be deployed. It should be in the format:
	// organizations/{organization_id}/locations/{location}/postures/{posture_id}
	PostureId pulumi.StringPtrInput
	// Revision_id the posture which needs to be deployed.
	PostureRevisionId pulumi.StringPtrInput
	// If set, there are currently changes in flight to the posture deployment.
	Reconciling pulumi.BoolPtrInput
	// State of the posture deployment. A posture deployment can be in the following terminal states:
	// ACTIVE, CREATE_FAILED, UPDATE_FAILED, DELETE_FAILED.
	State pulumi.StringPtrInput
	// The resource on which the posture should be deployed. This can be in one of the following formats:
	// projects/{project_number},
	// folders/{folder_number},
	// organizations/{organization_id}
	TargetResource pulumi.StringPtrInput
	// Time the posture deployment was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (PostureDeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*postureDeploymentState)(nil)).Elem()
}

type postureDeploymentArgs struct {
	// Description of the posture deployment.
	Description *string `pulumi:"description"`
	// The location of the resource, eg. global`.
	Location string `pulumi:"location"`
	// The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
	Parent string `pulumi:"parent"`
	// ID of the posture deployment.
	//
	// ***
	PostureDeploymentId string `pulumi:"postureDeploymentId"`
	// Relative name of the posture which needs to be deployed. It should be in the format:
	// organizations/{organization_id}/locations/{location}/postures/{posture_id}
	PostureId string `pulumi:"postureId"`
	// Revision_id the posture which needs to be deployed.
	PostureRevisionId string `pulumi:"postureRevisionId"`
	// The resource on which the posture should be deployed. This can be in one of the following formats:
	// projects/{project_number},
	// folders/{folder_number},
	// organizations/{organization_id}
	TargetResource string `pulumi:"targetResource"`
}

// The set of arguments for constructing a PostureDeployment resource.
type PostureDeploymentArgs struct {
	// Description of the posture deployment.
	Description pulumi.StringPtrInput
	// The location of the resource, eg. global`.
	Location pulumi.StringInput
	// The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
	Parent pulumi.StringInput
	// ID of the posture deployment.
	//
	// ***
	PostureDeploymentId pulumi.StringInput
	// Relative name of the posture which needs to be deployed. It should be in the format:
	// organizations/{organization_id}/locations/{location}/postures/{posture_id}
	PostureId pulumi.StringInput
	// Revision_id the posture which needs to be deployed.
	PostureRevisionId pulumi.StringInput
	// The resource on which the posture should be deployed. This can be in one of the following formats:
	// projects/{project_number},
	// folders/{folder_number},
	// organizations/{organization_id}
	TargetResource pulumi.StringInput
}

func (PostureDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postureDeploymentArgs)(nil)).Elem()
}

type PostureDeploymentInput interface {
	pulumi.Input

	ToPostureDeploymentOutput() PostureDeploymentOutput
	ToPostureDeploymentOutputWithContext(ctx context.Context) PostureDeploymentOutput
}

func (*PostureDeployment) ElementType() reflect.Type {
	return reflect.TypeOf((**PostureDeployment)(nil)).Elem()
}

func (i *PostureDeployment) ToPostureDeploymentOutput() PostureDeploymentOutput {
	return i.ToPostureDeploymentOutputWithContext(context.Background())
}

func (i *PostureDeployment) ToPostureDeploymentOutputWithContext(ctx context.Context) PostureDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostureDeploymentOutput)
}

// PostureDeploymentArrayInput is an input type that accepts PostureDeploymentArray and PostureDeploymentArrayOutput values.
// You can construct a concrete instance of `PostureDeploymentArrayInput` via:
//
//	PostureDeploymentArray{ PostureDeploymentArgs{...} }
type PostureDeploymentArrayInput interface {
	pulumi.Input

	ToPostureDeploymentArrayOutput() PostureDeploymentArrayOutput
	ToPostureDeploymentArrayOutputWithContext(context.Context) PostureDeploymentArrayOutput
}

type PostureDeploymentArray []PostureDeploymentInput

func (PostureDeploymentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostureDeployment)(nil)).Elem()
}

func (i PostureDeploymentArray) ToPostureDeploymentArrayOutput() PostureDeploymentArrayOutput {
	return i.ToPostureDeploymentArrayOutputWithContext(context.Background())
}

func (i PostureDeploymentArray) ToPostureDeploymentArrayOutputWithContext(ctx context.Context) PostureDeploymentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostureDeploymentArrayOutput)
}

// PostureDeploymentMapInput is an input type that accepts PostureDeploymentMap and PostureDeploymentMapOutput values.
// You can construct a concrete instance of `PostureDeploymentMapInput` via:
//
//	PostureDeploymentMap{ "key": PostureDeploymentArgs{...} }
type PostureDeploymentMapInput interface {
	pulumi.Input

	ToPostureDeploymentMapOutput() PostureDeploymentMapOutput
	ToPostureDeploymentMapOutputWithContext(context.Context) PostureDeploymentMapOutput
}

type PostureDeploymentMap map[string]PostureDeploymentInput

func (PostureDeploymentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostureDeployment)(nil)).Elem()
}

func (i PostureDeploymentMap) ToPostureDeploymentMapOutput() PostureDeploymentMapOutput {
	return i.ToPostureDeploymentMapOutputWithContext(context.Background())
}

func (i PostureDeploymentMap) ToPostureDeploymentMapOutputWithContext(ctx context.Context) PostureDeploymentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostureDeploymentMapOutput)
}

type PostureDeploymentOutput struct{ *pulumi.OutputState }

func (PostureDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostureDeployment)(nil)).Elem()
}

func (o PostureDeploymentOutput) ToPostureDeploymentOutput() PostureDeploymentOutput {
	return o
}

func (o PostureDeploymentOutput) ToPostureDeploymentOutputWithContext(ctx context.Context) PostureDeploymentOutput {
	return o
}

// Time the posture deployment was created in UTC.
func (o PostureDeploymentOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PostureDeployment) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the posture deployment.
func (o PostureDeploymentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostureDeployment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// This is an output only optional field which will be filled in case when
// PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
// It denotes the desired posture to be deployed.
func (o PostureDeploymentOutput) DesiredPostureId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostureDeployment) pulumi.StringOutput { return v.DesiredPostureId }).(pulumi.StringOutput)
}

// This is an output only optional field which will be filled in case when
// PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
// It denotes the desired posture revisionId to be deployed.
func (o PostureDeploymentOutput) DesiredPostureRevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostureDeployment) pulumi.StringOutput { return v.DesiredPostureRevisionId }).(pulumi.StringOutput)
}

// For Resource freshness validation (https://google.aip.dev/154)
func (o PostureDeploymentOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *PostureDeployment) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// This is a output only optional field which will be filled in case where
// PostureDeployment enters a failure state like UPDATE_FAILED or
// CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment's
// CREATE/UPDATE/DELETE methods.
func (o PostureDeploymentOutput) FailureMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *PostureDeployment) pulumi.StringOutput { return v.FailureMessage }).(pulumi.StringOutput)
}

// The location of the resource, eg. global`.
func (o PostureDeploymentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PostureDeployment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of the posture deployment instance.
func (o PostureDeploymentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PostureDeployment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
func (o PostureDeploymentOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *PostureDeployment) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// ID of the posture deployment.
//
// ***
func (o PostureDeploymentOutput) PostureDeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostureDeployment) pulumi.StringOutput { return v.PostureDeploymentId }).(pulumi.StringOutput)
}

// Relative name of the posture which needs to be deployed. It should be in the format:
// organizations/{organization_id}/locations/{location}/postures/{posture_id}
func (o PostureDeploymentOutput) PostureId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostureDeployment) pulumi.StringOutput { return v.PostureId }).(pulumi.StringOutput)
}

// Revision_id the posture which needs to be deployed.
func (o PostureDeploymentOutput) PostureRevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostureDeployment) pulumi.StringOutput { return v.PostureRevisionId }).(pulumi.StringOutput)
}

// If set, there are currently changes in flight to the posture deployment.
func (o PostureDeploymentOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *PostureDeployment) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// State of the posture deployment. A posture deployment can be in the following terminal states:
// ACTIVE, CREATE_FAILED, UPDATE_FAILED, DELETE_FAILED.
func (o PostureDeploymentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *PostureDeployment) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The resource on which the posture should be deployed. This can be in one of the following formats:
// projects/{project_number},
// folders/{folder_number},
// organizations/{organization_id}
func (o PostureDeploymentOutput) TargetResource() pulumi.StringOutput {
	return o.ApplyT(func(v *PostureDeployment) pulumi.StringOutput { return v.TargetResource }).(pulumi.StringOutput)
}

// Time the posture deployment was updated in UTC.
func (o PostureDeploymentOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PostureDeployment) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type PostureDeploymentArrayOutput struct{ *pulumi.OutputState }

func (PostureDeploymentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostureDeployment)(nil)).Elem()
}

func (o PostureDeploymentArrayOutput) ToPostureDeploymentArrayOutput() PostureDeploymentArrayOutput {
	return o
}

func (o PostureDeploymentArrayOutput) ToPostureDeploymentArrayOutputWithContext(ctx context.Context) PostureDeploymentArrayOutput {
	return o
}

func (o PostureDeploymentArrayOutput) Index(i pulumi.IntInput) PostureDeploymentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostureDeployment {
		return vs[0].([]*PostureDeployment)[vs[1].(int)]
	}).(PostureDeploymentOutput)
}

type PostureDeploymentMapOutput struct{ *pulumi.OutputState }

func (PostureDeploymentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostureDeployment)(nil)).Elem()
}

func (o PostureDeploymentMapOutput) ToPostureDeploymentMapOutput() PostureDeploymentMapOutput {
	return o
}

func (o PostureDeploymentMapOutput) ToPostureDeploymentMapOutputWithContext(ctx context.Context) PostureDeploymentMapOutput {
	return o
}

func (o PostureDeploymentMapOutput) MapIndex(k pulumi.StringInput) PostureDeploymentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostureDeployment {
		return vs[0].(map[string]*PostureDeployment)[vs[1].(string)]
	}).(PostureDeploymentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostureDeploymentInput)(nil)).Elem(), &PostureDeployment{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostureDeploymentArrayInput)(nil)).Elem(), PostureDeploymentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostureDeploymentMapInput)(nil)).Elem(), PostureDeploymentMap{})
	pulumi.RegisterOutputType(PostureDeploymentOutput{})
	pulumi.RegisterOutputType(PostureDeploymentArrayOutput{})
	pulumi.RegisterOutputType(PostureDeploymentMapOutput{})
}
