// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package runtimeconfig

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/configs/{{config}} * {{project}}/{{config}} * {{config}} Any variables not passed in the import command will be taken from the provider configuration. Runtime Configurator config IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//  $ pulumi import gcp:runtimeconfig/configIamBinding:ConfigIamBinding editor "projects/{{project}}/configs/{{config}} roles/viewer user:jane@example.com"
// ```
//
//  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//  $ pulumi import gcp:runtimeconfig/configIamBinding:ConfigIamBinding editor "projects/{{project}}/configs/{{config}} roles/viewer"
// ```
//
//  IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//  $ pulumi import gcp:runtimeconfig/configIamBinding:ConfigIamBinding editor projects/{{project}}/configs/{{config}}
// ```
//
//  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ConfigIamBinding struct {
	pulumi.CustomResourceState

	Condition ConfigIamBindingConditionPtrOutput `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	Config pulumi.StringOutput `pulumi:"config"`
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringOutput      `pulumi:"etag"`
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `runtimeconfig.ConfigIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewConfigIamBinding registers a new resource with the given unique name, arguments, and options.
func NewConfigIamBinding(ctx *pulumi.Context,
	name string, args *ConfigIamBindingArgs, opts ...pulumi.ResourceOption) (*ConfigIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource ConfigIamBinding
	err := ctx.RegisterResource("gcp:runtimeconfig/configIamBinding:ConfigIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigIamBinding gets an existing ConfigIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigIamBindingState, opts ...pulumi.ResourceOption) (*ConfigIamBinding, error) {
	var resource ConfigIamBinding
	err := ctx.ReadResource("gcp:runtimeconfig/configIamBinding:ConfigIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigIamBinding resources.
type configIamBindingState struct {
	Condition *ConfigIamBindingCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	Config *string `pulumi:"config"`
	// (Computed) The etag of the IAM policy.
	Etag    *string  `pulumi:"etag"`
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `runtimeconfig.ConfigIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type ConfigIamBindingState struct {
	Condition ConfigIamBindingConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Config pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringPtrInput
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `runtimeconfig.ConfigIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (ConfigIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*configIamBindingState)(nil)).Elem()
}

type configIamBindingArgs struct {
	Condition *ConfigIamBindingCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	Config  string   `pulumi:"config"`
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `runtimeconfig.ConfigIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a ConfigIamBinding resource.
type ConfigIamBindingArgs struct {
	Condition ConfigIamBindingConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Config  pulumi.StringInput
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `runtimeconfig.ConfigIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (ConfigIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configIamBindingArgs)(nil)).Elem()
}

type ConfigIamBindingInput interface {
	pulumi.Input

	ToConfigIamBindingOutput() ConfigIamBindingOutput
	ToConfigIamBindingOutputWithContext(ctx context.Context) ConfigIamBindingOutput
}

func (*ConfigIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigIamBinding)(nil)).Elem()
}

func (i *ConfigIamBinding) ToConfigIamBindingOutput() ConfigIamBindingOutput {
	return i.ToConfigIamBindingOutputWithContext(context.Background())
}

func (i *ConfigIamBinding) ToConfigIamBindingOutputWithContext(ctx context.Context) ConfigIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigIamBindingOutput)
}

// ConfigIamBindingArrayInput is an input type that accepts ConfigIamBindingArray and ConfigIamBindingArrayOutput values.
// You can construct a concrete instance of `ConfigIamBindingArrayInput` via:
//
//          ConfigIamBindingArray{ ConfigIamBindingArgs{...} }
type ConfigIamBindingArrayInput interface {
	pulumi.Input

	ToConfigIamBindingArrayOutput() ConfigIamBindingArrayOutput
	ToConfigIamBindingArrayOutputWithContext(context.Context) ConfigIamBindingArrayOutput
}

type ConfigIamBindingArray []ConfigIamBindingInput

func (ConfigIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigIamBinding)(nil)).Elem()
}

func (i ConfigIamBindingArray) ToConfigIamBindingArrayOutput() ConfigIamBindingArrayOutput {
	return i.ToConfigIamBindingArrayOutputWithContext(context.Background())
}

func (i ConfigIamBindingArray) ToConfigIamBindingArrayOutputWithContext(ctx context.Context) ConfigIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigIamBindingArrayOutput)
}

// ConfigIamBindingMapInput is an input type that accepts ConfigIamBindingMap and ConfigIamBindingMapOutput values.
// You can construct a concrete instance of `ConfigIamBindingMapInput` via:
//
//          ConfigIamBindingMap{ "key": ConfigIamBindingArgs{...} }
type ConfigIamBindingMapInput interface {
	pulumi.Input

	ToConfigIamBindingMapOutput() ConfigIamBindingMapOutput
	ToConfigIamBindingMapOutputWithContext(context.Context) ConfigIamBindingMapOutput
}

type ConfigIamBindingMap map[string]ConfigIamBindingInput

func (ConfigIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigIamBinding)(nil)).Elem()
}

func (i ConfigIamBindingMap) ToConfigIamBindingMapOutput() ConfigIamBindingMapOutput {
	return i.ToConfigIamBindingMapOutputWithContext(context.Background())
}

func (i ConfigIamBindingMap) ToConfigIamBindingMapOutputWithContext(ctx context.Context) ConfigIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigIamBindingMapOutput)
}

type ConfigIamBindingOutput struct{ *pulumi.OutputState }

func (ConfigIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigIamBinding)(nil)).Elem()
}

func (o ConfigIamBindingOutput) ToConfigIamBindingOutput() ConfigIamBindingOutput {
	return o
}

func (o ConfigIamBindingOutput) ToConfigIamBindingOutputWithContext(ctx context.Context) ConfigIamBindingOutput {
	return o
}

type ConfigIamBindingArrayOutput struct{ *pulumi.OutputState }

func (ConfigIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigIamBinding)(nil)).Elem()
}

func (o ConfigIamBindingArrayOutput) ToConfigIamBindingArrayOutput() ConfigIamBindingArrayOutput {
	return o
}

func (o ConfigIamBindingArrayOutput) ToConfigIamBindingArrayOutputWithContext(ctx context.Context) ConfigIamBindingArrayOutput {
	return o
}

func (o ConfigIamBindingArrayOutput) Index(i pulumi.IntInput) ConfigIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigIamBinding {
		return vs[0].([]*ConfigIamBinding)[vs[1].(int)]
	}).(ConfigIamBindingOutput)
}

type ConfigIamBindingMapOutput struct{ *pulumi.OutputState }

func (ConfigIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigIamBinding)(nil)).Elem()
}

func (o ConfigIamBindingMapOutput) ToConfigIamBindingMapOutput() ConfigIamBindingMapOutput {
	return o
}

func (o ConfigIamBindingMapOutput) ToConfigIamBindingMapOutputWithContext(ctx context.Context) ConfigIamBindingMapOutput {
	return o
}

func (o ConfigIamBindingMapOutput) MapIndex(k pulumi.StringInput) ConfigIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigIamBinding {
		return vs[0].(map[string]*ConfigIamBinding)[vs[1].(string)]
	}).(ConfigIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigIamBindingInput)(nil)).Elem(), &ConfigIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigIamBindingArrayInput)(nil)).Elem(), ConfigIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigIamBindingMapInput)(nil)).Elem(), ConfigIamBindingMap{})
	pulumi.RegisterOutputType(ConfigIamBindingOutput{})
	pulumi.RegisterOutputType(ConfigIamBindingArrayOutput{})
	pulumi.RegisterOutputType(ConfigIamBindingMapOutput{})
}
