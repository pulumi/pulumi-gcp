// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package runtimeconfig

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Three different resources help you manage your IAM policy for Runtime Configurator Config. Each of these resources serves a different use case:
//
// * `runtimeconfig.ConfigIamPolicy`: Authoritative. Sets the IAM policy for the config and replaces any existing policy already attached.
// * `runtimeconfig.ConfigIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the config are preserved.
// * `runtimeconfig.ConfigIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the config are preserved.
//
// > **Note:** `runtimeconfig.ConfigIamPolicy` **cannot** be used in conjunction with `runtimeconfig.ConfigIamBinding` and `runtimeconfig.ConfigIamMember` or they will fight over what your policy should be.
//
// > **Note:** `runtimeconfig.ConfigIamBinding` resources **can be** used in conjunction with `runtimeconfig.ConfigIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_runtimeconfig\_config\_iam\_policy
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/organizations"
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/runtimeconfig"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
// 			Bindings: []organizations.GetIAMPolicyBinding{
// 				organizations.GetIAMPolicyBinding{
// 					Role: "roles/viewer",
// 					Members: []string{
// 						"user:jane@example.com",
// 					},
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = runtimeconfig.NewConfigIamPolicy(ctx, "policy", &runtimeconfig.ConfigIamPolicyArgs{
// 			Project:    pulumi.Any(google_runtimeconfig_config.Config.Project),
// 			Config:     pulumi.Any(google_runtimeconfig_config.Config.Name),
// 			PolicyData: pulumi.String(admin.PolicyData),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## google\_runtimeconfig\_config\_iam\_binding
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/runtimeconfig"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := runtimeconfig.NewConfigIamBinding(ctx, "binding", &runtimeconfig.ConfigIamBindingArgs{
// 			Project: pulumi.Any(google_runtimeconfig_config.Config.Project),
// 			Config:  pulumi.Any(google_runtimeconfig_config.Config.Name),
// 			Role:    pulumi.String("roles/viewer"),
// 			Members: pulumi.StringArray{
// 				pulumi.String("user:jane@example.com"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## google\_runtimeconfig\_config\_iam\_member
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/runtimeconfig"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := runtimeconfig.NewConfigIamMember(ctx, "member", &runtimeconfig.ConfigIamMemberArgs{
// 			Project: pulumi.Any(google_runtimeconfig_config.Config.Project),
// 			Config:  pulumi.Any(google_runtimeconfig_config.Config.Name),
// 			Role:    pulumi.String("roles/viewer"),
// 			Member:  pulumi.String("user:jane@example.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/configs/{{config}} * {{project}}/{{config}} * {{config}} Any variables not passed in the import command will be taken from the provider configuration. Runtime Configurator config IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//  $ pulumi import gcp:runtimeconfig/configIamMember:ConfigIamMember editor "projects/{{project}}/configs/{{config}} roles/viewer user:jane@example.com"
// ```
//
//  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//  $ pulumi import gcp:runtimeconfig/configIamMember:ConfigIamMember editor "projects/{{project}}/configs/{{config}} roles/viewer"
// ```
//
//  IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//  $ pulumi import gcp:runtimeconfig/configIamMember:ConfigIamMember editor projects/{{project}}/configs/{{config}}
// ```
//
//  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ConfigIamMember struct {
	pulumi.CustomResourceState

	Condition ConfigIamMemberConditionPtrOutput `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	Config pulumi.StringOutput `pulumi:"config"`
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringOutput `pulumi:"etag"`
	Member pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `runtimeconfig.ConfigIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewConfigIamMember registers a new resource with the given unique name, arguments, and options.
func NewConfigIamMember(ctx *pulumi.Context,
	name string, args *ConfigIamMemberArgs, opts ...pulumi.ResourceOption) (*ConfigIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource ConfigIamMember
	err := ctx.RegisterResource("gcp:runtimeconfig/configIamMember:ConfigIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigIamMember gets an existing ConfigIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigIamMemberState, opts ...pulumi.ResourceOption) (*ConfigIamMember, error) {
	var resource ConfigIamMember
	err := ctx.ReadResource("gcp:runtimeconfig/configIamMember:ConfigIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigIamMember resources.
type configIamMemberState struct {
	Condition *ConfigIamMemberCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	Config *string `pulumi:"config"`
	// (Computed) The etag of the IAM policy.
	Etag   *string `pulumi:"etag"`
	Member *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `runtimeconfig.ConfigIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type ConfigIamMemberState struct {
	Condition ConfigIamMemberConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Config pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringPtrInput
	Member pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `runtimeconfig.ConfigIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (ConfigIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*configIamMemberState)(nil)).Elem()
}

type configIamMemberArgs struct {
	Condition *ConfigIamMemberCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	Config string `pulumi:"config"`
	Member string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `runtimeconfig.ConfigIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a ConfigIamMember resource.
type ConfigIamMemberArgs struct {
	Condition ConfigIamMemberConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Config pulumi.StringInput
	Member pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `runtimeconfig.ConfigIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (ConfigIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configIamMemberArgs)(nil)).Elem()
}

type ConfigIamMemberInput interface {
	pulumi.Input

	ToConfigIamMemberOutput() ConfigIamMemberOutput
	ToConfigIamMemberOutputWithContext(ctx context.Context) ConfigIamMemberOutput
}

func (*ConfigIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigIamMember)(nil))
}

func (i *ConfigIamMember) ToConfigIamMemberOutput() ConfigIamMemberOutput {
	return i.ToConfigIamMemberOutputWithContext(context.Background())
}

func (i *ConfigIamMember) ToConfigIamMemberOutputWithContext(ctx context.Context) ConfigIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigIamMemberOutput)
}

func (i *ConfigIamMember) ToConfigIamMemberPtrOutput() ConfigIamMemberPtrOutput {
	return i.ToConfigIamMemberPtrOutputWithContext(context.Background())
}

func (i *ConfigIamMember) ToConfigIamMemberPtrOutputWithContext(ctx context.Context) ConfigIamMemberPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigIamMemberPtrOutput)
}

type ConfigIamMemberPtrInput interface {
	pulumi.Input

	ToConfigIamMemberPtrOutput() ConfigIamMemberPtrOutput
	ToConfigIamMemberPtrOutputWithContext(ctx context.Context) ConfigIamMemberPtrOutput
}

type configIamMemberPtrType ConfigIamMemberArgs

func (*configIamMemberPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigIamMember)(nil))
}

func (i *configIamMemberPtrType) ToConfigIamMemberPtrOutput() ConfigIamMemberPtrOutput {
	return i.ToConfigIamMemberPtrOutputWithContext(context.Background())
}

func (i *configIamMemberPtrType) ToConfigIamMemberPtrOutputWithContext(ctx context.Context) ConfigIamMemberPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigIamMemberPtrOutput)
}

// ConfigIamMemberArrayInput is an input type that accepts ConfigIamMemberArray and ConfigIamMemberArrayOutput values.
// You can construct a concrete instance of `ConfigIamMemberArrayInput` via:
//
//          ConfigIamMemberArray{ ConfigIamMemberArgs{...} }
type ConfigIamMemberArrayInput interface {
	pulumi.Input

	ToConfigIamMemberArrayOutput() ConfigIamMemberArrayOutput
	ToConfigIamMemberArrayOutputWithContext(context.Context) ConfigIamMemberArrayOutput
}

type ConfigIamMemberArray []ConfigIamMemberInput

func (ConfigIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ConfigIamMember)(nil))
}

func (i ConfigIamMemberArray) ToConfigIamMemberArrayOutput() ConfigIamMemberArrayOutput {
	return i.ToConfigIamMemberArrayOutputWithContext(context.Background())
}

func (i ConfigIamMemberArray) ToConfigIamMemberArrayOutputWithContext(ctx context.Context) ConfigIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigIamMemberArrayOutput)
}

// ConfigIamMemberMapInput is an input type that accepts ConfigIamMemberMap and ConfigIamMemberMapOutput values.
// You can construct a concrete instance of `ConfigIamMemberMapInput` via:
//
//          ConfigIamMemberMap{ "key": ConfigIamMemberArgs{...} }
type ConfigIamMemberMapInput interface {
	pulumi.Input

	ToConfigIamMemberMapOutput() ConfigIamMemberMapOutput
	ToConfigIamMemberMapOutputWithContext(context.Context) ConfigIamMemberMapOutput
}

type ConfigIamMemberMap map[string]ConfigIamMemberInput

func (ConfigIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ConfigIamMember)(nil))
}

func (i ConfigIamMemberMap) ToConfigIamMemberMapOutput() ConfigIamMemberMapOutput {
	return i.ToConfigIamMemberMapOutputWithContext(context.Background())
}

func (i ConfigIamMemberMap) ToConfigIamMemberMapOutputWithContext(ctx context.Context) ConfigIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigIamMemberMapOutput)
}

type ConfigIamMemberOutput struct {
	*pulumi.OutputState
}

func (ConfigIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigIamMember)(nil))
}

func (o ConfigIamMemberOutput) ToConfigIamMemberOutput() ConfigIamMemberOutput {
	return o
}

func (o ConfigIamMemberOutput) ToConfigIamMemberOutputWithContext(ctx context.Context) ConfigIamMemberOutput {
	return o
}

func (o ConfigIamMemberOutput) ToConfigIamMemberPtrOutput() ConfigIamMemberPtrOutput {
	return o.ToConfigIamMemberPtrOutputWithContext(context.Background())
}

func (o ConfigIamMemberOutput) ToConfigIamMemberPtrOutputWithContext(ctx context.Context) ConfigIamMemberPtrOutput {
	return o.ApplyT(func(v ConfigIamMember) *ConfigIamMember {
		return &v
	}).(ConfigIamMemberPtrOutput)
}

type ConfigIamMemberPtrOutput struct {
	*pulumi.OutputState
}

func (ConfigIamMemberPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigIamMember)(nil))
}

func (o ConfigIamMemberPtrOutput) ToConfigIamMemberPtrOutput() ConfigIamMemberPtrOutput {
	return o
}

func (o ConfigIamMemberPtrOutput) ToConfigIamMemberPtrOutputWithContext(ctx context.Context) ConfigIamMemberPtrOutput {
	return o
}

type ConfigIamMemberArrayOutput struct{ *pulumi.OutputState }

func (ConfigIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigIamMember)(nil))
}

func (o ConfigIamMemberArrayOutput) ToConfigIamMemberArrayOutput() ConfigIamMemberArrayOutput {
	return o
}

func (o ConfigIamMemberArrayOutput) ToConfigIamMemberArrayOutputWithContext(ctx context.Context) ConfigIamMemberArrayOutput {
	return o
}

func (o ConfigIamMemberArrayOutput) Index(i pulumi.IntInput) ConfigIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigIamMember {
		return vs[0].([]ConfigIamMember)[vs[1].(int)]
	}).(ConfigIamMemberOutput)
}

type ConfigIamMemberMapOutput struct{ *pulumi.OutputState }

func (ConfigIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ConfigIamMember)(nil))
}

func (o ConfigIamMemberMapOutput) ToConfigIamMemberMapOutput() ConfigIamMemberMapOutput {
	return o
}

func (o ConfigIamMemberMapOutput) ToConfigIamMemberMapOutputWithContext(ctx context.Context) ConfigIamMemberMapOutput {
	return o
}

func (o ConfigIamMemberMapOutput) MapIndex(k pulumi.StringInput) ConfigIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ConfigIamMember {
		return vs[0].(map[string]ConfigIamMember)[vs[1].(string)]
	}).(ConfigIamMemberOutput)
}

func init() {
	pulumi.RegisterOutputType(ConfigIamMemberOutput{})
	pulumi.RegisterOutputType(ConfigIamMemberPtrOutput{})
	pulumi.RegisterOutputType(ConfigIamMemberArrayOutput{})
	pulumi.RegisterOutputType(ConfigIamMemberMapOutput{})
}
