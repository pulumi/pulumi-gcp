// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificateauthority

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A CertificateAuthority represents an individual Certificate Authority. A
// CertificateAuthority can be used to create Certificates.
//
// To get more information about CertificateAuthority, see:
//
// * [API documentation](https://cloud.google.com/certificate-authority-service/docs/reference/rest)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/certificate-authority-service)
//
// > **Warning:** On newer versions of the provider, you must explicitly set `deletion_protection=false`
// (and run `pulumi up` to write the field to state) in order to destroy a CertificateAuthority.
// It is recommended to not set this field (or set it to true) until you're ready to destroy.
//
// ## Example Usage
//
// ### Privateca Certificate Authority Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := certificateauthority.NewAuthority(ctx, "default", &certificateauthority.AuthorityArgs{
//				Pool:                   pulumi.String("ca-pool"),
//				CertificateAuthorityId: pulumi.String("my-certificate-authority"),
//				Location:               pulumi.String("us-central1"),
//				DeletionProtection:     pulumi.Bool(true),
//				Config: &certificateauthority.AuthorityConfigArgs{
//					SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
//						Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
//							Organization: pulumi.String("ACME"),
//							CommonName:   pulumi.String("my-certificate-authority"),
//						},
//					},
//					X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
//						CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
//							IsCa: pulumi.Bool(true),
//						},
//						KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
//							BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
//								CertSign: pulumi.Bool(true),
//								CrlSign:  pulumi.Bool(true),
//							},
//							ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{},
//						},
//					},
//				},
//				Lifetime: pulumi.Sprintf("%vs", 10*365*24*3600),
//				KeySpec: &certificateauthority.AuthorityKeySpecArgs{
//					Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Privateca Certificate Authority Subordinate
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			root_ca, err := certificateauthority.NewAuthority(ctx, "root-ca", &certificateauthority.AuthorityArgs{
//				Pool:                   pulumi.String("ca-pool"),
//				CertificateAuthorityId: pulumi.String("my-certificate-authority-root"),
//				Location:               pulumi.String("us-central1"),
//				Config: &certificateauthority.AuthorityConfigArgs{
//					SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
//						Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
//							Organization: pulumi.String("ACME"),
//							CommonName:   pulumi.String("my-certificate-authority"),
//						},
//					},
//					X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
//						CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
//							IsCa: pulumi.Bool(true),
//						},
//						KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
//							BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
//								CertSign: pulumi.Bool(true),
//								CrlSign:  pulumi.Bool(true),
//							},
//							ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{},
//						},
//					},
//				},
//				KeySpec: &certificateauthority.AuthorityKeySpecArgs{
//					Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
//				},
//				DeletionProtection:                 pulumi.Bool(false),
//				SkipGracePeriod:                    pulumi.Bool(true),
//				IgnoreActiveCertificatesOnDeletion: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = certificateauthority.NewAuthority(ctx, "default", &certificateauthority.AuthorityArgs{
//				Pool:                   pulumi.String("ca-pool"),
//				CertificateAuthorityId: pulumi.String("my-certificate-authority-sub"),
//				Location:               pulumi.String("us-central1"),
//				DeletionProtection:     pulumi.Bool(true),
//				SubordinateConfig: &certificateauthority.AuthoritySubordinateConfigArgs{
//					CertificateAuthority: root_ca.Name,
//				},
//				Config: &certificateauthority.AuthorityConfigArgs{
//					SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
//						Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
//							Organization: pulumi.String("ACME"),
//							CommonName:   pulumi.String("my-subordinate-authority"),
//						},
//					},
//					X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
//						CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
//							IsCa:                    pulumi.Bool(true),
//							ZeroMaxIssuerPathLength: pulumi.Bool(true),
//						},
//						KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
//							BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
//								CertSign: pulumi.Bool(true),
//								CrlSign:  pulumi.Bool(true),
//							},
//							ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{},
//						},
//					},
//				},
//				Lifetime: pulumi.Sprintf("%vs", 5*365*24*3600),
//				KeySpec: &certificateauthority.AuthorityKeySpecArgs{
//					Algorithm: pulumi.String("RSA_PKCS1_2048_SHA256"),
//				},
//				Type: pulumi.String("SUBORDINATE"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Privateca Certificate Authority Byo Key
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			privatecaSa, err := projects.NewServiceIdentity(ctx, "privateca_sa", &projects.ServiceIdentityArgs{
//				Service: pulumi.String("privateca.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			privatecaSaKeyuserSignerverifier, err := kms.NewCryptoKeyIAMMember(ctx, "privateca_sa_keyuser_signerverifier", &kms.CryptoKeyIAMMemberArgs{
//				CryptoKeyId: pulumi.String("projects/keys-project/locations/us-central1/keyRings/key-ring/cryptoKeys/crypto-key"),
//				Role:        pulumi.String("roles/cloudkms.signerVerifier"),
//				Member:      privatecaSa.Member,
//			})
//			if err != nil {
//				return err
//			}
//			privatecaSaKeyuserViewer, err := kms.NewCryptoKeyIAMMember(ctx, "privateca_sa_keyuser_viewer", &kms.CryptoKeyIAMMemberArgs{
//				CryptoKeyId: pulumi.String("projects/keys-project/locations/us-central1/keyRings/key-ring/cryptoKeys/crypto-key"),
//				Role:        pulumi.String("roles/viewer"),
//				Member:      privatecaSa.Member,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = certificateauthority.NewAuthority(ctx, "default", &certificateauthority.AuthorityArgs{
//				Pool:                   pulumi.String("ca-pool"),
//				CertificateAuthorityId: pulumi.String("my-certificate-authority"),
//				Location:               pulumi.String("us-central1"),
//				DeletionProtection:     pulumi.Bool(true),
//				KeySpec: &certificateauthority.AuthorityKeySpecArgs{
//					CloudKmsKeyVersion: pulumi.String("projects/keys-project/locations/us-central1/keyRings/key-ring/cryptoKeys/crypto-key/cryptoKeyVersions/1"),
//				},
//				Config: &certificateauthority.AuthorityConfigArgs{
//					SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
//						Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
//							Organization: pulumi.String("Example, Org."),
//							CommonName:   pulumi.String("Example Authority"),
//						},
//					},
//					X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
//						CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
//							IsCa: pulumi.Bool(true),
//						},
//						KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
//							BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
//								CertSign: pulumi.Bool(true),
//								CrlSign:  pulumi.Bool(true),
//							},
//							ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{},
//						},
//						NameConstraints: &certificateauthority.AuthorityConfigX509ConfigNameConstraintsArgs{
//							Critical: pulumi.Bool(true),
//							PermittedDnsNames: pulumi.StringArray{
//								pulumi.String("*.example.com"),
//							},
//							ExcludedDnsNames: pulumi.StringArray{
//								pulumi.String("*.deny.example.com"),
//							},
//							PermittedIpRanges: pulumi.StringArray{
//								pulumi.String("10.0.0.0/8"),
//							},
//							ExcludedIpRanges: pulumi.StringArray{
//								pulumi.String("10.1.1.0/24"),
//							},
//							PermittedEmailAddresses: pulumi.StringArray{
//								pulumi.String(".example.com"),
//							},
//							ExcludedEmailAddresses: pulumi.StringArray{
//								pulumi.String(".deny.example.com"),
//							},
//							PermittedUris: pulumi.StringArray{
//								pulumi.String(".example.com"),
//							},
//							ExcludedUris: pulumi.StringArray{
//								pulumi.String(".deny.example.com"),
//							},
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				privatecaSaKeyuserSignerverifier,
//				privatecaSaKeyuserViewer,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Privateca Certificate Authority Custom Ski
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := certificateauthority.NewAuthority(ctx, "default", &certificateauthority.AuthorityArgs{
//				Pool:                   pulumi.String("ca-pool"),
//				CertificateAuthorityId: pulumi.String("my-certificate-authority"),
//				Location:               pulumi.String("us-central1"),
//				DeletionProtection:     pulumi.Bool(true),
//				Config: &certificateauthority.AuthorityConfigArgs{
//					SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
//						Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
//							Organization: pulumi.String("ACME"),
//							CommonName:   pulumi.String("my-certificate-authority"),
//						},
//					},
//					SubjectKeyId: &certificateauthority.AuthorityConfigSubjectKeyIdArgs{
//						KeyId: pulumi.String("4cf3372289b1d411b999dbb9ebcd44744b6b2fca"),
//					},
//					X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
//						CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
//							IsCa: pulumi.Bool(true),
//						},
//						KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
//							BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
//								CertSign: pulumi.Bool(true),
//								CrlSign:  pulumi.Bool(true),
//							},
//							ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{},
//						},
//					},
//				},
//				Lifetime: pulumi.Sprintf("%vs", 10*365*24*3600),
//				KeySpec: &certificateauthority.AuthorityKeySpecArgs{
//					CloudKmsKeyVersion: pulumi.String("projects/keys-project/locations/us-central1/keyRings/key-ring/cryptoKeys/crypto-key/cryptoKeyVersions/1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Privateca Certificate Authority Basic With Custom Cdp Aia Urls
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := certificateauthority.NewAuthority(ctx, "default", &certificateauthority.AuthorityArgs{
//				Pool:                   pulumi.String("ca-pool"),
//				CertificateAuthorityId: pulumi.String("my-certificate-authority"),
//				Location:               pulumi.String("us-central1"),
//				DeletionProtection:     pulumi.Bool(true),
//				Config: &certificateauthority.AuthorityConfigArgs{
//					SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
//						Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
//							Organization: pulumi.String("ACME"),
//							CommonName:   pulumi.String("my-certificate-authority"),
//						},
//					},
//					X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
//						CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
//							IsCa: pulumi.Bool(true),
//						},
//						KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
//							BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
//								CertSign: pulumi.Bool(true),
//								CrlSign:  pulumi.Bool(true),
//							},
//							ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{},
//						},
//					},
//				},
//				Lifetime: pulumi.Sprintf("%vs", 10*365*24*3600),
//				KeySpec: &certificateauthority.AuthorityKeySpecArgs{
//					Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
//				},
//				UserDefinedAccessUrls: &certificateauthority.AuthorityUserDefinedAccessUrlsArgs{
//					AiaIssuingCertificateUrls: pulumi.StringArray{
//						pulumi.String("http://example.com/ca.crt"),
//						pulumi.String("http://example.com/anotherca.crt"),
//					},
//					CrlAccessUrls: pulumi.StringArray{
//						pulumi.String("http://example.com/crl1.crt"),
//						pulumi.String("http://example.com/crl2.crt"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CertificateAuthority can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/caPools/{{pool}}/certificateAuthorities/{{certificate_authority_id}}`
//
// * `{{project}}/{{location}}/{{pool}}/{{certificate_authority_id}}`
//
// * `{{location}}/{{pool}}/{{certificate_authority_id}}`
//
// When using the `pulumi import` command, CertificateAuthority can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:certificateauthority/authority:Authority default projects/{{project}}/locations/{{location}}/caPools/{{pool}}/certificateAuthorities/{{certificate_authority_id}}
// ```
//
// ```sh
// $ pulumi import gcp:certificateauthority/authority:Authority default {{project}}/{{location}}/{{pool}}/{{certificate_authority_id}}
// ```
//
// ```sh
// $ pulumi import gcp:certificateauthority/authority:Authority default {{location}}/{{pool}}/{{certificate_authority_id}}
// ```
type Authority struct {
	pulumi.CustomResourceState

	// URLs for accessing content published by this CA, such as the CA certificate and CRLs.
	// Structure is documented below.
	AccessUrls AuthorityAccessUrlArrayOutput `pulumi:"accessUrls"`
	// The user provided Resource ID for this Certificate Authority.
	CertificateAuthorityId pulumi.StringOutput `pulumi:"certificateAuthorityId"`
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	Config AuthorityConfigOutput `pulumi:"config"`
	// The time at which this CertificateAuthority was created.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime         pulumi.StringOutput  `pulumi:"createTime"`
	DeletionProtection pulumi.BoolPtrOutput `pulumi:"deletionProtection"`
	// Desired state of the CertificateAuthority. Set this field to 'STAGED' to create a 'STAGED' root CA. Possible values:
	// ENABLED, DISABLED, STAGED.
	DesiredState pulumi.StringPtrOutput `pulumi:"desiredState"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and
	// CRLs. This must be a bucket name, without any prefixes (such as 'gs://') or suffixes (such as '.googleapis.com'). For
	// example, to use a bucket named my-bucket, you would simply specify 'my-bucket'. If not specified, a managed bucket will
	// be created.
	GcsBucket pulumi.StringPtrOutput `pulumi:"gcsBucket"`
	// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and
	// unexpired certs. Use with care. Defaults to 'false'.
	IgnoreActiveCertificatesOnDeletion pulumi.BoolPtrOutput `pulumi:"ignoreActiveCertificatesOnDeletion"`
	// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
	// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
	// certificate. Otherwise, it is used to sign a CSR.
	// Structure is documented below.
	KeySpec AuthorityKeySpecOutput `pulumi:"keySpec"`
	// Labels with user-defined metadata. An object containing a list of "key": value pairs. Example: { "name": "wrench",
	// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
	// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
	// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime pulumi.StringPtrOutput `pulumi:"lifetime"`
	// Location of the CertificateAuthority. A full list of valid locations can be found by
	// running `gcloud privateca locations list`.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name for this CertificateAuthority in the format
	// projects/*/locations/*/certificateAuthorities/*.
	Name pulumi.StringOutput `pulumi:"name"`
	// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with
	// a third party issuer.
	PemCaCertificate pulumi.StringPtrOutput `pulumi:"pemCaCertificate"`
	// This CertificateAuthority's certificate chain, including the current
	// CertificateAuthority's certificate. Ordered such that the root issuer is the final
	// element (consistent with RFC 5246). For a self-signed CA, this will only list the current
	// CertificateAuthority's certificate.
	PemCaCertificates pulumi.StringArrayOutput `pulumi:"pemCaCertificates"`
	// The name of the CaPool this Certificate Authority belongs to.
	Pool    pulumi.StringOutput `pulumi:"pool"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// If this flag is set, the Certificate Authority will be deleted as soon as possible without a 30-day grace period where
	// undeletion would have been allowed. If you proceed, there will be no way to recover this CA. Use with care. Defaults to
	// 'false'.
	SkipGracePeriod pulumi.BoolPtrOutput `pulumi:"skipGracePeriod"`
	// The State for this CertificateAuthority.
	State pulumi.StringOutput `pulumi:"state"`
	// If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which
	// describes its issuers.
	SubordinateConfig AuthoritySubordinateConfigPtrOutput `pulumi:"subordinateConfig"`
	// The Type of this CertificateAuthority. > **Note:** For 'SUBORDINATE' Certificate Authorities, they need to be activated
	// before they can issue certificates. Default value: "SELF_SIGNED" Possible values: ["SELF_SIGNED", "SUBORDINATE"]
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The time at which this CertificateAuthority was updated.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Custom URLs for accessing content published by this CA, such as the CA certificate and CRLs, that can be specified by
	// users.
	UserDefinedAccessUrls AuthorityUserDefinedAccessUrlsPtrOutput `pulumi:"userDefinedAccessUrls"`
}

// NewAuthority registers a new resource with the given unique name, arguments, and options.
func NewAuthority(ctx *pulumi.Context,
	name string, args *AuthorityArgs, opts ...pulumi.ResourceOption) (*Authority, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateAuthorityId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthorityId'")
	}
	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.KeySpec == nil {
		return nil, errors.New("invalid value for required argument 'KeySpec'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Pool == nil {
		return nil, errors.New("invalid value for required argument 'Pool'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Authority
	err := ctx.RegisterResource("gcp:certificateauthority/authority:Authority", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthority gets an existing Authority resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthority(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorityState, opts ...pulumi.ResourceOption) (*Authority, error) {
	var resource Authority
	err := ctx.ReadResource("gcp:certificateauthority/authority:Authority", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Authority resources.
type authorityState struct {
	// URLs for accessing content published by this CA, such as the CA certificate and CRLs.
	// Structure is documented below.
	AccessUrls []AuthorityAccessUrl `pulumi:"accessUrls"`
	// The user provided Resource ID for this Certificate Authority.
	CertificateAuthorityId *string `pulumi:"certificateAuthorityId"`
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	Config *AuthorityConfig `pulumi:"config"`
	// The time at which this CertificateAuthority was created.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime         *string `pulumi:"createTime"`
	DeletionProtection *bool   `pulumi:"deletionProtection"`
	// Desired state of the CertificateAuthority. Set this field to 'STAGED' to create a 'STAGED' root CA. Possible values:
	// ENABLED, DISABLED, STAGED.
	DesiredState *string `pulumi:"desiredState"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and
	// CRLs. This must be a bucket name, without any prefixes (such as 'gs://') or suffixes (such as '.googleapis.com'). For
	// example, to use a bucket named my-bucket, you would simply specify 'my-bucket'. If not specified, a managed bucket will
	// be created.
	GcsBucket *string `pulumi:"gcsBucket"`
	// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and
	// unexpired certs. Use with care. Defaults to 'false'.
	IgnoreActiveCertificatesOnDeletion *bool `pulumi:"ignoreActiveCertificatesOnDeletion"`
	// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
	// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
	// certificate. Otherwise, it is used to sign a CSR.
	// Structure is documented below.
	KeySpec *AuthorityKeySpec `pulumi:"keySpec"`
	// Labels with user-defined metadata. An object containing a list of "key": value pairs. Example: { "name": "wrench",
	// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
	// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
	// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime *string `pulumi:"lifetime"`
	// Location of the CertificateAuthority. A full list of valid locations can be found by
	// running `gcloud privateca locations list`.
	Location *string `pulumi:"location"`
	// The resource name for this CertificateAuthority in the format
	// projects/*/locations/*/certificateAuthorities/*.
	Name *string `pulumi:"name"`
	// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with
	// a third party issuer.
	PemCaCertificate *string `pulumi:"pemCaCertificate"`
	// This CertificateAuthority's certificate chain, including the current
	// CertificateAuthority's certificate. Ordered such that the root issuer is the final
	// element (consistent with RFC 5246). For a self-signed CA, this will only list the current
	// CertificateAuthority's certificate.
	PemCaCertificates []string `pulumi:"pemCaCertificates"`
	// The name of the CaPool this Certificate Authority belongs to.
	Pool    *string `pulumi:"pool"`
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// If this flag is set, the Certificate Authority will be deleted as soon as possible without a 30-day grace period where
	// undeletion would have been allowed. If you proceed, there will be no way to recover this CA. Use with care. Defaults to
	// 'false'.
	SkipGracePeriod *bool `pulumi:"skipGracePeriod"`
	// The State for this CertificateAuthority.
	State *string `pulumi:"state"`
	// If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which
	// describes its issuers.
	SubordinateConfig *AuthoritySubordinateConfig `pulumi:"subordinateConfig"`
	// The Type of this CertificateAuthority. > **Note:** For 'SUBORDINATE' Certificate Authorities, they need to be activated
	// before they can issue certificates. Default value: "SELF_SIGNED" Possible values: ["SELF_SIGNED", "SUBORDINATE"]
	Type *string `pulumi:"type"`
	// The time at which this CertificateAuthority was updated.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
	// Custom URLs for accessing content published by this CA, such as the CA certificate and CRLs, that can be specified by
	// users.
	UserDefinedAccessUrls *AuthorityUserDefinedAccessUrls `pulumi:"userDefinedAccessUrls"`
}

type AuthorityState struct {
	// URLs for accessing content published by this CA, such as the CA certificate and CRLs.
	// Structure is documented below.
	AccessUrls AuthorityAccessUrlArrayInput
	// The user provided Resource ID for this Certificate Authority.
	CertificateAuthorityId pulumi.StringPtrInput
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	Config AuthorityConfigPtrInput
	// The time at which this CertificateAuthority was created.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime         pulumi.StringPtrInput
	DeletionProtection pulumi.BoolPtrInput
	// Desired state of the CertificateAuthority. Set this field to 'STAGED' to create a 'STAGED' root CA. Possible values:
	// ENABLED, DISABLED, STAGED.
	DesiredState pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and
	// CRLs. This must be a bucket name, without any prefixes (such as 'gs://') or suffixes (such as '.googleapis.com'). For
	// example, to use a bucket named my-bucket, you would simply specify 'my-bucket'. If not specified, a managed bucket will
	// be created.
	GcsBucket pulumi.StringPtrInput
	// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and
	// unexpired certs. Use with care. Defaults to 'false'.
	IgnoreActiveCertificatesOnDeletion pulumi.BoolPtrInput
	// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
	// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
	// certificate. Otherwise, it is used to sign a CSR.
	// Structure is documented below.
	KeySpec AuthorityKeySpecPtrInput
	// Labels with user-defined metadata. An object containing a list of "key": value pairs. Example: { "name": "wrench",
	// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
	// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
	// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime pulumi.StringPtrInput
	// Location of the CertificateAuthority. A full list of valid locations can be found by
	// running `gcloud privateca locations list`.
	Location pulumi.StringPtrInput
	// The resource name for this CertificateAuthority in the format
	// projects/*/locations/*/certificateAuthorities/*.
	Name pulumi.StringPtrInput
	// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with
	// a third party issuer.
	PemCaCertificate pulumi.StringPtrInput
	// This CertificateAuthority's certificate chain, including the current
	// CertificateAuthority's certificate. Ordered such that the root issuer is the final
	// element (consistent with RFC 5246). For a self-signed CA, this will only list the current
	// CertificateAuthority's certificate.
	PemCaCertificates pulumi.StringArrayInput
	// The name of the CaPool this Certificate Authority belongs to.
	Pool    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// If this flag is set, the Certificate Authority will be deleted as soon as possible without a 30-day grace period where
	// undeletion would have been allowed. If you proceed, there will be no way to recover this CA. Use with care. Defaults to
	// 'false'.
	SkipGracePeriod pulumi.BoolPtrInput
	// The State for this CertificateAuthority.
	State pulumi.StringPtrInput
	// If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which
	// describes its issuers.
	SubordinateConfig AuthoritySubordinateConfigPtrInput
	// The Type of this CertificateAuthority. > **Note:** For 'SUBORDINATE' Certificate Authorities, they need to be activated
	// before they can issue certificates. Default value: "SELF_SIGNED" Possible values: ["SELF_SIGNED", "SUBORDINATE"]
	Type pulumi.StringPtrInput
	// The time at which this CertificateAuthority was updated.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
	// Custom URLs for accessing content published by this CA, such as the CA certificate and CRLs, that can be specified by
	// users.
	UserDefinedAccessUrls AuthorityUserDefinedAccessUrlsPtrInput
}

func (AuthorityState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorityState)(nil)).Elem()
}

type authorityArgs struct {
	// The user provided Resource ID for this Certificate Authority.
	CertificateAuthorityId string `pulumi:"certificateAuthorityId"`
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	Config             AuthorityConfig `pulumi:"config"`
	DeletionProtection *bool           `pulumi:"deletionProtection"`
	// Desired state of the CertificateAuthority. Set this field to 'STAGED' to create a 'STAGED' root CA. Possible values:
	// ENABLED, DISABLED, STAGED.
	DesiredState *string `pulumi:"desiredState"`
	// The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and
	// CRLs. This must be a bucket name, without any prefixes (such as 'gs://') or suffixes (such as '.googleapis.com'). For
	// example, to use a bucket named my-bucket, you would simply specify 'my-bucket'. If not specified, a managed bucket will
	// be created.
	GcsBucket *string `pulumi:"gcsBucket"`
	// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and
	// unexpired certs. Use with care. Defaults to 'false'.
	IgnoreActiveCertificatesOnDeletion *bool `pulumi:"ignoreActiveCertificatesOnDeletion"`
	// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
	// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
	// certificate. Otherwise, it is used to sign a CSR.
	// Structure is documented below.
	KeySpec AuthorityKeySpec `pulumi:"keySpec"`
	// Labels with user-defined metadata. An object containing a list of "key": value pairs. Example: { "name": "wrench",
	// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
	// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
	// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime *string `pulumi:"lifetime"`
	// Location of the CertificateAuthority. A full list of valid locations can be found by
	// running `gcloud privateca locations list`.
	Location string `pulumi:"location"`
	// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with
	// a third party issuer.
	PemCaCertificate *string `pulumi:"pemCaCertificate"`
	// The name of the CaPool this Certificate Authority belongs to.
	Pool    string  `pulumi:"pool"`
	Project *string `pulumi:"project"`
	// If this flag is set, the Certificate Authority will be deleted as soon as possible without a 30-day grace period where
	// undeletion would have been allowed. If you proceed, there will be no way to recover this CA. Use with care. Defaults to
	// 'false'.
	SkipGracePeriod *bool `pulumi:"skipGracePeriod"`
	// If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which
	// describes its issuers.
	SubordinateConfig *AuthoritySubordinateConfig `pulumi:"subordinateConfig"`
	// The Type of this CertificateAuthority. > **Note:** For 'SUBORDINATE' Certificate Authorities, they need to be activated
	// before they can issue certificates. Default value: "SELF_SIGNED" Possible values: ["SELF_SIGNED", "SUBORDINATE"]
	Type *string `pulumi:"type"`
	// Custom URLs for accessing content published by this CA, such as the CA certificate and CRLs, that can be specified by
	// users.
	UserDefinedAccessUrls *AuthorityUserDefinedAccessUrls `pulumi:"userDefinedAccessUrls"`
}

// The set of arguments for constructing a Authority resource.
type AuthorityArgs struct {
	// The user provided Resource ID for this Certificate Authority.
	CertificateAuthorityId pulumi.StringInput
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	Config             AuthorityConfigInput
	DeletionProtection pulumi.BoolPtrInput
	// Desired state of the CertificateAuthority. Set this field to 'STAGED' to create a 'STAGED' root CA. Possible values:
	// ENABLED, DISABLED, STAGED.
	DesiredState pulumi.StringPtrInput
	// The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and
	// CRLs. This must be a bucket name, without any prefixes (such as 'gs://') or suffixes (such as '.googleapis.com'). For
	// example, to use a bucket named my-bucket, you would simply specify 'my-bucket'. If not specified, a managed bucket will
	// be created.
	GcsBucket pulumi.StringPtrInput
	// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and
	// unexpired certs. Use with care. Defaults to 'false'.
	IgnoreActiveCertificatesOnDeletion pulumi.BoolPtrInput
	// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
	// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
	// certificate. Otherwise, it is used to sign a CSR.
	// Structure is documented below.
	KeySpec AuthorityKeySpecInput
	// Labels with user-defined metadata. An object containing a list of "key": value pairs. Example: { "name": "wrench",
	// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
	// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
	// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime pulumi.StringPtrInput
	// Location of the CertificateAuthority. A full list of valid locations can be found by
	// running `gcloud privateca locations list`.
	Location pulumi.StringInput
	// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with
	// a third party issuer.
	PemCaCertificate pulumi.StringPtrInput
	// The name of the CaPool this Certificate Authority belongs to.
	Pool    pulumi.StringInput
	Project pulumi.StringPtrInput
	// If this flag is set, the Certificate Authority will be deleted as soon as possible without a 30-day grace period where
	// undeletion would have been allowed. If you proceed, there will be no way to recover this CA. Use with care. Defaults to
	// 'false'.
	SkipGracePeriod pulumi.BoolPtrInput
	// If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which
	// describes its issuers.
	SubordinateConfig AuthoritySubordinateConfigPtrInput
	// The Type of this CertificateAuthority. > **Note:** For 'SUBORDINATE' Certificate Authorities, they need to be activated
	// before they can issue certificates. Default value: "SELF_SIGNED" Possible values: ["SELF_SIGNED", "SUBORDINATE"]
	Type pulumi.StringPtrInput
	// Custom URLs for accessing content published by this CA, such as the CA certificate and CRLs, that can be specified by
	// users.
	UserDefinedAccessUrls AuthorityUserDefinedAccessUrlsPtrInput
}

func (AuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorityArgs)(nil)).Elem()
}

type AuthorityInput interface {
	pulumi.Input

	ToAuthorityOutput() AuthorityOutput
	ToAuthorityOutputWithContext(ctx context.Context) AuthorityOutput
}

func (*Authority) ElementType() reflect.Type {
	return reflect.TypeOf((**Authority)(nil)).Elem()
}

func (i *Authority) ToAuthorityOutput() AuthorityOutput {
	return i.ToAuthorityOutputWithContext(context.Background())
}

func (i *Authority) ToAuthorityOutputWithContext(ctx context.Context) AuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityOutput)
}

// AuthorityArrayInput is an input type that accepts AuthorityArray and AuthorityArrayOutput values.
// You can construct a concrete instance of `AuthorityArrayInput` via:
//
//	AuthorityArray{ AuthorityArgs{...} }
type AuthorityArrayInput interface {
	pulumi.Input

	ToAuthorityArrayOutput() AuthorityArrayOutput
	ToAuthorityArrayOutputWithContext(context.Context) AuthorityArrayOutput
}

type AuthorityArray []AuthorityInput

func (AuthorityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Authority)(nil)).Elem()
}

func (i AuthorityArray) ToAuthorityArrayOutput() AuthorityArrayOutput {
	return i.ToAuthorityArrayOutputWithContext(context.Background())
}

func (i AuthorityArray) ToAuthorityArrayOutputWithContext(ctx context.Context) AuthorityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityArrayOutput)
}

// AuthorityMapInput is an input type that accepts AuthorityMap and AuthorityMapOutput values.
// You can construct a concrete instance of `AuthorityMapInput` via:
//
//	AuthorityMap{ "key": AuthorityArgs{...} }
type AuthorityMapInput interface {
	pulumi.Input

	ToAuthorityMapOutput() AuthorityMapOutput
	ToAuthorityMapOutputWithContext(context.Context) AuthorityMapOutput
}

type AuthorityMap map[string]AuthorityInput

func (AuthorityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Authority)(nil)).Elem()
}

func (i AuthorityMap) ToAuthorityMapOutput() AuthorityMapOutput {
	return i.ToAuthorityMapOutputWithContext(context.Background())
}

func (i AuthorityMap) ToAuthorityMapOutputWithContext(ctx context.Context) AuthorityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityMapOutput)
}

type AuthorityOutput struct{ *pulumi.OutputState }

func (AuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Authority)(nil)).Elem()
}

func (o AuthorityOutput) ToAuthorityOutput() AuthorityOutput {
	return o
}

func (o AuthorityOutput) ToAuthorityOutputWithContext(ctx context.Context) AuthorityOutput {
	return o
}

// URLs for accessing content published by this CA, such as the CA certificate and CRLs.
// Structure is documented below.
func (o AuthorityOutput) AccessUrls() AuthorityAccessUrlArrayOutput {
	return o.ApplyT(func(v *Authority) AuthorityAccessUrlArrayOutput { return v.AccessUrls }).(AuthorityAccessUrlArrayOutput)
}

// The user provided Resource ID for this Certificate Authority.
func (o AuthorityOutput) CertificateAuthorityId() pulumi.StringOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringOutput { return v.CertificateAuthorityId }).(pulumi.StringOutput)
}

// The config used to create a self-signed X.509 certificate or CSR.
// Structure is documented below.
func (o AuthorityOutput) Config() AuthorityConfigOutput {
	return o.ApplyT(func(v *Authority) AuthorityConfigOutput { return v.Config }).(AuthorityConfigOutput)
}

// The time at which this CertificateAuthority was created.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o AuthorityOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o AuthorityOutput) DeletionProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Authority) pulumi.BoolPtrOutput { return v.DeletionProtection }).(pulumi.BoolPtrOutput)
}

// Desired state of the CertificateAuthority. Set this field to 'STAGED' to create a 'STAGED' root CA. Possible values:
// ENABLED, DISABLED, STAGED.
func (o AuthorityOutput) DesiredState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringPtrOutput { return v.DesiredState }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o AuthorityOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and
// CRLs. This must be a bucket name, without any prefixes (such as 'gs://') or suffixes (such as '.googleapis.com'). For
// example, to use a bucket named my-bucket, you would simply specify 'my-bucket'. If not specified, a managed bucket will
// be created.
func (o AuthorityOutput) GcsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringPtrOutput { return v.GcsBucket }).(pulumi.StringPtrOutput)
}

// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and
// unexpired certs. Use with care. Defaults to 'false'.
func (o AuthorityOutput) IgnoreActiveCertificatesOnDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Authority) pulumi.BoolPtrOutput { return v.IgnoreActiveCertificatesOnDeletion }).(pulumi.BoolPtrOutput)
}

// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
// certificate. Otherwise, it is used to sign a CSR.
// Structure is documented below.
func (o AuthorityOutput) KeySpec() AuthorityKeySpecOutput {
	return o.ApplyT(func(v *Authority) AuthorityKeySpecOutput { return v.KeySpec }).(AuthorityKeySpecOutput)
}

// Labels with user-defined metadata. An object containing a list of "key": value pairs. Example: { "name": "wrench",
// "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
// your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o AuthorityOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and "notAfterTime" fields inside an X.509
// certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
func (o AuthorityOutput) Lifetime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringPtrOutput { return v.Lifetime }).(pulumi.StringPtrOutput)
}

// Location of the CertificateAuthority. A full list of valid locations can be found by
// running `gcloud privateca locations list`.
func (o AuthorityOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name for this CertificateAuthority in the format
// projects/*/locations/*/certificateAuthorities/*.
func (o AuthorityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with
// a third party issuer.
func (o AuthorityOutput) PemCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringPtrOutput { return v.PemCaCertificate }).(pulumi.StringPtrOutput)
}

// This CertificateAuthority's certificate chain, including the current
// CertificateAuthority's certificate. Ordered such that the root issuer is the final
// element (consistent with RFC 5246). For a self-signed CA, this will only list the current
// CertificateAuthority's certificate.
func (o AuthorityOutput) PemCaCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringArrayOutput { return v.PemCaCertificates }).(pulumi.StringArrayOutput)
}

// The name of the CaPool this Certificate Authority belongs to.
func (o AuthorityOutput) Pool() pulumi.StringOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringOutput { return v.Pool }).(pulumi.StringOutput)
}

func (o AuthorityOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o AuthorityOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// If this flag is set, the Certificate Authority will be deleted as soon as possible without a 30-day grace period where
// undeletion would have been allowed. If you proceed, there will be no way to recover this CA. Use with care. Defaults to
// 'false'.
func (o AuthorityOutput) SkipGracePeriod() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Authority) pulumi.BoolPtrOutput { return v.SkipGracePeriod }).(pulumi.BoolPtrOutput)
}

// The State for this CertificateAuthority.
func (o AuthorityOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which
// describes its issuers.
func (o AuthorityOutput) SubordinateConfig() AuthoritySubordinateConfigPtrOutput {
	return o.ApplyT(func(v *Authority) AuthoritySubordinateConfigPtrOutput { return v.SubordinateConfig }).(AuthoritySubordinateConfigPtrOutput)
}

// The Type of this CertificateAuthority. > **Note:** For 'SUBORDINATE' Certificate Authorities, they need to be activated
// before they can issue certificates. Default value: "SELF_SIGNED" Possible values: ["SELF_SIGNED", "SUBORDINATE"]
func (o AuthorityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The time at which this CertificateAuthority was updated.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o AuthorityOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Authority) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Custom URLs for accessing content published by this CA, such as the CA certificate and CRLs, that can be specified by
// users.
func (o AuthorityOutput) UserDefinedAccessUrls() AuthorityUserDefinedAccessUrlsPtrOutput {
	return o.ApplyT(func(v *Authority) AuthorityUserDefinedAccessUrlsPtrOutput { return v.UserDefinedAccessUrls }).(AuthorityUserDefinedAccessUrlsPtrOutput)
}

type AuthorityArrayOutput struct{ *pulumi.OutputState }

func (AuthorityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Authority)(nil)).Elem()
}

func (o AuthorityArrayOutput) ToAuthorityArrayOutput() AuthorityArrayOutput {
	return o
}

func (o AuthorityArrayOutput) ToAuthorityArrayOutputWithContext(ctx context.Context) AuthorityArrayOutput {
	return o
}

func (o AuthorityArrayOutput) Index(i pulumi.IntInput) AuthorityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Authority {
		return vs[0].([]*Authority)[vs[1].(int)]
	}).(AuthorityOutput)
}

type AuthorityMapOutput struct{ *pulumi.OutputState }

func (AuthorityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Authority)(nil)).Elem()
}

func (o AuthorityMapOutput) ToAuthorityMapOutput() AuthorityMapOutput {
	return o
}

func (o AuthorityMapOutput) ToAuthorityMapOutputWithContext(ctx context.Context) AuthorityMapOutput {
	return o
}

func (o AuthorityMapOutput) MapIndex(k pulumi.StringInput) AuthorityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Authority {
		return vs[0].(map[string]*Authority)[vs[1].(string)]
	}).(AuthorityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorityInput)(nil)).Elem(), &Authority{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorityArrayInput)(nil)).Elem(), AuthorityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorityMapInput)(nil)).Elem(), AuthorityMap{})
	pulumi.RegisterOutputType(AuthorityOutput{})
	pulumi.RegisterOutputType(AuthorityArrayOutput{})
	pulumi.RegisterOutputType(AuthorityMapOutput{})
}
