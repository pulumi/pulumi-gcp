// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificateauthority

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get info about a Google CAS Certificate Authority.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := certificateauthority.LookupAuthority(ctx, &certificateauthority.LookupAuthorityArgs{
//				Location:               pulumi.StringRef("us-west1"),
//				Pool:                   pulumi.StringRef("pool-name"),
//				CertificateAuthorityId: pulumi.StringRef("ca-id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("csr", _default.PemCsr)
//			return nil
//		})
//	}
//
// ```
func LookupAuthority(ctx *pulumi.Context, args *LookupAuthorityArgs, opts ...pulumi.InvokeOption) (*LookupAuthorityResult, error) {
	var rv LookupAuthorityResult
	err := ctx.Invoke("gcp:certificateauthority/getAuthority:getAuthority", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAuthority.
type LookupAuthorityArgs struct {
	// ID of the certificate authority.
	CertificateAuthorityId *string `pulumi:"certificateAuthorityId"`
	// The location the certificate authority exists in.
	Location *string `pulumi:"location"`
	// The name of the pool the certificate authority belongs to.
	Pool *string `pulumi:"pool"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getAuthority.
type LookupAuthorityResult struct {
	AccessUrls             []GetAuthorityAccessUrl `pulumi:"accessUrls"`
	CertificateAuthorityId *string                 `pulumi:"certificateAuthorityId"`
	Configs                []GetAuthorityConfig    `pulumi:"configs"`
	CreateTime             string                  `pulumi:"createTime"`
	DeletionProtection     bool                    `pulumi:"deletionProtection"`
	DesiredState           string                  `pulumi:"desiredState"`
	GcsBucket              string                  `pulumi:"gcsBucket"`
	// The provider-assigned unique ID for this managed resource.
	Id                                 string                `pulumi:"id"`
	IgnoreActiveCertificatesOnDeletion bool                  `pulumi:"ignoreActiveCertificatesOnDeletion"`
	KeySpecs                           []GetAuthorityKeySpec `pulumi:"keySpecs"`
	Labels                             map[string]string     `pulumi:"labels"`
	Lifetime                           string                `pulumi:"lifetime"`
	Location                           *string               `pulumi:"location"`
	Name                               string                `pulumi:"name"`
	PemCaCertificate                   string                `pulumi:"pemCaCertificate"`
	PemCaCertificates                  []string              `pulumi:"pemCaCertificates"`
	// The PEM-encoded signed certificate signing request (CSR). This is only set on subordinate certificate authorities that are awaiting user activation.
	PemCsr             string                          `pulumi:"pemCsr"`
	Pool               *string                         `pulumi:"pool"`
	Project            *string                         `pulumi:"project"`
	SkipGracePeriod    bool                            `pulumi:"skipGracePeriod"`
	State              string                          `pulumi:"state"`
	SubordinateConfigs []GetAuthoritySubordinateConfig `pulumi:"subordinateConfigs"`
	Type               string                          `pulumi:"type"`
	UpdateTime         string                          `pulumi:"updateTime"`
}

func LookupAuthorityOutput(ctx *pulumi.Context, args LookupAuthorityOutputArgs, opts ...pulumi.InvokeOption) LookupAuthorityResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAuthorityResult, error) {
			args := v.(LookupAuthorityArgs)
			r, err := LookupAuthority(ctx, &args, opts...)
			var s LookupAuthorityResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAuthorityResultOutput)
}

// A collection of arguments for invoking getAuthority.
type LookupAuthorityOutputArgs struct {
	// ID of the certificate authority.
	CertificateAuthorityId pulumi.StringPtrInput `pulumi:"certificateAuthorityId"`
	// The location the certificate authority exists in.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the pool the certificate authority belongs to.
	Pool pulumi.StringPtrInput `pulumi:"pool"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupAuthorityOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthorityArgs)(nil)).Elem()
}

// A collection of values returned by getAuthority.
type LookupAuthorityResultOutput struct{ *pulumi.OutputState }

func (LookupAuthorityResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthorityResult)(nil)).Elem()
}

func (o LookupAuthorityResultOutput) ToLookupAuthorityResultOutput() LookupAuthorityResultOutput {
	return o
}

func (o LookupAuthorityResultOutput) ToLookupAuthorityResultOutputWithContext(ctx context.Context) LookupAuthorityResultOutput {
	return o
}

func (o LookupAuthorityResultOutput) AccessUrls() GetAuthorityAccessUrlArrayOutput {
	return o.ApplyT(func(v LookupAuthorityResult) []GetAuthorityAccessUrl { return v.AccessUrls }).(GetAuthorityAccessUrlArrayOutput)
}

func (o LookupAuthorityResultOutput) CertificateAuthorityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAuthorityResult) *string { return v.CertificateAuthorityId }).(pulumi.StringPtrOutput)
}

func (o LookupAuthorityResultOutput) Configs() GetAuthorityConfigArrayOutput {
	return o.ApplyT(func(v LookupAuthorityResult) []GetAuthorityConfig { return v.Configs }).(GetAuthorityConfigArrayOutput)
}

func (o LookupAuthorityResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthorityResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o LookupAuthorityResultOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAuthorityResult) bool { return v.DeletionProtection }).(pulumi.BoolOutput)
}

func (o LookupAuthorityResultOutput) DesiredState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthorityResult) string { return v.DesiredState }).(pulumi.StringOutput)
}

func (o LookupAuthorityResultOutput) GcsBucket() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthorityResult) string { return v.GcsBucket }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAuthorityResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthorityResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupAuthorityResultOutput) IgnoreActiveCertificatesOnDeletion() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAuthorityResult) bool { return v.IgnoreActiveCertificatesOnDeletion }).(pulumi.BoolOutput)
}

func (o LookupAuthorityResultOutput) KeySpecs() GetAuthorityKeySpecArrayOutput {
	return o.ApplyT(func(v LookupAuthorityResult) []GetAuthorityKeySpec { return v.KeySpecs }).(GetAuthorityKeySpecArrayOutput)
}

func (o LookupAuthorityResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAuthorityResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupAuthorityResultOutput) Lifetime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthorityResult) string { return v.Lifetime }).(pulumi.StringOutput)
}

func (o LookupAuthorityResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAuthorityResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o LookupAuthorityResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthorityResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupAuthorityResultOutput) PemCaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthorityResult) string { return v.PemCaCertificate }).(pulumi.StringOutput)
}

func (o LookupAuthorityResultOutput) PemCaCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAuthorityResult) []string { return v.PemCaCertificates }).(pulumi.StringArrayOutput)
}

// The PEM-encoded signed certificate signing request (CSR). This is only set on subordinate certificate authorities that are awaiting user activation.
func (o LookupAuthorityResultOutput) PemCsr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthorityResult) string { return v.PemCsr }).(pulumi.StringOutput)
}

func (o LookupAuthorityResultOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAuthorityResult) *string { return v.Pool }).(pulumi.StringPtrOutput)
}

func (o LookupAuthorityResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAuthorityResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o LookupAuthorityResultOutput) SkipGracePeriod() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAuthorityResult) bool { return v.SkipGracePeriod }).(pulumi.BoolOutput)
}

func (o LookupAuthorityResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthorityResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupAuthorityResultOutput) SubordinateConfigs() GetAuthoritySubordinateConfigArrayOutput {
	return o.ApplyT(func(v LookupAuthorityResult) []GetAuthoritySubordinateConfig { return v.SubordinateConfigs }).(GetAuthoritySubordinateConfigArrayOutput)
}

func (o LookupAuthorityResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthorityResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupAuthorityResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthorityResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAuthorityResultOutput{})
}
