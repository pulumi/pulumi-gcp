// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificateauthority

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves the current IAM policy data for capool
//
// ## example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := certificateauthority.LookupCaPoolIamPolicy(ctx, &certificateauthority.LookupCaPoolIamPolicyArgs{
//				CaPool: google_privateca_ca_pool.Default.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCaPoolIamPolicy(ctx *pulumi.Context, args *LookupCaPoolIamPolicyArgs, opts ...pulumi.InvokeOption) (*LookupCaPoolIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCaPoolIamPolicyResult
	err := ctx.Invoke("gcp:certificateauthority/getCaPoolIamPolicy:getCaPoolIamPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCaPoolIamPolicy.
type LookupCaPoolIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	CaPool string `pulumi:"caPool"`
	// Location of the CaPool. A full list of valid locations can be found by
	// running `gcloud privateca locations list`.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getCaPoolIamPolicy.
type LookupCaPoolIamPolicyResult struct {
	CaPool string `pulumi:"caPool"`
	// (Computed) The etag of the IAM policy.
	Etag string `pulumi:"etag"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Location string `pulumi:"location"`
	// (Required only by `certificateauthority.CaPoolIamPolicy`) The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	Project    string `pulumi:"project"`
}

func LookupCaPoolIamPolicyOutput(ctx *pulumi.Context, args LookupCaPoolIamPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupCaPoolIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCaPoolIamPolicyResult, error) {
			args := v.(LookupCaPoolIamPolicyArgs)
			r, err := LookupCaPoolIamPolicy(ctx, &args, opts...)
			var s LookupCaPoolIamPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCaPoolIamPolicyResultOutput)
}

// A collection of arguments for invoking getCaPoolIamPolicy.
type LookupCaPoolIamPolicyOutputArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	CaPool pulumi.StringInput `pulumi:"caPool"`
	// Location of the CaPool. A full list of valid locations can be found by
	// running `gcloud privateca locations list`.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupCaPoolIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCaPoolIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getCaPoolIamPolicy.
type LookupCaPoolIamPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupCaPoolIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCaPoolIamPolicyResult)(nil)).Elem()
}

func (o LookupCaPoolIamPolicyResultOutput) ToLookupCaPoolIamPolicyResultOutput() LookupCaPoolIamPolicyResultOutput {
	return o
}

func (o LookupCaPoolIamPolicyResultOutput) ToLookupCaPoolIamPolicyResultOutputWithContext(ctx context.Context) LookupCaPoolIamPolicyResultOutput {
	return o
}

func (o LookupCaPoolIamPolicyResultOutput) CaPool() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCaPoolIamPolicyResult) string { return v.CaPool }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o LookupCaPoolIamPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCaPoolIamPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCaPoolIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCaPoolIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupCaPoolIamPolicyResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCaPoolIamPolicyResult) string { return v.Location }).(pulumi.StringOutput)
}

// (Required only by `certificateauthority.CaPoolIamPolicy`) The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o LookupCaPoolIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCaPoolIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func (o LookupCaPoolIamPolicyResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCaPoolIamPolicyResult) string { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCaPoolIamPolicyResultOutput{})
}
