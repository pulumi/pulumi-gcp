// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package certificateauthority

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// Certificate can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:certificateauthority/certificate:Certificate default projects/{{project}}/locations/{{location}}/certificateAuthorities/{{certificate_authority}}/certificates/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:certificateauthority/certificate:Certificate default {{project}}/{{location}}/{{certificate_authority}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:certificateauthority/certificate:Certificate default {{location}}/{{certificate_authority}}/{{name}}
// ```
type Certificate struct {
	pulumi.CustomResourceState

	// Certificate Authority name.
	CertificateAuthority pulumi.StringOutput `pulumi:"certificateAuthority"`
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	CertificateDescriptions CertificateCertificateDescriptionArrayOutput `pulumi:"certificateDescriptions"`
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	Config CertificateConfigPtrOutput `pulumi:"config"`
	// The time that this resource was created on the server. This is in RFC3339 text format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Labels with user-defined metadata to apply to this resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime pulumi.StringPtrOutput `pulumi:"lifetime"`
	// Location of the CertificateAuthority. A full list of valid locations can be found by
	// running `gcloud beta privateca locations list`.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name for this Certificate .
	Name pulumi.StringOutput `pulumi:"name"`
	// Output only. The pem-encoded, signed X.509 certificate.
	PemCertificate pulumi.StringOutput `pulumi:"pemCertificate"`
	// Required. Expected to be in leaf-to-root order according to RFC 5246.
	PemCertificates pulumi.StringArrayOutput `pulumi:"pemCertificates"`
	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	PemCsr pulumi.StringPtrOutput `pulumi:"pemCsr"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	RevocationDetails CertificateRevocationDetailArrayOutput `pulumi:"revocationDetails"`
	// Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateAuthority == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthority'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	var resource Certificate
	err := ctx.RegisterResource("gcp:certificateauthority/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("gcp:certificateauthority/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	// Certificate Authority name.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	CertificateDescriptions []CertificateCertificateDescription `pulumi:"certificateDescriptions"`
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	Config *CertificateConfig `pulumi:"config"`
	// The time that this resource was created on the server. This is in RFC3339 text format.
	CreateTime *string `pulumi:"createTime"`
	// Labels with user-defined metadata to apply to this resource.
	Labels map[string]string `pulumi:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime *string `pulumi:"lifetime"`
	// Location of the CertificateAuthority. A full list of valid locations can be found by
	// running `gcloud beta privateca locations list`.
	Location *string `pulumi:"location"`
	// The name for this Certificate .
	Name *string `pulumi:"name"`
	// Output only. The pem-encoded, signed X.509 certificate.
	PemCertificate *string `pulumi:"pemCertificate"`
	// Required. Expected to be in leaf-to-root order according to RFC 5246.
	PemCertificates []string `pulumi:"pemCertificates"`
	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	PemCsr *string `pulumi:"pemCsr"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	RevocationDetails []CertificateRevocationDetail `pulumi:"revocationDetails"`
	// Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
	UpdateTime *string `pulumi:"updateTime"`
}

type CertificateState struct {
	// Certificate Authority name.
	CertificateAuthority pulumi.StringPtrInput
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	CertificateDescriptions CertificateCertificateDescriptionArrayInput
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	Config CertificateConfigPtrInput
	// The time that this resource was created on the server. This is in RFC3339 text format.
	CreateTime pulumi.StringPtrInput
	// Labels with user-defined metadata to apply to this resource.
	Labels pulumi.StringMapInput
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime pulumi.StringPtrInput
	// Location of the CertificateAuthority. A full list of valid locations can be found by
	// running `gcloud beta privateca locations list`.
	Location pulumi.StringPtrInput
	// The name for this Certificate .
	Name pulumi.StringPtrInput
	// Output only. The pem-encoded, signed X.509 certificate.
	PemCertificate pulumi.StringPtrInput
	// Required. Expected to be in leaf-to-root order according to RFC 5246.
	PemCertificates pulumi.StringArrayInput
	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	PemCsr pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	RevocationDetails CertificateRevocationDetailArrayInput
	// Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
	UpdateTime pulumi.StringPtrInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// Certificate Authority name.
	CertificateAuthority string `pulumi:"certificateAuthority"`
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	Config *CertificateConfig `pulumi:"config"`
	// Labels with user-defined metadata to apply to this resource.
	Labels map[string]string `pulumi:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime *string `pulumi:"lifetime"`
	// Location of the CertificateAuthority. A full list of valid locations can be found by
	// running `gcloud beta privateca locations list`.
	Location string `pulumi:"location"`
	// The name for this Certificate .
	Name *string `pulumi:"name"`
	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	PemCsr *string `pulumi:"pemCsr"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// Certificate Authority name.
	CertificateAuthority pulumi.StringInput
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	Config CertificateConfigPtrInput
	// Labels with user-defined metadata to apply to this resource.
	Labels pulumi.StringMapInput
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime pulumi.StringPtrInput
	// Location of the CertificateAuthority. A full list of valid locations can be found by
	// running `gcloud beta privateca locations list`.
	Location pulumi.StringInput
	// The name for this Certificate .
	Name pulumi.StringPtrInput
	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	PemCsr pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (*Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((*Certificate)(nil))
}

func (i *Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

func (i *Certificate) ToCertificatePtrOutput() CertificatePtrOutput {
	return i.ToCertificatePtrOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificatePtrOutputWithContext(ctx context.Context) CertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePtrOutput)
}

type CertificatePtrInput interface {
	pulumi.Input

	ToCertificatePtrOutput() CertificatePtrOutput
	ToCertificatePtrOutputWithContext(ctx context.Context) CertificatePtrOutput
}

type certificatePtrType CertificateArgs

func (*certificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil))
}

func (i *certificatePtrType) ToCertificatePtrOutput() CertificatePtrOutput {
	return i.ToCertificatePtrOutputWithContext(context.Background())
}

func (i *certificatePtrType) ToCertificatePtrOutputWithContext(ctx context.Context) CertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePtrOutput)
}

// CertificateArrayInput is an input type that accepts CertificateArray and CertificateArrayOutput values.
// You can construct a concrete instance of `CertificateArrayInput` via:
//
//          CertificateArray{ CertificateArgs{...} }
type CertificateArrayInput interface {
	pulumi.Input

	ToCertificateArrayOutput() CertificateArrayOutput
	ToCertificateArrayOutputWithContext(context.Context) CertificateArrayOutput
}

type CertificateArray []CertificateInput

func (CertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Certificate)(nil))
}

func (i CertificateArray) ToCertificateArrayOutput() CertificateArrayOutput {
	return i.ToCertificateArrayOutputWithContext(context.Background())
}

func (i CertificateArray) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateArrayOutput)
}

// CertificateMapInput is an input type that accepts CertificateMap and CertificateMapOutput values.
// You can construct a concrete instance of `CertificateMapInput` via:
//
//          CertificateMap{ "key": CertificateArgs{...} }
type CertificateMapInput interface {
	pulumi.Input

	ToCertificateMapOutput() CertificateMapOutput
	ToCertificateMapOutputWithContext(context.Context) CertificateMapOutput
}

type CertificateMap map[string]CertificateInput

func (CertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Certificate)(nil))
}

func (i CertificateMap) ToCertificateMapOutput() CertificateMapOutput {
	return i.ToCertificateMapOutputWithContext(context.Background())
}

func (i CertificateMap) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapOutput)
}

type CertificateOutput struct {
	*pulumi.OutputState
}

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Certificate)(nil))
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificatePtrOutput() CertificatePtrOutput {
	return o.ToCertificatePtrOutputWithContext(context.Background())
}

func (o CertificateOutput) ToCertificatePtrOutputWithContext(ctx context.Context) CertificatePtrOutput {
	return o.ApplyT(func(v Certificate) *Certificate {
		return &v
	}).(CertificatePtrOutput)
}

type CertificatePtrOutput struct {
	*pulumi.OutputState
}

func (CertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil))
}

func (o CertificatePtrOutput) ToCertificatePtrOutput() CertificatePtrOutput {
	return o
}

func (o CertificatePtrOutput) ToCertificatePtrOutputWithContext(ctx context.Context) CertificatePtrOutput {
	return o
}

type CertificateArrayOutput struct{ *pulumi.OutputState }

func (CertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Certificate)(nil))
}

func (o CertificateArrayOutput) ToCertificateArrayOutput() CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) Index(i pulumi.IntInput) CertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Certificate {
		return vs[0].([]Certificate)[vs[1].(int)]
	}).(CertificateOutput)
}

type CertificateMapOutput struct{ *pulumi.OutputState }

func (CertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Certificate)(nil))
}

func (o CertificateMapOutput) ToCertificateMapOutput() CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) MapIndex(k pulumi.StringInput) CertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Certificate {
		return vs[0].(map[string]Certificate)[vs[1].(string)]
	}).(CertificateOutput)
}

func init() {
	pulumi.RegisterOutputType(CertificateOutput{})
	pulumi.RegisterOutputType(CertificatePtrOutput{})
	pulumi.RegisterOutputType(CertificateArrayOutput{})
	pulumi.RegisterOutputType(CertificateMapOutput{})
}
