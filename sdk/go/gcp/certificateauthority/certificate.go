// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package certificateauthority

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Certificate corresponds to a signed X.509 certificate issued by a Certificate.
//
// > **Note:** The Certificate Authority that is referenced by this resource **must** be
// `tier = "ENTERPRISE"`
//
// ## Example Usage
// ### Privateca Certificate Config
//
// ```go
// package main
//
// import (
// 	"encoding/base64"
// 	"io/ioutil"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificateauthority"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func filebase64OrPanic(path string) pulumi.StringPtrInput {
// 	if fileData, err := ioutil.ReadFile(path); err == nil {
// 		return pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))
// 	} else {
// 		panic(err.Error())
// 	}
// }
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := certificateauthority.NewAuthority(ctx, "test_ca", &certificateauthority.AuthorityArgs{
// 			CertificateAuthorityId:             pulumi.String("my-certificate-authority"),
// 			Location:                           pulumi.String("us-central1"),
// 			Pool:                               pulumi.String(""),
// 			IgnoreActiveCertificatesOnDeletion: pulumi.Bool(true),
// 			Config: &certificateauthority.AuthorityConfigArgs{
// 				SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
// 					Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
// 						Organization: pulumi.String("HashiCorp"),
// 						CommonName:   pulumi.String("my-certificate-authority"),
// 					},
// 					SubjectAltName: &certificateauthority.AuthorityConfigSubjectConfigSubjectAltNameArgs{
// 						DnsNames: pulumi.StringArray{
// 							pulumi.String("hashicorp.com"),
// 						},
// 					},
// 				},
// 				X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
// 					CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
// 						IsCa: pulumi.Bool(true),
// 					},
// 					KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
// 						BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
// 							CertSign: pulumi.Bool(true),
// 							CrlSign:  pulumi.Bool(true),
// 						},
// 						ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
// 							ServerAuth: pulumi.Bool(true),
// 						},
// 					},
// 				},
// 			},
// 			KeySpec: &certificateauthority.AuthorityKeySpecArgs{
// 				Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = certificateauthority.NewCertificate(ctx, "_default", &certificateauthority.CertificateArgs{
// 			Pool:                 pulumi.String(""),
// 			Location:             pulumi.String("us-central1"),
// 			CertificateAuthority: test_ca.CertificateAuthorityId,
// 			Lifetime:             pulumi.String("860s"),
// 			Config: &certificateauthority.CertificateConfigArgs{
// 				SubjectConfig: &certificateauthority.CertificateConfigSubjectConfigArgs{
// 					Subject: &certificateauthority.CertificateConfigSubjectConfigSubjectArgs{
// 						CommonName:         pulumi.String("san1.example.com"),
// 						CountryCode:        pulumi.String("us"),
// 						Organization:       pulumi.String("google"),
// 						OrganizationalUnit: pulumi.String("enterprise"),
// 						Locality:           pulumi.String("mountain view"),
// 						Province:           pulumi.String("california"),
// 						StreetAddress:      pulumi.String("1600 amphitheatre parkway"),
// 					},
// 					SubjectAltName: &certificateauthority.CertificateConfigSubjectConfigSubjectAltNameArgs{
// 						EmailAddresses: pulumi.StringArray{
// 							pulumi.String("email@example.com"),
// 						},
// 						IpAddresses: pulumi.StringArray{
// 							pulumi.String("127.0.0.1"),
// 						},
// 						Uris: pulumi.StringArray{
// 							pulumi.String("http://www.ietf.org/rfc/rfc3986.txt"),
// 						},
// 					},
// 				},
// 				X509Config: &certificateauthority.CertificateConfigX509ConfigArgs{
// 					CaOptions: &certificateauthority.CertificateConfigX509ConfigCaOptionsArgs{
// 						IsCa: pulumi.Bool(false),
// 					},
// 					KeyUsage: &certificateauthority.CertificateConfigX509ConfigKeyUsageArgs{
// 						BaseKeyUsage: &certificateauthority.CertificateConfigX509ConfigKeyUsageBaseKeyUsageArgs{
// 							CrlSign:      pulumi.Bool(false),
// 							DecipherOnly: pulumi.Bool(false),
// 						},
// 						ExtendedKeyUsage: &certificateauthority.CertificateConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
// 							ServerAuth: pulumi.Bool(false),
// 						},
// 					},
// 				},
// 				PublicKey: &certificateauthority.CertificateConfigPublicKeyArgs{
// 					Format: pulumi.String("PEM"),
// 					Key:    filebase64OrPanic("test-fixtures/rsa_public.pem"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Privateca Certificate With Template
//
// ```go
// package main
//
// import (
// 	"io/ioutil"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificateauthority"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func readFileOrPanic(path string) pulumi.StringPtrInput {
// 	data, err := ioutil.ReadFile(path)
// 	if err != nil {
// 		panic(err.Error())
// 	}
// 	return pulumi.String(string(data))
// }
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		template, err := certificateauthority.NewCertificateTemplate(ctx, "template", &certificateauthority.CertificateTemplateArgs{
// 			Location:    pulumi.String("us-central1"),
// 			Description: pulumi.String("An updated sample certificate template"),
// 			IdentityConstraints: &certificateauthority.CertificateTemplateIdentityConstraintsArgs{
// 				AllowSubjectAltNamesPassthrough: pulumi.Bool(true),
// 				AllowSubjectPassthrough:         pulumi.Bool(true),
// 				CelExpression: &certificateauthority.CertificateTemplateIdentityConstraintsCelExpressionArgs{
// 					Description: pulumi.String("Always true"),
// 					Expression:  pulumi.String("true"),
// 					Location:    pulumi.String("any.file.anywhere"),
// 					Title:       pulumi.String("Sample expression"),
// 				},
// 			},
// 			PassthroughExtensions: &certificateauthority.CertificateTemplatePassthroughExtensionsArgs{
// 				AdditionalExtensions: certificateauthority.CertificateTemplatePassthroughExtensionsAdditionalExtensionArray{
// 					&certificateauthority.CertificateTemplatePassthroughExtensionsAdditionalExtensionArgs{
// 						ObjectIdPaths: pulumi.IntArray{
// 							pulumi.Int(1),
// 							pulumi.Int(6),
// 						},
// 					},
// 				},
// 				KnownExtensions: pulumi.StringArray{
// 					pulumi.String("EXTENDED_KEY_USAGE"),
// 				},
// 			},
// 			PredefinedValues: &certificateauthority.CertificateTemplatePredefinedValuesArgs{
// 				AdditionalExtensions: certificateauthority.CertificateTemplatePredefinedValuesAdditionalExtensionArray{
// 					&certificateauthority.CertificateTemplatePredefinedValuesAdditionalExtensionArgs{
// 						ObjectId: &certificateauthority.CertificateTemplatePredefinedValuesAdditionalExtensionObjectIdArgs{
// 							ObjectIdPaths: pulumi.IntArray{
// 								pulumi.Int(1),
// 								pulumi.Int(6),
// 							},
// 						},
// 						Value:    pulumi.String("c3RyaW5nCg=="),
// 						Critical: pulumi.Bool(true),
// 					},
// 				},
// 				AiaOcspServers: pulumi.StringArray{
// 					pulumi.String("string"),
// 				},
// 				CaOptions: &certificateauthority.CertificateTemplatePredefinedValuesCaOptionsArgs{
// 					IsCa:                pulumi.Bool(false),
// 					MaxIssuerPathLength: pulumi.Int(6),
// 				},
// 				KeyUsage: &certificateauthority.CertificateTemplatePredefinedValuesKeyUsageArgs{
// 					BaseKeyUsage: &certificateauthority.CertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageArgs{
// 						CertSign:          pulumi.Bool(false),
// 						ContentCommitment: pulumi.Bool(true),
// 						CrlSign:           pulumi.Bool(false),
// 						DataEncipherment:  pulumi.Bool(true),
// 						DecipherOnly:      pulumi.Bool(true),
// 						DigitalSignature:  pulumi.Bool(true),
// 						EncipherOnly:      pulumi.Bool(true),
// 						KeyAgreement:      pulumi.Bool(true),
// 						KeyEncipherment:   pulumi.Bool(true),
// 					},
// 					ExtendedKeyUsage: &certificateauthority.CertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageArgs{
// 						ClientAuth:      pulumi.Bool(true),
// 						CodeSigning:     pulumi.Bool(true),
// 						EmailProtection: pulumi.Bool(true),
// 						OcspSigning:     pulumi.Bool(true),
// 						ServerAuth:      pulumi.Bool(true),
// 						TimeStamping:    pulumi.Bool(true),
// 					},
// 					UnknownExtendedKeyUsages: certificateauthority.CertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsageArray{
// 						&certificateauthority.CertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsageArgs{
// 							ObjectIdPaths: pulumi.IntArray{
// 								pulumi.Int(1),
// 								pulumi.Int(6),
// 							},
// 						},
// 					},
// 				},
// 				PolicyIds: certificateauthority.CertificateTemplatePredefinedValuesPolicyIdArray{
// 					&certificateauthority.CertificateTemplatePredefinedValuesPolicyIdArgs{
// 						ObjectIdPaths: pulumi.IntArray{
// 							pulumi.Int(1),
// 							pulumi.Int(6),
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = certificateauthority.NewAuthority(ctx, "test_ca", &certificateauthority.AuthorityArgs{
// 			Pool:                   pulumi.String(""),
// 			CertificateAuthorityId: pulumi.String("my-certificate-authority"),
// 			Location:               pulumi.String("us-central1"),
// 			Config: &certificateauthority.AuthorityConfigArgs{
// 				SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
// 					Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
// 						Organization: pulumi.String("HashiCorp"),
// 						CommonName:   pulumi.String("my-certificate-authority"),
// 					},
// 					SubjectAltName: &certificateauthority.AuthorityConfigSubjectConfigSubjectAltNameArgs{
// 						DnsNames: pulumi.StringArray{
// 							pulumi.String("hashicorp.com"),
// 						},
// 					},
// 				},
// 				X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
// 					CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
// 						IsCa: pulumi.Bool(true),
// 					},
// 					KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
// 						BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
// 							CertSign: pulumi.Bool(true),
// 							CrlSign:  pulumi.Bool(true),
// 						},
// 						ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
// 							ServerAuth: pulumi.Bool(false),
// 						},
// 					},
// 				},
// 			},
// 			KeySpec: &certificateauthority.AuthorityKeySpecArgs{
// 				Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = certificateauthority.NewCertificate(ctx, "_default", &certificateauthority.CertificateArgs{
// 			Pool:                 pulumi.String(""),
// 			Location:             pulumi.String("us-central1"),
// 			CertificateAuthority: test_ca.CertificateAuthorityId,
// 			Lifetime:             pulumi.String("860s"),
// 			PemCsr:               readFileOrPanic("test-fixtures/rsa_csr.pem"),
// 			CertificateTemplate:  template.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Privateca Certificate Csr
//
// ```go
// package main
//
// import (
// 	"io/ioutil"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificateauthority"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func readFileOrPanic(path string) pulumi.StringPtrInput {
// 	data, err := ioutil.ReadFile(path)
// 	if err != nil {
// 		panic(err.Error())
// 	}
// 	return pulumi.String(string(data))
// }
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := certificateauthority.NewAuthority(ctx, "test_ca", &certificateauthority.AuthorityArgs{
// 			Pool:                   pulumi.String(""),
// 			CertificateAuthorityId: pulumi.String("my-certificate-authority"),
// 			Location:               pulumi.String("us-central1"),
// 			Config: &certificateauthority.AuthorityConfigArgs{
// 				SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
// 					Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
// 						Organization: pulumi.String("HashiCorp"),
// 						CommonName:   pulumi.String("my-certificate-authority"),
// 					},
// 					SubjectAltName: &certificateauthority.AuthorityConfigSubjectConfigSubjectAltNameArgs{
// 						DnsNames: pulumi.StringArray{
// 							pulumi.String("hashicorp.com"),
// 						},
// 					},
// 				},
// 				X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
// 					CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
// 						IsCa: pulumi.Bool(true),
// 					},
// 					KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
// 						BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
// 							CertSign: pulumi.Bool(true),
// 							CrlSign:  pulumi.Bool(true),
// 						},
// 						ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
// 							ServerAuth: pulumi.Bool(false),
// 						},
// 					},
// 				},
// 			},
// 			KeySpec: &certificateauthority.AuthorityKeySpecArgs{
// 				Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = certificateauthority.NewCertificate(ctx, "_default", &certificateauthority.CertificateArgs{
// 			Pool:                 pulumi.String(""),
// 			Location:             pulumi.String("us-central1"),
// 			CertificateAuthority: test_ca.CertificateAuthorityId,
// 			Lifetime:             pulumi.String("860s"),
// 			PemCsr:               readFileOrPanic("test-fixtures/rsa_csr.pem"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Privateca Certificate No Authority
//
// ```go
// package main
//
// import (
// 	"encoding/base64"
// 	"io/ioutil"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificateauthority"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func filebase64OrPanic(path string) pulumi.StringPtrInput {
// 	if fileData, err := ioutil.ReadFile(path); err == nil {
// 		return pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))
// 	} else {
// 		panic(err.Error())
// 	}
// }
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		authority, err := certificateauthority.NewAuthority(ctx, "authority", &certificateauthority.AuthorityArgs{
// 			Pool:                   pulumi.String(""),
// 			CertificateAuthorityId: pulumi.String("my-authority"),
// 			Location:               pulumi.String("us-central1"),
// 			Config: &certificateauthority.AuthorityConfigArgs{
// 				SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
// 					Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
// 						Organization: pulumi.String("HashiCorp"),
// 						CommonName:   pulumi.String("my-certificate-authority"),
// 					},
// 					SubjectAltName: &certificateauthority.AuthorityConfigSubjectConfigSubjectAltNameArgs{
// 						DnsNames: pulumi.StringArray{
// 							pulumi.String("hashicorp.com"),
// 						},
// 					},
// 				},
// 				X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
// 					CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
// 						IsCa: pulumi.Bool(true),
// 					},
// 					KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
// 						BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
// 							DigitalSignature: pulumi.Bool(true),
// 							CertSign:         pulumi.Bool(true),
// 							CrlSign:          pulumi.Bool(true),
// 						},
// 						ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
// 							ServerAuth: pulumi.Bool(true),
// 						},
// 					},
// 				},
// 			},
// 			Lifetime: pulumi.String("86400s"),
// 			KeySpec: &certificateauthority.AuthorityKeySpecArgs{
// 				Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = certificateauthority.NewCertificate(ctx, "_default", &certificateauthority.CertificateArgs{
// 			Pool:     pulumi.String(""),
// 			Location: pulumi.String("us-central1"),
// 			Lifetime: pulumi.String("860s"),
// 			Config: &certificateauthority.CertificateConfigArgs{
// 				SubjectConfig: &certificateauthority.CertificateConfigSubjectConfigArgs{
// 					Subject: &certificateauthority.CertificateConfigSubjectConfigSubjectArgs{
// 						CommonName:         pulumi.String("san1.example.com"),
// 						CountryCode:        pulumi.String("us"),
// 						Organization:       pulumi.String("google"),
// 						OrganizationalUnit: pulumi.String("enterprise"),
// 						Locality:           pulumi.String("mountain view"),
// 						Province:           pulumi.String("california"),
// 						StreetAddress:      pulumi.String("1600 amphitheatre parkway"),
// 						PostalCode:         pulumi.String("94109"),
// 					},
// 				},
// 				X509Config: &certificateauthority.CertificateConfigX509ConfigArgs{
// 					CaOptions: &certificateauthority.CertificateConfigX509ConfigCaOptionsArgs{
// 						IsCa: pulumi.Bool(false),
// 					},
// 					KeyUsage: &certificateauthority.CertificateConfigX509ConfigKeyUsageArgs{
// 						BaseKeyUsage: &certificateauthority.CertificateConfigX509ConfigKeyUsageBaseKeyUsageArgs{
// 							CrlSign: pulumi.Bool(true),
// 						},
// 						ExtendedKeyUsage: &certificateauthority.CertificateConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
// 							ServerAuth: pulumi.Bool(true),
// 						},
// 					},
// 				},
// 				PublicKey: &certificateauthority.CertificateConfigPublicKeyArgs{
// 					Format: pulumi.String("PEM"),
// 					Key:    filebase64OrPanic("test-fixtures/rsa_public.pem"),
// 				},
// 			},
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			authority,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Certificate can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:certificateauthority/certificate:Certificate default projects/{{project}}/locations/{{location}}/caPools/{{pool}}/certificates/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:certificateauthority/certificate:Certificate default {{project}}/{{location}}/{{pool}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:certificateauthority/certificate:Certificate default {{location}}/{{pool}}/{{name}}
// ```
type Certificate struct {
	pulumi.CustomResourceState

	// Certificate Authority name.
	CertificateAuthority pulumi.StringPtrOutput `pulumi:"certificateAuthority"`
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	CertificateDescriptions CertificateCertificateDescriptionArrayOutput `pulumi:"certificateDescriptions"`
	// The resource name for a CertificateTemplate used to issue this certificate,
	// in the format `projects/*/locations/*/certificateTemplates/*`. If this is specified,
	// the caller must have the necessary permission to use this template. If this is
	// omitted, no template will be used. This template must be in the same location
	// as the Certificate.
	CertificateTemplate pulumi.StringPtrOutput `pulumi:"certificateTemplate"`
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	Config CertificateConfigPtrOutput `pulumi:"config"`
	// The time that this resource was created on the server. This is in RFC3339 text format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Labels with user-defined metadata to apply to this resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime pulumi.StringPtrOutput `pulumi:"lifetime"`
	// Location of the Certificate. A full list of valid locations can be found by
	// running `gcloud privateca locations list`.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name for this Certificate.
	Name pulumi.StringOutput `pulumi:"name"`
	// Output only. The pem-encoded, signed X.509 certificate.
	PemCertificate pulumi.StringOutput `pulumi:"pemCertificate"`
	// Required. Expected to be in leaf-to-root order according to RFC 5246.
	PemCertificates pulumi.StringArrayOutput `pulumi:"pemCertificates"`
	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	PemCsr pulumi.StringPtrOutput `pulumi:"pemCsr"`
	// The name of the CaPool this Certificate belongs to.
	Pool pulumi.StringOutput `pulumi:"pool"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	RevocationDetails CertificateRevocationDetailArrayOutput `pulumi:"revocationDetails"`
	// Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Pool == nil {
		return nil, errors.New("invalid value for required argument 'Pool'")
	}
	var resource Certificate
	err := ctx.RegisterResource("gcp:certificateauthority/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("gcp:certificateauthority/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	// Certificate Authority name.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	CertificateDescriptions []CertificateCertificateDescription `pulumi:"certificateDescriptions"`
	// The resource name for a CertificateTemplate used to issue this certificate,
	// in the format `projects/*/locations/*/certificateTemplates/*`. If this is specified,
	// the caller must have the necessary permission to use this template. If this is
	// omitted, no template will be used. This template must be in the same location
	// as the Certificate.
	CertificateTemplate *string `pulumi:"certificateTemplate"`
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	Config *CertificateConfig `pulumi:"config"`
	// The time that this resource was created on the server. This is in RFC3339 text format.
	CreateTime *string `pulumi:"createTime"`
	// Labels with user-defined metadata to apply to this resource.
	Labels map[string]string `pulumi:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime *string `pulumi:"lifetime"`
	// Location of the Certificate. A full list of valid locations can be found by
	// running `gcloud privateca locations list`.
	Location *string `pulumi:"location"`
	// The name for this Certificate.
	Name *string `pulumi:"name"`
	// Output only. The pem-encoded, signed X.509 certificate.
	PemCertificate *string `pulumi:"pemCertificate"`
	// Required. Expected to be in leaf-to-root order according to RFC 5246.
	PemCertificates []string `pulumi:"pemCertificates"`
	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	PemCsr *string `pulumi:"pemCsr"`
	// The name of the CaPool this Certificate belongs to.
	Pool *string `pulumi:"pool"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	RevocationDetails []CertificateRevocationDetail `pulumi:"revocationDetails"`
	// Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
	UpdateTime *string `pulumi:"updateTime"`
}

type CertificateState struct {
	// Certificate Authority name.
	CertificateAuthority pulumi.StringPtrInput
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	CertificateDescriptions CertificateCertificateDescriptionArrayInput
	// The resource name for a CertificateTemplate used to issue this certificate,
	// in the format `projects/*/locations/*/certificateTemplates/*`. If this is specified,
	// the caller must have the necessary permission to use this template. If this is
	// omitted, no template will be used. This template must be in the same location
	// as the Certificate.
	CertificateTemplate pulumi.StringPtrInput
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	Config CertificateConfigPtrInput
	// The time that this resource was created on the server. This is in RFC3339 text format.
	CreateTime pulumi.StringPtrInput
	// Labels with user-defined metadata to apply to this resource.
	Labels pulumi.StringMapInput
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime pulumi.StringPtrInput
	// Location of the Certificate. A full list of valid locations can be found by
	// running `gcloud privateca locations list`.
	Location pulumi.StringPtrInput
	// The name for this Certificate.
	Name pulumi.StringPtrInput
	// Output only. The pem-encoded, signed X.509 certificate.
	PemCertificate pulumi.StringPtrInput
	// Required. Expected to be in leaf-to-root order according to RFC 5246.
	PemCertificates pulumi.StringArrayInput
	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	PemCsr pulumi.StringPtrInput
	// The name of the CaPool this Certificate belongs to.
	Pool pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if
	// this field is present.
	RevocationDetails CertificateRevocationDetailArrayInput
	// Output only. The time at which this CertificateAuthority was updated. This is in RFC3339 text format.
	UpdateTime pulumi.StringPtrInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// Certificate Authority name.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The resource name for a CertificateTemplate used to issue this certificate,
	// in the format `projects/*/locations/*/certificateTemplates/*`. If this is specified,
	// the caller must have the necessary permission to use this template. If this is
	// omitted, no template will be used. This template must be in the same location
	// as the Certificate.
	CertificateTemplate *string `pulumi:"certificateTemplate"`
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	Config *CertificateConfig `pulumi:"config"`
	// Labels with user-defined metadata to apply to this resource.
	Labels map[string]string `pulumi:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime *string `pulumi:"lifetime"`
	// Location of the Certificate. A full list of valid locations can be found by
	// running `gcloud privateca locations list`.
	Location string `pulumi:"location"`
	// The name for this Certificate.
	Name *string `pulumi:"name"`
	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	PemCsr *string `pulumi:"pemCsr"`
	// The name of the CaPool this Certificate belongs to.
	Pool string `pulumi:"pool"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// Certificate Authority name.
	CertificateAuthority pulumi.StringPtrInput
	// The resource name for a CertificateTemplate used to issue this certificate,
	// in the format `projects/*/locations/*/certificateTemplates/*`. If this is specified,
	// the caller must have the necessary permission to use this template. If this is
	// omitted, no template will be used. This template must be in the same location
	// as the Certificate.
	CertificateTemplate pulumi.StringPtrInput
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	Config CertificateConfigPtrInput
	// Labels with user-defined metadata to apply to this resource.
	Labels pulumi.StringMapInput
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	Lifetime pulumi.StringPtrInput
	// Location of the Certificate. A full list of valid locations can be found by
	// running `gcloud privateca locations list`.
	Location pulumi.StringInput
	// The name for this Certificate.
	Name pulumi.StringPtrInput
	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	PemCsr pulumi.StringPtrInput
	// The name of the CaPool this Certificate belongs to.
	Pool pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (*Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((*Certificate)(nil))
}

func (i *Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

func (i *Certificate) ToCertificatePtrOutput() CertificatePtrOutput {
	return i.ToCertificatePtrOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificatePtrOutputWithContext(ctx context.Context) CertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePtrOutput)
}

type CertificatePtrInput interface {
	pulumi.Input

	ToCertificatePtrOutput() CertificatePtrOutput
	ToCertificatePtrOutputWithContext(ctx context.Context) CertificatePtrOutput
}

type certificatePtrType CertificateArgs

func (*certificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil))
}

func (i *certificatePtrType) ToCertificatePtrOutput() CertificatePtrOutput {
	return i.ToCertificatePtrOutputWithContext(context.Background())
}

func (i *certificatePtrType) ToCertificatePtrOutputWithContext(ctx context.Context) CertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePtrOutput)
}

// CertificateArrayInput is an input type that accepts CertificateArray and CertificateArrayOutput values.
// You can construct a concrete instance of `CertificateArrayInput` via:
//
//          CertificateArray{ CertificateArgs{...} }
type CertificateArrayInput interface {
	pulumi.Input

	ToCertificateArrayOutput() CertificateArrayOutput
	ToCertificateArrayOutputWithContext(context.Context) CertificateArrayOutput
}

type CertificateArray []CertificateInput

func (CertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (i CertificateArray) ToCertificateArrayOutput() CertificateArrayOutput {
	return i.ToCertificateArrayOutputWithContext(context.Background())
}

func (i CertificateArray) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateArrayOutput)
}

// CertificateMapInput is an input type that accepts CertificateMap and CertificateMapOutput values.
// You can construct a concrete instance of `CertificateMapInput` via:
//
//          CertificateMap{ "key": CertificateArgs{...} }
type CertificateMapInput interface {
	pulumi.Input

	ToCertificateMapOutput() CertificateMapOutput
	ToCertificateMapOutputWithContext(context.Context) CertificateMapOutput
}

type CertificateMap map[string]CertificateInput

func (CertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (i CertificateMap) ToCertificateMapOutput() CertificateMapOutput {
	return i.ToCertificateMapOutputWithContext(context.Background())
}

func (i CertificateMap) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapOutput)
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Certificate)(nil))
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificatePtrOutput() CertificatePtrOutput {
	return o.ToCertificatePtrOutputWithContext(context.Background())
}

func (o CertificateOutput) ToCertificatePtrOutputWithContext(ctx context.Context) CertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Certificate) *Certificate {
		return &v
	}).(CertificatePtrOutput)
}

type CertificatePtrOutput struct{ *pulumi.OutputState }

func (CertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil))
}

func (o CertificatePtrOutput) ToCertificatePtrOutput() CertificatePtrOutput {
	return o
}

func (o CertificatePtrOutput) ToCertificatePtrOutputWithContext(ctx context.Context) CertificatePtrOutput {
	return o
}

func (o CertificatePtrOutput) Elem() CertificateOutput {
	return o.ApplyT(func(v *Certificate) Certificate {
		if v != nil {
			return *v
		}
		var ret Certificate
		return ret
	}).(CertificateOutput)
}

type CertificateArrayOutput struct{ *pulumi.OutputState }

func (CertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Certificate)(nil))
}

func (o CertificateArrayOutput) ToCertificateArrayOutput() CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) Index(i pulumi.IntInput) CertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Certificate {
		return vs[0].([]Certificate)[vs[1].(int)]
	}).(CertificateOutput)
}

type CertificateMapOutput struct{ *pulumi.OutputState }

func (CertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Certificate)(nil))
}

func (o CertificateMapOutput) ToCertificateMapOutput() CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) MapIndex(k pulumi.StringInput) CertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Certificate {
		return vs[0].(map[string]Certificate)[vs[1].(string)]
	}).(CertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateInput)(nil)).Elem(), &Certificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatePtrInput)(nil)).Elem(), &Certificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateArrayInput)(nil)).Elem(), CertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapInput)(nil)).Elem(), CertificateMap{})
	pulumi.RegisterOutputType(CertificateOutput{})
	pulumi.RegisterOutputType(CertificatePtrOutput{})
	pulumi.RegisterOutputType(CertificateArrayOutput{})
	pulumi.RegisterOutputType(CertificateMapOutput{})
}
