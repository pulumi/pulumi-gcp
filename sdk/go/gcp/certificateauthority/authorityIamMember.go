// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package certificateauthority

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AuthorityIamMember struct {
	pulumi.CustomResourceState

	CertificateAuthority pulumi.StringOutput                  `pulumi:"certificateAuthority"`
	Condition            AuthorityIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag                 pulumi.StringOutput                  `pulumi:"etag"`
	Member               pulumi.StringOutput                  `pulumi:"member"`
	Role                 pulumi.StringOutput                  `pulumi:"role"`
}

// NewAuthorityIamMember registers a new resource with the given unique name, arguments, and options.
func NewAuthorityIamMember(ctx *pulumi.Context,
	name string, args *AuthorityIamMemberArgs, opts ...pulumi.ResourceOption) (*AuthorityIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateAuthority == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthority'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource AuthorityIamMember
	err := ctx.RegisterResource("gcp:certificateauthority/authorityIamMember:AuthorityIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorityIamMember gets an existing AuthorityIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorityIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorityIamMemberState, opts ...pulumi.ResourceOption) (*AuthorityIamMember, error) {
	var resource AuthorityIamMember
	err := ctx.ReadResource("gcp:certificateauthority/authorityIamMember:AuthorityIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorityIamMember resources.
type authorityIamMemberState struct {
	CertificateAuthority *string                      `pulumi:"certificateAuthority"`
	Condition            *AuthorityIamMemberCondition `pulumi:"condition"`
	Etag                 *string                      `pulumi:"etag"`
	Member               *string                      `pulumi:"member"`
	Role                 *string                      `pulumi:"role"`
}

type AuthorityIamMemberState struct {
	CertificateAuthority pulumi.StringPtrInput
	Condition            AuthorityIamMemberConditionPtrInput
	Etag                 pulumi.StringPtrInput
	Member               pulumi.StringPtrInput
	Role                 pulumi.StringPtrInput
}

func (AuthorityIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorityIamMemberState)(nil)).Elem()
}

type authorityIamMemberArgs struct {
	CertificateAuthority string                       `pulumi:"certificateAuthority"`
	Condition            *AuthorityIamMemberCondition `pulumi:"condition"`
	Member               string                       `pulumi:"member"`
	Role                 string                       `pulumi:"role"`
}

// The set of arguments for constructing a AuthorityIamMember resource.
type AuthorityIamMemberArgs struct {
	CertificateAuthority pulumi.StringInput
	Condition            AuthorityIamMemberConditionPtrInput
	Member               pulumi.StringInput
	Role                 pulumi.StringInput
}

func (AuthorityIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorityIamMemberArgs)(nil)).Elem()
}

type AuthorityIamMemberInput interface {
	pulumi.Input

	ToAuthorityIamMemberOutput() AuthorityIamMemberOutput
	ToAuthorityIamMemberOutputWithContext(ctx context.Context) AuthorityIamMemberOutput
}

func (*AuthorityIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorityIamMember)(nil))
}

func (i *AuthorityIamMember) ToAuthorityIamMemberOutput() AuthorityIamMemberOutput {
	return i.ToAuthorityIamMemberOutputWithContext(context.Background())
}

func (i *AuthorityIamMember) ToAuthorityIamMemberOutputWithContext(ctx context.Context) AuthorityIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityIamMemberOutput)
}

func (i *AuthorityIamMember) ToAuthorityIamMemberPtrOutput() AuthorityIamMemberPtrOutput {
	return i.ToAuthorityIamMemberPtrOutputWithContext(context.Background())
}

func (i *AuthorityIamMember) ToAuthorityIamMemberPtrOutputWithContext(ctx context.Context) AuthorityIamMemberPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityIamMemberPtrOutput)
}

type AuthorityIamMemberPtrInput interface {
	pulumi.Input

	ToAuthorityIamMemberPtrOutput() AuthorityIamMemberPtrOutput
	ToAuthorityIamMemberPtrOutputWithContext(ctx context.Context) AuthorityIamMemberPtrOutput
}

type authorityIamMemberPtrType AuthorityIamMemberArgs

func (*authorityIamMemberPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorityIamMember)(nil))
}

func (i *authorityIamMemberPtrType) ToAuthorityIamMemberPtrOutput() AuthorityIamMemberPtrOutput {
	return i.ToAuthorityIamMemberPtrOutputWithContext(context.Background())
}

func (i *authorityIamMemberPtrType) ToAuthorityIamMemberPtrOutputWithContext(ctx context.Context) AuthorityIamMemberPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityIamMemberPtrOutput)
}

// AuthorityIamMemberArrayInput is an input type that accepts AuthorityIamMemberArray and AuthorityIamMemberArrayOutput values.
// You can construct a concrete instance of `AuthorityIamMemberArrayInput` via:
//
//          AuthorityIamMemberArray{ AuthorityIamMemberArgs{...} }
type AuthorityIamMemberArrayInput interface {
	pulumi.Input

	ToAuthorityIamMemberArrayOutput() AuthorityIamMemberArrayOutput
	ToAuthorityIamMemberArrayOutputWithContext(context.Context) AuthorityIamMemberArrayOutput
}

type AuthorityIamMemberArray []AuthorityIamMemberInput

func (AuthorityIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AuthorityIamMember)(nil))
}

func (i AuthorityIamMemberArray) ToAuthorityIamMemberArrayOutput() AuthorityIamMemberArrayOutput {
	return i.ToAuthorityIamMemberArrayOutputWithContext(context.Background())
}

func (i AuthorityIamMemberArray) ToAuthorityIamMemberArrayOutputWithContext(ctx context.Context) AuthorityIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityIamMemberArrayOutput)
}

// AuthorityIamMemberMapInput is an input type that accepts AuthorityIamMemberMap and AuthorityIamMemberMapOutput values.
// You can construct a concrete instance of `AuthorityIamMemberMapInput` via:
//
//          AuthorityIamMemberMap{ "key": AuthorityIamMemberArgs{...} }
type AuthorityIamMemberMapInput interface {
	pulumi.Input

	ToAuthorityIamMemberMapOutput() AuthorityIamMemberMapOutput
	ToAuthorityIamMemberMapOutputWithContext(context.Context) AuthorityIamMemberMapOutput
}

type AuthorityIamMemberMap map[string]AuthorityIamMemberInput

func (AuthorityIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AuthorityIamMember)(nil))
}

func (i AuthorityIamMemberMap) ToAuthorityIamMemberMapOutput() AuthorityIamMemberMapOutput {
	return i.ToAuthorityIamMemberMapOutputWithContext(context.Background())
}

func (i AuthorityIamMemberMap) ToAuthorityIamMemberMapOutputWithContext(ctx context.Context) AuthorityIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityIamMemberMapOutput)
}

type AuthorityIamMemberOutput struct {
	*pulumi.OutputState
}

func (AuthorityIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorityIamMember)(nil))
}

func (o AuthorityIamMemberOutput) ToAuthorityIamMemberOutput() AuthorityIamMemberOutput {
	return o
}

func (o AuthorityIamMemberOutput) ToAuthorityIamMemberOutputWithContext(ctx context.Context) AuthorityIamMemberOutput {
	return o
}

func (o AuthorityIamMemberOutput) ToAuthorityIamMemberPtrOutput() AuthorityIamMemberPtrOutput {
	return o.ToAuthorityIamMemberPtrOutputWithContext(context.Background())
}

func (o AuthorityIamMemberOutput) ToAuthorityIamMemberPtrOutputWithContext(ctx context.Context) AuthorityIamMemberPtrOutput {
	return o.ApplyT(func(v AuthorityIamMember) *AuthorityIamMember {
		return &v
	}).(AuthorityIamMemberPtrOutput)
}

type AuthorityIamMemberPtrOutput struct {
	*pulumi.OutputState
}

func (AuthorityIamMemberPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorityIamMember)(nil))
}

func (o AuthorityIamMemberPtrOutput) ToAuthorityIamMemberPtrOutput() AuthorityIamMemberPtrOutput {
	return o
}

func (o AuthorityIamMemberPtrOutput) ToAuthorityIamMemberPtrOutputWithContext(ctx context.Context) AuthorityIamMemberPtrOutput {
	return o
}

type AuthorityIamMemberArrayOutput struct{ *pulumi.OutputState }

func (AuthorityIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorityIamMember)(nil))
}

func (o AuthorityIamMemberArrayOutput) ToAuthorityIamMemberArrayOutput() AuthorityIamMemberArrayOutput {
	return o
}

func (o AuthorityIamMemberArrayOutput) ToAuthorityIamMemberArrayOutputWithContext(ctx context.Context) AuthorityIamMemberArrayOutput {
	return o
}

func (o AuthorityIamMemberArrayOutput) Index(i pulumi.IntInput) AuthorityIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthorityIamMember {
		return vs[0].([]AuthorityIamMember)[vs[1].(int)]
	}).(AuthorityIamMemberOutput)
}

type AuthorityIamMemberMapOutput struct{ *pulumi.OutputState }

func (AuthorityIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AuthorityIamMember)(nil))
}

func (o AuthorityIamMemberMapOutput) ToAuthorityIamMemberMapOutput() AuthorityIamMemberMapOutput {
	return o
}

func (o AuthorityIamMemberMapOutput) ToAuthorityIamMemberMapOutputWithContext(ctx context.Context) AuthorityIamMemberMapOutput {
	return o
}

func (o AuthorityIamMemberMapOutput) MapIndex(k pulumi.StringInput) AuthorityIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AuthorityIamMember {
		return vs[0].(map[string]AuthorityIamMember)[vs[1].(string)]
	}).(AuthorityIamMemberOutput)
}

func init() {
	pulumi.RegisterOutputType(AuthorityIamMemberOutput{})
	pulumi.RegisterOutputType(AuthorityIamMemberPtrOutput{})
	pulumi.RegisterOutputType(AuthorityIamMemberArrayOutput{})
	pulumi.RegisterOutputType(AuthorityIamMemberMapOutput{})
}
