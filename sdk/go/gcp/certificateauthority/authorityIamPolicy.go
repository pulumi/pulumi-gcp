// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package certificateauthority

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AuthorityIamPolicy struct {
	pulumi.CustomResourceState

	CertificateAuthority pulumi.StringOutput `pulumi:"certificateAuthority"`
	Etag                 pulumi.StringOutput `pulumi:"etag"`
	PolicyData           pulumi.StringOutput `pulumi:"policyData"`
}

// NewAuthorityIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewAuthorityIamPolicy(ctx *pulumi.Context,
	name string, args *AuthorityIamPolicyArgs, opts ...pulumi.ResourceOption) (*AuthorityIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateAuthority == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthority'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	var resource AuthorityIamPolicy
	err := ctx.RegisterResource("gcp:certificateauthority/authorityIamPolicy:AuthorityIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorityIamPolicy gets an existing AuthorityIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorityIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorityIamPolicyState, opts ...pulumi.ResourceOption) (*AuthorityIamPolicy, error) {
	var resource AuthorityIamPolicy
	err := ctx.ReadResource("gcp:certificateauthority/authorityIamPolicy:AuthorityIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorityIamPolicy resources.
type authorityIamPolicyState struct {
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	Etag                 *string `pulumi:"etag"`
	PolicyData           *string `pulumi:"policyData"`
}

type AuthorityIamPolicyState struct {
	CertificateAuthority pulumi.StringPtrInput
	Etag                 pulumi.StringPtrInput
	PolicyData           pulumi.StringPtrInput
}

func (AuthorityIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorityIamPolicyState)(nil)).Elem()
}

type authorityIamPolicyArgs struct {
	CertificateAuthority string `pulumi:"certificateAuthority"`
	PolicyData           string `pulumi:"policyData"`
}

// The set of arguments for constructing a AuthorityIamPolicy resource.
type AuthorityIamPolicyArgs struct {
	CertificateAuthority pulumi.StringInput
	PolicyData           pulumi.StringInput
}

func (AuthorityIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorityIamPolicyArgs)(nil)).Elem()
}

type AuthorityIamPolicyInput interface {
	pulumi.Input

	ToAuthorityIamPolicyOutput() AuthorityIamPolicyOutput
	ToAuthorityIamPolicyOutputWithContext(ctx context.Context) AuthorityIamPolicyOutput
}

func (*AuthorityIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorityIamPolicy)(nil))
}

func (i *AuthorityIamPolicy) ToAuthorityIamPolicyOutput() AuthorityIamPolicyOutput {
	return i.ToAuthorityIamPolicyOutputWithContext(context.Background())
}

func (i *AuthorityIamPolicy) ToAuthorityIamPolicyOutputWithContext(ctx context.Context) AuthorityIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityIamPolicyOutput)
}

type AuthorityIamPolicyOutput struct {
	*pulumi.OutputState
}

func (AuthorityIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorityIamPolicy)(nil))
}

func (o AuthorityIamPolicyOutput) ToAuthorityIamPolicyOutput() AuthorityIamPolicyOutput {
	return o
}

func (o AuthorityIamPolicyOutput) ToAuthorityIamPolicyOutputWithContext(ctx context.Context) AuthorityIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AuthorityIamPolicyOutput{})
}
