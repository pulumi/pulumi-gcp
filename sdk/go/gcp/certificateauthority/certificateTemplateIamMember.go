// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package certificateauthority

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/certificateTemplates/{{name}} * {{project}}/{{location}}/{{name}} * {{location}}/{{name}} Any variables not passed in the import command will be taken from the provider configuration. Certificate Authority Service certificatetemplate IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//  $ pulumi import gcp:certificateauthority/certificateTemplateIamMember:CertificateTemplateIamMember editor "projects/{{project}}/locations/{{location}}/certificateTemplates/{{certificate_template}} roles/privateca.templateUser user:jane@example.com"
// ```
//
//  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//  $ pulumi import gcp:certificateauthority/certificateTemplateIamMember:CertificateTemplateIamMember editor "projects/{{project}}/locations/{{location}}/certificateTemplates/{{certificate_template}} roles/privateca.templateUser"
// ```
//
//  IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//  $ pulumi import gcp:certificateauthority/certificateTemplateIamMember:CertificateTemplateIamMember editor projects/{{project}}/locations/{{location}}/certificateTemplates/{{certificate_template}}
// ```
//
//  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type CertificateTemplateIamMember struct {
	pulumi.CustomResourceState

	// Used to find the parent resource to bind the IAM policy to
	CertificateTemplate pulumi.StringOutput `pulumi:"certificateTemplate"`
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition CertificateTemplateIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag     pulumi.StringOutput `pulumi:"etag"`
	Location pulumi.StringOutput `pulumi:"location"`
	Member   pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `certificateauthority.CertificateTemplateIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewCertificateTemplateIamMember registers a new resource with the given unique name, arguments, and options.
func NewCertificateTemplateIamMember(ctx *pulumi.Context,
	name string, args *CertificateTemplateIamMemberArgs, opts ...pulumi.ResourceOption) (*CertificateTemplateIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateTemplate == nil {
		return nil, errors.New("invalid value for required argument 'CertificateTemplate'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource CertificateTemplateIamMember
	err := ctx.RegisterResource("gcp:certificateauthority/certificateTemplateIamMember:CertificateTemplateIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateTemplateIamMember gets an existing CertificateTemplateIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateTemplateIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateTemplateIamMemberState, opts ...pulumi.ResourceOption) (*CertificateTemplateIamMember, error) {
	var resource CertificateTemplateIamMember
	err := ctx.ReadResource("gcp:certificateauthority/certificateTemplateIamMember:CertificateTemplateIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateTemplateIamMember resources.
type certificateTemplateIamMemberState struct {
	// Used to find the parent resource to bind the IAM policy to
	CertificateTemplate *string `pulumi:"certificateTemplate"`
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *CertificateTemplateIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag     *string `pulumi:"etag"`
	Location *string `pulumi:"location"`
	Member   *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `certificateauthority.CertificateTemplateIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type CertificateTemplateIamMemberState struct {
	// Used to find the parent resource to bind the IAM policy to
	CertificateTemplate pulumi.StringPtrInput
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition CertificateTemplateIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag     pulumi.StringPtrInput
	Location pulumi.StringPtrInput
	Member   pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `certificateauthority.CertificateTemplateIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (CertificateTemplateIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateTemplateIamMemberState)(nil)).Elem()
}

type certificateTemplateIamMemberArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	CertificateTemplate string `pulumi:"certificateTemplate"`
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *CertificateTemplateIamMemberCondition `pulumi:"condition"`
	Location  *string                                `pulumi:"location"`
	Member    string                                 `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `certificateauthority.CertificateTemplateIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a CertificateTemplateIamMember resource.
type CertificateTemplateIamMemberArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	CertificateTemplate pulumi.StringInput
	// ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition CertificateTemplateIamMemberConditionPtrInput
	Location  pulumi.StringPtrInput
	Member    pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `certificateauthority.CertificateTemplateIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (CertificateTemplateIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateTemplateIamMemberArgs)(nil)).Elem()
}

type CertificateTemplateIamMemberInput interface {
	pulumi.Input

	ToCertificateTemplateIamMemberOutput() CertificateTemplateIamMemberOutput
	ToCertificateTemplateIamMemberOutputWithContext(ctx context.Context) CertificateTemplateIamMemberOutput
}

func (*CertificateTemplateIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateTemplateIamMember)(nil)).Elem()
}

func (i *CertificateTemplateIamMember) ToCertificateTemplateIamMemberOutput() CertificateTemplateIamMemberOutput {
	return i.ToCertificateTemplateIamMemberOutputWithContext(context.Background())
}

func (i *CertificateTemplateIamMember) ToCertificateTemplateIamMemberOutputWithContext(ctx context.Context) CertificateTemplateIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTemplateIamMemberOutput)
}

// CertificateTemplateIamMemberArrayInput is an input type that accepts CertificateTemplateIamMemberArray and CertificateTemplateIamMemberArrayOutput values.
// You can construct a concrete instance of `CertificateTemplateIamMemberArrayInput` via:
//
//          CertificateTemplateIamMemberArray{ CertificateTemplateIamMemberArgs{...} }
type CertificateTemplateIamMemberArrayInput interface {
	pulumi.Input

	ToCertificateTemplateIamMemberArrayOutput() CertificateTemplateIamMemberArrayOutput
	ToCertificateTemplateIamMemberArrayOutputWithContext(context.Context) CertificateTemplateIamMemberArrayOutput
}

type CertificateTemplateIamMemberArray []CertificateTemplateIamMemberInput

func (CertificateTemplateIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateTemplateIamMember)(nil)).Elem()
}

func (i CertificateTemplateIamMemberArray) ToCertificateTemplateIamMemberArrayOutput() CertificateTemplateIamMemberArrayOutput {
	return i.ToCertificateTemplateIamMemberArrayOutputWithContext(context.Background())
}

func (i CertificateTemplateIamMemberArray) ToCertificateTemplateIamMemberArrayOutputWithContext(ctx context.Context) CertificateTemplateIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTemplateIamMemberArrayOutput)
}

// CertificateTemplateIamMemberMapInput is an input type that accepts CertificateTemplateIamMemberMap and CertificateTemplateIamMemberMapOutput values.
// You can construct a concrete instance of `CertificateTemplateIamMemberMapInput` via:
//
//          CertificateTemplateIamMemberMap{ "key": CertificateTemplateIamMemberArgs{...} }
type CertificateTemplateIamMemberMapInput interface {
	pulumi.Input

	ToCertificateTemplateIamMemberMapOutput() CertificateTemplateIamMemberMapOutput
	ToCertificateTemplateIamMemberMapOutputWithContext(context.Context) CertificateTemplateIamMemberMapOutput
}

type CertificateTemplateIamMemberMap map[string]CertificateTemplateIamMemberInput

func (CertificateTemplateIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateTemplateIamMember)(nil)).Elem()
}

func (i CertificateTemplateIamMemberMap) ToCertificateTemplateIamMemberMapOutput() CertificateTemplateIamMemberMapOutput {
	return i.ToCertificateTemplateIamMemberMapOutputWithContext(context.Background())
}

func (i CertificateTemplateIamMemberMap) ToCertificateTemplateIamMemberMapOutputWithContext(ctx context.Context) CertificateTemplateIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTemplateIamMemberMapOutput)
}

type CertificateTemplateIamMemberOutput struct{ *pulumi.OutputState }

func (CertificateTemplateIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateTemplateIamMember)(nil)).Elem()
}

func (o CertificateTemplateIamMemberOutput) ToCertificateTemplateIamMemberOutput() CertificateTemplateIamMemberOutput {
	return o
}

func (o CertificateTemplateIamMemberOutput) ToCertificateTemplateIamMemberOutputWithContext(ctx context.Context) CertificateTemplateIamMemberOutput {
	return o
}

type CertificateTemplateIamMemberArrayOutput struct{ *pulumi.OutputState }

func (CertificateTemplateIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateTemplateIamMember)(nil)).Elem()
}

func (o CertificateTemplateIamMemberArrayOutput) ToCertificateTemplateIamMemberArrayOutput() CertificateTemplateIamMemberArrayOutput {
	return o
}

func (o CertificateTemplateIamMemberArrayOutput) ToCertificateTemplateIamMemberArrayOutputWithContext(ctx context.Context) CertificateTemplateIamMemberArrayOutput {
	return o
}

func (o CertificateTemplateIamMemberArrayOutput) Index(i pulumi.IntInput) CertificateTemplateIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateTemplateIamMember {
		return vs[0].([]*CertificateTemplateIamMember)[vs[1].(int)]
	}).(CertificateTemplateIamMemberOutput)
}

type CertificateTemplateIamMemberMapOutput struct{ *pulumi.OutputState }

func (CertificateTemplateIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateTemplateIamMember)(nil)).Elem()
}

func (o CertificateTemplateIamMemberMapOutput) ToCertificateTemplateIamMemberMapOutput() CertificateTemplateIamMemberMapOutput {
	return o
}

func (o CertificateTemplateIamMemberMapOutput) ToCertificateTemplateIamMemberMapOutputWithContext(ctx context.Context) CertificateTemplateIamMemberMapOutput {
	return o
}

func (o CertificateTemplateIamMemberMapOutput) MapIndex(k pulumi.StringInput) CertificateTemplateIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateTemplateIamMember {
		return vs[0].(map[string]*CertificateTemplateIamMember)[vs[1].(string)]
	}).(CertificateTemplateIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateTemplateIamMemberInput)(nil)).Elem(), &CertificateTemplateIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateTemplateIamMemberArrayInput)(nil)).Elem(), CertificateTemplateIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateTemplateIamMemberMapInput)(nil)).Elem(), CertificateTemplateIamMemberMap{})
	pulumi.RegisterOutputType(CertificateTemplateIamMemberOutput{})
	pulumi.RegisterOutputType(CertificateTemplateIamMemberArrayOutput{})
	pulumi.RegisterOutputType(CertificateTemplateIamMemberMapOutput{})
}
