// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package certificateauthority

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Certificate Authority Service CertificateAuthority. Each of these resources serves a different use case:
//
// * `certificateauthority.AuthorityIamPolicy`: Authoritative. Sets the IAM policy for the certificateauthority and replaces any existing policy already attached.
// * `certificateauthority.AuthorityIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the certificateauthority are preserved.
// * `certificateauthority.AuthorityIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the certificateauthority are preserved.
//
// > **Note:** `certificateauthority.AuthorityIamPolicy` **cannot** be used in conjunction with `certificateauthority.AuthorityIamBinding` and `certificateauthority.AuthorityIamMember` or they will fight over what your policy should be.
//
// > **Note:** `certificateauthority.AuthorityIamBinding` resources **can be** used in conjunction with `certificateauthority.AuthorityIamMember` resources **only if** they do not grant privilege to the same role.
// ## google\_privateca\_certificate\_authority\_iam\_policy
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/certificateauthority"
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/organizations"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
// 			Bindings: []organizations.GetIAMPolicyBinding{
// 				organizations.GetIAMPolicyBinding{
// 					Role: "roles/privateca.certificateManager",
// 					Members: []string{
// 						"user:jane@example.com",
// 					},
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = certificateauthority.NewAuthorityIamPolicy(ctx, "policy", &certificateauthority.AuthorityIamPolicyArgs{
// 			CertificateAuthority: pulumi.Any(google_privateca_certificate_authority.Default.Id),
// 			PolicyData:           pulumi.String(admin.PolicyData),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## google\_privateca\_certificate\_authority\_iam\_binding
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/certificateauthority"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := certificateauthority.NewAuthorityIamBinding(ctx, "binding", &certificateauthority.AuthorityIamBindingArgs{
// 			CertificateAuthority: pulumi.Any(google_privateca_certificate_authority.Default.Id),
// 			Role:                 pulumi.String("roles/privateca.certificateManager"),
// 			Members: pulumi.StringArray{
// 				pulumi.String("user:jane@example.com"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## google\_privateca\_certificate\_authority\_iam\_member
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/certificateauthority"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := certificateauthority.NewAuthorityIamMember(ctx, "member", &certificateauthority.AuthorityIamMemberArgs{
// 			CertificateAuthority: pulumi.Any(google_privateca_certificate_authority.Default.Id),
// 			Role:                 pulumi.String("roles/privateca.certificateManager"),
// 			Member:               pulumi.String("user:jane@example.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/certificateAuthorities/{{certificate_authority_id}} * {{project}}/{{location}}/{{certificate_authority_id}} * {{location}}/{{certificate_authority_id}} Any variables not passed in the import command will be taken from the provider configuration. Certificate Authority Service certificateauthority IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//  $ pulumi import gcp:certificateauthority/authorityIamBinding:AuthorityIamBinding editor "projects/{{project}}/locations/{{location}}/certificateAuthorities/{{certificate_authority_id}} roles/privateca.certificateManager user:jane@example.com"
// ```
//
//  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//  $ pulumi import gcp:certificateauthority/authorityIamBinding:AuthorityIamBinding editor "projects/{{project}}/locations/{{location}}/certificateAuthorities/{{certificate_authority_id}} roles/privateca.certificateManager"
// ```
//
//  IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//  $ pulumi import gcp:certificateauthority/authorityIamBinding:AuthorityIamBinding editor projects/{{project}}/locations/{{location}}/certificateAuthorities/{{certificate_authority_id}}
// ```
//
//  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type AuthorityIamBinding struct {
	pulumi.CustomResourceState

	CertificateAuthority pulumi.StringOutput                   `pulumi:"certificateAuthority"`
	Condition            AuthorityIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringOutput      `pulumi:"etag"`
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The role that should be applied. Only one
	// `certificateauthority.AuthorityIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewAuthorityIamBinding registers a new resource with the given unique name, arguments, and options.
func NewAuthorityIamBinding(ctx *pulumi.Context,
	name string, args *AuthorityIamBindingArgs, opts ...pulumi.ResourceOption) (*AuthorityIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateAuthority == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthority'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource AuthorityIamBinding
	err := ctx.RegisterResource("gcp:certificateauthority/authorityIamBinding:AuthorityIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorityIamBinding gets an existing AuthorityIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorityIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorityIamBindingState, opts ...pulumi.ResourceOption) (*AuthorityIamBinding, error) {
	var resource AuthorityIamBinding
	err := ctx.ReadResource("gcp:certificateauthority/authorityIamBinding:AuthorityIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorityIamBinding resources.
type authorityIamBindingState struct {
	CertificateAuthority *string                       `pulumi:"certificateAuthority"`
	Condition            *AuthorityIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag    *string  `pulumi:"etag"`
	Members []string `pulumi:"members"`
	// The role that should be applied. Only one
	// `certificateauthority.AuthorityIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type AuthorityIamBindingState struct {
	CertificateAuthority pulumi.StringPtrInput
	Condition            AuthorityIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringPtrInput
	Members pulumi.StringArrayInput
	// The role that should be applied. Only one
	// `certificateauthority.AuthorityIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (AuthorityIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorityIamBindingState)(nil)).Elem()
}

type authorityIamBindingArgs struct {
	CertificateAuthority string                        `pulumi:"certificateAuthority"`
	Condition            *AuthorityIamBindingCondition `pulumi:"condition"`
	Members              []string                      `pulumi:"members"`
	// The role that should be applied. Only one
	// `certificateauthority.AuthorityIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a AuthorityIamBinding resource.
type AuthorityIamBindingArgs struct {
	CertificateAuthority pulumi.StringInput
	Condition            AuthorityIamBindingConditionPtrInput
	Members              pulumi.StringArrayInput
	// The role that should be applied. Only one
	// `certificateauthority.AuthorityIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (AuthorityIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorityIamBindingArgs)(nil)).Elem()
}

type AuthorityIamBindingInput interface {
	pulumi.Input

	ToAuthorityIamBindingOutput() AuthorityIamBindingOutput
	ToAuthorityIamBindingOutputWithContext(ctx context.Context) AuthorityIamBindingOutput
}

func (*AuthorityIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorityIamBinding)(nil))
}

func (i *AuthorityIamBinding) ToAuthorityIamBindingOutput() AuthorityIamBindingOutput {
	return i.ToAuthorityIamBindingOutputWithContext(context.Background())
}

func (i *AuthorityIamBinding) ToAuthorityIamBindingOutputWithContext(ctx context.Context) AuthorityIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityIamBindingOutput)
}

func (i *AuthorityIamBinding) ToAuthorityIamBindingPtrOutput() AuthorityIamBindingPtrOutput {
	return i.ToAuthorityIamBindingPtrOutputWithContext(context.Background())
}

func (i *AuthorityIamBinding) ToAuthorityIamBindingPtrOutputWithContext(ctx context.Context) AuthorityIamBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityIamBindingPtrOutput)
}

type AuthorityIamBindingPtrInput interface {
	pulumi.Input

	ToAuthorityIamBindingPtrOutput() AuthorityIamBindingPtrOutput
	ToAuthorityIamBindingPtrOutputWithContext(ctx context.Context) AuthorityIamBindingPtrOutput
}

type authorityIamBindingPtrType AuthorityIamBindingArgs

func (*authorityIamBindingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorityIamBinding)(nil))
}

func (i *authorityIamBindingPtrType) ToAuthorityIamBindingPtrOutput() AuthorityIamBindingPtrOutput {
	return i.ToAuthorityIamBindingPtrOutputWithContext(context.Background())
}

func (i *authorityIamBindingPtrType) ToAuthorityIamBindingPtrOutputWithContext(ctx context.Context) AuthorityIamBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityIamBindingPtrOutput)
}

// AuthorityIamBindingArrayInput is an input type that accepts AuthorityIamBindingArray and AuthorityIamBindingArrayOutput values.
// You can construct a concrete instance of `AuthorityIamBindingArrayInput` via:
//
//          AuthorityIamBindingArray{ AuthorityIamBindingArgs{...} }
type AuthorityIamBindingArrayInput interface {
	pulumi.Input

	ToAuthorityIamBindingArrayOutput() AuthorityIamBindingArrayOutput
	ToAuthorityIamBindingArrayOutputWithContext(context.Context) AuthorityIamBindingArrayOutput
}

type AuthorityIamBindingArray []AuthorityIamBindingInput

func (AuthorityIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AuthorityIamBinding)(nil))
}

func (i AuthorityIamBindingArray) ToAuthorityIamBindingArrayOutput() AuthorityIamBindingArrayOutput {
	return i.ToAuthorityIamBindingArrayOutputWithContext(context.Background())
}

func (i AuthorityIamBindingArray) ToAuthorityIamBindingArrayOutputWithContext(ctx context.Context) AuthorityIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityIamBindingArrayOutput)
}

// AuthorityIamBindingMapInput is an input type that accepts AuthorityIamBindingMap and AuthorityIamBindingMapOutput values.
// You can construct a concrete instance of `AuthorityIamBindingMapInput` via:
//
//          AuthorityIamBindingMap{ "key": AuthorityIamBindingArgs{...} }
type AuthorityIamBindingMapInput interface {
	pulumi.Input

	ToAuthorityIamBindingMapOutput() AuthorityIamBindingMapOutput
	ToAuthorityIamBindingMapOutputWithContext(context.Context) AuthorityIamBindingMapOutput
}

type AuthorityIamBindingMap map[string]AuthorityIamBindingInput

func (AuthorityIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AuthorityIamBinding)(nil))
}

func (i AuthorityIamBindingMap) ToAuthorityIamBindingMapOutput() AuthorityIamBindingMapOutput {
	return i.ToAuthorityIamBindingMapOutputWithContext(context.Background())
}

func (i AuthorityIamBindingMap) ToAuthorityIamBindingMapOutputWithContext(ctx context.Context) AuthorityIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityIamBindingMapOutput)
}

type AuthorityIamBindingOutput struct {
	*pulumi.OutputState
}

func (AuthorityIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorityIamBinding)(nil))
}

func (o AuthorityIamBindingOutput) ToAuthorityIamBindingOutput() AuthorityIamBindingOutput {
	return o
}

func (o AuthorityIamBindingOutput) ToAuthorityIamBindingOutputWithContext(ctx context.Context) AuthorityIamBindingOutput {
	return o
}

func (o AuthorityIamBindingOutput) ToAuthorityIamBindingPtrOutput() AuthorityIamBindingPtrOutput {
	return o.ToAuthorityIamBindingPtrOutputWithContext(context.Background())
}

func (o AuthorityIamBindingOutput) ToAuthorityIamBindingPtrOutputWithContext(ctx context.Context) AuthorityIamBindingPtrOutput {
	return o.ApplyT(func(v AuthorityIamBinding) *AuthorityIamBinding {
		return &v
	}).(AuthorityIamBindingPtrOutput)
}

type AuthorityIamBindingPtrOutput struct {
	*pulumi.OutputState
}

func (AuthorityIamBindingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorityIamBinding)(nil))
}

func (o AuthorityIamBindingPtrOutput) ToAuthorityIamBindingPtrOutput() AuthorityIamBindingPtrOutput {
	return o
}

func (o AuthorityIamBindingPtrOutput) ToAuthorityIamBindingPtrOutputWithContext(ctx context.Context) AuthorityIamBindingPtrOutput {
	return o
}

type AuthorityIamBindingArrayOutput struct{ *pulumi.OutputState }

func (AuthorityIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorityIamBinding)(nil))
}

func (o AuthorityIamBindingArrayOutput) ToAuthorityIamBindingArrayOutput() AuthorityIamBindingArrayOutput {
	return o
}

func (o AuthorityIamBindingArrayOutput) ToAuthorityIamBindingArrayOutputWithContext(ctx context.Context) AuthorityIamBindingArrayOutput {
	return o
}

func (o AuthorityIamBindingArrayOutput) Index(i pulumi.IntInput) AuthorityIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthorityIamBinding {
		return vs[0].([]AuthorityIamBinding)[vs[1].(int)]
	}).(AuthorityIamBindingOutput)
}

type AuthorityIamBindingMapOutput struct{ *pulumi.OutputState }

func (AuthorityIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AuthorityIamBinding)(nil))
}

func (o AuthorityIamBindingMapOutput) ToAuthorityIamBindingMapOutput() AuthorityIamBindingMapOutput {
	return o
}

func (o AuthorityIamBindingMapOutput) ToAuthorityIamBindingMapOutputWithContext(ctx context.Context) AuthorityIamBindingMapOutput {
	return o
}

func (o AuthorityIamBindingMapOutput) MapIndex(k pulumi.StringInput) AuthorityIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AuthorityIamBinding {
		return vs[0].(map[string]AuthorityIamBinding)[vs[1].(string)]
	}).(AuthorityIamBindingOutput)
}

func init() {
	pulumi.RegisterOutputType(AuthorityIamBindingOutput{})
	pulumi.RegisterOutputType(AuthorityIamBindingPtrOutput{})
	pulumi.RegisterOutputType(AuthorityIamBindingArrayOutput{})
	pulumi.RegisterOutputType(AuthorityIamBindingMapOutput{})
}
