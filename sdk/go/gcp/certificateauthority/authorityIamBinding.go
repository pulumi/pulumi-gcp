// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package certificateauthority

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AuthorityIamBinding struct {
	pulumi.CustomResourceState

	CertificateAuthority pulumi.StringOutput                   `pulumi:"certificateAuthority"`
	Condition            AuthorityIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag                 pulumi.StringOutput                   `pulumi:"etag"`
	Members              pulumi.StringArrayOutput              `pulumi:"members"`
	Role                 pulumi.StringOutput                   `pulumi:"role"`
}

// NewAuthorityIamBinding registers a new resource with the given unique name, arguments, and options.
func NewAuthorityIamBinding(ctx *pulumi.Context,
	name string, args *AuthorityIamBindingArgs, opts ...pulumi.ResourceOption) (*AuthorityIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateAuthority == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthority'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource AuthorityIamBinding
	err := ctx.RegisterResource("gcp:certificateauthority/authorityIamBinding:AuthorityIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorityIamBinding gets an existing AuthorityIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorityIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorityIamBindingState, opts ...pulumi.ResourceOption) (*AuthorityIamBinding, error) {
	var resource AuthorityIamBinding
	err := ctx.ReadResource("gcp:certificateauthority/authorityIamBinding:AuthorityIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorityIamBinding resources.
type authorityIamBindingState struct {
	CertificateAuthority *string                       `pulumi:"certificateAuthority"`
	Condition            *AuthorityIamBindingCondition `pulumi:"condition"`
	Etag                 *string                       `pulumi:"etag"`
	Members              []string                      `pulumi:"members"`
	Role                 *string                       `pulumi:"role"`
}

type AuthorityIamBindingState struct {
	CertificateAuthority pulumi.StringPtrInput
	Condition            AuthorityIamBindingConditionPtrInput
	Etag                 pulumi.StringPtrInput
	Members              pulumi.StringArrayInput
	Role                 pulumi.StringPtrInput
}

func (AuthorityIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorityIamBindingState)(nil)).Elem()
}

type authorityIamBindingArgs struct {
	CertificateAuthority string                        `pulumi:"certificateAuthority"`
	Condition            *AuthorityIamBindingCondition `pulumi:"condition"`
	Members              []string                      `pulumi:"members"`
	Role                 string                        `pulumi:"role"`
}

// The set of arguments for constructing a AuthorityIamBinding resource.
type AuthorityIamBindingArgs struct {
	CertificateAuthority pulumi.StringInput
	Condition            AuthorityIamBindingConditionPtrInput
	Members              pulumi.StringArrayInput
	Role                 pulumi.StringInput
}

func (AuthorityIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorityIamBindingArgs)(nil)).Elem()
}

type AuthorityIamBindingInput interface {
	pulumi.Input

	ToAuthorityIamBindingOutput() AuthorityIamBindingOutput
	ToAuthorityIamBindingOutputWithContext(ctx context.Context) AuthorityIamBindingOutput
}

func (*AuthorityIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorityIamBinding)(nil))
}

func (i *AuthorityIamBinding) ToAuthorityIamBindingOutput() AuthorityIamBindingOutput {
	return i.ToAuthorityIamBindingOutputWithContext(context.Background())
}

func (i *AuthorityIamBinding) ToAuthorityIamBindingOutputWithContext(ctx context.Context) AuthorityIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityIamBindingOutput)
}

type AuthorityIamBindingOutput struct {
	*pulumi.OutputState
}

func (AuthorityIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorityIamBinding)(nil))
}

func (o AuthorityIamBindingOutput) ToAuthorityIamBindingOutput() AuthorityIamBindingOutput {
	return o
}

func (o AuthorityIamBindingOutput) ToAuthorityIamBindingOutputWithContext(ctx context.Context) AuthorityIamBindingOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AuthorityIamBindingOutput{})
}
