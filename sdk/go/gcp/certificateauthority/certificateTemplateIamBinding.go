// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificateauthority

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Certificate Authority Service CertificateTemplate. Each of these resources serves a different use case:
//
// * `certificateauthority.CertificateTemplateIamPolicy`: Authoritative. Sets the IAM policy for the certificatetemplate and replaces any existing policy already attached.
// * `certificateauthority.CertificateTemplateIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the certificatetemplate are preserved.
// * `certificateauthority.CertificateTemplateIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the certificatetemplate are preserved.
//
// > **Note:** `certificateauthority.CertificateTemplateIamPolicy` **cannot** be used in conjunction with `certificateauthority.CertificateTemplateIamBinding` and `certificateauthority.CertificateTemplateIamMember` or they will fight over what your policy should be.
//
// > **Note:** `certificateauthority.CertificateTemplateIamBinding` resources **can be** used in conjunction with `certificateauthority.CertificateTemplateIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## google\_privateca\_certificate\_template\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/privateca.templateUser",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = certificateauthority.NewCertificateTemplateIamPolicy(ctx, "policy", &certificateauthority.CertificateTemplateIamPolicyArgs{
//				CertificateTemplate: pulumi.Any(google_privateca_certificate_template.Default.Id),
//				PolicyData:          *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/privateca.templateUser",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = certificateauthority.NewCertificateTemplateIamPolicy(ctx, "policy", &certificateauthority.CertificateTemplateIamPolicyArgs{
//				CertificateTemplate: pulumi.Any(google_privateca_certificate_template.Default.Id),
//				PolicyData:          *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## google\_privateca\_certificate\_template\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := certificateauthority.NewCertificateTemplateIamBinding(ctx, "binding", &certificateauthority.CertificateTemplateIamBindingArgs{
//				CertificateTemplate: pulumi.Any(google_privateca_certificate_template.Default.Id),
//				Role:                pulumi.String("roles/privateca.templateUser"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := certificateauthority.NewCertificateTemplateIamBinding(ctx, "binding", &certificateauthority.CertificateTemplateIamBindingArgs{
//				CertificateTemplate: pulumi.Any(google_privateca_certificate_template.Default.Id),
//				Role:                pulumi.String("roles/privateca.templateUser"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &certificateauthority.CertificateTemplateIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## google\_privateca\_certificate\_template\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := certificateauthority.NewCertificateTemplateIamMember(ctx, "member", &certificateauthority.CertificateTemplateIamMemberArgs{
//				CertificateTemplate: pulumi.Any(google_privateca_certificate_template.Default.Id),
//				Role:                pulumi.String("roles/privateca.templateUser"),
//				Member:              pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := certificateauthority.NewCertificateTemplateIamMember(ctx, "member", &certificateauthority.CertificateTemplateIamMemberArgs{
//				CertificateTemplate: pulumi.Any(google_privateca_certificate_template.Default.Id),
//				Role:                pulumi.String("roles/privateca.templateUser"),
//				Member:              pulumi.String("user:jane@example.com"),
//				Condition: &certificateauthority.CertificateTemplateIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/certificateTemplates/{{name}} * {{project}}/{{location}}/{{name}} * {{location}}/{{name}} Any variables not passed in the import command will be taken from the provider configuration. Certificate Authority Service certificatetemplate IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:certificateauthority/certificateTemplateIamBinding:CertificateTemplateIamBinding editor "projects/{{project}}/locations/{{location}}/certificateTemplates/{{certificate_template}} roles/privateca.templateUser user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:certificateauthority/certificateTemplateIamBinding:CertificateTemplateIamBinding editor "projects/{{project}}/locations/{{location}}/certificateTemplates/{{certificate_template}} roles/privateca.templateUser"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:certificateauthority/certificateTemplateIamBinding:CertificateTemplateIamBinding editor projects/{{project}}/locations/{{location}}/certificateTemplates/{{certificate_template}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type CertificateTemplateIamBinding struct {
	pulumi.CustomResourceState

	// Used to find the parent resource to bind the IAM policy to
	CertificateTemplate pulumi.StringOutput `pulumi:"certificateTemplate"`
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition CertificateTemplateIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag     pulumi.StringOutput      `pulumi:"etag"`
	Location pulumi.StringOutput      `pulumi:"location"`
	Members  pulumi.StringArrayOutput `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `certificateauthority.CertificateTemplateIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewCertificateTemplateIamBinding registers a new resource with the given unique name, arguments, and options.
func NewCertificateTemplateIamBinding(ctx *pulumi.Context,
	name string, args *CertificateTemplateIamBindingArgs, opts ...pulumi.ResourceOption) (*CertificateTemplateIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateTemplate == nil {
		return nil, errors.New("invalid value for required argument 'CertificateTemplate'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource CertificateTemplateIamBinding
	err := ctx.RegisterResource("gcp:certificateauthority/certificateTemplateIamBinding:CertificateTemplateIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateTemplateIamBinding gets an existing CertificateTemplateIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateTemplateIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateTemplateIamBindingState, opts ...pulumi.ResourceOption) (*CertificateTemplateIamBinding, error) {
	var resource CertificateTemplateIamBinding
	err := ctx.ReadResource("gcp:certificateauthority/certificateTemplateIamBinding:CertificateTemplateIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateTemplateIamBinding resources.
type certificateTemplateIamBindingState struct {
	// Used to find the parent resource to bind the IAM policy to
	CertificateTemplate *string `pulumi:"certificateTemplate"`
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *CertificateTemplateIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag     *string  `pulumi:"etag"`
	Location *string  `pulumi:"location"`
	Members  []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `certificateauthority.CertificateTemplateIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type CertificateTemplateIamBindingState struct {
	// Used to find the parent resource to bind the IAM policy to
	CertificateTemplate pulumi.StringPtrInput
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition CertificateTemplateIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag     pulumi.StringPtrInput
	Location pulumi.StringPtrInput
	Members  pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `certificateauthority.CertificateTemplateIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (CertificateTemplateIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateTemplateIamBindingState)(nil)).Elem()
}

type certificateTemplateIamBindingArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	CertificateTemplate string `pulumi:"certificateTemplate"`
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *CertificateTemplateIamBindingCondition `pulumi:"condition"`
	Location  *string                                 `pulumi:"location"`
	Members   []string                                `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `certificateauthority.CertificateTemplateIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a CertificateTemplateIamBinding resource.
type CertificateTemplateIamBindingArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	CertificateTemplate pulumi.StringInput
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition CertificateTemplateIamBindingConditionPtrInput
	Location  pulumi.StringPtrInput
	Members   pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `certificateauthority.CertificateTemplateIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (CertificateTemplateIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateTemplateIamBindingArgs)(nil)).Elem()
}

type CertificateTemplateIamBindingInput interface {
	pulumi.Input

	ToCertificateTemplateIamBindingOutput() CertificateTemplateIamBindingOutput
	ToCertificateTemplateIamBindingOutputWithContext(ctx context.Context) CertificateTemplateIamBindingOutput
}

func (*CertificateTemplateIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateTemplateIamBinding)(nil)).Elem()
}

func (i *CertificateTemplateIamBinding) ToCertificateTemplateIamBindingOutput() CertificateTemplateIamBindingOutput {
	return i.ToCertificateTemplateIamBindingOutputWithContext(context.Background())
}

func (i *CertificateTemplateIamBinding) ToCertificateTemplateIamBindingOutputWithContext(ctx context.Context) CertificateTemplateIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTemplateIamBindingOutput)
}

// CertificateTemplateIamBindingArrayInput is an input type that accepts CertificateTemplateIamBindingArray and CertificateTemplateIamBindingArrayOutput values.
// You can construct a concrete instance of `CertificateTemplateIamBindingArrayInput` via:
//
//	CertificateTemplateIamBindingArray{ CertificateTemplateIamBindingArgs{...} }
type CertificateTemplateIamBindingArrayInput interface {
	pulumi.Input

	ToCertificateTemplateIamBindingArrayOutput() CertificateTemplateIamBindingArrayOutput
	ToCertificateTemplateIamBindingArrayOutputWithContext(context.Context) CertificateTemplateIamBindingArrayOutput
}

type CertificateTemplateIamBindingArray []CertificateTemplateIamBindingInput

func (CertificateTemplateIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateTemplateIamBinding)(nil)).Elem()
}

func (i CertificateTemplateIamBindingArray) ToCertificateTemplateIamBindingArrayOutput() CertificateTemplateIamBindingArrayOutput {
	return i.ToCertificateTemplateIamBindingArrayOutputWithContext(context.Background())
}

func (i CertificateTemplateIamBindingArray) ToCertificateTemplateIamBindingArrayOutputWithContext(ctx context.Context) CertificateTemplateIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTemplateIamBindingArrayOutput)
}

// CertificateTemplateIamBindingMapInput is an input type that accepts CertificateTemplateIamBindingMap and CertificateTemplateIamBindingMapOutput values.
// You can construct a concrete instance of `CertificateTemplateIamBindingMapInput` via:
//
//	CertificateTemplateIamBindingMap{ "key": CertificateTemplateIamBindingArgs{...} }
type CertificateTemplateIamBindingMapInput interface {
	pulumi.Input

	ToCertificateTemplateIamBindingMapOutput() CertificateTemplateIamBindingMapOutput
	ToCertificateTemplateIamBindingMapOutputWithContext(context.Context) CertificateTemplateIamBindingMapOutput
}

type CertificateTemplateIamBindingMap map[string]CertificateTemplateIamBindingInput

func (CertificateTemplateIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateTemplateIamBinding)(nil)).Elem()
}

func (i CertificateTemplateIamBindingMap) ToCertificateTemplateIamBindingMapOutput() CertificateTemplateIamBindingMapOutput {
	return i.ToCertificateTemplateIamBindingMapOutputWithContext(context.Background())
}

func (i CertificateTemplateIamBindingMap) ToCertificateTemplateIamBindingMapOutputWithContext(ctx context.Context) CertificateTemplateIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTemplateIamBindingMapOutput)
}

type CertificateTemplateIamBindingOutput struct{ *pulumi.OutputState }

func (CertificateTemplateIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateTemplateIamBinding)(nil)).Elem()
}

func (o CertificateTemplateIamBindingOutput) ToCertificateTemplateIamBindingOutput() CertificateTemplateIamBindingOutput {
	return o
}

func (o CertificateTemplateIamBindingOutput) ToCertificateTemplateIamBindingOutputWithContext(ctx context.Context) CertificateTemplateIamBindingOutput {
	return o
}

// Used to find the parent resource to bind the IAM policy to
func (o CertificateTemplateIamBindingOutput) CertificateTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateTemplateIamBinding) pulumi.StringOutput { return v.CertificateTemplate }).(pulumi.StringOutput)
}

// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
// Structure is documented below.
func (o CertificateTemplateIamBindingOutput) Condition() CertificateTemplateIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *CertificateTemplateIamBinding) CertificateTemplateIamBindingConditionPtrOutput {
		return v.Condition
	}).(CertificateTemplateIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o CertificateTemplateIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateTemplateIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o CertificateTemplateIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateTemplateIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o CertificateTemplateIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateTemplateIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o CertificateTemplateIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateTemplateIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `certificateauthority.CertificateTemplateIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o CertificateTemplateIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateTemplateIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type CertificateTemplateIamBindingArrayOutput struct{ *pulumi.OutputState }

func (CertificateTemplateIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateTemplateIamBinding)(nil)).Elem()
}

func (o CertificateTemplateIamBindingArrayOutput) ToCertificateTemplateIamBindingArrayOutput() CertificateTemplateIamBindingArrayOutput {
	return o
}

func (o CertificateTemplateIamBindingArrayOutput) ToCertificateTemplateIamBindingArrayOutputWithContext(ctx context.Context) CertificateTemplateIamBindingArrayOutput {
	return o
}

func (o CertificateTemplateIamBindingArrayOutput) Index(i pulumi.IntInput) CertificateTemplateIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateTemplateIamBinding {
		return vs[0].([]*CertificateTemplateIamBinding)[vs[1].(int)]
	}).(CertificateTemplateIamBindingOutput)
}

type CertificateTemplateIamBindingMapOutput struct{ *pulumi.OutputState }

func (CertificateTemplateIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateTemplateIamBinding)(nil)).Elem()
}

func (o CertificateTemplateIamBindingMapOutput) ToCertificateTemplateIamBindingMapOutput() CertificateTemplateIamBindingMapOutput {
	return o
}

func (o CertificateTemplateIamBindingMapOutput) ToCertificateTemplateIamBindingMapOutputWithContext(ctx context.Context) CertificateTemplateIamBindingMapOutput {
	return o
}

func (o CertificateTemplateIamBindingMapOutput) MapIndex(k pulumi.StringInput) CertificateTemplateIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateTemplateIamBinding {
		return vs[0].(map[string]*CertificateTemplateIamBinding)[vs[1].(string)]
	}).(CertificateTemplateIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateTemplateIamBindingInput)(nil)).Elem(), &CertificateTemplateIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateTemplateIamBindingArrayInput)(nil)).Elem(), CertificateTemplateIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateTemplateIamBindingMapInput)(nil)).Elem(), CertificateTemplateIamBindingMap{})
	pulumi.RegisterOutputType(CertificateTemplateIamBindingOutput{})
	pulumi.RegisterOutputType(CertificateTemplateIamBindingArrayOutput{})
	pulumi.RegisterOutputType(CertificateTemplateIamBindingMapOutput{})
}
