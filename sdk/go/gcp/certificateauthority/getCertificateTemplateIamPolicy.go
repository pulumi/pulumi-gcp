// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificateauthority

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves the current IAM policy data for certificatetemplate
//
// ## example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := certificateauthority.LookupCertificateTemplateIamPolicy(ctx, &certificateauthority.LookupCertificateTemplateIamPolicyArgs{
//				CertificateTemplate: _default.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCertificateTemplateIamPolicy(ctx *pulumi.Context, args *LookupCertificateTemplateIamPolicyArgs, opts ...pulumi.InvokeOption) (*LookupCertificateTemplateIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificateTemplateIamPolicyResult
	err := ctx.Invoke("gcp:certificateauthority/getCertificateTemplateIamPolicy:getCertificateTemplateIamPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificateTemplateIamPolicy.
type LookupCertificateTemplateIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	CertificateTemplate string `pulumi:"certificateTemplate"`
	// The location for the resource Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getCertificateTemplateIamPolicy.
type LookupCertificateTemplateIamPolicyResult struct {
	CertificateTemplate string `pulumi:"certificateTemplate"`
	// (Computed) The etag of the IAM policy.
	Etag string `pulumi:"etag"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Location string `pulumi:"location"`
	// (Required only by `certificateauthority.CertificateTemplateIamPolicy`) The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	Project    string `pulumi:"project"`
}

func LookupCertificateTemplateIamPolicyOutput(ctx *pulumi.Context, args LookupCertificateTemplateIamPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateTemplateIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCertificateTemplateIamPolicyResultOutput, error) {
			args := v.(LookupCertificateTemplateIamPolicyArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupCertificateTemplateIamPolicyResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("gcp:certificateauthority/getCertificateTemplateIamPolicy:getCertificateTemplateIamPolicy", args, &rv, "", opts...)
			if err != nil {
				return LookupCertificateTemplateIamPolicyResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupCertificateTemplateIamPolicyResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(LookupCertificateTemplateIamPolicyResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupCertificateTemplateIamPolicyResultOutput), nil
			}
			return output, nil
		}).(LookupCertificateTemplateIamPolicyResultOutput)
}

// A collection of arguments for invoking getCertificateTemplateIamPolicy.
type LookupCertificateTemplateIamPolicyOutputArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	CertificateTemplate pulumi.StringInput `pulumi:"certificateTemplate"`
	// The location for the resource Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupCertificateTemplateIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateTemplateIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getCertificateTemplateIamPolicy.
type LookupCertificateTemplateIamPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateTemplateIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateTemplateIamPolicyResult)(nil)).Elem()
}

func (o LookupCertificateTemplateIamPolicyResultOutput) ToLookupCertificateTemplateIamPolicyResultOutput() LookupCertificateTemplateIamPolicyResultOutput {
	return o
}

func (o LookupCertificateTemplateIamPolicyResultOutput) ToLookupCertificateTemplateIamPolicyResultOutputWithContext(ctx context.Context) LookupCertificateTemplateIamPolicyResultOutput {
	return o
}

func (o LookupCertificateTemplateIamPolicyResultOutput) CertificateTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateTemplateIamPolicyResult) string { return v.CertificateTemplate }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o LookupCertificateTemplateIamPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateTemplateIamPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCertificateTemplateIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateTemplateIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupCertificateTemplateIamPolicyResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateTemplateIamPolicyResult) string { return v.Location }).(pulumi.StringOutput)
}

// (Required only by `certificateauthority.CertificateTemplateIamPolicy`) The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o LookupCertificateTemplateIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateTemplateIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func (o LookupCertificateTemplateIamPolicyResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateTemplateIamPolicyResult) string { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateTemplateIamPolicyResultOutput{})
}
