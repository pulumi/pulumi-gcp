// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package serviceaccount

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type IAMBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** This provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// IAMBindingConditionInput is an input type that accepts IAMBindingConditionArgs and IAMBindingConditionOutput values.
// You can construct a concrete instance of `IAMBindingConditionInput` via:
//
//	IAMBindingConditionArgs{...}
type IAMBindingConditionInput interface {
	pulumi.Input

	ToIAMBindingConditionOutput() IAMBindingConditionOutput
	ToIAMBindingConditionOutputWithContext(context.Context) IAMBindingConditionOutput
}

type IAMBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** This provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (IAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IAMBindingCondition)(nil)).Elem()
}

func (i IAMBindingConditionArgs) ToIAMBindingConditionOutput() IAMBindingConditionOutput {
	return i.ToIAMBindingConditionOutputWithContext(context.Background())
}

func (i IAMBindingConditionArgs) ToIAMBindingConditionOutputWithContext(ctx context.Context) IAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMBindingConditionOutput)
}

func (i IAMBindingConditionArgs) ToIAMBindingConditionPtrOutput() IAMBindingConditionPtrOutput {
	return i.ToIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i IAMBindingConditionArgs) ToIAMBindingConditionPtrOutputWithContext(ctx context.Context) IAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMBindingConditionOutput).ToIAMBindingConditionPtrOutputWithContext(ctx)
}

// IAMBindingConditionPtrInput is an input type that accepts IAMBindingConditionArgs, IAMBindingConditionPtr and IAMBindingConditionPtrOutput values.
// You can construct a concrete instance of `IAMBindingConditionPtrInput` via:
//
//	        IAMBindingConditionArgs{...}
//
//	or:
//
//	        nil
type IAMBindingConditionPtrInput interface {
	pulumi.Input

	ToIAMBindingConditionPtrOutput() IAMBindingConditionPtrOutput
	ToIAMBindingConditionPtrOutputWithContext(context.Context) IAMBindingConditionPtrOutput
}

type iambindingConditionPtrType IAMBindingConditionArgs

func IAMBindingConditionPtr(v *IAMBindingConditionArgs) IAMBindingConditionPtrInput {
	return (*iambindingConditionPtrType)(v)
}

func (*iambindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IAMBindingCondition)(nil)).Elem()
}

func (i *iambindingConditionPtrType) ToIAMBindingConditionPtrOutput() IAMBindingConditionPtrOutput {
	return i.ToIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *iambindingConditionPtrType) ToIAMBindingConditionPtrOutputWithContext(ctx context.Context) IAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMBindingConditionPtrOutput)
}

type IAMBindingConditionOutput struct{ *pulumi.OutputState }

func (IAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IAMBindingCondition)(nil)).Elem()
}

func (o IAMBindingConditionOutput) ToIAMBindingConditionOutput() IAMBindingConditionOutput {
	return o
}

func (o IAMBindingConditionOutput) ToIAMBindingConditionOutputWithContext(ctx context.Context) IAMBindingConditionOutput {
	return o
}

func (o IAMBindingConditionOutput) ToIAMBindingConditionPtrOutput() IAMBindingConditionPtrOutput {
	return o.ToIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o IAMBindingConditionOutput) ToIAMBindingConditionPtrOutputWithContext(ctx context.Context) IAMBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IAMBindingCondition) *IAMBindingCondition {
		return &v
	}).(IAMBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** This provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o IAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v IAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v IAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type IAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (IAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IAMBindingCondition)(nil)).Elem()
}

func (o IAMBindingConditionPtrOutput) ToIAMBindingConditionPtrOutput() IAMBindingConditionPtrOutput {
	return o
}

func (o IAMBindingConditionPtrOutput) ToIAMBindingConditionPtrOutputWithContext(ctx context.Context) IAMBindingConditionPtrOutput {
	return o
}

func (o IAMBindingConditionPtrOutput) Elem() IAMBindingConditionOutput {
	return o.ApplyT(func(v *IAMBindingCondition) IAMBindingCondition {
		if v != nil {
			return *v
		}
		var ret IAMBindingCondition
		return ret
	}).(IAMBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** This provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o IAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IAMBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IAMBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type IAMMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** This provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// IAMMemberConditionInput is an input type that accepts IAMMemberConditionArgs and IAMMemberConditionOutput values.
// You can construct a concrete instance of `IAMMemberConditionInput` via:
//
//	IAMMemberConditionArgs{...}
type IAMMemberConditionInput interface {
	pulumi.Input

	ToIAMMemberConditionOutput() IAMMemberConditionOutput
	ToIAMMemberConditionOutputWithContext(context.Context) IAMMemberConditionOutput
}

type IAMMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	//
	// > **Warning:** This provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
	// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
	// consider it to be an entirely different resource and will treat it as such.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (IAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IAMMemberCondition)(nil)).Elem()
}

func (i IAMMemberConditionArgs) ToIAMMemberConditionOutput() IAMMemberConditionOutput {
	return i.ToIAMMemberConditionOutputWithContext(context.Background())
}

func (i IAMMemberConditionArgs) ToIAMMemberConditionOutputWithContext(ctx context.Context) IAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMMemberConditionOutput)
}

func (i IAMMemberConditionArgs) ToIAMMemberConditionPtrOutput() IAMMemberConditionPtrOutput {
	return i.ToIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i IAMMemberConditionArgs) ToIAMMemberConditionPtrOutputWithContext(ctx context.Context) IAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMMemberConditionOutput).ToIAMMemberConditionPtrOutputWithContext(ctx)
}

// IAMMemberConditionPtrInput is an input type that accepts IAMMemberConditionArgs, IAMMemberConditionPtr and IAMMemberConditionPtrOutput values.
// You can construct a concrete instance of `IAMMemberConditionPtrInput` via:
//
//	        IAMMemberConditionArgs{...}
//
//	or:
//
//	        nil
type IAMMemberConditionPtrInput interface {
	pulumi.Input

	ToIAMMemberConditionPtrOutput() IAMMemberConditionPtrOutput
	ToIAMMemberConditionPtrOutputWithContext(context.Context) IAMMemberConditionPtrOutput
}

type iammemberConditionPtrType IAMMemberConditionArgs

func IAMMemberConditionPtr(v *IAMMemberConditionArgs) IAMMemberConditionPtrInput {
	return (*iammemberConditionPtrType)(v)
}

func (*iammemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IAMMemberCondition)(nil)).Elem()
}

func (i *iammemberConditionPtrType) ToIAMMemberConditionPtrOutput() IAMMemberConditionPtrOutput {
	return i.ToIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *iammemberConditionPtrType) ToIAMMemberConditionPtrOutputWithContext(ctx context.Context) IAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMMemberConditionPtrOutput)
}

type IAMMemberConditionOutput struct{ *pulumi.OutputState }

func (IAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IAMMemberCondition)(nil)).Elem()
}

func (o IAMMemberConditionOutput) ToIAMMemberConditionOutput() IAMMemberConditionOutput {
	return o
}

func (o IAMMemberConditionOutput) ToIAMMemberConditionOutputWithContext(ctx context.Context) IAMMemberConditionOutput {
	return o
}

func (o IAMMemberConditionOutput) ToIAMMemberConditionPtrOutput() IAMMemberConditionPtrOutput {
	return o.ToIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o IAMMemberConditionOutput) ToIAMMemberConditionPtrOutputWithContext(ctx context.Context) IAMMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IAMMemberCondition) *IAMMemberCondition {
		return &v
	}).(IAMMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** This provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o IAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v IAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v IAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type IAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (IAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IAMMemberCondition)(nil)).Elem()
}

func (o IAMMemberConditionPtrOutput) ToIAMMemberConditionPtrOutput() IAMMemberConditionPtrOutput {
	return o
}

func (o IAMMemberConditionPtrOutput) ToIAMMemberConditionPtrOutputWithContext(ctx context.Context) IAMMemberConditionPtrOutput {
	return o
}

func (o IAMMemberConditionPtrOutput) Elem() IAMMemberConditionOutput {
	return o.ApplyT(func(v *IAMMemberCondition) IAMMemberCondition {
		if v != nil {
			return *v
		}
		var ret IAMMemberCondition
		return ret
	}).(IAMMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
//
// > **Warning:** This provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
// identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
// consider it to be an entirely different resource and will treat it as such.
func (o IAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IAMMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IAMMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type GetSAccount struct {
	// The Google service account ID (the part before the `@` sign in the `email`)
	AccountId string `pulumi:"accountId"`
	// Whether a service account is disabled or not.
	Disabled bool `pulumi:"disabled"`
	// The display name for the service account.
	DisplayName string `pulumi:"displayName"`
	// The e-mail address of the service account. This value
	// should be referenced from any `organizations.getIAMPolicy` data sources
	// that would grant the service account privileges.
	Email string `pulumi:"email"`
	// The Identity of the service account in the form `serviceAccount:{email}`. This value is often used to refer to the service account in order to grant IAM permissions.
	Member string `pulumi:"member"`
	// The fully-qualified name of the service account.
	Name string `pulumi:"name"`
	// The unique id of the service account.
	UniqueId string `pulumi:"uniqueId"`
}

// GetSAccountInput is an input type that accepts GetSAccountArgs and GetSAccountOutput values.
// You can construct a concrete instance of `GetSAccountInput` via:
//
//	GetSAccountArgs{...}
type GetSAccountInput interface {
	pulumi.Input

	ToGetSAccountOutput() GetSAccountOutput
	ToGetSAccountOutputWithContext(context.Context) GetSAccountOutput
}

type GetSAccountArgs struct {
	// The Google service account ID (the part before the `@` sign in the `email`)
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Whether a service account is disabled or not.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
	// The display name for the service account.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The e-mail address of the service account. This value
	// should be referenced from any `organizations.getIAMPolicy` data sources
	// that would grant the service account privileges.
	Email pulumi.StringInput `pulumi:"email"`
	// The Identity of the service account in the form `serviceAccount:{email}`. This value is often used to refer to the service account in order to grant IAM permissions.
	Member pulumi.StringInput `pulumi:"member"`
	// The fully-qualified name of the service account.
	Name pulumi.StringInput `pulumi:"name"`
	// The unique id of the service account.
	UniqueId pulumi.StringInput `pulumi:"uniqueId"`
}

func (GetSAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSAccount)(nil)).Elem()
}

func (i GetSAccountArgs) ToGetSAccountOutput() GetSAccountOutput {
	return i.ToGetSAccountOutputWithContext(context.Background())
}

func (i GetSAccountArgs) ToGetSAccountOutputWithContext(ctx context.Context) GetSAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSAccountOutput)
}

// GetSAccountArrayInput is an input type that accepts GetSAccountArray and GetSAccountArrayOutput values.
// You can construct a concrete instance of `GetSAccountArrayInput` via:
//
//	GetSAccountArray{ GetSAccountArgs{...} }
type GetSAccountArrayInput interface {
	pulumi.Input

	ToGetSAccountArrayOutput() GetSAccountArrayOutput
	ToGetSAccountArrayOutputWithContext(context.Context) GetSAccountArrayOutput
}

type GetSAccountArray []GetSAccountInput

func (GetSAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSAccount)(nil)).Elem()
}

func (i GetSAccountArray) ToGetSAccountArrayOutput() GetSAccountArrayOutput {
	return i.ToGetSAccountArrayOutputWithContext(context.Background())
}

func (i GetSAccountArray) ToGetSAccountArrayOutputWithContext(ctx context.Context) GetSAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSAccountArrayOutput)
}

type GetSAccountOutput struct{ *pulumi.OutputState }

func (GetSAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSAccount)(nil)).Elem()
}

func (o GetSAccountOutput) ToGetSAccountOutput() GetSAccountOutput {
	return o
}

func (o GetSAccountOutput) ToGetSAccountOutputWithContext(ctx context.Context) GetSAccountOutput {
	return o
}

// The Google service account ID (the part before the `@` sign in the `email`)
func (o GetSAccountOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSAccount) string { return v.AccountId }).(pulumi.StringOutput)
}

// Whether a service account is disabled or not.
func (o GetSAccountOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSAccount) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// The display name for the service account.
func (o GetSAccountOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSAccount) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The e-mail address of the service account. This value
// should be referenced from any `organizations.getIAMPolicy` data sources
// that would grant the service account privileges.
func (o GetSAccountOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetSAccount) string { return v.Email }).(pulumi.StringOutput)
}

// The Identity of the service account in the form `serviceAccount:{email}`. This value is often used to refer to the service account in order to grant IAM permissions.
func (o GetSAccountOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v GetSAccount) string { return v.Member }).(pulumi.StringOutput)
}

// The fully-qualified name of the service account.
func (o GetSAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSAccount) string { return v.Name }).(pulumi.StringOutput)
}

// The unique id of the service account.
func (o GetSAccountOutput) UniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSAccount) string { return v.UniqueId }).(pulumi.StringOutput)
}

type GetSAccountArrayOutput struct{ *pulumi.OutputState }

func (GetSAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSAccount)(nil)).Elem()
}

func (o GetSAccountArrayOutput) ToGetSAccountArrayOutput() GetSAccountArrayOutput {
	return o
}

func (o GetSAccountArrayOutput) ToGetSAccountArrayOutputWithContext(ctx context.Context) GetSAccountArrayOutput {
	return o
}

func (o GetSAccountArrayOutput) Index(i pulumi.IntInput) GetSAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSAccount {
		return vs[0].([]GetSAccount)[vs[1].(int)]
	}).(GetSAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IAMBindingConditionInput)(nil)).Elem(), IAMBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IAMBindingConditionPtrInput)(nil)).Elem(), IAMBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IAMMemberConditionInput)(nil)).Elem(), IAMMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IAMMemberConditionPtrInput)(nil)).Elem(), IAMMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSAccountInput)(nil)).Elem(), GetSAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSAccountArrayInput)(nil)).Elem(), GetSAccountArray{})
	pulumi.RegisterOutputType(IAMBindingConditionOutput{})
	pulumi.RegisterOutputType(IAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(IAMMemberConditionOutput{})
	pulumi.RegisterOutputType(IAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(GetSAccountOutput{})
	pulumi.RegisterOutputType(GetSAccountArrayOutput{})
}
