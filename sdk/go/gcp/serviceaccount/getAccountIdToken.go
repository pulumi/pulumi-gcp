// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package serviceaccount

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides a Google OpenID Connect (`oidc`) `idToken`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).
//
// For more information see
// [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
//
// ## Example Usage
//
// ### ServiceAccount JSON Credential File.
//   `serviceAccount.getAccountIdToken` will use the configured provider credentials
//
// ### Service Account Impersonation.
//   `serviceAccount.getAccountAccessToken` will use background impersonated credentials provided by `serviceAccount.getAccountAccessToken`.
//
//   Note: to use the following, you must grant `targetServiceAccount` the
//   `roles/iam.serviceAccountTokenCreator` role on itself.
func GetAccountIdToken(ctx *pulumi.Context, args *GetAccountIdTokenArgs, opts ...pulumi.InvokeOption) (*GetAccountIdTokenResult, error) {
	var rv GetAccountIdTokenResult
	err := ctx.Invoke("gcp:serviceAccount/getAccountIdToken:getAccountIdToken", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccountIdToken.
type GetAccountIdTokenArgs struct {
	// Delegate chain of approvals needed to perform full impersonation. Specify the fully qualified service account name.   Used only when using impersonation mode.
	Delegates []string `pulumi:"delegates"`
	// Include the verified email in the claim. Used only when using impersonation mode.
	IncludeEmail *bool `pulumi:"includeEmail"`
	// The audience claim for the `idToken`.
	TargetAudience string `pulumi:"targetAudience"`
	// The email of the service account being impersonated.  Used only when using impersonation mode.
	TargetServiceAccount *string `pulumi:"targetServiceAccount"`
}

// A collection of values returned by getAccountIdToken.
type GetAccountIdTokenResult struct {
	Delegates []string `pulumi:"delegates"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The `idToken` representing the new generated identity.
	IdToken              string  `pulumi:"idToken"`
	IncludeEmail         *bool   `pulumi:"includeEmail"`
	TargetAudience       string  `pulumi:"targetAudience"`
	TargetServiceAccount *string `pulumi:"targetServiceAccount"`
}

func GetAccountIdTokenOutput(ctx *pulumi.Context, args GetAccountIdTokenOutputArgs, opts ...pulumi.InvokeOption) GetAccountIdTokenResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAccountIdTokenResult, error) {
			args := v.(GetAccountIdTokenArgs)
			r, err := GetAccountIdToken(ctx, &args, opts...)
			return *r, err
		}).(GetAccountIdTokenResultOutput)
}

// A collection of arguments for invoking getAccountIdToken.
type GetAccountIdTokenOutputArgs struct {
	// Delegate chain of approvals needed to perform full impersonation. Specify the fully qualified service account name.   Used only when using impersonation mode.
	Delegates pulumi.StringArrayInput `pulumi:"delegates"`
	// Include the verified email in the claim. Used only when using impersonation mode.
	IncludeEmail pulumi.BoolPtrInput `pulumi:"includeEmail"`
	// The audience claim for the `idToken`.
	TargetAudience pulumi.StringInput `pulumi:"targetAudience"`
	// The email of the service account being impersonated.  Used only when using impersonation mode.
	TargetServiceAccount pulumi.StringPtrInput `pulumi:"targetServiceAccount"`
}

func (GetAccountIdTokenOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountIdTokenArgs)(nil)).Elem()
}

// A collection of values returned by getAccountIdToken.
type GetAccountIdTokenResultOutput struct{ *pulumi.OutputState }

func (GetAccountIdTokenResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountIdTokenResult)(nil)).Elem()
}

func (o GetAccountIdTokenResultOutput) ToGetAccountIdTokenResultOutput() GetAccountIdTokenResultOutput {
	return o
}

func (o GetAccountIdTokenResultOutput) ToGetAccountIdTokenResultOutputWithContext(ctx context.Context) GetAccountIdTokenResultOutput {
	return o
}

func (o GetAccountIdTokenResultOutput) Delegates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAccountIdTokenResult) []string { return v.Delegates }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAccountIdTokenResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountIdTokenResult) string { return v.Id }).(pulumi.StringOutput)
}

// The `idToken` representing the new generated identity.
func (o GetAccountIdTokenResultOutput) IdToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountIdTokenResult) string { return v.IdToken }).(pulumi.StringOutput)
}

func (o GetAccountIdTokenResultOutput) IncludeEmail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAccountIdTokenResult) *bool { return v.IncludeEmail }).(pulumi.BoolPtrOutput)
}

func (o GetAccountIdTokenResultOutput) TargetAudience() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountIdTokenResult) string { return v.TargetAudience }).(pulumi.StringOutput)
}

func (o GetAccountIdTokenResultOutput) TargetServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountIdTokenResult) *string { return v.TargetServiceAccount }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAccountIdTokenResultOutput{})
}
