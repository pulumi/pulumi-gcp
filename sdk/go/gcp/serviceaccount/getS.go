// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package serviceaccount

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a list of all service accounts from a project.
// See [the official documentation](https://cloud.google.com/iam/docs/service-account-overview)
// and [API](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).
//
// ## Example Usage
//
// # Get all service accounts from a project
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := serviceaccount.GetS(ctx, &serviceaccount.GetSArgs{
//				Project: pulumi.StringRef("example-project"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Get all service accounts that are prefixed with `"foo"`
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := serviceaccount.GetS(ctx, &serviceaccount.GetSArgs{
//				Prefix: pulumi.StringRef("foo"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Get all service accounts that contain `"bar"`
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := serviceaccount.GetS(ctx, &serviceaccount.GetSArgs{
//				Regex: pulumi.StringRef(".*bar.*"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Get all service accounts that are prefixed with `"foo"` and contain `"bar"`
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := serviceaccount.GetS(ctx, &serviceaccount.GetSArgs{
//				Prefix: pulumi.StringRef("foo"),
//				Regex:  pulumi.StringRef(".*bar.*"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetS(ctx *pulumi.Context, args *GetSArgs, opts ...pulumi.InvokeOption) (*GetSResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSResult
	err := ctx.Invoke("gcp:serviceaccount/getS:getS", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getS.
type GetSArgs struct {
	// A prefix for filtering. It's applied with the `accountId`.
	Prefix *string `pulumi:"prefix"`
	// The ID of the project. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A regular expression for filtering. It's applied with the `email`. Further information about the syntax can be found [here](https://github.com/google/re2/wiki/Syntax).
	Regex *string `pulumi:"regex"`
}

// A collection of values returned by getS.
type GetSResult struct {
	// A list of all retrieved service accounts. Structure is defined below.
	Accounts []GetSAccount `pulumi:"accounts"`
	// The provider-assigned unique ID for this managed resource.
	Id      string  `pulumi:"id"`
	Prefix  *string `pulumi:"prefix"`
	Project *string `pulumi:"project"`
	Regex   *string `pulumi:"regex"`
}

func GetSOutput(ctx *pulumi.Context, args GetSOutputArgs, opts ...pulumi.InvokeOption) GetSResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetSResultOutput, error) {
			args := v.(GetSArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:serviceaccount/getS:getS", args, GetSResultOutput{}, options).(GetSResultOutput), nil
		}).(GetSResultOutput)
}

// A collection of arguments for invoking getS.
type GetSOutputArgs struct {
	// A prefix for filtering. It's applied with the `accountId`.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The ID of the project. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// A regular expression for filtering. It's applied with the `email`. Further information about the syntax can be found [here](https://github.com/google/re2/wiki/Syntax).
	Regex pulumi.StringPtrInput `pulumi:"regex"`
}

func (GetSOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSArgs)(nil)).Elem()
}

// A collection of values returned by getS.
type GetSResultOutput struct{ *pulumi.OutputState }

func (GetSResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSResult)(nil)).Elem()
}

func (o GetSResultOutput) ToGetSResultOutput() GetSResultOutput {
	return o
}

func (o GetSResultOutput) ToGetSResultOutputWithContext(ctx context.Context) GetSResultOutput {
	return o
}

// A list of all retrieved service accounts. Structure is defined below.
func (o GetSResultOutput) Accounts() GetSAccountArrayOutput {
	return o.ApplyT(func(v GetSResult) []GetSAccount { return v.Accounts }).(GetSAccountArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSResultOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSResult) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

func (o GetSResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o GetSResultOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSResult) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSResultOutput{})
}
