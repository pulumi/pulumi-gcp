// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package parametermanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the value and metadata from a Parameter Manager Regional Parameter version with rendered payload data. For this datasource to work as expected, the principal of the parameter must be provided with the [Secret Manager Secret Accessor](https://cloud.google.com/secret-manager/docs/access-control#secretmanager.secretAccessor) role. For more information see the [official documentation](https://cloud.google.com/secret-manager/parameter-manager/docs/overview)  and [API](https://cloud.google.com/secret-manager/parameter-manager/docs/reference/rest/v1/projects.locations.parameters.versions/render).
//
// > **Warning:** To use this data source, we must grant the `Secret Manager Secret Accessor` role to the principal of the parameter. Please note that it can take up to 7 minutes for the role to take effect. Hence, we might need to wait approximately 7 minutes after granting  `Secret Manager Secret Accessor` role to the principal of the parameter. For more information see the [access change propagation documentation](https://cloud.google.com/iam/docs/access-change-propagation).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/parametermanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := parametermanager.GetRegionalParameterVersionRender(ctx, &parametermanager.GetRegionalParameterVersionRenderArgs{
//				Parameter:          "test-regional-parameter",
//				ParameterVersionId: "test-regional-parameter-version",
//				Location:           pulumi.StringRef("us-central1"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRegionalParameterVersionRender(ctx *pulumi.Context, args *GetRegionalParameterVersionRenderArgs, opts ...pulumi.InvokeOption) (*GetRegionalParameterVersionRenderResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRegionalParameterVersionRenderResult
	err := ctx.Invoke("gcp:parametermanager/getRegionalParameterVersionRender:getRegionalParameterVersionRender", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegionalParameterVersionRender.
type GetRegionalParameterVersionRenderArgs struct {
	// Location of Parameter Manager regional Parameter resource.
	// It must be provided when the `parameter` field provided consists of only the name of the regional parameter.
	Location *string `pulumi:"location"`
	// The Parameter for obtaining the Regional Parameter Version.
	// This can be either the reference of the parameter as in `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}` or only the name of the parameter as in `{{parameter_id}}`.
	Parameter string `pulumi:"parameter"`
	// The version of the regional parameter to get.
	ParameterVersionId string `pulumi:"parameterVersionId"`
	// The project for retrieving the Regional Parameter Version. If it's not
	// specified, the provider project will be used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getRegionalParameterVersionRender.
type GetRegionalParameterVersionRenderResult struct {
	// The current state of the Regional Parameter Version.
	Disabled bool `pulumi:"disabled"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Location string `pulumi:"location"`
	// The resource name of the RegionalParameterVersion. Format:
	// `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
	Name      string `pulumi:"name"`
	Parameter string `pulumi:"parameter"`
	// The Parameter data.
	ParameterData      string `pulumi:"parameterData"`
	ParameterVersionId string `pulumi:"parameterVersionId"`
	Project            string `pulumi:"project"`
	// The Rendered Parameter Data specifies that if you use `__REF__()` to reference a secret and the format is JSON or YAML, the placeholder `__REF__()` will be replaced with the actual secret value. However, if the format is UNFORMATTED, it will stay the same as the original `parameterData`.
	RenderedParameterData string `pulumi:"renderedParameterData"`
}

func GetRegionalParameterVersionRenderOutput(ctx *pulumi.Context, args GetRegionalParameterVersionRenderOutputArgs, opts ...pulumi.InvokeOption) GetRegionalParameterVersionRenderResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetRegionalParameterVersionRenderResultOutput, error) {
			args := v.(GetRegionalParameterVersionRenderArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:parametermanager/getRegionalParameterVersionRender:getRegionalParameterVersionRender", args, GetRegionalParameterVersionRenderResultOutput{}, options).(GetRegionalParameterVersionRenderResultOutput), nil
		}).(GetRegionalParameterVersionRenderResultOutput)
}

// A collection of arguments for invoking getRegionalParameterVersionRender.
type GetRegionalParameterVersionRenderOutputArgs struct {
	// Location of Parameter Manager regional Parameter resource.
	// It must be provided when the `parameter` field provided consists of only the name of the regional parameter.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The Parameter for obtaining the Regional Parameter Version.
	// This can be either the reference of the parameter as in `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}` or only the name of the parameter as in `{{parameter_id}}`.
	Parameter pulumi.StringInput `pulumi:"parameter"`
	// The version of the regional parameter to get.
	ParameterVersionId pulumi.StringInput `pulumi:"parameterVersionId"`
	// The project for retrieving the Regional Parameter Version. If it's not
	// specified, the provider project will be used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (GetRegionalParameterVersionRenderOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionalParameterVersionRenderArgs)(nil)).Elem()
}

// A collection of values returned by getRegionalParameterVersionRender.
type GetRegionalParameterVersionRenderResultOutput struct{ *pulumi.OutputState }

func (GetRegionalParameterVersionRenderResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionalParameterVersionRenderResult)(nil)).Elem()
}

func (o GetRegionalParameterVersionRenderResultOutput) ToGetRegionalParameterVersionRenderResultOutput() GetRegionalParameterVersionRenderResultOutput {
	return o
}

func (o GetRegionalParameterVersionRenderResultOutput) ToGetRegionalParameterVersionRenderResultOutputWithContext(ctx context.Context) GetRegionalParameterVersionRenderResultOutput {
	return o
}

// The current state of the Regional Parameter Version.
func (o GetRegionalParameterVersionRenderResultOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRegionalParameterVersionRenderResult) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRegionalParameterVersionRenderResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionalParameterVersionRenderResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRegionalParameterVersionRenderResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionalParameterVersionRenderResult) string { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the RegionalParameterVersion. Format:
// `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
func (o GetRegionalParameterVersionRenderResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionalParameterVersionRenderResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetRegionalParameterVersionRenderResultOutput) Parameter() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionalParameterVersionRenderResult) string { return v.Parameter }).(pulumi.StringOutput)
}

// The Parameter data.
func (o GetRegionalParameterVersionRenderResultOutput) ParameterData() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionalParameterVersionRenderResult) string { return v.ParameterData }).(pulumi.StringOutput)
}

func (o GetRegionalParameterVersionRenderResultOutput) ParameterVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionalParameterVersionRenderResult) string { return v.ParameterVersionId }).(pulumi.StringOutput)
}

func (o GetRegionalParameterVersionRenderResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionalParameterVersionRenderResult) string { return v.Project }).(pulumi.StringOutput)
}

// The Rendered Parameter Data specifies that if you use `__REF__()` to reference a secret and the format is JSON or YAML, the placeholder `__REF__()` will be replaced with the actual secret value. However, if the format is UNFORMATTED, it will stay the same as the original `parameterData`.
func (o GetRegionalParameterVersionRenderResultOutput) RenderedParameterData() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionalParameterVersionRenderResult) string { return v.RenderedParameterData }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRegionalParameterVersionRenderResultOutput{})
}
