// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package parametermanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Regional Parameter is a logical regional parameter.
//
// To get more information about RegionalParameter, see:
//
// * [API documentation](https://cloud.google.com/secret-manager/parameter-manager/docs/reference/rest/v1/projects.locations.parameters)
//
// ## Example Usage
//
// ### Regional Parameter Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/parametermanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := parametermanager.NewRegionalParameter(ctx, "regional-parameter-basic", &parametermanager.RegionalParameterArgs{
//				ParameterId: pulumi.String("regional_parameter"),
//				Location:    pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Regional Parameter With Format
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/parametermanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := parametermanager.NewRegionalParameter(ctx, "regional-parameter-with-format", &parametermanager.RegionalParameterArgs{
//				ParameterId: pulumi.String("regional_parameter"),
//				Location:    pulumi.String("us-central1"),
//				Format:      pulumi.String("JSON"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Regional Parameter With Labels
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/parametermanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := parametermanager.NewRegionalParameter(ctx, "regional-parameter-with-labels", &parametermanager.RegionalParameterArgs{
//				ParameterId: pulumi.String("regional_parameter"),
//				Location:    pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"key1": pulumi.String("val1"),
//					"key2": pulumi.String("val2"),
//					"key3": pulumi.String("val3"),
//					"key4": pulumi.String("val4"),
//					"key5": pulumi.String("val5"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Regional Parameter With Kms Key
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/parametermanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = parametermanager.NewRegionalParameter(ctx, "regional-parameter-with-kms-key", &parametermanager.RegionalParameterArgs{
//				ParameterId: pulumi.String("regional_parameter"),
//				Location:    pulumi.String("us-central1"),
//				KmsKey:      pulumi.String("kms-key"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RegionalParameter can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}`
//
// * `{{project}}/{{location}}/{{parameter_id}}`
//
// * `{{location}}/{{parameter_id}}`
//
// When using the `pulumi import` command, RegionalParameter can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:parametermanager/regionalParameter:RegionalParameter default projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}
// ```
//
// ```sh
// $ pulumi import gcp:parametermanager/regionalParameter:RegionalParameter default {{project}}/{{location}}/{{parameter_id}}
// ```
//
// ```sh
// $ pulumi import gcp:parametermanager/regionalParameter:RegionalParameter default {{location}}/{{parameter_id}}
// ```
type RegionalParameter struct {
	pulumi.CustomResourceState

	// The time at which the regional Parameter was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The format type of the regional parameter.
	// Default value is `UNFORMATTED`.
	// Possible values are: `UNFORMATTED`, `YAML`, `JSON`.
	Format pulumi.StringPtrOutput `pulumi:"format"`
	// The resource name of the Cloud KMS CryptoKey used to encrypt regional parameter version payload. Format
	// `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{crypto_key}}`
	KmsKey pulumi.StringPtrOutput `pulumi:"kmsKey"`
	// The labels assigned to this regional Parameter.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be assigned to a given resource.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the regional parameter. eg us-central1
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the regional Parameter. Format:
	// `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}`
	Name pulumi.StringOutput `pulumi:"name"`
	// This must be unique within the project.
	ParameterId pulumi.StringOutput `pulumi:"parameterId"`
	// An object containing a unique resource identity tied to the regional parameter.
	// Structure is documented below.
	PolicyMembers RegionalParameterPolicyMemberArrayOutput `pulumi:"policyMembers"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The time at which the regional Parameter was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewRegionalParameter registers a new resource with the given unique name, arguments, and options.
func NewRegionalParameter(ctx *pulumi.Context,
	name string, args *RegionalParameterArgs, opts ...pulumi.ResourceOption) (*RegionalParameter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ParameterId == nil {
		return nil, errors.New("invalid value for required argument 'ParameterId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionalParameter
	err := ctx.RegisterResource("gcp:parametermanager/regionalParameter:RegionalParameter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionalParameter gets an existing RegionalParameter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionalParameter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionalParameterState, opts ...pulumi.ResourceOption) (*RegionalParameter, error) {
	var resource RegionalParameter
	err := ctx.ReadResource("gcp:parametermanager/regionalParameter:RegionalParameter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionalParameter resources.
type regionalParameterState struct {
	// The time at which the regional Parameter was created.
	CreateTime *string `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The format type of the regional parameter.
	// Default value is `UNFORMATTED`.
	// Possible values are: `UNFORMATTED`, `YAML`, `JSON`.
	Format *string `pulumi:"format"`
	// The resource name of the Cloud KMS CryptoKey used to encrypt regional parameter version payload. Format
	// `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{crypto_key}}`
	KmsKey *string `pulumi:"kmsKey"`
	// The labels assigned to this regional Parameter.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be assigned to a given resource.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the regional parameter. eg us-central1
	Location *string `pulumi:"location"`
	// The resource name of the regional Parameter. Format:
	// `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}`
	Name *string `pulumi:"name"`
	// This must be unique within the project.
	ParameterId *string `pulumi:"parameterId"`
	// An object containing a unique resource identity tied to the regional parameter.
	// Structure is documented below.
	PolicyMembers []RegionalParameterPolicyMember `pulumi:"policyMembers"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The time at which the regional Parameter was updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type RegionalParameterState struct {
	// The time at which the regional Parameter was created.
	CreateTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The format type of the regional parameter.
	// Default value is `UNFORMATTED`.
	// Possible values are: `UNFORMATTED`, `YAML`, `JSON`.
	Format pulumi.StringPtrInput
	// The resource name of the Cloud KMS CryptoKey used to encrypt regional parameter version payload. Format
	// `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{crypto_key}}`
	KmsKey pulumi.StringPtrInput
	// The labels assigned to this regional Parameter.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be assigned to a given resource.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the regional parameter. eg us-central1
	Location pulumi.StringPtrInput
	// The resource name of the regional Parameter. Format:
	// `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}`
	Name pulumi.StringPtrInput
	// This must be unique within the project.
	ParameterId pulumi.StringPtrInput
	// An object containing a unique resource identity tied to the regional parameter.
	// Structure is documented below.
	PolicyMembers RegionalParameterPolicyMemberArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The time at which the regional Parameter was updated.
	UpdateTime pulumi.StringPtrInput
}

func (RegionalParameterState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionalParameterState)(nil)).Elem()
}

type regionalParameterArgs struct {
	// The format type of the regional parameter.
	// Default value is `UNFORMATTED`.
	// Possible values are: `UNFORMATTED`, `YAML`, `JSON`.
	Format *string `pulumi:"format"`
	// The resource name of the Cloud KMS CryptoKey used to encrypt regional parameter version payload. Format
	// `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{crypto_key}}`
	KmsKey *string `pulumi:"kmsKey"`
	// The labels assigned to this regional Parameter.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be assigned to a given resource.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the regional parameter. eg us-central1
	Location string `pulumi:"location"`
	// This must be unique within the project.
	ParameterId string `pulumi:"parameterId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a RegionalParameter resource.
type RegionalParameterArgs struct {
	// The format type of the regional parameter.
	// Default value is `UNFORMATTED`.
	// Possible values are: `UNFORMATTED`, `YAML`, `JSON`.
	Format pulumi.StringPtrInput
	// The resource name of the Cloud KMS CryptoKey used to encrypt regional parameter version payload. Format
	// `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{crypto_key}}`
	KmsKey pulumi.StringPtrInput
	// The labels assigned to this regional Parameter.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be assigned to a given resource.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the regional parameter. eg us-central1
	Location pulumi.StringInput
	// This must be unique within the project.
	ParameterId pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (RegionalParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionalParameterArgs)(nil)).Elem()
}

type RegionalParameterInput interface {
	pulumi.Input

	ToRegionalParameterOutput() RegionalParameterOutput
	ToRegionalParameterOutputWithContext(ctx context.Context) RegionalParameterOutput
}

func (*RegionalParameter) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionalParameter)(nil)).Elem()
}

func (i *RegionalParameter) ToRegionalParameterOutput() RegionalParameterOutput {
	return i.ToRegionalParameterOutputWithContext(context.Background())
}

func (i *RegionalParameter) ToRegionalParameterOutputWithContext(ctx context.Context) RegionalParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalParameterOutput)
}

// RegionalParameterArrayInput is an input type that accepts RegionalParameterArray and RegionalParameterArrayOutput values.
// You can construct a concrete instance of `RegionalParameterArrayInput` via:
//
//	RegionalParameterArray{ RegionalParameterArgs{...} }
type RegionalParameterArrayInput interface {
	pulumi.Input

	ToRegionalParameterArrayOutput() RegionalParameterArrayOutput
	ToRegionalParameterArrayOutputWithContext(context.Context) RegionalParameterArrayOutput
}

type RegionalParameterArray []RegionalParameterInput

func (RegionalParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionalParameter)(nil)).Elem()
}

func (i RegionalParameterArray) ToRegionalParameterArrayOutput() RegionalParameterArrayOutput {
	return i.ToRegionalParameterArrayOutputWithContext(context.Background())
}

func (i RegionalParameterArray) ToRegionalParameterArrayOutputWithContext(ctx context.Context) RegionalParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalParameterArrayOutput)
}

// RegionalParameterMapInput is an input type that accepts RegionalParameterMap and RegionalParameterMapOutput values.
// You can construct a concrete instance of `RegionalParameterMapInput` via:
//
//	RegionalParameterMap{ "key": RegionalParameterArgs{...} }
type RegionalParameterMapInput interface {
	pulumi.Input

	ToRegionalParameterMapOutput() RegionalParameterMapOutput
	ToRegionalParameterMapOutputWithContext(context.Context) RegionalParameterMapOutput
}

type RegionalParameterMap map[string]RegionalParameterInput

func (RegionalParameterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionalParameter)(nil)).Elem()
}

func (i RegionalParameterMap) ToRegionalParameterMapOutput() RegionalParameterMapOutput {
	return i.ToRegionalParameterMapOutputWithContext(context.Background())
}

func (i RegionalParameterMap) ToRegionalParameterMapOutputWithContext(ctx context.Context) RegionalParameterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalParameterMapOutput)
}

type RegionalParameterOutput struct{ *pulumi.OutputState }

func (RegionalParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionalParameter)(nil)).Elem()
}

func (o RegionalParameterOutput) ToRegionalParameterOutput() RegionalParameterOutput {
	return o
}

func (o RegionalParameterOutput) ToRegionalParameterOutputWithContext(ctx context.Context) RegionalParameterOutput {
	return o
}

// The time at which the regional Parameter was created.
func (o RegionalParameterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalParameter) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o RegionalParameterOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RegionalParameter) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The format type of the regional parameter.
// Default value is `UNFORMATTED`.
// Possible values are: `UNFORMATTED`, `YAML`, `JSON`.
func (o RegionalParameterOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionalParameter) pulumi.StringPtrOutput { return v.Format }).(pulumi.StringPtrOutput)
}

// The resource name of the Cloud KMS CryptoKey used to encrypt regional parameter version payload. Format
// `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{crypto_key}}`
func (o RegionalParameterOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionalParameter) pulumi.StringPtrOutput { return v.KmsKey }).(pulumi.StringPtrOutput)
}

// The labels assigned to this regional Parameter.
// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
// No more than 64 labels can be assigned to a given resource.
// An object containing a list of "key": value pairs. Example:
// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o RegionalParameterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RegionalParameter) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the regional parameter. eg us-central1
func (o RegionalParameterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalParameter) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the regional Parameter. Format:
// `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}`
func (o RegionalParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalParameter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// This must be unique within the project.
func (o RegionalParameterOutput) ParameterId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalParameter) pulumi.StringOutput { return v.ParameterId }).(pulumi.StringOutput)
}

// An object containing a unique resource identity tied to the regional parameter.
// Structure is documented below.
func (o RegionalParameterOutput) PolicyMembers() RegionalParameterPolicyMemberArrayOutput {
	return o.ApplyT(func(v *RegionalParameter) RegionalParameterPolicyMemberArrayOutput { return v.PolicyMembers }).(RegionalParameterPolicyMemberArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RegionalParameterOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalParameter) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o RegionalParameterOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RegionalParameter) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The time at which the regional Parameter was updated.
func (o RegionalParameterOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalParameter) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type RegionalParameterArrayOutput struct{ *pulumi.OutputState }

func (RegionalParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionalParameter)(nil)).Elem()
}

func (o RegionalParameterArrayOutput) ToRegionalParameterArrayOutput() RegionalParameterArrayOutput {
	return o
}

func (o RegionalParameterArrayOutput) ToRegionalParameterArrayOutputWithContext(ctx context.Context) RegionalParameterArrayOutput {
	return o
}

func (o RegionalParameterArrayOutput) Index(i pulumi.IntInput) RegionalParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionalParameter {
		return vs[0].([]*RegionalParameter)[vs[1].(int)]
	}).(RegionalParameterOutput)
}

type RegionalParameterMapOutput struct{ *pulumi.OutputState }

func (RegionalParameterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionalParameter)(nil)).Elem()
}

func (o RegionalParameterMapOutput) ToRegionalParameterMapOutput() RegionalParameterMapOutput {
	return o
}

func (o RegionalParameterMapOutput) ToRegionalParameterMapOutputWithContext(ctx context.Context) RegionalParameterMapOutput {
	return o
}

func (o RegionalParameterMapOutput) MapIndex(k pulumi.StringInput) RegionalParameterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionalParameter {
		return vs[0].(map[string]*RegionalParameter)[vs[1].(string)]
	}).(RegionalParameterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalParameterInput)(nil)).Elem(), &RegionalParameter{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalParameterArrayInput)(nil)).Elem(), RegionalParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalParameterMapInput)(nil)).Elem(), RegionalParameterMap{})
	pulumi.RegisterOutputType(RegionalParameterOutput{})
	pulumi.RegisterOutputType(RegionalParameterArrayOutput{})
	pulumi.RegisterOutputType(RegionalParameterMapOutput{})
}
