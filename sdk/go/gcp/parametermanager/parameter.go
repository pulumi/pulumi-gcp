// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package parametermanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Parameter Config Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/parametermanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := parametermanager.NewParameter(ctx, "parameter-basic", &parametermanager.ParameterArgs{
//				ParameterId: pulumi.String("parameter"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Parameter With Format
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/parametermanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := parametermanager.NewParameter(ctx, "parameter-with-format", &parametermanager.ParameterArgs{
//				ParameterId: pulumi.String("parameter"),
//				Format:      pulumi.String("JSON"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Parameter With Labels
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/parametermanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := parametermanager.NewParameter(ctx, "parameter-with-labels", &parametermanager.ParameterArgs{
//				ParameterId: pulumi.String("parameter"),
//				Labels: pulumi.StringMap{
//					"key1": pulumi.String("val1"),
//					"key2": pulumi.String("val2"),
//					"key3": pulumi.String("val3"),
//					"key4": pulumi.String("val4"),
//					"key5": pulumi.String("val5"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Parameter can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/global/parameters/{{parameter_id}}`
//
// * `{{project}}/{{parameter_id}}`
//
// * `{{parameter_id}}`
//
// When using the `pulumi import` command, Parameter can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:parametermanager/parameter:Parameter default projects/{{project}}/locations/global/parameters/{{parameter_id}}
// ```
//
// ```sh
// $ pulumi import gcp:parametermanager/parameter:Parameter default {{project}}/{{parameter_id}}
// ```
//
// ```sh
// $ pulumi import gcp:parametermanager/parameter:Parameter default {{parameter_id}}
// ```
type Parameter struct {
	pulumi.CustomResourceState

	// The time at which the Parameter was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The format type of the parameter resource.
	// Default value is `UNFORMATTED`.
	// Possible values are: `UNFORMATTED`, `YAML`, `JSON`.
	Format pulumi.StringPtrOutput `pulumi:"format"`
	// The labels assigned to this Parameter.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be assigned to a given resource.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name of the Parameter. Format:
	// `projects/{{project}}/locations/global/parameters/{{parameter_id}}`
	Name pulumi.StringOutput `pulumi:"name"`
	// This must be unique within the project.
	//
	// ***
	ParameterId pulumi.StringOutput `pulumi:"parameterId"`
	// Policy member strings of a Google Cloud resource.
	// Structure is documented below.
	PolicyMembers ParameterPolicyMemberArrayOutput `pulumi:"policyMembers"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The time at which the Parameter was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewParameter registers a new resource with the given unique name, arguments, and options.
func NewParameter(ctx *pulumi.Context,
	name string, args *ParameterArgs, opts ...pulumi.ResourceOption) (*Parameter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ParameterId == nil {
		return nil, errors.New("invalid value for required argument 'ParameterId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Parameter
	err := ctx.RegisterResource("gcp:parametermanager/parameter:Parameter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetParameter gets an existing Parameter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetParameter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ParameterState, opts ...pulumi.ResourceOption) (*Parameter, error) {
	var resource Parameter
	err := ctx.ReadResource("gcp:parametermanager/parameter:Parameter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Parameter resources.
type parameterState struct {
	// The time at which the Parameter was created.
	CreateTime *string `pulumi:"createTime"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The format type of the parameter resource.
	// Default value is `UNFORMATTED`.
	// Possible values are: `UNFORMATTED`, `YAML`, `JSON`.
	Format *string `pulumi:"format"`
	// The labels assigned to this Parameter.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be assigned to a given resource.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name of the Parameter. Format:
	// `projects/{{project}}/locations/global/parameters/{{parameter_id}}`
	Name *string `pulumi:"name"`
	// This must be unique within the project.
	//
	// ***
	ParameterId *string `pulumi:"parameterId"`
	// Policy member strings of a Google Cloud resource.
	// Structure is documented below.
	PolicyMembers []ParameterPolicyMember `pulumi:"policyMembers"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The time at which the Parameter was updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type ParameterState struct {
	// The time at which the Parameter was created.
	CreateTime pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The format type of the parameter resource.
	// Default value is `UNFORMATTED`.
	// Possible values are: `UNFORMATTED`, `YAML`, `JSON`.
	Format pulumi.StringPtrInput
	// The labels assigned to this Parameter.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be assigned to a given resource.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The resource name of the Parameter. Format:
	// `projects/{{project}}/locations/global/parameters/{{parameter_id}}`
	Name pulumi.StringPtrInput
	// This must be unique within the project.
	//
	// ***
	ParameterId pulumi.StringPtrInput
	// Policy member strings of a Google Cloud resource.
	// Structure is documented below.
	PolicyMembers ParameterPolicyMemberArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The time at which the Parameter was updated.
	UpdateTime pulumi.StringPtrInput
}

func (ParameterState) ElementType() reflect.Type {
	return reflect.TypeOf((*parameterState)(nil)).Elem()
}

type parameterArgs struct {
	// The format type of the parameter resource.
	// Default value is `UNFORMATTED`.
	// Possible values are: `UNFORMATTED`, `YAML`, `JSON`.
	Format *string `pulumi:"format"`
	// The labels assigned to this Parameter.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be assigned to a given resource.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// This must be unique within the project.
	//
	// ***
	ParameterId string `pulumi:"parameterId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Parameter resource.
type ParameterArgs struct {
	// The format type of the parameter resource.
	// Default value is `UNFORMATTED`.
	// Possible values are: `UNFORMATTED`, `YAML`, `JSON`.
	Format pulumi.StringPtrInput
	// The labels assigned to this Parameter.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be assigned to a given resource.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// This must be unique within the project.
	//
	// ***
	ParameterId pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*parameterArgs)(nil)).Elem()
}

type ParameterInput interface {
	pulumi.Input

	ToParameterOutput() ParameterOutput
	ToParameterOutputWithContext(ctx context.Context) ParameterOutput
}

func (*Parameter) ElementType() reflect.Type {
	return reflect.TypeOf((**Parameter)(nil)).Elem()
}

func (i *Parameter) ToParameterOutput() ParameterOutput {
	return i.ToParameterOutputWithContext(context.Background())
}

func (i *Parameter) ToParameterOutputWithContext(ctx context.Context) ParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterOutput)
}

// ParameterArrayInput is an input type that accepts ParameterArray and ParameterArrayOutput values.
// You can construct a concrete instance of `ParameterArrayInput` via:
//
//	ParameterArray{ ParameterArgs{...} }
type ParameterArrayInput interface {
	pulumi.Input

	ToParameterArrayOutput() ParameterArrayOutput
	ToParameterArrayOutputWithContext(context.Context) ParameterArrayOutput
}

type ParameterArray []ParameterInput

func (ParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Parameter)(nil)).Elem()
}

func (i ParameterArray) ToParameterArrayOutput() ParameterArrayOutput {
	return i.ToParameterArrayOutputWithContext(context.Background())
}

func (i ParameterArray) ToParameterArrayOutputWithContext(ctx context.Context) ParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterArrayOutput)
}

// ParameterMapInput is an input type that accepts ParameterMap and ParameterMapOutput values.
// You can construct a concrete instance of `ParameterMapInput` via:
//
//	ParameterMap{ "key": ParameterArgs{...} }
type ParameterMapInput interface {
	pulumi.Input

	ToParameterMapOutput() ParameterMapOutput
	ToParameterMapOutputWithContext(context.Context) ParameterMapOutput
}

type ParameterMap map[string]ParameterInput

func (ParameterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Parameter)(nil)).Elem()
}

func (i ParameterMap) ToParameterMapOutput() ParameterMapOutput {
	return i.ToParameterMapOutputWithContext(context.Background())
}

func (i ParameterMap) ToParameterMapOutputWithContext(ctx context.Context) ParameterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterMapOutput)
}

type ParameterOutput struct{ *pulumi.OutputState }

func (ParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Parameter)(nil)).Elem()
}

func (o ParameterOutput) ToParameterOutput() ParameterOutput {
	return o
}

func (o ParameterOutput) ToParameterOutputWithContext(ctx context.Context) ParameterOutput {
	return o
}

// The time at which the Parameter was created.
func (o ParameterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o ParameterOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The format type of the parameter resource.
// Default value is `UNFORMATTED`.
// Possible values are: `UNFORMATTED`, `YAML`, `JSON`.
func (o ParameterOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringPtrOutput { return v.Format }).(pulumi.StringPtrOutput)
}

// The labels assigned to this Parameter.
// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
// No more than 64 labels can be assigned to a given resource.
// An object containing a list of "key": value pairs. Example:
// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o ParameterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name of the Parameter. Format:
// `projects/{{project}}/locations/global/parameters/{{parameter_id}}`
func (o ParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// This must be unique within the project.
//
// ***
func (o ParameterOutput) ParameterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringOutput { return v.ParameterId }).(pulumi.StringOutput)
}

// Policy member strings of a Google Cloud resource.
// Structure is documented below.
func (o ParameterOutput) PolicyMembers() ParameterPolicyMemberArrayOutput {
	return o.ApplyT(func(v *Parameter) ParameterPolicyMemberArrayOutput { return v.PolicyMembers }).(ParameterPolicyMemberArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ParameterOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o ParameterOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The time at which the Parameter was updated.
func (o ParameterOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ParameterArrayOutput struct{ *pulumi.OutputState }

func (ParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Parameter)(nil)).Elem()
}

func (o ParameterArrayOutput) ToParameterArrayOutput() ParameterArrayOutput {
	return o
}

func (o ParameterArrayOutput) ToParameterArrayOutputWithContext(ctx context.Context) ParameterArrayOutput {
	return o
}

func (o ParameterArrayOutput) Index(i pulumi.IntInput) ParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Parameter {
		return vs[0].([]*Parameter)[vs[1].(int)]
	}).(ParameterOutput)
}

type ParameterMapOutput struct{ *pulumi.OutputState }

func (ParameterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Parameter)(nil)).Elem()
}

func (o ParameterMapOutput) ToParameterMapOutput() ParameterMapOutput {
	return o
}

func (o ParameterMapOutput) ToParameterMapOutputWithContext(ctx context.Context) ParameterMapOutput {
	return o
}

func (o ParameterMapOutput) MapIndex(k pulumi.StringInput) ParameterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Parameter {
		return vs[0].(map[string]*Parameter)[vs[1].(string)]
	}).(ParameterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ParameterInput)(nil)).Elem(), &Parameter{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParameterArrayInput)(nil)).Elem(), ParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParameterMapInput)(nil)).Elem(), ParameterMap{})
	pulumi.RegisterOutputType(ParameterOutput{})
	pulumi.RegisterOutputType(ParameterArrayOutput{})
	pulumi.RegisterOutputType(ParameterMapOutput{})
}
