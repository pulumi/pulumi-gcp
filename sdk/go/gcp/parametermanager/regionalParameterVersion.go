// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package parametermanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Regional Parameter Version Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/parametermanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			regional_parameter_basic, err := parametermanager.NewRegionalParameter(ctx, "regional-parameter-basic", &parametermanager.RegionalParameterArgs{
//				ParameterId: pulumi.String("regional_parameter"),
//				Location:    pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = parametermanager.NewRegionalParameterVersion(ctx, "regional-parameter-version-basic", &parametermanager.RegionalParameterVersionArgs{
//				Parameter:          regional_parameter_basic.ID(),
//				ParameterVersionId: pulumi.String("regional_parameter_version"),
//				ParameterData:      pulumi.String("regional-parameter-version-data"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Regional Parameter Version With Json Format
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/parametermanager"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			regional_parameter_basic, err := parametermanager.NewRegionalParameter(ctx, "regional-parameter-basic", &parametermanager.RegionalParameterArgs{
//				ParameterId: pulumi.String("regional_parameter"),
//				Format:      pulumi.String("JSON"),
//				Location:    pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "parameter_data_json_format.yaml",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = parametermanager.NewRegionalParameterVersion(ctx, "regional-parameter-version-with-json-format", &parametermanager.RegionalParameterVersionArgs{
//				Parameter:          regional_parameter_basic.ID(),
//				ParameterVersionId: pulumi.String("regional_parameter_version"),
//				ParameterData:      pulumi.String(invokeFile.Result),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Regional Parameter Version With Yaml Format
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/parametermanager"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			regional_parameter_basic, err := parametermanager.NewRegionalParameter(ctx, "regional-parameter-basic", &parametermanager.RegionalParameterArgs{
//				ParameterId: pulumi.String("regional_parameter"),
//				Format:      pulumi.String("YAML"),
//				Location:    pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "parameter_data_yaml_format.yaml",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = parametermanager.NewRegionalParameterVersion(ctx, "regional-parameter-version-with-yaml-format", &parametermanager.RegionalParameterVersionArgs{
//				Parameter:          regional_parameter_basic.ID(),
//				ParameterVersionId: pulumi.String("regional_parameter_version"),
//				ParameterData:      pulumi.String(invokeFile.Result),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RegionalParameterVersion can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
//
// When using the `pulumi import` command, RegionalParameterVersion can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:parametermanager/regionalParameterVersion:RegionalParameterVersion default projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}
// ```
type RegionalParameterVersion struct {
	pulumi.CustomResourceState

	// The time at which the Regional Parameter Version was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The current state of Regional Parameter Version. This field is only applicable for updating Regional Parameter Version.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// Location of Parameter Manager Regional parameter resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the Regional Parameter Version. Format:
	// `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
	Name pulumi.StringOutput `pulumi:"name"`
	// Parameter Manager Regional Parameter resource.
	Parameter pulumi.StringOutput `pulumi:"parameter"`
	// The Regional Parameter data.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	ParameterData pulumi.StringOutput `pulumi:"parameterData"`
	// Version ID of the Regional Parameter Version Resource. This must be unique within the Regional Parameter.
	//
	// ***
	ParameterVersionId pulumi.StringOutput `pulumi:"parameterVersionId"`
	// The time at which the Regional Parameter Version was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewRegionalParameterVersion registers a new resource with the given unique name, arguments, and options.
func NewRegionalParameterVersion(ctx *pulumi.Context,
	name string, args *RegionalParameterVersionArgs, opts ...pulumi.ResourceOption) (*RegionalParameterVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parameter == nil {
		return nil, errors.New("invalid value for required argument 'Parameter'")
	}
	if args.ParameterData == nil {
		return nil, errors.New("invalid value for required argument 'ParameterData'")
	}
	if args.ParameterVersionId == nil {
		return nil, errors.New("invalid value for required argument 'ParameterVersionId'")
	}
	if args.ParameterData != nil {
		args.ParameterData = pulumi.ToSecret(args.ParameterData).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"parameterData",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionalParameterVersion
	err := ctx.RegisterResource("gcp:parametermanager/regionalParameterVersion:RegionalParameterVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionalParameterVersion gets an existing RegionalParameterVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionalParameterVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionalParameterVersionState, opts ...pulumi.ResourceOption) (*RegionalParameterVersion, error) {
	var resource RegionalParameterVersion
	err := ctx.ReadResource("gcp:parametermanager/regionalParameterVersion:RegionalParameterVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionalParameterVersion resources.
type regionalParameterVersionState struct {
	// The time at which the Regional Parameter Version was created.
	CreateTime *string `pulumi:"createTime"`
	// The current state of Regional Parameter Version. This field is only applicable for updating Regional Parameter Version.
	Disabled *bool `pulumi:"disabled"`
	// Location of Parameter Manager Regional parameter resource.
	Location *string `pulumi:"location"`
	// The resource name of the Regional Parameter Version. Format:
	// `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
	Name *string `pulumi:"name"`
	// Parameter Manager Regional Parameter resource.
	Parameter *string `pulumi:"parameter"`
	// The Regional Parameter data.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	ParameterData *string `pulumi:"parameterData"`
	// Version ID of the Regional Parameter Version Resource. This must be unique within the Regional Parameter.
	//
	// ***
	ParameterVersionId *string `pulumi:"parameterVersionId"`
	// The time at which the Regional Parameter Version was updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type RegionalParameterVersionState struct {
	// The time at which the Regional Parameter Version was created.
	CreateTime pulumi.StringPtrInput
	// The current state of Regional Parameter Version. This field is only applicable for updating Regional Parameter Version.
	Disabled pulumi.BoolPtrInput
	// Location of Parameter Manager Regional parameter resource.
	Location pulumi.StringPtrInput
	// The resource name of the Regional Parameter Version. Format:
	// `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
	Name pulumi.StringPtrInput
	// Parameter Manager Regional Parameter resource.
	Parameter pulumi.StringPtrInput
	// The Regional Parameter data.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	ParameterData pulumi.StringPtrInput
	// Version ID of the Regional Parameter Version Resource. This must be unique within the Regional Parameter.
	//
	// ***
	ParameterVersionId pulumi.StringPtrInput
	// The time at which the Regional Parameter Version was updated.
	UpdateTime pulumi.StringPtrInput
}

func (RegionalParameterVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionalParameterVersionState)(nil)).Elem()
}

type regionalParameterVersionArgs struct {
	// The current state of Regional Parameter Version. This field is only applicable for updating Regional Parameter Version.
	Disabled *bool `pulumi:"disabled"`
	// Parameter Manager Regional Parameter resource.
	Parameter string `pulumi:"parameter"`
	// The Regional Parameter data.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	ParameterData string `pulumi:"parameterData"`
	// Version ID of the Regional Parameter Version Resource. This must be unique within the Regional Parameter.
	//
	// ***
	ParameterVersionId string `pulumi:"parameterVersionId"`
}

// The set of arguments for constructing a RegionalParameterVersion resource.
type RegionalParameterVersionArgs struct {
	// The current state of Regional Parameter Version. This field is only applicable for updating Regional Parameter Version.
	Disabled pulumi.BoolPtrInput
	// Parameter Manager Regional Parameter resource.
	Parameter pulumi.StringInput
	// The Regional Parameter data.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	ParameterData pulumi.StringInput
	// Version ID of the Regional Parameter Version Resource. This must be unique within the Regional Parameter.
	//
	// ***
	ParameterVersionId pulumi.StringInput
}

func (RegionalParameterVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionalParameterVersionArgs)(nil)).Elem()
}

type RegionalParameterVersionInput interface {
	pulumi.Input

	ToRegionalParameterVersionOutput() RegionalParameterVersionOutput
	ToRegionalParameterVersionOutputWithContext(ctx context.Context) RegionalParameterVersionOutput
}

func (*RegionalParameterVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionalParameterVersion)(nil)).Elem()
}

func (i *RegionalParameterVersion) ToRegionalParameterVersionOutput() RegionalParameterVersionOutput {
	return i.ToRegionalParameterVersionOutputWithContext(context.Background())
}

func (i *RegionalParameterVersion) ToRegionalParameterVersionOutputWithContext(ctx context.Context) RegionalParameterVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalParameterVersionOutput)
}

// RegionalParameterVersionArrayInput is an input type that accepts RegionalParameterVersionArray and RegionalParameterVersionArrayOutput values.
// You can construct a concrete instance of `RegionalParameterVersionArrayInput` via:
//
//	RegionalParameterVersionArray{ RegionalParameterVersionArgs{...} }
type RegionalParameterVersionArrayInput interface {
	pulumi.Input

	ToRegionalParameterVersionArrayOutput() RegionalParameterVersionArrayOutput
	ToRegionalParameterVersionArrayOutputWithContext(context.Context) RegionalParameterVersionArrayOutput
}

type RegionalParameterVersionArray []RegionalParameterVersionInput

func (RegionalParameterVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionalParameterVersion)(nil)).Elem()
}

func (i RegionalParameterVersionArray) ToRegionalParameterVersionArrayOutput() RegionalParameterVersionArrayOutput {
	return i.ToRegionalParameterVersionArrayOutputWithContext(context.Background())
}

func (i RegionalParameterVersionArray) ToRegionalParameterVersionArrayOutputWithContext(ctx context.Context) RegionalParameterVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalParameterVersionArrayOutput)
}

// RegionalParameterVersionMapInput is an input type that accepts RegionalParameterVersionMap and RegionalParameterVersionMapOutput values.
// You can construct a concrete instance of `RegionalParameterVersionMapInput` via:
//
//	RegionalParameterVersionMap{ "key": RegionalParameterVersionArgs{...} }
type RegionalParameterVersionMapInput interface {
	pulumi.Input

	ToRegionalParameterVersionMapOutput() RegionalParameterVersionMapOutput
	ToRegionalParameterVersionMapOutputWithContext(context.Context) RegionalParameterVersionMapOutput
}

type RegionalParameterVersionMap map[string]RegionalParameterVersionInput

func (RegionalParameterVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionalParameterVersion)(nil)).Elem()
}

func (i RegionalParameterVersionMap) ToRegionalParameterVersionMapOutput() RegionalParameterVersionMapOutput {
	return i.ToRegionalParameterVersionMapOutputWithContext(context.Background())
}

func (i RegionalParameterVersionMap) ToRegionalParameterVersionMapOutputWithContext(ctx context.Context) RegionalParameterVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalParameterVersionMapOutput)
}

type RegionalParameterVersionOutput struct{ *pulumi.OutputState }

func (RegionalParameterVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionalParameterVersion)(nil)).Elem()
}

func (o RegionalParameterVersionOutput) ToRegionalParameterVersionOutput() RegionalParameterVersionOutput {
	return o
}

func (o RegionalParameterVersionOutput) ToRegionalParameterVersionOutputWithContext(ctx context.Context) RegionalParameterVersionOutput {
	return o
}

// The time at which the Regional Parameter Version was created.
func (o RegionalParameterVersionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalParameterVersion) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The current state of Regional Parameter Version. This field is only applicable for updating Regional Parameter Version.
func (o RegionalParameterVersionOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionalParameterVersion) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Location of Parameter Manager Regional parameter resource.
func (o RegionalParameterVersionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalParameterVersion) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the Regional Parameter Version. Format:
// `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
func (o RegionalParameterVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalParameterVersion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Parameter Manager Regional Parameter resource.
func (o RegionalParameterVersionOutput) Parameter() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalParameterVersion) pulumi.StringOutput { return v.Parameter }).(pulumi.StringOutput)
}

// The Regional Parameter data.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o RegionalParameterVersionOutput) ParameterData() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalParameterVersion) pulumi.StringOutput { return v.ParameterData }).(pulumi.StringOutput)
}

// Version ID of the Regional Parameter Version Resource. This must be unique within the Regional Parameter.
//
// ***
func (o RegionalParameterVersionOutput) ParameterVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalParameterVersion) pulumi.StringOutput { return v.ParameterVersionId }).(pulumi.StringOutput)
}

// The time at which the Regional Parameter Version was updated.
func (o RegionalParameterVersionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalParameterVersion) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type RegionalParameterVersionArrayOutput struct{ *pulumi.OutputState }

func (RegionalParameterVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionalParameterVersion)(nil)).Elem()
}

func (o RegionalParameterVersionArrayOutput) ToRegionalParameterVersionArrayOutput() RegionalParameterVersionArrayOutput {
	return o
}

func (o RegionalParameterVersionArrayOutput) ToRegionalParameterVersionArrayOutputWithContext(ctx context.Context) RegionalParameterVersionArrayOutput {
	return o
}

func (o RegionalParameterVersionArrayOutput) Index(i pulumi.IntInput) RegionalParameterVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionalParameterVersion {
		return vs[0].([]*RegionalParameterVersion)[vs[1].(int)]
	}).(RegionalParameterVersionOutput)
}

type RegionalParameterVersionMapOutput struct{ *pulumi.OutputState }

func (RegionalParameterVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionalParameterVersion)(nil)).Elem()
}

func (o RegionalParameterVersionMapOutput) ToRegionalParameterVersionMapOutput() RegionalParameterVersionMapOutput {
	return o
}

func (o RegionalParameterVersionMapOutput) ToRegionalParameterVersionMapOutputWithContext(ctx context.Context) RegionalParameterVersionMapOutput {
	return o
}

func (o RegionalParameterVersionMapOutput) MapIndex(k pulumi.StringInput) RegionalParameterVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionalParameterVersion {
		return vs[0].(map[string]*RegionalParameterVersion)[vs[1].(string)]
	}).(RegionalParameterVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalParameterVersionInput)(nil)).Elem(), &RegionalParameterVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalParameterVersionArrayInput)(nil)).Elem(), RegionalParameterVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalParameterVersionMapInput)(nil)).Elem(), RegionalParameterVersionMap{})
	pulumi.RegisterOutputType(RegionalParameterVersionOutput{})
	pulumi.RegisterOutputType(RegionalParameterVersionArrayOutput{})
	pulumi.RegisterOutputType(RegionalParameterVersionMapOutput{})
}
