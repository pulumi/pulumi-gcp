// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package parametermanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the value and metadata from a Parameter Manager Regional Parameter version. For more information see the [official documentation](https://cloud.google.com/secret-manager/parameter-manager/docs/overview) and [API](https://cloud.google.com/secret-manager/parameter-manager/docs/reference/rest/v1/projects.locations.parameters.versions).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/parametermanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := parametermanager.LookupRegionalParameterVersion(ctx, &parametermanager.LookupRegionalParameterVersionArgs{
//				Parameter:          "test-regional-parameter",
//				ParameterVersionId: "test-regional-parameter-version",
//				Location:           pulumi.StringRef("us-central1"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRegionalParameterVersion(ctx *pulumi.Context, args *LookupRegionalParameterVersionArgs, opts ...pulumi.InvokeOption) (*LookupRegionalParameterVersionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRegionalParameterVersionResult
	err := ctx.Invoke("gcp:parametermanager/getRegionalParameterVersion:getRegionalParameterVersion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegionalParameterVersion.
type LookupRegionalParameterVersionArgs struct {
	// The location of regional parameter.
	Location *string `pulumi:"location"`
	// The parameter for obtaining the Regional Parameter Version.
	// This can be either the reference of the regional parameter as in `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}` or only the name of the regional parameter as in `{{parameter_id}}`.
	Parameter string `pulumi:"parameter"`
	// The version of the regional parameter to get.
	ParameterVersionId string `pulumi:"parameterVersionId"`
	// The project for retrieving the Regional Parameter Version. If it's not specified,
	// the provider project will be used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getRegionalParameterVersion.
type LookupRegionalParameterVersionResult struct {
	// The time at which the Regional Parameter Version was created.
	CreateTime string `pulumi:"createTime"`
	// The current state of the Regional Parameter Version.
	Disabled bool `pulumi:"disabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The resource name of the Cloud KMS CryptoKeyVersion used to decrypt regional parameter version payload. Format `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{crypto_key}}/cryptoKeyVersions/{{crypto_key_version}}`
	KmsKeyVersion string `pulumi:"kmsKeyVersion"`
	Location      string `pulumi:"location"`
	// The resource name of the Regional Parameter Version. Format:
	// `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
	Name      string `pulumi:"name"`
	Parameter string `pulumi:"parameter"`
	// The regional parameter data.
	ParameterData      string `pulumi:"parameterData"`
	ParameterVersionId string `pulumi:"parameterVersionId"`
	Project            string `pulumi:"project"`
	// The time at which the Regional Parameter Version was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupRegionalParameterVersionOutput(ctx *pulumi.Context, args LookupRegionalParameterVersionOutputArgs, opts ...pulumi.InvokeOption) LookupRegionalParameterVersionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRegionalParameterVersionResultOutput, error) {
			args := v.(LookupRegionalParameterVersionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:parametermanager/getRegionalParameterVersion:getRegionalParameterVersion", args, LookupRegionalParameterVersionResultOutput{}, options).(LookupRegionalParameterVersionResultOutput), nil
		}).(LookupRegionalParameterVersionResultOutput)
}

// A collection of arguments for invoking getRegionalParameterVersion.
type LookupRegionalParameterVersionOutputArgs struct {
	// The location of regional parameter.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The parameter for obtaining the Regional Parameter Version.
	// This can be either the reference of the regional parameter as in `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}` or only the name of the regional parameter as in `{{parameter_id}}`.
	Parameter pulumi.StringInput `pulumi:"parameter"`
	// The version of the regional parameter to get.
	ParameterVersionId pulumi.StringInput `pulumi:"parameterVersionId"`
	// The project for retrieving the Regional Parameter Version. If it's not specified,
	// the provider project will be used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupRegionalParameterVersionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegionalParameterVersionArgs)(nil)).Elem()
}

// A collection of values returned by getRegionalParameterVersion.
type LookupRegionalParameterVersionResultOutput struct{ *pulumi.OutputState }

func (LookupRegionalParameterVersionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegionalParameterVersionResult)(nil)).Elem()
}

func (o LookupRegionalParameterVersionResultOutput) ToLookupRegionalParameterVersionResultOutput() LookupRegionalParameterVersionResultOutput {
	return o
}

func (o LookupRegionalParameterVersionResultOutput) ToLookupRegionalParameterVersionResultOutputWithContext(ctx context.Context) LookupRegionalParameterVersionResultOutput {
	return o
}

// The time at which the Regional Parameter Version was created.
func (o LookupRegionalParameterVersionResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionalParameterVersionResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The current state of the Regional Parameter Version.
func (o LookupRegionalParameterVersionResultOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRegionalParameterVersionResult) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRegionalParameterVersionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionalParameterVersionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The resource name of the Cloud KMS CryptoKeyVersion used to decrypt regional parameter version payload. Format `projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{crypto_key}}/cryptoKeyVersions/{{crypto_key_version}}`
func (o LookupRegionalParameterVersionResultOutput) KmsKeyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionalParameterVersionResult) string { return v.KmsKeyVersion }).(pulumi.StringOutput)
}

func (o LookupRegionalParameterVersionResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionalParameterVersionResult) string { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the Regional Parameter Version. Format:
// `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
func (o LookupRegionalParameterVersionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionalParameterVersionResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupRegionalParameterVersionResultOutput) Parameter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionalParameterVersionResult) string { return v.Parameter }).(pulumi.StringOutput)
}

// The regional parameter data.
func (o LookupRegionalParameterVersionResultOutput) ParameterData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionalParameterVersionResult) string { return v.ParameterData }).(pulumi.StringOutput)
}

func (o LookupRegionalParameterVersionResultOutput) ParameterVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionalParameterVersionResult) string { return v.ParameterVersionId }).(pulumi.StringOutput)
}

func (o LookupRegionalParameterVersionResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionalParameterVersionResult) string { return v.Project }).(pulumi.StringOutput)
}

// The time at which the Regional Parameter Version was last updated.
func (o LookupRegionalParameterVersionResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionalParameterVersionResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegionalParameterVersionResultOutput{})
}
