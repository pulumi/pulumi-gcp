// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "gcp:iam/accessBoundaryPolicy:AccessBoundaryPolicy":
		r = &AccessBoundaryPolicy{}
	case "gcp:iam/denyPolicy:DenyPolicy":
		r = &DenyPolicy{}
	case "gcp:iam/foldersPolicyBinding:FoldersPolicyBinding":
		r = &FoldersPolicyBinding{}
	case "gcp:iam/oauthClient:OauthClient":
		r = &OauthClient{}
	case "gcp:iam/oauthClientCredential:OauthClientCredential":
		r = &OauthClientCredential{}
	case "gcp:iam/organizationsPolicyBinding:OrganizationsPolicyBinding":
		r = &OrganizationsPolicyBinding{}
	case "gcp:iam/principalAccessBoundaryPolicy:PrincipalAccessBoundaryPolicy":
		r = &PrincipalAccessBoundaryPolicy{}
	case "gcp:iam/projectsPolicyBinding:ProjectsPolicyBinding":
		r = &ProjectsPolicyBinding{}
	case "gcp:iam/workforcePool:WorkforcePool":
		r = &WorkforcePool{}
	case "gcp:iam/workforcePoolProvider:WorkforcePoolProvider":
		r = &WorkforcePoolProvider{}
	case "gcp:iam/workloadIdentityPool:WorkloadIdentityPool":
		r = &WorkloadIdentityPool{}
	case "gcp:iam/workloadIdentityPoolIamBinding:WorkloadIdentityPoolIamBinding":
		r = &WorkloadIdentityPoolIamBinding{}
	case "gcp:iam/workloadIdentityPoolIamMember:WorkloadIdentityPoolIamMember":
		r = &WorkloadIdentityPoolIamMember{}
	case "gcp:iam/workloadIdentityPoolIamPolicy:WorkloadIdentityPoolIamPolicy":
		r = &WorkloadIdentityPoolIamPolicy{}
	case "gcp:iam/workloadIdentityPoolProvider:WorkloadIdentityPoolProvider":
		r = &WorkloadIdentityPoolProvider{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"gcp",
		"iam/accessBoundaryPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"iam/denyPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"iam/foldersPolicyBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"iam/oauthClient",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"iam/oauthClientCredential",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"iam/organizationsPolicyBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"iam/principalAccessBoundaryPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"iam/projectsPolicyBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"iam/workforcePool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"iam/workforcePoolProvider",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"iam/workloadIdentityPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"iam/workloadIdentityPoolIamBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"iam/workloadIdentityPoolIamMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"iam/workloadIdentityPoolIamPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"iam/workloadIdentityPoolProvider",
		&module{version},
	)
}
