// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about a Google IAM Role.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/iam"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		roleinfo, err := iam.GetRule(ctx, &iam.GetRuleArgs{
// 			Name: "roles/compute.viewer",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("theRolePermissions", roleinfo.IncludedPermissions)
// 		return nil
// 	})
// }
// ```
func GetRule(ctx *pulumi.Context, args *GetRuleArgs, opts ...pulumi.InvokeOption) (*GetRuleResult, error) {
	var rv GetRuleResult
	err := ctx.Invoke("gcp:iam/getRule:getRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRule.
type GetRuleArgs struct {
	// The name of the Role to lookup in the form `roles/{ROLE_NAME}`, `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}` or `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
	Name string `pulumi:"name"`
}

// A collection of values returned by getRule.
type GetRuleResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// specifies the list of one or more permissions to include in the custom role, such as - `iam.roles.get`
	IncludedPermissions []string `pulumi:"includedPermissions"`
	Name                string   `pulumi:"name"`
	// indicates the stage of a role in the launch lifecycle, such as `GA`, `BETA` or `ALPHA`.
	Stage string `pulumi:"stage"`
	// is a friendly title for the role, such as "Role Viewer"
	Title string `pulumi:"title"`
}

func GetRuleOutput(ctx *pulumi.Context, args GetRuleOutputArgs, opts ...pulumi.InvokeOption) GetRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRuleResult, error) {
			args := v.(GetRuleArgs)
			r, err := GetRule(ctx, &args, opts...)
			return *r, err
		}).(GetRuleResultOutput)
}

// A collection of arguments for invoking getRule.
type GetRuleOutputArgs struct {
	// The name of the Role to lookup in the form `roles/{ROLE_NAME}`, `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}` or `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleArgs)(nil)).Elem()
}

// A collection of values returned by getRule.
type GetRuleResultOutput struct{ *pulumi.OutputState }

func (GetRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleResult)(nil)).Elem()
}

func (o GetRuleResultOutput) ToGetRuleResultOutput() GetRuleResultOutput {
	return o
}

func (o GetRuleResultOutput) ToGetRuleResultOutputWithContext(ctx context.Context) GetRuleResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// specifies the list of one or more permissions to include in the custom role, such as - `iam.roles.get`
func (o GetRuleResultOutput) IncludedPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRuleResult) []string { return v.IncludedPermissions }).(pulumi.StringArrayOutput)
}

func (o GetRuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleResult) string { return v.Name }).(pulumi.StringOutput)
}

// indicates the stage of a role in the launch lifecycle, such as `GA`, `BETA` or `ALPHA`.
func (o GetRuleResultOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleResult) string { return v.Stage }).(pulumi.StringOutput)
}

// is a friendly title for the role, such as "Role Viewer"
func (o GetRuleResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleResult) string { return v.Title }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRuleResultOutput{})
}
