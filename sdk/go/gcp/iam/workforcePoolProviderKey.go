// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a public key configuration for a Workforce Pool Provider. The key can be configured in your identity provider to encrypt SAML assertions.
// Google holds the corresponding private key, which it uses to decrypt encrypted tokens.
//
// To get more information about WorkforcePoolProviderKey, see:
//
// * [API documentation](https://cloud.google.com/iam/docs/reference/rest/v1/locations.workforcePools.providers.keys)
// * How-to Guides
//   - [Configure a provider within the workforce pool](https://cloud.google.com/iam/docs/manage-workforce-identity-pools-providers#configure_a_provider_within_the_workforce_pool)
//   - [Workforce Identity Federation Overview](https://cloud.google.com/iam/docs/workforce-identity-federation)
//
// ## Example Usage
//
// ### Iam Workforce Pool Provider Saml Key Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			pool, err := iam.NewWorkforcePool(ctx, "pool", &iam.WorkforcePoolArgs{
//				WorkforcePoolId: pulumi.String("example-pool"),
//				Parent:          pulumi.String("organizations/123456789"),
//				Location:        pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			provider, err := iam.NewWorkforcePoolProvider(ctx, "provider", &iam.WorkforcePoolProviderArgs{
//				WorkforcePoolId: pool.WorkforcePoolId,
//				Location:        pool.Location,
//				ProviderId:      pulumi.String("example-prvdr"),
//				AttributeMapping: pulumi.StringMap{
//					"google.subject": pulumi.String("assertion.sub"),
//				},
//				Saml: &iam.WorkforcePoolProviderSamlArgs{
//					IdpMetadataXml: pulumi.String("<?xml version=\"1.0\"?><md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"https://test.com\"><md:IDPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\"> <md:KeyDescriptor use=\"signing\"><ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"><ds:X509Data><ds:X509Certificate>MIIDpDCCAoygAwIBAgIGAX7/5qPhMA0GCSqGSIb3DQEBCwUAMIGSMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxEzARBgNVBAMMCmRldi00NTg0MjExHDAaBgkqhkiG9w0BCQEWDWluZm9Ab2t0YS5jb20wHhcNMjIwMjE2MDAxOTEyWhcNMzIwMjE2MDAyMDEyWjCBkjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xDTALBgNVBAoMBE9rdGExFDASBgNVBAsMC1NTT1Byb3ZpZGVyMRMwEQYDVQQDDApkZXYtNDU4NDIxMRwwGgYJKoZIhvcNAQkBFg1pbmZvQG9rdGEuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxrBl7GKz52cRpxF9xCsirnRuMxnhFBaUrsHqAQrLqWmdlpNYZTVg+T9iQ+aq/iE68L+BRZcZniKIvW58wqqS0ltXVvIkXuDSvnvnkkI5yMIVErR20K8jSOKQm1FmK+fgAJ4koshFiu9oLiqu0Ejc0DuL3/XRsb4RuxjktKTb1khgBBtb+7idEk0sFR0RPefAweXImJkDHDm7SxjDwGJUubbqpdTxasPr0W+AHI1VUzsUsTiHAoyb0XDkYqHfDzhj/ZdIEl4zHQ3bEZvlD984ztAnmX2SuFLLKfXeAAGHei8MMixJvwxYkkPeYZ/5h8WgBZPP4heS2CPjwYExt29L8QIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQARjJFz++a9Z5IQGFzsZMrX2EDR5ML4xxUiQkbhld1S1PljOLcYFARDmUC2YYHOueU4ee8Jid9nPGEUebV/4Jok+b+oQh+dWMgiWjSLI7h5q4OYZ3VJtdlVwgMFt2iz+/4yBKMUZ50g3Qgg36vE34us+eKitg759JgCNsibxn0qtJgSPm0sgP2L6yTaLnoEUbXBRxCwynTSkp9ZijZqEzbhN0e2dWv7Rx/nfpohpDP6vEiFImKFHpDSv3M/5de1ytQzPFrZBYt9WlzlYwE1aD9FHCxdd+rWgYMVVoRaRmndpV/Rq3QUuDuFJtaoX11bC7ExkOpg9KstZzA63i3VcfYv</ds:X509Certificate></ds:X509Data></ds:KeyInfo></md:KeyDescriptor><md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://test.com/sso\"/></md:IDPSSODescriptor></md:EntityDescriptor>"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewWorkforcePoolProviderKey(ctx, "example", &iam.WorkforcePoolProviderKeyArgs{
//				WorkforcePoolId: pool.WorkforcePoolId,
//				Location:        pool.Location,
//				ProviderId:      provider.ProviderId,
//				KeyId:           pulumi.String("example-key"),
//				KeyData: &iam.WorkforcePoolProviderKeyKeyDataArgs{
//					KeySpec: pulumi.String("RSA_2048"),
//				},
//				Use: pulumi.String("ENCRYPTION"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// WorkforcePoolProviderKey can be imported using any of these accepted formats:
//
// * `locations/{{location}}/workforcePools/{{workforce_pool_id}}/providers/{{provider_id}}/keys/{{key_id}}`
//
// * `{{location}}/{{workforce_pool_id}}/{{provider_id}}/{{key_id}}`
//
// When using the `pulumi import` command, WorkforcePoolProviderKey can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:iam/workforcePoolProviderKey:WorkforcePoolProviderKey default locations/{{location}}/workforcePools/{{workforce_pool_id}}/providers/{{provider_id}}/keys/{{key_id}}
// ```
//
// ```sh
// $ pulumi import gcp:iam/workforcePoolProviderKey:WorkforcePoolProviderKey default {{location}}/{{workforce_pool_id}}/{{provider_id}}/{{key_id}}
// ```
type WorkforcePoolProviderKey struct {
	pulumi.CustomResourceState

	// The time after which the key will be permanently deleted and cannot be recovered.
	// Note that the key may get purged before this time if the total limit of keys per provider is exceeded.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// Immutable. Public half of the asymmetric key.
	// Structure is documented below.
	KeyData WorkforcePoolProviderKeyKeyDataOutput `pulumi:"keyData"`
	// The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// The location for the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The resource name of the key.
	// Format: `locations/{location}/workforcePools/{workforcePoolId}/providers/{providerId}/keys/{keyId}`
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the provider.
	ProviderId pulumi.StringOutput `pulumi:"providerId"`
	// The state of the key.
	State pulumi.StringOutput `pulumi:"state"`
	// The purpose of the key.
	// Possible values are: `ENCRYPTION`.
	Use pulumi.StringOutput `pulumi:"use"`
	// The ID of the workforce pool.
	WorkforcePoolId pulumi.StringOutput `pulumi:"workforcePoolId"`
}

// NewWorkforcePoolProviderKey registers a new resource with the given unique name, arguments, and options.
func NewWorkforcePoolProviderKey(ctx *pulumi.Context,
	name string, args *WorkforcePoolProviderKeyArgs, opts ...pulumi.ResourceOption) (*WorkforcePoolProviderKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyData == nil {
		return nil, errors.New("invalid value for required argument 'KeyData'")
	}
	if args.KeyId == nil {
		return nil, errors.New("invalid value for required argument 'KeyId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ProviderId == nil {
		return nil, errors.New("invalid value for required argument 'ProviderId'")
	}
	if args.Use == nil {
		return nil, errors.New("invalid value for required argument 'Use'")
	}
	if args.WorkforcePoolId == nil {
		return nil, errors.New("invalid value for required argument 'WorkforcePoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkforcePoolProviderKey
	err := ctx.RegisterResource("gcp:iam/workforcePoolProviderKey:WorkforcePoolProviderKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkforcePoolProviderKey gets an existing WorkforcePoolProviderKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkforcePoolProviderKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkforcePoolProviderKeyState, opts ...pulumi.ResourceOption) (*WorkforcePoolProviderKey, error) {
	var resource WorkforcePoolProviderKey
	err := ctx.ReadResource("gcp:iam/workforcePoolProviderKey:WorkforcePoolProviderKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkforcePoolProviderKey resources.
type workforcePoolProviderKeyState struct {
	// The time after which the key will be permanently deleted and cannot be recovered.
	// Note that the key may get purged before this time if the total limit of keys per provider is exceeded.
	ExpireTime *string `pulumi:"expireTime"`
	// Immutable. Public half of the asymmetric key.
	// Structure is documented below.
	KeyData *WorkforcePoolProviderKeyKeyData `pulumi:"keyData"`
	// The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
	KeyId *string `pulumi:"keyId"`
	// The location for the resource.
	Location *string `pulumi:"location"`
	// Identifier. The resource name of the key.
	// Format: `locations/{location}/workforcePools/{workforcePoolId}/providers/{providerId}/keys/{keyId}`
	Name *string `pulumi:"name"`
	// The ID of the provider.
	ProviderId *string `pulumi:"providerId"`
	// The state of the key.
	State *string `pulumi:"state"`
	// The purpose of the key.
	// Possible values are: `ENCRYPTION`.
	Use *string `pulumi:"use"`
	// The ID of the workforce pool.
	WorkforcePoolId *string `pulumi:"workforcePoolId"`
}

type WorkforcePoolProviderKeyState struct {
	// The time after which the key will be permanently deleted and cannot be recovered.
	// Note that the key may get purged before this time if the total limit of keys per provider is exceeded.
	ExpireTime pulumi.StringPtrInput
	// Immutable. Public half of the asymmetric key.
	// Structure is documented below.
	KeyData WorkforcePoolProviderKeyKeyDataPtrInput
	// The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
	KeyId pulumi.StringPtrInput
	// The location for the resource.
	Location pulumi.StringPtrInput
	// Identifier. The resource name of the key.
	// Format: `locations/{location}/workforcePools/{workforcePoolId}/providers/{providerId}/keys/{keyId}`
	Name pulumi.StringPtrInput
	// The ID of the provider.
	ProviderId pulumi.StringPtrInput
	// The state of the key.
	State pulumi.StringPtrInput
	// The purpose of the key.
	// Possible values are: `ENCRYPTION`.
	Use pulumi.StringPtrInput
	// The ID of the workforce pool.
	WorkforcePoolId pulumi.StringPtrInput
}

func (WorkforcePoolProviderKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*workforcePoolProviderKeyState)(nil)).Elem()
}

type workforcePoolProviderKeyArgs struct {
	// Immutable. Public half of the asymmetric key.
	// Structure is documented below.
	KeyData WorkforcePoolProviderKeyKeyData `pulumi:"keyData"`
	// The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
	KeyId string `pulumi:"keyId"`
	// The location for the resource.
	Location string `pulumi:"location"`
	// The ID of the provider.
	ProviderId string `pulumi:"providerId"`
	// The purpose of the key.
	// Possible values are: `ENCRYPTION`.
	Use string `pulumi:"use"`
	// The ID of the workforce pool.
	WorkforcePoolId string `pulumi:"workforcePoolId"`
}

// The set of arguments for constructing a WorkforcePoolProviderKey resource.
type WorkforcePoolProviderKeyArgs struct {
	// Immutable. Public half of the asymmetric key.
	// Structure is documented below.
	KeyData WorkforcePoolProviderKeyKeyDataInput
	// The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
	KeyId pulumi.StringInput
	// The location for the resource.
	Location pulumi.StringInput
	// The ID of the provider.
	ProviderId pulumi.StringInput
	// The purpose of the key.
	// Possible values are: `ENCRYPTION`.
	Use pulumi.StringInput
	// The ID of the workforce pool.
	WorkforcePoolId pulumi.StringInput
}

func (WorkforcePoolProviderKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workforcePoolProviderKeyArgs)(nil)).Elem()
}

type WorkforcePoolProviderKeyInput interface {
	pulumi.Input

	ToWorkforcePoolProviderKeyOutput() WorkforcePoolProviderKeyOutput
	ToWorkforcePoolProviderKeyOutputWithContext(ctx context.Context) WorkforcePoolProviderKeyOutput
}

func (*WorkforcePoolProviderKey) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkforcePoolProviderKey)(nil)).Elem()
}

func (i *WorkforcePoolProviderKey) ToWorkforcePoolProviderKeyOutput() WorkforcePoolProviderKeyOutput {
	return i.ToWorkforcePoolProviderKeyOutputWithContext(context.Background())
}

func (i *WorkforcePoolProviderKey) ToWorkforcePoolProviderKeyOutputWithContext(ctx context.Context) WorkforcePoolProviderKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkforcePoolProviderKeyOutput)
}

// WorkforcePoolProviderKeyArrayInput is an input type that accepts WorkforcePoolProviderKeyArray and WorkforcePoolProviderKeyArrayOutput values.
// You can construct a concrete instance of `WorkforcePoolProviderKeyArrayInput` via:
//
//	WorkforcePoolProviderKeyArray{ WorkforcePoolProviderKeyArgs{...} }
type WorkforcePoolProviderKeyArrayInput interface {
	pulumi.Input

	ToWorkforcePoolProviderKeyArrayOutput() WorkforcePoolProviderKeyArrayOutput
	ToWorkforcePoolProviderKeyArrayOutputWithContext(context.Context) WorkforcePoolProviderKeyArrayOutput
}

type WorkforcePoolProviderKeyArray []WorkforcePoolProviderKeyInput

func (WorkforcePoolProviderKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkforcePoolProviderKey)(nil)).Elem()
}

func (i WorkforcePoolProviderKeyArray) ToWorkforcePoolProviderKeyArrayOutput() WorkforcePoolProviderKeyArrayOutput {
	return i.ToWorkforcePoolProviderKeyArrayOutputWithContext(context.Background())
}

func (i WorkforcePoolProviderKeyArray) ToWorkforcePoolProviderKeyArrayOutputWithContext(ctx context.Context) WorkforcePoolProviderKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkforcePoolProviderKeyArrayOutput)
}

// WorkforcePoolProviderKeyMapInput is an input type that accepts WorkforcePoolProviderKeyMap and WorkforcePoolProviderKeyMapOutput values.
// You can construct a concrete instance of `WorkforcePoolProviderKeyMapInput` via:
//
//	WorkforcePoolProviderKeyMap{ "key": WorkforcePoolProviderKeyArgs{...} }
type WorkforcePoolProviderKeyMapInput interface {
	pulumi.Input

	ToWorkforcePoolProviderKeyMapOutput() WorkforcePoolProviderKeyMapOutput
	ToWorkforcePoolProviderKeyMapOutputWithContext(context.Context) WorkforcePoolProviderKeyMapOutput
}

type WorkforcePoolProviderKeyMap map[string]WorkforcePoolProviderKeyInput

func (WorkforcePoolProviderKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkforcePoolProviderKey)(nil)).Elem()
}

func (i WorkforcePoolProviderKeyMap) ToWorkforcePoolProviderKeyMapOutput() WorkforcePoolProviderKeyMapOutput {
	return i.ToWorkforcePoolProviderKeyMapOutputWithContext(context.Background())
}

func (i WorkforcePoolProviderKeyMap) ToWorkforcePoolProviderKeyMapOutputWithContext(ctx context.Context) WorkforcePoolProviderKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkforcePoolProviderKeyMapOutput)
}

type WorkforcePoolProviderKeyOutput struct{ *pulumi.OutputState }

func (WorkforcePoolProviderKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkforcePoolProviderKey)(nil)).Elem()
}

func (o WorkforcePoolProviderKeyOutput) ToWorkforcePoolProviderKeyOutput() WorkforcePoolProviderKeyOutput {
	return o
}

func (o WorkforcePoolProviderKeyOutput) ToWorkforcePoolProviderKeyOutputWithContext(ctx context.Context) WorkforcePoolProviderKeyOutput {
	return o
}

// The time after which the key will be permanently deleted and cannot be recovered.
// Note that the key may get purged before this time if the total limit of keys per provider is exceeded.
func (o WorkforcePoolProviderKeyOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkforcePoolProviderKey) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

// Immutable. Public half of the asymmetric key.
// Structure is documented below.
func (o WorkforcePoolProviderKeyOutput) KeyData() WorkforcePoolProviderKeyKeyDataOutput {
	return o.ApplyT(func(v *WorkforcePoolProviderKey) WorkforcePoolProviderKeyKeyDataOutput { return v.KeyData }).(WorkforcePoolProviderKeyKeyDataOutput)
}

// The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
func (o WorkforcePoolProviderKeyOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkforcePoolProviderKey) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

// The location for the resource.
func (o WorkforcePoolProviderKeyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkforcePoolProviderKey) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name of the key.
// Format: `locations/{location}/workforcePools/{workforcePoolId}/providers/{providerId}/keys/{keyId}`
func (o WorkforcePoolProviderKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkforcePoolProviderKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the provider.
func (o WorkforcePoolProviderKeyOutput) ProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkforcePoolProviderKey) pulumi.StringOutput { return v.ProviderId }).(pulumi.StringOutput)
}

// The state of the key.
func (o WorkforcePoolProviderKeyOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkforcePoolProviderKey) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The purpose of the key.
// Possible values are: `ENCRYPTION`.
func (o WorkforcePoolProviderKeyOutput) Use() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkforcePoolProviderKey) pulumi.StringOutput { return v.Use }).(pulumi.StringOutput)
}

// The ID of the workforce pool.
func (o WorkforcePoolProviderKeyOutput) WorkforcePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkforcePoolProviderKey) pulumi.StringOutput { return v.WorkforcePoolId }).(pulumi.StringOutput)
}

type WorkforcePoolProviderKeyArrayOutput struct{ *pulumi.OutputState }

func (WorkforcePoolProviderKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkforcePoolProviderKey)(nil)).Elem()
}

func (o WorkforcePoolProviderKeyArrayOutput) ToWorkforcePoolProviderKeyArrayOutput() WorkforcePoolProviderKeyArrayOutput {
	return o
}

func (o WorkforcePoolProviderKeyArrayOutput) ToWorkforcePoolProviderKeyArrayOutputWithContext(ctx context.Context) WorkforcePoolProviderKeyArrayOutput {
	return o
}

func (o WorkforcePoolProviderKeyArrayOutput) Index(i pulumi.IntInput) WorkforcePoolProviderKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkforcePoolProviderKey {
		return vs[0].([]*WorkforcePoolProviderKey)[vs[1].(int)]
	}).(WorkforcePoolProviderKeyOutput)
}

type WorkforcePoolProviderKeyMapOutput struct{ *pulumi.OutputState }

func (WorkforcePoolProviderKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkforcePoolProviderKey)(nil)).Elem()
}

func (o WorkforcePoolProviderKeyMapOutput) ToWorkforcePoolProviderKeyMapOutput() WorkforcePoolProviderKeyMapOutput {
	return o
}

func (o WorkforcePoolProviderKeyMapOutput) ToWorkforcePoolProviderKeyMapOutputWithContext(ctx context.Context) WorkforcePoolProviderKeyMapOutput {
	return o
}

func (o WorkforcePoolProviderKeyMapOutput) MapIndex(k pulumi.StringInput) WorkforcePoolProviderKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkforcePoolProviderKey {
		return vs[0].(map[string]*WorkforcePoolProviderKey)[vs[1].(string)]
	}).(WorkforcePoolProviderKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkforcePoolProviderKeyInput)(nil)).Elem(), &WorkforcePoolProviderKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkforcePoolProviderKeyArrayInput)(nil)).Elem(), WorkforcePoolProviderKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkforcePoolProviderKeyMapInput)(nil)).Elem(), WorkforcePoolProviderKeyMap{})
	pulumi.RegisterOutputType(WorkforcePoolProviderKeyOutput{})
	pulumi.RegisterOutputType(WorkforcePoolProviderKeyArrayOutput{})
	pulumi.RegisterOutputType(WorkforcePoolProviderKeyMapOutput{})
}
