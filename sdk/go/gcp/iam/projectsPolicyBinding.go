// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Iam Projects Policy Binding
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/iam"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			pabPolicy, err := iam.NewPrincipalAccessBoundaryPolicy(ctx, "pab_policy", &iam.PrincipalAccessBoundaryPolicyArgs{
//				Organization:                    pulumi.String("123456789"),
//				Location:                        pulumi.String("global"),
//				DisplayName:                     pulumi.String("binding for all principals in the project"),
//				PrincipalAccessBoundaryPolicyId: pulumi.String("my-pab-policy"),
//			})
//			if err != nil {
//				return err
//			}
//			wait60Seconds, err := time.NewSleep(ctx, "wait_60_seconds", &time.SleepArgs{
//				CreateDuration: "60s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				pabPolicy,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewProjectsPolicyBinding(ctx, "binding-for-all-project-principals", &iam.ProjectsPolicyBindingArgs{
//				Project:         pulumi.String(project.ProjectId),
//				Location:        pulumi.String("global"),
//				DisplayName:     pulumi.String("binding for all principals in the project"),
//				PolicyKind:      pulumi.String("PRINCIPAL_ACCESS_BOUNDARY"),
//				PolicyBindingId: pulumi.String("binding-for-all-project-principals"),
//				Policy: pabPolicy.PrincipalAccessBoundaryPolicyId.ApplyT(func(principalAccessBoundaryPolicyId string) (string, error) {
//					return fmt.Sprintf("organizations/123456789/locations/global/principalAccessBoundaryPolicies/%v", principalAccessBoundaryPolicyId), nil
//				}).(pulumi.StringOutput),
//				Target: &iam.ProjectsPolicyBindingTargetArgs{
//					PrincipalSet: pulumi.Sprintf("//cloudresourcemanager.googleapis.com/projects/%v", project.ProjectId),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait60Seconds,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ProjectsPolicyBinding can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/policyBindings/{{policy_binding_id}}`
//
// * `{{project}}/{{location}}/{{policy_binding_id}}`
//
// * `{{location}}/{{policy_binding_id}}`
//
// When using the `pulumi import` command, ProjectsPolicyBinding can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:iam/projectsPolicyBinding:ProjectsPolicyBinding default projects/{{project}}/locations/{{location}}/policyBindings/{{policy_binding_id}}
// ```
//
// ```sh
// $ pulumi import gcp:iam/projectsPolicyBinding:ProjectsPolicyBinding default {{project}}/{{location}}/{{policy_binding_id}}
// ```
//
// ```sh
// $ pulumi import gcp:iam/projectsPolicyBinding:ProjectsPolicyBinding default {{location}}/{{policy_binding_id}}
// ```
type ProjectsPolicyBinding struct {
	pulumi.CustomResourceState

	// Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size limitations
	//
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Represents a textual expression in the Common Expression Language
	// (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of
	// CEL are documented at https://github.com/google/cel-spec.
	// Example (Comparison):
	// title: \"Summary size limit\"
	// description: \"Determines if a summary is less than 100 chars\"
	// expression: \"document.summary.size() < 100\"
	// Example
	// (Equality):
	// title: \"Requestor is owner\"
	// description: \"Determines if requestor is the document owner\"
	// expression: \"document.owner == request.auth.claims.email\"  Example
	// (Logic):
	// title: \"Public documents\"
	// description: \"Determine whether the document should be publicly visible\"
	// expression: \"document.type != 'private' && document.type != 'internal'\"
	// Example (Data Manipulation):
	// title: \"Notification string\"
	// description: \"Create a notification string with a timestamp.\"
	// expression: \"'New message received at ' + string(document.create_time)\"
	// The exact variables and functions that may be referenced within an expression are
	// determined by the service that evaluates it. See the service documentation for
	// additional information.
	// Structure is documented below.
	Condition ProjectsPolicyBindingConditionPtrOutput `pulumi:"condition"`
	// Output only. The time when the policy binding was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. The description of the policy binding. Must be less than or equal to 63 characters.
	DisplayName          pulumi.StringPtrOutput `pulumi:"displayName"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// Optional. The etag for the policy binding. If this is provided on update, it must match the server's etag.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location of the Policy Binding
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the policy binding in the format `{binding_parent/locations/{location}/policyBindings/{policy_binding_id}`
	Name pulumi.StringOutput `pulumi:"name"`
	// Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
	Policy pulumi.StringOutput `pulumi:"policy"`
	// The Policy Binding ID.
	PolicyBindingId pulumi.StringOutput `pulumi:"policyBindingId"`
	// Immutable. The kind of the policy to attach in this binding. This
	// field must be one of the following:  - Left empty (will be automatically set
	// to the policy kind) - The input policy kind   Possible values:  POLICY_KIND_UNSPECIFIED PRINCIPAL_ACCESS_BOUNDARY ACCESS
	PolicyKind pulumi.StringPtrOutput `pulumi:"policyKind"`
	// Output only. The globally unique ID of the policy to be bound.
	PolicyUid pulumi.StringOutput `pulumi:"policyUid"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
	// Structure is documented below.
	Target ProjectsPolicyBindingTargetOutput `pulumi:"target"`
	// Output only. The globally unique ID of the policy binding. Assigned when the policy binding is created.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. The time when the policy binding was most recently updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewProjectsPolicyBinding registers a new resource with the given unique name, arguments, and options.
func NewProjectsPolicyBinding(ctx *pulumi.Context,
	name string, args *ProjectsPolicyBindingArgs, opts ...pulumi.ResourceOption) (*ProjectsPolicyBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.PolicyBindingId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyBindingId'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectsPolicyBinding
	err := ctx.RegisterResource("gcp:iam/projectsPolicyBinding:ProjectsPolicyBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectsPolicyBinding gets an existing ProjectsPolicyBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectsPolicyBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectsPolicyBindingState, opts ...pulumi.ResourceOption) (*ProjectsPolicyBinding, error) {
	var resource ProjectsPolicyBinding
	err := ctx.ReadResource("gcp:iam/projectsPolicyBinding:ProjectsPolicyBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectsPolicyBinding resources.
type projectsPolicyBindingState struct {
	// Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size limitations
	//
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Represents a textual expression in the Common Expression Language
	// (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of
	// CEL are documented at https://github.com/google/cel-spec.
	// Example (Comparison):
	// title: \"Summary size limit\"
	// description: \"Determines if a summary is less than 100 chars\"
	// expression: \"document.summary.size() < 100\"
	// Example
	// (Equality):
	// title: \"Requestor is owner\"
	// description: \"Determines if requestor is the document owner\"
	// expression: \"document.owner == request.auth.claims.email\"  Example
	// (Logic):
	// title: \"Public documents\"
	// description: \"Determine whether the document should be publicly visible\"
	// expression: \"document.type != 'private' && document.type != 'internal'\"
	// Example (Data Manipulation):
	// title: \"Notification string\"
	// description: \"Create a notification string with a timestamp.\"
	// expression: \"'New message received at ' + string(document.create_time)\"
	// The exact variables and functions that may be referenced within an expression are
	// determined by the service that evaluates it. See the service documentation for
	// additional information.
	// Structure is documented below.
	Condition *ProjectsPolicyBindingCondition `pulumi:"condition"`
	// Output only. The time when the policy binding was created.
	CreateTime *string `pulumi:"createTime"`
	// Optional. The description of the policy binding. Must be less than or equal to 63 characters.
	DisplayName          *string           `pulumi:"displayName"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// Optional. The etag for the policy binding. If this is provided on update, it must match the server's etag.
	Etag *string `pulumi:"etag"`
	// The location of the Policy Binding
	Location *string `pulumi:"location"`
	// The name of the policy binding in the format `{binding_parent/locations/{location}/policyBindings/{policy_binding_id}`
	Name *string `pulumi:"name"`
	// Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
	Policy *string `pulumi:"policy"`
	// The Policy Binding ID.
	PolicyBindingId *string `pulumi:"policyBindingId"`
	// Immutable. The kind of the policy to attach in this binding. This
	// field must be one of the following:  - Left empty (will be automatically set
	// to the policy kind) - The input policy kind   Possible values:  POLICY_KIND_UNSPECIFIED PRINCIPAL_ACCESS_BOUNDARY ACCESS
	PolicyKind *string `pulumi:"policyKind"`
	// Output only. The globally unique ID of the policy to be bound.
	PolicyUid *string `pulumi:"policyUid"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
	// Structure is documented below.
	Target *ProjectsPolicyBindingTarget `pulumi:"target"`
	// Output only. The globally unique ID of the policy binding. Assigned when the policy binding is created.
	Uid *string `pulumi:"uid"`
	// Output only. The time when the policy binding was most recently updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type ProjectsPolicyBindingState struct {
	// Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size limitations
	//
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Represents a textual expression in the Common Expression Language
	// (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of
	// CEL are documented at https://github.com/google/cel-spec.
	// Example (Comparison):
	// title: \"Summary size limit\"
	// description: \"Determines if a summary is less than 100 chars\"
	// expression: \"document.summary.size() < 100\"
	// Example
	// (Equality):
	// title: \"Requestor is owner\"
	// description: \"Determines if requestor is the document owner\"
	// expression: \"document.owner == request.auth.claims.email\"  Example
	// (Logic):
	// title: \"Public documents\"
	// description: \"Determine whether the document should be publicly visible\"
	// expression: \"document.type != 'private' && document.type != 'internal'\"
	// Example (Data Manipulation):
	// title: \"Notification string\"
	// description: \"Create a notification string with a timestamp.\"
	// expression: \"'New message received at ' + string(document.create_time)\"
	// The exact variables and functions that may be referenced within an expression are
	// determined by the service that evaluates it. See the service documentation for
	// additional information.
	// Structure is documented below.
	Condition ProjectsPolicyBindingConditionPtrInput
	// Output only. The time when the policy binding was created.
	CreateTime pulumi.StringPtrInput
	// Optional. The description of the policy binding. Must be less than or equal to 63 characters.
	DisplayName          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// Optional. The etag for the policy binding. If this is provided on update, it must match the server's etag.
	Etag pulumi.StringPtrInput
	// The location of the Policy Binding
	Location pulumi.StringPtrInput
	// The name of the policy binding in the format `{binding_parent/locations/{location}/policyBindings/{policy_binding_id}`
	Name pulumi.StringPtrInput
	// Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
	Policy pulumi.StringPtrInput
	// The Policy Binding ID.
	PolicyBindingId pulumi.StringPtrInput
	// Immutable. The kind of the policy to attach in this binding. This
	// field must be one of the following:  - Left empty (will be automatically set
	// to the policy kind) - The input policy kind   Possible values:  POLICY_KIND_UNSPECIFIED PRINCIPAL_ACCESS_BOUNDARY ACCESS
	PolicyKind pulumi.StringPtrInput
	// Output only. The globally unique ID of the policy to be bound.
	PolicyUid pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
	// Structure is documented below.
	Target ProjectsPolicyBindingTargetPtrInput
	// Output only. The globally unique ID of the policy binding. Assigned when the policy binding is created.
	Uid pulumi.StringPtrInput
	// Output only. The time when the policy binding was most recently updated.
	UpdateTime pulumi.StringPtrInput
}

func (ProjectsPolicyBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectsPolicyBindingState)(nil)).Elem()
}

type projectsPolicyBindingArgs struct {
	// Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size limitations
	//
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Represents a textual expression in the Common Expression Language
	// (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of
	// CEL are documented at https://github.com/google/cel-spec.
	// Example (Comparison):
	// title: \"Summary size limit\"
	// description: \"Determines if a summary is less than 100 chars\"
	// expression: \"document.summary.size() < 100\"
	// Example
	// (Equality):
	// title: \"Requestor is owner\"
	// description: \"Determines if requestor is the document owner\"
	// expression: \"document.owner == request.auth.claims.email\"  Example
	// (Logic):
	// title: \"Public documents\"
	// description: \"Determine whether the document should be publicly visible\"
	// expression: \"document.type != 'private' && document.type != 'internal'\"
	// Example (Data Manipulation):
	// title: \"Notification string\"
	// description: \"Create a notification string with a timestamp.\"
	// expression: \"'New message received at ' + string(document.create_time)\"
	// The exact variables and functions that may be referenced within an expression are
	// determined by the service that evaluates it. See the service documentation for
	// additional information.
	// Structure is documented below.
	Condition *ProjectsPolicyBindingCondition `pulumi:"condition"`
	// Optional. The description of the policy binding. Must be less than or equal to 63 characters.
	DisplayName *string `pulumi:"displayName"`
	// The location of the Policy Binding
	Location string `pulumi:"location"`
	// Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
	Policy string `pulumi:"policy"`
	// The Policy Binding ID.
	PolicyBindingId string `pulumi:"policyBindingId"`
	// Immutable. The kind of the policy to attach in this binding. This
	// field must be one of the following:  - Left empty (will be automatically set
	// to the policy kind) - The input policy kind   Possible values:  POLICY_KIND_UNSPECIFIED PRINCIPAL_ACCESS_BOUNDARY ACCESS
	PolicyKind *string `pulumi:"policyKind"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
	// Structure is documented below.
	Target ProjectsPolicyBindingTarget `pulumi:"target"`
}

// The set of arguments for constructing a ProjectsPolicyBinding resource.
type ProjectsPolicyBindingArgs struct {
	// Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size limitations
	//
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Represents a textual expression in the Common Expression Language
	// (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of
	// CEL are documented at https://github.com/google/cel-spec.
	// Example (Comparison):
	// title: \"Summary size limit\"
	// description: \"Determines if a summary is less than 100 chars\"
	// expression: \"document.summary.size() < 100\"
	// Example
	// (Equality):
	// title: \"Requestor is owner\"
	// description: \"Determines if requestor is the document owner\"
	// expression: \"document.owner == request.auth.claims.email\"  Example
	// (Logic):
	// title: \"Public documents\"
	// description: \"Determine whether the document should be publicly visible\"
	// expression: \"document.type != 'private' && document.type != 'internal'\"
	// Example (Data Manipulation):
	// title: \"Notification string\"
	// description: \"Create a notification string with a timestamp.\"
	// expression: \"'New message received at ' + string(document.create_time)\"
	// The exact variables and functions that may be referenced within an expression are
	// determined by the service that evaluates it. See the service documentation for
	// additional information.
	// Structure is documented below.
	Condition ProjectsPolicyBindingConditionPtrInput
	// Optional. The description of the policy binding. Must be less than or equal to 63 characters.
	DisplayName pulumi.StringPtrInput
	// The location of the Policy Binding
	Location pulumi.StringInput
	// Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
	Policy pulumi.StringInput
	// The Policy Binding ID.
	PolicyBindingId pulumi.StringInput
	// Immutable. The kind of the policy to attach in this binding. This
	// field must be one of the following:  - Left empty (will be automatically set
	// to the policy kind) - The input policy kind   Possible values:  POLICY_KIND_UNSPECIFIED PRINCIPAL_ACCESS_BOUNDARY ACCESS
	PolicyKind pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
	// Structure is documented below.
	Target ProjectsPolicyBindingTargetInput
}

func (ProjectsPolicyBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectsPolicyBindingArgs)(nil)).Elem()
}

type ProjectsPolicyBindingInput interface {
	pulumi.Input

	ToProjectsPolicyBindingOutput() ProjectsPolicyBindingOutput
	ToProjectsPolicyBindingOutputWithContext(ctx context.Context) ProjectsPolicyBindingOutput
}

func (*ProjectsPolicyBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectsPolicyBinding)(nil)).Elem()
}

func (i *ProjectsPolicyBinding) ToProjectsPolicyBindingOutput() ProjectsPolicyBindingOutput {
	return i.ToProjectsPolicyBindingOutputWithContext(context.Background())
}

func (i *ProjectsPolicyBinding) ToProjectsPolicyBindingOutputWithContext(ctx context.Context) ProjectsPolicyBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectsPolicyBindingOutput)
}

// ProjectsPolicyBindingArrayInput is an input type that accepts ProjectsPolicyBindingArray and ProjectsPolicyBindingArrayOutput values.
// You can construct a concrete instance of `ProjectsPolicyBindingArrayInput` via:
//
//	ProjectsPolicyBindingArray{ ProjectsPolicyBindingArgs{...} }
type ProjectsPolicyBindingArrayInput interface {
	pulumi.Input

	ToProjectsPolicyBindingArrayOutput() ProjectsPolicyBindingArrayOutput
	ToProjectsPolicyBindingArrayOutputWithContext(context.Context) ProjectsPolicyBindingArrayOutput
}

type ProjectsPolicyBindingArray []ProjectsPolicyBindingInput

func (ProjectsPolicyBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectsPolicyBinding)(nil)).Elem()
}

func (i ProjectsPolicyBindingArray) ToProjectsPolicyBindingArrayOutput() ProjectsPolicyBindingArrayOutput {
	return i.ToProjectsPolicyBindingArrayOutputWithContext(context.Background())
}

func (i ProjectsPolicyBindingArray) ToProjectsPolicyBindingArrayOutputWithContext(ctx context.Context) ProjectsPolicyBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectsPolicyBindingArrayOutput)
}

// ProjectsPolicyBindingMapInput is an input type that accepts ProjectsPolicyBindingMap and ProjectsPolicyBindingMapOutput values.
// You can construct a concrete instance of `ProjectsPolicyBindingMapInput` via:
//
//	ProjectsPolicyBindingMap{ "key": ProjectsPolicyBindingArgs{...} }
type ProjectsPolicyBindingMapInput interface {
	pulumi.Input

	ToProjectsPolicyBindingMapOutput() ProjectsPolicyBindingMapOutput
	ToProjectsPolicyBindingMapOutputWithContext(context.Context) ProjectsPolicyBindingMapOutput
}

type ProjectsPolicyBindingMap map[string]ProjectsPolicyBindingInput

func (ProjectsPolicyBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectsPolicyBinding)(nil)).Elem()
}

func (i ProjectsPolicyBindingMap) ToProjectsPolicyBindingMapOutput() ProjectsPolicyBindingMapOutput {
	return i.ToProjectsPolicyBindingMapOutputWithContext(context.Background())
}

func (i ProjectsPolicyBindingMap) ToProjectsPolicyBindingMapOutputWithContext(ctx context.Context) ProjectsPolicyBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectsPolicyBindingMapOutput)
}

type ProjectsPolicyBindingOutput struct{ *pulumi.OutputState }

func (ProjectsPolicyBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectsPolicyBinding)(nil)).Elem()
}

func (o ProjectsPolicyBindingOutput) ToProjectsPolicyBindingOutput() ProjectsPolicyBindingOutput {
	return o
}

func (o ProjectsPolicyBindingOutput) ToProjectsPolicyBindingOutputWithContext(ctx context.Context) ProjectsPolicyBindingOutput {
	return o
}

// Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size limitations
//
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o ProjectsPolicyBindingOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectsPolicyBinding) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Represents a textual expression in the Common Expression Language
// (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of
// CEL are documented at https://github.com/google/cel-spec.
// Example (Comparison):
// title: \"Summary size limit\"
// description: \"Determines if a summary is less than 100 chars\"
// expression: \"document.summary.size() < 100\"
// Example
// (Equality):
// title: \"Requestor is owner\"
// description: \"Determines if requestor is the document owner\"
// expression: \"document.owner == request.auth.claims.email\"  Example
// (Logic):
// title: \"Public documents\"
// description: \"Determine whether the document should be publicly visible\"
// expression: \"document.type != 'private' && document.type != 'internal'\"
// Example (Data Manipulation):
// title: \"Notification string\"
// description: \"Create a notification string with a timestamp.\"
// expression: \"'New message received at ' + string(document.create_time)\"
// The exact variables and functions that may be referenced within an expression are
// determined by the service that evaluates it. See the service documentation for
// additional information.
// Structure is documented below.
func (o ProjectsPolicyBindingOutput) Condition() ProjectsPolicyBindingConditionPtrOutput {
	return o.ApplyT(func(v *ProjectsPolicyBinding) ProjectsPolicyBindingConditionPtrOutput { return v.Condition }).(ProjectsPolicyBindingConditionPtrOutput)
}

// Output only. The time when the policy binding was created.
func (o ProjectsPolicyBindingOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectsPolicyBinding) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. The description of the policy binding. Must be less than or equal to 63 characters.
func (o ProjectsPolicyBindingOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectsPolicyBinding) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o ProjectsPolicyBindingOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectsPolicyBinding) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// Optional. The etag for the policy binding. If this is provided on update, it must match the server's etag.
func (o ProjectsPolicyBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectsPolicyBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location of the Policy Binding
func (o ProjectsPolicyBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectsPolicyBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the policy binding in the format `{binding_parent/locations/{location}/policyBindings/{policy_binding_id}`
func (o ProjectsPolicyBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectsPolicyBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
func (o ProjectsPolicyBindingOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectsPolicyBinding) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

// The Policy Binding ID.
func (o ProjectsPolicyBindingOutput) PolicyBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectsPolicyBinding) pulumi.StringOutput { return v.PolicyBindingId }).(pulumi.StringOutput)
}

// Immutable. The kind of the policy to attach in this binding. This
// field must be one of the following:  - Left empty (will be automatically set
// to the policy kind) - The input policy kind   Possible values:  POLICY_KIND_UNSPECIFIED PRINCIPAL_ACCESS_BOUNDARY ACCESS
func (o ProjectsPolicyBindingOutput) PolicyKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectsPolicyBinding) pulumi.StringPtrOutput { return v.PolicyKind }).(pulumi.StringPtrOutput)
}

// Output only. The globally unique ID of the policy to be bound.
func (o ProjectsPolicyBindingOutput) PolicyUid() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectsPolicyBinding) pulumi.StringOutput { return v.PolicyUid }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ProjectsPolicyBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectsPolicyBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
// Structure is documented below.
func (o ProjectsPolicyBindingOutput) Target() ProjectsPolicyBindingTargetOutput {
	return o.ApplyT(func(v *ProjectsPolicyBinding) ProjectsPolicyBindingTargetOutput { return v.Target }).(ProjectsPolicyBindingTargetOutput)
}

// Output only. The globally unique ID of the policy binding. Assigned when the policy binding is created.
func (o ProjectsPolicyBindingOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectsPolicyBinding) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Output only. The time when the policy binding was most recently updated.
func (o ProjectsPolicyBindingOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectsPolicyBinding) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ProjectsPolicyBindingArrayOutput struct{ *pulumi.OutputState }

func (ProjectsPolicyBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectsPolicyBinding)(nil)).Elem()
}

func (o ProjectsPolicyBindingArrayOutput) ToProjectsPolicyBindingArrayOutput() ProjectsPolicyBindingArrayOutput {
	return o
}

func (o ProjectsPolicyBindingArrayOutput) ToProjectsPolicyBindingArrayOutputWithContext(ctx context.Context) ProjectsPolicyBindingArrayOutput {
	return o
}

func (o ProjectsPolicyBindingArrayOutput) Index(i pulumi.IntInput) ProjectsPolicyBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectsPolicyBinding {
		return vs[0].([]*ProjectsPolicyBinding)[vs[1].(int)]
	}).(ProjectsPolicyBindingOutput)
}

type ProjectsPolicyBindingMapOutput struct{ *pulumi.OutputState }

func (ProjectsPolicyBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectsPolicyBinding)(nil)).Elem()
}

func (o ProjectsPolicyBindingMapOutput) ToProjectsPolicyBindingMapOutput() ProjectsPolicyBindingMapOutput {
	return o
}

func (o ProjectsPolicyBindingMapOutput) ToProjectsPolicyBindingMapOutputWithContext(ctx context.Context) ProjectsPolicyBindingMapOutput {
	return o
}

func (o ProjectsPolicyBindingMapOutput) MapIndex(k pulumi.StringInput) ProjectsPolicyBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectsPolicyBinding {
		return vs[0].(map[string]*ProjectsPolicyBinding)[vs[1].(string)]
	}).(ProjectsPolicyBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectsPolicyBindingInput)(nil)).Elem(), &ProjectsPolicyBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectsPolicyBindingArrayInput)(nil)).Elem(), ProjectsPolicyBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectsPolicyBindingMapInput)(nil)).Elem(), ProjectsPolicyBindingMap{})
	pulumi.RegisterOutputType(ProjectsPolicyBindingOutput{})
	pulumi.RegisterOutputType(ProjectsPolicyBindingArrayOutput{})
	pulumi.RegisterOutputType(ProjectsPolicyBindingMapOutput{})
}
