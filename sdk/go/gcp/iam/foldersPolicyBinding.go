// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A policy binding to a folder
//
// To get more information about FoldersPolicyBinding, see:
//
// * [API documentation](https://cloud.google.com/iam/docs/reference/rest/v3/folders.locations.policyBindings)
// * How-to Guides
//   - [Apply a policy binding](https://cloud.google.com/iam/docs/principal-access-boundary-policies-create#create_binding)
//
// ## Example Usage
//
// ### Iam Folders Policy Binding
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iam"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			pabPolicy, err := iam.NewPrincipalAccessBoundaryPolicy(ctx, "pab_policy", &iam.PrincipalAccessBoundaryPolicyArgs{
//				Organization:                    pulumi.String("123456789"),
//				Location:                        pulumi.String("global"),
//				DisplayName:                     pulumi.String("test folder binding"),
//				PrincipalAccessBoundaryPolicyId: pulumi.String("my-pab-policy"),
//			})
//			if err != nil {
//				return err
//			}
//			folder, err := organizations.NewFolder(ctx, "folder", &organizations.FolderArgs{
//				DisplayName:        pulumi.String("test folder"),
//				Parent:             pulumi.String("organizations/123456789"),
//				DeletionProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			wait120s, err := time.NewSleep(ctx, "wait_120s", &time.SleepArgs{
//				CreateDuration: "120s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				folder,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewFoldersPolicyBinding(ctx, "my-folder-binding", &iam.FoldersPolicyBindingArgs{
//				Folder:          folder.FolderId,
//				Location:        pulumi.String("global"),
//				DisplayName:     pulumi.String("test folder binding"),
//				PolicyKind:      pulumi.String("PRINCIPAL_ACCESS_BOUNDARY"),
//				PolicyBindingId: pulumi.String("test-folder-binding"),
//				Policy: pabPolicy.PrincipalAccessBoundaryPolicyId.ApplyT(func(principalAccessBoundaryPolicyId string) (string, error) {
//					return fmt.Sprintf("organizations/123456789/locations/global/principalAccessBoundaryPolicies/%v", principalAccessBoundaryPolicyId), nil
//				}).(pulumi.StringOutput),
//				Target: &iam.FoldersPolicyBindingTargetArgs{
//					PrincipalSet: folder.FolderId.ApplyT(func(folderId string) (string, error) {
//						return fmt.Sprintf("//cloudresourcemanager.googleapis.com/folders/%v", folderId), nil
//					}).(pulumi.StringOutput),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait120s,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FoldersPolicyBinding can be imported using any of these accepted formats:
//
// * `folders/{{folder}}/locations/{{location}}/policyBindings/{{policy_binding_id}}`
//
// * `{{folder}}/{{location}}/{{policy_binding_id}}`
//
// When using the `pulumi import` command, FoldersPolicyBinding can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:iam/foldersPolicyBinding:FoldersPolicyBinding default folders/{{folder}}/locations/{{location}}/policyBindings/{{policy_binding_id}}
// ```
//
// ```sh
// $ pulumi import gcp:iam/foldersPolicyBinding:FoldersPolicyBinding default {{folder}}/{{location}}/{{policy_binding_id}}
// ```
type FoldersPolicyBinding struct {
	pulumi.CustomResourceState

	// Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size
	// limitations **Note**: This field is non-authoritative, and will only manage the annotations present in your
	// configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The
	// syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary
	// size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() <
	// 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\"
	// expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description:
	// \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type
	// != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string
	// with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and
	// functions that may be referenced within an expression are determined by the service that evaluates it. See the service
	// documentation for additional information.
	Condition FoldersPolicyBindingConditionPtrOutput `pulumi:"condition"`
	// Output only. The time when the policy binding was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. The description of the policy binding. Must be less than or equal to 63 characters.
	DisplayName          pulumi.StringPtrOutput `pulumi:"displayName"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// Optional. The etag for the policy binding. If this is provided on update, it must match the server's etag.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The parent folder for the PolicyBinding.
	Folder pulumi.StringOutput `pulumi:"folder"`
	// The location of the PolicyBinding.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the policy binding in the format `{binding_parent/locations/{location}/policyBindings/{policy_binding_id}`
	Name pulumi.StringOutput `pulumi:"name"`
	// Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
	Policy pulumi.StringOutput `pulumi:"policy"`
	// The Policy Binding ID.
	PolicyBindingId pulumi.StringOutput `pulumi:"policyBindingId"`
	// Immutable. The kind of the policy to attach in this binding. This field must be one of the following: - Left empty (will
	// be automatically set to the policy kind) - The input policy kind Possible values: POLICY_KIND_UNSPECIFIED
	// PRINCIPAL_ACCESS_BOUNDARY ACCESS
	PolicyKind pulumi.StringPtrOutput `pulumi:"policyKind"`
	// Output only. The globally unique ID of the policy to be bound.
	PolicyUid pulumi.StringOutput `pulumi:"policyUid"`
	// Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
	// Structure is documented below.
	Target FoldersPolicyBindingTargetOutput `pulumi:"target"`
	// Output only. The globally unique ID of the policy binding. Assigned when the policy binding is created.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. The time when the policy binding was most recently updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewFoldersPolicyBinding registers a new resource with the given unique name, arguments, and options.
func NewFoldersPolicyBinding(ctx *pulumi.Context,
	name string, args *FoldersPolicyBindingArgs, opts ...pulumi.ResourceOption) (*FoldersPolicyBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Folder == nil {
		return nil, errors.New("invalid value for required argument 'Folder'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.PolicyBindingId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyBindingId'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FoldersPolicyBinding
	err := ctx.RegisterResource("gcp:iam/foldersPolicyBinding:FoldersPolicyBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFoldersPolicyBinding gets an existing FoldersPolicyBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFoldersPolicyBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FoldersPolicyBindingState, opts ...pulumi.ResourceOption) (*FoldersPolicyBinding, error) {
	var resource FoldersPolicyBinding
	err := ctx.ReadResource("gcp:iam/foldersPolicyBinding:FoldersPolicyBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FoldersPolicyBinding resources.
type foldersPolicyBindingState struct {
	// Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size
	// limitations **Note**: This field is non-authoritative, and will only manage the annotations present in your
	// configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The
	// syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary
	// size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() <
	// 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\"
	// expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description:
	// \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type
	// != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string
	// with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and
	// functions that may be referenced within an expression are determined by the service that evaluates it. See the service
	// documentation for additional information.
	Condition *FoldersPolicyBindingCondition `pulumi:"condition"`
	// Output only. The time when the policy binding was created.
	CreateTime *string `pulumi:"createTime"`
	// Optional. The description of the policy binding. Must be less than or equal to 63 characters.
	DisplayName          *string           `pulumi:"displayName"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// Optional. The etag for the policy binding. If this is provided on update, it must match the server's etag.
	Etag *string `pulumi:"etag"`
	// The parent folder for the PolicyBinding.
	Folder *string `pulumi:"folder"`
	// The location of the PolicyBinding.
	Location *string `pulumi:"location"`
	// The name of the policy binding in the format `{binding_parent/locations/{location}/policyBindings/{policy_binding_id}`
	Name *string `pulumi:"name"`
	// Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
	Policy *string `pulumi:"policy"`
	// The Policy Binding ID.
	PolicyBindingId *string `pulumi:"policyBindingId"`
	// Immutable. The kind of the policy to attach in this binding. This field must be one of the following: - Left empty (will
	// be automatically set to the policy kind) - The input policy kind Possible values: POLICY_KIND_UNSPECIFIED
	// PRINCIPAL_ACCESS_BOUNDARY ACCESS
	PolicyKind *string `pulumi:"policyKind"`
	// Output only. The globally unique ID of the policy to be bound.
	PolicyUid *string `pulumi:"policyUid"`
	// Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
	// Structure is documented below.
	Target *FoldersPolicyBindingTarget `pulumi:"target"`
	// Output only. The globally unique ID of the policy binding. Assigned when the policy binding is created.
	Uid *string `pulumi:"uid"`
	// Output only. The time when the policy binding was most recently updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type FoldersPolicyBindingState struct {
	// Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size
	// limitations **Note**: This field is non-authoritative, and will only manage the annotations present in your
	// configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The
	// syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary
	// size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() <
	// 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\"
	// expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description:
	// \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type
	// != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string
	// with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and
	// functions that may be referenced within an expression are determined by the service that evaluates it. See the service
	// documentation for additional information.
	Condition FoldersPolicyBindingConditionPtrInput
	// Output only. The time when the policy binding was created.
	CreateTime pulumi.StringPtrInput
	// Optional. The description of the policy binding. Must be less than or equal to 63 characters.
	DisplayName          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// Optional. The etag for the policy binding. If this is provided on update, it must match the server's etag.
	Etag pulumi.StringPtrInput
	// The parent folder for the PolicyBinding.
	Folder pulumi.StringPtrInput
	// The location of the PolicyBinding.
	Location pulumi.StringPtrInput
	// The name of the policy binding in the format `{binding_parent/locations/{location}/policyBindings/{policy_binding_id}`
	Name pulumi.StringPtrInput
	// Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
	Policy pulumi.StringPtrInput
	// The Policy Binding ID.
	PolicyBindingId pulumi.StringPtrInput
	// Immutable. The kind of the policy to attach in this binding. This field must be one of the following: - Left empty (will
	// be automatically set to the policy kind) - The input policy kind Possible values: POLICY_KIND_UNSPECIFIED
	// PRINCIPAL_ACCESS_BOUNDARY ACCESS
	PolicyKind pulumi.StringPtrInput
	// Output only. The globally unique ID of the policy to be bound.
	PolicyUid pulumi.StringPtrInput
	// Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
	// Structure is documented below.
	Target FoldersPolicyBindingTargetPtrInput
	// Output only. The globally unique ID of the policy binding. Assigned when the policy binding is created.
	Uid pulumi.StringPtrInput
	// Output only. The time when the policy binding was most recently updated.
	UpdateTime pulumi.StringPtrInput
}

func (FoldersPolicyBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*foldersPolicyBindingState)(nil)).Elem()
}

type foldersPolicyBindingArgs struct {
	// Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size
	// limitations **Note**: This field is non-authoritative, and will only manage the annotations present in your
	// configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The
	// syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary
	// size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() <
	// 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\"
	// expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description:
	// \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type
	// != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string
	// with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and
	// functions that may be referenced within an expression are determined by the service that evaluates it. See the service
	// documentation for additional information.
	Condition *FoldersPolicyBindingCondition `pulumi:"condition"`
	// Optional. The description of the policy binding. Must be less than or equal to 63 characters.
	DisplayName *string `pulumi:"displayName"`
	// The parent folder for the PolicyBinding.
	Folder string `pulumi:"folder"`
	// The location of the PolicyBinding.
	Location string `pulumi:"location"`
	// Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
	Policy string `pulumi:"policy"`
	// The Policy Binding ID.
	PolicyBindingId string `pulumi:"policyBindingId"`
	// Immutable. The kind of the policy to attach in this binding. This field must be one of the following: - Left empty (will
	// be automatically set to the policy kind) - The input policy kind Possible values: POLICY_KIND_UNSPECIFIED
	// PRINCIPAL_ACCESS_BOUNDARY ACCESS
	PolicyKind *string `pulumi:"policyKind"`
	// Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
	// Structure is documented below.
	Target FoldersPolicyBindingTarget `pulumi:"target"`
}

// The set of arguments for constructing a FoldersPolicyBinding resource.
type FoldersPolicyBindingArgs struct {
	// Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size
	// limitations **Note**: This field is non-authoritative, and will only manage the annotations present in your
	// configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The
	// syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary
	// size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() <
	// 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\"
	// expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description:
	// \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type
	// != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string
	// with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and
	// functions that may be referenced within an expression are determined by the service that evaluates it. See the service
	// documentation for additional information.
	Condition FoldersPolicyBindingConditionPtrInput
	// Optional. The description of the policy binding. Must be less than or equal to 63 characters.
	DisplayName pulumi.StringPtrInput
	// The parent folder for the PolicyBinding.
	Folder pulumi.StringInput
	// The location of the PolicyBinding.
	Location pulumi.StringInput
	// Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
	Policy pulumi.StringInput
	// The Policy Binding ID.
	PolicyBindingId pulumi.StringInput
	// Immutable. The kind of the policy to attach in this binding. This field must be one of the following: - Left empty (will
	// be automatically set to the policy kind) - The input policy kind Possible values: POLICY_KIND_UNSPECIFIED
	// PRINCIPAL_ACCESS_BOUNDARY ACCESS
	PolicyKind pulumi.StringPtrInput
	// Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
	// Structure is documented below.
	Target FoldersPolicyBindingTargetInput
}

func (FoldersPolicyBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*foldersPolicyBindingArgs)(nil)).Elem()
}

type FoldersPolicyBindingInput interface {
	pulumi.Input

	ToFoldersPolicyBindingOutput() FoldersPolicyBindingOutput
	ToFoldersPolicyBindingOutputWithContext(ctx context.Context) FoldersPolicyBindingOutput
}

func (*FoldersPolicyBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**FoldersPolicyBinding)(nil)).Elem()
}

func (i *FoldersPolicyBinding) ToFoldersPolicyBindingOutput() FoldersPolicyBindingOutput {
	return i.ToFoldersPolicyBindingOutputWithContext(context.Background())
}

func (i *FoldersPolicyBinding) ToFoldersPolicyBindingOutputWithContext(ctx context.Context) FoldersPolicyBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FoldersPolicyBindingOutput)
}

// FoldersPolicyBindingArrayInput is an input type that accepts FoldersPolicyBindingArray and FoldersPolicyBindingArrayOutput values.
// You can construct a concrete instance of `FoldersPolicyBindingArrayInput` via:
//
//	FoldersPolicyBindingArray{ FoldersPolicyBindingArgs{...} }
type FoldersPolicyBindingArrayInput interface {
	pulumi.Input

	ToFoldersPolicyBindingArrayOutput() FoldersPolicyBindingArrayOutput
	ToFoldersPolicyBindingArrayOutputWithContext(context.Context) FoldersPolicyBindingArrayOutput
}

type FoldersPolicyBindingArray []FoldersPolicyBindingInput

func (FoldersPolicyBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FoldersPolicyBinding)(nil)).Elem()
}

func (i FoldersPolicyBindingArray) ToFoldersPolicyBindingArrayOutput() FoldersPolicyBindingArrayOutput {
	return i.ToFoldersPolicyBindingArrayOutputWithContext(context.Background())
}

func (i FoldersPolicyBindingArray) ToFoldersPolicyBindingArrayOutputWithContext(ctx context.Context) FoldersPolicyBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FoldersPolicyBindingArrayOutput)
}

// FoldersPolicyBindingMapInput is an input type that accepts FoldersPolicyBindingMap and FoldersPolicyBindingMapOutput values.
// You can construct a concrete instance of `FoldersPolicyBindingMapInput` via:
//
//	FoldersPolicyBindingMap{ "key": FoldersPolicyBindingArgs{...} }
type FoldersPolicyBindingMapInput interface {
	pulumi.Input

	ToFoldersPolicyBindingMapOutput() FoldersPolicyBindingMapOutput
	ToFoldersPolicyBindingMapOutputWithContext(context.Context) FoldersPolicyBindingMapOutput
}

type FoldersPolicyBindingMap map[string]FoldersPolicyBindingInput

func (FoldersPolicyBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FoldersPolicyBinding)(nil)).Elem()
}

func (i FoldersPolicyBindingMap) ToFoldersPolicyBindingMapOutput() FoldersPolicyBindingMapOutput {
	return i.ToFoldersPolicyBindingMapOutputWithContext(context.Background())
}

func (i FoldersPolicyBindingMap) ToFoldersPolicyBindingMapOutputWithContext(ctx context.Context) FoldersPolicyBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FoldersPolicyBindingMapOutput)
}

type FoldersPolicyBindingOutput struct{ *pulumi.OutputState }

func (FoldersPolicyBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FoldersPolicyBinding)(nil)).Elem()
}

func (o FoldersPolicyBindingOutput) ToFoldersPolicyBindingOutput() FoldersPolicyBindingOutput {
	return o
}

func (o FoldersPolicyBindingOutput) ToFoldersPolicyBindingOutputWithContext(ctx context.Context) FoldersPolicyBindingOutput {
	return o
}

// Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size
// limitations **Note**: This field is non-authoritative, and will only manage the annotations present in your
// configuration. Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
func (o FoldersPolicyBindingOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FoldersPolicyBinding) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The
// syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary
// size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() <
// 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\"
// expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description:
// \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type
// != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string
// with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and
// functions that may be referenced within an expression are determined by the service that evaluates it. See the service
// documentation for additional information.
func (o FoldersPolicyBindingOutput) Condition() FoldersPolicyBindingConditionPtrOutput {
	return o.ApplyT(func(v *FoldersPolicyBinding) FoldersPolicyBindingConditionPtrOutput { return v.Condition }).(FoldersPolicyBindingConditionPtrOutput)
}

// Output only. The time when the policy binding was created.
func (o FoldersPolicyBindingOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FoldersPolicyBinding) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. The description of the policy binding. Must be less than or equal to 63 characters.
func (o FoldersPolicyBindingOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FoldersPolicyBinding) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o FoldersPolicyBindingOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FoldersPolicyBinding) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// Optional. The etag for the policy binding. If this is provided on update, it must match the server's etag.
func (o FoldersPolicyBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *FoldersPolicyBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The parent folder for the PolicyBinding.
func (o FoldersPolicyBindingOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v *FoldersPolicyBinding) pulumi.StringOutput { return v.Folder }).(pulumi.StringOutput)
}

// The location of the PolicyBinding.
func (o FoldersPolicyBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *FoldersPolicyBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the policy binding in the format `{binding_parent/locations/{location}/policyBindings/{policy_binding_id}`
func (o FoldersPolicyBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FoldersPolicyBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
func (o FoldersPolicyBindingOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *FoldersPolicyBinding) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

// The Policy Binding ID.
func (o FoldersPolicyBindingOutput) PolicyBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *FoldersPolicyBinding) pulumi.StringOutput { return v.PolicyBindingId }).(pulumi.StringOutput)
}

// Immutable. The kind of the policy to attach in this binding. This field must be one of the following: - Left empty (will
// be automatically set to the policy kind) - The input policy kind Possible values: POLICY_KIND_UNSPECIFIED
// PRINCIPAL_ACCESS_BOUNDARY ACCESS
func (o FoldersPolicyBindingOutput) PolicyKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FoldersPolicyBinding) pulumi.StringPtrOutput { return v.PolicyKind }).(pulumi.StringPtrOutput)
}

// Output only. The globally unique ID of the policy to be bound.
func (o FoldersPolicyBindingOutput) PolicyUid() pulumi.StringOutput {
	return o.ApplyT(func(v *FoldersPolicyBinding) pulumi.StringOutput { return v.PolicyUid }).(pulumi.StringOutput)
}

// Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
// Structure is documented below.
func (o FoldersPolicyBindingOutput) Target() FoldersPolicyBindingTargetOutput {
	return o.ApplyT(func(v *FoldersPolicyBinding) FoldersPolicyBindingTargetOutput { return v.Target }).(FoldersPolicyBindingTargetOutput)
}

// Output only. The globally unique ID of the policy binding. Assigned when the policy binding is created.
func (o FoldersPolicyBindingOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *FoldersPolicyBinding) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Output only. The time when the policy binding was most recently updated.
func (o FoldersPolicyBindingOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FoldersPolicyBinding) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type FoldersPolicyBindingArrayOutput struct{ *pulumi.OutputState }

func (FoldersPolicyBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FoldersPolicyBinding)(nil)).Elem()
}

func (o FoldersPolicyBindingArrayOutput) ToFoldersPolicyBindingArrayOutput() FoldersPolicyBindingArrayOutput {
	return o
}

func (o FoldersPolicyBindingArrayOutput) ToFoldersPolicyBindingArrayOutputWithContext(ctx context.Context) FoldersPolicyBindingArrayOutput {
	return o
}

func (o FoldersPolicyBindingArrayOutput) Index(i pulumi.IntInput) FoldersPolicyBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FoldersPolicyBinding {
		return vs[0].([]*FoldersPolicyBinding)[vs[1].(int)]
	}).(FoldersPolicyBindingOutput)
}

type FoldersPolicyBindingMapOutput struct{ *pulumi.OutputState }

func (FoldersPolicyBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FoldersPolicyBinding)(nil)).Elem()
}

func (o FoldersPolicyBindingMapOutput) ToFoldersPolicyBindingMapOutput() FoldersPolicyBindingMapOutput {
	return o
}

func (o FoldersPolicyBindingMapOutput) ToFoldersPolicyBindingMapOutputWithContext(ctx context.Context) FoldersPolicyBindingMapOutput {
	return o
}

func (o FoldersPolicyBindingMapOutput) MapIndex(k pulumi.StringInput) FoldersPolicyBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FoldersPolicyBinding {
		return vs[0].(map[string]*FoldersPolicyBinding)[vs[1].(string)]
	}).(FoldersPolicyBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FoldersPolicyBindingInput)(nil)).Elem(), &FoldersPolicyBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*FoldersPolicyBindingArrayInput)(nil)).Elem(), FoldersPolicyBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FoldersPolicyBindingMapInput)(nil)).Elem(), FoldersPolicyBindingMap{})
	pulumi.RegisterOutputType(FoldersPolicyBindingOutput{})
	pulumi.RegisterOutputType(FoldersPolicyBindingArrayOutput{})
	pulumi.RegisterOutputType(FoldersPolicyBindingMapOutput{})
}
