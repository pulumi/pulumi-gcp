// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Cloud IAM WorkforcePool. Each of these resources serves a different use case:
//
// * `iam.WorkforcePoolIamPolicy`: Authoritative. Sets the IAM policy for the workforcepool and replaces any existing policy already attached.
// * `iam.WorkforcePoolIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the workforcepool are preserved.
// * `iam.WorkforcePoolIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the workforcepool are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `iam.WorkforcePoolIamPolicy`: Retrieves the IAM policy for the workforcepool
//
// > **Note:** `iam.WorkforcePoolIamPolicy` **cannot** be used in conjunction with `iam.WorkforcePoolIamBinding` and `iam.WorkforcePoolIamMember` or they will fight over what your policy should be.
//
// > **Note:** `iam.WorkforcePoolIamBinding` resources **can be** used in conjunction with `iam.WorkforcePoolIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## iam.WorkforcePoolIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iam"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/iam.workforcePoolAdmin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewWorkforcePoolIamPolicy(ctx, "policy", &iam.WorkforcePoolIamPolicyArgs{
//				Location:        pulumi.Any(example.Location),
//				WorkforcePoolId: pulumi.Any(example.WorkforcePoolId),
//				PolicyData:      pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## iam.WorkforcePoolIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iam.NewWorkforcePoolIamBinding(ctx, "binding", &iam.WorkforcePoolIamBindingArgs{
//				Location:        pulumi.Any(example.Location),
//				WorkforcePoolId: pulumi.Any(example.WorkforcePoolId),
//				Role:            pulumi.String("roles/iam.workforcePoolAdmin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## iam.WorkforcePoolIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iam.NewWorkforcePoolIamMember(ctx, "member", &iam.WorkforcePoolIamMemberArgs{
//				Location:        pulumi.Any(example.Location),
//				WorkforcePoolId: pulumi.Any(example.WorkforcePoolId),
//				Role:            pulumi.String("roles/iam.workforcePoolAdmin"),
//				Member:          pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
// ---
//
// # IAM policy for Cloud IAM WorkforcePool
// Three different resources help you manage your IAM policy for Cloud IAM WorkforcePool. Each of these resources serves a different use case:
//
// * `iam.WorkforcePoolIamPolicy`: Authoritative. Sets the IAM policy for the workforcepool and replaces any existing policy already attached.
// * `iam.WorkforcePoolIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the workforcepool are preserved.
// * `iam.WorkforcePoolIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the workforcepool are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `iam.WorkforcePoolIamPolicy`: Retrieves the IAM policy for the workforcepool
//
// > **Note:** `iam.WorkforcePoolIamPolicy` **cannot** be used in conjunction with `iam.WorkforcePoolIamBinding` and `iam.WorkforcePoolIamMember` or they will fight over what your policy should be.
//
// > **Note:** `iam.WorkforcePoolIamBinding` resources **can be** used in conjunction with `iam.WorkforcePoolIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## iam.WorkforcePoolIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iam"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/iam.workforcePoolAdmin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewWorkforcePoolIamPolicy(ctx, "policy", &iam.WorkforcePoolIamPolicyArgs{
//				Location:        pulumi.Any(example.Location),
//				WorkforcePoolId: pulumi.Any(example.WorkforcePoolId),
//				PolicyData:      pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## iam.WorkforcePoolIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iam.NewWorkforcePoolIamBinding(ctx, "binding", &iam.WorkforcePoolIamBindingArgs{
//				Location:        pulumi.Any(example.Location),
//				WorkforcePoolId: pulumi.Any(example.WorkforcePoolId),
//				Role:            pulumi.String("roles/iam.workforcePoolAdmin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## iam.WorkforcePoolIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iam.NewWorkforcePoolIamMember(ctx, "member", &iam.WorkforcePoolIamMemberArgs{
//				Location:        pulumi.Any(example.Location),
//				WorkforcePoolId: pulumi.Any(example.WorkforcePoolId),
//				Role:            pulumi.String("roles/iam.workforcePoolAdmin"),
//				Member:          pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * locations/{{location}}/workforcePools/{{workforce_pool_id}}
//
// * {{location}}/{{workforce_pool_id}}
//
// * {{workforce_pool_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Cloud IAM workforcepool IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:iam/workforcePoolIamMember:WorkforcePoolIamMember editor "locations/{{location}}/workforcePools/{{workforce_pool_id}} roles/iam.workforcePoolViewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:iam/workforcePoolIamMember:WorkforcePoolIamMember editor "locations/{{location}}/workforcePools/{{workforce_pool_id}} roles/iam.workforcePoolViewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:iam/workforcePoolIamMember:WorkforcePoolIamMember editor locations/{{location}}/workforcePools/{{workforce_pool_id}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type WorkforcePoolIamMember struct {
	pulumi.CustomResourceState

	Condition WorkforcePoolIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location for the resource. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringOutput `pulumi:"member"`
	// The role that should be applied. Only one
	// `iam.WorkforcePoolIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	WorkforcePoolId pulumi.StringOutput `pulumi:"workforcePoolId"`
}

// NewWorkforcePoolIamMember registers a new resource with the given unique name, arguments, and options.
func NewWorkforcePoolIamMember(ctx *pulumi.Context,
	name string, args *WorkforcePoolIamMemberArgs, opts ...pulumi.ResourceOption) (*WorkforcePoolIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.WorkforcePoolId == nil {
		return nil, errors.New("invalid value for required argument 'WorkforcePoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkforcePoolIamMember
	err := ctx.RegisterResource("gcp:iam/workforcePoolIamMember:WorkforcePoolIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkforcePoolIamMember gets an existing WorkforcePoolIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkforcePoolIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkforcePoolIamMemberState, opts ...pulumi.ResourceOption) (*WorkforcePoolIamMember, error) {
	var resource WorkforcePoolIamMember
	err := ctx.ReadResource("gcp:iam/workforcePoolIamMember:WorkforcePoolIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkforcePoolIamMember resources.
type workforcePoolIamMemberState struct {
	Condition *WorkforcePoolIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location for the resource. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member *string `pulumi:"member"`
	// The role that should be applied. Only one
	// `iam.WorkforcePoolIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	WorkforcePoolId *string `pulumi:"workforcePoolId"`
}

type WorkforcePoolIamMemberState struct {
	Condition WorkforcePoolIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location for the resource. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `iam.WorkforcePoolIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	WorkforcePoolId pulumi.StringPtrInput
}

func (WorkforcePoolIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*workforcePoolIamMemberState)(nil)).Elem()
}

type workforcePoolIamMemberArgs struct {
	Condition *WorkforcePoolIamMemberCondition `pulumi:"condition"`
	// The location for the resource. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member string `pulumi:"member"`
	// The role that should be applied. Only one
	// `iam.WorkforcePoolIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	WorkforcePoolId string `pulumi:"workforcePoolId"`
}

// The set of arguments for constructing a WorkforcePoolIamMember resource.
type WorkforcePoolIamMemberArgs struct {
	Condition WorkforcePoolIamMemberConditionPtrInput
	// The location for the resource. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringInput
	// The role that should be applied. Only one
	// `iam.WorkforcePoolIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	WorkforcePoolId pulumi.StringInput
}

func (WorkforcePoolIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workforcePoolIamMemberArgs)(nil)).Elem()
}

type WorkforcePoolIamMemberInput interface {
	pulumi.Input

	ToWorkforcePoolIamMemberOutput() WorkforcePoolIamMemberOutput
	ToWorkforcePoolIamMemberOutputWithContext(ctx context.Context) WorkforcePoolIamMemberOutput
}

func (*WorkforcePoolIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkforcePoolIamMember)(nil)).Elem()
}

func (i *WorkforcePoolIamMember) ToWorkforcePoolIamMemberOutput() WorkforcePoolIamMemberOutput {
	return i.ToWorkforcePoolIamMemberOutputWithContext(context.Background())
}

func (i *WorkforcePoolIamMember) ToWorkforcePoolIamMemberOutputWithContext(ctx context.Context) WorkforcePoolIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkforcePoolIamMemberOutput)
}

// WorkforcePoolIamMemberArrayInput is an input type that accepts WorkforcePoolIamMemberArray and WorkforcePoolIamMemberArrayOutput values.
// You can construct a concrete instance of `WorkforcePoolIamMemberArrayInput` via:
//
//	WorkforcePoolIamMemberArray{ WorkforcePoolIamMemberArgs{...} }
type WorkforcePoolIamMemberArrayInput interface {
	pulumi.Input

	ToWorkforcePoolIamMemberArrayOutput() WorkforcePoolIamMemberArrayOutput
	ToWorkforcePoolIamMemberArrayOutputWithContext(context.Context) WorkforcePoolIamMemberArrayOutput
}

type WorkforcePoolIamMemberArray []WorkforcePoolIamMemberInput

func (WorkforcePoolIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkforcePoolIamMember)(nil)).Elem()
}

func (i WorkforcePoolIamMemberArray) ToWorkforcePoolIamMemberArrayOutput() WorkforcePoolIamMemberArrayOutput {
	return i.ToWorkforcePoolIamMemberArrayOutputWithContext(context.Background())
}

func (i WorkforcePoolIamMemberArray) ToWorkforcePoolIamMemberArrayOutputWithContext(ctx context.Context) WorkforcePoolIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkforcePoolIamMemberArrayOutput)
}

// WorkforcePoolIamMemberMapInput is an input type that accepts WorkforcePoolIamMemberMap and WorkforcePoolIamMemberMapOutput values.
// You can construct a concrete instance of `WorkforcePoolIamMemberMapInput` via:
//
//	WorkforcePoolIamMemberMap{ "key": WorkforcePoolIamMemberArgs{...} }
type WorkforcePoolIamMemberMapInput interface {
	pulumi.Input

	ToWorkforcePoolIamMemberMapOutput() WorkforcePoolIamMemberMapOutput
	ToWorkforcePoolIamMemberMapOutputWithContext(context.Context) WorkforcePoolIamMemberMapOutput
}

type WorkforcePoolIamMemberMap map[string]WorkforcePoolIamMemberInput

func (WorkforcePoolIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkforcePoolIamMember)(nil)).Elem()
}

func (i WorkforcePoolIamMemberMap) ToWorkforcePoolIamMemberMapOutput() WorkforcePoolIamMemberMapOutput {
	return i.ToWorkforcePoolIamMemberMapOutputWithContext(context.Background())
}

func (i WorkforcePoolIamMemberMap) ToWorkforcePoolIamMemberMapOutputWithContext(ctx context.Context) WorkforcePoolIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkforcePoolIamMemberMapOutput)
}

type WorkforcePoolIamMemberOutput struct{ *pulumi.OutputState }

func (WorkforcePoolIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkforcePoolIamMember)(nil)).Elem()
}

func (o WorkforcePoolIamMemberOutput) ToWorkforcePoolIamMemberOutput() WorkforcePoolIamMemberOutput {
	return o
}

func (o WorkforcePoolIamMemberOutput) ToWorkforcePoolIamMemberOutputWithContext(ctx context.Context) WorkforcePoolIamMemberOutput {
	return o
}

func (o WorkforcePoolIamMemberOutput) Condition() WorkforcePoolIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *WorkforcePoolIamMember) WorkforcePoolIamMemberConditionPtrOutput { return v.Condition }).(WorkforcePoolIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o WorkforcePoolIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkforcePoolIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location for the resource. Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o WorkforcePoolIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkforcePoolIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o WorkforcePoolIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkforcePoolIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `iam.WorkforcePoolIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o WorkforcePoolIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkforcePoolIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o WorkforcePoolIamMemberOutput) WorkforcePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkforcePoolIamMember) pulumi.StringOutput { return v.WorkforcePoolId }).(pulumi.StringOutput)
}

type WorkforcePoolIamMemberArrayOutput struct{ *pulumi.OutputState }

func (WorkforcePoolIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkforcePoolIamMember)(nil)).Elem()
}

func (o WorkforcePoolIamMemberArrayOutput) ToWorkforcePoolIamMemberArrayOutput() WorkforcePoolIamMemberArrayOutput {
	return o
}

func (o WorkforcePoolIamMemberArrayOutput) ToWorkforcePoolIamMemberArrayOutputWithContext(ctx context.Context) WorkforcePoolIamMemberArrayOutput {
	return o
}

func (o WorkforcePoolIamMemberArrayOutput) Index(i pulumi.IntInput) WorkforcePoolIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkforcePoolIamMember {
		return vs[0].([]*WorkforcePoolIamMember)[vs[1].(int)]
	}).(WorkforcePoolIamMemberOutput)
}

type WorkforcePoolIamMemberMapOutput struct{ *pulumi.OutputState }

func (WorkforcePoolIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkforcePoolIamMember)(nil)).Elem()
}

func (o WorkforcePoolIamMemberMapOutput) ToWorkforcePoolIamMemberMapOutput() WorkforcePoolIamMemberMapOutput {
	return o
}

func (o WorkforcePoolIamMemberMapOutput) ToWorkforcePoolIamMemberMapOutputWithContext(ctx context.Context) WorkforcePoolIamMemberMapOutput {
	return o
}

func (o WorkforcePoolIamMemberMapOutput) MapIndex(k pulumi.StringInput) WorkforcePoolIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkforcePoolIamMember {
		return vs[0].(map[string]*WorkforcePoolIamMember)[vs[1].(string)]
	}).(WorkforcePoolIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkforcePoolIamMemberInput)(nil)).Elem(), &WorkforcePoolIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkforcePoolIamMemberArrayInput)(nil)).Elem(), WorkforcePoolIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkforcePoolIamMemberMapInput)(nil)).Elem(), WorkforcePoolIamMemberMap{})
	pulumi.RegisterOutputType(WorkforcePoolIamMemberOutput{})
	pulumi.RegisterOutputType(WorkforcePoolIamMemberArrayOutput{})
	pulumi.RegisterOutputType(WorkforcePoolIamMemberMapOutput{})
}
