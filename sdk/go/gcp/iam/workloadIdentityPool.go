// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a collection of external workload identities. You can define IAM policies to
// grant these identities access to Google Cloud resources.
//
// To get more information about WorkloadIdentityPool, see:
//
// * [API documentation](https://cloud.google.com/iam/docs/reference/rest/v1/projects.locations.workloadIdentityPools)
// * How-to Guides
//   - [Configure managed workload identity authentication for Compute Engine](https://cloud.google.com/iam/docs/create-managed-workload-identities)
//   - [Configure managed workload identity authentication for GKE](https://cloud.google.com/iam/docs/create-managed-workload-identities-gke)
//   - [Managing workload identity pools](https://cloud.google.com/iam/docs/manage-workload-identity-pools-providers#pools)
//
// ## Example Usage
//
// ### Iam Workload Identity Pool Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iam.NewWorkloadIdentityPool(ctx, "example", &iam.WorkloadIdentityPoolArgs{
//				WorkloadIdentityPoolId: pulumi.String("example-pool"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Iam Workload Identity Pool Full Federation Only Mode
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iam.NewWorkloadIdentityPool(ctx, "example", &iam.WorkloadIdentityPoolArgs{
//				WorkloadIdentityPoolId: pulumi.String("example-pool"),
//				DisplayName:            pulumi.String("Name of the pool"),
//				Description:            pulumi.String("Identity pool operates in FEDERATION_ONLY mode"),
//				Disabled:               pulumi.Bool(true),
//				Mode:                   pulumi.String("FEDERATION_ONLY"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Iam Workload Identity Pool Full Trust Domain Mode
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/iam"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/trust_anchor_1.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile1, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/trust_anchor_2.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile2, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/trust_anchor_3.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile3, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/trust_anchor_4.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewWorkloadIdentityPool(ctx, "example", &iam.WorkloadIdentityPoolArgs{
//				WorkloadIdentityPoolId: pulumi.String("example-pool"),
//				DisplayName:            pulumi.String("Name of the pool"),
//				Description:            pulumi.String("Identity pool operates in TRUST_DOMAIN mode"),
//				Disabled:               pulumi.Bool(true),
//				Mode:                   pulumi.String("TRUST_DOMAIN"),
//				InlineCertificateIssuanceConfig: &iam.WorkloadIdentityPoolInlineCertificateIssuanceConfigArgs{
//					CaPools: pulumi.StringMap{
//						"us-central1": pulumi.String("projects/project-bar/locations/us-central1/caPools/ca-pool-bar"),
//						"asia-east2":  pulumi.String("projects/project-foo/locations/asia-east2/caPools/ca-pool-foo"),
//					},
//					Lifetime:                 pulumi.String("86400s"),
//					RotationWindowPercentage: pulumi.Int(50),
//					KeyAlgorithm:             pulumi.String("ECDSA_P256"),
//				},
//				InlineTrustConfig: &iam.WorkloadIdentityPoolInlineTrustConfigArgs{
//					AdditionalTrustBundles: iam.WorkloadIdentityPoolInlineTrustConfigAdditionalTrustBundleArray{
//						&iam.WorkloadIdentityPoolInlineTrustConfigAdditionalTrustBundleArgs{
//							TrustDomain: pulumi.String("example.com"),
//							TrustAnchors: iam.WorkloadIdentityPoolInlineTrustConfigAdditionalTrustBundleTrustAnchorArray{
//								&iam.WorkloadIdentityPoolInlineTrustConfigAdditionalTrustBundleTrustAnchorArgs{
//									PemCertificate: pulumi.String(invokeFile.Result),
//								},
//								&iam.WorkloadIdentityPoolInlineTrustConfigAdditionalTrustBundleTrustAnchorArgs{
//									PemCertificate: pulumi.String(invokeFile1.Result),
//								},
//							},
//						},
//						&iam.WorkloadIdentityPoolInlineTrustConfigAdditionalTrustBundleArgs{
//							TrustDomain: pulumi.String("example.net"),
//							TrustAnchors: iam.WorkloadIdentityPoolInlineTrustConfigAdditionalTrustBundleTrustAnchorArray{
//								&iam.WorkloadIdentityPoolInlineTrustConfigAdditionalTrustBundleTrustAnchorArgs{
//									PemCertificate: pulumi.String(invokeFile2.Result),
//								},
//								&iam.WorkloadIdentityPoolInlineTrustConfigAdditionalTrustBundleTrustAnchorArgs{
//									PemCertificate: pulumi.String(invokeFile3.Result),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// WorkloadIdentityPool can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/global/workloadIdentityPools/{{workload_identity_pool_id}}`
//
// * `{{project}}/{{workload_identity_pool_id}}`
//
// * `{{workload_identity_pool_id}}`
//
// When using the `pulumi import` command, WorkloadIdentityPool can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:iam/workloadIdentityPool:WorkloadIdentityPool default projects/{{project}}/locations/global/workloadIdentityPools/{{workload_identity_pool_id}}
// ```
//
// ```sh
// $ pulumi import gcp:iam/workloadIdentityPool:WorkloadIdentityPool default {{project}}/{{workload_identity_pool_id}}
// ```
//
// ```sh
// $ pulumi import gcp:iam/workloadIdentityPool:WorkloadIdentityPool default {{workload_identity_pool_id}}
// ```
type WorkloadIdentityPool struct {
	pulumi.CustomResourceState

	// A description of the pool. Cannot exceed 256 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use
	// existing tokens to access resources. If the pool is re-enabled, existing tokens grant
	// access again.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// A display name for the pool. Cannot exceed 32 characters.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Represents configuration for generating mutual TLS (mTLS) certificates for the identities
	// within this pool. Defines the Certificate Authority (CA) pool resources and configurations
	// required for issuance and rotation of mTLS workload certificates.
	// Structure is documented below.
	InlineCertificateIssuanceConfig WorkloadIdentityPoolInlineCertificateIssuanceConfigPtrOutput `pulumi:"inlineCertificateIssuanceConfig"`
	// Represents config to add additional trusted trust domains. Defines configuration for extending
	// trust to additional trust domains. By establishing trust with another domain, the current
	// domain will recognize and accept certificates issued by entities within the trusted domains.
	// Note that a trust domain automatically trusts itself, eliminating the need for explicit
	// configuration.
	// Structure is documented below.
	InlineTrustConfig WorkloadIdentityPoolInlineTrustConfigPtrOutput `pulumi:"inlineTrustConfig"`
	// The mode for the pool is operating in. Pools with an unspecified mode will operate as if they
	// are in `FEDERATION_ONLY` mode.
	//
	// > **Note** This field cannot be changed after the Workload Identity Pool is created. While
	// `pulumi preview` may show an update if you change this field's value, `pulumi up`
	// **will fail with an API error** (such as `Error 400: Attempted to update an immutable field.`).
	// To specify a different `mode`, please create a new Workload Identity Pool resource.
	// * `FEDERATION_ONLY`: Pools can only be used for federating external workload identities into
	//   Google Cloud. Unless otherwise noted, no structure or format constraints are applied to
	//   workload identities in a `FEDERATION_ONLY` mode pool, and you may not create any resources
	//   within the pool besides providers.
	// * `TRUST_DOMAIN`: Pools can be used to assign identities to Google Cloud workloads. All
	//   identities within a `TRUST_DOMAIN` mode pool must consist of a single namespace and individual
	//   workload identifier. The subject identifier for all identities must conform to the following
	//   format: `ns/<namespace>/sa/<workload_identifier>`.
	//   `iam.WorkloadIdentityPoolProvider`s cannot be created within `TRUST_DOMAIN`
	//   mode pools.
	//   Possible values are: `FEDERATION_ONLY`, `TRUST_DOMAIN`.
	Mode pulumi.StringPtrOutput `pulumi:"mode"`
	// The resource name of the pool as
	// `projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The state of the pool.
	// * `STATE_UNSPECIFIED`: State unspecified.
	// * `ACTIVE`: The pool is active, and may be used in Google Cloud policies.
	// * `DELETED`: The pool is soft-deleted. Soft-deleted pools are permanently deleted after
	//   approximately 30 days. You can restore a soft-deleted pool using
	//   `UndeleteWorkloadIdentityPool`. You cannot reuse the ID of a soft-deleted pool until it is
	//   permanently deleted. While a pool is deleted, you cannot use it to exchange tokens, or
	//   use existing tokens to access resources. If the pool is undeleted, existing tokens grant
	//   access again.
	State pulumi.StringOutput `pulumi:"state"`
	// The ID to use for the pool, which becomes the final component of the resource name. This
	// value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
	// `gcp-` is reserved for use by Google, and may not be specified.
	WorkloadIdentityPoolId pulumi.StringOutput `pulumi:"workloadIdentityPoolId"`
}

// NewWorkloadIdentityPool registers a new resource with the given unique name, arguments, and options.
func NewWorkloadIdentityPool(ctx *pulumi.Context,
	name string, args *WorkloadIdentityPoolArgs, opts ...pulumi.ResourceOption) (*WorkloadIdentityPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WorkloadIdentityPoolId == nil {
		return nil, errors.New("invalid value for required argument 'WorkloadIdentityPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkloadIdentityPool
	err := ctx.RegisterResource("gcp:iam/workloadIdentityPool:WorkloadIdentityPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkloadIdentityPool gets an existing WorkloadIdentityPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkloadIdentityPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkloadIdentityPoolState, opts ...pulumi.ResourceOption) (*WorkloadIdentityPool, error) {
	var resource WorkloadIdentityPool
	err := ctx.ReadResource("gcp:iam/workloadIdentityPool:WorkloadIdentityPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkloadIdentityPool resources.
type workloadIdentityPoolState struct {
	// A description of the pool. Cannot exceed 256 characters.
	Description *string `pulumi:"description"`
	// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use
	// existing tokens to access resources. If the pool is re-enabled, existing tokens grant
	// access again.
	Disabled *bool `pulumi:"disabled"`
	// A display name for the pool. Cannot exceed 32 characters.
	DisplayName *string `pulumi:"displayName"`
	// Represents configuration for generating mutual TLS (mTLS) certificates for the identities
	// within this pool. Defines the Certificate Authority (CA) pool resources and configurations
	// required for issuance and rotation of mTLS workload certificates.
	// Structure is documented below.
	InlineCertificateIssuanceConfig *WorkloadIdentityPoolInlineCertificateIssuanceConfig `pulumi:"inlineCertificateIssuanceConfig"`
	// Represents config to add additional trusted trust domains. Defines configuration for extending
	// trust to additional trust domains. By establishing trust with another domain, the current
	// domain will recognize and accept certificates issued by entities within the trusted domains.
	// Note that a trust domain automatically trusts itself, eliminating the need for explicit
	// configuration.
	// Structure is documented below.
	InlineTrustConfig *WorkloadIdentityPoolInlineTrustConfig `pulumi:"inlineTrustConfig"`
	// The mode for the pool is operating in. Pools with an unspecified mode will operate as if they
	// are in `FEDERATION_ONLY` mode.
	//
	// > **Note** This field cannot be changed after the Workload Identity Pool is created. While
	// `pulumi preview` may show an update if you change this field's value, `pulumi up`
	// **will fail with an API error** (such as `Error 400: Attempted to update an immutable field.`).
	// To specify a different `mode`, please create a new Workload Identity Pool resource.
	// * `FEDERATION_ONLY`: Pools can only be used for federating external workload identities into
	//   Google Cloud. Unless otherwise noted, no structure or format constraints are applied to
	//   workload identities in a `FEDERATION_ONLY` mode pool, and you may not create any resources
	//   within the pool besides providers.
	// * `TRUST_DOMAIN`: Pools can be used to assign identities to Google Cloud workloads. All
	//   identities within a `TRUST_DOMAIN` mode pool must consist of a single namespace and individual
	//   workload identifier. The subject identifier for all identities must conform to the following
	//   format: `ns/<namespace>/sa/<workload_identifier>`.
	//   `iam.WorkloadIdentityPoolProvider`s cannot be created within `TRUST_DOMAIN`
	//   mode pools.
	//   Possible values are: `FEDERATION_ONLY`, `TRUST_DOMAIN`.
	Mode *string `pulumi:"mode"`
	// The resource name of the pool as
	// `projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The state of the pool.
	// * `STATE_UNSPECIFIED`: State unspecified.
	// * `ACTIVE`: The pool is active, and may be used in Google Cloud policies.
	// * `DELETED`: The pool is soft-deleted. Soft-deleted pools are permanently deleted after
	//   approximately 30 days. You can restore a soft-deleted pool using
	//   `UndeleteWorkloadIdentityPool`. You cannot reuse the ID of a soft-deleted pool until it is
	//   permanently deleted. While a pool is deleted, you cannot use it to exchange tokens, or
	//   use existing tokens to access resources. If the pool is undeleted, existing tokens grant
	//   access again.
	State *string `pulumi:"state"`
	// The ID to use for the pool, which becomes the final component of the resource name. This
	// value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
	// `gcp-` is reserved for use by Google, and may not be specified.
	WorkloadIdentityPoolId *string `pulumi:"workloadIdentityPoolId"`
}

type WorkloadIdentityPoolState struct {
	// A description of the pool. Cannot exceed 256 characters.
	Description pulumi.StringPtrInput
	// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use
	// existing tokens to access resources. If the pool is re-enabled, existing tokens grant
	// access again.
	Disabled pulumi.BoolPtrInput
	// A display name for the pool. Cannot exceed 32 characters.
	DisplayName pulumi.StringPtrInput
	// Represents configuration for generating mutual TLS (mTLS) certificates for the identities
	// within this pool. Defines the Certificate Authority (CA) pool resources and configurations
	// required for issuance and rotation of mTLS workload certificates.
	// Structure is documented below.
	InlineCertificateIssuanceConfig WorkloadIdentityPoolInlineCertificateIssuanceConfigPtrInput
	// Represents config to add additional trusted trust domains. Defines configuration for extending
	// trust to additional trust domains. By establishing trust with another domain, the current
	// domain will recognize and accept certificates issued by entities within the trusted domains.
	// Note that a trust domain automatically trusts itself, eliminating the need for explicit
	// configuration.
	// Structure is documented below.
	InlineTrustConfig WorkloadIdentityPoolInlineTrustConfigPtrInput
	// The mode for the pool is operating in. Pools with an unspecified mode will operate as if they
	// are in `FEDERATION_ONLY` mode.
	//
	// > **Note** This field cannot be changed after the Workload Identity Pool is created. While
	// `pulumi preview` may show an update if you change this field's value, `pulumi up`
	// **will fail with an API error** (such as `Error 400: Attempted to update an immutable field.`).
	// To specify a different `mode`, please create a new Workload Identity Pool resource.
	// * `FEDERATION_ONLY`: Pools can only be used for federating external workload identities into
	//   Google Cloud. Unless otherwise noted, no structure or format constraints are applied to
	//   workload identities in a `FEDERATION_ONLY` mode pool, and you may not create any resources
	//   within the pool besides providers.
	// * `TRUST_DOMAIN`: Pools can be used to assign identities to Google Cloud workloads. All
	//   identities within a `TRUST_DOMAIN` mode pool must consist of a single namespace and individual
	//   workload identifier. The subject identifier for all identities must conform to the following
	//   format: `ns/<namespace>/sa/<workload_identifier>`.
	//   `iam.WorkloadIdentityPoolProvider`s cannot be created within `TRUST_DOMAIN`
	//   mode pools.
	//   Possible values are: `FEDERATION_ONLY`, `TRUST_DOMAIN`.
	Mode pulumi.StringPtrInput
	// The resource name of the pool as
	// `projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The state of the pool.
	// * `STATE_UNSPECIFIED`: State unspecified.
	// * `ACTIVE`: The pool is active, and may be used in Google Cloud policies.
	// * `DELETED`: The pool is soft-deleted. Soft-deleted pools are permanently deleted after
	//   approximately 30 days. You can restore a soft-deleted pool using
	//   `UndeleteWorkloadIdentityPool`. You cannot reuse the ID of a soft-deleted pool until it is
	//   permanently deleted. While a pool is deleted, you cannot use it to exchange tokens, or
	//   use existing tokens to access resources. If the pool is undeleted, existing tokens grant
	//   access again.
	State pulumi.StringPtrInput
	// The ID to use for the pool, which becomes the final component of the resource name. This
	// value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
	// `gcp-` is reserved for use by Google, and may not be specified.
	WorkloadIdentityPoolId pulumi.StringPtrInput
}

func (WorkloadIdentityPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*workloadIdentityPoolState)(nil)).Elem()
}

type workloadIdentityPoolArgs struct {
	// A description of the pool. Cannot exceed 256 characters.
	Description *string `pulumi:"description"`
	// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use
	// existing tokens to access resources. If the pool is re-enabled, existing tokens grant
	// access again.
	Disabled *bool `pulumi:"disabled"`
	// A display name for the pool. Cannot exceed 32 characters.
	DisplayName *string `pulumi:"displayName"`
	// Represents configuration for generating mutual TLS (mTLS) certificates for the identities
	// within this pool. Defines the Certificate Authority (CA) pool resources and configurations
	// required for issuance and rotation of mTLS workload certificates.
	// Structure is documented below.
	InlineCertificateIssuanceConfig *WorkloadIdentityPoolInlineCertificateIssuanceConfig `pulumi:"inlineCertificateIssuanceConfig"`
	// Represents config to add additional trusted trust domains. Defines configuration for extending
	// trust to additional trust domains. By establishing trust with another domain, the current
	// domain will recognize and accept certificates issued by entities within the trusted domains.
	// Note that a trust domain automatically trusts itself, eliminating the need for explicit
	// configuration.
	// Structure is documented below.
	InlineTrustConfig *WorkloadIdentityPoolInlineTrustConfig `pulumi:"inlineTrustConfig"`
	// The mode for the pool is operating in. Pools with an unspecified mode will operate as if they
	// are in `FEDERATION_ONLY` mode.
	//
	// > **Note** This field cannot be changed after the Workload Identity Pool is created. While
	// `pulumi preview` may show an update if you change this field's value, `pulumi up`
	// **will fail with an API error** (such as `Error 400: Attempted to update an immutable field.`).
	// To specify a different `mode`, please create a new Workload Identity Pool resource.
	// * `FEDERATION_ONLY`: Pools can only be used for federating external workload identities into
	//   Google Cloud. Unless otherwise noted, no structure or format constraints are applied to
	//   workload identities in a `FEDERATION_ONLY` mode pool, and you may not create any resources
	//   within the pool besides providers.
	// * `TRUST_DOMAIN`: Pools can be used to assign identities to Google Cloud workloads. All
	//   identities within a `TRUST_DOMAIN` mode pool must consist of a single namespace and individual
	//   workload identifier. The subject identifier for all identities must conform to the following
	//   format: `ns/<namespace>/sa/<workload_identifier>`.
	//   `iam.WorkloadIdentityPoolProvider`s cannot be created within `TRUST_DOMAIN`
	//   mode pools.
	//   Possible values are: `FEDERATION_ONLY`, `TRUST_DOMAIN`.
	Mode *string `pulumi:"mode"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The ID to use for the pool, which becomes the final component of the resource name. This
	// value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
	// `gcp-` is reserved for use by Google, and may not be specified.
	WorkloadIdentityPoolId string `pulumi:"workloadIdentityPoolId"`
}

// The set of arguments for constructing a WorkloadIdentityPool resource.
type WorkloadIdentityPoolArgs struct {
	// A description of the pool. Cannot exceed 256 characters.
	Description pulumi.StringPtrInput
	// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use
	// existing tokens to access resources. If the pool is re-enabled, existing tokens grant
	// access again.
	Disabled pulumi.BoolPtrInput
	// A display name for the pool. Cannot exceed 32 characters.
	DisplayName pulumi.StringPtrInput
	// Represents configuration for generating mutual TLS (mTLS) certificates for the identities
	// within this pool. Defines the Certificate Authority (CA) pool resources and configurations
	// required for issuance and rotation of mTLS workload certificates.
	// Structure is documented below.
	InlineCertificateIssuanceConfig WorkloadIdentityPoolInlineCertificateIssuanceConfigPtrInput
	// Represents config to add additional trusted trust domains. Defines configuration for extending
	// trust to additional trust domains. By establishing trust with another domain, the current
	// domain will recognize and accept certificates issued by entities within the trusted domains.
	// Note that a trust domain automatically trusts itself, eliminating the need for explicit
	// configuration.
	// Structure is documented below.
	InlineTrustConfig WorkloadIdentityPoolInlineTrustConfigPtrInput
	// The mode for the pool is operating in. Pools with an unspecified mode will operate as if they
	// are in `FEDERATION_ONLY` mode.
	//
	// > **Note** This field cannot be changed after the Workload Identity Pool is created. While
	// `pulumi preview` may show an update if you change this field's value, `pulumi up`
	// **will fail with an API error** (such as `Error 400: Attempted to update an immutable field.`).
	// To specify a different `mode`, please create a new Workload Identity Pool resource.
	// * `FEDERATION_ONLY`: Pools can only be used for federating external workload identities into
	//   Google Cloud. Unless otherwise noted, no structure or format constraints are applied to
	//   workload identities in a `FEDERATION_ONLY` mode pool, and you may not create any resources
	//   within the pool besides providers.
	// * `TRUST_DOMAIN`: Pools can be used to assign identities to Google Cloud workloads. All
	//   identities within a `TRUST_DOMAIN` mode pool must consist of a single namespace and individual
	//   workload identifier. The subject identifier for all identities must conform to the following
	//   format: `ns/<namespace>/sa/<workload_identifier>`.
	//   `iam.WorkloadIdentityPoolProvider`s cannot be created within `TRUST_DOMAIN`
	//   mode pools.
	//   Possible values are: `FEDERATION_ONLY`, `TRUST_DOMAIN`.
	Mode pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The ID to use for the pool, which becomes the final component of the resource name. This
	// value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
	// `gcp-` is reserved for use by Google, and may not be specified.
	WorkloadIdentityPoolId pulumi.StringInput
}

func (WorkloadIdentityPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workloadIdentityPoolArgs)(nil)).Elem()
}

type WorkloadIdentityPoolInput interface {
	pulumi.Input

	ToWorkloadIdentityPoolOutput() WorkloadIdentityPoolOutput
	ToWorkloadIdentityPoolOutputWithContext(ctx context.Context) WorkloadIdentityPoolOutput
}

func (*WorkloadIdentityPool) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadIdentityPool)(nil)).Elem()
}

func (i *WorkloadIdentityPool) ToWorkloadIdentityPoolOutput() WorkloadIdentityPoolOutput {
	return i.ToWorkloadIdentityPoolOutputWithContext(context.Background())
}

func (i *WorkloadIdentityPool) ToWorkloadIdentityPoolOutputWithContext(ctx context.Context) WorkloadIdentityPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityPoolOutput)
}

// WorkloadIdentityPoolArrayInput is an input type that accepts WorkloadIdentityPoolArray and WorkloadIdentityPoolArrayOutput values.
// You can construct a concrete instance of `WorkloadIdentityPoolArrayInput` via:
//
//	WorkloadIdentityPoolArray{ WorkloadIdentityPoolArgs{...} }
type WorkloadIdentityPoolArrayInput interface {
	pulumi.Input

	ToWorkloadIdentityPoolArrayOutput() WorkloadIdentityPoolArrayOutput
	ToWorkloadIdentityPoolArrayOutputWithContext(context.Context) WorkloadIdentityPoolArrayOutput
}

type WorkloadIdentityPoolArray []WorkloadIdentityPoolInput

func (WorkloadIdentityPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkloadIdentityPool)(nil)).Elem()
}

func (i WorkloadIdentityPoolArray) ToWorkloadIdentityPoolArrayOutput() WorkloadIdentityPoolArrayOutput {
	return i.ToWorkloadIdentityPoolArrayOutputWithContext(context.Background())
}

func (i WorkloadIdentityPoolArray) ToWorkloadIdentityPoolArrayOutputWithContext(ctx context.Context) WorkloadIdentityPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityPoolArrayOutput)
}

// WorkloadIdentityPoolMapInput is an input type that accepts WorkloadIdentityPoolMap and WorkloadIdentityPoolMapOutput values.
// You can construct a concrete instance of `WorkloadIdentityPoolMapInput` via:
//
//	WorkloadIdentityPoolMap{ "key": WorkloadIdentityPoolArgs{...} }
type WorkloadIdentityPoolMapInput interface {
	pulumi.Input

	ToWorkloadIdentityPoolMapOutput() WorkloadIdentityPoolMapOutput
	ToWorkloadIdentityPoolMapOutputWithContext(context.Context) WorkloadIdentityPoolMapOutput
}

type WorkloadIdentityPoolMap map[string]WorkloadIdentityPoolInput

func (WorkloadIdentityPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkloadIdentityPool)(nil)).Elem()
}

func (i WorkloadIdentityPoolMap) ToWorkloadIdentityPoolMapOutput() WorkloadIdentityPoolMapOutput {
	return i.ToWorkloadIdentityPoolMapOutputWithContext(context.Background())
}

func (i WorkloadIdentityPoolMap) ToWorkloadIdentityPoolMapOutputWithContext(ctx context.Context) WorkloadIdentityPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityPoolMapOutput)
}

type WorkloadIdentityPoolOutput struct{ *pulumi.OutputState }

func (WorkloadIdentityPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadIdentityPool)(nil)).Elem()
}

func (o WorkloadIdentityPoolOutput) ToWorkloadIdentityPoolOutput() WorkloadIdentityPoolOutput {
	return o
}

func (o WorkloadIdentityPoolOutput) ToWorkloadIdentityPoolOutputWithContext(ctx context.Context) WorkloadIdentityPoolOutput {
	return o
}

// A description of the pool. Cannot exceed 256 characters.
func (o WorkloadIdentityPoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadIdentityPool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use
// existing tokens to access resources. If the pool is re-enabled, existing tokens grant
// access again.
func (o WorkloadIdentityPoolOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkloadIdentityPool) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// A display name for the pool. Cannot exceed 32 characters.
func (o WorkloadIdentityPoolOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadIdentityPool) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Represents configuration for generating mutual TLS (mTLS) certificates for the identities
// within this pool. Defines the Certificate Authority (CA) pool resources and configurations
// required for issuance and rotation of mTLS workload certificates.
// Structure is documented below.
func (o WorkloadIdentityPoolOutput) InlineCertificateIssuanceConfig() WorkloadIdentityPoolInlineCertificateIssuanceConfigPtrOutput {
	return o.ApplyT(func(v *WorkloadIdentityPool) WorkloadIdentityPoolInlineCertificateIssuanceConfigPtrOutput {
		return v.InlineCertificateIssuanceConfig
	}).(WorkloadIdentityPoolInlineCertificateIssuanceConfigPtrOutput)
}

// Represents config to add additional trusted trust domains. Defines configuration for extending
// trust to additional trust domains. By establishing trust with another domain, the current
// domain will recognize and accept certificates issued by entities within the trusted domains.
// Note that a trust domain automatically trusts itself, eliminating the need for explicit
// configuration.
// Structure is documented below.
func (o WorkloadIdentityPoolOutput) InlineTrustConfig() WorkloadIdentityPoolInlineTrustConfigPtrOutput {
	return o.ApplyT(func(v *WorkloadIdentityPool) WorkloadIdentityPoolInlineTrustConfigPtrOutput {
		return v.InlineTrustConfig
	}).(WorkloadIdentityPoolInlineTrustConfigPtrOutput)
}

// The mode for the pool is operating in. Pools with an unspecified mode will operate as if they
// are in `FEDERATION_ONLY` mode.
//
// > **Note** This field cannot be changed after the Workload Identity Pool is created. While
// `pulumi preview` may show an update if you change this field's value, `pulumi up`
// **will fail with an API error** (such as `Error 400: Attempted to update an immutable field.`).
// To specify a different `mode`, please create a new Workload Identity Pool resource.
//   - `FEDERATION_ONLY`: Pools can only be used for federating external workload identities into
//     Google Cloud. Unless otherwise noted, no structure or format constraints are applied to
//     workload identities in a `FEDERATION_ONLY` mode pool, and you may not create any resources
//     within the pool besides providers.
//   - `TRUST_DOMAIN`: Pools can be used to assign identities to Google Cloud workloads. All
//     identities within a `TRUST_DOMAIN` mode pool must consist of a single namespace and individual
//     workload identifier. The subject identifier for all identities must conform to the following
//     format: `ns/<namespace>/sa/<workload_identifier>`.
//     `iam.WorkloadIdentityPoolProvider`s cannot be created within `TRUST_DOMAIN`
//     mode pools.
//     Possible values are: `FEDERATION_ONLY`, `TRUST_DOMAIN`.
func (o WorkloadIdentityPoolOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadIdentityPool) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

// The resource name of the pool as
// `projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}`.
func (o WorkloadIdentityPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkloadIdentityPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o WorkloadIdentityPoolOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkloadIdentityPool) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The state of the pool.
//   - `STATE_UNSPECIFIED`: State unspecified.
//   - `ACTIVE`: The pool is active, and may be used in Google Cloud policies.
//   - `DELETED`: The pool is soft-deleted. Soft-deleted pools are permanently deleted after
//     approximately 30 days. You can restore a soft-deleted pool using
//     `UndeleteWorkloadIdentityPool`. You cannot reuse the ID of a soft-deleted pool until it is
//     permanently deleted. While a pool is deleted, you cannot use it to exchange tokens, or
//     use existing tokens to access resources. If the pool is undeleted, existing tokens grant
//     access again.
func (o WorkloadIdentityPoolOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkloadIdentityPool) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The ID to use for the pool, which becomes the final component of the resource name. This
// value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
// `gcp-` is reserved for use by Google, and may not be specified.
func (o WorkloadIdentityPoolOutput) WorkloadIdentityPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkloadIdentityPool) pulumi.StringOutput { return v.WorkloadIdentityPoolId }).(pulumi.StringOutput)
}

type WorkloadIdentityPoolArrayOutput struct{ *pulumi.OutputState }

func (WorkloadIdentityPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkloadIdentityPool)(nil)).Elem()
}

func (o WorkloadIdentityPoolArrayOutput) ToWorkloadIdentityPoolArrayOutput() WorkloadIdentityPoolArrayOutput {
	return o
}

func (o WorkloadIdentityPoolArrayOutput) ToWorkloadIdentityPoolArrayOutputWithContext(ctx context.Context) WorkloadIdentityPoolArrayOutput {
	return o
}

func (o WorkloadIdentityPoolArrayOutput) Index(i pulumi.IntInput) WorkloadIdentityPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkloadIdentityPool {
		return vs[0].([]*WorkloadIdentityPool)[vs[1].(int)]
	}).(WorkloadIdentityPoolOutput)
}

type WorkloadIdentityPoolMapOutput struct{ *pulumi.OutputState }

func (WorkloadIdentityPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkloadIdentityPool)(nil)).Elem()
}

func (o WorkloadIdentityPoolMapOutput) ToWorkloadIdentityPoolMapOutput() WorkloadIdentityPoolMapOutput {
	return o
}

func (o WorkloadIdentityPoolMapOutput) ToWorkloadIdentityPoolMapOutputWithContext(ctx context.Context) WorkloadIdentityPoolMapOutput {
	return o
}

func (o WorkloadIdentityPoolMapOutput) MapIndex(k pulumi.StringInput) WorkloadIdentityPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkloadIdentityPool {
		return vs[0].(map[string]*WorkloadIdentityPool)[vs[1].(string)]
	}).(WorkloadIdentityPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadIdentityPoolInput)(nil)).Elem(), &WorkloadIdentityPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadIdentityPoolArrayInput)(nil)).Elem(), WorkloadIdentityPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadIdentityPoolMapInput)(nil)).Elem(), WorkloadIdentityPoolMap{})
	pulumi.RegisterOutputType(WorkloadIdentityPoolOutput{})
	pulumi.RegisterOutputType(WorkloadIdentityPoolArrayOutput{})
	pulumi.RegisterOutputType(WorkloadIdentityPoolMapOutput{})
}
