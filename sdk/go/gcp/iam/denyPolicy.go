// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// # DenyPolicy can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:iam/denyPolicy:DenyPolicy default {{parent}}/{{name}}
//
// ```
type DenyPolicy struct {
	pulumi.CustomResourceState

	// The display name of the rule.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The hash of the resource. Used internally during updates.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The name of the policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The attachment point is identified by its URL-encoded full resource name.
	Parent pulumi.StringOutput `pulumi:"parent"`
	// Rules to be applied.
	// Structure is documented below.
	Rules DenyPolicyRuleArrayOutput `pulumi:"rules"`
}

// NewDenyPolicy registers a new resource with the given unique name, arguments, and options.
func NewDenyPolicy(ctx *pulumi.Context,
	name string, args *DenyPolicyArgs, opts ...pulumi.ResourceOption) (*DenyPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	var resource DenyPolicy
	err := ctx.RegisterResource("gcp:iam/denyPolicy:DenyPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDenyPolicy gets an existing DenyPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDenyPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DenyPolicyState, opts ...pulumi.ResourceOption) (*DenyPolicy, error) {
	var resource DenyPolicy
	err := ctx.ReadResource("gcp:iam/denyPolicy:DenyPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DenyPolicy resources.
type denyPolicyState struct {
	// The display name of the rule.
	DisplayName *string `pulumi:"displayName"`
	// The hash of the resource. Used internally during updates.
	Etag *string `pulumi:"etag"`
	// The name of the policy.
	Name *string `pulumi:"name"`
	// The attachment point is identified by its URL-encoded full resource name.
	Parent *string `pulumi:"parent"`
	// Rules to be applied.
	// Structure is documented below.
	Rules []DenyPolicyRule `pulumi:"rules"`
}

type DenyPolicyState struct {
	// The display name of the rule.
	DisplayName pulumi.StringPtrInput
	// The hash of the resource. Used internally during updates.
	Etag pulumi.StringPtrInput
	// The name of the policy.
	Name pulumi.StringPtrInput
	// The attachment point is identified by its URL-encoded full resource name.
	Parent pulumi.StringPtrInput
	// Rules to be applied.
	// Structure is documented below.
	Rules DenyPolicyRuleArrayInput
}

func (DenyPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*denyPolicyState)(nil)).Elem()
}

type denyPolicyArgs struct {
	// The display name of the rule.
	DisplayName *string `pulumi:"displayName"`
	// The name of the policy.
	Name *string `pulumi:"name"`
	// The attachment point is identified by its URL-encoded full resource name.
	Parent string `pulumi:"parent"`
	// Rules to be applied.
	// Structure is documented below.
	Rules []DenyPolicyRule `pulumi:"rules"`
}

// The set of arguments for constructing a DenyPolicy resource.
type DenyPolicyArgs struct {
	// The display name of the rule.
	DisplayName pulumi.StringPtrInput
	// The name of the policy.
	Name pulumi.StringPtrInput
	// The attachment point is identified by its URL-encoded full resource name.
	Parent pulumi.StringInput
	// Rules to be applied.
	// Structure is documented below.
	Rules DenyPolicyRuleArrayInput
}

func (DenyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*denyPolicyArgs)(nil)).Elem()
}

type DenyPolicyInput interface {
	pulumi.Input

	ToDenyPolicyOutput() DenyPolicyOutput
	ToDenyPolicyOutputWithContext(ctx context.Context) DenyPolicyOutput
}

func (*DenyPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**DenyPolicy)(nil)).Elem()
}

func (i *DenyPolicy) ToDenyPolicyOutput() DenyPolicyOutput {
	return i.ToDenyPolicyOutputWithContext(context.Background())
}

func (i *DenyPolicy) ToDenyPolicyOutputWithContext(ctx context.Context) DenyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenyPolicyOutput)
}

// DenyPolicyArrayInput is an input type that accepts DenyPolicyArray and DenyPolicyArrayOutput values.
// You can construct a concrete instance of `DenyPolicyArrayInput` via:
//
//	DenyPolicyArray{ DenyPolicyArgs{...} }
type DenyPolicyArrayInput interface {
	pulumi.Input

	ToDenyPolicyArrayOutput() DenyPolicyArrayOutput
	ToDenyPolicyArrayOutputWithContext(context.Context) DenyPolicyArrayOutput
}

type DenyPolicyArray []DenyPolicyInput

func (DenyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DenyPolicy)(nil)).Elem()
}

func (i DenyPolicyArray) ToDenyPolicyArrayOutput() DenyPolicyArrayOutput {
	return i.ToDenyPolicyArrayOutputWithContext(context.Background())
}

func (i DenyPolicyArray) ToDenyPolicyArrayOutputWithContext(ctx context.Context) DenyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenyPolicyArrayOutput)
}

// DenyPolicyMapInput is an input type that accepts DenyPolicyMap and DenyPolicyMapOutput values.
// You can construct a concrete instance of `DenyPolicyMapInput` via:
//
//	DenyPolicyMap{ "key": DenyPolicyArgs{...} }
type DenyPolicyMapInput interface {
	pulumi.Input

	ToDenyPolicyMapOutput() DenyPolicyMapOutput
	ToDenyPolicyMapOutputWithContext(context.Context) DenyPolicyMapOutput
}

type DenyPolicyMap map[string]DenyPolicyInput

func (DenyPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DenyPolicy)(nil)).Elem()
}

func (i DenyPolicyMap) ToDenyPolicyMapOutput() DenyPolicyMapOutput {
	return i.ToDenyPolicyMapOutputWithContext(context.Background())
}

func (i DenyPolicyMap) ToDenyPolicyMapOutputWithContext(ctx context.Context) DenyPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenyPolicyMapOutput)
}

type DenyPolicyOutput struct{ *pulumi.OutputState }

func (DenyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DenyPolicy)(nil)).Elem()
}

func (o DenyPolicyOutput) ToDenyPolicyOutput() DenyPolicyOutput {
	return o
}

func (o DenyPolicyOutput) ToDenyPolicyOutputWithContext(ctx context.Context) DenyPolicyOutput {
	return o
}

// The display name of the rule.
func (o DenyPolicyOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DenyPolicy) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The hash of the resource. Used internally during updates.
func (o DenyPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DenyPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The name of the policy.
func (o DenyPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DenyPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The attachment point is identified by its URL-encoded full resource name.
func (o DenyPolicyOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *DenyPolicy) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// Rules to be applied.
// Structure is documented below.
func (o DenyPolicyOutput) Rules() DenyPolicyRuleArrayOutput {
	return o.ApplyT(func(v *DenyPolicy) DenyPolicyRuleArrayOutput { return v.Rules }).(DenyPolicyRuleArrayOutput)
}

type DenyPolicyArrayOutput struct{ *pulumi.OutputState }

func (DenyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DenyPolicy)(nil)).Elem()
}

func (o DenyPolicyArrayOutput) ToDenyPolicyArrayOutput() DenyPolicyArrayOutput {
	return o
}

func (o DenyPolicyArrayOutput) ToDenyPolicyArrayOutputWithContext(ctx context.Context) DenyPolicyArrayOutput {
	return o
}

func (o DenyPolicyArrayOutput) Index(i pulumi.IntInput) DenyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DenyPolicy {
		return vs[0].([]*DenyPolicy)[vs[1].(int)]
	}).(DenyPolicyOutput)
}

type DenyPolicyMapOutput struct{ *pulumi.OutputState }

func (DenyPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DenyPolicy)(nil)).Elem()
}

func (o DenyPolicyMapOutput) ToDenyPolicyMapOutput() DenyPolicyMapOutput {
	return o
}

func (o DenyPolicyMapOutput) ToDenyPolicyMapOutputWithContext(ctx context.Context) DenyPolicyMapOutput {
	return o
}

func (o DenyPolicyMapOutput) MapIndex(k pulumi.StringInput) DenyPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DenyPolicy {
		return vs[0].(map[string]*DenyPolicy)[vs[1].(string)]
	}).(DenyPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DenyPolicyInput)(nil)).Elem(), &DenyPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*DenyPolicyArrayInput)(nil)).Elem(), DenyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DenyPolicyMapInput)(nil)).Elem(), DenyPolicyMap{})
	pulumi.RegisterOutputType(DenyPolicyOutput{})
	pulumi.RegisterOutputType(DenyPolicyArrayOutput{})
	pulumi.RegisterOutputType(DenyPolicyMapOutput{})
}
