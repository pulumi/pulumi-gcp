// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a collection of terms within a Glossary that are related to each other.
//
// ## Example Usage
//
// ### Dataplex Glossary Term Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			termTestId, err := dataplex.NewGlossary(ctx, "term_test_id", &dataplex.GlossaryArgs{
//				GlossaryId: pulumi.String("tf-test-glossary_88722"),
//				Location:   pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewGlossaryTerm(ctx, "term_test_id", &dataplex.GlossaryTermArgs{
//				Parent: pulumi.All(termTestId.Project, termTestId.GlossaryId).ApplyT(func(_args []interface{}) (string, error) {
//					project := _args[0].(string)
//					glossaryId := _args[1].(string)
//					return fmt.Sprintf("projects/%v/locations/us-central1/glossaries/%v", project, glossaryId), nil
//				}).(pulumi.StringOutput),
//				GlossaryId: termTestId.GlossaryId,
//				Location:   pulumi.String("us-central1"),
//				TermId:     pulumi.String("tf-test-term-basic_39249"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Dataplex Glossary Term Full
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			termTestIdFull, err := dataplex.NewGlossary(ctx, "term_test_id_full", &dataplex.GlossaryArgs{
//				GlossaryId: pulumi.String("tf-test-glossary_74391"),
//				Location:   pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewGlossaryTerm(ctx, "term_test_id_full", &dataplex.GlossaryTermArgs{
//				Parent: pulumi.All(termTestIdFull.Project, termTestIdFull.GlossaryId).ApplyT(func(_args []interface{}) (string, error) {
//					project := _args[0].(string)
//					glossaryId := _args[1].(string)
//					return fmt.Sprintf("projects/%v/locations/us-central1/glossaries/%v", project, glossaryId), nil
//				}).(pulumi.StringOutput),
//				GlossaryId: termTestIdFull.GlossaryId,
//				Location:   pulumi.String("us-central1"),
//				TermId:     pulumi.String("tf-test-term-full_16511"),
//				Labels: pulumi.StringMap{
//					"tag": pulumi.String("test-tf"),
//				},
//				DisplayName: pulumi.String("terraform term"),
//				Description: pulumi.String("term created by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GlossaryTerm can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}/terms/{{term_id}}`
//
// * `{{project}}/{{location}}/{{glossary_id}}/{{term_id}}`
//
// * `{{location}}/{{glossary_id}}/{{term_id}}`
//
// When using the `pulumi import` command, GlossaryTerm can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:dataplex/glossaryTerm:GlossaryTerm default projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}/terms/{{term_id}}
// ```
//
// ```sh
// $ pulumi import gcp:dataplex/glossaryTerm:GlossaryTerm default {{project}}/{{location}}/{{glossary_id}}/{{term_id}}
// ```
//
// ```sh
// $ pulumi import gcp:dataplex/glossaryTerm:GlossaryTerm default {{location}}/{{glossary_id}}/{{term_id}}
// ```
type GlossaryTerm struct {
	pulumi.CustomResourceState

	// The time at which the GlossaryTerm was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The user-mutable description of the GlossaryTerm.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User friendly display name of the GlossaryTerm. This is user-mutable. This will be same as the termId, if not specified.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The glossary id for creation.
	GlossaryId pulumi.StringPtrOutput `pulumi:"glossaryId"`
	// User-defined labels for the GlossaryTerm.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location where the glossary term should reside.
	//
	// ***
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the GlossaryTerm. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{termId}
	Name pulumi.StringOutput `pulumi:"name"`
	// The immediate parent of the GlossaryTerm in the resource-hierarchy. It can either be a Glossary or a Term. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/terms/{termId}
	Parent pulumi.StringOutput `pulumi:"parent"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The term id for creation.
	TermId pulumi.StringPtrOutput `pulumi:"termId"`
	// System generated unique id for the GlossaryTerm. This ID will be different if the GlossaryTerm is deleted and re-created with the same name.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The time at which the GlossaryTerm was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewGlossaryTerm registers a new resource with the given unique name, arguments, and options.
func NewGlossaryTerm(ctx *pulumi.Context,
	name string, args *GlossaryTermArgs, opts ...pulumi.ResourceOption) (*GlossaryTerm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GlossaryTerm
	err := ctx.RegisterResource("gcp:dataplex/glossaryTerm:GlossaryTerm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlossaryTerm gets an existing GlossaryTerm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlossaryTerm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlossaryTermState, opts ...pulumi.ResourceOption) (*GlossaryTerm, error) {
	var resource GlossaryTerm
	err := ctx.ReadResource("gcp:dataplex/glossaryTerm:GlossaryTerm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlossaryTerm resources.
type glossaryTermState struct {
	// The time at which the GlossaryTerm was created.
	CreateTime *string `pulumi:"createTime"`
	// The user-mutable description of the GlossaryTerm.
	Description *string `pulumi:"description"`
	// User friendly display name of the GlossaryTerm. This is user-mutable. This will be same as the termId, if not specified.
	DisplayName *string `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The glossary id for creation.
	GlossaryId *string `pulumi:"glossaryId"`
	// User-defined labels for the GlossaryTerm.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location where the glossary term should reside.
	//
	// ***
	Location *string `pulumi:"location"`
	// The resource name of the GlossaryTerm. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{termId}
	Name *string `pulumi:"name"`
	// The immediate parent of the GlossaryTerm in the resource-hierarchy. It can either be a Glossary or a Term. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/terms/{termId}
	Parent *string `pulumi:"parent"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The term id for creation.
	TermId *string `pulumi:"termId"`
	// System generated unique id for the GlossaryTerm. This ID will be different if the GlossaryTerm is deleted and re-created with the same name.
	Uid *string `pulumi:"uid"`
	// The time at which the GlossaryTerm was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type GlossaryTermState struct {
	// The time at which the GlossaryTerm was created.
	CreateTime pulumi.StringPtrInput
	// The user-mutable description of the GlossaryTerm.
	Description pulumi.StringPtrInput
	// User friendly display name of the GlossaryTerm. This is user-mutable. This will be same as the termId, if not specified.
	DisplayName pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The glossary id for creation.
	GlossaryId pulumi.StringPtrInput
	// User-defined labels for the GlossaryTerm.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location where the glossary term should reside.
	//
	// ***
	Location pulumi.StringPtrInput
	// The resource name of the GlossaryTerm. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{termId}
	Name pulumi.StringPtrInput
	// The immediate parent of the GlossaryTerm in the resource-hierarchy. It can either be a Glossary or a Term. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/terms/{termId}
	Parent pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The term id for creation.
	TermId pulumi.StringPtrInput
	// System generated unique id for the GlossaryTerm. This ID will be different if the GlossaryTerm is deleted and re-created with the same name.
	Uid pulumi.StringPtrInput
	// The time at which the GlossaryTerm was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (GlossaryTermState) ElementType() reflect.Type {
	return reflect.TypeOf((*glossaryTermState)(nil)).Elem()
}

type glossaryTermArgs struct {
	// The user-mutable description of the GlossaryTerm.
	Description *string `pulumi:"description"`
	// User friendly display name of the GlossaryTerm. This is user-mutable. This will be same as the termId, if not specified.
	DisplayName *string `pulumi:"displayName"`
	// The glossary id for creation.
	GlossaryId *string `pulumi:"glossaryId"`
	// User-defined labels for the GlossaryTerm.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location where the glossary term should reside.
	//
	// ***
	Location string `pulumi:"location"`
	// The immediate parent of the GlossaryTerm in the resource-hierarchy. It can either be a Glossary or a Term. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/terms/{termId}
	Parent string `pulumi:"parent"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The term id for creation.
	TermId *string `pulumi:"termId"`
}

// The set of arguments for constructing a GlossaryTerm resource.
type GlossaryTermArgs struct {
	// The user-mutable description of the GlossaryTerm.
	Description pulumi.StringPtrInput
	// User friendly display name of the GlossaryTerm. This is user-mutable. This will be same as the termId, if not specified.
	DisplayName pulumi.StringPtrInput
	// The glossary id for creation.
	GlossaryId pulumi.StringPtrInput
	// User-defined labels for the GlossaryTerm.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location where the glossary term should reside.
	//
	// ***
	Location pulumi.StringInput
	// The immediate parent of the GlossaryTerm in the resource-hierarchy. It can either be a Glossary or a Term. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/terms/{termId}
	Parent pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The term id for creation.
	TermId pulumi.StringPtrInput
}

func (GlossaryTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*glossaryTermArgs)(nil)).Elem()
}

type GlossaryTermInput interface {
	pulumi.Input

	ToGlossaryTermOutput() GlossaryTermOutput
	ToGlossaryTermOutputWithContext(ctx context.Context) GlossaryTermOutput
}

func (*GlossaryTerm) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryTerm)(nil)).Elem()
}

func (i *GlossaryTerm) ToGlossaryTermOutput() GlossaryTermOutput {
	return i.ToGlossaryTermOutputWithContext(context.Background())
}

func (i *GlossaryTerm) ToGlossaryTermOutputWithContext(ctx context.Context) GlossaryTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryTermOutput)
}

// GlossaryTermArrayInput is an input type that accepts GlossaryTermArray and GlossaryTermArrayOutput values.
// You can construct a concrete instance of `GlossaryTermArrayInput` via:
//
//	GlossaryTermArray{ GlossaryTermArgs{...} }
type GlossaryTermArrayInput interface {
	pulumi.Input

	ToGlossaryTermArrayOutput() GlossaryTermArrayOutput
	ToGlossaryTermArrayOutputWithContext(context.Context) GlossaryTermArrayOutput
}

type GlossaryTermArray []GlossaryTermInput

func (GlossaryTermArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlossaryTerm)(nil)).Elem()
}

func (i GlossaryTermArray) ToGlossaryTermArrayOutput() GlossaryTermArrayOutput {
	return i.ToGlossaryTermArrayOutputWithContext(context.Background())
}

func (i GlossaryTermArray) ToGlossaryTermArrayOutputWithContext(ctx context.Context) GlossaryTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryTermArrayOutput)
}

// GlossaryTermMapInput is an input type that accepts GlossaryTermMap and GlossaryTermMapOutput values.
// You can construct a concrete instance of `GlossaryTermMapInput` via:
//
//	GlossaryTermMap{ "key": GlossaryTermArgs{...} }
type GlossaryTermMapInput interface {
	pulumi.Input

	ToGlossaryTermMapOutput() GlossaryTermMapOutput
	ToGlossaryTermMapOutputWithContext(context.Context) GlossaryTermMapOutput
}

type GlossaryTermMap map[string]GlossaryTermInput

func (GlossaryTermMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlossaryTerm)(nil)).Elem()
}

func (i GlossaryTermMap) ToGlossaryTermMapOutput() GlossaryTermMapOutput {
	return i.ToGlossaryTermMapOutputWithContext(context.Background())
}

func (i GlossaryTermMap) ToGlossaryTermMapOutputWithContext(ctx context.Context) GlossaryTermMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryTermMapOutput)
}

type GlossaryTermOutput struct{ *pulumi.OutputState }

func (GlossaryTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryTerm)(nil)).Elem()
}

func (o GlossaryTermOutput) ToGlossaryTermOutput() GlossaryTermOutput {
	return o
}

func (o GlossaryTermOutput) ToGlossaryTermOutputWithContext(ctx context.Context) GlossaryTermOutput {
	return o
}

// The time at which the GlossaryTerm was created.
func (o GlossaryTermOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The user-mutable description of the GlossaryTerm.
func (o GlossaryTermOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// User friendly display name of the GlossaryTerm. This is user-mutable. This will be same as the termId, if not specified.
func (o GlossaryTermOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o GlossaryTermOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The glossary id for creation.
func (o GlossaryTermOutput) GlossaryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringPtrOutput { return v.GlossaryId }).(pulumi.StringPtrOutput)
}

// User-defined labels for the GlossaryTerm.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o GlossaryTermOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location where the glossary term should reside.
//
// ***
func (o GlossaryTermOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the GlossaryTerm. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{termId}
func (o GlossaryTermOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The immediate parent of the GlossaryTerm in the resource-hierarchy. It can either be a Glossary or a Term. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/terms/{termId}
func (o GlossaryTermOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o GlossaryTermOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o GlossaryTermOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The term id for creation.
func (o GlossaryTermOutput) TermId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringPtrOutput { return v.TermId }).(pulumi.StringPtrOutput)
}

// System generated unique id for the GlossaryTerm. This ID will be different if the GlossaryTerm is deleted and re-created with the same name.
func (o GlossaryTermOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The time at which the GlossaryTerm was last updated.
func (o GlossaryTermOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type GlossaryTermArrayOutput struct{ *pulumi.OutputState }

func (GlossaryTermArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlossaryTerm)(nil)).Elem()
}

func (o GlossaryTermArrayOutput) ToGlossaryTermArrayOutput() GlossaryTermArrayOutput {
	return o
}

func (o GlossaryTermArrayOutput) ToGlossaryTermArrayOutputWithContext(ctx context.Context) GlossaryTermArrayOutput {
	return o
}

func (o GlossaryTermArrayOutput) Index(i pulumi.IntInput) GlossaryTermOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GlossaryTerm {
		return vs[0].([]*GlossaryTerm)[vs[1].(int)]
	}).(GlossaryTermOutput)
}

type GlossaryTermMapOutput struct{ *pulumi.OutputState }

func (GlossaryTermMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlossaryTerm)(nil)).Elem()
}

func (o GlossaryTermMapOutput) ToGlossaryTermMapOutput() GlossaryTermMapOutput {
	return o
}

func (o GlossaryTermMapOutput) ToGlossaryTermMapOutputWithContext(ctx context.Context) GlossaryTermMapOutput {
	return o
}

func (o GlossaryTermMapOutput) MapIndex(k pulumi.StringInput) GlossaryTermOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GlossaryTerm {
		return vs[0].(map[string]*GlossaryTerm)[vs[1].(string)]
	}).(GlossaryTermOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryTermInput)(nil)).Elem(), &GlossaryTerm{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryTermArrayInput)(nil)).Elem(), GlossaryTermArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryTermMapInput)(nil)).Elem(), GlossaryTermMap{})
	pulumi.RegisterOutputType(GlossaryTermOutput{})
	pulumi.RegisterOutputType(GlossaryTermArrayOutput{})
	pulumi.RegisterOutputType(GlossaryTermMapOutput{})
}
