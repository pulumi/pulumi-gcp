// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Dataplex AspectType. Each of these resources serves a different use case:
//
// * `dataplex.AspectTypeIamPolicy`: Authoritative. Sets the IAM policy for the aspecttype and replaces any existing policy already attached.
// * `dataplex.AspectTypeIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the aspecttype are preserved.
// * `dataplex.AspectTypeIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the aspecttype are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.AspectTypeIamPolicy`: Retrieves the IAM policy for the aspecttype
//
// > **Note:** `dataplex.AspectTypeIamPolicy` **cannot** be used in conjunction with `dataplex.AspectTypeIamBinding` and `dataplex.AspectTypeIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.AspectTypeIamBinding` resources **can be** used in conjunction with `dataplex.AspectTypeIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataplex.AspectTypeIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewAspectTypeIamPolicy(ctx, "policy", &dataplex.AspectTypeIamPolicyArgs{
//				Project:      pulumi.Any(testAspectTypeBasic.Project),
//				Location:     pulumi.Any(testAspectTypeBasic.Location),
//				AspectTypeId: pulumi.Any(testAspectTypeBasic.AspectTypeId),
//				PolicyData:   pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.AspectTypeIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewAspectTypeIamBinding(ctx, "binding", &dataplex.AspectTypeIamBindingArgs{
//				Project:      pulumi.Any(testAspectTypeBasic.Project),
//				Location:     pulumi.Any(testAspectTypeBasic.Location),
//				AspectTypeId: pulumi.Any(testAspectTypeBasic.AspectTypeId),
//				Role:         pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.AspectTypeIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewAspectTypeIamMember(ctx, "member", &dataplex.AspectTypeIamMemberArgs{
//				Project:      pulumi.Any(testAspectTypeBasic.Project),
//				Location:     pulumi.Any(testAspectTypeBasic.Location),
//				AspectTypeId: pulumi.Any(testAspectTypeBasic.AspectTypeId),
//				Role:         pulumi.String("roles/viewer"),
//				Member:       pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.AspectTypeIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewAspectTypeIamPolicy(ctx, "policy", &dataplex.AspectTypeIamPolicyArgs{
//				Project:      pulumi.Any(testAspectTypeBasic.Project),
//				Location:     pulumi.Any(testAspectTypeBasic.Location),
//				AspectTypeId: pulumi.Any(testAspectTypeBasic.AspectTypeId),
//				PolicyData:   pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.AspectTypeIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewAspectTypeIamBinding(ctx, "binding", &dataplex.AspectTypeIamBindingArgs{
//				Project:      pulumi.Any(testAspectTypeBasic.Project),
//				Location:     pulumi.Any(testAspectTypeBasic.Location),
//				AspectTypeId: pulumi.Any(testAspectTypeBasic.AspectTypeId),
//				Role:         pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.AspectTypeIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewAspectTypeIamMember(ctx, "member", &dataplex.AspectTypeIamMemberArgs{
//				Project:      pulumi.Any(testAspectTypeBasic.Project),
//				Location:     pulumi.Any(testAspectTypeBasic.Location),
//				AspectTypeId: pulumi.Any(testAspectTypeBasic.AspectTypeId),
//				Role:         pulumi.String("roles/viewer"),
//				Member:       pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/aspectTypes/{{aspect_type_id}}
//
// * {{project}}/{{location}}/{{aspect_type_id}}
//
// * {{location}}/{{aspect_type_id}}
//
// * {{aspect_type_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Dataplex aspecttype IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/aspectTypeIamPolicy:AspectTypeIamPolicy editor "projects/{{project}}/locations/{{location}}/aspectTypes/{{aspect_type_id}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/aspectTypeIamPolicy:AspectTypeIamPolicy editor "projects/{{project}}/locations/{{location}}/aspectTypes/{{aspect_type_id}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/aspectTypeIamPolicy:AspectTypeIamPolicy editor projects/{{project}}/locations/{{location}}/aspectTypes/{{aspect_type_id}}
// ```
//
// -> **Custom Roles**: If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type AspectTypeIamPolicy struct {
	pulumi.CustomResourceState

	AspectTypeId pulumi.StringOutput `pulumi:"aspectTypeId"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location where aspect type will be created in.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringOutput `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewAspectTypeIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewAspectTypeIamPolicy(ctx *pulumi.Context,
	name string, args *AspectTypeIamPolicyArgs, opts ...pulumi.ResourceOption) (*AspectTypeIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AspectTypeId == nil {
		return nil, errors.New("invalid value for required argument 'AspectTypeId'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AspectTypeIamPolicy
	err := ctx.RegisterResource("gcp:dataplex/aspectTypeIamPolicy:AspectTypeIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAspectTypeIamPolicy gets an existing AspectTypeIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAspectTypeIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AspectTypeIamPolicyState, opts ...pulumi.ResourceOption) (*AspectTypeIamPolicy, error) {
	var resource AspectTypeIamPolicy
	err := ctx.ReadResource("gcp:dataplex/aspectTypeIamPolicy:AspectTypeIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AspectTypeIamPolicy resources.
type aspectTypeIamPolicyState struct {
	AspectTypeId *string `pulumi:"aspectTypeId"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location where aspect type will be created in.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

type AspectTypeIamPolicyState struct {
	AspectTypeId pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location where aspect type will be created in.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (AspectTypeIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*aspectTypeIamPolicyState)(nil)).Elem()
}

type aspectTypeIamPolicyArgs struct {
	AspectTypeId string `pulumi:"aspectTypeId"`
	// The location where aspect type will be created in.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a AspectTypeIamPolicy resource.
type AspectTypeIamPolicyArgs struct {
	AspectTypeId pulumi.StringInput
	// The location where aspect type will be created in.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (AspectTypeIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aspectTypeIamPolicyArgs)(nil)).Elem()
}

type AspectTypeIamPolicyInput interface {
	pulumi.Input

	ToAspectTypeIamPolicyOutput() AspectTypeIamPolicyOutput
	ToAspectTypeIamPolicyOutputWithContext(ctx context.Context) AspectTypeIamPolicyOutput
}

func (*AspectTypeIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AspectTypeIamPolicy)(nil)).Elem()
}

func (i *AspectTypeIamPolicy) ToAspectTypeIamPolicyOutput() AspectTypeIamPolicyOutput {
	return i.ToAspectTypeIamPolicyOutputWithContext(context.Background())
}

func (i *AspectTypeIamPolicy) ToAspectTypeIamPolicyOutputWithContext(ctx context.Context) AspectTypeIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AspectTypeIamPolicyOutput)
}

// AspectTypeIamPolicyArrayInput is an input type that accepts AspectTypeIamPolicyArray and AspectTypeIamPolicyArrayOutput values.
// You can construct a concrete instance of `AspectTypeIamPolicyArrayInput` via:
//
//	AspectTypeIamPolicyArray{ AspectTypeIamPolicyArgs{...} }
type AspectTypeIamPolicyArrayInput interface {
	pulumi.Input

	ToAspectTypeIamPolicyArrayOutput() AspectTypeIamPolicyArrayOutput
	ToAspectTypeIamPolicyArrayOutputWithContext(context.Context) AspectTypeIamPolicyArrayOutput
}

type AspectTypeIamPolicyArray []AspectTypeIamPolicyInput

func (AspectTypeIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AspectTypeIamPolicy)(nil)).Elem()
}

func (i AspectTypeIamPolicyArray) ToAspectTypeIamPolicyArrayOutput() AspectTypeIamPolicyArrayOutput {
	return i.ToAspectTypeIamPolicyArrayOutputWithContext(context.Background())
}

func (i AspectTypeIamPolicyArray) ToAspectTypeIamPolicyArrayOutputWithContext(ctx context.Context) AspectTypeIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AspectTypeIamPolicyArrayOutput)
}

// AspectTypeIamPolicyMapInput is an input type that accepts AspectTypeIamPolicyMap and AspectTypeIamPolicyMapOutput values.
// You can construct a concrete instance of `AspectTypeIamPolicyMapInput` via:
//
//	AspectTypeIamPolicyMap{ "key": AspectTypeIamPolicyArgs{...} }
type AspectTypeIamPolicyMapInput interface {
	pulumi.Input

	ToAspectTypeIamPolicyMapOutput() AspectTypeIamPolicyMapOutput
	ToAspectTypeIamPolicyMapOutputWithContext(context.Context) AspectTypeIamPolicyMapOutput
}

type AspectTypeIamPolicyMap map[string]AspectTypeIamPolicyInput

func (AspectTypeIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AspectTypeIamPolicy)(nil)).Elem()
}

func (i AspectTypeIamPolicyMap) ToAspectTypeIamPolicyMapOutput() AspectTypeIamPolicyMapOutput {
	return i.ToAspectTypeIamPolicyMapOutputWithContext(context.Background())
}

func (i AspectTypeIamPolicyMap) ToAspectTypeIamPolicyMapOutputWithContext(ctx context.Context) AspectTypeIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AspectTypeIamPolicyMapOutput)
}

type AspectTypeIamPolicyOutput struct{ *pulumi.OutputState }

func (AspectTypeIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AspectTypeIamPolicy)(nil)).Elem()
}

func (o AspectTypeIamPolicyOutput) ToAspectTypeIamPolicyOutput() AspectTypeIamPolicyOutput {
	return o
}

func (o AspectTypeIamPolicyOutput) ToAspectTypeIamPolicyOutputWithContext(ctx context.Context) AspectTypeIamPolicyOutput {
	return o
}

func (o AspectTypeIamPolicyOutput) AspectTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *AspectTypeIamPolicy) pulumi.StringOutput { return v.AspectTypeId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o AspectTypeIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AspectTypeIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location where aspect type will be created in.
// Used to find the parent resource to bind the IAM policy to
func (o AspectTypeIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AspectTypeIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o AspectTypeIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *AspectTypeIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o AspectTypeIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AspectTypeIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type AspectTypeIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (AspectTypeIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AspectTypeIamPolicy)(nil)).Elem()
}

func (o AspectTypeIamPolicyArrayOutput) ToAspectTypeIamPolicyArrayOutput() AspectTypeIamPolicyArrayOutput {
	return o
}

func (o AspectTypeIamPolicyArrayOutput) ToAspectTypeIamPolicyArrayOutputWithContext(ctx context.Context) AspectTypeIamPolicyArrayOutput {
	return o
}

func (o AspectTypeIamPolicyArrayOutput) Index(i pulumi.IntInput) AspectTypeIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AspectTypeIamPolicy {
		return vs[0].([]*AspectTypeIamPolicy)[vs[1].(int)]
	}).(AspectTypeIamPolicyOutput)
}

type AspectTypeIamPolicyMapOutput struct{ *pulumi.OutputState }

func (AspectTypeIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AspectTypeIamPolicy)(nil)).Elem()
}

func (o AspectTypeIamPolicyMapOutput) ToAspectTypeIamPolicyMapOutput() AspectTypeIamPolicyMapOutput {
	return o
}

func (o AspectTypeIamPolicyMapOutput) ToAspectTypeIamPolicyMapOutputWithContext(ctx context.Context) AspectTypeIamPolicyMapOutput {
	return o
}

func (o AspectTypeIamPolicyMapOutput) MapIndex(k pulumi.StringInput) AspectTypeIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AspectTypeIamPolicy {
		return vs[0].(map[string]*AspectTypeIamPolicy)[vs[1].(string)]
	}).(AspectTypeIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AspectTypeIamPolicyInput)(nil)).Elem(), &AspectTypeIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AspectTypeIamPolicyArrayInput)(nil)).Elem(), AspectTypeIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AspectTypeIamPolicyMapInput)(nil)).Elem(), AspectTypeIamPolicyMap{})
	pulumi.RegisterOutputType(AspectTypeIamPolicyOutput{})
	pulumi.RegisterOutputType(AspectTypeIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(AspectTypeIamPolicyMapOutput{})
}
