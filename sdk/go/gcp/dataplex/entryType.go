// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Entry Type is a template for creating Entries.
//
// ## Example Usage
//
// ### Dataplex Entry Type Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewEntryType(ctx, "test_entry_type_basic", &dataplex.EntryTypeArgs{
//				EntryTypeId: pulumi.String("entry-type-basic"),
//				Project:     pulumi.String("my-project-name"),
//				Location:    pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Dataplex Entry Type Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testEntryTypeFull, err := dataplex.NewAspectType(ctx, "test_entry_type_full", &dataplex.AspectTypeArgs{
//				AspectTypeId: pulumi.String("tf-test-aspect-type_91042"),
//				Location:     pulumi.String("us-central1"),
//				Project:      pulumi.String("my-project-name"),
//				MetadataTemplate: pulumi.String(`{
//	  "name": "tf-test-template",
//	  "type": "record",
//	  "recordFields": [
//	    {
//	      "name": "type",
//	      "type": "enum",
//	      "annotations": {
//	        "displayName": "Type",
//	        "description": "Specifies the type of view represented by the entry."
//	      },
//	      "index": 1,
//	      "constraints": {
//	        "required": true
//	      },
//	      "enumValues": [
//	        {
//	          "name": "VIEW",
//	          "index": 1
//	        }
//	      ]
//	    }
//	  ]
//	}
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewEntryType(ctx, "test_entry_type_full", &dataplex.EntryTypeArgs{
//				EntryTypeId: pulumi.String("entry-type-full"),
//				Project:     pulumi.String("my-project-name"),
//				Location:    pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"tag": pulumi.String("test-tf"),
//				},
//				DisplayName: pulumi.String("terraform entry type"),
//				Description: pulumi.String("entry type created by Terraform"),
//				TypeAliases: pulumi.StringArray{
//					pulumi.String("TABLE"),
//					pulumi.String("DATABASE"),
//				},
//				Platform: pulumi.String("GCS"),
//				System:   pulumi.String("CloudSQL"),
//				RequiredAspects: dataplex.EntryTypeRequiredAspectArray{
//					&dataplex.EntryTypeRequiredAspectArgs{
//						Type: testEntryTypeFull.Name,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EntryType can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}`
//
// * `{{project}}/{{location}}/{{entry_type_id}}`
//
// * `{{location}}/{{entry_type_id}}`
//
// When using the `pulumi import` command, EntryType can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:dataplex/entryType:EntryType default projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}
// ```
//
// ```sh
// $ pulumi import gcp:dataplex/entryType:EntryType default {{project}}/{{location}}/{{entry_type_id}}
// ```
//
// ```sh
// $ pulumi import gcp:dataplex/entryType:EntryType default {{location}}/{{entry_type_id}}
// ```
type EntryType struct {
	pulumi.CustomResourceState

	// The time when the EntryType was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the EntryType.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User friendly display name.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The entry type id of the entry type.
	EntryTypeId pulumi.StringPtrOutput `pulumi:"entryTypeId"`
	// User-defined labels for the EntryType.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location where entry type will be created in.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The relative resource name of the EntryType, of the form: projects/{project_number}/locations/{location_id}/entryTypes/{entry_type_id}
	Name pulumi.StringOutput `pulumi:"name"`
	// The platform that Entries of this type belongs to.
	Platform pulumi.StringPtrOutput `pulumi:"platform"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// AspectInfo for the entry type.
	// Structure is documented below.
	RequiredAspects EntryTypeRequiredAspectArrayOutput `pulumi:"requiredAspects"`
	// The system that Entries of this type belongs to.
	System pulumi.StringPtrOutput `pulumi:"system"`
	// Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
	TypeAliases pulumi.StringArrayOutput `pulumi:"typeAliases"`
	// System generated globally unique ID for the EntryType. This ID will be different if the EntryType is deleted and re-created with the same name.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The time when the EntryType was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewEntryType registers a new resource with the given unique name, arguments, and options.
func NewEntryType(ctx *pulumi.Context,
	name string, args *EntryTypeArgs, opts ...pulumi.ResourceOption) (*EntryType, error) {
	if args == nil {
		args = &EntryTypeArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EntryType
	err := ctx.RegisterResource("gcp:dataplex/entryType:EntryType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntryType gets an existing EntryType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntryType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntryTypeState, opts ...pulumi.ResourceOption) (*EntryType, error) {
	var resource EntryType
	err := ctx.ReadResource("gcp:dataplex/entryType:EntryType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EntryType resources.
type entryTypeState struct {
	// The time when the EntryType was created.
	CreateTime *string `pulumi:"createTime"`
	// Description of the EntryType.
	Description *string `pulumi:"description"`
	// User friendly display name.
	DisplayName *string `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The entry type id of the entry type.
	EntryTypeId *string `pulumi:"entryTypeId"`
	// User-defined labels for the EntryType.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location where entry type will be created in.
	Location *string `pulumi:"location"`
	// The relative resource name of the EntryType, of the form: projects/{project_number}/locations/{location_id}/entryTypes/{entry_type_id}
	Name *string `pulumi:"name"`
	// The platform that Entries of this type belongs to.
	Platform *string `pulumi:"platform"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// AspectInfo for the entry type.
	// Structure is documented below.
	RequiredAspects []EntryTypeRequiredAspect `pulumi:"requiredAspects"`
	// The system that Entries of this type belongs to.
	System *string `pulumi:"system"`
	// Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
	TypeAliases []string `pulumi:"typeAliases"`
	// System generated globally unique ID for the EntryType. This ID will be different if the EntryType is deleted and re-created with the same name.
	Uid *string `pulumi:"uid"`
	// The time when the EntryType was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type EntryTypeState struct {
	// The time when the EntryType was created.
	CreateTime pulumi.StringPtrInput
	// Description of the EntryType.
	Description pulumi.StringPtrInput
	// User friendly display name.
	DisplayName pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The entry type id of the entry type.
	EntryTypeId pulumi.StringPtrInput
	// User-defined labels for the EntryType.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location where entry type will be created in.
	Location pulumi.StringPtrInput
	// The relative resource name of the EntryType, of the form: projects/{project_number}/locations/{location_id}/entryTypes/{entry_type_id}
	Name pulumi.StringPtrInput
	// The platform that Entries of this type belongs to.
	Platform pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// AspectInfo for the entry type.
	// Structure is documented below.
	RequiredAspects EntryTypeRequiredAspectArrayInput
	// The system that Entries of this type belongs to.
	System pulumi.StringPtrInput
	// Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
	TypeAliases pulumi.StringArrayInput
	// System generated globally unique ID for the EntryType. This ID will be different if the EntryType is deleted and re-created with the same name.
	Uid pulumi.StringPtrInput
	// The time when the EntryType was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (EntryTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*entryTypeState)(nil)).Elem()
}

type entryTypeArgs struct {
	// Description of the EntryType.
	Description *string `pulumi:"description"`
	// User friendly display name.
	DisplayName *string `pulumi:"displayName"`
	// The entry type id of the entry type.
	EntryTypeId *string `pulumi:"entryTypeId"`
	// User-defined labels for the EntryType.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location where entry type will be created in.
	Location *string `pulumi:"location"`
	// The platform that Entries of this type belongs to.
	Platform *string `pulumi:"platform"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// AspectInfo for the entry type.
	// Structure is documented below.
	RequiredAspects []EntryTypeRequiredAspect `pulumi:"requiredAspects"`
	// The system that Entries of this type belongs to.
	System *string `pulumi:"system"`
	// Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
	TypeAliases []string `pulumi:"typeAliases"`
}

// The set of arguments for constructing a EntryType resource.
type EntryTypeArgs struct {
	// Description of the EntryType.
	Description pulumi.StringPtrInput
	// User friendly display name.
	DisplayName pulumi.StringPtrInput
	// The entry type id of the entry type.
	EntryTypeId pulumi.StringPtrInput
	// User-defined labels for the EntryType.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location where entry type will be created in.
	Location pulumi.StringPtrInput
	// The platform that Entries of this type belongs to.
	Platform pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// AspectInfo for the entry type.
	// Structure is documented below.
	RequiredAspects EntryTypeRequiredAspectArrayInput
	// The system that Entries of this type belongs to.
	System pulumi.StringPtrInput
	// Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
	TypeAliases pulumi.StringArrayInput
}

func (EntryTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entryTypeArgs)(nil)).Elem()
}

type EntryTypeInput interface {
	pulumi.Input

	ToEntryTypeOutput() EntryTypeOutput
	ToEntryTypeOutputWithContext(ctx context.Context) EntryTypeOutput
}

func (*EntryType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntryType)(nil)).Elem()
}

func (i *EntryType) ToEntryTypeOutput() EntryTypeOutput {
	return i.ToEntryTypeOutputWithContext(context.Background())
}

func (i *EntryType) ToEntryTypeOutputWithContext(ctx context.Context) EntryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryTypeOutput)
}

// EntryTypeArrayInput is an input type that accepts EntryTypeArray and EntryTypeArrayOutput values.
// You can construct a concrete instance of `EntryTypeArrayInput` via:
//
//	EntryTypeArray{ EntryTypeArgs{...} }
type EntryTypeArrayInput interface {
	pulumi.Input

	ToEntryTypeArrayOutput() EntryTypeArrayOutput
	ToEntryTypeArrayOutputWithContext(context.Context) EntryTypeArrayOutput
}

type EntryTypeArray []EntryTypeInput

func (EntryTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntryType)(nil)).Elem()
}

func (i EntryTypeArray) ToEntryTypeArrayOutput() EntryTypeArrayOutput {
	return i.ToEntryTypeArrayOutputWithContext(context.Background())
}

func (i EntryTypeArray) ToEntryTypeArrayOutputWithContext(ctx context.Context) EntryTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryTypeArrayOutput)
}

// EntryTypeMapInput is an input type that accepts EntryTypeMap and EntryTypeMapOutput values.
// You can construct a concrete instance of `EntryTypeMapInput` via:
//
//	EntryTypeMap{ "key": EntryTypeArgs{...} }
type EntryTypeMapInput interface {
	pulumi.Input

	ToEntryTypeMapOutput() EntryTypeMapOutput
	ToEntryTypeMapOutputWithContext(context.Context) EntryTypeMapOutput
}

type EntryTypeMap map[string]EntryTypeInput

func (EntryTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntryType)(nil)).Elem()
}

func (i EntryTypeMap) ToEntryTypeMapOutput() EntryTypeMapOutput {
	return i.ToEntryTypeMapOutputWithContext(context.Background())
}

func (i EntryTypeMap) ToEntryTypeMapOutputWithContext(ctx context.Context) EntryTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryTypeMapOutput)
}

type EntryTypeOutput struct{ *pulumi.OutputState }

func (EntryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntryType)(nil)).Elem()
}

func (o EntryTypeOutput) ToEntryTypeOutput() EntryTypeOutput {
	return o
}

func (o EntryTypeOutput) ToEntryTypeOutputWithContext(ctx context.Context) EntryTypeOutput {
	return o
}

// The time when the EntryType was created.
func (o EntryTypeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryType) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the EntryType.
func (o EntryTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntryType) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// User friendly display name.
func (o EntryTypeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntryType) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o EntryTypeOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntryType) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The entry type id of the entry type.
func (o EntryTypeOutput) EntryTypeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntryType) pulumi.StringPtrOutput { return v.EntryTypeId }).(pulumi.StringPtrOutput)
}

// User-defined labels for the EntryType.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o EntryTypeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntryType) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location where entry type will be created in.
func (o EntryTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntryType) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The relative resource name of the EntryType, of the form: projects/{project_number}/locations/{location_id}/entryTypes/{entry_type_id}
func (o EntryTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryType) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The platform that Entries of this type belongs to.
func (o EntryTypeOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntryType) pulumi.StringPtrOutput { return v.Platform }).(pulumi.StringPtrOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o EntryTypeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryType) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o EntryTypeOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntryType) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// AspectInfo for the entry type.
// Structure is documented below.
func (o EntryTypeOutput) RequiredAspects() EntryTypeRequiredAspectArrayOutput {
	return o.ApplyT(func(v *EntryType) EntryTypeRequiredAspectArrayOutput { return v.RequiredAspects }).(EntryTypeRequiredAspectArrayOutput)
}

// The system that Entries of this type belongs to.
func (o EntryTypeOutput) System() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntryType) pulumi.StringPtrOutput { return v.System }).(pulumi.StringPtrOutput)
}

// Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
func (o EntryTypeOutput) TypeAliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EntryType) pulumi.StringArrayOutput { return v.TypeAliases }).(pulumi.StringArrayOutput)
}

// System generated globally unique ID for the EntryType. This ID will be different if the EntryType is deleted and re-created with the same name.
func (o EntryTypeOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryType) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The time when the EntryType was last updated.
func (o EntryTypeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryType) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type EntryTypeArrayOutput struct{ *pulumi.OutputState }

func (EntryTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntryType)(nil)).Elem()
}

func (o EntryTypeArrayOutput) ToEntryTypeArrayOutput() EntryTypeArrayOutput {
	return o
}

func (o EntryTypeArrayOutput) ToEntryTypeArrayOutputWithContext(ctx context.Context) EntryTypeArrayOutput {
	return o
}

func (o EntryTypeArrayOutput) Index(i pulumi.IntInput) EntryTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EntryType {
		return vs[0].([]*EntryType)[vs[1].(int)]
	}).(EntryTypeOutput)
}

type EntryTypeMapOutput struct{ *pulumi.OutputState }

func (EntryTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntryType)(nil)).Elem()
}

func (o EntryTypeMapOutput) ToEntryTypeMapOutput() EntryTypeMapOutput {
	return o
}

func (o EntryTypeMapOutput) ToEntryTypeMapOutputWithContext(ctx context.Context) EntryTypeMapOutput {
	return o
}

func (o EntryTypeMapOutput) MapIndex(k pulumi.StringInput) EntryTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EntryType {
		return vs[0].(map[string]*EntryType)[vs[1].(string)]
	}).(EntryTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntryTypeInput)(nil)).Elem(), &EntryType{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntryTypeArrayInput)(nil)).Elem(), EntryTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntryTypeMapInput)(nil)).Elem(), EntryTypeMap{})
	pulumi.RegisterOutputType(EntryTypeOutput{})
	pulumi.RegisterOutputType(EntryTypeArrayOutput{})
	pulumi.RegisterOutputType(EntryTypeMapOutput{})
}
