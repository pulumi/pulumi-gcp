// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Dataplex EntryType. Each of these resources serves a different use case:
//
// * `dataplex.EntryTypeIamPolicy`: Authoritative. Sets the IAM policy for the entrytype and replaces any existing policy already attached.
// * `dataplex.EntryTypeIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the entrytype are preserved.
// * `dataplex.EntryTypeIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the entrytype are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.EntryTypeIamPolicy`: Retrieves the IAM policy for the entrytype
//
// > **Note:** `dataplex.EntryTypeIamPolicy` **cannot** be used in conjunction with `dataplex.EntryTypeIamBinding` and `dataplex.EntryTypeIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.EntryTypeIamBinding` resources **can be** used in conjunction with `dataplex.EntryTypeIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataplex.EntryTypeIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewEntryTypeIamPolicy(ctx, "policy", &dataplex.EntryTypeIamPolicyArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				PolicyData:  pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.EntryTypeIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewEntryTypeIamBinding(ctx, "binding", &dataplex.EntryTypeIamBindingArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				Role:        pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.EntryTypeIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewEntryTypeIamMember(ctx, "member", &dataplex.EntryTypeIamMemberArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				Role:        pulumi.String("roles/viewer"),
//				Member:      pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// # IAM policy for Dataplex EntryType
// Three different resources help you manage your IAM policy for Dataplex EntryType. Each of these resources serves a different use case:
//
// * `dataplex.EntryTypeIamPolicy`: Authoritative. Sets the IAM policy for the entrytype and replaces any existing policy already attached.
// * `dataplex.EntryTypeIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the entrytype are preserved.
// * `dataplex.EntryTypeIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the entrytype are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.EntryTypeIamPolicy`: Retrieves the IAM policy for the entrytype
//
// > **Note:** `dataplex.EntryTypeIamPolicy` **cannot** be used in conjunction with `dataplex.EntryTypeIamBinding` and `dataplex.EntryTypeIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.EntryTypeIamBinding` resources **can be** used in conjunction with `dataplex.EntryTypeIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataplex.EntryTypeIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewEntryTypeIamPolicy(ctx, "policy", &dataplex.EntryTypeIamPolicyArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				PolicyData:  pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.EntryTypeIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewEntryTypeIamBinding(ctx, "binding", &dataplex.EntryTypeIamBindingArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				Role:        pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.EntryTypeIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewEntryTypeIamMember(ctx, "member", &dataplex.EntryTypeIamMemberArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				Role:        pulumi.String("roles/viewer"),
//				Member:      pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}
//
// * {{project}}/{{location}}/{{entry_type_id}}
//
// * {{location}}/{{entry_type_id}}
//
// * {{entry_type_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Dataplex entrytype IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/entryTypeIamPolicy:EntryTypeIamPolicy editor "projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/entryTypeIamPolicy:EntryTypeIamPolicy editor "projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/entryTypeIamPolicy:EntryTypeIamPolicy editor projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}
// ```
//
// -> **Custom Roles**: If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type EntryTypeIamPolicy struct {
	pulumi.CustomResourceState

	EntryTypeId pulumi.StringOutput `pulumi:"entryTypeId"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location where entry type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewEntryTypeIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewEntryTypeIamPolicy(ctx *pulumi.Context,
	name string, args *EntryTypeIamPolicyArgs, opts ...pulumi.ResourceOption) (*EntryTypeIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntryTypeId == nil {
		return nil, errors.New("invalid value for required argument 'EntryTypeId'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EntryTypeIamPolicy
	err := ctx.RegisterResource("gcp:dataplex/entryTypeIamPolicy:EntryTypeIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntryTypeIamPolicy gets an existing EntryTypeIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntryTypeIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntryTypeIamPolicyState, opts ...pulumi.ResourceOption) (*EntryTypeIamPolicy, error) {
	var resource EntryTypeIamPolicy
	err := ctx.ReadResource("gcp:dataplex/entryTypeIamPolicy:EntryTypeIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EntryTypeIamPolicy resources.
type entryTypeIamPolicyState struct {
	EntryTypeId *string `pulumi:"entryTypeId"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location where entry type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

type EntryTypeIamPolicyState struct {
	EntryTypeId pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location where entry type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (EntryTypeIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*entryTypeIamPolicyState)(nil)).Elem()
}

type entryTypeIamPolicyArgs struct {
	EntryTypeId string `pulumi:"entryTypeId"`
	// The location where entry type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a EntryTypeIamPolicy resource.
type EntryTypeIamPolicyArgs struct {
	EntryTypeId pulumi.StringInput
	// The location where entry type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (EntryTypeIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entryTypeIamPolicyArgs)(nil)).Elem()
}

type EntryTypeIamPolicyInput interface {
	pulumi.Input

	ToEntryTypeIamPolicyOutput() EntryTypeIamPolicyOutput
	ToEntryTypeIamPolicyOutputWithContext(ctx context.Context) EntryTypeIamPolicyOutput
}

func (*EntryTypeIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**EntryTypeIamPolicy)(nil)).Elem()
}

func (i *EntryTypeIamPolicy) ToEntryTypeIamPolicyOutput() EntryTypeIamPolicyOutput {
	return i.ToEntryTypeIamPolicyOutputWithContext(context.Background())
}

func (i *EntryTypeIamPolicy) ToEntryTypeIamPolicyOutputWithContext(ctx context.Context) EntryTypeIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryTypeIamPolicyOutput)
}

// EntryTypeIamPolicyArrayInput is an input type that accepts EntryTypeIamPolicyArray and EntryTypeIamPolicyArrayOutput values.
// You can construct a concrete instance of `EntryTypeIamPolicyArrayInput` via:
//
//	EntryTypeIamPolicyArray{ EntryTypeIamPolicyArgs{...} }
type EntryTypeIamPolicyArrayInput interface {
	pulumi.Input

	ToEntryTypeIamPolicyArrayOutput() EntryTypeIamPolicyArrayOutput
	ToEntryTypeIamPolicyArrayOutputWithContext(context.Context) EntryTypeIamPolicyArrayOutput
}

type EntryTypeIamPolicyArray []EntryTypeIamPolicyInput

func (EntryTypeIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntryTypeIamPolicy)(nil)).Elem()
}

func (i EntryTypeIamPolicyArray) ToEntryTypeIamPolicyArrayOutput() EntryTypeIamPolicyArrayOutput {
	return i.ToEntryTypeIamPolicyArrayOutputWithContext(context.Background())
}

func (i EntryTypeIamPolicyArray) ToEntryTypeIamPolicyArrayOutputWithContext(ctx context.Context) EntryTypeIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryTypeIamPolicyArrayOutput)
}

// EntryTypeIamPolicyMapInput is an input type that accepts EntryTypeIamPolicyMap and EntryTypeIamPolicyMapOutput values.
// You can construct a concrete instance of `EntryTypeIamPolicyMapInput` via:
//
//	EntryTypeIamPolicyMap{ "key": EntryTypeIamPolicyArgs{...} }
type EntryTypeIamPolicyMapInput interface {
	pulumi.Input

	ToEntryTypeIamPolicyMapOutput() EntryTypeIamPolicyMapOutput
	ToEntryTypeIamPolicyMapOutputWithContext(context.Context) EntryTypeIamPolicyMapOutput
}

type EntryTypeIamPolicyMap map[string]EntryTypeIamPolicyInput

func (EntryTypeIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntryTypeIamPolicy)(nil)).Elem()
}

func (i EntryTypeIamPolicyMap) ToEntryTypeIamPolicyMapOutput() EntryTypeIamPolicyMapOutput {
	return i.ToEntryTypeIamPolicyMapOutputWithContext(context.Background())
}

func (i EntryTypeIamPolicyMap) ToEntryTypeIamPolicyMapOutputWithContext(ctx context.Context) EntryTypeIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryTypeIamPolicyMapOutput)
}

type EntryTypeIamPolicyOutput struct{ *pulumi.OutputState }

func (EntryTypeIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntryTypeIamPolicy)(nil)).Elem()
}

func (o EntryTypeIamPolicyOutput) ToEntryTypeIamPolicyOutput() EntryTypeIamPolicyOutput {
	return o
}

func (o EntryTypeIamPolicyOutput) ToEntryTypeIamPolicyOutputWithContext(ctx context.Context) EntryTypeIamPolicyOutput {
	return o
}

func (o EntryTypeIamPolicyOutput) EntryTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryTypeIamPolicy) pulumi.StringOutput { return v.EntryTypeId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o EntryTypeIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryTypeIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location where entry type will be created in.
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o EntryTypeIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryTypeIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o EntryTypeIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryTypeIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o EntryTypeIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryTypeIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type EntryTypeIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (EntryTypeIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntryTypeIamPolicy)(nil)).Elem()
}

func (o EntryTypeIamPolicyArrayOutput) ToEntryTypeIamPolicyArrayOutput() EntryTypeIamPolicyArrayOutput {
	return o
}

func (o EntryTypeIamPolicyArrayOutput) ToEntryTypeIamPolicyArrayOutputWithContext(ctx context.Context) EntryTypeIamPolicyArrayOutput {
	return o
}

func (o EntryTypeIamPolicyArrayOutput) Index(i pulumi.IntInput) EntryTypeIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EntryTypeIamPolicy {
		return vs[0].([]*EntryTypeIamPolicy)[vs[1].(int)]
	}).(EntryTypeIamPolicyOutput)
}

type EntryTypeIamPolicyMapOutput struct{ *pulumi.OutputState }

func (EntryTypeIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntryTypeIamPolicy)(nil)).Elem()
}

func (o EntryTypeIamPolicyMapOutput) ToEntryTypeIamPolicyMapOutput() EntryTypeIamPolicyMapOutput {
	return o
}

func (o EntryTypeIamPolicyMapOutput) ToEntryTypeIamPolicyMapOutputWithContext(ctx context.Context) EntryTypeIamPolicyMapOutput {
	return o
}

func (o EntryTypeIamPolicyMapOutput) MapIndex(k pulumi.StringInput) EntryTypeIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EntryTypeIamPolicy {
		return vs[0].(map[string]*EntryTypeIamPolicy)[vs[1].(string)]
	}).(EntryTypeIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntryTypeIamPolicyInput)(nil)).Elem(), &EntryTypeIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntryTypeIamPolicyArrayInput)(nil)).Elem(), EntryTypeIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntryTypeIamPolicyMapInput)(nil)).Elem(), EntryTypeIamPolicyMap{})
	pulumi.RegisterOutputType(EntryTypeIamPolicyOutput{})
	pulumi.RegisterOutputType(EntryTypeIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(EntryTypeIamPolicyMapOutput{})
}
