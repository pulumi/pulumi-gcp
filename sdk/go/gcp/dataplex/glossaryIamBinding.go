// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Dataplex Glossary. Each of these resources serves a different use case:
//
// * `dataplex.GlossaryIamPolicy`: Authoritative. Sets the IAM policy for the glossary and replaces any existing policy already attached.
// * `dataplex.GlossaryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the glossary are preserved.
// * `dataplex.GlossaryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the glossary are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.GlossaryIamPolicy`: Retrieves the IAM policy for the glossary
//
// > **Note:** `dataplex.GlossaryIamPolicy` **cannot** be used in conjunction with `dataplex.GlossaryIamBinding` and `dataplex.GlossaryIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.GlossaryIamBinding` resources **can be** used in conjunction with `dataplex.GlossaryIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataplex.GlossaryIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewGlossaryIamPolicy(ctx, "policy", &dataplex.GlossaryIamPolicyArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.GlossaryIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewGlossaryIamBinding(ctx, "binding", &dataplex.GlossaryIamBindingArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				Role:       pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.GlossaryIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewGlossaryIamMember(ctx, "member", &dataplex.GlossaryIamMemberArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				Role:       pulumi.String("roles/viewer"),
//				Member:     pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Dataplex Glossary
//
// Three different resources help you manage your IAM policy for Dataplex Glossary. Each of these resources serves a different use case:
//
// * `dataplex.GlossaryIamPolicy`: Authoritative. Sets the IAM policy for the glossary and replaces any existing policy already attached.
// * `dataplex.GlossaryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the glossary are preserved.
// * `dataplex.GlossaryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the glossary are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.GlossaryIamPolicy`: Retrieves the IAM policy for the glossary
//
// > **Note:** `dataplex.GlossaryIamPolicy` **cannot** be used in conjunction with `dataplex.GlossaryIamBinding` and `dataplex.GlossaryIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.GlossaryIamBinding` resources **can be** used in conjunction with `dataplex.GlossaryIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataplex.GlossaryIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewGlossaryIamPolicy(ctx, "policy", &dataplex.GlossaryIamPolicyArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.GlossaryIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewGlossaryIamBinding(ctx, "binding", &dataplex.GlossaryIamBindingArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				Role:       pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.GlossaryIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewGlossaryIamMember(ctx, "member", &dataplex.GlossaryIamMemberArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				Role:       pulumi.String("roles/viewer"),
//				Member:     pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}
//
// * {{project}}/{{location}}/{{glossary_id}}
//
// * {{location}}/{{glossary_id}}
//
// * {{glossary_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Dataplex glossary IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/glossaryIamBinding:GlossaryIamBinding editor "projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/glossaryIamBinding:GlossaryIamBinding editor "projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/glossaryIamBinding:GlossaryIamBinding editor projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type GlossaryIamBinding struct {
	pulumi.CustomResourceState

	Condition GlossaryIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId pulumi.StringOutput `pulumi:"glossaryId"`
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.GlossaryIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewGlossaryIamBinding registers a new resource with the given unique name, arguments, and options.
func NewGlossaryIamBinding(ctx *pulumi.Context,
	name string, args *GlossaryIamBindingArgs, opts ...pulumi.ResourceOption) (*GlossaryIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlossaryId == nil {
		return nil, errors.New("invalid value for required argument 'GlossaryId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GlossaryIamBinding
	err := ctx.RegisterResource("gcp:dataplex/glossaryIamBinding:GlossaryIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlossaryIamBinding gets an existing GlossaryIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlossaryIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlossaryIamBindingState, opts ...pulumi.ResourceOption) (*GlossaryIamBinding, error) {
	var resource GlossaryIamBinding
	err := ctx.ReadResource("gcp:dataplex/glossaryIamBinding:GlossaryIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlossaryIamBinding resources.
type glossaryIamBindingState struct {
	Condition *GlossaryIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId *string `pulumi:"glossaryId"`
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.GlossaryIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type GlossaryIamBindingState struct {
	Condition GlossaryIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId pulumi.StringPtrInput
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataplex.GlossaryIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (GlossaryIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*glossaryIamBindingState)(nil)).Elem()
}

type glossaryIamBindingArgs struct {
	Condition *GlossaryIamBindingCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId string `pulumi:"glossaryId"`
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.GlossaryIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a GlossaryIamBinding resource.
type GlossaryIamBindingArgs struct {
	Condition GlossaryIamBindingConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId pulumi.StringInput
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataplex.GlossaryIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (GlossaryIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*glossaryIamBindingArgs)(nil)).Elem()
}

type GlossaryIamBindingInput interface {
	pulumi.Input

	ToGlossaryIamBindingOutput() GlossaryIamBindingOutput
	ToGlossaryIamBindingOutputWithContext(ctx context.Context) GlossaryIamBindingOutput
}

func (*GlossaryIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryIamBinding)(nil)).Elem()
}

func (i *GlossaryIamBinding) ToGlossaryIamBindingOutput() GlossaryIamBindingOutput {
	return i.ToGlossaryIamBindingOutputWithContext(context.Background())
}

func (i *GlossaryIamBinding) ToGlossaryIamBindingOutputWithContext(ctx context.Context) GlossaryIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryIamBindingOutput)
}

// GlossaryIamBindingArrayInput is an input type that accepts GlossaryIamBindingArray and GlossaryIamBindingArrayOutput values.
// You can construct a concrete instance of `GlossaryIamBindingArrayInput` via:
//
//	GlossaryIamBindingArray{ GlossaryIamBindingArgs{...} }
type GlossaryIamBindingArrayInput interface {
	pulumi.Input

	ToGlossaryIamBindingArrayOutput() GlossaryIamBindingArrayOutput
	ToGlossaryIamBindingArrayOutputWithContext(context.Context) GlossaryIamBindingArrayOutput
}

type GlossaryIamBindingArray []GlossaryIamBindingInput

func (GlossaryIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlossaryIamBinding)(nil)).Elem()
}

func (i GlossaryIamBindingArray) ToGlossaryIamBindingArrayOutput() GlossaryIamBindingArrayOutput {
	return i.ToGlossaryIamBindingArrayOutputWithContext(context.Background())
}

func (i GlossaryIamBindingArray) ToGlossaryIamBindingArrayOutputWithContext(ctx context.Context) GlossaryIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryIamBindingArrayOutput)
}

// GlossaryIamBindingMapInput is an input type that accepts GlossaryIamBindingMap and GlossaryIamBindingMapOutput values.
// You can construct a concrete instance of `GlossaryIamBindingMapInput` via:
//
//	GlossaryIamBindingMap{ "key": GlossaryIamBindingArgs{...} }
type GlossaryIamBindingMapInput interface {
	pulumi.Input

	ToGlossaryIamBindingMapOutput() GlossaryIamBindingMapOutput
	ToGlossaryIamBindingMapOutputWithContext(context.Context) GlossaryIamBindingMapOutput
}

type GlossaryIamBindingMap map[string]GlossaryIamBindingInput

func (GlossaryIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlossaryIamBinding)(nil)).Elem()
}

func (i GlossaryIamBindingMap) ToGlossaryIamBindingMapOutput() GlossaryIamBindingMapOutput {
	return i.ToGlossaryIamBindingMapOutputWithContext(context.Background())
}

func (i GlossaryIamBindingMap) ToGlossaryIamBindingMapOutputWithContext(ctx context.Context) GlossaryIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryIamBindingMapOutput)
}

type GlossaryIamBindingOutput struct{ *pulumi.OutputState }

func (GlossaryIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryIamBinding)(nil)).Elem()
}

func (o GlossaryIamBindingOutput) ToGlossaryIamBindingOutput() GlossaryIamBindingOutput {
	return o
}

func (o GlossaryIamBindingOutput) ToGlossaryIamBindingOutputWithContext(ctx context.Context) GlossaryIamBindingOutput {
	return o
}

func (o GlossaryIamBindingOutput) Condition() GlossaryIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *GlossaryIamBinding) GlossaryIamBindingConditionPtrOutput { return v.Condition }).(GlossaryIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o GlossaryIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o GlossaryIamBindingOutput) GlossaryId() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryIamBinding) pulumi.StringOutput { return v.GlossaryId }).(pulumi.StringOutput)
}

// The location where the glossary should reside.
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o GlossaryIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
func (o GlossaryIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GlossaryIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o GlossaryIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `dataplex.GlossaryIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o GlossaryIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type GlossaryIamBindingArrayOutput struct{ *pulumi.OutputState }

func (GlossaryIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlossaryIamBinding)(nil)).Elem()
}

func (o GlossaryIamBindingArrayOutput) ToGlossaryIamBindingArrayOutput() GlossaryIamBindingArrayOutput {
	return o
}

func (o GlossaryIamBindingArrayOutput) ToGlossaryIamBindingArrayOutputWithContext(ctx context.Context) GlossaryIamBindingArrayOutput {
	return o
}

func (o GlossaryIamBindingArrayOutput) Index(i pulumi.IntInput) GlossaryIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GlossaryIamBinding {
		return vs[0].([]*GlossaryIamBinding)[vs[1].(int)]
	}).(GlossaryIamBindingOutput)
}

type GlossaryIamBindingMapOutput struct{ *pulumi.OutputState }

func (GlossaryIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlossaryIamBinding)(nil)).Elem()
}

func (o GlossaryIamBindingMapOutput) ToGlossaryIamBindingMapOutput() GlossaryIamBindingMapOutput {
	return o
}

func (o GlossaryIamBindingMapOutput) ToGlossaryIamBindingMapOutputWithContext(ctx context.Context) GlossaryIamBindingMapOutput {
	return o
}

func (o GlossaryIamBindingMapOutput) MapIndex(k pulumi.StringInput) GlossaryIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GlossaryIamBinding {
		return vs[0].(map[string]*GlossaryIamBinding)[vs[1].(string)]
	}).(GlossaryIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryIamBindingInput)(nil)).Elem(), &GlossaryIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryIamBindingArrayInput)(nil)).Elem(), GlossaryIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryIamBindingMapInput)(nil)).Elem(), GlossaryIamBindingMap{})
	pulumi.RegisterOutputType(GlossaryIamBindingOutput{})
	pulumi.RegisterOutputType(GlossaryIamBindingArrayOutput{})
	pulumi.RegisterOutputType(GlossaryIamBindingMapOutput{})
}
