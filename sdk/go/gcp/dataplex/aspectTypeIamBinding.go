// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Dataplex AspectType. Each of these resources serves a different use case:
//
// * `dataplex.AspectTypeIamPolicy`: Authoritative. Sets the IAM policy for the aspecttype and replaces any existing policy already attached.
// * `dataplex.AspectTypeIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the aspecttype are preserved.
// * `dataplex.AspectTypeIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the aspecttype are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.AspectTypeIamPolicy`: Retrieves the IAM policy for the aspecttype
//
// > **Note:** `dataplex.AspectTypeIamPolicy` **cannot** be used in conjunction with `dataplex.AspectTypeIamBinding` and `dataplex.AspectTypeIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.AspectTypeIamBinding` resources **can be** used in conjunction with `dataplex.AspectTypeIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataplex.AspectTypeIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewAspectTypeIamPolicy(ctx, "policy", &dataplex.AspectTypeIamPolicyArgs{
//				Project:      pulumi.Any(testAspectTypeBasic.Project),
//				Location:     pulumi.Any(testAspectTypeBasic.Location),
//				AspectTypeId: pulumi.Any(testAspectTypeBasic.AspectTypeId),
//				PolicyData:   pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.AspectTypeIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewAspectTypeIamBinding(ctx, "binding", &dataplex.AspectTypeIamBindingArgs{
//				Project:      pulumi.Any(testAspectTypeBasic.Project),
//				Location:     pulumi.Any(testAspectTypeBasic.Location),
//				AspectTypeId: pulumi.Any(testAspectTypeBasic.AspectTypeId),
//				Role:         pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.AspectTypeIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewAspectTypeIamMember(ctx, "member", &dataplex.AspectTypeIamMemberArgs{
//				Project:      pulumi.Any(testAspectTypeBasic.Project),
//				Location:     pulumi.Any(testAspectTypeBasic.Location),
//				AspectTypeId: pulumi.Any(testAspectTypeBasic.AspectTypeId),
//				Role:         pulumi.String("roles/viewer"),
//				Member:       pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Dataplex AspectType
// Three different resources help you manage your IAM policy for Dataplex AspectType. Each of these resources serves a different use case:
//
// * `dataplex.AspectTypeIamPolicy`: Authoritative. Sets the IAM policy for the aspecttype and replaces any existing policy already attached.
// * `dataplex.AspectTypeIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the aspecttype are preserved.
// * `dataplex.AspectTypeIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the aspecttype are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.AspectTypeIamPolicy`: Retrieves the IAM policy for the aspecttype
//
// > **Note:** `dataplex.AspectTypeIamPolicy` **cannot** be used in conjunction with `dataplex.AspectTypeIamBinding` and `dataplex.AspectTypeIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.AspectTypeIamBinding` resources **can be** used in conjunction with `dataplex.AspectTypeIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataplex.AspectTypeIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewAspectTypeIamPolicy(ctx, "policy", &dataplex.AspectTypeIamPolicyArgs{
//				Project:      pulumi.Any(testAspectTypeBasic.Project),
//				Location:     pulumi.Any(testAspectTypeBasic.Location),
//				AspectTypeId: pulumi.Any(testAspectTypeBasic.AspectTypeId),
//				PolicyData:   pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.AspectTypeIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewAspectTypeIamBinding(ctx, "binding", &dataplex.AspectTypeIamBindingArgs{
//				Project:      pulumi.Any(testAspectTypeBasic.Project),
//				Location:     pulumi.Any(testAspectTypeBasic.Location),
//				AspectTypeId: pulumi.Any(testAspectTypeBasic.AspectTypeId),
//				Role:         pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.AspectTypeIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewAspectTypeIamMember(ctx, "member", &dataplex.AspectTypeIamMemberArgs{
//				Project:      pulumi.Any(testAspectTypeBasic.Project),
//				Location:     pulumi.Any(testAspectTypeBasic.Location),
//				AspectTypeId: pulumi.Any(testAspectTypeBasic.AspectTypeId),
//				Role:         pulumi.String("roles/viewer"),
//				Member:       pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/aspectTypes/{{aspect_type_id}}
//
// * {{project}}/{{location}}/{{aspect_type_id}}
//
// * {{location}}/{{aspect_type_id}}
//
// * {{aspect_type_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Dataplex aspecttype IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/aspectTypeIamBinding:AspectTypeIamBinding editor "projects/{{project}}/locations/{{location}}/aspectTypes/{{aspect_type_id}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/aspectTypeIamBinding:AspectTypeIamBinding editor "projects/{{project}}/locations/{{location}}/aspectTypes/{{aspect_type_id}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/aspectTypeIamBinding:AspectTypeIamBinding editor projects/{{project}}/locations/{{location}}/aspectTypes/{{aspect_type_id}}
// ```
//
// -> **Custom Roles**: If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type AspectTypeIamBinding struct {
	pulumi.CustomResourceState

	AspectTypeId pulumi.StringOutput                    `pulumi:"aspectTypeId"`
	Condition    AspectTypeIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location where aspect type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.AspectTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewAspectTypeIamBinding registers a new resource with the given unique name, arguments, and options.
func NewAspectTypeIamBinding(ctx *pulumi.Context,
	name string, args *AspectTypeIamBindingArgs, opts ...pulumi.ResourceOption) (*AspectTypeIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AspectTypeId == nil {
		return nil, errors.New("invalid value for required argument 'AspectTypeId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AspectTypeIamBinding
	err := ctx.RegisterResource("gcp:dataplex/aspectTypeIamBinding:AspectTypeIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAspectTypeIamBinding gets an existing AspectTypeIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAspectTypeIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AspectTypeIamBindingState, opts ...pulumi.ResourceOption) (*AspectTypeIamBinding, error) {
	var resource AspectTypeIamBinding
	err := ctx.ReadResource("gcp:dataplex/aspectTypeIamBinding:AspectTypeIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AspectTypeIamBinding resources.
type aspectTypeIamBindingState struct {
	AspectTypeId *string                        `pulumi:"aspectTypeId"`
	Condition    *AspectTypeIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location where aspect type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.AspectTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type AspectTypeIamBindingState struct {
	AspectTypeId pulumi.StringPtrInput
	Condition    AspectTypeIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location where aspect type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataplex.AspectTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (AspectTypeIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*aspectTypeIamBindingState)(nil)).Elem()
}

type aspectTypeIamBindingArgs struct {
	AspectTypeId string                         `pulumi:"aspectTypeId"`
	Condition    *AspectTypeIamBindingCondition `pulumi:"condition"`
	// The location where aspect type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.AspectTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a AspectTypeIamBinding resource.
type AspectTypeIamBindingArgs struct {
	AspectTypeId pulumi.StringInput
	Condition    AspectTypeIamBindingConditionPtrInput
	// The location where aspect type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataplex.AspectTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (AspectTypeIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aspectTypeIamBindingArgs)(nil)).Elem()
}

type AspectTypeIamBindingInput interface {
	pulumi.Input

	ToAspectTypeIamBindingOutput() AspectTypeIamBindingOutput
	ToAspectTypeIamBindingOutputWithContext(ctx context.Context) AspectTypeIamBindingOutput
}

func (*AspectTypeIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**AspectTypeIamBinding)(nil)).Elem()
}

func (i *AspectTypeIamBinding) ToAspectTypeIamBindingOutput() AspectTypeIamBindingOutput {
	return i.ToAspectTypeIamBindingOutputWithContext(context.Background())
}

func (i *AspectTypeIamBinding) ToAspectTypeIamBindingOutputWithContext(ctx context.Context) AspectTypeIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AspectTypeIamBindingOutput)
}

// AspectTypeIamBindingArrayInput is an input type that accepts AspectTypeIamBindingArray and AspectTypeIamBindingArrayOutput values.
// You can construct a concrete instance of `AspectTypeIamBindingArrayInput` via:
//
//	AspectTypeIamBindingArray{ AspectTypeIamBindingArgs{...} }
type AspectTypeIamBindingArrayInput interface {
	pulumi.Input

	ToAspectTypeIamBindingArrayOutput() AspectTypeIamBindingArrayOutput
	ToAspectTypeIamBindingArrayOutputWithContext(context.Context) AspectTypeIamBindingArrayOutput
}

type AspectTypeIamBindingArray []AspectTypeIamBindingInput

func (AspectTypeIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AspectTypeIamBinding)(nil)).Elem()
}

func (i AspectTypeIamBindingArray) ToAspectTypeIamBindingArrayOutput() AspectTypeIamBindingArrayOutput {
	return i.ToAspectTypeIamBindingArrayOutputWithContext(context.Background())
}

func (i AspectTypeIamBindingArray) ToAspectTypeIamBindingArrayOutputWithContext(ctx context.Context) AspectTypeIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AspectTypeIamBindingArrayOutput)
}

// AspectTypeIamBindingMapInput is an input type that accepts AspectTypeIamBindingMap and AspectTypeIamBindingMapOutput values.
// You can construct a concrete instance of `AspectTypeIamBindingMapInput` via:
//
//	AspectTypeIamBindingMap{ "key": AspectTypeIamBindingArgs{...} }
type AspectTypeIamBindingMapInput interface {
	pulumi.Input

	ToAspectTypeIamBindingMapOutput() AspectTypeIamBindingMapOutput
	ToAspectTypeIamBindingMapOutputWithContext(context.Context) AspectTypeIamBindingMapOutput
}

type AspectTypeIamBindingMap map[string]AspectTypeIamBindingInput

func (AspectTypeIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AspectTypeIamBinding)(nil)).Elem()
}

func (i AspectTypeIamBindingMap) ToAspectTypeIamBindingMapOutput() AspectTypeIamBindingMapOutput {
	return i.ToAspectTypeIamBindingMapOutputWithContext(context.Background())
}

func (i AspectTypeIamBindingMap) ToAspectTypeIamBindingMapOutputWithContext(ctx context.Context) AspectTypeIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AspectTypeIamBindingMapOutput)
}

type AspectTypeIamBindingOutput struct{ *pulumi.OutputState }

func (AspectTypeIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AspectTypeIamBinding)(nil)).Elem()
}

func (o AspectTypeIamBindingOutput) ToAspectTypeIamBindingOutput() AspectTypeIamBindingOutput {
	return o
}

func (o AspectTypeIamBindingOutput) ToAspectTypeIamBindingOutputWithContext(ctx context.Context) AspectTypeIamBindingOutput {
	return o
}

func (o AspectTypeIamBindingOutput) AspectTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *AspectTypeIamBinding) pulumi.StringOutput { return v.AspectTypeId }).(pulumi.StringOutput)
}

func (o AspectTypeIamBindingOutput) Condition() AspectTypeIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *AspectTypeIamBinding) AspectTypeIamBindingConditionPtrOutput { return v.Condition }).(AspectTypeIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o AspectTypeIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AspectTypeIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location where aspect type will be created in.
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o AspectTypeIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AspectTypeIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o AspectTypeIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AspectTypeIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o AspectTypeIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AspectTypeIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `dataplex.AspectTypeIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o AspectTypeIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AspectTypeIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type AspectTypeIamBindingArrayOutput struct{ *pulumi.OutputState }

func (AspectTypeIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AspectTypeIamBinding)(nil)).Elem()
}

func (o AspectTypeIamBindingArrayOutput) ToAspectTypeIamBindingArrayOutput() AspectTypeIamBindingArrayOutput {
	return o
}

func (o AspectTypeIamBindingArrayOutput) ToAspectTypeIamBindingArrayOutputWithContext(ctx context.Context) AspectTypeIamBindingArrayOutput {
	return o
}

func (o AspectTypeIamBindingArrayOutput) Index(i pulumi.IntInput) AspectTypeIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AspectTypeIamBinding {
		return vs[0].([]*AspectTypeIamBinding)[vs[1].(int)]
	}).(AspectTypeIamBindingOutput)
}

type AspectTypeIamBindingMapOutput struct{ *pulumi.OutputState }

func (AspectTypeIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AspectTypeIamBinding)(nil)).Elem()
}

func (o AspectTypeIamBindingMapOutput) ToAspectTypeIamBindingMapOutput() AspectTypeIamBindingMapOutput {
	return o
}

func (o AspectTypeIamBindingMapOutput) ToAspectTypeIamBindingMapOutputWithContext(ctx context.Context) AspectTypeIamBindingMapOutput {
	return o
}

func (o AspectTypeIamBindingMapOutput) MapIndex(k pulumi.StringInput) AspectTypeIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AspectTypeIamBinding {
		return vs[0].(map[string]*AspectTypeIamBinding)[vs[1].(string)]
	}).(AspectTypeIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AspectTypeIamBindingInput)(nil)).Elem(), &AspectTypeIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*AspectTypeIamBindingArrayInput)(nil)).Elem(), AspectTypeIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AspectTypeIamBindingMapInput)(nil)).Elem(), AspectTypeIamBindingMap{})
	pulumi.RegisterOutputType(AspectTypeIamBindingOutput{})
	pulumi.RegisterOutputType(AspectTypeIamBindingArrayOutput{})
	pulumi.RegisterOutputType(AspectTypeIamBindingMapOutput{})
}
