// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LakeIamMember struct {
	pulumi.CustomResourceState

	Condition LakeIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag      pulumi.StringOutput             `pulumi:"etag"`
	Lake      pulumi.StringOutput             `pulumi:"lake"`
	Location  pulumi.StringOutput             `pulumi:"location"`
	Member    pulumi.StringOutput             `pulumi:"member"`
	Project   pulumi.StringOutput             `pulumi:"project"`
	Role      pulumi.StringOutput             `pulumi:"role"`
}

// NewLakeIamMember registers a new resource with the given unique name, arguments, and options.
func NewLakeIamMember(ctx *pulumi.Context,
	name string, args *LakeIamMemberArgs, opts ...pulumi.ResourceOption) (*LakeIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Lake == nil {
		return nil, errors.New("invalid value for required argument 'Lake'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource LakeIamMember
	err := ctx.RegisterResource("gcp:dataplex/lakeIamMember:LakeIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLakeIamMember gets an existing LakeIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLakeIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LakeIamMemberState, opts ...pulumi.ResourceOption) (*LakeIamMember, error) {
	var resource LakeIamMember
	err := ctx.ReadResource("gcp:dataplex/lakeIamMember:LakeIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LakeIamMember resources.
type lakeIamMemberState struct {
	Condition *LakeIamMemberCondition `pulumi:"condition"`
	Etag      *string                 `pulumi:"etag"`
	Lake      *string                 `pulumi:"lake"`
	Location  *string                 `pulumi:"location"`
	Member    *string                 `pulumi:"member"`
	Project   *string                 `pulumi:"project"`
	Role      *string                 `pulumi:"role"`
}

type LakeIamMemberState struct {
	Condition LakeIamMemberConditionPtrInput
	Etag      pulumi.StringPtrInput
	Lake      pulumi.StringPtrInput
	Location  pulumi.StringPtrInput
	Member    pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringPtrInput
}

func (LakeIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*lakeIamMemberState)(nil)).Elem()
}

type lakeIamMemberArgs struct {
	Condition *LakeIamMemberCondition `pulumi:"condition"`
	Lake      string                  `pulumi:"lake"`
	Location  *string                 `pulumi:"location"`
	Member    string                  `pulumi:"member"`
	Project   *string                 `pulumi:"project"`
	Role      string                  `pulumi:"role"`
}

// The set of arguments for constructing a LakeIamMember resource.
type LakeIamMemberArgs struct {
	Condition LakeIamMemberConditionPtrInput
	Lake      pulumi.StringInput
	Location  pulumi.StringPtrInput
	Member    pulumi.StringInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringInput
}

func (LakeIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lakeIamMemberArgs)(nil)).Elem()
}

type LakeIamMemberInput interface {
	pulumi.Input

	ToLakeIamMemberOutput() LakeIamMemberOutput
	ToLakeIamMemberOutputWithContext(ctx context.Context) LakeIamMemberOutput
}

func (*LakeIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**LakeIamMember)(nil)).Elem()
}

func (i *LakeIamMember) ToLakeIamMemberOutput() LakeIamMemberOutput {
	return i.ToLakeIamMemberOutputWithContext(context.Background())
}

func (i *LakeIamMember) ToLakeIamMemberOutputWithContext(ctx context.Context) LakeIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeIamMemberOutput)
}

// LakeIamMemberArrayInput is an input type that accepts LakeIamMemberArray and LakeIamMemberArrayOutput values.
// You can construct a concrete instance of `LakeIamMemberArrayInput` via:
//
//	LakeIamMemberArray{ LakeIamMemberArgs{...} }
type LakeIamMemberArrayInput interface {
	pulumi.Input

	ToLakeIamMemberArrayOutput() LakeIamMemberArrayOutput
	ToLakeIamMemberArrayOutputWithContext(context.Context) LakeIamMemberArrayOutput
}

type LakeIamMemberArray []LakeIamMemberInput

func (LakeIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LakeIamMember)(nil)).Elem()
}

func (i LakeIamMemberArray) ToLakeIamMemberArrayOutput() LakeIamMemberArrayOutput {
	return i.ToLakeIamMemberArrayOutputWithContext(context.Background())
}

func (i LakeIamMemberArray) ToLakeIamMemberArrayOutputWithContext(ctx context.Context) LakeIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeIamMemberArrayOutput)
}

// LakeIamMemberMapInput is an input type that accepts LakeIamMemberMap and LakeIamMemberMapOutput values.
// You can construct a concrete instance of `LakeIamMemberMapInput` via:
//
//	LakeIamMemberMap{ "key": LakeIamMemberArgs{...} }
type LakeIamMemberMapInput interface {
	pulumi.Input

	ToLakeIamMemberMapOutput() LakeIamMemberMapOutput
	ToLakeIamMemberMapOutputWithContext(context.Context) LakeIamMemberMapOutput
}

type LakeIamMemberMap map[string]LakeIamMemberInput

func (LakeIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LakeIamMember)(nil)).Elem()
}

func (i LakeIamMemberMap) ToLakeIamMemberMapOutput() LakeIamMemberMapOutput {
	return i.ToLakeIamMemberMapOutputWithContext(context.Background())
}

func (i LakeIamMemberMap) ToLakeIamMemberMapOutputWithContext(ctx context.Context) LakeIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeIamMemberMapOutput)
}

type LakeIamMemberOutput struct{ *pulumi.OutputState }

func (LakeIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LakeIamMember)(nil)).Elem()
}

func (o LakeIamMemberOutput) ToLakeIamMemberOutput() LakeIamMemberOutput {
	return o
}

func (o LakeIamMemberOutput) ToLakeIamMemberOutputWithContext(ctx context.Context) LakeIamMemberOutput {
	return o
}

func (o LakeIamMemberOutput) Condition() LakeIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *LakeIamMember) LakeIamMemberConditionPtrOutput { return v.Condition }).(LakeIamMemberConditionPtrOutput)
}

func (o LakeIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o LakeIamMemberOutput) Lake() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeIamMember) pulumi.StringOutput { return v.Lake }).(pulumi.StringOutput)
}

func (o LakeIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o LakeIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o LakeIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o LakeIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type LakeIamMemberArrayOutput struct{ *pulumi.OutputState }

func (LakeIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LakeIamMember)(nil)).Elem()
}

func (o LakeIamMemberArrayOutput) ToLakeIamMemberArrayOutput() LakeIamMemberArrayOutput {
	return o
}

func (o LakeIamMemberArrayOutput) ToLakeIamMemberArrayOutputWithContext(ctx context.Context) LakeIamMemberArrayOutput {
	return o
}

func (o LakeIamMemberArrayOutput) Index(i pulumi.IntInput) LakeIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LakeIamMember {
		return vs[0].([]*LakeIamMember)[vs[1].(int)]
	}).(LakeIamMemberOutput)
}

type LakeIamMemberMapOutput struct{ *pulumi.OutputState }

func (LakeIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LakeIamMember)(nil)).Elem()
}

func (o LakeIamMemberMapOutput) ToLakeIamMemberMapOutput() LakeIamMemberMapOutput {
	return o
}

func (o LakeIamMemberMapOutput) ToLakeIamMemberMapOutputWithContext(ctx context.Context) LakeIamMemberMapOutput {
	return o
}

func (o LakeIamMemberMapOutput) MapIndex(k pulumi.StringInput) LakeIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LakeIamMember {
		return vs[0].(map[string]*LakeIamMember)[vs[1].(string)]
	}).(LakeIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LakeIamMemberInput)(nil)).Elem(), &LakeIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*LakeIamMemberArrayInput)(nil)).Elem(), LakeIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LakeIamMemberMapInput)(nil)).Elem(), LakeIamMemberMap{})
	pulumi.RegisterOutputType(LakeIamMemberOutput{})
	pulumi.RegisterOutputType(LakeIamMemberArrayOutput{})
	pulumi.RegisterOutputType(LakeIamMemberMapOutput{})
}
