// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LakeIamBinding struct {
	pulumi.CustomResourceState

	Condition LakeIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag      pulumi.StringOutput              `pulumi:"etag"`
	Lake      pulumi.StringOutput              `pulumi:"lake"`
	Location  pulumi.StringOutput              `pulumi:"location"`
	Members   pulumi.StringArrayOutput         `pulumi:"members"`
	Project   pulumi.StringOutput              `pulumi:"project"`
	Role      pulumi.StringOutput              `pulumi:"role"`
}

// NewLakeIamBinding registers a new resource with the given unique name, arguments, and options.
func NewLakeIamBinding(ctx *pulumi.Context,
	name string, args *LakeIamBindingArgs, opts ...pulumi.ResourceOption) (*LakeIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Lake == nil {
		return nil, errors.New("invalid value for required argument 'Lake'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource LakeIamBinding
	err := ctx.RegisterResource("gcp:dataplex/lakeIamBinding:LakeIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLakeIamBinding gets an existing LakeIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLakeIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LakeIamBindingState, opts ...pulumi.ResourceOption) (*LakeIamBinding, error) {
	var resource LakeIamBinding
	err := ctx.ReadResource("gcp:dataplex/lakeIamBinding:LakeIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LakeIamBinding resources.
type lakeIamBindingState struct {
	Condition *LakeIamBindingCondition `pulumi:"condition"`
	Etag      *string                  `pulumi:"etag"`
	Lake      *string                  `pulumi:"lake"`
	Location  *string                  `pulumi:"location"`
	Members   []string                 `pulumi:"members"`
	Project   *string                  `pulumi:"project"`
	Role      *string                  `pulumi:"role"`
}

type LakeIamBindingState struct {
	Condition LakeIamBindingConditionPtrInput
	Etag      pulumi.StringPtrInput
	Lake      pulumi.StringPtrInput
	Location  pulumi.StringPtrInput
	Members   pulumi.StringArrayInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringPtrInput
}

func (LakeIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*lakeIamBindingState)(nil)).Elem()
}

type lakeIamBindingArgs struct {
	Condition *LakeIamBindingCondition `pulumi:"condition"`
	Lake      string                   `pulumi:"lake"`
	Location  *string                  `pulumi:"location"`
	Members   []string                 `pulumi:"members"`
	Project   *string                  `pulumi:"project"`
	Role      string                   `pulumi:"role"`
}

// The set of arguments for constructing a LakeIamBinding resource.
type LakeIamBindingArgs struct {
	Condition LakeIamBindingConditionPtrInput
	Lake      pulumi.StringInput
	Location  pulumi.StringPtrInput
	Members   pulumi.StringArrayInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringInput
}

func (LakeIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lakeIamBindingArgs)(nil)).Elem()
}

type LakeIamBindingInput interface {
	pulumi.Input

	ToLakeIamBindingOutput() LakeIamBindingOutput
	ToLakeIamBindingOutputWithContext(ctx context.Context) LakeIamBindingOutput
}

func (*LakeIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**LakeIamBinding)(nil)).Elem()
}

func (i *LakeIamBinding) ToLakeIamBindingOutput() LakeIamBindingOutput {
	return i.ToLakeIamBindingOutputWithContext(context.Background())
}

func (i *LakeIamBinding) ToLakeIamBindingOutputWithContext(ctx context.Context) LakeIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeIamBindingOutput)
}

// LakeIamBindingArrayInput is an input type that accepts LakeIamBindingArray and LakeIamBindingArrayOutput values.
// You can construct a concrete instance of `LakeIamBindingArrayInput` via:
//
//	LakeIamBindingArray{ LakeIamBindingArgs{...} }
type LakeIamBindingArrayInput interface {
	pulumi.Input

	ToLakeIamBindingArrayOutput() LakeIamBindingArrayOutput
	ToLakeIamBindingArrayOutputWithContext(context.Context) LakeIamBindingArrayOutput
}

type LakeIamBindingArray []LakeIamBindingInput

func (LakeIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LakeIamBinding)(nil)).Elem()
}

func (i LakeIamBindingArray) ToLakeIamBindingArrayOutput() LakeIamBindingArrayOutput {
	return i.ToLakeIamBindingArrayOutputWithContext(context.Background())
}

func (i LakeIamBindingArray) ToLakeIamBindingArrayOutputWithContext(ctx context.Context) LakeIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeIamBindingArrayOutput)
}

// LakeIamBindingMapInput is an input type that accepts LakeIamBindingMap and LakeIamBindingMapOutput values.
// You can construct a concrete instance of `LakeIamBindingMapInput` via:
//
//	LakeIamBindingMap{ "key": LakeIamBindingArgs{...} }
type LakeIamBindingMapInput interface {
	pulumi.Input

	ToLakeIamBindingMapOutput() LakeIamBindingMapOutput
	ToLakeIamBindingMapOutputWithContext(context.Context) LakeIamBindingMapOutput
}

type LakeIamBindingMap map[string]LakeIamBindingInput

func (LakeIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LakeIamBinding)(nil)).Elem()
}

func (i LakeIamBindingMap) ToLakeIamBindingMapOutput() LakeIamBindingMapOutput {
	return i.ToLakeIamBindingMapOutputWithContext(context.Background())
}

func (i LakeIamBindingMap) ToLakeIamBindingMapOutputWithContext(ctx context.Context) LakeIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeIamBindingMapOutput)
}

type LakeIamBindingOutput struct{ *pulumi.OutputState }

func (LakeIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LakeIamBinding)(nil)).Elem()
}

func (o LakeIamBindingOutput) ToLakeIamBindingOutput() LakeIamBindingOutput {
	return o
}

func (o LakeIamBindingOutput) ToLakeIamBindingOutputWithContext(ctx context.Context) LakeIamBindingOutput {
	return o
}

func (o LakeIamBindingOutput) Condition() LakeIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *LakeIamBinding) LakeIamBindingConditionPtrOutput { return v.Condition }).(LakeIamBindingConditionPtrOutput)
}

func (o LakeIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o LakeIamBindingOutput) Lake() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeIamBinding) pulumi.StringOutput { return v.Lake }).(pulumi.StringOutput)
}

func (o LakeIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o LakeIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LakeIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o LakeIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o LakeIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type LakeIamBindingArrayOutput struct{ *pulumi.OutputState }

func (LakeIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LakeIamBinding)(nil)).Elem()
}

func (o LakeIamBindingArrayOutput) ToLakeIamBindingArrayOutput() LakeIamBindingArrayOutput {
	return o
}

func (o LakeIamBindingArrayOutput) ToLakeIamBindingArrayOutputWithContext(ctx context.Context) LakeIamBindingArrayOutput {
	return o
}

func (o LakeIamBindingArrayOutput) Index(i pulumi.IntInput) LakeIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LakeIamBinding {
		return vs[0].([]*LakeIamBinding)[vs[1].(int)]
	}).(LakeIamBindingOutput)
}

type LakeIamBindingMapOutput struct{ *pulumi.OutputState }

func (LakeIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LakeIamBinding)(nil)).Elem()
}

func (o LakeIamBindingMapOutput) ToLakeIamBindingMapOutput() LakeIamBindingMapOutput {
	return o
}

func (o LakeIamBindingMapOutput) ToLakeIamBindingMapOutputWithContext(ctx context.Context) LakeIamBindingMapOutput {
	return o
}

func (o LakeIamBindingMapOutput) MapIndex(k pulumi.StringInput) LakeIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LakeIamBinding {
		return vs[0].(map[string]*LakeIamBinding)[vs[1].(string)]
	}).(LakeIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LakeIamBindingInput)(nil)).Elem(), &LakeIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*LakeIamBindingArrayInput)(nil)).Elem(), LakeIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LakeIamBindingMapInput)(nil)).Elem(), LakeIamBindingMap{})
	pulumi.RegisterOutputType(LakeIamBindingOutput{})
	pulumi.RegisterOutputType(LakeIamBindingArrayOutput{})
	pulumi.RegisterOutputType(LakeIamBindingMapOutput{})
}
