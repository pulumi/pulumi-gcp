// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AssetIamMember struct {
	pulumi.CustomResourceState

	Asset        pulumi.StringOutput              `pulumi:"asset"`
	Condition    AssetIamMemberConditionPtrOutput `pulumi:"condition"`
	DataplexZone pulumi.StringOutput              `pulumi:"dataplexZone"`
	Etag         pulumi.StringOutput              `pulumi:"etag"`
	Lake         pulumi.StringOutput              `pulumi:"lake"`
	Location     pulumi.StringOutput              `pulumi:"location"`
	Member       pulumi.StringOutput              `pulumi:"member"`
	Project      pulumi.StringOutput              `pulumi:"project"`
	Role         pulumi.StringOutput              `pulumi:"role"`
}

// NewAssetIamMember registers a new resource with the given unique name, arguments, and options.
func NewAssetIamMember(ctx *pulumi.Context,
	name string, args *AssetIamMemberArgs, opts ...pulumi.ResourceOption) (*AssetIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Asset == nil {
		return nil, errors.New("invalid value for required argument 'Asset'")
	}
	if args.DataplexZone == nil {
		return nil, errors.New("invalid value for required argument 'DataplexZone'")
	}
	if args.Lake == nil {
		return nil, errors.New("invalid value for required argument 'Lake'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource AssetIamMember
	err := ctx.RegisterResource("gcp:dataplex/assetIamMember:AssetIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssetIamMember gets an existing AssetIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssetIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssetIamMemberState, opts ...pulumi.ResourceOption) (*AssetIamMember, error) {
	var resource AssetIamMember
	err := ctx.ReadResource("gcp:dataplex/assetIamMember:AssetIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssetIamMember resources.
type assetIamMemberState struct {
	Asset        *string                  `pulumi:"asset"`
	Condition    *AssetIamMemberCondition `pulumi:"condition"`
	DataplexZone *string                  `pulumi:"dataplexZone"`
	Etag         *string                  `pulumi:"etag"`
	Lake         *string                  `pulumi:"lake"`
	Location     *string                  `pulumi:"location"`
	Member       *string                  `pulumi:"member"`
	Project      *string                  `pulumi:"project"`
	Role         *string                  `pulumi:"role"`
}

type AssetIamMemberState struct {
	Asset        pulumi.StringPtrInput
	Condition    AssetIamMemberConditionPtrInput
	DataplexZone pulumi.StringPtrInput
	Etag         pulumi.StringPtrInput
	Lake         pulumi.StringPtrInput
	Location     pulumi.StringPtrInput
	Member       pulumi.StringPtrInput
	Project      pulumi.StringPtrInput
	Role         pulumi.StringPtrInput
}

func (AssetIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*assetIamMemberState)(nil)).Elem()
}

type assetIamMemberArgs struct {
	Asset        string                   `pulumi:"asset"`
	Condition    *AssetIamMemberCondition `pulumi:"condition"`
	DataplexZone string                   `pulumi:"dataplexZone"`
	Lake         string                   `pulumi:"lake"`
	Location     *string                  `pulumi:"location"`
	Member       string                   `pulumi:"member"`
	Project      *string                  `pulumi:"project"`
	Role         string                   `pulumi:"role"`
}

// The set of arguments for constructing a AssetIamMember resource.
type AssetIamMemberArgs struct {
	Asset        pulumi.StringInput
	Condition    AssetIamMemberConditionPtrInput
	DataplexZone pulumi.StringInput
	Lake         pulumi.StringInput
	Location     pulumi.StringPtrInput
	Member       pulumi.StringInput
	Project      pulumi.StringPtrInput
	Role         pulumi.StringInput
}

func (AssetIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assetIamMemberArgs)(nil)).Elem()
}

type AssetIamMemberInput interface {
	pulumi.Input

	ToAssetIamMemberOutput() AssetIamMemberOutput
	ToAssetIamMemberOutputWithContext(ctx context.Context) AssetIamMemberOutput
}

func (*AssetIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetIamMember)(nil)).Elem()
}

func (i *AssetIamMember) ToAssetIamMemberOutput() AssetIamMemberOutput {
	return i.ToAssetIamMemberOutputWithContext(context.Background())
}

func (i *AssetIamMember) ToAssetIamMemberOutputWithContext(ctx context.Context) AssetIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetIamMemberOutput)
}

// AssetIamMemberArrayInput is an input type that accepts AssetIamMemberArray and AssetIamMemberArrayOutput values.
// You can construct a concrete instance of `AssetIamMemberArrayInput` via:
//
//	AssetIamMemberArray{ AssetIamMemberArgs{...} }
type AssetIamMemberArrayInput interface {
	pulumi.Input

	ToAssetIamMemberArrayOutput() AssetIamMemberArrayOutput
	ToAssetIamMemberArrayOutputWithContext(context.Context) AssetIamMemberArrayOutput
}

type AssetIamMemberArray []AssetIamMemberInput

func (AssetIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssetIamMember)(nil)).Elem()
}

func (i AssetIamMemberArray) ToAssetIamMemberArrayOutput() AssetIamMemberArrayOutput {
	return i.ToAssetIamMemberArrayOutputWithContext(context.Background())
}

func (i AssetIamMemberArray) ToAssetIamMemberArrayOutputWithContext(ctx context.Context) AssetIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetIamMemberArrayOutput)
}

// AssetIamMemberMapInput is an input type that accepts AssetIamMemberMap and AssetIamMemberMapOutput values.
// You can construct a concrete instance of `AssetIamMemberMapInput` via:
//
//	AssetIamMemberMap{ "key": AssetIamMemberArgs{...} }
type AssetIamMemberMapInput interface {
	pulumi.Input

	ToAssetIamMemberMapOutput() AssetIamMemberMapOutput
	ToAssetIamMemberMapOutputWithContext(context.Context) AssetIamMemberMapOutput
}

type AssetIamMemberMap map[string]AssetIamMemberInput

func (AssetIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssetIamMember)(nil)).Elem()
}

func (i AssetIamMemberMap) ToAssetIamMemberMapOutput() AssetIamMemberMapOutput {
	return i.ToAssetIamMemberMapOutputWithContext(context.Background())
}

func (i AssetIamMemberMap) ToAssetIamMemberMapOutputWithContext(ctx context.Context) AssetIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetIamMemberMapOutput)
}

type AssetIamMemberOutput struct{ *pulumi.OutputState }

func (AssetIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetIamMember)(nil)).Elem()
}

func (o AssetIamMemberOutput) ToAssetIamMemberOutput() AssetIamMemberOutput {
	return o
}

func (o AssetIamMemberOutput) ToAssetIamMemberOutputWithContext(ctx context.Context) AssetIamMemberOutput {
	return o
}

func (o AssetIamMemberOutput) Asset() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamMember) pulumi.StringOutput { return v.Asset }).(pulumi.StringOutput)
}

func (o AssetIamMemberOutput) Condition() AssetIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *AssetIamMember) AssetIamMemberConditionPtrOutput { return v.Condition }).(AssetIamMemberConditionPtrOutput)
}

func (o AssetIamMemberOutput) DataplexZone() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamMember) pulumi.StringOutput { return v.DataplexZone }).(pulumi.StringOutput)
}

func (o AssetIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o AssetIamMemberOutput) Lake() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamMember) pulumi.StringOutput { return v.Lake }).(pulumi.StringOutput)
}

func (o AssetIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o AssetIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o AssetIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o AssetIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type AssetIamMemberArrayOutput struct{ *pulumi.OutputState }

func (AssetIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssetIamMember)(nil)).Elem()
}

func (o AssetIamMemberArrayOutput) ToAssetIamMemberArrayOutput() AssetIamMemberArrayOutput {
	return o
}

func (o AssetIamMemberArrayOutput) ToAssetIamMemberArrayOutputWithContext(ctx context.Context) AssetIamMemberArrayOutput {
	return o
}

func (o AssetIamMemberArrayOutput) Index(i pulumi.IntInput) AssetIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssetIamMember {
		return vs[0].([]*AssetIamMember)[vs[1].(int)]
	}).(AssetIamMemberOutput)
}

type AssetIamMemberMapOutput struct{ *pulumi.OutputState }

func (AssetIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssetIamMember)(nil)).Elem()
}

func (o AssetIamMemberMapOutput) ToAssetIamMemberMapOutput() AssetIamMemberMapOutput {
	return o
}

func (o AssetIamMemberMapOutput) ToAssetIamMemberMapOutputWithContext(ctx context.Context) AssetIamMemberMapOutput {
	return o
}

func (o AssetIamMemberMapOutput) MapIndex(k pulumi.StringInput) AssetIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssetIamMember {
		return vs[0].(map[string]*AssetIamMember)[vs[1].(string)]
	}).(AssetIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssetIamMemberInput)(nil)).Elem(), &AssetIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetIamMemberArrayInput)(nil)).Elem(), AssetIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetIamMemberMapInput)(nil)).Elem(), AssetIamMemberMap{})
	pulumi.RegisterOutputType(AssetIamMemberOutput{})
	pulumi.RegisterOutputType(AssetIamMemberArrayOutput{})
	pulumi.RegisterOutputType(AssetIamMemberMapOutput{})
}
