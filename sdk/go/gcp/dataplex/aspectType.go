// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Aspect Type is a template for creating Aspects.
//
// ## Example Usage
//
// ### Dataplex Aspect Type Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewAspectType(ctx, "test_aspect_type_basic", &dataplex.AspectTypeArgs{
//				AspectTypeId: pulumi.String("aspect-type-basic"),
//				Project:      pulumi.String("my-project-name"),
//				Location:     pulumi.String("us-central1"),
//				MetadataTemplate: pulumi.String(`{
//	  "name": "tf-test-template",
//	  "type": "record",
//	  "recordFields": [
//	    {
//	      "name": "type",
//	      "type": "enum",
//	      "annotations": {
//	        "displayName": "Type",
//	        "description": "Specifies the type of view represented by the entry."
//	      },
//	      "index": 1,
//	      "constraints": {
//	        "required": true
//	      },
//	      "enumValues": [
//	        {
//	          "name": "VIEW",
//	          "index": 1
//	        }
//	      ]
//	    }
//	  ]
//	}
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Dataplex Aspect Type Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewAspectType(ctx, "test_aspect_type_full", &dataplex.AspectTypeArgs{
//				AspectTypeId: pulumi.String("aspect-type-full"),
//				Project:      pulumi.String("my-project-name"),
//				Location:     pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"tag": pulumi.String("test-tf"),
//				},
//				DisplayName: pulumi.String("terraform aspect type"),
//				Description: pulumi.String("aspect type created by Terraform"),
//				MetadataTemplate: pulumi.String(`{
//	  "type": "record",
//	  "name": "Schema",
//	  "recordFields": [
//	    {
//	      "name": "fields",
//	      "type": "array",
//	      "index": 1,
//	      "arrayItems": {
//	        "name": "field",
//	        "type": "record",
//	        "typeId": "field",
//	        "recordFields": [
//	          {
//	            "name": "name",
//	            "type": "string",
//	            "index": 1,
//	            "constraints": {
//	              "required": true
//	            }
//	          },
//	          {
//	            "name": "description",
//	            "type": "string",
//	            "index": 2
//	          },
//	          {
//	            "name": "dataType",
//	            "type": "string",
//	            "index": 3,
//	            "constraints": {
//	              "required": true
//	            }
//	          },
//	          {
//	            "name": "metadataType",
//	            "type": "enum",
//	            "index": 4,
//	            "constraints": {
//	              "required": true
//	            },
//	            "enumValues": [
//	              {
//	                "name": "BOOLEAN",
//	                "index": 1
//	              },
//	              {
//	                "name": "NUMBER",
//	                "index": 2
//	              },
//	              {
//	                "name": "STRING",
//	                "index": 3
//	              },
//	              {
//	                "name": "BYTES",
//	                "index": 4
//	              },
//	              {
//	                "name": "DATETIME",
//	                "index": 5
//	              },
//	              {
//	                "name": "TIMESTAMP",
//	                "index": 6
//	              },
//	              {
//	                "name": "GEOSPATIAL",
//	                "index": 7
//	              },
//	              {
//	                "name": "STRUCT",
//	                "index": 8
//	              },
//	              {
//	                "name": "OTHER",
//	                "index": 100
//	              }
//	            ]
//	          },
//	          {
//	            "name": "mode",
//	            "type": "enum",
//	            "index": 5,
//	            "enumValues": [
//	              {
//	                "name": "NULLABLE",
//	                "index": 1
//	              },
//	              {
//	                "name": "REPEATED",
//	                "index": 2
//	              },
//	              {
//	                "name": "REQUIRED",
//	                "index": 3
//	              }
//	            ]
//	          },
//	          {
//	            "name": "defaultValue",
//	            "type": "string",
//	            "index": 6
//	          },
//	          {
//	            "name": "annotations",
//	            "type": "map",
//	            "index": 7,
//	            "mapItems": {
//	              "name": "label",
//	              "type": "string"
//	            }
//	          },
//	          {
//	            "name": "fields",
//	            "type": "array",
//	            "index": 20,
//	            "arrayItems": {
//	              "name": "field",
//	              "type": "record",
//	              "typeRef": "field"
//	            }
//	          }
//	        ]
//	      }
//	    }
//	  ]
//	}
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AspectType can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/aspectTypes/{{aspect_type_id}}`
//
// * `{{project}}/{{location}}/{{aspect_type_id}}`
//
// * `{{location}}/{{aspect_type_id}}`
//
// When using the `pulumi import` command, AspectType can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:dataplex/aspectType:AspectType default projects/{{project}}/locations/{{location}}/aspectTypes/{{aspect_type_id}}
// ```
//
// ```sh
// $ pulumi import gcp:dataplex/aspectType:AspectType default {{project}}/{{location}}/{{aspect_type_id}}
// ```
//
// ```sh
// $ pulumi import gcp:dataplex/aspectType:AspectType default {{location}}/{{aspect_type_id}}
// ```
type AspectType struct {
	pulumi.CustomResourceState

	// The aspect type id of the aspect type.
	AspectTypeId pulumi.StringPtrOutput `pulumi:"aspectTypeId"`
	// The time when the AspectType was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the AspectType.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User friendly display name.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// User-defined labels for the AspectType.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location where aspect type will be created in.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// MetadataTemplate of the Aspect.
	MetadataTemplate pulumi.StringPtrOutput `pulumi:"metadataTemplate"`
	// The relative resource name of the AspectType, of the form: projects/{project_number}/locations/{location_id}/aspectTypes/{aspect_type_id}
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Denotes the transfer status of the Aspect Type. It is unspecified
	// for Aspect Type created from Dataplex API.
	TransferStatus pulumi.StringOutput `pulumi:"transferStatus"`
	// System generated globally unique ID for the AspectType. This ID will be different if the AspectType is deleted and re-created with the same name.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The time when the AspectType was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAspectType registers a new resource with the given unique name, arguments, and options.
func NewAspectType(ctx *pulumi.Context,
	name string, args *AspectTypeArgs, opts ...pulumi.ResourceOption) (*AspectType, error) {
	if args == nil {
		args = &AspectTypeArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AspectType
	err := ctx.RegisterResource("gcp:dataplex/aspectType:AspectType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAspectType gets an existing AspectType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAspectType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AspectTypeState, opts ...pulumi.ResourceOption) (*AspectType, error) {
	var resource AspectType
	err := ctx.ReadResource("gcp:dataplex/aspectType:AspectType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AspectType resources.
type aspectTypeState struct {
	// The aspect type id of the aspect type.
	AspectTypeId *string `pulumi:"aspectTypeId"`
	// The time when the AspectType was created.
	CreateTime *string `pulumi:"createTime"`
	// Description of the AspectType.
	Description *string `pulumi:"description"`
	// User friendly display name.
	DisplayName *string `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// User-defined labels for the AspectType.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location where aspect type will be created in.
	Location *string `pulumi:"location"`
	// MetadataTemplate of the Aspect.
	MetadataTemplate *string `pulumi:"metadataTemplate"`
	// The relative resource name of the AspectType, of the form: projects/{project_number}/locations/{location_id}/aspectTypes/{aspect_type_id}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Denotes the transfer status of the Aspect Type. It is unspecified
	// for Aspect Type created from Dataplex API.
	TransferStatus *string `pulumi:"transferStatus"`
	// System generated globally unique ID for the AspectType. This ID will be different if the AspectType is deleted and re-created with the same name.
	Uid *string `pulumi:"uid"`
	// The time when the AspectType was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type AspectTypeState struct {
	// The aspect type id of the aspect type.
	AspectTypeId pulumi.StringPtrInput
	// The time when the AspectType was created.
	CreateTime pulumi.StringPtrInput
	// Description of the AspectType.
	Description pulumi.StringPtrInput
	// User friendly display name.
	DisplayName pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// User-defined labels for the AspectType.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location where aspect type will be created in.
	Location pulumi.StringPtrInput
	// MetadataTemplate of the Aspect.
	MetadataTemplate pulumi.StringPtrInput
	// The relative resource name of the AspectType, of the form: projects/{project_number}/locations/{location_id}/aspectTypes/{aspect_type_id}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Denotes the transfer status of the Aspect Type. It is unspecified
	// for Aspect Type created from Dataplex API.
	TransferStatus pulumi.StringPtrInput
	// System generated globally unique ID for the AspectType. This ID will be different if the AspectType is deleted and re-created with the same name.
	Uid pulumi.StringPtrInput
	// The time when the AspectType was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (AspectTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*aspectTypeState)(nil)).Elem()
}

type aspectTypeArgs struct {
	// The aspect type id of the aspect type.
	AspectTypeId *string `pulumi:"aspectTypeId"`
	// Description of the AspectType.
	Description *string `pulumi:"description"`
	// User friendly display name.
	DisplayName *string `pulumi:"displayName"`
	// User-defined labels for the AspectType.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location where aspect type will be created in.
	Location *string `pulumi:"location"`
	// MetadataTemplate of the Aspect.
	MetadataTemplate *string `pulumi:"metadataTemplate"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a AspectType resource.
type AspectTypeArgs struct {
	// The aspect type id of the aspect type.
	AspectTypeId pulumi.StringPtrInput
	// Description of the AspectType.
	Description pulumi.StringPtrInput
	// User friendly display name.
	DisplayName pulumi.StringPtrInput
	// User-defined labels for the AspectType.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location where aspect type will be created in.
	Location pulumi.StringPtrInput
	// MetadataTemplate of the Aspect.
	MetadataTemplate pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (AspectTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aspectTypeArgs)(nil)).Elem()
}

type AspectTypeInput interface {
	pulumi.Input

	ToAspectTypeOutput() AspectTypeOutput
	ToAspectTypeOutputWithContext(ctx context.Context) AspectTypeOutput
}

func (*AspectType) ElementType() reflect.Type {
	return reflect.TypeOf((**AspectType)(nil)).Elem()
}

func (i *AspectType) ToAspectTypeOutput() AspectTypeOutput {
	return i.ToAspectTypeOutputWithContext(context.Background())
}

func (i *AspectType) ToAspectTypeOutputWithContext(ctx context.Context) AspectTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AspectTypeOutput)
}

// AspectTypeArrayInput is an input type that accepts AspectTypeArray and AspectTypeArrayOutput values.
// You can construct a concrete instance of `AspectTypeArrayInput` via:
//
//	AspectTypeArray{ AspectTypeArgs{...} }
type AspectTypeArrayInput interface {
	pulumi.Input

	ToAspectTypeArrayOutput() AspectTypeArrayOutput
	ToAspectTypeArrayOutputWithContext(context.Context) AspectTypeArrayOutput
}

type AspectTypeArray []AspectTypeInput

func (AspectTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AspectType)(nil)).Elem()
}

func (i AspectTypeArray) ToAspectTypeArrayOutput() AspectTypeArrayOutput {
	return i.ToAspectTypeArrayOutputWithContext(context.Background())
}

func (i AspectTypeArray) ToAspectTypeArrayOutputWithContext(ctx context.Context) AspectTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AspectTypeArrayOutput)
}

// AspectTypeMapInput is an input type that accepts AspectTypeMap and AspectTypeMapOutput values.
// You can construct a concrete instance of `AspectTypeMapInput` via:
//
//	AspectTypeMap{ "key": AspectTypeArgs{...} }
type AspectTypeMapInput interface {
	pulumi.Input

	ToAspectTypeMapOutput() AspectTypeMapOutput
	ToAspectTypeMapOutputWithContext(context.Context) AspectTypeMapOutput
}

type AspectTypeMap map[string]AspectTypeInput

func (AspectTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AspectType)(nil)).Elem()
}

func (i AspectTypeMap) ToAspectTypeMapOutput() AspectTypeMapOutput {
	return i.ToAspectTypeMapOutputWithContext(context.Background())
}

func (i AspectTypeMap) ToAspectTypeMapOutputWithContext(ctx context.Context) AspectTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AspectTypeMapOutput)
}

type AspectTypeOutput struct{ *pulumi.OutputState }

func (AspectTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AspectType)(nil)).Elem()
}

func (o AspectTypeOutput) ToAspectTypeOutput() AspectTypeOutput {
	return o
}

func (o AspectTypeOutput) ToAspectTypeOutputWithContext(ctx context.Context) AspectTypeOutput {
	return o
}

// The aspect type id of the aspect type.
func (o AspectTypeOutput) AspectTypeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AspectType) pulumi.StringPtrOutput { return v.AspectTypeId }).(pulumi.StringPtrOutput)
}

// The time when the AspectType was created.
func (o AspectTypeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AspectType) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the AspectType.
func (o AspectTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AspectType) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// User friendly display name.
func (o AspectTypeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AspectType) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o AspectTypeOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AspectType) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// User-defined labels for the AspectType.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o AspectTypeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AspectType) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location where aspect type will be created in.
func (o AspectTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AspectType) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// MetadataTemplate of the Aspect.
func (o AspectTypeOutput) MetadataTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AspectType) pulumi.StringPtrOutput { return v.MetadataTemplate }).(pulumi.StringPtrOutput)
}

// The relative resource name of the AspectType, of the form: projects/{project_number}/locations/{location_id}/aspectTypes/{aspect_type_id}
func (o AspectTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AspectType) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AspectTypeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AspectType) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o AspectTypeOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AspectType) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Denotes the transfer status of the Aspect Type. It is unspecified
// for Aspect Type created from Dataplex API.
func (o AspectTypeOutput) TransferStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *AspectType) pulumi.StringOutput { return v.TransferStatus }).(pulumi.StringOutput)
}

// System generated globally unique ID for the AspectType. This ID will be different if the AspectType is deleted and re-created with the same name.
func (o AspectTypeOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *AspectType) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The time when the AspectType was last updated.
func (o AspectTypeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AspectType) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AspectTypeArrayOutput struct{ *pulumi.OutputState }

func (AspectTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AspectType)(nil)).Elem()
}

func (o AspectTypeArrayOutput) ToAspectTypeArrayOutput() AspectTypeArrayOutput {
	return o
}

func (o AspectTypeArrayOutput) ToAspectTypeArrayOutputWithContext(ctx context.Context) AspectTypeArrayOutput {
	return o
}

func (o AspectTypeArrayOutput) Index(i pulumi.IntInput) AspectTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AspectType {
		return vs[0].([]*AspectType)[vs[1].(int)]
	}).(AspectTypeOutput)
}

type AspectTypeMapOutput struct{ *pulumi.OutputState }

func (AspectTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AspectType)(nil)).Elem()
}

func (o AspectTypeMapOutput) ToAspectTypeMapOutput() AspectTypeMapOutput {
	return o
}

func (o AspectTypeMapOutput) ToAspectTypeMapOutputWithContext(ctx context.Context) AspectTypeMapOutput {
	return o
}

func (o AspectTypeMapOutput) MapIndex(k pulumi.StringInput) AspectTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AspectType {
		return vs[0].(map[string]*AspectType)[vs[1].(string)]
	}).(AspectTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AspectTypeInput)(nil)).Elem(), &AspectType{})
	pulumi.RegisterInputType(reflect.TypeOf((*AspectTypeArrayInput)(nil)).Elem(), AspectTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AspectTypeMapInput)(nil)).Elem(), AspectTypeMap{})
	pulumi.RegisterOutputType(AspectTypeOutput{})
	pulumi.RegisterOutputType(AspectTypeArrayOutput{})
	pulumi.RegisterOutputType(AspectTypeMapOutput{})
}
