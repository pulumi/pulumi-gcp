// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AssetIamBinding struct {
	pulumi.CustomResourceState

	Asset        pulumi.StringOutput               `pulumi:"asset"`
	Condition    AssetIamBindingConditionPtrOutput `pulumi:"condition"`
	DataplexZone pulumi.StringOutput               `pulumi:"dataplexZone"`
	Etag         pulumi.StringOutput               `pulumi:"etag"`
	Lake         pulumi.StringOutput               `pulumi:"lake"`
	Location     pulumi.StringOutput               `pulumi:"location"`
	Members      pulumi.StringArrayOutput          `pulumi:"members"`
	Project      pulumi.StringOutput               `pulumi:"project"`
	Role         pulumi.StringOutput               `pulumi:"role"`
}

// NewAssetIamBinding registers a new resource with the given unique name, arguments, and options.
func NewAssetIamBinding(ctx *pulumi.Context,
	name string, args *AssetIamBindingArgs, opts ...pulumi.ResourceOption) (*AssetIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Asset == nil {
		return nil, errors.New("invalid value for required argument 'Asset'")
	}
	if args.DataplexZone == nil {
		return nil, errors.New("invalid value for required argument 'DataplexZone'")
	}
	if args.Lake == nil {
		return nil, errors.New("invalid value for required argument 'Lake'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource AssetIamBinding
	err := ctx.RegisterResource("gcp:dataplex/assetIamBinding:AssetIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssetIamBinding gets an existing AssetIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssetIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssetIamBindingState, opts ...pulumi.ResourceOption) (*AssetIamBinding, error) {
	var resource AssetIamBinding
	err := ctx.ReadResource("gcp:dataplex/assetIamBinding:AssetIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssetIamBinding resources.
type assetIamBindingState struct {
	Asset        *string                   `pulumi:"asset"`
	Condition    *AssetIamBindingCondition `pulumi:"condition"`
	DataplexZone *string                   `pulumi:"dataplexZone"`
	Etag         *string                   `pulumi:"etag"`
	Lake         *string                   `pulumi:"lake"`
	Location     *string                   `pulumi:"location"`
	Members      []string                  `pulumi:"members"`
	Project      *string                   `pulumi:"project"`
	Role         *string                   `pulumi:"role"`
}

type AssetIamBindingState struct {
	Asset        pulumi.StringPtrInput
	Condition    AssetIamBindingConditionPtrInput
	DataplexZone pulumi.StringPtrInput
	Etag         pulumi.StringPtrInput
	Lake         pulumi.StringPtrInput
	Location     pulumi.StringPtrInput
	Members      pulumi.StringArrayInput
	Project      pulumi.StringPtrInput
	Role         pulumi.StringPtrInput
}

func (AssetIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*assetIamBindingState)(nil)).Elem()
}

type assetIamBindingArgs struct {
	Asset        string                    `pulumi:"asset"`
	Condition    *AssetIamBindingCondition `pulumi:"condition"`
	DataplexZone string                    `pulumi:"dataplexZone"`
	Lake         string                    `pulumi:"lake"`
	Location     *string                   `pulumi:"location"`
	Members      []string                  `pulumi:"members"`
	Project      *string                   `pulumi:"project"`
	Role         string                    `pulumi:"role"`
}

// The set of arguments for constructing a AssetIamBinding resource.
type AssetIamBindingArgs struct {
	Asset        pulumi.StringInput
	Condition    AssetIamBindingConditionPtrInput
	DataplexZone pulumi.StringInput
	Lake         pulumi.StringInput
	Location     pulumi.StringPtrInput
	Members      pulumi.StringArrayInput
	Project      pulumi.StringPtrInput
	Role         pulumi.StringInput
}

func (AssetIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assetIamBindingArgs)(nil)).Elem()
}

type AssetIamBindingInput interface {
	pulumi.Input

	ToAssetIamBindingOutput() AssetIamBindingOutput
	ToAssetIamBindingOutputWithContext(ctx context.Context) AssetIamBindingOutput
}

func (*AssetIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetIamBinding)(nil)).Elem()
}

func (i *AssetIamBinding) ToAssetIamBindingOutput() AssetIamBindingOutput {
	return i.ToAssetIamBindingOutputWithContext(context.Background())
}

func (i *AssetIamBinding) ToAssetIamBindingOutputWithContext(ctx context.Context) AssetIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetIamBindingOutput)
}

// AssetIamBindingArrayInput is an input type that accepts AssetIamBindingArray and AssetIamBindingArrayOutput values.
// You can construct a concrete instance of `AssetIamBindingArrayInput` via:
//
//	AssetIamBindingArray{ AssetIamBindingArgs{...} }
type AssetIamBindingArrayInput interface {
	pulumi.Input

	ToAssetIamBindingArrayOutput() AssetIamBindingArrayOutput
	ToAssetIamBindingArrayOutputWithContext(context.Context) AssetIamBindingArrayOutput
}

type AssetIamBindingArray []AssetIamBindingInput

func (AssetIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssetIamBinding)(nil)).Elem()
}

func (i AssetIamBindingArray) ToAssetIamBindingArrayOutput() AssetIamBindingArrayOutput {
	return i.ToAssetIamBindingArrayOutputWithContext(context.Background())
}

func (i AssetIamBindingArray) ToAssetIamBindingArrayOutputWithContext(ctx context.Context) AssetIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetIamBindingArrayOutput)
}

// AssetIamBindingMapInput is an input type that accepts AssetIamBindingMap and AssetIamBindingMapOutput values.
// You can construct a concrete instance of `AssetIamBindingMapInput` via:
//
//	AssetIamBindingMap{ "key": AssetIamBindingArgs{...} }
type AssetIamBindingMapInput interface {
	pulumi.Input

	ToAssetIamBindingMapOutput() AssetIamBindingMapOutput
	ToAssetIamBindingMapOutputWithContext(context.Context) AssetIamBindingMapOutput
}

type AssetIamBindingMap map[string]AssetIamBindingInput

func (AssetIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssetIamBinding)(nil)).Elem()
}

func (i AssetIamBindingMap) ToAssetIamBindingMapOutput() AssetIamBindingMapOutput {
	return i.ToAssetIamBindingMapOutputWithContext(context.Background())
}

func (i AssetIamBindingMap) ToAssetIamBindingMapOutputWithContext(ctx context.Context) AssetIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetIamBindingMapOutput)
}

type AssetIamBindingOutput struct{ *pulumi.OutputState }

func (AssetIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetIamBinding)(nil)).Elem()
}

func (o AssetIamBindingOutput) ToAssetIamBindingOutput() AssetIamBindingOutput {
	return o
}

func (o AssetIamBindingOutput) ToAssetIamBindingOutputWithContext(ctx context.Context) AssetIamBindingOutput {
	return o
}

func (o AssetIamBindingOutput) Asset() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamBinding) pulumi.StringOutput { return v.Asset }).(pulumi.StringOutput)
}

func (o AssetIamBindingOutput) Condition() AssetIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *AssetIamBinding) AssetIamBindingConditionPtrOutput { return v.Condition }).(AssetIamBindingConditionPtrOutput)
}

func (o AssetIamBindingOutput) DataplexZone() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamBinding) pulumi.StringOutput { return v.DataplexZone }).(pulumi.StringOutput)
}

func (o AssetIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o AssetIamBindingOutput) Lake() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamBinding) pulumi.StringOutput { return v.Lake }).(pulumi.StringOutput)
}

func (o AssetIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o AssetIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AssetIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o AssetIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o AssetIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type AssetIamBindingArrayOutput struct{ *pulumi.OutputState }

func (AssetIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssetIamBinding)(nil)).Elem()
}

func (o AssetIamBindingArrayOutput) ToAssetIamBindingArrayOutput() AssetIamBindingArrayOutput {
	return o
}

func (o AssetIamBindingArrayOutput) ToAssetIamBindingArrayOutputWithContext(ctx context.Context) AssetIamBindingArrayOutput {
	return o
}

func (o AssetIamBindingArrayOutput) Index(i pulumi.IntInput) AssetIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssetIamBinding {
		return vs[0].([]*AssetIamBinding)[vs[1].(int)]
	}).(AssetIamBindingOutput)
}

type AssetIamBindingMapOutput struct{ *pulumi.OutputState }

func (AssetIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssetIamBinding)(nil)).Elem()
}

func (o AssetIamBindingMapOutput) ToAssetIamBindingMapOutput() AssetIamBindingMapOutput {
	return o
}

func (o AssetIamBindingMapOutput) ToAssetIamBindingMapOutputWithContext(ctx context.Context) AssetIamBindingMapOutput {
	return o
}

func (o AssetIamBindingMapOutput) MapIndex(k pulumi.StringInput) AssetIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssetIamBinding {
		return vs[0].(map[string]*AssetIamBinding)[vs[1].(string)]
	}).(AssetIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssetIamBindingInput)(nil)).Elem(), &AssetIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetIamBindingArrayInput)(nil)).Elem(), AssetIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetIamBindingMapInput)(nil)).Elem(), AssetIamBindingMap{})
	pulumi.RegisterOutputType(AssetIamBindingOutput{})
	pulumi.RegisterOutputType(AssetIamBindingArrayOutput{})
	pulumi.RegisterOutputType(AssetIamBindingMapOutput{})
}
