// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a collection of categories and terms defined by the user. Glossary is a top level resource and is the GCP parent resource of all the categories and terms within it.
//
// ## Example Usage
//
// ### Dataplex Glossary Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewGlossary(ctx, "glossary_test_id", &dataplex.GlossaryArgs{
//				GlossaryId: pulumi.String("glossary-basic"),
//				Location:   pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Dataplex Glossary Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewGlossary(ctx, "glossary_test_id_full", &dataplex.GlossaryArgs{
//				GlossaryId: pulumi.String("glossary-full"),
//				Location:   pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"tag": pulumi.String("test-tf"),
//				},
//				DisplayName: pulumi.String("terraform glossary"),
//				Description: pulumi.String("glossary created by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Glossary can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}`
//
// * `{{project}}/{{location}}/{{glossary_id}}`
//
// * `{{location}}/{{glossary_id}}`
//
// When using the `pulumi import` command, Glossary can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:dataplex/glossary:Glossary default projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}
// ```
//
// ```sh
// $ pulumi import gcp:dataplex/glossary:Glossary default {{project}}/{{location}}/{{glossary_id}}
// ```
//
// ```sh
// $ pulumi import gcp:dataplex/glossary:Glossary default {{location}}/{{glossary_id}}
// ```
type Glossary struct {
	pulumi.CustomResourceState

	// The number of categories in the glossary.
	CategoryCount pulumi.IntOutput `pulumi:"categoryCount"`
	// The time at which the glossary was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The user-mutable description of the glossary.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User friendly display name of the glossary. This is user-mutable. This will be same as the glossaryId, if not specified.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The glossary id for creation.
	//
	// ***
	GlossaryId pulumi.StringOutput `pulumi:"glossaryId"`
	// User-defined labels for the Glossary.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location where the glossary should reside.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the Glossary. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The number of terms in the glossary.
	TermCount pulumi.IntOutput `pulumi:"termCount"`
	// System generated unique id for the Glossary. This ID will be different if the Glossary is deleted and re-created with the same name.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The time at which the glossary was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewGlossary registers a new resource with the given unique name, arguments, and options.
func NewGlossary(ctx *pulumi.Context,
	name string, args *GlossaryArgs, opts ...pulumi.ResourceOption) (*Glossary, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlossaryId == nil {
		return nil, errors.New("invalid value for required argument 'GlossaryId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Glossary
	err := ctx.RegisterResource("gcp:dataplex/glossary:Glossary", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlossary gets an existing Glossary resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlossary(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlossaryState, opts ...pulumi.ResourceOption) (*Glossary, error) {
	var resource Glossary
	err := ctx.ReadResource("gcp:dataplex/glossary:Glossary", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Glossary resources.
type glossaryState struct {
	// The number of categories in the glossary.
	CategoryCount *int `pulumi:"categoryCount"`
	// The time at which the glossary was created.
	CreateTime *string `pulumi:"createTime"`
	// The user-mutable description of the glossary.
	Description *string `pulumi:"description"`
	// User friendly display name of the glossary. This is user-mutable. This will be same as the glossaryId, if not specified.
	DisplayName *string `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The glossary id for creation.
	//
	// ***
	GlossaryId *string `pulumi:"glossaryId"`
	// User-defined labels for the Glossary.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location where the glossary should reside.
	Location *string `pulumi:"location"`
	// The resource name of the Glossary. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The number of terms in the glossary.
	TermCount *int `pulumi:"termCount"`
	// System generated unique id for the Glossary. This ID will be different if the Glossary is deleted and re-created with the same name.
	Uid *string `pulumi:"uid"`
	// The time at which the glossary was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type GlossaryState struct {
	// The number of categories in the glossary.
	CategoryCount pulumi.IntPtrInput
	// The time at which the glossary was created.
	CreateTime pulumi.StringPtrInput
	// The user-mutable description of the glossary.
	Description pulumi.StringPtrInput
	// User friendly display name of the glossary. This is user-mutable. This will be same as the glossaryId, if not specified.
	DisplayName pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The glossary id for creation.
	//
	// ***
	GlossaryId pulumi.StringPtrInput
	// User-defined labels for the Glossary.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location where the glossary should reside.
	Location pulumi.StringPtrInput
	// The resource name of the Glossary. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The number of terms in the glossary.
	TermCount pulumi.IntPtrInput
	// System generated unique id for the Glossary. This ID will be different if the Glossary is deleted and re-created with the same name.
	Uid pulumi.StringPtrInput
	// The time at which the glossary was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (GlossaryState) ElementType() reflect.Type {
	return reflect.TypeOf((*glossaryState)(nil)).Elem()
}

type glossaryArgs struct {
	// The user-mutable description of the glossary.
	Description *string `pulumi:"description"`
	// User friendly display name of the glossary. This is user-mutable. This will be same as the glossaryId, if not specified.
	DisplayName *string `pulumi:"displayName"`
	// The glossary id for creation.
	//
	// ***
	GlossaryId string `pulumi:"glossaryId"`
	// User-defined labels for the Glossary.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location where the glossary should reside.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Glossary resource.
type GlossaryArgs struct {
	// The user-mutable description of the glossary.
	Description pulumi.StringPtrInput
	// User friendly display name of the glossary. This is user-mutable. This will be same as the glossaryId, if not specified.
	DisplayName pulumi.StringPtrInput
	// The glossary id for creation.
	//
	// ***
	GlossaryId pulumi.StringInput
	// User-defined labels for the Glossary.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location where the glossary should reside.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (GlossaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*glossaryArgs)(nil)).Elem()
}

type GlossaryInput interface {
	pulumi.Input

	ToGlossaryOutput() GlossaryOutput
	ToGlossaryOutputWithContext(ctx context.Context) GlossaryOutput
}

func (*Glossary) ElementType() reflect.Type {
	return reflect.TypeOf((**Glossary)(nil)).Elem()
}

func (i *Glossary) ToGlossaryOutput() GlossaryOutput {
	return i.ToGlossaryOutputWithContext(context.Background())
}

func (i *Glossary) ToGlossaryOutputWithContext(ctx context.Context) GlossaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryOutput)
}

// GlossaryArrayInput is an input type that accepts GlossaryArray and GlossaryArrayOutput values.
// You can construct a concrete instance of `GlossaryArrayInput` via:
//
//	GlossaryArray{ GlossaryArgs{...} }
type GlossaryArrayInput interface {
	pulumi.Input

	ToGlossaryArrayOutput() GlossaryArrayOutput
	ToGlossaryArrayOutputWithContext(context.Context) GlossaryArrayOutput
}

type GlossaryArray []GlossaryInput

func (GlossaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Glossary)(nil)).Elem()
}

func (i GlossaryArray) ToGlossaryArrayOutput() GlossaryArrayOutput {
	return i.ToGlossaryArrayOutputWithContext(context.Background())
}

func (i GlossaryArray) ToGlossaryArrayOutputWithContext(ctx context.Context) GlossaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryArrayOutput)
}

// GlossaryMapInput is an input type that accepts GlossaryMap and GlossaryMapOutput values.
// You can construct a concrete instance of `GlossaryMapInput` via:
//
//	GlossaryMap{ "key": GlossaryArgs{...} }
type GlossaryMapInput interface {
	pulumi.Input

	ToGlossaryMapOutput() GlossaryMapOutput
	ToGlossaryMapOutputWithContext(context.Context) GlossaryMapOutput
}

type GlossaryMap map[string]GlossaryInput

func (GlossaryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Glossary)(nil)).Elem()
}

func (i GlossaryMap) ToGlossaryMapOutput() GlossaryMapOutput {
	return i.ToGlossaryMapOutputWithContext(context.Background())
}

func (i GlossaryMap) ToGlossaryMapOutputWithContext(ctx context.Context) GlossaryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryMapOutput)
}

type GlossaryOutput struct{ *pulumi.OutputState }

func (GlossaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Glossary)(nil)).Elem()
}

func (o GlossaryOutput) ToGlossaryOutput() GlossaryOutput {
	return o
}

func (o GlossaryOutput) ToGlossaryOutputWithContext(ctx context.Context) GlossaryOutput {
	return o
}

// The number of categories in the glossary.
func (o GlossaryOutput) CategoryCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Glossary) pulumi.IntOutput { return v.CategoryCount }).(pulumi.IntOutput)
}

// The time at which the glossary was created.
func (o GlossaryOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Glossary) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The user-mutable description of the glossary.
func (o GlossaryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Glossary) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// User friendly display name of the glossary. This is user-mutable. This will be same as the glossaryId, if not specified.
func (o GlossaryOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Glossary) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o GlossaryOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Glossary) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The glossary id for creation.
//
// ***
func (o GlossaryOutput) GlossaryId() pulumi.StringOutput {
	return o.ApplyT(func(v *Glossary) pulumi.StringOutput { return v.GlossaryId }).(pulumi.StringOutput)
}

// User-defined labels for the Glossary.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o GlossaryOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Glossary) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location where the glossary should reside.
func (o GlossaryOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Glossary) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the Glossary. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}
func (o GlossaryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Glossary) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o GlossaryOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Glossary) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o GlossaryOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Glossary) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The number of terms in the glossary.
func (o GlossaryOutput) TermCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Glossary) pulumi.IntOutput { return v.TermCount }).(pulumi.IntOutput)
}

// System generated unique id for the Glossary. This ID will be different if the Glossary is deleted and re-created with the same name.
func (o GlossaryOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Glossary) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The time at which the glossary was last updated.
func (o GlossaryOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Glossary) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type GlossaryArrayOutput struct{ *pulumi.OutputState }

func (GlossaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Glossary)(nil)).Elem()
}

func (o GlossaryArrayOutput) ToGlossaryArrayOutput() GlossaryArrayOutput {
	return o
}

func (o GlossaryArrayOutput) ToGlossaryArrayOutputWithContext(ctx context.Context) GlossaryArrayOutput {
	return o
}

func (o GlossaryArrayOutput) Index(i pulumi.IntInput) GlossaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Glossary {
		return vs[0].([]*Glossary)[vs[1].(int)]
	}).(GlossaryOutput)
}

type GlossaryMapOutput struct{ *pulumi.OutputState }

func (GlossaryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Glossary)(nil)).Elem()
}

func (o GlossaryMapOutput) ToGlossaryMapOutput() GlossaryMapOutput {
	return o
}

func (o GlossaryMapOutput) ToGlossaryMapOutputWithContext(ctx context.Context) GlossaryMapOutput {
	return o
}

func (o GlossaryMapOutput) MapIndex(k pulumi.StringInput) GlossaryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Glossary {
		return vs[0].(map[string]*Glossary)[vs[1].(string)]
	}).(GlossaryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryInput)(nil)).Elem(), &Glossary{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryArrayInput)(nil)).Elem(), GlossaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryMapInput)(nil)).Elem(), GlossaryMap{})
	pulumi.RegisterOutputType(GlossaryOutput{})
	pulumi.RegisterOutputType(GlossaryArrayOutput{})
	pulumi.RegisterOutputType(GlossaryMapOutput{})
}
