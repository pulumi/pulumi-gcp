// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TaskIamBinding struct {
	pulumi.CustomResourceState

	Condition TaskIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag      pulumi.StringOutput              `pulumi:"etag"`
	Lake      pulumi.StringOutput              `pulumi:"lake"`
	Location  pulumi.StringOutput              `pulumi:"location"`
	Members   pulumi.StringArrayOutput         `pulumi:"members"`
	Project   pulumi.StringOutput              `pulumi:"project"`
	Role      pulumi.StringOutput              `pulumi:"role"`
	TaskId    pulumi.StringOutput              `pulumi:"taskId"`
}

// NewTaskIamBinding registers a new resource with the given unique name, arguments, and options.
func NewTaskIamBinding(ctx *pulumi.Context,
	name string, args *TaskIamBindingArgs, opts ...pulumi.ResourceOption) (*TaskIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Lake == nil {
		return nil, errors.New("invalid value for required argument 'Lake'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.TaskId == nil {
		return nil, errors.New("invalid value for required argument 'TaskId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TaskIamBinding
	err := ctx.RegisterResource("gcp:dataplex/taskIamBinding:TaskIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTaskIamBinding gets an existing TaskIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTaskIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskIamBindingState, opts ...pulumi.ResourceOption) (*TaskIamBinding, error) {
	var resource TaskIamBinding
	err := ctx.ReadResource("gcp:dataplex/taskIamBinding:TaskIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TaskIamBinding resources.
type taskIamBindingState struct {
	Condition *TaskIamBindingCondition `pulumi:"condition"`
	Etag      *string                  `pulumi:"etag"`
	Lake      *string                  `pulumi:"lake"`
	Location  *string                  `pulumi:"location"`
	Members   []string                 `pulumi:"members"`
	Project   *string                  `pulumi:"project"`
	Role      *string                  `pulumi:"role"`
	TaskId    *string                  `pulumi:"taskId"`
}

type TaskIamBindingState struct {
	Condition TaskIamBindingConditionPtrInput
	Etag      pulumi.StringPtrInput
	Lake      pulumi.StringPtrInput
	Location  pulumi.StringPtrInput
	Members   pulumi.StringArrayInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringPtrInput
	TaskId    pulumi.StringPtrInput
}

func (TaskIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskIamBindingState)(nil)).Elem()
}

type taskIamBindingArgs struct {
	Condition *TaskIamBindingCondition `pulumi:"condition"`
	Lake      string                   `pulumi:"lake"`
	Location  *string                  `pulumi:"location"`
	Members   []string                 `pulumi:"members"`
	Project   *string                  `pulumi:"project"`
	Role      string                   `pulumi:"role"`
	TaskId    string                   `pulumi:"taskId"`
}

// The set of arguments for constructing a TaskIamBinding resource.
type TaskIamBindingArgs struct {
	Condition TaskIamBindingConditionPtrInput
	Lake      pulumi.StringInput
	Location  pulumi.StringPtrInput
	Members   pulumi.StringArrayInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringInput
	TaskId    pulumi.StringInput
}

func (TaskIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskIamBindingArgs)(nil)).Elem()
}

type TaskIamBindingInput interface {
	pulumi.Input

	ToTaskIamBindingOutput() TaskIamBindingOutput
	ToTaskIamBindingOutputWithContext(ctx context.Context) TaskIamBindingOutput
}

func (*TaskIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskIamBinding)(nil)).Elem()
}

func (i *TaskIamBinding) ToTaskIamBindingOutput() TaskIamBindingOutput {
	return i.ToTaskIamBindingOutputWithContext(context.Background())
}

func (i *TaskIamBinding) ToTaskIamBindingOutputWithContext(ctx context.Context) TaskIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskIamBindingOutput)
}

// TaskIamBindingArrayInput is an input type that accepts TaskIamBindingArray and TaskIamBindingArrayOutput values.
// You can construct a concrete instance of `TaskIamBindingArrayInput` via:
//
//	TaskIamBindingArray{ TaskIamBindingArgs{...} }
type TaskIamBindingArrayInput interface {
	pulumi.Input

	ToTaskIamBindingArrayOutput() TaskIamBindingArrayOutput
	ToTaskIamBindingArrayOutputWithContext(context.Context) TaskIamBindingArrayOutput
}

type TaskIamBindingArray []TaskIamBindingInput

func (TaskIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TaskIamBinding)(nil)).Elem()
}

func (i TaskIamBindingArray) ToTaskIamBindingArrayOutput() TaskIamBindingArrayOutput {
	return i.ToTaskIamBindingArrayOutputWithContext(context.Background())
}

func (i TaskIamBindingArray) ToTaskIamBindingArrayOutputWithContext(ctx context.Context) TaskIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskIamBindingArrayOutput)
}

// TaskIamBindingMapInput is an input type that accepts TaskIamBindingMap and TaskIamBindingMapOutput values.
// You can construct a concrete instance of `TaskIamBindingMapInput` via:
//
//	TaskIamBindingMap{ "key": TaskIamBindingArgs{...} }
type TaskIamBindingMapInput interface {
	pulumi.Input

	ToTaskIamBindingMapOutput() TaskIamBindingMapOutput
	ToTaskIamBindingMapOutputWithContext(context.Context) TaskIamBindingMapOutput
}

type TaskIamBindingMap map[string]TaskIamBindingInput

func (TaskIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TaskIamBinding)(nil)).Elem()
}

func (i TaskIamBindingMap) ToTaskIamBindingMapOutput() TaskIamBindingMapOutput {
	return i.ToTaskIamBindingMapOutputWithContext(context.Background())
}

func (i TaskIamBindingMap) ToTaskIamBindingMapOutputWithContext(ctx context.Context) TaskIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskIamBindingMapOutput)
}

type TaskIamBindingOutput struct{ *pulumi.OutputState }

func (TaskIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskIamBinding)(nil)).Elem()
}

func (o TaskIamBindingOutput) ToTaskIamBindingOutput() TaskIamBindingOutput {
	return o
}

func (o TaskIamBindingOutput) ToTaskIamBindingOutputWithContext(ctx context.Context) TaskIamBindingOutput {
	return o
}

func (o TaskIamBindingOutput) Condition() TaskIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *TaskIamBinding) TaskIamBindingConditionPtrOutput { return v.Condition }).(TaskIamBindingConditionPtrOutput)
}

func (o TaskIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o TaskIamBindingOutput) Lake() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamBinding) pulumi.StringOutput { return v.Lake }).(pulumi.StringOutput)
}

func (o TaskIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o TaskIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o TaskIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o TaskIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o TaskIamBindingOutput) TaskId() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamBinding) pulumi.StringOutput { return v.TaskId }).(pulumi.StringOutput)
}

type TaskIamBindingArrayOutput struct{ *pulumi.OutputState }

func (TaskIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TaskIamBinding)(nil)).Elem()
}

func (o TaskIamBindingArrayOutput) ToTaskIamBindingArrayOutput() TaskIamBindingArrayOutput {
	return o
}

func (o TaskIamBindingArrayOutput) ToTaskIamBindingArrayOutputWithContext(ctx context.Context) TaskIamBindingArrayOutput {
	return o
}

func (o TaskIamBindingArrayOutput) Index(i pulumi.IntInput) TaskIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TaskIamBinding {
		return vs[0].([]*TaskIamBinding)[vs[1].(int)]
	}).(TaskIamBindingOutput)
}

type TaskIamBindingMapOutput struct{ *pulumi.OutputState }

func (TaskIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TaskIamBinding)(nil)).Elem()
}

func (o TaskIamBindingMapOutput) ToTaskIamBindingMapOutput() TaskIamBindingMapOutput {
	return o
}

func (o TaskIamBindingMapOutput) ToTaskIamBindingMapOutputWithContext(ctx context.Context) TaskIamBindingMapOutput {
	return o
}

func (o TaskIamBindingMapOutput) MapIndex(k pulumi.StringInput) TaskIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TaskIamBinding {
		return vs[0].(map[string]*TaskIamBinding)[vs[1].(string)]
	}).(TaskIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TaskIamBindingInput)(nil)).Elem(), &TaskIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskIamBindingArrayInput)(nil)).Elem(), TaskIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskIamBindingMapInput)(nil)).Elem(), TaskIamBindingMap{})
	pulumi.RegisterOutputType(TaskIamBindingOutput{})
	pulumi.RegisterOutputType(TaskIamBindingArrayOutput{})
	pulumi.RegisterOutputType(TaskIamBindingMapOutput{})
}
