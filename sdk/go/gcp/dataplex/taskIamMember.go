// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TaskIamMember struct {
	pulumi.CustomResourceState

	Condition TaskIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag      pulumi.StringOutput             `pulumi:"etag"`
	Lake      pulumi.StringOutput             `pulumi:"lake"`
	Location  pulumi.StringOutput             `pulumi:"location"`
	Member    pulumi.StringOutput             `pulumi:"member"`
	Project   pulumi.StringOutput             `pulumi:"project"`
	Role      pulumi.StringOutput             `pulumi:"role"`
	TaskId    pulumi.StringOutput             `pulumi:"taskId"`
}

// NewTaskIamMember registers a new resource with the given unique name, arguments, and options.
func NewTaskIamMember(ctx *pulumi.Context,
	name string, args *TaskIamMemberArgs, opts ...pulumi.ResourceOption) (*TaskIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Lake == nil {
		return nil, errors.New("invalid value for required argument 'Lake'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.TaskId == nil {
		return nil, errors.New("invalid value for required argument 'TaskId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TaskIamMember
	err := ctx.RegisterResource("gcp:dataplex/taskIamMember:TaskIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTaskIamMember gets an existing TaskIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTaskIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskIamMemberState, opts ...pulumi.ResourceOption) (*TaskIamMember, error) {
	var resource TaskIamMember
	err := ctx.ReadResource("gcp:dataplex/taskIamMember:TaskIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TaskIamMember resources.
type taskIamMemberState struct {
	Condition *TaskIamMemberCondition `pulumi:"condition"`
	Etag      *string                 `pulumi:"etag"`
	Lake      *string                 `pulumi:"lake"`
	Location  *string                 `pulumi:"location"`
	Member    *string                 `pulumi:"member"`
	Project   *string                 `pulumi:"project"`
	Role      *string                 `pulumi:"role"`
	TaskId    *string                 `pulumi:"taskId"`
}

type TaskIamMemberState struct {
	Condition TaskIamMemberConditionPtrInput
	Etag      pulumi.StringPtrInput
	Lake      pulumi.StringPtrInput
	Location  pulumi.StringPtrInput
	Member    pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringPtrInput
	TaskId    pulumi.StringPtrInput
}

func (TaskIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskIamMemberState)(nil)).Elem()
}

type taskIamMemberArgs struct {
	Condition *TaskIamMemberCondition `pulumi:"condition"`
	Lake      string                  `pulumi:"lake"`
	Location  *string                 `pulumi:"location"`
	Member    string                  `pulumi:"member"`
	Project   *string                 `pulumi:"project"`
	Role      string                  `pulumi:"role"`
	TaskId    string                  `pulumi:"taskId"`
}

// The set of arguments for constructing a TaskIamMember resource.
type TaskIamMemberArgs struct {
	Condition TaskIamMemberConditionPtrInput
	Lake      pulumi.StringInput
	Location  pulumi.StringPtrInput
	Member    pulumi.StringInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringInput
	TaskId    pulumi.StringInput
}

func (TaskIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskIamMemberArgs)(nil)).Elem()
}

type TaskIamMemberInput interface {
	pulumi.Input

	ToTaskIamMemberOutput() TaskIamMemberOutput
	ToTaskIamMemberOutputWithContext(ctx context.Context) TaskIamMemberOutput
}

func (*TaskIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskIamMember)(nil)).Elem()
}

func (i *TaskIamMember) ToTaskIamMemberOutput() TaskIamMemberOutput {
	return i.ToTaskIamMemberOutputWithContext(context.Background())
}

func (i *TaskIamMember) ToTaskIamMemberOutputWithContext(ctx context.Context) TaskIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskIamMemberOutput)
}

// TaskIamMemberArrayInput is an input type that accepts TaskIamMemberArray and TaskIamMemberArrayOutput values.
// You can construct a concrete instance of `TaskIamMemberArrayInput` via:
//
//	TaskIamMemberArray{ TaskIamMemberArgs{...} }
type TaskIamMemberArrayInput interface {
	pulumi.Input

	ToTaskIamMemberArrayOutput() TaskIamMemberArrayOutput
	ToTaskIamMemberArrayOutputWithContext(context.Context) TaskIamMemberArrayOutput
}

type TaskIamMemberArray []TaskIamMemberInput

func (TaskIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TaskIamMember)(nil)).Elem()
}

func (i TaskIamMemberArray) ToTaskIamMemberArrayOutput() TaskIamMemberArrayOutput {
	return i.ToTaskIamMemberArrayOutputWithContext(context.Background())
}

func (i TaskIamMemberArray) ToTaskIamMemberArrayOutputWithContext(ctx context.Context) TaskIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskIamMemberArrayOutput)
}

// TaskIamMemberMapInput is an input type that accepts TaskIamMemberMap and TaskIamMemberMapOutput values.
// You can construct a concrete instance of `TaskIamMemberMapInput` via:
//
//	TaskIamMemberMap{ "key": TaskIamMemberArgs{...} }
type TaskIamMemberMapInput interface {
	pulumi.Input

	ToTaskIamMemberMapOutput() TaskIamMemberMapOutput
	ToTaskIamMemberMapOutputWithContext(context.Context) TaskIamMemberMapOutput
}

type TaskIamMemberMap map[string]TaskIamMemberInput

func (TaskIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TaskIamMember)(nil)).Elem()
}

func (i TaskIamMemberMap) ToTaskIamMemberMapOutput() TaskIamMemberMapOutput {
	return i.ToTaskIamMemberMapOutputWithContext(context.Background())
}

func (i TaskIamMemberMap) ToTaskIamMemberMapOutputWithContext(ctx context.Context) TaskIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskIamMemberMapOutput)
}

type TaskIamMemberOutput struct{ *pulumi.OutputState }

func (TaskIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskIamMember)(nil)).Elem()
}

func (o TaskIamMemberOutput) ToTaskIamMemberOutput() TaskIamMemberOutput {
	return o
}

func (o TaskIamMemberOutput) ToTaskIamMemberOutputWithContext(ctx context.Context) TaskIamMemberOutput {
	return o
}

func (o TaskIamMemberOutput) Condition() TaskIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *TaskIamMember) TaskIamMemberConditionPtrOutput { return v.Condition }).(TaskIamMemberConditionPtrOutput)
}

func (o TaskIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o TaskIamMemberOutput) Lake() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamMember) pulumi.StringOutput { return v.Lake }).(pulumi.StringOutput)
}

func (o TaskIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o TaskIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o TaskIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o TaskIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o TaskIamMemberOutput) TaskId() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamMember) pulumi.StringOutput { return v.TaskId }).(pulumi.StringOutput)
}

type TaskIamMemberArrayOutput struct{ *pulumi.OutputState }

func (TaskIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TaskIamMember)(nil)).Elem()
}

func (o TaskIamMemberArrayOutput) ToTaskIamMemberArrayOutput() TaskIamMemberArrayOutput {
	return o
}

func (o TaskIamMemberArrayOutput) ToTaskIamMemberArrayOutputWithContext(ctx context.Context) TaskIamMemberArrayOutput {
	return o
}

func (o TaskIamMemberArrayOutput) Index(i pulumi.IntInput) TaskIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TaskIamMember {
		return vs[0].([]*TaskIamMember)[vs[1].(int)]
	}).(TaskIamMemberOutput)
}

type TaskIamMemberMapOutput struct{ *pulumi.OutputState }

func (TaskIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TaskIamMember)(nil)).Elem()
}

func (o TaskIamMemberMapOutput) ToTaskIamMemberMapOutput() TaskIamMemberMapOutput {
	return o
}

func (o TaskIamMemberMapOutput) ToTaskIamMemberMapOutputWithContext(ctx context.Context) TaskIamMemberMapOutput {
	return o
}

func (o TaskIamMemberMapOutput) MapIndex(k pulumi.StringInput) TaskIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TaskIamMember {
		return vs[0].(map[string]*TaskIamMember)[vs[1].(string)]
	}).(TaskIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TaskIamMemberInput)(nil)).Elem(), &TaskIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskIamMemberArrayInput)(nil)).Elem(), TaskIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskIamMemberMapInput)(nil)).Elem(), TaskIamMemberMap{})
	pulumi.RegisterOutputType(TaskIamMemberOutput{})
	pulumi.RegisterOutputType(TaskIamMemberArrayOutput{})
	pulumi.RegisterOutputType(TaskIamMemberMapOutput{})
}
