// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Dataplex Zone. Each of these resources serves a different use case:
//
// * `dataplex.ZoneIamPolicy`: Authoritative. Sets the IAM policy for the zone and replaces any existing policy already attached.
// * `dataplex.ZoneIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the zone are preserved.
// * `dataplex.ZoneIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the zone are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.ZoneIamPolicy`: Retrieves the IAM policy for the zone
//
// > **Note:** `dataplex.ZoneIamPolicy` **cannot** be used in conjunction with `dataplex.ZoneIamBinding` and `dataplex.ZoneIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.ZoneIamBinding` resources **can be** used in conjunction with `dataplex.ZoneIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_dataplex\_zone\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewZoneIamPolicy(ctx, "policy", &dataplex.ZoneIamPolicyArgs{
//				Project:      pulumi.Any(google_dataplex_zone.Example.Project),
//				Location:     pulumi.Any(google_dataplex_zone.Example.Location),
//				Lake:         pulumi.Any(google_dataplex_zone.Example.Lake),
//				DataplexZone: pulumi.Any(google_dataplex_zone.Example.Name),
//				PolicyData:   *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_dataplex\_zone\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewZoneIamBinding(ctx, "binding", &dataplex.ZoneIamBindingArgs{
//				Project:      pulumi.Any(google_dataplex_zone.Example.Project),
//				Location:     pulumi.Any(google_dataplex_zone.Example.Location),
//				Lake:         pulumi.Any(google_dataplex_zone.Example.Lake),
//				DataplexZone: pulumi.Any(google_dataplex_zone.Example.Name),
//				Role:         pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_dataplex\_zone\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewZoneIamMember(ctx, "member", &dataplex.ZoneIamMemberArgs{
//				Project:      pulumi.Any(google_dataplex_zone.Example.Project),
//				Location:     pulumi.Any(google_dataplex_zone.Example.Location),
//				Lake:         pulumi.Any(google_dataplex_zone.Example.Lake),
//				DataplexZone: pulumi.Any(google_dataplex_zone.Example.Name),
//				Role:         pulumi.String("roles/viewer"),
//				Member:       pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/lakes/{{lake}}/zones/{{name}} * {{project}}/{{location}}/{{lake}}/{{name}} * {{location}}/{{lake}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Dataplex zone IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:dataplex/zoneIamPolicy:ZoneIamPolicy editor "projects/{{project}}/locations/{{location}}/lakes/{{lake}}/zones/{{zone}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:dataplex/zoneIamPolicy:ZoneIamPolicy editor "projects/{{project}}/locations/{{location}}/lakes/{{lake}}/zones/{{zone}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:dataplex/zoneIamPolicy:ZoneIamPolicy editor projects/{{project}}/locations/{{location}}/lakes/{{lake}}/zones/{{zone}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ZoneIamPolicy struct {
	pulumi.CustomResourceState

	// Used to find the parent resource to bind the IAM policy to
	DataplexZone pulumi.StringOutput `pulumi:"dataplexZone"`
	// (Computed) The etag of the IAM policy.
	Etag     pulumi.StringOutput `pulumi:"etag"`
	Lake     pulumi.StringOutput `pulumi:"lake"`
	Location pulumi.StringOutput `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewZoneIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewZoneIamPolicy(ctx *pulumi.Context,
	name string, args *ZoneIamPolicyArgs, opts ...pulumi.ResourceOption) (*ZoneIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataplexZone == nil {
		return nil, errors.New("invalid value for required argument 'DataplexZone'")
	}
	if args.Lake == nil {
		return nil, errors.New("invalid value for required argument 'Lake'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	var resource ZoneIamPolicy
	err := ctx.RegisterResource("gcp:dataplex/zoneIamPolicy:ZoneIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneIamPolicy gets an existing ZoneIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneIamPolicyState, opts ...pulumi.ResourceOption) (*ZoneIamPolicy, error) {
	var resource ZoneIamPolicy
	err := ctx.ReadResource("gcp:dataplex/zoneIamPolicy:ZoneIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneIamPolicy resources.
type zoneIamPolicyState struct {
	// Used to find the parent resource to bind the IAM policy to
	DataplexZone *string `pulumi:"dataplexZone"`
	// (Computed) The etag of the IAM policy.
	Etag     *string `pulumi:"etag"`
	Lake     *string `pulumi:"lake"`
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
}

type ZoneIamPolicyState struct {
	// Used to find the parent resource to bind the IAM policy to
	DataplexZone pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag     pulumi.StringPtrInput
	Lake     pulumi.StringPtrInput
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
}

func (ZoneIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneIamPolicyState)(nil)).Elem()
}

type zoneIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	DataplexZone string  `pulumi:"dataplexZone"`
	Lake         string  `pulumi:"lake"`
	Location     *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a ZoneIamPolicy resource.
type ZoneIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	DataplexZone pulumi.StringInput
	Lake         pulumi.StringInput
	Location     pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
}

func (ZoneIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneIamPolicyArgs)(nil)).Elem()
}

type ZoneIamPolicyInput interface {
	pulumi.Input

	ToZoneIamPolicyOutput() ZoneIamPolicyOutput
	ToZoneIamPolicyOutputWithContext(ctx context.Context) ZoneIamPolicyOutput
}

func (*ZoneIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneIamPolicy)(nil)).Elem()
}

func (i *ZoneIamPolicy) ToZoneIamPolicyOutput() ZoneIamPolicyOutput {
	return i.ToZoneIamPolicyOutputWithContext(context.Background())
}

func (i *ZoneIamPolicy) ToZoneIamPolicyOutputWithContext(ctx context.Context) ZoneIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneIamPolicyOutput)
}

// ZoneIamPolicyArrayInput is an input type that accepts ZoneIamPolicyArray and ZoneIamPolicyArrayOutput values.
// You can construct a concrete instance of `ZoneIamPolicyArrayInput` via:
//
//	ZoneIamPolicyArray{ ZoneIamPolicyArgs{...} }
type ZoneIamPolicyArrayInput interface {
	pulumi.Input

	ToZoneIamPolicyArrayOutput() ZoneIamPolicyArrayOutput
	ToZoneIamPolicyArrayOutputWithContext(context.Context) ZoneIamPolicyArrayOutput
}

type ZoneIamPolicyArray []ZoneIamPolicyInput

func (ZoneIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneIamPolicy)(nil)).Elem()
}

func (i ZoneIamPolicyArray) ToZoneIamPolicyArrayOutput() ZoneIamPolicyArrayOutput {
	return i.ToZoneIamPolicyArrayOutputWithContext(context.Background())
}

func (i ZoneIamPolicyArray) ToZoneIamPolicyArrayOutputWithContext(ctx context.Context) ZoneIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneIamPolicyArrayOutput)
}

// ZoneIamPolicyMapInput is an input type that accepts ZoneIamPolicyMap and ZoneIamPolicyMapOutput values.
// You can construct a concrete instance of `ZoneIamPolicyMapInput` via:
//
//	ZoneIamPolicyMap{ "key": ZoneIamPolicyArgs{...} }
type ZoneIamPolicyMapInput interface {
	pulumi.Input

	ToZoneIamPolicyMapOutput() ZoneIamPolicyMapOutput
	ToZoneIamPolicyMapOutputWithContext(context.Context) ZoneIamPolicyMapOutput
}

type ZoneIamPolicyMap map[string]ZoneIamPolicyInput

func (ZoneIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneIamPolicy)(nil)).Elem()
}

func (i ZoneIamPolicyMap) ToZoneIamPolicyMapOutput() ZoneIamPolicyMapOutput {
	return i.ToZoneIamPolicyMapOutputWithContext(context.Background())
}

func (i ZoneIamPolicyMap) ToZoneIamPolicyMapOutputWithContext(ctx context.Context) ZoneIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneIamPolicyMapOutput)
}

type ZoneIamPolicyOutput struct{ *pulumi.OutputState }

func (ZoneIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneIamPolicy)(nil)).Elem()
}

func (o ZoneIamPolicyOutput) ToZoneIamPolicyOutput() ZoneIamPolicyOutput {
	return o
}

func (o ZoneIamPolicyOutput) ToZoneIamPolicyOutputWithContext(ctx context.Context) ZoneIamPolicyOutput {
	return o
}

// Used to find the parent resource to bind the IAM policy to
func (o ZoneIamPolicyOutput) DataplexZone() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamPolicy) pulumi.StringOutput { return v.DataplexZone }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o ZoneIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ZoneIamPolicyOutput) Lake() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamPolicy) pulumi.StringOutput { return v.Lake }).(pulumi.StringOutput)
}

func (o ZoneIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o ZoneIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o ZoneIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type ZoneIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (ZoneIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneIamPolicy)(nil)).Elem()
}

func (o ZoneIamPolicyArrayOutput) ToZoneIamPolicyArrayOutput() ZoneIamPolicyArrayOutput {
	return o
}

func (o ZoneIamPolicyArrayOutput) ToZoneIamPolicyArrayOutputWithContext(ctx context.Context) ZoneIamPolicyArrayOutput {
	return o
}

func (o ZoneIamPolicyArrayOutput) Index(i pulumi.IntInput) ZoneIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneIamPolicy {
		return vs[0].([]*ZoneIamPolicy)[vs[1].(int)]
	}).(ZoneIamPolicyOutput)
}

type ZoneIamPolicyMapOutput struct{ *pulumi.OutputState }

func (ZoneIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneIamPolicy)(nil)).Elem()
}

func (o ZoneIamPolicyMapOutput) ToZoneIamPolicyMapOutput() ZoneIamPolicyMapOutput {
	return o
}

func (o ZoneIamPolicyMapOutput) ToZoneIamPolicyMapOutputWithContext(ctx context.Context) ZoneIamPolicyMapOutput {
	return o
}

func (o ZoneIamPolicyMapOutput) MapIndex(k pulumi.StringInput) ZoneIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneIamPolicy {
		return vs[0].(map[string]*ZoneIamPolicy)[vs[1].(string)]
	}).(ZoneIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneIamPolicyInput)(nil)).Elem(), &ZoneIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneIamPolicyArrayInput)(nil)).Elem(), ZoneIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneIamPolicyMapInput)(nil)).Elem(), ZoneIamPolicyMap{})
	pulumi.RegisterOutputType(ZoneIamPolicyOutput{})
	pulumi.RegisterOutputType(ZoneIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(ZoneIamPolicyMapOutput{})
}
