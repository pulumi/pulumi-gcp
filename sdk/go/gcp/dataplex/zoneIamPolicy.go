// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ZoneIamPolicy struct {
	pulumi.CustomResourceState

	DataplexZone pulumi.StringOutput `pulumi:"dataplexZone"`
	Etag         pulumi.StringOutput `pulumi:"etag"`
	Lake         pulumi.StringOutput `pulumi:"lake"`
	Location     pulumi.StringOutput `pulumi:"location"`
	PolicyData   pulumi.StringOutput `pulumi:"policyData"`
	Project      pulumi.StringOutput `pulumi:"project"`
}

// NewZoneIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewZoneIamPolicy(ctx *pulumi.Context,
	name string, args *ZoneIamPolicyArgs, opts ...pulumi.ResourceOption) (*ZoneIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataplexZone == nil {
		return nil, errors.New("invalid value for required argument 'DataplexZone'")
	}
	if args.Lake == nil {
		return nil, errors.New("invalid value for required argument 'Lake'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	var resource ZoneIamPolicy
	err := ctx.RegisterResource("gcp:dataplex/zoneIamPolicy:ZoneIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneIamPolicy gets an existing ZoneIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneIamPolicyState, opts ...pulumi.ResourceOption) (*ZoneIamPolicy, error) {
	var resource ZoneIamPolicy
	err := ctx.ReadResource("gcp:dataplex/zoneIamPolicy:ZoneIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneIamPolicy resources.
type zoneIamPolicyState struct {
	DataplexZone *string `pulumi:"dataplexZone"`
	Etag         *string `pulumi:"etag"`
	Lake         *string `pulumi:"lake"`
	Location     *string `pulumi:"location"`
	PolicyData   *string `pulumi:"policyData"`
	Project      *string `pulumi:"project"`
}

type ZoneIamPolicyState struct {
	DataplexZone pulumi.StringPtrInput
	Etag         pulumi.StringPtrInput
	Lake         pulumi.StringPtrInput
	Location     pulumi.StringPtrInput
	PolicyData   pulumi.StringPtrInput
	Project      pulumi.StringPtrInput
}

func (ZoneIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneIamPolicyState)(nil)).Elem()
}

type zoneIamPolicyArgs struct {
	DataplexZone string  `pulumi:"dataplexZone"`
	Lake         string  `pulumi:"lake"`
	Location     *string `pulumi:"location"`
	PolicyData   string  `pulumi:"policyData"`
	Project      *string `pulumi:"project"`
}

// The set of arguments for constructing a ZoneIamPolicy resource.
type ZoneIamPolicyArgs struct {
	DataplexZone pulumi.StringInput
	Lake         pulumi.StringInput
	Location     pulumi.StringPtrInput
	PolicyData   pulumi.StringInput
	Project      pulumi.StringPtrInput
}

func (ZoneIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneIamPolicyArgs)(nil)).Elem()
}

type ZoneIamPolicyInput interface {
	pulumi.Input

	ToZoneIamPolicyOutput() ZoneIamPolicyOutput
	ToZoneIamPolicyOutputWithContext(ctx context.Context) ZoneIamPolicyOutput
}

func (*ZoneIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneIamPolicy)(nil)).Elem()
}

func (i *ZoneIamPolicy) ToZoneIamPolicyOutput() ZoneIamPolicyOutput {
	return i.ToZoneIamPolicyOutputWithContext(context.Background())
}

func (i *ZoneIamPolicy) ToZoneIamPolicyOutputWithContext(ctx context.Context) ZoneIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneIamPolicyOutput)
}

// ZoneIamPolicyArrayInput is an input type that accepts ZoneIamPolicyArray and ZoneIamPolicyArrayOutput values.
// You can construct a concrete instance of `ZoneIamPolicyArrayInput` via:
//
//	ZoneIamPolicyArray{ ZoneIamPolicyArgs{...} }
type ZoneIamPolicyArrayInput interface {
	pulumi.Input

	ToZoneIamPolicyArrayOutput() ZoneIamPolicyArrayOutput
	ToZoneIamPolicyArrayOutputWithContext(context.Context) ZoneIamPolicyArrayOutput
}

type ZoneIamPolicyArray []ZoneIamPolicyInput

func (ZoneIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneIamPolicy)(nil)).Elem()
}

func (i ZoneIamPolicyArray) ToZoneIamPolicyArrayOutput() ZoneIamPolicyArrayOutput {
	return i.ToZoneIamPolicyArrayOutputWithContext(context.Background())
}

func (i ZoneIamPolicyArray) ToZoneIamPolicyArrayOutputWithContext(ctx context.Context) ZoneIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneIamPolicyArrayOutput)
}

// ZoneIamPolicyMapInput is an input type that accepts ZoneIamPolicyMap and ZoneIamPolicyMapOutput values.
// You can construct a concrete instance of `ZoneIamPolicyMapInput` via:
//
//	ZoneIamPolicyMap{ "key": ZoneIamPolicyArgs{...} }
type ZoneIamPolicyMapInput interface {
	pulumi.Input

	ToZoneIamPolicyMapOutput() ZoneIamPolicyMapOutput
	ToZoneIamPolicyMapOutputWithContext(context.Context) ZoneIamPolicyMapOutput
}

type ZoneIamPolicyMap map[string]ZoneIamPolicyInput

func (ZoneIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneIamPolicy)(nil)).Elem()
}

func (i ZoneIamPolicyMap) ToZoneIamPolicyMapOutput() ZoneIamPolicyMapOutput {
	return i.ToZoneIamPolicyMapOutputWithContext(context.Background())
}

func (i ZoneIamPolicyMap) ToZoneIamPolicyMapOutputWithContext(ctx context.Context) ZoneIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneIamPolicyMapOutput)
}

type ZoneIamPolicyOutput struct{ *pulumi.OutputState }

func (ZoneIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneIamPolicy)(nil)).Elem()
}

func (o ZoneIamPolicyOutput) ToZoneIamPolicyOutput() ZoneIamPolicyOutput {
	return o
}

func (o ZoneIamPolicyOutput) ToZoneIamPolicyOutputWithContext(ctx context.Context) ZoneIamPolicyOutput {
	return o
}

func (o ZoneIamPolicyOutput) DataplexZone() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamPolicy) pulumi.StringOutput { return v.DataplexZone }).(pulumi.StringOutput)
}

func (o ZoneIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ZoneIamPolicyOutput) Lake() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamPolicy) pulumi.StringOutput { return v.Lake }).(pulumi.StringOutput)
}

func (o ZoneIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o ZoneIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o ZoneIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type ZoneIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (ZoneIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneIamPolicy)(nil)).Elem()
}

func (o ZoneIamPolicyArrayOutput) ToZoneIamPolicyArrayOutput() ZoneIamPolicyArrayOutput {
	return o
}

func (o ZoneIamPolicyArrayOutput) ToZoneIamPolicyArrayOutputWithContext(ctx context.Context) ZoneIamPolicyArrayOutput {
	return o
}

func (o ZoneIamPolicyArrayOutput) Index(i pulumi.IntInput) ZoneIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneIamPolicy {
		return vs[0].([]*ZoneIamPolicy)[vs[1].(int)]
	}).(ZoneIamPolicyOutput)
}

type ZoneIamPolicyMapOutput struct{ *pulumi.OutputState }

func (ZoneIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneIamPolicy)(nil)).Elem()
}

func (o ZoneIamPolicyMapOutput) ToZoneIamPolicyMapOutput() ZoneIamPolicyMapOutput {
	return o
}

func (o ZoneIamPolicyMapOutput) ToZoneIamPolicyMapOutputWithContext(ctx context.Context) ZoneIamPolicyMapOutput {
	return o
}

func (o ZoneIamPolicyMapOutput) MapIndex(k pulumi.StringInput) ZoneIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneIamPolicy {
		return vs[0].(map[string]*ZoneIamPolicy)[vs[1].(string)]
	}).(ZoneIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneIamPolicyInput)(nil)).Elem(), &ZoneIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneIamPolicyArrayInput)(nil)).Elem(), ZoneIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneIamPolicyMapInput)(nil)).Elem(), ZoneIamPolicyMap{})
	pulumi.RegisterOutputType(ZoneIamPolicyOutput{})
	pulumi.RegisterOutputType(ZoneIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(ZoneIamPolicyMapOutput{})
}
