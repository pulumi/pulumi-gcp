// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ZoneIamBinding struct {
	pulumi.CustomResourceState

	Condition    ZoneIamBindingConditionPtrOutput `pulumi:"condition"`
	DataplexZone pulumi.StringOutput              `pulumi:"dataplexZone"`
	Etag         pulumi.StringOutput              `pulumi:"etag"`
	Lake         pulumi.StringOutput              `pulumi:"lake"`
	Location     pulumi.StringOutput              `pulumi:"location"`
	Members      pulumi.StringArrayOutput         `pulumi:"members"`
	Project      pulumi.StringOutput              `pulumi:"project"`
	Role         pulumi.StringOutput              `pulumi:"role"`
}

// NewZoneIamBinding registers a new resource with the given unique name, arguments, and options.
func NewZoneIamBinding(ctx *pulumi.Context,
	name string, args *ZoneIamBindingArgs, opts ...pulumi.ResourceOption) (*ZoneIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataplexZone == nil {
		return nil, errors.New("invalid value for required argument 'DataplexZone'")
	}
	if args.Lake == nil {
		return nil, errors.New("invalid value for required argument 'Lake'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource ZoneIamBinding
	err := ctx.RegisterResource("gcp:dataplex/zoneIamBinding:ZoneIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneIamBinding gets an existing ZoneIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneIamBindingState, opts ...pulumi.ResourceOption) (*ZoneIamBinding, error) {
	var resource ZoneIamBinding
	err := ctx.ReadResource("gcp:dataplex/zoneIamBinding:ZoneIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneIamBinding resources.
type zoneIamBindingState struct {
	Condition    *ZoneIamBindingCondition `pulumi:"condition"`
	DataplexZone *string                  `pulumi:"dataplexZone"`
	Etag         *string                  `pulumi:"etag"`
	Lake         *string                  `pulumi:"lake"`
	Location     *string                  `pulumi:"location"`
	Members      []string                 `pulumi:"members"`
	Project      *string                  `pulumi:"project"`
	Role         *string                  `pulumi:"role"`
}

type ZoneIamBindingState struct {
	Condition    ZoneIamBindingConditionPtrInput
	DataplexZone pulumi.StringPtrInput
	Etag         pulumi.StringPtrInput
	Lake         pulumi.StringPtrInput
	Location     pulumi.StringPtrInput
	Members      pulumi.StringArrayInput
	Project      pulumi.StringPtrInput
	Role         pulumi.StringPtrInput
}

func (ZoneIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneIamBindingState)(nil)).Elem()
}

type zoneIamBindingArgs struct {
	Condition    *ZoneIamBindingCondition `pulumi:"condition"`
	DataplexZone string                   `pulumi:"dataplexZone"`
	Lake         string                   `pulumi:"lake"`
	Location     *string                  `pulumi:"location"`
	Members      []string                 `pulumi:"members"`
	Project      *string                  `pulumi:"project"`
	Role         string                   `pulumi:"role"`
}

// The set of arguments for constructing a ZoneIamBinding resource.
type ZoneIamBindingArgs struct {
	Condition    ZoneIamBindingConditionPtrInput
	DataplexZone pulumi.StringInput
	Lake         pulumi.StringInput
	Location     pulumi.StringPtrInput
	Members      pulumi.StringArrayInput
	Project      pulumi.StringPtrInput
	Role         pulumi.StringInput
}

func (ZoneIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneIamBindingArgs)(nil)).Elem()
}

type ZoneIamBindingInput interface {
	pulumi.Input

	ToZoneIamBindingOutput() ZoneIamBindingOutput
	ToZoneIamBindingOutputWithContext(ctx context.Context) ZoneIamBindingOutput
}

func (*ZoneIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneIamBinding)(nil)).Elem()
}

func (i *ZoneIamBinding) ToZoneIamBindingOutput() ZoneIamBindingOutput {
	return i.ToZoneIamBindingOutputWithContext(context.Background())
}

func (i *ZoneIamBinding) ToZoneIamBindingOutputWithContext(ctx context.Context) ZoneIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneIamBindingOutput)
}

// ZoneIamBindingArrayInput is an input type that accepts ZoneIamBindingArray and ZoneIamBindingArrayOutput values.
// You can construct a concrete instance of `ZoneIamBindingArrayInput` via:
//
//	ZoneIamBindingArray{ ZoneIamBindingArgs{...} }
type ZoneIamBindingArrayInput interface {
	pulumi.Input

	ToZoneIamBindingArrayOutput() ZoneIamBindingArrayOutput
	ToZoneIamBindingArrayOutputWithContext(context.Context) ZoneIamBindingArrayOutput
}

type ZoneIamBindingArray []ZoneIamBindingInput

func (ZoneIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneIamBinding)(nil)).Elem()
}

func (i ZoneIamBindingArray) ToZoneIamBindingArrayOutput() ZoneIamBindingArrayOutput {
	return i.ToZoneIamBindingArrayOutputWithContext(context.Background())
}

func (i ZoneIamBindingArray) ToZoneIamBindingArrayOutputWithContext(ctx context.Context) ZoneIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneIamBindingArrayOutput)
}

// ZoneIamBindingMapInput is an input type that accepts ZoneIamBindingMap and ZoneIamBindingMapOutput values.
// You can construct a concrete instance of `ZoneIamBindingMapInput` via:
//
//	ZoneIamBindingMap{ "key": ZoneIamBindingArgs{...} }
type ZoneIamBindingMapInput interface {
	pulumi.Input

	ToZoneIamBindingMapOutput() ZoneIamBindingMapOutput
	ToZoneIamBindingMapOutputWithContext(context.Context) ZoneIamBindingMapOutput
}

type ZoneIamBindingMap map[string]ZoneIamBindingInput

func (ZoneIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneIamBinding)(nil)).Elem()
}

func (i ZoneIamBindingMap) ToZoneIamBindingMapOutput() ZoneIamBindingMapOutput {
	return i.ToZoneIamBindingMapOutputWithContext(context.Background())
}

func (i ZoneIamBindingMap) ToZoneIamBindingMapOutputWithContext(ctx context.Context) ZoneIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneIamBindingMapOutput)
}

type ZoneIamBindingOutput struct{ *pulumi.OutputState }

func (ZoneIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneIamBinding)(nil)).Elem()
}

func (o ZoneIamBindingOutput) ToZoneIamBindingOutput() ZoneIamBindingOutput {
	return o
}

func (o ZoneIamBindingOutput) ToZoneIamBindingOutputWithContext(ctx context.Context) ZoneIamBindingOutput {
	return o
}

func (o ZoneIamBindingOutput) Condition() ZoneIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *ZoneIamBinding) ZoneIamBindingConditionPtrOutput { return v.Condition }).(ZoneIamBindingConditionPtrOutput)
}

func (o ZoneIamBindingOutput) DataplexZone() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamBinding) pulumi.StringOutput { return v.DataplexZone }).(pulumi.StringOutput)
}

func (o ZoneIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ZoneIamBindingOutput) Lake() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamBinding) pulumi.StringOutput { return v.Lake }).(pulumi.StringOutput)
}

func (o ZoneIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o ZoneIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZoneIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o ZoneIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ZoneIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type ZoneIamBindingArrayOutput struct{ *pulumi.OutputState }

func (ZoneIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneIamBinding)(nil)).Elem()
}

func (o ZoneIamBindingArrayOutput) ToZoneIamBindingArrayOutput() ZoneIamBindingArrayOutput {
	return o
}

func (o ZoneIamBindingArrayOutput) ToZoneIamBindingArrayOutputWithContext(ctx context.Context) ZoneIamBindingArrayOutput {
	return o
}

func (o ZoneIamBindingArrayOutput) Index(i pulumi.IntInput) ZoneIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneIamBinding {
		return vs[0].([]*ZoneIamBinding)[vs[1].(int)]
	}).(ZoneIamBindingOutput)
}

type ZoneIamBindingMapOutput struct{ *pulumi.OutputState }

func (ZoneIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneIamBinding)(nil)).Elem()
}

func (o ZoneIamBindingMapOutput) ToZoneIamBindingMapOutput() ZoneIamBindingMapOutput {
	return o
}

func (o ZoneIamBindingMapOutput) ToZoneIamBindingMapOutputWithContext(ctx context.Context) ZoneIamBindingMapOutput {
	return o
}

func (o ZoneIamBindingMapOutput) MapIndex(k pulumi.StringInput) ZoneIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneIamBinding {
		return vs[0].(map[string]*ZoneIamBinding)[vs[1].(string)]
	}).(ZoneIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneIamBindingInput)(nil)).Elem(), &ZoneIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneIamBindingArrayInput)(nil)).Elem(), ZoneIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneIamBindingMapInput)(nil)).Elem(), ZoneIamBindingMap{})
	pulumi.RegisterOutputType(ZoneIamBindingOutput{})
	pulumi.RegisterOutputType(ZoneIamBindingArrayOutput{})
	pulumi.RegisterOutputType(ZoneIamBindingMapOutput{})
}
