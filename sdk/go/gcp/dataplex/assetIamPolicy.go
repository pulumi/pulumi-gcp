// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AssetIamPolicy struct {
	pulumi.CustomResourceState

	Asset        pulumi.StringOutput `pulumi:"asset"`
	DataplexZone pulumi.StringOutput `pulumi:"dataplexZone"`
	Etag         pulumi.StringOutput `pulumi:"etag"`
	Lake         pulumi.StringOutput `pulumi:"lake"`
	Location     pulumi.StringOutput `pulumi:"location"`
	PolicyData   pulumi.StringOutput `pulumi:"policyData"`
	Project      pulumi.StringOutput `pulumi:"project"`
}

// NewAssetIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewAssetIamPolicy(ctx *pulumi.Context,
	name string, args *AssetIamPolicyArgs, opts ...pulumi.ResourceOption) (*AssetIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Asset == nil {
		return nil, errors.New("invalid value for required argument 'Asset'")
	}
	if args.DataplexZone == nil {
		return nil, errors.New("invalid value for required argument 'DataplexZone'")
	}
	if args.Lake == nil {
		return nil, errors.New("invalid value for required argument 'Lake'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	var resource AssetIamPolicy
	err := ctx.RegisterResource("gcp:dataplex/assetIamPolicy:AssetIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssetIamPolicy gets an existing AssetIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssetIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssetIamPolicyState, opts ...pulumi.ResourceOption) (*AssetIamPolicy, error) {
	var resource AssetIamPolicy
	err := ctx.ReadResource("gcp:dataplex/assetIamPolicy:AssetIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssetIamPolicy resources.
type assetIamPolicyState struct {
	Asset        *string `pulumi:"asset"`
	DataplexZone *string `pulumi:"dataplexZone"`
	Etag         *string `pulumi:"etag"`
	Lake         *string `pulumi:"lake"`
	Location     *string `pulumi:"location"`
	PolicyData   *string `pulumi:"policyData"`
	Project      *string `pulumi:"project"`
}

type AssetIamPolicyState struct {
	Asset        pulumi.StringPtrInput
	DataplexZone pulumi.StringPtrInput
	Etag         pulumi.StringPtrInput
	Lake         pulumi.StringPtrInput
	Location     pulumi.StringPtrInput
	PolicyData   pulumi.StringPtrInput
	Project      pulumi.StringPtrInput
}

func (AssetIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*assetIamPolicyState)(nil)).Elem()
}

type assetIamPolicyArgs struct {
	Asset        string  `pulumi:"asset"`
	DataplexZone string  `pulumi:"dataplexZone"`
	Lake         string  `pulumi:"lake"`
	Location     *string `pulumi:"location"`
	PolicyData   string  `pulumi:"policyData"`
	Project      *string `pulumi:"project"`
}

// The set of arguments for constructing a AssetIamPolicy resource.
type AssetIamPolicyArgs struct {
	Asset        pulumi.StringInput
	DataplexZone pulumi.StringInput
	Lake         pulumi.StringInput
	Location     pulumi.StringPtrInput
	PolicyData   pulumi.StringInput
	Project      pulumi.StringPtrInput
}

func (AssetIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assetIamPolicyArgs)(nil)).Elem()
}

type AssetIamPolicyInput interface {
	pulumi.Input

	ToAssetIamPolicyOutput() AssetIamPolicyOutput
	ToAssetIamPolicyOutputWithContext(ctx context.Context) AssetIamPolicyOutput
}

func (*AssetIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetIamPolicy)(nil)).Elem()
}

func (i *AssetIamPolicy) ToAssetIamPolicyOutput() AssetIamPolicyOutput {
	return i.ToAssetIamPolicyOutputWithContext(context.Background())
}

func (i *AssetIamPolicy) ToAssetIamPolicyOutputWithContext(ctx context.Context) AssetIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetIamPolicyOutput)
}

// AssetIamPolicyArrayInput is an input type that accepts AssetIamPolicyArray and AssetIamPolicyArrayOutput values.
// You can construct a concrete instance of `AssetIamPolicyArrayInput` via:
//
//	AssetIamPolicyArray{ AssetIamPolicyArgs{...} }
type AssetIamPolicyArrayInput interface {
	pulumi.Input

	ToAssetIamPolicyArrayOutput() AssetIamPolicyArrayOutput
	ToAssetIamPolicyArrayOutputWithContext(context.Context) AssetIamPolicyArrayOutput
}

type AssetIamPolicyArray []AssetIamPolicyInput

func (AssetIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssetIamPolicy)(nil)).Elem()
}

func (i AssetIamPolicyArray) ToAssetIamPolicyArrayOutput() AssetIamPolicyArrayOutput {
	return i.ToAssetIamPolicyArrayOutputWithContext(context.Background())
}

func (i AssetIamPolicyArray) ToAssetIamPolicyArrayOutputWithContext(ctx context.Context) AssetIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetIamPolicyArrayOutput)
}

// AssetIamPolicyMapInput is an input type that accepts AssetIamPolicyMap and AssetIamPolicyMapOutput values.
// You can construct a concrete instance of `AssetIamPolicyMapInput` via:
//
//	AssetIamPolicyMap{ "key": AssetIamPolicyArgs{...} }
type AssetIamPolicyMapInput interface {
	pulumi.Input

	ToAssetIamPolicyMapOutput() AssetIamPolicyMapOutput
	ToAssetIamPolicyMapOutputWithContext(context.Context) AssetIamPolicyMapOutput
}

type AssetIamPolicyMap map[string]AssetIamPolicyInput

func (AssetIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssetIamPolicy)(nil)).Elem()
}

func (i AssetIamPolicyMap) ToAssetIamPolicyMapOutput() AssetIamPolicyMapOutput {
	return i.ToAssetIamPolicyMapOutputWithContext(context.Background())
}

func (i AssetIamPolicyMap) ToAssetIamPolicyMapOutputWithContext(ctx context.Context) AssetIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetIamPolicyMapOutput)
}

type AssetIamPolicyOutput struct{ *pulumi.OutputState }

func (AssetIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetIamPolicy)(nil)).Elem()
}

func (o AssetIamPolicyOutput) ToAssetIamPolicyOutput() AssetIamPolicyOutput {
	return o
}

func (o AssetIamPolicyOutput) ToAssetIamPolicyOutputWithContext(ctx context.Context) AssetIamPolicyOutput {
	return o
}

func (o AssetIamPolicyOutput) Asset() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamPolicy) pulumi.StringOutput { return v.Asset }).(pulumi.StringOutput)
}

func (o AssetIamPolicyOutput) DataplexZone() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamPolicy) pulumi.StringOutput { return v.DataplexZone }).(pulumi.StringOutput)
}

func (o AssetIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o AssetIamPolicyOutput) Lake() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamPolicy) pulumi.StringOutput { return v.Lake }).(pulumi.StringOutput)
}

func (o AssetIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o AssetIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o AssetIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type AssetIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (AssetIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssetIamPolicy)(nil)).Elem()
}

func (o AssetIamPolicyArrayOutput) ToAssetIamPolicyArrayOutput() AssetIamPolicyArrayOutput {
	return o
}

func (o AssetIamPolicyArrayOutput) ToAssetIamPolicyArrayOutputWithContext(ctx context.Context) AssetIamPolicyArrayOutput {
	return o
}

func (o AssetIamPolicyArrayOutput) Index(i pulumi.IntInput) AssetIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssetIamPolicy {
		return vs[0].([]*AssetIamPolicy)[vs[1].(int)]
	}).(AssetIamPolicyOutput)
}

type AssetIamPolicyMapOutput struct{ *pulumi.OutputState }

func (AssetIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssetIamPolicy)(nil)).Elem()
}

func (o AssetIamPolicyMapOutput) ToAssetIamPolicyMapOutput() AssetIamPolicyMapOutput {
	return o
}

func (o AssetIamPolicyMapOutput) ToAssetIamPolicyMapOutputWithContext(ctx context.Context) AssetIamPolicyMapOutput {
	return o
}

func (o AssetIamPolicyMapOutput) MapIndex(k pulumi.StringInput) AssetIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssetIamPolicy {
		return vs[0].(map[string]*AssetIamPolicy)[vs[1].(string)]
	}).(AssetIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssetIamPolicyInput)(nil)).Elem(), &AssetIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetIamPolicyArrayInput)(nil)).Elem(), AssetIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetIamPolicyMapInput)(nil)).Elem(), AssetIamPolicyMap{})
	pulumi.RegisterOutputType(AssetIamPolicyOutput{})
	pulumi.RegisterOutputType(AssetIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(AssetIamPolicyMapOutput{})
}
