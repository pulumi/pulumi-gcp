// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Dataplex task represents the work that you want Dataplex to do on a schedule. It encapsulates code, parameters, and the schedule.
//
// To get more information about Task, see:
//
// * [API documentation](https://cloud.google.com/dataplex/docs/reference/rest/v1/projects.locations.lakes.tasks)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/dataplex/docs)
//
// ## Example Usage
//
// ## Import
//
// # Task can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:dataplex/task:Task default projects/{{project}}/locations/{{location}}/lakes/{{lake}}/tasks/{{task_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:dataplex/task:Task default {{project}}/{{location}}/{{lake}}/{{task_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:dataplex/task:Task default {{location}}/{{lake}}/{{task_id}}
//
// ```
type Task struct {
	pulumi.CustomResourceState

	// The time when the task was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User-provided description of the task.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User friendly display name.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
	// clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Configuration for the cluster
	// Structure is documented below.
	ExecutionSpec TaskExecutionSpecOutput `pulumi:"executionSpec"`
	// Configuration for the cluster
	// Structure is documented below.
	ExecutionStatuses TaskExecutionStatusArrayOutput `pulumi:"executionStatuses"`
	// User-defined labels for the task.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The lake in which the task will be created in.
	Lake pulumi.StringPtrOutput `pulumi:"lake"`
	// The location in which the task will be created in.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// (Output)
	// The relative resource name of the job, of the form: projects/{project_number}/locations/{locationId}/lakes/{lakeId}/tasks/{taskId}/jobs/{jobId}.
	Name pulumi.StringOutput `pulumi:"name"`
	// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
	// Structure is documented below.
	Notebook TaskNotebookPtrOutput `pulumi:"notebook"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
	// Structure is documented below.
	Spark TaskSparkPtrOutput `pulumi:"spark"`
	// (Output)
	// Execution state for the job.
	State pulumi.StringOutput `pulumi:"state"`
	// The task Id of the task.
	TaskId pulumi.StringPtrOutput `pulumi:"taskId"`
	// Configuration for the cluster
	// Structure is documented below.
	TriggerSpec TaskTriggerSpecOutput `pulumi:"triggerSpec"`
	// (Output)
	// System generated globally unique ID for the job.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// (Output)
	// Last update time of the status.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTask registers a new resource with the given unique name, arguments, and options.
func NewTask(ctx *pulumi.Context,
	name string, args *TaskArgs, opts ...pulumi.ResourceOption) (*Task, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExecutionSpec == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionSpec'")
	}
	if args.TriggerSpec == nil {
		return nil, errors.New("invalid value for required argument 'TriggerSpec'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Task
	err := ctx.RegisterResource("gcp:dataplex/task:Task", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTask gets an existing Task resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskState, opts ...pulumi.ResourceOption) (*Task, error) {
	var resource Task
	err := ctx.ReadResource("gcp:dataplex/task:Task", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Task resources.
type taskState struct {
	// The time when the task was created.
	CreateTime *string `pulumi:"createTime"`
	// User-provided description of the task.
	Description *string `pulumi:"description"`
	// User friendly display name.
	DisplayName *string `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
	// clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Configuration for the cluster
	// Structure is documented below.
	ExecutionSpec *TaskExecutionSpec `pulumi:"executionSpec"`
	// Configuration for the cluster
	// Structure is documented below.
	ExecutionStatuses []TaskExecutionStatus `pulumi:"executionStatuses"`
	// User-defined labels for the task.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The lake in which the task will be created in.
	Lake *string `pulumi:"lake"`
	// The location in which the task will be created in.
	Location *string `pulumi:"location"`
	// (Output)
	// The relative resource name of the job, of the form: projects/{project_number}/locations/{locationId}/lakes/{lakeId}/tasks/{taskId}/jobs/{jobId}.
	Name *string `pulumi:"name"`
	// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
	// Structure is documented below.
	Notebook *TaskNotebook `pulumi:"notebook"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
	// Structure is documented below.
	Spark *TaskSpark `pulumi:"spark"`
	// (Output)
	// Execution state for the job.
	State *string `pulumi:"state"`
	// The task Id of the task.
	TaskId *string `pulumi:"taskId"`
	// Configuration for the cluster
	// Structure is documented below.
	TriggerSpec *TaskTriggerSpec `pulumi:"triggerSpec"`
	// (Output)
	// System generated globally unique ID for the job.
	Uid *string `pulumi:"uid"`
	// (Output)
	// Last update time of the status.
	UpdateTime *string `pulumi:"updateTime"`
}

type TaskState struct {
	// The time when the task was created.
	CreateTime pulumi.StringPtrInput
	// User-provided description of the task.
	Description pulumi.StringPtrInput
	// User friendly display name.
	DisplayName pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
	// clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Configuration for the cluster
	// Structure is documented below.
	ExecutionSpec TaskExecutionSpecPtrInput
	// Configuration for the cluster
	// Structure is documented below.
	ExecutionStatuses TaskExecutionStatusArrayInput
	// User-defined labels for the task.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The lake in which the task will be created in.
	Lake pulumi.StringPtrInput
	// The location in which the task will be created in.
	Location pulumi.StringPtrInput
	// (Output)
	// The relative resource name of the job, of the form: projects/{project_number}/locations/{locationId}/lakes/{lakeId}/tasks/{taskId}/jobs/{jobId}.
	Name pulumi.StringPtrInput
	// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
	// Structure is documented below.
	Notebook TaskNotebookPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
	// Structure is documented below.
	Spark TaskSparkPtrInput
	// (Output)
	// Execution state for the job.
	State pulumi.StringPtrInput
	// The task Id of the task.
	TaskId pulumi.StringPtrInput
	// Configuration for the cluster
	// Structure is documented below.
	TriggerSpec TaskTriggerSpecPtrInput
	// (Output)
	// System generated globally unique ID for the job.
	Uid pulumi.StringPtrInput
	// (Output)
	// Last update time of the status.
	UpdateTime pulumi.StringPtrInput
}

func (TaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskState)(nil)).Elem()
}

type taskArgs struct {
	// User-provided description of the task.
	Description *string `pulumi:"description"`
	// User friendly display name.
	DisplayName *string `pulumi:"displayName"`
	// Configuration for the cluster
	// Structure is documented below.
	ExecutionSpec TaskExecutionSpec `pulumi:"executionSpec"`
	// User-defined labels for the task.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The lake in which the task will be created in.
	Lake *string `pulumi:"lake"`
	// The location in which the task will be created in.
	Location *string `pulumi:"location"`
	// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
	// Structure is documented below.
	Notebook *TaskNotebook `pulumi:"notebook"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
	// Structure is documented below.
	Spark *TaskSpark `pulumi:"spark"`
	// The task Id of the task.
	TaskId *string `pulumi:"taskId"`
	// Configuration for the cluster
	// Structure is documented below.
	TriggerSpec TaskTriggerSpec `pulumi:"triggerSpec"`
}

// The set of arguments for constructing a Task resource.
type TaskArgs struct {
	// User-provided description of the task.
	Description pulumi.StringPtrInput
	// User friendly display name.
	DisplayName pulumi.StringPtrInput
	// Configuration for the cluster
	// Structure is documented below.
	ExecutionSpec TaskExecutionSpecInput
	// User-defined labels for the task.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The lake in which the task will be created in.
	Lake pulumi.StringPtrInput
	// The location in which the task will be created in.
	Location pulumi.StringPtrInput
	// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
	// Structure is documented below.
	Notebook TaskNotebookPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
	// Structure is documented below.
	Spark TaskSparkPtrInput
	// The task Id of the task.
	TaskId pulumi.StringPtrInput
	// Configuration for the cluster
	// Structure is documented below.
	TriggerSpec TaskTriggerSpecInput
}

func (TaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskArgs)(nil)).Elem()
}

type TaskInput interface {
	pulumi.Input

	ToTaskOutput() TaskOutput
	ToTaskOutputWithContext(ctx context.Context) TaskOutput
}

func (*Task) ElementType() reflect.Type {
	return reflect.TypeOf((**Task)(nil)).Elem()
}

func (i *Task) ToTaskOutput() TaskOutput {
	return i.ToTaskOutputWithContext(context.Background())
}

func (i *Task) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOutput)
}

// TaskArrayInput is an input type that accepts TaskArray and TaskArrayOutput values.
// You can construct a concrete instance of `TaskArrayInput` via:
//
//	TaskArray{ TaskArgs{...} }
type TaskArrayInput interface {
	pulumi.Input

	ToTaskArrayOutput() TaskArrayOutput
	ToTaskArrayOutputWithContext(context.Context) TaskArrayOutput
}

type TaskArray []TaskInput

func (TaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Task)(nil)).Elem()
}

func (i TaskArray) ToTaskArrayOutput() TaskArrayOutput {
	return i.ToTaskArrayOutputWithContext(context.Background())
}

func (i TaskArray) ToTaskArrayOutputWithContext(ctx context.Context) TaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskArrayOutput)
}

// TaskMapInput is an input type that accepts TaskMap and TaskMapOutput values.
// You can construct a concrete instance of `TaskMapInput` via:
//
//	TaskMap{ "key": TaskArgs{...} }
type TaskMapInput interface {
	pulumi.Input

	ToTaskMapOutput() TaskMapOutput
	ToTaskMapOutputWithContext(context.Context) TaskMapOutput
}

type TaskMap map[string]TaskInput

func (TaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Task)(nil)).Elem()
}

func (i TaskMap) ToTaskMapOutput() TaskMapOutput {
	return i.ToTaskMapOutputWithContext(context.Background())
}

func (i TaskMap) ToTaskMapOutputWithContext(ctx context.Context) TaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskMapOutput)
}

type TaskOutput struct{ *pulumi.OutputState }

func (TaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Task)(nil)).Elem()
}

func (o TaskOutput) ToTaskOutput() TaskOutput {
	return o
}

func (o TaskOutput) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return o
}

// The time when the task was created.
func (o TaskOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// User-provided description of the task.
func (o TaskOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// User friendly display name.
func (o TaskOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other
// clients and services.
func (o TaskOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Task) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Configuration for the cluster
// Structure is documented below.
func (o TaskOutput) ExecutionSpec() TaskExecutionSpecOutput {
	return o.ApplyT(func(v *Task) TaskExecutionSpecOutput { return v.ExecutionSpec }).(TaskExecutionSpecOutput)
}

// Configuration for the cluster
// Structure is documented below.
func (o TaskOutput) ExecutionStatuses() TaskExecutionStatusArrayOutput {
	return o.ApplyT(func(v *Task) TaskExecutionStatusArrayOutput { return v.ExecutionStatuses }).(TaskExecutionStatusArrayOutput)
}

// User-defined labels for the task.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o TaskOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Task) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The lake in which the task will be created in.
func (o TaskOutput) Lake() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.Lake }).(pulumi.StringPtrOutput)
}

// The location in which the task will be created in.
func (o TaskOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// (Output)
// The relative resource name of the job, of the form: projects/{project_number}/locations/{locationId}/lakes/{lakeId}/tasks/{taskId}/jobs/{jobId}.
func (o TaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
// Structure is documented below.
func (o TaskOutput) Notebook() TaskNotebookPtrOutput {
	return o.ApplyT(func(v *Task) TaskNotebookPtrOutput { return v.Notebook }).(TaskNotebookPtrOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o TaskOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o TaskOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Task) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
// Structure is documented below.
func (o TaskOutput) Spark() TaskSparkPtrOutput {
	return o.ApplyT(func(v *Task) TaskSparkPtrOutput { return v.Spark }).(TaskSparkPtrOutput)
}

// (Output)
// Execution state for the job.
func (o TaskOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The task Id of the task.
func (o TaskOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.TaskId }).(pulumi.StringPtrOutput)
}

// Configuration for the cluster
// Structure is documented below.
func (o TaskOutput) TriggerSpec() TaskTriggerSpecOutput {
	return o.ApplyT(func(v *Task) TaskTriggerSpecOutput { return v.TriggerSpec }).(TaskTriggerSpecOutput)
}

// (Output)
// System generated globally unique ID for the job.
func (o TaskOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// (Output)
// Last update time of the status.
func (o TaskOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type TaskArrayOutput struct{ *pulumi.OutputState }

func (TaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Task)(nil)).Elem()
}

func (o TaskArrayOutput) ToTaskArrayOutput() TaskArrayOutput {
	return o
}

func (o TaskArrayOutput) ToTaskArrayOutputWithContext(ctx context.Context) TaskArrayOutput {
	return o
}

func (o TaskArrayOutput) Index(i pulumi.IntInput) TaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Task {
		return vs[0].([]*Task)[vs[1].(int)]
	}).(TaskOutput)
}

type TaskMapOutput struct{ *pulumi.OutputState }

func (TaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Task)(nil)).Elem()
}

func (o TaskMapOutput) ToTaskMapOutput() TaskMapOutput {
	return o
}

func (o TaskMapOutput) ToTaskMapOutputWithContext(ctx context.Context) TaskMapOutput {
	return o
}

func (o TaskMapOutput) MapIndex(k pulumi.StringInput) TaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Task {
		return vs[0].(map[string]*Task)[vs[1].(string)]
	}).(TaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TaskInput)(nil)).Elem(), &Task{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskArrayInput)(nil)).Elem(), TaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskMapInput)(nil)).Elem(), TaskMap{})
	pulumi.RegisterOutputType(TaskOutput{})
	pulumi.RegisterOutputType(TaskArrayOutput{})
	pulumi.RegisterOutputType(TaskMapOutput{})
}
