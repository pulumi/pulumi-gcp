// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Dataplex Glossary. Each of these resources serves a different use case:
//
// * `dataplex.GlossaryIamPolicy`: Authoritative. Sets the IAM policy for the glossary and replaces any existing policy already attached.
// * `dataplex.GlossaryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the glossary are preserved.
// * `dataplex.GlossaryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the glossary are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.GlossaryIamPolicy`: Retrieves the IAM policy for the glossary
//
// > **Note:** `dataplex.GlossaryIamPolicy` **cannot** be used in conjunction with `dataplex.GlossaryIamBinding` and `dataplex.GlossaryIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.GlossaryIamBinding` resources **can be** used in conjunction with `dataplex.GlossaryIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataplex.GlossaryIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewGlossaryIamPolicy(ctx, "policy", &dataplex.GlossaryIamPolicyArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.GlossaryIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewGlossaryIamBinding(ctx, "binding", &dataplex.GlossaryIamBindingArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				Role:       pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.GlossaryIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewGlossaryIamMember(ctx, "member", &dataplex.GlossaryIamMemberArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				Role:       pulumi.String("roles/viewer"),
//				Member:     pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Dataplex Glossary
//
// Three different resources help you manage your IAM policy for Dataplex Glossary. Each of these resources serves a different use case:
//
// * `dataplex.GlossaryIamPolicy`: Authoritative. Sets the IAM policy for the glossary and replaces any existing policy already attached.
// * `dataplex.GlossaryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the glossary are preserved.
// * `dataplex.GlossaryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the glossary are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.GlossaryIamPolicy`: Retrieves the IAM policy for the glossary
//
// > **Note:** `dataplex.GlossaryIamPolicy` **cannot** be used in conjunction with `dataplex.GlossaryIamBinding` and `dataplex.GlossaryIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.GlossaryIamBinding` resources **can be** used in conjunction with `dataplex.GlossaryIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataplex.GlossaryIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewGlossaryIamPolicy(ctx, "policy", &dataplex.GlossaryIamPolicyArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.GlossaryIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewGlossaryIamBinding(ctx, "binding", &dataplex.GlossaryIamBindingArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				Role:       pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.GlossaryIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewGlossaryIamMember(ctx, "member", &dataplex.GlossaryIamMemberArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				Role:       pulumi.String("roles/viewer"),
//				Member:     pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}
//
// * {{project}}/{{location}}/{{glossary_id}}
//
// * {{location}}/{{glossary_id}}
//
// * {{glossary_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Dataplex glossary IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/glossaryIamPolicy:GlossaryIamPolicy editor "projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/glossaryIamPolicy:GlossaryIamPolicy editor "projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/glossaryIamPolicy:GlossaryIamPolicy editor projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type GlossaryIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId pulumi.StringOutput `pulumi:"glossaryId"`
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewGlossaryIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewGlossaryIamPolicy(ctx *pulumi.Context,
	name string, args *GlossaryIamPolicyArgs, opts ...pulumi.ResourceOption) (*GlossaryIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlossaryId == nil {
		return nil, errors.New("invalid value for required argument 'GlossaryId'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GlossaryIamPolicy
	err := ctx.RegisterResource("gcp:dataplex/glossaryIamPolicy:GlossaryIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlossaryIamPolicy gets an existing GlossaryIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlossaryIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlossaryIamPolicyState, opts ...pulumi.ResourceOption) (*GlossaryIamPolicy, error) {
	var resource GlossaryIamPolicy
	err := ctx.ReadResource("gcp:dataplex/glossaryIamPolicy:GlossaryIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlossaryIamPolicy resources.
type glossaryIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId *string `pulumi:"glossaryId"`
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

type GlossaryIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId pulumi.StringPtrInput
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (GlossaryIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*glossaryIamPolicyState)(nil)).Elem()
}

type glossaryIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId string `pulumi:"glossaryId"`
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a GlossaryIamPolicy resource.
type GlossaryIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId pulumi.StringInput
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (GlossaryIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*glossaryIamPolicyArgs)(nil)).Elem()
}

type GlossaryIamPolicyInput interface {
	pulumi.Input

	ToGlossaryIamPolicyOutput() GlossaryIamPolicyOutput
	ToGlossaryIamPolicyOutputWithContext(ctx context.Context) GlossaryIamPolicyOutput
}

func (*GlossaryIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryIamPolicy)(nil)).Elem()
}

func (i *GlossaryIamPolicy) ToGlossaryIamPolicyOutput() GlossaryIamPolicyOutput {
	return i.ToGlossaryIamPolicyOutputWithContext(context.Background())
}

func (i *GlossaryIamPolicy) ToGlossaryIamPolicyOutputWithContext(ctx context.Context) GlossaryIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryIamPolicyOutput)
}

// GlossaryIamPolicyArrayInput is an input type that accepts GlossaryIamPolicyArray and GlossaryIamPolicyArrayOutput values.
// You can construct a concrete instance of `GlossaryIamPolicyArrayInput` via:
//
//	GlossaryIamPolicyArray{ GlossaryIamPolicyArgs{...} }
type GlossaryIamPolicyArrayInput interface {
	pulumi.Input

	ToGlossaryIamPolicyArrayOutput() GlossaryIamPolicyArrayOutput
	ToGlossaryIamPolicyArrayOutputWithContext(context.Context) GlossaryIamPolicyArrayOutput
}

type GlossaryIamPolicyArray []GlossaryIamPolicyInput

func (GlossaryIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlossaryIamPolicy)(nil)).Elem()
}

func (i GlossaryIamPolicyArray) ToGlossaryIamPolicyArrayOutput() GlossaryIamPolicyArrayOutput {
	return i.ToGlossaryIamPolicyArrayOutputWithContext(context.Background())
}

func (i GlossaryIamPolicyArray) ToGlossaryIamPolicyArrayOutputWithContext(ctx context.Context) GlossaryIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryIamPolicyArrayOutput)
}

// GlossaryIamPolicyMapInput is an input type that accepts GlossaryIamPolicyMap and GlossaryIamPolicyMapOutput values.
// You can construct a concrete instance of `GlossaryIamPolicyMapInput` via:
//
//	GlossaryIamPolicyMap{ "key": GlossaryIamPolicyArgs{...} }
type GlossaryIamPolicyMapInput interface {
	pulumi.Input

	ToGlossaryIamPolicyMapOutput() GlossaryIamPolicyMapOutput
	ToGlossaryIamPolicyMapOutputWithContext(context.Context) GlossaryIamPolicyMapOutput
}

type GlossaryIamPolicyMap map[string]GlossaryIamPolicyInput

func (GlossaryIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlossaryIamPolicy)(nil)).Elem()
}

func (i GlossaryIamPolicyMap) ToGlossaryIamPolicyMapOutput() GlossaryIamPolicyMapOutput {
	return i.ToGlossaryIamPolicyMapOutputWithContext(context.Background())
}

func (i GlossaryIamPolicyMap) ToGlossaryIamPolicyMapOutputWithContext(ctx context.Context) GlossaryIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryIamPolicyMapOutput)
}

type GlossaryIamPolicyOutput struct{ *pulumi.OutputState }

func (GlossaryIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryIamPolicy)(nil)).Elem()
}

func (o GlossaryIamPolicyOutput) ToGlossaryIamPolicyOutput() GlossaryIamPolicyOutput {
	return o
}

func (o GlossaryIamPolicyOutput) ToGlossaryIamPolicyOutputWithContext(ctx context.Context) GlossaryIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o GlossaryIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o GlossaryIamPolicyOutput) GlossaryId() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryIamPolicy) pulumi.StringOutput { return v.GlossaryId }).(pulumi.StringOutput)
}

// The location where the glossary should reside.
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o GlossaryIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o GlossaryIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o GlossaryIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type GlossaryIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (GlossaryIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlossaryIamPolicy)(nil)).Elem()
}

func (o GlossaryIamPolicyArrayOutput) ToGlossaryIamPolicyArrayOutput() GlossaryIamPolicyArrayOutput {
	return o
}

func (o GlossaryIamPolicyArrayOutput) ToGlossaryIamPolicyArrayOutputWithContext(ctx context.Context) GlossaryIamPolicyArrayOutput {
	return o
}

func (o GlossaryIamPolicyArrayOutput) Index(i pulumi.IntInput) GlossaryIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GlossaryIamPolicy {
		return vs[0].([]*GlossaryIamPolicy)[vs[1].(int)]
	}).(GlossaryIamPolicyOutput)
}

type GlossaryIamPolicyMapOutput struct{ *pulumi.OutputState }

func (GlossaryIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlossaryIamPolicy)(nil)).Elem()
}

func (o GlossaryIamPolicyMapOutput) ToGlossaryIamPolicyMapOutput() GlossaryIamPolicyMapOutput {
	return o
}

func (o GlossaryIamPolicyMapOutput) ToGlossaryIamPolicyMapOutputWithContext(ctx context.Context) GlossaryIamPolicyMapOutput {
	return o
}

func (o GlossaryIamPolicyMapOutput) MapIndex(k pulumi.StringInput) GlossaryIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GlossaryIamPolicy {
		return vs[0].(map[string]*GlossaryIamPolicy)[vs[1].(string)]
	}).(GlossaryIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryIamPolicyInput)(nil)).Elem(), &GlossaryIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryIamPolicyArrayInput)(nil)).Elem(), GlossaryIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryIamPolicyMapInput)(nil)).Elem(), GlossaryIamPolicyMap{})
	pulumi.RegisterOutputType(GlossaryIamPolicyOutput{})
	pulumi.RegisterOutputType(GlossaryIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(GlossaryIamPolicyMapOutput{})
}
