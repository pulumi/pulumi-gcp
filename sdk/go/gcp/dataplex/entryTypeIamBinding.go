// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Dataplex EntryType. Each of these resources serves a different use case:
//
// * `dataplex.EntryTypeIamPolicy`: Authoritative. Sets the IAM policy for the entrytype and replaces any existing policy already attached.
// * `dataplex.EntryTypeIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the entrytype are preserved.
// * `dataplex.EntryTypeIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the entrytype are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.EntryTypeIamPolicy`: Retrieves the IAM policy for the entrytype
//
// > **Note:** `dataplex.EntryTypeIamPolicy` **cannot** be used in conjunction with `dataplex.EntryTypeIamBinding` and `dataplex.EntryTypeIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.EntryTypeIamBinding` resources **can be** used in conjunction with `dataplex.EntryTypeIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataplex.EntryTypeIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewEntryTypeIamPolicy(ctx, "policy", &dataplex.EntryTypeIamPolicyArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				PolicyData:  pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.EntryTypeIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewEntryTypeIamBinding(ctx, "binding", &dataplex.EntryTypeIamBindingArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				Role:        pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.EntryTypeIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewEntryTypeIamMember(ctx, "member", &dataplex.EntryTypeIamMemberArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				Role:        pulumi.String("roles/viewer"),
//				Member:      pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Dataplex EntryType
//
// Three different resources help you manage your IAM policy for Dataplex EntryType. Each of these resources serves a different use case:
//
// * `dataplex.EntryTypeIamPolicy`: Authoritative. Sets the IAM policy for the entrytype and replaces any existing policy already attached.
// * `dataplex.EntryTypeIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the entrytype are preserved.
// * `dataplex.EntryTypeIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the entrytype are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.EntryTypeIamPolicy`: Retrieves the IAM policy for the entrytype
//
// > **Note:** `dataplex.EntryTypeIamPolicy` **cannot** be used in conjunction with `dataplex.EntryTypeIamBinding` and `dataplex.EntryTypeIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.EntryTypeIamBinding` resources **can be** used in conjunction with `dataplex.EntryTypeIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataplex.EntryTypeIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewEntryTypeIamPolicy(ctx, "policy", &dataplex.EntryTypeIamPolicyArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				PolicyData:  pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.EntryTypeIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewEntryTypeIamBinding(ctx, "binding", &dataplex.EntryTypeIamBindingArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				Role:        pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.EntryTypeIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewEntryTypeIamMember(ctx, "member", &dataplex.EntryTypeIamMemberArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				Role:        pulumi.String("roles/viewer"),
//				Member:      pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}
//
// * {{project}}/{{location}}/{{entry_type_id}}
//
// * {{location}}/{{entry_type_id}}
//
// * {{entry_type_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Dataplex entrytype IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/entryTypeIamBinding:EntryTypeIamBinding editor "projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/entryTypeIamBinding:EntryTypeIamBinding editor "projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/entryTypeIamBinding:EntryTypeIamBinding editor projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type EntryTypeIamBinding struct {
	pulumi.CustomResourceState

	Condition EntryTypeIamBindingConditionPtrOutput `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	EntryTypeId pulumi.StringOutput `pulumi:"entryTypeId"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location where entry type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.EntryTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewEntryTypeIamBinding registers a new resource with the given unique name, arguments, and options.
func NewEntryTypeIamBinding(ctx *pulumi.Context,
	name string, args *EntryTypeIamBindingArgs, opts ...pulumi.ResourceOption) (*EntryTypeIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntryTypeId == nil {
		return nil, errors.New("invalid value for required argument 'EntryTypeId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EntryTypeIamBinding
	err := ctx.RegisterResource("gcp:dataplex/entryTypeIamBinding:EntryTypeIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntryTypeIamBinding gets an existing EntryTypeIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntryTypeIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntryTypeIamBindingState, opts ...pulumi.ResourceOption) (*EntryTypeIamBinding, error) {
	var resource EntryTypeIamBinding
	err := ctx.ReadResource("gcp:dataplex/entryTypeIamBinding:EntryTypeIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EntryTypeIamBinding resources.
type entryTypeIamBindingState struct {
	Condition *EntryTypeIamBindingCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	EntryTypeId *string `pulumi:"entryTypeId"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location where entry type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.EntryTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type EntryTypeIamBindingState struct {
	Condition EntryTypeIamBindingConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	EntryTypeId pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location where entry type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataplex.EntryTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (EntryTypeIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*entryTypeIamBindingState)(nil)).Elem()
}

type entryTypeIamBindingArgs struct {
	Condition *EntryTypeIamBindingCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	EntryTypeId string `pulumi:"entryTypeId"`
	// The location where entry type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.EntryTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a EntryTypeIamBinding resource.
type EntryTypeIamBindingArgs struct {
	Condition EntryTypeIamBindingConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	EntryTypeId pulumi.StringInput
	// The location where entry type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataplex.EntryTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (EntryTypeIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entryTypeIamBindingArgs)(nil)).Elem()
}

type EntryTypeIamBindingInput interface {
	pulumi.Input

	ToEntryTypeIamBindingOutput() EntryTypeIamBindingOutput
	ToEntryTypeIamBindingOutputWithContext(ctx context.Context) EntryTypeIamBindingOutput
}

func (*EntryTypeIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**EntryTypeIamBinding)(nil)).Elem()
}

func (i *EntryTypeIamBinding) ToEntryTypeIamBindingOutput() EntryTypeIamBindingOutput {
	return i.ToEntryTypeIamBindingOutputWithContext(context.Background())
}

func (i *EntryTypeIamBinding) ToEntryTypeIamBindingOutputWithContext(ctx context.Context) EntryTypeIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryTypeIamBindingOutput)
}

// EntryTypeIamBindingArrayInput is an input type that accepts EntryTypeIamBindingArray and EntryTypeIamBindingArrayOutput values.
// You can construct a concrete instance of `EntryTypeIamBindingArrayInput` via:
//
//	EntryTypeIamBindingArray{ EntryTypeIamBindingArgs{...} }
type EntryTypeIamBindingArrayInput interface {
	pulumi.Input

	ToEntryTypeIamBindingArrayOutput() EntryTypeIamBindingArrayOutput
	ToEntryTypeIamBindingArrayOutputWithContext(context.Context) EntryTypeIamBindingArrayOutput
}

type EntryTypeIamBindingArray []EntryTypeIamBindingInput

func (EntryTypeIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntryTypeIamBinding)(nil)).Elem()
}

func (i EntryTypeIamBindingArray) ToEntryTypeIamBindingArrayOutput() EntryTypeIamBindingArrayOutput {
	return i.ToEntryTypeIamBindingArrayOutputWithContext(context.Background())
}

func (i EntryTypeIamBindingArray) ToEntryTypeIamBindingArrayOutputWithContext(ctx context.Context) EntryTypeIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryTypeIamBindingArrayOutput)
}

// EntryTypeIamBindingMapInput is an input type that accepts EntryTypeIamBindingMap and EntryTypeIamBindingMapOutput values.
// You can construct a concrete instance of `EntryTypeIamBindingMapInput` via:
//
//	EntryTypeIamBindingMap{ "key": EntryTypeIamBindingArgs{...} }
type EntryTypeIamBindingMapInput interface {
	pulumi.Input

	ToEntryTypeIamBindingMapOutput() EntryTypeIamBindingMapOutput
	ToEntryTypeIamBindingMapOutputWithContext(context.Context) EntryTypeIamBindingMapOutput
}

type EntryTypeIamBindingMap map[string]EntryTypeIamBindingInput

func (EntryTypeIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntryTypeIamBinding)(nil)).Elem()
}

func (i EntryTypeIamBindingMap) ToEntryTypeIamBindingMapOutput() EntryTypeIamBindingMapOutput {
	return i.ToEntryTypeIamBindingMapOutputWithContext(context.Background())
}

func (i EntryTypeIamBindingMap) ToEntryTypeIamBindingMapOutputWithContext(ctx context.Context) EntryTypeIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryTypeIamBindingMapOutput)
}

type EntryTypeIamBindingOutput struct{ *pulumi.OutputState }

func (EntryTypeIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntryTypeIamBinding)(nil)).Elem()
}

func (o EntryTypeIamBindingOutput) ToEntryTypeIamBindingOutput() EntryTypeIamBindingOutput {
	return o
}

func (o EntryTypeIamBindingOutput) ToEntryTypeIamBindingOutputWithContext(ctx context.Context) EntryTypeIamBindingOutput {
	return o
}

func (o EntryTypeIamBindingOutput) Condition() EntryTypeIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *EntryTypeIamBinding) EntryTypeIamBindingConditionPtrOutput { return v.Condition }).(EntryTypeIamBindingConditionPtrOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o EntryTypeIamBindingOutput) EntryTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryTypeIamBinding) pulumi.StringOutput { return v.EntryTypeId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o EntryTypeIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryTypeIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location where entry type will be created in.
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o EntryTypeIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryTypeIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
func (o EntryTypeIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EntryTypeIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o EntryTypeIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryTypeIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `dataplex.EntryTypeIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o EntryTypeIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryTypeIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type EntryTypeIamBindingArrayOutput struct{ *pulumi.OutputState }

func (EntryTypeIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntryTypeIamBinding)(nil)).Elem()
}

func (o EntryTypeIamBindingArrayOutput) ToEntryTypeIamBindingArrayOutput() EntryTypeIamBindingArrayOutput {
	return o
}

func (o EntryTypeIamBindingArrayOutput) ToEntryTypeIamBindingArrayOutputWithContext(ctx context.Context) EntryTypeIamBindingArrayOutput {
	return o
}

func (o EntryTypeIamBindingArrayOutput) Index(i pulumi.IntInput) EntryTypeIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EntryTypeIamBinding {
		return vs[0].([]*EntryTypeIamBinding)[vs[1].(int)]
	}).(EntryTypeIamBindingOutput)
}

type EntryTypeIamBindingMapOutput struct{ *pulumi.OutputState }

func (EntryTypeIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntryTypeIamBinding)(nil)).Elem()
}

func (o EntryTypeIamBindingMapOutput) ToEntryTypeIamBindingMapOutput() EntryTypeIamBindingMapOutput {
	return o
}

func (o EntryTypeIamBindingMapOutput) ToEntryTypeIamBindingMapOutputWithContext(ctx context.Context) EntryTypeIamBindingMapOutput {
	return o
}

func (o EntryTypeIamBindingMapOutput) MapIndex(k pulumi.StringInput) EntryTypeIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EntryTypeIamBinding {
		return vs[0].(map[string]*EntryTypeIamBinding)[vs[1].(string)]
	}).(EntryTypeIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntryTypeIamBindingInput)(nil)).Elem(), &EntryTypeIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntryTypeIamBindingArrayInput)(nil)).Elem(), EntryTypeIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntryTypeIamBindingMapInput)(nil)).Elem(), EntryTypeIamBindingMap{})
	pulumi.RegisterOutputType(EntryTypeIamBindingOutput{})
	pulumi.RegisterOutputType(EntryTypeIamBindingArrayOutput{})
	pulumi.RegisterOutputType(EntryTypeIamBindingMapOutput{})
}
