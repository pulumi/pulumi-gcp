// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Dataplex EntryType. Each of these resources serves a different use case:
//
// * `dataplex.EntryTypeIamPolicy`: Authoritative. Sets the IAM policy for the entrytype and replaces any existing policy already attached.
// * `dataplex.EntryTypeIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the entrytype are preserved.
// * `dataplex.EntryTypeIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the entrytype are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.EntryTypeIamPolicy`: Retrieves the IAM policy for the entrytype
//
// > **Note:** `dataplex.EntryTypeIamPolicy` **cannot** be used in conjunction with `dataplex.EntryTypeIamBinding` and `dataplex.EntryTypeIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.EntryTypeIamBinding` resources **can be** used in conjunction with `dataplex.EntryTypeIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataplex.EntryTypeIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewEntryTypeIamPolicy(ctx, "policy", &dataplex.EntryTypeIamPolicyArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				PolicyData:  pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.EntryTypeIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewEntryTypeIamBinding(ctx, "binding", &dataplex.EntryTypeIamBindingArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				Role:        pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.EntryTypeIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewEntryTypeIamMember(ctx, "member", &dataplex.EntryTypeIamMemberArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				Role:        pulumi.String("roles/viewer"),
//				Member:      pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Dataplex EntryType
// Three different resources help you manage your IAM policy for Dataplex EntryType. Each of these resources serves a different use case:
//
// * `dataplex.EntryTypeIamPolicy`: Authoritative. Sets the IAM policy for the entrytype and replaces any existing policy already attached.
// * `dataplex.EntryTypeIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the entrytype are preserved.
// * `dataplex.EntryTypeIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the entrytype are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.EntryTypeIamPolicy`: Retrieves the IAM policy for the entrytype
//
// > **Note:** `dataplex.EntryTypeIamPolicy` **cannot** be used in conjunction with `dataplex.EntryTypeIamBinding` and `dataplex.EntryTypeIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.EntryTypeIamBinding` resources **can be** used in conjunction with `dataplex.EntryTypeIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataplex.EntryTypeIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewEntryTypeIamPolicy(ctx, "policy", &dataplex.EntryTypeIamPolicyArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				PolicyData:  pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.EntryTypeIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewEntryTypeIamBinding(ctx, "binding", &dataplex.EntryTypeIamBindingArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				Role:        pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.EntryTypeIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewEntryTypeIamMember(ctx, "member", &dataplex.EntryTypeIamMemberArgs{
//				Project:     pulumi.Any(testEntryTypeBasic.Project),
//				Location:    pulumi.Any(testEntryTypeBasic.Location),
//				EntryTypeId: pulumi.Any(testEntryTypeBasic.EntryTypeId),
//				Role:        pulumi.String("roles/viewer"),
//				Member:      pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}
//
// * {{project}}/{{location}}/{{entry_type_id}}
//
// * {{location}}/{{entry_type_id}}
//
// * {{entry_type_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Dataplex entrytype IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/entryTypeIamMember:EntryTypeIamMember editor "projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/entryTypeIamMember:EntryTypeIamMember editor "projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/entryTypeIamMember:EntryTypeIamMember editor projects/{{project}}/locations/{{location}}/entryTypes/{{entry_type_id}}
// ```
//
// -> **Custom Roles**: If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type EntryTypeIamMember struct {
	pulumi.CustomResourceState

	Condition   EntryTypeIamMemberConditionPtrOutput `pulumi:"condition"`
	EntryTypeId pulumi.StringOutput                  `pulumi:"entryTypeId"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location where entry type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.EntryTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewEntryTypeIamMember registers a new resource with the given unique name, arguments, and options.
func NewEntryTypeIamMember(ctx *pulumi.Context,
	name string, args *EntryTypeIamMemberArgs, opts ...pulumi.ResourceOption) (*EntryTypeIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntryTypeId == nil {
		return nil, errors.New("invalid value for required argument 'EntryTypeId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EntryTypeIamMember
	err := ctx.RegisterResource("gcp:dataplex/entryTypeIamMember:EntryTypeIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntryTypeIamMember gets an existing EntryTypeIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntryTypeIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntryTypeIamMemberState, opts ...pulumi.ResourceOption) (*EntryTypeIamMember, error) {
	var resource EntryTypeIamMember
	err := ctx.ReadResource("gcp:dataplex/entryTypeIamMember:EntryTypeIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EntryTypeIamMember resources.
type entryTypeIamMemberState struct {
	Condition   *EntryTypeIamMemberCondition `pulumi:"condition"`
	EntryTypeId *string                      `pulumi:"entryTypeId"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location where entry type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.EntryTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type EntryTypeIamMemberState struct {
	Condition   EntryTypeIamMemberConditionPtrInput
	EntryTypeId pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location where entry type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataplex.EntryTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (EntryTypeIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*entryTypeIamMemberState)(nil)).Elem()
}

type entryTypeIamMemberArgs struct {
	Condition   *EntryTypeIamMemberCondition `pulumi:"condition"`
	EntryTypeId string                       `pulumi:"entryTypeId"`
	// The location where entry type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.EntryTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a EntryTypeIamMember resource.
type EntryTypeIamMemberArgs struct {
	Condition   EntryTypeIamMemberConditionPtrInput
	EntryTypeId pulumi.StringInput
	// The location where entry type will be created in.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataplex.EntryTypeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (EntryTypeIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entryTypeIamMemberArgs)(nil)).Elem()
}

type EntryTypeIamMemberInput interface {
	pulumi.Input

	ToEntryTypeIamMemberOutput() EntryTypeIamMemberOutput
	ToEntryTypeIamMemberOutputWithContext(ctx context.Context) EntryTypeIamMemberOutput
}

func (*EntryTypeIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**EntryTypeIamMember)(nil)).Elem()
}

func (i *EntryTypeIamMember) ToEntryTypeIamMemberOutput() EntryTypeIamMemberOutput {
	return i.ToEntryTypeIamMemberOutputWithContext(context.Background())
}

func (i *EntryTypeIamMember) ToEntryTypeIamMemberOutputWithContext(ctx context.Context) EntryTypeIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryTypeIamMemberOutput)
}

// EntryTypeIamMemberArrayInput is an input type that accepts EntryTypeIamMemberArray and EntryTypeIamMemberArrayOutput values.
// You can construct a concrete instance of `EntryTypeIamMemberArrayInput` via:
//
//	EntryTypeIamMemberArray{ EntryTypeIamMemberArgs{...} }
type EntryTypeIamMemberArrayInput interface {
	pulumi.Input

	ToEntryTypeIamMemberArrayOutput() EntryTypeIamMemberArrayOutput
	ToEntryTypeIamMemberArrayOutputWithContext(context.Context) EntryTypeIamMemberArrayOutput
}

type EntryTypeIamMemberArray []EntryTypeIamMemberInput

func (EntryTypeIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntryTypeIamMember)(nil)).Elem()
}

func (i EntryTypeIamMemberArray) ToEntryTypeIamMemberArrayOutput() EntryTypeIamMemberArrayOutput {
	return i.ToEntryTypeIamMemberArrayOutputWithContext(context.Background())
}

func (i EntryTypeIamMemberArray) ToEntryTypeIamMemberArrayOutputWithContext(ctx context.Context) EntryTypeIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryTypeIamMemberArrayOutput)
}

// EntryTypeIamMemberMapInput is an input type that accepts EntryTypeIamMemberMap and EntryTypeIamMemberMapOutput values.
// You can construct a concrete instance of `EntryTypeIamMemberMapInput` via:
//
//	EntryTypeIamMemberMap{ "key": EntryTypeIamMemberArgs{...} }
type EntryTypeIamMemberMapInput interface {
	pulumi.Input

	ToEntryTypeIamMemberMapOutput() EntryTypeIamMemberMapOutput
	ToEntryTypeIamMemberMapOutputWithContext(context.Context) EntryTypeIamMemberMapOutput
}

type EntryTypeIamMemberMap map[string]EntryTypeIamMemberInput

func (EntryTypeIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntryTypeIamMember)(nil)).Elem()
}

func (i EntryTypeIamMemberMap) ToEntryTypeIamMemberMapOutput() EntryTypeIamMemberMapOutput {
	return i.ToEntryTypeIamMemberMapOutputWithContext(context.Background())
}

func (i EntryTypeIamMemberMap) ToEntryTypeIamMemberMapOutputWithContext(ctx context.Context) EntryTypeIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryTypeIamMemberMapOutput)
}

type EntryTypeIamMemberOutput struct{ *pulumi.OutputState }

func (EntryTypeIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntryTypeIamMember)(nil)).Elem()
}

func (o EntryTypeIamMemberOutput) ToEntryTypeIamMemberOutput() EntryTypeIamMemberOutput {
	return o
}

func (o EntryTypeIamMemberOutput) ToEntryTypeIamMemberOutputWithContext(ctx context.Context) EntryTypeIamMemberOutput {
	return o
}

func (o EntryTypeIamMemberOutput) Condition() EntryTypeIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *EntryTypeIamMember) EntryTypeIamMemberConditionPtrOutput { return v.Condition }).(EntryTypeIamMemberConditionPtrOutput)
}

func (o EntryTypeIamMemberOutput) EntryTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryTypeIamMember) pulumi.StringOutput { return v.EntryTypeId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o EntryTypeIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryTypeIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location where entry type will be created in.
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o EntryTypeIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryTypeIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o EntryTypeIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryTypeIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o EntryTypeIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryTypeIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `dataplex.EntryTypeIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o EntryTypeIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryTypeIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type EntryTypeIamMemberArrayOutput struct{ *pulumi.OutputState }

func (EntryTypeIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntryTypeIamMember)(nil)).Elem()
}

func (o EntryTypeIamMemberArrayOutput) ToEntryTypeIamMemberArrayOutput() EntryTypeIamMemberArrayOutput {
	return o
}

func (o EntryTypeIamMemberArrayOutput) ToEntryTypeIamMemberArrayOutputWithContext(ctx context.Context) EntryTypeIamMemberArrayOutput {
	return o
}

func (o EntryTypeIamMemberArrayOutput) Index(i pulumi.IntInput) EntryTypeIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EntryTypeIamMember {
		return vs[0].([]*EntryTypeIamMember)[vs[1].(int)]
	}).(EntryTypeIamMemberOutput)
}

type EntryTypeIamMemberMapOutput struct{ *pulumi.OutputState }

func (EntryTypeIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntryTypeIamMember)(nil)).Elem()
}

func (o EntryTypeIamMemberMapOutput) ToEntryTypeIamMemberMapOutput() EntryTypeIamMemberMapOutput {
	return o
}

func (o EntryTypeIamMemberMapOutput) ToEntryTypeIamMemberMapOutputWithContext(ctx context.Context) EntryTypeIamMemberMapOutput {
	return o
}

func (o EntryTypeIamMemberMapOutput) MapIndex(k pulumi.StringInput) EntryTypeIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EntryTypeIamMember {
		return vs[0].(map[string]*EntryTypeIamMember)[vs[1].(string)]
	}).(EntryTypeIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntryTypeIamMemberInput)(nil)).Elem(), &EntryTypeIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntryTypeIamMemberArrayInput)(nil)).Elem(), EntryTypeIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntryTypeIamMemberMapInput)(nil)).Elem(), EntryTypeIamMemberMap{})
	pulumi.RegisterOutputType(EntryTypeIamMemberOutput{})
	pulumi.RegisterOutputType(EntryTypeIamMemberArrayOutput{})
	pulumi.RegisterOutputType(EntryTypeIamMemberMapOutput{})
}
