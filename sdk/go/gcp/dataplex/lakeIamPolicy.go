// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LakeIamPolicy struct {
	pulumi.CustomResourceState

	Etag       pulumi.StringOutput `pulumi:"etag"`
	Lake       pulumi.StringOutput `pulumi:"lake"`
	Location   pulumi.StringOutput `pulumi:"location"`
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	Project    pulumi.StringOutput `pulumi:"project"`
}

// NewLakeIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewLakeIamPolicy(ctx *pulumi.Context,
	name string, args *LakeIamPolicyArgs, opts ...pulumi.ResourceOption) (*LakeIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Lake == nil {
		return nil, errors.New("invalid value for required argument 'Lake'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	var resource LakeIamPolicy
	err := ctx.RegisterResource("gcp:dataplex/lakeIamPolicy:LakeIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLakeIamPolicy gets an existing LakeIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLakeIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LakeIamPolicyState, opts ...pulumi.ResourceOption) (*LakeIamPolicy, error) {
	var resource LakeIamPolicy
	err := ctx.ReadResource("gcp:dataplex/lakeIamPolicy:LakeIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LakeIamPolicy resources.
type lakeIamPolicyState struct {
	Etag       *string `pulumi:"etag"`
	Lake       *string `pulumi:"lake"`
	Location   *string `pulumi:"location"`
	PolicyData *string `pulumi:"policyData"`
	Project    *string `pulumi:"project"`
}

type LakeIamPolicyState struct {
	Etag       pulumi.StringPtrInput
	Lake       pulumi.StringPtrInput
	Location   pulumi.StringPtrInput
	PolicyData pulumi.StringPtrInput
	Project    pulumi.StringPtrInput
}

func (LakeIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*lakeIamPolicyState)(nil)).Elem()
}

type lakeIamPolicyArgs struct {
	Lake       string  `pulumi:"lake"`
	Location   *string `pulumi:"location"`
	PolicyData string  `pulumi:"policyData"`
	Project    *string `pulumi:"project"`
}

// The set of arguments for constructing a LakeIamPolicy resource.
type LakeIamPolicyArgs struct {
	Lake       pulumi.StringInput
	Location   pulumi.StringPtrInput
	PolicyData pulumi.StringInput
	Project    pulumi.StringPtrInput
}

func (LakeIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lakeIamPolicyArgs)(nil)).Elem()
}

type LakeIamPolicyInput interface {
	pulumi.Input

	ToLakeIamPolicyOutput() LakeIamPolicyOutput
	ToLakeIamPolicyOutputWithContext(ctx context.Context) LakeIamPolicyOutput
}

func (*LakeIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**LakeIamPolicy)(nil)).Elem()
}

func (i *LakeIamPolicy) ToLakeIamPolicyOutput() LakeIamPolicyOutput {
	return i.ToLakeIamPolicyOutputWithContext(context.Background())
}

func (i *LakeIamPolicy) ToLakeIamPolicyOutputWithContext(ctx context.Context) LakeIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeIamPolicyOutput)
}

// LakeIamPolicyArrayInput is an input type that accepts LakeIamPolicyArray and LakeIamPolicyArrayOutput values.
// You can construct a concrete instance of `LakeIamPolicyArrayInput` via:
//
//	LakeIamPolicyArray{ LakeIamPolicyArgs{...} }
type LakeIamPolicyArrayInput interface {
	pulumi.Input

	ToLakeIamPolicyArrayOutput() LakeIamPolicyArrayOutput
	ToLakeIamPolicyArrayOutputWithContext(context.Context) LakeIamPolicyArrayOutput
}

type LakeIamPolicyArray []LakeIamPolicyInput

func (LakeIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LakeIamPolicy)(nil)).Elem()
}

func (i LakeIamPolicyArray) ToLakeIamPolicyArrayOutput() LakeIamPolicyArrayOutput {
	return i.ToLakeIamPolicyArrayOutputWithContext(context.Background())
}

func (i LakeIamPolicyArray) ToLakeIamPolicyArrayOutputWithContext(ctx context.Context) LakeIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeIamPolicyArrayOutput)
}

// LakeIamPolicyMapInput is an input type that accepts LakeIamPolicyMap and LakeIamPolicyMapOutput values.
// You can construct a concrete instance of `LakeIamPolicyMapInput` via:
//
//	LakeIamPolicyMap{ "key": LakeIamPolicyArgs{...} }
type LakeIamPolicyMapInput interface {
	pulumi.Input

	ToLakeIamPolicyMapOutput() LakeIamPolicyMapOutput
	ToLakeIamPolicyMapOutputWithContext(context.Context) LakeIamPolicyMapOutput
}

type LakeIamPolicyMap map[string]LakeIamPolicyInput

func (LakeIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LakeIamPolicy)(nil)).Elem()
}

func (i LakeIamPolicyMap) ToLakeIamPolicyMapOutput() LakeIamPolicyMapOutput {
	return i.ToLakeIamPolicyMapOutputWithContext(context.Background())
}

func (i LakeIamPolicyMap) ToLakeIamPolicyMapOutputWithContext(ctx context.Context) LakeIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeIamPolicyMapOutput)
}

type LakeIamPolicyOutput struct{ *pulumi.OutputState }

func (LakeIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LakeIamPolicy)(nil)).Elem()
}

func (o LakeIamPolicyOutput) ToLakeIamPolicyOutput() LakeIamPolicyOutput {
	return o
}

func (o LakeIamPolicyOutput) ToLakeIamPolicyOutputWithContext(ctx context.Context) LakeIamPolicyOutput {
	return o
}

func (o LakeIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o LakeIamPolicyOutput) Lake() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeIamPolicy) pulumi.StringOutput { return v.Lake }).(pulumi.StringOutput)
}

func (o LakeIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o LakeIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o LakeIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type LakeIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (LakeIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LakeIamPolicy)(nil)).Elem()
}

func (o LakeIamPolicyArrayOutput) ToLakeIamPolicyArrayOutput() LakeIamPolicyArrayOutput {
	return o
}

func (o LakeIamPolicyArrayOutput) ToLakeIamPolicyArrayOutputWithContext(ctx context.Context) LakeIamPolicyArrayOutput {
	return o
}

func (o LakeIamPolicyArrayOutput) Index(i pulumi.IntInput) LakeIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LakeIamPolicy {
		return vs[0].([]*LakeIamPolicy)[vs[1].(int)]
	}).(LakeIamPolicyOutput)
}

type LakeIamPolicyMapOutput struct{ *pulumi.OutputState }

func (LakeIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LakeIamPolicy)(nil)).Elem()
}

func (o LakeIamPolicyMapOutput) ToLakeIamPolicyMapOutput() LakeIamPolicyMapOutput {
	return o
}

func (o LakeIamPolicyMapOutput) ToLakeIamPolicyMapOutputWithContext(ctx context.Context) LakeIamPolicyMapOutput {
	return o
}

func (o LakeIamPolicyMapOutput) MapIndex(k pulumi.StringInput) LakeIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LakeIamPolicy {
		return vs[0].(map[string]*LakeIamPolicy)[vs[1].(string)]
	}).(LakeIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LakeIamPolicyInput)(nil)).Elem(), &LakeIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*LakeIamPolicyArrayInput)(nil)).Elem(), LakeIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LakeIamPolicyMapInput)(nil)).Elem(), LakeIamPolicyMap{})
	pulumi.RegisterOutputType(LakeIamPolicyOutput{})
	pulumi.RegisterOutputType(LakeIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(LakeIamPolicyMapOutput{})
}
