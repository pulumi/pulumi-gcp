// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Dataplex Datascan. Each of these resources serves a different use case:
//
// * `dataplex.DatascanIamPolicy`: Authoritative. Sets the IAM policy for the datascan and replaces any existing policy already attached.
// * `dataplex.DatascanIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the datascan are preserved.
// * `dataplex.DatascanIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the datascan are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.DatascanIamPolicy`: Retrieves the IAM policy for the datascan
//
// > **Note:** `dataplex.DatascanIamPolicy` **cannot** be used in conjunction with `dataplex.DatascanIamBinding` and `dataplex.DatascanIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.DatascanIamBinding` resources **can be** used in conjunction with `dataplex.DatascanIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_dataplex\_datascan\_iam\_policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewDatascanIamPolicy(ctx, "policy", &dataplex.DatascanIamPolicyArgs{
//				Project:    pulumi.Any(google_dataplex_datascan.Basic_profile.Project),
//				Location:   pulumi.Any(google_dataplex_datascan.Basic_profile.Location),
//				DataScanId: pulumi.Any(google_dataplex_datascan.Basic_profile.Data_scan_id),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_dataplex\_datascan\_iam\_binding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewDatascanIamBinding(ctx, "binding", &dataplex.DatascanIamBindingArgs{
//				Project:    pulumi.Any(google_dataplex_datascan.Basic_profile.Project),
//				Location:   pulumi.Any(google_dataplex_datascan.Basic_profile.Location),
//				DataScanId: pulumi.Any(google_dataplex_datascan.Basic_profile.Data_scan_id),
//				Role:       pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## google\_dataplex\_datascan\_iam\_member
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewDatascanIamMember(ctx, "member", &dataplex.DatascanIamMemberArgs{
//				Project:    pulumi.Any(google_dataplex_datascan.Basic_profile.Project),
//				Location:   pulumi.Any(google_dataplex_datascan.Basic_profile.Location),
//				DataScanId: pulumi.Any(google_dataplex_datascan.Basic_profile.Data_scan_id),
//				Role:       pulumi.String("roles/viewer"),
//				Member:     pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/dataScans/{{data_scan_id}} * {{project}}/{{location}}/{{data_scan_id}} * {{location}}/{{data_scan_id}} * {{data_scan_id}} Any variables not passed in the import command will be taken from the provider configuration. Dataplex datascan IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:dataplex/datascanIamMember:DatascanIamMember editor "projects/{{project}}/locations/{{location}}/dataScans/{{data_scan_id}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:dataplex/datascanIamMember:DatascanIamMember editor "projects/{{project}}/locations/{{location}}/dataScans/{{data_scan_id}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:dataplex/datascanIamMember:DatascanIamMember editor projects/{{project}}/locations/{{location}}/dataScans/{{data_scan_id}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type DatascanIamMember struct {
	pulumi.CustomResourceState

	Condition  DatascanIamMemberConditionPtrOutput `pulumi:"condition"`
	DataScanId pulumi.StringOutput                 `pulumi:"dataScanId"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location where the data scan should reside.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringOutput `pulumi:"location"`
	Member   pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.DatascanIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewDatascanIamMember registers a new resource with the given unique name, arguments, and options.
func NewDatascanIamMember(ctx *pulumi.Context,
	name string, args *DatascanIamMemberArgs, opts ...pulumi.ResourceOption) (*DatascanIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataScanId == nil {
		return nil, errors.New("invalid value for required argument 'DataScanId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatascanIamMember
	err := ctx.RegisterResource("gcp:dataplex/datascanIamMember:DatascanIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatascanIamMember gets an existing DatascanIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatascanIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatascanIamMemberState, opts ...pulumi.ResourceOption) (*DatascanIamMember, error) {
	var resource DatascanIamMember
	err := ctx.ReadResource("gcp:dataplex/datascanIamMember:DatascanIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatascanIamMember resources.
type datascanIamMemberState struct {
	Condition  *DatascanIamMemberCondition `pulumi:"condition"`
	DataScanId *string                     `pulumi:"dataScanId"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location where the data scan should reside.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	Member   *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.DatascanIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type DatascanIamMemberState struct {
	Condition  DatascanIamMemberConditionPtrInput
	DataScanId pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location where the data scan should reside.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	Member   pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataplex.DatascanIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (DatascanIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*datascanIamMemberState)(nil)).Elem()
}

type datascanIamMemberArgs struct {
	Condition  *DatascanIamMemberCondition `pulumi:"condition"`
	DataScanId string                      `pulumi:"dataScanId"`
	// The location where the data scan should reside.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	Member   string  `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.DatascanIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a DatascanIamMember resource.
type DatascanIamMemberArgs struct {
	Condition  DatascanIamMemberConditionPtrInput
	DataScanId pulumi.StringInput
	// The location where the data scan should reside.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	Member   pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataplex.DatascanIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (DatascanIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datascanIamMemberArgs)(nil)).Elem()
}

type DatascanIamMemberInput interface {
	pulumi.Input

	ToDatascanIamMemberOutput() DatascanIamMemberOutput
	ToDatascanIamMemberOutputWithContext(ctx context.Context) DatascanIamMemberOutput
}

func (*DatascanIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**DatascanIamMember)(nil)).Elem()
}

func (i *DatascanIamMember) ToDatascanIamMemberOutput() DatascanIamMemberOutput {
	return i.ToDatascanIamMemberOutputWithContext(context.Background())
}

func (i *DatascanIamMember) ToDatascanIamMemberOutputWithContext(ctx context.Context) DatascanIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatascanIamMemberOutput)
}

// DatascanIamMemberArrayInput is an input type that accepts DatascanIamMemberArray and DatascanIamMemberArrayOutput values.
// You can construct a concrete instance of `DatascanIamMemberArrayInput` via:
//
//	DatascanIamMemberArray{ DatascanIamMemberArgs{...} }
type DatascanIamMemberArrayInput interface {
	pulumi.Input

	ToDatascanIamMemberArrayOutput() DatascanIamMemberArrayOutput
	ToDatascanIamMemberArrayOutputWithContext(context.Context) DatascanIamMemberArrayOutput
}

type DatascanIamMemberArray []DatascanIamMemberInput

func (DatascanIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatascanIamMember)(nil)).Elem()
}

func (i DatascanIamMemberArray) ToDatascanIamMemberArrayOutput() DatascanIamMemberArrayOutput {
	return i.ToDatascanIamMemberArrayOutputWithContext(context.Background())
}

func (i DatascanIamMemberArray) ToDatascanIamMemberArrayOutputWithContext(ctx context.Context) DatascanIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatascanIamMemberArrayOutput)
}

// DatascanIamMemberMapInput is an input type that accepts DatascanIamMemberMap and DatascanIamMemberMapOutput values.
// You can construct a concrete instance of `DatascanIamMemberMapInput` via:
//
//	DatascanIamMemberMap{ "key": DatascanIamMemberArgs{...} }
type DatascanIamMemberMapInput interface {
	pulumi.Input

	ToDatascanIamMemberMapOutput() DatascanIamMemberMapOutput
	ToDatascanIamMemberMapOutputWithContext(context.Context) DatascanIamMemberMapOutput
}

type DatascanIamMemberMap map[string]DatascanIamMemberInput

func (DatascanIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatascanIamMember)(nil)).Elem()
}

func (i DatascanIamMemberMap) ToDatascanIamMemberMapOutput() DatascanIamMemberMapOutput {
	return i.ToDatascanIamMemberMapOutputWithContext(context.Background())
}

func (i DatascanIamMemberMap) ToDatascanIamMemberMapOutputWithContext(ctx context.Context) DatascanIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatascanIamMemberMapOutput)
}

type DatascanIamMemberOutput struct{ *pulumi.OutputState }

func (DatascanIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatascanIamMember)(nil)).Elem()
}

func (o DatascanIamMemberOutput) ToDatascanIamMemberOutput() DatascanIamMemberOutput {
	return o
}

func (o DatascanIamMemberOutput) ToDatascanIamMemberOutputWithContext(ctx context.Context) DatascanIamMemberOutput {
	return o
}

func (o DatascanIamMemberOutput) Condition() DatascanIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *DatascanIamMember) DatascanIamMemberConditionPtrOutput { return v.Condition }).(DatascanIamMemberConditionPtrOutput)
}

func (o DatascanIamMemberOutput) DataScanId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatascanIamMember) pulumi.StringOutput { return v.DataScanId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o DatascanIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DatascanIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location where the data scan should reside.
// Used to find the parent resource to bind the IAM policy to
func (o DatascanIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DatascanIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o DatascanIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *DatascanIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o DatascanIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DatascanIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `dataplex.DatascanIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o DatascanIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *DatascanIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type DatascanIamMemberArrayOutput struct{ *pulumi.OutputState }

func (DatascanIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatascanIamMember)(nil)).Elem()
}

func (o DatascanIamMemberArrayOutput) ToDatascanIamMemberArrayOutput() DatascanIamMemberArrayOutput {
	return o
}

func (o DatascanIamMemberArrayOutput) ToDatascanIamMemberArrayOutputWithContext(ctx context.Context) DatascanIamMemberArrayOutput {
	return o
}

func (o DatascanIamMemberArrayOutput) Index(i pulumi.IntInput) DatascanIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatascanIamMember {
		return vs[0].([]*DatascanIamMember)[vs[1].(int)]
	}).(DatascanIamMemberOutput)
}

type DatascanIamMemberMapOutput struct{ *pulumi.OutputState }

func (DatascanIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatascanIamMember)(nil)).Elem()
}

func (o DatascanIamMemberMapOutput) ToDatascanIamMemberMapOutput() DatascanIamMemberMapOutput {
	return o
}

func (o DatascanIamMemberMapOutput) ToDatascanIamMemberMapOutputWithContext(ctx context.Context) DatascanIamMemberMapOutput {
	return o
}

func (o DatascanIamMemberMapOutput) MapIndex(k pulumi.StringInput) DatascanIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatascanIamMember {
		return vs[0].(map[string]*DatascanIamMember)[vs[1].(string)]
	}).(DatascanIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatascanIamMemberInput)(nil)).Elem(), &DatascanIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatascanIamMemberArrayInput)(nil)).Elem(), DatascanIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatascanIamMemberMapInput)(nil)).Elem(), DatascanIamMemberMap{})
	pulumi.RegisterOutputType(DatascanIamMemberOutput{})
	pulumi.RegisterOutputType(DatascanIamMemberArrayOutput{})
	pulumi.RegisterOutputType(DatascanIamMemberMapOutput{})
}
