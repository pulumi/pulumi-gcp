// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ZoneIamMember struct {
	pulumi.CustomResourceState

	Condition    ZoneIamMemberConditionPtrOutput `pulumi:"condition"`
	DataplexZone pulumi.StringOutput             `pulumi:"dataplexZone"`
	Etag         pulumi.StringOutput             `pulumi:"etag"`
	Lake         pulumi.StringOutput             `pulumi:"lake"`
	Location     pulumi.StringOutput             `pulumi:"location"`
	Member       pulumi.StringOutput             `pulumi:"member"`
	Project      pulumi.StringOutput             `pulumi:"project"`
	Role         pulumi.StringOutput             `pulumi:"role"`
}

// NewZoneIamMember registers a new resource with the given unique name, arguments, and options.
func NewZoneIamMember(ctx *pulumi.Context,
	name string, args *ZoneIamMemberArgs, opts ...pulumi.ResourceOption) (*ZoneIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataplexZone == nil {
		return nil, errors.New("invalid value for required argument 'DataplexZone'")
	}
	if args.Lake == nil {
		return nil, errors.New("invalid value for required argument 'Lake'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource ZoneIamMember
	err := ctx.RegisterResource("gcp:dataplex/zoneIamMember:ZoneIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneIamMember gets an existing ZoneIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneIamMemberState, opts ...pulumi.ResourceOption) (*ZoneIamMember, error) {
	var resource ZoneIamMember
	err := ctx.ReadResource("gcp:dataplex/zoneIamMember:ZoneIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneIamMember resources.
type zoneIamMemberState struct {
	Condition    *ZoneIamMemberCondition `pulumi:"condition"`
	DataplexZone *string                 `pulumi:"dataplexZone"`
	Etag         *string                 `pulumi:"etag"`
	Lake         *string                 `pulumi:"lake"`
	Location     *string                 `pulumi:"location"`
	Member       *string                 `pulumi:"member"`
	Project      *string                 `pulumi:"project"`
	Role         *string                 `pulumi:"role"`
}

type ZoneIamMemberState struct {
	Condition    ZoneIamMemberConditionPtrInput
	DataplexZone pulumi.StringPtrInput
	Etag         pulumi.StringPtrInput
	Lake         pulumi.StringPtrInput
	Location     pulumi.StringPtrInput
	Member       pulumi.StringPtrInput
	Project      pulumi.StringPtrInput
	Role         pulumi.StringPtrInput
}

func (ZoneIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneIamMemberState)(nil)).Elem()
}

type zoneIamMemberArgs struct {
	Condition    *ZoneIamMemberCondition `pulumi:"condition"`
	DataplexZone string                  `pulumi:"dataplexZone"`
	Lake         string                  `pulumi:"lake"`
	Location     *string                 `pulumi:"location"`
	Member       string                  `pulumi:"member"`
	Project      *string                 `pulumi:"project"`
	Role         string                  `pulumi:"role"`
}

// The set of arguments for constructing a ZoneIamMember resource.
type ZoneIamMemberArgs struct {
	Condition    ZoneIamMemberConditionPtrInput
	DataplexZone pulumi.StringInput
	Lake         pulumi.StringInput
	Location     pulumi.StringPtrInput
	Member       pulumi.StringInput
	Project      pulumi.StringPtrInput
	Role         pulumi.StringInput
}

func (ZoneIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneIamMemberArgs)(nil)).Elem()
}

type ZoneIamMemberInput interface {
	pulumi.Input

	ToZoneIamMemberOutput() ZoneIamMemberOutput
	ToZoneIamMemberOutputWithContext(ctx context.Context) ZoneIamMemberOutput
}

func (*ZoneIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneIamMember)(nil)).Elem()
}

func (i *ZoneIamMember) ToZoneIamMemberOutput() ZoneIamMemberOutput {
	return i.ToZoneIamMemberOutputWithContext(context.Background())
}

func (i *ZoneIamMember) ToZoneIamMemberOutputWithContext(ctx context.Context) ZoneIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneIamMemberOutput)
}

// ZoneIamMemberArrayInput is an input type that accepts ZoneIamMemberArray and ZoneIamMemberArrayOutput values.
// You can construct a concrete instance of `ZoneIamMemberArrayInput` via:
//
//	ZoneIamMemberArray{ ZoneIamMemberArgs{...} }
type ZoneIamMemberArrayInput interface {
	pulumi.Input

	ToZoneIamMemberArrayOutput() ZoneIamMemberArrayOutput
	ToZoneIamMemberArrayOutputWithContext(context.Context) ZoneIamMemberArrayOutput
}

type ZoneIamMemberArray []ZoneIamMemberInput

func (ZoneIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneIamMember)(nil)).Elem()
}

func (i ZoneIamMemberArray) ToZoneIamMemberArrayOutput() ZoneIamMemberArrayOutput {
	return i.ToZoneIamMemberArrayOutputWithContext(context.Background())
}

func (i ZoneIamMemberArray) ToZoneIamMemberArrayOutputWithContext(ctx context.Context) ZoneIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneIamMemberArrayOutput)
}

// ZoneIamMemberMapInput is an input type that accepts ZoneIamMemberMap and ZoneIamMemberMapOutput values.
// You can construct a concrete instance of `ZoneIamMemberMapInput` via:
//
//	ZoneIamMemberMap{ "key": ZoneIamMemberArgs{...} }
type ZoneIamMemberMapInput interface {
	pulumi.Input

	ToZoneIamMemberMapOutput() ZoneIamMemberMapOutput
	ToZoneIamMemberMapOutputWithContext(context.Context) ZoneIamMemberMapOutput
}

type ZoneIamMemberMap map[string]ZoneIamMemberInput

func (ZoneIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneIamMember)(nil)).Elem()
}

func (i ZoneIamMemberMap) ToZoneIamMemberMapOutput() ZoneIamMemberMapOutput {
	return i.ToZoneIamMemberMapOutputWithContext(context.Background())
}

func (i ZoneIamMemberMap) ToZoneIamMemberMapOutputWithContext(ctx context.Context) ZoneIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneIamMemberMapOutput)
}

type ZoneIamMemberOutput struct{ *pulumi.OutputState }

func (ZoneIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneIamMember)(nil)).Elem()
}

func (o ZoneIamMemberOutput) ToZoneIamMemberOutput() ZoneIamMemberOutput {
	return o
}

func (o ZoneIamMemberOutput) ToZoneIamMemberOutputWithContext(ctx context.Context) ZoneIamMemberOutput {
	return o
}

func (o ZoneIamMemberOutput) Condition() ZoneIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *ZoneIamMember) ZoneIamMemberConditionPtrOutput { return v.Condition }).(ZoneIamMemberConditionPtrOutput)
}

func (o ZoneIamMemberOutput) DataplexZone() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamMember) pulumi.StringOutput { return v.DataplexZone }).(pulumi.StringOutput)
}

func (o ZoneIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ZoneIamMemberOutput) Lake() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamMember) pulumi.StringOutput { return v.Lake }).(pulumi.StringOutput)
}

func (o ZoneIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o ZoneIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o ZoneIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ZoneIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type ZoneIamMemberArrayOutput struct{ *pulumi.OutputState }

func (ZoneIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneIamMember)(nil)).Elem()
}

func (o ZoneIamMemberArrayOutput) ToZoneIamMemberArrayOutput() ZoneIamMemberArrayOutput {
	return o
}

func (o ZoneIamMemberArrayOutput) ToZoneIamMemberArrayOutputWithContext(ctx context.Context) ZoneIamMemberArrayOutput {
	return o
}

func (o ZoneIamMemberArrayOutput) Index(i pulumi.IntInput) ZoneIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneIamMember {
		return vs[0].([]*ZoneIamMember)[vs[1].(int)]
	}).(ZoneIamMemberOutput)
}

type ZoneIamMemberMapOutput struct{ *pulumi.OutputState }

func (ZoneIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneIamMember)(nil)).Elem()
}

func (o ZoneIamMemberMapOutput) ToZoneIamMemberMapOutput() ZoneIamMemberMapOutput {
	return o
}

func (o ZoneIamMemberMapOutput) ToZoneIamMemberMapOutputWithContext(ctx context.Context) ZoneIamMemberMapOutput {
	return o
}

func (o ZoneIamMemberMapOutput) MapIndex(k pulumi.StringInput) ZoneIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneIamMember {
		return vs[0].(map[string]*ZoneIamMember)[vs[1].(string)]
	}).(ZoneIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneIamMemberInput)(nil)).Elem(), &ZoneIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneIamMemberArrayInput)(nil)).Elem(), ZoneIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneIamMemberMapInput)(nil)).Elem(), ZoneIamMemberMap{})
	pulumi.RegisterOutputType(ZoneIamMemberOutput{})
	pulumi.RegisterOutputType(ZoneIamMemberArrayOutput{})
	pulumi.RegisterOutputType(ZoneIamMemberMapOutput{})
}
