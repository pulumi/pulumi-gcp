// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TaskIamPolicy struct {
	pulumi.CustomResourceState

	Etag       pulumi.StringOutput `pulumi:"etag"`
	Lake       pulumi.StringOutput `pulumi:"lake"`
	Location   pulumi.StringOutput `pulumi:"location"`
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	Project    pulumi.StringOutput `pulumi:"project"`
	TaskId     pulumi.StringOutput `pulumi:"taskId"`
}

// NewTaskIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewTaskIamPolicy(ctx *pulumi.Context,
	name string, args *TaskIamPolicyArgs, opts ...pulumi.ResourceOption) (*TaskIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Lake == nil {
		return nil, errors.New("invalid value for required argument 'Lake'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.TaskId == nil {
		return nil, errors.New("invalid value for required argument 'TaskId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TaskIamPolicy
	err := ctx.RegisterResource("gcp:dataplex/taskIamPolicy:TaskIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTaskIamPolicy gets an existing TaskIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTaskIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskIamPolicyState, opts ...pulumi.ResourceOption) (*TaskIamPolicy, error) {
	var resource TaskIamPolicy
	err := ctx.ReadResource("gcp:dataplex/taskIamPolicy:TaskIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TaskIamPolicy resources.
type taskIamPolicyState struct {
	Etag       *string `pulumi:"etag"`
	Lake       *string `pulumi:"lake"`
	Location   *string `pulumi:"location"`
	PolicyData *string `pulumi:"policyData"`
	Project    *string `pulumi:"project"`
	TaskId     *string `pulumi:"taskId"`
}

type TaskIamPolicyState struct {
	Etag       pulumi.StringPtrInput
	Lake       pulumi.StringPtrInput
	Location   pulumi.StringPtrInput
	PolicyData pulumi.StringPtrInput
	Project    pulumi.StringPtrInput
	TaskId     pulumi.StringPtrInput
}

func (TaskIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskIamPolicyState)(nil)).Elem()
}

type taskIamPolicyArgs struct {
	Lake       string  `pulumi:"lake"`
	Location   *string `pulumi:"location"`
	PolicyData string  `pulumi:"policyData"`
	Project    *string `pulumi:"project"`
	TaskId     string  `pulumi:"taskId"`
}

// The set of arguments for constructing a TaskIamPolicy resource.
type TaskIamPolicyArgs struct {
	Lake       pulumi.StringInput
	Location   pulumi.StringPtrInput
	PolicyData pulumi.StringInput
	Project    pulumi.StringPtrInput
	TaskId     pulumi.StringInput
}

func (TaskIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskIamPolicyArgs)(nil)).Elem()
}

type TaskIamPolicyInput interface {
	pulumi.Input

	ToTaskIamPolicyOutput() TaskIamPolicyOutput
	ToTaskIamPolicyOutputWithContext(ctx context.Context) TaskIamPolicyOutput
}

func (*TaskIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskIamPolicy)(nil)).Elem()
}

func (i *TaskIamPolicy) ToTaskIamPolicyOutput() TaskIamPolicyOutput {
	return i.ToTaskIamPolicyOutputWithContext(context.Background())
}

func (i *TaskIamPolicy) ToTaskIamPolicyOutputWithContext(ctx context.Context) TaskIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskIamPolicyOutput)
}

// TaskIamPolicyArrayInput is an input type that accepts TaskIamPolicyArray and TaskIamPolicyArrayOutput values.
// You can construct a concrete instance of `TaskIamPolicyArrayInput` via:
//
//	TaskIamPolicyArray{ TaskIamPolicyArgs{...} }
type TaskIamPolicyArrayInput interface {
	pulumi.Input

	ToTaskIamPolicyArrayOutput() TaskIamPolicyArrayOutput
	ToTaskIamPolicyArrayOutputWithContext(context.Context) TaskIamPolicyArrayOutput
}

type TaskIamPolicyArray []TaskIamPolicyInput

func (TaskIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TaskIamPolicy)(nil)).Elem()
}

func (i TaskIamPolicyArray) ToTaskIamPolicyArrayOutput() TaskIamPolicyArrayOutput {
	return i.ToTaskIamPolicyArrayOutputWithContext(context.Background())
}

func (i TaskIamPolicyArray) ToTaskIamPolicyArrayOutputWithContext(ctx context.Context) TaskIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskIamPolicyArrayOutput)
}

// TaskIamPolicyMapInput is an input type that accepts TaskIamPolicyMap and TaskIamPolicyMapOutput values.
// You can construct a concrete instance of `TaskIamPolicyMapInput` via:
//
//	TaskIamPolicyMap{ "key": TaskIamPolicyArgs{...} }
type TaskIamPolicyMapInput interface {
	pulumi.Input

	ToTaskIamPolicyMapOutput() TaskIamPolicyMapOutput
	ToTaskIamPolicyMapOutputWithContext(context.Context) TaskIamPolicyMapOutput
}

type TaskIamPolicyMap map[string]TaskIamPolicyInput

func (TaskIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TaskIamPolicy)(nil)).Elem()
}

func (i TaskIamPolicyMap) ToTaskIamPolicyMapOutput() TaskIamPolicyMapOutput {
	return i.ToTaskIamPolicyMapOutputWithContext(context.Background())
}

func (i TaskIamPolicyMap) ToTaskIamPolicyMapOutputWithContext(ctx context.Context) TaskIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskIamPolicyMapOutput)
}

type TaskIamPolicyOutput struct{ *pulumi.OutputState }

func (TaskIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskIamPolicy)(nil)).Elem()
}

func (o TaskIamPolicyOutput) ToTaskIamPolicyOutput() TaskIamPolicyOutput {
	return o
}

func (o TaskIamPolicyOutput) ToTaskIamPolicyOutputWithContext(ctx context.Context) TaskIamPolicyOutput {
	return o
}

func (o TaskIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o TaskIamPolicyOutput) Lake() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamPolicy) pulumi.StringOutput { return v.Lake }).(pulumi.StringOutput)
}

func (o TaskIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o TaskIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o TaskIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o TaskIamPolicyOutput) TaskId() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskIamPolicy) pulumi.StringOutput { return v.TaskId }).(pulumi.StringOutput)
}

type TaskIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (TaskIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TaskIamPolicy)(nil)).Elem()
}

func (o TaskIamPolicyArrayOutput) ToTaskIamPolicyArrayOutput() TaskIamPolicyArrayOutput {
	return o
}

func (o TaskIamPolicyArrayOutput) ToTaskIamPolicyArrayOutputWithContext(ctx context.Context) TaskIamPolicyArrayOutput {
	return o
}

func (o TaskIamPolicyArrayOutput) Index(i pulumi.IntInput) TaskIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TaskIamPolicy {
		return vs[0].([]*TaskIamPolicy)[vs[1].(int)]
	}).(TaskIamPolicyOutput)
}

type TaskIamPolicyMapOutput struct{ *pulumi.OutputState }

func (TaskIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TaskIamPolicy)(nil)).Elem()
}

func (o TaskIamPolicyMapOutput) ToTaskIamPolicyMapOutput() TaskIamPolicyMapOutput {
	return o
}

func (o TaskIamPolicyMapOutput) ToTaskIamPolicyMapOutputWithContext(ctx context.Context) TaskIamPolicyMapOutput {
	return o
}

func (o TaskIamPolicyMapOutput) MapIndex(k pulumi.StringInput) TaskIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TaskIamPolicy {
		return vs[0].(map[string]*TaskIamPolicy)[vs[1].(string)]
	}).(TaskIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TaskIamPolicyInput)(nil)).Elem(), &TaskIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskIamPolicyArrayInput)(nil)).Elem(), TaskIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskIamPolicyMapInput)(nil)).Elem(), TaskIamPolicyMap{})
	pulumi.RegisterOutputType(TaskIamPolicyOutput{})
	pulumi.RegisterOutputType(TaskIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(TaskIamPolicyMapOutput{})
}
