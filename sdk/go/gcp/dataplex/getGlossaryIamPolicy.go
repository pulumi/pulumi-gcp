// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves the current IAM policy data for glossary
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.LookupGlossaryIamPolicy(ctx, &dataplex.LookupGlossaryIamPolicyArgs{
//				Project:    pulumi.StringRef(glossaryTestId.Project),
//				Location:   pulumi.StringRef(glossaryTestId.Location),
//				GlossaryId: glossaryTestId.GlossaryId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupGlossaryIamPolicy(ctx *pulumi.Context, args *LookupGlossaryIamPolicyArgs, opts ...pulumi.InvokeOption) (*LookupGlossaryIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGlossaryIamPolicyResult
	err := ctx.Invoke("gcp:dataplex/getGlossaryIamPolicy:getGlossaryIamPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGlossaryIamPolicy.
type LookupGlossaryIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId string `pulumi:"glossaryId"`
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getGlossaryIamPolicy.
type LookupGlossaryIamPolicyResult struct {
	// (Computed) The etag of the IAM policy.
	Etag       string `pulumi:"etag"`
	GlossaryId string `pulumi:"glossaryId"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Location string `pulumi:"location"`
	// (Required only by `dataplex.GlossaryIamPolicy`) The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	Project    string `pulumi:"project"`
}

func LookupGlossaryIamPolicyOutput(ctx *pulumi.Context, args LookupGlossaryIamPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupGlossaryIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupGlossaryIamPolicyResultOutput, error) {
			args := v.(LookupGlossaryIamPolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:dataplex/getGlossaryIamPolicy:getGlossaryIamPolicy", args, LookupGlossaryIamPolicyResultOutput{}, options).(LookupGlossaryIamPolicyResultOutput), nil
		}).(LookupGlossaryIamPolicyResultOutput)
}

// A collection of arguments for invoking getGlossaryIamPolicy.
type LookupGlossaryIamPolicyOutputArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId pulumi.StringInput `pulumi:"glossaryId"`
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupGlossaryIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGlossaryIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getGlossaryIamPolicy.
type LookupGlossaryIamPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupGlossaryIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGlossaryIamPolicyResult)(nil)).Elem()
}

func (o LookupGlossaryIamPolicyResultOutput) ToLookupGlossaryIamPolicyResultOutput() LookupGlossaryIamPolicyResultOutput {
	return o
}

func (o LookupGlossaryIamPolicyResultOutput) ToLookupGlossaryIamPolicyResultOutputWithContext(ctx context.Context) LookupGlossaryIamPolicyResultOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o LookupGlossaryIamPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGlossaryIamPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

func (o LookupGlossaryIamPolicyResultOutput) GlossaryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGlossaryIamPolicyResult) string { return v.GlossaryId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGlossaryIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGlossaryIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupGlossaryIamPolicyResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGlossaryIamPolicyResult) string { return v.Location }).(pulumi.StringOutput)
}

// (Required only by `dataplex.GlossaryIamPolicy`) The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o LookupGlossaryIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGlossaryIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func (o LookupGlossaryIamPolicyResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGlossaryIamPolicyResult) string { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGlossaryIamPolicyResultOutput{})
}
