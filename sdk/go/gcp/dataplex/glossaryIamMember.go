// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Dataplex Glossary. Each of these resources serves a different use case:
//
// * `dataplex.GlossaryIamPolicy`: Authoritative. Sets the IAM policy for the glossary and replaces any existing policy already attached.
// * `dataplex.GlossaryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the glossary are preserved.
// * `dataplex.GlossaryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the glossary are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.GlossaryIamPolicy`: Retrieves the IAM policy for the glossary
//
// > **Note:** `dataplex.GlossaryIamPolicy` **cannot** be used in conjunction with `dataplex.GlossaryIamBinding` and `dataplex.GlossaryIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.GlossaryIamBinding` resources **can be** used in conjunction with `dataplex.GlossaryIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataplex.GlossaryIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewGlossaryIamPolicy(ctx, "policy", &dataplex.GlossaryIamPolicyArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.GlossaryIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewGlossaryIamBinding(ctx, "binding", &dataplex.GlossaryIamBindingArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				Role:       pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.GlossaryIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewGlossaryIamMember(ctx, "member", &dataplex.GlossaryIamMemberArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				Role:       pulumi.String("roles/viewer"),
//				Member:     pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Dataplex Glossary
// Three different resources help you manage your IAM policy for Dataplex Glossary. Each of these resources serves a different use case:
//
// * `dataplex.GlossaryIamPolicy`: Authoritative. Sets the IAM policy for the glossary and replaces any existing policy already attached.
// * `dataplex.GlossaryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the glossary are preserved.
// * `dataplex.GlossaryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the glossary are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `dataplex.GlossaryIamPolicy`: Retrieves the IAM policy for the glossary
//
// > **Note:** `dataplex.GlossaryIamPolicy` **cannot** be used in conjunction with `dataplex.GlossaryIamBinding` and `dataplex.GlossaryIamMember` or they will fight over what your policy should be.
//
// > **Note:** `dataplex.GlossaryIamBinding` resources **can be** used in conjunction with `dataplex.GlossaryIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## dataplex.GlossaryIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewGlossaryIamPolicy(ctx, "policy", &dataplex.GlossaryIamPolicyArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.GlossaryIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewGlossaryIamBinding(ctx, "binding", &dataplex.GlossaryIamBindingArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				Role:       pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## dataplex.GlossaryIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewGlossaryIamMember(ctx, "member", &dataplex.GlossaryIamMemberArgs{
//				Project:    pulumi.Any(glossaryTestId.Project),
//				Location:   pulumi.Any(glossaryTestId.Location),
//				GlossaryId: pulumi.Any(glossaryTestId.GlossaryId),
//				Role:       pulumi.String("roles/viewer"),
//				Member:     pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}
//
// * {{project}}/{{location}}/{{glossary_id}}
//
// * {{location}}/{{glossary_id}}
//
// * {{glossary_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Dataplex glossary IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/glossaryIamMember:GlossaryIamMember editor "projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/glossaryIamMember:GlossaryIamMember editor "projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:dataplex/glossaryIamMember:GlossaryIamMember editor projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type GlossaryIamMember struct {
	pulumi.CustomResourceState

	Condition GlossaryIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId pulumi.StringOutput `pulumi:"glossaryId"`
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.GlossaryIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewGlossaryIamMember registers a new resource with the given unique name, arguments, and options.
func NewGlossaryIamMember(ctx *pulumi.Context,
	name string, args *GlossaryIamMemberArgs, opts ...pulumi.ResourceOption) (*GlossaryIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlossaryId == nil {
		return nil, errors.New("invalid value for required argument 'GlossaryId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GlossaryIamMember
	err := ctx.RegisterResource("gcp:dataplex/glossaryIamMember:GlossaryIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlossaryIamMember gets an existing GlossaryIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlossaryIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlossaryIamMemberState, opts ...pulumi.ResourceOption) (*GlossaryIamMember, error) {
	var resource GlossaryIamMember
	err := ctx.ReadResource("gcp:dataplex/glossaryIamMember:GlossaryIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlossaryIamMember resources.
type glossaryIamMemberState struct {
	Condition *GlossaryIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId *string `pulumi:"glossaryId"`
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.GlossaryIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type GlossaryIamMemberState struct {
	Condition GlossaryIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId pulumi.StringPtrInput
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataplex.GlossaryIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (GlossaryIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*glossaryIamMemberState)(nil)).Elem()
}

type glossaryIamMemberArgs struct {
	Condition *GlossaryIamMemberCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId string `pulumi:"glossaryId"`
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `dataplex.GlossaryIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a GlossaryIamMember resource.
type GlossaryIamMemberArgs struct {
	Condition GlossaryIamMemberConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	GlossaryId pulumi.StringInput
	// The location where the glossary should reside.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `dataplex.GlossaryIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (GlossaryIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*glossaryIamMemberArgs)(nil)).Elem()
}

type GlossaryIamMemberInput interface {
	pulumi.Input

	ToGlossaryIamMemberOutput() GlossaryIamMemberOutput
	ToGlossaryIamMemberOutputWithContext(ctx context.Context) GlossaryIamMemberOutput
}

func (*GlossaryIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryIamMember)(nil)).Elem()
}

func (i *GlossaryIamMember) ToGlossaryIamMemberOutput() GlossaryIamMemberOutput {
	return i.ToGlossaryIamMemberOutputWithContext(context.Background())
}

func (i *GlossaryIamMember) ToGlossaryIamMemberOutputWithContext(ctx context.Context) GlossaryIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryIamMemberOutput)
}

// GlossaryIamMemberArrayInput is an input type that accepts GlossaryIamMemberArray and GlossaryIamMemberArrayOutput values.
// You can construct a concrete instance of `GlossaryIamMemberArrayInput` via:
//
//	GlossaryIamMemberArray{ GlossaryIamMemberArgs{...} }
type GlossaryIamMemberArrayInput interface {
	pulumi.Input

	ToGlossaryIamMemberArrayOutput() GlossaryIamMemberArrayOutput
	ToGlossaryIamMemberArrayOutputWithContext(context.Context) GlossaryIamMemberArrayOutput
}

type GlossaryIamMemberArray []GlossaryIamMemberInput

func (GlossaryIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlossaryIamMember)(nil)).Elem()
}

func (i GlossaryIamMemberArray) ToGlossaryIamMemberArrayOutput() GlossaryIamMemberArrayOutput {
	return i.ToGlossaryIamMemberArrayOutputWithContext(context.Background())
}

func (i GlossaryIamMemberArray) ToGlossaryIamMemberArrayOutputWithContext(ctx context.Context) GlossaryIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryIamMemberArrayOutput)
}

// GlossaryIamMemberMapInput is an input type that accepts GlossaryIamMemberMap and GlossaryIamMemberMapOutput values.
// You can construct a concrete instance of `GlossaryIamMemberMapInput` via:
//
//	GlossaryIamMemberMap{ "key": GlossaryIamMemberArgs{...} }
type GlossaryIamMemberMapInput interface {
	pulumi.Input

	ToGlossaryIamMemberMapOutput() GlossaryIamMemberMapOutput
	ToGlossaryIamMemberMapOutputWithContext(context.Context) GlossaryIamMemberMapOutput
}

type GlossaryIamMemberMap map[string]GlossaryIamMemberInput

func (GlossaryIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlossaryIamMember)(nil)).Elem()
}

func (i GlossaryIamMemberMap) ToGlossaryIamMemberMapOutput() GlossaryIamMemberMapOutput {
	return i.ToGlossaryIamMemberMapOutputWithContext(context.Background())
}

func (i GlossaryIamMemberMap) ToGlossaryIamMemberMapOutputWithContext(ctx context.Context) GlossaryIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryIamMemberMapOutput)
}

type GlossaryIamMemberOutput struct{ *pulumi.OutputState }

func (GlossaryIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryIamMember)(nil)).Elem()
}

func (o GlossaryIamMemberOutput) ToGlossaryIamMemberOutput() GlossaryIamMemberOutput {
	return o
}

func (o GlossaryIamMemberOutput) ToGlossaryIamMemberOutputWithContext(ctx context.Context) GlossaryIamMemberOutput {
	return o
}

func (o GlossaryIamMemberOutput) Condition() GlossaryIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *GlossaryIamMember) GlossaryIamMemberConditionPtrOutput { return v.Condition }).(GlossaryIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o GlossaryIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o GlossaryIamMemberOutput) GlossaryId() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryIamMember) pulumi.StringOutput { return v.GlossaryId }).(pulumi.StringOutput)
}

// The location where the glossary should reside.
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o GlossaryIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o GlossaryIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o GlossaryIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `dataplex.GlossaryIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o GlossaryIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type GlossaryIamMemberArrayOutput struct{ *pulumi.OutputState }

func (GlossaryIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlossaryIamMember)(nil)).Elem()
}

func (o GlossaryIamMemberArrayOutput) ToGlossaryIamMemberArrayOutput() GlossaryIamMemberArrayOutput {
	return o
}

func (o GlossaryIamMemberArrayOutput) ToGlossaryIamMemberArrayOutputWithContext(ctx context.Context) GlossaryIamMemberArrayOutput {
	return o
}

func (o GlossaryIamMemberArrayOutput) Index(i pulumi.IntInput) GlossaryIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GlossaryIamMember {
		return vs[0].([]*GlossaryIamMember)[vs[1].(int)]
	}).(GlossaryIamMemberOutput)
}

type GlossaryIamMemberMapOutput struct{ *pulumi.OutputState }

func (GlossaryIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlossaryIamMember)(nil)).Elem()
}

func (o GlossaryIamMemberMapOutput) ToGlossaryIamMemberMapOutput() GlossaryIamMemberMapOutput {
	return o
}

func (o GlossaryIamMemberMapOutput) ToGlossaryIamMemberMapOutputWithContext(ctx context.Context) GlossaryIamMemberMapOutput {
	return o
}

func (o GlossaryIamMemberMapOutput) MapIndex(k pulumi.StringInput) GlossaryIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GlossaryIamMember {
		return vs[0].(map[string]*GlossaryIamMember)[vs[1].(string)]
	}).(GlossaryIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryIamMemberInput)(nil)).Elem(), &GlossaryIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryIamMemberArrayInput)(nil)).Elem(), GlossaryIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryIamMemberMapInput)(nil)).Elem(), GlossaryIamMemberMap{})
	pulumi.RegisterOutputType(GlossaryIamMemberOutput{})
	pulumi.RegisterOutputType(GlossaryIamMemberArrayOutput{})
	pulumi.RegisterOutputType(GlossaryIamMemberMapOutput{})
}
