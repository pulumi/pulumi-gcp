// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a collection of categories and terms within a Glossary that are related to each other.
//
// ## Example Usage
//
// ### Dataplex Glossary Category Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			categoryTestId, err := dataplex.NewGlossary(ctx, "category_test_id", &dataplex.GlossaryArgs{
//				GlossaryId: pulumi.String("tf-test-glossary_72490"),
//				Location:   pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewGlossaryCategory(ctx, "category_test_id", &dataplex.GlossaryCategoryArgs{
//				Parent: pulumi.All(categoryTestId.Project, categoryTestId.GlossaryId).ApplyT(func(_args []interface{}) (string, error) {
//					project := _args[0].(string)
//					glossaryId := _args[1].(string)
//					return fmt.Sprintf("projects/%v/locations/us-central1/glossaries/%v", project, glossaryId), nil
//				}).(pulumi.StringOutput),
//				GlossaryId: categoryTestId.GlossaryId,
//				Location:   pulumi.String("us-central1"),
//				CategoryId: pulumi.String("tf-test-category-basic_89605"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Dataplex Glossary Category Full
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			categoryTestIdFull, err := dataplex.NewGlossary(ctx, "category_test_id_full", &dataplex.GlossaryArgs{
//				GlossaryId: pulumi.String("tf-test-glossary_56730"),
//				Location:   pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dataplex.NewGlossaryCategory(ctx, "category_test_id_full", &dataplex.GlossaryCategoryArgs{
//				Parent: pulumi.All(categoryTestIdFull.Project, categoryTestIdFull.GlossaryId).ApplyT(func(_args []interface{}) (string, error) {
//					project := _args[0].(string)
//					glossaryId := _args[1].(string)
//					return fmt.Sprintf("projects/%v/locations/us-central1/glossaries/%v", project, glossaryId), nil
//				}).(pulumi.StringOutput),
//				GlossaryId: categoryTestIdFull.GlossaryId,
//				Location:   pulumi.String("us-central1"),
//				CategoryId: pulumi.String("tf-test-category-full_95154"),
//				Labels: pulumi.StringMap{
//					"tag": pulumi.String("test-tf"),
//				},
//				DisplayName: pulumi.String("terraform category"),
//				Description: pulumi.String("category created by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GlossaryCategory can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}/categories/{{category_id}}`
//
// * `{{project}}/{{location}}/{{glossary_id}}/{{category_id}}`
//
// * `{{location}}/{{glossary_id}}/{{category_id}}`
//
// When using the `pulumi import` command, GlossaryCategory can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:dataplex/glossaryCategory:GlossaryCategory default projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}/categories/{{category_id}}
// ```
//
// ```sh
// $ pulumi import gcp:dataplex/glossaryCategory:GlossaryCategory default {{project}}/{{location}}/{{glossary_id}}/{{category_id}}
// ```
//
// ```sh
// $ pulumi import gcp:dataplex/glossaryCategory:GlossaryCategory default {{location}}/{{glossary_id}}/{{category_id}}
// ```
type GlossaryCategory struct {
	pulumi.CustomResourceState

	// The category id for creation.
	CategoryId pulumi.StringPtrOutput `pulumi:"categoryId"`
	// The time at which the GlossaryCategory was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The user-mutable description of the GlossaryCategory.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User friendly display name of the GlossaryCategory. This is user-mutable. This will be same as the categoryId, if not specified.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The glossary id for creation.
	GlossaryId pulumi.StringPtrOutput `pulumi:"glossaryId"`
	// User-defined labels for the GlossaryCategory.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location where the glossary category should reside.
	//
	// ***
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the GlossaryCategory. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
	Name pulumi.StringOutput `pulumi:"name"`
	// The immediate parent of the GlossaryCategory in the resource-hierarchy. It can either be a Glossary or a Category. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
	Parent pulumi.StringOutput `pulumi:"parent"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// System generated unique id for the GlossaryCategory. This ID will be different if the GlossaryCategory is deleted and re-created with the same name.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The time at which the GlossaryCategory was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewGlossaryCategory registers a new resource with the given unique name, arguments, and options.
func NewGlossaryCategory(ctx *pulumi.Context,
	name string, args *GlossaryCategoryArgs, opts ...pulumi.ResourceOption) (*GlossaryCategory, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GlossaryCategory
	err := ctx.RegisterResource("gcp:dataplex/glossaryCategory:GlossaryCategory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlossaryCategory gets an existing GlossaryCategory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlossaryCategory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlossaryCategoryState, opts ...pulumi.ResourceOption) (*GlossaryCategory, error) {
	var resource GlossaryCategory
	err := ctx.ReadResource("gcp:dataplex/glossaryCategory:GlossaryCategory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlossaryCategory resources.
type glossaryCategoryState struct {
	// The category id for creation.
	CategoryId *string `pulumi:"categoryId"`
	// The time at which the GlossaryCategory was created.
	CreateTime *string `pulumi:"createTime"`
	// The user-mutable description of the GlossaryCategory.
	Description *string `pulumi:"description"`
	// User friendly display name of the GlossaryCategory. This is user-mutable. This will be same as the categoryId, if not specified.
	DisplayName *string `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The glossary id for creation.
	GlossaryId *string `pulumi:"glossaryId"`
	// User-defined labels for the GlossaryCategory.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location where the glossary category should reside.
	//
	// ***
	Location *string `pulumi:"location"`
	// The resource name of the GlossaryCategory. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
	Name *string `pulumi:"name"`
	// The immediate parent of the GlossaryCategory in the resource-hierarchy. It can either be a Glossary or a Category. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
	Parent *string `pulumi:"parent"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// System generated unique id for the GlossaryCategory. This ID will be different if the GlossaryCategory is deleted and re-created with the same name.
	Uid *string `pulumi:"uid"`
	// The time at which the GlossaryCategory was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type GlossaryCategoryState struct {
	// The category id for creation.
	CategoryId pulumi.StringPtrInput
	// The time at which the GlossaryCategory was created.
	CreateTime pulumi.StringPtrInput
	// The user-mutable description of the GlossaryCategory.
	Description pulumi.StringPtrInput
	// User friendly display name of the GlossaryCategory. This is user-mutable. This will be same as the categoryId, if not specified.
	DisplayName pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The glossary id for creation.
	GlossaryId pulumi.StringPtrInput
	// User-defined labels for the GlossaryCategory.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location where the glossary category should reside.
	//
	// ***
	Location pulumi.StringPtrInput
	// The resource name of the GlossaryCategory. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
	Name pulumi.StringPtrInput
	// The immediate parent of the GlossaryCategory in the resource-hierarchy. It can either be a Glossary or a Category. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
	Parent pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// System generated unique id for the GlossaryCategory. This ID will be different if the GlossaryCategory is deleted and re-created with the same name.
	Uid pulumi.StringPtrInput
	// The time at which the GlossaryCategory was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (GlossaryCategoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*glossaryCategoryState)(nil)).Elem()
}

type glossaryCategoryArgs struct {
	// The category id for creation.
	CategoryId *string `pulumi:"categoryId"`
	// The user-mutable description of the GlossaryCategory.
	Description *string `pulumi:"description"`
	// User friendly display name of the GlossaryCategory. This is user-mutable. This will be same as the categoryId, if not specified.
	DisplayName *string `pulumi:"displayName"`
	// The glossary id for creation.
	GlossaryId *string `pulumi:"glossaryId"`
	// User-defined labels for the GlossaryCategory.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location where the glossary category should reside.
	//
	// ***
	Location string `pulumi:"location"`
	// The immediate parent of the GlossaryCategory in the resource-hierarchy. It can either be a Glossary or a Category. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
	Parent string `pulumi:"parent"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a GlossaryCategory resource.
type GlossaryCategoryArgs struct {
	// The category id for creation.
	CategoryId pulumi.StringPtrInput
	// The user-mutable description of the GlossaryCategory.
	Description pulumi.StringPtrInput
	// User friendly display name of the GlossaryCategory. This is user-mutable. This will be same as the categoryId, if not specified.
	DisplayName pulumi.StringPtrInput
	// The glossary id for creation.
	GlossaryId pulumi.StringPtrInput
	// User-defined labels for the GlossaryCategory.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location where the glossary category should reside.
	//
	// ***
	Location pulumi.StringInput
	// The immediate parent of the GlossaryCategory in the resource-hierarchy. It can either be a Glossary or a Category. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
	Parent pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (GlossaryCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*glossaryCategoryArgs)(nil)).Elem()
}

type GlossaryCategoryInput interface {
	pulumi.Input

	ToGlossaryCategoryOutput() GlossaryCategoryOutput
	ToGlossaryCategoryOutputWithContext(ctx context.Context) GlossaryCategoryOutput
}

func (*GlossaryCategory) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryCategory)(nil)).Elem()
}

func (i *GlossaryCategory) ToGlossaryCategoryOutput() GlossaryCategoryOutput {
	return i.ToGlossaryCategoryOutputWithContext(context.Background())
}

func (i *GlossaryCategory) ToGlossaryCategoryOutputWithContext(ctx context.Context) GlossaryCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryCategoryOutput)
}

// GlossaryCategoryArrayInput is an input type that accepts GlossaryCategoryArray and GlossaryCategoryArrayOutput values.
// You can construct a concrete instance of `GlossaryCategoryArrayInput` via:
//
//	GlossaryCategoryArray{ GlossaryCategoryArgs{...} }
type GlossaryCategoryArrayInput interface {
	pulumi.Input

	ToGlossaryCategoryArrayOutput() GlossaryCategoryArrayOutput
	ToGlossaryCategoryArrayOutputWithContext(context.Context) GlossaryCategoryArrayOutput
}

type GlossaryCategoryArray []GlossaryCategoryInput

func (GlossaryCategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlossaryCategory)(nil)).Elem()
}

func (i GlossaryCategoryArray) ToGlossaryCategoryArrayOutput() GlossaryCategoryArrayOutput {
	return i.ToGlossaryCategoryArrayOutputWithContext(context.Background())
}

func (i GlossaryCategoryArray) ToGlossaryCategoryArrayOutputWithContext(ctx context.Context) GlossaryCategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryCategoryArrayOutput)
}

// GlossaryCategoryMapInput is an input type that accepts GlossaryCategoryMap and GlossaryCategoryMapOutput values.
// You can construct a concrete instance of `GlossaryCategoryMapInput` via:
//
//	GlossaryCategoryMap{ "key": GlossaryCategoryArgs{...} }
type GlossaryCategoryMapInput interface {
	pulumi.Input

	ToGlossaryCategoryMapOutput() GlossaryCategoryMapOutput
	ToGlossaryCategoryMapOutputWithContext(context.Context) GlossaryCategoryMapOutput
}

type GlossaryCategoryMap map[string]GlossaryCategoryInput

func (GlossaryCategoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlossaryCategory)(nil)).Elem()
}

func (i GlossaryCategoryMap) ToGlossaryCategoryMapOutput() GlossaryCategoryMapOutput {
	return i.ToGlossaryCategoryMapOutputWithContext(context.Background())
}

func (i GlossaryCategoryMap) ToGlossaryCategoryMapOutputWithContext(ctx context.Context) GlossaryCategoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryCategoryMapOutput)
}

type GlossaryCategoryOutput struct{ *pulumi.OutputState }

func (GlossaryCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryCategory)(nil)).Elem()
}

func (o GlossaryCategoryOutput) ToGlossaryCategoryOutput() GlossaryCategoryOutput {
	return o
}

func (o GlossaryCategoryOutput) ToGlossaryCategoryOutputWithContext(ctx context.Context) GlossaryCategoryOutput {
	return o
}

// The category id for creation.
func (o GlossaryCategoryOutput) CategoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlossaryCategory) pulumi.StringPtrOutput { return v.CategoryId }).(pulumi.StringPtrOutput)
}

// The time at which the GlossaryCategory was created.
func (o GlossaryCategoryOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryCategory) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The user-mutable description of the GlossaryCategory.
func (o GlossaryCategoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlossaryCategory) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// User friendly display name of the GlossaryCategory. This is user-mutable. This will be same as the categoryId, if not specified.
func (o GlossaryCategoryOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlossaryCategory) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o GlossaryCategoryOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GlossaryCategory) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The glossary id for creation.
func (o GlossaryCategoryOutput) GlossaryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlossaryCategory) pulumi.StringPtrOutput { return v.GlossaryId }).(pulumi.StringPtrOutput)
}

// User-defined labels for the GlossaryCategory.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o GlossaryCategoryOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GlossaryCategory) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location where the glossary category should reside.
//
// ***
func (o GlossaryCategoryOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryCategory) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the GlossaryCategory. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
func (o GlossaryCategoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryCategory) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The immediate parent of the GlossaryCategory in the resource-hierarchy. It can either be a Glossary or a Category. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
func (o GlossaryCategoryOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryCategory) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o GlossaryCategoryOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryCategory) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o GlossaryCategoryOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GlossaryCategory) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// System generated unique id for the GlossaryCategory. This ID will be different if the GlossaryCategory is deleted and re-created with the same name.
func (o GlossaryCategoryOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryCategory) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The time at which the GlossaryCategory was last updated.
func (o GlossaryCategoryOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryCategory) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type GlossaryCategoryArrayOutput struct{ *pulumi.OutputState }

func (GlossaryCategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlossaryCategory)(nil)).Elem()
}

func (o GlossaryCategoryArrayOutput) ToGlossaryCategoryArrayOutput() GlossaryCategoryArrayOutput {
	return o
}

func (o GlossaryCategoryArrayOutput) ToGlossaryCategoryArrayOutputWithContext(ctx context.Context) GlossaryCategoryArrayOutput {
	return o
}

func (o GlossaryCategoryArrayOutput) Index(i pulumi.IntInput) GlossaryCategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GlossaryCategory {
		return vs[0].([]*GlossaryCategory)[vs[1].(int)]
	}).(GlossaryCategoryOutput)
}

type GlossaryCategoryMapOutput struct{ *pulumi.OutputState }

func (GlossaryCategoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlossaryCategory)(nil)).Elem()
}

func (o GlossaryCategoryMapOutput) ToGlossaryCategoryMapOutput() GlossaryCategoryMapOutput {
	return o
}

func (o GlossaryCategoryMapOutput) ToGlossaryCategoryMapOutputWithContext(ctx context.Context) GlossaryCategoryMapOutput {
	return o
}

func (o GlossaryCategoryMapOutput) MapIndex(k pulumi.StringInput) GlossaryCategoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GlossaryCategory {
		return vs[0].(map[string]*GlossaryCategory)[vs[1].(string)]
	}).(GlossaryCategoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryCategoryInput)(nil)).Elem(), &GlossaryCategory{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryCategoryArrayInput)(nil)).Elem(), GlossaryCategoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryCategoryMapInput)(nil)).Elem(), GlossaryCategoryMap{})
	pulumi.RegisterOutputType(GlossaryCategoryOutput{})
	pulumi.RegisterOutputType(GlossaryCategoryArrayOutput{})
	pulumi.RegisterOutputType(GlossaryCategoryMapOutput{})
}
