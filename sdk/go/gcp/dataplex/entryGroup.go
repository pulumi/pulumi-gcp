// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataplex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Entry Group represents a logical grouping of one or more Entries.
//
// ## Example Usage
//
// ### Dataplex Entry Group Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewEntryGroup(ctx, "test_entry_group_basic", &dataplex.EntryGroupArgs{
//				EntryGroupId: pulumi.String("entry-group-basic"),
//				Project:      pulumi.String("my-project-name"),
//				Location:     pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Dataplex Entry Group Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/dataplex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataplex.NewEntryGroup(ctx, "test_entry_group_full", &dataplex.EntryGroupArgs{
//				EntryGroupId: pulumi.String("entry-group-full"),
//				Project:      pulumi.String("my-project-name"),
//				Location:     pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"tag": pulumi.String("test-tf"),
//				},
//				DisplayName: pulumi.String("terraform entry group"),
//				Description: pulumi.String("entry group created by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EntryGroup can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/entryGroups/{{entry_group_id}}`
//
// * `{{project}}/{{location}}/{{entry_group_id}}`
//
// * `{{location}}/{{entry_group_id}}`
//
// When using the `pulumi import` command, EntryGroup can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:dataplex/entryGroup:EntryGroup default projects/{{project}}/locations/{{location}}/entryGroups/{{entry_group_id}}
// ```
//
// ```sh
// $ pulumi import gcp:dataplex/entryGroup:EntryGroup default {{project}}/{{location}}/{{entry_group_id}}
// ```
//
// ```sh
// $ pulumi import gcp:dataplex/entryGroup:EntryGroup default {{location}}/{{entry_group_id}}
// ```
type EntryGroup struct {
	pulumi.CustomResourceState

	// The time when the EntryGroup was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the EntryGroup.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User friendly display name.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The entry group id of the entry group.
	EntryGroupId pulumi.StringPtrOutput `pulumi:"entryGroupId"`
	// User-defined labels for the EntryGroup.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location where entry group will be created in.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The relative resource name of the EntryGroup, of the form: projects/{project_number}/locations/{location_id}/entryGroups/{entry_group_id}
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Denotes the transfer status of the Entry Group. It is unspecified
	// for Entry Group created from Dataplex API.
	TransferStatus pulumi.StringOutput `pulumi:"transferStatus"`
	// System generated globally unique ID for the EntryGroup. This ID will be different if the EntryGroup is deleted and re-created with the same name.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The time when the EntryGroup was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewEntryGroup registers a new resource with the given unique name, arguments, and options.
func NewEntryGroup(ctx *pulumi.Context,
	name string, args *EntryGroupArgs, opts ...pulumi.ResourceOption) (*EntryGroup, error) {
	if args == nil {
		args = &EntryGroupArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EntryGroup
	err := ctx.RegisterResource("gcp:dataplex/entryGroup:EntryGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntryGroup gets an existing EntryGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntryGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntryGroupState, opts ...pulumi.ResourceOption) (*EntryGroup, error) {
	var resource EntryGroup
	err := ctx.ReadResource("gcp:dataplex/entryGroup:EntryGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EntryGroup resources.
type entryGroupState struct {
	// The time when the EntryGroup was created.
	CreateTime *string `pulumi:"createTime"`
	// Description of the EntryGroup.
	Description *string `pulumi:"description"`
	// User friendly display name.
	DisplayName *string `pulumi:"displayName"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The entry group id of the entry group.
	EntryGroupId *string `pulumi:"entryGroupId"`
	// User-defined labels for the EntryGroup.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location where entry group will be created in.
	Location *string `pulumi:"location"`
	// The relative resource name of the EntryGroup, of the form: projects/{project_number}/locations/{location_id}/entryGroups/{entry_group_id}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Denotes the transfer status of the Entry Group. It is unspecified
	// for Entry Group created from Dataplex API.
	TransferStatus *string `pulumi:"transferStatus"`
	// System generated globally unique ID for the EntryGroup. This ID will be different if the EntryGroup is deleted and re-created with the same name.
	Uid *string `pulumi:"uid"`
	// The time when the EntryGroup was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type EntryGroupState struct {
	// The time when the EntryGroup was created.
	CreateTime pulumi.StringPtrInput
	// Description of the EntryGroup.
	Description pulumi.StringPtrInput
	// User friendly display name.
	DisplayName pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The entry group id of the entry group.
	EntryGroupId pulumi.StringPtrInput
	// User-defined labels for the EntryGroup.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location where entry group will be created in.
	Location pulumi.StringPtrInput
	// The relative resource name of the EntryGroup, of the form: projects/{project_number}/locations/{location_id}/entryGroups/{entry_group_id}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Denotes the transfer status of the Entry Group. It is unspecified
	// for Entry Group created from Dataplex API.
	TransferStatus pulumi.StringPtrInput
	// System generated globally unique ID for the EntryGroup. This ID will be different if the EntryGroup is deleted and re-created with the same name.
	Uid pulumi.StringPtrInput
	// The time when the EntryGroup was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (EntryGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*entryGroupState)(nil)).Elem()
}

type entryGroupArgs struct {
	// Description of the EntryGroup.
	Description *string `pulumi:"description"`
	// User friendly display name.
	DisplayName *string `pulumi:"displayName"`
	// The entry group id of the entry group.
	EntryGroupId *string `pulumi:"entryGroupId"`
	// User-defined labels for the EntryGroup.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location where entry group will be created in.
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a EntryGroup resource.
type EntryGroupArgs struct {
	// Description of the EntryGroup.
	Description pulumi.StringPtrInput
	// User friendly display name.
	DisplayName pulumi.StringPtrInput
	// The entry group id of the entry group.
	EntryGroupId pulumi.StringPtrInput
	// User-defined labels for the EntryGroup.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location where entry group will be created in.
	Location pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (EntryGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entryGroupArgs)(nil)).Elem()
}

type EntryGroupInput interface {
	pulumi.Input

	ToEntryGroupOutput() EntryGroupOutput
	ToEntryGroupOutputWithContext(ctx context.Context) EntryGroupOutput
}

func (*EntryGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**EntryGroup)(nil)).Elem()
}

func (i *EntryGroup) ToEntryGroupOutput() EntryGroupOutput {
	return i.ToEntryGroupOutputWithContext(context.Background())
}

func (i *EntryGroup) ToEntryGroupOutputWithContext(ctx context.Context) EntryGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryGroupOutput)
}

// EntryGroupArrayInput is an input type that accepts EntryGroupArray and EntryGroupArrayOutput values.
// You can construct a concrete instance of `EntryGroupArrayInput` via:
//
//	EntryGroupArray{ EntryGroupArgs{...} }
type EntryGroupArrayInput interface {
	pulumi.Input

	ToEntryGroupArrayOutput() EntryGroupArrayOutput
	ToEntryGroupArrayOutputWithContext(context.Context) EntryGroupArrayOutput
}

type EntryGroupArray []EntryGroupInput

func (EntryGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntryGroup)(nil)).Elem()
}

func (i EntryGroupArray) ToEntryGroupArrayOutput() EntryGroupArrayOutput {
	return i.ToEntryGroupArrayOutputWithContext(context.Background())
}

func (i EntryGroupArray) ToEntryGroupArrayOutputWithContext(ctx context.Context) EntryGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryGroupArrayOutput)
}

// EntryGroupMapInput is an input type that accepts EntryGroupMap and EntryGroupMapOutput values.
// You can construct a concrete instance of `EntryGroupMapInput` via:
//
//	EntryGroupMap{ "key": EntryGroupArgs{...} }
type EntryGroupMapInput interface {
	pulumi.Input

	ToEntryGroupMapOutput() EntryGroupMapOutput
	ToEntryGroupMapOutputWithContext(context.Context) EntryGroupMapOutput
}

type EntryGroupMap map[string]EntryGroupInput

func (EntryGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntryGroup)(nil)).Elem()
}

func (i EntryGroupMap) ToEntryGroupMapOutput() EntryGroupMapOutput {
	return i.ToEntryGroupMapOutputWithContext(context.Background())
}

func (i EntryGroupMap) ToEntryGroupMapOutputWithContext(ctx context.Context) EntryGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntryGroupMapOutput)
}

type EntryGroupOutput struct{ *pulumi.OutputState }

func (EntryGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntryGroup)(nil)).Elem()
}

func (o EntryGroupOutput) ToEntryGroupOutput() EntryGroupOutput {
	return o
}

func (o EntryGroupOutput) ToEntryGroupOutputWithContext(ctx context.Context) EntryGroupOutput {
	return o
}

// The time when the EntryGroup was created.
func (o EntryGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the EntryGroup.
func (o EntryGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntryGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// User friendly display name.
func (o EntryGroupOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntryGroup) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o EntryGroupOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntryGroup) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The entry group id of the entry group.
func (o EntryGroupOutput) EntryGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntryGroup) pulumi.StringPtrOutput { return v.EntryGroupId }).(pulumi.StringPtrOutput)
}

// User-defined labels for the EntryGroup.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o EntryGroupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntryGroup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location where entry group will be created in.
func (o EntryGroupOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntryGroup) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The relative resource name of the EntryGroup, of the form: projects/{project_number}/locations/{location_id}/entryGroups/{entry_group_id}
func (o EntryGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o EntryGroupOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryGroup) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o EntryGroupOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntryGroup) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Denotes the transfer status of the Entry Group. It is unspecified
// for Entry Group created from Dataplex API.
func (o EntryGroupOutput) TransferStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryGroup) pulumi.StringOutput { return v.TransferStatus }).(pulumi.StringOutput)
}

// System generated globally unique ID for the EntryGroup. This ID will be different if the EntryGroup is deleted and re-created with the same name.
func (o EntryGroupOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryGroup) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The time when the EntryGroup was last updated.
func (o EntryGroupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EntryGroup) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type EntryGroupArrayOutput struct{ *pulumi.OutputState }

func (EntryGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntryGroup)(nil)).Elem()
}

func (o EntryGroupArrayOutput) ToEntryGroupArrayOutput() EntryGroupArrayOutput {
	return o
}

func (o EntryGroupArrayOutput) ToEntryGroupArrayOutputWithContext(ctx context.Context) EntryGroupArrayOutput {
	return o
}

func (o EntryGroupArrayOutput) Index(i pulumi.IntInput) EntryGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EntryGroup {
		return vs[0].([]*EntryGroup)[vs[1].(int)]
	}).(EntryGroupOutput)
}

type EntryGroupMapOutput struct{ *pulumi.OutputState }

func (EntryGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntryGroup)(nil)).Elem()
}

func (o EntryGroupMapOutput) ToEntryGroupMapOutput() EntryGroupMapOutput {
	return o
}

func (o EntryGroupMapOutput) ToEntryGroupMapOutputWithContext(ctx context.Context) EntryGroupMapOutput {
	return o
}

func (o EntryGroupMapOutput) MapIndex(k pulumi.StringInput) EntryGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EntryGroup {
		return vs[0].(map[string]*EntryGroup)[vs[1].(string)]
	}).(EntryGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntryGroupInput)(nil)).Elem(), &EntryGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntryGroupArrayInput)(nil)).Elem(), EntryGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntryGroupMapInput)(nil)).Elem(), EntryGroupMap{})
	pulumi.RegisterOutputType(EntryGroupOutput{})
	pulumi.RegisterOutputType(EntryGroupArrayOutput{})
	pulumi.RegisterOutputType(EntryGroupMapOutput{})
}
