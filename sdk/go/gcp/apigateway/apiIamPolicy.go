// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/global/apis/{{name}} * {{project}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. API Gateway api IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//  $ pulumi import gcp:apigateway/apiIamPolicy:ApiIamPolicy editor "projects/{{project}}/locations/global/apis/{{api}} roles/apigateway.viewer user:jane@example.com"
// ```
//
//  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//  $ pulumi import gcp:apigateway/apiIamPolicy:ApiIamPolicy editor "projects/{{project}}/locations/global/apis/{{api}} roles/apigateway.viewer"
// ```
//
//  IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//  $ pulumi import gcp:apigateway/apiIamPolicy:ApiIamPolicy editor projects/{{project}}/locations/global/apis/{{api}}
// ```
//
//  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ApiIamPolicy struct {
	pulumi.CustomResourceState

	Api pulumi.StringOutput `pulumi:"api"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewApiIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewApiIamPolicy(ctx *pulumi.Context,
	name string, args *ApiIamPolicyArgs, opts ...pulumi.ResourceOption) (*ApiIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Api == nil {
		return nil, errors.New("invalid value for required argument 'Api'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	var resource ApiIamPolicy
	err := ctx.RegisterResource("gcp:apigateway/apiIamPolicy:ApiIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiIamPolicy gets an existing ApiIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiIamPolicyState, opts ...pulumi.ResourceOption) (*ApiIamPolicy, error) {
	var resource ApiIamPolicy
	err := ctx.ReadResource("gcp:apigateway/apiIamPolicy:ApiIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiIamPolicy resources.
type apiIamPolicyState struct {
	Api *string `pulumi:"api"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

type ApiIamPolicyState struct {
	Api pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ApiIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiIamPolicyState)(nil)).Elem()
}

type apiIamPolicyArgs struct {
	Api string `pulumi:"api"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a ApiIamPolicy resource.
type ApiIamPolicyArgs struct {
	Api pulumi.StringInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ApiIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiIamPolicyArgs)(nil)).Elem()
}

type ApiIamPolicyInput interface {
	pulumi.Input

	ToApiIamPolicyOutput() ApiIamPolicyOutput
	ToApiIamPolicyOutputWithContext(ctx context.Context) ApiIamPolicyOutput
}

func (*ApiIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiIamPolicy)(nil))
}

func (i *ApiIamPolicy) ToApiIamPolicyOutput() ApiIamPolicyOutput {
	return i.ToApiIamPolicyOutputWithContext(context.Background())
}

func (i *ApiIamPolicy) ToApiIamPolicyOutputWithContext(ctx context.Context) ApiIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiIamPolicyOutput)
}

func (i *ApiIamPolicy) ToApiIamPolicyPtrOutput() ApiIamPolicyPtrOutput {
	return i.ToApiIamPolicyPtrOutputWithContext(context.Background())
}

func (i *ApiIamPolicy) ToApiIamPolicyPtrOutputWithContext(ctx context.Context) ApiIamPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiIamPolicyPtrOutput)
}

type ApiIamPolicyPtrInput interface {
	pulumi.Input

	ToApiIamPolicyPtrOutput() ApiIamPolicyPtrOutput
	ToApiIamPolicyPtrOutputWithContext(ctx context.Context) ApiIamPolicyPtrOutput
}

type apiIamPolicyPtrType ApiIamPolicyArgs

func (*apiIamPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiIamPolicy)(nil))
}

func (i *apiIamPolicyPtrType) ToApiIamPolicyPtrOutput() ApiIamPolicyPtrOutput {
	return i.ToApiIamPolicyPtrOutputWithContext(context.Background())
}

func (i *apiIamPolicyPtrType) ToApiIamPolicyPtrOutputWithContext(ctx context.Context) ApiIamPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiIamPolicyPtrOutput)
}

// ApiIamPolicyArrayInput is an input type that accepts ApiIamPolicyArray and ApiIamPolicyArrayOutput values.
// You can construct a concrete instance of `ApiIamPolicyArrayInput` via:
//
//          ApiIamPolicyArray{ ApiIamPolicyArgs{...} }
type ApiIamPolicyArrayInput interface {
	pulumi.Input

	ToApiIamPolicyArrayOutput() ApiIamPolicyArrayOutput
	ToApiIamPolicyArrayOutputWithContext(context.Context) ApiIamPolicyArrayOutput
}

type ApiIamPolicyArray []ApiIamPolicyInput

func (ApiIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ApiIamPolicy)(nil))
}

func (i ApiIamPolicyArray) ToApiIamPolicyArrayOutput() ApiIamPolicyArrayOutput {
	return i.ToApiIamPolicyArrayOutputWithContext(context.Background())
}

func (i ApiIamPolicyArray) ToApiIamPolicyArrayOutputWithContext(ctx context.Context) ApiIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiIamPolicyArrayOutput)
}

// ApiIamPolicyMapInput is an input type that accepts ApiIamPolicyMap and ApiIamPolicyMapOutput values.
// You can construct a concrete instance of `ApiIamPolicyMapInput` via:
//
//          ApiIamPolicyMap{ "key": ApiIamPolicyArgs{...} }
type ApiIamPolicyMapInput interface {
	pulumi.Input

	ToApiIamPolicyMapOutput() ApiIamPolicyMapOutput
	ToApiIamPolicyMapOutputWithContext(context.Context) ApiIamPolicyMapOutput
}

type ApiIamPolicyMap map[string]ApiIamPolicyInput

func (ApiIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ApiIamPolicy)(nil))
}

func (i ApiIamPolicyMap) ToApiIamPolicyMapOutput() ApiIamPolicyMapOutput {
	return i.ToApiIamPolicyMapOutputWithContext(context.Background())
}

func (i ApiIamPolicyMap) ToApiIamPolicyMapOutputWithContext(ctx context.Context) ApiIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiIamPolicyMapOutput)
}

type ApiIamPolicyOutput struct {
	*pulumi.OutputState
}

func (ApiIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiIamPolicy)(nil))
}

func (o ApiIamPolicyOutput) ToApiIamPolicyOutput() ApiIamPolicyOutput {
	return o
}

func (o ApiIamPolicyOutput) ToApiIamPolicyOutputWithContext(ctx context.Context) ApiIamPolicyOutput {
	return o
}

func (o ApiIamPolicyOutput) ToApiIamPolicyPtrOutput() ApiIamPolicyPtrOutput {
	return o.ToApiIamPolicyPtrOutputWithContext(context.Background())
}

func (o ApiIamPolicyOutput) ToApiIamPolicyPtrOutputWithContext(ctx context.Context) ApiIamPolicyPtrOutput {
	return o.ApplyT(func(v ApiIamPolicy) *ApiIamPolicy {
		return &v
	}).(ApiIamPolicyPtrOutput)
}

type ApiIamPolicyPtrOutput struct {
	*pulumi.OutputState
}

func (ApiIamPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiIamPolicy)(nil))
}

func (o ApiIamPolicyPtrOutput) ToApiIamPolicyPtrOutput() ApiIamPolicyPtrOutput {
	return o
}

func (o ApiIamPolicyPtrOutput) ToApiIamPolicyPtrOutputWithContext(ctx context.Context) ApiIamPolicyPtrOutput {
	return o
}

type ApiIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (ApiIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiIamPolicy)(nil))
}

func (o ApiIamPolicyArrayOutput) ToApiIamPolicyArrayOutput() ApiIamPolicyArrayOutput {
	return o
}

func (o ApiIamPolicyArrayOutput) ToApiIamPolicyArrayOutputWithContext(ctx context.Context) ApiIamPolicyArrayOutput {
	return o
}

func (o ApiIamPolicyArrayOutput) Index(i pulumi.IntInput) ApiIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiIamPolicy {
		return vs[0].([]ApiIamPolicy)[vs[1].(int)]
	}).(ApiIamPolicyOutput)
}

type ApiIamPolicyMapOutput struct{ *pulumi.OutputState }

func (ApiIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ApiIamPolicy)(nil))
}

func (o ApiIamPolicyMapOutput) ToApiIamPolicyMapOutput() ApiIamPolicyMapOutput {
	return o
}

func (o ApiIamPolicyMapOutput) ToApiIamPolicyMapOutputWithContext(ctx context.Context) ApiIamPolicyMapOutput {
	return o
}

func (o ApiIamPolicyMapOutput) MapIndex(k pulumi.StringInput) ApiIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ApiIamPolicy {
		return vs[0].(map[string]ApiIamPolicy)[vs[1].(string)]
	}).(ApiIamPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(ApiIamPolicyOutput{})
	pulumi.RegisterOutputType(ApiIamPolicyPtrOutput{})
	pulumi.RegisterOutputType(ApiIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(ApiIamPolicyMapOutput{})
}
