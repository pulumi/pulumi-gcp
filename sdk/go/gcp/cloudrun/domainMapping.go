// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudrun

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Resource to hold the state and status of a user's domain mapping.
// 
// **Note:** Cloud Run as a product is in beta, however the REST API is currently still an alpha.
// Please use this with caution as it may change when the API moves to beta.
// 
// 
// To get more information about DomainMapping, see:
// 
// * [API documentation](https://cloud.google.com/run/docs/reference/rest/v1alpha1/projects.locations.domainmappings)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/run/docs/mapping-custom-domains)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/cloud_run_domain_mapping.html.markdown.
type DomainMapping struct {
	s *pulumi.ResourceState
}

// NewDomainMapping registers a new resource with the given unique name, arguments, and options.
func NewDomainMapping(ctx *pulumi.Context,
	name string, args *DomainMappingArgs, opts ...pulumi.ResourceOpt) (*DomainMapping, error) {
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.Metadata == nil {
		return nil, errors.New("missing required argument 'Metadata'")
	}
	if args == nil || args.Spec == nil {
		return nil, errors.New("missing required argument 'Spec'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["location"] = nil
		inputs["metadata"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["spec"] = nil
	} else {
		inputs["location"] = args.Location
		inputs["metadata"] = args.Metadata
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["spec"] = args.Spec
	}
	inputs["status"] = nil
	s, err := ctx.RegisterResource("gcp:cloudrun/domainMapping:DomainMapping", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DomainMapping{s: s}, nil
}

// GetDomainMapping gets an existing DomainMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainMapping(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DomainMappingState, opts ...pulumi.ResourceOpt) (*DomainMapping, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["location"] = state.Location
		inputs["metadata"] = state.Metadata
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["spec"] = state.Spec
		inputs["status"] = state.Status
	}
	s, err := ctx.ReadResource("gcp:cloudrun/domainMapping:DomainMapping", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DomainMapping{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DomainMapping) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DomainMapping) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *DomainMapping) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

func (r *DomainMapping) Metadata() *pulumi.Output {
	return r.s.State["metadata"]
}

func (r *DomainMapping) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *DomainMapping) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *DomainMapping) Spec() *pulumi.Output {
	return r.s.State["spec"]
}

func (r *DomainMapping) Status() *pulumi.Output {
	return r.s.State["status"]
}

// Input properties used for looking up and filtering DomainMapping resources.
type DomainMappingState struct {
	Location interface{}
	Metadata interface{}
	Name interface{}
	Project interface{}
	Spec interface{}
	Status interface{}
}

// The set of arguments for constructing a DomainMapping resource.
type DomainMappingArgs struct {
	Location interface{}
	Metadata interface{}
	Name interface{}
	Project interface{}
	Spec interface{}
}
