// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactregistry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about Artifact Registry Docker images.
// See [the official documentation](https://cloud.google.com/artifact-registry/docs/docker)
// and [API](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages/list).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactregistry.GetDockerImages(ctx, &artifactregistry.GetDockerImagesArgs{
//				Location:     "us-central1",
//				RepositoryId: "example-repo",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDockerImages(ctx *pulumi.Context, args *GetDockerImagesArgs, opts ...pulumi.InvokeOption) (*GetDockerImagesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDockerImagesResult
	err := ctx.Invoke("gcp:artifactregistry/getDockerImages:getDockerImages", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDockerImages.
type GetDockerImagesArgs struct {
	// The location of the Artifact Registry repository.
	Location string `pulumi:"location"`
	// The project ID in which the resource belongs. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The last part of the repository name to fetch from.
	RepositoryId string `pulumi:"repositoryId"`
}

// A collection of values returned by getDockerImages.
type GetDockerImagesResult struct {
	// A list of all retrieved Artifact Registry Docker images. Structure is defined below.
	DockerImages []GetDockerImagesDockerImage `pulumi:"dockerImages"`
	// The provider-assigned unique ID for this managed resource.
	Id           string  `pulumi:"id"`
	Location     string  `pulumi:"location"`
	Project      *string `pulumi:"project"`
	RepositoryId string  `pulumi:"repositoryId"`
}

func GetDockerImagesOutput(ctx *pulumi.Context, args GetDockerImagesOutputArgs, opts ...pulumi.InvokeOption) GetDockerImagesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDockerImagesResultOutput, error) {
			args := v.(GetDockerImagesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:artifactregistry/getDockerImages:getDockerImages", args, GetDockerImagesResultOutput{}, options).(GetDockerImagesResultOutput), nil
		}).(GetDockerImagesResultOutput)
}

// A collection of arguments for invoking getDockerImages.
type GetDockerImagesOutputArgs struct {
	// The location of the Artifact Registry repository.
	Location pulumi.StringInput `pulumi:"location"`
	// The project ID in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The last part of the repository name to fetch from.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
}

func (GetDockerImagesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDockerImagesArgs)(nil)).Elem()
}

// A collection of values returned by getDockerImages.
type GetDockerImagesResultOutput struct{ *pulumi.OutputState }

func (GetDockerImagesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDockerImagesResult)(nil)).Elem()
}

func (o GetDockerImagesResultOutput) ToGetDockerImagesResultOutput() GetDockerImagesResultOutput {
	return o
}

func (o GetDockerImagesResultOutput) ToGetDockerImagesResultOutputWithContext(ctx context.Context) GetDockerImagesResultOutput {
	return o
}

// A list of all retrieved Artifact Registry Docker images. Structure is defined below.
func (o GetDockerImagesResultOutput) DockerImages() GetDockerImagesDockerImageArrayOutput {
	return o.ApplyT(func(v GetDockerImagesResult) []GetDockerImagesDockerImage { return v.DockerImages }).(GetDockerImagesDockerImageArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDockerImagesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDockerImagesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDockerImagesResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetDockerImagesResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetDockerImagesResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDockerImagesResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o GetDockerImagesResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDockerImagesResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDockerImagesResultOutput{})
}
