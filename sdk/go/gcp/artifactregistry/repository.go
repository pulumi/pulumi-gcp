// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactregistry

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A repository for storing artifacts
//
// To get more information about Repository, see:
//
// * [API documentation](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
//
// ## Example Usage
//
// ### Artifact Registry Repository Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("my-repository"),
//				Description:  pulumi.String("example docker repository"),
//				Format:       pulumi.String("DOCKER"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Multi Region
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				RepositoryId: pulumi.String("my-repository"),
//				Description:  pulumi.String("example docker repository"),
//				Location:     pulumi.String("us"),
//				Format:       pulumi.String("DOCKER"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Docker
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("my-repository"),
//				Description:  pulumi.String("example docker repository"),
//				Format:       pulumi.String("DOCKER"),
//				DockerConfig: &artifactregistry.RepositoryDockerConfigArgs{
//					ImmutableTags: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Cmek
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			cryptoKey, err := kms.NewCryptoKeyIAMMember(ctx, "crypto_key", &kms.CryptoKeyIAMMemberArgs{
//				CryptoKeyId: pulumi.String("kms-key"),
//				Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
//				Member:      pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.Number),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("my-repository"),
//				Description:  pulumi.String("example docker repository with cmek"),
//				Format:       pulumi.String("DOCKER"),
//				KmsKeyName:   pulumi.String("kms-key"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				cryptoKey,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Virtual
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			my_repo_upstream_1, err := artifactregistry.NewRepository(ctx, "my-repo-upstream-1", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("my-repository-upstream-1"),
//				Description:  pulumi.String("example docker repository (upstream source) 1"),
//				Format:       pulumi.String("DOCKER"),
//			})
//			if err != nil {
//				return err
//			}
//			my_repo_upstream_2, err := artifactregistry.NewRepository(ctx, "my-repo-upstream-2", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("my-repository-upstream-2"),
//				Description:  pulumi.String("example docker repository (upstream source) 2"),
//				Format:       pulumi.String("DOCKER"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("my-repository"),
//				Description:  pulumi.String("example virtual docker repository"),
//				Format:       pulumi.String("DOCKER"),
//				Mode:         pulumi.String("VIRTUAL_REPOSITORY"),
//				VirtualRepositoryConfig: &artifactregistry.RepositoryVirtualRepositoryConfigArgs{
//					UpstreamPolicies: artifactregistry.RepositoryVirtualRepositoryConfigUpstreamPolicyArray{
//						&artifactregistry.RepositoryVirtualRepositoryConfigUpstreamPolicyArgs{
//							Id:         pulumi.String("my-repository-upstream-1"),
//							Repository: my_repo_upstream_1.ID(),
//							Priority:   pulumi.Int(20),
//						},
//						&artifactregistry.RepositoryVirtualRepositoryConfigUpstreamPolicyArgs{
//							Id:         pulumi.String("my-repository-upstream-2"),
//							Repository: my_repo_upstream_2.ID(),
//							Priority:   pulumi.Int(10),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Remote
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("my-repository"),
//				Description:  pulumi.String("example remote docker repository"),
//				Format:       pulumi.String("DOCKER"),
//				Mode:         pulumi.String("REMOTE_REPOSITORY"),
//				RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
//					Description: pulumi.String("docker hub"),
//					DockerRepository: &artifactregistry.RepositoryRemoteRepositoryConfigDockerRepositoryArgs{
//						PublicRepository: pulumi.String("DOCKER_HUB"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Remote Apt
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("debian-buster"),
//				Description:  pulumi.String("example remote apt repository"),
//				Format:       pulumi.String("APT"),
//				Mode:         pulumi.String("REMOTE_REPOSITORY"),
//				RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
//					Description: pulumi.String("Debian buster remote repository"),
//					AptRepository: &artifactregistry.RepositoryRemoteRepositoryConfigAptRepositoryArgs{
//						PublicRepository: &artifactregistry.RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs{
//							RepositoryBase: pulumi.String("DEBIAN"),
//							RepositoryPath: pulumi.String("debian/dists/buster"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Remote Yum
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("rocky-9"),
//				Description:  pulumi.String("example remote yum repository"),
//				Format:       pulumi.String("YUM"),
//				Mode:         pulumi.String("REMOTE_REPOSITORY"),
//				RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
//					Description: pulumi.String("Rocky 9 remote repository"),
//					YumRepository: &artifactregistry.RepositoryRemoteRepositoryConfigYumRepositoryArgs{
//						PublicRepository: &artifactregistry.RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs{
//							RepositoryBase: pulumi.String("ROCKY"),
//							RepositoryPath: pulumi.String("pub/rocky/9/BaseOS/x86_64/os"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Cleanup
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:            pulumi.String("us-central1"),
//				RepositoryId:        pulumi.String("my-repository"),
//				Description:         pulumi.String("example docker repository with cleanup policies"),
//				Format:              pulumi.String("DOCKER"),
//				CleanupPolicyDryRun: pulumi.Bool(false),
//				CleanupPolicies: artifactregistry.RepositoryCleanupPolicyArray{
//					&artifactregistry.RepositoryCleanupPolicyArgs{
//						Id:     pulumi.String("delete-untagged"),
//						Action: pulumi.String("DELETE"),
//						Condition: &artifactregistry.RepositoryCleanupPolicyConditionArgs{
//							TagState: pulumi.String("UNTAGGED"),
//						},
//					},
//					&artifactregistry.RepositoryCleanupPolicyArgs{
//						Id:     pulumi.String("keep-new-untagged"),
//						Action: pulumi.String("KEEP"),
//						Condition: &artifactregistry.RepositoryCleanupPolicyConditionArgs{
//							TagState:  pulumi.String("UNTAGGED"),
//							NewerThan: pulumi.String("7d"),
//						},
//					},
//					&artifactregistry.RepositoryCleanupPolicyArgs{
//						Id:     pulumi.String("delete-prerelease"),
//						Action: pulumi.String("DELETE"),
//						Condition: &artifactregistry.RepositoryCleanupPolicyConditionArgs{
//							TagState: pulumi.String("TAGGED"),
//							TagPrefixes: pulumi.StringArray{
//								pulumi.String("alpha"),
//								pulumi.String("v0"),
//							},
//							OlderThan: pulumi.String("30d"),
//						},
//					},
//					&artifactregistry.RepositoryCleanupPolicyArgs{
//						Id:     pulumi.String("keep-tagged-release"),
//						Action: pulumi.String("KEEP"),
//						Condition: &artifactregistry.RepositoryCleanupPolicyConditionArgs{
//							TagState: pulumi.String("TAGGED"),
//							TagPrefixes: pulumi.StringArray{
//								pulumi.String("release"),
//							},
//							PackageNamePrefixes: pulumi.StringArray{
//								pulumi.String("webapp"),
//								pulumi.String("mobile"),
//							},
//						},
//					},
//					&artifactregistry.RepositoryCleanupPolicyArgs{
//						Id:     pulumi.String("keep-minimum-versions"),
//						Action: pulumi.String("KEEP"),
//						MostRecentVersions: &artifactregistry.RepositoryCleanupPolicyMostRecentVersionsArgs{
//							PackageNamePrefixes: pulumi.StringArray{
//								pulumi.String("webapp"),
//								pulumi.String("mobile"),
//								pulumi.String("sandbox"),
//							},
//							KeepCount: pulumi.Int(5),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Remote Dockerhub Auth
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			example_remote_secret, err := secretmanager.NewSecret(ctx, "example-remote-secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("example-secret"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: &secretmanager.SecretReplicationAutoArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			example_remote_secretVersion, err := secretmanager.NewSecretVersion(ctx, "example-remote-secret_version", &secretmanager.SecretVersionArgs{
//				Secret:     example_remote_secret.ID(),
//				SecretData: pulumi.String("remote-password"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretIamMember(ctx, "secret-access", &secretmanager.SecretIamMemberArgs{
//				SecretId: example_remote_secret.ID(),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.Number),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("example-dockerhub-remote"),
//				Description:  pulumi.String("example remote dockerhub repository with credentials"),
//				Format:       pulumi.String("DOCKER"),
//				Mode:         pulumi.String("REMOTE_REPOSITORY"),
//				RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
//					Description:               pulumi.String("docker hub with custom credentials"),
//					DisableUpstreamValidation: pulumi.Bool(true),
//					DockerRepository: &artifactregistry.RepositoryRemoteRepositoryConfigDockerRepositoryArgs{
//						PublicRepository: pulumi.String("DOCKER_HUB"),
//					},
//					UpstreamCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs{
//						UsernamePasswordCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs{
//							Username:              pulumi.String("remote-username"),
//							PasswordSecretVersion: example_remote_secretVersion.Name,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Remote Docker Custom With Auth
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			example_remote_secret, err := secretmanager.NewSecret(ctx, "example-remote-secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("example-secret"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: &secretmanager.SecretReplicationAutoArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			example_remote_secretVersion, err := secretmanager.NewSecretVersion(ctx, "example-remote-secret_version", &secretmanager.SecretVersionArgs{
//				Secret:     example_remote_secret.ID(),
//				SecretData: pulumi.String("remote-password"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretIamMember(ctx, "secret-access", &secretmanager.SecretIamMemberArgs{
//				SecretId: example_remote_secret.ID(),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.Number),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("example-docker-custom-remote"),
//				Description:  pulumi.String("example remote custom docker repository with credentials"),
//				Format:       pulumi.String("DOCKER"),
//				Mode:         pulumi.String("REMOTE_REPOSITORY"),
//				RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
//					Description:               pulumi.String("custom docker remote with credentials"),
//					DisableUpstreamValidation: pulumi.Bool(true),
//					DockerRepository: &artifactregistry.RepositoryRemoteRepositoryConfigDockerRepositoryArgs{
//						CustomRepository: &artifactregistry.RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs{
//							Uri: pulumi.String("https://registry-1.docker.io"),
//						},
//					},
//					UpstreamCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs{
//						UsernamePasswordCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs{
//							Username:              pulumi.String("remote-username"),
//							PasswordSecretVersion: example_remote_secretVersion.Name,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Remote Maven Custom With Auth
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			example_remote_secret, err := secretmanager.NewSecret(ctx, "example-remote-secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("example-secret"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: &secretmanager.SecretReplicationAutoArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			example_remote_secretVersion, err := secretmanager.NewSecretVersion(ctx, "example-remote-secret_version", &secretmanager.SecretVersionArgs{
//				Secret:     example_remote_secret.ID(),
//				SecretData: pulumi.String("remote-password"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretIamMember(ctx, "secret-access", &secretmanager.SecretIamMemberArgs{
//				SecretId: example_remote_secret.ID(),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.Number),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("example-maven-custom-remote"),
//				Description:  pulumi.String("example remote custom maven repository with credentials"),
//				Format:       pulumi.String("MAVEN"),
//				Mode:         pulumi.String("REMOTE_REPOSITORY"),
//				RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
//					Description:               pulumi.String("custom maven remote with credentials"),
//					DisableUpstreamValidation: pulumi.Bool(true),
//					MavenRepository: &artifactregistry.RepositoryRemoteRepositoryConfigMavenRepositoryArgs{
//						CustomRepository: &artifactregistry.RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs{
//							Uri: pulumi.String("https://my.maven.registry"),
//						},
//					},
//					UpstreamCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs{
//						UsernamePasswordCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs{
//							Username:              pulumi.String("remote-username"),
//							PasswordSecretVersion: example_remote_secretVersion.Name,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Remote Npm Custom With Auth
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			example_remote_secret, err := secretmanager.NewSecret(ctx, "example-remote-secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("example-secret"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: &secretmanager.SecretReplicationAutoArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			example_remote_secretVersion, err := secretmanager.NewSecretVersion(ctx, "example-remote-secret_version", &secretmanager.SecretVersionArgs{
//				Secret:     example_remote_secret.ID(),
//				SecretData: pulumi.String("remote-password"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretIamMember(ctx, "secret-access", &secretmanager.SecretIamMemberArgs{
//				SecretId: example_remote_secret.ID(),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.Number),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("example-npm-custom-remote"),
//				Description:  pulumi.String("example remote custom npm repository with credentials"),
//				Format:       pulumi.String("NPM"),
//				Mode:         pulumi.String("REMOTE_REPOSITORY"),
//				RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
//					Description:               pulumi.String("custom npm with credentials"),
//					DisableUpstreamValidation: pulumi.Bool(true),
//					NpmRepository: &artifactregistry.RepositoryRemoteRepositoryConfigNpmRepositoryArgs{
//						CustomRepository: &artifactregistry.RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs{
//							Uri: pulumi.String("https://my.npm.registry"),
//						},
//					},
//					UpstreamCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs{
//						UsernamePasswordCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs{
//							Username:              pulumi.String("remote-username"),
//							PasswordSecretVersion: example_remote_secretVersion.Name,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Remote Python Custom With Auth
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			example_remote_secret, err := secretmanager.NewSecret(ctx, "example-remote-secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("example-secret"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: &secretmanager.SecretReplicationAutoArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			example_remote_secretVersion, err := secretmanager.NewSecretVersion(ctx, "example-remote-secret_version", &secretmanager.SecretVersionArgs{
//				Secret:     example_remote_secret.ID(),
//				SecretData: pulumi.String("remote-password"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretIamMember(ctx, "secret-access", &secretmanager.SecretIamMemberArgs{
//				SecretId: example_remote_secret.ID(),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.Number),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("example-python-custom-remote"),
//				Description:  pulumi.String("example remote custom python repository with credentials"),
//				Format:       pulumi.String("PYTHON"),
//				Mode:         pulumi.String("REMOTE_REPOSITORY"),
//				RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
//					Description:               pulumi.String("custom npm with credentials"),
//					DisableUpstreamValidation: pulumi.Bool(true),
//					PythonRepository: &artifactregistry.RepositoryRemoteRepositoryConfigPythonRepositoryArgs{
//						CustomRepository: &artifactregistry.RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs{
//							Uri: pulumi.String("https://my.python.registry"),
//						},
//					},
//					UpstreamCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs{
//						UsernamePasswordCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs{
//							Username:              pulumi.String("remote-username"),
//							PasswordSecretVersion: example_remote_secretVersion.Name,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Remote Common Repository With Docker
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			upstreamRepo, err := artifactregistry.NewRepository(ctx, "upstream_repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("example-upstream-repo"),
//				Description:  pulumi.String("example upstream repository"),
//				Format:       pulumi.String("DOCKER"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("example-common-remote"),
//				Description:  pulumi.String("example remote common repository with docker upstream"),
//				Format:       pulumi.String("DOCKER"),
//				Mode:         pulumi.String("REMOTE_REPOSITORY"),
//				RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
//					Description: pulumi.String("pull-through cache of another Artifact Registry repository"),
//					CommonRepository: &artifactregistry.RepositoryRemoteRepositoryConfigCommonRepositoryArgs{
//						Uri: upstreamRepo.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Remote Common Repository With Artifact Registry Uri
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			upstreamRepo, err := artifactregistry.NewRepository(ctx, "upstream_repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("example-upstream-repo"),
//				Description:  pulumi.String("example upstream repository"),
//				Format:       pulumi.String("DOCKER"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("example-common-remote"),
//				Description:  pulumi.String("example remote common repository with docker upstream"),
//				Format:       pulumi.String("DOCKER"),
//				Mode:         pulumi.String("REMOTE_REPOSITORY"),
//				RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
//					Description: pulumi.String("pull-through cache of another Artifact Registry repository by URL"),
//					CommonRepository: &artifactregistry.RepositoryRemoteRepositoryConfigCommonRepositoryArgs{
//						Uri: pulumi.Sprintf("https://us-central1-docker.pkg.dev/%v/example-upstream-repo", project.ProjectId),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				upstreamRepo,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Remote Common Repository With Custom Upstream
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			example_remote_secret, err := secretmanager.NewSecret(ctx, "example-remote-secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("example-secret"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: &secretmanager.SecretReplicationAutoArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			example_remote_secretVersion, err := secretmanager.NewSecretVersion(ctx, "example-remote-secret_version", &secretmanager.SecretVersionArgs{
//				Secret:     example_remote_secret.ID(),
//				SecretData: pulumi.String("remote-password"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretIamMember(ctx, "secret-access", &secretmanager.SecretIamMemberArgs{
//				SecretId: example_remote_secret.ID(),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.Number),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("example-docker-custom-remote"),
//				Description:  pulumi.String("example remote custom docker repository with credentials"),
//				Format:       pulumi.String("DOCKER"),
//				Mode:         pulumi.String("REMOTE_REPOSITORY"),
//				RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
//					Description:               pulumi.String("custom common docker remote with credentials"),
//					DisableUpstreamValidation: pulumi.Bool(true),
//					CommonRepository: &artifactregistry.RepositoryRemoteRepositoryConfigCommonRepositoryArgs{
//						Uri: pulumi.String("https://registry-1.docker.io"),
//					},
//					UpstreamCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs{
//						UsernamePasswordCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs{
//							Username:              pulumi.String("remote-username"),
//							PasswordSecretVersion: example_remote_secretVersion.Name,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Artifact Registry Repository Vulnerability Scanning
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("my-repository"),
//				Description:  pulumi.String("example docker repository with vulnerability scanning config"),
//				Format:       pulumi.String("DOCKER"),
//				VulnerabilityScanningConfig: &artifactregistry.RepositoryVulnerabilityScanningConfigArgs{
//					EnablementConfig: pulumi.String("INHERITED"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Repository can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}`
//
// * `{{project}}/{{location}}/{{repository_id}}`
//
// * `{{location}}/{{repository_id}}`
//
// When using the `pulumi import` command, Repository can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:artifactregistry/repository:Repository default projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}
// ```
//
// ```sh
// $ pulumi import gcp:artifactregistry/repository:Repository default {{project}}/{{location}}/{{repository_id}}
// ```
//
// ```sh
// $ pulumi import gcp:artifactregistry/repository:Repository default {{location}}/{{repository_id}}
// ```
type Repository struct {
	pulumi.CustomResourceState

	// Cleanup policies for this repository. Cleanup policies indicate when
	// certain package versions can be automatically deleted.
	// Map keys are policy IDs supplied by users during policy creation. They must
	// unique within a repository and be under 128 characters in length.
	// Structure is documented below.
	CleanupPolicies RepositoryCleanupPolicyArrayOutput `pulumi:"cleanupPolicies"`
	// If true, the cleanup pipeline is prevented from deleting versions in this
	// repository.
	CleanupPolicyDryRun pulumi.BoolPtrOutput `pulumi:"cleanupPolicyDryRun"`
	// The time when the repository was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The user-provided description of the repository.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Docker repository config contains repository level configuration for the repositories of docker type.
	// Structure is documented below.
	DockerConfig RepositoryDockerConfigPtrOutput `pulumi:"dockerConfig"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The format of packages that are stored in the repository. Supported formats
	// can be found [here](https://cloud.google.com/artifact-registry/docs/supported-formats).
	// You can only create alpha formats if you are a member of the
	// [alpha user group](https://cloud.google.com/artifact-registry/docs/supported-formats#alpha-access).
	Format pulumi.StringOutput `pulumi:"format"`
	// The Cloud KMS resource name of the customer managed encryption key that’s
	// used to encrypt the contents of the Repository. Has the form:
	// `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`.
	// This value may not be changed after the Repository has been created.
	KmsKeyName pulumi.StringPtrOutput `pulumi:"kmsKeyName"`
	// Labels with user-defined metadata.
	// This field may contain up to 64 entries. Label keys and values may be no
	// longer than 63 characters. Label keys must begin with a lowercase letter
	// and may only contain lowercase letters, numeric characters, underscores,
	// and dashes.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the repository's location. In addition to specific regions,
	// special values for multi-region locations are `asia`, `europe`, and `us`.
	// See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
	// or use the
	// artifactregistry.getLocations
	// data source for possible values.
	Location pulumi.StringOutput `pulumi:"location"`
	// MavenRepositoryConfig is maven related repository details.
	// Provides additional configuration details for repositories of the maven
	// format type.
	// Structure is documented below.
	MavenConfig RepositoryMavenConfigPtrOutput `pulumi:"mavenConfig"`
	// The mode configures the repository to serve artifacts from different sources.
	// Default value is `STANDARD_REPOSITORY`.
	// Possible values are: `STANDARD_REPOSITORY`, `VIRTUAL_REPOSITORY`, `REMOTE_REPOSITORY`.
	Mode pulumi.StringPtrOutput `pulumi:"mode"`
	// The name of the repository, for example:
	// "repo1"
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Configuration specific for a Remote Repository.
	// Structure is documented below.
	RemoteRepositoryConfig RepositoryRemoteRepositoryConfigPtrOutput `pulumi:"remoteRepositoryConfig"`
	// The last part of the repository name, for example:
	// "repo1"
	//
	// ***
	RepositoryId pulumi.StringOutput `pulumi:"repositoryId"`
	// The time when the repository was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Configuration specific for a Virtual Repository.
	// Structure is documented below.
	VirtualRepositoryConfig RepositoryVirtualRepositoryConfigPtrOutput `pulumi:"virtualRepositoryConfig"`
	// Configuration for vulnerability scanning of artifacts stored in this repository.
	// Structure is documented below.
	VulnerabilityScanningConfig RepositoryVulnerabilityScanningConfigOutput `pulumi:"vulnerabilityScanningConfig"`
}

// NewRepository registers a new resource with the given unique name, arguments, and options.
func NewRepository(ctx *pulumi.Context,
	name string, args *RepositoryArgs, opts ...pulumi.ResourceOption) (*Repository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Format == nil {
		return nil, errors.New("invalid value for required argument 'Format'")
	}
	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Repository
	err := ctx.RegisterResource("gcp:artifactregistry/repository:Repository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepository gets an existing Repository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryState, opts ...pulumi.ResourceOption) (*Repository, error) {
	var resource Repository
	err := ctx.ReadResource("gcp:artifactregistry/repository:Repository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Repository resources.
type repositoryState struct {
	// Cleanup policies for this repository. Cleanup policies indicate when
	// certain package versions can be automatically deleted.
	// Map keys are policy IDs supplied by users during policy creation. They must
	// unique within a repository and be under 128 characters in length.
	// Structure is documented below.
	CleanupPolicies []RepositoryCleanupPolicy `pulumi:"cleanupPolicies"`
	// If true, the cleanup pipeline is prevented from deleting versions in this
	// repository.
	CleanupPolicyDryRun *bool `pulumi:"cleanupPolicyDryRun"`
	// The time when the repository was created.
	CreateTime *string `pulumi:"createTime"`
	// The user-provided description of the repository.
	Description *string `pulumi:"description"`
	// Docker repository config contains repository level configuration for the repositories of docker type.
	// Structure is documented below.
	DockerConfig *RepositoryDockerConfig `pulumi:"dockerConfig"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The format of packages that are stored in the repository. Supported formats
	// can be found [here](https://cloud.google.com/artifact-registry/docs/supported-formats).
	// You can only create alpha formats if you are a member of the
	// [alpha user group](https://cloud.google.com/artifact-registry/docs/supported-formats#alpha-access).
	Format *string `pulumi:"format"`
	// The Cloud KMS resource name of the customer managed encryption key that’s
	// used to encrypt the contents of the Repository. Has the form:
	// `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`.
	// This value may not be changed after the Repository has been created.
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// Labels with user-defined metadata.
	// This field may contain up to 64 entries. Label keys and values may be no
	// longer than 63 characters. Label keys must begin with a lowercase letter
	// and may only contain lowercase letters, numeric characters, underscores,
	// and dashes.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The name of the repository's location. In addition to specific regions,
	// special values for multi-region locations are `asia`, `europe`, and `us`.
	// See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
	// or use the
	// artifactregistry.getLocations
	// data source for possible values.
	Location *string `pulumi:"location"`
	// MavenRepositoryConfig is maven related repository details.
	// Provides additional configuration details for repositories of the maven
	// format type.
	// Structure is documented below.
	MavenConfig *RepositoryMavenConfig `pulumi:"mavenConfig"`
	// The mode configures the repository to serve artifacts from different sources.
	// Default value is `STANDARD_REPOSITORY`.
	// Possible values are: `STANDARD_REPOSITORY`, `VIRTUAL_REPOSITORY`, `REMOTE_REPOSITORY`.
	Mode *string `pulumi:"mode"`
	// The name of the repository, for example:
	// "repo1"
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Configuration specific for a Remote Repository.
	// Structure is documented below.
	RemoteRepositoryConfig *RepositoryRemoteRepositoryConfig `pulumi:"remoteRepositoryConfig"`
	// The last part of the repository name, for example:
	// "repo1"
	//
	// ***
	RepositoryId *string `pulumi:"repositoryId"`
	// The time when the repository was last updated.
	UpdateTime *string `pulumi:"updateTime"`
	// Configuration specific for a Virtual Repository.
	// Structure is documented below.
	VirtualRepositoryConfig *RepositoryVirtualRepositoryConfig `pulumi:"virtualRepositoryConfig"`
	// Configuration for vulnerability scanning of artifacts stored in this repository.
	// Structure is documented below.
	VulnerabilityScanningConfig *RepositoryVulnerabilityScanningConfig `pulumi:"vulnerabilityScanningConfig"`
}

type RepositoryState struct {
	// Cleanup policies for this repository. Cleanup policies indicate when
	// certain package versions can be automatically deleted.
	// Map keys are policy IDs supplied by users during policy creation. They must
	// unique within a repository and be under 128 characters in length.
	// Structure is documented below.
	CleanupPolicies RepositoryCleanupPolicyArrayInput
	// If true, the cleanup pipeline is prevented from deleting versions in this
	// repository.
	CleanupPolicyDryRun pulumi.BoolPtrInput
	// The time when the repository was created.
	CreateTime pulumi.StringPtrInput
	// The user-provided description of the repository.
	Description pulumi.StringPtrInput
	// Docker repository config contains repository level configuration for the repositories of docker type.
	// Structure is documented below.
	DockerConfig RepositoryDockerConfigPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The format of packages that are stored in the repository. Supported formats
	// can be found [here](https://cloud.google.com/artifact-registry/docs/supported-formats).
	// You can only create alpha formats if you are a member of the
	// [alpha user group](https://cloud.google.com/artifact-registry/docs/supported-formats#alpha-access).
	Format pulumi.StringPtrInput
	// The Cloud KMS resource name of the customer managed encryption key that’s
	// used to encrypt the contents of the Repository. Has the form:
	// `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`.
	// This value may not be changed after the Repository has been created.
	KmsKeyName pulumi.StringPtrInput
	// Labels with user-defined metadata.
	// This field may contain up to 64 entries. Label keys and values may be no
	// longer than 63 characters. Label keys must begin with a lowercase letter
	// and may only contain lowercase letters, numeric characters, underscores,
	// and dashes.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The name of the repository's location. In addition to specific regions,
	// special values for multi-region locations are `asia`, `europe`, and `us`.
	// See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
	// or use the
	// artifactregistry.getLocations
	// data source for possible values.
	Location pulumi.StringPtrInput
	// MavenRepositoryConfig is maven related repository details.
	// Provides additional configuration details for repositories of the maven
	// format type.
	// Structure is documented below.
	MavenConfig RepositoryMavenConfigPtrInput
	// The mode configures the repository to serve artifacts from different sources.
	// Default value is `STANDARD_REPOSITORY`.
	// Possible values are: `STANDARD_REPOSITORY`, `VIRTUAL_REPOSITORY`, `REMOTE_REPOSITORY`.
	Mode pulumi.StringPtrInput
	// The name of the repository, for example:
	// "repo1"
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Configuration specific for a Remote Repository.
	// Structure is documented below.
	RemoteRepositoryConfig RepositoryRemoteRepositoryConfigPtrInput
	// The last part of the repository name, for example:
	// "repo1"
	//
	// ***
	RepositoryId pulumi.StringPtrInput
	// The time when the repository was last updated.
	UpdateTime pulumi.StringPtrInput
	// Configuration specific for a Virtual Repository.
	// Structure is documented below.
	VirtualRepositoryConfig RepositoryVirtualRepositoryConfigPtrInput
	// Configuration for vulnerability scanning of artifacts stored in this repository.
	// Structure is documented below.
	VulnerabilityScanningConfig RepositoryVulnerabilityScanningConfigPtrInput
}

func (RepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryState)(nil)).Elem()
}

type repositoryArgs struct {
	// Cleanup policies for this repository. Cleanup policies indicate when
	// certain package versions can be automatically deleted.
	// Map keys are policy IDs supplied by users during policy creation. They must
	// unique within a repository and be under 128 characters in length.
	// Structure is documented below.
	CleanupPolicies []RepositoryCleanupPolicy `pulumi:"cleanupPolicies"`
	// If true, the cleanup pipeline is prevented from deleting versions in this
	// repository.
	CleanupPolicyDryRun *bool `pulumi:"cleanupPolicyDryRun"`
	// The user-provided description of the repository.
	Description *string `pulumi:"description"`
	// Docker repository config contains repository level configuration for the repositories of docker type.
	// Structure is documented below.
	DockerConfig *RepositoryDockerConfig `pulumi:"dockerConfig"`
	// The format of packages that are stored in the repository. Supported formats
	// can be found [here](https://cloud.google.com/artifact-registry/docs/supported-formats).
	// You can only create alpha formats if you are a member of the
	// [alpha user group](https://cloud.google.com/artifact-registry/docs/supported-formats#alpha-access).
	Format string `pulumi:"format"`
	// The Cloud KMS resource name of the customer managed encryption key that’s
	// used to encrypt the contents of the Repository. Has the form:
	// `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`.
	// This value may not be changed after the Repository has been created.
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// Labels with user-defined metadata.
	// This field may contain up to 64 entries. Label keys and values may be no
	// longer than 63 characters. Label keys must begin with a lowercase letter
	// and may only contain lowercase letters, numeric characters, underscores,
	// and dashes.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The name of the repository's location. In addition to specific regions,
	// special values for multi-region locations are `asia`, `europe`, and `us`.
	// See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
	// or use the
	// artifactregistry.getLocations
	// data source for possible values.
	Location *string `pulumi:"location"`
	// MavenRepositoryConfig is maven related repository details.
	// Provides additional configuration details for repositories of the maven
	// format type.
	// Structure is documented below.
	MavenConfig *RepositoryMavenConfig `pulumi:"mavenConfig"`
	// The mode configures the repository to serve artifacts from different sources.
	// Default value is `STANDARD_REPOSITORY`.
	// Possible values are: `STANDARD_REPOSITORY`, `VIRTUAL_REPOSITORY`, `REMOTE_REPOSITORY`.
	Mode *string `pulumi:"mode"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Configuration specific for a Remote Repository.
	// Structure is documented below.
	RemoteRepositoryConfig *RepositoryRemoteRepositoryConfig `pulumi:"remoteRepositoryConfig"`
	// The last part of the repository name, for example:
	// "repo1"
	//
	// ***
	RepositoryId string `pulumi:"repositoryId"`
	// Configuration specific for a Virtual Repository.
	// Structure is documented below.
	VirtualRepositoryConfig *RepositoryVirtualRepositoryConfig `pulumi:"virtualRepositoryConfig"`
	// Configuration for vulnerability scanning of artifacts stored in this repository.
	// Structure is documented below.
	VulnerabilityScanningConfig *RepositoryVulnerabilityScanningConfig `pulumi:"vulnerabilityScanningConfig"`
}

// The set of arguments for constructing a Repository resource.
type RepositoryArgs struct {
	// Cleanup policies for this repository. Cleanup policies indicate when
	// certain package versions can be automatically deleted.
	// Map keys are policy IDs supplied by users during policy creation. They must
	// unique within a repository and be under 128 characters in length.
	// Structure is documented below.
	CleanupPolicies RepositoryCleanupPolicyArrayInput
	// If true, the cleanup pipeline is prevented from deleting versions in this
	// repository.
	CleanupPolicyDryRun pulumi.BoolPtrInput
	// The user-provided description of the repository.
	Description pulumi.StringPtrInput
	// Docker repository config contains repository level configuration for the repositories of docker type.
	// Structure is documented below.
	DockerConfig RepositoryDockerConfigPtrInput
	// The format of packages that are stored in the repository. Supported formats
	// can be found [here](https://cloud.google.com/artifact-registry/docs/supported-formats).
	// You can only create alpha formats if you are a member of the
	// [alpha user group](https://cloud.google.com/artifact-registry/docs/supported-formats#alpha-access).
	Format pulumi.StringInput
	// The Cloud KMS resource name of the customer managed encryption key that’s
	// used to encrypt the contents of the Repository. Has the form:
	// `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`.
	// This value may not be changed after the Repository has been created.
	KmsKeyName pulumi.StringPtrInput
	// Labels with user-defined metadata.
	// This field may contain up to 64 entries. Label keys and values may be no
	// longer than 63 characters. Label keys must begin with a lowercase letter
	// and may only contain lowercase letters, numeric characters, underscores,
	// and dashes.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The name of the repository's location. In addition to specific regions,
	// special values for multi-region locations are `asia`, `europe`, and `us`.
	// See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
	// or use the
	// artifactregistry.getLocations
	// data source for possible values.
	Location pulumi.StringPtrInput
	// MavenRepositoryConfig is maven related repository details.
	// Provides additional configuration details for repositories of the maven
	// format type.
	// Structure is documented below.
	MavenConfig RepositoryMavenConfigPtrInput
	// The mode configures the repository to serve artifacts from different sources.
	// Default value is `STANDARD_REPOSITORY`.
	// Possible values are: `STANDARD_REPOSITORY`, `VIRTUAL_REPOSITORY`, `REMOTE_REPOSITORY`.
	Mode pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Configuration specific for a Remote Repository.
	// Structure is documented below.
	RemoteRepositoryConfig RepositoryRemoteRepositoryConfigPtrInput
	// The last part of the repository name, for example:
	// "repo1"
	//
	// ***
	RepositoryId pulumi.StringInput
	// Configuration specific for a Virtual Repository.
	// Structure is documented below.
	VirtualRepositoryConfig RepositoryVirtualRepositoryConfigPtrInput
	// Configuration for vulnerability scanning of artifacts stored in this repository.
	// Structure is documented below.
	VulnerabilityScanningConfig RepositoryVulnerabilityScanningConfigPtrInput
}

func (RepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryArgs)(nil)).Elem()
}

type RepositoryInput interface {
	pulumi.Input

	ToRepositoryOutput() RepositoryOutput
	ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput
}

func (*Repository) ElementType() reflect.Type {
	return reflect.TypeOf((**Repository)(nil)).Elem()
}

func (i *Repository) ToRepositoryOutput() RepositoryOutput {
	return i.ToRepositoryOutputWithContext(context.Background())
}

func (i *Repository) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOutput)
}

// RepositoryArrayInput is an input type that accepts RepositoryArray and RepositoryArrayOutput values.
// You can construct a concrete instance of `RepositoryArrayInput` via:
//
//	RepositoryArray{ RepositoryArgs{...} }
type RepositoryArrayInput interface {
	pulumi.Input

	ToRepositoryArrayOutput() RepositoryArrayOutput
	ToRepositoryArrayOutputWithContext(context.Context) RepositoryArrayOutput
}

type RepositoryArray []RepositoryInput

func (RepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repository)(nil)).Elem()
}

func (i RepositoryArray) ToRepositoryArrayOutput() RepositoryArrayOutput {
	return i.ToRepositoryArrayOutputWithContext(context.Background())
}

func (i RepositoryArray) ToRepositoryArrayOutputWithContext(ctx context.Context) RepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryArrayOutput)
}

// RepositoryMapInput is an input type that accepts RepositoryMap and RepositoryMapOutput values.
// You can construct a concrete instance of `RepositoryMapInput` via:
//
//	RepositoryMap{ "key": RepositoryArgs{...} }
type RepositoryMapInput interface {
	pulumi.Input

	ToRepositoryMapOutput() RepositoryMapOutput
	ToRepositoryMapOutputWithContext(context.Context) RepositoryMapOutput
}

type RepositoryMap map[string]RepositoryInput

func (RepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repository)(nil)).Elem()
}

func (i RepositoryMap) ToRepositoryMapOutput() RepositoryMapOutput {
	return i.ToRepositoryMapOutputWithContext(context.Background())
}

func (i RepositoryMap) ToRepositoryMapOutputWithContext(ctx context.Context) RepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMapOutput)
}

type RepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Repository)(nil)).Elem()
}

func (o RepositoryOutput) ToRepositoryOutput() RepositoryOutput {
	return o
}

func (o RepositoryOutput) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return o
}

// Cleanup policies for this repository. Cleanup policies indicate when
// certain package versions can be automatically deleted.
// Map keys are policy IDs supplied by users during policy creation. They must
// unique within a repository and be under 128 characters in length.
// Structure is documented below.
func (o RepositoryOutput) CleanupPolicies() RepositoryCleanupPolicyArrayOutput {
	return o.ApplyT(func(v *Repository) RepositoryCleanupPolicyArrayOutput { return v.CleanupPolicies }).(RepositoryCleanupPolicyArrayOutput)
}

// If true, the cleanup pipeline is prevented from deleting versions in this
// repository.
func (o RepositoryOutput) CleanupPolicyDryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.CleanupPolicyDryRun }).(pulumi.BoolPtrOutput)
}

// The time when the repository was created.
func (o RepositoryOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The user-provided description of the repository.
func (o RepositoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Docker repository config contains repository level configuration for the repositories of docker type.
// Structure is documented below.
func (o RepositoryOutput) DockerConfig() RepositoryDockerConfigPtrOutput {
	return o.ApplyT(func(v *Repository) RepositoryDockerConfigPtrOutput { return v.DockerConfig }).(RepositoryDockerConfigPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o RepositoryOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The format of packages that are stored in the repository. Supported formats
// can be found [here](https://cloud.google.com/artifact-registry/docs/supported-formats).
// You can only create alpha formats if you are a member of the
// [alpha user group](https://cloud.google.com/artifact-registry/docs/supported-formats#alpha-access).
func (o RepositoryOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// The Cloud KMS resource name of the customer managed encryption key that’s
// used to encrypt the contents of the Repository. Has the form:
// `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`.
// This value may not be changed after the Repository has been created.
func (o RepositoryOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

// Labels with user-defined metadata.
// This field may contain up to 64 entries. Label keys and values may be no
// longer than 63 characters. Label keys must begin with a lowercase letter
// and may only contain lowercase letters, numeric characters, underscores,
// and dashes.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o RepositoryOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the repository's location. In addition to specific regions,
// special values for multi-region locations are `asia`, `europe`, and `us`.
// See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
// or use the
// artifactregistry.getLocations
// data source for possible values.
func (o RepositoryOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// MavenRepositoryConfig is maven related repository details.
// Provides additional configuration details for repositories of the maven
// format type.
// Structure is documented below.
func (o RepositoryOutput) MavenConfig() RepositoryMavenConfigPtrOutput {
	return o.ApplyT(func(v *Repository) RepositoryMavenConfigPtrOutput { return v.MavenConfig }).(RepositoryMavenConfigPtrOutput)
}

// The mode configures the repository to serve artifacts from different sources.
// Default value is `STANDARD_REPOSITORY`.
// Possible values are: `STANDARD_REPOSITORY`, `VIRTUAL_REPOSITORY`, `REMOTE_REPOSITORY`.
func (o RepositoryOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

// The name of the repository, for example:
// "repo1"
func (o RepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RepositoryOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o RepositoryOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Configuration specific for a Remote Repository.
// Structure is documented below.
func (o RepositoryOutput) RemoteRepositoryConfig() RepositoryRemoteRepositoryConfigPtrOutput {
	return o.ApplyT(func(v *Repository) RepositoryRemoteRepositoryConfigPtrOutput { return v.RemoteRepositoryConfig }).(RepositoryRemoteRepositoryConfigPtrOutput)
}

// The last part of the repository name, for example:
// "repo1"
//
// ***
func (o RepositoryOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.RepositoryId }).(pulumi.StringOutput)
}

// The time when the repository was last updated.
func (o RepositoryOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Configuration specific for a Virtual Repository.
// Structure is documented below.
func (o RepositoryOutput) VirtualRepositoryConfig() RepositoryVirtualRepositoryConfigPtrOutput {
	return o.ApplyT(func(v *Repository) RepositoryVirtualRepositoryConfigPtrOutput { return v.VirtualRepositoryConfig }).(RepositoryVirtualRepositoryConfigPtrOutput)
}

// Configuration for vulnerability scanning of artifacts stored in this repository.
// Structure is documented below.
func (o RepositoryOutput) VulnerabilityScanningConfig() RepositoryVulnerabilityScanningConfigOutput {
	return o.ApplyT(func(v *Repository) RepositoryVulnerabilityScanningConfigOutput { return v.VulnerabilityScanningConfig }).(RepositoryVulnerabilityScanningConfigOutput)
}

type RepositoryArrayOutput struct{ *pulumi.OutputState }

func (RepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repository)(nil)).Elem()
}

func (o RepositoryArrayOutput) ToRepositoryArrayOutput() RepositoryArrayOutput {
	return o
}

func (o RepositoryArrayOutput) ToRepositoryArrayOutputWithContext(ctx context.Context) RepositoryArrayOutput {
	return o
}

func (o RepositoryArrayOutput) Index(i pulumi.IntInput) RepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Repository {
		return vs[0].([]*Repository)[vs[1].(int)]
	}).(RepositoryOutput)
}

type RepositoryMapOutput struct{ *pulumi.OutputState }

func (RepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repository)(nil)).Elem()
}

func (o RepositoryMapOutput) ToRepositoryMapOutput() RepositoryMapOutput {
	return o
}

func (o RepositoryMapOutput) ToRepositoryMapOutputWithContext(ctx context.Context) RepositoryMapOutput {
	return o
}

func (o RepositoryMapOutput) MapIndex(k pulumi.StringInput) RepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Repository {
		return vs[0].(map[string]*Repository)[vs[1].(string)]
	}).(RepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryInput)(nil)).Elem(), &Repository{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryArrayInput)(nil)).Elem(), RepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMapInput)(nil)).Elem(), RepositoryMap{})
	pulumi.RegisterOutputType(RepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryArrayOutput{})
	pulumi.RegisterOutputType(RepositoryMapOutput{})
}
