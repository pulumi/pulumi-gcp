// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactregistry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Google Artifact Registry Repository. For more information see
// the [official documentation](https://cloud.google.com/artifact-registry/docs/)
// and [API](https://cloud.google.com/artifact-registry/docs/apis).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactregistry.LookupRepository(ctx, &artifactregistry.LookupRepositoryArgs{
//				Location:     "us-central1",
//				RepositoryId: "my-repository",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRepository(ctx *pulumi.Context, args *LookupRepositoryArgs, opts ...pulumi.InvokeOption) (*LookupRepositoryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRepositoryResult
	err := ctx.Invoke("gcp:artifactregistry/getRepository:getRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepository.
type LookupRepositoryArgs struct {
	// The location of the artifact registry repository. eg us-central1
	//
	// ***
	Location string `pulumi:"location"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The last part of the repository name.
	RepositoryId string `pulumi:"repositoryId"`
}

// A collection of values returned by getRepository.
type LookupRepositoryResult struct {
	CleanupPolicies     []GetRepositoryCleanupPolicy `pulumi:"cleanupPolicies"`
	CleanupPolicyDryRun bool                         `pulumi:"cleanupPolicyDryRun"`
	CreateTime          string                       `pulumi:"createTime"`
	Description         string                       `pulumi:"description"`
	DockerConfigs       []GetRepositoryDockerConfig  `pulumi:"dockerConfigs"`
	EffectiveLabels     map[string]string            `pulumi:"effectiveLabels"`
	Format              string                       `pulumi:"format"`
	// The provider-assigned unique ID for this managed resource.
	Id                       string                                 `pulumi:"id"`
	KmsKeyName               string                                 `pulumi:"kmsKeyName"`
	Labels                   map[string]string                      `pulumi:"labels"`
	Location                 string                                 `pulumi:"location"`
	MavenConfigs             []GetRepositoryMavenConfig             `pulumi:"mavenConfigs"`
	Mode                     string                                 `pulumi:"mode"`
	Name                     string                                 `pulumi:"name"`
	Project                  *string                                `pulumi:"project"`
	PulumiLabels             map[string]string                      `pulumi:"pulumiLabels"`
	RemoteRepositoryConfigs  []GetRepositoryRemoteRepositoryConfig  `pulumi:"remoteRepositoryConfigs"`
	RepositoryId             string                                 `pulumi:"repositoryId"`
	UpdateTime               string                                 `pulumi:"updateTime"`
	VirtualRepositoryConfigs []GetRepositoryVirtualRepositoryConfig `pulumi:"virtualRepositoryConfigs"`
}

func LookupRepositoryOutput(ctx *pulumi.Context, args LookupRepositoryOutputArgs, opts ...pulumi.InvokeOption) LookupRepositoryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRepositoryResult, error) {
			args := v.(LookupRepositoryArgs)
			r, err := LookupRepository(ctx, &args, opts...)
			var s LookupRepositoryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRepositoryResultOutput)
}

// A collection of arguments for invoking getRepository.
type LookupRepositoryOutputArgs struct {
	// The location of the artifact registry repository. eg us-central1
	//
	// ***
	Location pulumi.StringInput `pulumi:"location"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The last part of the repository name.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
}

func (LookupRepositoryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryArgs)(nil)).Elem()
}

// A collection of values returned by getRepository.
type LookupRepositoryResultOutput struct{ *pulumi.OutputState }

func (LookupRepositoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryResult)(nil)).Elem()
}

func (o LookupRepositoryResultOutput) ToLookupRepositoryResultOutput() LookupRepositoryResultOutput {
	return o
}

func (o LookupRepositoryResultOutput) ToLookupRepositoryResultOutputWithContext(ctx context.Context) LookupRepositoryResultOutput {
	return o
}

func (o LookupRepositoryResultOutput) CleanupPolicies() GetRepositoryCleanupPolicyArrayOutput {
	return o.ApplyT(func(v LookupRepositoryResult) []GetRepositoryCleanupPolicy { return v.CleanupPolicies }).(GetRepositoryCleanupPolicyArrayOutput)
}

func (o LookupRepositoryResultOutput) CleanupPolicyDryRun() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepositoryResult) bool { return v.CleanupPolicyDryRun }).(pulumi.BoolOutput)
}

func (o LookupRepositoryResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) DockerConfigs() GetRepositoryDockerConfigArrayOutput {
	return o.ApplyT(func(v LookupRepositoryResult) []GetRepositoryDockerConfig { return v.DockerConfigs }).(GetRepositoryDockerConfigArrayOutput)
}

func (o LookupRepositoryResultOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRepositoryResult) map[string]string { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

func (o LookupRepositoryResultOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.Format }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRepositoryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRepositoryResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupRepositoryResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) MavenConfigs() GetRepositoryMavenConfigArrayOutput {
	return o.ApplyT(func(v LookupRepositoryResult) []GetRepositoryMavenConfig { return v.MavenConfigs }).(GetRepositoryMavenConfigArrayOutput)
}

func (o LookupRepositoryResultOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.Mode }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRepositoryResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o LookupRepositoryResultOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRepositoryResult) map[string]string { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

func (o LookupRepositoryResultOutput) RemoteRepositoryConfigs() GetRepositoryRemoteRepositoryConfigArrayOutput {
	return o.ApplyT(func(v LookupRepositoryResult) []GetRepositoryRemoteRepositoryConfig { return v.RemoteRepositoryConfigs }).(GetRepositoryRemoteRepositoryConfigArrayOutput)
}

func (o LookupRepositoryResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) VirtualRepositoryConfigs() GetRepositoryVirtualRepositoryConfigArrayOutput {
	return o.ApplyT(func(v LookupRepositoryResult) []GetRepositoryVirtualRepositoryConfig {
		return v.VirtualRepositoryConfigs
	}).(GetRepositoryVirtualRepositoryConfigArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRepositoryResultOutput{})
}
