// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactregistry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source fetches information of a version from a provided Artifact Registry repository.
func GetVersion(ctx *pulumi.Context, args *GetVersionArgs, opts ...pulumi.InvokeOption) (*GetVersionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVersionResult
	err := ctx.Invoke("gcp:artifactregistry/getVersion:getVersion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVersion.
type GetVersionArgs struct {
	// The location of the artifact registry.
	Location string `pulumi:"location"`
	// The name of the package.
	PackageName string `pulumi:"packageName"`
	// The project ID in which the resource belongs. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The last part of the repository name to fetch from.
	RepositoryId string `pulumi:"repositoryId"`
	// The name of the version.
	VersionName string `pulumi:"versionName"`
	// The view, which determines what version information is returned in a response. Possible values are `"BASIC"` and `"FULL"`. Defaults to `"BASIC"`.
	View *string `pulumi:"view"`
}

// A collection of values returned by getVersion.
type GetVersionResult struct {
	// Client specified annotations.
	Annotations map[string]string `pulumi:"annotations"`
	// The time, as a RFC 3339 string, this package was created.
	CreateTime string `pulumi:"createTime"`
	// Description of the version, as specified in its metadata.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Location string `pulumi:"location"`
	// The name of the version, for example: `projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/version1`. If the package part contains slashes, the slashes are escaped.
	Name        string  `pulumi:"name"`
	PackageName string  `pulumi:"packageName"`
	Project     *string `pulumi:"project"`
	// A list of related tags. Will contain up to 100 tags that reference this version.
	RelatedTags  []GetVersionRelatedTag `pulumi:"relatedTags"`
	RepositoryId string                 `pulumi:"repositoryId"`
	// The time, as a RFC 3339 string, this package was last updated. This includes publishing a new version of the package.
	UpdateTime  string  `pulumi:"updateTime"`
	VersionName string  `pulumi:"versionName"`
	View        *string `pulumi:"view"`
}

func GetVersionOutput(ctx *pulumi.Context, args GetVersionOutputArgs, opts ...pulumi.InvokeOption) GetVersionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetVersionResultOutput, error) {
			args := v.(GetVersionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:artifactregistry/getVersion:getVersion", args, GetVersionResultOutput{}, options).(GetVersionResultOutput), nil
		}).(GetVersionResultOutput)
}

// A collection of arguments for invoking getVersion.
type GetVersionOutputArgs struct {
	// The location of the artifact registry.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the package.
	PackageName pulumi.StringInput `pulumi:"packageName"`
	// The project ID in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The last part of the repository name to fetch from.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
	// The name of the version.
	VersionName pulumi.StringInput `pulumi:"versionName"`
	// The view, which determines what version information is returned in a response. Possible values are `"BASIC"` and `"FULL"`. Defaults to `"BASIC"`.
	View pulumi.StringPtrInput `pulumi:"view"`
}

func (GetVersionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVersionArgs)(nil)).Elem()
}

// A collection of values returned by getVersion.
type GetVersionResultOutput struct{ *pulumi.OutputState }

func (GetVersionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVersionResult)(nil)).Elem()
}

func (o GetVersionResultOutput) ToGetVersionResultOutput() GetVersionResultOutput {
	return o
}

func (o GetVersionResultOutput) ToGetVersionResultOutputWithContext(ctx context.Context) GetVersionResultOutput {
	return o
}

// Client specified annotations.
func (o GetVersionResultOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetVersionResult) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// The time, as a RFC 3339 string, this package was created.
func (o GetVersionResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetVersionResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the version, as specified in its metadata.
func (o GetVersionResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetVersionResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetVersionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVersionResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVersionResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetVersionResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the version, for example: `projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/version1`. If the package part contains slashes, the slashes are escaped.
func (o GetVersionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVersionResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetVersionResultOutput) PackageName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVersionResult) string { return v.PackageName }).(pulumi.StringOutput)
}

func (o GetVersionResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVersionResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// A list of related tags. Will contain up to 100 tags that reference this version.
func (o GetVersionResultOutput) RelatedTags() GetVersionRelatedTagArrayOutput {
	return o.ApplyT(func(v GetVersionResult) []GetVersionRelatedTag { return v.RelatedTags }).(GetVersionRelatedTagArrayOutput)
}

func (o GetVersionResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVersionResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

// The time, as a RFC 3339 string, this package was last updated. This includes publishing a new version of the package.
func (o GetVersionResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetVersionResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func (o GetVersionResultOutput) VersionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVersionResult) string { return v.VersionName }).(pulumi.StringOutput)
}

func (o GetVersionResultOutput) View() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVersionResult) *string { return v.View }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVersionResultOutput{})
}
