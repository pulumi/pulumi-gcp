// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactregistry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type RepositoryCleanupPolicy struct {
	// Policy action.
	// Possible values are: `DELETE`, `KEEP`.
	Action *string `pulumi:"action"`
	// Policy condition for matching versions.
	// Structure is documented below.
	Condition *RepositoryCleanupPolicyCondition `pulumi:"condition"`
	// The identifier for this object. Format specified above.
	Id string `pulumi:"id"`
	// Policy condition for retaining a minimum number of versions. May only be
	// specified with a Keep action.
	// Structure is documented below.
	MostRecentVersions *RepositoryCleanupPolicyMostRecentVersions `pulumi:"mostRecentVersions"`
}

// RepositoryCleanupPolicyInput is an input type that accepts RepositoryCleanupPolicyArgs and RepositoryCleanupPolicyOutput values.
// You can construct a concrete instance of `RepositoryCleanupPolicyInput` via:
//
//	RepositoryCleanupPolicyArgs{...}
type RepositoryCleanupPolicyInput interface {
	pulumi.Input

	ToRepositoryCleanupPolicyOutput() RepositoryCleanupPolicyOutput
	ToRepositoryCleanupPolicyOutputWithContext(context.Context) RepositoryCleanupPolicyOutput
}

type RepositoryCleanupPolicyArgs struct {
	// Policy action.
	// Possible values are: `DELETE`, `KEEP`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Policy condition for matching versions.
	// Structure is documented below.
	Condition RepositoryCleanupPolicyConditionPtrInput `pulumi:"condition"`
	// The identifier for this object. Format specified above.
	Id pulumi.StringInput `pulumi:"id"`
	// Policy condition for retaining a minimum number of versions. May only be
	// specified with a Keep action.
	// Structure is documented below.
	MostRecentVersions RepositoryCleanupPolicyMostRecentVersionsPtrInput `pulumi:"mostRecentVersions"`
}

func (RepositoryCleanupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCleanupPolicy)(nil)).Elem()
}

func (i RepositoryCleanupPolicyArgs) ToRepositoryCleanupPolicyOutput() RepositoryCleanupPolicyOutput {
	return i.ToRepositoryCleanupPolicyOutputWithContext(context.Background())
}

func (i RepositoryCleanupPolicyArgs) ToRepositoryCleanupPolicyOutputWithContext(ctx context.Context) RepositoryCleanupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCleanupPolicyOutput)
}

// RepositoryCleanupPolicyArrayInput is an input type that accepts RepositoryCleanupPolicyArray and RepositoryCleanupPolicyArrayOutput values.
// You can construct a concrete instance of `RepositoryCleanupPolicyArrayInput` via:
//
//	RepositoryCleanupPolicyArray{ RepositoryCleanupPolicyArgs{...} }
type RepositoryCleanupPolicyArrayInput interface {
	pulumi.Input

	ToRepositoryCleanupPolicyArrayOutput() RepositoryCleanupPolicyArrayOutput
	ToRepositoryCleanupPolicyArrayOutputWithContext(context.Context) RepositoryCleanupPolicyArrayOutput
}

type RepositoryCleanupPolicyArray []RepositoryCleanupPolicyInput

func (RepositoryCleanupPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryCleanupPolicy)(nil)).Elem()
}

func (i RepositoryCleanupPolicyArray) ToRepositoryCleanupPolicyArrayOutput() RepositoryCleanupPolicyArrayOutput {
	return i.ToRepositoryCleanupPolicyArrayOutputWithContext(context.Background())
}

func (i RepositoryCleanupPolicyArray) ToRepositoryCleanupPolicyArrayOutputWithContext(ctx context.Context) RepositoryCleanupPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCleanupPolicyArrayOutput)
}

type RepositoryCleanupPolicyOutput struct{ *pulumi.OutputState }

func (RepositoryCleanupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCleanupPolicy)(nil)).Elem()
}

func (o RepositoryCleanupPolicyOutput) ToRepositoryCleanupPolicyOutput() RepositoryCleanupPolicyOutput {
	return o
}

func (o RepositoryCleanupPolicyOutput) ToRepositoryCleanupPolicyOutputWithContext(ctx context.Context) RepositoryCleanupPolicyOutput {
	return o
}

// Policy action.
// Possible values are: `DELETE`, `KEEP`.
func (o RepositoryCleanupPolicyOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicy) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Policy condition for matching versions.
// Structure is documented below.
func (o RepositoryCleanupPolicyOutput) Condition() RepositoryCleanupPolicyConditionPtrOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicy) *RepositoryCleanupPolicyCondition { return v.Condition }).(RepositoryCleanupPolicyConditionPtrOutput)
}

// The identifier for this object. Format specified above.
func (o RepositoryCleanupPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicy) string { return v.Id }).(pulumi.StringOutput)
}

// Policy condition for retaining a minimum number of versions. May only be
// specified with a Keep action.
// Structure is documented below.
func (o RepositoryCleanupPolicyOutput) MostRecentVersions() RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicy) *RepositoryCleanupPolicyMostRecentVersions {
		return v.MostRecentVersions
	}).(RepositoryCleanupPolicyMostRecentVersionsPtrOutput)
}

type RepositoryCleanupPolicyArrayOutput struct{ *pulumi.OutputState }

func (RepositoryCleanupPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryCleanupPolicy)(nil)).Elem()
}

func (o RepositoryCleanupPolicyArrayOutput) ToRepositoryCleanupPolicyArrayOutput() RepositoryCleanupPolicyArrayOutput {
	return o
}

func (o RepositoryCleanupPolicyArrayOutput) ToRepositoryCleanupPolicyArrayOutputWithContext(ctx context.Context) RepositoryCleanupPolicyArrayOutput {
	return o
}

func (o RepositoryCleanupPolicyArrayOutput) Index(i pulumi.IntInput) RepositoryCleanupPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryCleanupPolicy {
		return vs[0].([]RepositoryCleanupPolicy)[vs[1].(int)]
	}).(RepositoryCleanupPolicyOutput)
}

type RepositoryCleanupPolicyCondition struct {
	// Match versions newer than a duration.
	NewerThan *string `pulumi:"newerThan"`
	// Match versions older than a duration.
	OlderThan *string `pulumi:"olderThan"`
	// Match versions by package prefix. Applied on any prefix match.
	PackageNamePrefixes []string `pulumi:"packageNamePrefixes"`
	// Match versions by tag prefix. Applied on any prefix match.
	TagPrefixes []string `pulumi:"tagPrefixes"`
	// Match versions by tag status.
	// Default value is `ANY`.
	// Possible values are: `TAGGED`, `UNTAGGED`, `ANY`.
	TagState *string `pulumi:"tagState"`
	// Match versions by version name prefix. Applied on any prefix match.
	VersionNamePrefixes []string `pulumi:"versionNamePrefixes"`
}

// RepositoryCleanupPolicyConditionInput is an input type that accepts RepositoryCleanupPolicyConditionArgs and RepositoryCleanupPolicyConditionOutput values.
// You can construct a concrete instance of `RepositoryCleanupPolicyConditionInput` via:
//
//	RepositoryCleanupPolicyConditionArgs{...}
type RepositoryCleanupPolicyConditionInput interface {
	pulumi.Input

	ToRepositoryCleanupPolicyConditionOutput() RepositoryCleanupPolicyConditionOutput
	ToRepositoryCleanupPolicyConditionOutputWithContext(context.Context) RepositoryCleanupPolicyConditionOutput
}

type RepositoryCleanupPolicyConditionArgs struct {
	// Match versions newer than a duration.
	NewerThan pulumi.StringPtrInput `pulumi:"newerThan"`
	// Match versions older than a duration.
	OlderThan pulumi.StringPtrInput `pulumi:"olderThan"`
	// Match versions by package prefix. Applied on any prefix match.
	PackageNamePrefixes pulumi.StringArrayInput `pulumi:"packageNamePrefixes"`
	// Match versions by tag prefix. Applied on any prefix match.
	TagPrefixes pulumi.StringArrayInput `pulumi:"tagPrefixes"`
	// Match versions by tag status.
	// Default value is `ANY`.
	// Possible values are: `TAGGED`, `UNTAGGED`, `ANY`.
	TagState pulumi.StringPtrInput `pulumi:"tagState"`
	// Match versions by version name prefix. Applied on any prefix match.
	VersionNamePrefixes pulumi.StringArrayInput `pulumi:"versionNamePrefixes"`
}

func (RepositoryCleanupPolicyConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCleanupPolicyCondition)(nil)).Elem()
}

func (i RepositoryCleanupPolicyConditionArgs) ToRepositoryCleanupPolicyConditionOutput() RepositoryCleanupPolicyConditionOutput {
	return i.ToRepositoryCleanupPolicyConditionOutputWithContext(context.Background())
}

func (i RepositoryCleanupPolicyConditionArgs) ToRepositoryCleanupPolicyConditionOutputWithContext(ctx context.Context) RepositoryCleanupPolicyConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCleanupPolicyConditionOutput)
}

func (i RepositoryCleanupPolicyConditionArgs) ToRepositoryCleanupPolicyConditionPtrOutput() RepositoryCleanupPolicyConditionPtrOutput {
	return i.ToRepositoryCleanupPolicyConditionPtrOutputWithContext(context.Background())
}

func (i RepositoryCleanupPolicyConditionArgs) ToRepositoryCleanupPolicyConditionPtrOutputWithContext(ctx context.Context) RepositoryCleanupPolicyConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCleanupPolicyConditionOutput).ToRepositoryCleanupPolicyConditionPtrOutputWithContext(ctx)
}

// RepositoryCleanupPolicyConditionPtrInput is an input type that accepts RepositoryCleanupPolicyConditionArgs, RepositoryCleanupPolicyConditionPtr and RepositoryCleanupPolicyConditionPtrOutput values.
// You can construct a concrete instance of `RepositoryCleanupPolicyConditionPtrInput` via:
//
//	        RepositoryCleanupPolicyConditionArgs{...}
//
//	or:
//
//	        nil
type RepositoryCleanupPolicyConditionPtrInput interface {
	pulumi.Input

	ToRepositoryCleanupPolicyConditionPtrOutput() RepositoryCleanupPolicyConditionPtrOutput
	ToRepositoryCleanupPolicyConditionPtrOutputWithContext(context.Context) RepositoryCleanupPolicyConditionPtrOutput
}

type repositoryCleanupPolicyConditionPtrType RepositoryCleanupPolicyConditionArgs

func RepositoryCleanupPolicyConditionPtr(v *RepositoryCleanupPolicyConditionArgs) RepositoryCleanupPolicyConditionPtrInput {
	return (*repositoryCleanupPolicyConditionPtrType)(v)
}

func (*repositoryCleanupPolicyConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCleanupPolicyCondition)(nil)).Elem()
}

func (i *repositoryCleanupPolicyConditionPtrType) ToRepositoryCleanupPolicyConditionPtrOutput() RepositoryCleanupPolicyConditionPtrOutput {
	return i.ToRepositoryCleanupPolicyConditionPtrOutputWithContext(context.Background())
}

func (i *repositoryCleanupPolicyConditionPtrType) ToRepositoryCleanupPolicyConditionPtrOutputWithContext(ctx context.Context) RepositoryCleanupPolicyConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCleanupPolicyConditionPtrOutput)
}

type RepositoryCleanupPolicyConditionOutput struct{ *pulumi.OutputState }

func (RepositoryCleanupPolicyConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCleanupPolicyCondition)(nil)).Elem()
}

func (o RepositoryCleanupPolicyConditionOutput) ToRepositoryCleanupPolicyConditionOutput() RepositoryCleanupPolicyConditionOutput {
	return o
}

func (o RepositoryCleanupPolicyConditionOutput) ToRepositoryCleanupPolicyConditionOutputWithContext(ctx context.Context) RepositoryCleanupPolicyConditionOutput {
	return o
}

func (o RepositoryCleanupPolicyConditionOutput) ToRepositoryCleanupPolicyConditionPtrOutput() RepositoryCleanupPolicyConditionPtrOutput {
	return o.ToRepositoryCleanupPolicyConditionPtrOutputWithContext(context.Background())
}

func (o RepositoryCleanupPolicyConditionOutput) ToRepositoryCleanupPolicyConditionPtrOutputWithContext(ctx context.Context) RepositoryCleanupPolicyConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryCleanupPolicyCondition) *RepositoryCleanupPolicyCondition {
		return &v
	}).(RepositoryCleanupPolicyConditionPtrOutput)
}

// Match versions newer than a duration.
func (o RepositoryCleanupPolicyConditionOutput) NewerThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicyCondition) *string { return v.NewerThan }).(pulumi.StringPtrOutput)
}

// Match versions older than a duration.
func (o RepositoryCleanupPolicyConditionOutput) OlderThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicyCondition) *string { return v.OlderThan }).(pulumi.StringPtrOutput)
}

// Match versions by package prefix. Applied on any prefix match.
func (o RepositoryCleanupPolicyConditionOutput) PackageNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicyCondition) []string { return v.PackageNamePrefixes }).(pulumi.StringArrayOutput)
}

// Match versions by tag prefix. Applied on any prefix match.
func (o RepositoryCleanupPolicyConditionOutput) TagPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicyCondition) []string { return v.TagPrefixes }).(pulumi.StringArrayOutput)
}

// Match versions by tag status.
// Default value is `ANY`.
// Possible values are: `TAGGED`, `UNTAGGED`, `ANY`.
func (o RepositoryCleanupPolicyConditionOutput) TagState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicyCondition) *string { return v.TagState }).(pulumi.StringPtrOutput)
}

// Match versions by version name prefix. Applied on any prefix match.
func (o RepositoryCleanupPolicyConditionOutput) VersionNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicyCondition) []string { return v.VersionNamePrefixes }).(pulumi.StringArrayOutput)
}

type RepositoryCleanupPolicyConditionPtrOutput struct{ *pulumi.OutputState }

func (RepositoryCleanupPolicyConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCleanupPolicyCondition)(nil)).Elem()
}

func (o RepositoryCleanupPolicyConditionPtrOutput) ToRepositoryCleanupPolicyConditionPtrOutput() RepositoryCleanupPolicyConditionPtrOutput {
	return o
}

func (o RepositoryCleanupPolicyConditionPtrOutput) ToRepositoryCleanupPolicyConditionPtrOutputWithContext(ctx context.Context) RepositoryCleanupPolicyConditionPtrOutput {
	return o
}

func (o RepositoryCleanupPolicyConditionPtrOutput) Elem() RepositoryCleanupPolicyConditionOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyCondition) RepositoryCleanupPolicyCondition {
		if v != nil {
			return *v
		}
		var ret RepositoryCleanupPolicyCondition
		return ret
	}).(RepositoryCleanupPolicyConditionOutput)
}

// Match versions newer than a duration.
func (o RepositoryCleanupPolicyConditionPtrOutput) NewerThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyCondition) *string {
		if v == nil {
			return nil
		}
		return v.NewerThan
	}).(pulumi.StringPtrOutput)
}

// Match versions older than a duration.
func (o RepositoryCleanupPolicyConditionPtrOutput) OlderThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyCondition) *string {
		if v == nil {
			return nil
		}
		return v.OlderThan
	}).(pulumi.StringPtrOutput)
}

// Match versions by package prefix. Applied on any prefix match.
func (o RepositoryCleanupPolicyConditionPtrOutput) PackageNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyCondition) []string {
		if v == nil {
			return nil
		}
		return v.PackageNamePrefixes
	}).(pulumi.StringArrayOutput)
}

// Match versions by tag prefix. Applied on any prefix match.
func (o RepositoryCleanupPolicyConditionPtrOutput) TagPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyCondition) []string {
		if v == nil {
			return nil
		}
		return v.TagPrefixes
	}).(pulumi.StringArrayOutput)
}

// Match versions by tag status.
// Default value is `ANY`.
// Possible values are: `TAGGED`, `UNTAGGED`, `ANY`.
func (o RepositoryCleanupPolicyConditionPtrOutput) TagState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyCondition) *string {
		if v == nil {
			return nil
		}
		return v.TagState
	}).(pulumi.StringPtrOutput)
}

// Match versions by version name prefix. Applied on any prefix match.
func (o RepositoryCleanupPolicyConditionPtrOutput) VersionNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyCondition) []string {
		if v == nil {
			return nil
		}
		return v.VersionNamePrefixes
	}).(pulumi.StringArrayOutput)
}

type RepositoryCleanupPolicyMostRecentVersions struct {
	// Minimum number of versions to keep.
	KeepCount *int `pulumi:"keepCount"`
	// Match versions by package prefix. Applied on any prefix match.
	PackageNamePrefixes []string `pulumi:"packageNamePrefixes"`
}

// RepositoryCleanupPolicyMostRecentVersionsInput is an input type that accepts RepositoryCleanupPolicyMostRecentVersionsArgs and RepositoryCleanupPolicyMostRecentVersionsOutput values.
// You can construct a concrete instance of `RepositoryCleanupPolicyMostRecentVersionsInput` via:
//
//	RepositoryCleanupPolicyMostRecentVersionsArgs{...}
type RepositoryCleanupPolicyMostRecentVersionsInput interface {
	pulumi.Input

	ToRepositoryCleanupPolicyMostRecentVersionsOutput() RepositoryCleanupPolicyMostRecentVersionsOutput
	ToRepositoryCleanupPolicyMostRecentVersionsOutputWithContext(context.Context) RepositoryCleanupPolicyMostRecentVersionsOutput
}

type RepositoryCleanupPolicyMostRecentVersionsArgs struct {
	// Minimum number of versions to keep.
	KeepCount pulumi.IntPtrInput `pulumi:"keepCount"`
	// Match versions by package prefix. Applied on any prefix match.
	PackageNamePrefixes pulumi.StringArrayInput `pulumi:"packageNamePrefixes"`
}

func (RepositoryCleanupPolicyMostRecentVersionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCleanupPolicyMostRecentVersions)(nil)).Elem()
}

func (i RepositoryCleanupPolicyMostRecentVersionsArgs) ToRepositoryCleanupPolicyMostRecentVersionsOutput() RepositoryCleanupPolicyMostRecentVersionsOutput {
	return i.ToRepositoryCleanupPolicyMostRecentVersionsOutputWithContext(context.Background())
}

func (i RepositoryCleanupPolicyMostRecentVersionsArgs) ToRepositoryCleanupPolicyMostRecentVersionsOutputWithContext(ctx context.Context) RepositoryCleanupPolicyMostRecentVersionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCleanupPolicyMostRecentVersionsOutput)
}

func (i RepositoryCleanupPolicyMostRecentVersionsArgs) ToRepositoryCleanupPolicyMostRecentVersionsPtrOutput() RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return i.ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(context.Background())
}

func (i RepositoryCleanupPolicyMostRecentVersionsArgs) ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(ctx context.Context) RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCleanupPolicyMostRecentVersionsOutput).ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(ctx)
}

// RepositoryCleanupPolicyMostRecentVersionsPtrInput is an input type that accepts RepositoryCleanupPolicyMostRecentVersionsArgs, RepositoryCleanupPolicyMostRecentVersionsPtr and RepositoryCleanupPolicyMostRecentVersionsPtrOutput values.
// You can construct a concrete instance of `RepositoryCleanupPolicyMostRecentVersionsPtrInput` via:
//
//	        RepositoryCleanupPolicyMostRecentVersionsArgs{...}
//
//	or:
//
//	        nil
type RepositoryCleanupPolicyMostRecentVersionsPtrInput interface {
	pulumi.Input

	ToRepositoryCleanupPolicyMostRecentVersionsPtrOutput() RepositoryCleanupPolicyMostRecentVersionsPtrOutput
	ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(context.Context) RepositoryCleanupPolicyMostRecentVersionsPtrOutput
}

type repositoryCleanupPolicyMostRecentVersionsPtrType RepositoryCleanupPolicyMostRecentVersionsArgs

func RepositoryCleanupPolicyMostRecentVersionsPtr(v *RepositoryCleanupPolicyMostRecentVersionsArgs) RepositoryCleanupPolicyMostRecentVersionsPtrInput {
	return (*repositoryCleanupPolicyMostRecentVersionsPtrType)(v)
}

func (*repositoryCleanupPolicyMostRecentVersionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCleanupPolicyMostRecentVersions)(nil)).Elem()
}

func (i *repositoryCleanupPolicyMostRecentVersionsPtrType) ToRepositoryCleanupPolicyMostRecentVersionsPtrOutput() RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return i.ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(context.Background())
}

func (i *repositoryCleanupPolicyMostRecentVersionsPtrType) ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(ctx context.Context) RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCleanupPolicyMostRecentVersionsPtrOutput)
}

type RepositoryCleanupPolicyMostRecentVersionsOutput struct{ *pulumi.OutputState }

func (RepositoryCleanupPolicyMostRecentVersionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCleanupPolicyMostRecentVersions)(nil)).Elem()
}

func (o RepositoryCleanupPolicyMostRecentVersionsOutput) ToRepositoryCleanupPolicyMostRecentVersionsOutput() RepositoryCleanupPolicyMostRecentVersionsOutput {
	return o
}

func (o RepositoryCleanupPolicyMostRecentVersionsOutput) ToRepositoryCleanupPolicyMostRecentVersionsOutputWithContext(ctx context.Context) RepositoryCleanupPolicyMostRecentVersionsOutput {
	return o
}

func (o RepositoryCleanupPolicyMostRecentVersionsOutput) ToRepositoryCleanupPolicyMostRecentVersionsPtrOutput() RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return o.ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(context.Background())
}

func (o RepositoryCleanupPolicyMostRecentVersionsOutput) ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(ctx context.Context) RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryCleanupPolicyMostRecentVersions) *RepositoryCleanupPolicyMostRecentVersions {
		return &v
	}).(RepositoryCleanupPolicyMostRecentVersionsPtrOutput)
}

// Minimum number of versions to keep.
func (o RepositoryCleanupPolicyMostRecentVersionsOutput) KeepCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicyMostRecentVersions) *int { return v.KeepCount }).(pulumi.IntPtrOutput)
}

// Match versions by package prefix. Applied on any prefix match.
func (o RepositoryCleanupPolicyMostRecentVersionsOutput) PackageNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicyMostRecentVersions) []string { return v.PackageNamePrefixes }).(pulumi.StringArrayOutput)
}

type RepositoryCleanupPolicyMostRecentVersionsPtrOutput struct{ *pulumi.OutputState }

func (RepositoryCleanupPolicyMostRecentVersionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCleanupPolicyMostRecentVersions)(nil)).Elem()
}

func (o RepositoryCleanupPolicyMostRecentVersionsPtrOutput) ToRepositoryCleanupPolicyMostRecentVersionsPtrOutput() RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return o
}

func (o RepositoryCleanupPolicyMostRecentVersionsPtrOutput) ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(ctx context.Context) RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return o
}

func (o RepositoryCleanupPolicyMostRecentVersionsPtrOutput) Elem() RepositoryCleanupPolicyMostRecentVersionsOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyMostRecentVersions) RepositoryCleanupPolicyMostRecentVersions {
		if v != nil {
			return *v
		}
		var ret RepositoryCleanupPolicyMostRecentVersions
		return ret
	}).(RepositoryCleanupPolicyMostRecentVersionsOutput)
}

// Minimum number of versions to keep.
func (o RepositoryCleanupPolicyMostRecentVersionsPtrOutput) KeepCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyMostRecentVersions) *int {
		if v == nil {
			return nil
		}
		return v.KeepCount
	}).(pulumi.IntPtrOutput)
}

// Match versions by package prefix. Applied on any prefix match.
func (o RepositoryCleanupPolicyMostRecentVersionsPtrOutput) PackageNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyMostRecentVersions) []string {
		if v == nil {
			return nil
		}
		return v.PackageNamePrefixes
	}).(pulumi.StringArrayOutput)
}

type RepositoryDockerConfig struct {
	// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
	ImmutableTags *bool `pulumi:"immutableTags"`
}

// RepositoryDockerConfigInput is an input type that accepts RepositoryDockerConfigArgs and RepositoryDockerConfigOutput values.
// You can construct a concrete instance of `RepositoryDockerConfigInput` via:
//
//	RepositoryDockerConfigArgs{...}
type RepositoryDockerConfigInput interface {
	pulumi.Input

	ToRepositoryDockerConfigOutput() RepositoryDockerConfigOutput
	ToRepositoryDockerConfigOutputWithContext(context.Context) RepositoryDockerConfigOutput
}

type RepositoryDockerConfigArgs struct {
	// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
	ImmutableTags pulumi.BoolPtrInput `pulumi:"immutableTags"`
}

func (RepositoryDockerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryDockerConfig)(nil)).Elem()
}

func (i RepositoryDockerConfigArgs) ToRepositoryDockerConfigOutput() RepositoryDockerConfigOutput {
	return i.ToRepositoryDockerConfigOutputWithContext(context.Background())
}

func (i RepositoryDockerConfigArgs) ToRepositoryDockerConfigOutputWithContext(ctx context.Context) RepositoryDockerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryDockerConfigOutput)
}

func (i RepositoryDockerConfigArgs) ToRepositoryDockerConfigPtrOutput() RepositoryDockerConfigPtrOutput {
	return i.ToRepositoryDockerConfigPtrOutputWithContext(context.Background())
}

func (i RepositoryDockerConfigArgs) ToRepositoryDockerConfigPtrOutputWithContext(ctx context.Context) RepositoryDockerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryDockerConfigOutput).ToRepositoryDockerConfigPtrOutputWithContext(ctx)
}

// RepositoryDockerConfigPtrInput is an input type that accepts RepositoryDockerConfigArgs, RepositoryDockerConfigPtr and RepositoryDockerConfigPtrOutput values.
// You can construct a concrete instance of `RepositoryDockerConfigPtrInput` via:
//
//	        RepositoryDockerConfigArgs{...}
//
//	or:
//
//	        nil
type RepositoryDockerConfigPtrInput interface {
	pulumi.Input

	ToRepositoryDockerConfigPtrOutput() RepositoryDockerConfigPtrOutput
	ToRepositoryDockerConfigPtrOutputWithContext(context.Context) RepositoryDockerConfigPtrOutput
}

type repositoryDockerConfigPtrType RepositoryDockerConfigArgs

func RepositoryDockerConfigPtr(v *RepositoryDockerConfigArgs) RepositoryDockerConfigPtrInput {
	return (*repositoryDockerConfigPtrType)(v)
}

func (*repositoryDockerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryDockerConfig)(nil)).Elem()
}

func (i *repositoryDockerConfigPtrType) ToRepositoryDockerConfigPtrOutput() RepositoryDockerConfigPtrOutput {
	return i.ToRepositoryDockerConfigPtrOutputWithContext(context.Background())
}

func (i *repositoryDockerConfigPtrType) ToRepositoryDockerConfigPtrOutputWithContext(ctx context.Context) RepositoryDockerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryDockerConfigPtrOutput)
}

type RepositoryDockerConfigOutput struct{ *pulumi.OutputState }

func (RepositoryDockerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryDockerConfig)(nil)).Elem()
}

func (o RepositoryDockerConfigOutput) ToRepositoryDockerConfigOutput() RepositoryDockerConfigOutput {
	return o
}

func (o RepositoryDockerConfigOutput) ToRepositoryDockerConfigOutputWithContext(ctx context.Context) RepositoryDockerConfigOutput {
	return o
}

func (o RepositoryDockerConfigOutput) ToRepositoryDockerConfigPtrOutput() RepositoryDockerConfigPtrOutput {
	return o.ToRepositoryDockerConfigPtrOutputWithContext(context.Background())
}

func (o RepositoryDockerConfigOutput) ToRepositoryDockerConfigPtrOutputWithContext(ctx context.Context) RepositoryDockerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryDockerConfig) *RepositoryDockerConfig {
		return &v
	}).(RepositoryDockerConfigPtrOutput)
}

// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
func (o RepositoryDockerConfigOutput) ImmutableTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryDockerConfig) *bool { return v.ImmutableTags }).(pulumi.BoolPtrOutput)
}

type RepositoryDockerConfigPtrOutput struct{ *pulumi.OutputState }

func (RepositoryDockerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryDockerConfig)(nil)).Elem()
}

func (o RepositoryDockerConfigPtrOutput) ToRepositoryDockerConfigPtrOutput() RepositoryDockerConfigPtrOutput {
	return o
}

func (o RepositoryDockerConfigPtrOutput) ToRepositoryDockerConfigPtrOutputWithContext(ctx context.Context) RepositoryDockerConfigPtrOutput {
	return o
}

func (o RepositoryDockerConfigPtrOutput) Elem() RepositoryDockerConfigOutput {
	return o.ApplyT(func(v *RepositoryDockerConfig) RepositoryDockerConfig {
		if v != nil {
			return *v
		}
		var ret RepositoryDockerConfig
		return ret
	}).(RepositoryDockerConfigOutput)
}

// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
func (o RepositoryDockerConfigPtrOutput) ImmutableTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryDockerConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ImmutableTags
	}).(pulumi.BoolPtrOutput)
}

type RepositoryIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// RepositoryIamBindingConditionInput is an input type that accepts RepositoryIamBindingConditionArgs and RepositoryIamBindingConditionOutput values.
// You can construct a concrete instance of `RepositoryIamBindingConditionInput` via:
//
//	RepositoryIamBindingConditionArgs{...}
type RepositoryIamBindingConditionInput interface {
	pulumi.Input

	ToRepositoryIamBindingConditionOutput() RepositoryIamBindingConditionOutput
	ToRepositoryIamBindingConditionOutputWithContext(context.Context) RepositoryIamBindingConditionOutput
}

type RepositoryIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (RepositoryIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryIamBindingCondition)(nil)).Elem()
}

func (i RepositoryIamBindingConditionArgs) ToRepositoryIamBindingConditionOutput() RepositoryIamBindingConditionOutput {
	return i.ToRepositoryIamBindingConditionOutputWithContext(context.Background())
}

func (i RepositoryIamBindingConditionArgs) ToRepositoryIamBindingConditionOutputWithContext(ctx context.Context) RepositoryIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamBindingConditionOutput)
}

func (i RepositoryIamBindingConditionArgs) ToRepositoryIamBindingConditionPtrOutput() RepositoryIamBindingConditionPtrOutput {
	return i.ToRepositoryIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i RepositoryIamBindingConditionArgs) ToRepositoryIamBindingConditionPtrOutputWithContext(ctx context.Context) RepositoryIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamBindingConditionOutput).ToRepositoryIamBindingConditionPtrOutputWithContext(ctx)
}

// RepositoryIamBindingConditionPtrInput is an input type that accepts RepositoryIamBindingConditionArgs, RepositoryIamBindingConditionPtr and RepositoryIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `RepositoryIamBindingConditionPtrInput` via:
//
//	        RepositoryIamBindingConditionArgs{...}
//
//	or:
//
//	        nil
type RepositoryIamBindingConditionPtrInput interface {
	pulumi.Input

	ToRepositoryIamBindingConditionPtrOutput() RepositoryIamBindingConditionPtrOutput
	ToRepositoryIamBindingConditionPtrOutputWithContext(context.Context) RepositoryIamBindingConditionPtrOutput
}

type repositoryIamBindingConditionPtrType RepositoryIamBindingConditionArgs

func RepositoryIamBindingConditionPtr(v *RepositoryIamBindingConditionArgs) RepositoryIamBindingConditionPtrInput {
	return (*repositoryIamBindingConditionPtrType)(v)
}

func (*repositoryIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamBindingCondition)(nil)).Elem()
}

func (i *repositoryIamBindingConditionPtrType) ToRepositoryIamBindingConditionPtrOutput() RepositoryIamBindingConditionPtrOutput {
	return i.ToRepositoryIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *repositoryIamBindingConditionPtrType) ToRepositoryIamBindingConditionPtrOutputWithContext(ctx context.Context) RepositoryIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamBindingConditionPtrOutput)
}

type RepositoryIamBindingConditionOutput struct{ *pulumi.OutputState }

func (RepositoryIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryIamBindingCondition)(nil)).Elem()
}

func (o RepositoryIamBindingConditionOutput) ToRepositoryIamBindingConditionOutput() RepositoryIamBindingConditionOutput {
	return o
}

func (o RepositoryIamBindingConditionOutput) ToRepositoryIamBindingConditionOutputWithContext(ctx context.Context) RepositoryIamBindingConditionOutput {
	return o
}

func (o RepositoryIamBindingConditionOutput) ToRepositoryIamBindingConditionPtrOutput() RepositoryIamBindingConditionPtrOutput {
	return o.ToRepositoryIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o RepositoryIamBindingConditionOutput) ToRepositoryIamBindingConditionPtrOutputWithContext(ctx context.Context) RepositoryIamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryIamBindingCondition) *RepositoryIamBindingCondition {
		return &v
	}).(RepositoryIamBindingConditionPtrOutput)
}

func (o RepositoryIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RepositoryIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o RepositoryIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type RepositoryIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (RepositoryIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamBindingCondition)(nil)).Elem()
}

func (o RepositoryIamBindingConditionPtrOutput) ToRepositoryIamBindingConditionPtrOutput() RepositoryIamBindingConditionPtrOutput {
	return o
}

func (o RepositoryIamBindingConditionPtrOutput) ToRepositoryIamBindingConditionPtrOutputWithContext(ctx context.Context) RepositoryIamBindingConditionPtrOutput {
	return o
}

func (o RepositoryIamBindingConditionPtrOutput) Elem() RepositoryIamBindingConditionOutput {
	return o.ApplyT(func(v *RepositoryIamBindingCondition) RepositoryIamBindingCondition {
		if v != nil {
			return *v
		}
		var ret RepositoryIamBindingCondition
		return ret
	}).(RepositoryIamBindingConditionOutput)
}

func (o RepositoryIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type RepositoryIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// RepositoryIamMemberConditionInput is an input type that accepts RepositoryIamMemberConditionArgs and RepositoryIamMemberConditionOutput values.
// You can construct a concrete instance of `RepositoryIamMemberConditionInput` via:
//
//	RepositoryIamMemberConditionArgs{...}
type RepositoryIamMemberConditionInput interface {
	pulumi.Input

	ToRepositoryIamMemberConditionOutput() RepositoryIamMemberConditionOutput
	ToRepositoryIamMemberConditionOutputWithContext(context.Context) RepositoryIamMemberConditionOutput
}

type RepositoryIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (RepositoryIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryIamMemberCondition)(nil)).Elem()
}

func (i RepositoryIamMemberConditionArgs) ToRepositoryIamMemberConditionOutput() RepositoryIamMemberConditionOutput {
	return i.ToRepositoryIamMemberConditionOutputWithContext(context.Background())
}

func (i RepositoryIamMemberConditionArgs) ToRepositoryIamMemberConditionOutputWithContext(ctx context.Context) RepositoryIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamMemberConditionOutput)
}

func (i RepositoryIamMemberConditionArgs) ToRepositoryIamMemberConditionPtrOutput() RepositoryIamMemberConditionPtrOutput {
	return i.ToRepositoryIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i RepositoryIamMemberConditionArgs) ToRepositoryIamMemberConditionPtrOutputWithContext(ctx context.Context) RepositoryIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamMemberConditionOutput).ToRepositoryIamMemberConditionPtrOutputWithContext(ctx)
}

// RepositoryIamMemberConditionPtrInput is an input type that accepts RepositoryIamMemberConditionArgs, RepositoryIamMemberConditionPtr and RepositoryIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `RepositoryIamMemberConditionPtrInput` via:
//
//	        RepositoryIamMemberConditionArgs{...}
//
//	or:
//
//	        nil
type RepositoryIamMemberConditionPtrInput interface {
	pulumi.Input

	ToRepositoryIamMemberConditionPtrOutput() RepositoryIamMemberConditionPtrOutput
	ToRepositoryIamMemberConditionPtrOutputWithContext(context.Context) RepositoryIamMemberConditionPtrOutput
}

type repositoryIamMemberConditionPtrType RepositoryIamMemberConditionArgs

func RepositoryIamMemberConditionPtr(v *RepositoryIamMemberConditionArgs) RepositoryIamMemberConditionPtrInput {
	return (*repositoryIamMemberConditionPtrType)(v)
}

func (*repositoryIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamMemberCondition)(nil)).Elem()
}

func (i *repositoryIamMemberConditionPtrType) ToRepositoryIamMemberConditionPtrOutput() RepositoryIamMemberConditionPtrOutput {
	return i.ToRepositoryIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *repositoryIamMemberConditionPtrType) ToRepositoryIamMemberConditionPtrOutputWithContext(ctx context.Context) RepositoryIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamMemberConditionPtrOutput)
}

type RepositoryIamMemberConditionOutput struct{ *pulumi.OutputState }

func (RepositoryIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryIamMemberCondition)(nil)).Elem()
}

func (o RepositoryIamMemberConditionOutput) ToRepositoryIamMemberConditionOutput() RepositoryIamMemberConditionOutput {
	return o
}

func (o RepositoryIamMemberConditionOutput) ToRepositoryIamMemberConditionOutputWithContext(ctx context.Context) RepositoryIamMemberConditionOutput {
	return o
}

func (o RepositoryIamMemberConditionOutput) ToRepositoryIamMemberConditionPtrOutput() RepositoryIamMemberConditionPtrOutput {
	return o.ToRepositoryIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o RepositoryIamMemberConditionOutput) ToRepositoryIamMemberConditionPtrOutputWithContext(ctx context.Context) RepositoryIamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryIamMemberCondition) *RepositoryIamMemberCondition {
		return &v
	}).(RepositoryIamMemberConditionPtrOutput)
}

func (o RepositoryIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RepositoryIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o RepositoryIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type RepositoryIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (RepositoryIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamMemberCondition)(nil)).Elem()
}

func (o RepositoryIamMemberConditionPtrOutput) ToRepositoryIamMemberConditionPtrOutput() RepositoryIamMemberConditionPtrOutput {
	return o
}

func (o RepositoryIamMemberConditionPtrOutput) ToRepositoryIamMemberConditionPtrOutputWithContext(ctx context.Context) RepositoryIamMemberConditionPtrOutput {
	return o
}

func (o RepositoryIamMemberConditionPtrOutput) Elem() RepositoryIamMemberConditionOutput {
	return o.ApplyT(func(v *RepositoryIamMemberCondition) RepositoryIamMemberCondition {
		if v != nil {
			return *v
		}
		var ret RepositoryIamMemberCondition
		return ret
	}).(RepositoryIamMemberConditionOutput)
}

func (o RepositoryIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type RepositoryMavenConfig struct {
	// The repository with this flag will allow publishing the same
	// snapshot versions.
	AllowSnapshotOverwrites *bool `pulumi:"allowSnapshotOverwrites"`
	// Version policy defines the versions that the registry will accept.
	// Default value is `VERSION_POLICY_UNSPECIFIED`.
	// Possible values are: `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, `SNAPSHOT`.
	VersionPolicy *string `pulumi:"versionPolicy"`
}

// RepositoryMavenConfigInput is an input type that accepts RepositoryMavenConfigArgs and RepositoryMavenConfigOutput values.
// You can construct a concrete instance of `RepositoryMavenConfigInput` via:
//
//	RepositoryMavenConfigArgs{...}
type RepositoryMavenConfigInput interface {
	pulumi.Input

	ToRepositoryMavenConfigOutput() RepositoryMavenConfigOutput
	ToRepositoryMavenConfigOutputWithContext(context.Context) RepositoryMavenConfigOutput
}

type RepositoryMavenConfigArgs struct {
	// The repository with this flag will allow publishing the same
	// snapshot versions.
	AllowSnapshotOverwrites pulumi.BoolPtrInput `pulumi:"allowSnapshotOverwrites"`
	// Version policy defines the versions that the registry will accept.
	// Default value is `VERSION_POLICY_UNSPECIFIED`.
	// Possible values are: `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, `SNAPSHOT`.
	VersionPolicy pulumi.StringPtrInput `pulumi:"versionPolicy"`
}

func (RepositoryMavenConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryMavenConfig)(nil)).Elem()
}

func (i RepositoryMavenConfigArgs) ToRepositoryMavenConfigOutput() RepositoryMavenConfigOutput {
	return i.ToRepositoryMavenConfigOutputWithContext(context.Background())
}

func (i RepositoryMavenConfigArgs) ToRepositoryMavenConfigOutputWithContext(ctx context.Context) RepositoryMavenConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMavenConfigOutput)
}

func (i RepositoryMavenConfigArgs) ToRepositoryMavenConfigPtrOutput() RepositoryMavenConfigPtrOutput {
	return i.ToRepositoryMavenConfigPtrOutputWithContext(context.Background())
}

func (i RepositoryMavenConfigArgs) ToRepositoryMavenConfigPtrOutputWithContext(ctx context.Context) RepositoryMavenConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMavenConfigOutput).ToRepositoryMavenConfigPtrOutputWithContext(ctx)
}

// RepositoryMavenConfigPtrInput is an input type that accepts RepositoryMavenConfigArgs, RepositoryMavenConfigPtr and RepositoryMavenConfigPtrOutput values.
// You can construct a concrete instance of `RepositoryMavenConfigPtrInput` via:
//
//	        RepositoryMavenConfigArgs{...}
//
//	or:
//
//	        nil
type RepositoryMavenConfigPtrInput interface {
	pulumi.Input

	ToRepositoryMavenConfigPtrOutput() RepositoryMavenConfigPtrOutput
	ToRepositoryMavenConfigPtrOutputWithContext(context.Context) RepositoryMavenConfigPtrOutput
}

type repositoryMavenConfigPtrType RepositoryMavenConfigArgs

func RepositoryMavenConfigPtr(v *RepositoryMavenConfigArgs) RepositoryMavenConfigPtrInput {
	return (*repositoryMavenConfigPtrType)(v)
}

func (*repositoryMavenConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryMavenConfig)(nil)).Elem()
}

func (i *repositoryMavenConfigPtrType) ToRepositoryMavenConfigPtrOutput() RepositoryMavenConfigPtrOutput {
	return i.ToRepositoryMavenConfigPtrOutputWithContext(context.Background())
}

func (i *repositoryMavenConfigPtrType) ToRepositoryMavenConfigPtrOutputWithContext(ctx context.Context) RepositoryMavenConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMavenConfigPtrOutput)
}

type RepositoryMavenConfigOutput struct{ *pulumi.OutputState }

func (RepositoryMavenConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryMavenConfig)(nil)).Elem()
}

func (o RepositoryMavenConfigOutput) ToRepositoryMavenConfigOutput() RepositoryMavenConfigOutput {
	return o
}

func (o RepositoryMavenConfigOutput) ToRepositoryMavenConfigOutputWithContext(ctx context.Context) RepositoryMavenConfigOutput {
	return o
}

func (o RepositoryMavenConfigOutput) ToRepositoryMavenConfigPtrOutput() RepositoryMavenConfigPtrOutput {
	return o.ToRepositoryMavenConfigPtrOutputWithContext(context.Background())
}

func (o RepositoryMavenConfigOutput) ToRepositoryMavenConfigPtrOutputWithContext(ctx context.Context) RepositoryMavenConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryMavenConfig) *RepositoryMavenConfig {
		return &v
	}).(RepositoryMavenConfigPtrOutput)
}

// The repository with this flag will allow publishing the same
// snapshot versions.
func (o RepositoryMavenConfigOutput) AllowSnapshotOverwrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryMavenConfig) *bool { return v.AllowSnapshotOverwrites }).(pulumi.BoolPtrOutput)
}

// Version policy defines the versions that the registry will accept.
// Default value is `VERSION_POLICY_UNSPECIFIED`.
// Possible values are: `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, `SNAPSHOT`.
func (o RepositoryMavenConfigOutput) VersionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryMavenConfig) *string { return v.VersionPolicy }).(pulumi.StringPtrOutput)
}

type RepositoryMavenConfigPtrOutput struct{ *pulumi.OutputState }

func (RepositoryMavenConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryMavenConfig)(nil)).Elem()
}

func (o RepositoryMavenConfigPtrOutput) ToRepositoryMavenConfigPtrOutput() RepositoryMavenConfigPtrOutput {
	return o
}

func (o RepositoryMavenConfigPtrOutput) ToRepositoryMavenConfigPtrOutputWithContext(ctx context.Context) RepositoryMavenConfigPtrOutput {
	return o
}

func (o RepositoryMavenConfigPtrOutput) Elem() RepositoryMavenConfigOutput {
	return o.ApplyT(func(v *RepositoryMavenConfig) RepositoryMavenConfig {
		if v != nil {
			return *v
		}
		var ret RepositoryMavenConfig
		return ret
	}).(RepositoryMavenConfigOutput)
}

// The repository with this flag will allow publishing the same
// snapshot versions.
func (o RepositoryMavenConfigPtrOutput) AllowSnapshotOverwrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryMavenConfig) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSnapshotOverwrites
	}).(pulumi.BoolPtrOutput)
}

// Version policy defines the versions that the registry will accept.
// Default value is `VERSION_POLICY_UNSPECIFIED`.
// Possible values are: `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, `SNAPSHOT`.
func (o RepositoryMavenConfigPtrOutput) VersionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryMavenConfig) *string {
		if v == nil {
			return nil
		}
		return v.VersionPolicy
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfig struct {
	// Specific settings for an Apt remote repository.
	// Structure is documented below.
	AptRepository *RepositoryRemoteRepositoryConfigAptRepository `pulumi:"aptRepository"`
	// Specific settings for an Artifact Registory remote repository.
	// Structure is documented below.
	CommonRepository *RepositoryRemoteRepositoryConfigCommonRepository `pulumi:"commonRepository"`
	// The description of the remote source.
	Description *string `pulumi:"description"`
	// If true, the remote repository upstream and upstream credentials will
	// not be validated.
	DisableUpstreamValidation *bool `pulumi:"disableUpstreamValidation"`
	// Specific settings for a Docker remote repository.
	// Structure is documented below.
	DockerRepository *RepositoryRemoteRepositoryConfigDockerRepository `pulumi:"dockerRepository"`
	// Specific settings for a Maven remote repository.
	// Structure is documented below.
	MavenRepository *RepositoryRemoteRepositoryConfigMavenRepository `pulumi:"mavenRepository"`
	// Specific settings for an Npm remote repository.
	// Structure is documented below.
	NpmRepository *RepositoryRemoteRepositoryConfigNpmRepository `pulumi:"npmRepository"`
	// Specific settings for a Python remote repository.
	// Structure is documented below.
	PythonRepository *RepositoryRemoteRepositoryConfigPythonRepository `pulumi:"pythonRepository"`
	// The credentials used to access the remote repository.
	// Structure is documented below.
	UpstreamCredentials *RepositoryRemoteRepositoryConfigUpstreamCredentials `pulumi:"upstreamCredentials"`
	// Specific settings for an Yum remote repository.
	// Structure is documented below.
	YumRepository *RepositoryRemoteRepositoryConfigYumRepository `pulumi:"yumRepository"`
}

// RepositoryRemoteRepositoryConfigInput is an input type that accepts RepositoryRemoteRepositoryConfigArgs and RepositoryRemoteRepositoryConfigOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigInput` via:
//
//	RepositoryRemoteRepositoryConfigArgs{...}
type RepositoryRemoteRepositoryConfigInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigOutput() RepositoryRemoteRepositoryConfigOutput
	ToRepositoryRemoteRepositoryConfigOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigOutput
}

type RepositoryRemoteRepositoryConfigArgs struct {
	// Specific settings for an Apt remote repository.
	// Structure is documented below.
	AptRepository RepositoryRemoteRepositoryConfigAptRepositoryPtrInput `pulumi:"aptRepository"`
	// Specific settings for an Artifact Registory remote repository.
	// Structure is documented below.
	CommonRepository RepositoryRemoteRepositoryConfigCommonRepositoryPtrInput `pulumi:"commonRepository"`
	// The description of the remote source.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If true, the remote repository upstream and upstream credentials will
	// not be validated.
	DisableUpstreamValidation pulumi.BoolPtrInput `pulumi:"disableUpstreamValidation"`
	// Specific settings for a Docker remote repository.
	// Structure is documented below.
	DockerRepository RepositoryRemoteRepositoryConfigDockerRepositoryPtrInput `pulumi:"dockerRepository"`
	// Specific settings for a Maven remote repository.
	// Structure is documented below.
	MavenRepository RepositoryRemoteRepositoryConfigMavenRepositoryPtrInput `pulumi:"mavenRepository"`
	// Specific settings for an Npm remote repository.
	// Structure is documented below.
	NpmRepository RepositoryRemoteRepositoryConfigNpmRepositoryPtrInput `pulumi:"npmRepository"`
	// Specific settings for a Python remote repository.
	// Structure is documented below.
	PythonRepository RepositoryRemoteRepositoryConfigPythonRepositoryPtrInput `pulumi:"pythonRepository"`
	// The credentials used to access the remote repository.
	// Structure is documented below.
	UpstreamCredentials RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrInput `pulumi:"upstreamCredentials"`
	// Specific settings for an Yum remote repository.
	// Structure is documented below.
	YumRepository RepositoryRemoteRepositoryConfigYumRepositoryPtrInput `pulumi:"yumRepository"`
}

func (RepositoryRemoteRepositoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfig)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigArgs) ToRepositoryRemoteRepositoryConfigOutput() RepositoryRemoteRepositoryConfigOutput {
	return i.ToRepositoryRemoteRepositoryConfigOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigArgs) ToRepositoryRemoteRepositoryConfigOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigOutput)
}

func (i RepositoryRemoteRepositoryConfigArgs) ToRepositoryRemoteRepositoryConfigPtrOutput() RepositoryRemoteRepositoryConfigPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigArgs) ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigOutput).ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigArgs, RepositoryRemoteRepositoryConfigPtr and RepositoryRemoteRepositoryConfigPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigPtrOutput() RepositoryRemoteRepositoryConfigPtrOutput
	ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigPtrOutput
}

type repositoryRemoteRepositoryConfigPtrType RepositoryRemoteRepositoryConfigArgs

func RepositoryRemoteRepositoryConfigPtr(v *RepositoryRemoteRepositoryConfigArgs) RepositoryRemoteRepositoryConfigPtrInput {
	return (*repositoryRemoteRepositoryConfigPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfig)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigPtrType) ToRepositoryRemoteRepositoryConfigPtrOutput() RepositoryRemoteRepositoryConfigPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigPtrType) ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigPtrOutput)
}

type RepositoryRemoteRepositoryConfigOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfig)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigOutput) ToRepositoryRemoteRepositoryConfigOutput() RepositoryRemoteRepositoryConfigOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigOutput) ToRepositoryRemoteRepositoryConfigOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigOutput) ToRepositoryRemoteRepositoryConfigPtrOutput() RepositoryRemoteRepositoryConfigPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigOutput) ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfig {
		return &v
	}).(RepositoryRemoteRepositoryConfigPtrOutput)
}

// Specific settings for an Apt remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigOutput) AptRepository() RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigAptRepository {
		return v.AptRepository
	}).(RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput)
}

// Specific settings for an Artifact Registory remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigOutput) CommonRepository() RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigCommonRepository {
		return v.CommonRepository
	}).(RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput)
}

// The description of the remote source.
func (o RepositoryRemoteRepositoryConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfig) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If true, the remote repository upstream and upstream credentials will
// not be validated.
func (o RepositoryRemoteRepositoryConfigOutput) DisableUpstreamValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfig) *bool { return v.DisableUpstreamValidation }).(pulumi.BoolPtrOutput)
}

// Specific settings for a Docker remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigOutput) DockerRepository() RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigDockerRepository {
		return v.DockerRepository
	}).(RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput)
}

// Specific settings for a Maven remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigOutput) MavenRepository() RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigMavenRepository {
		return v.MavenRepository
	}).(RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput)
}

// Specific settings for an Npm remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigOutput) NpmRepository() RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigNpmRepository {
		return v.NpmRepository
	}).(RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput)
}

// Specific settings for a Python remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigOutput) PythonRepository() RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigPythonRepository {
		return v.PythonRepository
	}).(RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput)
}

// The credentials used to access the remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigOutput) UpstreamCredentials() RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigUpstreamCredentials {
		return v.UpstreamCredentials
	}).(RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput)
}

// Specific settings for an Yum remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigOutput) YumRepository() RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigYumRepository {
		return v.YumRepository
	}).(RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfig)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigPtrOutput) ToRepositoryRemoteRepositoryConfigPtrOutput() RepositoryRemoteRepositoryConfigPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigPtrOutput) ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigPtrOutput) Elem() RepositoryRemoteRepositoryConfigOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) RepositoryRemoteRepositoryConfig {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfig
		return ret
	}).(RepositoryRemoteRepositoryConfigOutput)
}

// Specific settings for an Apt remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigPtrOutput) AptRepository() RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigAptRepository {
		if v == nil {
			return nil
		}
		return v.AptRepository
	}).(RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput)
}

// Specific settings for an Artifact Registory remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigPtrOutput) CommonRepository() RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigCommonRepository {
		if v == nil {
			return nil
		}
		return v.CommonRepository
	}).(RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput)
}

// The description of the remote source.
func (o RepositoryRemoteRepositoryConfigPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// If true, the remote repository upstream and upstream credentials will
// not be validated.
func (o RepositoryRemoteRepositoryConfigPtrOutput) DisableUpstreamValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DisableUpstreamValidation
	}).(pulumi.BoolPtrOutput)
}

// Specific settings for a Docker remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigPtrOutput) DockerRepository() RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigDockerRepository {
		if v == nil {
			return nil
		}
		return v.DockerRepository
	}).(RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput)
}

// Specific settings for a Maven remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigPtrOutput) MavenRepository() RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigMavenRepository {
		if v == nil {
			return nil
		}
		return v.MavenRepository
	}).(RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput)
}

// Specific settings for an Npm remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigPtrOutput) NpmRepository() RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigNpmRepository {
		if v == nil {
			return nil
		}
		return v.NpmRepository
	}).(RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput)
}

// Specific settings for a Python remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigPtrOutput) PythonRepository() RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigPythonRepository {
		if v == nil {
			return nil
		}
		return v.PythonRepository
	}).(RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput)
}

// The credentials used to access the remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigPtrOutput) UpstreamCredentials() RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigUpstreamCredentials {
		if v == nil {
			return nil
		}
		return v.UpstreamCredentials
	}).(RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput)
}

// Specific settings for an Yum remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigPtrOutput) YumRepository() RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigYumRepository {
		if v == nil {
			return nil
		}
		return v.YumRepository
	}).(RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigAptRepository struct {
	// One of the publicly available Apt repositories supported by Artifact Registry.
	// Structure is documented below.
	PublicRepository *RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository `pulumi:"publicRepository"`
}

// RepositoryRemoteRepositoryConfigAptRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigAptRepositoryArgs and RepositoryRemoteRepositoryConfigAptRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigAptRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigAptRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigAptRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigAptRepositoryOutput() RepositoryRemoteRepositoryConfigAptRepositoryOutput
	ToRepositoryRemoteRepositoryConfigAptRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigAptRepositoryOutput
}

type RepositoryRemoteRepositoryConfigAptRepositoryArgs struct {
	// One of the publicly available Apt repositories supported by Artifact Registry.
	// Structure is documented below.
	PublicRepository RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrInput `pulumi:"publicRepository"`
}

func (RepositoryRemoteRepositoryConfigAptRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigAptRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigAptRepositoryArgs) ToRepositoryRemoteRepositoryConfigAptRepositoryOutput() RepositoryRemoteRepositoryConfigAptRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigAptRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigAptRepositoryArgs) ToRepositoryRemoteRepositoryConfigAptRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigAptRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigAptRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigAptRepositoryArgs) ToRepositoryRemoteRepositoryConfigAptRepositoryPtrOutput() RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigAptRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigAptRepositoryArgs) ToRepositoryRemoteRepositoryConfigAptRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigAptRepositoryOutput).ToRepositoryRemoteRepositoryConfigAptRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigAptRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigAptRepositoryArgs, RepositoryRemoteRepositoryConfigAptRepositoryPtr and RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigAptRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigAptRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigAptRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigAptRepositoryPtrOutput() RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigAptRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigAptRepositoryPtrType RepositoryRemoteRepositoryConfigAptRepositoryArgs

func RepositoryRemoteRepositoryConfigAptRepositoryPtr(v *RepositoryRemoteRepositoryConfigAptRepositoryArgs) RepositoryRemoteRepositoryConfigAptRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigAptRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigAptRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigAptRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigAptRepositoryPtrType) ToRepositoryRemoteRepositoryConfigAptRepositoryPtrOutput() RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigAptRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigAptRepositoryPtrType) ToRepositoryRemoteRepositoryConfigAptRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigAptRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigAptRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigAptRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigAptRepositoryOutput) ToRepositoryRemoteRepositoryConfigAptRepositoryOutput() RepositoryRemoteRepositoryConfigAptRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigAptRepositoryOutput) ToRepositoryRemoteRepositoryConfigAptRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigAptRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigAptRepositoryOutput) ToRepositoryRemoteRepositoryConfigAptRepositoryPtrOutput() RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigAptRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigAptRepositoryOutput) ToRepositoryRemoteRepositoryConfigAptRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigAptRepository) *RepositoryRemoteRepositoryConfigAptRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput)
}

// One of the publicly available Apt repositories supported by Artifact Registry.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigAptRepositoryOutput) PublicRepository() RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigAptRepository) *RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository {
		return v.PublicRepository
	}).(RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigAptRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigAptRepositoryPtrOutput() RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigAptRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigAptRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigAptRepository) RepositoryRemoteRepositoryConfigAptRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigAptRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigAptRepositoryOutput)
}

// One of the publicly available Apt repositories supported by Artifact Registry.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput) PublicRepository() RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigAptRepository) *RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository struct {
	// A common public repository base for Yum.
	// Possible values are: `CENTOS`, `CENTOS_DEBUG`, `CENTOS_VAULT`, `CENTOS_STREAM`, `ROCKY`, `EPEL`.
	RepositoryBase string `pulumi:"repositoryBase"`
	// Specific repository from the base, e.g. `"pub/rocky/9/BaseOS/x86_64/os"`
	RepositoryPath string `pulumi:"repositoryPath"`
}

// RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs and RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput() RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput
	ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput
}

type RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs struct {
	// A common public repository base for Yum.
	// Possible values are: `CENTOS`, `CENTOS_DEBUG`, `CENTOS_VAULT`, `CENTOS_STREAM`, `ROCKY`, `EPEL`.
	RepositoryBase pulumi.StringInput `pulumi:"repositoryBase"`
	// Specific repository from the base, e.g. `"pub/rocky/9/BaseOS/x86_64/os"`
	RepositoryPath pulumi.StringInput `pulumi:"repositoryPath"`
}

func (RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs) ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput() RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs) ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs) ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput() RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs) ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput).ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs, RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtr and RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput() RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrType RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs

func RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtr(v *RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs) RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrType) ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput() RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrType) ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput() RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput() RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository) *RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput)
}

// A common public repository base for Yum.
// Possible values are: `CENTOS`, `CENTOS_DEBUG`, `CENTOS_VAULT`, `CENTOS_STREAM`, `ROCKY`, `EPEL`.
func (o RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) RepositoryBase() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository) string { return v.RepositoryBase }).(pulumi.StringOutput)
}

// Specific repository from the base, e.g. `"pub/rocky/9/BaseOS/x86_64/os"`
func (o RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) RepositoryPath() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository) string { return v.RepositoryPath }).(pulumi.StringOutput)
}

type RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput() RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository) RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput)
}

// A common public repository base for Yum.
// Possible values are: `CENTOS`, `CENTOS_DEBUG`, `CENTOS_VAULT`, `CENTOS_STREAM`, `ROCKY`, `EPEL`.
func (o RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput) RepositoryBase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryBase
	}).(pulumi.StringPtrOutput)
}

// Specific repository from the base, e.g. `"pub/rocky/9/BaseOS/x86_64/os"`
func (o RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput) RepositoryPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryPath
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigCommonRepository struct {
	// One of:
	// a. Artifact Registry Repository resource, e.g. `projects/UPSTREAM_PROJECT_ID/locations/REGION/repositories/UPSTREAM_REPOSITORY`
	// b. URI to the registry, e.g. `"https://registry-1.docker.io"`
	// c. URI to Artifact Registry Repository, e.g. `"https://REGION-docker.pkg.dev/UPSTREAM_PROJECT_ID/UPSTREAM_REPOSITORY"`
	Uri string `pulumi:"uri"`
}

// RepositoryRemoteRepositoryConfigCommonRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigCommonRepositoryArgs and RepositoryRemoteRepositoryConfigCommonRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigCommonRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigCommonRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigCommonRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigCommonRepositoryOutput() RepositoryRemoteRepositoryConfigCommonRepositoryOutput
	ToRepositoryRemoteRepositoryConfigCommonRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigCommonRepositoryOutput
}

type RepositoryRemoteRepositoryConfigCommonRepositoryArgs struct {
	// One of:
	// a. Artifact Registry Repository resource, e.g. `projects/UPSTREAM_PROJECT_ID/locations/REGION/repositories/UPSTREAM_REPOSITORY`
	// b. URI to the registry, e.g. `"https://registry-1.docker.io"`
	// c. URI to Artifact Registry Repository, e.g. `"https://REGION-docker.pkg.dev/UPSTREAM_PROJECT_ID/UPSTREAM_REPOSITORY"`
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (RepositoryRemoteRepositoryConfigCommonRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigCommonRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigCommonRepositoryArgs) ToRepositoryRemoteRepositoryConfigCommonRepositoryOutput() RepositoryRemoteRepositoryConfigCommonRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigCommonRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigCommonRepositoryArgs) ToRepositoryRemoteRepositoryConfigCommonRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigCommonRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigCommonRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigCommonRepositoryArgs) ToRepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput() RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigCommonRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigCommonRepositoryArgs) ToRepositoryRemoteRepositoryConfigCommonRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigCommonRepositoryOutput).ToRepositoryRemoteRepositoryConfigCommonRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigCommonRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigCommonRepositoryArgs, RepositoryRemoteRepositoryConfigCommonRepositoryPtr and RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigCommonRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigCommonRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigCommonRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput() RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigCommonRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigCommonRepositoryPtrType RepositoryRemoteRepositoryConfigCommonRepositoryArgs

func RepositoryRemoteRepositoryConfigCommonRepositoryPtr(v *RepositoryRemoteRepositoryConfigCommonRepositoryArgs) RepositoryRemoteRepositoryConfigCommonRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigCommonRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigCommonRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigCommonRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigCommonRepositoryPtrType) ToRepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput() RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigCommonRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigCommonRepositoryPtrType) ToRepositoryRemoteRepositoryConfigCommonRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigCommonRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigCommonRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigCommonRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigCommonRepositoryOutput) ToRepositoryRemoteRepositoryConfigCommonRepositoryOutput() RepositoryRemoteRepositoryConfigCommonRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigCommonRepositoryOutput) ToRepositoryRemoteRepositoryConfigCommonRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigCommonRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigCommonRepositoryOutput) ToRepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput() RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigCommonRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigCommonRepositoryOutput) ToRepositoryRemoteRepositoryConfigCommonRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigCommonRepository) *RepositoryRemoteRepositoryConfigCommonRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput)
}

// One of:
// a. Artifact Registry Repository resource, e.g. `projects/UPSTREAM_PROJECT_ID/locations/REGION/repositories/UPSTREAM_REPOSITORY`
// b. URI to the registry, e.g. `"https://registry-1.docker.io"`
// c. URI to Artifact Registry Repository, e.g. `"https://REGION-docker.pkg.dev/UPSTREAM_PROJECT_ID/UPSTREAM_REPOSITORY"`
func (o RepositoryRemoteRepositoryConfigCommonRepositoryOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigCommonRepository) string { return v.Uri }).(pulumi.StringOutput)
}

type RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigCommonRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput() RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigCommonRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigCommonRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigCommonRepository) RepositoryRemoteRepositoryConfigCommonRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigCommonRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigCommonRepositoryOutput)
}

// One of:
// a. Artifact Registry Repository resource, e.g. `projects/UPSTREAM_PROJECT_ID/locations/REGION/repositories/UPSTREAM_REPOSITORY`
// b. URI to the registry, e.g. `"https://registry-1.docker.io"`
// c. URI to Artifact Registry Repository, e.g. `"https://REGION-docker.pkg.dev/UPSTREAM_PROJECT_ID/UPSTREAM_REPOSITORY"`
func (o RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigCommonRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigDockerRepository struct {
	// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
	// Structure is documented below.
	CustomRepository *RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository `pulumi:"customRepository"`
	// Address of the remote repository.
	// Default value is `DOCKER_HUB`.
	// Possible values are: `DOCKER_HUB`.
	PublicRepository *string `pulumi:"publicRepository"`
}

// RepositoryRemoteRepositoryConfigDockerRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigDockerRepositoryArgs and RepositoryRemoteRepositoryConfigDockerRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigDockerRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigDockerRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigDockerRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigDockerRepositoryOutput() RepositoryRemoteRepositoryConfigDockerRepositoryOutput
	ToRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryOutput
}

type RepositoryRemoteRepositoryConfigDockerRepositoryArgs struct {
	// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
	// Structure is documented below.
	CustomRepository RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrInput `pulumi:"customRepository"`
	// Address of the remote repository.
	// Default value is `DOCKER_HUB`.
	// Possible values are: `DOCKER_HUB`.
	PublicRepository pulumi.StringPtrInput `pulumi:"publicRepository"`
}

func (RepositoryRemoteRepositoryConfigDockerRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigDockerRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigDockerRepositoryArgs) ToRepositoryRemoteRepositoryConfigDockerRepositoryOutput() RepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigDockerRepositoryArgs) ToRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigDockerRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigDockerRepositoryArgs) ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput() RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigDockerRepositoryArgs) ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigDockerRepositoryOutput).ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigDockerRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigDockerRepositoryArgs, RepositoryRemoteRepositoryConfigDockerRepositoryPtr and RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigDockerRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigDockerRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigDockerRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput() RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigDockerRepositoryPtrType RepositoryRemoteRepositoryConfigDockerRepositoryArgs

func RepositoryRemoteRepositoryConfigDockerRepositoryPtr(v *RepositoryRemoteRepositoryConfigDockerRepositoryArgs) RepositoryRemoteRepositoryConfigDockerRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigDockerRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigDockerRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigDockerRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigDockerRepositoryPtrType) ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput() RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigDockerRepositoryPtrType) ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigDockerRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigDockerRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigDockerRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryOutput() RepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput() RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigDockerRepository) *RepositoryRemoteRepositoryConfigDockerRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput)
}

// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigDockerRepositoryOutput) CustomRepository() RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigDockerRepository) *RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository {
		return v.CustomRepository
	}).(RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput)
}

// Address of the remote repository.
// Default value is `DOCKER_HUB`.
// Possible values are: `DOCKER_HUB`.
func (o RepositoryRemoteRepositoryConfigDockerRepositoryOutput) PublicRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigDockerRepository) *string { return v.PublicRepository }).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigDockerRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput() RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigDockerRepository) RepositoryRemoteRepositoryConfigDockerRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigDockerRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigDockerRepositoryOutput)
}

// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput) CustomRepository() RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigDockerRepository) *RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository {
		if v == nil {
			return nil
		}
		return v.CustomRepository
	}).(RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput)
}

// Address of the remote repository.
// Default value is `DOCKER_HUB`.
// Possible values are: `DOCKER_HUB`.
func (o RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput) PublicRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigDockerRepository) *string {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository struct {
	// Specific uri to the registry, e.g. `"https://pypi.io"`
	Uri *string `pulumi:"uri"`
}

// RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs and RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput() RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput
	ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput
}

type RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs struct {
	// Specific uri to the registry, e.g. `"https://pypi.io"`
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs) ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput() RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs) ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs) ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs) ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput).ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs, RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtr and RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrType RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs

func RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtr(v *RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs) RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrType) ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrType) ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput() RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository) *RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput)
}

// Specific uri to the registry, e.g. `"https://pypi.io"`
func (o RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository) RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput)
}

// Specific uri to the registry, e.g. `"https://pypi.io"`
func (o RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigMavenRepository struct {
	// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
	// Structure is documented below.
	CustomRepository *RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository `pulumi:"customRepository"`
	// Address of the remote repository.
	// Default value is `MAVEN_CENTRAL`.
	// Possible values are: `MAVEN_CENTRAL`.
	PublicRepository *string `pulumi:"publicRepository"`
}

// RepositoryRemoteRepositoryConfigMavenRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigMavenRepositoryArgs and RepositoryRemoteRepositoryConfigMavenRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigMavenRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigMavenRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigMavenRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigMavenRepositoryOutput() RepositoryRemoteRepositoryConfigMavenRepositoryOutput
	ToRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryOutput
}

type RepositoryRemoteRepositoryConfigMavenRepositoryArgs struct {
	// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
	// Structure is documented below.
	CustomRepository RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrInput `pulumi:"customRepository"`
	// Address of the remote repository.
	// Default value is `MAVEN_CENTRAL`.
	// Possible values are: `MAVEN_CENTRAL`.
	PublicRepository pulumi.StringPtrInput `pulumi:"publicRepository"`
}

func (RepositoryRemoteRepositoryConfigMavenRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigMavenRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigMavenRepositoryArgs) ToRepositoryRemoteRepositoryConfigMavenRepositoryOutput() RepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigMavenRepositoryArgs) ToRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigMavenRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigMavenRepositoryArgs) ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput() RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigMavenRepositoryArgs) ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigMavenRepositoryOutput).ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigMavenRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigMavenRepositoryArgs, RepositoryRemoteRepositoryConfigMavenRepositoryPtr and RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigMavenRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigMavenRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigMavenRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput() RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigMavenRepositoryPtrType RepositoryRemoteRepositoryConfigMavenRepositoryArgs

func RepositoryRemoteRepositoryConfigMavenRepositoryPtr(v *RepositoryRemoteRepositoryConfigMavenRepositoryArgs) RepositoryRemoteRepositoryConfigMavenRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigMavenRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigMavenRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigMavenRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigMavenRepositoryPtrType) ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput() RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigMavenRepositoryPtrType) ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigMavenRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigMavenRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigMavenRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryOutput() RepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput() RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigMavenRepository) *RepositoryRemoteRepositoryConfigMavenRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput)
}

// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigMavenRepositoryOutput) CustomRepository() RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigMavenRepository) *RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository {
		return v.CustomRepository
	}).(RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput)
}

// Address of the remote repository.
// Default value is `MAVEN_CENTRAL`.
// Possible values are: `MAVEN_CENTRAL`.
func (o RepositoryRemoteRepositoryConfigMavenRepositoryOutput) PublicRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigMavenRepository) *string { return v.PublicRepository }).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigMavenRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput() RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigMavenRepository) RepositoryRemoteRepositoryConfigMavenRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigMavenRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigMavenRepositoryOutput)
}

// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput) CustomRepository() RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigMavenRepository) *RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository {
		if v == nil {
			return nil
		}
		return v.CustomRepository
	}).(RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput)
}

// Address of the remote repository.
// Default value is `MAVEN_CENTRAL`.
// Possible values are: `MAVEN_CENTRAL`.
func (o RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput) PublicRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigMavenRepository) *string {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository struct {
	// Specific uri to the registry, e.g. `"https://pypi.io"`
	Uri *string `pulumi:"uri"`
}

// RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs and RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput() RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput
	ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput
}

type RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs struct {
	// Specific uri to the registry, e.g. `"https://pypi.io"`
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs) ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput() RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs) ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs) ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs) ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput).ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs, RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtr and RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrType RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs

func RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtr(v *RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs) RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrType) ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrType) ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput() RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository) *RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput)
}

// Specific uri to the registry, e.g. `"https://pypi.io"`
func (o RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository) RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput)
}

// Specific uri to the registry, e.g. `"https://pypi.io"`
func (o RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigNpmRepository struct {
	// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
	// Structure is documented below.
	CustomRepository *RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository `pulumi:"customRepository"`
	// Address of the remote repository.
	// Default value is `NPMJS`.
	// Possible values are: `NPMJS`.
	PublicRepository *string `pulumi:"publicRepository"`
}

// RepositoryRemoteRepositoryConfigNpmRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigNpmRepositoryArgs and RepositoryRemoteRepositoryConfigNpmRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigNpmRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigNpmRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigNpmRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigNpmRepositoryOutput() RepositoryRemoteRepositoryConfigNpmRepositoryOutput
	ToRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryOutput
}

type RepositoryRemoteRepositoryConfigNpmRepositoryArgs struct {
	// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
	// Structure is documented below.
	CustomRepository RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrInput `pulumi:"customRepository"`
	// Address of the remote repository.
	// Default value is `NPMJS`.
	// Possible values are: `NPMJS`.
	PublicRepository pulumi.StringPtrInput `pulumi:"publicRepository"`
}

func (RepositoryRemoteRepositoryConfigNpmRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigNpmRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigNpmRepositoryArgs) ToRepositoryRemoteRepositoryConfigNpmRepositoryOutput() RepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigNpmRepositoryArgs) ToRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigNpmRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigNpmRepositoryArgs) ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput() RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigNpmRepositoryArgs) ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigNpmRepositoryOutput).ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigNpmRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigNpmRepositoryArgs, RepositoryRemoteRepositoryConfigNpmRepositoryPtr and RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigNpmRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigNpmRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigNpmRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput() RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigNpmRepositoryPtrType RepositoryRemoteRepositoryConfigNpmRepositoryArgs

func RepositoryRemoteRepositoryConfigNpmRepositoryPtr(v *RepositoryRemoteRepositoryConfigNpmRepositoryArgs) RepositoryRemoteRepositoryConfigNpmRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigNpmRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigNpmRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigNpmRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigNpmRepositoryPtrType) ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput() RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigNpmRepositoryPtrType) ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigNpmRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigNpmRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigNpmRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryOutput() RepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput() RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigNpmRepository) *RepositoryRemoteRepositoryConfigNpmRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput)
}

// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigNpmRepositoryOutput) CustomRepository() RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigNpmRepository) *RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository {
		return v.CustomRepository
	}).(RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput)
}

// Address of the remote repository.
// Default value is `NPMJS`.
// Possible values are: `NPMJS`.
func (o RepositoryRemoteRepositoryConfigNpmRepositoryOutput) PublicRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigNpmRepository) *string { return v.PublicRepository }).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigNpmRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput() RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigNpmRepository) RepositoryRemoteRepositoryConfigNpmRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigNpmRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigNpmRepositoryOutput)
}

// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput) CustomRepository() RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigNpmRepository) *RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository {
		if v == nil {
			return nil
		}
		return v.CustomRepository
	}).(RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput)
}

// Address of the remote repository.
// Default value is `NPMJS`.
// Possible values are: `NPMJS`.
func (o RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput) PublicRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigNpmRepository) *string {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository struct {
	// Specific uri to the registry, e.g. `"https://pypi.io"`
	Uri *string `pulumi:"uri"`
}

// RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs and RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput() RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput
	ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput
}

type RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs struct {
	// Specific uri to the registry, e.g. `"https://pypi.io"`
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs) ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput() RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs) ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs) ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs) ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput).ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs, RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtr and RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrType RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs

func RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtr(v *RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs) RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrType) ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrType) ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput() RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository) *RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput)
}

// Specific uri to the registry, e.g. `"https://pypi.io"`
func (o RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository) RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput)
}

// Specific uri to the registry, e.g. `"https://pypi.io"`
func (o RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigPythonRepository struct {
	// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
	// Structure is documented below.
	CustomRepository *RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository `pulumi:"customRepository"`
	// Address of the remote repository.
	// Default value is `PYPI`.
	// Possible values are: `PYPI`.
	PublicRepository *string `pulumi:"publicRepository"`
}

// RepositoryRemoteRepositoryConfigPythonRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigPythonRepositoryArgs and RepositoryRemoteRepositoryConfigPythonRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigPythonRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigPythonRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigPythonRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigPythonRepositoryOutput() RepositoryRemoteRepositoryConfigPythonRepositoryOutput
	ToRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryOutput
}

type RepositoryRemoteRepositoryConfigPythonRepositoryArgs struct {
	// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
	// Structure is documented below.
	CustomRepository RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrInput `pulumi:"customRepository"`
	// Address of the remote repository.
	// Default value is `PYPI`.
	// Possible values are: `PYPI`.
	PublicRepository pulumi.StringPtrInput `pulumi:"publicRepository"`
}

func (RepositoryRemoteRepositoryConfigPythonRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigPythonRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigPythonRepositoryArgs) ToRepositoryRemoteRepositoryConfigPythonRepositoryOutput() RepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigPythonRepositoryArgs) ToRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigPythonRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigPythonRepositoryArgs) ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput() RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigPythonRepositoryArgs) ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigPythonRepositoryOutput).ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigPythonRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigPythonRepositoryArgs, RepositoryRemoteRepositoryConfigPythonRepositoryPtr and RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigPythonRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigPythonRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigPythonRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput() RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigPythonRepositoryPtrType RepositoryRemoteRepositoryConfigPythonRepositoryArgs

func RepositoryRemoteRepositoryConfigPythonRepositoryPtr(v *RepositoryRemoteRepositoryConfigPythonRepositoryArgs) RepositoryRemoteRepositoryConfigPythonRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigPythonRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigPythonRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigPythonRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigPythonRepositoryPtrType) ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput() RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigPythonRepositoryPtrType) ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigPythonRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigPythonRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigPythonRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryOutput() RepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput() RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigPythonRepository) *RepositoryRemoteRepositoryConfigPythonRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput)
}

// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigPythonRepositoryOutput) CustomRepository() RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigPythonRepository) *RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository {
		return v.CustomRepository
	}).(RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput)
}

// Address of the remote repository.
// Default value is `PYPI`.
// Possible values are: `PYPI`.
func (o RepositoryRemoteRepositoryConfigPythonRepositoryOutput) PublicRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigPythonRepository) *string { return v.PublicRepository }).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigPythonRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput() RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigPythonRepository) RepositoryRemoteRepositoryConfigPythonRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigPythonRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigPythonRepositoryOutput)
}

// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput) CustomRepository() RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigPythonRepository) *RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository {
		if v == nil {
			return nil
		}
		return v.CustomRepository
	}).(RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput)
}

// Address of the remote repository.
// Default value is `PYPI`.
// Possible values are: `PYPI`.
func (o RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput) PublicRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigPythonRepository) *string {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository struct {
	// Specific uri to the registry, e.g. `"https://pypi.io"`
	Uri *string `pulumi:"uri"`
}

// RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs and RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput() RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput
	ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput
}

type RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs struct {
	// Specific uri to the registry, e.g. `"https://pypi.io"`
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs) ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput() RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs) ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs) ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs) ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput).ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs, RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtr and RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrType RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs

func RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtr(v *RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs) RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrType) ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrType) ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput() RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository) *RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput)
}

// Specific uri to the registry, e.g. `"https://pypi.io"`
func (o RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput() RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository) RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput)
}

// Specific uri to the registry, e.g. `"https://pypi.io"`
func (o RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigUpstreamCredentials struct {
	// Use username and password to access the remote repository.
	// Structure is documented below.
	UsernamePasswordCredentials *RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials `pulumi:"usernamePasswordCredentials"`
}

// RepositoryRemoteRepositoryConfigUpstreamCredentialsInput is an input type that accepts RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs and RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigUpstreamCredentialsInput` via:
//
//	RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs{...}
type RepositoryRemoteRepositoryConfigUpstreamCredentialsInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigUpstreamCredentialsOutput() RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput
	ToRepositoryRemoteRepositoryConfigUpstreamCredentialsOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput
}

type RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs struct {
	// Use username and password to access the remote repository.
	// Structure is documented below.
	UsernamePasswordCredentials RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrInput `pulumi:"usernamePasswordCredentials"`
}

func (RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigUpstreamCredentials)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsOutput() RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput {
	return i.ToRepositoryRemoteRepositoryConfigUpstreamCredentialsOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput)
}

func (i RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput() RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput).ToRepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs, RepositoryRemoteRepositoryConfigUpstreamCredentialsPtr and RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput() RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput
	ToRepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput
}

type repositoryRemoteRepositoryConfigUpstreamCredentialsPtrType RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs

func RepositoryRemoteRepositoryConfigUpstreamCredentialsPtr(v *RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs) RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrInput {
	return (*repositoryRemoteRepositoryConfigUpstreamCredentialsPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigUpstreamCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigUpstreamCredentials)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigUpstreamCredentialsPtrType) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput() RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigUpstreamCredentialsPtrType) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput)
}

type RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigUpstreamCredentials)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsOutput() RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput() RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigUpstreamCredentials) *RepositoryRemoteRepositoryConfigUpstreamCredentials {
		return &v
	}).(RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput)
}

// Use username and password to access the remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput) UsernamePasswordCredentials() RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigUpstreamCredentials) *RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials {
		return v.UsernamePasswordCredentials
	}).(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput)
}

type RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigUpstreamCredentials)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput() RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput) Elem() RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigUpstreamCredentials) RepositoryRemoteRepositoryConfigUpstreamCredentials {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigUpstreamCredentials
		return ret
	}).(RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput)
}

// Use username and password to access the remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput) UsernamePasswordCredentials() RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigUpstreamCredentials) *RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials {
		if v == nil {
			return nil
		}
		return v.UsernamePasswordCredentials
	}).(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput)
}

type RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials struct {
	// The Secret Manager key version that holds the password to access the
	// remote repository. Must be in the format of
	// `projects/{project}/secrets/{secret}/versions/{version}`.
	PasswordSecretVersion *string `pulumi:"passwordSecretVersion"`
	// The username to access the remote repository.
	Username *string `pulumi:"username"`
}

// RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsInput is an input type that accepts RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs and RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsInput` via:
//
//	RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs{...}
type RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput() RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput
	ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput
}

type RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs struct {
	// The Secret Manager key version that holds the password to access the
	// remote repository. Must be in the format of
	// `projects/{project}/secrets/{secret}/versions/{version}`.
	PasswordSecretVersion pulumi.StringPtrInput `pulumi:"passwordSecretVersion"`
	// The username to access the remote repository.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput() RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput {
	return i.ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput)
}

func (i RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput() RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput).ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs, RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtr and RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput() RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput
	ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput
}

type repositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrType RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs

func RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtr(v *RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs) RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrInput {
	return (*repositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrType) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput() RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrType) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput)
}

type RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput() RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput() RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials) *RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials {
		return &v
	}).(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput)
}

// The Secret Manager key version that holds the password to access the
// remote repository. Must be in the format of
// `projects/{project}/secrets/{secret}/versions/{version}`.
func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput) PasswordSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials) *string {
		return v.PasswordSecretVersion
	}).(pulumi.StringPtrOutput)
}

// The username to access the remote repository.
func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials) *string {
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput() RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput) ToRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput) Elem() RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials) RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials
		return ret
	}).(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput)
}

// The Secret Manager key version that holds the password to access the
// remote repository. Must be in the format of
// `projects/{project}/secrets/{secret}/versions/{version}`.
func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput) PasswordSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials) *string {
		if v == nil {
			return nil
		}
		return v.PasswordSecretVersion
	}).(pulumi.StringPtrOutput)
}

// The username to access the remote repository.
func (o RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigYumRepository struct {
	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	PublicRepository *RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository `pulumi:"publicRepository"`
}

// RepositoryRemoteRepositoryConfigYumRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigYumRepositoryArgs and RepositoryRemoteRepositoryConfigYumRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigYumRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigYumRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigYumRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigYumRepositoryOutput() RepositoryRemoteRepositoryConfigYumRepositoryOutput
	ToRepositoryRemoteRepositoryConfigYumRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigYumRepositoryOutput
}

type RepositoryRemoteRepositoryConfigYumRepositoryArgs struct {
	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	PublicRepository RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrInput `pulumi:"publicRepository"`
}

func (RepositoryRemoteRepositoryConfigYumRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigYumRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigYumRepositoryArgs) ToRepositoryRemoteRepositoryConfigYumRepositoryOutput() RepositoryRemoteRepositoryConfigYumRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigYumRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigYumRepositoryArgs) ToRepositoryRemoteRepositoryConfigYumRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigYumRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigYumRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigYumRepositoryArgs) ToRepositoryRemoteRepositoryConfigYumRepositoryPtrOutput() RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigYumRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigYumRepositoryArgs) ToRepositoryRemoteRepositoryConfigYumRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigYumRepositoryOutput).ToRepositoryRemoteRepositoryConfigYumRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigYumRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigYumRepositoryArgs, RepositoryRemoteRepositoryConfigYumRepositoryPtr and RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigYumRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigYumRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigYumRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigYumRepositoryPtrOutput() RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigYumRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigYumRepositoryPtrType RepositoryRemoteRepositoryConfigYumRepositoryArgs

func RepositoryRemoteRepositoryConfigYumRepositoryPtr(v *RepositoryRemoteRepositoryConfigYumRepositoryArgs) RepositoryRemoteRepositoryConfigYumRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigYumRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigYumRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigYumRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigYumRepositoryPtrType) ToRepositoryRemoteRepositoryConfigYumRepositoryPtrOutput() RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigYumRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigYumRepositoryPtrType) ToRepositoryRemoteRepositoryConfigYumRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigYumRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigYumRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigYumRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigYumRepositoryOutput) ToRepositoryRemoteRepositoryConfigYumRepositoryOutput() RepositoryRemoteRepositoryConfigYumRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigYumRepositoryOutput) ToRepositoryRemoteRepositoryConfigYumRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigYumRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigYumRepositoryOutput) ToRepositoryRemoteRepositoryConfigYumRepositoryPtrOutput() RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigYumRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigYumRepositoryOutput) ToRepositoryRemoteRepositoryConfigYumRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigYumRepository) *RepositoryRemoteRepositoryConfigYumRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput)
}

// One of the publicly available Yum repositories supported by Artifact Registry.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigYumRepositoryOutput) PublicRepository() RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigYumRepository) *RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository {
		return v.PublicRepository
	}).(RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigYumRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigYumRepositoryPtrOutput() RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigYumRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigYumRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigYumRepository) RepositoryRemoteRepositoryConfigYumRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigYumRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigYumRepositoryOutput)
}

// One of the publicly available Yum repositories supported by Artifact Registry.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput) PublicRepository() RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigYumRepository) *RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository struct {
	// A common public repository base for Yum.
	// Possible values are: `CENTOS`, `CENTOS_DEBUG`, `CENTOS_VAULT`, `CENTOS_STREAM`, `ROCKY`, `EPEL`.
	RepositoryBase string `pulumi:"repositoryBase"`
	// Specific repository from the base, e.g. `"pub/rocky/9/BaseOS/x86_64/os"`
	RepositoryPath string `pulumi:"repositoryPath"`
}

// RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs and RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput() RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput
	ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput
}

type RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs struct {
	// A common public repository base for Yum.
	// Possible values are: `CENTOS`, `CENTOS_DEBUG`, `CENTOS_VAULT`, `CENTOS_STREAM`, `ROCKY`, `EPEL`.
	RepositoryBase pulumi.StringInput `pulumi:"repositoryBase"`
	// Specific repository from the base, e.g. `"pub/rocky/9/BaseOS/x86_64/os"`
	RepositoryPath pulumi.StringInput `pulumi:"repositoryPath"`
}

func (RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs) ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput() RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs) ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs) ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput() RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs) ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput).ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs, RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtr and RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput() RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrType RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs

func RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtr(v *RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs) RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrType) ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput() RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrType) ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput() RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput() RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository) *RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput)
}

// A common public repository base for Yum.
// Possible values are: `CENTOS`, `CENTOS_DEBUG`, `CENTOS_VAULT`, `CENTOS_STREAM`, `ROCKY`, `EPEL`.
func (o RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) RepositoryBase() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository) string { return v.RepositoryBase }).(pulumi.StringOutput)
}

// Specific repository from the base, e.g. `"pub/rocky/9/BaseOS/x86_64/os"`
func (o RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) RepositoryPath() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository) string { return v.RepositoryPath }).(pulumi.StringOutput)
}

type RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput() RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository) RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput)
}

// A common public repository base for Yum.
// Possible values are: `CENTOS`, `CENTOS_DEBUG`, `CENTOS_VAULT`, `CENTOS_STREAM`, `ROCKY`, `EPEL`.
func (o RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput) RepositoryBase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryBase
	}).(pulumi.StringPtrOutput)
}

// Specific repository from the base, e.g. `"pub/rocky/9/BaseOS/x86_64/os"`
func (o RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput) RepositoryPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryPath
	}).(pulumi.StringPtrOutput)
}

type RepositoryVirtualRepositoryConfig struct {
	// Policies that configure the upstream artifacts distributed by the Virtual
	// Repository. Upstream policies cannot be set on a standard repository.
	// Structure is documented below.
	UpstreamPolicies []RepositoryVirtualRepositoryConfigUpstreamPolicy `pulumi:"upstreamPolicies"`
}

// RepositoryVirtualRepositoryConfigInput is an input type that accepts RepositoryVirtualRepositoryConfigArgs and RepositoryVirtualRepositoryConfigOutput values.
// You can construct a concrete instance of `RepositoryVirtualRepositoryConfigInput` via:
//
//	RepositoryVirtualRepositoryConfigArgs{...}
type RepositoryVirtualRepositoryConfigInput interface {
	pulumi.Input

	ToRepositoryVirtualRepositoryConfigOutput() RepositoryVirtualRepositoryConfigOutput
	ToRepositoryVirtualRepositoryConfigOutputWithContext(context.Context) RepositoryVirtualRepositoryConfigOutput
}

type RepositoryVirtualRepositoryConfigArgs struct {
	// Policies that configure the upstream artifacts distributed by the Virtual
	// Repository. Upstream policies cannot be set on a standard repository.
	// Structure is documented below.
	UpstreamPolicies RepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput `pulumi:"upstreamPolicies"`
}

func (RepositoryVirtualRepositoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryVirtualRepositoryConfig)(nil)).Elem()
}

func (i RepositoryVirtualRepositoryConfigArgs) ToRepositoryVirtualRepositoryConfigOutput() RepositoryVirtualRepositoryConfigOutput {
	return i.ToRepositoryVirtualRepositoryConfigOutputWithContext(context.Background())
}

func (i RepositoryVirtualRepositoryConfigArgs) ToRepositoryVirtualRepositoryConfigOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryVirtualRepositoryConfigOutput)
}

func (i RepositoryVirtualRepositoryConfigArgs) ToRepositoryVirtualRepositoryConfigPtrOutput() RepositoryVirtualRepositoryConfigPtrOutput {
	return i.ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i RepositoryVirtualRepositoryConfigArgs) ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryVirtualRepositoryConfigOutput).ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(ctx)
}

// RepositoryVirtualRepositoryConfigPtrInput is an input type that accepts RepositoryVirtualRepositoryConfigArgs, RepositoryVirtualRepositoryConfigPtr and RepositoryVirtualRepositoryConfigPtrOutput values.
// You can construct a concrete instance of `RepositoryVirtualRepositoryConfigPtrInput` via:
//
//	        RepositoryVirtualRepositoryConfigArgs{...}
//
//	or:
//
//	        nil
type RepositoryVirtualRepositoryConfigPtrInput interface {
	pulumi.Input

	ToRepositoryVirtualRepositoryConfigPtrOutput() RepositoryVirtualRepositoryConfigPtrOutput
	ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(context.Context) RepositoryVirtualRepositoryConfigPtrOutput
}

type repositoryVirtualRepositoryConfigPtrType RepositoryVirtualRepositoryConfigArgs

func RepositoryVirtualRepositoryConfigPtr(v *RepositoryVirtualRepositoryConfigArgs) RepositoryVirtualRepositoryConfigPtrInput {
	return (*repositoryVirtualRepositoryConfigPtrType)(v)
}

func (*repositoryVirtualRepositoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryVirtualRepositoryConfig)(nil)).Elem()
}

func (i *repositoryVirtualRepositoryConfigPtrType) ToRepositoryVirtualRepositoryConfigPtrOutput() RepositoryVirtualRepositoryConfigPtrOutput {
	return i.ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i *repositoryVirtualRepositoryConfigPtrType) ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryVirtualRepositoryConfigPtrOutput)
}

type RepositoryVirtualRepositoryConfigOutput struct{ *pulumi.OutputState }

func (RepositoryVirtualRepositoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryVirtualRepositoryConfig)(nil)).Elem()
}

func (o RepositoryVirtualRepositoryConfigOutput) ToRepositoryVirtualRepositoryConfigOutput() RepositoryVirtualRepositoryConfigOutput {
	return o
}

func (o RepositoryVirtualRepositoryConfigOutput) ToRepositoryVirtualRepositoryConfigOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigOutput {
	return o
}

func (o RepositoryVirtualRepositoryConfigOutput) ToRepositoryVirtualRepositoryConfigPtrOutput() RepositoryVirtualRepositoryConfigPtrOutput {
	return o.ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(context.Background())
}

func (o RepositoryVirtualRepositoryConfigOutput) ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryVirtualRepositoryConfig) *RepositoryVirtualRepositoryConfig {
		return &v
	}).(RepositoryVirtualRepositoryConfigPtrOutput)
}

// Policies that configure the upstream artifacts distributed by the Virtual
// Repository. Upstream policies cannot be set on a standard repository.
// Structure is documented below.
func (o RepositoryVirtualRepositoryConfigOutput) UpstreamPolicies() RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return o.ApplyT(func(v RepositoryVirtualRepositoryConfig) []RepositoryVirtualRepositoryConfigUpstreamPolicy {
		return v.UpstreamPolicies
	}).(RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput)
}

type RepositoryVirtualRepositoryConfigPtrOutput struct{ *pulumi.OutputState }

func (RepositoryVirtualRepositoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryVirtualRepositoryConfig)(nil)).Elem()
}

func (o RepositoryVirtualRepositoryConfigPtrOutput) ToRepositoryVirtualRepositoryConfigPtrOutput() RepositoryVirtualRepositoryConfigPtrOutput {
	return o
}

func (o RepositoryVirtualRepositoryConfigPtrOutput) ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigPtrOutput {
	return o
}

func (o RepositoryVirtualRepositoryConfigPtrOutput) Elem() RepositoryVirtualRepositoryConfigOutput {
	return o.ApplyT(func(v *RepositoryVirtualRepositoryConfig) RepositoryVirtualRepositoryConfig {
		if v != nil {
			return *v
		}
		var ret RepositoryVirtualRepositoryConfig
		return ret
	}).(RepositoryVirtualRepositoryConfigOutput)
}

// Policies that configure the upstream artifacts distributed by the Virtual
// Repository. Upstream policies cannot be set on a standard repository.
// Structure is documented below.
func (o RepositoryVirtualRepositoryConfigPtrOutput) UpstreamPolicies() RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return o.ApplyT(func(v *RepositoryVirtualRepositoryConfig) []RepositoryVirtualRepositoryConfigUpstreamPolicy {
		if v == nil {
			return nil
		}
		return v.UpstreamPolicies
	}).(RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput)
}

type RepositoryVirtualRepositoryConfigUpstreamPolicy struct {
	// The user-provided ID of the upstream policy.
	Id *string `pulumi:"id"`
	// Entries with a greater priority value take precedence in the pull order.
	Priority *int `pulumi:"priority"`
	// A reference to the repository resource, for example:
	// "projects/p1/locations/us-central1/repository/repo1".
	Repository *string `pulumi:"repository"`
}

// RepositoryVirtualRepositoryConfigUpstreamPolicyInput is an input type that accepts RepositoryVirtualRepositoryConfigUpstreamPolicyArgs and RepositoryVirtualRepositoryConfigUpstreamPolicyOutput values.
// You can construct a concrete instance of `RepositoryVirtualRepositoryConfigUpstreamPolicyInput` via:
//
//	RepositoryVirtualRepositoryConfigUpstreamPolicyArgs{...}
type RepositoryVirtualRepositoryConfigUpstreamPolicyInput interface {
	pulumi.Input

	ToRepositoryVirtualRepositoryConfigUpstreamPolicyOutput() RepositoryVirtualRepositoryConfigUpstreamPolicyOutput
	ToRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(context.Context) RepositoryVirtualRepositoryConfigUpstreamPolicyOutput
}

type RepositoryVirtualRepositoryConfigUpstreamPolicyArgs struct {
	// The user-provided ID of the upstream policy.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Entries with a greater priority value take precedence in the pull order.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// A reference to the repository resource, for example:
	// "projects/p1/locations/us-central1/repository/repo1".
	Repository pulumi.StringPtrInput `pulumi:"repository"`
}

func (RepositoryVirtualRepositoryConfigUpstreamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryVirtualRepositoryConfigUpstreamPolicy)(nil)).Elem()
}

func (i RepositoryVirtualRepositoryConfigUpstreamPolicyArgs) ToRepositoryVirtualRepositoryConfigUpstreamPolicyOutput() RepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return i.ToRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(context.Background())
}

func (i RepositoryVirtualRepositoryConfigUpstreamPolicyArgs) ToRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryVirtualRepositoryConfigUpstreamPolicyOutput)
}

// RepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput is an input type that accepts RepositoryVirtualRepositoryConfigUpstreamPolicyArray and RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput values.
// You can construct a concrete instance of `RepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput` via:
//
//	RepositoryVirtualRepositoryConfigUpstreamPolicyArray{ RepositoryVirtualRepositoryConfigUpstreamPolicyArgs{...} }
type RepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput interface {
	pulumi.Input

	ToRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput() RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput
	ToRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(context.Context) RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput
}

type RepositoryVirtualRepositoryConfigUpstreamPolicyArray []RepositoryVirtualRepositoryConfigUpstreamPolicyInput

func (RepositoryVirtualRepositoryConfigUpstreamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryVirtualRepositoryConfigUpstreamPolicy)(nil)).Elem()
}

func (i RepositoryVirtualRepositoryConfigUpstreamPolicyArray) ToRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput() RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return i.ToRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(context.Background())
}

func (i RepositoryVirtualRepositoryConfigUpstreamPolicyArray) ToRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput)
}

type RepositoryVirtualRepositoryConfigUpstreamPolicyOutput struct{ *pulumi.OutputState }

func (RepositoryVirtualRepositoryConfigUpstreamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryVirtualRepositoryConfigUpstreamPolicy)(nil)).Elem()
}

func (o RepositoryVirtualRepositoryConfigUpstreamPolicyOutput) ToRepositoryVirtualRepositoryConfigUpstreamPolicyOutput() RepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return o
}

func (o RepositoryVirtualRepositoryConfigUpstreamPolicyOutput) ToRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return o
}

// The user-provided ID of the upstream policy.
func (o RepositoryVirtualRepositoryConfigUpstreamPolicyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryVirtualRepositoryConfigUpstreamPolicy) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Entries with a greater priority value take precedence in the pull order.
func (o RepositoryVirtualRepositoryConfigUpstreamPolicyOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RepositoryVirtualRepositoryConfigUpstreamPolicy) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// A reference to the repository resource, for example:
// "projects/p1/locations/us-central1/repository/repo1".
func (o RepositoryVirtualRepositoryConfigUpstreamPolicyOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryVirtualRepositoryConfigUpstreamPolicy) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

type RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput struct{ *pulumi.OutputState }

func (RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryVirtualRepositoryConfigUpstreamPolicy)(nil)).Elem()
}

func (o RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) ToRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput() RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return o
}

func (o RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) ToRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return o
}

func (o RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) Index(i pulumi.IntInput) RepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryVirtualRepositoryConfigUpstreamPolicy {
		return vs[0].([]RepositoryVirtualRepositoryConfigUpstreamPolicy)[vs[1].(int)]
	}).(RepositoryVirtualRepositoryConfigUpstreamPolicyOutput)
}

type RepositoryVulnerabilityScanningConfig struct {
	// This configures whether vulnerability scanning is automatically performed for artifacts pushed to this repository.
	// Possible values are: `INHERITED`, `DISABLED`.
	EnablementConfig *string `pulumi:"enablementConfig"`
	// (Output)
	// This field returns whether scanning is active for this repository.
	EnablementState *string `pulumi:"enablementState"`
	// (Output)
	// This provides an explanation for the state of scanning on this repository.
	EnablementStateReason *string `pulumi:"enablementStateReason"`
}

// RepositoryVulnerabilityScanningConfigInput is an input type that accepts RepositoryVulnerabilityScanningConfigArgs and RepositoryVulnerabilityScanningConfigOutput values.
// You can construct a concrete instance of `RepositoryVulnerabilityScanningConfigInput` via:
//
//	RepositoryVulnerabilityScanningConfigArgs{...}
type RepositoryVulnerabilityScanningConfigInput interface {
	pulumi.Input

	ToRepositoryVulnerabilityScanningConfigOutput() RepositoryVulnerabilityScanningConfigOutput
	ToRepositoryVulnerabilityScanningConfigOutputWithContext(context.Context) RepositoryVulnerabilityScanningConfigOutput
}

type RepositoryVulnerabilityScanningConfigArgs struct {
	// This configures whether vulnerability scanning is automatically performed for artifacts pushed to this repository.
	// Possible values are: `INHERITED`, `DISABLED`.
	EnablementConfig pulumi.StringPtrInput `pulumi:"enablementConfig"`
	// (Output)
	// This field returns whether scanning is active for this repository.
	EnablementState pulumi.StringPtrInput `pulumi:"enablementState"`
	// (Output)
	// This provides an explanation for the state of scanning on this repository.
	EnablementStateReason pulumi.StringPtrInput `pulumi:"enablementStateReason"`
}

func (RepositoryVulnerabilityScanningConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryVulnerabilityScanningConfig)(nil)).Elem()
}

func (i RepositoryVulnerabilityScanningConfigArgs) ToRepositoryVulnerabilityScanningConfigOutput() RepositoryVulnerabilityScanningConfigOutput {
	return i.ToRepositoryVulnerabilityScanningConfigOutputWithContext(context.Background())
}

func (i RepositoryVulnerabilityScanningConfigArgs) ToRepositoryVulnerabilityScanningConfigOutputWithContext(ctx context.Context) RepositoryVulnerabilityScanningConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryVulnerabilityScanningConfigOutput)
}

func (i RepositoryVulnerabilityScanningConfigArgs) ToRepositoryVulnerabilityScanningConfigPtrOutput() RepositoryVulnerabilityScanningConfigPtrOutput {
	return i.ToRepositoryVulnerabilityScanningConfigPtrOutputWithContext(context.Background())
}

func (i RepositoryVulnerabilityScanningConfigArgs) ToRepositoryVulnerabilityScanningConfigPtrOutputWithContext(ctx context.Context) RepositoryVulnerabilityScanningConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryVulnerabilityScanningConfigOutput).ToRepositoryVulnerabilityScanningConfigPtrOutputWithContext(ctx)
}

// RepositoryVulnerabilityScanningConfigPtrInput is an input type that accepts RepositoryVulnerabilityScanningConfigArgs, RepositoryVulnerabilityScanningConfigPtr and RepositoryVulnerabilityScanningConfigPtrOutput values.
// You can construct a concrete instance of `RepositoryVulnerabilityScanningConfigPtrInput` via:
//
//	        RepositoryVulnerabilityScanningConfigArgs{...}
//
//	or:
//
//	        nil
type RepositoryVulnerabilityScanningConfigPtrInput interface {
	pulumi.Input

	ToRepositoryVulnerabilityScanningConfigPtrOutput() RepositoryVulnerabilityScanningConfigPtrOutput
	ToRepositoryVulnerabilityScanningConfigPtrOutputWithContext(context.Context) RepositoryVulnerabilityScanningConfigPtrOutput
}

type repositoryVulnerabilityScanningConfigPtrType RepositoryVulnerabilityScanningConfigArgs

func RepositoryVulnerabilityScanningConfigPtr(v *RepositoryVulnerabilityScanningConfigArgs) RepositoryVulnerabilityScanningConfigPtrInput {
	return (*repositoryVulnerabilityScanningConfigPtrType)(v)
}

func (*repositoryVulnerabilityScanningConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryVulnerabilityScanningConfig)(nil)).Elem()
}

func (i *repositoryVulnerabilityScanningConfigPtrType) ToRepositoryVulnerabilityScanningConfigPtrOutput() RepositoryVulnerabilityScanningConfigPtrOutput {
	return i.ToRepositoryVulnerabilityScanningConfigPtrOutputWithContext(context.Background())
}

func (i *repositoryVulnerabilityScanningConfigPtrType) ToRepositoryVulnerabilityScanningConfigPtrOutputWithContext(ctx context.Context) RepositoryVulnerabilityScanningConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryVulnerabilityScanningConfigPtrOutput)
}

type RepositoryVulnerabilityScanningConfigOutput struct{ *pulumi.OutputState }

func (RepositoryVulnerabilityScanningConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryVulnerabilityScanningConfig)(nil)).Elem()
}

func (o RepositoryVulnerabilityScanningConfigOutput) ToRepositoryVulnerabilityScanningConfigOutput() RepositoryVulnerabilityScanningConfigOutput {
	return o
}

func (o RepositoryVulnerabilityScanningConfigOutput) ToRepositoryVulnerabilityScanningConfigOutputWithContext(ctx context.Context) RepositoryVulnerabilityScanningConfigOutput {
	return o
}

func (o RepositoryVulnerabilityScanningConfigOutput) ToRepositoryVulnerabilityScanningConfigPtrOutput() RepositoryVulnerabilityScanningConfigPtrOutput {
	return o.ToRepositoryVulnerabilityScanningConfigPtrOutputWithContext(context.Background())
}

func (o RepositoryVulnerabilityScanningConfigOutput) ToRepositoryVulnerabilityScanningConfigPtrOutputWithContext(ctx context.Context) RepositoryVulnerabilityScanningConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryVulnerabilityScanningConfig) *RepositoryVulnerabilityScanningConfig {
		return &v
	}).(RepositoryVulnerabilityScanningConfigPtrOutput)
}

// This configures whether vulnerability scanning is automatically performed for artifacts pushed to this repository.
// Possible values are: `INHERITED`, `DISABLED`.
func (o RepositoryVulnerabilityScanningConfigOutput) EnablementConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryVulnerabilityScanningConfig) *string { return v.EnablementConfig }).(pulumi.StringPtrOutput)
}

// (Output)
// This field returns whether scanning is active for this repository.
func (o RepositoryVulnerabilityScanningConfigOutput) EnablementState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryVulnerabilityScanningConfig) *string { return v.EnablementState }).(pulumi.StringPtrOutput)
}

// (Output)
// This provides an explanation for the state of scanning on this repository.
func (o RepositoryVulnerabilityScanningConfigOutput) EnablementStateReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryVulnerabilityScanningConfig) *string { return v.EnablementStateReason }).(pulumi.StringPtrOutput)
}

type RepositoryVulnerabilityScanningConfigPtrOutput struct{ *pulumi.OutputState }

func (RepositoryVulnerabilityScanningConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryVulnerabilityScanningConfig)(nil)).Elem()
}

func (o RepositoryVulnerabilityScanningConfigPtrOutput) ToRepositoryVulnerabilityScanningConfigPtrOutput() RepositoryVulnerabilityScanningConfigPtrOutput {
	return o
}

func (o RepositoryVulnerabilityScanningConfigPtrOutput) ToRepositoryVulnerabilityScanningConfigPtrOutputWithContext(ctx context.Context) RepositoryVulnerabilityScanningConfigPtrOutput {
	return o
}

func (o RepositoryVulnerabilityScanningConfigPtrOutput) Elem() RepositoryVulnerabilityScanningConfigOutput {
	return o.ApplyT(func(v *RepositoryVulnerabilityScanningConfig) RepositoryVulnerabilityScanningConfig {
		if v != nil {
			return *v
		}
		var ret RepositoryVulnerabilityScanningConfig
		return ret
	}).(RepositoryVulnerabilityScanningConfigOutput)
}

// This configures whether vulnerability scanning is automatically performed for artifacts pushed to this repository.
// Possible values are: `INHERITED`, `DISABLED`.
func (o RepositoryVulnerabilityScanningConfigPtrOutput) EnablementConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryVulnerabilityScanningConfig) *string {
		if v == nil {
			return nil
		}
		return v.EnablementConfig
	}).(pulumi.StringPtrOutput)
}

// (Output)
// This field returns whether scanning is active for this repository.
func (o RepositoryVulnerabilityScanningConfigPtrOutput) EnablementState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryVulnerabilityScanningConfig) *string {
		if v == nil {
			return nil
		}
		return v.EnablementState
	}).(pulumi.StringPtrOutput)
}

// (Output)
// This provides an explanation for the state of scanning on this repository.
func (o RepositoryVulnerabilityScanningConfigPtrOutput) EnablementStateReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryVulnerabilityScanningConfig) *string {
		if v == nil {
			return nil
		}
		return v.EnablementStateReason
	}).(pulumi.StringPtrOutput)
}

type GetRepositoryCleanupPolicy struct {
	// Policy action. Possible values: ["DELETE", "KEEP"]
	Action string `pulumi:"action"`
	// Policy condition for matching versions.
	Conditions []GetRepositoryCleanupPolicyCondition `pulumi:"conditions"`
	Id         string                                `pulumi:"id"`
	// Policy condition for retaining a minimum number of versions. May only be
	// specified with a Keep action.
	MostRecentVersions []GetRepositoryCleanupPolicyMostRecentVersion `pulumi:"mostRecentVersions"`
}

// GetRepositoryCleanupPolicyInput is an input type that accepts GetRepositoryCleanupPolicyArgs and GetRepositoryCleanupPolicyOutput values.
// You can construct a concrete instance of `GetRepositoryCleanupPolicyInput` via:
//
//	GetRepositoryCleanupPolicyArgs{...}
type GetRepositoryCleanupPolicyInput interface {
	pulumi.Input

	ToGetRepositoryCleanupPolicyOutput() GetRepositoryCleanupPolicyOutput
	ToGetRepositoryCleanupPolicyOutputWithContext(context.Context) GetRepositoryCleanupPolicyOutput
}

type GetRepositoryCleanupPolicyArgs struct {
	// Policy action. Possible values: ["DELETE", "KEEP"]
	Action pulumi.StringInput `pulumi:"action"`
	// Policy condition for matching versions.
	Conditions GetRepositoryCleanupPolicyConditionArrayInput `pulumi:"conditions"`
	Id         pulumi.StringInput                            `pulumi:"id"`
	// Policy condition for retaining a minimum number of versions. May only be
	// specified with a Keep action.
	MostRecentVersions GetRepositoryCleanupPolicyMostRecentVersionArrayInput `pulumi:"mostRecentVersions"`
}

func (GetRepositoryCleanupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryCleanupPolicy)(nil)).Elem()
}

func (i GetRepositoryCleanupPolicyArgs) ToGetRepositoryCleanupPolicyOutput() GetRepositoryCleanupPolicyOutput {
	return i.ToGetRepositoryCleanupPolicyOutputWithContext(context.Background())
}

func (i GetRepositoryCleanupPolicyArgs) ToGetRepositoryCleanupPolicyOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryCleanupPolicyOutput)
}

// GetRepositoryCleanupPolicyArrayInput is an input type that accepts GetRepositoryCleanupPolicyArray and GetRepositoryCleanupPolicyArrayOutput values.
// You can construct a concrete instance of `GetRepositoryCleanupPolicyArrayInput` via:
//
//	GetRepositoryCleanupPolicyArray{ GetRepositoryCleanupPolicyArgs{...} }
type GetRepositoryCleanupPolicyArrayInput interface {
	pulumi.Input

	ToGetRepositoryCleanupPolicyArrayOutput() GetRepositoryCleanupPolicyArrayOutput
	ToGetRepositoryCleanupPolicyArrayOutputWithContext(context.Context) GetRepositoryCleanupPolicyArrayOutput
}

type GetRepositoryCleanupPolicyArray []GetRepositoryCleanupPolicyInput

func (GetRepositoryCleanupPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryCleanupPolicy)(nil)).Elem()
}

func (i GetRepositoryCleanupPolicyArray) ToGetRepositoryCleanupPolicyArrayOutput() GetRepositoryCleanupPolicyArrayOutput {
	return i.ToGetRepositoryCleanupPolicyArrayOutputWithContext(context.Background())
}

func (i GetRepositoryCleanupPolicyArray) ToGetRepositoryCleanupPolicyArrayOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryCleanupPolicyArrayOutput)
}

type GetRepositoryCleanupPolicyOutput struct{ *pulumi.OutputState }

func (GetRepositoryCleanupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryCleanupPolicy)(nil)).Elem()
}

func (o GetRepositoryCleanupPolicyOutput) ToGetRepositoryCleanupPolicyOutput() GetRepositoryCleanupPolicyOutput {
	return o
}

func (o GetRepositoryCleanupPolicyOutput) ToGetRepositoryCleanupPolicyOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyOutput {
	return o
}

// Policy action. Possible values: ["DELETE", "KEEP"]
func (o GetRepositoryCleanupPolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicy) string { return v.Action }).(pulumi.StringOutput)
}

// Policy condition for matching versions.
func (o GetRepositoryCleanupPolicyOutput) Conditions() GetRepositoryCleanupPolicyConditionArrayOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicy) []GetRepositoryCleanupPolicyCondition { return v.Conditions }).(GetRepositoryCleanupPolicyConditionArrayOutput)
}

func (o GetRepositoryCleanupPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicy) string { return v.Id }).(pulumi.StringOutput)
}

// Policy condition for retaining a minimum number of versions. May only be
// specified with a Keep action.
func (o GetRepositoryCleanupPolicyOutput) MostRecentVersions() GetRepositoryCleanupPolicyMostRecentVersionArrayOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicy) []GetRepositoryCleanupPolicyMostRecentVersion {
		return v.MostRecentVersions
	}).(GetRepositoryCleanupPolicyMostRecentVersionArrayOutput)
}

type GetRepositoryCleanupPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryCleanupPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryCleanupPolicy)(nil)).Elem()
}

func (o GetRepositoryCleanupPolicyArrayOutput) ToGetRepositoryCleanupPolicyArrayOutput() GetRepositoryCleanupPolicyArrayOutput {
	return o
}

func (o GetRepositoryCleanupPolicyArrayOutput) ToGetRepositoryCleanupPolicyArrayOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyArrayOutput {
	return o
}

func (o GetRepositoryCleanupPolicyArrayOutput) Index(i pulumi.IntInput) GetRepositoryCleanupPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryCleanupPolicy {
		return vs[0].([]GetRepositoryCleanupPolicy)[vs[1].(int)]
	}).(GetRepositoryCleanupPolicyOutput)
}

type GetRepositoryCleanupPolicyCondition struct {
	// Match versions newer than a duration.
	NewerThan string `pulumi:"newerThan"`
	// Match versions older than a duration.
	OlderThan string `pulumi:"olderThan"`
	// Match versions by package prefix. Applied on any prefix match.
	PackageNamePrefixes []string `pulumi:"packageNamePrefixes"`
	// Match versions by tag prefix. Applied on any prefix match.
	TagPrefixes []string `pulumi:"tagPrefixes"`
	// Match versions by tag status. Default value: "ANY" Possible values: ["TAGGED", "UNTAGGED", "ANY"]
	TagState string `pulumi:"tagState"`
	// Match versions by version name prefix. Applied on any prefix match.
	VersionNamePrefixes []string `pulumi:"versionNamePrefixes"`
}

// GetRepositoryCleanupPolicyConditionInput is an input type that accepts GetRepositoryCleanupPolicyConditionArgs and GetRepositoryCleanupPolicyConditionOutput values.
// You can construct a concrete instance of `GetRepositoryCleanupPolicyConditionInput` via:
//
//	GetRepositoryCleanupPolicyConditionArgs{...}
type GetRepositoryCleanupPolicyConditionInput interface {
	pulumi.Input

	ToGetRepositoryCleanupPolicyConditionOutput() GetRepositoryCleanupPolicyConditionOutput
	ToGetRepositoryCleanupPolicyConditionOutputWithContext(context.Context) GetRepositoryCleanupPolicyConditionOutput
}

type GetRepositoryCleanupPolicyConditionArgs struct {
	// Match versions newer than a duration.
	NewerThan pulumi.StringInput `pulumi:"newerThan"`
	// Match versions older than a duration.
	OlderThan pulumi.StringInput `pulumi:"olderThan"`
	// Match versions by package prefix. Applied on any prefix match.
	PackageNamePrefixes pulumi.StringArrayInput `pulumi:"packageNamePrefixes"`
	// Match versions by tag prefix. Applied on any prefix match.
	TagPrefixes pulumi.StringArrayInput `pulumi:"tagPrefixes"`
	// Match versions by tag status. Default value: "ANY" Possible values: ["TAGGED", "UNTAGGED", "ANY"]
	TagState pulumi.StringInput `pulumi:"tagState"`
	// Match versions by version name prefix. Applied on any prefix match.
	VersionNamePrefixes pulumi.StringArrayInput `pulumi:"versionNamePrefixes"`
}

func (GetRepositoryCleanupPolicyConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryCleanupPolicyCondition)(nil)).Elem()
}

func (i GetRepositoryCleanupPolicyConditionArgs) ToGetRepositoryCleanupPolicyConditionOutput() GetRepositoryCleanupPolicyConditionOutput {
	return i.ToGetRepositoryCleanupPolicyConditionOutputWithContext(context.Background())
}

func (i GetRepositoryCleanupPolicyConditionArgs) ToGetRepositoryCleanupPolicyConditionOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryCleanupPolicyConditionOutput)
}

// GetRepositoryCleanupPolicyConditionArrayInput is an input type that accepts GetRepositoryCleanupPolicyConditionArray and GetRepositoryCleanupPolicyConditionArrayOutput values.
// You can construct a concrete instance of `GetRepositoryCleanupPolicyConditionArrayInput` via:
//
//	GetRepositoryCleanupPolicyConditionArray{ GetRepositoryCleanupPolicyConditionArgs{...} }
type GetRepositoryCleanupPolicyConditionArrayInput interface {
	pulumi.Input

	ToGetRepositoryCleanupPolicyConditionArrayOutput() GetRepositoryCleanupPolicyConditionArrayOutput
	ToGetRepositoryCleanupPolicyConditionArrayOutputWithContext(context.Context) GetRepositoryCleanupPolicyConditionArrayOutput
}

type GetRepositoryCleanupPolicyConditionArray []GetRepositoryCleanupPolicyConditionInput

func (GetRepositoryCleanupPolicyConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryCleanupPolicyCondition)(nil)).Elem()
}

func (i GetRepositoryCleanupPolicyConditionArray) ToGetRepositoryCleanupPolicyConditionArrayOutput() GetRepositoryCleanupPolicyConditionArrayOutput {
	return i.ToGetRepositoryCleanupPolicyConditionArrayOutputWithContext(context.Background())
}

func (i GetRepositoryCleanupPolicyConditionArray) ToGetRepositoryCleanupPolicyConditionArrayOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryCleanupPolicyConditionArrayOutput)
}

type GetRepositoryCleanupPolicyConditionOutput struct{ *pulumi.OutputState }

func (GetRepositoryCleanupPolicyConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryCleanupPolicyCondition)(nil)).Elem()
}

func (o GetRepositoryCleanupPolicyConditionOutput) ToGetRepositoryCleanupPolicyConditionOutput() GetRepositoryCleanupPolicyConditionOutput {
	return o
}

func (o GetRepositoryCleanupPolicyConditionOutput) ToGetRepositoryCleanupPolicyConditionOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyConditionOutput {
	return o
}

// Match versions newer than a duration.
func (o GetRepositoryCleanupPolicyConditionOutput) NewerThan() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicyCondition) string { return v.NewerThan }).(pulumi.StringOutput)
}

// Match versions older than a duration.
func (o GetRepositoryCleanupPolicyConditionOutput) OlderThan() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicyCondition) string { return v.OlderThan }).(pulumi.StringOutput)
}

// Match versions by package prefix. Applied on any prefix match.
func (o GetRepositoryCleanupPolicyConditionOutput) PackageNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicyCondition) []string { return v.PackageNamePrefixes }).(pulumi.StringArrayOutput)
}

// Match versions by tag prefix. Applied on any prefix match.
func (o GetRepositoryCleanupPolicyConditionOutput) TagPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicyCondition) []string { return v.TagPrefixes }).(pulumi.StringArrayOutput)
}

// Match versions by tag status. Default value: "ANY" Possible values: ["TAGGED", "UNTAGGED", "ANY"]
func (o GetRepositoryCleanupPolicyConditionOutput) TagState() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicyCondition) string { return v.TagState }).(pulumi.StringOutput)
}

// Match versions by version name prefix. Applied on any prefix match.
func (o GetRepositoryCleanupPolicyConditionOutput) VersionNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicyCondition) []string { return v.VersionNamePrefixes }).(pulumi.StringArrayOutput)
}

type GetRepositoryCleanupPolicyConditionArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryCleanupPolicyConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryCleanupPolicyCondition)(nil)).Elem()
}

func (o GetRepositoryCleanupPolicyConditionArrayOutput) ToGetRepositoryCleanupPolicyConditionArrayOutput() GetRepositoryCleanupPolicyConditionArrayOutput {
	return o
}

func (o GetRepositoryCleanupPolicyConditionArrayOutput) ToGetRepositoryCleanupPolicyConditionArrayOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyConditionArrayOutput {
	return o
}

func (o GetRepositoryCleanupPolicyConditionArrayOutput) Index(i pulumi.IntInput) GetRepositoryCleanupPolicyConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryCleanupPolicyCondition {
		return vs[0].([]GetRepositoryCleanupPolicyCondition)[vs[1].(int)]
	}).(GetRepositoryCleanupPolicyConditionOutput)
}

type GetRepositoryCleanupPolicyMostRecentVersion struct {
	// Minimum number of versions to keep.
	KeepCount int `pulumi:"keepCount"`
	// Match versions by package prefix. Applied on any prefix match.
	PackageNamePrefixes []string `pulumi:"packageNamePrefixes"`
}

// GetRepositoryCleanupPolicyMostRecentVersionInput is an input type that accepts GetRepositoryCleanupPolicyMostRecentVersionArgs and GetRepositoryCleanupPolicyMostRecentVersionOutput values.
// You can construct a concrete instance of `GetRepositoryCleanupPolicyMostRecentVersionInput` via:
//
//	GetRepositoryCleanupPolicyMostRecentVersionArgs{...}
type GetRepositoryCleanupPolicyMostRecentVersionInput interface {
	pulumi.Input

	ToGetRepositoryCleanupPolicyMostRecentVersionOutput() GetRepositoryCleanupPolicyMostRecentVersionOutput
	ToGetRepositoryCleanupPolicyMostRecentVersionOutputWithContext(context.Context) GetRepositoryCleanupPolicyMostRecentVersionOutput
}

type GetRepositoryCleanupPolicyMostRecentVersionArgs struct {
	// Minimum number of versions to keep.
	KeepCount pulumi.IntInput `pulumi:"keepCount"`
	// Match versions by package prefix. Applied on any prefix match.
	PackageNamePrefixes pulumi.StringArrayInput `pulumi:"packageNamePrefixes"`
}

func (GetRepositoryCleanupPolicyMostRecentVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryCleanupPolicyMostRecentVersion)(nil)).Elem()
}

func (i GetRepositoryCleanupPolicyMostRecentVersionArgs) ToGetRepositoryCleanupPolicyMostRecentVersionOutput() GetRepositoryCleanupPolicyMostRecentVersionOutput {
	return i.ToGetRepositoryCleanupPolicyMostRecentVersionOutputWithContext(context.Background())
}

func (i GetRepositoryCleanupPolicyMostRecentVersionArgs) ToGetRepositoryCleanupPolicyMostRecentVersionOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyMostRecentVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryCleanupPolicyMostRecentVersionOutput)
}

// GetRepositoryCleanupPolicyMostRecentVersionArrayInput is an input type that accepts GetRepositoryCleanupPolicyMostRecentVersionArray and GetRepositoryCleanupPolicyMostRecentVersionArrayOutput values.
// You can construct a concrete instance of `GetRepositoryCleanupPolicyMostRecentVersionArrayInput` via:
//
//	GetRepositoryCleanupPolicyMostRecentVersionArray{ GetRepositoryCleanupPolicyMostRecentVersionArgs{...} }
type GetRepositoryCleanupPolicyMostRecentVersionArrayInput interface {
	pulumi.Input

	ToGetRepositoryCleanupPolicyMostRecentVersionArrayOutput() GetRepositoryCleanupPolicyMostRecentVersionArrayOutput
	ToGetRepositoryCleanupPolicyMostRecentVersionArrayOutputWithContext(context.Context) GetRepositoryCleanupPolicyMostRecentVersionArrayOutput
}

type GetRepositoryCleanupPolicyMostRecentVersionArray []GetRepositoryCleanupPolicyMostRecentVersionInput

func (GetRepositoryCleanupPolicyMostRecentVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryCleanupPolicyMostRecentVersion)(nil)).Elem()
}

func (i GetRepositoryCleanupPolicyMostRecentVersionArray) ToGetRepositoryCleanupPolicyMostRecentVersionArrayOutput() GetRepositoryCleanupPolicyMostRecentVersionArrayOutput {
	return i.ToGetRepositoryCleanupPolicyMostRecentVersionArrayOutputWithContext(context.Background())
}

func (i GetRepositoryCleanupPolicyMostRecentVersionArray) ToGetRepositoryCleanupPolicyMostRecentVersionArrayOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyMostRecentVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryCleanupPolicyMostRecentVersionArrayOutput)
}

type GetRepositoryCleanupPolicyMostRecentVersionOutput struct{ *pulumi.OutputState }

func (GetRepositoryCleanupPolicyMostRecentVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryCleanupPolicyMostRecentVersion)(nil)).Elem()
}

func (o GetRepositoryCleanupPolicyMostRecentVersionOutput) ToGetRepositoryCleanupPolicyMostRecentVersionOutput() GetRepositoryCleanupPolicyMostRecentVersionOutput {
	return o
}

func (o GetRepositoryCleanupPolicyMostRecentVersionOutput) ToGetRepositoryCleanupPolicyMostRecentVersionOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyMostRecentVersionOutput {
	return o
}

// Minimum number of versions to keep.
func (o GetRepositoryCleanupPolicyMostRecentVersionOutput) KeepCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicyMostRecentVersion) int { return v.KeepCount }).(pulumi.IntOutput)
}

// Match versions by package prefix. Applied on any prefix match.
func (o GetRepositoryCleanupPolicyMostRecentVersionOutput) PackageNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicyMostRecentVersion) []string { return v.PackageNamePrefixes }).(pulumi.StringArrayOutput)
}

type GetRepositoryCleanupPolicyMostRecentVersionArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryCleanupPolicyMostRecentVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryCleanupPolicyMostRecentVersion)(nil)).Elem()
}

func (o GetRepositoryCleanupPolicyMostRecentVersionArrayOutput) ToGetRepositoryCleanupPolicyMostRecentVersionArrayOutput() GetRepositoryCleanupPolicyMostRecentVersionArrayOutput {
	return o
}

func (o GetRepositoryCleanupPolicyMostRecentVersionArrayOutput) ToGetRepositoryCleanupPolicyMostRecentVersionArrayOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyMostRecentVersionArrayOutput {
	return o
}

func (o GetRepositoryCleanupPolicyMostRecentVersionArrayOutput) Index(i pulumi.IntInput) GetRepositoryCleanupPolicyMostRecentVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryCleanupPolicyMostRecentVersion {
		return vs[0].([]GetRepositoryCleanupPolicyMostRecentVersion)[vs[1].(int)]
	}).(GetRepositoryCleanupPolicyMostRecentVersionOutput)
}

type GetRepositoryDockerConfig struct {
	// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
	ImmutableTags bool `pulumi:"immutableTags"`
}

// GetRepositoryDockerConfigInput is an input type that accepts GetRepositoryDockerConfigArgs and GetRepositoryDockerConfigOutput values.
// You can construct a concrete instance of `GetRepositoryDockerConfigInput` via:
//
//	GetRepositoryDockerConfigArgs{...}
type GetRepositoryDockerConfigInput interface {
	pulumi.Input

	ToGetRepositoryDockerConfigOutput() GetRepositoryDockerConfigOutput
	ToGetRepositoryDockerConfigOutputWithContext(context.Context) GetRepositoryDockerConfigOutput
}

type GetRepositoryDockerConfigArgs struct {
	// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
	ImmutableTags pulumi.BoolInput `pulumi:"immutableTags"`
}

func (GetRepositoryDockerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryDockerConfig)(nil)).Elem()
}

func (i GetRepositoryDockerConfigArgs) ToGetRepositoryDockerConfigOutput() GetRepositoryDockerConfigOutput {
	return i.ToGetRepositoryDockerConfigOutputWithContext(context.Background())
}

func (i GetRepositoryDockerConfigArgs) ToGetRepositoryDockerConfigOutputWithContext(ctx context.Context) GetRepositoryDockerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryDockerConfigOutput)
}

// GetRepositoryDockerConfigArrayInput is an input type that accepts GetRepositoryDockerConfigArray and GetRepositoryDockerConfigArrayOutput values.
// You can construct a concrete instance of `GetRepositoryDockerConfigArrayInput` via:
//
//	GetRepositoryDockerConfigArray{ GetRepositoryDockerConfigArgs{...} }
type GetRepositoryDockerConfigArrayInput interface {
	pulumi.Input

	ToGetRepositoryDockerConfigArrayOutput() GetRepositoryDockerConfigArrayOutput
	ToGetRepositoryDockerConfigArrayOutputWithContext(context.Context) GetRepositoryDockerConfigArrayOutput
}

type GetRepositoryDockerConfigArray []GetRepositoryDockerConfigInput

func (GetRepositoryDockerConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryDockerConfig)(nil)).Elem()
}

func (i GetRepositoryDockerConfigArray) ToGetRepositoryDockerConfigArrayOutput() GetRepositoryDockerConfigArrayOutput {
	return i.ToGetRepositoryDockerConfigArrayOutputWithContext(context.Background())
}

func (i GetRepositoryDockerConfigArray) ToGetRepositoryDockerConfigArrayOutputWithContext(ctx context.Context) GetRepositoryDockerConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryDockerConfigArrayOutput)
}

type GetRepositoryDockerConfigOutput struct{ *pulumi.OutputState }

func (GetRepositoryDockerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryDockerConfig)(nil)).Elem()
}

func (o GetRepositoryDockerConfigOutput) ToGetRepositoryDockerConfigOutput() GetRepositoryDockerConfigOutput {
	return o
}

func (o GetRepositoryDockerConfigOutput) ToGetRepositoryDockerConfigOutputWithContext(ctx context.Context) GetRepositoryDockerConfigOutput {
	return o
}

// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
func (o GetRepositoryDockerConfigOutput) ImmutableTags() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryDockerConfig) bool { return v.ImmutableTags }).(pulumi.BoolOutput)
}

type GetRepositoryDockerConfigArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryDockerConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryDockerConfig)(nil)).Elem()
}

func (o GetRepositoryDockerConfigArrayOutput) ToGetRepositoryDockerConfigArrayOutput() GetRepositoryDockerConfigArrayOutput {
	return o
}

func (o GetRepositoryDockerConfigArrayOutput) ToGetRepositoryDockerConfigArrayOutputWithContext(ctx context.Context) GetRepositoryDockerConfigArrayOutput {
	return o
}

func (o GetRepositoryDockerConfigArrayOutput) Index(i pulumi.IntInput) GetRepositoryDockerConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryDockerConfig {
		return vs[0].([]GetRepositoryDockerConfig)[vs[1].(int)]
	}).(GetRepositoryDockerConfigOutput)
}

type GetRepositoryMavenConfig struct {
	// The repository with this flag will allow publishing the same
	// snapshot versions.
	AllowSnapshotOverwrites bool `pulumi:"allowSnapshotOverwrites"`
	// Version policy defines the versions that the registry will accept. Default value: "VERSION_POLICY_UNSPECIFIED" Possible values: ["VERSION_POLICY_UNSPECIFIED", "RELEASE", "SNAPSHOT"]
	VersionPolicy string `pulumi:"versionPolicy"`
}

// GetRepositoryMavenConfigInput is an input type that accepts GetRepositoryMavenConfigArgs and GetRepositoryMavenConfigOutput values.
// You can construct a concrete instance of `GetRepositoryMavenConfigInput` via:
//
//	GetRepositoryMavenConfigArgs{...}
type GetRepositoryMavenConfigInput interface {
	pulumi.Input

	ToGetRepositoryMavenConfigOutput() GetRepositoryMavenConfigOutput
	ToGetRepositoryMavenConfigOutputWithContext(context.Context) GetRepositoryMavenConfigOutput
}

type GetRepositoryMavenConfigArgs struct {
	// The repository with this flag will allow publishing the same
	// snapshot versions.
	AllowSnapshotOverwrites pulumi.BoolInput `pulumi:"allowSnapshotOverwrites"`
	// Version policy defines the versions that the registry will accept. Default value: "VERSION_POLICY_UNSPECIFIED" Possible values: ["VERSION_POLICY_UNSPECIFIED", "RELEASE", "SNAPSHOT"]
	VersionPolicy pulumi.StringInput `pulumi:"versionPolicy"`
}

func (GetRepositoryMavenConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryMavenConfig)(nil)).Elem()
}

func (i GetRepositoryMavenConfigArgs) ToGetRepositoryMavenConfigOutput() GetRepositoryMavenConfigOutput {
	return i.ToGetRepositoryMavenConfigOutputWithContext(context.Background())
}

func (i GetRepositoryMavenConfigArgs) ToGetRepositoryMavenConfigOutputWithContext(ctx context.Context) GetRepositoryMavenConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryMavenConfigOutput)
}

// GetRepositoryMavenConfigArrayInput is an input type that accepts GetRepositoryMavenConfigArray and GetRepositoryMavenConfigArrayOutput values.
// You can construct a concrete instance of `GetRepositoryMavenConfigArrayInput` via:
//
//	GetRepositoryMavenConfigArray{ GetRepositoryMavenConfigArgs{...} }
type GetRepositoryMavenConfigArrayInput interface {
	pulumi.Input

	ToGetRepositoryMavenConfigArrayOutput() GetRepositoryMavenConfigArrayOutput
	ToGetRepositoryMavenConfigArrayOutputWithContext(context.Context) GetRepositoryMavenConfigArrayOutput
}

type GetRepositoryMavenConfigArray []GetRepositoryMavenConfigInput

func (GetRepositoryMavenConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryMavenConfig)(nil)).Elem()
}

func (i GetRepositoryMavenConfigArray) ToGetRepositoryMavenConfigArrayOutput() GetRepositoryMavenConfigArrayOutput {
	return i.ToGetRepositoryMavenConfigArrayOutputWithContext(context.Background())
}

func (i GetRepositoryMavenConfigArray) ToGetRepositoryMavenConfigArrayOutputWithContext(ctx context.Context) GetRepositoryMavenConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryMavenConfigArrayOutput)
}

type GetRepositoryMavenConfigOutput struct{ *pulumi.OutputState }

func (GetRepositoryMavenConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryMavenConfig)(nil)).Elem()
}

func (o GetRepositoryMavenConfigOutput) ToGetRepositoryMavenConfigOutput() GetRepositoryMavenConfigOutput {
	return o
}

func (o GetRepositoryMavenConfigOutput) ToGetRepositoryMavenConfigOutputWithContext(ctx context.Context) GetRepositoryMavenConfigOutput {
	return o
}

// The repository with this flag will allow publishing the same
// snapshot versions.
func (o GetRepositoryMavenConfigOutput) AllowSnapshotOverwrites() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryMavenConfig) bool { return v.AllowSnapshotOverwrites }).(pulumi.BoolOutput)
}

// Version policy defines the versions that the registry will accept. Default value: "VERSION_POLICY_UNSPECIFIED" Possible values: ["VERSION_POLICY_UNSPECIFIED", "RELEASE", "SNAPSHOT"]
func (o GetRepositoryMavenConfigOutput) VersionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryMavenConfig) string { return v.VersionPolicy }).(pulumi.StringOutput)
}

type GetRepositoryMavenConfigArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryMavenConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryMavenConfig)(nil)).Elem()
}

func (o GetRepositoryMavenConfigArrayOutput) ToGetRepositoryMavenConfigArrayOutput() GetRepositoryMavenConfigArrayOutput {
	return o
}

func (o GetRepositoryMavenConfigArrayOutput) ToGetRepositoryMavenConfigArrayOutputWithContext(ctx context.Context) GetRepositoryMavenConfigArrayOutput {
	return o
}

func (o GetRepositoryMavenConfigArrayOutput) Index(i pulumi.IntInput) GetRepositoryMavenConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryMavenConfig {
		return vs[0].([]GetRepositoryMavenConfig)[vs[1].(int)]
	}).(GetRepositoryMavenConfigOutput)
}

type GetRepositoryRemoteRepositoryConfig struct {
	// Specific settings for an Apt remote repository.
	AptRepositories []GetRepositoryRemoteRepositoryConfigAptRepository `pulumi:"aptRepositories"`
	// Specific settings for an Artifact Registory remote repository.
	CommonRepositories []GetRepositoryRemoteRepositoryConfigCommonRepository `pulumi:"commonRepositories"`
	// The description of the remote source.
	Description string `pulumi:"description"`
	// If true, the remote repository upstream and upstream credentials will
	// not be validated.
	DisableUpstreamValidation bool `pulumi:"disableUpstreamValidation"`
	// Specific settings for a Docker remote repository.
	DockerRepositories []GetRepositoryRemoteRepositoryConfigDockerRepository `pulumi:"dockerRepositories"`
	// Specific settings for a Maven remote repository.
	MavenRepositories []GetRepositoryRemoteRepositoryConfigMavenRepository `pulumi:"mavenRepositories"`
	// Specific settings for an Npm remote repository.
	NpmRepositories []GetRepositoryRemoteRepositoryConfigNpmRepository `pulumi:"npmRepositories"`
	// Specific settings for a Python remote repository.
	PythonRepositories []GetRepositoryRemoteRepositoryConfigPythonRepository `pulumi:"pythonRepositories"`
	// The credentials used to access the remote repository.
	UpstreamCredentials []GetRepositoryRemoteRepositoryConfigUpstreamCredential `pulumi:"upstreamCredentials"`
	// Specific settings for an Yum remote repository.
	YumRepositories []GetRepositoryRemoteRepositoryConfigYumRepository `pulumi:"yumRepositories"`
}

// GetRepositoryRemoteRepositoryConfigInput is an input type that accepts GetRepositoryRemoteRepositoryConfigArgs and GetRepositoryRemoteRepositoryConfigOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigInput` via:
//
//	GetRepositoryRemoteRepositoryConfigArgs{...}
type GetRepositoryRemoteRepositoryConfigInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigOutput() GetRepositoryRemoteRepositoryConfigOutput
	ToGetRepositoryRemoteRepositoryConfigOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigOutput
}

type GetRepositoryRemoteRepositoryConfigArgs struct {
	// Specific settings for an Apt remote repository.
	AptRepositories GetRepositoryRemoteRepositoryConfigAptRepositoryArrayInput `pulumi:"aptRepositories"`
	// Specific settings for an Artifact Registory remote repository.
	CommonRepositories GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayInput `pulumi:"commonRepositories"`
	// The description of the remote source.
	Description pulumi.StringInput `pulumi:"description"`
	// If true, the remote repository upstream and upstream credentials will
	// not be validated.
	DisableUpstreamValidation pulumi.BoolInput `pulumi:"disableUpstreamValidation"`
	// Specific settings for a Docker remote repository.
	DockerRepositories GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayInput `pulumi:"dockerRepositories"`
	// Specific settings for a Maven remote repository.
	MavenRepositories GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayInput `pulumi:"mavenRepositories"`
	// Specific settings for an Npm remote repository.
	NpmRepositories GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayInput `pulumi:"npmRepositories"`
	// Specific settings for a Python remote repository.
	PythonRepositories GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayInput `pulumi:"pythonRepositories"`
	// The credentials used to access the remote repository.
	UpstreamCredentials GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayInput `pulumi:"upstreamCredentials"`
	// Specific settings for an Yum remote repository.
	YumRepositories GetRepositoryRemoteRepositoryConfigYumRepositoryArrayInput `pulumi:"yumRepositories"`
}

func (GetRepositoryRemoteRepositoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfig)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigArgs) ToGetRepositoryRemoteRepositoryConfigOutput() GetRepositoryRemoteRepositoryConfigOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigArgs) ToGetRepositoryRemoteRepositoryConfigOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigOutput)
}

// GetRepositoryRemoteRepositoryConfigArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigArray and GetRepositoryRemoteRepositoryConfigArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigArray{ GetRepositoryRemoteRepositoryConfigArgs{...} }
type GetRepositoryRemoteRepositoryConfigArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigArrayOutput() GetRepositoryRemoteRepositoryConfigArrayOutput
	ToGetRepositoryRemoteRepositoryConfigArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigArrayOutput
}

type GetRepositoryRemoteRepositoryConfigArray []GetRepositoryRemoteRepositoryConfigInput

func (GetRepositoryRemoteRepositoryConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfig)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigArray) ToGetRepositoryRemoteRepositoryConfigArrayOutput() GetRepositoryRemoteRepositoryConfigArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigArray) ToGetRepositoryRemoteRepositoryConfigArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfig)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigOutput) ToGetRepositoryRemoteRepositoryConfigOutput() GetRepositoryRemoteRepositoryConfigOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigOutput) ToGetRepositoryRemoteRepositoryConfigOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigOutput {
	return o
}

// Specific settings for an Apt remote repository.
func (o GetRepositoryRemoteRepositoryConfigOutput) AptRepositories() GetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfig) []GetRepositoryRemoteRepositoryConfigAptRepository {
		return v.AptRepositories
	}).(GetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput)
}

// Specific settings for an Artifact Registory remote repository.
func (o GetRepositoryRemoteRepositoryConfigOutput) CommonRepositories() GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfig) []GetRepositoryRemoteRepositoryConfigCommonRepository {
		return v.CommonRepositories
	}).(GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput)
}

// The description of the remote source.
func (o GetRepositoryRemoteRepositoryConfigOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfig) string { return v.Description }).(pulumi.StringOutput)
}

// If true, the remote repository upstream and upstream credentials will
// not be validated.
func (o GetRepositoryRemoteRepositoryConfigOutput) DisableUpstreamValidation() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfig) bool { return v.DisableUpstreamValidation }).(pulumi.BoolOutput)
}

// Specific settings for a Docker remote repository.
func (o GetRepositoryRemoteRepositoryConfigOutput) DockerRepositories() GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfig) []GetRepositoryRemoteRepositoryConfigDockerRepository {
		return v.DockerRepositories
	}).(GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput)
}

// Specific settings for a Maven remote repository.
func (o GetRepositoryRemoteRepositoryConfigOutput) MavenRepositories() GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfig) []GetRepositoryRemoteRepositoryConfigMavenRepository {
		return v.MavenRepositories
	}).(GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput)
}

// Specific settings for an Npm remote repository.
func (o GetRepositoryRemoteRepositoryConfigOutput) NpmRepositories() GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfig) []GetRepositoryRemoteRepositoryConfigNpmRepository {
		return v.NpmRepositories
	}).(GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput)
}

// Specific settings for a Python remote repository.
func (o GetRepositoryRemoteRepositoryConfigOutput) PythonRepositories() GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfig) []GetRepositoryRemoteRepositoryConfigPythonRepository {
		return v.PythonRepositories
	}).(GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput)
}

// The credentials used to access the remote repository.
func (o GetRepositoryRemoteRepositoryConfigOutput) UpstreamCredentials() GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfig) []GetRepositoryRemoteRepositoryConfigUpstreamCredential {
		return v.UpstreamCredentials
	}).(GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput)
}

// Specific settings for an Yum remote repository.
func (o GetRepositoryRemoteRepositoryConfigOutput) YumRepositories() GetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfig) []GetRepositoryRemoteRepositoryConfigYumRepository {
		return v.YumRepositories
	}).(GetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfig)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigArrayOutput) ToGetRepositoryRemoteRepositoryConfigArrayOutput() GetRepositoryRemoteRepositoryConfigArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigArrayOutput) ToGetRepositoryRemoteRepositoryConfigArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfig {
		return vs[0].([]GetRepositoryRemoteRepositoryConfig)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigOutput)
}

type GetRepositoryRemoteRepositoryConfigAptRepository struct {
	// One of the publicly available Apt repositories supported by Artifact Registry.
	PublicRepositories []GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepository `pulumi:"publicRepositories"`
}

// GetRepositoryRemoteRepositoryConfigAptRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigAptRepositoryArgs and GetRepositoryRemoteRepositoryConfigAptRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigAptRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigAptRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigAptRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigAptRepositoryOutput() GetRepositoryRemoteRepositoryConfigAptRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigAptRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigAptRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigAptRepositoryArgs struct {
	// One of the publicly available Apt repositories supported by Artifact Registry.
	PublicRepositories GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayInput `pulumi:"publicRepositories"`
}

func (GetRepositoryRemoteRepositoryConfigAptRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigAptRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigAptRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigAptRepositoryOutput() GetRepositoryRemoteRepositoryConfigAptRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigAptRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigAptRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigAptRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigAptRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigAptRepositoryOutput)
}

// GetRepositoryRemoteRepositoryConfigAptRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigAptRepositoryArray and GetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigAptRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigAptRepositoryArray{ GetRepositoryRemoteRepositoryConfigAptRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigAptRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigAptRepositoryArray []GetRepositoryRemoteRepositoryConfigAptRepositoryInput

func (GetRepositoryRemoteRepositoryConfigAptRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigAptRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigAptRepositoryArray) ToGetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigAptRepositoryArray) ToGetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigAptRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigAptRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigAptRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigAptRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigAptRepositoryOutput() GetRepositoryRemoteRepositoryConfigAptRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigAptRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigAptRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigAptRepositoryOutput {
	return o
}

// One of the publicly available Apt repositories supported by Artifact Registry.
func (o GetRepositoryRemoteRepositoryConfigAptRepositoryOutput) PublicRepositories() GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigAptRepository) []GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepository {
		return v.PublicRepositories
	}).(GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigAptRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigAptRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigAptRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigAptRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigAptRepositoryOutput)
}

type GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepository struct {
	// A common public repository base for Apt, e.g. '"debian/dists/buster"' Possible values: ["DEBIAN", "UBUNTU"]
	RepositoryBase string `pulumi:"repositoryBase"`
	// Specific repository from the base.
	RepositoryPath string `pulumi:"repositoryPath"`
}

// GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs and GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput() GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs struct {
	// A common public repository base for Apt, e.g. '"debian/dists/buster"' Possible values: ["DEBIAN", "UBUNTU"]
	RepositoryBase pulumi.StringInput `pulumi:"repositoryBase"`
	// Specific repository from the base.
	RepositoryPath pulumi.StringInput `pulumi:"repositoryPath"`
}

func (GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput() GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput)
}

// GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArray and GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArray{ GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArray []GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryInput

func (GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArray) ToGetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArray) ToGetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput() GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput {
	return o
}

// A common public repository base for Apt, e.g. '"debian/dists/buster"' Possible values: ["DEBIAN", "UBUNTU"]
func (o GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) RepositoryBase() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepository) string {
		return v.RepositoryBase
	}).(pulumi.StringOutput)
}

// Specific repository from the base.
func (o GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) RepositoryPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepository) string {
		return v.RepositoryPath
	}).(pulumi.StringOutput)
}

type GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput)
}

type GetRepositoryRemoteRepositoryConfigCommonRepository struct {
	// One of:
	// a. Artifact Registry Repository resource, e.g. 'projects/UPSTREAM_PROJECT_ID/locations/REGION/repositories/UPSTREAM_REPOSITORY'
	// b. URI to the registry, e.g. '"https://registry-1.docker.io"'
	// c. URI to Artifact Registry Repository, e.g. '"https://REGION-docker.pkg.dev/UPSTREAM_PROJECT_ID/UPSTREAM_REPOSITORY"'
	Uri string `pulumi:"uri"`
}

// GetRepositoryRemoteRepositoryConfigCommonRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigCommonRepositoryArgs and GetRepositoryRemoteRepositoryConfigCommonRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigCommonRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigCommonRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigCommonRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigCommonRepositoryOutput() GetRepositoryRemoteRepositoryConfigCommonRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigCommonRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigCommonRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigCommonRepositoryArgs struct {
	// One of:
	// a. Artifact Registry Repository resource, e.g. 'projects/UPSTREAM_PROJECT_ID/locations/REGION/repositories/UPSTREAM_REPOSITORY'
	// b. URI to the registry, e.g. '"https://registry-1.docker.io"'
	// c. URI to Artifact Registry Repository, e.g. '"https://REGION-docker.pkg.dev/UPSTREAM_PROJECT_ID/UPSTREAM_REPOSITORY"'
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetRepositoryRemoteRepositoryConfigCommonRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigCommonRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigCommonRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigCommonRepositoryOutput() GetRepositoryRemoteRepositoryConfigCommonRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigCommonRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigCommonRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigCommonRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigCommonRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigCommonRepositoryOutput)
}

// GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigCommonRepositoryArray and GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigCommonRepositoryArray{ GetRepositoryRemoteRepositoryConfigCommonRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigCommonRepositoryArray []GetRepositoryRemoteRepositoryConfigCommonRepositoryInput

func (GetRepositoryRemoteRepositoryConfigCommonRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigCommonRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigCommonRepositoryArray) ToGetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigCommonRepositoryArray) ToGetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigCommonRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigCommonRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigCommonRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigCommonRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigCommonRepositoryOutput() GetRepositoryRemoteRepositoryConfigCommonRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigCommonRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigCommonRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigCommonRepositoryOutput {
	return o
}

// One of:
// a. Artifact Registry Repository resource, e.g. 'projects/UPSTREAM_PROJECT_ID/locations/REGION/repositories/UPSTREAM_REPOSITORY'
// b. URI to the registry, e.g. '"https://registry-1.docker.io"'
// c. URI to Artifact Registry Repository, e.g. '"https://REGION-docker.pkg.dev/UPSTREAM_PROJECT_ID/UPSTREAM_REPOSITORY"'
func (o GetRepositoryRemoteRepositoryConfigCommonRepositoryOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigCommonRepository) string { return v.Uri }).(pulumi.StringOutput)
}

type GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigCommonRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigCommonRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigCommonRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigCommonRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigCommonRepositoryOutput)
}

type GetRepositoryRemoteRepositoryConfigDockerRepository struct {
	// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
	CustomRepositories []GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository `pulumi:"customRepositories"`
	// Address of the remote repository. Default value: "DOCKER_HUB" Possible values: ["DOCKER_HUB"]
	PublicRepository string `pulumi:"publicRepository"`
}

// GetRepositoryRemoteRepositoryConfigDockerRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs and GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigDockerRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigDockerRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigDockerRepositoryOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs struct {
	// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
	CustomRepositories GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayInput `pulumi:"customRepositories"`
	// Address of the remote repository. Default value: "DOCKER_HUB" Possible values: ["DOCKER_HUB"]
	PublicRepository pulumi.StringInput `pulumi:"publicRepository"`
}

func (GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigDockerRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput)
}

// GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigDockerRepositoryArray and GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigDockerRepositoryArray{ GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigDockerRepositoryArray []GetRepositoryRemoteRepositoryConfigDockerRepositoryInput

func (GetRepositoryRemoteRepositoryConfigDockerRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigDockerRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigDockerRepositoryArray) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigDockerRepositoryArray) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigDockerRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return o
}

// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput) CustomRepositories() GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigDockerRepository) []GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository {
		return v.CustomRepositories
	}).(GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput)
}

// Address of the remote repository. Default value: "DOCKER_HUB" Possible values: ["DOCKER_HUB"]
func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput) PublicRepository() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigDockerRepository) string { return v.PublicRepository }).(pulumi.StringOutput)
}

type GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigDockerRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigDockerRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigDockerRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput)
}

type GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository struct {
	// Specific uri to the registry, e.g. '"https://registry-1.docker.io"'
	Uri string `pulumi:"uri"`
}

// GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs and GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs struct {
	// Specific uri to the registry, e.g. '"https://registry-1.docker.io"'
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput)
}

// GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArray and GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArray{ GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArray []GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryInput

func (GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArray) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArray) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput {
	return o
}

// Specific uri to the registry, e.g. '"https://registry-1.docker.io"'
func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository) string { return v.Uri }).(pulumi.StringOutput)
}

type GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput)
}

type GetRepositoryRemoteRepositoryConfigMavenRepository struct {
	// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
	CustomRepositories []GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository `pulumi:"customRepositories"`
	// Address of the remote repository. Default value: "MAVEN_CENTRAL" Possible values: ["MAVEN_CENTRAL"]
	PublicRepository string `pulumi:"publicRepository"`
}

// GetRepositoryRemoteRepositoryConfigMavenRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs and GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigMavenRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigMavenRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigMavenRepositoryOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs struct {
	// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
	CustomRepositories GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayInput `pulumi:"customRepositories"`
	// Address of the remote repository. Default value: "MAVEN_CENTRAL" Possible values: ["MAVEN_CENTRAL"]
	PublicRepository pulumi.StringInput `pulumi:"publicRepository"`
}

func (GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigMavenRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput)
}

// GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigMavenRepositoryArray and GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigMavenRepositoryArray{ GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigMavenRepositoryArray []GetRepositoryRemoteRepositoryConfigMavenRepositoryInput

func (GetRepositoryRemoteRepositoryConfigMavenRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigMavenRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigMavenRepositoryArray) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigMavenRepositoryArray) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigMavenRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return o
}

// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput) CustomRepositories() GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigMavenRepository) []GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository {
		return v.CustomRepositories
	}).(GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput)
}

// Address of the remote repository. Default value: "MAVEN_CENTRAL" Possible values: ["MAVEN_CENTRAL"]
func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput) PublicRepository() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigMavenRepository) string { return v.PublicRepository }).(pulumi.StringOutput)
}

type GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigMavenRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigMavenRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigMavenRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput)
}

type GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository struct {
	// Specific uri to the registry, e.g. '"https://repo.maven.apache.org/maven2"'
	Uri string `pulumi:"uri"`
}

// GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs and GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs struct {
	// Specific uri to the registry, e.g. '"https://repo.maven.apache.org/maven2"'
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput)
}

// GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArray and GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArray{ GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArray []GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryInput

func (GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArray) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArray) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput {
	return o
}

// Specific uri to the registry, e.g. '"https://repo.maven.apache.org/maven2"'
func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository) string { return v.Uri }).(pulumi.StringOutput)
}

type GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput)
}

type GetRepositoryRemoteRepositoryConfigNpmRepository struct {
	// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
	CustomRepositories []GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository `pulumi:"customRepositories"`
	// Address of the remote repository. Default value: "NPMJS" Possible values: ["NPMJS"]
	PublicRepository string `pulumi:"publicRepository"`
}

// GetRepositoryRemoteRepositoryConfigNpmRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs and GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigNpmRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigNpmRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigNpmRepositoryOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs struct {
	// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
	CustomRepositories GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayInput `pulumi:"customRepositories"`
	// Address of the remote repository. Default value: "NPMJS" Possible values: ["NPMJS"]
	PublicRepository pulumi.StringInput `pulumi:"publicRepository"`
}

func (GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigNpmRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput)
}

// GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigNpmRepositoryArray and GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigNpmRepositoryArray{ GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigNpmRepositoryArray []GetRepositoryRemoteRepositoryConfigNpmRepositoryInput

func (GetRepositoryRemoteRepositoryConfigNpmRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigNpmRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigNpmRepositoryArray) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigNpmRepositoryArray) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigNpmRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return o
}

// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput) CustomRepositories() GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigNpmRepository) []GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository {
		return v.CustomRepositories
	}).(GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput)
}

// Address of the remote repository. Default value: "NPMJS" Possible values: ["NPMJS"]
func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput) PublicRepository() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigNpmRepository) string { return v.PublicRepository }).(pulumi.StringOutput)
}

type GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigNpmRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigNpmRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigNpmRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput)
}

type GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository struct {
	// Specific uri to the registry, e.g. '"https://registry.npmjs.org"'
	Uri string `pulumi:"uri"`
}

// GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs and GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs struct {
	// Specific uri to the registry, e.g. '"https://registry.npmjs.org"'
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput)
}

// GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArray and GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArray{ GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArray []GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryInput

func (GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArray) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArray) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput {
	return o
}

// Specific uri to the registry, e.g. '"https://registry.npmjs.org"'
func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository) string { return v.Uri }).(pulumi.StringOutput)
}

type GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput)
}

type GetRepositoryRemoteRepositoryConfigPythonRepository struct {
	// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
	CustomRepositories []GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository `pulumi:"customRepositories"`
	// Address of the remote repository. Default value: "PYPI" Possible values: ["PYPI"]
	PublicRepository string `pulumi:"publicRepository"`
}

// GetRepositoryRemoteRepositoryConfigPythonRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs and GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigPythonRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigPythonRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigPythonRepositoryOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs struct {
	// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
	CustomRepositories GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayInput `pulumi:"customRepositories"`
	// Address of the remote repository. Default value: "PYPI" Possible values: ["PYPI"]
	PublicRepository pulumi.StringInput `pulumi:"publicRepository"`
}

func (GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigPythonRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput)
}

// GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigPythonRepositoryArray and GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigPythonRepositoryArray{ GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigPythonRepositoryArray []GetRepositoryRemoteRepositoryConfigPythonRepositoryInput

func (GetRepositoryRemoteRepositoryConfigPythonRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigPythonRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigPythonRepositoryArray) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigPythonRepositoryArray) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigPythonRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return o
}

// [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput) CustomRepositories() GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigPythonRepository) []GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository {
		return v.CustomRepositories
	}).(GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput)
}

// Address of the remote repository. Default value: "PYPI" Possible values: ["PYPI"]
func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput) PublicRepository() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigPythonRepository) string { return v.PublicRepository }).(pulumi.StringOutput)
}

type GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigPythonRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigPythonRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigPythonRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput)
}

type GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository struct {
	// Specific uri to the registry, e.g. '"https://pypi.io"'
	Uri string `pulumi:"uri"`
}

// GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs and GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs struct {
	// Specific uri to the registry, e.g. '"https://pypi.io"'
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput)
}

// GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArray and GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArray{ GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArray []GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryInput

func (GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArray) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArray) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput {
	return o
}

// Specific uri to the registry, e.g. '"https://pypi.io"'
func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository) string { return v.Uri }).(pulumi.StringOutput)
}

type GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput)
}

type GetRepositoryRemoteRepositoryConfigUpstreamCredential struct {
	// Use username and password to access the remote repository.
	UsernamePasswordCredentials []GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential `pulumi:"usernamePasswordCredentials"`
}

// GetRepositoryRemoteRepositoryConfigUpstreamCredentialInput is an input type that accepts GetRepositoryRemoteRepositoryConfigUpstreamCredentialArgs and GetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigUpstreamCredentialInput` via:
//
//	GetRepositoryRemoteRepositoryConfigUpstreamCredentialArgs{...}
type GetRepositoryRemoteRepositoryConfigUpstreamCredentialInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput() GetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput
	ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput
}

type GetRepositoryRemoteRepositoryConfigUpstreamCredentialArgs struct {
	// Use username and password to access the remote repository.
	UsernamePasswordCredentials GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayInput `pulumi:"usernamePasswordCredentials"`
}

func (GetRepositoryRemoteRepositoryConfigUpstreamCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigUpstreamCredential)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigUpstreamCredentialArgs) ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput() GetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigUpstreamCredentialArgs) ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput)
}

// GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigUpstreamCredentialArray and GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigUpstreamCredentialArray{ GetRepositoryRemoteRepositoryConfigUpstreamCredentialArgs{...} }
type GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput() GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput
	ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput
}

type GetRepositoryRemoteRepositoryConfigUpstreamCredentialArray []GetRepositoryRemoteRepositoryConfigUpstreamCredentialInput

func (GetRepositoryRemoteRepositoryConfigUpstreamCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigUpstreamCredential)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigUpstreamCredentialArray) ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput() GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigUpstreamCredentialArray) ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigUpstreamCredential)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput) ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput() GetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput) ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput {
	return o
}

// Use username and password to access the remote repository.
func (o GetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput) UsernamePasswordCredentials() GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigUpstreamCredential) []GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential {
		return v.UsernamePasswordCredentials
	}).(GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigUpstreamCredential)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput) ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput() GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput) ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigUpstreamCredential {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigUpstreamCredential)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput)
}

type GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential struct {
	// The Secret Manager key version that holds the password to access the
	// remote repository. Must be in the format of
	// 'projects/{project}/secrets/{secret}/versions/{version}'.
	PasswordSecretVersion string `pulumi:"passwordSecretVersion"`
	// The username to access the remote repository.
	Username string `pulumi:"username"`
}

// GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialInput is an input type that accepts GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArgs and GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialInput` via:
//
//	GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArgs{...}
type GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput() GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput
	ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput
}

type GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArgs struct {
	// The Secret Manager key version that holds the password to access the
	// remote repository. Must be in the format of
	// 'projects/{project}/secrets/{secret}/versions/{version}'.
	PasswordSecretVersion pulumi.StringInput `pulumi:"passwordSecretVersion"`
	// The username to access the remote repository.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArgs) ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput() GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArgs) ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput)
}

// GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArray and GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArray{ GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArgs{...} }
type GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput() GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput
	ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput
}

type GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArray []GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialInput

func (GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArray) ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput() GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArray) ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput) ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput() GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput) ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput {
	return o
}

// The Secret Manager key version that holds the password to access the
// remote repository. Must be in the format of
// 'projects/{project}/secrets/{secret}/versions/{version}'.
func (o GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput) PasswordSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential) string {
		return v.PasswordSecretVersion
	}).(pulumi.StringOutput)
}

// The username to access the remote repository.
func (o GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential) string {
		return v.Username
	}).(pulumi.StringOutput)
}

type GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput) ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput() GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput) ToGetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput)
}

type GetRepositoryRemoteRepositoryConfigYumRepository struct {
	// One of the publicly available Yum repositories supported by Artifact Registry.
	PublicRepositories []GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepository `pulumi:"publicRepositories"`
}

// GetRepositoryRemoteRepositoryConfigYumRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigYumRepositoryArgs and GetRepositoryRemoteRepositoryConfigYumRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigYumRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigYumRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigYumRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigYumRepositoryOutput() GetRepositoryRemoteRepositoryConfigYumRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigYumRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigYumRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigYumRepositoryArgs struct {
	// One of the publicly available Yum repositories supported by Artifact Registry.
	PublicRepositories GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayInput `pulumi:"publicRepositories"`
}

func (GetRepositoryRemoteRepositoryConfigYumRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigYumRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigYumRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigYumRepositoryOutput() GetRepositoryRemoteRepositoryConfigYumRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigYumRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigYumRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigYumRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigYumRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigYumRepositoryOutput)
}

// GetRepositoryRemoteRepositoryConfigYumRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigYumRepositoryArray and GetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigYumRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigYumRepositoryArray{ GetRepositoryRemoteRepositoryConfigYumRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigYumRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigYumRepositoryArray []GetRepositoryRemoteRepositoryConfigYumRepositoryInput

func (GetRepositoryRemoteRepositoryConfigYumRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigYumRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigYumRepositoryArray) ToGetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigYumRepositoryArray) ToGetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigYumRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigYumRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigYumRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigYumRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigYumRepositoryOutput() GetRepositoryRemoteRepositoryConfigYumRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigYumRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigYumRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigYumRepositoryOutput {
	return o
}

// One of the publicly available Yum repositories supported by Artifact Registry.
func (o GetRepositoryRemoteRepositoryConfigYumRepositoryOutput) PublicRepositories() GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigYumRepository) []GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepository {
		return v.PublicRepositories
	}).(GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigYumRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigYumRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigYumRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigYumRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigYumRepositoryOutput)
}

type GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepository struct {
	// A common public repository base for Yum. Possible values: ["CENTOS", "CENTOS_DEBUG", "CENTOS_VAULT", "CENTOS_STREAM", "ROCKY", "EPEL"]
	RepositoryBase string `pulumi:"repositoryBase"`
	// Specific repository from the base, e.g. '"pub/rocky/9/BaseOS/x86_64/os"'
	RepositoryPath string `pulumi:"repositoryPath"`
}

// GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs and GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput() GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs struct {
	// A common public repository base for Yum. Possible values: ["CENTOS", "CENTOS_DEBUG", "CENTOS_VAULT", "CENTOS_STREAM", "ROCKY", "EPEL"]
	RepositoryBase pulumi.StringInput `pulumi:"repositoryBase"`
	// Specific repository from the base, e.g. '"pub/rocky/9/BaseOS/x86_64/os"'
	RepositoryPath pulumi.StringInput `pulumi:"repositoryPath"`
}

func (GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput() GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput)
}

// GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArray and GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArray{ GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArray []GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryInput

func (GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArray) ToGetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArray) ToGetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput() GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput {
	return o
}

// A common public repository base for Yum. Possible values: ["CENTOS", "CENTOS_DEBUG", "CENTOS_VAULT", "CENTOS_STREAM", "ROCKY", "EPEL"]
func (o GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) RepositoryBase() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepository) string {
		return v.RepositoryBase
	}).(pulumi.StringOutput)
}

// Specific repository from the base, e.g. '"pub/rocky/9/BaseOS/x86_64/os"'
func (o GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) RepositoryPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepository) string {
		return v.RepositoryPath
	}).(pulumi.StringOutput)
}

type GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput)
}

type GetRepositoryVirtualRepositoryConfig struct {
	// Policies that configure the upstream artifacts distributed by the Virtual
	// Repository. Upstream policies cannot be set on a standard repository.
	UpstreamPolicies []GetRepositoryVirtualRepositoryConfigUpstreamPolicy `pulumi:"upstreamPolicies"`
}

// GetRepositoryVirtualRepositoryConfigInput is an input type that accepts GetRepositoryVirtualRepositoryConfigArgs and GetRepositoryVirtualRepositoryConfigOutput values.
// You can construct a concrete instance of `GetRepositoryVirtualRepositoryConfigInput` via:
//
//	GetRepositoryVirtualRepositoryConfigArgs{...}
type GetRepositoryVirtualRepositoryConfigInput interface {
	pulumi.Input

	ToGetRepositoryVirtualRepositoryConfigOutput() GetRepositoryVirtualRepositoryConfigOutput
	ToGetRepositoryVirtualRepositoryConfigOutputWithContext(context.Context) GetRepositoryVirtualRepositoryConfigOutput
}

type GetRepositoryVirtualRepositoryConfigArgs struct {
	// Policies that configure the upstream artifacts distributed by the Virtual
	// Repository. Upstream policies cannot be set on a standard repository.
	UpstreamPolicies GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput `pulumi:"upstreamPolicies"`
}

func (GetRepositoryVirtualRepositoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryVirtualRepositoryConfig)(nil)).Elem()
}

func (i GetRepositoryVirtualRepositoryConfigArgs) ToGetRepositoryVirtualRepositoryConfigOutput() GetRepositoryVirtualRepositoryConfigOutput {
	return i.ToGetRepositoryVirtualRepositoryConfigOutputWithContext(context.Background())
}

func (i GetRepositoryVirtualRepositoryConfigArgs) ToGetRepositoryVirtualRepositoryConfigOutputWithContext(ctx context.Context) GetRepositoryVirtualRepositoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryVirtualRepositoryConfigOutput)
}

// GetRepositoryVirtualRepositoryConfigArrayInput is an input type that accepts GetRepositoryVirtualRepositoryConfigArray and GetRepositoryVirtualRepositoryConfigArrayOutput values.
// You can construct a concrete instance of `GetRepositoryVirtualRepositoryConfigArrayInput` via:
//
//	GetRepositoryVirtualRepositoryConfigArray{ GetRepositoryVirtualRepositoryConfigArgs{...} }
type GetRepositoryVirtualRepositoryConfigArrayInput interface {
	pulumi.Input

	ToGetRepositoryVirtualRepositoryConfigArrayOutput() GetRepositoryVirtualRepositoryConfigArrayOutput
	ToGetRepositoryVirtualRepositoryConfigArrayOutputWithContext(context.Context) GetRepositoryVirtualRepositoryConfigArrayOutput
}

type GetRepositoryVirtualRepositoryConfigArray []GetRepositoryVirtualRepositoryConfigInput

func (GetRepositoryVirtualRepositoryConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryVirtualRepositoryConfig)(nil)).Elem()
}

func (i GetRepositoryVirtualRepositoryConfigArray) ToGetRepositoryVirtualRepositoryConfigArrayOutput() GetRepositoryVirtualRepositoryConfigArrayOutput {
	return i.ToGetRepositoryVirtualRepositoryConfigArrayOutputWithContext(context.Background())
}

func (i GetRepositoryVirtualRepositoryConfigArray) ToGetRepositoryVirtualRepositoryConfigArrayOutputWithContext(ctx context.Context) GetRepositoryVirtualRepositoryConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryVirtualRepositoryConfigArrayOutput)
}

type GetRepositoryVirtualRepositoryConfigOutput struct{ *pulumi.OutputState }

func (GetRepositoryVirtualRepositoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryVirtualRepositoryConfig)(nil)).Elem()
}

func (o GetRepositoryVirtualRepositoryConfigOutput) ToGetRepositoryVirtualRepositoryConfigOutput() GetRepositoryVirtualRepositoryConfigOutput {
	return o
}

func (o GetRepositoryVirtualRepositoryConfigOutput) ToGetRepositoryVirtualRepositoryConfigOutputWithContext(ctx context.Context) GetRepositoryVirtualRepositoryConfigOutput {
	return o
}

// Policies that configure the upstream artifacts distributed by the Virtual
// Repository. Upstream policies cannot be set on a standard repository.
func (o GetRepositoryVirtualRepositoryConfigOutput) UpstreamPolicies() GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return o.ApplyT(func(v GetRepositoryVirtualRepositoryConfig) []GetRepositoryVirtualRepositoryConfigUpstreamPolicy {
		return v.UpstreamPolicies
	}).(GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput)
}

type GetRepositoryVirtualRepositoryConfigArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryVirtualRepositoryConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryVirtualRepositoryConfig)(nil)).Elem()
}

func (o GetRepositoryVirtualRepositoryConfigArrayOutput) ToGetRepositoryVirtualRepositoryConfigArrayOutput() GetRepositoryVirtualRepositoryConfigArrayOutput {
	return o
}

func (o GetRepositoryVirtualRepositoryConfigArrayOutput) ToGetRepositoryVirtualRepositoryConfigArrayOutputWithContext(ctx context.Context) GetRepositoryVirtualRepositoryConfigArrayOutput {
	return o
}

func (o GetRepositoryVirtualRepositoryConfigArrayOutput) Index(i pulumi.IntInput) GetRepositoryVirtualRepositoryConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryVirtualRepositoryConfig {
		return vs[0].([]GetRepositoryVirtualRepositoryConfig)[vs[1].(int)]
	}).(GetRepositoryVirtualRepositoryConfigOutput)
}

type GetRepositoryVirtualRepositoryConfigUpstreamPolicy struct {
	// The user-provided ID of the upstream policy.
	Id string `pulumi:"id"`
	// Entries with a greater priority value take precedence in the pull order.
	Priority int `pulumi:"priority"`
	// A reference to the repository resource, for example:
	// "projects/p1/locations/us-central1/repository/repo1".
	Repository string `pulumi:"repository"`
}

// GetRepositoryVirtualRepositoryConfigUpstreamPolicyInput is an input type that accepts GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs and GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput values.
// You can construct a concrete instance of `GetRepositoryVirtualRepositoryConfigUpstreamPolicyInput` via:
//
//	GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs{...}
type GetRepositoryVirtualRepositoryConfigUpstreamPolicyInput interface {
	pulumi.Input

	ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput() GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput
	ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(context.Context) GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput
}

type GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs struct {
	// The user-provided ID of the upstream policy.
	Id pulumi.StringInput `pulumi:"id"`
	// Entries with a greater priority value take precedence in the pull order.
	Priority pulumi.IntInput `pulumi:"priority"`
	// A reference to the repository resource, for example:
	// "projects/p1/locations/us-central1/repository/repo1".
	Repository pulumi.StringInput `pulumi:"repository"`
}

func (GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryVirtualRepositoryConfigUpstreamPolicy)(nil)).Elem()
}

func (i GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs) ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput() GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return i.ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(context.Background())
}

func (i GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs) ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(ctx context.Context) GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput)
}

// GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput is an input type that accepts GetRepositoryVirtualRepositoryConfigUpstreamPolicyArray and GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput values.
// You can construct a concrete instance of `GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput` via:
//
//	GetRepositoryVirtualRepositoryConfigUpstreamPolicyArray{ GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs{...} }
type GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput interface {
	pulumi.Input

	ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput() GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput
	ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(context.Context) GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput
}

type GetRepositoryVirtualRepositoryConfigUpstreamPolicyArray []GetRepositoryVirtualRepositoryConfigUpstreamPolicyInput

func (GetRepositoryVirtualRepositoryConfigUpstreamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryVirtualRepositoryConfigUpstreamPolicy)(nil)).Elem()
}

func (i GetRepositoryVirtualRepositoryConfigUpstreamPolicyArray) ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput() GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return i.ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(context.Background())
}

func (i GetRepositoryVirtualRepositoryConfigUpstreamPolicyArray) ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(ctx context.Context) GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput)
}

type GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput struct{ *pulumi.OutputState }

func (GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryVirtualRepositoryConfigUpstreamPolicy)(nil)).Elem()
}

func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput) ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput() GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return o
}

func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput) ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(ctx context.Context) GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return o
}

// The user-provided ID of the upstream policy.
func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryVirtualRepositoryConfigUpstreamPolicy) string { return v.Id }).(pulumi.StringOutput)
}

// Entries with a greater priority value take precedence in the pull order.
func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetRepositoryVirtualRepositoryConfigUpstreamPolicy) int { return v.Priority }).(pulumi.IntOutput)
}

// A reference to the repository resource, for example:
// "projects/p1/locations/us-central1/repository/repo1".
func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryVirtualRepositoryConfigUpstreamPolicy) string { return v.Repository }).(pulumi.StringOutput)
}

type GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryVirtualRepositoryConfigUpstreamPolicy)(nil)).Elem()
}

func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput() GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return o
}

func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(ctx context.Context) GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return o
}

func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) Index(i pulumi.IntInput) GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryVirtualRepositoryConfigUpstreamPolicy {
		return vs[0].([]GetRepositoryVirtualRepositoryConfigUpstreamPolicy)[vs[1].(int)]
	}).(GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput)
}

type GetRepositoryVulnerabilityScanningConfig struct {
	// This configures whether vulnerability scanning is automatically performed for artifacts pushed to this repository. Possible values: ["INHERITED", "DISABLED"]
	EnablementConfig string `pulumi:"enablementConfig"`
	// This field returns whether scanning is active for this repository.
	EnablementState string `pulumi:"enablementState"`
	// This provides an explanation for the state of scanning on this repository.
	EnablementStateReason string `pulumi:"enablementStateReason"`
}

// GetRepositoryVulnerabilityScanningConfigInput is an input type that accepts GetRepositoryVulnerabilityScanningConfigArgs and GetRepositoryVulnerabilityScanningConfigOutput values.
// You can construct a concrete instance of `GetRepositoryVulnerabilityScanningConfigInput` via:
//
//	GetRepositoryVulnerabilityScanningConfigArgs{...}
type GetRepositoryVulnerabilityScanningConfigInput interface {
	pulumi.Input

	ToGetRepositoryVulnerabilityScanningConfigOutput() GetRepositoryVulnerabilityScanningConfigOutput
	ToGetRepositoryVulnerabilityScanningConfigOutputWithContext(context.Context) GetRepositoryVulnerabilityScanningConfigOutput
}

type GetRepositoryVulnerabilityScanningConfigArgs struct {
	// This configures whether vulnerability scanning is automatically performed for artifacts pushed to this repository. Possible values: ["INHERITED", "DISABLED"]
	EnablementConfig pulumi.StringInput `pulumi:"enablementConfig"`
	// This field returns whether scanning is active for this repository.
	EnablementState pulumi.StringInput `pulumi:"enablementState"`
	// This provides an explanation for the state of scanning on this repository.
	EnablementStateReason pulumi.StringInput `pulumi:"enablementStateReason"`
}

func (GetRepositoryVulnerabilityScanningConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryVulnerabilityScanningConfig)(nil)).Elem()
}

func (i GetRepositoryVulnerabilityScanningConfigArgs) ToGetRepositoryVulnerabilityScanningConfigOutput() GetRepositoryVulnerabilityScanningConfigOutput {
	return i.ToGetRepositoryVulnerabilityScanningConfigOutputWithContext(context.Background())
}

func (i GetRepositoryVulnerabilityScanningConfigArgs) ToGetRepositoryVulnerabilityScanningConfigOutputWithContext(ctx context.Context) GetRepositoryVulnerabilityScanningConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryVulnerabilityScanningConfigOutput)
}

// GetRepositoryVulnerabilityScanningConfigArrayInput is an input type that accepts GetRepositoryVulnerabilityScanningConfigArray and GetRepositoryVulnerabilityScanningConfigArrayOutput values.
// You can construct a concrete instance of `GetRepositoryVulnerabilityScanningConfigArrayInput` via:
//
//	GetRepositoryVulnerabilityScanningConfigArray{ GetRepositoryVulnerabilityScanningConfigArgs{...} }
type GetRepositoryVulnerabilityScanningConfigArrayInput interface {
	pulumi.Input

	ToGetRepositoryVulnerabilityScanningConfigArrayOutput() GetRepositoryVulnerabilityScanningConfigArrayOutput
	ToGetRepositoryVulnerabilityScanningConfigArrayOutputWithContext(context.Context) GetRepositoryVulnerabilityScanningConfigArrayOutput
}

type GetRepositoryVulnerabilityScanningConfigArray []GetRepositoryVulnerabilityScanningConfigInput

func (GetRepositoryVulnerabilityScanningConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryVulnerabilityScanningConfig)(nil)).Elem()
}

func (i GetRepositoryVulnerabilityScanningConfigArray) ToGetRepositoryVulnerabilityScanningConfigArrayOutput() GetRepositoryVulnerabilityScanningConfigArrayOutput {
	return i.ToGetRepositoryVulnerabilityScanningConfigArrayOutputWithContext(context.Background())
}

func (i GetRepositoryVulnerabilityScanningConfigArray) ToGetRepositoryVulnerabilityScanningConfigArrayOutputWithContext(ctx context.Context) GetRepositoryVulnerabilityScanningConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryVulnerabilityScanningConfigArrayOutput)
}

type GetRepositoryVulnerabilityScanningConfigOutput struct{ *pulumi.OutputState }

func (GetRepositoryVulnerabilityScanningConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryVulnerabilityScanningConfig)(nil)).Elem()
}

func (o GetRepositoryVulnerabilityScanningConfigOutput) ToGetRepositoryVulnerabilityScanningConfigOutput() GetRepositoryVulnerabilityScanningConfigOutput {
	return o
}

func (o GetRepositoryVulnerabilityScanningConfigOutput) ToGetRepositoryVulnerabilityScanningConfigOutputWithContext(ctx context.Context) GetRepositoryVulnerabilityScanningConfigOutput {
	return o
}

// This configures whether vulnerability scanning is automatically performed for artifacts pushed to this repository. Possible values: ["INHERITED", "DISABLED"]
func (o GetRepositoryVulnerabilityScanningConfigOutput) EnablementConfig() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryVulnerabilityScanningConfig) string { return v.EnablementConfig }).(pulumi.StringOutput)
}

// This field returns whether scanning is active for this repository.
func (o GetRepositoryVulnerabilityScanningConfigOutput) EnablementState() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryVulnerabilityScanningConfig) string { return v.EnablementState }).(pulumi.StringOutput)
}

// This provides an explanation for the state of scanning on this repository.
func (o GetRepositoryVulnerabilityScanningConfigOutput) EnablementStateReason() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryVulnerabilityScanningConfig) string { return v.EnablementStateReason }).(pulumi.StringOutput)
}

type GetRepositoryVulnerabilityScanningConfigArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryVulnerabilityScanningConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryVulnerabilityScanningConfig)(nil)).Elem()
}

func (o GetRepositoryVulnerabilityScanningConfigArrayOutput) ToGetRepositoryVulnerabilityScanningConfigArrayOutput() GetRepositoryVulnerabilityScanningConfigArrayOutput {
	return o
}

func (o GetRepositoryVulnerabilityScanningConfigArrayOutput) ToGetRepositoryVulnerabilityScanningConfigArrayOutputWithContext(ctx context.Context) GetRepositoryVulnerabilityScanningConfigArrayOutput {
	return o
}

func (o GetRepositoryVulnerabilityScanningConfigArrayOutput) Index(i pulumi.IntInput) GetRepositoryVulnerabilityScanningConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryVulnerabilityScanningConfig {
		return vs[0].([]GetRepositoryVulnerabilityScanningConfig)[vs[1].(int)]
	}).(GetRepositoryVulnerabilityScanningConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCleanupPolicyInput)(nil)).Elem(), RepositoryCleanupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCleanupPolicyArrayInput)(nil)).Elem(), RepositoryCleanupPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCleanupPolicyConditionInput)(nil)).Elem(), RepositoryCleanupPolicyConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCleanupPolicyConditionPtrInput)(nil)).Elem(), RepositoryCleanupPolicyConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCleanupPolicyMostRecentVersionsInput)(nil)).Elem(), RepositoryCleanupPolicyMostRecentVersionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCleanupPolicyMostRecentVersionsPtrInput)(nil)).Elem(), RepositoryCleanupPolicyMostRecentVersionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryDockerConfigInput)(nil)).Elem(), RepositoryDockerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryDockerConfigPtrInput)(nil)).Elem(), RepositoryDockerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamBindingConditionInput)(nil)).Elem(), RepositoryIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamBindingConditionPtrInput)(nil)).Elem(), RepositoryIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamMemberConditionInput)(nil)).Elem(), RepositoryIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamMemberConditionPtrInput)(nil)).Elem(), RepositoryIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMavenConfigInput)(nil)).Elem(), RepositoryMavenConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMavenConfigPtrInput)(nil)).Elem(), RepositoryMavenConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigAptRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigAptRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigAptRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigAptRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigCommonRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigCommonRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigCommonRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigCommonRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigDockerRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigDockerRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigDockerRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigDockerRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigMavenRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigMavenRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigMavenRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigMavenRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigNpmRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigNpmRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigNpmRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigNpmRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigPythonRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigPythonRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigPythonRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigPythonRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigUpstreamCredentialsInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigYumRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigYumRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigYumRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigYumRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryVirtualRepositoryConfigInput)(nil)).Elem(), RepositoryVirtualRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryVirtualRepositoryConfigPtrInput)(nil)).Elem(), RepositoryVirtualRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryVirtualRepositoryConfigUpstreamPolicyInput)(nil)).Elem(), RepositoryVirtualRepositoryConfigUpstreamPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput)(nil)).Elem(), RepositoryVirtualRepositoryConfigUpstreamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryVulnerabilityScanningConfigInput)(nil)).Elem(), RepositoryVulnerabilityScanningConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryVulnerabilityScanningConfigPtrInput)(nil)).Elem(), RepositoryVulnerabilityScanningConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryCleanupPolicyInput)(nil)).Elem(), GetRepositoryCleanupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryCleanupPolicyArrayInput)(nil)).Elem(), GetRepositoryCleanupPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryCleanupPolicyConditionInput)(nil)).Elem(), GetRepositoryCleanupPolicyConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryCleanupPolicyConditionArrayInput)(nil)).Elem(), GetRepositoryCleanupPolicyConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryCleanupPolicyMostRecentVersionInput)(nil)).Elem(), GetRepositoryCleanupPolicyMostRecentVersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryCleanupPolicyMostRecentVersionArrayInput)(nil)).Elem(), GetRepositoryCleanupPolicyMostRecentVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryDockerConfigInput)(nil)).Elem(), GetRepositoryDockerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryDockerConfigArrayInput)(nil)).Elem(), GetRepositoryDockerConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryMavenConfigInput)(nil)).Elem(), GetRepositoryMavenConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryMavenConfigArrayInput)(nil)).Elem(), GetRepositoryMavenConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigAptRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigAptRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigAptRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigAptRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigCommonRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigCommonRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigCommonRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigDockerRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigDockerRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigMavenRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigMavenRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigNpmRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigNpmRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigPythonRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigPythonRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigUpstreamCredentialInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigUpstreamCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigUpstreamCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigYumRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigYumRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigYumRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigYumRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryVirtualRepositoryConfigInput)(nil)).Elem(), GetRepositoryVirtualRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryVirtualRepositoryConfigArrayInput)(nil)).Elem(), GetRepositoryVirtualRepositoryConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryVirtualRepositoryConfigUpstreamPolicyInput)(nil)).Elem(), GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput)(nil)).Elem(), GetRepositoryVirtualRepositoryConfigUpstreamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryVulnerabilityScanningConfigInput)(nil)).Elem(), GetRepositoryVulnerabilityScanningConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryVulnerabilityScanningConfigArrayInput)(nil)).Elem(), GetRepositoryVulnerabilityScanningConfigArray{})
	pulumi.RegisterOutputType(RepositoryCleanupPolicyOutput{})
	pulumi.RegisterOutputType(RepositoryCleanupPolicyArrayOutput{})
	pulumi.RegisterOutputType(RepositoryCleanupPolicyConditionOutput{})
	pulumi.RegisterOutputType(RepositoryCleanupPolicyConditionPtrOutput{})
	pulumi.RegisterOutputType(RepositoryCleanupPolicyMostRecentVersionsOutput{})
	pulumi.RegisterOutputType(RepositoryCleanupPolicyMostRecentVersionsPtrOutput{})
	pulumi.RegisterOutputType(RepositoryDockerConfigOutput{})
	pulumi.RegisterOutputType(RepositoryDockerConfigPtrOutput{})
	pulumi.RegisterOutputType(RepositoryIamBindingConditionOutput{})
	pulumi.RegisterOutputType(RepositoryIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(RepositoryIamMemberConditionOutput{})
	pulumi.RegisterOutputType(RepositoryIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(RepositoryMavenConfigOutput{})
	pulumi.RegisterOutputType(RepositoryMavenConfigPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigAptRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigAptRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigCommonRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigCommonRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigDockerRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigMavenRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigNpmRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigPythonRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigUpstreamCredentialsOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigUpstreamCredentialsPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigYumRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigYumRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryVirtualRepositoryConfigOutput{})
	pulumi.RegisterOutputType(RepositoryVirtualRepositoryConfigPtrOutput{})
	pulumi.RegisterOutputType(RepositoryVirtualRepositoryConfigUpstreamPolicyOutput{})
	pulumi.RegisterOutputType(RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput{})
	pulumi.RegisterOutputType(RepositoryVulnerabilityScanningConfigOutput{})
	pulumi.RegisterOutputType(RepositoryVulnerabilityScanningConfigPtrOutput{})
	pulumi.RegisterOutputType(GetRepositoryCleanupPolicyOutput{})
	pulumi.RegisterOutputType(GetRepositoryCleanupPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryCleanupPolicyConditionOutput{})
	pulumi.RegisterOutputType(GetRepositoryCleanupPolicyConditionArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryCleanupPolicyMostRecentVersionOutput{})
	pulumi.RegisterOutputType(GetRepositoryCleanupPolicyMostRecentVersionArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryDockerConfigOutput{})
	pulumi.RegisterOutputType(GetRepositoryDockerConfigArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryMavenConfigOutput{})
	pulumi.RegisterOutputType(GetRepositoryMavenConfigArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigAptRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigAptRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigCommonRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigCommonRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigUpstreamCredentialOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigUpstreamCredentialArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredentialArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigYumRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigYumRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryVirtualRepositoryConfigOutput{})
	pulumi.RegisterOutputType(GetRepositoryVirtualRepositoryConfigArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput{})
	pulumi.RegisterOutputType(GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryVulnerabilityScanningConfigOutput{})
	pulumi.RegisterOutputType(GetRepositoryVulnerabilityScanningConfigArrayOutput{})
}
