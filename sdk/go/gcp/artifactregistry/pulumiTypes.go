// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactregistry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type RepositoryCleanupPolicy struct {
	Action    *string                           `pulumi:"action"`
	Condition *RepositoryCleanupPolicyCondition `pulumi:"condition"`
	// The identifier for this object. Format specified above.
	Id                 string                                     `pulumi:"id"`
	MostRecentVersions *RepositoryCleanupPolicyMostRecentVersions `pulumi:"mostRecentVersions"`
}

// RepositoryCleanupPolicyInput is an input type that accepts RepositoryCleanupPolicyArgs and RepositoryCleanupPolicyOutput values.
// You can construct a concrete instance of `RepositoryCleanupPolicyInput` via:
//
//	RepositoryCleanupPolicyArgs{...}
type RepositoryCleanupPolicyInput interface {
	pulumi.Input

	ToRepositoryCleanupPolicyOutput() RepositoryCleanupPolicyOutput
	ToRepositoryCleanupPolicyOutputWithContext(context.Context) RepositoryCleanupPolicyOutput
}

type RepositoryCleanupPolicyArgs struct {
	Action    pulumi.StringPtrInput                    `pulumi:"action"`
	Condition RepositoryCleanupPolicyConditionPtrInput `pulumi:"condition"`
	// The identifier for this object. Format specified above.
	Id                 pulumi.StringInput                                `pulumi:"id"`
	MostRecentVersions RepositoryCleanupPolicyMostRecentVersionsPtrInput `pulumi:"mostRecentVersions"`
}

func (RepositoryCleanupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCleanupPolicy)(nil)).Elem()
}

func (i RepositoryCleanupPolicyArgs) ToRepositoryCleanupPolicyOutput() RepositoryCleanupPolicyOutput {
	return i.ToRepositoryCleanupPolicyOutputWithContext(context.Background())
}

func (i RepositoryCleanupPolicyArgs) ToRepositoryCleanupPolicyOutputWithContext(ctx context.Context) RepositoryCleanupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCleanupPolicyOutput)
}

func (i RepositoryCleanupPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryCleanupPolicy] {
	return pulumix.Output[RepositoryCleanupPolicy]{
		OutputState: i.ToRepositoryCleanupPolicyOutputWithContext(ctx).OutputState,
	}
}

// RepositoryCleanupPolicyArrayInput is an input type that accepts RepositoryCleanupPolicyArray and RepositoryCleanupPolicyArrayOutput values.
// You can construct a concrete instance of `RepositoryCleanupPolicyArrayInput` via:
//
//	RepositoryCleanupPolicyArray{ RepositoryCleanupPolicyArgs{...} }
type RepositoryCleanupPolicyArrayInput interface {
	pulumi.Input

	ToRepositoryCleanupPolicyArrayOutput() RepositoryCleanupPolicyArrayOutput
	ToRepositoryCleanupPolicyArrayOutputWithContext(context.Context) RepositoryCleanupPolicyArrayOutput
}

type RepositoryCleanupPolicyArray []RepositoryCleanupPolicyInput

func (RepositoryCleanupPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryCleanupPolicy)(nil)).Elem()
}

func (i RepositoryCleanupPolicyArray) ToRepositoryCleanupPolicyArrayOutput() RepositoryCleanupPolicyArrayOutput {
	return i.ToRepositoryCleanupPolicyArrayOutputWithContext(context.Background())
}

func (i RepositoryCleanupPolicyArray) ToRepositoryCleanupPolicyArrayOutputWithContext(ctx context.Context) RepositoryCleanupPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCleanupPolicyArrayOutput)
}

func (i RepositoryCleanupPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]RepositoryCleanupPolicy] {
	return pulumix.Output[[]RepositoryCleanupPolicy]{
		OutputState: i.ToRepositoryCleanupPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type RepositoryCleanupPolicyOutput struct{ *pulumi.OutputState }

func (RepositoryCleanupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCleanupPolicy)(nil)).Elem()
}

func (o RepositoryCleanupPolicyOutput) ToRepositoryCleanupPolicyOutput() RepositoryCleanupPolicyOutput {
	return o
}

func (o RepositoryCleanupPolicyOutput) ToRepositoryCleanupPolicyOutputWithContext(ctx context.Context) RepositoryCleanupPolicyOutput {
	return o
}

func (o RepositoryCleanupPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryCleanupPolicy] {
	return pulumix.Output[RepositoryCleanupPolicy]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryCleanupPolicyOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicy) *string { return v.Action }).(pulumi.StringPtrOutput)
}

func (o RepositoryCleanupPolicyOutput) Condition() RepositoryCleanupPolicyConditionPtrOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicy) *RepositoryCleanupPolicyCondition { return v.Condition }).(RepositoryCleanupPolicyConditionPtrOutput)
}

// The identifier for this object. Format specified above.
func (o RepositoryCleanupPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicy) string { return v.Id }).(pulumi.StringOutput)
}

func (o RepositoryCleanupPolicyOutput) MostRecentVersions() RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicy) *RepositoryCleanupPolicyMostRecentVersions {
		return v.MostRecentVersions
	}).(RepositoryCleanupPolicyMostRecentVersionsPtrOutput)
}

type RepositoryCleanupPolicyArrayOutput struct{ *pulumi.OutputState }

func (RepositoryCleanupPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryCleanupPolicy)(nil)).Elem()
}

func (o RepositoryCleanupPolicyArrayOutput) ToRepositoryCleanupPolicyArrayOutput() RepositoryCleanupPolicyArrayOutput {
	return o
}

func (o RepositoryCleanupPolicyArrayOutput) ToRepositoryCleanupPolicyArrayOutputWithContext(ctx context.Context) RepositoryCleanupPolicyArrayOutput {
	return o
}

func (o RepositoryCleanupPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RepositoryCleanupPolicy] {
	return pulumix.Output[[]RepositoryCleanupPolicy]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryCleanupPolicyArrayOutput) Index(i pulumi.IntInput) RepositoryCleanupPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryCleanupPolicy {
		return vs[0].([]RepositoryCleanupPolicy)[vs[1].(int)]
	}).(RepositoryCleanupPolicyOutput)
}

type RepositoryCleanupPolicyCondition struct {
	NewerThan           *string  `pulumi:"newerThan"`
	OlderThan           *string  `pulumi:"olderThan"`
	PackageNamePrefixes []string `pulumi:"packageNamePrefixes"`
	TagPrefixes         []string `pulumi:"tagPrefixes"`
	TagState            *string  `pulumi:"tagState"`
	VersionNamePrefixes []string `pulumi:"versionNamePrefixes"`
}

// RepositoryCleanupPolicyConditionInput is an input type that accepts RepositoryCleanupPolicyConditionArgs and RepositoryCleanupPolicyConditionOutput values.
// You can construct a concrete instance of `RepositoryCleanupPolicyConditionInput` via:
//
//	RepositoryCleanupPolicyConditionArgs{...}
type RepositoryCleanupPolicyConditionInput interface {
	pulumi.Input

	ToRepositoryCleanupPolicyConditionOutput() RepositoryCleanupPolicyConditionOutput
	ToRepositoryCleanupPolicyConditionOutputWithContext(context.Context) RepositoryCleanupPolicyConditionOutput
}

type RepositoryCleanupPolicyConditionArgs struct {
	NewerThan           pulumi.StringPtrInput   `pulumi:"newerThan"`
	OlderThan           pulumi.StringPtrInput   `pulumi:"olderThan"`
	PackageNamePrefixes pulumi.StringArrayInput `pulumi:"packageNamePrefixes"`
	TagPrefixes         pulumi.StringArrayInput `pulumi:"tagPrefixes"`
	TagState            pulumi.StringPtrInput   `pulumi:"tagState"`
	VersionNamePrefixes pulumi.StringArrayInput `pulumi:"versionNamePrefixes"`
}

func (RepositoryCleanupPolicyConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCleanupPolicyCondition)(nil)).Elem()
}

func (i RepositoryCleanupPolicyConditionArgs) ToRepositoryCleanupPolicyConditionOutput() RepositoryCleanupPolicyConditionOutput {
	return i.ToRepositoryCleanupPolicyConditionOutputWithContext(context.Background())
}

func (i RepositoryCleanupPolicyConditionArgs) ToRepositoryCleanupPolicyConditionOutputWithContext(ctx context.Context) RepositoryCleanupPolicyConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCleanupPolicyConditionOutput)
}

func (i RepositoryCleanupPolicyConditionArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryCleanupPolicyCondition] {
	return pulumix.Output[RepositoryCleanupPolicyCondition]{
		OutputState: i.ToRepositoryCleanupPolicyConditionOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryCleanupPolicyConditionArgs) ToRepositoryCleanupPolicyConditionPtrOutput() RepositoryCleanupPolicyConditionPtrOutput {
	return i.ToRepositoryCleanupPolicyConditionPtrOutputWithContext(context.Background())
}

func (i RepositoryCleanupPolicyConditionArgs) ToRepositoryCleanupPolicyConditionPtrOutputWithContext(ctx context.Context) RepositoryCleanupPolicyConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCleanupPolicyConditionOutput).ToRepositoryCleanupPolicyConditionPtrOutputWithContext(ctx)
}

// RepositoryCleanupPolicyConditionPtrInput is an input type that accepts RepositoryCleanupPolicyConditionArgs, RepositoryCleanupPolicyConditionPtr and RepositoryCleanupPolicyConditionPtrOutput values.
// You can construct a concrete instance of `RepositoryCleanupPolicyConditionPtrInput` via:
//
//	        RepositoryCleanupPolicyConditionArgs{...}
//
//	or:
//
//	        nil
type RepositoryCleanupPolicyConditionPtrInput interface {
	pulumi.Input

	ToRepositoryCleanupPolicyConditionPtrOutput() RepositoryCleanupPolicyConditionPtrOutput
	ToRepositoryCleanupPolicyConditionPtrOutputWithContext(context.Context) RepositoryCleanupPolicyConditionPtrOutput
}

type repositoryCleanupPolicyConditionPtrType RepositoryCleanupPolicyConditionArgs

func RepositoryCleanupPolicyConditionPtr(v *RepositoryCleanupPolicyConditionArgs) RepositoryCleanupPolicyConditionPtrInput {
	return (*repositoryCleanupPolicyConditionPtrType)(v)
}

func (*repositoryCleanupPolicyConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCleanupPolicyCondition)(nil)).Elem()
}

func (i *repositoryCleanupPolicyConditionPtrType) ToRepositoryCleanupPolicyConditionPtrOutput() RepositoryCleanupPolicyConditionPtrOutput {
	return i.ToRepositoryCleanupPolicyConditionPtrOutputWithContext(context.Background())
}

func (i *repositoryCleanupPolicyConditionPtrType) ToRepositoryCleanupPolicyConditionPtrOutputWithContext(ctx context.Context) RepositoryCleanupPolicyConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCleanupPolicyConditionPtrOutput)
}

func (i *repositoryCleanupPolicyConditionPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryCleanupPolicyCondition] {
	return pulumix.Output[*RepositoryCleanupPolicyCondition]{
		OutputState: i.ToRepositoryCleanupPolicyConditionPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryCleanupPolicyConditionOutput struct{ *pulumi.OutputState }

func (RepositoryCleanupPolicyConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCleanupPolicyCondition)(nil)).Elem()
}

func (o RepositoryCleanupPolicyConditionOutput) ToRepositoryCleanupPolicyConditionOutput() RepositoryCleanupPolicyConditionOutput {
	return o
}

func (o RepositoryCleanupPolicyConditionOutput) ToRepositoryCleanupPolicyConditionOutputWithContext(ctx context.Context) RepositoryCleanupPolicyConditionOutput {
	return o
}

func (o RepositoryCleanupPolicyConditionOutput) ToRepositoryCleanupPolicyConditionPtrOutput() RepositoryCleanupPolicyConditionPtrOutput {
	return o.ToRepositoryCleanupPolicyConditionPtrOutputWithContext(context.Background())
}

func (o RepositoryCleanupPolicyConditionOutput) ToRepositoryCleanupPolicyConditionPtrOutputWithContext(ctx context.Context) RepositoryCleanupPolicyConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryCleanupPolicyCondition) *RepositoryCleanupPolicyCondition {
		return &v
	}).(RepositoryCleanupPolicyConditionPtrOutput)
}

func (o RepositoryCleanupPolicyConditionOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryCleanupPolicyCondition] {
	return pulumix.Output[RepositoryCleanupPolicyCondition]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryCleanupPolicyConditionOutput) NewerThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicyCondition) *string { return v.NewerThan }).(pulumi.StringPtrOutput)
}

func (o RepositoryCleanupPolicyConditionOutput) OlderThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicyCondition) *string { return v.OlderThan }).(pulumi.StringPtrOutput)
}

func (o RepositoryCleanupPolicyConditionOutput) PackageNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicyCondition) []string { return v.PackageNamePrefixes }).(pulumi.StringArrayOutput)
}

func (o RepositoryCleanupPolicyConditionOutput) TagPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicyCondition) []string { return v.TagPrefixes }).(pulumi.StringArrayOutput)
}

func (o RepositoryCleanupPolicyConditionOutput) TagState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicyCondition) *string { return v.TagState }).(pulumi.StringPtrOutput)
}

func (o RepositoryCleanupPolicyConditionOutput) VersionNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicyCondition) []string { return v.VersionNamePrefixes }).(pulumi.StringArrayOutput)
}

type RepositoryCleanupPolicyConditionPtrOutput struct{ *pulumi.OutputState }

func (RepositoryCleanupPolicyConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCleanupPolicyCondition)(nil)).Elem()
}

func (o RepositoryCleanupPolicyConditionPtrOutput) ToRepositoryCleanupPolicyConditionPtrOutput() RepositoryCleanupPolicyConditionPtrOutput {
	return o
}

func (o RepositoryCleanupPolicyConditionPtrOutput) ToRepositoryCleanupPolicyConditionPtrOutputWithContext(ctx context.Context) RepositoryCleanupPolicyConditionPtrOutput {
	return o
}

func (o RepositoryCleanupPolicyConditionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryCleanupPolicyCondition] {
	return pulumix.Output[*RepositoryCleanupPolicyCondition]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryCleanupPolicyConditionPtrOutput) Elem() RepositoryCleanupPolicyConditionOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyCondition) RepositoryCleanupPolicyCondition {
		if v != nil {
			return *v
		}
		var ret RepositoryCleanupPolicyCondition
		return ret
	}).(RepositoryCleanupPolicyConditionOutput)
}

func (o RepositoryCleanupPolicyConditionPtrOutput) NewerThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyCondition) *string {
		if v == nil {
			return nil
		}
		return v.NewerThan
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryCleanupPolicyConditionPtrOutput) OlderThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyCondition) *string {
		if v == nil {
			return nil
		}
		return v.OlderThan
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryCleanupPolicyConditionPtrOutput) PackageNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyCondition) []string {
		if v == nil {
			return nil
		}
		return v.PackageNamePrefixes
	}).(pulumi.StringArrayOutput)
}

func (o RepositoryCleanupPolicyConditionPtrOutput) TagPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyCondition) []string {
		if v == nil {
			return nil
		}
		return v.TagPrefixes
	}).(pulumi.StringArrayOutput)
}

func (o RepositoryCleanupPolicyConditionPtrOutput) TagState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyCondition) *string {
		if v == nil {
			return nil
		}
		return v.TagState
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryCleanupPolicyConditionPtrOutput) VersionNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyCondition) []string {
		if v == nil {
			return nil
		}
		return v.VersionNamePrefixes
	}).(pulumi.StringArrayOutput)
}

type RepositoryCleanupPolicyMostRecentVersions struct {
	KeepCount           *int     `pulumi:"keepCount"`
	PackageNamePrefixes []string `pulumi:"packageNamePrefixes"`
}

// RepositoryCleanupPolicyMostRecentVersionsInput is an input type that accepts RepositoryCleanupPolicyMostRecentVersionsArgs and RepositoryCleanupPolicyMostRecentVersionsOutput values.
// You can construct a concrete instance of `RepositoryCleanupPolicyMostRecentVersionsInput` via:
//
//	RepositoryCleanupPolicyMostRecentVersionsArgs{...}
type RepositoryCleanupPolicyMostRecentVersionsInput interface {
	pulumi.Input

	ToRepositoryCleanupPolicyMostRecentVersionsOutput() RepositoryCleanupPolicyMostRecentVersionsOutput
	ToRepositoryCleanupPolicyMostRecentVersionsOutputWithContext(context.Context) RepositoryCleanupPolicyMostRecentVersionsOutput
}

type RepositoryCleanupPolicyMostRecentVersionsArgs struct {
	KeepCount           pulumi.IntPtrInput      `pulumi:"keepCount"`
	PackageNamePrefixes pulumi.StringArrayInput `pulumi:"packageNamePrefixes"`
}

func (RepositoryCleanupPolicyMostRecentVersionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCleanupPolicyMostRecentVersions)(nil)).Elem()
}

func (i RepositoryCleanupPolicyMostRecentVersionsArgs) ToRepositoryCleanupPolicyMostRecentVersionsOutput() RepositoryCleanupPolicyMostRecentVersionsOutput {
	return i.ToRepositoryCleanupPolicyMostRecentVersionsOutputWithContext(context.Background())
}

func (i RepositoryCleanupPolicyMostRecentVersionsArgs) ToRepositoryCleanupPolicyMostRecentVersionsOutputWithContext(ctx context.Context) RepositoryCleanupPolicyMostRecentVersionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCleanupPolicyMostRecentVersionsOutput)
}

func (i RepositoryCleanupPolicyMostRecentVersionsArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryCleanupPolicyMostRecentVersions] {
	return pulumix.Output[RepositoryCleanupPolicyMostRecentVersions]{
		OutputState: i.ToRepositoryCleanupPolicyMostRecentVersionsOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryCleanupPolicyMostRecentVersionsArgs) ToRepositoryCleanupPolicyMostRecentVersionsPtrOutput() RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return i.ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(context.Background())
}

func (i RepositoryCleanupPolicyMostRecentVersionsArgs) ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(ctx context.Context) RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCleanupPolicyMostRecentVersionsOutput).ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(ctx)
}

// RepositoryCleanupPolicyMostRecentVersionsPtrInput is an input type that accepts RepositoryCleanupPolicyMostRecentVersionsArgs, RepositoryCleanupPolicyMostRecentVersionsPtr and RepositoryCleanupPolicyMostRecentVersionsPtrOutput values.
// You can construct a concrete instance of `RepositoryCleanupPolicyMostRecentVersionsPtrInput` via:
//
//	        RepositoryCleanupPolicyMostRecentVersionsArgs{...}
//
//	or:
//
//	        nil
type RepositoryCleanupPolicyMostRecentVersionsPtrInput interface {
	pulumi.Input

	ToRepositoryCleanupPolicyMostRecentVersionsPtrOutput() RepositoryCleanupPolicyMostRecentVersionsPtrOutput
	ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(context.Context) RepositoryCleanupPolicyMostRecentVersionsPtrOutput
}

type repositoryCleanupPolicyMostRecentVersionsPtrType RepositoryCleanupPolicyMostRecentVersionsArgs

func RepositoryCleanupPolicyMostRecentVersionsPtr(v *RepositoryCleanupPolicyMostRecentVersionsArgs) RepositoryCleanupPolicyMostRecentVersionsPtrInput {
	return (*repositoryCleanupPolicyMostRecentVersionsPtrType)(v)
}

func (*repositoryCleanupPolicyMostRecentVersionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCleanupPolicyMostRecentVersions)(nil)).Elem()
}

func (i *repositoryCleanupPolicyMostRecentVersionsPtrType) ToRepositoryCleanupPolicyMostRecentVersionsPtrOutput() RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return i.ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(context.Background())
}

func (i *repositoryCleanupPolicyMostRecentVersionsPtrType) ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(ctx context.Context) RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCleanupPolicyMostRecentVersionsPtrOutput)
}

func (i *repositoryCleanupPolicyMostRecentVersionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryCleanupPolicyMostRecentVersions] {
	return pulumix.Output[*RepositoryCleanupPolicyMostRecentVersions]{
		OutputState: i.ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryCleanupPolicyMostRecentVersionsOutput struct{ *pulumi.OutputState }

func (RepositoryCleanupPolicyMostRecentVersionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCleanupPolicyMostRecentVersions)(nil)).Elem()
}

func (o RepositoryCleanupPolicyMostRecentVersionsOutput) ToRepositoryCleanupPolicyMostRecentVersionsOutput() RepositoryCleanupPolicyMostRecentVersionsOutput {
	return o
}

func (o RepositoryCleanupPolicyMostRecentVersionsOutput) ToRepositoryCleanupPolicyMostRecentVersionsOutputWithContext(ctx context.Context) RepositoryCleanupPolicyMostRecentVersionsOutput {
	return o
}

func (o RepositoryCleanupPolicyMostRecentVersionsOutput) ToRepositoryCleanupPolicyMostRecentVersionsPtrOutput() RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return o.ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(context.Background())
}

func (o RepositoryCleanupPolicyMostRecentVersionsOutput) ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(ctx context.Context) RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryCleanupPolicyMostRecentVersions) *RepositoryCleanupPolicyMostRecentVersions {
		return &v
	}).(RepositoryCleanupPolicyMostRecentVersionsPtrOutput)
}

func (o RepositoryCleanupPolicyMostRecentVersionsOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryCleanupPolicyMostRecentVersions] {
	return pulumix.Output[RepositoryCleanupPolicyMostRecentVersions]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryCleanupPolicyMostRecentVersionsOutput) KeepCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicyMostRecentVersions) *int { return v.KeepCount }).(pulumi.IntPtrOutput)
}

func (o RepositoryCleanupPolicyMostRecentVersionsOutput) PackageNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepositoryCleanupPolicyMostRecentVersions) []string { return v.PackageNamePrefixes }).(pulumi.StringArrayOutput)
}

type RepositoryCleanupPolicyMostRecentVersionsPtrOutput struct{ *pulumi.OutputState }

func (RepositoryCleanupPolicyMostRecentVersionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCleanupPolicyMostRecentVersions)(nil)).Elem()
}

func (o RepositoryCleanupPolicyMostRecentVersionsPtrOutput) ToRepositoryCleanupPolicyMostRecentVersionsPtrOutput() RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return o
}

func (o RepositoryCleanupPolicyMostRecentVersionsPtrOutput) ToRepositoryCleanupPolicyMostRecentVersionsPtrOutputWithContext(ctx context.Context) RepositoryCleanupPolicyMostRecentVersionsPtrOutput {
	return o
}

func (o RepositoryCleanupPolicyMostRecentVersionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryCleanupPolicyMostRecentVersions] {
	return pulumix.Output[*RepositoryCleanupPolicyMostRecentVersions]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryCleanupPolicyMostRecentVersionsPtrOutput) Elem() RepositoryCleanupPolicyMostRecentVersionsOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyMostRecentVersions) RepositoryCleanupPolicyMostRecentVersions {
		if v != nil {
			return *v
		}
		var ret RepositoryCleanupPolicyMostRecentVersions
		return ret
	}).(RepositoryCleanupPolicyMostRecentVersionsOutput)
}

func (o RepositoryCleanupPolicyMostRecentVersionsPtrOutput) KeepCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyMostRecentVersions) *int {
		if v == nil {
			return nil
		}
		return v.KeepCount
	}).(pulumi.IntPtrOutput)
}

func (o RepositoryCleanupPolicyMostRecentVersionsPtrOutput) PackageNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepositoryCleanupPolicyMostRecentVersions) []string {
		if v == nil {
			return nil
		}
		return v.PackageNamePrefixes
	}).(pulumi.StringArrayOutput)
}

type RepositoryDockerConfig struct {
	// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
	ImmutableTags *bool `pulumi:"immutableTags"`
}

// RepositoryDockerConfigInput is an input type that accepts RepositoryDockerConfigArgs and RepositoryDockerConfigOutput values.
// You can construct a concrete instance of `RepositoryDockerConfigInput` via:
//
//	RepositoryDockerConfigArgs{...}
type RepositoryDockerConfigInput interface {
	pulumi.Input

	ToRepositoryDockerConfigOutput() RepositoryDockerConfigOutput
	ToRepositoryDockerConfigOutputWithContext(context.Context) RepositoryDockerConfigOutput
}

type RepositoryDockerConfigArgs struct {
	// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
	ImmutableTags pulumi.BoolPtrInput `pulumi:"immutableTags"`
}

func (RepositoryDockerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryDockerConfig)(nil)).Elem()
}

func (i RepositoryDockerConfigArgs) ToRepositoryDockerConfigOutput() RepositoryDockerConfigOutput {
	return i.ToRepositoryDockerConfigOutputWithContext(context.Background())
}

func (i RepositoryDockerConfigArgs) ToRepositoryDockerConfigOutputWithContext(ctx context.Context) RepositoryDockerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryDockerConfigOutput)
}

func (i RepositoryDockerConfigArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryDockerConfig] {
	return pulumix.Output[RepositoryDockerConfig]{
		OutputState: i.ToRepositoryDockerConfigOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryDockerConfigArgs) ToRepositoryDockerConfigPtrOutput() RepositoryDockerConfigPtrOutput {
	return i.ToRepositoryDockerConfigPtrOutputWithContext(context.Background())
}

func (i RepositoryDockerConfigArgs) ToRepositoryDockerConfigPtrOutputWithContext(ctx context.Context) RepositoryDockerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryDockerConfigOutput).ToRepositoryDockerConfigPtrOutputWithContext(ctx)
}

// RepositoryDockerConfigPtrInput is an input type that accepts RepositoryDockerConfigArgs, RepositoryDockerConfigPtr and RepositoryDockerConfigPtrOutput values.
// You can construct a concrete instance of `RepositoryDockerConfigPtrInput` via:
//
//	        RepositoryDockerConfigArgs{...}
//
//	or:
//
//	        nil
type RepositoryDockerConfigPtrInput interface {
	pulumi.Input

	ToRepositoryDockerConfigPtrOutput() RepositoryDockerConfigPtrOutput
	ToRepositoryDockerConfigPtrOutputWithContext(context.Context) RepositoryDockerConfigPtrOutput
}

type repositoryDockerConfigPtrType RepositoryDockerConfigArgs

func RepositoryDockerConfigPtr(v *RepositoryDockerConfigArgs) RepositoryDockerConfigPtrInput {
	return (*repositoryDockerConfigPtrType)(v)
}

func (*repositoryDockerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryDockerConfig)(nil)).Elem()
}

func (i *repositoryDockerConfigPtrType) ToRepositoryDockerConfigPtrOutput() RepositoryDockerConfigPtrOutput {
	return i.ToRepositoryDockerConfigPtrOutputWithContext(context.Background())
}

func (i *repositoryDockerConfigPtrType) ToRepositoryDockerConfigPtrOutputWithContext(ctx context.Context) RepositoryDockerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryDockerConfigPtrOutput)
}

func (i *repositoryDockerConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryDockerConfig] {
	return pulumix.Output[*RepositoryDockerConfig]{
		OutputState: i.ToRepositoryDockerConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryDockerConfigOutput struct{ *pulumi.OutputState }

func (RepositoryDockerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryDockerConfig)(nil)).Elem()
}

func (o RepositoryDockerConfigOutput) ToRepositoryDockerConfigOutput() RepositoryDockerConfigOutput {
	return o
}

func (o RepositoryDockerConfigOutput) ToRepositoryDockerConfigOutputWithContext(ctx context.Context) RepositoryDockerConfigOutput {
	return o
}

func (o RepositoryDockerConfigOutput) ToRepositoryDockerConfigPtrOutput() RepositoryDockerConfigPtrOutput {
	return o.ToRepositoryDockerConfigPtrOutputWithContext(context.Background())
}

func (o RepositoryDockerConfigOutput) ToRepositoryDockerConfigPtrOutputWithContext(ctx context.Context) RepositoryDockerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryDockerConfig) *RepositoryDockerConfig {
		return &v
	}).(RepositoryDockerConfigPtrOutput)
}

func (o RepositoryDockerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryDockerConfig] {
	return pulumix.Output[RepositoryDockerConfig]{
		OutputState: o.OutputState,
	}
}

// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
func (o RepositoryDockerConfigOutput) ImmutableTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryDockerConfig) *bool { return v.ImmutableTags }).(pulumi.BoolPtrOutput)
}

type RepositoryDockerConfigPtrOutput struct{ *pulumi.OutputState }

func (RepositoryDockerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryDockerConfig)(nil)).Elem()
}

func (o RepositoryDockerConfigPtrOutput) ToRepositoryDockerConfigPtrOutput() RepositoryDockerConfigPtrOutput {
	return o
}

func (o RepositoryDockerConfigPtrOutput) ToRepositoryDockerConfigPtrOutputWithContext(ctx context.Context) RepositoryDockerConfigPtrOutput {
	return o
}

func (o RepositoryDockerConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryDockerConfig] {
	return pulumix.Output[*RepositoryDockerConfig]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryDockerConfigPtrOutput) Elem() RepositoryDockerConfigOutput {
	return o.ApplyT(func(v *RepositoryDockerConfig) RepositoryDockerConfig {
		if v != nil {
			return *v
		}
		var ret RepositoryDockerConfig
		return ret
	}).(RepositoryDockerConfigOutput)
}

// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
func (o RepositoryDockerConfigPtrOutput) ImmutableTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryDockerConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ImmutableTags
	}).(pulumi.BoolPtrOutput)
}

type RepositoryIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// RepositoryIamBindingConditionInput is an input type that accepts RepositoryIamBindingConditionArgs and RepositoryIamBindingConditionOutput values.
// You can construct a concrete instance of `RepositoryIamBindingConditionInput` via:
//
//	RepositoryIamBindingConditionArgs{...}
type RepositoryIamBindingConditionInput interface {
	pulumi.Input

	ToRepositoryIamBindingConditionOutput() RepositoryIamBindingConditionOutput
	ToRepositoryIamBindingConditionOutputWithContext(context.Context) RepositoryIamBindingConditionOutput
}

type RepositoryIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (RepositoryIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryIamBindingCondition)(nil)).Elem()
}

func (i RepositoryIamBindingConditionArgs) ToRepositoryIamBindingConditionOutput() RepositoryIamBindingConditionOutput {
	return i.ToRepositoryIamBindingConditionOutputWithContext(context.Background())
}

func (i RepositoryIamBindingConditionArgs) ToRepositoryIamBindingConditionOutputWithContext(ctx context.Context) RepositoryIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamBindingConditionOutput)
}

func (i RepositoryIamBindingConditionArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryIamBindingCondition] {
	return pulumix.Output[RepositoryIamBindingCondition]{
		OutputState: i.ToRepositoryIamBindingConditionOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryIamBindingConditionArgs) ToRepositoryIamBindingConditionPtrOutput() RepositoryIamBindingConditionPtrOutput {
	return i.ToRepositoryIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i RepositoryIamBindingConditionArgs) ToRepositoryIamBindingConditionPtrOutputWithContext(ctx context.Context) RepositoryIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamBindingConditionOutput).ToRepositoryIamBindingConditionPtrOutputWithContext(ctx)
}

// RepositoryIamBindingConditionPtrInput is an input type that accepts RepositoryIamBindingConditionArgs, RepositoryIamBindingConditionPtr and RepositoryIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `RepositoryIamBindingConditionPtrInput` via:
//
//	        RepositoryIamBindingConditionArgs{...}
//
//	or:
//
//	        nil
type RepositoryIamBindingConditionPtrInput interface {
	pulumi.Input

	ToRepositoryIamBindingConditionPtrOutput() RepositoryIamBindingConditionPtrOutput
	ToRepositoryIamBindingConditionPtrOutputWithContext(context.Context) RepositoryIamBindingConditionPtrOutput
}

type repositoryIamBindingConditionPtrType RepositoryIamBindingConditionArgs

func RepositoryIamBindingConditionPtr(v *RepositoryIamBindingConditionArgs) RepositoryIamBindingConditionPtrInput {
	return (*repositoryIamBindingConditionPtrType)(v)
}

func (*repositoryIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamBindingCondition)(nil)).Elem()
}

func (i *repositoryIamBindingConditionPtrType) ToRepositoryIamBindingConditionPtrOutput() RepositoryIamBindingConditionPtrOutput {
	return i.ToRepositoryIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *repositoryIamBindingConditionPtrType) ToRepositoryIamBindingConditionPtrOutputWithContext(ctx context.Context) RepositoryIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamBindingConditionPtrOutput)
}

func (i *repositoryIamBindingConditionPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryIamBindingCondition] {
	return pulumix.Output[*RepositoryIamBindingCondition]{
		OutputState: i.ToRepositoryIamBindingConditionPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryIamBindingConditionOutput struct{ *pulumi.OutputState }

func (RepositoryIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryIamBindingCondition)(nil)).Elem()
}

func (o RepositoryIamBindingConditionOutput) ToRepositoryIamBindingConditionOutput() RepositoryIamBindingConditionOutput {
	return o
}

func (o RepositoryIamBindingConditionOutput) ToRepositoryIamBindingConditionOutputWithContext(ctx context.Context) RepositoryIamBindingConditionOutput {
	return o
}

func (o RepositoryIamBindingConditionOutput) ToRepositoryIamBindingConditionPtrOutput() RepositoryIamBindingConditionPtrOutput {
	return o.ToRepositoryIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o RepositoryIamBindingConditionOutput) ToRepositoryIamBindingConditionPtrOutputWithContext(ctx context.Context) RepositoryIamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryIamBindingCondition) *RepositoryIamBindingCondition {
		return &v
	}).(RepositoryIamBindingConditionPtrOutput)
}

func (o RepositoryIamBindingConditionOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryIamBindingCondition] {
	return pulumix.Output[RepositoryIamBindingCondition]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RepositoryIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o RepositoryIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type RepositoryIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (RepositoryIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamBindingCondition)(nil)).Elem()
}

func (o RepositoryIamBindingConditionPtrOutput) ToRepositoryIamBindingConditionPtrOutput() RepositoryIamBindingConditionPtrOutput {
	return o
}

func (o RepositoryIamBindingConditionPtrOutput) ToRepositoryIamBindingConditionPtrOutputWithContext(ctx context.Context) RepositoryIamBindingConditionPtrOutput {
	return o
}

func (o RepositoryIamBindingConditionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryIamBindingCondition] {
	return pulumix.Output[*RepositoryIamBindingCondition]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryIamBindingConditionPtrOutput) Elem() RepositoryIamBindingConditionOutput {
	return o.ApplyT(func(v *RepositoryIamBindingCondition) RepositoryIamBindingCondition {
		if v != nil {
			return *v
		}
		var ret RepositoryIamBindingCondition
		return ret
	}).(RepositoryIamBindingConditionOutput)
}

func (o RepositoryIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type RepositoryIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// RepositoryIamMemberConditionInput is an input type that accepts RepositoryIamMemberConditionArgs and RepositoryIamMemberConditionOutput values.
// You can construct a concrete instance of `RepositoryIamMemberConditionInput` via:
//
//	RepositoryIamMemberConditionArgs{...}
type RepositoryIamMemberConditionInput interface {
	pulumi.Input

	ToRepositoryIamMemberConditionOutput() RepositoryIamMemberConditionOutput
	ToRepositoryIamMemberConditionOutputWithContext(context.Context) RepositoryIamMemberConditionOutput
}

type RepositoryIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (RepositoryIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryIamMemberCondition)(nil)).Elem()
}

func (i RepositoryIamMemberConditionArgs) ToRepositoryIamMemberConditionOutput() RepositoryIamMemberConditionOutput {
	return i.ToRepositoryIamMemberConditionOutputWithContext(context.Background())
}

func (i RepositoryIamMemberConditionArgs) ToRepositoryIamMemberConditionOutputWithContext(ctx context.Context) RepositoryIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamMemberConditionOutput)
}

func (i RepositoryIamMemberConditionArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryIamMemberCondition] {
	return pulumix.Output[RepositoryIamMemberCondition]{
		OutputState: i.ToRepositoryIamMemberConditionOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryIamMemberConditionArgs) ToRepositoryIamMemberConditionPtrOutput() RepositoryIamMemberConditionPtrOutput {
	return i.ToRepositoryIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i RepositoryIamMemberConditionArgs) ToRepositoryIamMemberConditionPtrOutputWithContext(ctx context.Context) RepositoryIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamMemberConditionOutput).ToRepositoryIamMemberConditionPtrOutputWithContext(ctx)
}

// RepositoryIamMemberConditionPtrInput is an input type that accepts RepositoryIamMemberConditionArgs, RepositoryIamMemberConditionPtr and RepositoryIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `RepositoryIamMemberConditionPtrInput` via:
//
//	        RepositoryIamMemberConditionArgs{...}
//
//	or:
//
//	        nil
type RepositoryIamMemberConditionPtrInput interface {
	pulumi.Input

	ToRepositoryIamMemberConditionPtrOutput() RepositoryIamMemberConditionPtrOutput
	ToRepositoryIamMemberConditionPtrOutputWithContext(context.Context) RepositoryIamMemberConditionPtrOutput
}

type repositoryIamMemberConditionPtrType RepositoryIamMemberConditionArgs

func RepositoryIamMemberConditionPtr(v *RepositoryIamMemberConditionArgs) RepositoryIamMemberConditionPtrInput {
	return (*repositoryIamMemberConditionPtrType)(v)
}

func (*repositoryIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamMemberCondition)(nil)).Elem()
}

func (i *repositoryIamMemberConditionPtrType) ToRepositoryIamMemberConditionPtrOutput() RepositoryIamMemberConditionPtrOutput {
	return i.ToRepositoryIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *repositoryIamMemberConditionPtrType) ToRepositoryIamMemberConditionPtrOutputWithContext(ctx context.Context) RepositoryIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamMemberConditionPtrOutput)
}

func (i *repositoryIamMemberConditionPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryIamMemberCondition] {
	return pulumix.Output[*RepositoryIamMemberCondition]{
		OutputState: i.ToRepositoryIamMemberConditionPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryIamMemberConditionOutput struct{ *pulumi.OutputState }

func (RepositoryIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryIamMemberCondition)(nil)).Elem()
}

func (o RepositoryIamMemberConditionOutput) ToRepositoryIamMemberConditionOutput() RepositoryIamMemberConditionOutput {
	return o
}

func (o RepositoryIamMemberConditionOutput) ToRepositoryIamMemberConditionOutputWithContext(ctx context.Context) RepositoryIamMemberConditionOutput {
	return o
}

func (o RepositoryIamMemberConditionOutput) ToRepositoryIamMemberConditionPtrOutput() RepositoryIamMemberConditionPtrOutput {
	return o.ToRepositoryIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o RepositoryIamMemberConditionOutput) ToRepositoryIamMemberConditionPtrOutputWithContext(ctx context.Context) RepositoryIamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryIamMemberCondition) *RepositoryIamMemberCondition {
		return &v
	}).(RepositoryIamMemberConditionPtrOutput)
}

func (o RepositoryIamMemberConditionOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryIamMemberCondition] {
	return pulumix.Output[RepositoryIamMemberCondition]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RepositoryIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o RepositoryIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type RepositoryIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (RepositoryIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamMemberCondition)(nil)).Elem()
}

func (o RepositoryIamMemberConditionPtrOutput) ToRepositoryIamMemberConditionPtrOutput() RepositoryIamMemberConditionPtrOutput {
	return o
}

func (o RepositoryIamMemberConditionPtrOutput) ToRepositoryIamMemberConditionPtrOutputWithContext(ctx context.Context) RepositoryIamMemberConditionPtrOutput {
	return o
}

func (o RepositoryIamMemberConditionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryIamMemberCondition] {
	return pulumix.Output[*RepositoryIamMemberCondition]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryIamMemberConditionPtrOutput) Elem() RepositoryIamMemberConditionOutput {
	return o.ApplyT(func(v *RepositoryIamMemberCondition) RepositoryIamMemberCondition {
		if v != nil {
			return *v
		}
		var ret RepositoryIamMemberCondition
		return ret
	}).(RepositoryIamMemberConditionOutput)
}

func (o RepositoryIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type RepositoryMavenConfig struct {
	// The repository with this flag will allow publishing the same
	// snapshot versions.
	AllowSnapshotOverwrites *bool `pulumi:"allowSnapshotOverwrites"`
	// Version policy defines the versions that the registry will accept.
	// Default value is `VERSION_POLICY_UNSPECIFIED`.
	// Possible values are: `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, `SNAPSHOT`.
	VersionPolicy *string `pulumi:"versionPolicy"`
}

// RepositoryMavenConfigInput is an input type that accepts RepositoryMavenConfigArgs and RepositoryMavenConfigOutput values.
// You can construct a concrete instance of `RepositoryMavenConfigInput` via:
//
//	RepositoryMavenConfigArgs{...}
type RepositoryMavenConfigInput interface {
	pulumi.Input

	ToRepositoryMavenConfigOutput() RepositoryMavenConfigOutput
	ToRepositoryMavenConfigOutputWithContext(context.Context) RepositoryMavenConfigOutput
}

type RepositoryMavenConfigArgs struct {
	// The repository with this flag will allow publishing the same
	// snapshot versions.
	AllowSnapshotOverwrites pulumi.BoolPtrInput `pulumi:"allowSnapshotOverwrites"`
	// Version policy defines the versions that the registry will accept.
	// Default value is `VERSION_POLICY_UNSPECIFIED`.
	// Possible values are: `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, `SNAPSHOT`.
	VersionPolicy pulumi.StringPtrInput `pulumi:"versionPolicy"`
}

func (RepositoryMavenConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryMavenConfig)(nil)).Elem()
}

func (i RepositoryMavenConfigArgs) ToRepositoryMavenConfigOutput() RepositoryMavenConfigOutput {
	return i.ToRepositoryMavenConfigOutputWithContext(context.Background())
}

func (i RepositoryMavenConfigArgs) ToRepositoryMavenConfigOutputWithContext(ctx context.Context) RepositoryMavenConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMavenConfigOutput)
}

func (i RepositoryMavenConfigArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryMavenConfig] {
	return pulumix.Output[RepositoryMavenConfig]{
		OutputState: i.ToRepositoryMavenConfigOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryMavenConfigArgs) ToRepositoryMavenConfigPtrOutput() RepositoryMavenConfigPtrOutput {
	return i.ToRepositoryMavenConfigPtrOutputWithContext(context.Background())
}

func (i RepositoryMavenConfigArgs) ToRepositoryMavenConfigPtrOutputWithContext(ctx context.Context) RepositoryMavenConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMavenConfigOutput).ToRepositoryMavenConfigPtrOutputWithContext(ctx)
}

// RepositoryMavenConfigPtrInput is an input type that accepts RepositoryMavenConfigArgs, RepositoryMavenConfigPtr and RepositoryMavenConfigPtrOutput values.
// You can construct a concrete instance of `RepositoryMavenConfigPtrInput` via:
//
//	        RepositoryMavenConfigArgs{...}
//
//	or:
//
//	        nil
type RepositoryMavenConfigPtrInput interface {
	pulumi.Input

	ToRepositoryMavenConfigPtrOutput() RepositoryMavenConfigPtrOutput
	ToRepositoryMavenConfigPtrOutputWithContext(context.Context) RepositoryMavenConfigPtrOutput
}

type repositoryMavenConfigPtrType RepositoryMavenConfigArgs

func RepositoryMavenConfigPtr(v *RepositoryMavenConfigArgs) RepositoryMavenConfigPtrInput {
	return (*repositoryMavenConfigPtrType)(v)
}

func (*repositoryMavenConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryMavenConfig)(nil)).Elem()
}

func (i *repositoryMavenConfigPtrType) ToRepositoryMavenConfigPtrOutput() RepositoryMavenConfigPtrOutput {
	return i.ToRepositoryMavenConfigPtrOutputWithContext(context.Background())
}

func (i *repositoryMavenConfigPtrType) ToRepositoryMavenConfigPtrOutputWithContext(ctx context.Context) RepositoryMavenConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMavenConfigPtrOutput)
}

func (i *repositoryMavenConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryMavenConfig] {
	return pulumix.Output[*RepositoryMavenConfig]{
		OutputState: i.ToRepositoryMavenConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryMavenConfigOutput struct{ *pulumi.OutputState }

func (RepositoryMavenConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryMavenConfig)(nil)).Elem()
}

func (o RepositoryMavenConfigOutput) ToRepositoryMavenConfigOutput() RepositoryMavenConfigOutput {
	return o
}

func (o RepositoryMavenConfigOutput) ToRepositoryMavenConfigOutputWithContext(ctx context.Context) RepositoryMavenConfigOutput {
	return o
}

func (o RepositoryMavenConfigOutput) ToRepositoryMavenConfigPtrOutput() RepositoryMavenConfigPtrOutput {
	return o.ToRepositoryMavenConfigPtrOutputWithContext(context.Background())
}

func (o RepositoryMavenConfigOutput) ToRepositoryMavenConfigPtrOutputWithContext(ctx context.Context) RepositoryMavenConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryMavenConfig) *RepositoryMavenConfig {
		return &v
	}).(RepositoryMavenConfigPtrOutput)
}

func (o RepositoryMavenConfigOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryMavenConfig] {
	return pulumix.Output[RepositoryMavenConfig]{
		OutputState: o.OutputState,
	}
}

// The repository with this flag will allow publishing the same
// snapshot versions.
func (o RepositoryMavenConfigOutput) AllowSnapshotOverwrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryMavenConfig) *bool { return v.AllowSnapshotOverwrites }).(pulumi.BoolPtrOutput)
}

// Version policy defines the versions that the registry will accept.
// Default value is `VERSION_POLICY_UNSPECIFIED`.
// Possible values are: `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, `SNAPSHOT`.
func (o RepositoryMavenConfigOutput) VersionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryMavenConfig) *string { return v.VersionPolicy }).(pulumi.StringPtrOutput)
}

type RepositoryMavenConfigPtrOutput struct{ *pulumi.OutputState }

func (RepositoryMavenConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryMavenConfig)(nil)).Elem()
}

func (o RepositoryMavenConfigPtrOutput) ToRepositoryMavenConfigPtrOutput() RepositoryMavenConfigPtrOutput {
	return o
}

func (o RepositoryMavenConfigPtrOutput) ToRepositoryMavenConfigPtrOutputWithContext(ctx context.Context) RepositoryMavenConfigPtrOutput {
	return o
}

func (o RepositoryMavenConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryMavenConfig] {
	return pulumix.Output[*RepositoryMavenConfig]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryMavenConfigPtrOutput) Elem() RepositoryMavenConfigOutput {
	return o.ApplyT(func(v *RepositoryMavenConfig) RepositoryMavenConfig {
		if v != nil {
			return *v
		}
		var ret RepositoryMavenConfig
		return ret
	}).(RepositoryMavenConfigOutput)
}

// The repository with this flag will allow publishing the same
// snapshot versions.
func (o RepositoryMavenConfigPtrOutput) AllowSnapshotOverwrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryMavenConfig) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSnapshotOverwrites
	}).(pulumi.BoolPtrOutput)
}

// Version policy defines the versions that the registry will accept.
// Default value is `VERSION_POLICY_UNSPECIFIED`.
// Possible values are: `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, `SNAPSHOT`.
func (o RepositoryMavenConfigPtrOutput) VersionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryMavenConfig) *string {
		if v == nil {
			return nil
		}
		return v.VersionPolicy
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfig struct {
	// The description of the remote source.
	Description *string `pulumi:"description"`
	// Specific settings for a Docker remote repository.
	// Structure is documented below.
	DockerRepository *RepositoryRemoteRepositoryConfigDockerRepository `pulumi:"dockerRepository"`
	// Specific settings for a Maven remote repository.
	// Structure is documented below.
	MavenRepository *RepositoryRemoteRepositoryConfigMavenRepository `pulumi:"mavenRepository"`
	// Specific settings for an Npm remote repository.
	// Structure is documented below.
	NpmRepository *RepositoryRemoteRepositoryConfigNpmRepository `pulumi:"npmRepository"`
	// Specific settings for a Python remote repository.
	// Structure is documented below.
	PythonRepository *RepositoryRemoteRepositoryConfigPythonRepository `pulumi:"pythonRepository"`
}

// RepositoryRemoteRepositoryConfigInput is an input type that accepts RepositoryRemoteRepositoryConfigArgs and RepositoryRemoteRepositoryConfigOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigInput` via:
//
//	RepositoryRemoteRepositoryConfigArgs{...}
type RepositoryRemoteRepositoryConfigInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigOutput() RepositoryRemoteRepositoryConfigOutput
	ToRepositoryRemoteRepositoryConfigOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigOutput
}

type RepositoryRemoteRepositoryConfigArgs struct {
	// The description of the remote source.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specific settings for a Docker remote repository.
	// Structure is documented below.
	DockerRepository RepositoryRemoteRepositoryConfigDockerRepositoryPtrInput `pulumi:"dockerRepository"`
	// Specific settings for a Maven remote repository.
	// Structure is documented below.
	MavenRepository RepositoryRemoteRepositoryConfigMavenRepositoryPtrInput `pulumi:"mavenRepository"`
	// Specific settings for an Npm remote repository.
	// Structure is documented below.
	NpmRepository RepositoryRemoteRepositoryConfigNpmRepositoryPtrInput `pulumi:"npmRepository"`
	// Specific settings for a Python remote repository.
	// Structure is documented below.
	PythonRepository RepositoryRemoteRepositoryConfigPythonRepositoryPtrInput `pulumi:"pythonRepository"`
}

func (RepositoryRemoteRepositoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfig)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigArgs) ToRepositoryRemoteRepositoryConfigOutput() RepositoryRemoteRepositoryConfigOutput {
	return i.ToRepositoryRemoteRepositoryConfigOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigArgs) ToRepositoryRemoteRepositoryConfigOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigOutput)
}

func (i RepositoryRemoteRepositoryConfigArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryRemoteRepositoryConfig] {
	return pulumix.Output[RepositoryRemoteRepositoryConfig]{
		OutputState: i.ToRepositoryRemoteRepositoryConfigOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryRemoteRepositoryConfigArgs) ToRepositoryRemoteRepositoryConfigPtrOutput() RepositoryRemoteRepositoryConfigPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigArgs) ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigOutput).ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigArgs, RepositoryRemoteRepositoryConfigPtr and RepositoryRemoteRepositoryConfigPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigPtrOutput() RepositoryRemoteRepositoryConfigPtrOutput
	ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigPtrOutput
}

type repositoryRemoteRepositoryConfigPtrType RepositoryRemoteRepositoryConfigArgs

func RepositoryRemoteRepositoryConfigPtr(v *RepositoryRemoteRepositoryConfigArgs) RepositoryRemoteRepositoryConfigPtrInput {
	return (*repositoryRemoteRepositoryConfigPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfig)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigPtrType) ToRepositoryRemoteRepositoryConfigPtrOutput() RepositoryRemoteRepositoryConfigPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigPtrType) ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigPtrOutput)
}

func (i *repositoryRemoteRepositoryConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryRemoteRepositoryConfig] {
	return pulumix.Output[*RepositoryRemoteRepositoryConfig]{
		OutputState: i.ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryRemoteRepositoryConfigOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfig)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigOutput) ToRepositoryRemoteRepositoryConfigOutput() RepositoryRemoteRepositoryConfigOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigOutput) ToRepositoryRemoteRepositoryConfigOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigOutput) ToRepositoryRemoteRepositoryConfigPtrOutput() RepositoryRemoteRepositoryConfigPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigOutput) ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfig {
		return &v
	}).(RepositoryRemoteRepositoryConfigPtrOutput)
}

func (o RepositoryRemoteRepositoryConfigOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryRemoteRepositoryConfig] {
	return pulumix.Output[RepositoryRemoteRepositoryConfig]{
		OutputState: o.OutputState,
	}
}

// The description of the remote source.
func (o RepositoryRemoteRepositoryConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfig) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specific settings for a Docker remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigOutput) DockerRepository() RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigDockerRepository {
		return v.DockerRepository
	}).(RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput)
}

// Specific settings for a Maven remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigOutput) MavenRepository() RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigMavenRepository {
		return v.MavenRepository
	}).(RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput)
}

// Specific settings for an Npm remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigOutput) NpmRepository() RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigNpmRepository {
		return v.NpmRepository
	}).(RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput)
}

// Specific settings for a Python remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigOutput) PythonRepository() RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigPythonRepository {
		return v.PythonRepository
	}).(RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfig)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigPtrOutput) ToRepositoryRemoteRepositoryConfigPtrOutput() RepositoryRemoteRepositoryConfigPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigPtrOutput) ToRepositoryRemoteRepositoryConfigPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryRemoteRepositoryConfig] {
	return pulumix.Output[*RepositoryRemoteRepositoryConfig]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryRemoteRepositoryConfigPtrOutput) Elem() RepositoryRemoteRepositoryConfigOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) RepositoryRemoteRepositoryConfig {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfig
		return ret
	}).(RepositoryRemoteRepositoryConfigOutput)
}

// The description of the remote source.
func (o RepositoryRemoteRepositoryConfigPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Specific settings for a Docker remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigPtrOutput) DockerRepository() RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigDockerRepository {
		if v == nil {
			return nil
		}
		return v.DockerRepository
	}).(RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput)
}

// Specific settings for a Maven remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigPtrOutput) MavenRepository() RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigMavenRepository {
		if v == nil {
			return nil
		}
		return v.MavenRepository
	}).(RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput)
}

// Specific settings for an Npm remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigPtrOutput) NpmRepository() RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigNpmRepository {
		if v == nil {
			return nil
		}
		return v.NpmRepository
	}).(RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput)
}

// Specific settings for a Python remote repository.
// Structure is documented below.
func (o RepositoryRemoteRepositoryConfigPtrOutput) PythonRepository() RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfig) *RepositoryRemoteRepositoryConfigPythonRepository {
		if v == nil {
			return nil
		}
		return v.PythonRepository
	}).(RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput)
}

type RepositoryRemoteRepositoryConfigDockerRepository struct {
	// Address of the remote repository.
	// Default value is `DOCKER_HUB`.
	// Possible values are: `DOCKER_HUB`.
	PublicRepository *string `pulumi:"publicRepository"`
}

// RepositoryRemoteRepositoryConfigDockerRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigDockerRepositoryArgs and RepositoryRemoteRepositoryConfigDockerRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigDockerRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigDockerRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigDockerRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigDockerRepositoryOutput() RepositoryRemoteRepositoryConfigDockerRepositoryOutput
	ToRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryOutput
}

type RepositoryRemoteRepositoryConfigDockerRepositoryArgs struct {
	// Address of the remote repository.
	// Default value is `DOCKER_HUB`.
	// Possible values are: `DOCKER_HUB`.
	PublicRepository pulumi.StringPtrInput `pulumi:"publicRepository"`
}

func (RepositoryRemoteRepositoryConfigDockerRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigDockerRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigDockerRepositoryArgs) ToRepositoryRemoteRepositoryConfigDockerRepositoryOutput() RepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigDockerRepositoryArgs) ToRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigDockerRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigDockerRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryRemoteRepositoryConfigDockerRepository] {
	return pulumix.Output[RepositoryRemoteRepositoryConfigDockerRepository]{
		OutputState: i.ToRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryRemoteRepositoryConfigDockerRepositoryArgs) ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput() RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigDockerRepositoryArgs) ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigDockerRepositoryOutput).ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigDockerRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigDockerRepositoryArgs, RepositoryRemoteRepositoryConfigDockerRepositoryPtr and RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigDockerRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigDockerRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigDockerRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput() RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigDockerRepositoryPtrType RepositoryRemoteRepositoryConfigDockerRepositoryArgs

func RepositoryRemoteRepositoryConfigDockerRepositoryPtr(v *RepositoryRemoteRepositoryConfigDockerRepositoryArgs) RepositoryRemoteRepositoryConfigDockerRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigDockerRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigDockerRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigDockerRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigDockerRepositoryPtrType) ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput() RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigDockerRepositoryPtrType) ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput)
}

func (i *repositoryRemoteRepositoryConfigDockerRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryRemoteRepositoryConfigDockerRepository] {
	return pulumix.Output[*RepositoryRemoteRepositoryConfigDockerRepository]{
		OutputState: i.ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryRemoteRepositoryConfigDockerRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigDockerRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigDockerRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryOutput() RepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput() RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigDockerRepository) *RepositoryRemoteRepositoryConfigDockerRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput)
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryRemoteRepositoryConfigDockerRepository] {
	return pulumix.Output[RepositoryRemoteRepositoryConfigDockerRepository]{
		OutputState: o.OutputState,
	}
}

// Address of the remote repository.
// Default value is `DOCKER_HUB`.
// Possible values are: `DOCKER_HUB`.
func (o RepositoryRemoteRepositoryConfigDockerRepositoryOutput) PublicRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigDockerRepository) *string { return v.PublicRepository }).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigDockerRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput() RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigDockerRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryRemoteRepositoryConfigDockerRepository] {
	return pulumix.Output[*RepositoryRemoteRepositoryConfigDockerRepository]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigDockerRepository) RepositoryRemoteRepositoryConfigDockerRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigDockerRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigDockerRepositoryOutput)
}

// Address of the remote repository.
// Default value is `DOCKER_HUB`.
// Possible values are: `DOCKER_HUB`.
func (o RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput) PublicRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigDockerRepository) *string {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigMavenRepository struct {
	// Address of the remote repository.
	// Default value is `MAVEN_CENTRAL`.
	// Possible values are: `MAVEN_CENTRAL`.
	PublicRepository *string `pulumi:"publicRepository"`
}

// RepositoryRemoteRepositoryConfigMavenRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigMavenRepositoryArgs and RepositoryRemoteRepositoryConfigMavenRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigMavenRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigMavenRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigMavenRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigMavenRepositoryOutput() RepositoryRemoteRepositoryConfigMavenRepositoryOutput
	ToRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryOutput
}

type RepositoryRemoteRepositoryConfigMavenRepositoryArgs struct {
	// Address of the remote repository.
	// Default value is `MAVEN_CENTRAL`.
	// Possible values are: `MAVEN_CENTRAL`.
	PublicRepository pulumi.StringPtrInput `pulumi:"publicRepository"`
}

func (RepositoryRemoteRepositoryConfigMavenRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigMavenRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigMavenRepositoryArgs) ToRepositoryRemoteRepositoryConfigMavenRepositoryOutput() RepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigMavenRepositoryArgs) ToRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigMavenRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigMavenRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryRemoteRepositoryConfigMavenRepository] {
	return pulumix.Output[RepositoryRemoteRepositoryConfigMavenRepository]{
		OutputState: i.ToRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryRemoteRepositoryConfigMavenRepositoryArgs) ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput() RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigMavenRepositoryArgs) ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigMavenRepositoryOutput).ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigMavenRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigMavenRepositoryArgs, RepositoryRemoteRepositoryConfigMavenRepositoryPtr and RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigMavenRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigMavenRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigMavenRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput() RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigMavenRepositoryPtrType RepositoryRemoteRepositoryConfigMavenRepositoryArgs

func RepositoryRemoteRepositoryConfigMavenRepositoryPtr(v *RepositoryRemoteRepositoryConfigMavenRepositoryArgs) RepositoryRemoteRepositoryConfigMavenRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigMavenRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigMavenRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigMavenRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigMavenRepositoryPtrType) ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput() RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigMavenRepositoryPtrType) ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput)
}

func (i *repositoryRemoteRepositoryConfigMavenRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryRemoteRepositoryConfigMavenRepository] {
	return pulumix.Output[*RepositoryRemoteRepositoryConfigMavenRepository]{
		OutputState: i.ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryRemoteRepositoryConfigMavenRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigMavenRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigMavenRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryOutput() RepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput() RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigMavenRepository) *RepositoryRemoteRepositoryConfigMavenRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput)
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryRemoteRepositoryConfigMavenRepository] {
	return pulumix.Output[RepositoryRemoteRepositoryConfigMavenRepository]{
		OutputState: o.OutputState,
	}
}

// Address of the remote repository.
// Default value is `MAVEN_CENTRAL`.
// Possible values are: `MAVEN_CENTRAL`.
func (o RepositoryRemoteRepositoryConfigMavenRepositoryOutput) PublicRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigMavenRepository) *string { return v.PublicRepository }).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigMavenRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput() RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigMavenRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryRemoteRepositoryConfigMavenRepository] {
	return pulumix.Output[*RepositoryRemoteRepositoryConfigMavenRepository]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigMavenRepository) RepositoryRemoteRepositoryConfigMavenRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigMavenRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigMavenRepositoryOutput)
}

// Address of the remote repository.
// Default value is `MAVEN_CENTRAL`.
// Possible values are: `MAVEN_CENTRAL`.
func (o RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput) PublicRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigMavenRepository) *string {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigNpmRepository struct {
	// Address of the remote repository.
	// Default value is `NPMJS`.
	// Possible values are: `NPMJS`.
	PublicRepository *string `pulumi:"publicRepository"`
}

// RepositoryRemoteRepositoryConfigNpmRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigNpmRepositoryArgs and RepositoryRemoteRepositoryConfigNpmRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigNpmRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigNpmRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigNpmRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigNpmRepositoryOutput() RepositoryRemoteRepositoryConfigNpmRepositoryOutput
	ToRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryOutput
}

type RepositoryRemoteRepositoryConfigNpmRepositoryArgs struct {
	// Address of the remote repository.
	// Default value is `NPMJS`.
	// Possible values are: `NPMJS`.
	PublicRepository pulumi.StringPtrInput `pulumi:"publicRepository"`
}

func (RepositoryRemoteRepositoryConfigNpmRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigNpmRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigNpmRepositoryArgs) ToRepositoryRemoteRepositoryConfigNpmRepositoryOutput() RepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigNpmRepositoryArgs) ToRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigNpmRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigNpmRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryRemoteRepositoryConfigNpmRepository] {
	return pulumix.Output[RepositoryRemoteRepositoryConfigNpmRepository]{
		OutputState: i.ToRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryRemoteRepositoryConfigNpmRepositoryArgs) ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput() RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigNpmRepositoryArgs) ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigNpmRepositoryOutput).ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigNpmRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigNpmRepositoryArgs, RepositoryRemoteRepositoryConfigNpmRepositoryPtr and RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigNpmRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigNpmRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigNpmRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput() RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigNpmRepositoryPtrType RepositoryRemoteRepositoryConfigNpmRepositoryArgs

func RepositoryRemoteRepositoryConfigNpmRepositoryPtr(v *RepositoryRemoteRepositoryConfigNpmRepositoryArgs) RepositoryRemoteRepositoryConfigNpmRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigNpmRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigNpmRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigNpmRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigNpmRepositoryPtrType) ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput() RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigNpmRepositoryPtrType) ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput)
}

func (i *repositoryRemoteRepositoryConfigNpmRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryRemoteRepositoryConfigNpmRepository] {
	return pulumix.Output[*RepositoryRemoteRepositoryConfigNpmRepository]{
		OutputState: i.ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryRemoteRepositoryConfigNpmRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigNpmRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigNpmRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryOutput() RepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput() RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigNpmRepository) *RepositoryRemoteRepositoryConfigNpmRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput)
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryRemoteRepositoryConfigNpmRepository] {
	return pulumix.Output[RepositoryRemoteRepositoryConfigNpmRepository]{
		OutputState: o.OutputState,
	}
}

// Address of the remote repository.
// Default value is `NPMJS`.
// Possible values are: `NPMJS`.
func (o RepositoryRemoteRepositoryConfigNpmRepositoryOutput) PublicRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigNpmRepository) *string { return v.PublicRepository }).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigNpmRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput() RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigNpmRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryRemoteRepositoryConfigNpmRepository] {
	return pulumix.Output[*RepositoryRemoteRepositoryConfigNpmRepository]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigNpmRepository) RepositoryRemoteRepositoryConfigNpmRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigNpmRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigNpmRepositoryOutput)
}

// Address of the remote repository.
// Default value is `NPMJS`.
// Possible values are: `NPMJS`.
func (o RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput) PublicRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigNpmRepository) *string {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigPythonRepository struct {
	// Address of the remote repository.
	// Default value is `PYPI`.
	// Possible values are: `PYPI`.
	PublicRepository *string `pulumi:"publicRepository"`
}

// RepositoryRemoteRepositoryConfigPythonRepositoryInput is an input type that accepts RepositoryRemoteRepositoryConfigPythonRepositoryArgs and RepositoryRemoteRepositoryConfigPythonRepositoryOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigPythonRepositoryInput` via:
//
//	RepositoryRemoteRepositoryConfigPythonRepositoryArgs{...}
type RepositoryRemoteRepositoryConfigPythonRepositoryInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigPythonRepositoryOutput() RepositoryRemoteRepositoryConfigPythonRepositoryOutput
	ToRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryOutput
}

type RepositoryRemoteRepositoryConfigPythonRepositoryArgs struct {
	// Address of the remote repository.
	// Default value is `PYPI`.
	// Possible values are: `PYPI`.
	PublicRepository pulumi.StringPtrInput `pulumi:"publicRepository"`
}

func (RepositoryRemoteRepositoryConfigPythonRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigPythonRepository)(nil)).Elem()
}

func (i RepositoryRemoteRepositoryConfigPythonRepositoryArgs) ToRepositoryRemoteRepositoryConfigPythonRepositoryOutput() RepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return i.ToRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigPythonRepositoryArgs) ToRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigPythonRepositoryOutput)
}

func (i RepositoryRemoteRepositoryConfigPythonRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryRemoteRepositoryConfigPythonRepository] {
	return pulumix.Output[RepositoryRemoteRepositoryConfigPythonRepository]{
		OutputState: i.ToRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryRemoteRepositoryConfigPythonRepositoryArgs) ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput() RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(context.Background())
}

func (i RepositoryRemoteRepositoryConfigPythonRepositoryArgs) ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigPythonRepositoryOutput).ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(ctx)
}

// RepositoryRemoteRepositoryConfigPythonRepositoryPtrInput is an input type that accepts RepositoryRemoteRepositoryConfigPythonRepositoryArgs, RepositoryRemoteRepositoryConfigPythonRepositoryPtr and RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput values.
// You can construct a concrete instance of `RepositoryRemoteRepositoryConfigPythonRepositoryPtrInput` via:
//
//	        RepositoryRemoteRepositoryConfigPythonRepositoryArgs{...}
//
//	or:
//
//	        nil
type RepositoryRemoteRepositoryConfigPythonRepositoryPtrInput interface {
	pulumi.Input

	ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput() RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput
	ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput
}

type repositoryRemoteRepositoryConfigPythonRepositoryPtrType RepositoryRemoteRepositoryConfigPythonRepositoryArgs

func RepositoryRemoteRepositoryConfigPythonRepositoryPtr(v *RepositoryRemoteRepositoryConfigPythonRepositoryArgs) RepositoryRemoteRepositoryConfigPythonRepositoryPtrInput {
	return (*repositoryRemoteRepositoryConfigPythonRepositoryPtrType)(v)
}

func (*repositoryRemoteRepositoryConfigPythonRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigPythonRepository)(nil)).Elem()
}

func (i *repositoryRemoteRepositoryConfigPythonRepositoryPtrType) ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput() RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return i.ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(context.Background())
}

func (i *repositoryRemoteRepositoryConfigPythonRepositoryPtrType) ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput)
}

func (i *repositoryRemoteRepositoryConfigPythonRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryRemoteRepositoryConfigPythonRepository] {
	return pulumix.Output[*RepositoryRemoteRepositoryConfigPythonRepository]{
		OutputState: i.ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryRemoteRepositoryConfigPythonRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigPythonRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRemoteRepositoryConfigPythonRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryOutput() RepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput() RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return o.ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(context.Background())
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRemoteRepositoryConfigPythonRepository) *RepositoryRemoteRepositoryConfigPythonRepository {
		return &v
	}).(RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput)
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryRemoteRepositoryConfigPythonRepository] {
	return pulumix.Output[RepositoryRemoteRepositoryConfigPythonRepository]{
		OutputState: o.OutputState,
	}
}

// Address of the remote repository.
// Default value is `PYPI`.
// Possible values are: `PYPI`.
func (o RepositoryRemoteRepositoryConfigPythonRepositoryOutput) PublicRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRemoteRepositoryConfigPythonRepository) *string { return v.PublicRepository }).(pulumi.StringPtrOutput)
}

type RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRemoteRepositoryConfigPythonRepository)(nil)).Elem()
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput() RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput) ToRepositoryRemoteRepositoryConfigPythonRepositoryPtrOutputWithContext(ctx context.Context) RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput {
	return o
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryRemoteRepositoryConfigPythonRepository] {
	return pulumix.Output[*RepositoryRemoteRepositoryConfigPythonRepository]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput) Elem() RepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigPythonRepository) RepositoryRemoteRepositoryConfigPythonRepository {
		if v != nil {
			return *v
		}
		var ret RepositoryRemoteRepositoryConfigPythonRepository
		return ret
	}).(RepositoryRemoteRepositoryConfigPythonRepositoryOutput)
}

// Address of the remote repository.
// Default value is `PYPI`.
// Possible values are: `PYPI`.
func (o RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput) PublicRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRemoteRepositoryConfigPythonRepository) *string {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(pulumi.StringPtrOutput)
}

type RepositoryVirtualRepositoryConfig struct {
	// Policies that configure the upstream artifacts distributed by the Virtual
	// Repository. Upstream policies cannot be set on a standard repository.
	// Structure is documented below.
	UpstreamPolicies []RepositoryVirtualRepositoryConfigUpstreamPolicy `pulumi:"upstreamPolicies"`
}

// RepositoryVirtualRepositoryConfigInput is an input type that accepts RepositoryVirtualRepositoryConfigArgs and RepositoryVirtualRepositoryConfigOutput values.
// You can construct a concrete instance of `RepositoryVirtualRepositoryConfigInput` via:
//
//	RepositoryVirtualRepositoryConfigArgs{...}
type RepositoryVirtualRepositoryConfigInput interface {
	pulumi.Input

	ToRepositoryVirtualRepositoryConfigOutput() RepositoryVirtualRepositoryConfigOutput
	ToRepositoryVirtualRepositoryConfigOutputWithContext(context.Context) RepositoryVirtualRepositoryConfigOutput
}

type RepositoryVirtualRepositoryConfigArgs struct {
	// Policies that configure the upstream artifacts distributed by the Virtual
	// Repository. Upstream policies cannot be set on a standard repository.
	// Structure is documented below.
	UpstreamPolicies RepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput `pulumi:"upstreamPolicies"`
}

func (RepositoryVirtualRepositoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryVirtualRepositoryConfig)(nil)).Elem()
}

func (i RepositoryVirtualRepositoryConfigArgs) ToRepositoryVirtualRepositoryConfigOutput() RepositoryVirtualRepositoryConfigOutput {
	return i.ToRepositoryVirtualRepositoryConfigOutputWithContext(context.Background())
}

func (i RepositoryVirtualRepositoryConfigArgs) ToRepositoryVirtualRepositoryConfigOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryVirtualRepositoryConfigOutput)
}

func (i RepositoryVirtualRepositoryConfigArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryVirtualRepositoryConfig] {
	return pulumix.Output[RepositoryVirtualRepositoryConfig]{
		OutputState: i.ToRepositoryVirtualRepositoryConfigOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryVirtualRepositoryConfigArgs) ToRepositoryVirtualRepositoryConfigPtrOutput() RepositoryVirtualRepositoryConfigPtrOutput {
	return i.ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i RepositoryVirtualRepositoryConfigArgs) ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryVirtualRepositoryConfigOutput).ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(ctx)
}

// RepositoryVirtualRepositoryConfigPtrInput is an input type that accepts RepositoryVirtualRepositoryConfigArgs, RepositoryVirtualRepositoryConfigPtr and RepositoryVirtualRepositoryConfigPtrOutput values.
// You can construct a concrete instance of `RepositoryVirtualRepositoryConfigPtrInput` via:
//
//	        RepositoryVirtualRepositoryConfigArgs{...}
//
//	or:
//
//	        nil
type RepositoryVirtualRepositoryConfigPtrInput interface {
	pulumi.Input

	ToRepositoryVirtualRepositoryConfigPtrOutput() RepositoryVirtualRepositoryConfigPtrOutput
	ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(context.Context) RepositoryVirtualRepositoryConfigPtrOutput
}

type repositoryVirtualRepositoryConfigPtrType RepositoryVirtualRepositoryConfigArgs

func RepositoryVirtualRepositoryConfigPtr(v *RepositoryVirtualRepositoryConfigArgs) RepositoryVirtualRepositoryConfigPtrInput {
	return (*repositoryVirtualRepositoryConfigPtrType)(v)
}

func (*repositoryVirtualRepositoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryVirtualRepositoryConfig)(nil)).Elem()
}

func (i *repositoryVirtualRepositoryConfigPtrType) ToRepositoryVirtualRepositoryConfigPtrOutput() RepositoryVirtualRepositoryConfigPtrOutput {
	return i.ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i *repositoryVirtualRepositoryConfigPtrType) ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryVirtualRepositoryConfigPtrOutput)
}

func (i *repositoryVirtualRepositoryConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryVirtualRepositoryConfig] {
	return pulumix.Output[*RepositoryVirtualRepositoryConfig]{
		OutputState: i.ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type RepositoryVirtualRepositoryConfigOutput struct{ *pulumi.OutputState }

func (RepositoryVirtualRepositoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryVirtualRepositoryConfig)(nil)).Elem()
}

func (o RepositoryVirtualRepositoryConfigOutput) ToRepositoryVirtualRepositoryConfigOutput() RepositoryVirtualRepositoryConfigOutput {
	return o
}

func (o RepositoryVirtualRepositoryConfigOutput) ToRepositoryVirtualRepositoryConfigOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigOutput {
	return o
}

func (o RepositoryVirtualRepositoryConfigOutput) ToRepositoryVirtualRepositoryConfigPtrOutput() RepositoryVirtualRepositoryConfigPtrOutput {
	return o.ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(context.Background())
}

func (o RepositoryVirtualRepositoryConfigOutput) ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryVirtualRepositoryConfig) *RepositoryVirtualRepositoryConfig {
		return &v
	}).(RepositoryVirtualRepositoryConfigPtrOutput)
}

func (o RepositoryVirtualRepositoryConfigOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryVirtualRepositoryConfig] {
	return pulumix.Output[RepositoryVirtualRepositoryConfig]{
		OutputState: o.OutputState,
	}
}

// Policies that configure the upstream artifacts distributed by the Virtual
// Repository. Upstream policies cannot be set on a standard repository.
// Structure is documented below.
func (o RepositoryVirtualRepositoryConfigOutput) UpstreamPolicies() RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return o.ApplyT(func(v RepositoryVirtualRepositoryConfig) []RepositoryVirtualRepositoryConfigUpstreamPolicy {
		return v.UpstreamPolicies
	}).(RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput)
}

type RepositoryVirtualRepositoryConfigPtrOutput struct{ *pulumi.OutputState }

func (RepositoryVirtualRepositoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryVirtualRepositoryConfig)(nil)).Elem()
}

func (o RepositoryVirtualRepositoryConfigPtrOutput) ToRepositoryVirtualRepositoryConfigPtrOutput() RepositoryVirtualRepositoryConfigPtrOutput {
	return o
}

func (o RepositoryVirtualRepositoryConfigPtrOutput) ToRepositoryVirtualRepositoryConfigPtrOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigPtrOutput {
	return o
}

func (o RepositoryVirtualRepositoryConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryVirtualRepositoryConfig] {
	return pulumix.Output[*RepositoryVirtualRepositoryConfig]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryVirtualRepositoryConfigPtrOutput) Elem() RepositoryVirtualRepositoryConfigOutput {
	return o.ApplyT(func(v *RepositoryVirtualRepositoryConfig) RepositoryVirtualRepositoryConfig {
		if v != nil {
			return *v
		}
		var ret RepositoryVirtualRepositoryConfig
		return ret
	}).(RepositoryVirtualRepositoryConfigOutput)
}

// Policies that configure the upstream artifacts distributed by the Virtual
// Repository. Upstream policies cannot be set on a standard repository.
// Structure is documented below.
func (o RepositoryVirtualRepositoryConfigPtrOutput) UpstreamPolicies() RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return o.ApplyT(func(v *RepositoryVirtualRepositoryConfig) []RepositoryVirtualRepositoryConfigUpstreamPolicy {
		if v == nil {
			return nil
		}
		return v.UpstreamPolicies
	}).(RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput)
}

type RepositoryVirtualRepositoryConfigUpstreamPolicy struct {
	// The user-provided ID of the upstream policy.
	Id *string `pulumi:"id"`
	// Entries with a greater priority value take precedence in the pull order.
	Priority *int `pulumi:"priority"`
	// A reference to the repository resource, for example:
	// "projects/p1/locations/us-central1/repository/repo1".
	Repository *string `pulumi:"repository"`
}

// RepositoryVirtualRepositoryConfigUpstreamPolicyInput is an input type that accepts RepositoryVirtualRepositoryConfigUpstreamPolicyArgs and RepositoryVirtualRepositoryConfigUpstreamPolicyOutput values.
// You can construct a concrete instance of `RepositoryVirtualRepositoryConfigUpstreamPolicyInput` via:
//
//	RepositoryVirtualRepositoryConfigUpstreamPolicyArgs{...}
type RepositoryVirtualRepositoryConfigUpstreamPolicyInput interface {
	pulumi.Input

	ToRepositoryVirtualRepositoryConfigUpstreamPolicyOutput() RepositoryVirtualRepositoryConfigUpstreamPolicyOutput
	ToRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(context.Context) RepositoryVirtualRepositoryConfigUpstreamPolicyOutput
}

type RepositoryVirtualRepositoryConfigUpstreamPolicyArgs struct {
	// The user-provided ID of the upstream policy.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Entries with a greater priority value take precedence in the pull order.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// A reference to the repository resource, for example:
	// "projects/p1/locations/us-central1/repository/repo1".
	Repository pulumi.StringPtrInput `pulumi:"repository"`
}

func (RepositoryVirtualRepositoryConfigUpstreamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryVirtualRepositoryConfigUpstreamPolicy)(nil)).Elem()
}

func (i RepositoryVirtualRepositoryConfigUpstreamPolicyArgs) ToRepositoryVirtualRepositoryConfigUpstreamPolicyOutput() RepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return i.ToRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(context.Background())
}

func (i RepositoryVirtualRepositoryConfigUpstreamPolicyArgs) ToRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryVirtualRepositoryConfigUpstreamPolicyOutput)
}

func (i RepositoryVirtualRepositoryConfigUpstreamPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryVirtualRepositoryConfigUpstreamPolicy] {
	return pulumix.Output[RepositoryVirtualRepositoryConfigUpstreamPolicy]{
		OutputState: i.ToRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(ctx).OutputState,
	}
}

// RepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput is an input type that accepts RepositoryVirtualRepositoryConfigUpstreamPolicyArray and RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput values.
// You can construct a concrete instance of `RepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput` via:
//
//	RepositoryVirtualRepositoryConfigUpstreamPolicyArray{ RepositoryVirtualRepositoryConfigUpstreamPolicyArgs{...} }
type RepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput interface {
	pulumi.Input

	ToRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput() RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput
	ToRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(context.Context) RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput
}

type RepositoryVirtualRepositoryConfigUpstreamPolicyArray []RepositoryVirtualRepositoryConfigUpstreamPolicyInput

func (RepositoryVirtualRepositoryConfigUpstreamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryVirtualRepositoryConfigUpstreamPolicy)(nil)).Elem()
}

func (i RepositoryVirtualRepositoryConfigUpstreamPolicyArray) ToRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput() RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return i.ToRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(context.Background())
}

func (i RepositoryVirtualRepositoryConfigUpstreamPolicyArray) ToRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput)
}

func (i RepositoryVirtualRepositoryConfigUpstreamPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]RepositoryVirtualRepositoryConfigUpstreamPolicy] {
	return pulumix.Output[[]RepositoryVirtualRepositoryConfigUpstreamPolicy]{
		OutputState: i.ToRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type RepositoryVirtualRepositoryConfigUpstreamPolicyOutput struct{ *pulumi.OutputState }

func (RepositoryVirtualRepositoryConfigUpstreamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryVirtualRepositoryConfigUpstreamPolicy)(nil)).Elem()
}

func (o RepositoryVirtualRepositoryConfigUpstreamPolicyOutput) ToRepositoryVirtualRepositoryConfigUpstreamPolicyOutput() RepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return o
}

func (o RepositoryVirtualRepositoryConfigUpstreamPolicyOutput) ToRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return o
}

func (o RepositoryVirtualRepositoryConfigUpstreamPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryVirtualRepositoryConfigUpstreamPolicy] {
	return pulumix.Output[RepositoryVirtualRepositoryConfigUpstreamPolicy]{
		OutputState: o.OutputState,
	}
}

// The user-provided ID of the upstream policy.
func (o RepositoryVirtualRepositoryConfigUpstreamPolicyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryVirtualRepositoryConfigUpstreamPolicy) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Entries with a greater priority value take precedence in the pull order.
func (o RepositoryVirtualRepositoryConfigUpstreamPolicyOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RepositoryVirtualRepositoryConfigUpstreamPolicy) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// A reference to the repository resource, for example:
// "projects/p1/locations/us-central1/repository/repo1".
func (o RepositoryVirtualRepositoryConfigUpstreamPolicyOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryVirtualRepositoryConfigUpstreamPolicy) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

type RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput struct{ *pulumi.OutputState }

func (RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryVirtualRepositoryConfigUpstreamPolicy)(nil)).Elem()
}

func (o RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) ToRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput() RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return o
}

func (o RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) ToRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(ctx context.Context) RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return o
}

func (o RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RepositoryVirtualRepositoryConfigUpstreamPolicy] {
	return pulumix.Output[[]RepositoryVirtualRepositoryConfigUpstreamPolicy]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) Index(i pulumi.IntInput) RepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryVirtualRepositoryConfigUpstreamPolicy {
		return vs[0].([]RepositoryVirtualRepositoryConfigUpstreamPolicy)[vs[1].(int)]
	}).(RepositoryVirtualRepositoryConfigUpstreamPolicyOutput)
}

type GetRepositoryCleanupPolicy struct {
	Action             string                                        `pulumi:"action"`
	Conditions         []GetRepositoryCleanupPolicyCondition         `pulumi:"conditions"`
	Id                 string                                        `pulumi:"id"`
	MostRecentVersions []GetRepositoryCleanupPolicyMostRecentVersion `pulumi:"mostRecentVersions"`
}

// GetRepositoryCleanupPolicyInput is an input type that accepts GetRepositoryCleanupPolicyArgs and GetRepositoryCleanupPolicyOutput values.
// You can construct a concrete instance of `GetRepositoryCleanupPolicyInput` via:
//
//	GetRepositoryCleanupPolicyArgs{...}
type GetRepositoryCleanupPolicyInput interface {
	pulumi.Input

	ToGetRepositoryCleanupPolicyOutput() GetRepositoryCleanupPolicyOutput
	ToGetRepositoryCleanupPolicyOutputWithContext(context.Context) GetRepositoryCleanupPolicyOutput
}

type GetRepositoryCleanupPolicyArgs struct {
	Action             pulumi.StringInput                                    `pulumi:"action"`
	Conditions         GetRepositoryCleanupPolicyConditionArrayInput         `pulumi:"conditions"`
	Id                 pulumi.StringInput                                    `pulumi:"id"`
	MostRecentVersions GetRepositoryCleanupPolicyMostRecentVersionArrayInput `pulumi:"mostRecentVersions"`
}

func (GetRepositoryCleanupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryCleanupPolicy)(nil)).Elem()
}

func (i GetRepositoryCleanupPolicyArgs) ToGetRepositoryCleanupPolicyOutput() GetRepositoryCleanupPolicyOutput {
	return i.ToGetRepositoryCleanupPolicyOutputWithContext(context.Background())
}

func (i GetRepositoryCleanupPolicyArgs) ToGetRepositoryCleanupPolicyOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryCleanupPolicyOutput)
}

func (i GetRepositoryCleanupPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryCleanupPolicy] {
	return pulumix.Output[GetRepositoryCleanupPolicy]{
		OutputState: i.ToGetRepositoryCleanupPolicyOutputWithContext(ctx).OutputState,
	}
}

// GetRepositoryCleanupPolicyArrayInput is an input type that accepts GetRepositoryCleanupPolicyArray and GetRepositoryCleanupPolicyArrayOutput values.
// You can construct a concrete instance of `GetRepositoryCleanupPolicyArrayInput` via:
//
//	GetRepositoryCleanupPolicyArray{ GetRepositoryCleanupPolicyArgs{...} }
type GetRepositoryCleanupPolicyArrayInput interface {
	pulumi.Input

	ToGetRepositoryCleanupPolicyArrayOutput() GetRepositoryCleanupPolicyArrayOutput
	ToGetRepositoryCleanupPolicyArrayOutputWithContext(context.Context) GetRepositoryCleanupPolicyArrayOutput
}

type GetRepositoryCleanupPolicyArray []GetRepositoryCleanupPolicyInput

func (GetRepositoryCleanupPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryCleanupPolicy)(nil)).Elem()
}

func (i GetRepositoryCleanupPolicyArray) ToGetRepositoryCleanupPolicyArrayOutput() GetRepositoryCleanupPolicyArrayOutput {
	return i.ToGetRepositoryCleanupPolicyArrayOutputWithContext(context.Background())
}

func (i GetRepositoryCleanupPolicyArray) ToGetRepositoryCleanupPolicyArrayOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryCleanupPolicyArrayOutput)
}

func (i GetRepositoryCleanupPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryCleanupPolicy] {
	return pulumix.Output[[]GetRepositoryCleanupPolicy]{
		OutputState: i.ToGetRepositoryCleanupPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRepositoryCleanupPolicyOutput struct{ *pulumi.OutputState }

func (GetRepositoryCleanupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryCleanupPolicy)(nil)).Elem()
}

func (o GetRepositoryCleanupPolicyOutput) ToGetRepositoryCleanupPolicyOutput() GetRepositoryCleanupPolicyOutput {
	return o
}

func (o GetRepositoryCleanupPolicyOutput) ToGetRepositoryCleanupPolicyOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyOutput {
	return o
}

func (o GetRepositoryCleanupPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryCleanupPolicy] {
	return pulumix.Output[GetRepositoryCleanupPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryCleanupPolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicy) string { return v.Action }).(pulumi.StringOutput)
}

func (o GetRepositoryCleanupPolicyOutput) Conditions() GetRepositoryCleanupPolicyConditionArrayOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicy) []GetRepositoryCleanupPolicyCondition { return v.Conditions }).(GetRepositoryCleanupPolicyConditionArrayOutput)
}

func (o GetRepositoryCleanupPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicy) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRepositoryCleanupPolicyOutput) MostRecentVersions() GetRepositoryCleanupPolicyMostRecentVersionArrayOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicy) []GetRepositoryCleanupPolicyMostRecentVersion {
		return v.MostRecentVersions
	}).(GetRepositoryCleanupPolicyMostRecentVersionArrayOutput)
}

type GetRepositoryCleanupPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryCleanupPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryCleanupPolicy)(nil)).Elem()
}

func (o GetRepositoryCleanupPolicyArrayOutput) ToGetRepositoryCleanupPolicyArrayOutput() GetRepositoryCleanupPolicyArrayOutput {
	return o
}

func (o GetRepositoryCleanupPolicyArrayOutput) ToGetRepositoryCleanupPolicyArrayOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyArrayOutput {
	return o
}

func (o GetRepositoryCleanupPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryCleanupPolicy] {
	return pulumix.Output[[]GetRepositoryCleanupPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryCleanupPolicyArrayOutput) Index(i pulumi.IntInput) GetRepositoryCleanupPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryCleanupPolicy {
		return vs[0].([]GetRepositoryCleanupPolicy)[vs[1].(int)]
	}).(GetRepositoryCleanupPolicyOutput)
}

type GetRepositoryCleanupPolicyCondition struct {
	NewerThan           string   `pulumi:"newerThan"`
	OlderThan           string   `pulumi:"olderThan"`
	PackageNamePrefixes []string `pulumi:"packageNamePrefixes"`
	TagPrefixes         []string `pulumi:"tagPrefixes"`
	TagState            string   `pulumi:"tagState"`
	VersionNamePrefixes []string `pulumi:"versionNamePrefixes"`
}

// GetRepositoryCleanupPolicyConditionInput is an input type that accepts GetRepositoryCleanupPolicyConditionArgs and GetRepositoryCleanupPolicyConditionOutput values.
// You can construct a concrete instance of `GetRepositoryCleanupPolicyConditionInput` via:
//
//	GetRepositoryCleanupPolicyConditionArgs{...}
type GetRepositoryCleanupPolicyConditionInput interface {
	pulumi.Input

	ToGetRepositoryCleanupPolicyConditionOutput() GetRepositoryCleanupPolicyConditionOutput
	ToGetRepositoryCleanupPolicyConditionOutputWithContext(context.Context) GetRepositoryCleanupPolicyConditionOutput
}

type GetRepositoryCleanupPolicyConditionArgs struct {
	NewerThan           pulumi.StringInput      `pulumi:"newerThan"`
	OlderThan           pulumi.StringInput      `pulumi:"olderThan"`
	PackageNamePrefixes pulumi.StringArrayInput `pulumi:"packageNamePrefixes"`
	TagPrefixes         pulumi.StringArrayInput `pulumi:"tagPrefixes"`
	TagState            pulumi.StringInput      `pulumi:"tagState"`
	VersionNamePrefixes pulumi.StringArrayInput `pulumi:"versionNamePrefixes"`
}

func (GetRepositoryCleanupPolicyConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryCleanupPolicyCondition)(nil)).Elem()
}

func (i GetRepositoryCleanupPolicyConditionArgs) ToGetRepositoryCleanupPolicyConditionOutput() GetRepositoryCleanupPolicyConditionOutput {
	return i.ToGetRepositoryCleanupPolicyConditionOutputWithContext(context.Background())
}

func (i GetRepositoryCleanupPolicyConditionArgs) ToGetRepositoryCleanupPolicyConditionOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryCleanupPolicyConditionOutput)
}

func (i GetRepositoryCleanupPolicyConditionArgs) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryCleanupPolicyCondition] {
	return pulumix.Output[GetRepositoryCleanupPolicyCondition]{
		OutputState: i.ToGetRepositoryCleanupPolicyConditionOutputWithContext(ctx).OutputState,
	}
}

// GetRepositoryCleanupPolicyConditionArrayInput is an input type that accepts GetRepositoryCleanupPolicyConditionArray and GetRepositoryCleanupPolicyConditionArrayOutput values.
// You can construct a concrete instance of `GetRepositoryCleanupPolicyConditionArrayInput` via:
//
//	GetRepositoryCleanupPolicyConditionArray{ GetRepositoryCleanupPolicyConditionArgs{...} }
type GetRepositoryCleanupPolicyConditionArrayInput interface {
	pulumi.Input

	ToGetRepositoryCleanupPolicyConditionArrayOutput() GetRepositoryCleanupPolicyConditionArrayOutput
	ToGetRepositoryCleanupPolicyConditionArrayOutputWithContext(context.Context) GetRepositoryCleanupPolicyConditionArrayOutput
}

type GetRepositoryCleanupPolicyConditionArray []GetRepositoryCleanupPolicyConditionInput

func (GetRepositoryCleanupPolicyConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryCleanupPolicyCondition)(nil)).Elem()
}

func (i GetRepositoryCleanupPolicyConditionArray) ToGetRepositoryCleanupPolicyConditionArrayOutput() GetRepositoryCleanupPolicyConditionArrayOutput {
	return i.ToGetRepositoryCleanupPolicyConditionArrayOutputWithContext(context.Background())
}

func (i GetRepositoryCleanupPolicyConditionArray) ToGetRepositoryCleanupPolicyConditionArrayOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryCleanupPolicyConditionArrayOutput)
}

func (i GetRepositoryCleanupPolicyConditionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryCleanupPolicyCondition] {
	return pulumix.Output[[]GetRepositoryCleanupPolicyCondition]{
		OutputState: i.ToGetRepositoryCleanupPolicyConditionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRepositoryCleanupPolicyConditionOutput struct{ *pulumi.OutputState }

func (GetRepositoryCleanupPolicyConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryCleanupPolicyCondition)(nil)).Elem()
}

func (o GetRepositoryCleanupPolicyConditionOutput) ToGetRepositoryCleanupPolicyConditionOutput() GetRepositoryCleanupPolicyConditionOutput {
	return o
}

func (o GetRepositoryCleanupPolicyConditionOutput) ToGetRepositoryCleanupPolicyConditionOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyConditionOutput {
	return o
}

func (o GetRepositoryCleanupPolicyConditionOutput) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryCleanupPolicyCondition] {
	return pulumix.Output[GetRepositoryCleanupPolicyCondition]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryCleanupPolicyConditionOutput) NewerThan() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicyCondition) string { return v.NewerThan }).(pulumi.StringOutput)
}

func (o GetRepositoryCleanupPolicyConditionOutput) OlderThan() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicyCondition) string { return v.OlderThan }).(pulumi.StringOutput)
}

func (o GetRepositoryCleanupPolicyConditionOutput) PackageNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicyCondition) []string { return v.PackageNamePrefixes }).(pulumi.StringArrayOutput)
}

func (o GetRepositoryCleanupPolicyConditionOutput) TagPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicyCondition) []string { return v.TagPrefixes }).(pulumi.StringArrayOutput)
}

func (o GetRepositoryCleanupPolicyConditionOutput) TagState() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicyCondition) string { return v.TagState }).(pulumi.StringOutput)
}

func (o GetRepositoryCleanupPolicyConditionOutput) VersionNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicyCondition) []string { return v.VersionNamePrefixes }).(pulumi.StringArrayOutput)
}

type GetRepositoryCleanupPolicyConditionArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryCleanupPolicyConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryCleanupPolicyCondition)(nil)).Elem()
}

func (o GetRepositoryCleanupPolicyConditionArrayOutput) ToGetRepositoryCleanupPolicyConditionArrayOutput() GetRepositoryCleanupPolicyConditionArrayOutput {
	return o
}

func (o GetRepositoryCleanupPolicyConditionArrayOutput) ToGetRepositoryCleanupPolicyConditionArrayOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyConditionArrayOutput {
	return o
}

func (o GetRepositoryCleanupPolicyConditionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryCleanupPolicyCondition] {
	return pulumix.Output[[]GetRepositoryCleanupPolicyCondition]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryCleanupPolicyConditionArrayOutput) Index(i pulumi.IntInput) GetRepositoryCleanupPolicyConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryCleanupPolicyCondition {
		return vs[0].([]GetRepositoryCleanupPolicyCondition)[vs[1].(int)]
	}).(GetRepositoryCleanupPolicyConditionOutput)
}

type GetRepositoryCleanupPolicyMostRecentVersion struct {
	KeepCount           int      `pulumi:"keepCount"`
	PackageNamePrefixes []string `pulumi:"packageNamePrefixes"`
}

// GetRepositoryCleanupPolicyMostRecentVersionInput is an input type that accepts GetRepositoryCleanupPolicyMostRecentVersionArgs and GetRepositoryCleanupPolicyMostRecentVersionOutput values.
// You can construct a concrete instance of `GetRepositoryCleanupPolicyMostRecentVersionInput` via:
//
//	GetRepositoryCleanupPolicyMostRecentVersionArgs{...}
type GetRepositoryCleanupPolicyMostRecentVersionInput interface {
	pulumi.Input

	ToGetRepositoryCleanupPolicyMostRecentVersionOutput() GetRepositoryCleanupPolicyMostRecentVersionOutput
	ToGetRepositoryCleanupPolicyMostRecentVersionOutputWithContext(context.Context) GetRepositoryCleanupPolicyMostRecentVersionOutput
}

type GetRepositoryCleanupPolicyMostRecentVersionArgs struct {
	KeepCount           pulumi.IntInput         `pulumi:"keepCount"`
	PackageNamePrefixes pulumi.StringArrayInput `pulumi:"packageNamePrefixes"`
}

func (GetRepositoryCleanupPolicyMostRecentVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryCleanupPolicyMostRecentVersion)(nil)).Elem()
}

func (i GetRepositoryCleanupPolicyMostRecentVersionArgs) ToGetRepositoryCleanupPolicyMostRecentVersionOutput() GetRepositoryCleanupPolicyMostRecentVersionOutput {
	return i.ToGetRepositoryCleanupPolicyMostRecentVersionOutputWithContext(context.Background())
}

func (i GetRepositoryCleanupPolicyMostRecentVersionArgs) ToGetRepositoryCleanupPolicyMostRecentVersionOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyMostRecentVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryCleanupPolicyMostRecentVersionOutput)
}

func (i GetRepositoryCleanupPolicyMostRecentVersionArgs) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryCleanupPolicyMostRecentVersion] {
	return pulumix.Output[GetRepositoryCleanupPolicyMostRecentVersion]{
		OutputState: i.ToGetRepositoryCleanupPolicyMostRecentVersionOutputWithContext(ctx).OutputState,
	}
}

// GetRepositoryCleanupPolicyMostRecentVersionArrayInput is an input type that accepts GetRepositoryCleanupPolicyMostRecentVersionArray and GetRepositoryCleanupPolicyMostRecentVersionArrayOutput values.
// You can construct a concrete instance of `GetRepositoryCleanupPolicyMostRecentVersionArrayInput` via:
//
//	GetRepositoryCleanupPolicyMostRecentVersionArray{ GetRepositoryCleanupPolicyMostRecentVersionArgs{...} }
type GetRepositoryCleanupPolicyMostRecentVersionArrayInput interface {
	pulumi.Input

	ToGetRepositoryCleanupPolicyMostRecentVersionArrayOutput() GetRepositoryCleanupPolicyMostRecentVersionArrayOutput
	ToGetRepositoryCleanupPolicyMostRecentVersionArrayOutputWithContext(context.Context) GetRepositoryCleanupPolicyMostRecentVersionArrayOutput
}

type GetRepositoryCleanupPolicyMostRecentVersionArray []GetRepositoryCleanupPolicyMostRecentVersionInput

func (GetRepositoryCleanupPolicyMostRecentVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryCleanupPolicyMostRecentVersion)(nil)).Elem()
}

func (i GetRepositoryCleanupPolicyMostRecentVersionArray) ToGetRepositoryCleanupPolicyMostRecentVersionArrayOutput() GetRepositoryCleanupPolicyMostRecentVersionArrayOutput {
	return i.ToGetRepositoryCleanupPolicyMostRecentVersionArrayOutputWithContext(context.Background())
}

func (i GetRepositoryCleanupPolicyMostRecentVersionArray) ToGetRepositoryCleanupPolicyMostRecentVersionArrayOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyMostRecentVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryCleanupPolicyMostRecentVersionArrayOutput)
}

func (i GetRepositoryCleanupPolicyMostRecentVersionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryCleanupPolicyMostRecentVersion] {
	return pulumix.Output[[]GetRepositoryCleanupPolicyMostRecentVersion]{
		OutputState: i.ToGetRepositoryCleanupPolicyMostRecentVersionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRepositoryCleanupPolicyMostRecentVersionOutput struct{ *pulumi.OutputState }

func (GetRepositoryCleanupPolicyMostRecentVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryCleanupPolicyMostRecentVersion)(nil)).Elem()
}

func (o GetRepositoryCleanupPolicyMostRecentVersionOutput) ToGetRepositoryCleanupPolicyMostRecentVersionOutput() GetRepositoryCleanupPolicyMostRecentVersionOutput {
	return o
}

func (o GetRepositoryCleanupPolicyMostRecentVersionOutput) ToGetRepositoryCleanupPolicyMostRecentVersionOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyMostRecentVersionOutput {
	return o
}

func (o GetRepositoryCleanupPolicyMostRecentVersionOutput) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryCleanupPolicyMostRecentVersion] {
	return pulumix.Output[GetRepositoryCleanupPolicyMostRecentVersion]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryCleanupPolicyMostRecentVersionOutput) KeepCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicyMostRecentVersion) int { return v.KeepCount }).(pulumi.IntOutput)
}

func (o GetRepositoryCleanupPolicyMostRecentVersionOutput) PackageNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRepositoryCleanupPolicyMostRecentVersion) []string { return v.PackageNamePrefixes }).(pulumi.StringArrayOutput)
}

type GetRepositoryCleanupPolicyMostRecentVersionArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryCleanupPolicyMostRecentVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryCleanupPolicyMostRecentVersion)(nil)).Elem()
}

func (o GetRepositoryCleanupPolicyMostRecentVersionArrayOutput) ToGetRepositoryCleanupPolicyMostRecentVersionArrayOutput() GetRepositoryCleanupPolicyMostRecentVersionArrayOutput {
	return o
}

func (o GetRepositoryCleanupPolicyMostRecentVersionArrayOutput) ToGetRepositoryCleanupPolicyMostRecentVersionArrayOutputWithContext(ctx context.Context) GetRepositoryCleanupPolicyMostRecentVersionArrayOutput {
	return o
}

func (o GetRepositoryCleanupPolicyMostRecentVersionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryCleanupPolicyMostRecentVersion] {
	return pulumix.Output[[]GetRepositoryCleanupPolicyMostRecentVersion]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryCleanupPolicyMostRecentVersionArrayOutput) Index(i pulumi.IntInput) GetRepositoryCleanupPolicyMostRecentVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryCleanupPolicyMostRecentVersion {
		return vs[0].([]GetRepositoryCleanupPolicyMostRecentVersion)[vs[1].(int)]
	}).(GetRepositoryCleanupPolicyMostRecentVersionOutput)
}

type GetRepositoryDockerConfig struct {
	ImmutableTags bool `pulumi:"immutableTags"`
}

// GetRepositoryDockerConfigInput is an input type that accepts GetRepositoryDockerConfigArgs and GetRepositoryDockerConfigOutput values.
// You can construct a concrete instance of `GetRepositoryDockerConfigInput` via:
//
//	GetRepositoryDockerConfigArgs{...}
type GetRepositoryDockerConfigInput interface {
	pulumi.Input

	ToGetRepositoryDockerConfigOutput() GetRepositoryDockerConfigOutput
	ToGetRepositoryDockerConfigOutputWithContext(context.Context) GetRepositoryDockerConfigOutput
}

type GetRepositoryDockerConfigArgs struct {
	ImmutableTags pulumi.BoolInput `pulumi:"immutableTags"`
}

func (GetRepositoryDockerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryDockerConfig)(nil)).Elem()
}

func (i GetRepositoryDockerConfigArgs) ToGetRepositoryDockerConfigOutput() GetRepositoryDockerConfigOutput {
	return i.ToGetRepositoryDockerConfigOutputWithContext(context.Background())
}

func (i GetRepositoryDockerConfigArgs) ToGetRepositoryDockerConfigOutputWithContext(ctx context.Context) GetRepositoryDockerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryDockerConfigOutput)
}

func (i GetRepositoryDockerConfigArgs) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryDockerConfig] {
	return pulumix.Output[GetRepositoryDockerConfig]{
		OutputState: i.ToGetRepositoryDockerConfigOutputWithContext(ctx).OutputState,
	}
}

// GetRepositoryDockerConfigArrayInput is an input type that accepts GetRepositoryDockerConfigArray and GetRepositoryDockerConfigArrayOutput values.
// You can construct a concrete instance of `GetRepositoryDockerConfigArrayInput` via:
//
//	GetRepositoryDockerConfigArray{ GetRepositoryDockerConfigArgs{...} }
type GetRepositoryDockerConfigArrayInput interface {
	pulumi.Input

	ToGetRepositoryDockerConfigArrayOutput() GetRepositoryDockerConfigArrayOutput
	ToGetRepositoryDockerConfigArrayOutputWithContext(context.Context) GetRepositoryDockerConfigArrayOutput
}

type GetRepositoryDockerConfigArray []GetRepositoryDockerConfigInput

func (GetRepositoryDockerConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryDockerConfig)(nil)).Elem()
}

func (i GetRepositoryDockerConfigArray) ToGetRepositoryDockerConfigArrayOutput() GetRepositoryDockerConfigArrayOutput {
	return i.ToGetRepositoryDockerConfigArrayOutputWithContext(context.Background())
}

func (i GetRepositoryDockerConfigArray) ToGetRepositoryDockerConfigArrayOutputWithContext(ctx context.Context) GetRepositoryDockerConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryDockerConfigArrayOutput)
}

func (i GetRepositoryDockerConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryDockerConfig] {
	return pulumix.Output[[]GetRepositoryDockerConfig]{
		OutputState: i.ToGetRepositoryDockerConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRepositoryDockerConfigOutput struct{ *pulumi.OutputState }

func (GetRepositoryDockerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryDockerConfig)(nil)).Elem()
}

func (o GetRepositoryDockerConfigOutput) ToGetRepositoryDockerConfigOutput() GetRepositoryDockerConfigOutput {
	return o
}

func (o GetRepositoryDockerConfigOutput) ToGetRepositoryDockerConfigOutputWithContext(ctx context.Context) GetRepositoryDockerConfigOutput {
	return o
}

func (o GetRepositoryDockerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryDockerConfig] {
	return pulumix.Output[GetRepositoryDockerConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryDockerConfigOutput) ImmutableTags() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryDockerConfig) bool { return v.ImmutableTags }).(pulumi.BoolOutput)
}

type GetRepositoryDockerConfigArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryDockerConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryDockerConfig)(nil)).Elem()
}

func (o GetRepositoryDockerConfigArrayOutput) ToGetRepositoryDockerConfigArrayOutput() GetRepositoryDockerConfigArrayOutput {
	return o
}

func (o GetRepositoryDockerConfigArrayOutput) ToGetRepositoryDockerConfigArrayOutputWithContext(ctx context.Context) GetRepositoryDockerConfigArrayOutput {
	return o
}

func (o GetRepositoryDockerConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryDockerConfig] {
	return pulumix.Output[[]GetRepositoryDockerConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryDockerConfigArrayOutput) Index(i pulumi.IntInput) GetRepositoryDockerConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryDockerConfig {
		return vs[0].([]GetRepositoryDockerConfig)[vs[1].(int)]
	}).(GetRepositoryDockerConfigOutput)
}

type GetRepositoryMavenConfig struct {
	AllowSnapshotOverwrites bool   `pulumi:"allowSnapshotOverwrites"`
	VersionPolicy           string `pulumi:"versionPolicy"`
}

// GetRepositoryMavenConfigInput is an input type that accepts GetRepositoryMavenConfigArgs and GetRepositoryMavenConfigOutput values.
// You can construct a concrete instance of `GetRepositoryMavenConfigInput` via:
//
//	GetRepositoryMavenConfigArgs{...}
type GetRepositoryMavenConfigInput interface {
	pulumi.Input

	ToGetRepositoryMavenConfigOutput() GetRepositoryMavenConfigOutput
	ToGetRepositoryMavenConfigOutputWithContext(context.Context) GetRepositoryMavenConfigOutput
}

type GetRepositoryMavenConfigArgs struct {
	AllowSnapshotOverwrites pulumi.BoolInput   `pulumi:"allowSnapshotOverwrites"`
	VersionPolicy           pulumi.StringInput `pulumi:"versionPolicy"`
}

func (GetRepositoryMavenConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryMavenConfig)(nil)).Elem()
}

func (i GetRepositoryMavenConfigArgs) ToGetRepositoryMavenConfigOutput() GetRepositoryMavenConfigOutput {
	return i.ToGetRepositoryMavenConfigOutputWithContext(context.Background())
}

func (i GetRepositoryMavenConfigArgs) ToGetRepositoryMavenConfigOutputWithContext(ctx context.Context) GetRepositoryMavenConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryMavenConfigOutput)
}

func (i GetRepositoryMavenConfigArgs) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryMavenConfig] {
	return pulumix.Output[GetRepositoryMavenConfig]{
		OutputState: i.ToGetRepositoryMavenConfigOutputWithContext(ctx).OutputState,
	}
}

// GetRepositoryMavenConfigArrayInput is an input type that accepts GetRepositoryMavenConfigArray and GetRepositoryMavenConfigArrayOutput values.
// You can construct a concrete instance of `GetRepositoryMavenConfigArrayInput` via:
//
//	GetRepositoryMavenConfigArray{ GetRepositoryMavenConfigArgs{...} }
type GetRepositoryMavenConfigArrayInput interface {
	pulumi.Input

	ToGetRepositoryMavenConfigArrayOutput() GetRepositoryMavenConfigArrayOutput
	ToGetRepositoryMavenConfigArrayOutputWithContext(context.Context) GetRepositoryMavenConfigArrayOutput
}

type GetRepositoryMavenConfigArray []GetRepositoryMavenConfigInput

func (GetRepositoryMavenConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryMavenConfig)(nil)).Elem()
}

func (i GetRepositoryMavenConfigArray) ToGetRepositoryMavenConfigArrayOutput() GetRepositoryMavenConfigArrayOutput {
	return i.ToGetRepositoryMavenConfigArrayOutputWithContext(context.Background())
}

func (i GetRepositoryMavenConfigArray) ToGetRepositoryMavenConfigArrayOutputWithContext(ctx context.Context) GetRepositoryMavenConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryMavenConfigArrayOutput)
}

func (i GetRepositoryMavenConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryMavenConfig] {
	return pulumix.Output[[]GetRepositoryMavenConfig]{
		OutputState: i.ToGetRepositoryMavenConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRepositoryMavenConfigOutput struct{ *pulumi.OutputState }

func (GetRepositoryMavenConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryMavenConfig)(nil)).Elem()
}

func (o GetRepositoryMavenConfigOutput) ToGetRepositoryMavenConfigOutput() GetRepositoryMavenConfigOutput {
	return o
}

func (o GetRepositoryMavenConfigOutput) ToGetRepositoryMavenConfigOutputWithContext(ctx context.Context) GetRepositoryMavenConfigOutput {
	return o
}

func (o GetRepositoryMavenConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryMavenConfig] {
	return pulumix.Output[GetRepositoryMavenConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryMavenConfigOutput) AllowSnapshotOverwrites() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryMavenConfig) bool { return v.AllowSnapshotOverwrites }).(pulumi.BoolOutput)
}

func (o GetRepositoryMavenConfigOutput) VersionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryMavenConfig) string { return v.VersionPolicy }).(pulumi.StringOutput)
}

type GetRepositoryMavenConfigArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryMavenConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryMavenConfig)(nil)).Elem()
}

func (o GetRepositoryMavenConfigArrayOutput) ToGetRepositoryMavenConfigArrayOutput() GetRepositoryMavenConfigArrayOutput {
	return o
}

func (o GetRepositoryMavenConfigArrayOutput) ToGetRepositoryMavenConfigArrayOutputWithContext(ctx context.Context) GetRepositoryMavenConfigArrayOutput {
	return o
}

func (o GetRepositoryMavenConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryMavenConfig] {
	return pulumix.Output[[]GetRepositoryMavenConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryMavenConfigArrayOutput) Index(i pulumi.IntInput) GetRepositoryMavenConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryMavenConfig {
		return vs[0].([]GetRepositoryMavenConfig)[vs[1].(int)]
	}).(GetRepositoryMavenConfigOutput)
}

type GetRepositoryRemoteRepositoryConfig struct {
	Description        string                                                `pulumi:"description"`
	DockerRepositories []GetRepositoryRemoteRepositoryConfigDockerRepository `pulumi:"dockerRepositories"`
	MavenRepositories  []GetRepositoryRemoteRepositoryConfigMavenRepository  `pulumi:"mavenRepositories"`
	NpmRepositories    []GetRepositoryRemoteRepositoryConfigNpmRepository    `pulumi:"npmRepositories"`
	PythonRepositories []GetRepositoryRemoteRepositoryConfigPythonRepository `pulumi:"pythonRepositories"`
}

// GetRepositoryRemoteRepositoryConfigInput is an input type that accepts GetRepositoryRemoteRepositoryConfigArgs and GetRepositoryRemoteRepositoryConfigOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigInput` via:
//
//	GetRepositoryRemoteRepositoryConfigArgs{...}
type GetRepositoryRemoteRepositoryConfigInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigOutput() GetRepositoryRemoteRepositoryConfigOutput
	ToGetRepositoryRemoteRepositoryConfigOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigOutput
}

type GetRepositoryRemoteRepositoryConfigArgs struct {
	Description        pulumi.StringInput                                            `pulumi:"description"`
	DockerRepositories GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayInput `pulumi:"dockerRepositories"`
	MavenRepositories  GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayInput  `pulumi:"mavenRepositories"`
	NpmRepositories    GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayInput    `pulumi:"npmRepositories"`
	PythonRepositories GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayInput `pulumi:"pythonRepositories"`
}

func (GetRepositoryRemoteRepositoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfig)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigArgs) ToGetRepositoryRemoteRepositoryConfigOutput() GetRepositoryRemoteRepositoryConfigOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigArgs) ToGetRepositoryRemoteRepositoryConfigOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigOutput)
}

func (i GetRepositoryRemoteRepositoryConfigArgs) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryRemoteRepositoryConfig] {
	return pulumix.Output[GetRepositoryRemoteRepositoryConfig]{
		OutputState: i.ToGetRepositoryRemoteRepositoryConfigOutputWithContext(ctx).OutputState,
	}
}

// GetRepositoryRemoteRepositoryConfigArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigArray and GetRepositoryRemoteRepositoryConfigArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigArray{ GetRepositoryRemoteRepositoryConfigArgs{...} }
type GetRepositoryRemoteRepositoryConfigArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigArrayOutput() GetRepositoryRemoteRepositoryConfigArrayOutput
	ToGetRepositoryRemoteRepositoryConfigArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigArrayOutput
}

type GetRepositoryRemoteRepositoryConfigArray []GetRepositoryRemoteRepositoryConfigInput

func (GetRepositoryRemoteRepositoryConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfig)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigArray) ToGetRepositoryRemoteRepositoryConfigArrayOutput() GetRepositoryRemoteRepositoryConfigArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigArray) ToGetRepositoryRemoteRepositoryConfigArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigArrayOutput)
}

func (i GetRepositoryRemoteRepositoryConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryRemoteRepositoryConfig] {
	return pulumix.Output[[]GetRepositoryRemoteRepositoryConfig]{
		OutputState: i.ToGetRepositoryRemoteRepositoryConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRepositoryRemoteRepositoryConfigOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfig)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigOutput) ToGetRepositoryRemoteRepositoryConfigOutput() GetRepositoryRemoteRepositoryConfigOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigOutput) ToGetRepositoryRemoteRepositoryConfigOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryRemoteRepositoryConfig] {
	return pulumix.Output[GetRepositoryRemoteRepositoryConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryRemoteRepositoryConfigOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfig) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetRepositoryRemoteRepositoryConfigOutput) DockerRepositories() GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfig) []GetRepositoryRemoteRepositoryConfigDockerRepository {
		return v.DockerRepositories
	}).(GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput)
}

func (o GetRepositoryRemoteRepositoryConfigOutput) MavenRepositories() GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfig) []GetRepositoryRemoteRepositoryConfigMavenRepository {
		return v.MavenRepositories
	}).(GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput)
}

func (o GetRepositoryRemoteRepositoryConfigOutput) NpmRepositories() GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfig) []GetRepositoryRemoteRepositoryConfigNpmRepository {
		return v.NpmRepositories
	}).(GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput)
}

func (o GetRepositoryRemoteRepositoryConfigOutput) PythonRepositories() GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfig) []GetRepositoryRemoteRepositoryConfigPythonRepository {
		return v.PythonRepositories
	}).(GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput)
}

type GetRepositoryRemoteRepositoryConfigArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfig)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigArrayOutput) ToGetRepositoryRemoteRepositoryConfigArrayOutput() GetRepositoryRemoteRepositoryConfigArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigArrayOutput) ToGetRepositoryRemoteRepositoryConfigArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryRemoteRepositoryConfig] {
	return pulumix.Output[[]GetRepositoryRemoteRepositoryConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryRemoteRepositoryConfigArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfig {
		return vs[0].([]GetRepositoryRemoteRepositoryConfig)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigOutput)
}

type GetRepositoryRemoteRepositoryConfigDockerRepository struct {
	PublicRepository string `pulumi:"publicRepository"`
}

// GetRepositoryRemoteRepositoryConfigDockerRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs and GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigDockerRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigDockerRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigDockerRepositoryOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs struct {
	PublicRepository pulumi.StringInput `pulumi:"publicRepository"`
}

func (GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigDockerRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput)
}

func (i GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryRemoteRepositoryConfigDockerRepository] {
	return pulumix.Output[GetRepositoryRemoteRepositoryConfigDockerRepository]{
		OutputState: i.ToGetRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(ctx).OutputState,
	}
}

// GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigDockerRepositoryArray and GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigDockerRepositoryArray{ GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigDockerRepositoryArray []GetRepositoryRemoteRepositoryConfigDockerRepositoryInput

func (GetRepositoryRemoteRepositoryConfigDockerRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigDockerRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigDockerRepositoryArray) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigDockerRepositoryArray) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput)
}

func (i GetRepositoryRemoteRepositoryConfigDockerRepositoryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryRemoteRepositoryConfigDockerRepository] {
	return pulumix.Output[[]GetRepositoryRemoteRepositoryConfigDockerRepository]{
		OutputState: i.ToGetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigDockerRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryRemoteRepositoryConfigDockerRepository] {
	return pulumix.Output[GetRepositoryRemoteRepositoryConfigDockerRepository]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput) PublicRepository() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigDockerRepository) string { return v.PublicRepository }).(pulumi.StringOutput)
}

type GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigDockerRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryRemoteRepositoryConfigDockerRepository] {
	return pulumix.Output[[]GetRepositoryRemoteRepositoryConfigDockerRepository]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigDockerRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigDockerRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput)
}

type GetRepositoryRemoteRepositoryConfigMavenRepository struct {
	PublicRepository string `pulumi:"publicRepository"`
}

// GetRepositoryRemoteRepositoryConfigMavenRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs and GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigMavenRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigMavenRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigMavenRepositoryOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs struct {
	PublicRepository pulumi.StringInput `pulumi:"publicRepository"`
}

func (GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigMavenRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput)
}

func (i GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryRemoteRepositoryConfigMavenRepository] {
	return pulumix.Output[GetRepositoryRemoteRepositoryConfigMavenRepository]{
		OutputState: i.ToGetRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(ctx).OutputState,
	}
}

// GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigMavenRepositoryArray and GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigMavenRepositoryArray{ GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigMavenRepositoryArray []GetRepositoryRemoteRepositoryConfigMavenRepositoryInput

func (GetRepositoryRemoteRepositoryConfigMavenRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigMavenRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigMavenRepositoryArray) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigMavenRepositoryArray) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput)
}

func (i GetRepositoryRemoteRepositoryConfigMavenRepositoryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryRemoteRepositoryConfigMavenRepository] {
	return pulumix.Output[[]GetRepositoryRemoteRepositoryConfigMavenRepository]{
		OutputState: i.ToGetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigMavenRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryRemoteRepositoryConfigMavenRepository] {
	return pulumix.Output[GetRepositoryRemoteRepositoryConfigMavenRepository]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput) PublicRepository() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigMavenRepository) string { return v.PublicRepository }).(pulumi.StringOutput)
}

type GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigMavenRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryRemoteRepositoryConfigMavenRepository] {
	return pulumix.Output[[]GetRepositoryRemoteRepositoryConfigMavenRepository]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigMavenRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigMavenRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput)
}

type GetRepositoryRemoteRepositoryConfigNpmRepository struct {
	PublicRepository string `pulumi:"publicRepository"`
}

// GetRepositoryRemoteRepositoryConfigNpmRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs and GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigNpmRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigNpmRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigNpmRepositoryOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs struct {
	PublicRepository pulumi.StringInput `pulumi:"publicRepository"`
}

func (GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigNpmRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput)
}

func (i GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryRemoteRepositoryConfigNpmRepository] {
	return pulumix.Output[GetRepositoryRemoteRepositoryConfigNpmRepository]{
		OutputState: i.ToGetRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(ctx).OutputState,
	}
}

// GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigNpmRepositoryArray and GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigNpmRepositoryArray{ GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigNpmRepositoryArray []GetRepositoryRemoteRepositoryConfigNpmRepositoryInput

func (GetRepositoryRemoteRepositoryConfigNpmRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigNpmRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigNpmRepositoryArray) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigNpmRepositoryArray) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput)
}

func (i GetRepositoryRemoteRepositoryConfigNpmRepositoryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryRemoteRepositoryConfigNpmRepository] {
	return pulumix.Output[[]GetRepositoryRemoteRepositoryConfigNpmRepository]{
		OutputState: i.ToGetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigNpmRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryRemoteRepositoryConfigNpmRepository] {
	return pulumix.Output[GetRepositoryRemoteRepositoryConfigNpmRepository]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput) PublicRepository() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigNpmRepository) string { return v.PublicRepository }).(pulumi.StringOutput)
}

type GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigNpmRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryRemoteRepositoryConfigNpmRepository] {
	return pulumix.Output[[]GetRepositoryRemoteRepositoryConfigNpmRepository]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigNpmRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigNpmRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput)
}

type GetRepositoryRemoteRepositoryConfigPythonRepository struct {
	PublicRepository string `pulumi:"publicRepository"`
}

// GetRepositoryRemoteRepositoryConfigPythonRepositoryInput is an input type that accepts GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs and GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigPythonRepositoryInput` via:
//
//	GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs{...}
type GetRepositoryRemoteRepositoryConfigPythonRepositoryInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigPythonRepositoryOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput
	ToGetRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput
}

type GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs struct {
	PublicRepository pulumi.StringInput `pulumi:"publicRepository"`
}

func (GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigPythonRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput)
}

func (i GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryRemoteRepositoryConfigPythonRepository] {
	return pulumix.Output[GetRepositoryRemoteRepositoryConfigPythonRepository]{
		OutputState: i.ToGetRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(ctx).OutputState,
	}
}

// GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayInput is an input type that accepts GetRepositoryRemoteRepositoryConfigPythonRepositoryArray and GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayInput` via:
//
//	GetRepositoryRemoteRepositoryConfigPythonRepositoryArray{ GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs{...} }
type GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput
	ToGetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutputWithContext(context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput
}

type GetRepositoryRemoteRepositoryConfigPythonRepositoryArray []GetRepositoryRemoteRepositoryConfigPythonRepositoryInput

func (GetRepositoryRemoteRepositoryConfigPythonRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigPythonRepository)(nil)).Elem()
}

func (i GetRepositoryRemoteRepositoryConfigPythonRepositoryArray) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput {
	return i.ToGetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoryRemoteRepositoryConfigPythonRepositoryArray) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput)
}

func (i GetRepositoryRemoteRepositoryConfigPythonRepositoryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryRemoteRepositoryConfigPythonRepository] {
	return pulumix.Output[[]GetRepositoryRemoteRepositoryConfigPythonRepository]{
		OutputState: i.ToGetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigPythonRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryRemoteRepositoryConfigPythonRepository] {
	return pulumix.Output[GetRepositoryRemoteRepositoryConfigPythonRepository]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput) PublicRepository() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRemoteRepositoryConfigPythonRepository) string { return v.PublicRepository }).(pulumi.StringOutput)
}

type GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryRemoteRepositoryConfigPythonRepository)(nil)).Elem()
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput() GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput) ToGetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput {
	return o
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryRemoteRepositoryConfigPythonRepository] {
	return pulumix.Output[[]GetRepositoryRemoteRepositoryConfigPythonRepository]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryRemoteRepositoryConfigPythonRepository {
		return vs[0].([]GetRepositoryRemoteRepositoryConfigPythonRepository)[vs[1].(int)]
	}).(GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput)
}

type GetRepositoryVirtualRepositoryConfig struct {
	UpstreamPolicies []GetRepositoryVirtualRepositoryConfigUpstreamPolicy `pulumi:"upstreamPolicies"`
}

// GetRepositoryVirtualRepositoryConfigInput is an input type that accepts GetRepositoryVirtualRepositoryConfigArgs and GetRepositoryVirtualRepositoryConfigOutput values.
// You can construct a concrete instance of `GetRepositoryVirtualRepositoryConfigInput` via:
//
//	GetRepositoryVirtualRepositoryConfigArgs{...}
type GetRepositoryVirtualRepositoryConfigInput interface {
	pulumi.Input

	ToGetRepositoryVirtualRepositoryConfigOutput() GetRepositoryVirtualRepositoryConfigOutput
	ToGetRepositoryVirtualRepositoryConfigOutputWithContext(context.Context) GetRepositoryVirtualRepositoryConfigOutput
}

type GetRepositoryVirtualRepositoryConfigArgs struct {
	UpstreamPolicies GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput `pulumi:"upstreamPolicies"`
}

func (GetRepositoryVirtualRepositoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryVirtualRepositoryConfig)(nil)).Elem()
}

func (i GetRepositoryVirtualRepositoryConfigArgs) ToGetRepositoryVirtualRepositoryConfigOutput() GetRepositoryVirtualRepositoryConfigOutput {
	return i.ToGetRepositoryVirtualRepositoryConfigOutputWithContext(context.Background())
}

func (i GetRepositoryVirtualRepositoryConfigArgs) ToGetRepositoryVirtualRepositoryConfigOutputWithContext(ctx context.Context) GetRepositoryVirtualRepositoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryVirtualRepositoryConfigOutput)
}

func (i GetRepositoryVirtualRepositoryConfigArgs) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryVirtualRepositoryConfig] {
	return pulumix.Output[GetRepositoryVirtualRepositoryConfig]{
		OutputState: i.ToGetRepositoryVirtualRepositoryConfigOutputWithContext(ctx).OutputState,
	}
}

// GetRepositoryVirtualRepositoryConfigArrayInput is an input type that accepts GetRepositoryVirtualRepositoryConfigArray and GetRepositoryVirtualRepositoryConfigArrayOutput values.
// You can construct a concrete instance of `GetRepositoryVirtualRepositoryConfigArrayInput` via:
//
//	GetRepositoryVirtualRepositoryConfigArray{ GetRepositoryVirtualRepositoryConfigArgs{...} }
type GetRepositoryVirtualRepositoryConfigArrayInput interface {
	pulumi.Input

	ToGetRepositoryVirtualRepositoryConfigArrayOutput() GetRepositoryVirtualRepositoryConfigArrayOutput
	ToGetRepositoryVirtualRepositoryConfigArrayOutputWithContext(context.Context) GetRepositoryVirtualRepositoryConfigArrayOutput
}

type GetRepositoryVirtualRepositoryConfigArray []GetRepositoryVirtualRepositoryConfigInput

func (GetRepositoryVirtualRepositoryConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryVirtualRepositoryConfig)(nil)).Elem()
}

func (i GetRepositoryVirtualRepositoryConfigArray) ToGetRepositoryVirtualRepositoryConfigArrayOutput() GetRepositoryVirtualRepositoryConfigArrayOutput {
	return i.ToGetRepositoryVirtualRepositoryConfigArrayOutputWithContext(context.Background())
}

func (i GetRepositoryVirtualRepositoryConfigArray) ToGetRepositoryVirtualRepositoryConfigArrayOutputWithContext(ctx context.Context) GetRepositoryVirtualRepositoryConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryVirtualRepositoryConfigArrayOutput)
}

func (i GetRepositoryVirtualRepositoryConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryVirtualRepositoryConfig] {
	return pulumix.Output[[]GetRepositoryVirtualRepositoryConfig]{
		OutputState: i.ToGetRepositoryVirtualRepositoryConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRepositoryVirtualRepositoryConfigOutput struct{ *pulumi.OutputState }

func (GetRepositoryVirtualRepositoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryVirtualRepositoryConfig)(nil)).Elem()
}

func (o GetRepositoryVirtualRepositoryConfigOutput) ToGetRepositoryVirtualRepositoryConfigOutput() GetRepositoryVirtualRepositoryConfigOutput {
	return o
}

func (o GetRepositoryVirtualRepositoryConfigOutput) ToGetRepositoryVirtualRepositoryConfigOutputWithContext(ctx context.Context) GetRepositoryVirtualRepositoryConfigOutput {
	return o
}

func (o GetRepositoryVirtualRepositoryConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryVirtualRepositoryConfig] {
	return pulumix.Output[GetRepositoryVirtualRepositoryConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryVirtualRepositoryConfigOutput) UpstreamPolicies() GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return o.ApplyT(func(v GetRepositoryVirtualRepositoryConfig) []GetRepositoryVirtualRepositoryConfigUpstreamPolicy {
		return v.UpstreamPolicies
	}).(GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput)
}

type GetRepositoryVirtualRepositoryConfigArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryVirtualRepositoryConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryVirtualRepositoryConfig)(nil)).Elem()
}

func (o GetRepositoryVirtualRepositoryConfigArrayOutput) ToGetRepositoryVirtualRepositoryConfigArrayOutput() GetRepositoryVirtualRepositoryConfigArrayOutput {
	return o
}

func (o GetRepositoryVirtualRepositoryConfigArrayOutput) ToGetRepositoryVirtualRepositoryConfigArrayOutputWithContext(ctx context.Context) GetRepositoryVirtualRepositoryConfigArrayOutput {
	return o
}

func (o GetRepositoryVirtualRepositoryConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryVirtualRepositoryConfig] {
	return pulumix.Output[[]GetRepositoryVirtualRepositoryConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryVirtualRepositoryConfigArrayOutput) Index(i pulumi.IntInput) GetRepositoryVirtualRepositoryConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryVirtualRepositoryConfig {
		return vs[0].([]GetRepositoryVirtualRepositoryConfig)[vs[1].(int)]
	}).(GetRepositoryVirtualRepositoryConfigOutput)
}

type GetRepositoryVirtualRepositoryConfigUpstreamPolicy struct {
	Id         string `pulumi:"id"`
	Priority   int    `pulumi:"priority"`
	Repository string `pulumi:"repository"`
}

// GetRepositoryVirtualRepositoryConfigUpstreamPolicyInput is an input type that accepts GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs and GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput values.
// You can construct a concrete instance of `GetRepositoryVirtualRepositoryConfigUpstreamPolicyInput` via:
//
//	GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs{...}
type GetRepositoryVirtualRepositoryConfigUpstreamPolicyInput interface {
	pulumi.Input

	ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput() GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput
	ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(context.Context) GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput
}

type GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs struct {
	Id         pulumi.StringInput `pulumi:"id"`
	Priority   pulumi.IntInput    `pulumi:"priority"`
	Repository pulumi.StringInput `pulumi:"repository"`
}

func (GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryVirtualRepositoryConfigUpstreamPolicy)(nil)).Elem()
}

func (i GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs) ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput() GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return i.ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(context.Background())
}

func (i GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs) ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(ctx context.Context) GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput)
}

func (i GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryVirtualRepositoryConfigUpstreamPolicy] {
	return pulumix.Output[GetRepositoryVirtualRepositoryConfigUpstreamPolicy]{
		OutputState: i.ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(ctx).OutputState,
	}
}

// GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput is an input type that accepts GetRepositoryVirtualRepositoryConfigUpstreamPolicyArray and GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput values.
// You can construct a concrete instance of `GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput` via:
//
//	GetRepositoryVirtualRepositoryConfigUpstreamPolicyArray{ GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs{...} }
type GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput interface {
	pulumi.Input

	ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput() GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput
	ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(context.Context) GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput
}

type GetRepositoryVirtualRepositoryConfigUpstreamPolicyArray []GetRepositoryVirtualRepositoryConfigUpstreamPolicyInput

func (GetRepositoryVirtualRepositoryConfigUpstreamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryVirtualRepositoryConfigUpstreamPolicy)(nil)).Elem()
}

func (i GetRepositoryVirtualRepositoryConfigUpstreamPolicyArray) ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput() GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return i.ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(context.Background())
}

func (i GetRepositoryVirtualRepositoryConfigUpstreamPolicyArray) ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(ctx context.Context) GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput)
}

func (i GetRepositoryVirtualRepositoryConfigUpstreamPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryVirtualRepositoryConfigUpstreamPolicy] {
	return pulumix.Output[[]GetRepositoryVirtualRepositoryConfigUpstreamPolicy]{
		OutputState: i.ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput struct{ *pulumi.OutputState }

func (GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryVirtualRepositoryConfigUpstreamPolicy)(nil)).Elem()
}

func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput) ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput() GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return o
}

func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput) ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyOutputWithContext(ctx context.Context) GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return o
}

func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryVirtualRepositoryConfigUpstreamPolicy] {
	return pulumix.Output[GetRepositoryVirtualRepositoryConfigUpstreamPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryVirtualRepositoryConfigUpstreamPolicy) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetRepositoryVirtualRepositoryConfigUpstreamPolicy) int { return v.Priority }).(pulumi.IntOutput)
}

func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryVirtualRepositoryConfigUpstreamPolicy) string { return v.Repository }).(pulumi.StringOutput)
}

type GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryVirtualRepositoryConfigUpstreamPolicy)(nil)).Elem()
}

func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput() GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return o
}

func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) ToGetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutputWithContext(ctx context.Context) GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput {
	return o
}

func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRepositoryVirtualRepositoryConfigUpstreamPolicy] {
	return pulumix.Output[[]GetRepositoryVirtualRepositoryConfigUpstreamPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput) Index(i pulumi.IntInput) GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryVirtualRepositoryConfigUpstreamPolicy {
		return vs[0].([]GetRepositoryVirtualRepositoryConfigUpstreamPolicy)[vs[1].(int)]
	}).(GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCleanupPolicyInput)(nil)).Elem(), RepositoryCleanupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCleanupPolicyArrayInput)(nil)).Elem(), RepositoryCleanupPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCleanupPolicyConditionInput)(nil)).Elem(), RepositoryCleanupPolicyConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCleanupPolicyConditionPtrInput)(nil)).Elem(), RepositoryCleanupPolicyConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCleanupPolicyMostRecentVersionsInput)(nil)).Elem(), RepositoryCleanupPolicyMostRecentVersionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCleanupPolicyMostRecentVersionsPtrInput)(nil)).Elem(), RepositoryCleanupPolicyMostRecentVersionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryDockerConfigInput)(nil)).Elem(), RepositoryDockerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryDockerConfigPtrInput)(nil)).Elem(), RepositoryDockerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamBindingConditionInput)(nil)).Elem(), RepositoryIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamBindingConditionPtrInput)(nil)).Elem(), RepositoryIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamMemberConditionInput)(nil)).Elem(), RepositoryIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamMemberConditionPtrInput)(nil)).Elem(), RepositoryIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMavenConfigInput)(nil)).Elem(), RepositoryMavenConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMavenConfigPtrInput)(nil)).Elem(), RepositoryMavenConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigDockerRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigDockerRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigDockerRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigDockerRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigMavenRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigMavenRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigMavenRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigMavenRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigNpmRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigNpmRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigNpmRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigNpmRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigPythonRepositoryInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigPythonRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRemoteRepositoryConfigPythonRepositoryPtrInput)(nil)).Elem(), RepositoryRemoteRepositoryConfigPythonRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryVirtualRepositoryConfigInput)(nil)).Elem(), RepositoryVirtualRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryVirtualRepositoryConfigPtrInput)(nil)).Elem(), RepositoryVirtualRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryVirtualRepositoryConfigUpstreamPolicyInput)(nil)).Elem(), RepositoryVirtualRepositoryConfigUpstreamPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput)(nil)).Elem(), RepositoryVirtualRepositoryConfigUpstreamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryCleanupPolicyInput)(nil)).Elem(), GetRepositoryCleanupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryCleanupPolicyArrayInput)(nil)).Elem(), GetRepositoryCleanupPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryCleanupPolicyConditionInput)(nil)).Elem(), GetRepositoryCleanupPolicyConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryCleanupPolicyConditionArrayInput)(nil)).Elem(), GetRepositoryCleanupPolicyConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryCleanupPolicyMostRecentVersionInput)(nil)).Elem(), GetRepositoryCleanupPolicyMostRecentVersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryCleanupPolicyMostRecentVersionArrayInput)(nil)).Elem(), GetRepositoryCleanupPolicyMostRecentVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryDockerConfigInput)(nil)).Elem(), GetRepositoryDockerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryDockerConfigArrayInput)(nil)).Elem(), GetRepositoryDockerConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryMavenConfigInput)(nil)).Elem(), GetRepositoryMavenConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryMavenConfigArrayInput)(nil)).Elem(), GetRepositoryMavenConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigDockerRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigDockerRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigDockerRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigMavenRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigMavenRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigMavenRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigNpmRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigNpmRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigNpmRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigPythonRepositoryInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigPythonRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayInput)(nil)).Elem(), GetRepositoryRemoteRepositoryConfigPythonRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryVirtualRepositoryConfigInput)(nil)).Elem(), GetRepositoryVirtualRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryVirtualRepositoryConfigArrayInput)(nil)).Elem(), GetRepositoryVirtualRepositoryConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryVirtualRepositoryConfigUpstreamPolicyInput)(nil)).Elem(), GetRepositoryVirtualRepositoryConfigUpstreamPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayInput)(nil)).Elem(), GetRepositoryVirtualRepositoryConfigUpstreamPolicyArray{})
	pulumi.RegisterOutputType(RepositoryCleanupPolicyOutput{})
	pulumi.RegisterOutputType(RepositoryCleanupPolicyArrayOutput{})
	pulumi.RegisterOutputType(RepositoryCleanupPolicyConditionOutput{})
	pulumi.RegisterOutputType(RepositoryCleanupPolicyConditionPtrOutput{})
	pulumi.RegisterOutputType(RepositoryCleanupPolicyMostRecentVersionsOutput{})
	pulumi.RegisterOutputType(RepositoryCleanupPolicyMostRecentVersionsPtrOutput{})
	pulumi.RegisterOutputType(RepositoryDockerConfigOutput{})
	pulumi.RegisterOutputType(RepositoryDockerConfigPtrOutput{})
	pulumi.RegisterOutputType(RepositoryIamBindingConditionOutput{})
	pulumi.RegisterOutputType(RepositoryIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(RepositoryIamMemberConditionOutput{})
	pulumi.RegisterOutputType(RepositoryIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(RepositoryMavenConfigOutput{})
	pulumi.RegisterOutputType(RepositoryMavenConfigPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigDockerRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigDockerRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigMavenRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigMavenRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigNpmRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigNpmRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigPythonRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryRemoteRepositoryConfigPythonRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryVirtualRepositoryConfigOutput{})
	pulumi.RegisterOutputType(RepositoryVirtualRepositoryConfigPtrOutput{})
	pulumi.RegisterOutputType(RepositoryVirtualRepositoryConfigUpstreamPolicyOutput{})
	pulumi.RegisterOutputType(RepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryCleanupPolicyOutput{})
	pulumi.RegisterOutputType(GetRepositoryCleanupPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryCleanupPolicyConditionOutput{})
	pulumi.RegisterOutputType(GetRepositoryCleanupPolicyConditionArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryCleanupPolicyMostRecentVersionOutput{})
	pulumi.RegisterOutputType(GetRepositoryCleanupPolicyMostRecentVersionArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryDockerConfigOutput{})
	pulumi.RegisterOutputType(GetRepositoryDockerConfigArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryMavenConfigOutput{})
	pulumi.RegisterOutputType(GetRepositoryMavenConfigArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigDockerRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigDockerRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigMavenRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigMavenRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigNpmRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigNpmRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigPythonRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoryRemoteRepositoryConfigPythonRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryVirtualRepositoryConfigOutput{})
	pulumi.RegisterOutputType(GetRepositoryVirtualRepositoryConfigArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryVirtualRepositoryConfigUpstreamPolicyOutput{})
	pulumi.RegisterOutputType(GetRepositoryVirtualRepositoryConfigUpstreamPolicyArrayOutput{})
}
