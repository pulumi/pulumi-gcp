// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactregistry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RepositoryIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// RepositoryIamBindingConditionInput is an input type that accepts RepositoryIamBindingConditionArgs and RepositoryIamBindingConditionOutput values.
// You can construct a concrete instance of `RepositoryIamBindingConditionInput` via:
//
//	RepositoryIamBindingConditionArgs{...}
type RepositoryIamBindingConditionInput interface {
	pulumi.Input

	ToRepositoryIamBindingConditionOutput() RepositoryIamBindingConditionOutput
	ToRepositoryIamBindingConditionOutputWithContext(context.Context) RepositoryIamBindingConditionOutput
}

type RepositoryIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (RepositoryIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryIamBindingCondition)(nil)).Elem()
}

func (i RepositoryIamBindingConditionArgs) ToRepositoryIamBindingConditionOutput() RepositoryIamBindingConditionOutput {
	return i.ToRepositoryIamBindingConditionOutputWithContext(context.Background())
}

func (i RepositoryIamBindingConditionArgs) ToRepositoryIamBindingConditionOutputWithContext(ctx context.Context) RepositoryIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamBindingConditionOutput)
}

func (i RepositoryIamBindingConditionArgs) ToRepositoryIamBindingConditionPtrOutput() RepositoryIamBindingConditionPtrOutput {
	return i.ToRepositoryIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i RepositoryIamBindingConditionArgs) ToRepositoryIamBindingConditionPtrOutputWithContext(ctx context.Context) RepositoryIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamBindingConditionOutput).ToRepositoryIamBindingConditionPtrOutputWithContext(ctx)
}

// RepositoryIamBindingConditionPtrInput is an input type that accepts RepositoryIamBindingConditionArgs, RepositoryIamBindingConditionPtr and RepositoryIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `RepositoryIamBindingConditionPtrInput` via:
//
//	        RepositoryIamBindingConditionArgs{...}
//
//	or:
//
//	        nil
type RepositoryIamBindingConditionPtrInput interface {
	pulumi.Input

	ToRepositoryIamBindingConditionPtrOutput() RepositoryIamBindingConditionPtrOutput
	ToRepositoryIamBindingConditionPtrOutputWithContext(context.Context) RepositoryIamBindingConditionPtrOutput
}

type repositoryIamBindingConditionPtrType RepositoryIamBindingConditionArgs

func RepositoryIamBindingConditionPtr(v *RepositoryIamBindingConditionArgs) RepositoryIamBindingConditionPtrInput {
	return (*repositoryIamBindingConditionPtrType)(v)
}

func (*repositoryIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamBindingCondition)(nil)).Elem()
}

func (i *repositoryIamBindingConditionPtrType) ToRepositoryIamBindingConditionPtrOutput() RepositoryIamBindingConditionPtrOutput {
	return i.ToRepositoryIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *repositoryIamBindingConditionPtrType) ToRepositoryIamBindingConditionPtrOutputWithContext(ctx context.Context) RepositoryIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamBindingConditionPtrOutput)
}

type RepositoryIamBindingConditionOutput struct{ *pulumi.OutputState }

func (RepositoryIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryIamBindingCondition)(nil)).Elem()
}

func (o RepositoryIamBindingConditionOutput) ToRepositoryIamBindingConditionOutput() RepositoryIamBindingConditionOutput {
	return o
}

func (o RepositoryIamBindingConditionOutput) ToRepositoryIamBindingConditionOutputWithContext(ctx context.Context) RepositoryIamBindingConditionOutput {
	return o
}

func (o RepositoryIamBindingConditionOutput) ToRepositoryIamBindingConditionPtrOutput() RepositoryIamBindingConditionPtrOutput {
	return o.ToRepositoryIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o RepositoryIamBindingConditionOutput) ToRepositoryIamBindingConditionPtrOutputWithContext(ctx context.Context) RepositoryIamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryIamBindingCondition) *RepositoryIamBindingCondition {
		return &v
	}).(RepositoryIamBindingConditionPtrOutput)
}

func (o RepositoryIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RepositoryIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o RepositoryIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type RepositoryIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (RepositoryIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamBindingCondition)(nil)).Elem()
}

func (o RepositoryIamBindingConditionPtrOutput) ToRepositoryIamBindingConditionPtrOutput() RepositoryIamBindingConditionPtrOutput {
	return o
}

func (o RepositoryIamBindingConditionPtrOutput) ToRepositoryIamBindingConditionPtrOutputWithContext(ctx context.Context) RepositoryIamBindingConditionPtrOutput {
	return o
}

func (o RepositoryIamBindingConditionPtrOutput) Elem() RepositoryIamBindingConditionOutput {
	return o.ApplyT(func(v *RepositoryIamBindingCondition) RepositoryIamBindingCondition {
		if v != nil {
			return *v
		}
		var ret RepositoryIamBindingCondition
		return ret
	}).(RepositoryIamBindingConditionOutput)
}

func (o RepositoryIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type RepositoryIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// RepositoryIamMemberConditionInput is an input type that accepts RepositoryIamMemberConditionArgs and RepositoryIamMemberConditionOutput values.
// You can construct a concrete instance of `RepositoryIamMemberConditionInput` via:
//
//	RepositoryIamMemberConditionArgs{...}
type RepositoryIamMemberConditionInput interface {
	pulumi.Input

	ToRepositoryIamMemberConditionOutput() RepositoryIamMemberConditionOutput
	ToRepositoryIamMemberConditionOutputWithContext(context.Context) RepositoryIamMemberConditionOutput
}

type RepositoryIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (RepositoryIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryIamMemberCondition)(nil)).Elem()
}

func (i RepositoryIamMemberConditionArgs) ToRepositoryIamMemberConditionOutput() RepositoryIamMemberConditionOutput {
	return i.ToRepositoryIamMemberConditionOutputWithContext(context.Background())
}

func (i RepositoryIamMemberConditionArgs) ToRepositoryIamMemberConditionOutputWithContext(ctx context.Context) RepositoryIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamMemberConditionOutput)
}

func (i RepositoryIamMemberConditionArgs) ToRepositoryIamMemberConditionPtrOutput() RepositoryIamMemberConditionPtrOutput {
	return i.ToRepositoryIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i RepositoryIamMemberConditionArgs) ToRepositoryIamMemberConditionPtrOutputWithContext(ctx context.Context) RepositoryIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamMemberConditionOutput).ToRepositoryIamMemberConditionPtrOutputWithContext(ctx)
}

// RepositoryIamMemberConditionPtrInput is an input type that accepts RepositoryIamMemberConditionArgs, RepositoryIamMemberConditionPtr and RepositoryIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `RepositoryIamMemberConditionPtrInput` via:
//
//	        RepositoryIamMemberConditionArgs{...}
//
//	or:
//
//	        nil
type RepositoryIamMemberConditionPtrInput interface {
	pulumi.Input

	ToRepositoryIamMemberConditionPtrOutput() RepositoryIamMemberConditionPtrOutput
	ToRepositoryIamMemberConditionPtrOutputWithContext(context.Context) RepositoryIamMemberConditionPtrOutput
}

type repositoryIamMemberConditionPtrType RepositoryIamMemberConditionArgs

func RepositoryIamMemberConditionPtr(v *RepositoryIamMemberConditionArgs) RepositoryIamMemberConditionPtrInput {
	return (*repositoryIamMemberConditionPtrType)(v)
}

func (*repositoryIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamMemberCondition)(nil)).Elem()
}

func (i *repositoryIamMemberConditionPtrType) ToRepositoryIamMemberConditionPtrOutput() RepositoryIamMemberConditionPtrOutput {
	return i.ToRepositoryIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *repositoryIamMemberConditionPtrType) ToRepositoryIamMemberConditionPtrOutputWithContext(ctx context.Context) RepositoryIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamMemberConditionPtrOutput)
}

type RepositoryIamMemberConditionOutput struct{ *pulumi.OutputState }

func (RepositoryIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryIamMemberCondition)(nil)).Elem()
}

func (o RepositoryIamMemberConditionOutput) ToRepositoryIamMemberConditionOutput() RepositoryIamMemberConditionOutput {
	return o
}

func (o RepositoryIamMemberConditionOutput) ToRepositoryIamMemberConditionOutputWithContext(ctx context.Context) RepositoryIamMemberConditionOutput {
	return o
}

func (o RepositoryIamMemberConditionOutput) ToRepositoryIamMemberConditionPtrOutput() RepositoryIamMemberConditionPtrOutput {
	return o.ToRepositoryIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o RepositoryIamMemberConditionOutput) ToRepositoryIamMemberConditionPtrOutputWithContext(ctx context.Context) RepositoryIamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryIamMemberCondition) *RepositoryIamMemberCondition {
		return &v
	}).(RepositoryIamMemberConditionPtrOutput)
}

func (o RepositoryIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RepositoryIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o RepositoryIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type RepositoryIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (RepositoryIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamMemberCondition)(nil)).Elem()
}

func (o RepositoryIamMemberConditionPtrOutput) ToRepositoryIamMemberConditionPtrOutput() RepositoryIamMemberConditionPtrOutput {
	return o
}

func (o RepositoryIamMemberConditionPtrOutput) ToRepositoryIamMemberConditionPtrOutputWithContext(ctx context.Context) RepositoryIamMemberConditionPtrOutput {
	return o
}

func (o RepositoryIamMemberConditionPtrOutput) Elem() RepositoryIamMemberConditionOutput {
	return o.ApplyT(func(v *RepositoryIamMemberCondition) RepositoryIamMemberCondition {
		if v != nil {
			return *v
		}
		var ret RepositoryIamMemberCondition
		return ret
	}).(RepositoryIamMemberConditionOutput)
}

func (o RepositoryIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type RepositoryMavenConfig struct {
	// The repository with this flag will allow publishing the same
	// snapshot versions.
	AllowSnapshotOverwrites *bool `pulumi:"allowSnapshotOverwrites"`
	// Version policy defines the versions that the registry will accept.
	// Default value is `VERSION_POLICY_UNSPECIFIED`.
	// Possible values are `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, and `SNAPSHOT`.
	VersionPolicy *string `pulumi:"versionPolicy"`
}

// RepositoryMavenConfigInput is an input type that accepts RepositoryMavenConfigArgs and RepositoryMavenConfigOutput values.
// You can construct a concrete instance of `RepositoryMavenConfigInput` via:
//
//	RepositoryMavenConfigArgs{...}
type RepositoryMavenConfigInput interface {
	pulumi.Input

	ToRepositoryMavenConfigOutput() RepositoryMavenConfigOutput
	ToRepositoryMavenConfigOutputWithContext(context.Context) RepositoryMavenConfigOutput
}

type RepositoryMavenConfigArgs struct {
	// The repository with this flag will allow publishing the same
	// snapshot versions.
	AllowSnapshotOverwrites pulumi.BoolPtrInput `pulumi:"allowSnapshotOverwrites"`
	// Version policy defines the versions that the registry will accept.
	// Default value is `VERSION_POLICY_UNSPECIFIED`.
	// Possible values are `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, and `SNAPSHOT`.
	VersionPolicy pulumi.StringPtrInput `pulumi:"versionPolicy"`
}

func (RepositoryMavenConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryMavenConfig)(nil)).Elem()
}

func (i RepositoryMavenConfigArgs) ToRepositoryMavenConfigOutput() RepositoryMavenConfigOutput {
	return i.ToRepositoryMavenConfigOutputWithContext(context.Background())
}

func (i RepositoryMavenConfigArgs) ToRepositoryMavenConfigOutputWithContext(ctx context.Context) RepositoryMavenConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMavenConfigOutput)
}

func (i RepositoryMavenConfigArgs) ToRepositoryMavenConfigPtrOutput() RepositoryMavenConfigPtrOutput {
	return i.ToRepositoryMavenConfigPtrOutputWithContext(context.Background())
}

func (i RepositoryMavenConfigArgs) ToRepositoryMavenConfigPtrOutputWithContext(ctx context.Context) RepositoryMavenConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMavenConfigOutput).ToRepositoryMavenConfigPtrOutputWithContext(ctx)
}

// RepositoryMavenConfigPtrInput is an input type that accepts RepositoryMavenConfigArgs, RepositoryMavenConfigPtr and RepositoryMavenConfigPtrOutput values.
// You can construct a concrete instance of `RepositoryMavenConfigPtrInput` via:
//
//	        RepositoryMavenConfigArgs{...}
//
//	or:
//
//	        nil
type RepositoryMavenConfigPtrInput interface {
	pulumi.Input

	ToRepositoryMavenConfigPtrOutput() RepositoryMavenConfigPtrOutput
	ToRepositoryMavenConfigPtrOutputWithContext(context.Context) RepositoryMavenConfigPtrOutput
}

type repositoryMavenConfigPtrType RepositoryMavenConfigArgs

func RepositoryMavenConfigPtr(v *RepositoryMavenConfigArgs) RepositoryMavenConfigPtrInput {
	return (*repositoryMavenConfigPtrType)(v)
}

func (*repositoryMavenConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryMavenConfig)(nil)).Elem()
}

func (i *repositoryMavenConfigPtrType) ToRepositoryMavenConfigPtrOutput() RepositoryMavenConfigPtrOutput {
	return i.ToRepositoryMavenConfigPtrOutputWithContext(context.Background())
}

func (i *repositoryMavenConfigPtrType) ToRepositoryMavenConfigPtrOutputWithContext(ctx context.Context) RepositoryMavenConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMavenConfigPtrOutput)
}

type RepositoryMavenConfigOutput struct{ *pulumi.OutputState }

func (RepositoryMavenConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryMavenConfig)(nil)).Elem()
}

func (o RepositoryMavenConfigOutput) ToRepositoryMavenConfigOutput() RepositoryMavenConfigOutput {
	return o
}

func (o RepositoryMavenConfigOutput) ToRepositoryMavenConfigOutputWithContext(ctx context.Context) RepositoryMavenConfigOutput {
	return o
}

func (o RepositoryMavenConfigOutput) ToRepositoryMavenConfigPtrOutput() RepositoryMavenConfigPtrOutput {
	return o.ToRepositoryMavenConfigPtrOutputWithContext(context.Background())
}

func (o RepositoryMavenConfigOutput) ToRepositoryMavenConfigPtrOutputWithContext(ctx context.Context) RepositoryMavenConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryMavenConfig) *RepositoryMavenConfig {
		return &v
	}).(RepositoryMavenConfigPtrOutput)
}

// The repository with this flag will allow publishing the same
// snapshot versions.
func (o RepositoryMavenConfigOutput) AllowSnapshotOverwrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryMavenConfig) *bool { return v.AllowSnapshotOverwrites }).(pulumi.BoolPtrOutput)
}

// Version policy defines the versions that the registry will accept.
// Default value is `VERSION_POLICY_UNSPECIFIED`.
// Possible values are `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, and `SNAPSHOT`.
func (o RepositoryMavenConfigOutput) VersionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryMavenConfig) *string { return v.VersionPolicy }).(pulumi.StringPtrOutput)
}

type RepositoryMavenConfigPtrOutput struct{ *pulumi.OutputState }

func (RepositoryMavenConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryMavenConfig)(nil)).Elem()
}

func (o RepositoryMavenConfigPtrOutput) ToRepositoryMavenConfigPtrOutput() RepositoryMavenConfigPtrOutput {
	return o
}

func (o RepositoryMavenConfigPtrOutput) ToRepositoryMavenConfigPtrOutputWithContext(ctx context.Context) RepositoryMavenConfigPtrOutput {
	return o
}

func (o RepositoryMavenConfigPtrOutput) Elem() RepositoryMavenConfigOutput {
	return o.ApplyT(func(v *RepositoryMavenConfig) RepositoryMavenConfig {
		if v != nil {
			return *v
		}
		var ret RepositoryMavenConfig
		return ret
	}).(RepositoryMavenConfigOutput)
}

// The repository with this flag will allow publishing the same
// snapshot versions.
func (o RepositoryMavenConfigPtrOutput) AllowSnapshotOverwrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryMavenConfig) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSnapshotOverwrites
	}).(pulumi.BoolPtrOutput)
}

// Version policy defines the versions that the registry will accept.
// Default value is `VERSION_POLICY_UNSPECIFIED`.
// Possible values are `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, and `SNAPSHOT`.
func (o RepositoryMavenConfigPtrOutput) VersionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryMavenConfig) *string {
		if v == nil {
			return nil
		}
		return v.VersionPolicy
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamBindingConditionInput)(nil)).Elem(), RepositoryIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamBindingConditionPtrInput)(nil)).Elem(), RepositoryIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamMemberConditionInput)(nil)).Elem(), RepositoryIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamMemberConditionPtrInput)(nil)).Elem(), RepositoryIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMavenConfigInput)(nil)).Elem(), RepositoryMavenConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMavenConfigPtrInput)(nil)).Elem(), RepositoryMavenConfigArgs{})
	pulumi.RegisterOutputType(RepositoryIamBindingConditionOutput{})
	pulumi.RegisterOutputType(RepositoryIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(RepositoryIamMemberConditionOutput{})
	pulumi.RegisterOutputType(RepositoryIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(RepositoryMavenConfigOutput{})
	pulumi.RegisterOutputType(RepositoryMavenConfigPtrOutput{})
}
