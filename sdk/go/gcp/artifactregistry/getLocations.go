// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactregistry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get Artifact Registry locations available for a project.
//
// To get more information about Artifact Registry, see:
//
// * [API documentation](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations/list)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactregistry.GetLocations(ctx, &artifactregistry.GetLocationsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Multi-Regional Artifact Registry Deployment
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			available, err := artifactregistry.GetLocations(ctx, &artifactregistry.GetLocationsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = artifactregistry.NewRepository(ctx, "repo_one", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String(available.Locations[0]),
//				RepositoryId: pulumi.String("repo-one"),
//				Format:       pulumi.String("apt"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = artifactregistry.NewRepository(ctx, "repo_two", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String(available.Locations[1]),
//				RepositoryId: pulumi.String("repo-two"),
//				Format:       pulumi.String("apt"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetLocations(ctx *pulumi.Context, args *GetLocationsArgs, opts ...pulumi.InvokeOption) (*GetLocationsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLocationsResult
	err := ctx.Invoke("gcp:artifactregistry/getLocations:getLocations", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLocations.
type GetLocationsArgs struct {
	// The project to list versions for. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getLocations.
type GetLocationsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of Artifact Registry locations available for the given project.
	Locations []string `pulumi:"locations"`
	Project   string   `pulumi:"project"`
}

func GetLocationsOutput(ctx *pulumi.Context, args GetLocationsOutputArgs, opts ...pulumi.InvokeOption) GetLocationsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetLocationsResultOutput, error) {
			args := v.(GetLocationsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:artifactregistry/getLocations:getLocations", args, GetLocationsResultOutput{}, options).(GetLocationsResultOutput), nil
		}).(GetLocationsResultOutput)
}

// A collection of arguments for invoking getLocations.
type GetLocationsOutputArgs struct {
	// The project to list versions for. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (GetLocationsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLocationsArgs)(nil)).Elem()
}

// A collection of values returned by getLocations.
type GetLocationsResultOutput struct{ *pulumi.OutputState }

func (GetLocationsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLocationsResult)(nil)).Elem()
}

func (o GetLocationsResultOutput) ToGetLocationsResultOutput() GetLocationsResultOutput {
	return o
}

func (o GetLocationsResultOutput) ToGetLocationsResultOutputWithContext(ctx context.Context) GetLocationsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetLocationsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLocationsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of Artifact Registry locations available for the given project.
func (o GetLocationsResultOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLocationsResult) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

func (o GetLocationsResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetLocationsResult) string { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLocationsResultOutput{})
}
