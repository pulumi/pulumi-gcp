// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactregistry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves the current IAM policy data for repository
//
// ## example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactregistry.LookupRepositoryIamPolicy(ctx, &artifactregistry.LookupRepositoryIamPolicyArgs{
//				Project:    pulumi.StringRef(google_artifact_registry_repository.MyRepo.Project),
//				Location:   pulumi.StringRef(google_artifact_registry_repository.MyRepo.Location),
//				Repository: google_artifact_registry_repository.MyRepo.Name,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRepositoryIamPolicy(ctx *pulumi.Context, args *LookupRepositoryIamPolicyArgs, opts ...pulumi.InvokeOption) (*LookupRepositoryIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRepositoryIamPolicyResult
	err := ctx.Invoke("gcp:artifactregistry/getRepositoryIamPolicy:getRepositoryIamPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryIamPolicy.
type LookupRepositoryIamPolicyArgs struct {
	// The name of the location this repository is located in.
	// Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// Used to find the parent resource to bind the IAM policy to
	Repository string `pulumi:"repository"`
}

// A collection of values returned by getRepositoryIamPolicy.
type LookupRepositoryIamPolicyResult struct {
	// (Computed) The etag of the IAM policy.
	Etag string `pulumi:"etag"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Location string `pulumi:"location"`
	// (Required only by `artifactregistry.RepositoryIamPolicy`) The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	Project    string `pulumi:"project"`
	Repository string `pulumi:"repository"`
}

func LookupRepositoryIamPolicyOutput(ctx *pulumi.Context, args LookupRepositoryIamPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupRepositoryIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRepositoryIamPolicyResult, error) {
			args := v.(LookupRepositoryIamPolicyArgs)
			r, err := LookupRepositoryIamPolicy(ctx, &args, opts...)
			var s LookupRepositoryIamPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRepositoryIamPolicyResultOutput)
}

// A collection of arguments for invoking getRepositoryIamPolicy.
type LookupRepositoryIamPolicyOutputArgs struct {
	// The name of the location this repository is located in.
	// Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Used to find the parent resource to bind the IAM policy to
	Repository pulumi.StringInput `pulumi:"repository"`
}

func (LookupRepositoryIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getRepositoryIamPolicy.
type LookupRepositoryIamPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupRepositoryIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryIamPolicyResult)(nil)).Elem()
}

func (o LookupRepositoryIamPolicyResultOutput) ToLookupRepositoryIamPolicyResultOutput() LookupRepositoryIamPolicyResultOutput {
	return o
}

func (o LookupRepositoryIamPolicyResultOutput) ToLookupRepositoryIamPolicyResultOutputWithContext(ctx context.Context) LookupRepositoryIamPolicyResultOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o LookupRepositoryIamPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryIamPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRepositoryIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRepositoryIamPolicyResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryIamPolicyResult) string { return v.Location }).(pulumi.StringOutput)
}

// (Required only by `artifactregistry.RepositoryIamPolicy`) The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o LookupRepositoryIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func (o LookupRepositoryIamPolicyResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryIamPolicyResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupRepositoryIamPolicyResultOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryIamPolicyResult) string { return v.Repository }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRepositoryIamPolicyResultOutput{})
}
