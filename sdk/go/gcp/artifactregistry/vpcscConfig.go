// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactregistry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
// ### Artifact Registry Vpcsc Config
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := artifactregistry.NewVpcscConfig(ctx, "my-config", &artifactregistry.VpcscConfigArgs{
//				Location:    pulumi.String("us-central1"),
//				VpcscPolicy: pulumi.String("ALLOW"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # VPCSCConfig can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:artifactregistry/vpcscConfig:VpcscConfig default projects/{{project}}/locations/{{location}}/vpcscConfig/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:artifactregistry/vpcscConfig:VpcscConfig default {{project}}/{{location}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:artifactregistry/vpcscConfig:VpcscConfig default {{location}}/{{name}}
//
// ```
type VpcscConfig struct {
	pulumi.CustomResourceState

	// The name of the location this config is located in.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the project's VPC SC Config.
	// Always of the form: projects/{project}/location/{location}/vpcscConfig
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The VPC SC policy for project and location.
	// Possible values are: `DENY`, `ALLOW`.
	VpcscPolicy pulumi.StringPtrOutput `pulumi:"vpcscPolicy"`
}

// NewVpcscConfig registers a new resource with the given unique name, arguments, and options.
func NewVpcscConfig(ctx *pulumi.Context,
	name string, args *VpcscConfigArgs, opts ...pulumi.ResourceOption) (*VpcscConfig, error) {
	if args == nil {
		args = &VpcscConfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcscConfig
	err := ctx.RegisterResource("gcp:artifactregistry/vpcscConfig:VpcscConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcscConfig gets an existing VpcscConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcscConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcscConfigState, opts ...pulumi.ResourceOption) (*VpcscConfig, error) {
	var resource VpcscConfig
	err := ctx.ReadResource("gcp:artifactregistry/vpcscConfig:VpcscConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcscConfig resources.
type vpcscConfigState struct {
	// The name of the location this config is located in.
	Location *string `pulumi:"location"`
	// The name of the project's VPC SC Config.
	// Always of the form: projects/{project}/location/{location}/vpcscConfig
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The VPC SC policy for project and location.
	// Possible values are: `DENY`, `ALLOW`.
	VpcscPolicy *string `pulumi:"vpcscPolicy"`
}

type VpcscConfigState struct {
	// The name of the location this config is located in.
	Location pulumi.StringPtrInput
	// The name of the project's VPC SC Config.
	// Always of the form: projects/{project}/location/{location}/vpcscConfig
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The VPC SC policy for project and location.
	// Possible values are: `DENY`, `ALLOW`.
	VpcscPolicy pulumi.StringPtrInput
}

func (VpcscConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcscConfigState)(nil)).Elem()
}

type vpcscConfigArgs struct {
	// The name of the location this config is located in.
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The VPC SC policy for project and location.
	// Possible values are: `DENY`, `ALLOW`.
	VpcscPolicy *string `pulumi:"vpcscPolicy"`
}

// The set of arguments for constructing a VpcscConfig resource.
type VpcscConfigArgs struct {
	// The name of the location this config is located in.
	Location pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The VPC SC policy for project and location.
	// Possible values are: `DENY`, `ALLOW`.
	VpcscPolicy pulumi.StringPtrInput
}

func (VpcscConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcscConfigArgs)(nil)).Elem()
}

type VpcscConfigInput interface {
	pulumi.Input

	ToVpcscConfigOutput() VpcscConfigOutput
	ToVpcscConfigOutputWithContext(ctx context.Context) VpcscConfigOutput
}

func (*VpcscConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcscConfig)(nil)).Elem()
}

func (i *VpcscConfig) ToVpcscConfigOutput() VpcscConfigOutput {
	return i.ToVpcscConfigOutputWithContext(context.Background())
}

func (i *VpcscConfig) ToVpcscConfigOutputWithContext(ctx context.Context) VpcscConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcscConfigOutput)
}

func (i *VpcscConfig) ToOutput(ctx context.Context) pulumix.Output[*VpcscConfig] {
	return pulumix.Output[*VpcscConfig]{
		OutputState: i.ToVpcscConfigOutputWithContext(ctx).OutputState,
	}
}

// VpcscConfigArrayInput is an input type that accepts VpcscConfigArray and VpcscConfigArrayOutput values.
// You can construct a concrete instance of `VpcscConfigArrayInput` via:
//
//	VpcscConfigArray{ VpcscConfigArgs{...} }
type VpcscConfigArrayInput interface {
	pulumi.Input

	ToVpcscConfigArrayOutput() VpcscConfigArrayOutput
	ToVpcscConfigArrayOutputWithContext(context.Context) VpcscConfigArrayOutput
}

type VpcscConfigArray []VpcscConfigInput

func (VpcscConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcscConfig)(nil)).Elem()
}

func (i VpcscConfigArray) ToVpcscConfigArrayOutput() VpcscConfigArrayOutput {
	return i.ToVpcscConfigArrayOutputWithContext(context.Background())
}

func (i VpcscConfigArray) ToVpcscConfigArrayOutputWithContext(ctx context.Context) VpcscConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcscConfigArrayOutput)
}

func (i VpcscConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]*VpcscConfig] {
	return pulumix.Output[[]*VpcscConfig]{
		OutputState: i.ToVpcscConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// VpcscConfigMapInput is an input type that accepts VpcscConfigMap and VpcscConfigMapOutput values.
// You can construct a concrete instance of `VpcscConfigMapInput` via:
//
//	VpcscConfigMap{ "key": VpcscConfigArgs{...} }
type VpcscConfigMapInput interface {
	pulumi.Input

	ToVpcscConfigMapOutput() VpcscConfigMapOutput
	ToVpcscConfigMapOutputWithContext(context.Context) VpcscConfigMapOutput
}

type VpcscConfigMap map[string]VpcscConfigInput

func (VpcscConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcscConfig)(nil)).Elem()
}

func (i VpcscConfigMap) ToVpcscConfigMapOutput() VpcscConfigMapOutput {
	return i.ToVpcscConfigMapOutputWithContext(context.Background())
}

func (i VpcscConfigMap) ToVpcscConfigMapOutputWithContext(ctx context.Context) VpcscConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcscConfigMapOutput)
}

func (i VpcscConfigMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpcscConfig] {
	return pulumix.Output[map[string]*VpcscConfig]{
		OutputState: i.ToVpcscConfigMapOutputWithContext(ctx).OutputState,
	}
}

type VpcscConfigOutput struct{ *pulumi.OutputState }

func (VpcscConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcscConfig)(nil)).Elem()
}

func (o VpcscConfigOutput) ToVpcscConfigOutput() VpcscConfigOutput {
	return o
}

func (o VpcscConfigOutput) ToVpcscConfigOutputWithContext(ctx context.Context) VpcscConfigOutput {
	return o
}

func (o VpcscConfigOutput) ToOutput(ctx context.Context) pulumix.Output[*VpcscConfig] {
	return pulumix.Output[*VpcscConfig]{
		OutputState: o.OutputState,
	}
}

// The name of the location this config is located in.
func (o VpcscConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcscConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the project's VPC SC Config.
// Always of the form: projects/{project}/location/{location}/vpcscConfig
func (o VpcscConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcscConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o VpcscConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcscConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The VPC SC policy for project and location.
// Possible values are: `DENY`, `ALLOW`.
func (o VpcscConfigOutput) VpcscPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcscConfig) pulumi.StringPtrOutput { return v.VpcscPolicy }).(pulumi.StringPtrOutput)
}

type VpcscConfigArrayOutput struct{ *pulumi.OutputState }

func (VpcscConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcscConfig)(nil)).Elem()
}

func (o VpcscConfigArrayOutput) ToVpcscConfigArrayOutput() VpcscConfigArrayOutput {
	return o
}

func (o VpcscConfigArrayOutput) ToVpcscConfigArrayOutputWithContext(ctx context.Context) VpcscConfigArrayOutput {
	return o
}

func (o VpcscConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VpcscConfig] {
	return pulumix.Output[[]*VpcscConfig]{
		OutputState: o.OutputState,
	}
}

func (o VpcscConfigArrayOutput) Index(i pulumi.IntInput) VpcscConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcscConfig {
		return vs[0].([]*VpcscConfig)[vs[1].(int)]
	}).(VpcscConfigOutput)
}

type VpcscConfigMapOutput struct{ *pulumi.OutputState }

func (VpcscConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcscConfig)(nil)).Elem()
}

func (o VpcscConfigMapOutput) ToVpcscConfigMapOutput() VpcscConfigMapOutput {
	return o
}

func (o VpcscConfigMapOutput) ToVpcscConfigMapOutputWithContext(ctx context.Context) VpcscConfigMapOutput {
	return o
}

func (o VpcscConfigMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpcscConfig] {
	return pulumix.Output[map[string]*VpcscConfig]{
		OutputState: o.OutputState,
	}
}

func (o VpcscConfigMapOutput) MapIndex(k pulumi.StringInput) VpcscConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcscConfig {
		return vs[0].(map[string]*VpcscConfig)[vs[1].(string)]
	}).(VpcscConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcscConfigInput)(nil)).Elem(), &VpcscConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcscConfigArrayInput)(nil)).Elem(), VpcscConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcscConfigMapInput)(nil)).Elem(), VpcscConfigMap{})
	pulumi.RegisterOutputType(VpcscConfigOutput{})
	pulumi.RegisterOutputType(VpcscConfigArrayOutput{})
	pulumi.RegisterOutputType(VpcscConfigMapOutput{})
}
