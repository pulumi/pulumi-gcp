// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactregistry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source fetches information from a provided Artifact Registry repository, including the fully qualified name and URI for an image, based on a the latest version of image name and optional digest or tag.
//
// > **Note**
// Requires one of the following OAuth scopes: `https://www.googleapis.com/auth/cloud-platform` or `https://www.googleapis.com/auth/cloud-platform.read-only`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myRepo, err := artifactregistry.NewRepository(ctx, "my_repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-west1"),
//				RepositoryId: pulumi.String("my-repository"),
//				Format:       pulumi.String("DOCKER"),
//			})
//			if err != nil {
//				return err
//			}
//			myImage := artifactregistry.GetDockerImageOutput(ctx, artifactregistry.GetDockerImageOutputArgs{
//				Location:     myRepo.Location,
//				RepositoryId: myRepo.RepositoryId,
//				ImageName:    pulumi.String("my-image:my-tag"),
//			}, nil)
//			_, err = cloudrunv2.NewService(ctx, "default", &cloudrunv2.ServiceArgs{
//				Template: &cloudrunv2.ServiceTemplateArgs{
//					Containers: cloudrunv2.ServiceTemplateContainerArray{
//						&cloudrunv2.ServiceTemplateContainerArgs{
//							Image: myImage.ApplyT(func(myImage artifactregistry.GetDockerImageResult) (*string, error) {
//								return &myImage.SelfLink, nil
//							}).(pulumi.StringPtrOutput),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDockerImage(ctx *pulumi.Context, args *GetDockerImageArgs, opts ...pulumi.InvokeOption) (*GetDockerImageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDockerImageResult
	err := ctx.Invoke("gcp:artifactregistry/getDockerImage:getDockerImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDockerImage.
type GetDockerImageArgs struct {
	// The image name to fetch. If no digest or tag is provided, then the latest modified image will be used.
	ImageName string `pulumi:"imageName"`
	// The location of the artifact registry.
	Location string `pulumi:"location"`
	// The project ID in which the resource belongs. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The last part of the repository name to fetch from.
	RepositoryId string `pulumi:"repositoryId"`
}

// A collection of values returned by getDockerImage.
type GetDockerImageResult struct {
	// The time, as a RFC 3339 string, this image was built.
	BuildTime string `pulumi:"buildTime"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	ImageName string `pulumi:"imageName"`
	// Calculated size of the image in bytes.
	ImageSizeBytes string `pulumi:"imageSizeBytes"`
	Location       string `pulumi:"location"`
	// Media type of this image, e.g. `application/vnd.docker.distribution.manifest.v2+json`.
	MediaType string `pulumi:"mediaType"`
	// The fully qualified name of the fetched image.  This name has the form: `projects/{{project}}/locations/{{location}}/repository/{{repository_id}}/dockerImages/{{docker_image}}`. For example,
	Name         string  `pulumi:"name"`
	Project      *string `pulumi:"project"`
	RepositoryId string  `pulumi:"repositoryId"`
	// The URI to access the image.  For example,
	SelfLink string `pulumi:"selfLink"`
	// A list of all tags associated with the image.
	Tags []string `pulumi:"tags"`
	// The time, as a RFC 3339 string, this image was updated.
	UpdateTime string `pulumi:"updateTime"`
	// The time, as a RFC 3339 string, the image was uploaded. For example, `2014-10-02T15:01:23.045123456Z`.
	UploadTime string `pulumi:"uploadTime"`
}

func GetDockerImageOutput(ctx *pulumi.Context, args GetDockerImageOutputArgs, opts ...pulumi.InvokeOption) GetDockerImageResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDockerImageResultOutput, error) {
			args := v.(GetDockerImageArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:artifactregistry/getDockerImage:getDockerImage", args, GetDockerImageResultOutput{}, options).(GetDockerImageResultOutput), nil
		}).(GetDockerImageResultOutput)
}

// A collection of arguments for invoking getDockerImage.
type GetDockerImageOutputArgs struct {
	// The image name to fetch. If no digest or tag is provided, then the latest modified image will be used.
	ImageName pulumi.StringInput `pulumi:"imageName"`
	// The location of the artifact registry.
	Location pulumi.StringInput `pulumi:"location"`
	// The project ID in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The last part of the repository name to fetch from.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
}

func (GetDockerImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDockerImageArgs)(nil)).Elem()
}

// A collection of values returned by getDockerImage.
type GetDockerImageResultOutput struct{ *pulumi.OutputState }

func (GetDockerImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDockerImageResult)(nil)).Elem()
}

func (o GetDockerImageResultOutput) ToGetDockerImageResultOutput() GetDockerImageResultOutput {
	return o
}

func (o GetDockerImageResultOutput) ToGetDockerImageResultOutputWithContext(ctx context.Context) GetDockerImageResultOutput {
	return o
}

// The time, as a RFC 3339 string, this image was built.
func (o GetDockerImageResultOutput) BuildTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetDockerImageResult) string { return v.BuildTime }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDockerImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDockerImageResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDockerImageResultOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDockerImageResult) string { return v.ImageName }).(pulumi.StringOutput)
}

// Calculated size of the image in bytes.
func (o GetDockerImageResultOutput) ImageSizeBytes() pulumi.StringOutput {
	return o.ApplyT(func(v GetDockerImageResult) string { return v.ImageSizeBytes }).(pulumi.StringOutput)
}

func (o GetDockerImageResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetDockerImageResult) string { return v.Location }).(pulumi.StringOutput)
}

// Media type of this image, e.g. `application/vnd.docker.distribution.manifest.v2+json`.
func (o GetDockerImageResultOutput) MediaType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDockerImageResult) string { return v.MediaType }).(pulumi.StringOutput)
}

// The fully qualified name of the fetched image.  This name has the form: `projects/{{project}}/locations/{{location}}/repository/{{repository_id}}/dockerImages/{{docker_image}}`. For example,
func (o GetDockerImageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDockerImageResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDockerImageResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDockerImageResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o GetDockerImageResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDockerImageResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

// The URI to access the image.  For example,
func (o GetDockerImageResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v GetDockerImageResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

// A list of all tags associated with the image.
func (o GetDockerImageResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDockerImageResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The time, as a RFC 3339 string, this image was updated.
func (o GetDockerImageResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetDockerImageResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// The time, as a RFC 3339 string, the image was uploaded. For example, `2014-10-02T15:01:23.045123456Z`.
func (o GetDockerImageResultOutput) UploadTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetDockerImageResult) string { return v.UploadTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDockerImageResultOutput{})
}
