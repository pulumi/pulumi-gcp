// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactregistry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source fetches information from a provided Artifact Registry repository, based on a the latest version of the package and optional version.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/artifactregistry"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			npmRepo, err := artifactregistry.NewRepository(ctx, "npm_repo", &artifactregistry.RepositoryArgs{
//				Location:     pulumi.String("us-central1"),
//				RepositoryId: pulumi.String("my-npm-repo"),
//				Format:       pulumi.String("NPM"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = artifactregistry.GetNpmPackageOutput(ctx, artifactregistry.GetNpmPackageOutputArgs{
//				Location:     npmRepo.Location,
//				RepositoryId: npmRepo.RepositoryId,
//				PackageName:  pulumi.String("example-pkg"),
//			}, nil)
//			_ = artifactregistry.GetNpmPackageOutput(ctx, artifactregistry.GetNpmPackageOutputArgs{
//				Location:     npmRepo.Location,
//				RepositoryId: npmRepo.RepositoryId,
//				PackageName:  pulumi.String("example-pkg:1.0.0"),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetNpmPackage(ctx *pulumi.Context, args *GetNpmPackageArgs, opts ...pulumi.InvokeOption) (*GetNpmPackageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNpmPackageResult
	err := ctx.Invoke("gcp:artifactregistry/getNpmPackage:getNpmPackage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNpmPackage.
type GetNpmPackageArgs struct {
	// The location of the Artifact Registry repository.
	Location string `pulumi:"location"`
	// The name of the package to fetch. Can optionally include a specific version (e.g., `my_pkg:1.2.3`). If no version is provided, the latest version is used.
	PackageName string `pulumi:"packageName"`
	// The ID of the project that owns the repository. If not provided, the provider-level project is used.
	Project *string `pulumi:"project"`
	// The ID of the repository containing the NPM package.
	RepositoryId string `pulumi:"repositoryId"`
}

// A collection of values returned by getNpmPackage.
type GetNpmPackageResult struct {
	// The time the package was created.
	CreateTime string `pulumi:"createTime"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Location string `pulumi:"location"`
	// The fully qualified name of the fetched package. Format:
	Name         string  `pulumi:"name"`
	PackageName  string  `pulumi:"packageName"`
	Project      *string `pulumi:"project"`
	RepositoryId string  `pulumi:"repositoryId"`
	// A list of all Tags attached to this package.
	Tags []string `pulumi:"tags"`
	// The time the package was last updated.
	UpdateTime string `pulumi:"updateTime"`
	// The version of the NPM package.
	Version string `pulumi:"version"`
}

func GetNpmPackageOutput(ctx *pulumi.Context, args GetNpmPackageOutputArgs, opts ...pulumi.InvokeOption) GetNpmPackageResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetNpmPackageResultOutput, error) {
			args := v.(GetNpmPackageArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:artifactregistry/getNpmPackage:getNpmPackage", args, GetNpmPackageResultOutput{}, options).(GetNpmPackageResultOutput), nil
		}).(GetNpmPackageResultOutput)
}

// A collection of arguments for invoking getNpmPackage.
type GetNpmPackageOutputArgs struct {
	// The location of the Artifact Registry repository.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the package to fetch. Can optionally include a specific version (e.g., `my_pkg:1.2.3`). If no version is provided, the latest version is used.
	PackageName pulumi.StringInput `pulumi:"packageName"`
	// The ID of the project that owns the repository. If not provided, the provider-level project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The ID of the repository containing the NPM package.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
}

func (GetNpmPackageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNpmPackageArgs)(nil)).Elem()
}

// A collection of values returned by getNpmPackage.
type GetNpmPackageResultOutput struct{ *pulumi.OutputState }

func (GetNpmPackageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNpmPackageResult)(nil)).Elem()
}

func (o GetNpmPackageResultOutput) ToGetNpmPackageResultOutput() GetNpmPackageResultOutput {
	return o
}

func (o GetNpmPackageResultOutput) ToGetNpmPackageResultOutputWithContext(ctx context.Context) GetNpmPackageResultOutput {
	return o
}

// The time the package was created.
func (o GetNpmPackageResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetNpmPackageResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNpmPackageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNpmPackageResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNpmPackageResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetNpmPackageResult) string { return v.Location }).(pulumi.StringOutput)
}

// The fully qualified name of the fetched package. Format:
func (o GetNpmPackageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNpmPackageResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNpmPackageResultOutput) PackageName() pulumi.StringOutput {
	return o.ApplyT(func(v GetNpmPackageResult) string { return v.PackageName }).(pulumi.StringOutput)
}

func (o GetNpmPackageResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNpmPackageResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o GetNpmPackageResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNpmPackageResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

// A list of all Tags attached to this package.
func (o GetNpmPackageResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNpmPackageResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The time the package was last updated.
func (o GetNpmPackageResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetNpmPackageResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// The version of the NPM package.
func (o GetNpmPackageResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetNpmPackageResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNpmPackageResultOutput{})
}
