// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifactregistry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source fetches information of a package from a provided Artifact Registry repository.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-google/sdk/go/google"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := google.NewArtifactRegistryPackage(ctx, "my_package", &google.ArtifactRegistryPackageArgs{
//				Location:     "us-west1",
//				RepositoryId: "my-repository",
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetPackage(ctx *pulumi.Context, args *GetPackageArgs, opts ...pulumi.InvokeOption) (*GetPackageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPackageResult
	err := ctx.Invoke("gcp:artifactregistry/getPackage:getPackage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPackage.
type GetPackageArgs struct {
	// The location of the artifact registry.
	Location string `pulumi:"location"`
	// The name of the package.
	Name string `pulumi:"name"`
	// The project ID in which the resource belongs. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The last part of the repository name to fetch from.
	RepositoryId string `pulumi:"repositoryId"`
}

// A collection of values returned by getPackage.
type GetPackageResult struct {
	// Client specified annotations.
	Annotations map[string]string `pulumi:"annotations"`
	// The time, as a RFC 3339 string, this package was created.
	CreateTime string `pulumi:"createTime"`
	// The display name of the package.
	DisplayName string `pulumi:"displayName"`
	// The provider-assigned unique ID for this managed resource.
	Id           string  `pulumi:"id"`
	Location     string  `pulumi:"location"`
	Name         string  `pulumi:"name"`
	Project      *string `pulumi:"project"`
	RepositoryId string  `pulumi:"repositoryId"`
	// The time, as a RFC 3339 string, this package was last updated. This includes publishing a new version of the package.
	UpdateTime string `pulumi:"updateTime"`
}

func GetPackageOutput(ctx *pulumi.Context, args GetPackageOutputArgs, opts ...pulumi.InvokeOption) GetPackageResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetPackageResultOutput, error) {
			args := v.(GetPackageArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:artifactregistry/getPackage:getPackage", args, GetPackageResultOutput{}, options).(GetPackageResultOutput), nil
		}).(GetPackageResultOutput)
}

// A collection of arguments for invoking getPackage.
type GetPackageOutputArgs struct {
	// The location of the artifact registry.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the package.
	Name pulumi.StringInput `pulumi:"name"`
	// The project ID in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The last part of the repository name to fetch from.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
}

func (GetPackageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPackageArgs)(nil)).Elem()
}

// A collection of values returned by getPackage.
type GetPackageResultOutput struct{ *pulumi.OutputState }

func (GetPackageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPackageResult)(nil)).Elem()
}

func (o GetPackageResultOutput) ToGetPackageResultOutput() GetPackageResultOutput {
	return o
}

func (o GetPackageResultOutput) ToGetPackageResultOutputWithContext(ctx context.Context) GetPackageResultOutput {
	return o
}

// Client specified annotations.
func (o GetPackageResultOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetPackageResult) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// The time, as a RFC 3339 string, this package was created.
func (o GetPackageResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackageResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The display name of the package.
func (o GetPackageResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackageResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetPackageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackageResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPackageResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackageResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetPackageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackageResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPackageResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPackageResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o GetPackageResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackageResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

// The time, as a RFC 3339 string, this package was last updated. This includes publishing a new version of the package.
func (o GetPackageResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackageResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPackageResultOutput{})
}
