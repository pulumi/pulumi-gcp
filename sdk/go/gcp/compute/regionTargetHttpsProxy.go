// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a RegionTargetHttpsProxy resource, which is used by one or more
// forwarding rules to route incoming HTTPS requests to a URL map.
//
// To get more information about RegionTargetHttpsProxy, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/regionTargetHttpsProxies)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/compute/docs/load-balancing/http/target-proxies)
//
// ## Example Usage
//
// ### Region Target Https Proxy Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "path/to/private.key",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile1, err := std.File(ctx, &std.FileArgs{
//				Input: "path/to/certificate.crt",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultRegionSslCertificate, err := compute.NewRegionSslCertificate(ctx, "default", &compute.RegionSslCertificateArgs{
//				Region:      pulumi.String("us-central1"),
//				Name:        pulumi.String("my-certificate"),
//				PrivateKey:  invokeFile.Result,
//				Certificate: invokeFile1.Result,
//			})
//			if err != nil {
//				return err
//			}
//			defaultRegionHealthCheck, err := compute.NewRegionHealthCheck(ctx, "default", &compute.RegionHealthCheckArgs{
//				Region: pulumi.String("us-central1"),
//				Name:   pulumi.String("http-health-check"),
//				HttpHealthCheck: &compute.RegionHealthCheckHttpHealthCheckArgs{
//					Port: pulumi.Int(80),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultRegionBackendService, err := compute.NewRegionBackendService(ctx, "default", &compute.RegionBackendServiceArgs{
//				Region:              pulumi.String("us-central1"),
//				Name:                pulumi.String("backend-service"),
//				Protocol:            pulumi.String("HTTP"),
//				LoadBalancingScheme: pulumi.String("INTERNAL_MANAGED"),
//				TimeoutSec:          pulumi.Int(10),
//				HealthChecks:        defaultRegionHealthCheck.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultRegionUrlMap, err := compute.NewRegionUrlMap(ctx, "default", &compute.RegionUrlMapArgs{
//				Region:         pulumi.String("us-central1"),
//				Name:           pulumi.String("url-map"),
//				Description:    pulumi.String("a description"),
//				DefaultService: defaultRegionBackendService.ID(),
//				HostRules: compute.RegionUrlMapHostRuleArray{
//					&compute.RegionUrlMapHostRuleArgs{
//						Hosts: pulumi.StringArray{
//							pulumi.String("mysite.com"),
//						},
//						PathMatcher: pulumi.String("allpaths"),
//					},
//				},
//				PathMatchers: compute.RegionUrlMapPathMatcherArray{
//					&compute.RegionUrlMapPathMatcherArgs{
//						Name:           pulumi.String("allpaths"),
//						DefaultService: defaultRegionBackendService.ID(),
//						PathRules: compute.RegionUrlMapPathMatcherPathRuleArray{
//							&compute.RegionUrlMapPathMatcherPathRuleArgs{
//								Paths: pulumi.StringArray{
//									pulumi.String("/*"),
//								},
//								Service: defaultRegionBackendService.ID(),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRegionTargetHttpsProxy(ctx, "default", &compute.RegionTargetHttpsProxyArgs{
//				Region: pulumi.String("us-central1"),
//				Name:   pulumi.String("test-proxy"),
//				UrlMap: defaultRegionUrlMap.ID(),
//				SslCertificates: pulumi.StringArray{
//					defaultRegionSslCertificate.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Target Https Proxy Mtls
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/certificatemanager"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/ca_cert.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile1, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/ca_cert.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultTrustConfig, err := certificatemanager.NewTrustConfig(ctx, "default", &certificatemanager.TrustConfigArgs{
//				Location:    pulumi.String("us-central1"),
//				Name:        pulumi.String("my-trust-config"),
//				Description: pulumi.String("sample description for trust config"),
//				TrustStores: certificatemanager.TrustConfigTrustStoreArray{
//					&certificatemanager.TrustConfigTrustStoreArgs{
//						TrustAnchors: certificatemanager.TrustConfigTrustStoreTrustAnchorArray{
//							&certificatemanager.TrustConfigTrustStoreTrustAnchorArgs{
//								PemCertificate: invokeFile.Result,
//							},
//						},
//						IntermediateCas: certificatemanager.TrustConfigTrustStoreIntermediateCaArray{
//							&certificatemanager.TrustConfigTrustStoreIntermediateCaArgs{
//								PemCertificate: invokeFile1.Result,
//							},
//						},
//					},
//				},
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultServerTlsPolicy, err := networksecurity.NewServerTlsPolicy(ctx, "default", &networksecurity.ServerTlsPolicyArgs{
//				Location:    pulumi.String("us-central1"),
//				Name:        pulumi.String("my-tls-policy"),
//				Description: pulumi.String("my description"),
//				AllowOpen:   pulumi.Bool(false),
//				MtlsPolicy: &networksecurity.ServerTlsPolicyMtlsPolicyArgs{
//					ClientValidationMode: pulumi.String("REJECT_INVALID"),
//					ClientValidationTrustConfig: defaultTrustConfig.Name.ApplyT(func(name string) (string, error) {
//						return fmt.Sprintf("projects/%v/locations/us-central1/trustConfigs/%v", project.Number, name), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			invokeFile2, err := std.File(ctx, &std.FileArgs{
//				Input: "path/to/private.key",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile3, err := std.File(ctx, &std.FileArgs{
//				Input: "path/to/certificate.crt",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultRegionSslCertificate, err := compute.NewRegionSslCertificate(ctx, "default", &compute.RegionSslCertificateArgs{
//				Region:      pulumi.String("us-central1"),
//				Name:        pulumi.String("my-certificate"),
//				PrivateKey:  invokeFile2.Result,
//				Certificate: invokeFile3.Result,
//			})
//			if err != nil {
//				return err
//			}
//			defaultRegionHealthCheck, err := compute.NewRegionHealthCheck(ctx, "default", &compute.RegionHealthCheckArgs{
//				Region:           pulumi.String("us-central1"),
//				Name:             pulumi.String("http-health-check"),
//				CheckIntervalSec: pulumi.Int(1),
//				TimeoutSec:       pulumi.Int(1),
//				HttpHealthCheck: &compute.RegionHealthCheckHttpHealthCheckArgs{
//					Port: pulumi.Int(80),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultRegionBackendService, err := compute.NewRegionBackendService(ctx, "default", &compute.RegionBackendServiceArgs{
//				Region:              pulumi.String("us-central1"),
//				Name:                pulumi.String("backend-service"),
//				PortName:            pulumi.String("http"),
//				Protocol:            pulumi.String("HTTP"),
//				TimeoutSec:          pulumi.Int(10),
//				LoadBalancingScheme: pulumi.String("INTERNAL_MANAGED"),
//				HealthChecks:        defaultRegionHealthCheck.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultRegionUrlMap, err := compute.NewRegionUrlMap(ctx, "default", &compute.RegionUrlMapArgs{
//				Region:         pulumi.String("us-central1"),
//				Name:           pulumi.String("url-map"),
//				Description:    pulumi.String("a description"),
//				DefaultService: defaultRegionBackendService.ID(),
//				HostRules: compute.RegionUrlMapHostRuleArray{
//					&compute.RegionUrlMapHostRuleArgs{
//						Hosts: pulumi.StringArray{
//							pulumi.String("mysite.com"),
//						},
//						PathMatcher: pulumi.String("allpaths"),
//					},
//				},
//				PathMatchers: compute.RegionUrlMapPathMatcherArray{
//					&compute.RegionUrlMapPathMatcherArgs{
//						Name:           pulumi.String("allpaths"),
//						DefaultService: defaultRegionBackendService.ID(),
//						PathRules: compute.RegionUrlMapPathMatcherPathRuleArray{
//							&compute.RegionUrlMapPathMatcherPathRuleArgs{
//								Paths: pulumi.StringArray{
//									pulumi.String("/*"),
//								},
//								Service: defaultRegionBackendService.ID(),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRegionTargetHttpsProxy(ctx, "default", &compute.RegionTargetHttpsProxyArgs{
//				Region: pulumi.String("us-central1"),
//				Name:   pulumi.String("test-mtls-proxy"),
//				UrlMap: defaultRegionUrlMap.ID(),
//				SslCertificates: pulumi.StringArray{
//					defaultRegionSslCertificate.ID(),
//				},
//				ServerTlsPolicy: defaultServerTlsPolicy.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Target Https Proxy Certificate Manager Certificate
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/certificatemanager"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/cert.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile1, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/private-key.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultCertificate, err := certificatemanager.NewCertificate(ctx, "default", &certificatemanager.CertificateArgs{
//				Name:     pulumi.String("my-certificate"),
//				Location: pulumi.String("us-central1"),
//				SelfManaged: &certificatemanager.CertificateSelfManagedArgs{
//					PemCertificate: invokeFile.Result,
//					PemPrivateKey:  invokeFile1.Result,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultRegionBackendService, err := compute.NewRegionBackendService(ctx, "default", &compute.RegionBackendServiceArgs{
//				Name:                pulumi.String("backend-service"),
//				Region:              pulumi.String("us-central1"),
//				Protocol:            pulumi.String("HTTPS"),
//				TimeoutSec:          pulumi.Int(30),
//				LoadBalancingScheme: pulumi.String("INTERNAL_MANAGED"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultRegionUrlMap, err := compute.NewRegionUrlMap(ctx, "default", &compute.RegionUrlMapArgs{
//				Name:           pulumi.String("url-map"),
//				DefaultService: defaultRegionBackendService.ID(),
//				Region:         pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRegionTargetHttpsProxy(ctx, "default", &compute.RegionTargetHttpsProxyArgs{
//				Name:   pulumi.String("target-http-proxy"),
//				UrlMap: defaultRegionUrlMap.ID(),
//				CertificateManagerCertificates: pulumi.StringArray{
//					defaultCertificate.ID().ApplyT(func(id string) (string, error) {
//						return fmt.Sprintf("//certificatemanager.googleapis.com/%v", id), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RegionTargetHttpsProxy can be imported using any of these accepted formats:
//
// * `projects/{{project}}/regions/{{region}}/targetHttpsProxies/{{name}}`
//
// * `{{project}}/{{region}}/{{name}}`
//
// * `{{region}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, RegionTargetHttpsProxy can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy default projects/{{project}}/regions/{{region}}/targetHttpsProxies/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy default {{project}}/{{region}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy default {{region}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy default {{name}}
// ```
type RegionTargetHttpsProxy struct {
	pulumi.CustomResourceState

	// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
	// sslCertificates and certificateManagerCertificates can't be defined together.
	// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the selfLink `projects/{project}/locations/{location}/certificates/{resourceName}`
	CertificateManagerCertificates pulumi.StringArrayOutput `pulumi:"certificateManagerCertificates"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The unique identifier for the resource.
	ProxyId pulumi.IntOutput `pulumi:"proxyId"`
	// The Region in which the created target https proxy should reside.
	// If it is not provided, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// A URL referring to a networksecurity.ServerTlsPolicy
	// resource that describes how the proxy should authenticate inbound
	// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
	// attached to globalForwardingRules with the loadBalancingScheme
	// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
	// For details which ServerTlsPolicy resources are accepted with
	// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
	// loadBalancingScheme consult ServerTlsPolicy documentation.
	// If left blank, communications are not encrypted.
	ServerTlsPolicy pulumi.StringPtrOutput `pulumi:"serverTlsPolicy"`
	// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
	// At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
	// sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
	SslCertificates pulumi.StringArrayOutput `pulumi:"sslCertificates"`
	// A reference to the Region SslPolicy resource that will be associated with
	// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
	// resource will not have any SSL policy configured.
	SslPolicy pulumi.StringPtrOutput `pulumi:"sslPolicy"`
	// A reference to the RegionUrlMap resource that defines the mapping from URL
	// to the RegionBackendService.
	//
	// ***
	UrlMap pulumi.StringOutput `pulumi:"urlMap"`
}

// NewRegionTargetHttpsProxy registers a new resource with the given unique name, arguments, and options.
func NewRegionTargetHttpsProxy(ctx *pulumi.Context,
	name string, args *RegionTargetHttpsProxyArgs, opts ...pulumi.ResourceOption) (*RegionTargetHttpsProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UrlMap == nil {
		return nil, errors.New("invalid value for required argument 'UrlMap'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionTargetHttpsProxy
	err := ctx.RegisterResource("gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionTargetHttpsProxy gets an existing RegionTargetHttpsProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionTargetHttpsProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionTargetHttpsProxyState, opts ...pulumi.ResourceOption) (*RegionTargetHttpsProxy, error) {
	var resource RegionTargetHttpsProxy
	err := ctx.ReadResource("gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionTargetHttpsProxy resources.
type regionTargetHttpsProxyState struct {
	// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
	// sslCertificates and certificateManagerCertificates can't be defined together.
	// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the selfLink `projects/{project}/locations/{location}/certificates/{resourceName}`
	CertificateManagerCertificates []string `pulumi:"certificateManagerCertificates"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The unique identifier for the resource.
	ProxyId *int `pulumi:"proxyId"`
	// The Region in which the created target https proxy should reside.
	// If it is not provided, the provider region is used.
	Region *string `pulumi:"region"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
	// A URL referring to a networksecurity.ServerTlsPolicy
	// resource that describes how the proxy should authenticate inbound
	// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
	// attached to globalForwardingRules with the loadBalancingScheme
	// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
	// For details which ServerTlsPolicy resources are accepted with
	// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
	// loadBalancingScheme consult ServerTlsPolicy documentation.
	// If left blank, communications are not encrypted.
	ServerTlsPolicy *string `pulumi:"serverTlsPolicy"`
	// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
	// At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
	// sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
	SslCertificates []string `pulumi:"sslCertificates"`
	// A reference to the Region SslPolicy resource that will be associated with
	// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
	// resource will not have any SSL policy configured.
	SslPolicy *string `pulumi:"sslPolicy"`
	// A reference to the RegionUrlMap resource that defines the mapping from URL
	// to the RegionBackendService.
	//
	// ***
	UrlMap *string `pulumi:"urlMap"`
}

type RegionTargetHttpsProxyState struct {
	// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
	// sslCertificates and certificateManagerCertificates can't be defined together.
	// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the selfLink `projects/{project}/locations/{location}/certificates/{resourceName}`
	CertificateManagerCertificates pulumi.StringArrayInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The unique identifier for the resource.
	ProxyId pulumi.IntPtrInput
	// The Region in which the created target https proxy should reside.
	// If it is not provided, the provider region is used.
	Region pulumi.StringPtrInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
	// A URL referring to a networksecurity.ServerTlsPolicy
	// resource that describes how the proxy should authenticate inbound
	// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
	// attached to globalForwardingRules with the loadBalancingScheme
	// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
	// For details which ServerTlsPolicy resources are accepted with
	// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
	// loadBalancingScheme consult ServerTlsPolicy documentation.
	// If left blank, communications are not encrypted.
	ServerTlsPolicy pulumi.StringPtrInput
	// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
	// At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
	// sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
	SslCertificates pulumi.StringArrayInput
	// A reference to the Region SslPolicy resource that will be associated with
	// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
	// resource will not have any SSL policy configured.
	SslPolicy pulumi.StringPtrInput
	// A reference to the RegionUrlMap resource that defines the mapping from URL
	// to the RegionBackendService.
	//
	// ***
	UrlMap pulumi.StringPtrInput
}

func (RegionTargetHttpsProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionTargetHttpsProxyState)(nil)).Elem()
}

type regionTargetHttpsProxyArgs struct {
	// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
	// sslCertificates and certificateManagerCertificates can't be defined together.
	// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the selfLink `projects/{project}/locations/{location}/certificates/{resourceName}`
	CertificateManagerCertificates []string `pulumi:"certificateManagerCertificates"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The Region in which the created target https proxy should reside.
	// If it is not provided, the provider region is used.
	Region *string `pulumi:"region"`
	// A URL referring to a networksecurity.ServerTlsPolicy
	// resource that describes how the proxy should authenticate inbound
	// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
	// attached to globalForwardingRules with the loadBalancingScheme
	// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
	// For details which ServerTlsPolicy resources are accepted with
	// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
	// loadBalancingScheme consult ServerTlsPolicy documentation.
	// If left blank, communications are not encrypted.
	ServerTlsPolicy *string `pulumi:"serverTlsPolicy"`
	// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
	// At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
	// sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
	SslCertificates []string `pulumi:"sslCertificates"`
	// A reference to the Region SslPolicy resource that will be associated with
	// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
	// resource will not have any SSL policy configured.
	SslPolicy *string `pulumi:"sslPolicy"`
	// A reference to the RegionUrlMap resource that defines the mapping from URL
	// to the RegionBackendService.
	//
	// ***
	UrlMap string `pulumi:"urlMap"`
}

// The set of arguments for constructing a RegionTargetHttpsProxy resource.
type RegionTargetHttpsProxyArgs struct {
	// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
	// sslCertificates and certificateManagerCertificates can't be defined together.
	// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the selfLink `projects/{project}/locations/{location}/certificates/{resourceName}`
	CertificateManagerCertificates pulumi.StringArrayInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The Region in which the created target https proxy should reside.
	// If it is not provided, the provider region is used.
	Region pulumi.StringPtrInput
	// A URL referring to a networksecurity.ServerTlsPolicy
	// resource that describes how the proxy should authenticate inbound
	// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
	// attached to globalForwardingRules with the loadBalancingScheme
	// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
	// For details which ServerTlsPolicy resources are accepted with
	// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
	// loadBalancingScheme consult ServerTlsPolicy documentation.
	// If left blank, communications are not encrypted.
	ServerTlsPolicy pulumi.StringPtrInput
	// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
	// At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
	// sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
	SslCertificates pulumi.StringArrayInput
	// A reference to the Region SslPolicy resource that will be associated with
	// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
	// resource will not have any SSL policy configured.
	SslPolicy pulumi.StringPtrInput
	// A reference to the RegionUrlMap resource that defines the mapping from URL
	// to the RegionBackendService.
	//
	// ***
	UrlMap pulumi.StringInput
}

func (RegionTargetHttpsProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionTargetHttpsProxyArgs)(nil)).Elem()
}

type RegionTargetHttpsProxyInput interface {
	pulumi.Input

	ToRegionTargetHttpsProxyOutput() RegionTargetHttpsProxyOutput
	ToRegionTargetHttpsProxyOutputWithContext(ctx context.Context) RegionTargetHttpsProxyOutput
}

func (*RegionTargetHttpsProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionTargetHttpsProxy)(nil)).Elem()
}

func (i *RegionTargetHttpsProxy) ToRegionTargetHttpsProxyOutput() RegionTargetHttpsProxyOutput {
	return i.ToRegionTargetHttpsProxyOutputWithContext(context.Background())
}

func (i *RegionTargetHttpsProxy) ToRegionTargetHttpsProxyOutputWithContext(ctx context.Context) RegionTargetHttpsProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionTargetHttpsProxyOutput)
}

// RegionTargetHttpsProxyArrayInput is an input type that accepts RegionTargetHttpsProxyArray and RegionTargetHttpsProxyArrayOutput values.
// You can construct a concrete instance of `RegionTargetHttpsProxyArrayInput` via:
//
//	RegionTargetHttpsProxyArray{ RegionTargetHttpsProxyArgs{...} }
type RegionTargetHttpsProxyArrayInput interface {
	pulumi.Input

	ToRegionTargetHttpsProxyArrayOutput() RegionTargetHttpsProxyArrayOutput
	ToRegionTargetHttpsProxyArrayOutputWithContext(context.Context) RegionTargetHttpsProxyArrayOutput
}

type RegionTargetHttpsProxyArray []RegionTargetHttpsProxyInput

func (RegionTargetHttpsProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionTargetHttpsProxy)(nil)).Elem()
}

func (i RegionTargetHttpsProxyArray) ToRegionTargetHttpsProxyArrayOutput() RegionTargetHttpsProxyArrayOutput {
	return i.ToRegionTargetHttpsProxyArrayOutputWithContext(context.Background())
}

func (i RegionTargetHttpsProxyArray) ToRegionTargetHttpsProxyArrayOutputWithContext(ctx context.Context) RegionTargetHttpsProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionTargetHttpsProxyArrayOutput)
}

// RegionTargetHttpsProxyMapInput is an input type that accepts RegionTargetHttpsProxyMap and RegionTargetHttpsProxyMapOutput values.
// You can construct a concrete instance of `RegionTargetHttpsProxyMapInput` via:
//
//	RegionTargetHttpsProxyMap{ "key": RegionTargetHttpsProxyArgs{...} }
type RegionTargetHttpsProxyMapInput interface {
	pulumi.Input

	ToRegionTargetHttpsProxyMapOutput() RegionTargetHttpsProxyMapOutput
	ToRegionTargetHttpsProxyMapOutputWithContext(context.Context) RegionTargetHttpsProxyMapOutput
}

type RegionTargetHttpsProxyMap map[string]RegionTargetHttpsProxyInput

func (RegionTargetHttpsProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionTargetHttpsProxy)(nil)).Elem()
}

func (i RegionTargetHttpsProxyMap) ToRegionTargetHttpsProxyMapOutput() RegionTargetHttpsProxyMapOutput {
	return i.ToRegionTargetHttpsProxyMapOutputWithContext(context.Background())
}

func (i RegionTargetHttpsProxyMap) ToRegionTargetHttpsProxyMapOutputWithContext(ctx context.Context) RegionTargetHttpsProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionTargetHttpsProxyMapOutput)
}

type RegionTargetHttpsProxyOutput struct{ *pulumi.OutputState }

func (RegionTargetHttpsProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionTargetHttpsProxy)(nil)).Elem()
}

func (o RegionTargetHttpsProxyOutput) ToRegionTargetHttpsProxyOutput() RegionTargetHttpsProxyOutput {
	return o
}

func (o RegionTargetHttpsProxyOutput) ToRegionTargetHttpsProxyOutputWithContext(ctx context.Context) RegionTargetHttpsProxyOutput {
	return o
}

// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
// sslCertificates and certificateManagerCertificates can't be defined together.
// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the selfLink `projects/{project}/locations/{location}/certificates/{resourceName}`
func (o RegionTargetHttpsProxyOutput) CertificateManagerCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionTargetHttpsProxy) pulumi.StringArrayOutput { return v.CertificateManagerCertificates }).(pulumi.StringArrayOutput)
}

// Creation timestamp in RFC3339 text format.
func (o RegionTargetHttpsProxyOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionTargetHttpsProxy) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource.
func (o RegionTargetHttpsProxyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionTargetHttpsProxy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the resource. Provided by the client when the resource is
// created. The name must be 1-63 characters long, and comply with
// RFC1035. Specifically, the name must be 1-63 characters long and match
// the regular expression `a-z?` which means the
// first character must be a lowercase letter, and all following
// characters must be a dash, lowercase letter, or digit, except the last
// character, which cannot be a dash.
func (o RegionTargetHttpsProxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionTargetHttpsProxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RegionTargetHttpsProxyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionTargetHttpsProxy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The unique identifier for the resource.
func (o RegionTargetHttpsProxyOutput) ProxyId() pulumi.IntOutput {
	return o.ApplyT(func(v *RegionTargetHttpsProxy) pulumi.IntOutput { return v.ProxyId }).(pulumi.IntOutput)
}

// The Region in which the created target https proxy should reside.
// If it is not provided, the provider region is used.
func (o RegionTargetHttpsProxyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionTargetHttpsProxy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The URI of the created resource.
func (o RegionTargetHttpsProxyOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionTargetHttpsProxy) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// A URL referring to a networksecurity.ServerTlsPolicy
// resource that describes how the proxy should authenticate inbound
// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
// attached to globalForwardingRules with the loadBalancingScheme
// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
// For details which ServerTlsPolicy resources are accepted with
// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
// loadBalancingScheme consult ServerTlsPolicy documentation.
// If left blank, communications are not encrypted.
func (o RegionTargetHttpsProxyOutput) ServerTlsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionTargetHttpsProxy) pulumi.StringPtrOutput { return v.ServerTlsPolicy }).(pulumi.StringPtrOutput)
}

// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
// At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
// sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
func (o RegionTargetHttpsProxyOutput) SslCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionTargetHttpsProxy) pulumi.StringArrayOutput { return v.SslCertificates }).(pulumi.StringArrayOutput)
}

// A reference to the Region SslPolicy resource that will be associated with
// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
// resource will not have any SSL policy configured.
func (o RegionTargetHttpsProxyOutput) SslPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionTargetHttpsProxy) pulumi.StringPtrOutput { return v.SslPolicy }).(pulumi.StringPtrOutput)
}

// A reference to the RegionUrlMap resource that defines the mapping from URL
// to the RegionBackendService.
//
// ***
func (o RegionTargetHttpsProxyOutput) UrlMap() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionTargetHttpsProxy) pulumi.StringOutput { return v.UrlMap }).(pulumi.StringOutput)
}

type RegionTargetHttpsProxyArrayOutput struct{ *pulumi.OutputState }

func (RegionTargetHttpsProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionTargetHttpsProxy)(nil)).Elem()
}

func (o RegionTargetHttpsProxyArrayOutput) ToRegionTargetHttpsProxyArrayOutput() RegionTargetHttpsProxyArrayOutput {
	return o
}

func (o RegionTargetHttpsProxyArrayOutput) ToRegionTargetHttpsProxyArrayOutputWithContext(ctx context.Context) RegionTargetHttpsProxyArrayOutput {
	return o
}

func (o RegionTargetHttpsProxyArrayOutput) Index(i pulumi.IntInput) RegionTargetHttpsProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionTargetHttpsProxy {
		return vs[0].([]*RegionTargetHttpsProxy)[vs[1].(int)]
	}).(RegionTargetHttpsProxyOutput)
}

type RegionTargetHttpsProxyMapOutput struct{ *pulumi.OutputState }

func (RegionTargetHttpsProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionTargetHttpsProxy)(nil)).Elem()
}

func (o RegionTargetHttpsProxyMapOutput) ToRegionTargetHttpsProxyMapOutput() RegionTargetHttpsProxyMapOutput {
	return o
}

func (o RegionTargetHttpsProxyMapOutput) ToRegionTargetHttpsProxyMapOutputWithContext(ctx context.Context) RegionTargetHttpsProxyMapOutput {
	return o
}

func (o RegionTargetHttpsProxyMapOutput) MapIndex(k pulumi.StringInput) RegionTargetHttpsProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionTargetHttpsProxy {
		return vs[0].(map[string]*RegionTargetHttpsProxy)[vs[1].(string)]
	}).(RegionTargetHttpsProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionTargetHttpsProxyInput)(nil)).Elem(), &RegionTargetHttpsProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionTargetHttpsProxyArrayInput)(nil)).Elem(), RegionTargetHttpsProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionTargetHttpsProxyMapInput)(nil)).Elem(), RegionTargetHttpsProxyMap{})
	pulumi.RegisterOutputType(RegionTargetHttpsProxyOutput{})
	pulumi.RegisterOutputType(RegionTargetHttpsProxyArrayOutput{})
	pulumi.RegisterOutputType(RegionTargetHttpsProxyMapOutput{})
}
