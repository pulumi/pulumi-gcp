// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Represents a RegionTargetHttpsProxy resource, which is used by one or more
// forwarding rules to route incoming HTTPS requests to a URL map.
//
// To get more information about RegionTargetHttpsProxy, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/regionTargetHttpsProxies)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/compute/docs/load-balancing/http/target-proxies)
//
// ## Example Usage
//
// ## Import
//
// RegionTargetHttpsProxy can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy default projects/{{project}}/regions/{{region}}/targetHttpsProxies/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy default {{project}}/{{region}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy default {{region}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy default {{name}}
// ```
type RegionTargetHttpsProxy struct {
	pulumi.CustomResourceState

	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The unique identifier for the resource.
	ProxyId pulumi.IntOutput `pulumi:"proxyId"`
	// The Region in which the created target https proxy should reside.
	// If it is not provided, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// A list of RegionSslCertificate resources that are used to authenticate
	// connections between users and the load balancer. Currently, exactly
	// one SSL certificate must be specified.
	SslCertificates pulumi.StringArrayOutput `pulumi:"sslCertificates"`
	// A reference to the RegionUrlMap resource that defines the mapping from URL
	// to the RegionBackendService.
	UrlMap pulumi.StringOutput `pulumi:"urlMap"`
}

// NewRegionTargetHttpsProxy registers a new resource with the given unique name, arguments, and options.
func NewRegionTargetHttpsProxy(ctx *pulumi.Context,
	name string, args *RegionTargetHttpsProxyArgs, opts ...pulumi.ResourceOption) (*RegionTargetHttpsProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SslCertificates == nil {
		return nil, errors.New("invalid value for required argument 'SslCertificates'")
	}
	if args.UrlMap == nil {
		return nil, errors.New("invalid value for required argument 'UrlMap'")
	}
	var resource RegionTargetHttpsProxy
	err := ctx.RegisterResource("gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionTargetHttpsProxy gets an existing RegionTargetHttpsProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionTargetHttpsProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionTargetHttpsProxyState, opts ...pulumi.ResourceOption) (*RegionTargetHttpsProxy, error) {
	var resource RegionTargetHttpsProxy
	err := ctx.ReadResource("gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionTargetHttpsProxy resources.
type regionTargetHttpsProxyState struct {
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The unique identifier for the resource.
	ProxyId *int `pulumi:"proxyId"`
	// The Region in which the created target https proxy should reside.
	// If it is not provided, the provider region is used.
	Region *string `pulumi:"region"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
	// A list of RegionSslCertificate resources that are used to authenticate
	// connections between users and the load balancer. Currently, exactly
	// one SSL certificate must be specified.
	SslCertificates []string `pulumi:"sslCertificates"`
	// A reference to the RegionUrlMap resource that defines the mapping from URL
	// to the RegionBackendService.
	UrlMap *string `pulumi:"urlMap"`
}

type RegionTargetHttpsProxyState struct {
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The unique identifier for the resource.
	ProxyId pulumi.IntPtrInput
	// The Region in which the created target https proxy should reside.
	// If it is not provided, the provider region is used.
	Region pulumi.StringPtrInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
	// A list of RegionSslCertificate resources that are used to authenticate
	// connections between users and the load balancer. Currently, exactly
	// one SSL certificate must be specified.
	SslCertificates pulumi.StringArrayInput
	// A reference to the RegionUrlMap resource that defines the mapping from URL
	// to the RegionBackendService.
	UrlMap pulumi.StringPtrInput
}

func (RegionTargetHttpsProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionTargetHttpsProxyState)(nil)).Elem()
}

type regionTargetHttpsProxyArgs struct {
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The Region in which the created target https proxy should reside.
	// If it is not provided, the provider region is used.
	Region *string `pulumi:"region"`
	// A list of RegionSslCertificate resources that are used to authenticate
	// connections between users and the load balancer. Currently, exactly
	// one SSL certificate must be specified.
	SslCertificates []string `pulumi:"sslCertificates"`
	// A reference to the RegionUrlMap resource that defines the mapping from URL
	// to the RegionBackendService.
	UrlMap string `pulumi:"urlMap"`
}

// The set of arguments for constructing a RegionTargetHttpsProxy resource.
type RegionTargetHttpsProxyArgs struct {
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The Region in which the created target https proxy should reside.
	// If it is not provided, the provider region is used.
	Region pulumi.StringPtrInput
	// A list of RegionSslCertificate resources that are used to authenticate
	// connections between users and the load balancer. Currently, exactly
	// one SSL certificate must be specified.
	SslCertificates pulumi.StringArrayInput
	// A reference to the RegionUrlMap resource that defines the mapping from URL
	// to the RegionBackendService.
	UrlMap pulumi.StringInput
}

func (RegionTargetHttpsProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionTargetHttpsProxyArgs)(nil)).Elem()
}

type RegionTargetHttpsProxyInput interface {
	pulumi.Input

	ToRegionTargetHttpsProxyOutput() RegionTargetHttpsProxyOutput
	ToRegionTargetHttpsProxyOutputWithContext(ctx context.Context) RegionTargetHttpsProxyOutput
}

func (*RegionTargetHttpsProxy) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionTargetHttpsProxy)(nil))
}

func (i *RegionTargetHttpsProxy) ToRegionTargetHttpsProxyOutput() RegionTargetHttpsProxyOutput {
	return i.ToRegionTargetHttpsProxyOutputWithContext(context.Background())
}

func (i *RegionTargetHttpsProxy) ToRegionTargetHttpsProxyOutputWithContext(ctx context.Context) RegionTargetHttpsProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionTargetHttpsProxyOutput)
}

func (i *RegionTargetHttpsProxy) ToRegionTargetHttpsProxyPtrOutput() RegionTargetHttpsProxyPtrOutput {
	return i.ToRegionTargetHttpsProxyPtrOutputWithContext(context.Background())
}

func (i *RegionTargetHttpsProxy) ToRegionTargetHttpsProxyPtrOutputWithContext(ctx context.Context) RegionTargetHttpsProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionTargetHttpsProxyPtrOutput)
}

type RegionTargetHttpsProxyPtrInput interface {
	pulumi.Input

	ToRegionTargetHttpsProxyPtrOutput() RegionTargetHttpsProxyPtrOutput
	ToRegionTargetHttpsProxyPtrOutputWithContext(ctx context.Context) RegionTargetHttpsProxyPtrOutput
}

type regionTargetHttpsProxyPtrType RegionTargetHttpsProxyArgs

func (*regionTargetHttpsProxyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionTargetHttpsProxy)(nil))
}

func (i *regionTargetHttpsProxyPtrType) ToRegionTargetHttpsProxyPtrOutput() RegionTargetHttpsProxyPtrOutput {
	return i.ToRegionTargetHttpsProxyPtrOutputWithContext(context.Background())
}

func (i *regionTargetHttpsProxyPtrType) ToRegionTargetHttpsProxyPtrOutputWithContext(ctx context.Context) RegionTargetHttpsProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionTargetHttpsProxyPtrOutput)
}

// RegionTargetHttpsProxyArrayInput is an input type that accepts RegionTargetHttpsProxyArray and RegionTargetHttpsProxyArrayOutput values.
// You can construct a concrete instance of `RegionTargetHttpsProxyArrayInput` via:
//
//          RegionTargetHttpsProxyArray{ RegionTargetHttpsProxyArgs{...} }
type RegionTargetHttpsProxyArrayInput interface {
	pulumi.Input

	ToRegionTargetHttpsProxyArrayOutput() RegionTargetHttpsProxyArrayOutput
	ToRegionTargetHttpsProxyArrayOutputWithContext(context.Context) RegionTargetHttpsProxyArrayOutput
}

type RegionTargetHttpsProxyArray []RegionTargetHttpsProxyInput

func (RegionTargetHttpsProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*RegionTargetHttpsProxy)(nil))
}

func (i RegionTargetHttpsProxyArray) ToRegionTargetHttpsProxyArrayOutput() RegionTargetHttpsProxyArrayOutput {
	return i.ToRegionTargetHttpsProxyArrayOutputWithContext(context.Background())
}

func (i RegionTargetHttpsProxyArray) ToRegionTargetHttpsProxyArrayOutputWithContext(ctx context.Context) RegionTargetHttpsProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionTargetHttpsProxyArrayOutput)
}

// RegionTargetHttpsProxyMapInput is an input type that accepts RegionTargetHttpsProxyMap and RegionTargetHttpsProxyMapOutput values.
// You can construct a concrete instance of `RegionTargetHttpsProxyMapInput` via:
//
//          RegionTargetHttpsProxyMap{ "key": RegionTargetHttpsProxyArgs{...} }
type RegionTargetHttpsProxyMapInput interface {
	pulumi.Input

	ToRegionTargetHttpsProxyMapOutput() RegionTargetHttpsProxyMapOutput
	ToRegionTargetHttpsProxyMapOutputWithContext(context.Context) RegionTargetHttpsProxyMapOutput
}

type RegionTargetHttpsProxyMap map[string]RegionTargetHttpsProxyInput

func (RegionTargetHttpsProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*RegionTargetHttpsProxy)(nil))
}

func (i RegionTargetHttpsProxyMap) ToRegionTargetHttpsProxyMapOutput() RegionTargetHttpsProxyMapOutput {
	return i.ToRegionTargetHttpsProxyMapOutputWithContext(context.Background())
}

func (i RegionTargetHttpsProxyMap) ToRegionTargetHttpsProxyMapOutputWithContext(ctx context.Context) RegionTargetHttpsProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionTargetHttpsProxyMapOutput)
}

type RegionTargetHttpsProxyOutput struct {
	*pulumi.OutputState
}

func (RegionTargetHttpsProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionTargetHttpsProxy)(nil))
}

func (o RegionTargetHttpsProxyOutput) ToRegionTargetHttpsProxyOutput() RegionTargetHttpsProxyOutput {
	return o
}

func (o RegionTargetHttpsProxyOutput) ToRegionTargetHttpsProxyOutputWithContext(ctx context.Context) RegionTargetHttpsProxyOutput {
	return o
}

func (o RegionTargetHttpsProxyOutput) ToRegionTargetHttpsProxyPtrOutput() RegionTargetHttpsProxyPtrOutput {
	return o.ToRegionTargetHttpsProxyPtrOutputWithContext(context.Background())
}

func (o RegionTargetHttpsProxyOutput) ToRegionTargetHttpsProxyPtrOutputWithContext(ctx context.Context) RegionTargetHttpsProxyPtrOutput {
	return o.ApplyT(func(v RegionTargetHttpsProxy) *RegionTargetHttpsProxy {
		return &v
	}).(RegionTargetHttpsProxyPtrOutput)
}

type RegionTargetHttpsProxyPtrOutput struct {
	*pulumi.OutputState
}

func (RegionTargetHttpsProxyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionTargetHttpsProxy)(nil))
}

func (o RegionTargetHttpsProxyPtrOutput) ToRegionTargetHttpsProxyPtrOutput() RegionTargetHttpsProxyPtrOutput {
	return o
}

func (o RegionTargetHttpsProxyPtrOutput) ToRegionTargetHttpsProxyPtrOutputWithContext(ctx context.Context) RegionTargetHttpsProxyPtrOutput {
	return o
}

type RegionTargetHttpsProxyArrayOutput struct{ *pulumi.OutputState }

func (RegionTargetHttpsProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionTargetHttpsProxy)(nil))
}

func (o RegionTargetHttpsProxyArrayOutput) ToRegionTargetHttpsProxyArrayOutput() RegionTargetHttpsProxyArrayOutput {
	return o
}

func (o RegionTargetHttpsProxyArrayOutput) ToRegionTargetHttpsProxyArrayOutputWithContext(ctx context.Context) RegionTargetHttpsProxyArrayOutput {
	return o
}

func (o RegionTargetHttpsProxyArrayOutput) Index(i pulumi.IntInput) RegionTargetHttpsProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionTargetHttpsProxy {
		return vs[0].([]RegionTargetHttpsProxy)[vs[1].(int)]
	}).(RegionTargetHttpsProxyOutput)
}

type RegionTargetHttpsProxyMapOutput struct{ *pulumi.OutputState }

func (RegionTargetHttpsProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RegionTargetHttpsProxy)(nil))
}

func (o RegionTargetHttpsProxyMapOutput) ToRegionTargetHttpsProxyMapOutput() RegionTargetHttpsProxyMapOutput {
	return o
}

func (o RegionTargetHttpsProxyMapOutput) ToRegionTargetHttpsProxyMapOutputWithContext(ctx context.Context) RegionTargetHttpsProxyMapOutput {
	return o
}

func (o RegionTargetHttpsProxyMapOutput) MapIndex(k pulumi.StringInput) RegionTargetHttpsProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) RegionTargetHttpsProxy {
		return vs[0].(map[string]RegionTargetHttpsProxy)[vs[1].(string)]
	}).(RegionTargetHttpsProxyOutput)
}

func init() {
	pulumi.RegisterOutputType(RegionTargetHttpsProxyOutput{})
	pulumi.RegisterOutputType(RegionTargetHttpsProxyPtrOutput{})
	pulumi.RegisterOutputType(RegionTargetHttpsProxyArrayOutput{})
	pulumi.RegisterOutputType(RegionTargetHttpsProxyMapOutput{})
}
