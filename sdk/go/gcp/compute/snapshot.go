// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a new snapshot of a disk within GCE. For more information see
// [the official documentation](https://cloud.google.com/compute/docs/disks/create-snapshots)
// and
// [API](https://cloud.google.com/compute/docs/reference/latest/snapshots).
type Snapshot struct {
	s *pulumi.ResourceState
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOpt) (*Snapshot, error) {
	if args == nil || args.SourceDisk == nil {
		return nil, errors.New("missing required argument 'SourceDisk'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["snapshotEncryptionKeyRaw"] = nil
		inputs["sourceDisk"] = nil
		inputs["sourceDiskEncryptionKeyRaw"] = nil
		inputs["zone"] = nil
	} else {
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["snapshotEncryptionKeyRaw"] = args.SnapshotEncryptionKeyRaw
		inputs["sourceDisk"] = args.SourceDisk
		inputs["sourceDiskEncryptionKeyRaw"] = args.SourceDiskEncryptionKeyRaw
		inputs["zone"] = args.Zone
	}
	inputs["labelFingerprint"] = nil
	inputs["selfLink"] = nil
	inputs["snapshotEncryptionKeySha256"] = nil
	inputs["sourceDiskEncryptionKeySha256"] = nil
	inputs["sourceDiskLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/snapshot:Snapshot", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Snapshot{s: s}, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SnapshotState, opts ...pulumi.ResourceOpt) (*Snapshot, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["labelFingerprint"] = state.LabelFingerprint
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
		inputs["snapshotEncryptionKeyRaw"] = state.SnapshotEncryptionKeyRaw
		inputs["snapshotEncryptionKeySha256"] = state.SnapshotEncryptionKeySha256
		inputs["sourceDisk"] = state.SourceDisk
		inputs["sourceDiskEncryptionKeyRaw"] = state.SourceDiskEncryptionKeyRaw
		inputs["sourceDiskEncryptionKeySha256"] = state.SourceDiskEncryptionKeySha256
		inputs["sourceDiskLink"] = state.SourceDiskLink
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("gcp:compute/snapshot:Snapshot", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Snapshot{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Snapshot) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Snapshot) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The unique fingerprint of the labels.
func (r *Snapshot) LabelFingerprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["labelFingerprint"])
}

// A set of key/value label pairs to assign to the snapshot.
func (r *Snapshot) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

// A unique name for the resource, required by GCE.
// Changing this forces a new resource to be created.
func (r *Snapshot) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (r *Snapshot) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The URI of the created resource.
func (r *Snapshot) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// A 256-bit [customer-supplied encryption key]
// (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
// encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
// to encrypt this snapshot.
func (r *Snapshot) SnapshotEncryptionKeyRaw() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["snapshotEncryptionKeyRaw"])
}

// The [RFC 4648 base64]
// (https://tools.ietf.org/html/rfc4648#section-4) encoded SHA-256 hash of the
// [customer-supplied encryption key](https://cloud.google.com/compute/docs/disks/customer-supplied-encryption)
// that protects this resource.
func (r *Snapshot) SnapshotEncryptionKeySha256() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["snapshotEncryptionKeySha256"])
}

// The disk which will be used as the source of the snapshot.
func (r *Snapshot) SourceDisk() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceDisk"])
}

// A 256-bit [customer-supplied encryption key]
// (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
// encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
// to decrypt the source disk.
func (r *Snapshot) SourceDiskEncryptionKeyRaw() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceDiskEncryptionKeyRaw"])
}

// The [RFC 4648 base64]
// (https://tools.ietf.org/html/rfc4648#section-4) encoded SHA-256 hash of the
// [customer-supplied encryption key](https://cloud.google.com/compute/docs/disks/customer-supplied-encryption)
// that protects the source disk.
func (r *Snapshot) SourceDiskEncryptionKeySha256() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceDiskEncryptionKeySha256"])
}

// The URI of the source disk.
func (r *Snapshot) SourceDiskLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceDiskLink"])
}

// The zone where the source disk is located.
func (r *Snapshot) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering Snapshot resources.
type SnapshotState struct {
	// The unique fingerprint of the labels.
	LabelFingerprint interface{}
	// A set of key/value label pairs to assign to the snapshot.
	Labels interface{}
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// The URI of the created resource.
	SelfLink interface{}
	// A 256-bit [customer-supplied encryption key]
	// (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
	// encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
	// to encrypt this snapshot.
	SnapshotEncryptionKeyRaw interface{}
	// The [RFC 4648 base64]
	// (https://tools.ietf.org/html/rfc4648#section-4) encoded SHA-256 hash of the
	// [customer-supplied encryption key](https://cloud.google.com/compute/docs/disks/customer-supplied-encryption)
	// that protects this resource.
	SnapshotEncryptionKeySha256 interface{}
	// The disk which will be used as the source of the snapshot.
	SourceDisk interface{}
	// A 256-bit [customer-supplied encryption key]
	// (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
	// encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
	// to decrypt the source disk.
	SourceDiskEncryptionKeyRaw interface{}
	// The [RFC 4648 base64]
	// (https://tools.ietf.org/html/rfc4648#section-4) encoded SHA-256 hash of the
	// [customer-supplied encryption key](https://cloud.google.com/compute/docs/disks/customer-supplied-encryption)
	// that protects the source disk.
	SourceDiskEncryptionKeySha256 interface{}
	// The URI of the source disk.
	SourceDiskLink interface{}
	// The zone where the source disk is located.
	Zone interface{}
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// A set of key/value label pairs to assign to the snapshot.
	Labels interface{}
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// A 256-bit [customer-supplied encryption key]
	// (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
	// encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
	// to encrypt this snapshot.
	SnapshotEncryptionKeyRaw interface{}
	// The disk which will be used as the source of the snapshot.
	SourceDisk interface{}
	// A 256-bit [customer-supplied encryption key]
	// (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
	// encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
	// to decrypt the source disk.
	SourceDiskEncryptionKeyRaw interface{}
	// The zone where the source disk is located.
	Zone interface{}
}
