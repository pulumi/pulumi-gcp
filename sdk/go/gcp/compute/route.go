// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a network route within GCE. For more information see
// [the official documentation](https://cloud.google.com/compute/docs/vpc/routes)
// and
// [API](https://cloud.google.com/compute/docs/reference/latest/routes).
type Route struct {
	s *pulumi.ResourceState
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOpt) (*Route, error) {
	if args == nil || args.DestRange == nil {
		return nil, errors.New("missing required argument 'DestRange'")
	}
	if args == nil || args.Network == nil {
		return nil, errors.New("missing required argument 'Network'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["destRange"] = nil
		inputs["name"] = nil
		inputs["network"] = nil
		inputs["nextHopGateway"] = nil
		inputs["nextHopInstance"] = nil
		inputs["nextHopInstanceZone"] = nil
		inputs["nextHopIp"] = nil
		inputs["nextHopVpnTunnel"] = nil
		inputs["priority"] = nil
		inputs["project"] = nil
		inputs["tags"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["destRange"] = args.DestRange
		inputs["name"] = args.Name
		inputs["network"] = args.Network
		inputs["nextHopGateway"] = args.NextHopGateway
		inputs["nextHopInstance"] = args.NextHopInstance
		inputs["nextHopInstanceZone"] = args.NextHopInstanceZone
		inputs["nextHopIp"] = args.NextHopIp
		inputs["nextHopVpnTunnel"] = args.NextHopVpnTunnel
		inputs["priority"] = args.Priority
		inputs["project"] = args.Project
		inputs["tags"] = args.Tags
	}
	inputs["nextHopNetwork"] = nil
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/route:Route", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Route{s: s}, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RouteState, opts ...pulumi.ResourceOpt) (*Route, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["destRange"] = state.DestRange
		inputs["name"] = state.Name
		inputs["network"] = state.Network
		inputs["nextHopGateway"] = state.NextHopGateway
		inputs["nextHopInstance"] = state.NextHopInstance
		inputs["nextHopInstanceZone"] = state.NextHopInstanceZone
		inputs["nextHopIp"] = state.NextHopIp
		inputs["nextHopNetwork"] = state.NextHopNetwork
		inputs["nextHopVpnTunnel"] = state.NextHopVpnTunnel
		inputs["priority"] = state.Priority
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("gcp:compute/route:Route", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Route{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Route) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Route) ID() *pulumi.IDOutput {
	return r.s.ID
}

func (r *Route) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The destination IPv4 address range that this
// route applies to.
func (r *Route) DestRange() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["destRange"])
}

// A unique name for the resource, required by GCE.
// Changing this forces a new resource to be created.
func (r *Route) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The name or self_link of the network to attach this route to.
func (r *Route) Network() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["network"])
}

// The URL of the internet gateway to route
// to if this route is matched. The alias "default-internet-gateway" can also
// be used.
func (r *Route) NextHopGateway() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nextHopGateway"])
}

// The name of the VM instance to route to
// if this route is matched.
func (r *Route) NextHopInstance() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nextHopInstance"])
}

// 
// The zone of the instance specified in `next_hop_instance`.
func (r *Route) NextHopInstanceZone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nextHopInstanceZone"])
}

// The IP address of the next hop if this route
// is matched.
func (r *Route) NextHopIp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nextHopIp"])
}

// The name of the next hop network, if available.
func (r *Route) NextHopNetwork() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nextHopNetwork"])
}

// The name of the VPN to route to if this
// route is matched.
func (r *Route) NextHopVpnTunnel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nextHopVpnTunnel"])
}

// The priority of this route, used to break ties. Defaults to 1000.
func (r *Route) Priority() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["priority"])
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (r *Route) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The URI of the created resource.
func (r *Route) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// The tags that this route applies to.
func (r *Route) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Route resources.
type RouteState struct {
	Description interface{}
	// The destination IPv4 address range that this
	// route applies to.
	DestRange interface{}
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name interface{}
	// The name or self_link of the network to attach this route to.
	Network interface{}
	// The URL of the internet gateway to route
	// to if this route is matched. The alias "default-internet-gateway" can also
	// be used.
	NextHopGateway interface{}
	// The name of the VM instance to route to
	// if this route is matched.
	NextHopInstance interface{}
	// 
	// The zone of the instance specified in `next_hop_instance`.
	NextHopInstanceZone interface{}
	// The IP address of the next hop if this route
	// is matched.
	NextHopIp interface{}
	// The name of the next hop network, if available.
	NextHopNetwork interface{}
	// The name of the VPN to route to if this
	// route is matched.
	NextHopVpnTunnel interface{}
	// The priority of this route, used to break ties. Defaults to 1000.
	Priority interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// The URI of the created resource.
	SelfLink interface{}
	// The tags that this route applies to.
	Tags interface{}
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	Description interface{}
	// The destination IPv4 address range that this
	// route applies to.
	DestRange interface{}
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name interface{}
	// The name or self_link of the network to attach this route to.
	Network interface{}
	// The URL of the internet gateway to route
	// to if this route is matched. The alias "default-internet-gateway" can also
	// be used.
	NextHopGateway interface{}
	// The name of the VM instance to route to
	// if this route is matched.
	NextHopInstance interface{}
	// 
	// The zone of the instance specified in `next_hop_instance`.
	NextHopInstanceZone interface{}
	// The IP address of the next hop if this route
	// is matched.
	NextHopIp interface{}
	// The name of the VPN to route to if this
	// route is matched.
	NextHopVpnTunnel interface{}
	// The priority of this route, used to break ties. Defaults to 1000.
	Priority interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// The tags that this route applies to.
	Tags interface{}
}
