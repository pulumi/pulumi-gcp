// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents an InterconnectAttachment (VLAN attachment) resource. For more
// information, see Creating VLAN Attachments.
//
// ## Example Usage
// ### Interconnect Attachment Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foobarNetwork, err := compute.NewNetwork(ctx, "foobarNetwork", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			foobarRouter, err := compute.NewRouter(ctx, "foobarRouter", &compute.RouterArgs{
//				Network: foobarNetwork.Name,
//				Bgp: &compute.RouterBgpArgs{
//					Asn: pulumi.Int(16550),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewInterconnectAttachment(ctx, "onPrem", &compute.InterconnectAttachmentArgs{
//				EdgeAvailabilityDomain: pulumi.String("AVAILABILITY_DOMAIN_1"),
//				Type:                   pulumi.String("PARTNER"),
//				Router:                 foobarRouter.ID(),
//				Mtu:                    pulumi.String("1500"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Compute Interconnect Attachment Ipsec Encryption
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			address, err := compute.NewAddress(ctx, "address", &compute.AddressArgs{
//				AddressType:  pulumi.String("INTERNAL"),
//				Purpose:      pulumi.String("IPSEC_INTERCONNECT"),
//				Address:      pulumi.String("192.168.1.0"),
//				PrefixLength: pulumi.Int(29),
//				Network:      network.SelfLink,
//			})
//			if err != nil {
//				return err
//			}
//			router, err := compute.NewRouter(ctx, "router", &compute.RouterArgs{
//				Network:                     network.Name,
//				EncryptedInterconnectRouter: pulumi.Bool(true),
//				Bgp: &compute.RouterBgpArgs{
//					Asn: pulumi.Int(16550),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewInterconnectAttachment(ctx, "ipsec-encrypted-interconnect-attachment", &compute.InterconnectAttachmentArgs{
//				EdgeAvailabilityDomain: pulumi.String("AVAILABILITY_DOMAIN_1"),
//				Type:                   pulumi.String("PARTNER"),
//				Router:                 router.ID(),
//				Encryption:             pulumi.String("IPSEC"),
//				IpsecInternalAddresses: pulumi.StringArray{
//					address.SelfLink,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # InterconnectAttachment can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:compute/interconnectAttachment:InterconnectAttachment default projects/{{project}}/regions/{{region}}/interconnectAttachments/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/interconnectAttachment:InterconnectAttachment default {{project}}/{{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/interconnectAttachment:InterconnectAttachment default {{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/interconnectAttachment:InterconnectAttachment default {{name}}
//
// ```
type InterconnectAttachment struct {
	pulumi.CustomResourceState

	// Whether the VLAN attachment is enabled or disabled.  When using
	// PARTNER type this will Pre-Activate the interconnect attachment
	AdminEnabled pulumi.BoolPtrOutput `pulumi:"adminEnabled"`
	// Provisioned bandwidth capacity for the interconnect attachment.
	// For attachments of type DEDICATED, the user can set the bandwidth.
	// For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth.
	// Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED,
	// Defaults to BPS_10G
	// Possible values are: `BPS_50M`, `BPS_100M`, `BPS_200M`, `BPS_300M`, `BPS_400M`, `BPS_500M`, `BPS_1G`, `BPS_2G`, `BPS_5G`, `BPS_10G`, `BPS_20G`, `BPS_50G`.
	Bandwidth pulumi.StringOutput `pulumi:"bandwidth"`
	// Up to 16 candidate prefixes that can be used to restrict the allocation
	// of cloudRouterIpAddress and customerRouterIpAddress for this attachment.
	// All prefixes must be within link-local address space (169.254.0.0/16)
	// and must be /29 or shorter (/28, /27, etc). Google will attempt to select
	// an unused /29 from the supplied candidate prefix(es). The request will
	// fail if all possible /29s are in use on Google's edge. If not supplied,
	// Google will randomly select an unused /29 from all of link-local space.
	CandidateSubnets pulumi.StringArrayOutput `pulumi:"candidateSubnets"`
	// IPv4 address + prefix length to be configured on Cloud Router
	// Interface for this interconnect attachment.
	CloudRouterIpAddress pulumi.StringOutput `pulumi:"cloudRouterIpAddress"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// IPv4 address + prefix length to be configured on the customer
	// router subinterface for this interconnect attachment.
	CustomerRouterIpAddress pulumi.StringOutput `pulumi:"customerRouterIpAddress"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Desired availability domain for the attachment. Only available for type
	// PARTNER, at creation time. For improved reliability, customers should
	// configure a pair of attachments with one per availability domain. The
	// selected availability domain will be provided to the Partner via the
	// pairing key so that the provisioned circuit will lie in the specified
	// domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
	EdgeAvailabilityDomain pulumi.StringOutput `pulumi:"edgeAvailabilityDomain"`
	// Indicates the user-supplied encryption option of this interconnect
	// attachment. Can only be specified at attachment creation for PARTNER or
	// DEDICATED attachments.
	// * NONE - This is the default value, which means that the VLAN attachment
	//   carries unencrypted traffic. VMs are able to send traffic to, or receive
	//   traffic from, such a VLAN attachment.
	// * IPSEC - The VLAN attachment carries only encrypted traffic that is
	//   encrypted by an IPsec device, such as an HA VPN gateway or third-party
	//   IPsec VPN. VMs cannot directly send traffic to, or receive traffic from,
	//   such a VLAN attachment. To use HA VPN over Cloud Interconnect, the VLAN
	//   attachment must be created with this option.
	//   Default value is `NONE`.
	//   Possible values are: `NONE`, `IPSEC`.
	Encryption pulumi.StringPtrOutput `pulumi:"encryption"`
	// Google reference ID, to be used when raising support tickets with
	// Google or otherwise to debug backend connectivity issues.
	GoogleReferenceId pulumi.StringOutput `pulumi:"googleReferenceId"`
	// URL of the underlying Interconnect object that this attachment's
	// traffic will traverse through. Required if type is DEDICATED, must not
	// be set if type is PARTNER.
	Interconnect pulumi.StringPtrOutput `pulumi:"interconnect"`
	// URL of addresses that have been reserved for the interconnect attachment,
	// Used only for interconnect attachment that has the encryption option as
	// IPSEC.
	// The addresses must be RFC 1918 IP address ranges. When creating HA VPN
	// gateway over the interconnect attachment, if the attachment is configured
	// to use an RFC 1918 IP address, then the VPN gateway's IP address will be
	// allocated from the IP address range specified here.
	// For example, if the HA VPN gateway's interface 0 is paired to this
	// interconnect attachment, then an RFC 1918 IP address for the VPN gateway
	// interface 0 will be allocated from the IP address specified for this
	// interconnect attachment.
	// If this field is not specified for interconnect attachment that has
	// encryption option as IPSEC, later on when creating HA VPN gateway on this
	// interconnect attachment, the HA VPN gateway's IP address will be
	// allocated from regional external IP address pool.
	IpsecInternalAddresses pulumi.StringArrayOutput `pulumi:"ipsecInternalAddresses"`
	// Maximum Transmission Unit (MTU), in bytes, of packets passing through
	// this interconnect attachment. Currently, only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
	Mtu pulumi.StringOutput `pulumi:"mtu"`
	// Name of the resource. Provided by the client when the resource is created. The
	// name must be 1-63 characters long, and comply with RFC1035. Specifically, the
	// name must be 1-63 characters long and match the regular expression
	// `a-z?` which means the first character must be a
	// lowercase letter, and all following characters must be a dash, lowercase
	// letter, or digit, except the last character, which cannot be a dash.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// [Output only for type PARTNER. Not present for DEDICATED]. The opaque
	// identifier of an PARTNER attachment used to initiate provisioning with
	// a selected partner. Of the form "XXXXX/region/domain"
	PairingKey pulumi.StringOutput `pulumi:"pairingKey"`
	// [Output only for type PARTNER. Not present for DEDICATED]. Optional
	// BGP ASN for the router that should be supplied by a layer 3 Partner if
	// they configured BGP on behalf of the customer.
	PartnerAsn pulumi.StringOutput `pulumi:"partnerAsn"`
	// Information specific to an InterconnectAttachment. This property
	// is populated if the interconnect that this is attached to is of type DEDICATED.
	// Structure is documented below.
	PrivateInterconnectInfos InterconnectAttachmentPrivateInterconnectInfoArrayOutput `pulumi:"privateInterconnectInfos"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Region where the regional interconnect attachment resides.
	Region pulumi.StringOutput `pulumi:"region"`
	// URL of the cloud router to be used for dynamic routing. This router must be in
	// the same region as this InterconnectAttachment. The InterconnectAttachment will
	// automatically connect the Interconnect to the network & region within which the
	// Cloud Router is configured.
	Router pulumi.StringOutput `pulumi:"router"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// [Output Only] The current state of this attachment's functionality.
	State pulumi.StringOutput `pulumi:"state"`
	// The type of InterconnectAttachment you wish to create. Defaults to
	// DEDICATED.
	// Possible values are: `DEDICATED`, `PARTNER`, `PARTNER_PROVIDER`.
	Type pulumi.StringOutput `pulumi:"type"`
	// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When
	// using PARTNER type this will be managed upstream.
	VlanTag8021q pulumi.IntOutput `pulumi:"vlanTag8021q"`
}

// NewInterconnectAttachment registers a new resource with the given unique name, arguments, and options.
func NewInterconnectAttachment(ctx *pulumi.Context,
	name string, args *InterconnectAttachmentArgs, opts ...pulumi.ResourceOption) (*InterconnectAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Router == nil {
		return nil, errors.New("invalid value for required argument 'Router'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InterconnectAttachment
	err := ctx.RegisterResource("gcp:compute/interconnectAttachment:InterconnectAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterconnectAttachment gets an existing InterconnectAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterconnectAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterconnectAttachmentState, opts ...pulumi.ResourceOption) (*InterconnectAttachment, error) {
	var resource InterconnectAttachment
	err := ctx.ReadResource("gcp:compute/interconnectAttachment:InterconnectAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterconnectAttachment resources.
type interconnectAttachmentState struct {
	// Whether the VLAN attachment is enabled or disabled.  When using
	// PARTNER type this will Pre-Activate the interconnect attachment
	AdminEnabled *bool `pulumi:"adminEnabled"`
	// Provisioned bandwidth capacity for the interconnect attachment.
	// For attachments of type DEDICATED, the user can set the bandwidth.
	// For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth.
	// Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED,
	// Defaults to BPS_10G
	// Possible values are: `BPS_50M`, `BPS_100M`, `BPS_200M`, `BPS_300M`, `BPS_400M`, `BPS_500M`, `BPS_1G`, `BPS_2G`, `BPS_5G`, `BPS_10G`, `BPS_20G`, `BPS_50G`.
	Bandwidth *string `pulumi:"bandwidth"`
	// Up to 16 candidate prefixes that can be used to restrict the allocation
	// of cloudRouterIpAddress and customerRouterIpAddress for this attachment.
	// All prefixes must be within link-local address space (169.254.0.0/16)
	// and must be /29 or shorter (/28, /27, etc). Google will attempt to select
	// an unused /29 from the supplied candidate prefix(es). The request will
	// fail if all possible /29s are in use on Google's edge. If not supplied,
	// Google will randomly select an unused /29 from all of link-local space.
	CandidateSubnets []string `pulumi:"candidateSubnets"`
	// IPv4 address + prefix length to be configured on Cloud Router
	// Interface for this interconnect attachment.
	CloudRouterIpAddress *string `pulumi:"cloudRouterIpAddress"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// IPv4 address + prefix length to be configured on the customer
	// router subinterface for this interconnect attachment.
	CustomerRouterIpAddress *string `pulumi:"customerRouterIpAddress"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Desired availability domain for the attachment. Only available for type
	// PARTNER, at creation time. For improved reliability, customers should
	// configure a pair of attachments with one per availability domain. The
	// selected availability domain will be provided to the Partner via the
	// pairing key so that the provisioned circuit will lie in the specified
	// domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
	EdgeAvailabilityDomain *string `pulumi:"edgeAvailabilityDomain"`
	// Indicates the user-supplied encryption option of this interconnect
	// attachment. Can only be specified at attachment creation for PARTNER or
	// DEDICATED attachments.
	// * NONE - This is the default value, which means that the VLAN attachment
	//   carries unencrypted traffic. VMs are able to send traffic to, or receive
	//   traffic from, such a VLAN attachment.
	// * IPSEC - The VLAN attachment carries only encrypted traffic that is
	//   encrypted by an IPsec device, such as an HA VPN gateway or third-party
	//   IPsec VPN. VMs cannot directly send traffic to, or receive traffic from,
	//   such a VLAN attachment. To use HA VPN over Cloud Interconnect, the VLAN
	//   attachment must be created with this option.
	//   Default value is `NONE`.
	//   Possible values are: `NONE`, `IPSEC`.
	Encryption *string `pulumi:"encryption"`
	// Google reference ID, to be used when raising support tickets with
	// Google or otherwise to debug backend connectivity issues.
	GoogleReferenceId *string `pulumi:"googleReferenceId"`
	// URL of the underlying Interconnect object that this attachment's
	// traffic will traverse through. Required if type is DEDICATED, must not
	// be set if type is PARTNER.
	Interconnect *string `pulumi:"interconnect"`
	// URL of addresses that have been reserved for the interconnect attachment,
	// Used only for interconnect attachment that has the encryption option as
	// IPSEC.
	// The addresses must be RFC 1918 IP address ranges. When creating HA VPN
	// gateway over the interconnect attachment, if the attachment is configured
	// to use an RFC 1918 IP address, then the VPN gateway's IP address will be
	// allocated from the IP address range specified here.
	// For example, if the HA VPN gateway's interface 0 is paired to this
	// interconnect attachment, then an RFC 1918 IP address for the VPN gateway
	// interface 0 will be allocated from the IP address specified for this
	// interconnect attachment.
	// If this field is not specified for interconnect attachment that has
	// encryption option as IPSEC, later on when creating HA VPN gateway on this
	// interconnect attachment, the HA VPN gateway's IP address will be
	// allocated from regional external IP address pool.
	IpsecInternalAddresses []string `pulumi:"ipsecInternalAddresses"`
	// Maximum Transmission Unit (MTU), in bytes, of packets passing through
	// this interconnect attachment. Currently, only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
	Mtu *string `pulumi:"mtu"`
	// Name of the resource. Provided by the client when the resource is created. The
	// name must be 1-63 characters long, and comply with RFC1035. Specifically, the
	// name must be 1-63 characters long and match the regular expression
	// `a-z?` which means the first character must be a
	// lowercase letter, and all following characters must be a dash, lowercase
	// letter, or digit, except the last character, which cannot be a dash.
	//
	// ***
	Name *string `pulumi:"name"`
	// [Output only for type PARTNER. Not present for DEDICATED]. The opaque
	// identifier of an PARTNER attachment used to initiate provisioning with
	// a selected partner. Of the form "XXXXX/region/domain"
	PairingKey *string `pulumi:"pairingKey"`
	// [Output only for type PARTNER. Not present for DEDICATED]. Optional
	// BGP ASN for the router that should be supplied by a layer 3 Partner if
	// they configured BGP on behalf of the customer.
	PartnerAsn *string `pulumi:"partnerAsn"`
	// Information specific to an InterconnectAttachment. This property
	// is populated if the interconnect that this is attached to is of type DEDICATED.
	// Structure is documented below.
	PrivateInterconnectInfos []InterconnectAttachmentPrivateInterconnectInfo `pulumi:"privateInterconnectInfos"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Region where the regional interconnect attachment resides.
	Region *string `pulumi:"region"`
	// URL of the cloud router to be used for dynamic routing. This router must be in
	// the same region as this InterconnectAttachment. The InterconnectAttachment will
	// automatically connect the Interconnect to the network & region within which the
	// Cloud Router is configured.
	Router *string `pulumi:"router"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
	// [Output Only] The current state of this attachment's functionality.
	State *string `pulumi:"state"`
	// The type of InterconnectAttachment you wish to create. Defaults to
	// DEDICATED.
	// Possible values are: `DEDICATED`, `PARTNER`, `PARTNER_PROVIDER`.
	Type *string `pulumi:"type"`
	// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When
	// using PARTNER type this will be managed upstream.
	VlanTag8021q *int `pulumi:"vlanTag8021q"`
}

type InterconnectAttachmentState struct {
	// Whether the VLAN attachment is enabled or disabled.  When using
	// PARTNER type this will Pre-Activate the interconnect attachment
	AdminEnabled pulumi.BoolPtrInput
	// Provisioned bandwidth capacity for the interconnect attachment.
	// For attachments of type DEDICATED, the user can set the bandwidth.
	// For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth.
	// Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED,
	// Defaults to BPS_10G
	// Possible values are: `BPS_50M`, `BPS_100M`, `BPS_200M`, `BPS_300M`, `BPS_400M`, `BPS_500M`, `BPS_1G`, `BPS_2G`, `BPS_5G`, `BPS_10G`, `BPS_20G`, `BPS_50G`.
	Bandwidth pulumi.StringPtrInput
	// Up to 16 candidate prefixes that can be used to restrict the allocation
	// of cloudRouterIpAddress and customerRouterIpAddress for this attachment.
	// All prefixes must be within link-local address space (169.254.0.0/16)
	// and must be /29 or shorter (/28, /27, etc). Google will attempt to select
	// an unused /29 from the supplied candidate prefix(es). The request will
	// fail if all possible /29s are in use on Google's edge. If not supplied,
	// Google will randomly select an unused /29 from all of link-local space.
	CandidateSubnets pulumi.StringArrayInput
	// IPv4 address + prefix length to be configured on Cloud Router
	// Interface for this interconnect attachment.
	CloudRouterIpAddress pulumi.StringPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// IPv4 address + prefix length to be configured on the customer
	// router subinterface for this interconnect attachment.
	CustomerRouterIpAddress pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Desired availability domain for the attachment. Only available for type
	// PARTNER, at creation time. For improved reliability, customers should
	// configure a pair of attachments with one per availability domain. The
	// selected availability domain will be provided to the Partner via the
	// pairing key so that the provisioned circuit will lie in the specified
	// domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
	EdgeAvailabilityDomain pulumi.StringPtrInput
	// Indicates the user-supplied encryption option of this interconnect
	// attachment. Can only be specified at attachment creation for PARTNER or
	// DEDICATED attachments.
	// * NONE - This is the default value, which means that the VLAN attachment
	//   carries unencrypted traffic. VMs are able to send traffic to, or receive
	//   traffic from, such a VLAN attachment.
	// * IPSEC - The VLAN attachment carries only encrypted traffic that is
	//   encrypted by an IPsec device, such as an HA VPN gateway or third-party
	//   IPsec VPN. VMs cannot directly send traffic to, or receive traffic from,
	//   such a VLAN attachment. To use HA VPN over Cloud Interconnect, the VLAN
	//   attachment must be created with this option.
	//   Default value is `NONE`.
	//   Possible values are: `NONE`, `IPSEC`.
	Encryption pulumi.StringPtrInput
	// Google reference ID, to be used when raising support tickets with
	// Google or otherwise to debug backend connectivity issues.
	GoogleReferenceId pulumi.StringPtrInput
	// URL of the underlying Interconnect object that this attachment's
	// traffic will traverse through. Required if type is DEDICATED, must not
	// be set if type is PARTNER.
	Interconnect pulumi.StringPtrInput
	// URL of addresses that have been reserved for the interconnect attachment,
	// Used only for interconnect attachment that has the encryption option as
	// IPSEC.
	// The addresses must be RFC 1918 IP address ranges. When creating HA VPN
	// gateway over the interconnect attachment, if the attachment is configured
	// to use an RFC 1918 IP address, then the VPN gateway's IP address will be
	// allocated from the IP address range specified here.
	// For example, if the HA VPN gateway's interface 0 is paired to this
	// interconnect attachment, then an RFC 1918 IP address for the VPN gateway
	// interface 0 will be allocated from the IP address specified for this
	// interconnect attachment.
	// If this field is not specified for interconnect attachment that has
	// encryption option as IPSEC, later on when creating HA VPN gateway on this
	// interconnect attachment, the HA VPN gateway's IP address will be
	// allocated from regional external IP address pool.
	IpsecInternalAddresses pulumi.StringArrayInput
	// Maximum Transmission Unit (MTU), in bytes, of packets passing through
	// this interconnect attachment. Currently, only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
	Mtu pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is created. The
	// name must be 1-63 characters long, and comply with RFC1035. Specifically, the
	// name must be 1-63 characters long and match the regular expression
	// `a-z?` which means the first character must be a
	// lowercase letter, and all following characters must be a dash, lowercase
	// letter, or digit, except the last character, which cannot be a dash.
	//
	// ***
	Name pulumi.StringPtrInput
	// [Output only for type PARTNER. Not present for DEDICATED]. The opaque
	// identifier of an PARTNER attachment used to initiate provisioning with
	// a selected partner. Of the form "XXXXX/region/domain"
	PairingKey pulumi.StringPtrInput
	// [Output only for type PARTNER. Not present for DEDICATED]. Optional
	// BGP ASN for the router that should be supplied by a layer 3 Partner if
	// they configured BGP on behalf of the customer.
	PartnerAsn pulumi.StringPtrInput
	// Information specific to an InterconnectAttachment. This property
	// is populated if the interconnect that this is attached to is of type DEDICATED.
	// Structure is documented below.
	PrivateInterconnectInfos InterconnectAttachmentPrivateInterconnectInfoArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Region where the regional interconnect attachment resides.
	Region pulumi.StringPtrInput
	// URL of the cloud router to be used for dynamic routing. This router must be in
	// the same region as this InterconnectAttachment. The InterconnectAttachment will
	// automatically connect the Interconnect to the network & region within which the
	// Cloud Router is configured.
	Router pulumi.StringPtrInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
	// [Output Only] The current state of this attachment's functionality.
	State pulumi.StringPtrInput
	// The type of InterconnectAttachment you wish to create. Defaults to
	// DEDICATED.
	// Possible values are: `DEDICATED`, `PARTNER`, `PARTNER_PROVIDER`.
	Type pulumi.StringPtrInput
	// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When
	// using PARTNER type this will be managed upstream.
	VlanTag8021q pulumi.IntPtrInput
}

func (InterconnectAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*interconnectAttachmentState)(nil)).Elem()
}

type interconnectAttachmentArgs struct {
	// Whether the VLAN attachment is enabled or disabled.  When using
	// PARTNER type this will Pre-Activate the interconnect attachment
	AdminEnabled *bool `pulumi:"adminEnabled"`
	// Provisioned bandwidth capacity for the interconnect attachment.
	// For attachments of type DEDICATED, the user can set the bandwidth.
	// For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth.
	// Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED,
	// Defaults to BPS_10G
	// Possible values are: `BPS_50M`, `BPS_100M`, `BPS_200M`, `BPS_300M`, `BPS_400M`, `BPS_500M`, `BPS_1G`, `BPS_2G`, `BPS_5G`, `BPS_10G`, `BPS_20G`, `BPS_50G`.
	Bandwidth *string `pulumi:"bandwidth"`
	// Up to 16 candidate prefixes that can be used to restrict the allocation
	// of cloudRouterIpAddress and customerRouterIpAddress for this attachment.
	// All prefixes must be within link-local address space (169.254.0.0/16)
	// and must be /29 or shorter (/28, /27, etc). Google will attempt to select
	// an unused /29 from the supplied candidate prefix(es). The request will
	// fail if all possible /29s are in use on Google's edge. If not supplied,
	// Google will randomly select an unused /29 from all of link-local space.
	CandidateSubnets []string `pulumi:"candidateSubnets"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Desired availability domain for the attachment. Only available for type
	// PARTNER, at creation time. For improved reliability, customers should
	// configure a pair of attachments with one per availability domain. The
	// selected availability domain will be provided to the Partner via the
	// pairing key so that the provisioned circuit will lie in the specified
	// domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
	EdgeAvailabilityDomain *string `pulumi:"edgeAvailabilityDomain"`
	// Indicates the user-supplied encryption option of this interconnect
	// attachment. Can only be specified at attachment creation for PARTNER or
	// DEDICATED attachments.
	// * NONE - This is the default value, which means that the VLAN attachment
	//   carries unencrypted traffic. VMs are able to send traffic to, or receive
	//   traffic from, such a VLAN attachment.
	// * IPSEC - The VLAN attachment carries only encrypted traffic that is
	//   encrypted by an IPsec device, such as an HA VPN gateway or third-party
	//   IPsec VPN. VMs cannot directly send traffic to, or receive traffic from,
	//   such a VLAN attachment. To use HA VPN over Cloud Interconnect, the VLAN
	//   attachment must be created with this option.
	//   Default value is `NONE`.
	//   Possible values are: `NONE`, `IPSEC`.
	Encryption *string `pulumi:"encryption"`
	// URL of the underlying Interconnect object that this attachment's
	// traffic will traverse through. Required if type is DEDICATED, must not
	// be set if type is PARTNER.
	Interconnect *string `pulumi:"interconnect"`
	// URL of addresses that have been reserved for the interconnect attachment,
	// Used only for interconnect attachment that has the encryption option as
	// IPSEC.
	// The addresses must be RFC 1918 IP address ranges. When creating HA VPN
	// gateway over the interconnect attachment, if the attachment is configured
	// to use an RFC 1918 IP address, then the VPN gateway's IP address will be
	// allocated from the IP address range specified here.
	// For example, if the HA VPN gateway's interface 0 is paired to this
	// interconnect attachment, then an RFC 1918 IP address for the VPN gateway
	// interface 0 will be allocated from the IP address specified for this
	// interconnect attachment.
	// If this field is not specified for interconnect attachment that has
	// encryption option as IPSEC, later on when creating HA VPN gateway on this
	// interconnect attachment, the HA VPN gateway's IP address will be
	// allocated from regional external IP address pool.
	IpsecInternalAddresses []string `pulumi:"ipsecInternalAddresses"`
	// Maximum Transmission Unit (MTU), in bytes, of packets passing through
	// this interconnect attachment. Currently, only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
	Mtu *string `pulumi:"mtu"`
	// Name of the resource. Provided by the client when the resource is created. The
	// name must be 1-63 characters long, and comply with RFC1035. Specifically, the
	// name must be 1-63 characters long and match the regular expression
	// `a-z?` which means the first character must be a
	// lowercase letter, and all following characters must be a dash, lowercase
	// letter, or digit, except the last character, which cannot be a dash.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Region where the regional interconnect attachment resides.
	Region *string `pulumi:"region"`
	// URL of the cloud router to be used for dynamic routing. This router must be in
	// the same region as this InterconnectAttachment. The InterconnectAttachment will
	// automatically connect the Interconnect to the network & region within which the
	// Cloud Router is configured.
	Router string `pulumi:"router"`
	// The type of InterconnectAttachment you wish to create. Defaults to
	// DEDICATED.
	// Possible values are: `DEDICATED`, `PARTNER`, `PARTNER_PROVIDER`.
	Type *string `pulumi:"type"`
	// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When
	// using PARTNER type this will be managed upstream.
	VlanTag8021q *int `pulumi:"vlanTag8021q"`
}

// The set of arguments for constructing a InterconnectAttachment resource.
type InterconnectAttachmentArgs struct {
	// Whether the VLAN attachment is enabled or disabled.  When using
	// PARTNER type this will Pre-Activate the interconnect attachment
	AdminEnabled pulumi.BoolPtrInput
	// Provisioned bandwidth capacity for the interconnect attachment.
	// For attachments of type DEDICATED, the user can set the bandwidth.
	// For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth.
	// Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED,
	// Defaults to BPS_10G
	// Possible values are: `BPS_50M`, `BPS_100M`, `BPS_200M`, `BPS_300M`, `BPS_400M`, `BPS_500M`, `BPS_1G`, `BPS_2G`, `BPS_5G`, `BPS_10G`, `BPS_20G`, `BPS_50G`.
	Bandwidth pulumi.StringPtrInput
	// Up to 16 candidate prefixes that can be used to restrict the allocation
	// of cloudRouterIpAddress and customerRouterIpAddress for this attachment.
	// All prefixes must be within link-local address space (169.254.0.0/16)
	// and must be /29 or shorter (/28, /27, etc). Google will attempt to select
	// an unused /29 from the supplied candidate prefix(es). The request will
	// fail if all possible /29s are in use on Google's edge. If not supplied,
	// Google will randomly select an unused /29 from all of link-local space.
	CandidateSubnets pulumi.StringArrayInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Desired availability domain for the attachment. Only available for type
	// PARTNER, at creation time. For improved reliability, customers should
	// configure a pair of attachments with one per availability domain. The
	// selected availability domain will be provided to the Partner via the
	// pairing key so that the provisioned circuit will lie in the specified
	// domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
	EdgeAvailabilityDomain pulumi.StringPtrInput
	// Indicates the user-supplied encryption option of this interconnect
	// attachment. Can only be specified at attachment creation for PARTNER or
	// DEDICATED attachments.
	// * NONE - This is the default value, which means that the VLAN attachment
	//   carries unencrypted traffic. VMs are able to send traffic to, or receive
	//   traffic from, such a VLAN attachment.
	// * IPSEC - The VLAN attachment carries only encrypted traffic that is
	//   encrypted by an IPsec device, such as an HA VPN gateway or third-party
	//   IPsec VPN. VMs cannot directly send traffic to, or receive traffic from,
	//   such a VLAN attachment. To use HA VPN over Cloud Interconnect, the VLAN
	//   attachment must be created with this option.
	//   Default value is `NONE`.
	//   Possible values are: `NONE`, `IPSEC`.
	Encryption pulumi.StringPtrInput
	// URL of the underlying Interconnect object that this attachment's
	// traffic will traverse through. Required if type is DEDICATED, must not
	// be set if type is PARTNER.
	Interconnect pulumi.StringPtrInput
	// URL of addresses that have been reserved for the interconnect attachment,
	// Used only for interconnect attachment that has the encryption option as
	// IPSEC.
	// The addresses must be RFC 1918 IP address ranges. When creating HA VPN
	// gateway over the interconnect attachment, if the attachment is configured
	// to use an RFC 1918 IP address, then the VPN gateway's IP address will be
	// allocated from the IP address range specified here.
	// For example, if the HA VPN gateway's interface 0 is paired to this
	// interconnect attachment, then an RFC 1918 IP address for the VPN gateway
	// interface 0 will be allocated from the IP address specified for this
	// interconnect attachment.
	// If this field is not specified for interconnect attachment that has
	// encryption option as IPSEC, later on when creating HA VPN gateway on this
	// interconnect attachment, the HA VPN gateway's IP address will be
	// allocated from regional external IP address pool.
	IpsecInternalAddresses pulumi.StringArrayInput
	// Maximum Transmission Unit (MTU), in bytes, of packets passing through
	// this interconnect attachment. Currently, only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
	Mtu pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is created. The
	// name must be 1-63 characters long, and comply with RFC1035. Specifically, the
	// name must be 1-63 characters long and match the regular expression
	// `a-z?` which means the first character must be a
	// lowercase letter, and all following characters must be a dash, lowercase
	// letter, or digit, except the last character, which cannot be a dash.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Region where the regional interconnect attachment resides.
	Region pulumi.StringPtrInput
	// URL of the cloud router to be used for dynamic routing. This router must be in
	// the same region as this InterconnectAttachment. The InterconnectAttachment will
	// automatically connect the Interconnect to the network & region within which the
	// Cloud Router is configured.
	Router pulumi.StringInput
	// The type of InterconnectAttachment you wish to create. Defaults to
	// DEDICATED.
	// Possible values are: `DEDICATED`, `PARTNER`, `PARTNER_PROVIDER`.
	Type pulumi.StringPtrInput
	// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When
	// using PARTNER type this will be managed upstream.
	VlanTag8021q pulumi.IntPtrInput
}

func (InterconnectAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interconnectAttachmentArgs)(nil)).Elem()
}

type InterconnectAttachmentInput interface {
	pulumi.Input

	ToInterconnectAttachmentOutput() InterconnectAttachmentOutput
	ToInterconnectAttachmentOutputWithContext(ctx context.Context) InterconnectAttachmentOutput
}

func (*InterconnectAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**InterconnectAttachment)(nil)).Elem()
}

func (i *InterconnectAttachment) ToInterconnectAttachmentOutput() InterconnectAttachmentOutput {
	return i.ToInterconnectAttachmentOutputWithContext(context.Background())
}

func (i *InterconnectAttachment) ToInterconnectAttachmentOutputWithContext(ctx context.Context) InterconnectAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentOutput)
}

// InterconnectAttachmentArrayInput is an input type that accepts InterconnectAttachmentArray and InterconnectAttachmentArrayOutput values.
// You can construct a concrete instance of `InterconnectAttachmentArrayInput` via:
//
//	InterconnectAttachmentArray{ InterconnectAttachmentArgs{...} }
type InterconnectAttachmentArrayInput interface {
	pulumi.Input

	ToInterconnectAttachmentArrayOutput() InterconnectAttachmentArrayOutput
	ToInterconnectAttachmentArrayOutputWithContext(context.Context) InterconnectAttachmentArrayOutput
}

type InterconnectAttachmentArray []InterconnectAttachmentInput

func (InterconnectAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterconnectAttachment)(nil)).Elem()
}

func (i InterconnectAttachmentArray) ToInterconnectAttachmentArrayOutput() InterconnectAttachmentArrayOutput {
	return i.ToInterconnectAttachmentArrayOutputWithContext(context.Background())
}

func (i InterconnectAttachmentArray) ToInterconnectAttachmentArrayOutputWithContext(ctx context.Context) InterconnectAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentArrayOutput)
}

// InterconnectAttachmentMapInput is an input type that accepts InterconnectAttachmentMap and InterconnectAttachmentMapOutput values.
// You can construct a concrete instance of `InterconnectAttachmentMapInput` via:
//
//	InterconnectAttachmentMap{ "key": InterconnectAttachmentArgs{...} }
type InterconnectAttachmentMapInput interface {
	pulumi.Input

	ToInterconnectAttachmentMapOutput() InterconnectAttachmentMapOutput
	ToInterconnectAttachmentMapOutputWithContext(context.Context) InterconnectAttachmentMapOutput
}

type InterconnectAttachmentMap map[string]InterconnectAttachmentInput

func (InterconnectAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterconnectAttachment)(nil)).Elem()
}

func (i InterconnectAttachmentMap) ToInterconnectAttachmentMapOutput() InterconnectAttachmentMapOutput {
	return i.ToInterconnectAttachmentMapOutputWithContext(context.Background())
}

func (i InterconnectAttachmentMap) ToInterconnectAttachmentMapOutputWithContext(ctx context.Context) InterconnectAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentMapOutput)
}

type InterconnectAttachmentOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterconnectAttachment)(nil)).Elem()
}

func (o InterconnectAttachmentOutput) ToInterconnectAttachmentOutput() InterconnectAttachmentOutput {
	return o
}

func (o InterconnectAttachmentOutput) ToInterconnectAttachmentOutputWithContext(ctx context.Context) InterconnectAttachmentOutput {
	return o
}

// Whether the VLAN attachment is enabled or disabled.  When using
// PARTNER type this will Pre-Activate the interconnect attachment
func (o InterconnectAttachmentOutput) AdminEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.BoolPtrOutput { return v.AdminEnabled }).(pulumi.BoolPtrOutput)
}

// Provisioned bandwidth capacity for the interconnect attachment.
// For attachments of type DEDICATED, the user can set the bandwidth.
// For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth.
// Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED,
// Defaults to BPS_10G
// Possible values are: `BPS_50M`, `BPS_100M`, `BPS_200M`, `BPS_300M`, `BPS_400M`, `BPS_500M`, `BPS_1G`, `BPS_2G`, `BPS_5G`, `BPS_10G`, `BPS_20G`, `BPS_50G`.
func (o InterconnectAttachmentOutput) Bandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringOutput { return v.Bandwidth }).(pulumi.StringOutput)
}

// Up to 16 candidate prefixes that can be used to restrict the allocation
// of cloudRouterIpAddress and customerRouterIpAddress for this attachment.
// All prefixes must be within link-local address space (169.254.0.0/16)
// and must be /29 or shorter (/28, /27, etc). Google will attempt to select
// an unused /29 from the supplied candidate prefix(es). The request will
// fail if all possible /29s are in use on Google's edge. If not supplied,
// Google will randomly select an unused /29 from all of link-local space.
func (o InterconnectAttachmentOutput) CandidateSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringArrayOutput { return v.CandidateSubnets }).(pulumi.StringArrayOutput)
}

// IPv4 address + prefix length to be configured on Cloud Router
// Interface for this interconnect attachment.
func (o InterconnectAttachmentOutput) CloudRouterIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringOutput { return v.CloudRouterIpAddress }).(pulumi.StringOutput)
}

// Creation timestamp in RFC3339 text format.
func (o InterconnectAttachmentOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// IPv4 address + prefix length to be configured on the customer
// router subinterface for this interconnect attachment.
func (o InterconnectAttachmentOutput) CustomerRouterIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringOutput { return v.CustomerRouterIpAddress }).(pulumi.StringOutput)
}

// An optional description of this resource.
func (o InterconnectAttachmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Desired availability domain for the attachment. Only available for type
// PARTNER, at creation time. For improved reliability, customers should
// configure a pair of attachments with one per availability domain. The
// selected availability domain will be provided to the Partner via the
// pairing key so that the provisioned circuit will lie in the specified
// domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
func (o InterconnectAttachmentOutput) EdgeAvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringOutput { return v.EdgeAvailabilityDomain }).(pulumi.StringOutput)
}

// Indicates the user-supplied encryption option of this interconnect
// attachment. Can only be specified at attachment creation for PARTNER or
// DEDICATED attachments.
//   - NONE - This is the default value, which means that the VLAN attachment
//     carries unencrypted traffic. VMs are able to send traffic to, or receive
//     traffic from, such a VLAN attachment.
//   - IPSEC - The VLAN attachment carries only encrypted traffic that is
//     encrypted by an IPsec device, such as an HA VPN gateway or third-party
//     IPsec VPN. VMs cannot directly send traffic to, or receive traffic from,
//     such a VLAN attachment. To use HA VPN over Cloud Interconnect, the VLAN
//     attachment must be created with this option.
//     Default value is `NONE`.
//     Possible values are: `NONE`, `IPSEC`.
func (o InterconnectAttachmentOutput) Encryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringPtrOutput { return v.Encryption }).(pulumi.StringPtrOutput)
}

// Google reference ID, to be used when raising support tickets with
// Google or otherwise to debug backend connectivity issues.
func (o InterconnectAttachmentOutput) GoogleReferenceId() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringOutput { return v.GoogleReferenceId }).(pulumi.StringOutput)
}

// URL of the underlying Interconnect object that this attachment's
// traffic will traverse through. Required if type is DEDICATED, must not
// be set if type is PARTNER.
func (o InterconnectAttachmentOutput) Interconnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringPtrOutput { return v.Interconnect }).(pulumi.StringPtrOutput)
}

// URL of addresses that have been reserved for the interconnect attachment,
// Used only for interconnect attachment that has the encryption option as
// IPSEC.
// The addresses must be RFC 1918 IP address ranges. When creating HA VPN
// gateway over the interconnect attachment, if the attachment is configured
// to use an RFC 1918 IP address, then the VPN gateway's IP address will be
// allocated from the IP address range specified here.
// For example, if the HA VPN gateway's interface 0 is paired to this
// interconnect attachment, then an RFC 1918 IP address for the VPN gateway
// interface 0 will be allocated from the IP address specified for this
// interconnect attachment.
// If this field is not specified for interconnect attachment that has
// encryption option as IPSEC, later on when creating HA VPN gateway on this
// interconnect attachment, the HA VPN gateway's IP address will be
// allocated from regional external IP address pool.
func (o InterconnectAttachmentOutput) IpsecInternalAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringArrayOutput { return v.IpsecInternalAddresses }).(pulumi.StringArrayOutput)
}

// Maximum Transmission Unit (MTU), in bytes, of packets passing through
// this interconnect attachment. Currently, only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
func (o InterconnectAttachmentOutput) Mtu() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringOutput { return v.Mtu }).(pulumi.StringOutput)
}

// Name of the resource. Provided by the client when the resource is created. The
// name must be 1-63 characters long, and comply with RFC1035. Specifically, the
// name must be 1-63 characters long and match the regular expression
// `a-z?` which means the first character must be a
// lowercase letter, and all following characters must be a dash, lowercase
// letter, or digit, except the last character, which cannot be a dash.
//
// ***
func (o InterconnectAttachmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [Output only for type PARTNER. Not present for DEDICATED]. The opaque
// identifier of an PARTNER attachment used to initiate provisioning with
// a selected partner. Of the form "XXXXX/region/domain"
func (o InterconnectAttachmentOutput) PairingKey() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringOutput { return v.PairingKey }).(pulumi.StringOutput)
}

// [Output only for type PARTNER. Not present for DEDICATED]. Optional
// BGP ASN for the router that should be supplied by a layer 3 Partner if
// they configured BGP on behalf of the customer.
func (o InterconnectAttachmentOutput) PartnerAsn() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringOutput { return v.PartnerAsn }).(pulumi.StringOutput)
}

// Information specific to an InterconnectAttachment. This property
// is populated if the interconnect that this is attached to is of type DEDICATED.
// Structure is documented below.
func (o InterconnectAttachmentOutput) PrivateInterconnectInfos() InterconnectAttachmentPrivateInterconnectInfoArrayOutput {
	return o.ApplyT(func(v *InterconnectAttachment) InterconnectAttachmentPrivateInterconnectInfoArrayOutput {
		return v.PrivateInterconnectInfos
	}).(InterconnectAttachmentPrivateInterconnectInfoArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o InterconnectAttachmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Region where the regional interconnect attachment resides.
func (o InterconnectAttachmentOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// URL of the cloud router to be used for dynamic routing. This router must be in
// the same region as this InterconnectAttachment. The InterconnectAttachment will
// automatically connect the Interconnect to the network & region within which the
// Cloud Router is configured.
func (o InterconnectAttachmentOutput) Router() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringOutput { return v.Router }).(pulumi.StringOutput)
}

// The URI of the created resource.
func (o InterconnectAttachmentOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// [Output Only] The current state of this attachment's functionality.
func (o InterconnectAttachmentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The type of InterconnectAttachment you wish to create. Defaults to
// DEDICATED.
// Possible values are: `DEDICATED`, `PARTNER`, `PARTNER_PROVIDER`.
func (o InterconnectAttachmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When
// using PARTNER type this will be managed upstream.
func (o InterconnectAttachmentOutput) VlanTag8021q() pulumi.IntOutput {
	return o.ApplyT(func(v *InterconnectAttachment) pulumi.IntOutput { return v.VlanTag8021q }).(pulumi.IntOutput)
}

type InterconnectAttachmentArrayOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterconnectAttachment)(nil)).Elem()
}

func (o InterconnectAttachmentArrayOutput) ToInterconnectAttachmentArrayOutput() InterconnectAttachmentArrayOutput {
	return o
}

func (o InterconnectAttachmentArrayOutput) ToInterconnectAttachmentArrayOutputWithContext(ctx context.Context) InterconnectAttachmentArrayOutput {
	return o
}

func (o InterconnectAttachmentArrayOutput) Index(i pulumi.IntInput) InterconnectAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterconnectAttachment {
		return vs[0].([]*InterconnectAttachment)[vs[1].(int)]
	}).(InterconnectAttachmentOutput)
}

type InterconnectAttachmentMapOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterconnectAttachment)(nil)).Elem()
}

func (o InterconnectAttachmentMapOutput) ToInterconnectAttachmentMapOutput() InterconnectAttachmentMapOutput {
	return o
}

func (o InterconnectAttachmentMapOutput) ToInterconnectAttachmentMapOutputWithContext(ctx context.Context) InterconnectAttachmentMapOutput {
	return o
}

func (o InterconnectAttachmentMapOutput) MapIndex(k pulumi.StringInput) InterconnectAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterconnectAttachment {
		return vs[0].(map[string]*InterconnectAttachment)[vs[1].(string)]
	}).(InterconnectAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterconnectAttachmentInput)(nil)).Elem(), &InterconnectAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterconnectAttachmentArrayInput)(nil)).Elem(), InterconnectAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterconnectAttachmentMapInput)(nil)).Elem(), InterconnectAttachmentMap{})
	pulumi.RegisterOutputType(InterconnectAttachmentOutput{})
	pulumi.RegisterOutputType(InterconnectAttachmentArrayOutput{})
	pulumi.RegisterOutputType(InterconnectAttachmentMapOutput{})
}
