// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Compute Cross Site Network Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewCrossSiteNetwork(ctx, "example-cross-site-network", &compute.CrossSiteNetworkArgs{
//				Name:        pulumi.String("test-cross-site-network"),
//				Description: pulumi.String("Example cross site network"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CrossSiteNetwork can be imported using any of these accepted formats:
//
// * `projects/{{project}}/global/crossSiteNetworks/{{name}}`
//
// * `{{project}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, CrossSiteNetwork can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:compute/crossSiteNetwork:CrossSiteNetwork default projects/{{project}}/global/crossSiteNetworks/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/crossSiteNetwork:CrossSiteNetwork default {{project}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/crossSiteNetwork:CrossSiteNetwork default {{name}}
// ```
type CrossSiteNetwork struct {
	pulumi.CustomResourceState

	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewCrossSiteNetwork registers a new resource with the given unique name, arguments, and options.
func NewCrossSiteNetwork(ctx *pulumi.Context,
	name string, args *CrossSiteNetworkArgs, opts ...pulumi.ResourceOption) (*CrossSiteNetwork, error) {
	if args == nil {
		args = &CrossSiteNetworkArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CrossSiteNetwork
	err := ctx.RegisterResource("gcp:compute/crossSiteNetwork:CrossSiteNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCrossSiteNetwork gets an existing CrossSiteNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCrossSiteNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CrossSiteNetworkState, opts ...pulumi.ResourceOption) (*CrossSiteNetwork, error) {
	var resource CrossSiteNetwork
	err := ctx.ReadResource("gcp:compute/crossSiteNetwork:CrossSiteNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CrossSiteNetwork resources.
type crossSiteNetworkState struct {
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

type CrossSiteNetworkState struct {
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (CrossSiteNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*crossSiteNetworkState)(nil)).Elem()
}

type crossSiteNetworkArgs struct {
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a CrossSiteNetwork resource.
type CrossSiteNetworkArgs struct {
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (CrossSiteNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*crossSiteNetworkArgs)(nil)).Elem()
}

type CrossSiteNetworkInput interface {
	pulumi.Input

	ToCrossSiteNetworkOutput() CrossSiteNetworkOutput
	ToCrossSiteNetworkOutputWithContext(ctx context.Context) CrossSiteNetworkOutput
}

func (*CrossSiteNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossSiteNetwork)(nil)).Elem()
}

func (i *CrossSiteNetwork) ToCrossSiteNetworkOutput() CrossSiteNetworkOutput {
	return i.ToCrossSiteNetworkOutputWithContext(context.Background())
}

func (i *CrossSiteNetwork) ToCrossSiteNetworkOutputWithContext(ctx context.Context) CrossSiteNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteNetworkOutput)
}

// CrossSiteNetworkArrayInput is an input type that accepts CrossSiteNetworkArray and CrossSiteNetworkArrayOutput values.
// You can construct a concrete instance of `CrossSiteNetworkArrayInput` via:
//
//	CrossSiteNetworkArray{ CrossSiteNetworkArgs{...} }
type CrossSiteNetworkArrayInput interface {
	pulumi.Input

	ToCrossSiteNetworkArrayOutput() CrossSiteNetworkArrayOutput
	ToCrossSiteNetworkArrayOutputWithContext(context.Context) CrossSiteNetworkArrayOutput
}

type CrossSiteNetworkArray []CrossSiteNetworkInput

func (CrossSiteNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CrossSiteNetwork)(nil)).Elem()
}

func (i CrossSiteNetworkArray) ToCrossSiteNetworkArrayOutput() CrossSiteNetworkArrayOutput {
	return i.ToCrossSiteNetworkArrayOutputWithContext(context.Background())
}

func (i CrossSiteNetworkArray) ToCrossSiteNetworkArrayOutputWithContext(ctx context.Context) CrossSiteNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteNetworkArrayOutput)
}

// CrossSiteNetworkMapInput is an input type that accepts CrossSiteNetworkMap and CrossSiteNetworkMapOutput values.
// You can construct a concrete instance of `CrossSiteNetworkMapInput` via:
//
//	CrossSiteNetworkMap{ "key": CrossSiteNetworkArgs{...} }
type CrossSiteNetworkMapInput interface {
	pulumi.Input

	ToCrossSiteNetworkMapOutput() CrossSiteNetworkMapOutput
	ToCrossSiteNetworkMapOutputWithContext(context.Context) CrossSiteNetworkMapOutput
}

type CrossSiteNetworkMap map[string]CrossSiteNetworkInput

func (CrossSiteNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CrossSiteNetwork)(nil)).Elem()
}

func (i CrossSiteNetworkMap) ToCrossSiteNetworkMapOutput() CrossSiteNetworkMapOutput {
	return i.ToCrossSiteNetworkMapOutputWithContext(context.Background())
}

func (i CrossSiteNetworkMap) ToCrossSiteNetworkMapOutputWithContext(ctx context.Context) CrossSiteNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteNetworkMapOutput)
}

type CrossSiteNetworkOutput struct{ *pulumi.OutputState }

func (CrossSiteNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossSiteNetwork)(nil)).Elem()
}

func (o CrossSiteNetworkOutput) ToCrossSiteNetworkOutput() CrossSiteNetworkOutput {
	return o
}

func (o CrossSiteNetworkOutput) ToCrossSiteNetworkOutputWithContext(ctx context.Context) CrossSiteNetworkOutput {
	return o
}

// An optional description of this resource.
func (o CrossSiteNetworkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossSiteNetwork) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be
// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
// long and match the regular expression `a-z?` which means the first
// character must be a lowercase letter, and all following characters must be a dash,
// lowercase letter, or digit, except the last character, which cannot be a dash.
//
// ***
func (o CrossSiteNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CrossSiteNetwork) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o CrossSiteNetworkOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CrossSiteNetwork) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type CrossSiteNetworkArrayOutput struct{ *pulumi.OutputState }

func (CrossSiteNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CrossSiteNetwork)(nil)).Elem()
}

func (o CrossSiteNetworkArrayOutput) ToCrossSiteNetworkArrayOutput() CrossSiteNetworkArrayOutput {
	return o
}

func (o CrossSiteNetworkArrayOutput) ToCrossSiteNetworkArrayOutputWithContext(ctx context.Context) CrossSiteNetworkArrayOutput {
	return o
}

func (o CrossSiteNetworkArrayOutput) Index(i pulumi.IntInput) CrossSiteNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CrossSiteNetwork {
		return vs[0].([]*CrossSiteNetwork)[vs[1].(int)]
	}).(CrossSiteNetworkOutput)
}

type CrossSiteNetworkMapOutput struct{ *pulumi.OutputState }

func (CrossSiteNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CrossSiteNetwork)(nil)).Elem()
}

func (o CrossSiteNetworkMapOutput) ToCrossSiteNetworkMapOutput() CrossSiteNetworkMapOutput {
	return o
}

func (o CrossSiteNetworkMapOutput) ToCrossSiteNetworkMapOutputWithContext(ctx context.Context) CrossSiteNetworkMapOutput {
	return o
}

func (o CrossSiteNetworkMapOutput) MapIndex(k pulumi.StringInput) CrossSiteNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CrossSiteNetwork {
		return vs[0].(map[string]*CrossSiteNetwork)[vs[1].(string)]
	}).(CrossSiteNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CrossSiteNetworkInput)(nil)).Elem(), &CrossSiteNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrossSiteNetworkArrayInput)(nil)).Elem(), CrossSiteNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrossSiteNetworkMapInput)(nil)).Elem(), CrossSiteNetworkMap{})
	pulumi.RegisterOutputType(CrossSiteNetworkOutput{})
	pulumi.RegisterOutputType(CrossSiteNetworkArrayOutput{})
	pulumi.RegisterOutputType(CrossSiteNetworkMapOutput{})
}
