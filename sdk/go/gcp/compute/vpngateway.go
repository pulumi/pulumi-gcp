// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a VPN gateway running in GCP. This virtual device is managed
// by Google, but used only by you.
//
// To get more information about VpnGateway, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/targetVpnGateways)
//
// > **Warning:** Classic VPN is deprecating certain functionality on October 31, 2021. For more information,
// see the [Classic VPN partial deprecation page](https://cloud.google.com/network-connectivity/docs/vpn/deprecations/classic-vpn-deprecation).
//
// ## Example Usage
// ### Target Vpn Gateway Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			network1, err := compute.NewNetwork(ctx, "network1", nil)
//			if err != nil {
//				return err
//			}
//			targetGateway, err := compute.NewVPNGateway(ctx, "targetGateway", &compute.VPNGatewayArgs{
//				Network: network1.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			vpnStaticIp, err := compute.NewAddress(ctx, "vpnStaticIp", nil)
//			if err != nil {
//				return err
//			}
//			frEsp, err := compute.NewForwardingRule(ctx, "frEsp", &compute.ForwardingRuleArgs{
//				IpProtocol: pulumi.String("ESP"),
//				IpAddress:  vpnStaticIp.Address,
//				Target:     targetGateway.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			frUdp500, err := compute.NewForwardingRule(ctx, "frUdp500", &compute.ForwardingRuleArgs{
//				IpProtocol: pulumi.String("UDP"),
//				PortRange:  pulumi.String("500"),
//				IpAddress:  vpnStaticIp.Address,
//				Target:     targetGateway.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			frUdp4500, err := compute.NewForwardingRule(ctx, "frUdp4500", &compute.ForwardingRuleArgs{
//				IpProtocol: pulumi.String("UDP"),
//				PortRange:  pulumi.String("4500"),
//				IpAddress:  vpnStaticIp.Address,
//				Target:     targetGateway.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			tunnel1, err := compute.NewVPNTunnel(ctx, "tunnel1", &compute.VPNTunnelArgs{
//				PeerIp:           pulumi.String("15.0.0.120"),
//				SharedSecret:     pulumi.String("a secret message"),
//				TargetVpnGateway: targetGateway.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				frEsp,
//				frUdp500,
//				frUdp4500,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRoute(ctx, "route1", &compute.RouteArgs{
//				Network:          network1.Name,
//				DestRange:        pulumi.String("15.0.0.0/24"),
//				Priority:         pulumi.Int(1000),
//				NextHopVpnTunnel: tunnel1.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # VpnGateway can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:compute/vPNGateway:VPNGateway default projects/{{project}}/regions/{{region}}/targetVpnGateways/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/vPNGateway:VPNGateway default {{project}}/{{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/vPNGateway:VPNGateway default {{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/vPNGateway:VPNGateway default {{name}}
//
// ```
type VPNGateway struct {
	pulumi.CustomResourceState

	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The unique identifier for the resource.
	GatewayId pulumi.IntOutput `pulumi:"gatewayId"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression `a-z?` which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// The network this VPN gateway is accepting traffic for.
	//
	// ***
	Network pulumi.StringOutput `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region this gateway should sit in.
	Region pulumi.StringOutput `pulumi:"region"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
}

// NewVPNGateway registers a new resource with the given unique name, arguments, and options.
func NewVPNGateway(ctx *pulumi.Context,
	name string, args *VPNGatewayArgs, opts ...pulumi.ResourceOption) (*VPNGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VPNGateway
	err := ctx.RegisterResource("gcp:compute/vPNGateway:VPNGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVPNGateway gets an existing VPNGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVPNGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VPNGatewayState, opts ...pulumi.ResourceOption) (*VPNGateway, error) {
	var resource VPNGateway
	err := ctx.ReadResource("gcp:compute/vPNGateway:VPNGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VPNGateway resources.
type vpngatewayState struct {
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// The unique identifier for the resource.
	GatewayId *int `pulumi:"gatewayId"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression `a-z?` which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The network this VPN gateway is accepting traffic for.
	//
	// ***
	Network *string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region this gateway should sit in.
	Region *string `pulumi:"region"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
}

type VPNGatewayState struct {
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// The unique identifier for the resource.
	GatewayId pulumi.IntPtrInput
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression `a-z?` which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The network this VPN gateway is accepting traffic for.
	//
	// ***
	Network pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region this gateway should sit in.
	Region pulumi.StringPtrInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
}

func (VPNGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpngatewayState)(nil)).Elem()
}

type vpngatewayArgs struct {
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression `a-z?` which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The network this VPN gateway is accepting traffic for.
	//
	// ***
	Network string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region this gateway should sit in.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a VPNGateway resource.
type VPNGatewayArgs struct {
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression `a-z?` which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The network this VPN gateway is accepting traffic for.
	//
	// ***
	Network pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region this gateway should sit in.
	Region pulumi.StringPtrInput
}

func (VPNGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpngatewayArgs)(nil)).Elem()
}

type VPNGatewayInput interface {
	pulumi.Input

	ToVPNGatewayOutput() VPNGatewayOutput
	ToVPNGatewayOutputWithContext(ctx context.Context) VPNGatewayOutput
}

func (*VPNGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**VPNGateway)(nil)).Elem()
}

func (i *VPNGateway) ToVPNGatewayOutput() VPNGatewayOutput {
	return i.ToVPNGatewayOutputWithContext(context.Background())
}

func (i *VPNGateway) ToVPNGatewayOutputWithContext(ctx context.Context) VPNGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPNGatewayOutput)
}

// VPNGatewayArrayInput is an input type that accepts VPNGatewayArray and VPNGatewayArrayOutput values.
// You can construct a concrete instance of `VPNGatewayArrayInput` via:
//
//	VPNGatewayArray{ VPNGatewayArgs{...} }
type VPNGatewayArrayInput interface {
	pulumi.Input

	ToVPNGatewayArrayOutput() VPNGatewayArrayOutput
	ToVPNGatewayArrayOutputWithContext(context.Context) VPNGatewayArrayOutput
}

type VPNGatewayArray []VPNGatewayInput

func (VPNGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VPNGateway)(nil)).Elem()
}

func (i VPNGatewayArray) ToVPNGatewayArrayOutput() VPNGatewayArrayOutput {
	return i.ToVPNGatewayArrayOutputWithContext(context.Background())
}

func (i VPNGatewayArray) ToVPNGatewayArrayOutputWithContext(ctx context.Context) VPNGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPNGatewayArrayOutput)
}

// VPNGatewayMapInput is an input type that accepts VPNGatewayMap and VPNGatewayMapOutput values.
// You can construct a concrete instance of `VPNGatewayMapInput` via:
//
//	VPNGatewayMap{ "key": VPNGatewayArgs{...} }
type VPNGatewayMapInput interface {
	pulumi.Input

	ToVPNGatewayMapOutput() VPNGatewayMapOutput
	ToVPNGatewayMapOutputWithContext(context.Context) VPNGatewayMapOutput
}

type VPNGatewayMap map[string]VPNGatewayInput

func (VPNGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VPNGateway)(nil)).Elem()
}

func (i VPNGatewayMap) ToVPNGatewayMapOutput() VPNGatewayMapOutput {
	return i.ToVPNGatewayMapOutputWithContext(context.Background())
}

func (i VPNGatewayMap) ToVPNGatewayMapOutputWithContext(ctx context.Context) VPNGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPNGatewayMapOutput)
}

type VPNGatewayOutput struct{ *pulumi.OutputState }

func (VPNGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VPNGateway)(nil)).Elem()
}

func (o VPNGatewayOutput) ToVPNGatewayOutput() VPNGatewayOutput {
	return o
}

func (o VPNGatewayOutput) ToVPNGatewayOutputWithContext(ctx context.Context) VPNGatewayOutput {
	return o
}

// Creation timestamp in RFC3339 text format.
func (o VPNGatewayOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *VPNGateway) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource.
func (o VPNGatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VPNGateway) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique identifier for the resource.
func (o VPNGatewayOutput) GatewayId() pulumi.IntOutput {
	return o.ApplyT(func(v *VPNGateway) pulumi.IntOutput { return v.GatewayId }).(pulumi.IntOutput)
}

// Name of the resource. Provided by the client when the resource is
// created. The name must be 1-63 characters long, and comply with
// RFC1035.  Specifically, the name must be 1-63 characters long and
// match the regular expression `a-z?` which means
// the first character must be a lowercase letter, and all following
// characters must be a dash, lowercase letter, or digit, except the last
// character, which cannot be a dash.
func (o VPNGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VPNGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The network this VPN gateway is accepting traffic for.
//
// ***
func (o VPNGatewayOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *VPNGateway) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o VPNGatewayOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VPNGateway) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region this gateway should sit in.
func (o VPNGatewayOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VPNGateway) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The URI of the created resource.
func (o VPNGatewayOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *VPNGateway) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

type VPNGatewayArrayOutput struct{ *pulumi.OutputState }

func (VPNGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VPNGateway)(nil)).Elem()
}

func (o VPNGatewayArrayOutput) ToVPNGatewayArrayOutput() VPNGatewayArrayOutput {
	return o
}

func (o VPNGatewayArrayOutput) ToVPNGatewayArrayOutputWithContext(ctx context.Context) VPNGatewayArrayOutput {
	return o
}

func (o VPNGatewayArrayOutput) Index(i pulumi.IntInput) VPNGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VPNGateway {
		return vs[0].([]*VPNGateway)[vs[1].(int)]
	}).(VPNGatewayOutput)
}

type VPNGatewayMapOutput struct{ *pulumi.OutputState }

func (VPNGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VPNGateway)(nil)).Elem()
}

func (o VPNGatewayMapOutput) ToVPNGatewayMapOutput() VPNGatewayMapOutput {
	return o
}

func (o VPNGatewayMapOutput) ToVPNGatewayMapOutputWithContext(ctx context.Context) VPNGatewayMapOutput {
	return o
}

func (o VPNGatewayMapOutput) MapIndex(k pulumi.StringInput) VPNGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VPNGateway {
		return vs[0].(map[string]*VPNGateway)[vs[1].(string)]
	}).(VPNGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VPNGatewayInput)(nil)).Elem(), &VPNGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*VPNGatewayArrayInput)(nil)).Elem(), VPNGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VPNGatewayMapInput)(nil)).Elem(), VPNGatewayMap{})
	pulumi.RegisterOutputType(VPNGatewayOutput{})
	pulumi.RegisterOutputType(VPNGatewayArrayOutput{})
	pulumi.RegisterOutputType(VPNGatewayMapOutput{})
}
