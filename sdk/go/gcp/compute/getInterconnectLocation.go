// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the details of a single interconnect location. For more information see
// the official [API](https://cloud.google.com/compute/docs/reference/rest/v1/interconnectLocations/get) documentation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			this, err := compute.GetInterconnectLocation(ctx, &compute.GetInterconnectLocationArgs{
//				Name: "iad-zone1-1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewInterconnect(ctx, "this", &compute.InterconnectArgs{
//				Project:  pulumi.String(this.Project),
//				Location: pulumi.String(this.SelfLink),
//				Name:     pulumi.String("my-dedicated-connection-1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetInterconnectLocation(ctx *pulumi.Context, args *GetInterconnectLocationArgs, opts ...pulumi.InvokeOption) (*GetInterconnectLocationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetInterconnectLocationResult
	err := ctx.Invoke("gcp:compute/getInterconnectLocation:getInterconnectLocation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInterconnectLocation.
type GetInterconnectLocationArgs struct {
	// The name of the interconnect location.
	Name string `pulumi:"name"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getInterconnectLocation.
type GetInterconnectLocationResult struct {
	// The postal address of the Point of Presence.
	Address string `pulumi:"address"`
	// The availability zone for this InterconnectLocation.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The city for this location.
	City string `pulumi:"city"`
	// The continent for this location.
	Continent string `pulumi:"continent"`
	// A textual description of the resource.
	Description string `pulumi:"description"`
	// The name of the provider for this facility.
	FacilityProvider string `pulumi:"facilityProvider"`
	// A provider-assigned Identifier for this facility.
	FacilityProviderFacilityId string `pulumi:"facilityProviderFacilityId"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// The PeeringDB facility ID for this facility.
	PeeringdbFacilityId string `pulumi:"peeringdbFacilityId"`
	Project             string `pulumi:"project"`
	// The URI of the created resource.
	SelfLink string `pulumi:"selfLink"`
	// The status of this InterconnectLocation.
	Status string `pulumi:"status"`
}

func GetInterconnectLocationOutput(ctx *pulumi.Context, args GetInterconnectLocationOutputArgs, opts ...pulumi.InvokeOption) GetInterconnectLocationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetInterconnectLocationResultOutput, error) {
			args := v.(GetInterconnectLocationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:compute/getInterconnectLocation:getInterconnectLocation", args, GetInterconnectLocationResultOutput{}, options).(GetInterconnectLocationResultOutput), nil
		}).(GetInterconnectLocationResultOutput)
}

// A collection of arguments for invoking getInterconnectLocation.
type GetInterconnectLocationOutputArgs struct {
	// The name of the interconnect location.
	Name pulumi.StringInput `pulumi:"name"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (GetInterconnectLocationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterconnectLocationArgs)(nil)).Elem()
}

// A collection of values returned by getInterconnectLocation.
type GetInterconnectLocationResultOutput struct{ *pulumi.OutputState }

func (GetInterconnectLocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterconnectLocationResult)(nil)).Elem()
}

func (o GetInterconnectLocationResultOutput) ToGetInterconnectLocationResultOutput() GetInterconnectLocationResultOutput {
	return o
}

func (o GetInterconnectLocationResultOutput) ToGetInterconnectLocationResultOutputWithContext(ctx context.Context) GetInterconnectLocationResultOutput {
	return o
}

// The postal address of the Point of Presence.
func (o GetInterconnectLocationResultOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterconnectLocationResult) string { return v.Address }).(pulumi.StringOutput)
}

// The availability zone for this InterconnectLocation.
func (o GetInterconnectLocationResultOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterconnectLocationResult) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The city for this location.
func (o GetInterconnectLocationResultOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterconnectLocationResult) string { return v.City }).(pulumi.StringOutput)
}

// The continent for this location.
func (o GetInterconnectLocationResultOutput) Continent() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterconnectLocationResult) string { return v.Continent }).(pulumi.StringOutput)
}

// A textual description of the resource.
func (o GetInterconnectLocationResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterconnectLocationResult) string { return v.Description }).(pulumi.StringOutput)
}

// The name of the provider for this facility.
func (o GetInterconnectLocationResultOutput) FacilityProvider() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterconnectLocationResult) string { return v.FacilityProvider }).(pulumi.StringOutput)
}

// A provider-assigned Identifier for this facility.
func (o GetInterconnectLocationResultOutput) FacilityProviderFacilityId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterconnectLocationResult) string { return v.FacilityProviderFacilityId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetInterconnectLocationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterconnectLocationResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetInterconnectLocationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterconnectLocationResult) string { return v.Name }).(pulumi.StringOutput)
}

// The PeeringDB facility ID for this facility.
func (o GetInterconnectLocationResultOutput) PeeringdbFacilityId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterconnectLocationResult) string { return v.PeeringdbFacilityId }).(pulumi.StringOutput)
}

func (o GetInterconnectLocationResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterconnectLocationResult) string { return v.Project }).(pulumi.StringOutput)
}

// The URI of the created resource.
func (o GetInterconnectLocationResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterconnectLocationResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

// The status of this InterconnectLocation.
func (o GetInterconnectLocationResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterconnectLocationResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetInterconnectLocationResultOutput{})
}
