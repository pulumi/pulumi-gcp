// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Instance Settings Basic
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewInstanceSettings(ctx, "gce_instance_settings", &compute.InstanceSettingsArgs{
//				Zone: pulumi.String("us-east7-b"),
//				Metadata: &compute.InstanceSettingsMetadataArgs{
//					Items: pulumi.StringMap{
//						"foo": pulumi.String("baz"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// InstanceSettings can be imported using any of these accepted formats:
//
// * `projects/{{project}}/zones/{{zone}}/instanceSettings`
//
// * `{{project}}/{{zone}}`
//
// * `{{zone}}`
//
// When using the `pulumi import` command, InstanceSettings can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:compute/instanceSettings:InstanceSettings default projects/{{project}}/zones/{{zone}}/instanceSettings
// ```
//
// ```sh
// $ pulumi import gcp:compute/instanceSettings:InstanceSettings default {{project}}/{{zone}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/instanceSettings:InstanceSettings default {{zone}}
// ```
type InstanceSettings struct {
	pulumi.CustomResourceState

	// The fingerprint used for optimistic locking of this resource.  Used
	// internally during updates.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// The metadata key/value pairs assigned to all the instances in the corresponding scope.
	// Structure is documented below.
	Metadata InstanceSettingsMetadataPtrOutput `pulumi:"metadata"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// A reference to the zone where the machine resides.
	//
	// ***
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewInstanceSettings registers a new resource with the given unique name, arguments, and options.
func NewInstanceSettings(ctx *pulumi.Context,
	name string, args *InstanceSettingsArgs, opts ...pulumi.ResourceOption) (*InstanceSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstanceSettings
	err := ctx.RegisterResource("gcp:compute/instanceSettings:InstanceSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceSettings gets an existing InstanceSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceSettingsState, opts ...pulumi.ResourceOption) (*InstanceSettings, error) {
	var resource InstanceSettings
	err := ctx.ReadResource("gcp:compute/instanceSettings:InstanceSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceSettings resources.
type instanceSettingsState struct {
	// The fingerprint used for optimistic locking of this resource.  Used
	// internally during updates.
	Fingerprint *string `pulumi:"fingerprint"`
	// The metadata key/value pairs assigned to all the instances in the corresponding scope.
	// Structure is documented below.
	Metadata *InstanceSettingsMetadata `pulumi:"metadata"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A reference to the zone where the machine resides.
	//
	// ***
	Zone *string `pulumi:"zone"`
}

type InstanceSettingsState struct {
	// The fingerprint used for optimistic locking of this resource.  Used
	// internally during updates.
	Fingerprint pulumi.StringPtrInput
	// The metadata key/value pairs assigned to all the instances in the corresponding scope.
	// Structure is documented below.
	Metadata InstanceSettingsMetadataPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// A reference to the zone where the machine resides.
	//
	// ***
	Zone pulumi.StringPtrInput
}

func (InstanceSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceSettingsState)(nil)).Elem()
}

type instanceSettingsArgs struct {
	// The metadata key/value pairs assigned to all the instances in the corresponding scope.
	// Structure is documented below.
	Metadata *InstanceSettingsMetadata `pulumi:"metadata"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A reference to the zone where the machine resides.
	//
	// ***
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a InstanceSettings resource.
type InstanceSettingsArgs struct {
	// The metadata key/value pairs assigned to all the instances in the corresponding scope.
	// Structure is documented below.
	Metadata InstanceSettingsMetadataPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// A reference to the zone where the machine resides.
	//
	// ***
	Zone pulumi.StringInput
}

func (InstanceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceSettingsArgs)(nil)).Elem()
}

type InstanceSettingsInput interface {
	pulumi.Input

	ToInstanceSettingsOutput() InstanceSettingsOutput
	ToInstanceSettingsOutputWithContext(ctx context.Context) InstanceSettingsOutput
}

func (*InstanceSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSettings)(nil)).Elem()
}

func (i *InstanceSettings) ToInstanceSettingsOutput() InstanceSettingsOutput {
	return i.ToInstanceSettingsOutputWithContext(context.Background())
}

func (i *InstanceSettings) ToInstanceSettingsOutputWithContext(ctx context.Context) InstanceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSettingsOutput)
}

// InstanceSettingsArrayInput is an input type that accepts InstanceSettingsArray and InstanceSettingsArrayOutput values.
// You can construct a concrete instance of `InstanceSettingsArrayInput` via:
//
//	InstanceSettingsArray{ InstanceSettingsArgs{...} }
type InstanceSettingsArrayInput interface {
	pulumi.Input

	ToInstanceSettingsArrayOutput() InstanceSettingsArrayOutput
	ToInstanceSettingsArrayOutputWithContext(context.Context) InstanceSettingsArrayOutput
}

type InstanceSettingsArray []InstanceSettingsInput

func (InstanceSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceSettings)(nil)).Elem()
}

func (i InstanceSettingsArray) ToInstanceSettingsArrayOutput() InstanceSettingsArrayOutput {
	return i.ToInstanceSettingsArrayOutputWithContext(context.Background())
}

func (i InstanceSettingsArray) ToInstanceSettingsArrayOutputWithContext(ctx context.Context) InstanceSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSettingsArrayOutput)
}

// InstanceSettingsMapInput is an input type that accepts InstanceSettingsMap and InstanceSettingsMapOutput values.
// You can construct a concrete instance of `InstanceSettingsMapInput` via:
//
//	InstanceSettingsMap{ "key": InstanceSettingsArgs{...} }
type InstanceSettingsMapInput interface {
	pulumi.Input

	ToInstanceSettingsMapOutput() InstanceSettingsMapOutput
	ToInstanceSettingsMapOutputWithContext(context.Context) InstanceSettingsMapOutput
}

type InstanceSettingsMap map[string]InstanceSettingsInput

func (InstanceSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceSettings)(nil)).Elem()
}

func (i InstanceSettingsMap) ToInstanceSettingsMapOutput() InstanceSettingsMapOutput {
	return i.ToInstanceSettingsMapOutputWithContext(context.Background())
}

func (i InstanceSettingsMap) ToInstanceSettingsMapOutputWithContext(ctx context.Context) InstanceSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSettingsMapOutput)
}

type InstanceSettingsOutput struct{ *pulumi.OutputState }

func (InstanceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSettings)(nil)).Elem()
}

func (o InstanceSettingsOutput) ToInstanceSettingsOutput() InstanceSettingsOutput {
	return o
}

func (o InstanceSettingsOutput) ToInstanceSettingsOutputWithContext(ctx context.Context) InstanceSettingsOutput {
	return o
}

// The fingerprint used for optimistic locking of this resource.  Used
// internally during updates.
func (o InstanceSettingsOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSettings) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// The metadata key/value pairs assigned to all the instances in the corresponding scope.
// Structure is documented below.
func (o InstanceSettingsOutput) Metadata() InstanceSettingsMetadataPtrOutput {
	return o.ApplyT(func(v *InstanceSettings) InstanceSettingsMetadataPtrOutput { return v.Metadata }).(InstanceSettingsMetadataPtrOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o InstanceSettingsOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSettings) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A reference to the zone where the machine resides.
//
// ***
func (o InstanceSettingsOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSettings) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type InstanceSettingsArrayOutput struct{ *pulumi.OutputState }

func (InstanceSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceSettings)(nil)).Elem()
}

func (o InstanceSettingsArrayOutput) ToInstanceSettingsArrayOutput() InstanceSettingsArrayOutput {
	return o
}

func (o InstanceSettingsArrayOutput) ToInstanceSettingsArrayOutputWithContext(ctx context.Context) InstanceSettingsArrayOutput {
	return o
}

func (o InstanceSettingsArrayOutput) Index(i pulumi.IntInput) InstanceSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceSettings {
		return vs[0].([]*InstanceSettings)[vs[1].(int)]
	}).(InstanceSettingsOutput)
}

type InstanceSettingsMapOutput struct{ *pulumi.OutputState }

func (InstanceSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceSettings)(nil)).Elem()
}

func (o InstanceSettingsMapOutput) ToInstanceSettingsMapOutput() InstanceSettingsMapOutput {
	return o
}

func (o InstanceSettingsMapOutput) ToInstanceSettingsMapOutputWithContext(ctx context.Context) InstanceSettingsMapOutput {
	return o
}

func (o InstanceSettingsMapOutput) MapIndex(k pulumi.StringInput) InstanceSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceSettings {
		return vs[0].(map[string]*InstanceSettings)[vs[1].(string)]
	}).(InstanceSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSettingsInput)(nil)).Elem(), &InstanceSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSettingsArrayInput)(nil)).Elem(), InstanceSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSettingsMapInput)(nil)).Elem(), InstanceSettingsMap{})
	pulumi.RegisterOutputType(InstanceSettingsOutput{})
	pulumi.RegisterOutputType(InstanceSettingsArrayOutput{})
	pulumi.RegisterOutputType(InstanceSettingsMapOutput{})
}
