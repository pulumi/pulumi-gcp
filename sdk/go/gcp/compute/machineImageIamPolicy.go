// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Three different resources help you manage your IAM policy for Compute Engine MachineImage. Each of these resources serves a different use case:
//
// * `compute.MachineImageIamPolicy`: Authoritative. Sets the IAM policy for the machineimage and replaces any existing policy already attached.
// * `compute.MachineImageIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the machineimage are preserved.
// * `compute.MachineImageIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the machineimage are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `compute.MachineImageIamPolicy`: Retrieves the IAM policy for the machineimage
//
// > **Note:** `compute.MachineImageIamPolicy` **cannot** be used in conjunction with `compute.MachineImageIamBinding` and `compute.MachineImageIamMember` or they will fight over what your policy should be.
//
// > **Note:** `compute.MachineImageIamBinding` resources **can be** used in conjunction with `compute.MachineImageIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/global/machineImages/{{name}} * {{project}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Compute Engine machineimage IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:compute/machineImageIamPolicy:MachineImageIamPolicy editor "projects/{{project}}/global/machineImages/{{machine_image}} roles/compute.admin user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:compute/machineImageIamPolicy:MachineImageIamPolicy editor "projects/{{project}}/global/machineImages/{{machine_image}} roles/compute.admin"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:compute/machineImageIamPolicy:MachineImageIamPolicy editor projects/{{project}}/global/machineImages/{{machine_image}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type MachineImageIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	MachineImage pulumi.StringOutput `pulumi:"machineImage"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewMachineImageIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewMachineImageIamPolicy(ctx *pulumi.Context,
	name string, args *MachineImageIamPolicyArgs, opts ...pulumi.ResourceOption) (*MachineImageIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MachineImage == nil {
		return nil, errors.New("invalid value for required argument 'MachineImage'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MachineImageIamPolicy
	err := ctx.RegisterResource("gcp:compute/machineImageIamPolicy:MachineImageIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMachineImageIamPolicy gets an existing MachineImageIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMachineImageIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MachineImageIamPolicyState, opts ...pulumi.ResourceOption) (*MachineImageIamPolicy, error) {
	var resource MachineImageIamPolicy
	err := ctx.ReadResource("gcp:compute/machineImageIamPolicy:MachineImageIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MachineImageIamPolicy resources.
type machineImageIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	MachineImage *string `pulumi:"machineImage"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
}

type MachineImageIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	MachineImage pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
}

func (MachineImageIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*machineImageIamPolicyState)(nil)).Elem()
}

type machineImageIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	MachineImage string `pulumi:"machineImage"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a MachineImageIamPolicy resource.
type MachineImageIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	MachineImage pulumi.StringInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
}

func (MachineImageIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*machineImageIamPolicyArgs)(nil)).Elem()
}

type MachineImageIamPolicyInput interface {
	pulumi.Input

	ToMachineImageIamPolicyOutput() MachineImageIamPolicyOutput
	ToMachineImageIamPolicyOutputWithContext(ctx context.Context) MachineImageIamPolicyOutput
}

func (*MachineImageIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineImageIamPolicy)(nil)).Elem()
}

func (i *MachineImageIamPolicy) ToMachineImageIamPolicyOutput() MachineImageIamPolicyOutput {
	return i.ToMachineImageIamPolicyOutputWithContext(context.Background())
}

func (i *MachineImageIamPolicy) ToMachineImageIamPolicyOutputWithContext(ctx context.Context) MachineImageIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineImageIamPolicyOutput)
}

func (i *MachineImageIamPolicy) ToOutput(ctx context.Context) pulumix.Output[*MachineImageIamPolicy] {
	return pulumix.Output[*MachineImageIamPolicy]{
		OutputState: i.ToMachineImageIamPolicyOutputWithContext(ctx).OutputState,
	}
}

// MachineImageIamPolicyArrayInput is an input type that accepts MachineImageIamPolicyArray and MachineImageIamPolicyArrayOutput values.
// You can construct a concrete instance of `MachineImageIamPolicyArrayInput` via:
//
//	MachineImageIamPolicyArray{ MachineImageIamPolicyArgs{...} }
type MachineImageIamPolicyArrayInput interface {
	pulumi.Input

	ToMachineImageIamPolicyArrayOutput() MachineImageIamPolicyArrayOutput
	ToMachineImageIamPolicyArrayOutputWithContext(context.Context) MachineImageIamPolicyArrayOutput
}

type MachineImageIamPolicyArray []MachineImageIamPolicyInput

func (MachineImageIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MachineImageIamPolicy)(nil)).Elem()
}

func (i MachineImageIamPolicyArray) ToMachineImageIamPolicyArrayOutput() MachineImageIamPolicyArrayOutput {
	return i.ToMachineImageIamPolicyArrayOutputWithContext(context.Background())
}

func (i MachineImageIamPolicyArray) ToMachineImageIamPolicyArrayOutputWithContext(ctx context.Context) MachineImageIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineImageIamPolicyArrayOutput)
}

func (i MachineImageIamPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]*MachineImageIamPolicy] {
	return pulumix.Output[[]*MachineImageIamPolicy]{
		OutputState: i.ToMachineImageIamPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

// MachineImageIamPolicyMapInput is an input type that accepts MachineImageIamPolicyMap and MachineImageIamPolicyMapOutput values.
// You can construct a concrete instance of `MachineImageIamPolicyMapInput` via:
//
//	MachineImageIamPolicyMap{ "key": MachineImageIamPolicyArgs{...} }
type MachineImageIamPolicyMapInput interface {
	pulumi.Input

	ToMachineImageIamPolicyMapOutput() MachineImageIamPolicyMapOutput
	ToMachineImageIamPolicyMapOutputWithContext(context.Context) MachineImageIamPolicyMapOutput
}

type MachineImageIamPolicyMap map[string]MachineImageIamPolicyInput

func (MachineImageIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MachineImageIamPolicy)(nil)).Elem()
}

func (i MachineImageIamPolicyMap) ToMachineImageIamPolicyMapOutput() MachineImageIamPolicyMapOutput {
	return i.ToMachineImageIamPolicyMapOutputWithContext(context.Background())
}

func (i MachineImageIamPolicyMap) ToMachineImageIamPolicyMapOutputWithContext(ctx context.Context) MachineImageIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineImageIamPolicyMapOutput)
}

func (i MachineImageIamPolicyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*MachineImageIamPolicy] {
	return pulumix.Output[map[string]*MachineImageIamPolicy]{
		OutputState: i.ToMachineImageIamPolicyMapOutputWithContext(ctx).OutputState,
	}
}

type MachineImageIamPolicyOutput struct{ *pulumi.OutputState }

func (MachineImageIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineImageIamPolicy)(nil)).Elem()
}

func (o MachineImageIamPolicyOutput) ToMachineImageIamPolicyOutput() MachineImageIamPolicyOutput {
	return o
}

func (o MachineImageIamPolicyOutput) ToMachineImageIamPolicyOutputWithContext(ctx context.Context) MachineImageIamPolicyOutput {
	return o
}

func (o MachineImageIamPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*MachineImageIamPolicy] {
	return pulumix.Output[*MachineImageIamPolicy]{
		OutputState: o.OutputState,
	}
}

// (Computed) The etag of the IAM policy.
func (o MachineImageIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *MachineImageIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o MachineImageIamPolicyOutput) MachineImage() pulumi.StringOutput {
	return o.ApplyT(func(v *MachineImageIamPolicy) pulumi.StringOutput { return v.MachineImage }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o MachineImageIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *MachineImageIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o MachineImageIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MachineImageIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type MachineImageIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (MachineImageIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MachineImageIamPolicy)(nil)).Elem()
}

func (o MachineImageIamPolicyArrayOutput) ToMachineImageIamPolicyArrayOutput() MachineImageIamPolicyArrayOutput {
	return o
}

func (o MachineImageIamPolicyArrayOutput) ToMachineImageIamPolicyArrayOutputWithContext(ctx context.Context) MachineImageIamPolicyArrayOutput {
	return o
}

func (o MachineImageIamPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*MachineImageIamPolicy] {
	return pulumix.Output[[]*MachineImageIamPolicy]{
		OutputState: o.OutputState,
	}
}

func (o MachineImageIamPolicyArrayOutput) Index(i pulumi.IntInput) MachineImageIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MachineImageIamPolicy {
		return vs[0].([]*MachineImageIamPolicy)[vs[1].(int)]
	}).(MachineImageIamPolicyOutput)
}

type MachineImageIamPolicyMapOutput struct{ *pulumi.OutputState }

func (MachineImageIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MachineImageIamPolicy)(nil)).Elem()
}

func (o MachineImageIamPolicyMapOutput) ToMachineImageIamPolicyMapOutput() MachineImageIamPolicyMapOutput {
	return o
}

func (o MachineImageIamPolicyMapOutput) ToMachineImageIamPolicyMapOutputWithContext(ctx context.Context) MachineImageIamPolicyMapOutput {
	return o
}

func (o MachineImageIamPolicyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*MachineImageIamPolicy] {
	return pulumix.Output[map[string]*MachineImageIamPolicy]{
		OutputState: o.OutputState,
	}
}

func (o MachineImageIamPolicyMapOutput) MapIndex(k pulumi.StringInput) MachineImageIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MachineImageIamPolicy {
		return vs[0].(map[string]*MachineImageIamPolicy)[vs[1].(string)]
	}).(MachineImageIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MachineImageIamPolicyInput)(nil)).Elem(), &MachineImageIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineImageIamPolicyArrayInput)(nil)).Elem(), MachineImageIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineImageIamPolicyMapInput)(nil)).Elem(), MachineImageIamPolicyMap{})
	pulumi.RegisterOutputType(MachineImageIamPolicyOutput{})
	pulumi.RegisterOutputType(MachineImageIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(MachineImageIamPolicyMapOutput{})
}
