// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Forwarding Rule within GCE. This binds an ip and port range to a target pool. For more
// information see [the official
// documentation](https://cloud.google.com/compute/docs/load-balancing/network/forwarding-rules) and
// [API](https://cloud.google.com/compute/docs/reference/latest/forwardingRules).
type ForwardingRule struct {
	s *pulumi.ResourceState
}

// NewForwardingRule registers a new resource with the given unique name, arguments, and options.
func NewForwardingRule(ctx *pulumi.Context,
	name string, args *ForwardingRuleArgs, opts ...pulumi.ResourceOpt) (*ForwardingRule, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backendService"] = nil
		inputs["description"] = nil
		inputs["ipAddress"] = nil
		inputs["ipProtocol"] = nil
		inputs["loadBalancingScheme"] = nil
		inputs["name"] = nil
		inputs["network"] = nil
		inputs["portRange"] = nil
		inputs["ports"] = nil
		inputs["project"] = nil
		inputs["region"] = nil
		inputs["subnetwork"] = nil
		inputs["target"] = nil
	} else {
		inputs["backendService"] = args.BackendService
		inputs["description"] = args.Description
		inputs["ipAddress"] = args.IpAddress
		inputs["ipProtocol"] = args.IpProtocol
		inputs["loadBalancingScheme"] = args.LoadBalancingScheme
		inputs["name"] = args.Name
		inputs["network"] = args.Network
		inputs["portRange"] = args.PortRange
		inputs["ports"] = args.Ports
		inputs["project"] = args.Project
		inputs["region"] = args.Region
		inputs["subnetwork"] = args.Subnetwork
		inputs["target"] = args.Target
	}
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/forwardingRule:ForwardingRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ForwardingRule{s: s}, nil
}

// GetForwardingRule gets an existing ForwardingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetForwardingRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ForwardingRuleState, opts ...pulumi.ResourceOpt) (*ForwardingRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backendService"] = state.BackendService
		inputs["description"] = state.Description
		inputs["ipAddress"] = state.IpAddress
		inputs["ipProtocol"] = state.IpProtocol
		inputs["loadBalancingScheme"] = state.LoadBalancingScheme
		inputs["name"] = state.Name
		inputs["network"] = state.Network
		inputs["portRange"] = state.PortRange
		inputs["ports"] = state.Ports
		inputs["project"] = state.Project
		inputs["region"] = state.Region
		inputs["selfLink"] = state.SelfLink
		inputs["subnetwork"] = state.Subnetwork
		inputs["target"] = state.Target
	}
	s, err := ctx.ReadResource("gcp:compute/forwardingRule:ForwardingRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ForwardingRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ForwardingRule) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ForwardingRule) ID() *pulumi.IDOutput {
	return r.s.ID
}

// BackendService resource to receive the
// matched traffic. Only used for internal load balancing.
func (r *ForwardingRule) BackendService() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["backendService"])
}

// Textual description field.
func (r *ForwardingRule) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The static IP. (if not set, an ephemeral IP is
// used).
func (r *ForwardingRule) IpAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipAddress"])
}

// The IP protocol to route, one of "TCP" "UDP" "AH"
// "ESP" or "SCTP" for external load balancing, "TCP" or "UDP" for internal
// (default "TCP").
func (r *ForwardingRule) IpProtocol() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipProtocol"])
}

// Type of load balancing to use. Can be
// set to "INTERNAL" or "EXTERNAL" (default "EXTERNAL").
func (r *ForwardingRule) LoadBalancingScheme() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loadBalancingScheme"])
}

// A unique name for the resource, required by GCE. Changing
// this forces a new resource to be created.
func (r *ForwardingRule) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Network name or self_link that the load balanced IP
// should belong to. Only used for internal load balancing. If it is not
// provided, the default network is used.
func (r *ForwardingRule) Network() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["network"])
}

// A range e.g. "1024-2048" or a single port "1024"
// (defaults to all ports!). Only used for external load balancing.
// Some types of forwarding targets have constraints on the acceptable ports:
// * Target HTTP proxy: 80, 8080
// * Target HTTPS proxy: 443
// * Target TCP proxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1883, 5222
// * Target SSL proxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1883, 5222
// * Target VPN gateway: 500, 4500
func (r *ForwardingRule) PortRange() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["portRange"])
}

// A list of ports (maximum of 5) to use for internal load
// balancing. Packets addressed to these ports will be forwarded to the backends
// configured with this forwarding rule. Required for internal load balancing.
func (r *ForwardingRule) Ports() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["ports"])
}

// The ID of project in which the resource belongs. If it
// is not provided, the provider project is used.
func (r *ForwardingRule) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The Region in which the created address should reside.
// If it is not provided, the provider region is used.
func (r *ForwardingRule) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The URI of the created resource.
func (r *ForwardingRule) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// Subnetwork that the load balanced IP should belong
// to. Only used for internal load balancing. Must be specified if the network
// is in custom subnet mode.
func (r *ForwardingRule) Subnetwork() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subnetwork"])
}

// URL of target pool. Required for external load
// balancing.
func (r *ForwardingRule) Target() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["target"])
}

// Input properties used for looking up and filtering ForwardingRule resources.
type ForwardingRuleState struct {
	// BackendService resource to receive the
	// matched traffic. Only used for internal load balancing.
	BackendService interface{}
	// Textual description field.
	Description interface{}
	// The static IP. (if not set, an ephemeral IP is
	// used).
	IpAddress interface{}
	// The IP protocol to route, one of "TCP" "UDP" "AH"
	// "ESP" or "SCTP" for external load balancing, "TCP" or "UDP" for internal
	// (default "TCP").
	IpProtocol interface{}
	// Type of load balancing to use. Can be
	// set to "INTERNAL" or "EXTERNAL" (default "EXTERNAL").
	LoadBalancingScheme interface{}
	// A unique name for the resource, required by GCE. Changing
	// this forces a new resource to be created.
	Name interface{}
	// Network name or self_link that the load balanced IP
	// should belong to. Only used for internal load balancing. If it is not
	// provided, the default network is used.
	Network interface{}
	// A range e.g. "1024-2048" or a single port "1024"
	// (defaults to all ports!). Only used for external load balancing.
	// Some types of forwarding targets have constraints on the acceptable ports:
	// * Target HTTP proxy: 80, 8080
	// * Target HTTPS proxy: 443
	// * Target TCP proxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1883, 5222
	// * Target SSL proxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1883, 5222
	// * Target VPN gateway: 500, 4500
	PortRange interface{}
	// A list of ports (maximum of 5) to use for internal load
	// balancing. Packets addressed to these ports will be forwarded to the backends
	// configured with this forwarding rule. Required for internal load balancing.
	Ports interface{}
	// The ID of project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// The Region in which the created address should reside.
	// If it is not provided, the provider region is used.
	Region interface{}
	// The URI of the created resource.
	SelfLink interface{}
	// Subnetwork that the load balanced IP should belong
	// to. Only used for internal load balancing. Must be specified if the network
	// is in custom subnet mode.
	Subnetwork interface{}
	// URL of target pool. Required for external load
	// balancing.
	Target interface{}
}

// The set of arguments for constructing a ForwardingRule resource.
type ForwardingRuleArgs struct {
	// BackendService resource to receive the
	// matched traffic. Only used for internal load balancing.
	BackendService interface{}
	// Textual description field.
	Description interface{}
	// The static IP. (if not set, an ephemeral IP is
	// used).
	IpAddress interface{}
	// The IP protocol to route, one of "TCP" "UDP" "AH"
	// "ESP" or "SCTP" for external load balancing, "TCP" or "UDP" for internal
	// (default "TCP").
	IpProtocol interface{}
	// Type of load balancing to use. Can be
	// set to "INTERNAL" or "EXTERNAL" (default "EXTERNAL").
	LoadBalancingScheme interface{}
	// A unique name for the resource, required by GCE. Changing
	// this forces a new resource to be created.
	Name interface{}
	// Network name or self_link that the load balanced IP
	// should belong to. Only used for internal load balancing. If it is not
	// provided, the default network is used.
	Network interface{}
	// A range e.g. "1024-2048" or a single port "1024"
	// (defaults to all ports!). Only used for external load balancing.
	// Some types of forwarding targets have constraints on the acceptable ports:
	// * Target HTTP proxy: 80, 8080
	// * Target HTTPS proxy: 443
	// * Target TCP proxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1883, 5222
	// * Target SSL proxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1883, 5222
	// * Target VPN gateway: 500, 4500
	PortRange interface{}
	// A list of ports (maximum of 5) to use for internal load
	// balancing. Packets addressed to these ports will be forwarded to the backends
	// configured with this forwarding rule. Required for internal load balancing.
	Ports interface{}
	// The ID of project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// The Region in which the created address should reside.
	// If it is not provided, the provider region is used.
	Region interface{}
	// Subnetwork that the load balanced IP should belong
	// to. Only used for internal load balancing. Must be specified if the network
	// is in custom subnet mode.
	Subnetwork interface{}
	// URL of target pool. Required for external load
	// balancing.
	Target interface{}
}
