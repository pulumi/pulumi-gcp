// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A NAT service created in a router.
//
// To get more information about RouterNat, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/routers)
// * How-to Guides
//   - [Google Cloud Router](https://cloud.google.com/router/docs/)
//
// ## Example Usage
// ### Router Nat Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			net, err := compute.NewNetwork(ctx, "net", nil)
//			if err != nil {
//				return err
//			}
//			subnet, err := compute.NewSubnetwork(ctx, "subnet", &compute.SubnetworkArgs{
//				Network:     net.ID(),
//				IpCidrRange: pulumi.String("10.0.0.0/16"),
//				Region:      pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			router, err := compute.NewRouter(ctx, "router", &compute.RouterArgs{
//				Region:  subnet.Region,
//				Network: net.ID(),
//				Bgp: &compute.RouterBgpArgs{
//					Asn: pulumi.Int(64514),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRouterNat(ctx, "nat", &compute.RouterNatArgs{
//				Router:                        router.Name,
//				Region:                        router.Region,
//				NatIpAllocateOption:           pulumi.String("AUTO_ONLY"),
//				SourceSubnetworkIpRangesToNat: pulumi.String("ALL_SUBNETWORKS_ALL_IP_RANGES"),
//				LogConfig: &compute.RouterNatLogConfigArgs{
//					Enable: pulumi.Bool(true),
//					Filter: pulumi.String("ERRORS_ONLY"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Router Nat Manual Ips
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			net, err := compute.NewNetwork(ctx, "net", nil)
//			if err != nil {
//				return err
//			}
//			subnet, err := compute.NewSubnetwork(ctx, "subnet", &compute.SubnetworkArgs{
//				Network:     net.ID(),
//				IpCidrRange: pulumi.String("10.0.0.0/16"),
//				Region:      pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			router, err := compute.NewRouter(ctx, "router", &compute.RouterArgs{
//				Region:  subnet.Region,
//				Network: net.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			var address []*compute.Address
//			for index := 0; index < 2; index++ {
//				key0 := index
//				_ := index
//				__res, err := compute.NewAddress(ctx, fmt.Sprintf("address-%v", key0), &compute.AddressArgs{
//					Region: subnet.Region,
//				})
//				if err != nil {
//					return err
//				}
//				address = append(address, __res)
//			}
//			var splat0 pulumi.StringArray
//			for _, val0 := range address {
//				splat0 = append(splat0, val0.SelfLink)
//			}
//			_, err = compute.NewRouterNat(ctx, "natManual", &compute.RouterNatArgs{
//				Router:                        router.Name,
//				Region:                        router.Region,
//				NatIpAllocateOption:           pulumi.String("MANUAL_ONLY"),
//				NatIps:                        splat0,
//				SourceSubnetworkIpRangesToNat: pulumi.String("LIST_OF_SUBNETWORKS"),
//				Subnetworks: compute.RouterNatSubnetworkArray{
//					&compute.RouterNatSubnetworkArgs{
//						Name: subnet.ID(),
//						SourceIpRangesToNats: pulumi.StringArray{
//							pulumi.String("ALL_IP_RANGES"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Router Nat Rules
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			net, err := compute.NewNetwork(ctx, "net", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := compute.NewSubnetwork(ctx, "subnet", &compute.SubnetworkArgs{
//				Network:     net.ID(),
//				IpCidrRange: pulumi.String("10.0.0.0/16"),
//				Region:      pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			router, err := compute.NewRouter(ctx, "router", &compute.RouterArgs{
//				Region:  subnet.Region,
//				Network: net.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			addr1, err := compute.NewAddress(ctx, "addr1", &compute.AddressArgs{
//				Region: subnet.Region,
//			})
//			if err != nil {
//				return err
//			}
//			addr2, err := compute.NewAddress(ctx, "addr2", &compute.AddressArgs{
//				Region: subnet.Region,
//			})
//			if err != nil {
//				return err
//			}
//			addr3, err := compute.NewAddress(ctx, "addr3", &compute.AddressArgs{
//				Region: subnet.Region,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRouterNat(ctx, "natRules", &compute.RouterNatArgs{
//				Router:              router.Name,
//				Region:              router.Region,
//				NatIpAllocateOption: pulumi.String("MANUAL_ONLY"),
//				NatIps: pulumi.StringArray{
//					addr1.SelfLink,
//				},
//				SourceSubnetworkIpRangesToNat: pulumi.String("LIST_OF_SUBNETWORKS"),
//				Subnetworks: compute.RouterNatSubnetworkArray{
//					&compute.RouterNatSubnetworkArgs{
//						Name: subnet.ID(),
//						SourceIpRangesToNats: pulumi.StringArray{
//							pulumi.String("ALL_IP_RANGES"),
//						},
//					},
//				},
//				Rules: compute.RouterNatRuleArray{
//					&compute.RouterNatRuleArgs{
//						RuleNumber:  pulumi.Int(100),
//						Description: pulumi.String("nat rules example"),
//						Match:       pulumi.String("inIpRange(destination.ip, '1.1.0.0/16') || inIpRange(destination.ip, '2.2.0.0/16')"),
//						Action: &compute.RouterNatRuleActionArgs{
//							SourceNatActiveIps: pulumi.StringArray{
//								addr2.SelfLink,
//								addr3.SelfLink,
//							},
//						},
//					},
//				},
//				EnableEndpointIndependentMapping: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # RouterNat can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:compute/routerNat:RouterNat default projects/{{project}}/regions/{{region}}/routers/{{router}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/routerNat:RouterNat default {{project}}/{{region}}/{{router}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/routerNat:RouterNat default {{region}}/{{router}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/routerNat:RouterNat default {{router}}/{{name}}
//
// ```
type RouterNat struct {
	pulumi.CustomResourceState

	// A list of URLs of the IP resources to be drained. These IPs must be
	// valid static external IPs that have been assigned to the NAT.
	DrainNatIps pulumi.StringArrayOutput `pulumi:"drainNatIps"`
	// Enable Dynamic Port Allocation.
	// If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or equal to 32.
	// If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config.
	// If maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm.
	// If maxPortsPerVm is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
	// Mutually exclusive with enableEndpointIndependentMapping.
	EnableDynamicPortAllocation pulumi.BoolOutput `pulumi:"enableDynamicPortAllocation"`
	// Specifies if endpoint independent mapping is enabled. This is enabled by default. For more information
	// see the [official documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).
	EnableEndpointIndependentMapping pulumi.BoolPtrOutput `pulumi:"enableEndpointIndependentMapping"`
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	IcmpIdleTimeoutSec pulumi.IntPtrOutput `pulumi:"icmpIdleTimeoutSec"`
	// Configuration for logging on NAT
	// Structure is documented below.
	LogConfig RouterNatLogConfigPtrOutput `pulumi:"logConfig"`
	// Maximum number of ports allocated to a VM from this NAT.
	// This field can only be set when enableDynamicPortAllocation is enabled.
	MaxPortsPerVm pulumi.IntPtrOutput `pulumi:"maxPortsPerVm"`
	// Minimum number of ports allocated to a VM from this NAT.
	MinPortsPerVm pulumi.IntPtrOutput `pulumi:"minPortsPerVm"`
	// Name of the NAT service. The name must be 1-63 characters long and
	// comply with RFC1035.
	Name pulumi.StringOutput `pulumi:"name"`
	// How external IPs should be allocated for this NAT. Valid values are
	// `AUTO_ONLY` for only allowing NAT IPs allocated by Google Cloud
	// Platform, or `MANUAL_ONLY` for only user-allocated NAT IP addresses.
	// Possible values are: `MANUAL_ONLY`, `AUTO_ONLY`.
	NatIpAllocateOption pulumi.StringOutput `pulumi:"natIpAllocateOption"`
	// Self-links of NAT IPs. Only valid if natIpAllocateOption
	// is set to MANUAL_ONLY.
	NatIps pulumi.StringArrayOutput `pulumi:"natIps"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Region where the router and NAT reside.
	Region pulumi.StringOutput `pulumi:"region"`
	// The name of the Cloud Router in which this NAT will be configured.
	//
	// ***
	Router pulumi.StringOutput `pulumi:"router"`
	// A list of rules associated with this NAT.
	// Structure is documented below.
	Rules RouterNatRuleArrayOutput `pulumi:"rules"`
	// How NAT should be configured per Subnetwork.
	// If `ALL_SUBNETWORKS_ALL_IP_RANGES`, all of the
	// IP ranges in every Subnetwork are allowed to Nat.
	// If `ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES`, all of the primary IP
	// ranges in every Subnetwork are allowed to Nat.
	// `LIST_OF_SUBNETWORKS`: A list of Subnetworks are allowed to Nat
	// (specified in the field subnetwork below). Note that if this field
	// contains ALL_SUBNETWORKS_ALL_IP_RANGES or
	// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any
	// other RouterNat section in any Router for this network in this region.
	// Possible values are: `ALL_SUBNETWORKS_ALL_IP_RANGES`, `ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES`, `LIST_OF_SUBNETWORKS`.
	SourceSubnetworkIpRangesToNat pulumi.StringOutput `pulumi:"sourceSubnetworkIpRangesToNat"`
	// One or more subnetwork NAT configurations. Only used if
	// `sourceSubnetworkIpRangesToNat` is set to `LIST_OF_SUBNETWORKS`
	// Structure is documented below.
	Subnetworks RouterNatSubnetworkArrayOutput `pulumi:"subnetworks"`
	// Timeout (in seconds) for TCP established connections.
	// Defaults to 1200s if not set.
	TcpEstablishedIdleTimeoutSec pulumi.IntPtrOutput `pulumi:"tcpEstablishedIdleTimeoutSec"`
	// Timeout (in seconds) for TCP connections that are in TIME_WAIT state.
	// Defaults to 120s if not set.
	TcpTimeWaitTimeoutSec pulumi.IntPtrOutput `pulumi:"tcpTimeWaitTimeoutSec"`
	// Timeout (in seconds) for TCP transitory connections.
	// Defaults to 30s if not set.
	TcpTransitoryIdleTimeoutSec pulumi.IntPtrOutput `pulumi:"tcpTransitoryIdleTimeoutSec"`
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	UdpIdleTimeoutSec pulumi.IntPtrOutput `pulumi:"udpIdleTimeoutSec"`
}

// NewRouterNat registers a new resource with the given unique name, arguments, and options.
func NewRouterNat(ctx *pulumi.Context,
	name string, args *RouterNatArgs, opts ...pulumi.ResourceOption) (*RouterNat, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NatIpAllocateOption == nil {
		return nil, errors.New("invalid value for required argument 'NatIpAllocateOption'")
	}
	if args.Router == nil {
		return nil, errors.New("invalid value for required argument 'Router'")
	}
	if args.SourceSubnetworkIpRangesToNat == nil {
		return nil, errors.New("invalid value for required argument 'SourceSubnetworkIpRangesToNat'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouterNat
	err := ctx.RegisterResource("gcp:compute/routerNat:RouterNat", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterNat gets an existing RouterNat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterNat(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterNatState, opts ...pulumi.ResourceOption) (*RouterNat, error) {
	var resource RouterNat
	err := ctx.ReadResource("gcp:compute/routerNat:RouterNat", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterNat resources.
type routerNatState struct {
	// A list of URLs of the IP resources to be drained. These IPs must be
	// valid static external IPs that have been assigned to the NAT.
	DrainNatIps []string `pulumi:"drainNatIps"`
	// Enable Dynamic Port Allocation.
	// If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or equal to 32.
	// If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config.
	// If maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm.
	// If maxPortsPerVm is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
	// Mutually exclusive with enableEndpointIndependentMapping.
	EnableDynamicPortAllocation *bool `pulumi:"enableDynamicPortAllocation"`
	// Specifies if endpoint independent mapping is enabled. This is enabled by default. For more information
	// see the [official documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).
	EnableEndpointIndependentMapping *bool `pulumi:"enableEndpointIndependentMapping"`
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	IcmpIdleTimeoutSec *int `pulumi:"icmpIdleTimeoutSec"`
	// Configuration for logging on NAT
	// Structure is documented below.
	LogConfig *RouterNatLogConfig `pulumi:"logConfig"`
	// Maximum number of ports allocated to a VM from this NAT.
	// This field can only be set when enableDynamicPortAllocation is enabled.
	MaxPortsPerVm *int `pulumi:"maxPortsPerVm"`
	// Minimum number of ports allocated to a VM from this NAT.
	MinPortsPerVm *int `pulumi:"minPortsPerVm"`
	// Name of the NAT service. The name must be 1-63 characters long and
	// comply with RFC1035.
	Name *string `pulumi:"name"`
	// How external IPs should be allocated for this NAT. Valid values are
	// `AUTO_ONLY` for only allowing NAT IPs allocated by Google Cloud
	// Platform, or `MANUAL_ONLY` for only user-allocated NAT IP addresses.
	// Possible values are: `MANUAL_ONLY`, `AUTO_ONLY`.
	NatIpAllocateOption *string `pulumi:"natIpAllocateOption"`
	// Self-links of NAT IPs. Only valid if natIpAllocateOption
	// is set to MANUAL_ONLY.
	NatIps []string `pulumi:"natIps"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Region where the router and NAT reside.
	Region *string `pulumi:"region"`
	// The name of the Cloud Router in which this NAT will be configured.
	//
	// ***
	Router *string `pulumi:"router"`
	// A list of rules associated with this NAT.
	// Structure is documented below.
	Rules []RouterNatRule `pulumi:"rules"`
	// How NAT should be configured per Subnetwork.
	// If `ALL_SUBNETWORKS_ALL_IP_RANGES`, all of the
	// IP ranges in every Subnetwork are allowed to Nat.
	// If `ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES`, all of the primary IP
	// ranges in every Subnetwork are allowed to Nat.
	// `LIST_OF_SUBNETWORKS`: A list of Subnetworks are allowed to Nat
	// (specified in the field subnetwork below). Note that if this field
	// contains ALL_SUBNETWORKS_ALL_IP_RANGES or
	// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any
	// other RouterNat section in any Router for this network in this region.
	// Possible values are: `ALL_SUBNETWORKS_ALL_IP_RANGES`, `ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES`, `LIST_OF_SUBNETWORKS`.
	SourceSubnetworkIpRangesToNat *string `pulumi:"sourceSubnetworkIpRangesToNat"`
	// One or more subnetwork NAT configurations. Only used if
	// `sourceSubnetworkIpRangesToNat` is set to `LIST_OF_SUBNETWORKS`
	// Structure is documented below.
	Subnetworks []RouterNatSubnetwork `pulumi:"subnetworks"`
	// Timeout (in seconds) for TCP established connections.
	// Defaults to 1200s if not set.
	TcpEstablishedIdleTimeoutSec *int `pulumi:"tcpEstablishedIdleTimeoutSec"`
	// Timeout (in seconds) for TCP connections that are in TIME_WAIT state.
	// Defaults to 120s if not set.
	TcpTimeWaitTimeoutSec *int `pulumi:"tcpTimeWaitTimeoutSec"`
	// Timeout (in seconds) for TCP transitory connections.
	// Defaults to 30s if not set.
	TcpTransitoryIdleTimeoutSec *int `pulumi:"tcpTransitoryIdleTimeoutSec"`
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	UdpIdleTimeoutSec *int `pulumi:"udpIdleTimeoutSec"`
}

type RouterNatState struct {
	// A list of URLs of the IP resources to be drained. These IPs must be
	// valid static external IPs that have been assigned to the NAT.
	DrainNatIps pulumi.StringArrayInput
	// Enable Dynamic Port Allocation.
	// If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or equal to 32.
	// If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config.
	// If maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm.
	// If maxPortsPerVm is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
	// Mutually exclusive with enableEndpointIndependentMapping.
	EnableDynamicPortAllocation pulumi.BoolPtrInput
	// Specifies if endpoint independent mapping is enabled. This is enabled by default. For more information
	// see the [official documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).
	EnableEndpointIndependentMapping pulumi.BoolPtrInput
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	IcmpIdleTimeoutSec pulumi.IntPtrInput
	// Configuration for logging on NAT
	// Structure is documented below.
	LogConfig RouterNatLogConfigPtrInput
	// Maximum number of ports allocated to a VM from this NAT.
	// This field can only be set when enableDynamicPortAllocation is enabled.
	MaxPortsPerVm pulumi.IntPtrInput
	// Minimum number of ports allocated to a VM from this NAT.
	MinPortsPerVm pulumi.IntPtrInput
	// Name of the NAT service. The name must be 1-63 characters long and
	// comply with RFC1035.
	Name pulumi.StringPtrInput
	// How external IPs should be allocated for this NAT. Valid values are
	// `AUTO_ONLY` for only allowing NAT IPs allocated by Google Cloud
	// Platform, or `MANUAL_ONLY` for only user-allocated NAT IP addresses.
	// Possible values are: `MANUAL_ONLY`, `AUTO_ONLY`.
	NatIpAllocateOption pulumi.StringPtrInput
	// Self-links of NAT IPs. Only valid if natIpAllocateOption
	// is set to MANUAL_ONLY.
	NatIps pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Region where the router and NAT reside.
	Region pulumi.StringPtrInput
	// The name of the Cloud Router in which this NAT will be configured.
	//
	// ***
	Router pulumi.StringPtrInput
	// A list of rules associated with this NAT.
	// Structure is documented below.
	Rules RouterNatRuleArrayInput
	// How NAT should be configured per Subnetwork.
	// If `ALL_SUBNETWORKS_ALL_IP_RANGES`, all of the
	// IP ranges in every Subnetwork are allowed to Nat.
	// If `ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES`, all of the primary IP
	// ranges in every Subnetwork are allowed to Nat.
	// `LIST_OF_SUBNETWORKS`: A list of Subnetworks are allowed to Nat
	// (specified in the field subnetwork below). Note that if this field
	// contains ALL_SUBNETWORKS_ALL_IP_RANGES or
	// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any
	// other RouterNat section in any Router for this network in this region.
	// Possible values are: `ALL_SUBNETWORKS_ALL_IP_RANGES`, `ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES`, `LIST_OF_SUBNETWORKS`.
	SourceSubnetworkIpRangesToNat pulumi.StringPtrInput
	// One or more subnetwork NAT configurations. Only used if
	// `sourceSubnetworkIpRangesToNat` is set to `LIST_OF_SUBNETWORKS`
	// Structure is documented below.
	Subnetworks RouterNatSubnetworkArrayInput
	// Timeout (in seconds) for TCP established connections.
	// Defaults to 1200s if not set.
	TcpEstablishedIdleTimeoutSec pulumi.IntPtrInput
	// Timeout (in seconds) for TCP connections that are in TIME_WAIT state.
	// Defaults to 120s if not set.
	TcpTimeWaitTimeoutSec pulumi.IntPtrInput
	// Timeout (in seconds) for TCP transitory connections.
	// Defaults to 30s if not set.
	TcpTransitoryIdleTimeoutSec pulumi.IntPtrInput
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	UdpIdleTimeoutSec pulumi.IntPtrInput
}

func (RouterNatState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerNatState)(nil)).Elem()
}

type routerNatArgs struct {
	// A list of URLs of the IP resources to be drained. These IPs must be
	// valid static external IPs that have been assigned to the NAT.
	DrainNatIps []string `pulumi:"drainNatIps"`
	// Enable Dynamic Port Allocation.
	// If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or equal to 32.
	// If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config.
	// If maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm.
	// If maxPortsPerVm is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
	// Mutually exclusive with enableEndpointIndependentMapping.
	EnableDynamicPortAllocation *bool `pulumi:"enableDynamicPortAllocation"`
	// Specifies if endpoint independent mapping is enabled. This is enabled by default. For more information
	// see the [official documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).
	EnableEndpointIndependentMapping *bool `pulumi:"enableEndpointIndependentMapping"`
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	IcmpIdleTimeoutSec *int `pulumi:"icmpIdleTimeoutSec"`
	// Configuration for logging on NAT
	// Structure is documented below.
	LogConfig *RouterNatLogConfig `pulumi:"logConfig"`
	// Maximum number of ports allocated to a VM from this NAT.
	// This field can only be set when enableDynamicPortAllocation is enabled.
	MaxPortsPerVm *int `pulumi:"maxPortsPerVm"`
	// Minimum number of ports allocated to a VM from this NAT.
	MinPortsPerVm *int `pulumi:"minPortsPerVm"`
	// Name of the NAT service. The name must be 1-63 characters long and
	// comply with RFC1035.
	Name *string `pulumi:"name"`
	// How external IPs should be allocated for this NAT. Valid values are
	// `AUTO_ONLY` for only allowing NAT IPs allocated by Google Cloud
	// Platform, or `MANUAL_ONLY` for only user-allocated NAT IP addresses.
	// Possible values are: `MANUAL_ONLY`, `AUTO_ONLY`.
	NatIpAllocateOption string `pulumi:"natIpAllocateOption"`
	// Self-links of NAT IPs. Only valid if natIpAllocateOption
	// is set to MANUAL_ONLY.
	NatIps []string `pulumi:"natIps"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Region where the router and NAT reside.
	Region *string `pulumi:"region"`
	// The name of the Cloud Router in which this NAT will be configured.
	//
	// ***
	Router string `pulumi:"router"`
	// A list of rules associated with this NAT.
	// Structure is documented below.
	Rules []RouterNatRule `pulumi:"rules"`
	// How NAT should be configured per Subnetwork.
	// If `ALL_SUBNETWORKS_ALL_IP_RANGES`, all of the
	// IP ranges in every Subnetwork are allowed to Nat.
	// If `ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES`, all of the primary IP
	// ranges in every Subnetwork are allowed to Nat.
	// `LIST_OF_SUBNETWORKS`: A list of Subnetworks are allowed to Nat
	// (specified in the field subnetwork below). Note that if this field
	// contains ALL_SUBNETWORKS_ALL_IP_RANGES or
	// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any
	// other RouterNat section in any Router for this network in this region.
	// Possible values are: `ALL_SUBNETWORKS_ALL_IP_RANGES`, `ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES`, `LIST_OF_SUBNETWORKS`.
	SourceSubnetworkIpRangesToNat string `pulumi:"sourceSubnetworkIpRangesToNat"`
	// One or more subnetwork NAT configurations. Only used if
	// `sourceSubnetworkIpRangesToNat` is set to `LIST_OF_SUBNETWORKS`
	// Structure is documented below.
	Subnetworks []RouterNatSubnetwork `pulumi:"subnetworks"`
	// Timeout (in seconds) for TCP established connections.
	// Defaults to 1200s if not set.
	TcpEstablishedIdleTimeoutSec *int `pulumi:"tcpEstablishedIdleTimeoutSec"`
	// Timeout (in seconds) for TCP connections that are in TIME_WAIT state.
	// Defaults to 120s if not set.
	TcpTimeWaitTimeoutSec *int `pulumi:"tcpTimeWaitTimeoutSec"`
	// Timeout (in seconds) for TCP transitory connections.
	// Defaults to 30s if not set.
	TcpTransitoryIdleTimeoutSec *int `pulumi:"tcpTransitoryIdleTimeoutSec"`
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	UdpIdleTimeoutSec *int `pulumi:"udpIdleTimeoutSec"`
}

// The set of arguments for constructing a RouterNat resource.
type RouterNatArgs struct {
	// A list of URLs of the IP resources to be drained. These IPs must be
	// valid static external IPs that have been assigned to the NAT.
	DrainNatIps pulumi.StringArrayInput
	// Enable Dynamic Port Allocation.
	// If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or equal to 32.
	// If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config.
	// If maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm.
	// If maxPortsPerVm is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
	// Mutually exclusive with enableEndpointIndependentMapping.
	EnableDynamicPortAllocation pulumi.BoolPtrInput
	// Specifies if endpoint independent mapping is enabled. This is enabled by default. For more information
	// see the [official documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).
	EnableEndpointIndependentMapping pulumi.BoolPtrInput
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	IcmpIdleTimeoutSec pulumi.IntPtrInput
	// Configuration for logging on NAT
	// Structure is documented below.
	LogConfig RouterNatLogConfigPtrInput
	// Maximum number of ports allocated to a VM from this NAT.
	// This field can only be set when enableDynamicPortAllocation is enabled.
	MaxPortsPerVm pulumi.IntPtrInput
	// Minimum number of ports allocated to a VM from this NAT.
	MinPortsPerVm pulumi.IntPtrInput
	// Name of the NAT service. The name must be 1-63 characters long and
	// comply with RFC1035.
	Name pulumi.StringPtrInput
	// How external IPs should be allocated for this NAT. Valid values are
	// `AUTO_ONLY` for only allowing NAT IPs allocated by Google Cloud
	// Platform, or `MANUAL_ONLY` for only user-allocated NAT IP addresses.
	// Possible values are: `MANUAL_ONLY`, `AUTO_ONLY`.
	NatIpAllocateOption pulumi.StringInput
	// Self-links of NAT IPs. Only valid if natIpAllocateOption
	// is set to MANUAL_ONLY.
	NatIps pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Region where the router and NAT reside.
	Region pulumi.StringPtrInput
	// The name of the Cloud Router in which this NAT will be configured.
	//
	// ***
	Router pulumi.StringInput
	// A list of rules associated with this NAT.
	// Structure is documented below.
	Rules RouterNatRuleArrayInput
	// How NAT should be configured per Subnetwork.
	// If `ALL_SUBNETWORKS_ALL_IP_RANGES`, all of the
	// IP ranges in every Subnetwork are allowed to Nat.
	// If `ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES`, all of the primary IP
	// ranges in every Subnetwork are allowed to Nat.
	// `LIST_OF_SUBNETWORKS`: A list of Subnetworks are allowed to Nat
	// (specified in the field subnetwork below). Note that if this field
	// contains ALL_SUBNETWORKS_ALL_IP_RANGES or
	// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any
	// other RouterNat section in any Router for this network in this region.
	// Possible values are: `ALL_SUBNETWORKS_ALL_IP_RANGES`, `ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES`, `LIST_OF_SUBNETWORKS`.
	SourceSubnetworkIpRangesToNat pulumi.StringInput
	// One or more subnetwork NAT configurations. Only used if
	// `sourceSubnetworkIpRangesToNat` is set to `LIST_OF_SUBNETWORKS`
	// Structure is documented below.
	Subnetworks RouterNatSubnetworkArrayInput
	// Timeout (in seconds) for TCP established connections.
	// Defaults to 1200s if not set.
	TcpEstablishedIdleTimeoutSec pulumi.IntPtrInput
	// Timeout (in seconds) for TCP connections that are in TIME_WAIT state.
	// Defaults to 120s if not set.
	TcpTimeWaitTimeoutSec pulumi.IntPtrInput
	// Timeout (in seconds) for TCP transitory connections.
	// Defaults to 30s if not set.
	TcpTransitoryIdleTimeoutSec pulumi.IntPtrInput
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	UdpIdleTimeoutSec pulumi.IntPtrInput
}

func (RouterNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerNatArgs)(nil)).Elem()
}

type RouterNatInput interface {
	pulumi.Input

	ToRouterNatOutput() RouterNatOutput
	ToRouterNatOutputWithContext(ctx context.Context) RouterNatOutput
}

func (*RouterNat) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterNat)(nil)).Elem()
}

func (i *RouterNat) ToRouterNatOutput() RouterNatOutput {
	return i.ToRouterNatOutputWithContext(context.Background())
}

func (i *RouterNat) ToRouterNatOutputWithContext(ctx context.Context) RouterNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatOutput)
}

// RouterNatArrayInput is an input type that accepts RouterNatArray and RouterNatArrayOutput values.
// You can construct a concrete instance of `RouterNatArrayInput` via:
//
//	RouterNatArray{ RouterNatArgs{...} }
type RouterNatArrayInput interface {
	pulumi.Input

	ToRouterNatArrayOutput() RouterNatArrayOutput
	ToRouterNatArrayOutputWithContext(context.Context) RouterNatArrayOutput
}

type RouterNatArray []RouterNatInput

func (RouterNatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterNat)(nil)).Elem()
}

func (i RouterNatArray) ToRouterNatArrayOutput() RouterNatArrayOutput {
	return i.ToRouterNatArrayOutputWithContext(context.Background())
}

func (i RouterNatArray) ToRouterNatArrayOutputWithContext(ctx context.Context) RouterNatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatArrayOutput)
}

// RouterNatMapInput is an input type that accepts RouterNatMap and RouterNatMapOutput values.
// You can construct a concrete instance of `RouterNatMapInput` via:
//
//	RouterNatMap{ "key": RouterNatArgs{...} }
type RouterNatMapInput interface {
	pulumi.Input

	ToRouterNatMapOutput() RouterNatMapOutput
	ToRouterNatMapOutputWithContext(context.Context) RouterNatMapOutput
}

type RouterNatMap map[string]RouterNatInput

func (RouterNatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterNat)(nil)).Elem()
}

func (i RouterNatMap) ToRouterNatMapOutput() RouterNatMapOutput {
	return i.ToRouterNatMapOutputWithContext(context.Background())
}

func (i RouterNatMap) ToRouterNatMapOutputWithContext(ctx context.Context) RouterNatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatMapOutput)
}

type RouterNatOutput struct{ *pulumi.OutputState }

func (RouterNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterNat)(nil)).Elem()
}

func (o RouterNatOutput) ToRouterNatOutput() RouterNatOutput {
	return o
}

func (o RouterNatOutput) ToRouterNatOutputWithContext(ctx context.Context) RouterNatOutput {
	return o
}

// A list of URLs of the IP resources to be drained. These IPs must be
// valid static external IPs that have been assigned to the NAT.
func (o RouterNatOutput) DrainNatIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.StringArrayOutput { return v.DrainNatIps }).(pulumi.StringArrayOutput)
}

// Enable Dynamic Port Allocation.
// If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or equal to 32.
// If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config.
// If maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm.
// If maxPortsPerVm is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
// Mutually exclusive with enableEndpointIndependentMapping.
func (o RouterNatOutput) EnableDynamicPortAllocation() pulumi.BoolOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.BoolOutput { return v.EnableDynamicPortAllocation }).(pulumi.BoolOutput)
}

// Specifies if endpoint independent mapping is enabled. This is enabled by default. For more information
// see the [official documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).
func (o RouterNatOutput) EnableEndpointIndependentMapping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.BoolPtrOutput { return v.EnableEndpointIndependentMapping }).(pulumi.BoolPtrOutput)
}

// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
func (o RouterNatOutput) IcmpIdleTimeoutSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.IntPtrOutput { return v.IcmpIdleTimeoutSec }).(pulumi.IntPtrOutput)
}

// Configuration for logging on NAT
// Structure is documented below.
func (o RouterNatOutput) LogConfig() RouterNatLogConfigPtrOutput {
	return o.ApplyT(func(v *RouterNat) RouterNatLogConfigPtrOutput { return v.LogConfig }).(RouterNatLogConfigPtrOutput)
}

// Maximum number of ports allocated to a VM from this NAT.
// This field can only be set when enableDynamicPortAllocation is enabled.
func (o RouterNatOutput) MaxPortsPerVm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.IntPtrOutput { return v.MaxPortsPerVm }).(pulumi.IntPtrOutput)
}

// Minimum number of ports allocated to a VM from this NAT.
func (o RouterNatOutput) MinPortsPerVm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.IntPtrOutput { return v.MinPortsPerVm }).(pulumi.IntPtrOutput)
}

// Name of the NAT service. The name must be 1-63 characters long and
// comply with RFC1035.
func (o RouterNatOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// How external IPs should be allocated for this NAT. Valid values are
// `AUTO_ONLY` for only allowing NAT IPs allocated by Google Cloud
// Platform, or `MANUAL_ONLY` for only user-allocated NAT IP addresses.
// Possible values are: `MANUAL_ONLY`, `AUTO_ONLY`.
func (o RouterNatOutput) NatIpAllocateOption() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.StringOutput { return v.NatIpAllocateOption }).(pulumi.StringOutput)
}

// Self-links of NAT IPs. Only valid if natIpAllocateOption
// is set to MANUAL_ONLY.
func (o RouterNatOutput) NatIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.StringArrayOutput { return v.NatIps }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RouterNatOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Region where the router and NAT reside.
func (o RouterNatOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The name of the Cloud Router in which this NAT will be configured.
//
// ***
func (o RouterNatOutput) Router() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.StringOutput { return v.Router }).(pulumi.StringOutput)
}

// A list of rules associated with this NAT.
// Structure is documented below.
func (o RouterNatOutput) Rules() RouterNatRuleArrayOutput {
	return o.ApplyT(func(v *RouterNat) RouterNatRuleArrayOutput { return v.Rules }).(RouterNatRuleArrayOutput)
}

// How NAT should be configured per Subnetwork.
// If `ALL_SUBNETWORKS_ALL_IP_RANGES`, all of the
// IP ranges in every Subnetwork are allowed to Nat.
// If `ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES`, all of the primary IP
// ranges in every Subnetwork are allowed to Nat.
// `LIST_OF_SUBNETWORKS`: A list of Subnetworks are allowed to Nat
// (specified in the field subnetwork below). Note that if this field
// contains ALL_SUBNETWORKS_ALL_IP_RANGES or
// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any
// other RouterNat section in any Router for this network in this region.
// Possible values are: `ALL_SUBNETWORKS_ALL_IP_RANGES`, `ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES`, `LIST_OF_SUBNETWORKS`.
func (o RouterNatOutput) SourceSubnetworkIpRangesToNat() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.StringOutput { return v.SourceSubnetworkIpRangesToNat }).(pulumi.StringOutput)
}

// One or more subnetwork NAT configurations. Only used if
// `sourceSubnetworkIpRangesToNat` is set to `LIST_OF_SUBNETWORKS`
// Structure is documented below.
func (o RouterNatOutput) Subnetworks() RouterNatSubnetworkArrayOutput {
	return o.ApplyT(func(v *RouterNat) RouterNatSubnetworkArrayOutput { return v.Subnetworks }).(RouterNatSubnetworkArrayOutput)
}

// Timeout (in seconds) for TCP established connections.
// Defaults to 1200s if not set.
func (o RouterNatOutput) TcpEstablishedIdleTimeoutSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.IntPtrOutput { return v.TcpEstablishedIdleTimeoutSec }).(pulumi.IntPtrOutput)
}

// Timeout (in seconds) for TCP connections that are in TIME_WAIT state.
// Defaults to 120s if not set.
func (o RouterNatOutput) TcpTimeWaitTimeoutSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.IntPtrOutput { return v.TcpTimeWaitTimeoutSec }).(pulumi.IntPtrOutput)
}

// Timeout (in seconds) for TCP transitory connections.
// Defaults to 30s if not set.
func (o RouterNatOutput) TcpTransitoryIdleTimeoutSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.IntPtrOutput { return v.TcpTransitoryIdleTimeoutSec }).(pulumi.IntPtrOutput)
}

// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
func (o RouterNatOutput) UdpIdleTimeoutSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouterNat) pulumi.IntPtrOutput { return v.UdpIdleTimeoutSec }).(pulumi.IntPtrOutput)
}

type RouterNatArrayOutput struct{ *pulumi.OutputState }

func (RouterNatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterNat)(nil)).Elem()
}

func (o RouterNatArrayOutput) ToRouterNatArrayOutput() RouterNatArrayOutput {
	return o
}

func (o RouterNatArrayOutput) ToRouterNatArrayOutputWithContext(ctx context.Context) RouterNatArrayOutput {
	return o
}

func (o RouterNatArrayOutput) Index(i pulumi.IntInput) RouterNatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterNat {
		return vs[0].([]*RouterNat)[vs[1].(int)]
	}).(RouterNatOutput)
}

type RouterNatMapOutput struct{ *pulumi.OutputState }

func (RouterNatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterNat)(nil)).Elem()
}

func (o RouterNatMapOutput) ToRouterNatMapOutput() RouterNatMapOutput {
	return o
}

func (o RouterNatMapOutput) ToRouterNatMapOutputWithContext(ctx context.Context) RouterNatMapOutput {
	return o
}

func (o RouterNatMapOutput) MapIndex(k pulumi.StringInput) RouterNatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterNat {
		return vs[0].(map[string]*RouterNat)[vs[1].(string)]
	}).(RouterNatOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterNatInput)(nil)).Elem(), &RouterNat{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterNatArrayInput)(nil)).Elem(), RouterNatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterNatMapInput)(nil)).Elem(), RouterNatMap{})
	pulumi.RegisterOutputType(RouterNatOutput{})
	pulumi.RegisterOutputType(RouterNatArrayOutput{})
	pulumi.RegisterOutputType(RouterNatMapOutput{})
}
