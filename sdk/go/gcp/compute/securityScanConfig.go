// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A ScanConfig resource contains the configurations to launch a scan.
// 
// To get more information about ScanConfig, see:
// 
// * [API documentation](https://cloud.google.com/security-scanner/docs/reference/rest/v1beta/projects.scanConfigs)
// * How-to Guides
//     * [Using Cloud Security Scanner](https://cloud.google.com/security-scanner/docs/scanning)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/security_scanner_scan_config.html.markdown.
type SecurityScanConfig struct {
	s *pulumi.ResourceState
}

// NewSecurityScanConfig registers a new resource with the given unique name, arguments, and options.
func NewSecurityScanConfig(ctx *pulumi.Context,
	name string, args *SecurityScanConfigArgs, opts ...pulumi.ResourceOpt) (*SecurityScanConfig, error) {
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	if args == nil || args.StartingUrls == nil {
		return nil, errors.New("missing required argument 'StartingUrls'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["authentication"] = nil
		inputs["blacklistPatterns"] = nil
		inputs["displayName"] = nil
		inputs["exportToSecurityCommandCenter"] = nil
		inputs["maxQps"] = nil
		inputs["project"] = nil
		inputs["schedule"] = nil
		inputs["startingUrls"] = nil
		inputs["targetPlatforms"] = nil
		inputs["userAgent"] = nil
	} else {
		inputs["authentication"] = args.Authentication
		inputs["blacklistPatterns"] = args.BlacklistPatterns
		inputs["displayName"] = args.DisplayName
		inputs["exportToSecurityCommandCenter"] = args.ExportToSecurityCommandCenter
		inputs["maxQps"] = args.MaxQps
		inputs["project"] = args.Project
		inputs["schedule"] = args.Schedule
		inputs["startingUrls"] = args.StartingUrls
		inputs["targetPlatforms"] = args.TargetPlatforms
		inputs["userAgent"] = args.UserAgent
	}
	inputs["name"] = nil
	s, err := ctx.RegisterResource("gcp:compute/securityScanConfig:SecurityScanConfig", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecurityScanConfig{s: s}, nil
}

// GetSecurityScanConfig gets an existing SecurityScanConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityScanConfig(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecurityScanConfigState, opts ...pulumi.ResourceOpt) (*SecurityScanConfig, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["authentication"] = state.Authentication
		inputs["blacklistPatterns"] = state.BlacklistPatterns
		inputs["displayName"] = state.DisplayName
		inputs["exportToSecurityCommandCenter"] = state.ExportToSecurityCommandCenter
		inputs["maxQps"] = state.MaxQps
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["schedule"] = state.Schedule
		inputs["startingUrls"] = state.StartingUrls
		inputs["targetPlatforms"] = state.TargetPlatforms
		inputs["userAgent"] = state.UserAgent
	}
	s, err := ctx.ReadResource("gcp:compute/securityScanConfig:SecurityScanConfig", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecurityScanConfig{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecurityScanConfig) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecurityScanConfig) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *SecurityScanConfig) Authentication() *pulumi.Output {
	return r.s.State["authentication"]
}

func (r *SecurityScanConfig) BlacklistPatterns() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["blacklistPatterns"])
}

func (r *SecurityScanConfig) DisplayName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["displayName"])
}

func (r *SecurityScanConfig) ExportToSecurityCommandCenter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["exportToSecurityCommandCenter"])
}

func (r *SecurityScanConfig) MaxQps() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maxQps"])
}

func (r *SecurityScanConfig) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *SecurityScanConfig) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *SecurityScanConfig) Schedule() *pulumi.Output {
	return r.s.State["schedule"]
}

func (r *SecurityScanConfig) StartingUrls() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["startingUrls"])
}

func (r *SecurityScanConfig) TargetPlatforms() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["targetPlatforms"])
}

func (r *SecurityScanConfig) UserAgent() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userAgent"])
}

// Input properties used for looking up and filtering SecurityScanConfig resources.
type SecurityScanConfigState struct {
	Authentication interface{}
	BlacklistPatterns interface{}
	DisplayName interface{}
	ExportToSecurityCommandCenter interface{}
	MaxQps interface{}
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	Schedule interface{}
	StartingUrls interface{}
	TargetPlatforms interface{}
	UserAgent interface{}
}

// The set of arguments for constructing a SecurityScanConfig resource.
type SecurityScanConfigArgs struct {
	Authentication interface{}
	BlacklistPatterns interface{}
	DisplayName interface{}
	ExportToSecurityCommandCenter interface{}
	MaxQps interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	Schedule interface{}
	StartingUrls interface{}
	TargetPlatforms interface{}
	UserAgent interface{}
}
