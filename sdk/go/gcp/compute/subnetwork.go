// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a subnetwork within GCE. For more information see
// [the official documentation](https://cloud.google.com/compute/docs/vpc/#vpc_networks_and_subnets)
// and
// [API](https://cloud.google.com/compute/docs/reference/latest/subnetworks).
type Subnetwork struct {
	s *pulumi.ResourceState
}

// NewSubnetwork registers a new resource with the given unique name, arguments, and options.
func NewSubnetwork(ctx *pulumi.Context,
	name string, args *SubnetworkArgs, opts ...pulumi.ResourceOpt) (*Subnetwork, error) {
	if args == nil || args.IpCidrRange == nil {
		return nil, errors.New("missing required argument 'IpCidrRange'")
	}
	if args == nil || args.Network == nil {
		return nil, errors.New("missing required argument 'Network'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["enableFlowLogs"] = nil
		inputs["ipCidrRange"] = nil
		inputs["name"] = nil
		inputs["network"] = nil
		inputs["privateIpGoogleAccess"] = nil
		inputs["project"] = nil
		inputs["region"] = nil
		inputs["secondaryIpRanges"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["enableFlowLogs"] = args.EnableFlowLogs
		inputs["ipCidrRange"] = args.IpCidrRange
		inputs["name"] = args.Name
		inputs["network"] = args.Network
		inputs["privateIpGoogleAccess"] = args.PrivateIpGoogleAccess
		inputs["project"] = args.Project
		inputs["region"] = args.Region
		inputs["secondaryIpRanges"] = args.SecondaryIpRanges
	}
	inputs["fingerprint"] = nil
	inputs["gatewayAddress"] = nil
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/subnetwork:Subnetwork", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subnetwork{s: s}, nil
}

// GetSubnetwork gets an existing Subnetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnetwork(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SubnetworkState, opts ...pulumi.ResourceOpt) (*Subnetwork, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["enableFlowLogs"] = state.EnableFlowLogs
		inputs["fingerprint"] = state.Fingerprint
		inputs["gatewayAddress"] = state.GatewayAddress
		inputs["ipCidrRange"] = state.IpCidrRange
		inputs["name"] = state.Name
		inputs["network"] = state.Network
		inputs["privateIpGoogleAccess"] = state.PrivateIpGoogleAccess
		inputs["project"] = state.Project
		inputs["region"] = state.Region
		inputs["secondaryIpRanges"] = state.SecondaryIpRanges
		inputs["selfLink"] = state.SelfLink
	}
	s, err := ctx.ReadResource("gcp:compute/subnetwork:Subnetwork", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subnetwork{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Subnetwork) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Subnetwork) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Description of this subnetwork.
func (r *Subnetwork) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// )
// Set to `true` to enable [flow logs](https://cloud.google.com/vpc/docs/using-flow-logs)
// for this subnetwork.
func (r *Subnetwork) EnableFlowLogs() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableFlowLogs"])
}

func (r *Subnetwork) Fingerprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fingerprint"])
}

// The IP address of the gateway.
func (r *Subnetwork) GatewayAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gatewayAddress"])
}

// The range of IP addresses belonging to this subnetwork secondary range. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network.
func (r *Subnetwork) IpCidrRange() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipCidrRange"])
}

// A unique name for the resource, required by GCE.
// Changing this forces a new resource to be created.
func (r *Subnetwork) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The network name or resource link to the parent
// network of this subnetwork. The parent network must have been created
// in custom subnet mode.
func (r *Subnetwork) Network() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["network"])
}

// Whether the VMs in this subnet
// can access Google services without assigned external IP
// addresses.
func (r *Subnetwork) PrivateIpGoogleAccess() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["privateIpGoogleAccess"])
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (r *Subnetwork) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The region this subnetwork will be created in. If
// unspecified, this defaults to the region configured in the provider.
func (r *Subnetwork) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// ) An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. Structure is documented below.
func (r *Subnetwork) SecondaryIpRanges() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["secondaryIpRanges"])
}

// The URI of the created resource.
func (r *Subnetwork) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// Input properties used for looking up and filtering Subnetwork resources.
type SubnetworkState struct {
	// Description of this subnetwork.
	Description interface{}
	// )
	// Set to `true` to enable [flow logs](https://cloud.google.com/vpc/docs/using-flow-logs)
	// for this subnetwork.
	EnableFlowLogs interface{}
	Fingerprint interface{}
	// The IP address of the gateway.
	GatewayAddress interface{}
	// The range of IP addresses belonging to this subnetwork secondary range. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network.
	IpCidrRange interface{}
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name interface{}
	// The network name or resource link to the parent
	// network of this subnetwork. The parent network must have been created
	// in custom subnet mode.
	Network interface{}
	// Whether the VMs in this subnet
	// can access Google services without assigned external IP
	// addresses.
	PrivateIpGoogleAccess interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// The region this subnetwork will be created in. If
	// unspecified, this defaults to the region configured in the provider.
	Region interface{}
	// ) An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. Structure is documented below.
	SecondaryIpRanges interface{}
	// The URI of the created resource.
	SelfLink interface{}
}

// The set of arguments for constructing a Subnetwork resource.
type SubnetworkArgs struct {
	// Description of this subnetwork.
	Description interface{}
	// )
	// Set to `true` to enable [flow logs](https://cloud.google.com/vpc/docs/using-flow-logs)
	// for this subnetwork.
	EnableFlowLogs interface{}
	// The range of IP addresses belonging to this subnetwork secondary range. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network.
	IpCidrRange interface{}
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name interface{}
	// The network name or resource link to the parent
	// network of this subnetwork. The parent network must have been created
	// in custom subnet mode.
	Network interface{}
	// Whether the VMs in this subnet
	// can access Google services without assigned external IP
	// addresses.
	PrivateIpGoogleAccess interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// The region this subnetwork will be created in. If
	// unspecified, this defaults to the region configured in the provider.
	Region interface{}
	// ) An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. Structure is documented below.
	SecondaryIpRanges interface{}
}
