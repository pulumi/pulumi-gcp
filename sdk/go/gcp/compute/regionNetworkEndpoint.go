// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Region network endpoint represents a IP address/FQDN and port combination that is
// part of a specific network endpoint group (NEG).
//
// > **NOTE**: Network endpoints cannot be created outside of a network endpoint group.
//
// To get more information about RegionNetworkEndpoint, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/regionNetworkEndpointGroups)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/load-balancing/docs/negs/)
//   - [Internet NEGs Official Documentation](https://cloud.google.com/load-balancing/docs/negs/internet-neg-concepts)
//
// ## Example Usage
// ### Region Network Endpoint Internet Ip Port
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
//				Name:                  pulumi.String("network"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			group, err := compute.NewRegionNetworkEndpointGroup(ctx, "group", &compute.RegionNetworkEndpointGroupArgs{
//				Name:                pulumi.String("ip-port-neg"),
//				Network:             _default.ID(),
//				Region:              pulumi.String("us-central1"),
//				NetworkEndpointType: pulumi.String("INTERNET_IP_PORT"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRegionNetworkEndpoint(ctx, "region-internet-ip-port-endpoint", &compute.RegionNetworkEndpointArgs{
//				RegionNetworkEndpointGroup: group.Name,
//				Region:                     pulumi.String("us-central1"),
//				IpAddress:                  pulumi.String("8.8.8.8"),
//				Port:                       pulumi.Int(443),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Network Endpoint Internet Fqdn Port
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
//				Name:                  pulumi.String("network"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			group, err := compute.NewRegionNetworkEndpointGroup(ctx, "group", &compute.RegionNetworkEndpointGroupArgs{
//				Name:                pulumi.String("fqdn-port-neg"),
//				Network:             _default.ID(),
//				Region:              pulumi.String("us-central1"),
//				NetworkEndpointType: pulumi.String("INTERNET_FQDN_PORT"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRegionNetworkEndpoint(ctx, "region-internet-fqdn-port-endpoint", &compute.RegionNetworkEndpointArgs{
//				RegionNetworkEndpointGroup: group.Name,
//				Region:                     pulumi.String("us-central1"),
//				Fqdn:                       pulumi.String("backend.example.com"),
//				Port:                       pulumi.Int(443),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RegionNetworkEndpoint can be imported using any of these accepted formats:
//
//   - `projects/{{project}}/regions/{{region}}/networkEndpointGroups/{{region_network_endpoint_group}}/{{ip_address}}/{{fqdn}}/{{port}}`
//
//   - `{{project}}/{{region}}/{{region_network_endpoint_group}}/{{ip_address}}/{{fqdn}}/{{port}}`
//
//   - `{{region}}/{{region_network_endpoint_group}}/{{ip_address}}/{{fqdn}}/{{port}}`
//
//   - `{{region_network_endpoint_group}}/{{ip_address}}/{{fqdn}}/{{port}}`
//
//     When using the `pulumi import` command, RegionNetworkEndpoint can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:compute/regionNetworkEndpoint:RegionNetworkEndpoint default projects/{{project}}/regions/{{region}}/networkEndpointGroups/{{region_network_endpoint_group}}/{{ip_address}}/{{fqdn}}/{{port}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/regionNetworkEndpoint:RegionNetworkEndpoint default {{project}}/{{region}}/{{region_network_endpoint_group}}/{{ip_address}}/{{fqdn}}/{{port}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/regionNetworkEndpoint:RegionNetworkEndpoint default {{region}}/{{region_network_endpoint_group}}/{{ip_address}}/{{fqdn}}/{{port}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/regionNetworkEndpoint:RegionNetworkEndpoint default {{region_network_endpoint_group}}/{{ip_address}}/{{fqdn}}/{{port}}
// ```
type RegionNetworkEndpoint struct {
	pulumi.CustomResourceState

	// Fully qualified domain name of network endpoint.
	// This can only be specified when networkEndpointType of the NEG is INTERNET_FQDN_PORT.
	Fqdn pulumi.StringPtrOutput `pulumi:"fqdn"`
	// IPv4 address external endpoint.
	// This can only be specified when networkEndpointType of the NEG is INTERNET_IP_PORT.
	IpAddress pulumi.StringPtrOutput `pulumi:"ipAddress"`
	// Port number of network endpoint.
	Port pulumi.IntOutput `pulumi:"port"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Region where the containing network endpoint group is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The network endpoint group this endpoint is part of.
	//
	// ***
	RegionNetworkEndpointGroup pulumi.StringOutput `pulumi:"regionNetworkEndpointGroup"`
}

// NewRegionNetworkEndpoint registers a new resource with the given unique name, arguments, and options.
func NewRegionNetworkEndpoint(ctx *pulumi.Context,
	name string, args *RegionNetworkEndpointArgs, opts ...pulumi.ResourceOption) (*RegionNetworkEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.RegionNetworkEndpointGroup == nil {
		return nil, errors.New("invalid value for required argument 'RegionNetworkEndpointGroup'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionNetworkEndpoint
	err := ctx.RegisterResource("gcp:compute/regionNetworkEndpoint:RegionNetworkEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionNetworkEndpoint gets an existing RegionNetworkEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionNetworkEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionNetworkEndpointState, opts ...pulumi.ResourceOption) (*RegionNetworkEndpoint, error) {
	var resource RegionNetworkEndpoint
	err := ctx.ReadResource("gcp:compute/regionNetworkEndpoint:RegionNetworkEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionNetworkEndpoint resources.
type regionNetworkEndpointState struct {
	// Fully qualified domain name of network endpoint.
	// This can only be specified when networkEndpointType of the NEG is INTERNET_FQDN_PORT.
	Fqdn *string `pulumi:"fqdn"`
	// IPv4 address external endpoint.
	// This can only be specified when networkEndpointType of the NEG is INTERNET_IP_PORT.
	IpAddress *string `pulumi:"ipAddress"`
	// Port number of network endpoint.
	Port *int `pulumi:"port"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Region where the containing network endpoint group is located.
	Region *string `pulumi:"region"`
	// The network endpoint group this endpoint is part of.
	//
	// ***
	RegionNetworkEndpointGroup *string `pulumi:"regionNetworkEndpointGroup"`
}

type RegionNetworkEndpointState struct {
	// Fully qualified domain name of network endpoint.
	// This can only be specified when networkEndpointType of the NEG is INTERNET_FQDN_PORT.
	Fqdn pulumi.StringPtrInput
	// IPv4 address external endpoint.
	// This can only be specified when networkEndpointType of the NEG is INTERNET_IP_PORT.
	IpAddress pulumi.StringPtrInput
	// Port number of network endpoint.
	Port pulumi.IntPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Region where the containing network endpoint group is located.
	Region pulumi.StringPtrInput
	// The network endpoint group this endpoint is part of.
	//
	// ***
	RegionNetworkEndpointGroup pulumi.StringPtrInput
}

func (RegionNetworkEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionNetworkEndpointState)(nil)).Elem()
}

type regionNetworkEndpointArgs struct {
	// Fully qualified domain name of network endpoint.
	// This can only be specified when networkEndpointType of the NEG is INTERNET_FQDN_PORT.
	Fqdn *string `pulumi:"fqdn"`
	// IPv4 address external endpoint.
	// This can only be specified when networkEndpointType of the NEG is INTERNET_IP_PORT.
	IpAddress *string `pulumi:"ipAddress"`
	// Port number of network endpoint.
	Port int `pulumi:"port"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Region where the containing network endpoint group is located.
	Region *string `pulumi:"region"`
	// The network endpoint group this endpoint is part of.
	//
	// ***
	RegionNetworkEndpointGroup string `pulumi:"regionNetworkEndpointGroup"`
}

// The set of arguments for constructing a RegionNetworkEndpoint resource.
type RegionNetworkEndpointArgs struct {
	// Fully qualified domain name of network endpoint.
	// This can only be specified when networkEndpointType of the NEG is INTERNET_FQDN_PORT.
	Fqdn pulumi.StringPtrInput
	// IPv4 address external endpoint.
	// This can only be specified when networkEndpointType of the NEG is INTERNET_IP_PORT.
	IpAddress pulumi.StringPtrInput
	// Port number of network endpoint.
	Port pulumi.IntInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Region where the containing network endpoint group is located.
	Region pulumi.StringPtrInput
	// The network endpoint group this endpoint is part of.
	//
	// ***
	RegionNetworkEndpointGroup pulumi.StringInput
}

func (RegionNetworkEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionNetworkEndpointArgs)(nil)).Elem()
}

type RegionNetworkEndpointInput interface {
	pulumi.Input

	ToRegionNetworkEndpointOutput() RegionNetworkEndpointOutput
	ToRegionNetworkEndpointOutputWithContext(ctx context.Context) RegionNetworkEndpointOutput
}

func (*RegionNetworkEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionNetworkEndpoint)(nil)).Elem()
}

func (i *RegionNetworkEndpoint) ToRegionNetworkEndpointOutput() RegionNetworkEndpointOutput {
	return i.ToRegionNetworkEndpointOutputWithContext(context.Background())
}

func (i *RegionNetworkEndpoint) ToRegionNetworkEndpointOutputWithContext(ctx context.Context) RegionNetworkEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionNetworkEndpointOutput)
}

// RegionNetworkEndpointArrayInput is an input type that accepts RegionNetworkEndpointArray and RegionNetworkEndpointArrayOutput values.
// You can construct a concrete instance of `RegionNetworkEndpointArrayInput` via:
//
//	RegionNetworkEndpointArray{ RegionNetworkEndpointArgs{...} }
type RegionNetworkEndpointArrayInput interface {
	pulumi.Input

	ToRegionNetworkEndpointArrayOutput() RegionNetworkEndpointArrayOutput
	ToRegionNetworkEndpointArrayOutputWithContext(context.Context) RegionNetworkEndpointArrayOutput
}

type RegionNetworkEndpointArray []RegionNetworkEndpointInput

func (RegionNetworkEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionNetworkEndpoint)(nil)).Elem()
}

func (i RegionNetworkEndpointArray) ToRegionNetworkEndpointArrayOutput() RegionNetworkEndpointArrayOutput {
	return i.ToRegionNetworkEndpointArrayOutputWithContext(context.Background())
}

func (i RegionNetworkEndpointArray) ToRegionNetworkEndpointArrayOutputWithContext(ctx context.Context) RegionNetworkEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionNetworkEndpointArrayOutput)
}

// RegionNetworkEndpointMapInput is an input type that accepts RegionNetworkEndpointMap and RegionNetworkEndpointMapOutput values.
// You can construct a concrete instance of `RegionNetworkEndpointMapInput` via:
//
//	RegionNetworkEndpointMap{ "key": RegionNetworkEndpointArgs{...} }
type RegionNetworkEndpointMapInput interface {
	pulumi.Input

	ToRegionNetworkEndpointMapOutput() RegionNetworkEndpointMapOutput
	ToRegionNetworkEndpointMapOutputWithContext(context.Context) RegionNetworkEndpointMapOutput
}

type RegionNetworkEndpointMap map[string]RegionNetworkEndpointInput

func (RegionNetworkEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionNetworkEndpoint)(nil)).Elem()
}

func (i RegionNetworkEndpointMap) ToRegionNetworkEndpointMapOutput() RegionNetworkEndpointMapOutput {
	return i.ToRegionNetworkEndpointMapOutputWithContext(context.Background())
}

func (i RegionNetworkEndpointMap) ToRegionNetworkEndpointMapOutputWithContext(ctx context.Context) RegionNetworkEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionNetworkEndpointMapOutput)
}

type RegionNetworkEndpointOutput struct{ *pulumi.OutputState }

func (RegionNetworkEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionNetworkEndpoint)(nil)).Elem()
}

func (o RegionNetworkEndpointOutput) ToRegionNetworkEndpointOutput() RegionNetworkEndpointOutput {
	return o
}

func (o RegionNetworkEndpointOutput) ToRegionNetworkEndpointOutputWithContext(ctx context.Context) RegionNetworkEndpointOutput {
	return o
}

// Fully qualified domain name of network endpoint.
// This can only be specified when networkEndpointType of the NEG is INTERNET_FQDN_PORT.
func (o RegionNetworkEndpointOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionNetworkEndpoint) pulumi.StringPtrOutput { return v.Fqdn }).(pulumi.StringPtrOutput)
}

// IPv4 address external endpoint.
// This can only be specified when networkEndpointType of the NEG is INTERNET_IP_PORT.
func (o RegionNetworkEndpointOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionNetworkEndpoint) pulumi.StringPtrOutput { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Port number of network endpoint.
func (o RegionNetworkEndpointOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *RegionNetworkEndpoint) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RegionNetworkEndpointOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionNetworkEndpoint) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Region where the containing network endpoint group is located.
func (o RegionNetworkEndpointOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionNetworkEndpoint) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The network endpoint group this endpoint is part of.
//
// ***
func (o RegionNetworkEndpointOutput) RegionNetworkEndpointGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionNetworkEndpoint) pulumi.StringOutput { return v.RegionNetworkEndpointGroup }).(pulumi.StringOutput)
}

type RegionNetworkEndpointArrayOutput struct{ *pulumi.OutputState }

func (RegionNetworkEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionNetworkEndpoint)(nil)).Elem()
}

func (o RegionNetworkEndpointArrayOutput) ToRegionNetworkEndpointArrayOutput() RegionNetworkEndpointArrayOutput {
	return o
}

func (o RegionNetworkEndpointArrayOutput) ToRegionNetworkEndpointArrayOutputWithContext(ctx context.Context) RegionNetworkEndpointArrayOutput {
	return o
}

func (o RegionNetworkEndpointArrayOutput) Index(i pulumi.IntInput) RegionNetworkEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionNetworkEndpoint {
		return vs[0].([]*RegionNetworkEndpoint)[vs[1].(int)]
	}).(RegionNetworkEndpointOutput)
}

type RegionNetworkEndpointMapOutput struct{ *pulumi.OutputState }

func (RegionNetworkEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionNetworkEndpoint)(nil)).Elem()
}

func (o RegionNetworkEndpointMapOutput) ToRegionNetworkEndpointMapOutput() RegionNetworkEndpointMapOutput {
	return o
}

func (o RegionNetworkEndpointMapOutput) ToRegionNetworkEndpointMapOutputWithContext(ctx context.Context) RegionNetworkEndpointMapOutput {
	return o
}

func (o RegionNetworkEndpointMapOutput) MapIndex(k pulumi.StringInput) RegionNetworkEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionNetworkEndpoint {
		return vs[0].(map[string]*RegionNetworkEndpoint)[vs[1].(string)]
	}).(RegionNetworkEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionNetworkEndpointInput)(nil)).Elem(), &RegionNetworkEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionNetworkEndpointArrayInput)(nil)).Elem(), RegionNetworkEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionNetworkEndpointMapInput)(nil)).Elem(), RegionNetworkEndpointMap{})
	pulumi.RegisterOutputType(RegionNetworkEndpointOutput{})
	pulumi.RegisterOutputType(RegionNetworkEndpointArrayOutput{})
	pulumi.RegisterOutputType(RegionNetworkEndpointMapOutput{})
}
