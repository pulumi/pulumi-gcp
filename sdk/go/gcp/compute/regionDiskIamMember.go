// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Compute Engine RegionDisk. Each of these resources serves a different use case:
//
// * `compute.RegionDiskIamPolicy`: Authoritative. Sets the IAM policy for the regiondisk and replaces any existing policy already attached.
// * `compute.RegionDiskIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the regiondisk are preserved.
// * `compute.RegionDiskIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the regiondisk are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `compute.RegionDiskIamPolicy`: Retrieves the IAM policy for the regiondisk
//
// > **Note:** `compute.RegionDiskIamPolicy` **cannot** be used in conjunction with `compute.RegionDiskIamBinding` and `compute.RegionDiskIamMember` or they will fight over what your policy should be.
//
// > **Note:** `compute.RegionDiskIamBinding` resources **can be** used in conjunction with `compute.RegionDiskIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## compute.RegionDiskIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRegionDiskIamPolicy(ctx, "policy", &compute.RegionDiskIamPolicyArgs{
//				Project:    pulumi.Any(regiondisk.Project),
//				Region:     pulumi.Any(regiondisk.Region),
//				Name:       pulumi.Any(regiondisk.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## compute.RegionDiskIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionDiskIamBinding(ctx, "binding", &compute.RegionDiskIamBindingArgs{
//				Project: pulumi.Any(regiondisk.Project),
//				Region:  pulumi.Any(regiondisk.Region),
//				Name:    pulumi.Any(regiondisk.Name),
//				Role:    pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## compute.RegionDiskIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionDiskIamMember(ctx, "member", &compute.RegionDiskIamMemberArgs{
//				Project: pulumi.Any(regiondisk.Project),
//				Region:  pulumi.Any(regiondisk.Region),
//				Name:    pulumi.Any(regiondisk.Name),
//				Role:    pulumi.String("roles/viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Compute Engine RegionDisk
//
// Three different resources help you manage your IAM policy for Compute Engine RegionDisk. Each of these resources serves a different use case:
//
// * `compute.RegionDiskIamPolicy`: Authoritative. Sets the IAM policy for the regiondisk and replaces any existing policy already attached.
// * `compute.RegionDiskIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the regiondisk are preserved.
// * `compute.RegionDiskIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the regiondisk are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `compute.RegionDiskIamPolicy`: Retrieves the IAM policy for the regiondisk
//
// > **Note:** `compute.RegionDiskIamPolicy` **cannot** be used in conjunction with `compute.RegionDiskIamBinding` and `compute.RegionDiskIamMember` or they will fight over what your policy should be.
//
// > **Note:** `compute.RegionDiskIamBinding` resources **can be** used in conjunction with `compute.RegionDiskIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## compute.RegionDiskIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRegionDiskIamPolicy(ctx, "policy", &compute.RegionDiskIamPolicyArgs{
//				Project:    pulumi.Any(regiondisk.Project),
//				Region:     pulumi.Any(regiondisk.Region),
//				Name:       pulumi.Any(regiondisk.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## compute.RegionDiskIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionDiskIamBinding(ctx, "binding", &compute.RegionDiskIamBindingArgs{
//				Project: pulumi.Any(regiondisk.Project),
//				Region:  pulumi.Any(regiondisk.Region),
//				Name:    pulumi.Any(regiondisk.Name),
//				Role:    pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## compute.RegionDiskIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionDiskIamMember(ctx, "member", &compute.RegionDiskIamMemberArgs{
//				Project: pulumi.Any(regiondisk.Project),
//				Region:  pulumi.Any(regiondisk.Region),
//				Name:    pulumi.Any(regiondisk.Name),
//				Role:    pulumi.String("roles/viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/regions/{{region}}/disks/{{name}}
//
// * {{project}}/{{region}}/{{name}}
//
// * {{region}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Compute Engine regiondisk IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:compute/regionDiskIamMember:RegionDiskIamMember editor "projects/{{project}}/regions/{{region}}/disks/{{region_disk}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:compute/regionDiskIamMember:RegionDiskIamMember editor "projects/{{project}}/regions/{{region}}/disks/{{region_disk}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:compute/regionDiskIamMember:RegionDiskIamMember editor projects/{{project}}/regions/{{region}}/disks/{{region_disk}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type RegionDiskIamMember struct {
	pulumi.CustomResourceState

	Condition RegionDiskIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringOutput `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// A reference to the region where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// The role that should be applied. Only one
	// `compute.RegionDiskIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewRegionDiskIamMember registers a new resource with the given unique name, arguments, and options.
func NewRegionDiskIamMember(ctx *pulumi.Context,
	name string, args *RegionDiskIamMemberArgs, opts ...pulumi.ResourceOption) (*RegionDiskIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionDiskIamMember
	err := ctx.RegisterResource("gcp:compute/regionDiskIamMember:RegionDiskIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionDiskIamMember gets an existing RegionDiskIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionDiskIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionDiskIamMemberState, opts ...pulumi.ResourceOption) (*RegionDiskIamMember, error) {
	var resource RegionDiskIamMember
	err := ctx.ReadResource("gcp:compute/regionDiskIamMember:RegionDiskIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionDiskIamMember resources.
type regionDiskIamMemberState struct {
	Condition *RegionDiskIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member *string `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// A reference to the region where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `compute.RegionDiskIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type RegionDiskIamMemberState struct {
	Condition RegionDiskIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// A reference to the region where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `compute.RegionDiskIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (RegionDiskIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionDiskIamMemberState)(nil)).Elem()
}

type regionDiskIamMemberArgs struct {
	Condition *RegionDiskIamMemberCondition `pulumi:"condition"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member string `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// A reference to the region where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `compute.RegionDiskIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a RegionDiskIamMember resource.
type RegionDiskIamMemberArgs struct {
	Condition RegionDiskIamMemberConditionPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// A reference to the region where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `compute.RegionDiskIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (RegionDiskIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionDiskIamMemberArgs)(nil)).Elem()
}

type RegionDiskIamMemberInput interface {
	pulumi.Input

	ToRegionDiskIamMemberOutput() RegionDiskIamMemberOutput
	ToRegionDiskIamMemberOutputWithContext(ctx context.Context) RegionDiskIamMemberOutput
}

func (*RegionDiskIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionDiskIamMember)(nil)).Elem()
}

func (i *RegionDiskIamMember) ToRegionDiskIamMemberOutput() RegionDiskIamMemberOutput {
	return i.ToRegionDiskIamMemberOutputWithContext(context.Background())
}

func (i *RegionDiskIamMember) ToRegionDiskIamMemberOutputWithContext(ctx context.Context) RegionDiskIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionDiskIamMemberOutput)
}

// RegionDiskIamMemberArrayInput is an input type that accepts RegionDiskIamMemberArray and RegionDiskIamMemberArrayOutput values.
// You can construct a concrete instance of `RegionDiskIamMemberArrayInput` via:
//
//	RegionDiskIamMemberArray{ RegionDiskIamMemberArgs{...} }
type RegionDiskIamMemberArrayInput interface {
	pulumi.Input

	ToRegionDiskIamMemberArrayOutput() RegionDiskIamMemberArrayOutput
	ToRegionDiskIamMemberArrayOutputWithContext(context.Context) RegionDiskIamMemberArrayOutput
}

type RegionDiskIamMemberArray []RegionDiskIamMemberInput

func (RegionDiskIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionDiskIamMember)(nil)).Elem()
}

func (i RegionDiskIamMemberArray) ToRegionDiskIamMemberArrayOutput() RegionDiskIamMemberArrayOutput {
	return i.ToRegionDiskIamMemberArrayOutputWithContext(context.Background())
}

func (i RegionDiskIamMemberArray) ToRegionDiskIamMemberArrayOutputWithContext(ctx context.Context) RegionDiskIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionDiskIamMemberArrayOutput)
}

// RegionDiskIamMemberMapInput is an input type that accepts RegionDiskIamMemberMap and RegionDiskIamMemberMapOutput values.
// You can construct a concrete instance of `RegionDiskIamMemberMapInput` via:
//
//	RegionDiskIamMemberMap{ "key": RegionDiskIamMemberArgs{...} }
type RegionDiskIamMemberMapInput interface {
	pulumi.Input

	ToRegionDiskIamMemberMapOutput() RegionDiskIamMemberMapOutput
	ToRegionDiskIamMemberMapOutputWithContext(context.Context) RegionDiskIamMemberMapOutput
}

type RegionDiskIamMemberMap map[string]RegionDiskIamMemberInput

func (RegionDiskIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionDiskIamMember)(nil)).Elem()
}

func (i RegionDiskIamMemberMap) ToRegionDiskIamMemberMapOutput() RegionDiskIamMemberMapOutput {
	return i.ToRegionDiskIamMemberMapOutputWithContext(context.Background())
}

func (i RegionDiskIamMemberMap) ToRegionDiskIamMemberMapOutputWithContext(ctx context.Context) RegionDiskIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionDiskIamMemberMapOutput)
}

type RegionDiskIamMemberOutput struct{ *pulumi.OutputState }

func (RegionDiskIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionDiskIamMember)(nil)).Elem()
}

func (o RegionDiskIamMemberOutput) ToRegionDiskIamMemberOutput() RegionDiskIamMemberOutput {
	return o
}

func (o RegionDiskIamMemberOutput) ToRegionDiskIamMemberOutputWithContext(ctx context.Context) RegionDiskIamMemberOutput {
	return o
}

func (o RegionDiskIamMemberOutput) Condition() RegionDiskIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *RegionDiskIamMember) RegionDiskIamMemberConditionPtrOutput { return v.Condition }).(RegionDiskIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o RegionDiskIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionDiskIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o RegionDiskIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionDiskIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o RegionDiskIamMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionDiskIamMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o RegionDiskIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionDiskIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A reference to the region where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
// region is specified, it is taken from the provider configuration.
func (o RegionDiskIamMemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionDiskIamMember) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `compute.RegionDiskIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o RegionDiskIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionDiskIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type RegionDiskIamMemberArrayOutput struct{ *pulumi.OutputState }

func (RegionDiskIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionDiskIamMember)(nil)).Elem()
}

func (o RegionDiskIamMemberArrayOutput) ToRegionDiskIamMemberArrayOutput() RegionDiskIamMemberArrayOutput {
	return o
}

func (o RegionDiskIamMemberArrayOutput) ToRegionDiskIamMemberArrayOutputWithContext(ctx context.Context) RegionDiskIamMemberArrayOutput {
	return o
}

func (o RegionDiskIamMemberArrayOutput) Index(i pulumi.IntInput) RegionDiskIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionDiskIamMember {
		return vs[0].([]*RegionDiskIamMember)[vs[1].(int)]
	}).(RegionDiskIamMemberOutput)
}

type RegionDiskIamMemberMapOutput struct{ *pulumi.OutputState }

func (RegionDiskIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionDiskIamMember)(nil)).Elem()
}

func (o RegionDiskIamMemberMapOutput) ToRegionDiskIamMemberMapOutput() RegionDiskIamMemberMapOutput {
	return o
}

func (o RegionDiskIamMemberMapOutput) ToRegionDiskIamMemberMapOutputWithContext(ctx context.Context) RegionDiskIamMemberMapOutput {
	return o
}

func (o RegionDiskIamMemberMapOutput) MapIndex(k pulumi.StringInput) RegionDiskIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionDiskIamMember {
		return vs[0].(map[string]*RegionDiskIamMember)[vs[1].(string)]
	}).(RegionDiskIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionDiskIamMemberInput)(nil)).Elem(), &RegionDiskIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionDiskIamMemberArrayInput)(nil)).Elem(), RegionDiskIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionDiskIamMemberMapInput)(nil)).Elem(), RegionDiskIamMemberMap{})
	pulumi.RegisterOutputType(RegionDiskIamMemberOutput{})
	pulumi.RegisterOutputType(RegionDiskIamMemberArrayOutput{})
	pulumi.RegisterOutputType(RegionDiskIamMemberMapOutput{})
}
