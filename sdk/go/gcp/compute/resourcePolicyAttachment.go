// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Adds existing resource policies to a compute instance. You can only add one policy
// which will be applied to this instance for scheduling start/stop operations.
//
// This resource can be used instead of setting the resourcePolicy directly in the
// compute instance resource to avoid dependency issues when using instance-level IAM
// permissions.
//
// ## Example Usage
//
// ### Compute Resource Policy Attachment Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			instance, err := compute.NewInstance(ctx, "instance", &compute.InstanceArgs{
//				NetworkInterfaces: compute.InstanceNetworkInterfaceArray{
//					&compute.InstanceNetworkInterfaceArgs{
//						AccessConfigs: compute.InstanceNetworkInterfaceAccessConfigArray{
//							&compute.InstanceNetworkInterfaceAccessConfigArgs{},
//						},
//						Network: pulumi.String("default"),
//					},
//				},
//				Name:        pulumi.String("my-instance"),
//				MachineType: pulumi.String("e2-medium"),
//				Zone:        pulumi.String("us-central1-a"),
//				BootDisk: &compute.InstanceBootDiskArgs{
//					InitializeParams: &compute.InstanceBootDiskInitializeParamsArgs{
//						Image: pulumi.String("debian-cloud/debian-11"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			policy, err := compute.NewResourcePolicy(ctx, "policy", &compute.ResourcePolicyArgs{
//				Name:   pulumi.String("my-resource-policy"),
//				Region: pulumi.String("us-central1"),
//				InstanceSchedulePolicy: &compute.ResourcePolicyInstanceSchedulePolicyArgs{
//					VmStartSchedule: &compute.ResourcePolicyInstanceSchedulePolicyVmStartScheduleArgs{
//						Schedule: pulumi.String("0 8 * * *"),
//					},
//					VmStopSchedule: &compute.ResourcePolicyInstanceSchedulePolicyVmStopScheduleArgs{
//						Schedule: pulumi.String("0 18 * * *"),
//					},
//					TimeZone: pulumi.String("America/New_York"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewResourcePolicyAttachment(ctx, "attachment", &compute.ResourcePolicyAttachmentArgs{
//				Name:     policy.Name,
//				Instance: instance.Name,
//				Zone:     pulumi.String("us-central1-a"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ResourcePolicyAttachment can be imported using any of these accepted formats:
//
// * `projects/{{project}}/zones/{{zone}}/instances/{{instance}}/{{name}}`
//
// * `{{project}}/{{zone}}/{{instance}}/{{name}}`
//
// * `{{zone}}/{{instance}}/{{name}}`
//
// * `{{instance}}/{{name}}`
//
// When using the `pulumi import` command, ResourcePolicyAttachment can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:compute/resourcePolicyAttachment:ResourcePolicyAttachment default projects/{{project}}/zones/{{zone}}/instances/{{instance}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/resourcePolicyAttachment:ResourcePolicyAttachment default {{project}}/{{zone}}/{{instance}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/resourcePolicyAttachment:ResourcePolicyAttachment default {{zone}}/{{instance}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/resourcePolicyAttachment:ResourcePolicyAttachment default {{instance}}/{{name}}
// ```
type ResourcePolicyAttachment struct {
	pulumi.CustomResourceState

	// The name of the instance in which the resource policies are attached to.
	//
	// ***
	Instance pulumi.StringOutput `pulumi:"instance"`
	// The resource policy to be attached to the instance for scheduling start/stop
	// operations. Do not specify the self link.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// A reference to the zone where the instance resides.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewResourcePolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewResourcePolicyAttachment(ctx *pulumi.Context,
	name string, args *ResourcePolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*ResourcePolicyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourcePolicyAttachment
	err := ctx.RegisterResource("gcp:compute/resourcePolicyAttachment:ResourcePolicyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourcePolicyAttachment gets an existing ResourcePolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourcePolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourcePolicyAttachmentState, opts ...pulumi.ResourceOption) (*ResourcePolicyAttachment, error) {
	var resource ResourcePolicyAttachment
	err := ctx.ReadResource("gcp:compute/resourcePolicyAttachment:ResourcePolicyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourcePolicyAttachment resources.
type resourcePolicyAttachmentState struct {
	// The name of the instance in which the resource policies are attached to.
	//
	// ***
	Instance *string `pulumi:"instance"`
	// The resource policy to be attached to the instance for scheduling start/stop
	// operations. Do not specify the self link.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A reference to the zone where the instance resides.
	Zone *string `pulumi:"zone"`
}

type ResourcePolicyAttachmentState struct {
	// The name of the instance in which the resource policies are attached to.
	//
	// ***
	Instance pulumi.StringPtrInput
	// The resource policy to be attached to the instance for scheduling start/stop
	// operations. Do not specify the self link.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// A reference to the zone where the instance resides.
	Zone pulumi.StringPtrInput
}

func (ResourcePolicyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcePolicyAttachmentState)(nil)).Elem()
}

type resourcePolicyAttachmentArgs struct {
	// The name of the instance in which the resource policies are attached to.
	//
	// ***
	Instance string `pulumi:"instance"`
	// The resource policy to be attached to the instance for scheduling start/stop
	// operations. Do not specify the self link.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A reference to the zone where the instance resides.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a ResourcePolicyAttachment resource.
type ResourcePolicyAttachmentArgs struct {
	// The name of the instance in which the resource policies are attached to.
	//
	// ***
	Instance pulumi.StringInput
	// The resource policy to be attached to the instance for scheduling start/stop
	// operations. Do not specify the self link.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// A reference to the zone where the instance resides.
	Zone pulumi.StringPtrInput
}

func (ResourcePolicyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcePolicyAttachmentArgs)(nil)).Elem()
}

type ResourcePolicyAttachmentInput interface {
	pulumi.Input

	ToResourcePolicyAttachmentOutput() ResourcePolicyAttachmentOutput
	ToResourcePolicyAttachmentOutputWithContext(ctx context.Context) ResourcePolicyAttachmentOutput
}

func (*ResourcePolicyAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyAttachment)(nil)).Elem()
}

func (i *ResourcePolicyAttachment) ToResourcePolicyAttachmentOutput() ResourcePolicyAttachmentOutput {
	return i.ToResourcePolicyAttachmentOutputWithContext(context.Background())
}

func (i *ResourcePolicyAttachment) ToResourcePolicyAttachmentOutputWithContext(ctx context.Context) ResourcePolicyAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyAttachmentOutput)
}

// ResourcePolicyAttachmentArrayInput is an input type that accepts ResourcePolicyAttachmentArray and ResourcePolicyAttachmentArrayOutput values.
// You can construct a concrete instance of `ResourcePolicyAttachmentArrayInput` via:
//
//	ResourcePolicyAttachmentArray{ ResourcePolicyAttachmentArgs{...} }
type ResourcePolicyAttachmentArrayInput interface {
	pulumi.Input

	ToResourcePolicyAttachmentArrayOutput() ResourcePolicyAttachmentArrayOutput
	ToResourcePolicyAttachmentArrayOutputWithContext(context.Context) ResourcePolicyAttachmentArrayOutput
}

type ResourcePolicyAttachmentArray []ResourcePolicyAttachmentInput

func (ResourcePolicyAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourcePolicyAttachment)(nil)).Elem()
}

func (i ResourcePolicyAttachmentArray) ToResourcePolicyAttachmentArrayOutput() ResourcePolicyAttachmentArrayOutput {
	return i.ToResourcePolicyAttachmentArrayOutputWithContext(context.Background())
}

func (i ResourcePolicyAttachmentArray) ToResourcePolicyAttachmentArrayOutputWithContext(ctx context.Context) ResourcePolicyAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyAttachmentArrayOutput)
}

// ResourcePolicyAttachmentMapInput is an input type that accepts ResourcePolicyAttachmentMap and ResourcePolicyAttachmentMapOutput values.
// You can construct a concrete instance of `ResourcePolicyAttachmentMapInput` via:
//
//	ResourcePolicyAttachmentMap{ "key": ResourcePolicyAttachmentArgs{...} }
type ResourcePolicyAttachmentMapInput interface {
	pulumi.Input

	ToResourcePolicyAttachmentMapOutput() ResourcePolicyAttachmentMapOutput
	ToResourcePolicyAttachmentMapOutputWithContext(context.Context) ResourcePolicyAttachmentMapOutput
}

type ResourcePolicyAttachmentMap map[string]ResourcePolicyAttachmentInput

func (ResourcePolicyAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourcePolicyAttachment)(nil)).Elem()
}

func (i ResourcePolicyAttachmentMap) ToResourcePolicyAttachmentMapOutput() ResourcePolicyAttachmentMapOutput {
	return i.ToResourcePolicyAttachmentMapOutputWithContext(context.Background())
}

func (i ResourcePolicyAttachmentMap) ToResourcePolicyAttachmentMapOutputWithContext(ctx context.Context) ResourcePolicyAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyAttachmentMapOutput)
}

type ResourcePolicyAttachmentOutput struct{ *pulumi.OutputState }

func (ResourcePolicyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyAttachment)(nil)).Elem()
}

func (o ResourcePolicyAttachmentOutput) ToResourcePolicyAttachmentOutput() ResourcePolicyAttachmentOutput {
	return o
}

func (o ResourcePolicyAttachmentOutput) ToResourcePolicyAttachmentOutputWithContext(ctx context.Context) ResourcePolicyAttachmentOutput {
	return o
}

// The name of the instance in which the resource policies are attached to.
//
// ***
func (o ResourcePolicyAttachmentOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyAttachment) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

// The resource policy to be attached to the instance for scheduling start/stop
// operations. Do not specify the self link.
func (o ResourcePolicyAttachmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyAttachment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ResourcePolicyAttachmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyAttachment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A reference to the zone where the instance resides.
func (o ResourcePolicyAttachmentOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyAttachment) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type ResourcePolicyAttachmentArrayOutput struct{ *pulumi.OutputState }

func (ResourcePolicyAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourcePolicyAttachment)(nil)).Elem()
}

func (o ResourcePolicyAttachmentArrayOutput) ToResourcePolicyAttachmentArrayOutput() ResourcePolicyAttachmentArrayOutput {
	return o
}

func (o ResourcePolicyAttachmentArrayOutput) ToResourcePolicyAttachmentArrayOutputWithContext(ctx context.Context) ResourcePolicyAttachmentArrayOutput {
	return o
}

func (o ResourcePolicyAttachmentArrayOutput) Index(i pulumi.IntInput) ResourcePolicyAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourcePolicyAttachment {
		return vs[0].([]*ResourcePolicyAttachment)[vs[1].(int)]
	}).(ResourcePolicyAttachmentOutput)
}

type ResourcePolicyAttachmentMapOutput struct{ *pulumi.OutputState }

func (ResourcePolicyAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourcePolicyAttachment)(nil)).Elem()
}

func (o ResourcePolicyAttachmentMapOutput) ToResourcePolicyAttachmentMapOutput() ResourcePolicyAttachmentMapOutput {
	return o
}

func (o ResourcePolicyAttachmentMapOutput) ToResourcePolicyAttachmentMapOutputWithContext(ctx context.Context) ResourcePolicyAttachmentMapOutput {
	return o
}

func (o ResourcePolicyAttachmentMapOutput) MapIndex(k pulumi.StringInput) ResourcePolicyAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourcePolicyAttachment {
		return vs[0].(map[string]*ResourcePolicyAttachment)[vs[1].(string)]
	}).(ResourcePolicyAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePolicyAttachmentInput)(nil)).Elem(), &ResourcePolicyAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePolicyAttachmentArrayInput)(nil)).Elem(), ResourcePolicyAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePolicyAttachmentMapInput)(nil)).Elem(), ResourcePolicyAttachmentMap{})
	pulumi.RegisterOutputType(ResourcePolicyAttachmentOutput{})
	pulumi.RegisterOutputType(ResourcePolicyAttachmentArrayOutput{})
	pulumi.RegisterOutputType(ResourcePolicyAttachmentMapOutput{})
}
