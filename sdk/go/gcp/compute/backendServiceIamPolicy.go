// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/global/backendServices/{{name}} * {{project}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Compute Engine backendservice IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:compute/backendServiceIamPolicy:BackendServiceIamPolicy editor "projects/{{project}}/global/backendServices/{{backend_service}} roles/compute.admin user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:compute/backendServiceIamPolicy:BackendServiceIamPolicy editor "projects/{{project}}/global/backendServices/{{backend_service}} roles/compute.admin"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:compute/backendServiceIamPolicy:BackendServiceIamPolicy editor projects/{{project}}/global/backendServices/{{backend_service}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type BackendServiceIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewBackendServiceIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewBackendServiceIamPolicy(ctx *pulumi.Context,
	name string, args *BackendServiceIamPolicyArgs, opts ...pulumi.ResourceOption) (*BackendServiceIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackendServiceIamPolicy
	err := ctx.RegisterResource("gcp:compute/backendServiceIamPolicy:BackendServiceIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendServiceIamPolicy gets an existing BackendServiceIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendServiceIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendServiceIamPolicyState, opts ...pulumi.ResourceOption) (*BackendServiceIamPolicy, error) {
	var resource BackendServiceIamPolicy
	err := ctx.ReadResource("gcp:compute/backendServiceIamPolicy:BackendServiceIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendServiceIamPolicy resources.
type backendServiceIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
}

type BackendServiceIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
}

func (BackendServiceIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendServiceIamPolicyState)(nil)).Elem()
}

type backendServiceIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a BackendServiceIamPolicy resource.
type BackendServiceIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
}

func (BackendServiceIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendServiceIamPolicyArgs)(nil)).Elem()
}

type BackendServiceIamPolicyInput interface {
	pulumi.Input

	ToBackendServiceIamPolicyOutput() BackendServiceIamPolicyOutput
	ToBackendServiceIamPolicyOutputWithContext(ctx context.Context) BackendServiceIamPolicyOutput
}

func (*BackendServiceIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceIamPolicy)(nil)).Elem()
}

func (i *BackendServiceIamPolicy) ToBackendServiceIamPolicyOutput() BackendServiceIamPolicyOutput {
	return i.ToBackendServiceIamPolicyOutputWithContext(context.Background())
}

func (i *BackendServiceIamPolicy) ToBackendServiceIamPolicyOutputWithContext(ctx context.Context) BackendServiceIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIamPolicyOutput)
}

// BackendServiceIamPolicyArrayInput is an input type that accepts BackendServiceIamPolicyArray and BackendServiceIamPolicyArrayOutput values.
// You can construct a concrete instance of `BackendServiceIamPolicyArrayInput` via:
//
//	BackendServiceIamPolicyArray{ BackendServiceIamPolicyArgs{...} }
type BackendServiceIamPolicyArrayInput interface {
	pulumi.Input

	ToBackendServiceIamPolicyArrayOutput() BackendServiceIamPolicyArrayOutput
	ToBackendServiceIamPolicyArrayOutputWithContext(context.Context) BackendServiceIamPolicyArrayOutput
}

type BackendServiceIamPolicyArray []BackendServiceIamPolicyInput

func (BackendServiceIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendServiceIamPolicy)(nil)).Elem()
}

func (i BackendServiceIamPolicyArray) ToBackendServiceIamPolicyArrayOutput() BackendServiceIamPolicyArrayOutput {
	return i.ToBackendServiceIamPolicyArrayOutputWithContext(context.Background())
}

func (i BackendServiceIamPolicyArray) ToBackendServiceIamPolicyArrayOutputWithContext(ctx context.Context) BackendServiceIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIamPolicyArrayOutput)
}

// BackendServiceIamPolicyMapInput is an input type that accepts BackendServiceIamPolicyMap and BackendServiceIamPolicyMapOutput values.
// You can construct a concrete instance of `BackendServiceIamPolicyMapInput` via:
//
//	BackendServiceIamPolicyMap{ "key": BackendServiceIamPolicyArgs{...} }
type BackendServiceIamPolicyMapInput interface {
	pulumi.Input

	ToBackendServiceIamPolicyMapOutput() BackendServiceIamPolicyMapOutput
	ToBackendServiceIamPolicyMapOutputWithContext(context.Context) BackendServiceIamPolicyMapOutput
}

type BackendServiceIamPolicyMap map[string]BackendServiceIamPolicyInput

func (BackendServiceIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendServiceIamPolicy)(nil)).Elem()
}

func (i BackendServiceIamPolicyMap) ToBackendServiceIamPolicyMapOutput() BackendServiceIamPolicyMapOutput {
	return i.ToBackendServiceIamPolicyMapOutputWithContext(context.Background())
}

func (i BackendServiceIamPolicyMap) ToBackendServiceIamPolicyMapOutputWithContext(ctx context.Context) BackendServiceIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIamPolicyMapOutput)
}

type BackendServiceIamPolicyOutput struct{ *pulumi.OutputState }

func (BackendServiceIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceIamPolicy)(nil)).Elem()
}

func (o BackendServiceIamPolicyOutput) ToBackendServiceIamPolicyOutput() BackendServiceIamPolicyOutput {
	return o
}

func (o BackendServiceIamPolicyOutput) ToBackendServiceIamPolicyOutputWithContext(ctx context.Context) BackendServiceIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o BackendServiceIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendServiceIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o BackendServiceIamPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendServiceIamPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o BackendServiceIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendServiceIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o BackendServiceIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendServiceIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type BackendServiceIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (BackendServiceIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendServiceIamPolicy)(nil)).Elem()
}

func (o BackendServiceIamPolicyArrayOutput) ToBackendServiceIamPolicyArrayOutput() BackendServiceIamPolicyArrayOutput {
	return o
}

func (o BackendServiceIamPolicyArrayOutput) ToBackendServiceIamPolicyArrayOutputWithContext(ctx context.Context) BackendServiceIamPolicyArrayOutput {
	return o
}

func (o BackendServiceIamPolicyArrayOutput) Index(i pulumi.IntInput) BackendServiceIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackendServiceIamPolicy {
		return vs[0].([]*BackendServiceIamPolicy)[vs[1].(int)]
	}).(BackendServiceIamPolicyOutput)
}

type BackendServiceIamPolicyMapOutput struct{ *pulumi.OutputState }

func (BackendServiceIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendServiceIamPolicy)(nil)).Elem()
}

func (o BackendServiceIamPolicyMapOutput) ToBackendServiceIamPolicyMapOutput() BackendServiceIamPolicyMapOutput {
	return o
}

func (o BackendServiceIamPolicyMapOutput) ToBackendServiceIamPolicyMapOutputWithContext(ctx context.Context) BackendServiceIamPolicyMapOutput {
	return o
}

func (o BackendServiceIamPolicyMapOutput) MapIndex(k pulumi.StringInput) BackendServiceIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackendServiceIamPolicy {
		return vs[0].(map[string]*BackendServiceIamPolicy)[vs[1].(string)]
	}).(BackendServiceIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendServiceIamPolicyInput)(nil)).Elem(), &BackendServiceIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendServiceIamPolicyArrayInput)(nil)).Elem(), BackendServiceIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendServiceIamPolicyMapInput)(nil)).Elem(), BackendServiceIamPolicyMap{})
	pulumi.RegisterOutputType(BackendServiceIamPolicyOutput{})
	pulumi.RegisterOutputType(BackendServiceIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(BackendServiceIamPolicyMapOutput{})
}
