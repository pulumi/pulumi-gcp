// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BackendServiceIamPolicy struct {
	pulumi.CustomResourceState

	Etag       pulumi.StringOutput `pulumi:"etag"`
	Name       pulumi.StringOutput `pulumi:"name"`
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	Project    pulumi.StringOutput `pulumi:"project"`
}

// NewBackendServiceIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewBackendServiceIamPolicy(ctx *pulumi.Context,
	name string, args *BackendServiceIamPolicyArgs, opts ...pulumi.ResourceOption) (*BackendServiceIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	var resource BackendServiceIamPolicy
	err := ctx.RegisterResource("gcp:compute/backendServiceIamPolicy:BackendServiceIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendServiceIamPolicy gets an existing BackendServiceIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendServiceIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendServiceIamPolicyState, opts ...pulumi.ResourceOption) (*BackendServiceIamPolicy, error) {
	var resource BackendServiceIamPolicy
	err := ctx.ReadResource("gcp:compute/backendServiceIamPolicy:BackendServiceIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendServiceIamPolicy resources.
type backendServiceIamPolicyState struct {
	Etag       *string `pulumi:"etag"`
	Name       *string `pulumi:"name"`
	PolicyData *string `pulumi:"policyData"`
	Project    *string `pulumi:"project"`
}

type BackendServiceIamPolicyState struct {
	Etag       pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	PolicyData pulumi.StringPtrInput
	Project    pulumi.StringPtrInput
}

func (BackendServiceIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendServiceIamPolicyState)(nil)).Elem()
}

type backendServiceIamPolicyArgs struct {
	Name       *string `pulumi:"name"`
	PolicyData string  `pulumi:"policyData"`
	Project    *string `pulumi:"project"`
}

// The set of arguments for constructing a BackendServiceIamPolicy resource.
type BackendServiceIamPolicyArgs struct {
	Name       pulumi.StringPtrInput
	PolicyData pulumi.StringInput
	Project    pulumi.StringPtrInput
}

func (BackendServiceIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendServiceIamPolicyArgs)(nil)).Elem()
}

type BackendServiceIamPolicyInput interface {
	pulumi.Input

	ToBackendServiceIamPolicyOutput() BackendServiceIamPolicyOutput
	ToBackendServiceIamPolicyOutputWithContext(ctx context.Context) BackendServiceIamPolicyOutput
}

func (*BackendServiceIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceIamPolicy)(nil)).Elem()
}

func (i *BackendServiceIamPolicy) ToBackendServiceIamPolicyOutput() BackendServiceIamPolicyOutput {
	return i.ToBackendServiceIamPolicyOutputWithContext(context.Background())
}

func (i *BackendServiceIamPolicy) ToBackendServiceIamPolicyOutputWithContext(ctx context.Context) BackendServiceIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIamPolicyOutput)
}

// BackendServiceIamPolicyArrayInput is an input type that accepts BackendServiceIamPolicyArray and BackendServiceIamPolicyArrayOutput values.
// You can construct a concrete instance of `BackendServiceIamPolicyArrayInput` via:
//
//          BackendServiceIamPolicyArray{ BackendServiceIamPolicyArgs{...} }
type BackendServiceIamPolicyArrayInput interface {
	pulumi.Input

	ToBackendServiceIamPolicyArrayOutput() BackendServiceIamPolicyArrayOutput
	ToBackendServiceIamPolicyArrayOutputWithContext(context.Context) BackendServiceIamPolicyArrayOutput
}

type BackendServiceIamPolicyArray []BackendServiceIamPolicyInput

func (BackendServiceIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendServiceIamPolicy)(nil)).Elem()
}

func (i BackendServiceIamPolicyArray) ToBackendServiceIamPolicyArrayOutput() BackendServiceIamPolicyArrayOutput {
	return i.ToBackendServiceIamPolicyArrayOutputWithContext(context.Background())
}

func (i BackendServiceIamPolicyArray) ToBackendServiceIamPolicyArrayOutputWithContext(ctx context.Context) BackendServiceIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIamPolicyArrayOutput)
}

// BackendServiceIamPolicyMapInput is an input type that accepts BackendServiceIamPolicyMap and BackendServiceIamPolicyMapOutput values.
// You can construct a concrete instance of `BackendServiceIamPolicyMapInput` via:
//
//          BackendServiceIamPolicyMap{ "key": BackendServiceIamPolicyArgs{...} }
type BackendServiceIamPolicyMapInput interface {
	pulumi.Input

	ToBackendServiceIamPolicyMapOutput() BackendServiceIamPolicyMapOutput
	ToBackendServiceIamPolicyMapOutputWithContext(context.Context) BackendServiceIamPolicyMapOutput
}

type BackendServiceIamPolicyMap map[string]BackendServiceIamPolicyInput

func (BackendServiceIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendServiceIamPolicy)(nil)).Elem()
}

func (i BackendServiceIamPolicyMap) ToBackendServiceIamPolicyMapOutput() BackendServiceIamPolicyMapOutput {
	return i.ToBackendServiceIamPolicyMapOutputWithContext(context.Background())
}

func (i BackendServiceIamPolicyMap) ToBackendServiceIamPolicyMapOutputWithContext(ctx context.Context) BackendServiceIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIamPolicyMapOutput)
}

type BackendServiceIamPolicyOutput struct{ *pulumi.OutputState }

func (BackendServiceIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceIamPolicy)(nil)).Elem()
}

func (o BackendServiceIamPolicyOutput) ToBackendServiceIamPolicyOutput() BackendServiceIamPolicyOutput {
	return o
}

func (o BackendServiceIamPolicyOutput) ToBackendServiceIamPolicyOutputWithContext(ctx context.Context) BackendServiceIamPolicyOutput {
	return o
}

type BackendServiceIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (BackendServiceIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendServiceIamPolicy)(nil)).Elem()
}

func (o BackendServiceIamPolicyArrayOutput) ToBackendServiceIamPolicyArrayOutput() BackendServiceIamPolicyArrayOutput {
	return o
}

func (o BackendServiceIamPolicyArrayOutput) ToBackendServiceIamPolicyArrayOutputWithContext(ctx context.Context) BackendServiceIamPolicyArrayOutput {
	return o
}

func (o BackendServiceIamPolicyArrayOutput) Index(i pulumi.IntInput) BackendServiceIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackendServiceIamPolicy {
		return vs[0].([]*BackendServiceIamPolicy)[vs[1].(int)]
	}).(BackendServiceIamPolicyOutput)
}

type BackendServiceIamPolicyMapOutput struct{ *pulumi.OutputState }

func (BackendServiceIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendServiceIamPolicy)(nil)).Elem()
}

func (o BackendServiceIamPolicyMapOutput) ToBackendServiceIamPolicyMapOutput() BackendServiceIamPolicyMapOutput {
	return o
}

func (o BackendServiceIamPolicyMapOutput) ToBackendServiceIamPolicyMapOutputWithContext(ctx context.Context) BackendServiceIamPolicyMapOutput {
	return o
}

func (o BackendServiceIamPolicyMapOutput) MapIndex(k pulumi.StringInput) BackendServiceIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackendServiceIamPolicy {
		return vs[0].(map[string]*BackendServiceIamPolicy)[vs[1].(string)]
	}).(BackendServiceIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendServiceIamPolicyInput)(nil)).Elem(), &BackendServiceIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendServiceIamPolicyArrayInput)(nil)).Elem(), BackendServiceIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendServiceIamPolicyMapInput)(nil)).Elem(), BackendServiceIamPolicyMap{})
	pulumi.RegisterOutputType(BackendServiceIamPolicyOutput{})
	pulumi.RegisterOutputType(BackendServiceIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(BackendServiceIamPolicyMapOutput{})
}
