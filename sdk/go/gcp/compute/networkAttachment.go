// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
//
// ## Import
//
// # NetworkAttachment can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:compute/networkAttachment:NetworkAttachment default projects/{{project}}/regions/{{region}}/networkAttachments/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/networkAttachment:NetworkAttachment default {{project}}/{{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/networkAttachment:NetworkAttachment default {{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/networkAttachment:NetworkAttachment default {{name}}
//
// ```
type NetworkAttachment struct {
	pulumi.CustomResourceState

	// An array of connections for all the producers connected to this network attachment.
	// Structure is documented below.
	ConnectionEndpoints NetworkAttachmentConnectionEndpointArrayOutput `pulumi:"connectionEndpoints"`
	// The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
	// Possible values are: `ACCEPT_AUTOMATIC`, `ACCEPT_MANUAL`, `INVALID`.
	ConnectionPreference pulumi.StringOutput `pulumi:"connectionPreference"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Fingerprint of this resource. A hash of the contents stored in this object. This
	// field is used in optimistic locking. An up-to-date fingerprint must be provided in order to patch.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// Type of the resource.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression a-z? which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// The URL of the network which the Network Attachment belongs to. Practically it is inferred by fetching the network of the first subnetwork associated.
	// Because it is required that all the subnetworks must be from the same network, it is assured that the Network Attachment belongs to the same network as all the subnetworks.
	Network pulumi.StringOutput `pulumi:"network"`
	// Projects that are allowed to connect to this network attachment. The project can be specified using its id or number.
	ProducerAcceptLists pulumi.StringArrayOutput `pulumi:"producerAcceptLists"`
	// Projects that are not allowed to connect to this network attachment. The project can be specified using its id or number.
	ProducerRejectLists pulumi.StringArrayOutput `pulumi:"producerRejectLists"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// URL of the region where the network attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
	//
	// ***
	Region pulumi.StringOutput `pulumi:"region"`
	// Server-defined URL for the resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Server-defined URL for this resource's resource id.
	SelfLinkWithId pulumi.StringOutput `pulumi:"selfLinkWithId"`
	// An array of URLs where each entry is the URL of a subnet provided by the service consumer to use for endpoints in the producers that connect to this network attachment.
	Subnetworks pulumi.StringArrayOutput `pulumi:"subnetworks"`
}

// NewNetworkAttachment registers a new resource with the given unique name, arguments, and options.
func NewNetworkAttachment(ctx *pulumi.Context,
	name string, args *NetworkAttachmentArgs, opts ...pulumi.ResourceOption) (*NetworkAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionPreference == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionPreference'")
	}
	if args.Subnetworks == nil {
		return nil, errors.New("invalid value for required argument 'Subnetworks'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkAttachment
	err := ctx.RegisterResource("gcp:compute/networkAttachment:NetworkAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAttachment gets an existing NetworkAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAttachmentState, opts ...pulumi.ResourceOption) (*NetworkAttachment, error) {
	var resource NetworkAttachment
	err := ctx.ReadResource("gcp:compute/networkAttachment:NetworkAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAttachment resources.
type networkAttachmentState struct {
	// An array of connections for all the producers connected to this network attachment.
	// Structure is documented below.
	ConnectionEndpoints []NetworkAttachmentConnectionEndpoint `pulumi:"connectionEndpoints"`
	// The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
	// Possible values are: `ACCEPT_AUTOMATIC`, `ACCEPT_MANUAL`, `INVALID`.
	ConnectionPreference *string `pulumi:"connectionPreference"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// Fingerprint of this resource. A hash of the contents stored in this object. This
	// field is used in optimistic locking. An up-to-date fingerprint must be provided in order to patch.
	Fingerprint *string `pulumi:"fingerprint"`
	// Type of the resource.
	Kind *string `pulumi:"kind"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression a-z? which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The URL of the network which the Network Attachment belongs to. Practically it is inferred by fetching the network of the first subnetwork associated.
	// Because it is required that all the subnetworks must be from the same network, it is assured that the Network Attachment belongs to the same network as all the subnetworks.
	Network *string `pulumi:"network"`
	// Projects that are allowed to connect to this network attachment. The project can be specified using its id or number.
	ProducerAcceptLists []string `pulumi:"producerAcceptLists"`
	// Projects that are not allowed to connect to this network attachment. The project can be specified using its id or number.
	ProducerRejectLists []string `pulumi:"producerRejectLists"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// URL of the region where the network attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
	//
	// ***
	Region *string `pulumi:"region"`
	// Server-defined URL for the resource.
	SelfLink *string `pulumi:"selfLink"`
	// Server-defined URL for this resource's resource id.
	SelfLinkWithId *string `pulumi:"selfLinkWithId"`
	// An array of URLs where each entry is the URL of a subnet provided by the service consumer to use for endpoints in the producers that connect to this network attachment.
	Subnetworks []string `pulumi:"subnetworks"`
}

type NetworkAttachmentState struct {
	// An array of connections for all the producers connected to this network attachment.
	// Structure is documented below.
	ConnectionEndpoints NetworkAttachmentConnectionEndpointArrayInput
	// The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
	// Possible values are: `ACCEPT_AUTOMATIC`, `ACCEPT_MANUAL`, `INVALID`.
	ConnectionPreference pulumi.StringPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// Fingerprint of this resource. A hash of the contents stored in this object. This
	// field is used in optimistic locking. An up-to-date fingerprint must be provided in order to patch.
	Fingerprint pulumi.StringPtrInput
	// Type of the resource.
	Kind pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression a-z? which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The URL of the network which the Network Attachment belongs to. Practically it is inferred by fetching the network of the first subnetwork associated.
	// Because it is required that all the subnetworks must be from the same network, it is assured that the Network Attachment belongs to the same network as all the subnetworks.
	Network pulumi.StringPtrInput
	// Projects that are allowed to connect to this network attachment. The project can be specified using its id or number.
	ProducerAcceptLists pulumi.StringArrayInput
	// Projects that are not allowed to connect to this network attachment. The project can be specified using its id or number.
	ProducerRejectLists pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// URL of the region where the network attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
	//
	// ***
	Region pulumi.StringPtrInput
	// Server-defined URL for the resource.
	SelfLink pulumi.StringPtrInput
	// Server-defined URL for this resource's resource id.
	SelfLinkWithId pulumi.StringPtrInput
	// An array of URLs where each entry is the URL of a subnet provided by the service consumer to use for endpoints in the producers that connect to this network attachment.
	Subnetworks pulumi.StringArrayInput
}

func (NetworkAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAttachmentState)(nil)).Elem()
}

type networkAttachmentArgs struct {
	// The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
	// Possible values are: `ACCEPT_AUTOMATIC`, `ACCEPT_MANUAL`, `INVALID`.
	ConnectionPreference string `pulumi:"connectionPreference"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression a-z? which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// Projects that are allowed to connect to this network attachment. The project can be specified using its id or number.
	ProducerAcceptLists []string `pulumi:"producerAcceptLists"`
	// Projects that are not allowed to connect to this network attachment. The project can be specified using its id or number.
	ProducerRejectLists []string `pulumi:"producerRejectLists"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// URL of the region where the network attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
	//
	// ***
	Region *string `pulumi:"region"`
	// An array of URLs where each entry is the URL of a subnet provided by the service consumer to use for endpoints in the producers that connect to this network attachment.
	Subnetworks []string `pulumi:"subnetworks"`
}

// The set of arguments for constructing a NetworkAttachment resource.
type NetworkAttachmentArgs struct {
	// The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
	// Possible values are: `ACCEPT_AUTOMATIC`, `ACCEPT_MANUAL`, `INVALID`.
	ConnectionPreference pulumi.StringInput
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression a-z? which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// Projects that are allowed to connect to this network attachment. The project can be specified using its id or number.
	ProducerAcceptLists pulumi.StringArrayInput
	// Projects that are not allowed to connect to this network attachment. The project can be specified using its id or number.
	ProducerRejectLists pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// URL of the region where the network attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
	//
	// ***
	Region pulumi.StringPtrInput
	// An array of URLs where each entry is the URL of a subnet provided by the service consumer to use for endpoints in the producers that connect to this network attachment.
	Subnetworks pulumi.StringArrayInput
}

func (NetworkAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAttachmentArgs)(nil)).Elem()
}

type NetworkAttachmentInput interface {
	pulumi.Input

	ToNetworkAttachmentOutput() NetworkAttachmentOutput
	ToNetworkAttachmentOutputWithContext(ctx context.Context) NetworkAttachmentOutput
}

func (*NetworkAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAttachment)(nil)).Elem()
}

func (i *NetworkAttachment) ToNetworkAttachmentOutput() NetworkAttachmentOutput {
	return i.ToNetworkAttachmentOutputWithContext(context.Background())
}

func (i *NetworkAttachment) ToNetworkAttachmentOutputWithContext(ctx context.Context) NetworkAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAttachmentOutput)
}

func (i *NetworkAttachment) ToOutput(ctx context.Context) pulumix.Output[*NetworkAttachment] {
	return pulumix.Output[*NetworkAttachment]{
		OutputState: i.ToNetworkAttachmentOutputWithContext(ctx).OutputState,
	}
}

// NetworkAttachmentArrayInput is an input type that accepts NetworkAttachmentArray and NetworkAttachmentArrayOutput values.
// You can construct a concrete instance of `NetworkAttachmentArrayInput` via:
//
//	NetworkAttachmentArray{ NetworkAttachmentArgs{...} }
type NetworkAttachmentArrayInput interface {
	pulumi.Input

	ToNetworkAttachmentArrayOutput() NetworkAttachmentArrayOutput
	ToNetworkAttachmentArrayOutputWithContext(context.Context) NetworkAttachmentArrayOutput
}

type NetworkAttachmentArray []NetworkAttachmentInput

func (NetworkAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAttachment)(nil)).Elem()
}

func (i NetworkAttachmentArray) ToNetworkAttachmentArrayOutput() NetworkAttachmentArrayOutput {
	return i.ToNetworkAttachmentArrayOutputWithContext(context.Background())
}

func (i NetworkAttachmentArray) ToNetworkAttachmentArrayOutputWithContext(ctx context.Context) NetworkAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAttachmentArrayOutput)
}

func (i NetworkAttachmentArray) ToOutput(ctx context.Context) pulumix.Output[[]*NetworkAttachment] {
	return pulumix.Output[[]*NetworkAttachment]{
		OutputState: i.ToNetworkAttachmentArrayOutputWithContext(ctx).OutputState,
	}
}

// NetworkAttachmentMapInput is an input type that accepts NetworkAttachmentMap and NetworkAttachmentMapOutput values.
// You can construct a concrete instance of `NetworkAttachmentMapInput` via:
//
//	NetworkAttachmentMap{ "key": NetworkAttachmentArgs{...} }
type NetworkAttachmentMapInput interface {
	pulumi.Input

	ToNetworkAttachmentMapOutput() NetworkAttachmentMapOutput
	ToNetworkAttachmentMapOutputWithContext(context.Context) NetworkAttachmentMapOutput
}

type NetworkAttachmentMap map[string]NetworkAttachmentInput

func (NetworkAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAttachment)(nil)).Elem()
}

func (i NetworkAttachmentMap) ToNetworkAttachmentMapOutput() NetworkAttachmentMapOutput {
	return i.ToNetworkAttachmentMapOutputWithContext(context.Background())
}

func (i NetworkAttachmentMap) ToNetworkAttachmentMapOutputWithContext(ctx context.Context) NetworkAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAttachmentMapOutput)
}

func (i NetworkAttachmentMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*NetworkAttachment] {
	return pulumix.Output[map[string]*NetworkAttachment]{
		OutputState: i.ToNetworkAttachmentMapOutputWithContext(ctx).OutputState,
	}
}

type NetworkAttachmentOutput struct{ *pulumi.OutputState }

func (NetworkAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAttachment)(nil)).Elem()
}

func (o NetworkAttachmentOutput) ToNetworkAttachmentOutput() NetworkAttachmentOutput {
	return o
}

func (o NetworkAttachmentOutput) ToNetworkAttachmentOutputWithContext(ctx context.Context) NetworkAttachmentOutput {
	return o
}

func (o NetworkAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkAttachment] {
	return pulumix.Output[*NetworkAttachment]{
		OutputState: o.OutputState,
	}
}

// An array of connections for all the producers connected to this network attachment.
// Structure is documented below.
func (o NetworkAttachmentOutput) ConnectionEndpoints() NetworkAttachmentConnectionEndpointArrayOutput {
	return o.ApplyT(func(v *NetworkAttachment) NetworkAttachmentConnectionEndpointArrayOutput {
		return v.ConnectionEndpoints
	}).(NetworkAttachmentConnectionEndpointArrayOutput)
}

// The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
// Possible values are: `ACCEPT_AUTOMATIC`, `ACCEPT_MANUAL`, `INVALID`.
func (o NetworkAttachmentOutput) ConnectionPreference() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAttachment) pulumi.StringOutput { return v.ConnectionPreference }).(pulumi.StringOutput)
}

// Creation timestamp in RFC3339 text format.
func (o NetworkAttachmentOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAttachment) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o NetworkAttachmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAttachment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Fingerprint of this resource. A hash of the contents stored in this object. This
// field is used in optimistic locking. An up-to-date fingerprint must be provided in order to patch.
func (o NetworkAttachmentOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAttachment) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// Type of the resource.
func (o NetworkAttachmentOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAttachment) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression a-z? which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o NetworkAttachmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAttachment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The URL of the network which the Network Attachment belongs to. Practically it is inferred by fetching the network of the first subnetwork associated.
// Because it is required that all the subnetworks must be from the same network, it is assured that the Network Attachment belongs to the same network as all the subnetworks.
func (o NetworkAttachmentOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAttachment) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// Projects that are allowed to connect to this network attachment. The project can be specified using its id or number.
func (o NetworkAttachmentOutput) ProducerAcceptLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkAttachment) pulumi.StringArrayOutput { return v.ProducerAcceptLists }).(pulumi.StringArrayOutput)
}

// Projects that are not allowed to connect to this network attachment. The project can be specified using its id or number.
func (o NetworkAttachmentOutput) ProducerRejectLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkAttachment) pulumi.StringArrayOutput { return v.ProducerRejectLists }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o NetworkAttachmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAttachment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// URL of the region where the network attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
//
// ***
func (o NetworkAttachmentOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAttachment) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Server-defined URL for the resource.
func (o NetworkAttachmentOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAttachment) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Server-defined URL for this resource's resource id.
func (o NetworkAttachmentOutput) SelfLinkWithId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAttachment) pulumi.StringOutput { return v.SelfLinkWithId }).(pulumi.StringOutput)
}

// An array of URLs where each entry is the URL of a subnet provided by the service consumer to use for endpoints in the producers that connect to this network attachment.
func (o NetworkAttachmentOutput) Subnetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkAttachment) pulumi.StringArrayOutput { return v.Subnetworks }).(pulumi.StringArrayOutput)
}

type NetworkAttachmentArrayOutput struct{ *pulumi.OutputState }

func (NetworkAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAttachment)(nil)).Elem()
}

func (o NetworkAttachmentArrayOutput) ToNetworkAttachmentArrayOutput() NetworkAttachmentArrayOutput {
	return o
}

func (o NetworkAttachmentArrayOutput) ToNetworkAttachmentArrayOutputWithContext(ctx context.Context) NetworkAttachmentArrayOutput {
	return o
}

func (o NetworkAttachmentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*NetworkAttachment] {
	return pulumix.Output[[]*NetworkAttachment]{
		OutputState: o.OutputState,
	}
}

func (o NetworkAttachmentArrayOutput) Index(i pulumi.IntInput) NetworkAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkAttachment {
		return vs[0].([]*NetworkAttachment)[vs[1].(int)]
	}).(NetworkAttachmentOutput)
}

type NetworkAttachmentMapOutput struct{ *pulumi.OutputState }

func (NetworkAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAttachment)(nil)).Elem()
}

func (o NetworkAttachmentMapOutput) ToNetworkAttachmentMapOutput() NetworkAttachmentMapOutput {
	return o
}

func (o NetworkAttachmentMapOutput) ToNetworkAttachmentMapOutputWithContext(ctx context.Context) NetworkAttachmentMapOutput {
	return o
}

func (o NetworkAttachmentMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*NetworkAttachment] {
	return pulumix.Output[map[string]*NetworkAttachment]{
		OutputState: o.OutputState,
	}
}

func (o NetworkAttachmentMapOutput) MapIndex(k pulumi.StringInput) NetworkAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkAttachment {
		return vs[0].(map[string]*NetworkAttachment)[vs[1].(string)]
	}).(NetworkAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAttachmentInput)(nil)).Elem(), &NetworkAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAttachmentArrayInput)(nil)).Elem(), NetworkAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAttachmentMapInput)(nil)).Elem(), NetworkAttachmentMap{})
	pulumi.RegisterOutputType(NetworkAttachmentOutput{})
	pulumi.RegisterOutputType(NetworkAttachmentArrayOutput{})
	pulumi.RegisterOutputType(NetworkAttachmentMapOutput{})
}
