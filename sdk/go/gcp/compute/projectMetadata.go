// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages metadata common to all instances for a project in GCE. For more information see
// [the official documentation](https://cloud.google.com/compute/docs/storing-retrieving-metadata)
// and
// [API](https://cloud.google.com/compute/docs/reference/latest/projects/setCommonInstanceMetadata).
// 
// ~> **Note:**  If you want to manage only single key/value pairs within the project metadata
// rather than the entire set, then use
// google_compute_project_metadata_item.
type ProjectMetadata struct {
	s *pulumi.ResourceState
}

// NewProjectMetadata registers a new resource with the given unique name, arguments, and options.
func NewProjectMetadata(ctx *pulumi.Context,
	name string, args *ProjectMetadataArgs, opts ...pulumi.ResourceOpt) (*ProjectMetadata, error) {
	if args == nil || args.Metadata == nil {
		return nil, errors.New("missing required argument 'Metadata'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["metadata"] = nil
		inputs["project"] = nil
	} else {
		inputs["metadata"] = args.Metadata
		inputs["project"] = args.Project
	}
	s, err := ctx.RegisterResource("gcp:compute/projectMetadata:ProjectMetadata", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectMetadata{s: s}, nil
}

// GetProjectMetadata gets an existing ProjectMetadata resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectMetadata(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectMetadataState, opts ...pulumi.ResourceOpt) (*ProjectMetadata, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["metadata"] = state.Metadata
		inputs["project"] = state.Project
	}
	s, err := ctx.ReadResource("gcp:compute/projectMetadata:ProjectMetadata", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectMetadata{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProjectMetadata) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProjectMetadata) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A series of key value pairs. Changing this resource
// updates the GCE state.
func (r *ProjectMetadata) Metadata() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["metadata"])
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (r *ProjectMetadata) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// Input properties used for looking up and filtering ProjectMetadata resources.
type ProjectMetadataState struct {
	// A series of key value pairs. Changing this resource
	// updates the GCE state.
	Metadata interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
}

// The set of arguments for constructing a ProjectMetadata resource.
type ProjectMetadataArgs struct {
	// A series of key value pairs. Changing this resource
	// updates the GCE state.
	Metadata interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
}
