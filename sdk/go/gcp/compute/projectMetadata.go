// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Authoritatively manages metadata common to all instances for a project in GCE. For more information see
// [the official documentation](https://cloud.google.com/compute/docs/storing-retrieving-metadata)
// and
// [API](https://cloud.google.com/compute/docs/reference/latest/projects/setCommonInstanceMetadata).
//
// > **Note:**  This resource manages all project-level metadata including project-level ssh keys.
// Keys unset in config but set on the server will be removed. If you want to manage only single
// key/value pairs within the project metadata rather than the entire set, then use
// google_compute_project_metadata_item.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewProjectMetadata(ctx, "_default", &compute.ProjectMetadataArgs{
// 			Metadata: pulumi.StringMap{
// 				"13":   pulumi.String("42"),
// 				"fizz": pulumi.String("buzz"),
// 				"foo":  pulumi.String("bar"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Adding An SSH Key
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewProjectMetadata(ctx, "mySshKey", &compute.ProjectMetadataArgs{
// 			Metadata: pulumi.StringMap{
// 				"ssh-keys": pulumi.String(fmt.Sprintf("%v%v%v", "      dev:ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILg6UtHDNyMNAh0GjaytsJdrUxjtLy3APXqZfNZhvCeT dev\n", "      foo:ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILg6UtHDNyMNAh0GjaytsJdrUxjtLy3APXqZfNZhvCeT bar\n", "    \n")),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource can be imported using the project ID
//
// ```sh
//  $ pulumi import gcp:compute/projectMetadata:ProjectMetadata foo my-project-id`
// ```
type ProjectMetadata struct {
	pulumi.CustomResourceState

	// A series of key value pairs.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewProjectMetadata registers a new resource with the given unique name, arguments, and options.
func NewProjectMetadata(ctx *pulumi.Context,
	name string, args *ProjectMetadataArgs, opts ...pulumi.ResourceOption) (*ProjectMetadata, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Metadata == nil {
		return nil, errors.New("invalid value for required argument 'Metadata'")
	}
	var resource ProjectMetadata
	err := ctx.RegisterResource("gcp:compute/projectMetadata:ProjectMetadata", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectMetadata gets an existing ProjectMetadata resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectMetadata(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectMetadataState, opts ...pulumi.ResourceOption) (*ProjectMetadata, error) {
	var resource ProjectMetadata
	err := ctx.ReadResource("gcp:compute/projectMetadata:ProjectMetadata", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectMetadata resources.
type projectMetadataState struct {
	// A series of key value pairs.
	Metadata map[string]string `pulumi:"metadata"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

type ProjectMetadataState struct {
	// A series of key value pairs.
	Metadata pulumi.StringMapInput
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ProjectMetadataState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMetadataState)(nil)).Elem()
}

type projectMetadataArgs struct {
	// A series of key value pairs.
	Metadata map[string]string `pulumi:"metadata"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a ProjectMetadata resource.
type ProjectMetadataArgs struct {
	// A series of key value pairs.
	Metadata pulumi.StringMapInput
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ProjectMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMetadataArgs)(nil)).Elem()
}

type ProjectMetadataInput interface {
	pulumi.Input

	ToProjectMetadataOutput() ProjectMetadataOutput
	ToProjectMetadataOutputWithContext(ctx context.Context) ProjectMetadataOutput
}

func (*ProjectMetadata) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectMetadata)(nil))
}

func (i *ProjectMetadata) ToProjectMetadataOutput() ProjectMetadataOutput {
	return i.ToProjectMetadataOutputWithContext(context.Background())
}

func (i *ProjectMetadata) ToProjectMetadataOutputWithContext(ctx context.Context) ProjectMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMetadataOutput)
}

func (i *ProjectMetadata) ToProjectMetadataPtrOutput() ProjectMetadataPtrOutput {
	return i.ToProjectMetadataPtrOutputWithContext(context.Background())
}

func (i *ProjectMetadata) ToProjectMetadataPtrOutputWithContext(ctx context.Context) ProjectMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMetadataPtrOutput)
}

type ProjectMetadataPtrInput interface {
	pulumi.Input

	ToProjectMetadataPtrOutput() ProjectMetadataPtrOutput
	ToProjectMetadataPtrOutputWithContext(ctx context.Context) ProjectMetadataPtrOutput
}

type projectMetadataPtrType ProjectMetadataArgs

func (*projectMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMetadata)(nil))
}

func (i *projectMetadataPtrType) ToProjectMetadataPtrOutput() ProjectMetadataPtrOutput {
	return i.ToProjectMetadataPtrOutputWithContext(context.Background())
}

func (i *projectMetadataPtrType) ToProjectMetadataPtrOutputWithContext(ctx context.Context) ProjectMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMetadataPtrOutput)
}

// ProjectMetadataArrayInput is an input type that accepts ProjectMetadataArray and ProjectMetadataArrayOutput values.
// You can construct a concrete instance of `ProjectMetadataArrayInput` via:
//
//          ProjectMetadataArray{ ProjectMetadataArgs{...} }
type ProjectMetadataArrayInput interface {
	pulumi.Input

	ToProjectMetadataArrayOutput() ProjectMetadataArrayOutput
	ToProjectMetadataArrayOutputWithContext(context.Context) ProjectMetadataArrayOutput
}

type ProjectMetadataArray []ProjectMetadataInput

func (ProjectMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ProjectMetadata)(nil))
}

func (i ProjectMetadataArray) ToProjectMetadataArrayOutput() ProjectMetadataArrayOutput {
	return i.ToProjectMetadataArrayOutputWithContext(context.Background())
}

func (i ProjectMetadataArray) ToProjectMetadataArrayOutputWithContext(ctx context.Context) ProjectMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMetadataArrayOutput)
}

// ProjectMetadataMapInput is an input type that accepts ProjectMetadataMap and ProjectMetadataMapOutput values.
// You can construct a concrete instance of `ProjectMetadataMapInput` via:
//
//          ProjectMetadataMap{ "key": ProjectMetadataArgs{...} }
type ProjectMetadataMapInput interface {
	pulumi.Input

	ToProjectMetadataMapOutput() ProjectMetadataMapOutput
	ToProjectMetadataMapOutputWithContext(context.Context) ProjectMetadataMapOutput
}

type ProjectMetadataMap map[string]ProjectMetadataInput

func (ProjectMetadataMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ProjectMetadata)(nil))
}

func (i ProjectMetadataMap) ToProjectMetadataMapOutput() ProjectMetadataMapOutput {
	return i.ToProjectMetadataMapOutputWithContext(context.Background())
}

func (i ProjectMetadataMap) ToProjectMetadataMapOutputWithContext(ctx context.Context) ProjectMetadataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMetadataMapOutput)
}

type ProjectMetadataOutput struct {
	*pulumi.OutputState
}

func (ProjectMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectMetadata)(nil))
}

func (o ProjectMetadataOutput) ToProjectMetadataOutput() ProjectMetadataOutput {
	return o
}

func (o ProjectMetadataOutput) ToProjectMetadataOutputWithContext(ctx context.Context) ProjectMetadataOutput {
	return o
}

func (o ProjectMetadataOutput) ToProjectMetadataPtrOutput() ProjectMetadataPtrOutput {
	return o.ToProjectMetadataPtrOutputWithContext(context.Background())
}

func (o ProjectMetadataOutput) ToProjectMetadataPtrOutputWithContext(ctx context.Context) ProjectMetadataPtrOutput {
	return o.ApplyT(func(v ProjectMetadata) *ProjectMetadata {
		return &v
	}).(ProjectMetadataPtrOutput)
}

type ProjectMetadataPtrOutput struct {
	*pulumi.OutputState
}

func (ProjectMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMetadata)(nil))
}

func (o ProjectMetadataPtrOutput) ToProjectMetadataPtrOutput() ProjectMetadataPtrOutput {
	return o
}

func (o ProjectMetadataPtrOutput) ToProjectMetadataPtrOutputWithContext(ctx context.Context) ProjectMetadataPtrOutput {
	return o
}

type ProjectMetadataArrayOutput struct{ *pulumi.OutputState }

func (ProjectMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectMetadata)(nil))
}

func (o ProjectMetadataArrayOutput) ToProjectMetadataArrayOutput() ProjectMetadataArrayOutput {
	return o
}

func (o ProjectMetadataArrayOutput) ToProjectMetadataArrayOutputWithContext(ctx context.Context) ProjectMetadataArrayOutput {
	return o
}

func (o ProjectMetadataArrayOutput) Index(i pulumi.IntInput) ProjectMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectMetadata {
		return vs[0].([]ProjectMetadata)[vs[1].(int)]
	}).(ProjectMetadataOutput)
}

type ProjectMetadataMapOutput struct{ *pulumi.OutputState }

func (ProjectMetadataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ProjectMetadata)(nil))
}

func (o ProjectMetadataMapOutput) ToProjectMetadataMapOutput() ProjectMetadataMapOutput {
	return o
}

func (o ProjectMetadataMapOutput) ToProjectMetadataMapOutputWithContext(ctx context.Context) ProjectMetadataMapOutput {
	return o
}

func (o ProjectMetadataMapOutput) MapIndex(k pulumi.StringInput) ProjectMetadataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ProjectMetadata {
		return vs[0].(map[string]ProjectMetadata)[vs[1].(string)]
	}).(ProjectMetadataOutput)
}

func init() {
	pulumi.RegisterOutputType(ProjectMetadataOutput{})
	pulumi.RegisterOutputType(ProjectMetadataPtrOutput{})
	pulumi.RegisterOutputType(ProjectMetadataArrayOutput{})
	pulumi.RegisterOutputType(ProjectMetadataMapOutput{})
}
