// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Compute Engine StoragePool. Each of these resources serves a different use case:
//
// * `compute.StoragePoolIamPolicy`: Authoritative. Sets the IAM policy for the storagepool and replaces any existing policy already attached.
// * `compute.StoragePoolIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the storagepool are preserved.
// * `compute.StoragePoolIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the storagepool are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `compute.StoragePoolIamPolicy`: Retrieves the IAM policy for the storagepool
//
// > **Note:** `compute.StoragePoolIamPolicy` **cannot** be used in conjunction with `compute.StoragePoolIamBinding` and `compute.StoragePoolIamMember` or they will fight over what your policy should be.
//
// > **Note:** `compute.StoragePoolIamBinding` resources **can be** used in conjunction with `compute.StoragePoolIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## compute.StoragePoolIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/compute.viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewStoragePoolIamPolicy(ctx, "policy", &compute.StoragePoolIamPolicyArgs{
//				Project:    pulumi.Any(test_storage_pool_basic.Project),
//				Zone:       pulumi.Any(test_storage_pool_basic.Zone),
//				Name:       pulumi.Any(test_storage_pool_basic.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/compute.viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewStoragePoolIamPolicy(ctx, "policy", &compute.StoragePoolIamPolicyArgs{
//				Project:    pulumi.Any(test_storage_pool_basic.Project),
//				Zone:       pulumi.Any(test_storage_pool_basic.Zone),
//				Name:       pulumi.Any(test_storage_pool_basic.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## compute.StoragePoolIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewStoragePoolIamBinding(ctx, "binding", &compute.StoragePoolIamBindingArgs{
//				Project: pulumi.Any(test_storage_pool_basic.Project),
//				Zone:    pulumi.Any(test_storage_pool_basic.Zone),
//				Name:    pulumi.Any(test_storage_pool_basic.Name),
//				Role:    pulumi.String("roles/compute.viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewStoragePoolIamBinding(ctx, "binding", &compute.StoragePoolIamBindingArgs{
//				Project: pulumi.Any(test_storage_pool_basic.Project),
//				Zone:    pulumi.Any(test_storage_pool_basic.Zone),
//				Name:    pulumi.Any(test_storage_pool_basic.Name),
//				Role:    pulumi.String("roles/compute.viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &compute.StoragePoolIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## compute.StoragePoolIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewStoragePoolIamMember(ctx, "member", &compute.StoragePoolIamMemberArgs{
//				Project: pulumi.Any(test_storage_pool_basic.Project),
//				Zone:    pulumi.Any(test_storage_pool_basic.Zone),
//				Name:    pulumi.Any(test_storage_pool_basic.Name),
//				Role:    pulumi.String("roles/compute.viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewStoragePoolIamMember(ctx, "member", &compute.StoragePoolIamMemberArgs{
//				Project: pulumi.Any(test_storage_pool_basic.Project),
//				Zone:    pulumi.Any(test_storage_pool_basic.Zone),
//				Name:    pulumi.Any(test_storage_pool_basic.Name),
//				Role:    pulumi.String("roles/compute.viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//				Condition: &compute.StoragePoolIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Compute Engine StoragePool
// Three different resources help you manage your IAM policy for Compute Engine StoragePool. Each of these resources serves a different use case:
//
// * `compute.StoragePoolIamPolicy`: Authoritative. Sets the IAM policy for the storagepool and replaces any existing policy already attached.
// * `compute.StoragePoolIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the storagepool are preserved.
// * `compute.StoragePoolIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the storagepool are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `compute.StoragePoolIamPolicy`: Retrieves the IAM policy for the storagepool
//
// > **Note:** `compute.StoragePoolIamPolicy` **cannot** be used in conjunction with `compute.StoragePoolIamBinding` and `compute.StoragePoolIamMember` or they will fight over what your policy should be.
//
// > **Note:** `compute.StoragePoolIamBinding` resources **can be** used in conjunction with `compute.StoragePoolIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## compute.StoragePoolIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/compute.viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewStoragePoolIamPolicy(ctx, "policy", &compute.StoragePoolIamPolicyArgs{
//				Project:    pulumi.Any(test_storage_pool_basic.Project),
//				Zone:       pulumi.Any(test_storage_pool_basic.Zone),
//				Name:       pulumi.Any(test_storage_pool_basic.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/compute.viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewStoragePoolIamPolicy(ctx, "policy", &compute.StoragePoolIamPolicyArgs{
//				Project:    pulumi.Any(test_storage_pool_basic.Project),
//				Zone:       pulumi.Any(test_storage_pool_basic.Zone),
//				Name:       pulumi.Any(test_storage_pool_basic.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## compute.StoragePoolIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewStoragePoolIamBinding(ctx, "binding", &compute.StoragePoolIamBindingArgs{
//				Project: pulumi.Any(test_storage_pool_basic.Project),
//				Zone:    pulumi.Any(test_storage_pool_basic.Zone),
//				Name:    pulumi.Any(test_storage_pool_basic.Name),
//				Role:    pulumi.String("roles/compute.viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewStoragePoolIamBinding(ctx, "binding", &compute.StoragePoolIamBindingArgs{
//				Project: pulumi.Any(test_storage_pool_basic.Project),
//				Zone:    pulumi.Any(test_storage_pool_basic.Zone),
//				Name:    pulumi.Any(test_storage_pool_basic.Name),
//				Role:    pulumi.String("roles/compute.viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &compute.StoragePoolIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## compute.StoragePoolIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewStoragePoolIamMember(ctx, "member", &compute.StoragePoolIamMemberArgs{
//				Project: pulumi.Any(test_storage_pool_basic.Project),
//				Zone:    pulumi.Any(test_storage_pool_basic.Zone),
//				Name:    pulumi.Any(test_storage_pool_basic.Name),
//				Role:    pulumi.String("roles/compute.viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewStoragePoolIamMember(ctx, "member", &compute.StoragePoolIamMemberArgs{
//				Project: pulumi.Any(test_storage_pool_basic.Project),
//				Zone:    pulumi.Any(test_storage_pool_basic.Zone),
//				Name:    pulumi.Any(test_storage_pool_basic.Name),
//				Role:    pulumi.String("roles/compute.viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//				Condition: &compute.StoragePoolIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/zones/{{zone}}/storagePools/{{name}}
//
// * {{project}}/{{zone}}/{{name}}
//
// * {{zone}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Compute Engine storagepool IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:compute/storagePoolIamPolicy:StoragePoolIamPolicy editor "projects/{{project}}/zones/{{zone}}/storagePools/{{storage_pool}} roles/compute.viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:compute/storagePoolIamPolicy:StoragePoolIamPolicy editor "projects/{{project}}/zones/{{zone}}/storagePools/{{storage_pool}} roles/compute.viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:compute/storagePoolIamPolicy:StoragePoolIamPolicy editor projects/{{project}}/zones/{{zone}}/storagePools/{{storage_pool}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type StoragePoolIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// A reference to the zone where the storage pool resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewStoragePoolIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewStoragePoolIamPolicy(ctx *pulumi.Context,
	name string, args *StoragePoolIamPolicyArgs, opts ...pulumi.ResourceOption) (*StoragePoolIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StoragePoolIamPolicy
	err := ctx.RegisterResource("gcp:compute/storagePoolIamPolicy:StoragePoolIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStoragePoolIamPolicy gets an existing StoragePoolIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStoragePoolIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StoragePoolIamPolicyState, opts ...pulumi.ResourceOption) (*StoragePoolIamPolicy, error) {
	var resource StoragePoolIamPolicy
	err := ctx.ReadResource("gcp:compute/storagePoolIamPolicy:StoragePoolIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StoragePoolIamPolicy resources.
type storagePoolIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// A reference to the zone where the storage pool resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone *string `pulumi:"zone"`
}

type StoragePoolIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// A reference to the zone where the storage pool resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone pulumi.StringPtrInput
}

func (StoragePoolIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*storagePoolIamPolicyState)(nil)).Elem()
}

type storagePoolIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// A reference to the zone where the storage pool resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a StoragePoolIamPolicy resource.
type StoragePoolIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// A reference to the zone where the storage pool resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone pulumi.StringPtrInput
}

func (StoragePoolIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storagePoolIamPolicyArgs)(nil)).Elem()
}

type StoragePoolIamPolicyInput interface {
	pulumi.Input

	ToStoragePoolIamPolicyOutput() StoragePoolIamPolicyOutput
	ToStoragePoolIamPolicyOutputWithContext(ctx context.Context) StoragePoolIamPolicyOutput
}

func (*StoragePoolIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**StoragePoolIamPolicy)(nil)).Elem()
}

func (i *StoragePoolIamPolicy) ToStoragePoolIamPolicyOutput() StoragePoolIamPolicyOutput {
	return i.ToStoragePoolIamPolicyOutputWithContext(context.Background())
}

func (i *StoragePoolIamPolicy) ToStoragePoolIamPolicyOutputWithContext(ctx context.Context) StoragePoolIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoragePoolIamPolicyOutput)
}

// StoragePoolIamPolicyArrayInput is an input type that accepts StoragePoolIamPolicyArray and StoragePoolIamPolicyArrayOutput values.
// You can construct a concrete instance of `StoragePoolIamPolicyArrayInput` via:
//
//	StoragePoolIamPolicyArray{ StoragePoolIamPolicyArgs{...} }
type StoragePoolIamPolicyArrayInput interface {
	pulumi.Input

	ToStoragePoolIamPolicyArrayOutput() StoragePoolIamPolicyArrayOutput
	ToStoragePoolIamPolicyArrayOutputWithContext(context.Context) StoragePoolIamPolicyArrayOutput
}

type StoragePoolIamPolicyArray []StoragePoolIamPolicyInput

func (StoragePoolIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StoragePoolIamPolicy)(nil)).Elem()
}

func (i StoragePoolIamPolicyArray) ToStoragePoolIamPolicyArrayOutput() StoragePoolIamPolicyArrayOutput {
	return i.ToStoragePoolIamPolicyArrayOutputWithContext(context.Background())
}

func (i StoragePoolIamPolicyArray) ToStoragePoolIamPolicyArrayOutputWithContext(ctx context.Context) StoragePoolIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoragePoolIamPolicyArrayOutput)
}

// StoragePoolIamPolicyMapInput is an input type that accepts StoragePoolIamPolicyMap and StoragePoolIamPolicyMapOutput values.
// You can construct a concrete instance of `StoragePoolIamPolicyMapInput` via:
//
//	StoragePoolIamPolicyMap{ "key": StoragePoolIamPolicyArgs{...} }
type StoragePoolIamPolicyMapInput interface {
	pulumi.Input

	ToStoragePoolIamPolicyMapOutput() StoragePoolIamPolicyMapOutput
	ToStoragePoolIamPolicyMapOutputWithContext(context.Context) StoragePoolIamPolicyMapOutput
}

type StoragePoolIamPolicyMap map[string]StoragePoolIamPolicyInput

func (StoragePoolIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StoragePoolIamPolicy)(nil)).Elem()
}

func (i StoragePoolIamPolicyMap) ToStoragePoolIamPolicyMapOutput() StoragePoolIamPolicyMapOutput {
	return i.ToStoragePoolIamPolicyMapOutputWithContext(context.Background())
}

func (i StoragePoolIamPolicyMap) ToStoragePoolIamPolicyMapOutputWithContext(ctx context.Context) StoragePoolIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoragePoolIamPolicyMapOutput)
}

type StoragePoolIamPolicyOutput struct{ *pulumi.OutputState }

func (StoragePoolIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StoragePoolIamPolicy)(nil)).Elem()
}

func (o StoragePoolIamPolicyOutput) ToStoragePoolIamPolicyOutput() StoragePoolIamPolicyOutput {
	return o
}

func (o StoragePoolIamPolicyOutput) ToStoragePoolIamPolicyOutputWithContext(ctx context.Context) StoragePoolIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o StoragePoolIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *StoragePoolIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o StoragePoolIamPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StoragePoolIamPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o StoragePoolIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *StoragePoolIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o StoragePoolIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *StoragePoolIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A reference to the zone where the storage pool resides. Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
// zone is specified, it is taken from the provider configuration.
func (o StoragePoolIamPolicyOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *StoragePoolIamPolicy) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type StoragePoolIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (StoragePoolIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StoragePoolIamPolicy)(nil)).Elem()
}

func (o StoragePoolIamPolicyArrayOutput) ToStoragePoolIamPolicyArrayOutput() StoragePoolIamPolicyArrayOutput {
	return o
}

func (o StoragePoolIamPolicyArrayOutput) ToStoragePoolIamPolicyArrayOutputWithContext(ctx context.Context) StoragePoolIamPolicyArrayOutput {
	return o
}

func (o StoragePoolIamPolicyArrayOutput) Index(i pulumi.IntInput) StoragePoolIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StoragePoolIamPolicy {
		return vs[0].([]*StoragePoolIamPolicy)[vs[1].(int)]
	}).(StoragePoolIamPolicyOutput)
}

type StoragePoolIamPolicyMapOutput struct{ *pulumi.OutputState }

func (StoragePoolIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StoragePoolIamPolicy)(nil)).Elem()
}

func (o StoragePoolIamPolicyMapOutput) ToStoragePoolIamPolicyMapOutput() StoragePoolIamPolicyMapOutput {
	return o
}

func (o StoragePoolIamPolicyMapOutput) ToStoragePoolIamPolicyMapOutputWithContext(ctx context.Context) StoragePoolIamPolicyMapOutput {
	return o
}

func (o StoragePoolIamPolicyMapOutput) MapIndex(k pulumi.StringInput) StoragePoolIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StoragePoolIamPolicy {
		return vs[0].(map[string]*StoragePoolIamPolicy)[vs[1].(string)]
	}).(StoragePoolIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StoragePoolIamPolicyInput)(nil)).Elem(), &StoragePoolIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoragePoolIamPolicyArrayInput)(nil)).Elem(), StoragePoolIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoragePoolIamPolicyMapInput)(nil)).Elem(), StoragePoolIamPolicyMap{})
	pulumi.RegisterOutputType(StoragePoolIamPolicyOutput{})
	pulumi.RegisterOutputType(StoragePoolIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(StoragePoolIamPolicyMapOutput{})
}
