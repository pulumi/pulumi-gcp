// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupRegionBackendServiceIamPolicy(ctx *pulumi.Context, args *LookupRegionBackendServiceIamPolicyArgs, opts ...pulumi.InvokeOption) (*LookupRegionBackendServiceIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRegionBackendServiceIamPolicyResult
	err := ctx.Invoke("gcp:compute/getRegionBackendServiceIamPolicy:getRegionBackendServiceIamPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegionBackendServiceIamPolicy.
type LookupRegionBackendServiceIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Name string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getRegionBackendServiceIamPolicy.
type LookupRegionBackendServiceIamPolicyResult struct {
	// (Computed) The etag of the IAM policy.
	Etag string `pulumi:"etag"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// (Required only by `compute.RegionBackendServiceIamPolicy`) The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	Project    string `pulumi:"project"`
	Region     string `pulumi:"region"`
}

func LookupRegionBackendServiceIamPolicyOutput(ctx *pulumi.Context, args LookupRegionBackendServiceIamPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupRegionBackendServiceIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRegionBackendServiceIamPolicyResult, error) {
			args := v.(LookupRegionBackendServiceIamPolicyArgs)
			r, err := LookupRegionBackendServiceIamPolicy(ctx, &args, opts...)
			var s LookupRegionBackendServiceIamPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRegionBackendServiceIamPolicyResultOutput)
}

// A collection of arguments for invoking getRegionBackendServiceIamPolicy.
type LookupRegionBackendServiceIamPolicyOutputArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupRegionBackendServiceIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegionBackendServiceIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getRegionBackendServiceIamPolicy.
type LookupRegionBackendServiceIamPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupRegionBackendServiceIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegionBackendServiceIamPolicyResult)(nil)).Elem()
}

func (o LookupRegionBackendServiceIamPolicyResultOutput) ToLookupRegionBackendServiceIamPolicyResultOutput() LookupRegionBackendServiceIamPolicyResultOutput {
	return o
}

func (o LookupRegionBackendServiceIamPolicyResultOutput) ToLookupRegionBackendServiceIamPolicyResultOutputWithContext(ctx context.Context) LookupRegionBackendServiceIamPolicyResultOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o LookupRegionBackendServiceIamPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionBackendServiceIamPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRegionBackendServiceIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionBackendServiceIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRegionBackendServiceIamPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionBackendServiceIamPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// (Required only by `compute.RegionBackendServiceIamPolicy`) The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o LookupRegionBackendServiceIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionBackendServiceIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func (o LookupRegionBackendServiceIamPolicyResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionBackendServiceIamPolicyResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupRegionBackendServiceIamPolicyResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionBackendServiceIamPolicyResult) string { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegionBackendServiceIamPolicyResultOutput{})
}
