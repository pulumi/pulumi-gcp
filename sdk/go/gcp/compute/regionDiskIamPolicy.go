// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Compute Engine RegionDisk. Each of these resources serves a different use case:
//
// * `compute.RegionDiskIamPolicy`: Authoritative. Sets the IAM policy for the regiondisk and replaces any existing policy already attached.
// * `compute.RegionDiskIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the regiondisk are preserved.
// * `compute.RegionDiskIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the regiondisk are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `compute.RegionDiskIamPolicy`: Retrieves the IAM policy for the regiondisk
//
// > **Note:** `compute.RegionDiskIamPolicy` **cannot** be used in conjunction with `compute.RegionDiskIamBinding` and `compute.RegionDiskIamMember` or they will fight over what your policy should be.
//
// > **Note:** `compute.RegionDiskIamBinding` resources **can be** used in conjunction with `compute.RegionDiskIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## compute.RegionDiskIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRegionDiskIamPolicy(ctx, "policy", &compute.RegionDiskIamPolicyArgs{
//				Project:    pulumi.Any(regiondisk.Project),
//				Region:     pulumi.Any(regiondisk.Region),
//				Name:       pulumi.Any(regiondisk.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## compute.RegionDiskIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionDiskIamBinding(ctx, "binding", &compute.RegionDiskIamBindingArgs{
//				Project: pulumi.Any(regiondisk.Project),
//				Region:  pulumi.Any(regiondisk.Region),
//				Name:    pulumi.Any(regiondisk.Name),
//				Role:    pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## compute.RegionDiskIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionDiskIamMember(ctx, "member", &compute.RegionDiskIamMemberArgs{
//				Project: pulumi.Any(regiondisk.Project),
//				Region:  pulumi.Any(regiondisk.Region),
//				Name:    pulumi.Any(regiondisk.Name),
//				Role:    pulumi.String("roles/viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// # IAM policy for Compute Engine RegionDisk
// Three different resources help you manage your IAM policy for Compute Engine RegionDisk. Each of these resources serves a different use case:
//
// * `compute.RegionDiskIamPolicy`: Authoritative. Sets the IAM policy for the regiondisk and replaces any existing policy already attached.
// * `compute.RegionDiskIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the regiondisk are preserved.
// * `compute.RegionDiskIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the regiondisk are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `compute.RegionDiskIamPolicy`: Retrieves the IAM policy for the regiondisk
//
// > **Note:** `compute.RegionDiskIamPolicy` **cannot** be used in conjunction with `compute.RegionDiskIamBinding` and `compute.RegionDiskIamMember` or they will fight over what your policy should be.
//
// > **Note:** `compute.RegionDiskIamBinding` resources **can be** used in conjunction with `compute.RegionDiskIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## compute.RegionDiskIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRegionDiskIamPolicy(ctx, "policy", &compute.RegionDiskIamPolicyArgs{
//				Project:    pulumi.Any(regiondisk.Project),
//				Region:     pulumi.Any(regiondisk.Region),
//				Name:       pulumi.Any(regiondisk.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## compute.RegionDiskIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionDiskIamBinding(ctx, "binding", &compute.RegionDiskIamBindingArgs{
//				Project: pulumi.Any(regiondisk.Project),
//				Region:  pulumi.Any(regiondisk.Region),
//				Name:    pulumi.Any(regiondisk.Name),
//				Role:    pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## compute.RegionDiskIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionDiskIamMember(ctx, "member", &compute.RegionDiskIamMemberArgs{
//				Project: pulumi.Any(regiondisk.Project),
//				Region:  pulumi.Any(regiondisk.Region),
//				Name:    pulumi.Any(regiondisk.Name),
//				Role:    pulumi.String("roles/viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/regions/{{region}}/disks/{{name}}
//
// * {{project}}/{{region}}/{{name}}
//
// * {{region}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Compute Engine regiondisk IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:compute/regionDiskIamPolicy:RegionDiskIamPolicy editor "projects/{{project}}/regions/{{region}}/disks/{{region_disk}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:compute/regionDiskIamPolicy:RegionDiskIamPolicy editor "projects/{{project}}/regions/{{region}}/disks/{{region_disk}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:compute/regionDiskIamPolicy:RegionDiskIamPolicy editor projects/{{project}}/regions/{{region}}/disks/{{region_disk}}
// ```
//
// -> **Custom Roles**: If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type RegionDiskIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// A reference to the region where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewRegionDiskIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewRegionDiskIamPolicy(ctx *pulumi.Context,
	name string, args *RegionDiskIamPolicyArgs, opts ...pulumi.ResourceOption) (*RegionDiskIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionDiskIamPolicy
	err := ctx.RegisterResource("gcp:compute/regionDiskIamPolicy:RegionDiskIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionDiskIamPolicy gets an existing RegionDiskIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionDiskIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionDiskIamPolicyState, opts ...pulumi.ResourceOption) (*RegionDiskIamPolicy, error) {
	var resource RegionDiskIamPolicy
	err := ctx.ReadResource("gcp:compute/regionDiskIamPolicy:RegionDiskIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionDiskIamPolicy resources.
type regionDiskIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// A reference to the region where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
}

type RegionDiskIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// A reference to the region where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
}

func (RegionDiskIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionDiskIamPolicyState)(nil)).Elem()
}

type regionDiskIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// A reference to the region where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a RegionDiskIamPolicy resource.
type RegionDiskIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// A reference to the region where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
}

func (RegionDiskIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionDiskIamPolicyArgs)(nil)).Elem()
}

type RegionDiskIamPolicyInput interface {
	pulumi.Input

	ToRegionDiskIamPolicyOutput() RegionDiskIamPolicyOutput
	ToRegionDiskIamPolicyOutputWithContext(ctx context.Context) RegionDiskIamPolicyOutput
}

func (*RegionDiskIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionDiskIamPolicy)(nil)).Elem()
}

func (i *RegionDiskIamPolicy) ToRegionDiskIamPolicyOutput() RegionDiskIamPolicyOutput {
	return i.ToRegionDiskIamPolicyOutputWithContext(context.Background())
}

func (i *RegionDiskIamPolicy) ToRegionDiskIamPolicyOutputWithContext(ctx context.Context) RegionDiskIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionDiskIamPolicyOutput)
}

// RegionDiskIamPolicyArrayInput is an input type that accepts RegionDiskIamPolicyArray and RegionDiskIamPolicyArrayOutput values.
// You can construct a concrete instance of `RegionDiskIamPolicyArrayInput` via:
//
//	RegionDiskIamPolicyArray{ RegionDiskIamPolicyArgs{...} }
type RegionDiskIamPolicyArrayInput interface {
	pulumi.Input

	ToRegionDiskIamPolicyArrayOutput() RegionDiskIamPolicyArrayOutput
	ToRegionDiskIamPolicyArrayOutputWithContext(context.Context) RegionDiskIamPolicyArrayOutput
}

type RegionDiskIamPolicyArray []RegionDiskIamPolicyInput

func (RegionDiskIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionDiskIamPolicy)(nil)).Elem()
}

func (i RegionDiskIamPolicyArray) ToRegionDiskIamPolicyArrayOutput() RegionDiskIamPolicyArrayOutput {
	return i.ToRegionDiskIamPolicyArrayOutputWithContext(context.Background())
}

func (i RegionDiskIamPolicyArray) ToRegionDiskIamPolicyArrayOutputWithContext(ctx context.Context) RegionDiskIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionDiskIamPolicyArrayOutput)
}

// RegionDiskIamPolicyMapInput is an input type that accepts RegionDiskIamPolicyMap and RegionDiskIamPolicyMapOutput values.
// You can construct a concrete instance of `RegionDiskIamPolicyMapInput` via:
//
//	RegionDiskIamPolicyMap{ "key": RegionDiskIamPolicyArgs{...} }
type RegionDiskIamPolicyMapInput interface {
	pulumi.Input

	ToRegionDiskIamPolicyMapOutput() RegionDiskIamPolicyMapOutput
	ToRegionDiskIamPolicyMapOutputWithContext(context.Context) RegionDiskIamPolicyMapOutput
}

type RegionDiskIamPolicyMap map[string]RegionDiskIamPolicyInput

func (RegionDiskIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionDiskIamPolicy)(nil)).Elem()
}

func (i RegionDiskIamPolicyMap) ToRegionDiskIamPolicyMapOutput() RegionDiskIamPolicyMapOutput {
	return i.ToRegionDiskIamPolicyMapOutputWithContext(context.Background())
}

func (i RegionDiskIamPolicyMap) ToRegionDiskIamPolicyMapOutputWithContext(ctx context.Context) RegionDiskIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionDiskIamPolicyMapOutput)
}

type RegionDiskIamPolicyOutput struct{ *pulumi.OutputState }

func (RegionDiskIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionDiskIamPolicy)(nil)).Elem()
}

func (o RegionDiskIamPolicyOutput) ToRegionDiskIamPolicyOutput() RegionDiskIamPolicyOutput {
	return o
}

func (o RegionDiskIamPolicyOutput) ToRegionDiskIamPolicyOutputWithContext(ctx context.Context) RegionDiskIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o RegionDiskIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionDiskIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o RegionDiskIamPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionDiskIamPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o RegionDiskIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionDiskIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o RegionDiskIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionDiskIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A reference to the region where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
// region is specified, it is taken from the provider configuration.
func (o RegionDiskIamPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionDiskIamPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type RegionDiskIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (RegionDiskIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionDiskIamPolicy)(nil)).Elem()
}

func (o RegionDiskIamPolicyArrayOutput) ToRegionDiskIamPolicyArrayOutput() RegionDiskIamPolicyArrayOutput {
	return o
}

func (o RegionDiskIamPolicyArrayOutput) ToRegionDiskIamPolicyArrayOutputWithContext(ctx context.Context) RegionDiskIamPolicyArrayOutput {
	return o
}

func (o RegionDiskIamPolicyArrayOutput) Index(i pulumi.IntInput) RegionDiskIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionDiskIamPolicy {
		return vs[0].([]*RegionDiskIamPolicy)[vs[1].(int)]
	}).(RegionDiskIamPolicyOutput)
}

type RegionDiskIamPolicyMapOutput struct{ *pulumi.OutputState }

func (RegionDiskIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionDiskIamPolicy)(nil)).Elem()
}

func (o RegionDiskIamPolicyMapOutput) ToRegionDiskIamPolicyMapOutput() RegionDiskIamPolicyMapOutput {
	return o
}

func (o RegionDiskIamPolicyMapOutput) ToRegionDiskIamPolicyMapOutputWithContext(ctx context.Context) RegionDiskIamPolicyMapOutput {
	return o
}

func (o RegionDiskIamPolicyMapOutput) MapIndex(k pulumi.StringInput) RegionDiskIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionDiskIamPolicy {
		return vs[0].(map[string]*RegionDiskIamPolicy)[vs[1].(string)]
	}).(RegionDiskIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionDiskIamPolicyInput)(nil)).Elem(), &RegionDiskIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionDiskIamPolicyArrayInput)(nil)).Elem(), RegionDiskIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionDiskIamPolicyMapInput)(nil)).Elem(), RegionDiskIamPolicyMap{})
	pulumi.RegisterOutputType(RegionDiskIamPolicyOutput{})
	pulumi.RegisterOutputType(RegionDiskIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(RegionDiskIamPolicyMapOutput{})
}
