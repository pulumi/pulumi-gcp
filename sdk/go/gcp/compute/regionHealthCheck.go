// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Health Checks determine whether instances are responsive and able to do work.
// They are an important part of a comprehensive load balancing configuration,
// as they enable monitoring instances behind load balancers.
//
// Health Checks poll instances at a specified interval. Instances that
// do not respond successfully to some number of probes in a row are marked
// as unhealthy. No new connections are sent to unhealthy instances,
// though existing connections will continue. The health check will
// continue to poll unhealthy instances. If an instance later responds
// successfully to some number of consecutive probes, it is marked
// healthy again and can receive new connections.
//
// To get more information about RegionHealthCheck, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/regionHealthChecks)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/load-balancing/docs/health-checks)
//
// ## Example Usage
// ### Region Health Check Tcp
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionHealthCheck(ctx, "tcp-region-health-check", &compute.RegionHealthCheckArgs{
//				CheckIntervalSec: pulumi.Int(1),
//				TcpHealthCheck: &compute.RegionHealthCheckTcpHealthCheckArgs{
//					Port: pulumi.Int(80),
//				},
//				TimeoutSec: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Health Check Tcp Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionHealthCheck(ctx, "tcp-region-health-check", &compute.RegionHealthCheckArgs{
//				CheckIntervalSec: pulumi.Int(1),
//				Description:      pulumi.String("Health check via tcp"),
//				HealthyThreshold: pulumi.Int(4),
//				TcpHealthCheck: &compute.RegionHealthCheckTcpHealthCheckArgs{
//					PortName:          pulumi.String("health-check-port"),
//					PortSpecification: pulumi.String("USE_NAMED_PORT"),
//					ProxyHeader:       pulumi.String("NONE"),
//					Request:           pulumi.String("ARE YOU HEALTHY?"),
//					Response:          pulumi.String("I AM HEALTHY"),
//				},
//				TimeoutSec:         pulumi.Int(1),
//				UnhealthyThreshold: pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Health Check Ssl
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionHealthCheck(ctx, "ssl-region-health-check", &compute.RegionHealthCheckArgs{
//				CheckIntervalSec: pulumi.Int(1),
//				SslHealthCheck: &compute.RegionHealthCheckSslHealthCheckArgs{
//					Port: pulumi.Int(443),
//				},
//				TimeoutSec: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Health Check Ssl Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionHealthCheck(ctx, "ssl-region-health-check", &compute.RegionHealthCheckArgs{
//				CheckIntervalSec: pulumi.Int(1),
//				Description:      pulumi.String("Health check via ssl"),
//				HealthyThreshold: pulumi.Int(4),
//				SslHealthCheck: &compute.RegionHealthCheckSslHealthCheckArgs{
//					PortName:          pulumi.String("health-check-port"),
//					PortSpecification: pulumi.String("USE_NAMED_PORT"),
//					ProxyHeader:       pulumi.String("NONE"),
//					Request:           pulumi.String("ARE YOU HEALTHY?"),
//					Response:          pulumi.String("I AM HEALTHY"),
//				},
//				TimeoutSec:         pulumi.Int(1),
//				UnhealthyThreshold: pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Health Check Http
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionHealthCheck(ctx, "http-region-health-check", &compute.RegionHealthCheckArgs{
//				CheckIntervalSec: pulumi.Int(1),
//				HttpHealthCheck: &compute.RegionHealthCheckHttpHealthCheckArgs{
//					Port: pulumi.Int(80),
//				},
//				TimeoutSec: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Health Check Http Logs
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionHealthCheck(ctx, "http-region-health-check", &compute.RegionHealthCheckArgs{
//				TimeoutSec:       pulumi.Int(1),
//				CheckIntervalSec: pulumi.Int(1),
//				HttpHealthCheck: &compute.RegionHealthCheckHttpHealthCheckArgs{
//					Port: pulumi.Int(80),
//				},
//				LogConfig: &compute.RegionHealthCheckLogConfigArgs{
//					Enable: pulumi.Bool(true),
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Health Check Http Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionHealthCheck(ctx, "http-region-health-check", &compute.RegionHealthCheckArgs{
//				CheckIntervalSec: pulumi.Int(1),
//				Description:      pulumi.String("Health check via http"),
//				HealthyThreshold: pulumi.Int(4),
//				HttpHealthCheck: &compute.RegionHealthCheckHttpHealthCheckArgs{
//					Host:              pulumi.String("1.2.3.4"),
//					PortName:          pulumi.String("health-check-port"),
//					PortSpecification: pulumi.String("USE_NAMED_PORT"),
//					ProxyHeader:       pulumi.String("NONE"),
//					RequestPath:       pulumi.String("/mypath"),
//					Response:          pulumi.String("I AM HEALTHY"),
//				},
//				TimeoutSec:         pulumi.Int(1),
//				UnhealthyThreshold: pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Health Check Https
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionHealthCheck(ctx, "https-region-health-check", &compute.RegionHealthCheckArgs{
//				CheckIntervalSec: pulumi.Int(1),
//				HttpsHealthCheck: &compute.RegionHealthCheckHttpsHealthCheckArgs{
//					Port: pulumi.Int(443),
//				},
//				TimeoutSec: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Health Check Https Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionHealthCheck(ctx, "https-region-health-check", &compute.RegionHealthCheckArgs{
//				CheckIntervalSec: pulumi.Int(1),
//				Description:      pulumi.String("Health check via https"),
//				HealthyThreshold: pulumi.Int(4),
//				HttpsHealthCheck: &compute.RegionHealthCheckHttpsHealthCheckArgs{
//					Host:              pulumi.String("1.2.3.4"),
//					PortName:          pulumi.String("health-check-port"),
//					PortSpecification: pulumi.String("USE_NAMED_PORT"),
//					ProxyHeader:       pulumi.String("NONE"),
//					RequestPath:       pulumi.String("/mypath"),
//					Response:          pulumi.String("I AM HEALTHY"),
//				},
//				TimeoutSec:         pulumi.Int(1),
//				UnhealthyThreshold: pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Health Check Http2
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionHealthCheck(ctx, "http2-region-health-check", &compute.RegionHealthCheckArgs{
//				CheckIntervalSec: pulumi.Int(1),
//				Http2HealthCheck: &compute.RegionHealthCheckHttp2HealthCheckArgs{
//					Port: pulumi.Int(443),
//				},
//				TimeoutSec: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Health Check Http2 Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionHealthCheck(ctx, "http2-region-health-check", &compute.RegionHealthCheckArgs{
//				CheckIntervalSec: pulumi.Int(1),
//				Description:      pulumi.String("Health check via http2"),
//				HealthyThreshold: pulumi.Int(4),
//				Http2HealthCheck: &compute.RegionHealthCheckHttp2HealthCheckArgs{
//					Host:              pulumi.String("1.2.3.4"),
//					PortName:          pulumi.String("health-check-port"),
//					PortSpecification: pulumi.String("USE_NAMED_PORT"),
//					ProxyHeader:       pulumi.String("NONE"),
//					RequestPath:       pulumi.String("/mypath"),
//					Response:          pulumi.String("I AM HEALTHY"),
//				},
//				TimeoutSec:         pulumi.Int(1),
//				UnhealthyThreshold: pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Health Check Grpc
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionHealthCheck(ctx, "grpc-region-health-check", &compute.RegionHealthCheckArgs{
//				CheckIntervalSec: pulumi.Int(1),
//				GrpcHealthCheck: &compute.RegionHealthCheckGrpcHealthCheckArgs{
//					Port: pulumi.Int(443),
//				},
//				TimeoutSec: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Health Check Grpc Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionHealthCheck(ctx, "grpc-region-health-check", &compute.RegionHealthCheckArgs{
//				CheckIntervalSec: pulumi.Int(1),
//				GrpcHealthCheck: &compute.RegionHealthCheckGrpcHealthCheckArgs{
//					GrpcServiceName:   pulumi.String("testservice"),
//					PortName:          pulumi.String("health-check-port"),
//					PortSpecification: pulumi.String("USE_NAMED_PORT"),
//				},
//				TimeoutSec: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # RegionHealthCheck can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:compute/regionHealthCheck:RegionHealthCheck default projects/{{project}}/regions/{{region}}/healthChecks/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/regionHealthCheck:RegionHealthCheck default {{project}}/{{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/regionHealthCheck:RegionHealthCheck default {{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/regionHealthCheck:RegionHealthCheck default {{name}}
//
// ```
type RegionHealthCheck struct {
	pulumi.CustomResourceState

	// How often (in seconds) to send a health check. The default value is 5
	// seconds.
	CheckIntervalSec pulumi.IntPtrOutput `pulumi:"checkIntervalSec"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when
	// you create the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A nested object resource
	// Structure is documented below.
	GrpcHealthCheck RegionHealthCheckGrpcHealthCheckPtrOutput `pulumi:"grpcHealthCheck"`
	// A so-far unhealthy instance will be marked healthy after this many
	// consecutive successes. The default value is 2.
	HealthyThreshold pulumi.IntPtrOutput `pulumi:"healthyThreshold"`
	// A nested object resource
	// Structure is documented below.
	Http2HealthCheck RegionHealthCheckHttp2HealthCheckPtrOutput `pulumi:"http2HealthCheck"`
	// A nested object resource
	// Structure is documented below.
	HttpHealthCheck RegionHealthCheckHttpHealthCheckPtrOutput `pulumi:"httpHealthCheck"`
	// A nested object resource
	// Structure is documented below.
	HttpsHealthCheck RegionHealthCheckHttpsHealthCheckPtrOutput `pulumi:"httpsHealthCheck"`
	// Configure logging on this health check.
	// Structure is documented below.
	LogConfig RegionHealthCheckLogConfigOutput `pulumi:"logConfig"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression `a-z?` which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the
	// last character, which cannot be a dash.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The Region in which the created health check should reside.
	// If it is not provided, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// A nested object resource
	// Structure is documented below.
	SslHealthCheck RegionHealthCheckSslHealthCheckPtrOutput `pulumi:"sslHealthCheck"`
	// A nested object resource
	// Structure is documented below.
	TcpHealthCheck RegionHealthCheckTcpHealthCheckPtrOutput `pulumi:"tcpHealthCheck"`
	// How long (in seconds) to wait before claiming failure.
	// The default value is 5 seconds.  It is invalid for timeoutSec to have
	// greater value than checkIntervalSec.
	TimeoutSec pulumi.IntPtrOutput `pulumi:"timeoutSec"`
	// The type of the health check. One of HTTP, HTTP2, HTTPS, TCP, or SSL.
	Type pulumi.StringOutput `pulumi:"type"`
	// A so-far healthy instance will be marked unhealthy after this many
	// consecutive failures. The default value is 2.
	UnhealthyThreshold pulumi.IntPtrOutput `pulumi:"unhealthyThreshold"`
}

// NewRegionHealthCheck registers a new resource with the given unique name, arguments, and options.
func NewRegionHealthCheck(ctx *pulumi.Context,
	name string, args *RegionHealthCheckArgs, opts ...pulumi.ResourceOption) (*RegionHealthCheck, error) {
	if args == nil {
		args = &RegionHealthCheckArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionHealthCheck
	err := ctx.RegisterResource("gcp:compute/regionHealthCheck:RegionHealthCheck", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionHealthCheck gets an existing RegionHealthCheck resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionHealthCheck(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionHealthCheckState, opts ...pulumi.ResourceOption) (*RegionHealthCheck, error) {
	var resource RegionHealthCheck
	err := ctx.ReadResource("gcp:compute/regionHealthCheck:RegionHealthCheck", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionHealthCheck resources.
type regionHealthCheckState struct {
	// How often (in seconds) to send a health check. The default value is 5
	// seconds.
	CheckIntervalSec *int `pulumi:"checkIntervalSec"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when
	// you create the resource.
	Description *string `pulumi:"description"`
	// A nested object resource
	// Structure is documented below.
	GrpcHealthCheck *RegionHealthCheckGrpcHealthCheck `pulumi:"grpcHealthCheck"`
	// A so-far unhealthy instance will be marked healthy after this many
	// consecutive successes. The default value is 2.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// A nested object resource
	// Structure is documented below.
	Http2HealthCheck *RegionHealthCheckHttp2HealthCheck `pulumi:"http2HealthCheck"`
	// A nested object resource
	// Structure is documented below.
	HttpHealthCheck *RegionHealthCheckHttpHealthCheck `pulumi:"httpHealthCheck"`
	// A nested object resource
	// Structure is documented below.
	HttpsHealthCheck *RegionHealthCheckHttpsHealthCheck `pulumi:"httpsHealthCheck"`
	// Configure logging on this health check.
	// Structure is documented below.
	LogConfig *RegionHealthCheckLogConfig `pulumi:"logConfig"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression `a-z?` which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the
	// last character, which cannot be a dash.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The Region in which the created health check should reside.
	// If it is not provided, the provider region is used.
	Region *string `pulumi:"region"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
	// A nested object resource
	// Structure is documented below.
	SslHealthCheck *RegionHealthCheckSslHealthCheck `pulumi:"sslHealthCheck"`
	// A nested object resource
	// Structure is documented below.
	TcpHealthCheck *RegionHealthCheckTcpHealthCheck `pulumi:"tcpHealthCheck"`
	// How long (in seconds) to wait before claiming failure.
	// The default value is 5 seconds.  It is invalid for timeoutSec to have
	// greater value than checkIntervalSec.
	TimeoutSec *int `pulumi:"timeoutSec"`
	// The type of the health check. One of HTTP, HTTP2, HTTPS, TCP, or SSL.
	Type *string `pulumi:"type"`
	// A so-far healthy instance will be marked unhealthy after this many
	// consecutive failures. The default value is 2.
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

type RegionHealthCheckState struct {
	// How often (in seconds) to send a health check. The default value is 5
	// seconds.
	CheckIntervalSec pulumi.IntPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource. Provide this property when
	// you create the resource.
	Description pulumi.StringPtrInput
	// A nested object resource
	// Structure is documented below.
	GrpcHealthCheck RegionHealthCheckGrpcHealthCheckPtrInput
	// A so-far unhealthy instance will be marked healthy after this many
	// consecutive successes. The default value is 2.
	HealthyThreshold pulumi.IntPtrInput
	// A nested object resource
	// Structure is documented below.
	Http2HealthCheck RegionHealthCheckHttp2HealthCheckPtrInput
	// A nested object resource
	// Structure is documented below.
	HttpHealthCheck RegionHealthCheckHttpHealthCheckPtrInput
	// A nested object resource
	// Structure is documented below.
	HttpsHealthCheck RegionHealthCheckHttpsHealthCheckPtrInput
	// Configure logging on this health check.
	// Structure is documented below.
	LogConfig RegionHealthCheckLogConfigPtrInput
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression `a-z?` which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the
	// last character, which cannot be a dash.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The Region in which the created health check should reside.
	// If it is not provided, the provider region is used.
	Region pulumi.StringPtrInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
	// A nested object resource
	// Structure is documented below.
	SslHealthCheck RegionHealthCheckSslHealthCheckPtrInput
	// A nested object resource
	// Structure is documented below.
	TcpHealthCheck RegionHealthCheckTcpHealthCheckPtrInput
	// How long (in seconds) to wait before claiming failure.
	// The default value is 5 seconds.  It is invalid for timeoutSec to have
	// greater value than checkIntervalSec.
	TimeoutSec pulumi.IntPtrInput
	// The type of the health check. One of HTTP, HTTP2, HTTPS, TCP, or SSL.
	Type pulumi.StringPtrInput
	// A so-far healthy instance will be marked unhealthy after this many
	// consecutive failures. The default value is 2.
	UnhealthyThreshold pulumi.IntPtrInput
}

func (RegionHealthCheckState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionHealthCheckState)(nil)).Elem()
}

type regionHealthCheckArgs struct {
	// How often (in seconds) to send a health check. The default value is 5
	// seconds.
	CheckIntervalSec *int `pulumi:"checkIntervalSec"`
	// An optional description of this resource. Provide this property when
	// you create the resource.
	Description *string `pulumi:"description"`
	// A nested object resource
	// Structure is documented below.
	GrpcHealthCheck *RegionHealthCheckGrpcHealthCheck `pulumi:"grpcHealthCheck"`
	// A so-far unhealthy instance will be marked healthy after this many
	// consecutive successes. The default value is 2.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// A nested object resource
	// Structure is documented below.
	Http2HealthCheck *RegionHealthCheckHttp2HealthCheck `pulumi:"http2HealthCheck"`
	// A nested object resource
	// Structure is documented below.
	HttpHealthCheck *RegionHealthCheckHttpHealthCheck `pulumi:"httpHealthCheck"`
	// A nested object resource
	// Structure is documented below.
	HttpsHealthCheck *RegionHealthCheckHttpsHealthCheck `pulumi:"httpsHealthCheck"`
	// Configure logging on this health check.
	// Structure is documented below.
	LogConfig *RegionHealthCheckLogConfig `pulumi:"logConfig"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression `a-z?` which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the
	// last character, which cannot be a dash.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The Region in which the created health check should reside.
	// If it is not provided, the provider region is used.
	Region *string `pulumi:"region"`
	// A nested object resource
	// Structure is documented below.
	SslHealthCheck *RegionHealthCheckSslHealthCheck `pulumi:"sslHealthCheck"`
	// A nested object resource
	// Structure is documented below.
	TcpHealthCheck *RegionHealthCheckTcpHealthCheck `pulumi:"tcpHealthCheck"`
	// How long (in seconds) to wait before claiming failure.
	// The default value is 5 seconds.  It is invalid for timeoutSec to have
	// greater value than checkIntervalSec.
	TimeoutSec *int `pulumi:"timeoutSec"`
	// A so-far healthy instance will be marked unhealthy after this many
	// consecutive failures. The default value is 2.
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

// The set of arguments for constructing a RegionHealthCheck resource.
type RegionHealthCheckArgs struct {
	// How often (in seconds) to send a health check. The default value is 5
	// seconds.
	CheckIntervalSec pulumi.IntPtrInput
	// An optional description of this resource. Provide this property when
	// you create the resource.
	Description pulumi.StringPtrInput
	// A nested object resource
	// Structure is documented below.
	GrpcHealthCheck RegionHealthCheckGrpcHealthCheckPtrInput
	// A so-far unhealthy instance will be marked healthy after this many
	// consecutive successes. The default value is 2.
	HealthyThreshold pulumi.IntPtrInput
	// A nested object resource
	// Structure is documented below.
	Http2HealthCheck RegionHealthCheckHttp2HealthCheckPtrInput
	// A nested object resource
	// Structure is documented below.
	HttpHealthCheck RegionHealthCheckHttpHealthCheckPtrInput
	// A nested object resource
	// Structure is documented below.
	HttpsHealthCheck RegionHealthCheckHttpsHealthCheckPtrInput
	// Configure logging on this health check.
	// Structure is documented below.
	LogConfig RegionHealthCheckLogConfigPtrInput
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression `a-z?` which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the
	// last character, which cannot be a dash.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The Region in which the created health check should reside.
	// If it is not provided, the provider region is used.
	Region pulumi.StringPtrInput
	// A nested object resource
	// Structure is documented below.
	SslHealthCheck RegionHealthCheckSslHealthCheckPtrInput
	// A nested object resource
	// Structure is documented below.
	TcpHealthCheck RegionHealthCheckTcpHealthCheckPtrInput
	// How long (in seconds) to wait before claiming failure.
	// The default value is 5 seconds.  It is invalid for timeoutSec to have
	// greater value than checkIntervalSec.
	TimeoutSec pulumi.IntPtrInput
	// A so-far healthy instance will be marked unhealthy after this many
	// consecutive failures. The default value is 2.
	UnhealthyThreshold pulumi.IntPtrInput
}

func (RegionHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionHealthCheckArgs)(nil)).Elem()
}

type RegionHealthCheckInput interface {
	pulumi.Input

	ToRegionHealthCheckOutput() RegionHealthCheckOutput
	ToRegionHealthCheckOutputWithContext(ctx context.Context) RegionHealthCheckOutput
}

func (*RegionHealthCheck) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionHealthCheck)(nil)).Elem()
}

func (i *RegionHealthCheck) ToRegionHealthCheckOutput() RegionHealthCheckOutput {
	return i.ToRegionHealthCheckOutputWithContext(context.Background())
}

func (i *RegionHealthCheck) ToRegionHealthCheckOutputWithContext(ctx context.Context) RegionHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckOutput)
}

// RegionHealthCheckArrayInput is an input type that accepts RegionHealthCheckArray and RegionHealthCheckArrayOutput values.
// You can construct a concrete instance of `RegionHealthCheckArrayInput` via:
//
//	RegionHealthCheckArray{ RegionHealthCheckArgs{...} }
type RegionHealthCheckArrayInput interface {
	pulumi.Input

	ToRegionHealthCheckArrayOutput() RegionHealthCheckArrayOutput
	ToRegionHealthCheckArrayOutputWithContext(context.Context) RegionHealthCheckArrayOutput
}

type RegionHealthCheckArray []RegionHealthCheckInput

func (RegionHealthCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionHealthCheck)(nil)).Elem()
}

func (i RegionHealthCheckArray) ToRegionHealthCheckArrayOutput() RegionHealthCheckArrayOutput {
	return i.ToRegionHealthCheckArrayOutputWithContext(context.Background())
}

func (i RegionHealthCheckArray) ToRegionHealthCheckArrayOutputWithContext(ctx context.Context) RegionHealthCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckArrayOutput)
}

// RegionHealthCheckMapInput is an input type that accepts RegionHealthCheckMap and RegionHealthCheckMapOutput values.
// You can construct a concrete instance of `RegionHealthCheckMapInput` via:
//
//	RegionHealthCheckMap{ "key": RegionHealthCheckArgs{...} }
type RegionHealthCheckMapInput interface {
	pulumi.Input

	ToRegionHealthCheckMapOutput() RegionHealthCheckMapOutput
	ToRegionHealthCheckMapOutputWithContext(context.Context) RegionHealthCheckMapOutput
}

type RegionHealthCheckMap map[string]RegionHealthCheckInput

func (RegionHealthCheckMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionHealthCheck)(nil)).Elem()
}

func (i RegionHealthCheckMap) ToRegionHealthCheckMapOutput() RegionHealthCheckMapOutput {
	return i.ToRegionHealthCheckMapOutputWithContext(context.Background())
}

func (i RegionHealthCheckMap) ToRegionHealthCheckMapOutputWithContext(ctx context.Context) RegionHealthCheckMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckMapOutput)
}

type RegionHealthCheckOutput struct{ *pulumi.OutputState }

func (RegionHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionHealthCheck)(nil)).Elem()
}

func (o RegionHealthCheckOutput) ToRegionHealthCheckOutput() RegionHealthCheckOutput {
	return o
}

func (o RegionHealthCheckOutput) ToRegionHealthCheckOutputWithContext(ctx context.Context) RegionHealthCheckOutput {
	return o
}

// How often (in seconds) to send a health check. The default value is 5
// seconds.
func (o RegionHealthCheckOutput) CheckIntervalSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheck) pulumi.IntPtrOutput { return v.CheckIntervalSec }).(pulumi.IntPtrOutput)
}

// Creation timestamp in RFC3339 text format.
func (o RegionHealthCheckOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionHealthCheck) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when
// you create the resource.
func (o RegionHealthCheckOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheck) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A nested object resource
// Structure is documented below.
func (o RegionHealthCheckOutput) GrpcHealthCheck() RegionHealthCheckGrpcHealthCheckPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheck) RegionHealthCheckGrpcHealthCheckPtrOutput { return v.GrpcHealthCheck }).(RegionHealthCheckGrpcHealthCheckPtrOutput)
}

// A so-far unhealthy instance will be marked healthy after this many
// consecutive successes. The default value is 2.
func (o RegionHealthCheckOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheck) pulumi.IntPtrOutput { return v.HealthyThreshold }).(pulumi.IntPtrOutput)
}

// A nested object resource
// Structure is documented below.
func (o RegionHealthCheckOutput) Http2HealthCheck() RegionHealthCheckHttp2HealthCheckPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheck) RegionHealthCheckHttp2HealthCheckPtrOutput { return v.Http2HealthCheck }).(RegionHealthCheckHttp2HealthCheckPtrOutput)
}

// A nested object resource
// Structure is documented below.
func (o RegionHealthCheckOutput) HttpHealthCheck() RegionHealthCheckHttpHealthCheckPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheck) RegionHealthCheckHttpHealthCheckPtrOutput { return v.HttpHealthCheck }).(RegionHealthCheckHttpHealthCheckPtrOutput)
}

// A nested object resource
// Structure is documented below.
func (o RegionHealthCheckOutput) HttpsHealthCheck() RegionHealthCheckHttpsHealthCheckPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheck) RegionHealthCheckHttpsHealthCheckPtrOutput { return v.HttpsHealthCheck }).(RegionHealthCheckHttpsHealthCheckPtrOutput)
}

// Configure logging on this health check.
// Structure is documented below.
func (o RegionHealthCheckOutput) LogConfig() RegionHealthCheckLogConfigOutput {
	return o.ApplyT(func(v *RegionHealthCheck) RegionHealthCheckLogConfigOutput { return v.LogConfig }).(RegionHealthCheckLogConfigOutput)
}

// Name of the resource. Provided by the client when the resource is
// created. The name must be 1-63 characters long, and comply with
// RFC1035.  Specifically, the name must be 1-63 characters long and
// match the regular expression `a-z?` which means
// the first character must be a lowercase letter, and all following
// characters must be a dash, lowercase letter, or digit, except the
// last character, which cannot be a dash.
//
// ***
func (o RegionHealthCheckOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionHealthCheck) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RegionHealthCheckOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionHealthCheck) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The Region in which the created health check should reside.
// If it is not provided, the provider region is used.
func (o RegionHealthCheckOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionHealthCheck) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The URI of the created resource.
func (o RegionHealthCheckOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionHealthCheck) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// A nested object resource
// Structure is documented below.
func (o RegionHealthCheckOutput) SslHealthCheck() RegionHealthCheckSslHealthCheckPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheck) RegionHealthCheckSslHealthCheckPtrOutput { return v.SslHealthCheck }).(RegionHealthCheckSslHealthCheckPtrOutput)
}

// A nested object resource
// Structure is documented below.
func (o RegionHealthCheckOutput) TcpHealthCheck() RegionHealthCheckTcpHealthCheckPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheck) RegionHealthCheckTcpHealthCheckPtrOutput { return v.TcpHealthCheck }).(RegionHealthCheckTcpHealthCheckPtrOutput)
}

// How long (in seconds) to wait before claiming failure.
// The default value is 5 seconds.  It is invalid for timeoutSec to have
// greater value than checkIntervalSec.
func (o RegionHealthCheckOutput) TimeoutSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheck) pulumi.IntPtrOutput { return v.TimeoutSec }).(pulumi.IntPtrOutput)
}

// The type of the health check. One of HTTP, HTTP2, HTTPS, TCP, or SSL.
func (o RegionHealthCheckOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionHealthCheck) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// A so-far healthy instance will be marked unhealthy after this many
// consecutive failures. The default value is 2.
func (o RegionHealthCheckOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheck) pulumi.IntPtrOutput { return v.UnhealthyThreshold }).(pulumi.IntPtrOutput)
}

type RegionHealthCheckArrayOutput struct{ *pulumi.OutputState }

func (RegionHealthCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionHealthCheck)(nil)).Elem()
}

func (o RegionHealthCheckArrayOutput) ToRegionHealthCheckArrayOutput() RegionHealthCheckArrayOutput {
	return o
}

func (o RegionHealthCheckArrayOutput) ToRegionHealthCheckArrayOutputWithContext(ctx context.Context) RegionHealthCheckArrayOutput {
	return o
}

func (o RegionHealthCheckArrayOutput) Index(i pulumi.IntInput) RegionHealthCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionHealthCheck {
		return vs[0].([]*RegionHealthCheck)[vs[1].(int)]
	}).(RegionHealthCheckOutput)
}

type RegionHealthCheckMapOutput struct{ *pulumi.OutputState }

func (RegionHealthCheckMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionHealthCheck)(nil)).Elem()
}

func (o RegionHealthCheckMapOutput) ToRegionHealthCheckMapOutput() RegionHealthCheckMapOutput {
	return o
}

func (o RegionHealthCheckMapOutput) ToRegionHealthCheckMapOutputWithContext(ctx context.Context) RegionHealthCheckMapOutput {
	return o
}

func (o RegionHealthCheckMapOutput) MapIndex(k pulumi.StringInput) RegionHealthCheckOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionHealthCheck {
		return vs[0].(map[string]*RegionHealthCheck)[vs[1].(string)]
	}).(RegionHealthCheckOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionHealthCheckInput)(nil)).Elem(), &RegionHealthCheck{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionHealthCheckArrayInput)(nil)).Elem(), RegionHealthCheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionHealthCheckMapInput)(nil)).Elem(), RegionHealthCheckMap{})
	pulumi.RegisterOutputType(RegionHealthCheckOutput{})
	pulumi.RegisterOutputType(RegionHealthCheckArrayOutput{})
	pulumi.RegisterOutputType(RegionHealthCheckMapOutput{})
}
