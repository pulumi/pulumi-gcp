// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An interconnect group resource allows customers to create, analyze, and
// expand their redundant connections.
//
// To get more information about InterconnectGroup, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/interconnects)
// * How-to Guides
//   - [Create a Dedicated Interconnect](https://cloud.google.com/network-connectivity/docs/interconnect/concepts/dedicated-overview)
//
// ## Example Usage
//
// ### Interconnect Group Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewInterconnectGroup(ctx, "example-interconnect-group", &compute.InterconnectGroupArgs{
//				Name: pulumi.String("example-interconnect-group"),
//				Intent: &compute.InterconnectGroupIntentArgs{
//					TopologyCapability: pulumi.String("NO_SLA"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// InterconnectGroup can be imported using any of these accepted formats:
//
// * `projects/{{project}}/global/interconnectGroups/{{name}}`
//
// * `{{project}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, InterconnectGroup can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:compute/interconnectGroup:InterconnectGroup default projects/{{project}}/global/interconnectGroups/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/interconnectGroup:InterconnectGroup default {{project}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/interconnectGroup:InterconnectGroup default {{name}}
// ```
type InterconnectGroup struct {
	pulumi.CustomResourceState

	// The status of the group as configured. This has the same
	// structure as the operational field reported by the OperationalStatus
	// method, but does not take into account the operational status of each
	// resource.
	// Structure is documented below.
	Configureds InterconnectGroupConfiguredArrayOutput `pulumi:"configureds"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The user's intent for this group. This is the only required field besides
	// the name that must be specified on group creation.
	// Structure is documented below.
	Intent InterconnectGroupIntentOutput `pulumi:"intent"`
	// Interconnects in the InterconnectGroup. Keys are arbitrary user-specified
	// strings. Users are encouraged, but not required, to use their preferred
	// format for resource links as keys.
	// Note that there are add-members and remove-members methods in gcloud.
	// The size of this map is limited by an "Interconnects per group" quota.
	// Structure is documented below.
	Interconnects InterconnectGroupInterconnectArrayOutput `pulumi:"interconnects"`
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// An analysis of the physical layout of Interconnects in this
	// group. Every Interconnect in the group is shown once in this structure.
	// Structure is documented below.
	PhysicalStructures InterconnectGroupPhysicalStructureArrayOutput `pulumi:"physicalStructures"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewInterconnectGroup registers a new resource with the given unique name, arguments, and options.
func NewInterconnectGroup(ctx *pulumi.Context,
	name string, args *InterconnectGroupArgs, opts ...pulumi.ResourceOption) (*InterconnectGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Intent == nil {
		return nil, errors.New("invalid value for required argument 'Intent'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InterconnectGroup
	err := ctx.RegisterResource("gcp:compute/interconnectGroup:InterconnectGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterconnectGroup gets an existing InterconnectGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterconnectGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterconnectGroupState, opts ...pulumi.ResourceOption) (*InterconnectGroup, error) {
	var resource InterconnectGroup
	err := ctx.ReadResource("gcp:compute/interconnectGroup:InterconnectGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterconnectGroup resources.
type interconnectGroupState struct {
	// The status of the group as configured. This has the same
	// structure as the operational field reported by the OperationalStatus
	// method, but does not take into account the operational status of each
	// resource.
	// Structure is documented below.
	Configureds []InterconnectGroupConfigured `pulumi:"configureds"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// The user's intent for this group. This is the only required field besides
	// the name that must be specified on group creation.
	// Structure is documented below.
	Intent *InterconnectGroupIntent `pulumi:"intent"`
	// Interconnects in the InterconnectGroup. Keys are arbitrary user-specified
	// strings. Users are encouraged, but not required, to use their preferred
	// format for resource links as keys.
	// Note that there are add-members and remove-members methods in gcloud.
	// The size of this map is limited by an "Interconnects per group" quota.
	// Structure is documented below.
	Interconnects []InterconnectGroupInterconnect `pulumi:"interconnects"`
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// An analysis of the physical layout of Interconnects in this
	// group. Every Interconnect in the group is shown once in this structure.
	// Structure is documented below.
	PhysicalStructures []InterconnectGroupPhysicalStructure `pulumi:"physicalStructures"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

type InterconnectGroupState struct {
	// The status of the group as configured. This has the same
	// structure as the operational field reported by the OperationalStatus
	// method, but does not take into account the operational status of each
	// resource.
	// Structure is documented below.
	Configureds InterconnectGroupConfiguredArrayInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// The user's intent for this group. This is the only required field besides
	// the name that must be specified on group creation.
	// Structure is documented below.
	Intent InterconnectGroupIntentPtrInput
	// Interconnects in the InterconnectGroup. Keys are arbitrary user-specified
	// strings. Users are encouraged, but not required, to use their preferred
	// format for resource links as keys.
	// Note that there are add-members and remove-members methods in gcloud.
	// The size of this map is limited by an "Interconnects per group" quota.
	// Structure is documented below.
	Interconnects InterconnectGroupInterconnectArrayInput
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// An analysis of the physical layout of Interconnects in this
	// group. Every Interconnect in the group is shown once in this structure.
	// Structure is documented below.
	PhysicalStructures InterconnectGroupPhysicalStructureArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (InterconnectGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*interconnectGroupState)(nil)).Elem()
}

type interconnectGroupArgs struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// The user's intent for this group. This is the only required field besides
	// the name that must be specified on group creation.
	// Structure is documented below.
	Intent InterconnectGroupIntent `pulumi:"intent"`
	// Interconnects in the InterconnectGroup. Keys are arbitrary user-specified
	// strings. Users are encouraged, but not required, to use their preferred
	// format for resource links as keys.
	// Note that there are add-members and remove-members methods in gcloud.
	// The size of this map is limited by an "Interconnects per group" quota.
	// Structure is documented below.
	Interconnects []InterconnectGroupInterconnect `pulumi:"interconnects"`
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a InterconnectGroup resource.
type InterconnectGroupArgs struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// The user's intent for this group. This is the only required field besides
	// the name that must be specified on group creation.
	// Structure is documented below.
	Intent InterconnectGroupIntentInput
	// Interconnects in the InterconnectGroup. Keys are arbitrary user-specified
	// strings. Users are encouraged, but not required, to use their preferred
	// format for resource links as keys.
	// Note that there are add-members and remove-members methods in gcloud.
	// The size of this map is limited by an "Interconnects per group" quota.
	// Structure is documented below.
	Interconnects InterconnectGroupInterconnectArrayInput
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (InterconnectGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interconnectGroupArgs)(nil)).Elem()
}

type InterconnectGroupInput interface {
	pulumi.Input

	ToInterconnectGroupOutput() InterconnectGroupOutput
	ToInterconnectGroupOutputWithContext(ctx context.Context) InterconnectGroupOutput
}

func (*InterconnectGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**InterconnectGroup)(nil)).Elem()
}

func (i *InterconnectGroup) ToInterconnectGroupOutput() InterconnectGroupOutput {
	return i.ToInterconnectGroupOutputWithContext(context.Background())
}

func (i *InterconnectGroup) ToInterconnectGroupOutputWithContext(ctx context.Context) InterconnectGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectGroupOutput)
}

// InterconnectGroupArrayInput is an input type that accepts InterconnectGroupArray and InterconnectGroupArrayOutput values.
// You can construct a concrete instance of `InterconnectGroupArrayInput` via:
//
//	InterconnectGroupArray{ InterconnectGroupArgs{...} }
type InterconnectGroupArrayInput interface {
	pulumi.Input

	ToInterconnectGroupArrayOutput() InterconnectGroupArrayOutput
	ToInterconnectGroupArrayOutputWithContext(context.Context) InterconnectGroupArrayOutput
}

type InterconnectGroupArray []InterconnectGroupInput

func (InterconnectGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterconnectGroup)(nil)).Elem()
}

func (i InterconnectGroupArray) ToInterconnectGroupArrayOutput() InterconnectGroupArrayOutput {
	return i.ToInterconnectGroupArrayOutputWithContext(context.Background())
}

func (i InterconnectGroupArray) ToInterconnectGroupArrayOutputWithContext(ctx context.Context) InterconnectGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectGroupArrayOutput)
}

// InterconnectGroupMapInput is an input type that accepts InterconnectGroupMap and InterconnectGroupMapOutput values.
// You can construct a concrete instance of `InterconnectGroupMapInput` via:
//
//	InterconnectGroupMap{ "key": InterconnectGroupArgs{...} }
type InterconnectGroupMapInput interface {
	pulumi.Input

	ToInterconnectGroupMapOutput() InterconnectGroupMapOutput
	ToInterconnectGroupMapOutputWithContext(context.Context) InterconnectGroupMapOutput
}

type InterconnectGroupMap map[string]InterconnectGroupInput

func (InterconnectGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterconnectGroup)(nil)).Elem()
}

func (i InterconnectGroupMap) ToInterconnectGroupMapOutput() InterconnectGroupMapOutput {
	return i.ToInterconnectGroupMapOutputWithContext(context.Background())
}

func (i InterconnectGroupMap) ToInterconnectGroupMapOutputWithContext(ctx context.Context) InterconnectGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectGroupMapOutput)
}

type InterconnectGroupOutput struct{ *pulumi.OutputState }

func (InterconnectGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterconnectGroup)(nil)).Elem()
}

func (o InterconnectGroupOutput) ToInterconnectGroupOutput() InterconnectGroupOutput {
	return o
}

func (o InterconnectGroupOutput) ToInterconnectGroupOutputWithContext(ctx context.Context) InterconnectGroupOutput {
	return o
}

// The status of the group as configured. This has the same
// structure as the operational field reported by the OperationalStatus
// method, but does not take into account the operational status of each
// resource.
// Structure is documented below.
func (o InterconnectGroupOutput) Configureds() InterconnectGroupConfiguredArrayOutput {
	return o.ApplyT(func(v *InterconnectGroup) InterconnectGroupConfiguredArrayOutput { return v.Configureds }).(InterconnectGroupConfiguredArrayOutput)
}

// Creation timestamp in RFC3339 text format.
func (o InterconnectGroupOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectGroup) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o InterconnectGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterconnectGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The user's intent for this group. This is the only required field besides
// the name that must be specified on group creation.
// Structure is documented below.
func (o InterconnectGroupOutput) Intent() InterconnectGroupIntentOutput {
	return o.ApplyT(func(v *InterconnectGroup) InterconnectGroupIntentOutput { return v.Intent }).(InterconnectGroupIntentOutput)
}

// Interconnects in the InterconnectGroup. Keys are arbitrary user-specified
// strings. Users are encouraged, but not required, to use their preferred
// format for resource links as keys.
// Note that there are add-members and remove-members methods in gcloud.
// The size of this map is limited by an "Interconnects per group" quota.
// Structure is documented below.
func (o InterconnectGroupOutput) Interconnects() InterconnectGroupInterconnectArrayOutput {
	return o.ApplyT(func(v *InterconnectGroup) InterconnectGroupInterconnectArrayOutput { return v.Interconnects }).(InterconnectGroupInterconnectArrayOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be
// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
// long and match the regular expression `a-z?` which means the first
// character must be a lowercase letter, and all following characters must be a dash,
// lowercase letter, or digit, except the last character, which cannot be a dash.
func (o InterconnectGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An analysis of the physical layout of Interconnects in this
// group. Every Interconnect in the group is shown once in this structure.
// Structure is documented below.
func (o InterconnectGroupOutput) PhysicalStructures() InterconnectGroupPhysicalStructureArrayOutput {
	return o.ApplyT(func(v *InterconnectGroup) InterconnectGroupPhysicalStructureArrayOutput { return v.PhysicalStructures }).(InterconnectGroupPhysicalStructureArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o InterconnectGroupOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectGroup) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type InterconnectGroupArrayOutput struct{ *pulumi.OutputState }

func (InterconnectGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterconnectGroup)(nil)).Elem()
}

func (o InterconnectGroupArrayOutput) ToInterconnectGroupArrayOutput() InterconnectGroupArrayOutput {
	return o
}

func (o InterconnectGroupArrayOutput) ToInterconnectGroupArrayOutputWithContext(ctx context.Context) InterconnectGroupArrayOutput {
	return o
}

func (o InterconnectGroupArrayOutput) Index(i pulumi.IntInput) InterconnectGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterconnectGroup {
		return vs[0].([]*InterconnectGroup)[vs[1].(int)]
	}).(InterconnectGroupOutput)
}

type InterconnectGroupMapOutput struct{ *pulumi.OutputState }

func (InterconnectGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterconnectGroup)(nil)).Elem()
}

func (o InterconnectGroupMapOutput) ToInterconnectGroupMapOutput() InterconnectGroupMapOutput {
	return o
}

func (o InterconnectGroupMapOutput) ToInterconnectGroupMapOutputWithContext(ctx context.Context) InterconnectGroupMapOutput {
	return o
}

func (o InterconnectGroupMapOutput) MapIndex(k pulumi.StringInput) InterconnectGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterconnectGroup {
		return vs[0].(map[string]*InterconnectGroup)[vs[1].(string)]
	}).(InterconnectGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterconnectGroupInput)(nil)).Elem(), &InterconnectGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterconnectGroupArrayInput)(nil)).Elem(), InterconnectGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterconnectGroupMapInput)(nil)).Elem(), InterconnectGroupMap{})
	pulumi.RegisterOutputType(InterconnectGroupOutput{})
	pulumi.RegisterOutputType(InterconnectGroupArrayOutput{})
	pulumi.RegisterOutputType(InterconnectGroupMapOutput{})
}
