// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A route policy created in a router
//
// To get more information about RouterRoutePolicy, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/routers)
// * How-to Guides
//   - [Google Cloud Router](https://cloud.google.com/router/docs/)
//
// ## Example Usage
//
// ### Router Route Policy Export
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			net, err := compute.NewNetwork(ctx, "net", &compute.NetworkArgs{
//				Name:                  pulumi.String("my-network"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := compute.NewSubnetwork(ctx, "subnet", &compute.SubnetworkArgs{
//				Name:        pulumi.String("my-subnetwork"),
//				Network:     net.ID(),
//				IpCidrRange: pulumi.String("10.0.0.0/16"),
//				Region:      pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			router, err := compute.NewRouter(ctx, "router", &compute.RouterArgs{
//				Name:    pulumi.String("my-router"),
//				Region:  subnet.Region,
//				Network: net.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRouterRoutePolicy(ctx, "rp-export", &compute.RouterRoutePolicyArgs{
//				Router: router.Name,
//				Region: router.Region,
//				Name:   pulumi.String("my-rp1"),
//				Type:   pulumi.String("ROUTE_POLICY_TYPE_EXPORT"),
//				Terms: compute.RouterRoutePolicyTermArray{
//					&compute.RouterRoutePolicyTermArgs{
//						Priority: pulumi.Int(1),
//						Match: &compute.RouterRoutePolicyTermMatchArgs{
//							Expression: pulumi.String("destination == '10.0.0.0/12'"),
//						},
//						Actions: compute.RouterRoutePolicyTermActionArray{
//							&compute.RouterRoutePolicyTermActionArgs{
//								Expression: pulumi.String("accept()"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Router Route Policy Import
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			net, err := compute.NewNetwork(ctx, "net", &compute.NetworkArgs{
//				Name:                  pulumi.String("my-network"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := compute.NewSubnetwork(ctx, "subnet", &compute.SubnetworkArgs{
//				Name:        pulumi.String("my-subnetwork"),
//				Network:     net.ID(),
//				IpCidrRange: pulumi.String("10.0.0.0/16"),
//				Region:      pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			router, err := compute.NewRouter(ctx, "router", &compute.RouterArgs{
//				Name:    pulumi.String("my-router"),
//				Region:  subnet.Region,
//				Network: net.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRouterRoutePolicy(ctx, "rp-import", &compute.RouterRoutePolicyArgs{
//				Name:   pulumi.String("my-rp2"),
//				Router: router.Name,
//				Region: router.Region,
//				Type:   pulumi.String("ROUTE_POLICY_TYPE_IMPORT"),
//				Terms: compute.RouterRoutePolicyTermArray{
//					&compute.RouterRoutePolicyTermArgs{
//						Priority: pulumi.Int(2),
//						Match: &compute.RouterRoutePolicyTermMatchArgs{
//							Expression: pulumi.String("destination == '10.0.0.0/12'"),
//						},
//						Actions: compute.RouterRoutePolicyTermActionArray{
//							&compute.RouterRoutePolicyTermActionArgs{
//								Expression: pulumi.String("accept()"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RouterRoutePolicy can be imported using any of these accepted formats:
//
// * `{{project}}/{{region}}/{{router}}/routePolicies/{{name}}`
//
// * `{{project}}/{{region}}/{{router}}/{{name}}`
//
// * `{{region}}/{{router}}/{{name}}`
//
// * `{{router}}/{{name}}`
//
// When using the `pulumi import` command, RouterRoutePolicy can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:compute/routerRoutePolicy:RouterRoutePolicy default {{project}}/{{region}}/{{router}}/routePolicies/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/routerRoutePolicy:RouterRoutePolicy default {{project}}/{{region}}/{{router}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/routerRoutePolicy:RouterRoutePolicy default {{region}}/{{router}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/routerRoutePolicy:RouterRoutePolicy default {{router}}/{{name}}
// ```
type RouterRoutePolicy struct {
	pulumi.CustomResourceState

	// The fingerprint used for optimistic locking of this resource.  Used
	// internally during updates.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// Name of the route policy. This policy's name, which must be a resource ID segment and unique within all policies owned by the Router
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Region where the router and NAT reside.
	Region pulumi.StringOutput `pulumi:"region"`
	// The name of the Cloud Router in which this route policy will be configured.
	Router pulumi.StringOutput `pulumi:"router"`
	// List of terms (the order in the list is not important, they are evaluated in order of priority).
	// Structure is documented below.
	Terms RouterRoutePolicyTermArrayOutput `pulumi:"terms"`
	// This is policy's type, which is one of IMPORT or EXPORT
	// Possible values are: `ROUTE_POLICY_TYPE_IMPORT`, `ROUTE_POLICY_TYPE_EXPORT`.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewRouterRoutePolicy registers a new resource with the given unique name, arguments, and options.
func NewRouterRoutePolicy(ctx *pulumi.Context,
	name string, args *RouterRoutePolicyArgs, opts ...pulumi.ResourceOption) (*RouterRoutePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Router == nil {
		return nil, errors.New("invalid value for required argument 'Router'")
	}
	if args.Terms == nil {
		return nil, errors.New("invalid value for required argument 'Terms'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouterRoutePolicy
	err := ctx.RegisterResource("gcp:compute/routerRoutePolicy:RouterRoutePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterRoutePolicy gets an existing RouterRoutePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterRoutePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterRoutePolicyState, opts ...pulumi.ResourceOption) (*RouterRoutePolicy, error) {
	var resource RouterRoutePolicy
	err := ctx.ReadResource("gcp:compute/routerRoutePolicy:RouterRoutePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterRoutePolicy resources.
type routerRoutePolicyState struct {
	// The fingerprint used for optimistic locking of this resource.  Used
	// internally during updates.
	Fingerprint *string `pulumi:"fingerprint"`
	// Name of the route policy. This policy's name, which must be a resource ID segment and unique within all policies owned by the Router
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Region where the router and NAT reside.
	Region *string `pulumi:"region"`
	// The name of the Cloud Router in which this route policy will be configured.
	Router *string `pulumi:"router"`
	// List of terms (the order in the list is not important, they are evaluated in order of priority).
	// Structure is documented below.
	Terms []RouterRoutePolicyTerm `pulumi:"terms"`
	// This is policy's type, which is one of IMPORT or EXPORT
	// Possible values are: `ROUTE_POLICY_TYPE_IMPORT`, `ROUTE_POLICY_TYPE_EXPORT`.
	Type *string `pulumi:"type"`
}

type RouterRoutePolicyState struct {
	// The fingerprint used for optimistic locking of this resource.  Used
	// internally during updates.
	Fingerprint pulumi.StringPtrInput
	// Name of the route policy. This policy's name, which must be a resource ID segment and unique within all policies owned by the Router
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Region where the router and NAT reside.
	Region pulumi.StringPtrInput
	// The name of the Cloud Router in which this route policy will be configured.
	Router pulumi.StringPtrInput
	// List of terms (the order in the list is not important, they are evaluated in order of priority).
	// Structure is documented below.
	Terms RouterRoutePolicyTermArrayInput
	// This is policy's type, which is one of IMPORT or EXPORT
	// Possible values are: `ROUTE_POLICY_TYPE_IMPORT`, `ROUTE_POLICY_TYPE_EXPORT`.
	Type pulumi.StringPtrInput
}

func (RouterRoutePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerRoutePolicyState)(nil)).Elem()
}

type routerRoutePolicyArgs struct {
	// Name of the route policy. This policy's name, which must be a resource ID segment and unique within all policies owned by the Router
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Region where the router and NAT reside.
	Region *string `pulumi:"region"`
	// The name of the Cloud Router in which this route policy will be configured.
	Router string `pulumi:"router"`
	// List of terms (the order in the list is not important, they are evaluated in order of priority).
	// Structure is documented below.
	Terms []RouterRoutePolicyTerm `pulumi:"terms"`
	// This is policy's type, which is one of IMPORT or EXPORT
	// Possible values are: `ROUTE_POLICY_TYPE_IMPORT`, `ROUTE_POLICY_TYPE_EXPORT`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a RouterRoutePolicy resource.
type RouterRoutePolicyArgs struct {
	// Name of the route policy. This policy's name, which must be a resource ID segment and unique within all policies owned by the Router
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Region where the router and NAT reside.
	Region pulumi.StringPtrInput
	// The name of the Cloud Router in which this route policy will be configured.
	Router pulumi.StringInput
	// List of terms (the order in the list is not important, they are evaluated in order of priority).
	// Structure is documented below.
	Terms RouterRoutePolicyTermArrayInput
	// This is policy's type, which is one of IMPORT or EXPORT
	// Possible values are: `ROUTE_POLICY_TYPE_IMPORT`, `ROUTE_POLICY_TYPE_EXPORT`.
	Type pulumi.StringPtrInput
}

func (RouterRoutePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerRoutePolicyArgs)(nil)).Elem()
}

type RouterRoutePolicyInput interface {
	pulumi.Input

	ToRouterRoutePolicyOutput() RouterRoutePolicyOutput
	ToRouterRoutePolicyOutputWithContext(ctx context.Context) RouterRoutePolicyOutput
}

func (*RouterRoutePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterRoutePolicy)(nil)).Elem()
}

func (i *RouterRoutePolicy) ToRouterRoutePolicyOutput() RouterRoutePolicyOutput {
	return i.ToRouterRoutePolicyOutputWithContext(context.Background())
}

func (i *RouterRoutePolicy) ToRouterRoutePolicyOutputWithContext(ctx context.Context) RouterRoutePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterRoutePolicyOutput)
}

// RouterRoutePolicyArrayInput is an input type that accepts RouterRoutePolicyArray and RouterRoutePolicyArrayOutput values.
// You can construct a concrete instance of `RouterRoutePolicyArrayInput` via:
//
//	RouterRoutePolicyArray{ RouterRoutePolicyArgs{...} }
type RouterRoutePolicyArrayInput interface {
	pulumi.Input

	ToRouterRoutePolicyArrayOutput() RouterRoutePolicyArrayOutput
	ToRouterRoutePolicyArrayOutputWithContext(context.Context) RouterRoutePolicyArrayOutput
}

type RouterRoutePolicyArray []RouterRoutePolicyInput

func (RouterRoutePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterRoutePolicy)(nil)).Elem()
}

func (i RouterRoutePolicyArray) ToRouterRoutePolicyArrayOutput() RouterRoutePolicyArrayOutput {
	return i.ToRouterRoutePolicyArrayOutputWithContext(context.Background())
}

func (i RouterRoutePolicyArray) ToRouterRoutePolicyArrayOutputWithContext(ctx context.Context) RouterRoutePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterRoutePolicyArrayOutput)
}

// RouterRoutePolicyMapInput is an input type that accepts RouterRoutePolicyMap and RouterRoutePolicyMapOutput values.
// You can construct a concrete instance of `RouterRoutePolicyMapInput` via:
//
//	RouterRoutePolicyMap{ "key": RouterRoutePolicyArgs{...} }
type RouterRoutePolicyMapInput interface {
	pulumi.Input

	ToRouterRoutePolicyMapOutput() RouterRoutePolicyMapOutput
	ToRouterRoutePolicyMapOutputWithContext(context.Context) RouterRoutePolicyMapOutput
}

type RouterRoutePolicyMap map[string]RouterRoutePolicyInput

func (RouterRoutePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterRoutePolicy)(nil)).Elem()
}

func (i RouterRoutePolicyMap) ToRouterRoutePolicyMapOutput() RouterRoutePolicyMapOutput {
	return i.ToRouterRoutePolicyMapOutputWithContext(context.Background())
}

func (i RouterRoutePolicyMap) ToRouterRoutePolicyMapOutputWithContext(ctx context.Context) RouterRoutePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterRoutePolicyMapOutput)
}

type RouterRoutePolicyOutput struct{ *pulumi.OutputState }

func (RouterRoutePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterRoutePolicy)(nil)).Elem()
}

func (o RouterRoutePolicyOutput) ToRouterRoutePolicyOutput() RouterRoutePolicyOutput {
	return o
}

func (o RouterRoutePolicyOutput) ToRouterRoutePolicyOutputWithContext(ctx context.Context) RouterRoutePolicyOutput {
	return o
}

// The fingerprint used for optimistic locking of this resource.  Used
// internally during updates.
func (o RouterRoutePolicyOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterRoutePolicy) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// Name of the route policy. This policy's name, which must be a resource ID segment and unique within all policies owned by the Router
func (o RouterRoutePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterRoutePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RouterRoutePolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterRoutePolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Region where the router and NAT reside.
func (o RouterRoutePolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterRoutePolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The name of the Cloud Router in which this route policy will be configured.
func (o RouterRoutePolicyOutput) Router() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterRoutePolicy) pulumi.StringOutput { return v.Router }).(pulumi.StringOutput)
}

// List of terms (the order in the list is not important, they are evaluated in order of priority).
// Structure is documented below.
func (o RouterRoutePolicyOutput) Terms() RouterRoutePolicyTermArrayOutput {
	return o.ApplyT(func(v *RouterRoutePolicy) RouterRoutePolicyTermArrayOutput { return v.Terms }).(RouterRoutePolicyTermArrayOutput)
}

// This is policy's type, which is one of IMPORT or EXPORT
// Possible values are: `ROUTE_POLICY_TYPE_IMPORT`, `ROUTE_POLICY_TYPE_EXPORT`.
func (o RouterRoutePolicyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterRoutePolicy) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type RouterRoutePolicyArrayOutput struct{ *pulumi.OutputState }

func (RouterRoutePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterRoutePolicy)(nil)).Elem()
}

func (o RouterRoutePolicyArrayOutput) ToRouterRoutePolicyArrayOutput() RouterRoutePolicyArrayOutput {
	return o
}

func (o RouterRoutePolicyArrayOutput) ToRouterRoutePolicyArrayOutputWithContext(ctx context.Context) RouterRoutePolicyArrayOutput {
	return o
}

func (o RouterRoutePolicyArrayOutput) Index(i pulumi.IntInput) RouterRoutePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterRoutePolicy {
		return vs[0].([]*RouterRoutePolicy)[vs[1].(int)]
	}).(RouterRoutePolicyOutput)
}

type RouterRoutePolicyMapOutput struct{ *pulumi.OutputState }

func (RouterRoutePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterRoutePolicy)(nil)).Elem()
}

func (o RouterRoutePolicyMapOutput) ToRouterRoutePolicyMapOutput() RouterRoutePolicyMapOutput {
	return o
}

func (o RouterRoutePolicyMapOutput) ToRouterRoutePolicyMapOutputWithContext(ctx context.Context) RouterRoutePolicyMapOutput {
	return o
}

func (o RouterRoutePolicyMapOutput) MapIndex(k pulumi.StringInput) RouterRoutePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterRoutePolicy {
		return vs[0].(map[string]*RouterRoutePolicy)[vs[1].(string)]
	}).(RouterRoutePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterRoutePolicyInput)(nil)).Elem(), &RouterRoutePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterRoutePolicyArrayInput)(nil)).Elem(), RouterRoutePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterRoutePolicyMapInput)(nil)).Elem(), RouterRoutePolicyMap{})
	pulumi.RegisterOutputType(RouterRoutePolicyOutput{})
	pulumi.RegisterOutputType(RouterRoutePolicyArrayOutput{})
	pulumi.RegisterOutputType(RouterRoutePolicyMapOutput{})
}
