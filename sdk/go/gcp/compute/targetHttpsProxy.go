// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a TargetHttpsProxy resource, which is used by one or more
// global forwarding rule to route incoming HTTPS requests to a URL map.
//
// To get more information about TargetHttpsProxy, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/v1/targetHttpsProxies)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/compute/docs/load-balancing/http/target-proxies)
//
// ## Example Usage
//
// ### Target Https Proxy Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "path/to/private.key",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile1, err := std.File(ctx, &std.FileArgs{
//				Input: "path/to/certificate.crt",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultSSLCertificate, err := compute.NewSSLCertificate(ctx, "default", &compute.SSLCertificateArgs{
//				Name:        pulumi.String("my-certificate"),
//				PrivateKey:  pulumi.String(invokeFile.Result),
//				Certificate: pulumi.String(invokeFile1.Result),
//			})
//			if err != nil {
//				return err
//			}
//			defaultHttpHealthCheck, err := compute.NewHttpHealthCheck(ctx, "default", &compute.HttpHealthCheckArgs{
//				Name:             pulumi.String("http-health-check"),
//				RequestPath:      pulumi.String("/"),
//				CheckIntervalSec: pulumi.Int(1),
//				TimeoutSec:       pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBackendService, err := compute.NewBackendService(ctx, "default", &compute.BackendServiceArgs{
//				Name:         pulumi.String("backend-service"),
//				PortName:     pulumi.String("http"),
//				Protocol:     pulumi.String("HTTP"),
//				TimeoutSec:   pulumi.Int(10),
//				HealthChecks: defaultHttpHealthCheck.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultURLMap, err := compute.NewURLMap(ctx, "default", &compute.URLMapArgs{
//				Name:           pulumi.String("url-map"),
//				Description:    pulumi.String("a description"),
//				DefaultService: defaultBackendService.ID(),
//				HostRules: compute.URLMapHostRuleArray{
//					&compute.URLMapHostRuleArgs{
//						Hosts: pulumi.StringArray{
//							pulumi.String("mysite.com"),
//						},
//						PathMatcher: pulumi.String("allpaths"),
//					},
//				},
//				PathMatchers: compute.URLMapPathMatcherArray{
//					&compute.URLMapPathMatcherArgs{
//						Name:           pulumi.String("allpaths"),
//						DefaultService: defaultBackendService.ID(),
//						PathRules: compute.URLMapPathMatcherPathRuleArray{
//							&compute.URLMapPathMatcherPathRuleArgs{
//								Paths: pulumi.StringArray{
//									pulumi.String("/*"),
//								},
//								Service: defaultBackendService.ID(),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewTargetHttpsProxy(ctx, "default", &compute.TargetHttpsProxyArgs{
//				Name:   pulumi.String("test-proxy"),
//				UrlMap: defaultURLMap.ID(),
//				SslCertificates: pulumi.StringArray{
//					defaultSSLCertificate.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Target Https Proxy Http Keep Alive Timeout
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "path/to/private.key",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile1, err := std.File(ctx, &std.FileArgs{
//				Input: "path/to/certificate.crt",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultSSLCertificate, err := compute.NewSSLCertificate(ctx, "default", &compute.SSLCertificateArgs{
//				Name:        pulumi.String("my-certificate"),
//				PrivateKey:  pulumi.String(invokeFile.Result),
//				Certificate: pulumi.String(invokeFile1.Result),
//			})
//			if err != nil {
//				return err
//			}
//			defaultHttpHealthCheck, err := compute.NewHttpHealthCheck(ctx, "default", &compute.HttpHealthCheckArgs{
//				Name:             pulumi.String("http-health-check"),
//				RequestPath:      pulumi.String("/"),
//				CheckIntervalSec: pulumi.Int(1),
//				TimeoutSec:       pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBackendService, err := compute.NewBackendService(ctx, "default", &compute.BackendServiceArgs{
//				Name:                pulumi.String("backend-service"),
//				PortName:            pulumi.String("http"),
//				Protocol:            pulumi.String("HTTP"),
//				TimeoutSec:          pulumi.Int(10),
//				LoadBalancingScheme: pulumi.String("EXTERNAL_MANAGED"),
//				HealthChecks:        defaultHttpHealthCheck.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultURLMap, err := compute.NewURLMap(ctx, "default", &compute.URLMapArgs{
//				Name:           pulumi.String("url-map"),
//				Description:    pulumi.String("a description"),
//				DefaultService: defaultBackendService.ID(),
//				HostRules: compute.URLMapHostRuleArray{
//					&compute.URLMapHostRuleArgs{
//						Hosts: pulumi.StringArray{
//							pulumi.String("mysite.com"),
//						},
//						PathMatcher: pulumi.String("allpaths"),
//					},
//				},
//				PathMatchers: compute.URLMapPathMatcherArray{
//					&compute.URLMapPathMatcherArgs{
//						Name:           pulumi.String("allpaths"),
//						DefaultService: defaultBackendService.ID(),
//						PathRules: compute.URLMapPathMatcherPathRuleArray{
//							&compute.URLMapPathMatcherPathRuleArgs{
//								Paths: pulumi.StringArray{
//									pulumi.String("/*"),
//								},
//								Service: defaultBackendService.ID(),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewTargetHttpsProxy(ctx, "default", &compute.TargetHttpsProxyArgs{
//				Name:                    pulumi.String("test-http-keep-alive-timeout-proxy"),
//				HttpKeepAliveTimeoutSec: pulumi.Int(610),
//				UrlMap:                  defaultURLMap.ID(),
//				SslCertificates: pulumi.StringArray{
//					defaultSSLCertificate.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Target Https Proxy Mtls
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/certificatemanager"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/ca_cert.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile1, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/ca_cert.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultTrustConfig, err := certificatemanager.NewTrustConfig(ctx, "default", &certificatemanager.TrustConfigArgs{
//				Name:        pulumi.String("my-trust-config"),
//				Description: pulumi.String("sample description for the trust config"),
//				Location:    pulumi.String("global"),
//				TrustStores: certificatemanager.TrustConfigTrustStoreArray{
//					&certificatemanager.TrustConfigTrustStoreArgs{
//						TrustAnchors: certificatemanager.TrustConfigTrustStoreTrustAnchorArray{
//							&certificatemanager.TrustConfigTrustStoreTrustAnchorArgs{
//								PemCertificate: pulumi.String(invokeFile.Result),
//							},
//						},
//						IntermediateCas: certificatemanager.TrustConfigTrustStoreIntermediateCaArray{
//							&certificatemanager.TrustConfigTrustStoreIntermediateCaArgs{
//								PemCertificate: pulumi.String(invokeFile1.Result),
//							},
//						},
//					},
//				},
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultServerTlsPolicy, err := networksecurity.NewServerTlsPolicy(ctx, "default", &networksecurity.ServerTlsPolicyArgs{
//				Name:        pulumi.String("my-tls-policy"),
//				Description: pulumi.String("my description"),
//				Location:    pulumi.String("global"),
//				AllowOpen:   pulumi.Bool(false),
//				MtlsPolicy: &networksecurity.ServerTlsPolicyMtlsPolicyArgs{
//					ClientValidationMode: pulumi.String("ALLOW_INVALID_OR_MISSING_CLIENT_CERT"),
//					ClientValidationTrustConfig: defaultTrustConfig.Name.ApplyT(func(name string) (string, error) {
//						return fmt.Sprintf("projects/%v/locations/global/trustConfigs/%v", project.Number, name), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			invokeFile2, err := std.File(ctx, &std.FileArgs{
//				Input: "path/to/private.key",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile3, err := std.File(ctx, &std.FileArgs{
//				Input: "path/to/certificate.crt",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultSSLCertificate, err := compute.NewSSLCertificate(ctx, "default", &compute.SSLCertificateArgs{
//				Name:        pulumi.String("my-certificate"),
//				PrivateKey:  pulumi.String(invokeFile2.Result),
//				Certificate: pulumi.String(invokeFile3.Result),
//			})
//			if err != nil {
//				return err
//			}
//			defaultHttpHealthCheck, err := compute.NewHttpHealthCheck(ctx, "default", &compute.HttpHealthCheckArgs{
//				Name:             pulumi.String("http-health-check"),
//				RequestPath:      pulumi.String("/"),
//				CheckIntervalSec: pulumi.Int(1),
//				TimeoutSec:       pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBackendService, err := compute.NewBackendService(ctx, "default", &compute.BackendServiceArgs{
//				Name:         pulumi.String("backend-service"),
//				PortName:     pulumi.String("http"),
//				Protocol:     pulumi.String("HTTP"),
//				TimeoutSec:   pulumi.Int(10),
//				HealthChecks: defaultHttpHealthCheck.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultURLMap, err := compute.NewURLMap(ctx, "default", &compute.URLMapArgs{
//				Name:           pulumi.String("url-map"),
//				Description:    pulumi.String("a description"),
//				DefaultService: defaultBackendService.ID(),
//				HostRules: compute.URLMapHostRuleArray{
//					&compute.URLMapHostRuleArgs{
//						Hosts: pulumi.StringArray{
//							pulumi.String("mysite.com"),
//						},
//						PathMatcher: pulumi.String("allpaths"),
//					},
//				},
//				PathMatchers: compute.URLMapPathMatcherArray{
//					&compute.URLMapPathMatcherArgs{
//						Name:           pulumi.String("allpaths"),
//						DefaultService: defaultBackendService.ID(),
//						PathRules: compute.URLMapPathMatcherPathRuleArray{
//							&compute.URLMapPathMatcherPathRuleArgs{
//								Paths: pulumi.StringArray{
//									pulumi.String("/*"),
//								},
//								Service: defaultBackendService.ID(),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewTargetHttpsProxy(ctx, "default", &compute.TargetHttpsProxyArgs{
//				Name:   pulumi.String("test-mtls-proxy"),
//				UrlMap: defaultURLMap.ID(),
//				SslCertificates: pulumi.StringArray{
//					defaultSSLCertificate.ID(),
//				},
//				ServerTlsPolicy: defaultServerTlsPolicy.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Target Https Proxy Certificate Manager Certificate
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/certificatemanager"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/cert.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile1, err := std.File(ctx, &std.FileArgs{
//				Input: "test-fixtures/private-key.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultCertificate, err := certificatemanager.NewCertificate(ctx, "default", &certificatemanager.CertificateArgs{
//				Name:  pulumi.String("my-certificate"),
//				Scope: pulumi.String("ALL_REGIONS"),
//				SelfManaged: &certificatemanager.CertificateSelfManagedArgs{
//					PemCertificate: pulumi.String(invokeFile.Result),
//					PemPrivateKey:  pulumi.String(invokeFile1.Result),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultBackendService, err := compute.NewBackendService(ctx, "default", &compute.BackendServiceArgs{
//				Name:                pulumi.String("backend-service"),
//				PortName:            pulumi.String("http"),
//				Protocol:            pulumi.String("HTTP"),
//				TimeoutSec:          pulumi.Int(10),
//				LoadBalancingScheme: pulumi.String("INTERNAL_MANAGED"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultURLMap, err := compute.NewURLMap(ctx, "default", &compute.URLMapArgs{
//				Name:           pulumi.String("url-map"),
//				Description:    pulumi.String("a description"),
//				DefaultService: defaultBackendService.ID(),
//				HostRules: compute.URLMapHostRuleArray{
//					&compute.URLMapHostRuleArgs{
//						Hosts: pulumi.StringArray{
//							pulumi.String("mysite.com"),
//						},
//						PathMatcher: pulumi.String("allpaths"),
//					},
//				},
//				PathMatchers: compute.URLMapPathMatcherArray{
//					&compute.URLMapPathMatcherArgs{
//						Name:           pulumi.String("allpaths"),
//						DefaultService: defaultBackendService.ID(),
//						PathRules: compute.URLMapPathMatcherPathRuleArray{
//							&compute.URLMapPathMatcherPathRuleArgs{
//								Paths: pulumi.StringArray{
//									pulumi.String("/*"),
//								},
//								Service: defaultBackendService.ID(),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewTargetHttpsProxy(ctx, "default", &compute.TargetHttpsProxyArgs{
//				Name:   pulumi.String("target-http-proxy"),
//				UrlMap: defaultURLMap.ID(),
//				CertificateManagerCertificates: pulumi.StringArray{
//					defaultCertificate.ID().ApplyT(func(id string) (string, error) {
//						return fmt.Sprintf("//certificatemanager.googleapis.com/%v", id), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Target Https Proxy Fingerprint
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "path/to/private.key",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile1, err := std.File(ctx, &std.FileArgs{
//				Input: "path/to/certificate.crt",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultSSLCertificate, err := compute.NewSSLCertificate(ctx, "default", &compute.SSLCertificateArgs{
//				Name:        pulumi.String("my-certificate"),
//				PrivateKey:  pulumi.String(invokeFile.Result),
//				Certificate: pulumi.String(invokeFile1.Result),
//			})
//			if err != nil {
//				return err
//			}
//			defaultHttpHealthCheck, err := compute.NewHttpHealthCheck(ctx, "default", &compute.HttpHealthCheckArgs{
//				Name:             pulumi.String("http-health-check"),
//				RequestPath:      pulumi.String("/"),
//				CheckIntervalSec: pulumi.Int(1),
//				TimeoutSec:       pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			defaultBackendService, err := compute.NewBackendService(ctx, "default", &compute.BackendServiceArgs{
//				Name:         pulumi.String("backend-service"),
//				PortName:     pulumi.String("http"),
//				Protocol:     pulumi.String("HTTP"),
//				TimeoutSec:   pulumi.Int(10),
//				HealthChecks: defaultHttpHealthCheck.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultURLMap, err := compute.NewURLMap(ctx, "default", &compute.URLMapArgs{
//				Name:           pulumi.String("url-map"),
//				Description:    pulumi.String("a description"),
//				DefaultService: defaultBackendService.ID(),
//				HostRules: compute.URLMapHostRuleArray{
//					&compute.URLMapHostRuleArgs{
//						Hosts: pulumi.StringArray{
//							pulumi.String("mysite.com"),
//						},
//						PathMatcher: pulumi.String("allpaths"),
//					},
//				},
//				PathMatchers: compute.URLMapPathMatcherArray{
//					&compute.URLMapPathMatcherArgs{
//						Name:           pulumi.String("allpaths"),
//						DefaultService: defaultBackendService.ID(),
//						PathRules: compute.URLMapPathMatcherPathRuleArray{
//							&compute.URLMapPathMatcherPathRuleArgs{
//								Paths: pulumi.StringArray{
//									pulumi.String("/*"),
//								},
//								Service: defaultBackendService.ID(),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_default, err := compute.NewTargetHttpsProxy(ctx, "default", &compute.TargetHttpsProxyArgs{
//				Name:   pulumi.String("test-fingerprint-proxy"),
//				UrlMap: defaultURLMap.ID(),
//				SslCertificates: pulumi.StringArray{
//					defaultSSLCertificate.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("targetHttpsProxyFingerprint", _default.Fingerprint)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TargetHttpsProxy can be imported using any of these accepted formats:
//
// * `projects/{{project}}/global/targetHttpsProxies/{{name}}`
//
// * `{{project}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, TargetHttpsProxy can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:compute/targetHttpsProxy:TargetHttpsProxy default projects/{{project}}/global/targetHttpsProxies/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/targetHttpsProxy:TargetHttpsProxy default {{project}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/targetHttpsProxy:TargetHttpsProxy default {{name}}
// ```
type TargetHttpsProxy struct {
	pulumi.CustomResourceState

	// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
	// Certificate manager certificates only apply when the load balancing scheme is set to INTERNAL_MANAGED.
	// For EXTERNAL and EXTERNAL_MANAGED, use certificateMap instead.
	// sslCertificates and certificateManagerCertificates fields can not be defined together.
	// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the selfLink `projects/{project}/locations/{location}/certificates/{resourceName}`
	CertificateManagerCertificates pulumi.StringArrayOutput `pulumi:"certificateManagerCertificates"`
	// A reference to the CertificateMap resource uri that identifies a certificate map
	// associated with the given target proxy. This field is only supported for EXTERNAL and EXTERNAL_MANAGED load balancing schemes.
	// For INTERNAL_MANAGED, use certificateManagerCertificates instead.
	// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificateMaps/{resourceName}`.
	CertificateMap pulumi.StringPtrOutput `pulumi:"certificateMap"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
	// This field will be ignored when inserting a TargetHttpsProxy. An up-to-date fingerprint must be provided in order to
	// patch the TargetHttpsProxy; otherwise, the request will fail with error 412 conditionNotMet.
	// To see the latest fingerprint, make a get() request to retrieve the TargetHttpsProxy.
	// A base64-encoded string.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// Specifies how long to keep a connection open, after completing a response,
	// while there is no matching traffic (in seconds). If an HTTP keepalive is
	// not specified, a default value will be used. For Global
	// external HTTP(S) load balancer, the default value is 610 seconds, the
	// minimum allowed value is 5 seconds and the maximum allowed value is 1200
	// seconds. For cross-region internal HTTP(S) load balancer, the default
	// value is 600 seconds, the minimum allowed value is 5 seconds, and the
	// maximum allowed value is 600 seconds. For Global external HTTP(S) load
	// balancer (classic), this option is not available publicly.
	HttpKeepAliveTimeoutSec pulumi.IntPtrOutput `pulumi:"httpKeepAliveTimeoutSec"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// This field only applies when the forwarding rule that references
	// this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	ProxyBind pulumi.BoolOutput `pulumi:"proxyBind"`
	// The unique identifier for the resource.
	ProxyId pulumi.IntOutput `pulumi:"proxyId"`
	// Specifies the QUIC override policy for this resource. This determines
	// whether the load balancer will attempt to negotiate QUIC with clients
	// or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is
	// specified, Google manages whether QUIC is used.
	// Default value is `NONE`.
	// Possible values are: `NONE`, `ENABLE`, `DISABLE`.
	QuicOverride pulumi.StringPtrOutput `pulumi:"quicOverride"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// A URL referring to a networksecurity.ServerTlsPolicy
	// resource that describes how the proxy should authenticate inbound
	// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
	// attached to globalForwardingRules with the loadBalancingScheme
	// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
	// For details which ServerTlsPolicy resources are accepted with
	// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
	// loadBalancingScheme consult ServerTlsPolicy documentation.
	// If left blank, communications are not encrypted.
	// If you remove this field from your configuration at the same time as
	// deleting or recreating a referenced ServerTlsPolicy resource, you will
	// receive a resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy
	// within the ServerTlsPolicy resource to avoid this.
	ServerTlsPolicy pulumi.StringPtrOutput `pulumi:"serverTlsPolicy"`
	// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
	// Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
	// sslCertificates and certificateManagerCertificates can not be defined together.
	SslCertificates pulumi.StringArrayOutput `pulumi:"sslCertificates"`
	// A reference to the SslPolicy resource that will be associated with
	// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
	// resource will not have any SSL policy configured.
	SslPolicy pulumi.StringPtrOutput `pulumi:"sslPolicy"`
	// Specifies whether TLS 1.3 0-RTT Data (“Early Data”) should be accepted for this service.
	// Early Data allows a TLS resumption handshake to include the initial application payload
	// (a HTTP request) alongside the handshake, reducing the effective round trips to “zero”.
	// This applies to TLS 1.3 connections over TCP (HTTP/2) as well as over UDP (QUIC/h3).
	// Possible values are: `STRICT`, `PERMISSIVE`, `UNRESTRICTED`, `DISABLED`.
	TlsEarlyData pulumi.StringOutput `pulumi:"tlsEarlyData"`
	// A reference to the UrlMap resource that defines the mapping from URL
	// to the BackendService.
	UrlMap pulumi.StringOutput `pulumi:"urlMap"`
}

// NewTargetHttpsProxy registers a new resource with the given unique name, arguments, and options.
func NewTargetHttpsProxy(ctx *pulumi.Context,
	name string, args *TargetHttpsProxyArgs, opts ...pulumi.ResourceOption) (*TargetHttpsProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UrlMap == nil {
		return nil, errors.New("invalid value for required argument 'UrlMap'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TargetHttpsProxy
	err := ctx.RegisterResource("gcp:compute/targetHttpsProxy:TargetHttpsProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTargetHttpsProxy gets an existing TargetHttpsProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTargetHttpsProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetHttpsProxyState, opts ...pulumi.ResourceOption) (*TargetHttpsProxy, error) {
	var resource TargetHttpsProxy
	err := ctx.ReadResource("gcp:compute/targetHttpsProxy:TargetHttpsProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TargetHttpsProxy resources.
type targetHttpsProxyState struct {
	// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
	// Certificate manager certificates only apply when the load balancing scheme is set to INTERNAL_MANAGED.
	// For EXTERNAL and EXTERNAL_MANAGED, use certificateMap instead.
	// sslCertificates and certificateManagerCertificates fields can not be defined together.
	// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the selfLink `projects/{project}/locations/{location}/certificates/{resourceName}`
	CertificateManagerCertificates []string `pulumi:"certificateManagerCertificates"`
	// A reference to the CertificateMap resource uri that identifies a certificate map
	// associated with the given target proxy. This field is only supported for EXTERNAL and EXTERNAL_MANAGED load balancing schemes.
	// For INTERNAL_MANAGED, use certificateManagerCertificates instead.
	// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificateMaps/{resourceName}`.
	CertificateMap *string `pulumi:"certificateMap"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
	// This field will be ignored when inserting a TargetHttpsProxy. An up-to-date fingerprint must be provided in order to
	// patch the TargetHttpsProxy; otherwise, the request will fail with error 412 conditionNotMet.
	// To see the latest fingerprint, make a get() request to retrieve the TargetHttpsProxy.
	// A base64-encoded string.
	Fingerprint *string `pulumi:"fingerprint"`
	// Specifies how long to keep a connection open, after completing a response,
	// while there is no matching traffic (in seconds). If an HTTP keepalive is
	// not specified, a default value will be used. For Global
	// external HTTP(S) load balancer, the default value is 610 seconds, the
	// minimum allowed value is 5 seconds and the maximum allowed value is 1200
	// seconds. For cross-region internal HTTP(S) load balancer, the default
	// value is 600 seconds, the minimum allowed value is 5 seconds, and the
	// maximum allowed value is 600 seconds. For Global external HTTP(S) load
	// balancer (classic), this option is not available publicly.
	HttpKeepAliveTimeoutSec *int `pulumi:"httpKeepAliveTimeoutSec"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// This field only applies when the forwarding rule that references
	// this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	ProxyBind *bool `pulumi:"proxyBind"`
	// The unique identifier for the resource.
	ProxyId *int `pulumi:"proxyId"`
	// Specifies the QUIC override policy for this resource. This determines
	// whether the load balancer will attempt to negotiate QUIC with clients
	// or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is
	// specified, Google manages whether QUIC is used.
	// Default value is `NONE`.
	// Possible values are: `NONE`, `ENABLE`, `DISABLE`.
	QuicOverride *string `pulumi:"quicOverride"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
	// A URL referring to a networksecurity.ServerTlsPolicy
	// resource that describes how the proxy should authenticate inbound
	// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
	// attached to globalForwardingRules with the loadBalancingScheme
	// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
	// For details which ServerTlsPolicy resources are accepted with
	// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
	// loadBalancingScheme consult ServerTlsPolicy documentation.
	// If left blank, communications are not encrypted.
	// If you remove this field from your configuration at the same time as
	// deleting or recreating a referenced ServerTlsPolicy resource, you will
	// receive a resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy
	// within the ServerTlsPolicy resource to avoid this.
	ServerTlsPolicy *string `pulumi:"serverTlsPolicy"`
	// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
	// Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
	// sslCertificates and certificateManagerCertificates can not be defined together.
	SslCertificates []string `pulumi:"sslCertificates"`
	// A reference to the SslPolicy resource that will be associated with
	// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
	// resource will not have any SSL policy configured.
	SslPolicy *string `pulumi:"sslPolicy"`
	// Specifies whether TLS 1.3 0-RTT Data (“Early Data”) should be accepted for this service.
	// Early Data allows a TLS resumption handshake to include the initial application payload
	// (a HTTP request) alongside the handshake, reducing the effective round trips to “zero”.
	// This applies to TLS 1.3 connections over TCP (HTTP/2) as well as over UDP (QUIC/h3).
	// Possible values are: `STRICT`, `PERMISSIVE`, `UNRESTRICTED`, `DISABLED`.
	TlsEarlyData *string `pulumi:"tlsEarlyData"`
	// A reference to the UrlMap resource that defines the mapping from URL
	// to the BackendService.
	UrlMap *string `pulumi:"urlMap"`
}

type TargetHttpsProxyState struct {
	// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
	// Certificate manager certificates only apply when the load balancing scheme is set to INTERNAL_MANAGED.
	// For EXTERNAL and EXTERNAL_MANAGED, use certificateMap instead.
	// sslCertificates and certificateManagerCertificates fields can not be defined together.
	// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the selfLink `projects/{project}/locations/{location}/certificates/{resourceName}`
	CertificateManagerCertificates pulumi.StringArrayInput
	// A reference to the CertificateMap resource uri that identifies a certificate map
	// associated with the given target proxy. This field is only supported for EXTERNAL and EXTERNAL_MANAGED load balancing schemes.
	// For INTERNAL_MANAGED, use certificateManagerCertificates instead.
	// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificateMaps/{resourceName}`.
	CertificateMap pulumi.StringPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
	// This field will be ignored when inserting a TargetHttpsProxy. An up-to-date fingerprint must be provided in order to
	// patch the TargetHttpsProxy; otherwise, the request will fail with error 412 conditionNotMet.
	// To see the latest fingerprint, make a get() request to retrieve the TargetHttpsProxy.
	// A base64-encoded string.
	Fingerprint pulumi.StringPtrInput
	// Specifies how long to keep a connection open, after completing a response,
	// while there is no matching traffic (in seconds). If an HTTP keepalive is
	// not specified, a default value will be used. For Global
	// external HTTP(S) load balancer, the default value is 610 seconds, the
	// minimum allowed value is 5 seconds and the maximum allowed value is 1200
	// seconds. For cross-region internal HTTP(S) load balancer, the default
	// value is 600 seconds, the minimum allowed value is 5 seconds, and the
	// maximum allowed value is 600 seconds. For Global external HTTP(S) load
	// balancer (classic), this option is not available publicly.
	HttpKeepAliveTimeoutSec pulumi.IntPtrInput
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// This field only applies when the forwarding rule that references
	// this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	ProxyBind pulumi.BoolPtrInput
	// The unique identifier for the resource.
	ProxyId pulumi.IntPtrInput
	// Specifies the QUIC override policy for this resource. This determines
	// whether the load balancer will attempt to negotiate QUIC with clients
	// or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is
	// specified, Google manages whether QUIC is used.
	// Default value is `NONE`.
	// Possible values are: `NONE`, `ENABLE`, `DISABLE`.
	QuicOverride pulumi.StringPtrInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
	// A URL referring to a networksecurity.ServerTlsPolicy
	// resource that describes how the proxy should authenticate inbound
	// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
	// attached to globalForwardingRules with the loadBalancingScheme
	// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
	// For details which ServerTlsPolicy resources are accepted with
	// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
	// loadBalancingScheme consult ServerTlsPolicy documentation.
	// If left blank, communications are not encrypted.
	// If you remove this field from your configuration at the same time as
	// deleting or recreating a referenced ServerTlsPolicy resource, you will
	// receive a resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy
	// within the ServerTlsPolicy resource to avoid this.
	ServerTlsPolicy pulumi.StringPtrInput
	// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
	// Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
	// sslCertificates and certificateManagerCertificates can not be defined together.
	SslCertificates pulumi.StringArrayInput
	// A reference to the SslPolicy resource that will be associated with
	// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
	// resource will not have any SSL policy configured.
	SslPolicy pulumi.StringPtrInput
	// Specifies whether TLS 1.3 0-RTT Data (“Early Data”) should be accepted for this service.
	// Early Data allows a TLS resumption handshake to include the initial application payload
	// (a HTTP request) alongside the handshake, reducing the effective round trips to “zero”.
	// This applies to TLS 1.3 connections over TCP (HTTP/2) as well as over UDP (QUIC/h3).
	// Possible values are: `STRICT`, `PERMISSIVE`, `UNRESTRICTED`, `DISABLED`.
	TlsEarlyData pulumi.StringPtrInput
	// A reference to the UrlMap resource that defines the mapping from URL
	// to the BackendService.
	UrlMap pulumi.StringPtrInput
}

func (TargetHttpsProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetHttpsProxyState)(nil)).Elem()
}

type targetHttpsProxyArgs struct {
	// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
	// Certificate manager certificates only apply when the load balancing scheme is set to INTERNAL_MANAGED.
	// For EXTERNAL and EXTERNAL_MANAGED, use certificateMap instead.
	// sslCertificates and certificateManagerCertificates fields can not be defined together.
	// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the selfLink `projects/{project}/locations/{location}/certificates/{resourceName}`
	CertificateManagerCertificates []string `pulumi:"certificateManagerCertificates"`
	// A reference to the CertificateMap resource uri that identifies a certificate map
	// associated with the given target proxy. This field is only supported for EXTERNAL and EXTERNAL_MANAGED load balancing schemes.
	// For INTERNAL_MANAGED, use certificateManagerCertificates instead.
	// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificateMaps/{resourceName}`.
	CertificateMap *string `pulumi:"certificateMap"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Specifies how long to keep a connection open, after completing a response,
	// while there is no matching traffic (in seconds). If an HTTP keepalive is
	// not specified, a default value will be used. For Global
	// external HTTP(S) load balancer, the default value is 610 seconds, the
	// minimum allowed value is 5 seconds and the maximum allowed value is 1200
	// seconds. For cross-region internal HTTP(S) load balancer, the default
	// value is 600 seconds, the minimum allowed value is 5 seconds, and the
	// maximum allowed value is 600 seconds. For Global external HTTP(S) load
	// balancer (classic), this option is not available publicly.
	HttpKeepAliveTimeoutSec *int `pulumi:"httpKeepAliveTimeoutSec"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// This field only applies when the forwarding rule that references
	// this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	ProxyBind *bool `pulumi:"proxyBind"`
	// Specifies the QUIC override policy for this resource. This determines
	// whether the load balancer will attempt to negotiate QUIC with clients
	// or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is
	// specified, Google manages whether QUIC is used.
	// Default value is `NONE`.
	// Possible values are: `NONE`, `ENABLE`, `DISABLE`.
	QuicOverride *string `pulumi:"quicOverride"`
	// A URL referring to a networksecurity.ServerTlsPolicy
	// resource that describes how the proxy should authenticate inbound
	// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
	// attached to globalForwardingRules with the loadBalancingScheme
	// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
	// For details which ServerTlsPolicy resources are accepted with
	// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
	// loadBalancingScheme consult ServerTlsPolicy documentation.
	// If left blank, communications are not encrypted.
	// If you remove this field from your configuration at the same time as
	// deleting or recreating a referenced ServerTlsPolicy resource, you will
	// receive a resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy
	// within the ServerTlsPolicy resource to avoid this.
	ServerTlsPolicy *string `pulumi:"serverTlsPolicy"`
	// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
	// Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
	// sslCertificates and certificateManagerCertificates can not be defined together.
	SslCertificates []string `pulumi:"sslCertificates"`
	// A reference to the SslPolicy resource that will be associated with
	// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
	// resource will not have any SSL policy configured.
	SslPolicy *string `pulumi:"sslPolicy"`
	// Specifies whether TLS 1.3 0-RTT Data (“Early Data”) should be accepted for this service.
	// Early Data allows a TLS resumption handshake to include the initial application payload
	// (a HTTP request) alongside the handshake, reducing the effective round trips to “zero”.
	// This applies to TLS 1.3 connections over TCP (HTTP/2) as well as over UDP (QUIC/h3).
	// Possible values are: `STRICT`, `PERMISSIVE`, `UNRESTRICTED`, `DISABLED`.
	TlsEarlyData *string `pulumi:"tlsEarlyData"`
	// A reference to the UrlMap resource that defines the mapping from URL
	// to the BackendService.
	UrlMap string `pulumi:"urlMap"`
}

// The set of arguments for constructing a TargetHttpsProxy resource.
type TargetHttpsProxyArgs struct {
	// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
	// Certificate manager certificates only apply when the load balancing scheme is set to INTERNAL_MANAGED.
	// For EXTERNAL and EXTERNAL_MANAGED, use certificateMap instead.
	// sslCertificates and certificateManagerCertificates fields can not be defined together.
	// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the selfLink `projects/{project}/locations/{location}/certificates/{resourceName}`
	CertificateManagerCertificates pulumi.StringArrayInput
	// A reference to the CertificateMap resource uri that identifies a certificate map
	// associated with the given target proxy. This field is only supported for EXTERNAL and EXTERNAL_MANAGED load balancing schemes.
	// For INTERNAL_MANAGED, use certificateManagerCertificates instead.
	// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificateMaps/{resourceName}`.
	CertificateMap pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Specifies how long to keep a connection open, after completing a response,
	// while there is no matching traffic (in seconds). If an HTTP keepalive is
	// not specified, a default value will be used. For Global
	// external HTTP(S) load balancer, the default value is 610 seconds, the
	// minimum allowed value is 5 seconds and the maximum allowed value is 1200
	// seconds. For cross-region internal HTTP(S) load balancer, the default
	// value is 600 seconds, the minimum allowed value is 5 seconds, and the
	// maximum allowed value is 600 seconds. For Global external HTTP(S) load
	// balancer (classic), this option is not available publicly.
	HttpKeepAliveTimeoutSec pulumi.IntPtrInput
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// This field only applies when the forwarding rule that references
	// this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	ProxyBind pulumi.BoolPtrInput
	// Specifies the QUIC override policy for this resource. This determines
	// whether the load balancer will attempt to negotiate QUIC with clients
	// or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is
	// specified, Google manages whether QUIC is used.
	// Default value is `NONE`.
	// Possible values are: `NONE`, `ENABLE`, `DISABLE`.
	QuicOverride pulumi.StringPtrInput
	// A URL referring to a networksecurity.ServerTlsPolicy
	// resource that describes how the proxy should authenticate inbound
	// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
	// attached to globalForwardingRules with the loadBalancingScheme
	// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
	// For details which ServerTlsPolicy resources are accepted with
	// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
	// loadBalancingScheme consult ServerTlsPolicy documentation.
	// If left blank, communications are not encrypted.
	// If you remove this field from your configuration at the same time as
	// deleting or recreating a referenced ServerTlsPolicy resource, you will
	// receive a resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy
	// within the ServerTlsPolicy resource to avoid this.
	ServerTlsPolicy pulumi.StringPtrInput
	// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
	// Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
	// sslCertificates and certificateManagerCertificates can not be defined together.
	SslCertificates pulumi.StringArrayInput
	// A reference to the SslPolicy resource that will be associated with
	// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
	// resource will not have any SSL policy configured.
	SslPolicy pulumi.StringPtrInput
	// Specifies whether TLS 1.3 0-RTT Data (“Early Data”) should be accepted for this service.
	// Early Data allows a TLS resumption handshake to include the initial application payload
	// (a HTTP request) alongside the handshake, reducing the effective round trips to “zero”.
	// This applies to TLS 1.3 connections over TCP (HTTP/2) as well as over UDP (QUIC/h3).
	// Possible values are: `STRICT`, `PERMISSIVE`, `UNRESTRICTED`, `DISABLED`.
	TlsEarlyData pulumi.StringPtrInput
	// A reference to the UrlMap resource that defines the mapping from URL
	// to the BackendService.
	UrlMap pulumi.StringInput
}

func (TargetHttpsProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetHttpsProxyArgs)(nil)).Elem()
}

type TargetHttpsProxyInput interface {
	pulumi.Input

	ToTargetHttpsProxyOutput() TargetHttpsProxyOutput
	ToTargetHttpsProxyOutputWithContext(ctx context.Context) TargetHttpsProxyOutput
}

func (*TargetHttpsProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetHttpsProxy)(nil)).Elem()
}

func (i *TargetHttpsProxy) ToTargetHttpsProxyOutput() TargetHttpsProxyOutput {
	return i.ToTargetHttpsProxyOutputWithContext(context.Background())
}

func (i *TargetHttpsProxy) ToTargetHttpsProxyOutputWithContext(ctx context.Context) TargetHttpsProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetHttpsProxyOutput)
}

// TargetHttpsProxyArrayInput is an input type that accepts TargetHttpsProxyArray and TargetHttpsProxyArrayOutput values.
// You can construct a concrete instance of `TargetHttpsProxyArrayInput` via:
//
//	TargetHttpsProxyArray{ TargetHttpsProxyArgs{...} }
type TargetHttpsProxyArrayInput interface {
	pulumi.Input

	ToTargetHttpsProxyArrayOutput() TargetHttpsProxyArrayOutput
	ToTargetHttpsProxyArrayOutputWithContext(context.Context) TargetHttpsProxyArrayOutput
}

type TargetHttpsProxyArray []TargetHttpsProxyInput

func (TargetHttpsProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetHttpsProxy)(nil)).Elem()
}

func (i TargetHttpsProxyArray) ToTargetHttpsProxyArrayOutput() TargetHttpsProxyArrayOutput {
	return i.ToTargetHttpsProxyArrayOutputWithContext(context.Background())
}

func (i TargetHttpsProxyArray) ToTargetHttpsProxyArrayOutputWithContext(ctx context.Context) TargetHttpsProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetHttpsProxyArrayOutput)
}

// TargetHttpsProxyMapInput is an input type that accepts TargetHttpsProxyMap and TargetHttpsProxyMapOutput values.
// You can construct a concrete instance of `TargetHttpsProxyMapInput` via:
//
//	TargetHttpsProxyMap{ "key": TargetHttpsProxyArgs{...} }
type TargetHttpsProxyMapInput interface {
	pulumi.Input

	ToTargetHttpsProxyMapOutput() TargetHttpsProxyMapOutput
	ToTargetHttpsProxyMapOutputWithContext(context.Context) TargetHttpsProxyMapOutput
}

type TargetHttpsProxyMap map[string]TargetHttpsProxyInput

func (TargetHttpsProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetHttpsProxy)(nil)).Elem()
}

func (i TargetHttpsProxyMap) ToTargetHttpsProxyMapOutput() TargetHttpsProxyMapOutput {
	return i.ToTargetHttpsProxyMapOutputWithContext(context.Background())
}

func (i TargetHttpsProxyMap) ToTargetHttpsProxyMapOutputWithContext(ctx context.Context) TargetHttpsProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetHttpsProxyMapOutput)
}

type TargetHttpsProxyOutput struct{ *pulumi.OutputState }

func (TargetHttpsProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetHttpsProxy)(nil)).Elem()
}

func (o TargetHttpsProxyOutput) ToTargetHttpsProxyOutput() TargetHttpsProxyOutput {
	return o
}

func (o TargetHttpsProxyOutput) ToTargetHttpsProxyOutputWithContext(ctx context.Context) TargetHttpsProxyOutput {
	return o
}

// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
// Certificate manager certificates only apply when the load balancing scheme is set to INTERNAL_MANAGED.
// For EXTERNAL and EXTERNAL_MANAGED, use certificateMap instead.
// sslCertificates and certificateManagerCertificates fields can not be defined together.
// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the selfLink `projects/{project}/locations/{location}/certificates/{resourceName}`
func (o TargetHttpsProxyOutput) CertificateManagerCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.StringArrayOutput { return v.CertificateManagerCertificates }).(pulumi.StringArrayOutput)
}

// A reference to the CertificateMap resource uri that identifies a certificate map
// associated with the given target proxy. This field is only supported for EXTERNAL and EXTERNAL_MANAGED load balancing schemes.
// For INTERNAL_MANAGED, use certificateManagerCertificates instead.
// Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificateMaps/{resourceName}`.
func (o TargetHttpsProxyOutput) CertificateMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.StringPtrOutput { return v.CertificateMap }).(pulumi.StringPtrOutput)
}

// Creation timestamp in RFC3339 text format.
func (o TargetHttpsProxyOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource.
func (o TargetHttpsProxyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
// This field will be ignored when inserting a TargetHttpsProxy. An up-to-date fingerprint must be provided in order to
// patch the TargetHttpsProxy; otherwise, the request will fail with error 412 conditionNotMet.
// To see the latest fingerprint, make a get() request to retrieve the TargetHttpsProxy.
// A base64-encoded string.
func (o TargetHttpsProxyOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// Specifies how long to keep a connection open, after completing a response,
// while there is no matching traffic (in seconds). If an HTTP keepalive is
// not specified, a default value will be used. For Global
// external HTTP(S) load balancer, the default value is 610 seconds, the
// minimum allowed value is 5 seconds and the maximum allowed value is 1200
// seconds. For cross-region internal HTTP(S) load balancer, the default
// value is 600 seconds, the minimum allowed value is 5 seconds, and the
// maximum allowed value is 600 seconds. For Global external HTTP(S) load
// balancer (classic), this option is not available publicly.
func (o TargetHttpsProxyOutput) HttpKeepAliveTimeoutSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.IntPtrOutput { return v.HttpKeepAliveTimeoutSec }).(pulumi.IntPtrOutput)
}

// Name of the resource. Provided by the client when the resource is
// created. The name must be 1-63 characters long, and comply with
// RFC1035. Specifically, the name must be 1-63 characters long and match
// the regular expression `a-z?` which means the
// first character must be a lowercase letter, and all following
// characters must be a dash, lowercase letter, or digit, except the last
// character, which cannot be a dash.
func (o TargetHttpsProxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o TargetHttpsProxyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// This field only applies when the forwarding rule that references
// this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.
func (o TargetHttpsProxyOutput) ProxyBind() pulumi.BoolOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.BoolOutput { return v.ProxyBind }).(pulumi.BoolOutput)
}

// The unique identifier for the resource.
func (o TargetHttpsProxyOutput) ProxyId() pulumi.IntOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.IntOutput { return v.ProxyId }).(pulumi.IntOutput)
}

// Specifies the QUIC override policy for this resource. This determines
// whether the load balancer will attempt to negotiate QUIC with clients
// or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is
// specified, Google manages whether QUIC is used.
// Default value is `NONE`.
// Possible values are: `NONE`, `ENABLE`, `DISABLE`.
func (o TargetHttpsProxyOutput) QuicOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.StringPtrOutput { return v.QuicOverride }).(pulumi.StringPtrOutput)
}

// The URI of the created resource.
func (o TargetHttpsProxyOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// A URL referring to a networksecurity.ServerTlsPolicy
// resource that describes how the proxy should authenticate inbound
// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
// attached to globalForwardingRules with the loadBalancingScheme
// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
// For details which ServerTlsPolicy resources are accepted with
// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
// loadBalancingScheme consult ServerTlsPolicy documentation.
// If left blank, communications are not encrypted.
// If you remove this field from your configuration at the same time as
// deleting or recreating a referenced ServerTlsPolicy resource, you will
// receive a resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy
// within the ServerTlsPolicy resource to avoid this.
func (o TargetHttpsProxyOutput) ServerTlsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.StringPtrOutput { return v.ServerTlsPolicy }).(pulumi.StringPtrOutput)
}

// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
// Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
// sslCertificates and certificateManagerCertificates can not be defined together.
func (o TargetHttpsProxyOutput) SslCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.StringArrayOutput { return v.SslCertificates }).(pulumi.StringArrayOutput)
}

// A reference to the SslPolicy resource that will be associated with
// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
// resource will not have any SSL policy configured.
func (o TargetHttpsProxyOutput) SslPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.StringPtrOutput { return v.SslPolicy }).(pulumi.StringPtrOutput)
}

// Specifies whether TLS 1.3 0-RTT Data (“Early Data”) should be accepted for this service.
// Early Data allows a TLS resumption handshake to include the initial application payload
// (a HTTP request) alongside the handshake, reducing the effective round trips to “zero”.
// This applies to TLS 1.3 connections over TCP (HTTP/2) as well as over UDP (QUIC/h3).
// Possible values are: `STRICT`, `PERMISSIVE`, `UNRESTRICTED`, `DISABLED`.
func (o TargetHttpsProxyOutput) TlsEarlyData() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.StringOutput { return v.TlsEarlyData }).(pulumi.StringOutput)
}

// A reference to the UrlMap resource that defines the mapping from URL
// to the BackendService.
func (o TargetHttpsProxyOutput) UrlMap() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetHttpsProxy) pulumi.StringOutput { return v.UrlMap }).(pulumi.StringOutput)
}

type TargetHttpsProxyArrayOutput struct{ *pulumi.OutputState }

func (TargetHttpsProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetHttpsProxy)(nil)).Elem()
}

func (o TargetHttpsProxyArrayOutput) ToTargetHttpsProxyArrayOutput() TargetHttpsProxyArrayOutput {
	return o
}

func (o TargetHttpsProxyArrayOutput) ToTargetHttpsProxyArrayOutputWithContext(ctx context.Context) TargetHttpsProxyArrayOutput {
	return o
}

func (o TargetHttpsProxyArrayOutput) Index(i pulumi.IntInput) TargetHttpsProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TargetHttpsProxy {
		return vs[0].([]*TargetHttpsProxy)[vs[1].(int)]
	}).(TargetHttpsProxyOutput)
}

type TargetHttpsProxyMapOutput struct{ *pulumi.OutputState }

func (TargetHttpsProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetHttpsProxy)(nil)).Elem()
}

func (o TargetHttpsProxyMapOutput) ToTargetHttpsProxyMapOutput() TargetHttpsProxyMapOutput {
	return o
}

func (o TargetHttpsProxyMapOutput) ToTargetHttpsProxyMapOutputWithContext(ctx context.Context) TargetHttpsProxyMapOutput {
	return o
}

func (o TargetHttpsProxyMapOutput) MapIndex(k pulumi.StringInput) TargetHttpsProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TargetHttpsProxy {
		return vs[0].(map[string]*TargetHttpsProxy)[vs[1].(string)]
	}).(TargetHttpsProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TargetHttpsProxyInput)(nil)).Elem(), &TargetHttpsProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetHttpsProxyArrayInput)(nil)).Elem(), TargetHttpsProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetHttpsProxyMapInput)(nil)).Elem(), TargetHttpsProxyMap{})
	pulumi.RegisterOutputType(TargetHttpsProxyOutput{})
	pulumi.RegisterOutputType(TargetHttpsProxyArrayOutput{})
	pulumi.RegisterOutputType(TargetHttpsProxyMapOutput{})
}
