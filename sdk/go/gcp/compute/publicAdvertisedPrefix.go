// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a PublicAdvertisedPrefix for use with bring your own IP addresses (BYOIP).
//
// To get more information about PublicAdvertisedPrefix, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/publicAdvertisedPrefixes)
// * How-to Guides
//   - [Using bring your own IP](https://cloud.google.com/vpc/docs/using-bring-your-own-ip)
//
// ## Example Usage
// ### Public Advertised Prefixes Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewPublicAdvertisedPrefix(ctx, "prefixes", &compute.PublicAdvertisedPrefixArgs{
//				Description:       pulumi.String("description"),
//				DnsVerificationIp: pulumi.String("127.127.0.0"),
//				IpCidrRange:       pulumi.String("127.127.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # PublicAdvertisedPrefix can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:compute/publicAdvertisedPrefix:PublicAdvertisedPrefix default projects/{{project}}/global/publicAdvertisedPrefixes/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/publicAdvertisedPrefix:PublicAdvertisedPrefix default {{project}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/publicAdvertisedPrefix:PublicAdvertisedPrefix default {{name}}
//
// ```
type PublicAdvertisedPrefix struct {
	pulumi.CustomResourceState

	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The IPv4 address to be used for reverse DNS verification.
	DnsVerificationIp pulumi.StringOutput `pulumi:"dnsVerificationIp"`
	// The IPv4 address range, in CIDR format, represented by this public advertised prefix.
	//
	// ***
	IpCidrRange pulumi.StringOutput `pulumi:"ipCidrRange"`
	// Name of the resource. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?`
	// which means the first character must be a lowercase letter, and all
	// following characters must be a dash, lowercase letter, or digit,
	// except the last character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
}

// NewPublicAdvertisedPrefix registers a new resource with the given unique name, arguments, and options.
func NewPublicAdvertisedPrefix(ctx *pulumi.Context,
	name string, args *PublicAdvertisedPrefixArgs, opts ...pulumi.ResourceOption) (*PublicAdvertisedPrefix, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DnsVerificationIp == nil {
		return nil, errors.New("invalid value for required argument 'DnsVerificationIp'")
	}
	if args.IpCidrRange == nil {
		return nil, errors.New("invalid value for required argument 'IpCidrRange'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PublicAdvertisedPrefix
	err := ctx.RegisterResource("gcp:compute/publicAdvertisedPrefix:PublicAdvertisedPrefix", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublicAdvertisedPrefix gets an existing PublicAdvertisedPrefix resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublicAdvertisedPrefix(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublicAdvertisedPrefixState, opts ...pulumi.ResourceOption) (*PublicAdvertisedPrefix, error) {
	var resource PublicAdvertisedPrefix
	err := ctx.ReadResource("gcp:compute/publicAdvertisedPrefix:PublicAdvertisedPrefix", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublicAdvertisedPrefix resources.
type publicAdvertisedPrefixState struct {
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// The IPv4 address to be used for reverse DNS verification.
	DnsVerificationIp *string `pulumi:"dnsVerificationIp"`
	// The IPv4 address range, in CIDR format, represented by this public advertised prefix.
	//
	// ***
	IpCidrRange *string `pulumi:"ipCidrRange"`
	// Name of the resource. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?`
	// which means the first character must be a lowercase letter, and all
	// following characters must be a dash, lowercase letter, or digit,
	// except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
}

type PublicAdvertisedPrefixState struct {
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// The IPv4 address to be used for reverse DNS verification.
	DnsVerificationIp pulumi.StringPtrInput
	// The IPv4 address range, in CIDR format, represented by this public advertised prefix.
	//
	// ***
	IpCidrRange pulumi.StringPtrInput
	// Name of the resource. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?`
	// which means the first character must be a lowercase letter, and all
	// following characters must be a dash, lowercase letter, or digit,
	// except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
}

func (PublicAdvertisedPrefixState) ElementType() reflect.Type {
	return reflect.TypeOf((*publicAdvertisedPrefixState)(nil)).Elem()
}

type publicAdvertisedPrefixArgs struct {
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// The IPv4 address to be used for reverse DNS verification.
	DnsVerificationIp string `pulumi:"dnsVerificationIp"`
	// The IPv4 address range, in CIDR format, represented by this public advertised prefix.
	//
	// ***
	IpCidrRange string `pulumi:"ipCidrRange"`
	// Name of the resource. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?`
	// which means the first character must be a lowercase letter, and all
	// following characters must be a dash, lowercase letter, or digit,
	// except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a PublicAdvertisedPrefix resource.
type PublicAdvertisedPrefixArgs struct {
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// The IPv4 address to be used for reverse DNS verification.
	DnsVerificationIp pulumi.StringInput
	// The IPv4 address range, in CIDR format, represented by this public advertised prefix.
	//
	// ***
	IpCidrRange pulumi.StringInput
	// Name of the resource. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?`
	// which means the first character must be a lowercase letter, and all
	// following characters must be a dash, lowercase letter, or digit,
	// except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (PublicAdvertisedPrefixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publicAdvertisedPrefixArgs)(nil)).Elem()
}

type PublicAdvertisedPrefixInput interface {
	pulumi.Input

	ToPublicAdvertisedPrefixOutput() PublicAdvertisedPrefixOutput
	ToPublicAdvertisedPrefixOutputWithContext(ctx context.Context) PublicAdvertisedPrefixOutput
}

func (*PublicAdvertisedPrefix) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicAdvertisedPrefix)(nil)).Elem()
}

func (i *PublicAdvertisedPrefix) ToPublicAdvertisedPrefixOutput() PublicAdvertisedPrefixOutput {
	return i.ToPublicAdvertisedPrefixOutputWithContext(context.Background())
}

func (i *PublicAdvertisedPrefix) ToPublicAdvertisedPrefixOutputWithContext(ctx context.Context) PublicAdvertisedPrefixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicAdvertisedPrefixOutput)
}

// PublicAdvertisedPrefixArrayInput is an input type that accepts PublicAdvertisedPrefixArray and PublicAdvertisedPrefixArrayOutput values.
// You can construct a concrete instance of `PublicAdvertisedPrefixArrayInput` via:
//
//	PublicAdvertisedPrefixArray{ PublicAdvertisedPrefixArgs{...} }
type PublicAdvertisedPrefixArrayInput interface {
	pulumi.Input

	ToPublicAdvertisedPrefixArrayOutput() PublicAdvertisedPrefixArrayOutput
	ToPublicAdvertisedPrefixArrayOutputWithContext(context.Context) PublicAdvertisedPrefixArrayOutput
}

type PublicAdvertisedPrefixArray []PublicAdvertisedPrefixInput

func (PublicAdvertisedPrefixArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicAdvertisedPrefix)(nil)).Elem()
}

func (i PublicAdvertisedPrefixArray) ToPublicAdvertisedPrefixArrayOutput() PublicAdvertisedPrefixArrayOutput {
	return i.ToPublicAdvertisedPrefixArrayOutputWithContext(context.Background())
}

func (i PublicAdvertisedPrefixArray) ToPublicAdvertisedPrefixArrayOutputWithContext(ctx context.Context) PublicAdvertisedPrefixArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicAdvertisedPrefixArrayOutput)
}

// PublicAdvertisedPrefixMapInput is an input type that accepts PublicAdvertisedPrefixMap and PublicAdvertisedPrefixMapOutput values.
// You can construct a concrete instance of `PublicAdvertisedPrefixMapInput` via:
//
//	PublicAdvertisedPrefixMap{ "key": PublicAdvertisedPrefixArgs{...} }
type PublicAdvertisedPrefixMapInput interface {
	pulumi.Input

	ToPublicAdvertisedPrefixMapOutput() PublicAdvertisedPrefixMapOutput
	ToPublicAdvertisedPrefixMapOutputWithContext(context.Context) PublicAdvertisedPrefixMapOutput
}

type PublicAdvertisedPrefixMap map[string]PublicAdvertisedPrefixInput

func (PublicAdvertisedPrefixMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicAdvertisedPrefix)(nil)).Elem()
}

func (i PublicAdvertisedPrefixMap) ToPublicAdvertisedPrefixMapOutput() PublicAdvertisedPrefixMapOutput {
	return i.ToPublicAdvertisedPrefixMapOutputWithContext(context.Background())
}

func (i PublicAdvertisedPrefixMap) ToPublicAdvertisedPrefixMapOutputWithContext(ctx context.Context) PublicAdvertisedPrefixMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicAdvertisedPrefixMapOutput)
}

type PublicAdvertisedPrefixOutput struct{ *pulumi.OutputState }

func (PublicAdvertisedPrefixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicAdvertisedPrefix)(nil)).Elem()
}

func (o PublicAdvertisedPrefixOutput) ToPublicAdvertisedPrefixOutput() PublicAdvertisedPrefixOutput {
	return o
}

func (o PublicAdvertisedPrefixOutput) ToPublicAdvertisedPrefixOutputWithContext(ctx context.Context) PublicAdvertisedPrefixOutput {
	return o
}

// An optional description of this resource.
func (o PublicAdvertisedPrefixOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicAdvertisedPrefix) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The IPv4 address to be used for reverse DNS verification.
func (o PublicAdvertisedPrefixOutput) DnsVerificationIp() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicAdvertisedPrefix) pulumi.StringOutput { return v.DnsVerificationIp }).(pulumi.StringOutput)
}

// The IPv4 address range, in CIDR format, represented by this public advertised prefix.
//
// ***
func (o PublicAdvertisedPrefixOutput) IpCidrRange() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicAdvertisedPrefix) pulumi.StringOutput { return v.IpCidrRange }).(pulumi.StringOutput)
}

// Name of the resource. The name must be 1-63 characters long, and
// comply with RFC1035. Specifically, the name must be 1-63 characters
// long and match the regular expression `a-z?`
// which means the first character must be a lowercase letter, and all
// following characters must be a dash, lowercase letter, or digit,
// except the last character, which cannot be a dash.
func (o PublicAdvertisedPrefixOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicAdvertisedPrefix) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o PublicAdvertisedPrefixOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicAdvertisedPrefix) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The URI of the created resource.
func (o PublicAdvertisedPrefixOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicAdvertisedPrefix) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

type PublicAdvertisedPrefixArrayOutput struct{ *pulumi.OutputState }

func (PublicAdvertisedPrefixArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicAdvertisedPrefix)(nil)).Elem()
}

func (o PublicAdvertisedPrefixArrayOutput) ToPublicAdvertisedPrefixArrayOutput() PublicAdvertisedPrefixArrayOutput {
	return o
}

func (o PublicAdvertisedPrefixArrayOutput) ToPublicAdvertisedPrefixArrayOutputWithContext(ctx context.Context) PublicAdvertisedPrefixArrayOutput {
	return o
}

func (o PublicAdvertisedPrefixArrayOutput) Index(i pulumi.IntInput) PublicAdvertisedPrefixOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublicAdvertisedPrefix {
		return vs[0].([]*PublicAdvertisedPrefix)[vs[1].(int)]
	}).(PublicAdvertisedPrefixOutput)
}

type PublicAdvertisedPrefixMapOutput struct{ *pulumi.OutputState }

func (PublicAdvertisedPrefixMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicAdvertisedPrefix)(nil)).Elem()
}

func (o PublicAdvertisedPrefixMapOutput) ToPublicAdvertisedPrefixMapOutput() PublicAdvertisedPrefixMapOutput {
	return o
}

func (o PublicAdvertisedPrefixMapOutput) ToPublicAdvertisedPrefixMapOutputWithContext(ctx context.Context) PublicAdvertisedPrefixMapOutput {
	return o
}

func (o PublicAdvertisedPrefixMapOutput) MapIndex(k pulumi.StringInput) PublicAdvertisedPrefixOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublicAdvertisedPrefix {
		return vs[0].(map[string]*PublicAdvertisedPrefix)[vs[1].(string)]
	}).(PublicAdvertisedPrefixOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublicAdvertisedPrefixInput)(nil)).Elem(), &PublicAdvertisedPrefix{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicAdvertisedPrefixArrayInput)(nil)).Elem(), PublicAdvertisedPrefixArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicAdvertisedPrefixMapInput)(nil)).Elem(), PublicAdvertisedPrefixMap{})
	pulumi.RegisterOutputType(PublicAdvertisedPrefixOutput{})
	pulumi.RegisterOutputType(PublicAdvertisedPrefixArrayOutput{})
	pulumi.RegisterOutputType(PublicAdvertisedPrefixMapOutput{})
}
