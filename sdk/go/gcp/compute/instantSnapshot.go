// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents an instant snapshot resource.
//
// An instant snapshot is an in-place backup of a disk that can be used to rapidly create a new disk in minutes.
//
// Instant snapshots capture data at a specific point in time. They are optimized for rapidly restoring captured
// data to a new disk. Use instant snapshots to quickly recover data in cases where the zone and disk are still intact
// but the data on the disk has been lost or corrupted
//
// To get more information about InstantSnapshot, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/instantSnapshots)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/compute/docs/disks/instant-snapshots)
//
// ## Example Usage
//
// ### Instant Snapshot Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := compute.NewDisk(ctx, "foo", &compute.DiskArgs{
//				Name: pulumi.String("example-disk"),
//				Type: pulumi.String("pd-ssd"),
//				Size: pulumi.Int(10),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewInstantSnapshot(ctx, "default", &compute.InstantSnapshotArgs{
//				Name:       pulumi.String("instant-snapshot"),
//				Zone:       pulumi.String("us-central1-a"),
//				SourceDisk: foo.SelfLink,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// InstantSnapshot can be imported using any of these accepted formats:
//
// * `projects/{{project}}/zones/{{zone}}/instantSnapshots/{{name}}`
//
// * `{{project}}/{{zone}}/{{name}}`
//
// * `{{zone}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, InstantSnapshot can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:compute/instantSnapshot:InstantSnapshot default projects/{{project}}/zones/{{zone}}/instantSnapshots/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/instantSnapshot:InstantSnapshot default {{project}}/{{zone}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/instantSnapshot:InstantSnapshot default {{zone}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/instantSnapshot:InstantSnapshot default {{name}}
// ```
type InstantSnapshot struct {
	pulumi.CustomResourceState

	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Size of the snapshot, specified in GB.
	DiskSizeGb pulumi.IntOutput `pulumi:"diskSizeGb"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The fingerprint used for optimistic locking of this resource. Used
	// internally during updates.
	LabelFingerprint pulumi.StringOutput `pulumi:"labelFingerprint"`
	// Labels to apply to this InstantSnapshot.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the resource; provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// A reference to the disk used to create this instant snapshot.
	SourceDisk pulumi.StringOutput `pulumi:"sourceDisk"`
	// The ID value of the disk used to create this InstantSnapshot.
	SourceDiskId pulumi.StringOutput `pulumi:"sourceDiskId"`
	// A reference to the zone where the disk is located.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewInstantSnapshot registers a new resource with the given unique name, arguments, and options.
func NewInstantSnapshot(ctx *pulumi.Context,
	name string, args *InstantSnapshotArgs, opts ...pulumi.ResourceOption) (*InstantSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceDisk == nil {
		return nil, errors.New("invalid value for required argument 'SourceDisk'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstantSnapshot
	err := ctx.RegisterResource("gcp:compute/instantSnapshot:InstantSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstantSnapshot gets an existing InstantSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstantSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstantSnapshotState, opts ...pulumi.ResourceOption) (*InstantSnapshot, error) {
	var resource InstantSnapshot
	err := ctx.ReadResource("gcp:compute/instantSnapshot:InstantSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstantSnapshot resources.
type instantSnapshotState struct {
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Size of the snapshot, specified in GB.
	DiskSizeGb *int `pulumi:"diskSizeGb"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The fingerprint used for optimistic locking of this resource. Used
	// internally during updates.
	LabelFingerprint *string `pulumi:"labelFingerprint"`
	// Labels to apply to this InstantSnapshot.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of the resource; provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
	// A reference to the disk used to create this instant snapshot.
	SourceDisk *string `pulumi:"sourceDisk"`
	// The ID value of the disk used to create this InstantSnapshot.
	SourceDiskId *string `pulumi:"sourceDiskId"`
	// A reference to the zone where the disk is located.
	Zone *string `pulumi:"zone"`
}

type InstantSnapshotState struct {
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Size of the snapshot, specified in GB.
	DiskSizeGb pulumi.IntPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The fingerprint used for optimistic locking of this resource. Used
	// internally during updates.
	LabelFingerprint pulumi.StringPtrInput
	// Labels to apply to this InstantSnapshot.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of the resource; provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
	// A reference to the disk used to create this instant snapshot.
	SourceDisk pulumi.StringPtrInput
	// The ID value of the disk used to create this InstantSnapshot.
	SourceDiskId pulumi.StringPtrInput
	// A reference to the zone where the disk is located.
	Zone pulumi.StringPtrInput
}

func (InstantSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*instantSnapshotState)(nil)).Elem()
}

type instantSnapshotArgs struct {
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Labels to apply to this InstantSnapshot.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of the resource; provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A reference to the disk used to create this instant snapshot.
	SourceDisk string `pulumi:"sourceDisk"`
	// A reference to the zone where the disk is located.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a InstantSnapshot resource.
type InstantSnapshotArgs struct {
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Labels to apply to this InstantSnapshot.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of the resource; provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// A reference to the disk used to create this instant snapshot.
	SourceDisk pulumi.StringInput
	// A reference to the zone where the disk is located.
	Zone pulumi.StringPtrInput
}

func (InstantSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instantSnapshotArgs)(nil)).Elem()
}

type InstantSnapshotInput interface {
	pulumi.Input

	ToInstantSnapshotOutput() InstantSnapshotOutput
	ToInstantSnapshotOutputWithContext(ctx context.Context) InstantSnapshotOutput
}

func (*InstantSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**InstantSnapshot)(nil)).Elem()
}

func (i *InstantSnapshot) ToInstantSnapshotOutput() InstantSnapshotOutput {
	return i.ToInstantSnapshotOutputWithContext(context.Background())
}

func (i *InstantSnapshot) ToInstantSnapshotOutputWithContext(ctx context.Context) InstantSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstantSnapshotOutput)
}

// InstantSnapshotArrayInput is an input type that accepts InstantSnapshotArray and InstantSnapshotArrayOutput values.
// You can construct a concrete instance of `InstantSnapshotArrayInput` via:
//
//	InstantSnapshotArray{ InstantSnapshotArgs{...} }
type InstantSnapshotArrayInput interface {
	pulumi.Input

	ToInstantSnapshotArrayOutput() InstantSnapshotArrayOutput
	ToInstantSnapshotArrayOutputWithContext(context.Context) InstantSnapshotArrayOutput
}

type InstantSnapshotArray []InstantSnapshotInput

func (InstantSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstantSnapshot)(nil)).Elem()
}

func (i InstantSnapshotArray) ToInstantSnapshotArrayOutput() InstantSnapshotArrayOutput {
	return i.ToInstantSnapshotArrayOutputWithContext(context.Background())
}

func (i InstantSnapshotArray) ToInstantSnapshotArrayOutputWithContext(ctx context.Context) InstantSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstantSnapshotArrayOutput)
}

// InstantSnapshotMapInput is an input type that accepts InstantSnapshotMap and InstantSnapshotMapOutput values.
// You can construct a concrete instance of `InstantSnapshotMapInput` via:
//
//	InstantSnapshotMap{ "key": InstantSnapshotArgs{...} }
type InstantSnapshotMapInput interface {
	pulumi.Input

	ToInstantSnapshotMapOutput() InstantSnapshotMapOutput
	ToInstantSnapshotMapOutputWithContext(context.Context) InstantSnapshotMapOutput
}

type InstantSnapshotMap map[string]InstantSnapshotInput

func (InstantSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstantSnapshot)(nil)).Elem()
}

func (i InstantSnapshotMap) ToInstantSnapshotMapOutput() InstantSnapshotMapOutput {
	return i.ToInstantSnapshotMapOutputWithContext(context.Background())
}

func (i InstantSnapshotMap) ToInstantSnapshotMapOutputWithContext(ctx context.Context) InstantSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstantSnapshotMapOutput)
}

type InstantSnapshotOutput struct{ *pulumi.OutputState }

func (InstantSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstantSnapshot)(nil)).Elem()
}

func (o InstantSnapshotOutput) ToInstantSnapshotOutput() InstantSnapshotOutput {
	return o
}

func (o InstantSnapshotOutput) ToInstantSnapshotOutputWithContext(ctx context.Context) InstantSnapshotOutput {
	return o
}

// Creation timestamp in RFC3339 text format.
func (o InstantSnapshotOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *InstantSnapshot) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource.
func (o InstantSnapshotOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstantSnapshot) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Size of the snapshot, specified in GB.
func (o InstantSnapshotOutput) DiskSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v *InstantSnapshot) pulumi.IntOutput { return v.DiskSizeGb }).(pulumi.IntOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o InstantSnapshotOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstantSnapshot) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The fingerprint used for optimistic locking of this resource. Used
// internally during updates.
func (o InstantSnapshotOutput) LabelFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *InstantSnapshot) pulumi.StringOutput { return v.LabelFingerprint }).(pulumi.StringOutput)
}

// Labels to apply to this InstantSnapshot.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o InstantSnapshotOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstantSnapshot) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the resource; provided by the client when the resource is
// created. The name must be 1-63 characters long, and comply with
// RFC1035. Specifically, the name must be 1-63 characters long and match
// the regular expression `a-z?` which means the
// first character must be a lowercase letter, and all following
// characters must be a dash, lowercase letter, or digit, except the last
// character, which cannot be a dash.
func (o InstantSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InstantSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o InstantSnapshotOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *InstantSnapshot) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o InstantSnapshotOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstantSnapshot) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The URI of the created resource.
func (o InstantSnapshotOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *InstantSnapshot) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// A reference to the disk used to create this instant snapshot.
func (o InstantSnapshotOutput) SourceDisk() pulumi.StringOutput {
	return o.ApplyT(func(v *InstantSnapshot) pulumi.StringOutput { return v.SourceDisk }).(pulumi.StringOutput)
}

// The ID value of the disk used to create this InstantSnapshot.
func (o InstantSnapshotOutput) SourceDiskId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstantSnapshot) pulumi.StringOutput { return v.SourceDiskId }).(pulumi.StringOutput)
}

// A reference to the zone where the disk is located.
func (o InstantSnapshotOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *InstantSnapshot) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type InstantSnapshotArrayOutput struct{ *pulumi.OutputState }

func (InstantSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstantSnapshot)(nil)).Elem()
}

func (o InstantSnapshotArrayOutput) ToInstantSnapshotArrayOutput() InstantSnapshotArrayOutput {
	return o
}

func (o InstantSnapshotArrayOutput) ToInstantSnapshotArrayOutputWithContext(ctx context.Context) InstantSnapshotArrayOutput {
	return o
}

func (o InstantSnapshotArrayOutput) Index(i pulumi.IntInput) InstantSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstantSnapshot {
		return vs[0].([]*InstantSnapshot)[vs[1].(int)]
	}).(InstantSnapshotOutput)
}

type InstantSnapshotMapOutput struct{ *pulumi.OutputState }

func (InstantSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstantSnapshot)(nil)).Elem()
}

func (o InstantSnapshotMapOutput) ToInstantSnapshotMapOutput() InstantSnapshotMapOutput {
	return o
}

func (o InstantSnapshotMapOutput) ToInstantSnapshotMapOutputWithContext(ctx context.Context) InstantSnapshotMapOutput {
	return o
}

func (o InstantSnapshotMapOutput) MapIndex(k pulumi.StringInput) InstantSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstantSnapshot {
		return vs[0].(map[string]*InstantSnapshot)[vs[1].(string)]
	}).(InstantSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstantSnapshotInput)(nil)).Elem(), &InstantSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstantSnapshotArrayInput)(nil)).Elem(), InstantSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstantSnapshotMapInput)(nil)).Elem(), InstantSnapshotMap{})
	pulumi.RegisterOutputType(InstantSnapshotOutput{})
	pulumi.RegisterOutputType(InstantSnapshotArrayOutput{})
	pulumi.RegisterOutputType(InstantSnapshotMapOutput{})
}
