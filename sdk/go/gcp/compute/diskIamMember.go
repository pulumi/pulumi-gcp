// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Three different resources help you manage your IAM policy for Compute Engine Disk. Each of these resources serves a different use case:
//
// * `compute.DiskIamPolicy`: Authoritative. Sets the IAM policy for the disk and replaces any existing policy already attached.
// * `compute.DiskIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the disk are preserved.
// * `compute.DiskIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the disk are preserved.
//
// > **Note:** `compute.DiskIamPolicy` **cannot** be used in conjunction with `compute.DiskIamBinding` and `compute.DiskIamMember` or they will fight over what your policy should be.
//
// > **Note:** `compute.DiskIamBinding` resources **can be** used in conjunction with `compute.DiskIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_compute\_disk\_iam\_policy
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/compute"
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/organizations"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
// 			Bindings: []organizations.GetIAMPolicyBinding{
// 				organizations.GetIAMPolicyBinding{
// 					Role: "roles/viewer",
// 					Members: []string{
// 						"user:jane@example.com",
// 					},
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewDiskIamPolicy(ctx, "policy", &compute.DiskIamPolicyArgs{
// 			Project:    pulumi.Any(google_compute_disk.Default.Project),
// 			Zone:       pulumi.Any(google_compute_disk.Default.Zone),
// 			PolicyData: pulumi.String(admin.PolicyData),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## google\_compute\_disk\_iam\_binding
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewDiskIamBinding(ctx, "binding", &compute.DiskIamBindingArgs{
// 			Project: pulumi.Any(google_compute_disk.Default.Project),
// 			Zone:    pulumi.Any(google_compute_disk.Default.Zone),
// 			Role:    pulumi.String("roles/viewer"),
// 			Members: pulumi.StringArray{
// 				pulumi.String("user:jane@example.com"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## google\_compute\_disk\_iam\_member
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewDiskIamMember(ctx, "member", &compute.DiskIamMemberArgs{
// 			Project: pulumi.Any(google_compute_disk.Default.Project),
// 			Zone:    pulumi.Any(google_compute_disk.Default.Zone),
// 			Role:    pulumi.String("roles/viewer"),
// 			Member:  pulumi.String("user:jane@example.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/zones/{{zone}}/disks/{{name}} * {{project}}/{{zone}}/{{name}} * {{zone}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Compute Engine disk IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//  $ pulumi import gcp:compute/diskIamMember:DiskIamMember editor "projects/{{project}}/zones/{{zone}}/disks/{{disk}} roles/viewer user:jane@example.com"
// ```
//
//  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//  $ pulumi import gcp:compute/diskIamMember:DiskIamMember editor "projects/{{project}}/zones/{{zone}}/disks/{{disk}} roles/viewer"
// ```
//
//  IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//  $ pulumi import gcp:compute/diskIamMember:DiskIamMember editor projects/{{project}}/zones/{{zone}}/disks/{{disk}}
// ```
//
//  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type DiskIamMember struct {
	pulumi.CustomResourceState

	Condition DiskIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringOutput `pulumi:"etag"`
	Member pulumi.StringOutput `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `compute.DiskIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
	// A reference to the zone where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDiskIamMember registers a new resource with the given unique name, arguments, and options.
func NewDiskIamMember(ctx *pulumi.Context,
	name string, args *DiskIamMemberArgs, opts ...pulumi.ResourceOption) (*DiskIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource DiskIamMember
	err := ctx.RegisterResource("gcp:compute/diskIamMember:DiskIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiskIamMember gets an existing DiskIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiskIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiskIamMemberState, opts ...pulumi.ResourceOption) (*DiskIamMember, error) {
	var resource DiskIamMember
	err := ctx.ReadResource("gcp:compute/diskIamMember:DiskIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiskIamMember resources.
type diskIamMemberState struct {
	Condition *DiskIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag   *string `pulumi:"etag"`
	Member *string `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `compute.DiskIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
	// A reference to the zone where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone *string `pulumi:"zone"`
}

type DiskIamMemberState struct {
	Condition DiskIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringPtrInput
	Member pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `compute.DiskIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
	// A reference to the zone where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone pulumi.StringPtrInput
}

func (DiskIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*diskIamMemberState)(nil)).Elem()
}

type diskIamMemberArgs struct {
	Condition *DiskIamMemberCondition `pulumi:"condition"`
	Member    string                  `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `compute.DiskIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
	// A reference to the zone where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a DiskIamMember resource.
type DiskIamMemberArgs struct {
	Condition DiskIamMemberConditionPtrInput
	Member    pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `compute.DiskIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
	// A reference to the zone where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone pulumi.StringPtrInput
}

func (DiskIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diskIamMemberArgs)(nil)).Elem()
}

type DiskIamMemberInput interface {
	pulumi.Input

	ToDiskIamMemberOutput() DiskIamMemberOutput
	ToDiskIamMemberOutputWithContext(ctx context.Context) DiskIamMemberOutput
}

func (*DiskIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskIamMember)(nil))
}

func (i *DiskIamMember) ToDiskIamMemberOutput() DiskIamMemberOutput {
	return i.ToDiskIamMemberOutputWithContext(context.Background())
}

func (i *DiskIamMember) ToDiskIamMemberOutputWithContext(ctx context.Context) DiskIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskIamMemberOutput)
}

func (i *DiskIamMember) ToDiskIamMemberPtrOutput() DiskIamMemberPtrOutput {
	return i.ToDiskIamMemberPtrOutputWithContext(context.Background())
}

func (i *DiskIamMember) ToDiskIamMemberPtrOutputWithContext(ctx context.Context) DiskIamMemberPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskIamMemberPtrOutput)
}

type DiskIamMemberPtrInput interface {
	pulumi.Input

	ToDiskIamMemberPtrOutput() DiskIamMemberPtrOutput
	ToDiskIamMemberPtrOutputWithContext(ctx context.Context) DiskIamMemberPtrOutput
}

type diskIamMemberPtrType DiskIamMemberArgs

func (*diskIamMemberPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskIamMember)(nil))
}

func (i *diskIamMemberPtrType) ToDiskIamMemberPtrOutput() DiskIamMemberPtrOutput {
	return i.ToDiskIamMemberPtrOutputWithContext(context.Background())
}

func (i *diskIamMemberPtrType) ToDiskIamMemberPtrOutputWithContext(ctx context.Context) DiskIamMemberPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskIamMemberPtrOutput)
}

// DiskIamMemberArrayInput is an input type that accepts DiskIamMemberArray and DiskIamMemberArrayOutput values.
// You can construct a concrete instance of `DiskIamMemberArrayInput` via:
//
//          DiskIamMemberArray{ DiskIamMemberArgs{...} }
type DiskIamMemberArrayInput interface {
	pulumi.Input

	ToDiskIamMemberArrayOutput() DiskIamMemberArrayOutput
	ToDiskIamMemberArrayOutputWithContext(context.Context) DiskIamMemberArrayOutput
}

type DiskIamMemberArray []DiskIamMemberInput

func (DiskIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*DiskIamMember)(nil))
}

func (i DiskIamMemberArray) ToDiskIamMemberArrayOutput() DiskIamMemberArrayOutput {
	return i.ToDiskIamMemberArrayOutputWithContext(context.Background())
}

func (i DiskIamMemberArray) ToDiskIamMemberArrayOutputWithContext(ctx context.Context) DiskIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskIamMemberArrayOutput)
}

// DiskIamMemberMapInput is an input type that accepts DiskIamMemberMap and DiskIamMemberMapOutput values.
// You can construct a concrete instance of `DiskIamMemberMapInput` via:
//
//          DiskIamMemberMap{ "key": DiskIamMemberArgs{...} }
type DiskIamMemberMapInput interface {
	pulumi.Input

	ToDiskIamMemberMapOutput() DiskIamMemberMapOutput
	ToDiskIamMemberMapOutputWithContext(context.Context) DiskIamMemberMapOutput
}

type DiskIamMemberMap map[string]DiskIamMemberInput

func (DiskIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*DiskIamMember)(nil))
}

func (i DiskIamMemberMap) ToDiskIamMemberMapOutput() DiskIamMemberMapOutput {
	return i.ToDiskIamMemberMapOutputWithContext(context.Background())
}

func (i DiskIamMemberMap) ToDiskIamMemberMapOutputWithContext(ctx context.Context) DiskIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskIamMemberMapOutput)
}

type DiskIamMemberOutput struct {
	*pulumi.OutputState
}

func (DiskIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskIamMember)(nil))
}

func (o DiskIamMemberOutput) ToDiskIamMemberOutput() DiskIamMemberOutput {
	return o
}

func (o DiskIamMemberOutput) ToDiskIamMemberOutputWithContext(ctx context.Context) DiskIamMemberOutput {
	return o
}

func (o DiskIamMemberOutput) ToDiskIamMemberPtrOutput() DiskIamMemberPtrOutput {
	return o.ToDiskIamMemberPtrOutputWithContext(context.Background())
}

func (o DiskIamMemberOutput) ToDiskIamMemberPtrOutputWithContext(ctx context.Context) DiskIamMemberPtrOutput {
	return o.ApplyT(func(v DiskIamMember) *DiskIamMember {
		return &v
	}).(DiskIamMemberPtrOutput)
}

type DiskIamMemberPtrOutput struct {
	*pulumi.OutputState
}

func (DiskIamMemberPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskIamMember)(nil))
}

func (o DiskIamMemberPtrOutput) ToDiskIamMemberPtrOutput() DiskIamMemberPtrOutput {
	return o
}

func (o DiskIamMemberPtrOutput) ToDiskIamMemberPtrOutputWithContext(ctx context.Context) DiskIamMemberPtrOutput {
	return o
}

type DiskIamMemberArrayOutput struct{ *pulumi.OutputState }

func (DiskIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskIamMember)(nil))
}

func (o DiskIamMemberArrayOutput) ToDiskIamMemberArrayOutput() DiskIamMemberArrayOutput {
	return o
}

func (o DiskIamMemberArrayOutput) ToDiskIamMemberArrayOutputWithContext(ctx context.Context) DiskIamMemberArrayOutput {
	return o
}

func (o DiskIamMemberArrayOutput) Index(i pulumi.IntInput) DiskIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskIamMember {
		return vs[0].([]DiskIamMember)[vs[1].(int)]
	}).(DiskIamMemberOutput)
}

type DiskIamMemberMapOutput struct{ *pulumi.OutputState }

func (DiskIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DiskIamMember)(nil))
}

func (o DiskIamMemberMapOutput) ToDiskIamMemberMapOutput() DiskIamMemberMapOutput {
	return o
}

func (o DiskIamMemberMapOutput) ToDiskIamMemberMapOutputWithContext(ctx context.Context) DiskIamMemberMapOutput {
	return o
}

func (o DiskIamMemberMapOutput) MapIndex(k pulumi.StringInput) DiskIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DiskIamMember {
		return vs[0].(map[string]DiskIamMember)[vs[1].(string)]
	}).(DiskIamMemberOutput)
}

func init() {
	pulumi.RegisterOutputType(DiskIamMemberOutput{})
	pulumi.RegisterOutputType(DiskIamMemberPtrOutput{})
	pulumi.RegisterOutputType(DiskIamMemberArrayOutput{})
	pulumi.RegisterOutputType(DiskIamMemberMapOutput{})
}
