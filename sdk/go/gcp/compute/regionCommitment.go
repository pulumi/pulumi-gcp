// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a regional Commitment resource.
//
// Creating a commitment resource means that you are purchasing a committed
// use contract with an explicit start and end time. You can create commitments
// based on vCPUs and memory usage and receive discounted rates.
//
// To get more information about RegionCommitment, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/regionCommitments)
// * How-to Guides
//   - [Committed use discounts for Compute Engine](https://cloud.google.com/compute/docs/instances/committed-use-discounts-overview)
//
// ## Example Usage
// ### Compute Region Commitment Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionCommitment(ctx, "foobar", &compute.RegionCommitmentArgs{
//				Plan: pulumi.String("THIRTY_SIX_MONTH"),
//				Resources: compute.RegionCommitmentResourceArray{
//					&compute.RegionCommitmentResourceArgs{
//						Amount: pulumi.String("4"),
//						Type:   pulumi.String("VCPU"),
//					},
//					&compute.RegionCommitmentResourceArgs{
//						Amount: pulumi.String("9"),
//						Type:   pulumi.String("MEMORY"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Compute Region Commitment Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionCommitment(ctx, "foobar", &compute.RegionCommitmentArgs{
//				AutoRenew:   pulumi.Bool(true),
//				Category:    pulumi.String("MACHINE"),
//				Description: pulumi.String("some description"),
//				Plan:        pulumi.String("THIRTY_SIX_MONTH"),
//				Resources: compute.RegionCommitmentResourceArray{
//					&compute.RegionCommitmentResourceArgs{
//						Amount: pulumi.String("4"),
//						Type:   pulumi.String("VCPU"),
//					},
//					&compute.RegionCommitmentResourceArgs{
//						Amount: pulumi.String("9"),
//						Type:   pulumi.String("MEMORY"),
//					},
//				},
//				Type: pulumi.String("MEMORY_OPTIMIZED"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # RegionCommitment can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:compute/regionCommitment:RegionCommitment default projects/{{project}}/regions/{{region}}/commitments/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/regionCommitment:RegionCommitment default {{project}}/{{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/regionCommitment:RegionCommitment default {{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/regionCommitment:RegionCommitment default {{name}}
//
// ```
type RegionCommitment struct {
	pulumi.CustomResourceState

	// Specifies whether to enable automatic renewal for the commitment.
	// The default value is false if not specified.
	// If the field is set to true, the commitment will be automatically renewed for either
	// one or three years according to the terms of the existing commitment.
	AutoRenew pulumi.BoolOutput `pulumi:"autoRenew"`
	// The category of the commitment. Category MACHINE specifies commitments composed of
	// machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE
	// specifies commitments composed of software licenses, listed in licenseResources.
	// Note that only MACHINE commitments should have a Type specified.
	// Possible values are: `LICENSE`, `MACHINE`.
	Category pulumi.StringOutput `pulumi:"category"`
	// Unique identifier for the resource.
	CommitmentId pulumi.IntOutput `pulumi:"commitmentId"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Commitment end time in RFC3339 text format.
	EndTimestamp pulumi.StringOutput `pulumi:"endTimestamp"`
	// The license specification required as part of a license commitment.
	// Structure is documented below.
	LicenseResource RegionCommitmentLicenseResourcePtrOutput `pulumi:"licenseResource"`
	// Name of the resource. The name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// The plan for this commitment, which determines duration and discount rate.
	// The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
	// Possible values are: `TWELVE_MONTH`, `THIRTY_SIX_MONTH`.
	//
	// ***
	Plan pulumi.StringOutput `pulumi:"plan"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// URL of the region where this commitment may be used.
	Region pulumi.StringOutput `pulumi:"region"`
	// A list of commitment amounts for particular resources.
	// Note that VCPU and MEMORY resource commitments must occur together.
	// Structure is documented below.
	Resources RegionCommitmentResourceArrayOutput `pulumi:"resources"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Commitment start time in RFC3339 text format.
	StartTimestamp pulumi.StringOutput `pulumi:"startTimestamp"`
	// Status of the commitment with regards to eventual expiration
	// (each commitment has an end date defined).
	Status pulumi.StringOutput `pulumi:"status"`
	// A human-readable explanation of the status.
	StatusMessage pulumi.StringOutput `pulumi:"statusMessage"`
	// The type of commitment, which affects the discount rate and the eligible resources.
	// The type could be one of the following value: `MEMORY_OPTIMIZED`, `ACCELERATOR_OPTIMIZED`,
	// `GENERAL_PURPOSE_N1`, `GENERAL_PURPOSE_N2`, `GENERAL_PURPOSE_N2D`, `GENERAL_PURPOSE_E2`,
	// `GENERAL_PURPOSE_T2D`, `GENERAL_PURPOSE_C3`, `COMPUTE_OPTIMIZED_C2`, `COMPUTE_OPTIMIZED_C2D` and
	// `GRAPHICS_OPTIMIZED_G2`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRegionCommitment registers a new resource with the given unique name, arguments, and options.
func NewRegionCommitment(ctx *pulumi.Context,
	name string, args *RegionCommitmentArgs, opts ...pulumi.ResourceOption) (*RegionCommitment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionCommitment
	err := ctx.RegisterResource("gcp:compute/regionCommitment:RegionCommitment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionCommitment gets an existing RegionCommitment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionCommitment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionCommitmentState, opts ...pulumi.ResourceOption) (*RegionCommitment, error) {
	var resource RegionCommitment
	err := ctx.ReadResource("gcp:compute/regionCommitment:RegionCommitment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionCommitment resources.
type regionCommitmentState struct {
	// Specifies whether to enable automatic renewal for the commitment.
	// The default value is false if not specified.
	// If the field is set to true, the commitment will be automatically renewed for either
	// one or three years according to the terms of the existing commitment.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The category of the commitment. Category MACHINE specifies commitments composed of
	// machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE
	// specifies commitments composed of software licenses, listed in licenseResources.
	// Note that only MACHINE commitments should have a Type specified.
	// Possible values are: `LICENSE`, `MACHINE`.
	Category *string `pulumi:"category"`
	// Unique identifier for the resource.
	CommitmentId *int `pulumi:"commitmentId"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Commitment end time in RFC3339 text format.
	EndTimestamp *string `pulumi:"endTimestamp"`
	// The license specification required as part of a license commitment.
	// Structure is documented below.
	LicenseResource *RegionCommitmentLicenseResource `pulumi:"licenseResource"`
	// Name of the resource. The name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The plan for this commitment, which determines duration and discount rate.
	// The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
	// Possible values are: `TWELVE_MONTH`, `THIRTY_SIX_MONTH`.
	//
	// ***
	Plan *string `pulumi:"plan"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// URL of the region where this commitment may be used.
	Region *string `pulumi:"region"`
	// A list of commitment amounts for particular resources.
	// Note that VCPU and MEMORY resource commitments must occur together.
	// Structure is documented below.
	Resources []RegionCommitmentResource `pulumi:"resources"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
	// Commitment start time in RFC3339 text format.
	StartTimestamp *string `pulumi:"startTimestamp"`
	// Status of the commitment with regards to eventual expiration
	// (each commitment has an end date defined).
	Status *string `pulumi:"status"`
	// A human-readable explanation of the status.
	StatusMessage *string `pulumi:"statusMessage"`
	// The type of commitment, which affects the discount rate and the eligible resources.
	// The type could be one of the following value: `MEMORY_OPTIMIZED`, `ACCELERATOR_OPTIMIZED`,
	// `GENERAL_PURPOSE_N1`, `GENERAL_PURPOSE_N2`, `GENERAL_PURPOSE_N2D`, `GENERAL_PURPOSE_E2`,
	// `GENERAL_PURPOSE_T2D`, `GENERAL_PURPOSE_C3`, `COMPUTE_OPTIMIZED_C2`, `COMPUTE_OPTIMIZED_C2D` and
	// `GRAPHICS_OPTIMIZED_G2`
	Type *string `pulumi:"type"`
}

type RegionCommitmentState struct {
	// Specifies whether to enable automatic renewal for the commitment.
	// The default value is false if not specified.
	// If the field is set to true, the commitment will be automatically renewed for either
	// one or three years according to the terms of the existing commitment.
	AutoRenew pulumi.BoolPtrInput
	// The category of the commitment. Category MACHINE specifies commitments composed of
	// machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE
	// specifies commitments composed of software licenses, listed in licenseResources.
	// Note that only MACHINE commitments should have a Type specified.
	// Possible values are: `LICENSE`, `MACHINE`.
	Category pulumi.StringPtrInput
	// Unique identifier for the resource.
	CommitmentId pulumi.IntPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Commitment end time in RFC3339 text format.
	EndTimestamp pulumi.StringPtrInput
	// The license specification required as part of a license commitment.
	// Structure is documented below.
	LicenseResource RegionCommitmentLicenseResourcePtrInput
	// Name of the resource. The name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The plan for this commitment, which determines duration and discount rate.
	// The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
	// Possible values are: `TWELVE_MONTH`, `THIRTY_SIX_MONTH`.
	//
	// ***
	Plan pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// URL of the region where this commitment may be used.
	Region pulumi.StringPtrInput
	// A list of commitment amounts for particular resources.
	// Note that VCPU and MEMORY resource commitments must occur together.
	// Structure is documented below.
	Resources RegionCommitmentResourceArrayInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
	// Commitment start time in RFC3339 text format.
	StartTimestamp pulumi.StringPtrInput
	// Status of the commitment with regards to eventual expiration
	// (each commitment has an end date defined).
	Status pulumi.StringPtrInput
	// A human-readable explanation of the status.
	StatusMessage pulumi.StringPtrInput
	// The type of commitment, which affects the discount rate and the eligible resources.
	// The type could be one of the following value: `MEMORY_OPTIMIZED`, `ACCELERATOR_OPTIMIZED`,
	// `GENERAL_PURPOSE_N1`, `GENERAL_PURPOSE_N2`, `GENERAL_PURPOSE_N2D`, `GENERAL_PURPOSE_E2`,
	// `GENERAL_PURPOSE_T2D`, `GENERAL_PURPOSE_C3`, `COMPUTE_OPTIMIZED_C2`, `COMPUTE_OPTIMIZED_C2D` and
	// `GRAPHICS_OPTIMIZED_G2`
	Type pulumi.StringPtrInput
}

func (RegionCommitmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionCommitmentState)(nil)).Elem()
}

type regionCommitmentArgs struct {
	// Specifies whether to enable automatic renewal for the commitment.
	// The default value is false if not specified.
	// If the field is set to true, the commitment will be automatically renewed for either
	// one or three years according to the terms of the existing commitment.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The category of the commitment. Category MACHINE specifies commitments composed of
	// machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE
	// specifies commitments composed of software licenses, listed in licenseResources.
	// Note that only MACHINE commitments should have a Type specified.
	// Possible values are: `LICENSE`, `MACHINE`.
	Category *string `pulumi:"category"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// The license specification required as part of a license commitment.
	// Structure is documented below.
	LicenseResource *RegionCommitmentLicenseResource `pulumi:"licenseResource"`
	// Name of the resource. The name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The plan for this commitment, which determines duration and discount rate.
	// The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
	// Possible values are: `TWELVE_MONTH`, `THIRTY_SIX_MONTH`.
	//
	// ***
	Plan string `pulumi:"plan"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// URL of the region where this commitment may be used.
	Region *string `pulumi:"region"`
	// A list of commitment amounts for particular resources.
	// Note that VCPU and MEMORY resource commitments must occur together.
	// Structure is documented below.
	Resources []RegionCommitmentResource `pulumi:"resources"`
	// The type of commitment, which affects the discount rate and the eligible resources.
	// The type could be one of the following value: `MEMORY_OPTIMIZED`, `ACCELERATOR_OPTIMIZED`,
	// `GENERAL_PURPOSE_N1`, `GENERAL_PURPOSE_N2`, `GENERAL_PURPOSE_N2D`, `GENERAL_PURPOSE_E2`,
	// `GENERAL_PURPOSE_T2D`, `GENERAL_PURPOSE_C3`, `COMPUTE_OPTIMIZED_C2`, `COMPUTE_OPTIMIZED_C2D` and
	// `GRAPHICS_OPTIMIZED_G2`
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a RegionCommitment resource.
type RegionCommitmentArgs struct {
	// Specifies whether to enable automatic renewal for the commitment.
	// The default value is false if not specified.
	// If the field is set to true, the commitment will be automatically renewed for either
	// one or three years according to the terms of the existing commitment.
	AutoRenew pulumi.BoolPtrInput
	// The category of the commitment. Category MACHINE specifies commitments composed of
	// machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE
	// specifies commitments composed of software licenses, listed in licenseResources.
	// Note that only MACHINE commitments should have a Type specified.
	// Possible values are: `LICENSE`, `MACHINE`.
	Category pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// The license specification required as part of a license commitment.
	// Structure is documented below.
	LicenseResource RegionCommitmentLicenseResourcePtrInput
	// Name of the resource. The name must be 1-63 characters long and match
	// the regular expression `a-z?` which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The plan for this commitment, which determines duration and discount rate.
	// The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
	// Possible values are: `TWELVE_MONTH`, `THIRTY_SIX_MONTH`.
	//
	// ***
	Plan pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// URL of the region where this commitment may be used.
	Region pulumi.StringPtrInput
	// A list of commitment amounts for particular resources.
	// Note that VCPU and MEMORY resource commitments must occur together.
	// Structure is documented below.
	Resources RegionCommitmentResourceArrayInput
	// The type of commitment, which affects the discount rate and the eligible resources.
	// The type could be one of the following value: `MEMORY_OPTIMIZED`, `ACCELERATOR_OPTIMIZED`,
	// `GENERAL_PURPOSE_N1`, `GENERAL_PURPOSE_N2`, `GENERAL_PURPOSE_N2D`, `GENERAL_PURPOSE_E2`,
	// `GENERAL_PURPOSE_T2D`, `GENERAL_PURPOSE_C3`, `COMPUTE_OPTIMIZED_C2`, `COMPUTE_OPTIMIZED_C2D` and
	// `GRAPHICS_OPTIMIZED_G2`
	Type pulumi.StringPtrInput
}

func (RegionCommitmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionCommitmentArgs)(nil)).Elem()
}

type RegionCommitmentInput interface {
	pulumi.Input

	ToRegionCommitmentOutput() RegionCommitmentOutput
	ToRegionCommitmentOutputWithContext(ctx context.Context) RegionCommitmentOutput
}

func (*RegionCommitment) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionCommitment)(nil)).Elem()
}

func (i *RegionCommitment) ToRegionCommitmentOutput() RegionCommitmentOutput {
	return i.ToRegionCommitmentOutputWithContext(context.Background())
}

func (i *RegionCommitment) ToRegionCommitmentOutputWithContext(ctx context.Context) RegionCommitmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionCommitmentOutput)
}

// RegionCommitmentArrayInput is an input type that accepts RegionCommitmentArray and RegionCommitmentArrayOutput values.
// You can construct a concrete instance of `RegionCommitmentArrayInput` via:
//
//	RegionCommitmentArray{ RegionCommitmentArgs{...} }
type RegionCommitmentArrayInput interface {
	pulumi.Input

	ToRegionCommitmentArrayOutput() RegionCommitmentArrayOutput
	ToRegionCommitmentArrayOutputWithContext(context.Context) RegionCommitmentArrayOutput
}

type RegionCommitmentArray []RegionCommitmentInput

func (RegionCommitmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionCommitment)(nil)).Elem()
}

func (i RegionCommitmentArray) ToRegionCommitmentArrayOutput() RegionCommitmentArrayOutput {
	return i.ToRegionCommitmentArrayOutputWithContext(context.Background())
}

func (i RegionCommitmentArray) ToRegionCommitmentArrayOutputWithContext(ctx context.Context) RegionCommitmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionCommitmentArrayOutput)
}

// RegionCommitmentMapInput is an input type that accepts RegionCommitmentMap and RegionCommitmentMapOutput values.
// You can construct a concrete instance of `RegionCommitmentMapInput` via:
//
//	RegionCommitmentMap{ "key": RegionCommitmentArgs{...} }
type RegionCommitmentMapInput interface {
	pulumi.Input

	ToRegionCommitmentMapOutput() RegionCommitmentMapOutput
	ToRegionCommitmentMapOutputWithContext(context.Context) RegionCommitmentMapOutput
}

type RegionCommitmentMap map[string]RegionCommitmentInput

func (RegionCommitmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionCommitment)(nil)).Elem()
}

func (i RegionCommitmentMap) ToRegionCommitmentMapOutput() RegionCommitmentMapOutput {
	return i.ToRegionCommitmentMapOutputWithContext(context.Background())
}

func (i RegionCommitmentMap) ToRegionCommitmentMapOutputWithContext(ctx context.Context) RegionCommitmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionCommitmentMapOutput)
}

type RegionCommitmentOutput struct{ *pulumi.OutputState }

func (RegionCommitmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionCommitment)(nil)).Elem()
}

func (o RegionCommitmentOutput) ToRegionCommitmentOutput() RegionCommitmentOutput {
	return o
}

func (o RegionCommitmentOutput) ToRegionCommitmentOutputWithContext(ctx context.Context) RegionCommitmentOutput {
	return o
}

// Specifies whether to enable automatic renewal for the commitment.
// The default value is false if not specified.
// If the field is set to true, the commitment will be automatically renewed for either
// one or three years according to the terms of the existing commitment.
func (o RegionCommitmentOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v *RegionCommitment) pulumi.BoolOutput { return v.AutoRenew }).(pulumi.BoolOutput)
}

// The category of the commitment. Category MACHINE specifies commitments composed of
// machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE
// specifies commitments composed of software licenses, listed in licenseResources.
// Note that only MACHINE commitments should have a Type specified.
// Possible values are: `LICENSE`, `MACHINE`.
func (o RegionCommitmentOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionCommitment) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// Unique identifier for the resource.
func (o RegionCommitmentOutput) CommitmentId() pulumi.IntOutput {
	return o.ApplyT(func(v *RegionCommitment) pulumi.IntOutput { return v.CommitmentId }).(pulumi.IntOutput)
}

// Creation timestamp in RFC3339 text format.
func (o RegionCommitmentOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionCommitment) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource.
func (o RegionCommitmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionCommitment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Commitment end time in RFC3339 text format.
func (o RegionCommitmentOutput) EndTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionCommitment) pulumi.StringOutput { return v.EndTimestamp }).(pulumi.StringOutput)
}

// The license specification required as part of a license commitment.
// Structure is documented below.
func (o RegionCommitmentOutput) LicenseResource() RegionCommitmentLicenseResourcePtrOutput {
	return o.ApplyT(func(v *RegionCommitment) RegionCommitmentLicenseResourcePtrOutput { return v.LicenseResource }).(RegionCommitmentLicenseResourcePtrOutput)
}

// Name of the resource. The name must be 1-63 characters long and match
// the regular expression `a-z?` which means the
// first character must be a lowercase letter, and all following
// characters must be a dash, lowercase letter, or digit, except the last
// character, which cannot be a dash.
func (o RegionCommitmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionCommitment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The plan for this commitment, which determines duration and discount rate.
// The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
// Possible values are: `TWELVE_MONTH`, `THIRTY_SIX_MONTH`.
//
// ***
func (o RegionCommitmentOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionCommitment) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RegionCommitmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionCommitment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// URL of the region where this commitment may be used.
func (o RegionCommitmentOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionCommitment) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// A list of commitment amounts for particular resources.
// Note that VCPU and MEMORY resource commitments must occur together.
// Structure is documented below.
func (o RegionCommitmentOutput) Resources() RegionCommitmentResourceArrayOutput {
	return o.ApplyT(func(v *RegionCommitment) RegionCommitmentResourceArrayOutput { return v.Resources }).(RegionCommitmentResourceArrayOutput)
}

// The URI of the created resource.
func (o RegionCommitmentOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionCommitment) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Commitment start time in RFC3339 text format.
func (o RegionCommitmentOutput) StartTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionCommitment) pulumi.StringOutput { return v.StartTimestamp }).(pulumi.StringOutput)
}

// Status of the commitment with regards to eventual expiration
// (each commitment has an end date defined).
func (o RegionCommitmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionCommitment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A human-readable explanation of the status.
func (o RegionCommitmentOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionCommitment) pulumi.StringOutput { return v.StatusMessage }).(pulumi.StringOutput)
}

// The type of commitment, which affects the discount rate and the eligible resources.
// The type could be one of the following value: `MEMORY_OPTIMIZED`, `ACCELERATOR_OPTIMIZED`,
// `GENERAL_PURPOSE_N1`, `GENERAL_PURPOSE_N2`, `GENERAL_PURPOSE_N2D`, `GENERAL_PURPOSE_E2`,
// `GENERAL_PURPOSE_T2D`, `GENERAL_PURPOSE_C3`, `COMPUTE_OPTIMIZED_C2`, `COMPUTE_OPTIMIZED_C2D` and
// `GRAPHICS_OPTIMIZED_G2`
func (o RegionCommitmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionCommitment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type RegionCommitmentArrayOutput struct{ *pulumi.OutputState }

func (RegionCommitmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionCommitment)(nil)).Elem()
}

func (o RegionCommitmentArrayOutput) ToRegionCommitmentArrayOutput() RegionCommitmentArrayOutput {
	return o
}

func (o RegionCommitmentArrayOutput) ToRegionCommitmentArrayOutputWithContext(ctx context.Context) RegionCommitmentArrayOutput {
	return o
}

func (o RegionCommitmentArrayOutput) Index(i pulumi.IntInput) RegionCommitmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionCommitment {
		return vs[0].([]*RegionCommitment)[vs[1].(int)]
	}).(RegionCommitmentOutput)
}

type RegionCommitmentMapOutput struct{ *pulumi.OutputState }

func (RegionCommitmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionCommitment)(nil)).Elem()
}

func (o RegionCommitmentMapOutput) ToRegionCommitmentMapOutput() RegionCommitmentMapOutput {
	return o
}

func (o RegionCommitmentMapOutput) ToRegionCommitmentMapOutputWithContext(ctx context.Context) RegionCommitmentMapOutput {
	return o
}

func (o RegionCommitmentMapOutput) MapIndex(k pulumi.StringInput) RegionCommitmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionCommitment {
		return vs[0].(map[string]*RegionCommitment)[vs[1].(string)]
	}).(RegionCommitmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionCommitmentInput)(nil)).Elem(), &RegionCommitment{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionCommitmentArrayInput)(nil)).Elem(), RegionCommitmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionCommitmentMapInput)(nil)).Elem(), RegionCommitmentMap{})
	pulumi.RegisterOutputType(RegionCommitmentOutput{})
	pulumi.RegisterOutputType(RegionCommitmentArrayOutput{})
	pulumi.RegisterOutputType(RegionCommitmentMapOutput{})
}
