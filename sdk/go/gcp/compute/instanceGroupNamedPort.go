// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Mange the named ports setting for a managed instance group without
// managing the group as whole. This resource is primarily intended for use
// with GKE-generated groups that shouldn't otherwise be managed by other
// tools.
//
// To get more information about InstanceGroupNamedPort, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/instanceGroup)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/compute/docs/instance-groups/)
//
// ## Example Usage
// ### Instance Group Named Port Gke
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/compute"
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/container"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		containerNetwork, err := compute.NewNetwork(ctx, "containerNetwork", &compute.NetworkArgs{
// 			AutoCreateSubnetworks: pulumi.Bool(false),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		containerSubnetwork, err := compute.NewSubnetwork(ctx, "containerSubnetwork", &compute.SubnetworkArgs{
// 			Region:      pulumi.String("us-central1"),
// 			Network:     containerNetwork.Name,
// 			IpCidrRange: pulumi.String("10.0.36.0/24"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		myCluster, err := container.NewCluster(ctx, "myCluster", &container.ClusterArgs{
// 			Location:         pulumi.String("us-central1-a"),
// 			InitialNodeCount: pulumi.Int(1),
// 			Network:          containerNetwork.Name,
// 			Subnetwork:       containerSubnetwork.Name,
// 			IpAllocationPolicy: &container.ClusterIpAllocationPolicyArgs{
// 				ClusterIpv4CidrBlock:  pulumi.String("/19"),
// 				ServicesIpv4CidrBlock: pulumi.String("/22"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewInstanceGroupNamedPort(ctx, "myPort", &compute.InstanceGroupNamedPortArgs{
// 			Group: myCluster.InstanceGroupUrls.ApplyT(func(instanceGroupUrls []string) (string, error) {
// 				return instanceGroupUrls[0], nil
// 			}).(pulumi.StringOutput),
// 			Zone: pulumi.String("us-central1-a"),
// 			Port: pulumi.Int(8080),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewInstanceGroupNamedPort(ctx, "myPorts", &compute.InstanceGroupNamedPortArgs{
// 			Group: myCluster.InstanceGroupUrls.ApplyT(func(instanceGroupUrls []string) (string, error) {
// 				return instanceGroupUrls[0], nil
// 			}).(pulumi.StringOutput),
// 			Zone: pulumi.String("us-central1-a"),
// 			Port: pulumi.Int(4443),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// InstanceGroupNamedPort can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:compute/instanceGroupNamedPort:InstanceGroupNamedPort default projects/{{project}}/zones/{{zone}}/instanceGroups/{{group}}/{{port}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:compute/instanceGroupNamedPort:InstanceGroupNamedPort default {{project}}/{{zone}}/{{group}}/{{port}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:compute/instanceGroupNamedPort:InstanceGroupNamedPort default {{zone}}/{{group}}/{{port}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:compute/instanceGroupNamedPort:InstanceGroupNamedPort default {{group}}/{{port}}/{{name}}
// ```
type InstanceGroupNamedPortType struct {
	pulumi.CustomResourceState

	// The name of the instance group.
	Group pulumi.StringOutput `pulumi:"group"`
	// The name for this named port. The name must be 1-63 characters
	// long, and comply with RFC1035.
	Name pulumi.StringOutput `pulumi:"name"`
	// The port number, which can be a value between 1 and 65535.
	Port pulumi.IntOutput `pulumi:"port"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The zone of the instance group.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewInstanceGroupNamedPortType registers a new resource with the given unique name, arguments, and options.
func NewInstanceGroupNamedPortType(ctx *pulumi.Context,
	name string, args *InstanceGroupNamedPortTypeArgs, opts ...pulumi.ResourceOption) (*InstanceGroupNamedPortType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	var resource InstanceGroupNamedPortType
	err := ctx.RegisterResource("gcp:compute/instanceGroupNamedPort:InstanceGroupNamedPort", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceGroupNamedPortType gets an existing InstanceGroupNamedPortType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceGroupNamedPortType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceGroupNamedPortTypeState, opts ...pulumi.ResourceOption) (*InstanceGroupNamedPortType, error) {
	var resource InstanceGroupNamedPortType
	err := ctx.ReadResource("gcp:compute/instanceGroupNamedPort:InstanceGroupNamedPort", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceGroupNamedPortType resources.
type instanceGroupNamedPortTypeState struct {
	// The name of the instance group.
	Group *string `pulumi:"group"`
	// The name for this named port. The name must be 1-63 characters
	// long, and comply with RFC1035.
	Name *string `pulumi:"name"`
	// The port number, which can be a value between 1 and 65535.
	Port *int `pulumi:"port"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The zone of the instance group.
	Zone *string `pulumi:"zone"`
}

type InstanceGroupNamedPortTypeState struct {
	// The name of the instance group.
	Group pulumi.StringPtrInput
	// The name for this named port. The name must be 1-63 characters
	// long, and comply with RFC1035.
	Name pulumi.StringPtrInput
	// The port number, which can be a value between 1 and 65535.
	Port pulumi.IntPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The zone of the instance group.
	Zone pulumi.StringPtrInput
}

func (InstanceGroupNamedPortTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceGroupNamedPortTypeState)(nil)).Elem()
}

type instanceGroupNamedPortTypeArgs struct {
	// The name of the instance group.
	Group string `pulumi:"group"`
	// The name for this named port. The name must be 1-63 characters
	// long, and comply with RFC1035.
	Name *string `pulumi:"name"`
	// The port number, which can be a value between 1 and 65535.
	Port int `pulumi:"port"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The zone of the instance group.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a InstanceGroupNamedPortType resource.
type InstanceGroupNamedPortTypeArgs struct {
	// The name of the instance group.
	Group pulumi.StringInput
	// The name for this named port. The name must be 1-63 characters
	// long, and comply with RFC1035.
	Name pulumi.StringPtrInput
	// The port number, which can be a value between 1 and 65535.
	Port pulumi.IntInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The zone of the instance group.
	Zone pulumi.StringPtrInput
}

func (InstanceGroupNamedPortTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceGroupNamedPortTypeArgs)(nil)).Elem()
}

type InstanceGroupNamedPortTypeInput interface {
	pulumi.Input

	ToInstanceGroupNamedPortTypeOutput() InstanceGroupNamedPortTypeOutput
	ToInstanceGroupNamedPortTypeOutputWithContext(ctx context.Context) InstanceGroupNamedPortTypeOutput
}

func (*InstanceGroupNamedPortType) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupNamedPortType)(nil))
}

func (i *InstanceGroupNamedPortType) ToInstanceGroupNamedPortTypeOutput() InstanceGroupNamedPortTypeOutput {
	return i.ToInstanceGroupNamedPortTypeOutputWithContext(context.Background())
}

func (i *InstanceGroupNamedPortType) ToInstanceGroupNamedPortTypeOutputWithContext(ctx context.Context) InstanceGroupNamedPortTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupNamedPortTypeOutput)
}

func (i *InstanceGroupNamedPortType) ToInstanceGroupNamedPortTypePtrOutput() InstanceGroupNamedPortTypePtrOutput {
	return i.ToInstanceGroupNamedPortTypePtrOutputWithContext(context.Background())
}

func (i *InstanceGroupNamedPortType) ToInstanceGroupNamedPortTypePtrOutputWithContext(ctx context.Context) InstanceGroupNamedPortTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupNamedPortTypePtrOutput)
}

type InstanceGroupNamedPortTypePtrInput interface {
	pulumi.Input

	ToInstanceGroupNamedPortTypePtrOutput() InstanceGroupNamedPortTypePtrOutput
	ToInstanceGroupNamedPortTypePtrOutputWithContext(ctx context.Context) InstanceGroupNamedPortTypePtrOutput
}

type instanceGroupNamedPortTypePtrType InstanceGroupNamedPortTypeArgs

func (*instanceGroupNamedPortTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupNamedPortType)(nil))
}

func (i *instanceGroupNamedPortTypePtrType) ToInstanceGroupNamedPortTypePtrOutput() InstanceGroupNamedPortTypePtrOutput {
	return i.ToInstanceGroupNamedPortTypePtrOutputWithContext(context.Background())
}

func (i *instanceGroupNamedPortTypePtrType) ToInstanceGroupNamedPortTypePtrOutputWithContext(ctx context.Context) InstanceGroupNamedPortTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupNamedPortTypePtrOutput)
}

// InstanceGroupNamedPortTypeArrayInput is an input type that accepts InstanceGroupNamedPortTypeArray and InstanceGroupNamedPortTypeArrayOutput values.
// You can construct a concrete instance of `InstanceGroupNamedPortTypeArrayInput` via:
//
//          InstanceGroupNamedPortTypeArray{ InstanceGroupNamedPortTypeArgs{...} }
type InstanceGroupNamedPortTypeArrayInput interface {
	pulumi.Input

	ToInstanceGroupNamedPortTypeArrayOutput() InstanceGroupNamedPortTypeArrayOutput
	ToInstanceGroupNamedPortTypeArrayOutputWithContext(context.Context) InstanceGroupNamedPortTypeArrayOutput
}

type InstanceGroupNamedPortTypeArray []InstanceGroupNamedPortTypeInput

func (InstanceGroupNamedPortTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceGroupNamedPortType)(nil)).Elem()
}

func (i InstanceGroupNamedPortTypeArray) ToInstanceGroupNamedPortTypeArrayOutput() InstanceGroupNamedPortTypeArrayOutput {
	return i.ToInstanceGroupNamedPortTypeArrayOutputWithContext(context.Background())
}

func (i InstanceGroupNamedPortTypeArray) ToInstanceGroupNamedPortTypeArrayOutputWithContext(ctx context.Context) InstanceGroupNamedPortTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupNamedPortTypeArrayOutput)
}

// InstanceGroupNamedPortTypeMapInput is an input type that accepts InstanceGroupNamedPortTypeMap and InstanceGroupNamedPortTypeMapOutput values.
// You can construct a concrete instance of `InstanceGroupNamedPortTypeMapInput` via:
//
//          InstanceGroupNamedPortTypeMap{ "key": InstanceGroupNamedPortTypeArgs{...} }
type InstanceGroupNamedPortTypeMapInput interface {
	pulumi.Input

	ToInstanceGroupNamedPortTypeMapOutput() InstanceGroupNamedPortTypeMapOutput
	ToInstanceGroupNamedPortTypeMapOutputWithContext(context.Context) InstanceGroupNamedPortTypeMapOutput
}

type InstanceGroupNamedPortTypeMap map[string]InstanceGroupNamedPortTypeInput

func (InstanceGroupNamedPortTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceGroupNamedPortType)(nil)).Elem()
}

func (i InstanceGroupNamedPortTypeMap) ToInstanceGroupNamedPortTypeMapOutput() InstanceGroupNamedPortTypeMapOutput {
	return i.ToInstanceGroupNamedPortTypeMapOutputWithContext(context.Background())
}

func (i InstanceGroupNamedPortTypeMap) ToInstanceGroupNamedPortTypeMapOutputWithContext(ctx context.Context) InstanceGroupNamedPortTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupNamedPortTypeMapOutput)
}

type InstanceGroupNamedPortTypeOutput struct{ *pulumi.OutputState }

func (InstanceGroupNamedPortTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupNamedPortType)(nil))
}

func (o InstanceGroupNamedPortTypeOutput) ToInstanceGroupNamedPortTypeOutput() InstanceGroupNamedPortTypeOutput {
	return o
}

func (o InstanceGroupNamedPortTypeOutput) ToInstanceGroupNamedPortTypeOutputWithContext(ctx context.Context) InstanceGroupNamedPortTypeOutput {
	return o
}

func (o InstanceGroupNamedPortTypeOutput) ToInstanceGroupNamedPortTypePtrOutput() InstanceGroupNamedPortTypePtrOutput {
	return o.ToInstanceGroupNamedPortTypePtrOutputWithContext(context.Background())
}

func (o InstanceGroupNamedPortTypeOutput) ToInstanceGroupNamedPortTypePtrOutputWithContext(ctx context.Context) InstanceGroupNamedPortTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceGroupNamedPortType) *InstanceGroupNamedPortType {
		return &v
	}).(InstanceGroupNamedPortTypePtrOutput)
}

type InstanceGroupNamedPortTypePtrOutput struct{ *pulumi.OutputState }

func (InstanceGroupNamedPortTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupNamedPortType)(nil))
}

func (o InstanceGroupNamedPortTypePtrOutput) ToInstanceGroupNamedPortTypePtrOutput() InstanceGroupNamedPortTypePtrOutput {
	return o
}

func (o InstanceGroupNamedPortTypePtrOutput) ToInstanceGroupNamedPortTypePtrOutputWithContext(ctx context.Context) InstanceGroupNamedPortTypePtrOutput {
	return o
}

func (o InstanceGroupNamedPortTypePtrOutput) Elem() InstanceGroupNamedPortTypeOutput {
	return o.ApplyT(func(v *InstanceGroupNamedPortType) InstanceGroupNamedPortType {
		if v != nil {
			return *v
		}
		var ret InstanceGroupNamedPortType
		return ret
	}).(InstanceGroupNamedPortTypeOutput)
}

type InstanceGroupNamedPortTypeArrayOutput struct{ *pulumi.OutputState }

func (InstanceGroupNamedPortTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupNamedPortType)(nil))
}

func (o InstanceGroupNamedPortTypeArrayOutput) ToInstanceGroupNamedPortTypeArrayOutput() InstanceGroupNamedPortTypeArrayOutput {
	return o
}

func (o InstanceGroupNamedPortTypeArrayOutput) ToInstanceGroupNamedPortTypeArrayOutputWithContext(ctx context.Context) InstanceGroupNamedPortTypeArrayOutput {
	return o
}

func (o InstanceGroupNamedPortTypeArrayOutput) Index(i pulumi.IntInput) InstanceGroupNamedPortTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceGroupNamedPortType {
		return vs[0].([]InstanceGroupNamedPortType)[vs[1].(int)]
	}).(InstanceGroupNamedPortTypeOutput)
}

type InstanceGroupNamedPortTypeMapOutput struct{ *pulumi.OutputState }

func (InstanceGroupNamedPortTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]InstanceGroupNamedPortType)(nil))
}

func (o InstanceGroupNamedPortTypeMapOutput) ToInstanceGroupNamedPortTypeMapOutput() InstanceGroupNamedPortTypeMapOutput {
	return o
}

func (o InstanceGroupNamedPortTypeMapOutput) ToInstanceGroupNamedPortTypeMapOutputWithContext(ctx context.Context) InstanceGroupNamedPortTypeMapOutput {
	return o
}

func (o InstanceGroupNamedPortTypeMapOutput) MapIndex(k pulumi.StringInput) InstanceGroupNamedPortTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) InstanceGroupNamedPortType {
		return vs[0].(map[string]InstanceGroupNamedPortType)[vs[1].(string)]
	}).(InstanceGroupNamedPortTypeOutput)
}

func init() {
	pulumi.RegisterOutputType(InstanceGroupNamedPortTypeOutput{})
	pulumi.RegisterOutputType(InstanceGroupNamedPortTypePtrOutput{})
	pulumi.RegisterOutputType(InstanceGroupNamedPortTypeArrayOutput{})
	pulumi.RegisterOutputType(InstanceGroupNamedPortTypeMapOutput{})
}
