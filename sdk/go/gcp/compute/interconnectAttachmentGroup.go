// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An interconnect attachment group resource allows customers to create,
// analyze, and expand highly available deployments.
//
// To get more information about InterconnectAttachmentGroup, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/interconnects)
// * How-to Guides
//   - [Create a Dedicated Interconnect](https://cloud.google.com/network-connectivity/docs/interconnect/concepts/dedicated-overview)
//
// ## Example Usage
//
// ### Interconnect Attachment Group Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewInterconnectAttachmentGroup(ctx, "example-interconnect-attachment-group", &compute.InterconnectAttachmentGroupArgs{
//				Name: pulumi.String("example-interconnect-attachment-group"),
//				Intent: &compute.InterconnectAttachmentGroupIntentArgs{
//					AvailabilitySla: pulumi.String("NO_SLA"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// InterconnectAttachmentGroup can be imported using any of these accepted formats:
//
// * `projects/{{project}}/global/interconnectAttachmentGroups/{{name}}`
//
// * `{{project}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, InterconnectAttachmentGroup can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:compute/interconnectAttachmentGroup:InterconnectAttachmentGroup default projects/{{project}}/global/interconnectAttachmentGroups/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/interconnectAttachmentGroup:InterconnectAttachmentGroup default {{project}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/interconnectAttachmentGroup:InterconnectAttachmentGroup default {{name}}
// ```
type InterconnectAttachmentGroup struct {
	pulumi.CustomResourceState

	// (Output)
	// URLs of any particular Attachments to explain this
	// blocker in more detail.
	Attachments InterconnectAttachmentGroupAttachmentArrayOutput `pulumi:"attachments"`
	// The redundancy this group is configured to support. The way a
	// user queries what SLA their Attachment gets is by looking at this field of
	// the Attachment's AttachmentGroup.
	// Structure is documented below.
	Configureds InterconnectAttachmentGroupConfiguredArrayOutput `pulumi:"configureds"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The user's intent for this group. This is the only required field besides
	// the name that must be specified on group creation.
	// Structure is documented below.
	Intent InterconnectAttachmentGroupIntentOutput `pulumi:"intent"`
	// The URL of an InterconnectGroup that groups these Attachments' Interconnects. Customers do not need to set this unless
	// directed by Google Support.
	InterconnectGroup pulumi.StringPtrOutput `pulumi:"interconnectGroup"`
	// An analysis of the logical layout of Attachments in this
	// group. Every Attachment in the group is shown once in this structure.
	// Structure is documented below.
	LogicalStructures InterconnectAttachmentGroupLogicalStructureArrayOutput `pulumi:"logicalStructures"`
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewInterconnectAttachmentGroup registers a new resource with the given unique name, arguments, and options.
func NewInterconnectAttachmentGroup(ctx *pulumi.Context,
	name string, args *InterconnectAttachmentGroupArgs, opts ...pulumi.ResourceOption) (*InterconnectAttachmentGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Intent == nil {
		return nil, errors.New("invalid value for required argument 'Intent'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InterconnectAttachmentGroup
	err := ctx.RegisterResource("gcp:compute/interconnectAttachmentGroup:InterconnectAttachmentGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterconnectAttachmentGroup gets an existing InterconnectAttachmentGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterconnectAttachmentGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterconnectAttachmentGroupState, opts ...pulumi.ResourceOption) (*InterconnectAttachmentGroup, error) {
	var resource InterconnectAttachmentGroup
	err := ctx.ReadResource("gcp:compute/interconnectAttachmentGroup:InterconnectAttachmentGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterconnectAttachmentGroup resources.
type interconnectAttachmentGroupState struct {
	// (Output)
	// URLs of any particular Attachments to explain this
	// blocker in more detail.
	Attachments []InterconnectAttachmentGroupAttachment `pulumi:"attachments"`
	// The redundancy this group is configured to support. The way a
	// user queries what SLA their Attachment gets is by looking at this field of
	// the Attachment's AttachmentGroup.
	// Structure is documented below.
	Configureds []InterconnectAttachmentGroupConfigured `pulumi:"configureds"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// The user's intent for this group. This is the only required field besides
	// the name that must be specified on group creation.
	// Structure is documented below.
	Intent *InterconnectAttachmentGroupIntent `pulumi:"intent"`
	// The URL of an InterconnectGroup that groups these Attachments' Interconnects. Customers do not need to set this unless
	// directed by Google Support.
	InterconnectGroup *string `pulumi:"interconnectGroup"`
	// An analysis of the logical layout of Attachments in this
	// group. Every Attachment in the group is shown once in this structure.
	// Structure is documented below.
	LogicalStructures []InterconnectAttachmentGroupLogicalStructure `pulumi:"logicalStructures"`
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

type InterconnectAttachmentGroupState struct {
	// (Output)
	// URLs of any particular Attachments to explain this
	// blocker in more detail.
	Attachments InterconnectAttachmentGroupAttachmentArrayInput
	// The redundancy this group is configured to support. The way a
	// user queries what SLA their Attachment gets is by looking at this field of
	// the Attachment's AttachmentGroup.
	// Structure is documented below.
	Configureds InterconnectAttachmentGroupConfiguredArrayInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// The user's intent for this group. This is the only required field besides
	// the name that must be specified on group creation.
	// Structure is documented below.
	Intent InterconnectAttachmentGroupIntentPtrInput
	// The URL of an InterconnectGroup that groups these Attachments' Interconnects. Customers do not need to set this unless
	// directed by Google Support.
	InterconnectGroup pulumi.StringPtrInput
	// An analysis of the logical layout of Attachments in this
	// group. Every Attachment in the group is shown once in this structure.
	// Structure is documented below.
	LogicalStructures InterconnectAttachmentGroupLogicalStructureArrayInput
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (InterconnectAttachmentGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*interconnectAttachmentGroupState)(nil)).Elem()
}

type interconnectAttachmentGroupArgs struct {
	// (Output)
	// URLs of any particular Attachments to explain this
	// blocker in more detail.
	Attachments []InterconnectAttachmentGroupAttachment `pulumi:"attachments"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// The user's intent for this group. This is the only required field besides
	// the name that must be specified on group creation.
	// Structure is documented below.
	Intent InterconnectAttachmentGroupIntent `pulumi:"intent"`
	// The URL of an InterconnectGroup that groups these Attachments' Interconnects. Customers do not need to set this unless
	// directed by Google Support.
	InterconnectGroup *string `pulumi:"interconnectGroup"`
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a InterconnectAttachmentGroup resource.
type InterconnectAttachmentGroupArgs struct {
	// (Output)
	// URLs of any particular Attachments to explain this
	// blocker in more detail.
	Attachments InterconnectAttachmentGroupAttachmentArrayInput
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// The user's intent for this group. This is the only required field besides
	// the name that must be specified on group creation.
	// Structure is documented below.
	Intent InterconnectAttachmentGroupIntentInput
	// The URL of an InterconnectGroup that groups these Attachments' Interconnects. Customers do not need to set this unless
	// directed by Google Support.
	InterconnectGroup pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (InterconnectAttachmentGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interconnectAttachmentGroupArgs)(nil)).Elem()
}

type InterconnectAttachmentGroupInput interface {
	pulumi.Input

	ToInterconnectAttachmentGroupOutput() InterconnectAttachmentGroupOutput
	ToInterconnectAttachmentGroupOutputWithContext(ctx context.Context) InterconnectAttachmentGroupOutput
}

func (*InterconnectAttachmentGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**InterconnectAttachmentGroup)(nil)).Elem()
}

func (i *InterconnectAttachmentGroup) ToInterconnectAttachmentGroupOutput() InterconnectAttachmentGroupOutput {
	return i.ToInterconnectAttachmentGroupOutputWithContext(context.Background())
}

func (i *InterconnectAttachmentGroup) ToInterconnectAttachmentGroupOutputWithContext(ctx context.Context) InterconnectAttachmentGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentGroupOutput)
}

// InterconnectAttachmentGroupArrayInput is an input type that accepts InterconnectAttachmentGroupArray and InterconnectAttachmentGroupArrayOutput values.
// You can construct a concrete instance of `InterconnectAttachmentGroupArrayInput` via:
//
//	InterconnectAttachmentGroupArray{ InterconnectAttachmentGroupArgs{...} }
type InterconnectAttachmentGroupArrayInput interface {
	pulumi.Input

	ToInterconnectAttachmentGroupArrayOutput() InterconnectAttachmentGroupArrayOutput
	ToInterconnectAttachmentGroupArrayOutputWithContext(context.Context) InterconnectAttachmentGroupArrayOutput
}

type InterconnectAttachmentGroupArray []InterconnectAttachmentGroupInput

func (InterconnectAttachmentGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterconnectAttachmentGroup)(nil)).Elem()
}

func (i InterconnectAttachmentGroupArray) ToInterconnectAttachmentGroupArrayOutput() InterconnectAttachmentGroupArrayOutput {
	return i.ToInterconnectAttachmentGroupArrayOutputWithContext(context.Background())
}

func (i InterconnectAttachmentGroupArray) ToInterconnectAttachmentGroupArrayOutputWithContext(ctx context.Context) InterconnectAttachmentGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentGroupArrayOutput)
}

// InterconnectAttachmentGroupMapInput is an input type that accepts InterconnectAttachmentGroupMap and InterconnectAttachmentGroupMapOutput values.
// You can construct a concrete instance of `InterconnectAttachmentGroupMapInput` via:
//
//	InterconnectAttachmentGroupMap{ "key": InterconnectAttachmentGroupArgs{...} }
type InterconnectAttachmentGroupMapInput interface {
	pulumi.Input

	ToInterconnectAttachmentGroupMapOutput() InterconnectAttachmentGroupMapOutput
	ToInterconnectAttachmentGroupMapOutputWithContext(context.Context) InterconnectAttachmentGroupMapOutput
}

type InterconnectAttachmentGroupMap map[string]InterconnectAttachmentGroupInput

func (InterconnectAttachmentGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterconnectAttachmentGroup)(nil)).Elem()
}

func (i InterconnectAttachmentGroupMap) ToInterconnectAttachmentGroupMapOutput() InterconnectAttachmentGroupMapOutput {
	return i.ToInterconnectAttachmentGroupMapOutputWithContext(context.Background())
}

func (i InterconnectAttachmentGroupMap) ToInterconnectAttachmentGroupMapOutputWithContext(ctx context.Context) InterconnectAttachmentGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentGroupMapOutput)
}

type InterconnectAttachmentGroupOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterconnectAttachmentGroup)(nil)).Elem()
}

func (o InterconnectAttachmentGroupOutput) ToInterconnectAttachmentGroupOutput() InterconnectAttachmentGroupOutput {
	return o
}

func (o InterconnectAttachmentGroupOutput) ToInterconnectAttachmentGroupOutputWithContext(ctx context.Context) InterconnectAttachmentGroupOutput {
	return o
}

// (Output)
// URLs of any particular Attachments to explain this
// blocker in more detail.
func (o InterconnectAttachmentGroupOutput) Attachments() InterconnectAttachmentGroupAttachmentArrayOutput {
	return o.ApplyT(func(v *InterconnectAttachmentGroup) InterconnectAttachmentGroupAttachmentArrayOutput {
		return v.Attachments
	}).(InterconnectAttachmentGroupAttachmentArrayOutput)
}

// The redundancy this group is configured to support. The way a
// user queries what SLA their Attachment gets is by looking at this field of
// the Attachment's AttachmentGroup.
// Structure is documented below.
func (o InterconnectAttachmentGroupOutput) Configureds() InterconnectAttachmentGroupConfiguredArrayOutput {
	return o.ApplyT(func(v *InterconnectAttachmentGroup) InterconnectAttachmentGroupConfiguredArrayOutput {
		return v.Configureds
	}).(InterconnectAttachmentGroupConfiguredArrayOutput)
}

// Creation timestamp in RFC3339 text format.
func (o InterconnectAttachmentGroupOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachmentGroup) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o InterconnectAttachmentGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterconnectAttachmentGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The user's intent for this group. This is the only required field besides
// the name that must be specified on group creation.
// Structure is documented below.
func (o InterconnectAttachmentGroupOutput) Intent() InterconnectAttachmentGroupIntentOutput {
	return o.ApplyT(func(v *InterconnectAttachmentGroup) InterconnectAttachmentGroupIntentOutput { return v.Intent }).(InterconnectAttachmentGroupIntentOutput)
}

// The URL of an InterconnectGroup that groups these Attachments' Interconnects. Customers do not need to set this unless
// directed by Google Support.
func (o InterconnectAttachmentGroupOutput) InterconnectGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterconnectAttachmentGroup) pulumi.StringPtrOutput { return v.InterconnectGroup }).(pulumi.StringPtrOutput)
}

// An analysis of the logical layout of Attachments in this
// group. Every Attachment in the group is shown once in this structure.
// Structure is documented below.
func (o InterconnectAttachmentGroupOutput) LogicalStructures() InterconnectAttachmentGroupLogicalStructureArrayOutput {
	return o.ApplyT(func(v *InterconnectAttachmentGroup) InterconnectAttachmentGroupLogicalStructureArrayOutput {
		return v.LogicalStructures
	}).(InterconnectAttachmentGroupLogicalStructureArrayOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be
// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
// long and match the regular expression `a-z?` which means the first
// character must be a lowercase letter, and all following characters must be a dash,
// lowercase letter, or digit, except the last character, which cannot be a dash.
func (o InterconnectAttachmentGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachmentGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o InterconnectAttachmentGroupOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *InterconnectAttachmentGroup) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type InterconnectAttachmentGroupArrayOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterconnectAttachmentGroup)(nil)).Elem()
}

func (o InterconnectAttachmentGroupArrayOutput) ToInterconnectAttachmentGroupArrayOutput() InterconnectAttachmentGroupArrayOutput {
	return o
}

func (o InterconnectAttachmentGroupArrayOutput) ToInterconnectAttachmentGroupArrayOutputWithContext(ctx context.Context) InterconnectAttachmentGroupArrayOutput {
	return o
}

func (o InterconnectAttachmentGroupArrayOutput) Index(i pulumi.IntInput) InterconnectAttachmentGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterconnectAttachmentGroup {
		return vs[0].([]*InterconnectAttachmentGroup)[vs[1].(int)]
	}).(InterconnectAttachmentGroupOutput)
}

type InterconnectAttachmentGroupMapOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterconnectAttachmentGroup)(nil)).Elem()
}

func (o InterconnectAttachmentGroupMapOutput) ToInterconnectAttachmentGroupMapOutput() InterconnectAttachmentGroupMapOutput {
	return o
}

func (o InterconnectAttachmentGroupMapOutput) ToInterconnectAttachmentGroupMapOutputWithContext(ctx context.Context) InterconnectAttachmentGroupMapOutput {
	return o
}

func (o InterconnectAttachmentGroupMapOutput) MapIndex(k pulumi.StringInput) InterconnectAttachmentGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterconnectAttachmentGroup {
		return vs[0].(map[string]*InterconnectAttachmentGroup)[vs[1].(string)]
	}).(InterconnectAttachmentGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterconnectAttachmentGroupInput)(nil)).Elem(), &InterconnectAttachmentGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterconnectAttachmentGroupArrayInput)(nil)).Elem(), InterconnectAttachmentGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterconnectAttachmentGroupMapInput)(nil)).Elem(), InterconnectAttachmentGroupMap{})
	pulumi.RegisterOutputType(InterconnectAttachmentGroupOutput{})
	pulumi.RegisterOutputType(InterconnectAttachmentGroupArrayOutput{})
	pulumi.RegisterOutputType(InterconnectAttachmentGroupMapOutput{})
}
