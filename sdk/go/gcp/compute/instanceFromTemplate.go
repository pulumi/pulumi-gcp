// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a VM instance resource within GCE. For more information see
// [the official documentation](https://cloud.google.com/compute/docs/instances)
// and
// [API](https://cloud.google.com/compute/docs/reference/latest/instances).
// 
// This resource is specifically to create a compute instance from a given
// `source_instance_template`. To create an instance without a template, use the
// `google_compute_instance` resource.
type InstanceFromTemplate struct {
	s *pulumi.ResourceState
}

// NewInstanceFromTemplate registers a new resource with the given unique name, arguments, and options.
func NewInstanceFromTemplate(ctx *pulumi.Context,
	name string, args *InstanceFromTemplateArgs, opts ...pulumi.ResourceOpt) (*InstanceFromTemplate, error) {
	if args == nil || args.SourceInstanceTemplate == nil {
		return nil, errors.New("missing required argument 'SourceInstanceTemplate'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allowStoppingForUpdate"] = nil
		inputs["attachedDisks"] = nil
		inputs["bootDisk"] = nil
		inputs["canIpForward"] = nil
		inputs["deletionProtection"] = nil
		inputs["description"] = nil
		inputs["guestAccelerators"] = nil
		inputs["hostname"] = nil
		inputs["labels"] = nil
		inputs["machineType"] = nil
		inputs["metadata"] = nil
		inputs["metadataStartupScript"] = nil
		inputs["minCpuPlatform"] = nil
		inputs["name"] = nil
		inputs["networkInterfaces"] = nil
		inputs["project"] = nil
		inputs["scheduling"] = nil
		inputs["scratchDisks"] = nil
		inputs["serviceAccount"] = nil
		inputs["sourceInstanceTemplate"] = nil
		inputs["tags"] = nil
		inputs["zone"] = nil
	} else {
		inputs["allowStoppingForUpdate"] = args.AllowStoppingForUpdate
		inputs["attachedDisks"] = args.AttachedDisks
		inputs["bootDisk"] = args.BootDisk
		inputs["canIpForward"] = args.CanIpForward
		inputs["deletionProtection"] = args.DeletionProtection
		inputs["description"] = args.Description
		inputs["guestAccelerators"] = args.GuestAccelerators
		inputs["hostname"] = args.Hostname
		inputs["labels"] = args.Labels
		inputs["machineType"] = args.MachineType
		inputs["metadata"] = args.Metadata
		inputs["metadataStartupScript"] = args.MetadataStartupScript
		inputs["minCpuPlatform"] = args.MinCpuPlatform
		inputs["name"] = args.Name
		inputs["networkInterfaces"] = args.NetworkInterfaces
		inputs["project"] = args.Project
		inputs["scheduling"] = args.Scheduling
		inputs["scratchDisks"] = args.ScratchDisks
		inputs["serviceAccount"] = args.ServiceAccount
		inputs["sourceInstanceTemplate"] = args.SourceInstanceTemplate
		inputs["tags"] = args.Tags
		inputs["zone"] = args.Zone
	}
	inputs["cpuPlatform"] = nil
	inputs["instanceId"] = nil
	inputs["labelFingerprint"] = nil
	inputs["metadataFingerprint"] = nil
	inputs["selfLink"] = nil
	inputs["tagsFingerprint"] = nil
	s, err := ctx.RegisterResource("gcp:compute/instanceFromTemplate:InstanceFromTemplate", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &InstanceFromTemplate{s: s}, nil
}

// GetInstanceFromTemplate gets an existing InstanceFromTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceFromTemplate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *InstanceFromTemplateState, opts ...pulumi.ResourceOpt) (*InstanceFromTemplate, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allowStoppingForUpdate"] = state.AllowStoppingForUpdate
		inputs["attachedDisks"] = state.AttachedDisks
		inputs["bootDisk"] = state.BootDisk
		inputs["canIpForward"] = state.CanIpForward
		inputs["cpuPlatform"] = state.CpuPlatform
		inputs["deletionProtection"] = state.DeletionProtection
		inputs["description"] = state.Description
		inputs["guestAccelerators"] = state.GuestAccelerators
		inputs["hostname"] = state.Hostname
		inputs["instanceId"] = state.InstanceId
		inputs["labelFingerprint"] = state.LabelFingerprint
		inputs["labels"] = state.Labels
		inputs["machineType"] = state.MachineType
		inputs["metadata"] = state.Metadata
		inputs["metadataFingerprint"] = state.MetadataFingerprint
		inputs["metadataStartupScript"] = state.MetadataStartupScript
		inputs["minCpuPlatform"] = state.MinCpuPlatform
		inputs["name"] = state.Name
		inputs["networkInterfaces"] = state.NetworkInterfaces
		inputs["project"] = state.Project
		inputs["scheduling"] = state.Scheduling
		inputs["scratchDisks"] = state.ScratchDisks
		inputs["selfLink"] = state.SelfLink
		inputs["serviceAccount"] = state.ServiceAccount
		inputs["sourceInstanceTemplate"] = state.SourceInstanceTemplate
		inputs["tags"] = state.Tags
		inputs["tagsFingerprint"] = state.TagsFingerprint
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("gcp:compute/instanceFromTemplate:InstanceFromTemplate", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &InstanceFromTemplate{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *InstanceFromTemplate) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *InstanceFromTemplate) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *InstanceFromTemplate) AllowStoppingForUpdate() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["allowStoppingForUpdate"])
}

func (r *InstanceFromTemplate) AttachedDisks() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["attachedDisks"])
}

func (r *InstanceFromTemplate) BootDisk() *pulumi.Output {
	return r.s.State["bootDisk"]
}

func (r *InstanceFromTemplate) CanIpForward() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["canIpForward"])
}

func (r *InstanceFromTemplate) CpuPlatform() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cpuPlatform"])
}

func (r *InstanceFromTemplate) DeletionProtection() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["deletionProtection"])
}

func (r *InstanceFromTemplate) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *InstanceFromTemplate) GuestAccelerators() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["guestAccelerators"])
}

func (r *InstanceFromTemplate) Hostname() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hostname"])
}

func (r *InstanceFromTemplate) InstanceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceId"])
}

func (r *InstanceFromTemplate) LabelFingerprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["labelFingerprint"])
}

func (r *InstanceFromTemplate) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

func (r *InstanceFromTemplate) MachineType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["machineType"])
}

func (r *InstanceFromTemplate) Metadata() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["metadata"])
}

func (r *InstanceFromTemplate) MetadataFingerprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["metadataFingerprint"])
}

func (r *InstanceFromTemplate) MetadataStartupScript() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["metadataStartupScript"])
}

func (r *InstanceFromTemplate) MinCpuPlatform() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["minCpuPlatform"])
}

// A unique name for the resource, required by GCE.
// Changing this forces a new resource to be created.
func (r *InstanceFromTemplate) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *InstanceFromTemplate) NetworkInterfaces() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["networkInterfaces"])
}

func (r *InstanceFromTemplate) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *InstanceFromTemplate) Scheduling() *pulumi.Output {
	return r.s.State["scheduling"]
}

func (r *InstanceFromTemplate) ScratchDisks() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["scratchDisks"])
}

func (r *InstanceFromTemplate) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

func (r *InstanceFromTemplate) ServiceAccount() *pulumi.Output {
	return r.s.State["serviceAccount"]
}

// Name or self link of an instance
// template to create the instance based on.
func (r *InstanceFromTemplate) SourceInstanceTemplate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceInstanceTemplate"])
}

func (r *InstanceFromTemplate) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

func (r *InstanceFromTemplate) TagsFingerprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tagsFingerprint"])
}

// The zone that the machine should be created in. If not
// set, the provider zone is used.
func (r *InstanceFromTemplate) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering InstanceFromTemplate resources.
type InstanceFromTemplateState struct {
	AllowStoppingForUpdate interface{}
	AttachedDisks interface{}
	BootDisk interface{}
	CanIpForward interface{}
	CpuPlatform interface{}
	DeletionProtection interface{}
	Description interface{}
	GuestAccelerators interface{}
	Hostname interface{}
	InstanceId interface{}
	LabelFingerprint interface{}
	Labels interface{}
	MachineType interface{}
	Metadata interface{}
	MetadataFingerprint interface{}
	MetadataStartupScript interface{}
	MinCpuPlatform interface{}
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name interface{}
	NetworkInterfaces interface{}
	Project interface{}
	Scheduling interface{}
	ScratchDisks interface{}
	SelfLink interface{}
	ServiceAccount interface{}
	// Name or self link of an instance
	// template to create the instance based on.
	SourceInstanceTemplate interface{}
	Tags interface{}
	TagsFingerprint interface{}
	// The zone that the machine should be created in. If not
	// set, the provider zone is used.
	Zone interface{}
}

// The set of arguments for constructing a InstanceFromTemplate resource.
type InstanceFromTemplateArgs struct {
	AllowStoppingForUpdate interface{}
	AttachedDisks interface{}
	BootDisk interface{}
	CanIpForward interface{}
	DeletionProtection interface{}
	Description interface{}
	GuestAccelerators interface{}
	Hostname interface{}
	Labels interface{}
	MachineType interface{}
	Metadata interface{}
	MetadataStartupScript interface{}
	MinCpuPlatform interface{}
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name interface{}
	NetworkInterfaces interface{}
	Project interface{}
	Scheduling interface{}
	ScratchDisks interface{}
	ServiceAccount interface{}
	// Name or self link of an instance
	// template to create the instance based on.
	SourceInstanceTemplate interface{}
	Tags interface{}
	// The zone that the machine should be created in. If not
	// set, the provider zone is used.
	Zone interface{}
}
