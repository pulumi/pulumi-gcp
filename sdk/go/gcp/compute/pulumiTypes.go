// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AutoscalarAutoscalingPolicy struct {
	// The number of seconds that the autoscaler should wait before it
	// starts collecting information from a new instance. This prevents
	// the autoscaler from collecting information when the instance is
	// initializing, during which the collected usage would not be
	// reliable. The default time autoscaler waits is 60 seconds.
	// Virtual machine initialization times might vary because of
	// numerous factors. We recommend that you test how long an
	// instance may take to initialize. To do this, create an instance
	// and time the startup process.
	CooldownPeriod *int `pulumi:"cooldownPeriod"`
	// Defines the CPU utilization policy that allows the autoscaler to
	// scale based on the average CPU utilization of a managed instance
	// group.  Structure is documented below.
	CpuUtilization *AutoscalarAutoscalingPolicyCpuUtilization `pulumi:"cpuUtilization"`
	// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
	LoadBalancingUtilization *AutoscalarAutoscalingPolicyLoadBalancingUtilization `pulumi:"loadBalancingUtilization"`
	// The maximum number of instances that the autoscaler can scale up
	// to. This is required when creating or updating an autoscaler. The
	// maximum number of replicas should not be lower than minimal number
	// of replicas.
	MaxReplicas int `pulumi:"maxReplicas"`
	// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
	Metrics []AutoscalarAutoscalingPolicyMetric `pulumi:"metrics"`
	// The minimum number of replicas that the autoscaler can scale down
	// to. This cannot be less than 0. If not provided, autoscaler will
	// choose a default value depending on maximum number of instances
	// allowed.
	MinReplicas int `pulumi:"minReplicas"`
}

// AutoscalarAutoscalingPolicyInput is an input type that accepts AutoscalarAutoscalingPolicyArgs and AutoscalarAutoscalingPolicyOutput values.
// You can construct a concrete instance of `AutoscalarAutoscalingPolicyInput` via:
//
// 		 AutoscalarAutoscalingPolicyArgs{...}
//
type AutoscalarAutoscalingPolicyInput interface {
	pulumi.Input

	ToAutoscalarAutoscalingPolicyOutput() AutoscalarAutoscalingPolicyOutput
	ToAutoscalarAutoscalingPolicyOutputWithContext(context.Context) AutoscalarAutoscalingPolicyOutput
}

type AutoscalarAutoscalingPolicyArgs struct {
	// The number of seconds that the autoscaler should wait before it
	// starts collecting information from a new instance. This prevents
	// the autoscaler from collecting information when the instance is
	// initializing, during which the collected usage would not be
	// reliable. The default time autoscaler waits is 60 seconds.
	// Virtual machine initialization times might vary because of
	// numerous factors. We recommend that you test how long an
	// instance may take to initialize. To do this, create an instance
	// and time the startup process.
	CooldownPeriod pulumi.IntPtrInput `pulumi:"cooldownPeriod"`
	// Defines the CPU utilization policy that allows the autoscaler to
	// scale based on the average CPU utilization of a managed instance
	// group.  Structure is documented below.
	CpuUtilization AutoscalarAutoscalingPolicyCpuUtilizationPtrInput `pulumi:"cpuUtilization"`
	// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
	LoadBalancingUtilization AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrInput `pulumi:"loadBalancingUtilization"`
	// The maximum number of instances that the autoscaler can scale up
	// to. This is required when creating or updating an autoscaler. The
	// maximum number of replicas should not be lower than minimal number
	// of replicas.
	MaxReplicas pulumi.IntInput `pulumi:"maxReplicas"`
	// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
	Metrics AutoscalarAutoscalingPolicyMetricArrayInput `pulumi:"metrics"`
	// The minimum number of replicas that the autoscaler can scale down
	// to. This cannot be less than 0. If not provided, autoscaler will
	// choose a default value depending on maximum number of instances
	// allowed.
	MinReplicas pulumi.IntInput `pulumi:"minReplicas"`
}

func (AutoscalarAutoscalingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalarAutoscalingPolicy)(nil)).Elem()
}

func (i AutoscalarAutoscalingPolicyArgs) ToAutoscalarAutoscalingPolicyOutput() AutoscalarAutoscalingPolicyOutput {
	return i.ToAutoscalarAutoscalingPolicyOutputWithContext(context.Background())
}

func (i AutoscalarAutoscalingPolicyArgs) ToAutoscalarAutoscalingPolicyOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalarAutoscalingPolicyOutput)
}

func (i AutoscalarAutoscalingPolicyArgs) ToAutoscalarAutoscalingPolicyPtrOutput() AutoscalarAutoscalingPolicyPtrOutput {
	return i.ToAutoscalarAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (i AutoscalarAutoscalingPolicyArgs) ToAutoscalarAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalarAutoscalingPolicyOutput).ToAutoscalarAutoscalingPolicyPtrOutputWithContext(ctx)
}

// AutoscalarAutoscalingPolicyPtrInput is an input type that accepts AutoscalarAutoscalingPolicyArgs, AutoscalarAutoscalingPolicyPtr and AutoscalarAutoscalingPolicyPtrOutput values.
// You can construct a concrete instance of `AutoscalarAutoscalingPolicyPtrInput` via:
//
// 		 AutoscalarAutoscalingPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type AutoscalarAutoscalingPolicyPtrInput interface {
	pulumi.Input

	ToAutoscalarAutoscalingPolicyPtrOutput() AutoscalarAutoscalingPolicyPtrOutput
	ToAutoscalarAutoscalingPolicyPtrOutputWithContext(context.Context) AutoscalarAutoscalingPolicyPtrOutput
}

type autoscalarAutoscalingPolicyPtrType AutoscalarAutoscalingPolicyArgs

func AutoscalarAutoscalingPolicyPtr(v *AutoscalarAutoscalingPolicyArgs) AutoscalarAutoscalingPolicyPtrInput {
	return (*autoscalarAutoscalingPolicyPtrType)(v)
}

func (*autoscalarAutoscalingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalarAutoscalingPolicy)(nil)).Elem()
}

func (i *autoscalarAutoscalingPolicyPtrType) ToAutoscalarAutoscalingPolicyPtrOutput() AutoscalarAutoscalingPolicyPtrOutput {
	return i.ToAutoscalarAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (i *autoscalarAutoscalingPolicyPtrType) ToAutoscalarAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalarAutoscalingPolicyPtrOutput)
}

type AutoscalarAutoscalingPolicyOutput struct{ *pulumi.OutputState }

func (AutoscalarAutoscalingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalarAutoscalingPolicy)(nil)).Elem()
}

func (o AutoscalarAutoscalingPolicyOutput) ToAutoscalarAutoscalingPolicyOutput() AutoscalarAutoscalingPolicyOutput {
	return o
}

func (o AutoscalarAutoscalingPolicyOutput) ToAutoscalarAutoscalingPolicyOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyOutput {
	return o
}

func (o AutoscalarAutoscalingPolicyOutput) ToAutoscalarAutoscalingPolicyPtrOutput() AutoscalarAutoscalingPolicyPtrOutput {
	return o.ToAutoscalarAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (o AutoscalarAutoscalingPolicyOutput) ToAutoscalarAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyPtrOutput {
	return o.ApplyT(func(v AutoscalarAutoscalingPolicy) *AutoscalarAutoscalingPolicy {
		return &v
	}).(AutoscalarAutoscalingPolicyPtrOutput)
}

// The number of seconds that the autoscaler should wait before it
// starts collecting information from a new instance. This prevents
// the autoscaler from collecting information when the instance is
// initializing, during which the collected usage would not be
// reliable. The default time autoscaler waits is 60 seconds.
// Virtual machine initialization times might vary because of
// numerous factors. We recommend that you test how long an
// instance may take to initialize. To do this, create an instance
// and time the startup process.
func (o AutoscalarAutoscalingPolicyOutput) CooldownPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscalarAutoscalingPolicy) *int { return v.CooldownPeriod }).(pulumi.IntPtrOutput)
}

// Defines the CPU utilization policy that allows the autoscaler to
// scale based on the average CPU utilization of a managed instance
// group.  Structure is documented below.
func (o AutoscalarAutoscalingPolicyOutput) CpuUtilization() AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput {
	return o.ApplyT(func(v AutoscalarAutoscalingPolicy) *AutoscalarAutoscalingPolicyCpuUtilization {
		return v.CpuUtilization
	}).(AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput)
}

// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
func (o AutoscalarAutoscalingPolicyOutput) LoadBalancingUtilization() AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o.ApplyT(func(v AutoscalarAutoscalingPolicy) *AutoscalarAutoscalingPolicyLoadBalancingUtilization {
		return v.LoadBalancingUtilization
	}).(AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput)
}

// The maximum number of instances that the autoscaler can scale up
// to. This is required when creating or updating an autoscaler. The
// maximum number of replicas should not be lower than minimal number
// of replicas.
func (o AutoscalarAutoscalingPolicyOutput) MaxReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalarAutoscalingPolicy) int { return v.MaxReplicas }).(pulumi.IntOutput)
}

// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
func (o AutoscalarAutoscalingPolicyOutput) Metrics() AutoscalarAutoscalingPolicyMetricArrayOutput {
	return o.ApplyT(func(v AutoscalarAutoscalingPolicy) []AutoscalarAutoscalingPolicyMetric { return v.Metrics }).(AutoscalarAutoscalingPolicyMetricArrayOutput)
}

// The minimum number of replicas that the autoscaler can scale down
// to. This cannot be less than 0. If not provided, autoscaler will
// choose a default value depending on maximum number of instances
// allowed.
func (o AutoscalarAutoscalingPolicyOutput) MinReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalarAutoscalingPolicy) int { return v.MinReplicas }).(pulumi.IntOutput)
}

type AutoscalarAutoscalingPolicyPtrOutput struct{ *pulumi.OutputState }

func (AutoscalarAutoscalingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalarAutoscalingPolicy)(nil)).Elem()
}

func (o AutoscalarAutoscalingPolicyPtrOutput) ToAutoscalarAutoscalingPolicyPtrOutput() AutoscalarAutoscalingPolicyPtrOutput {
	return o
}

func (o AutoscalarAutoscalingPolicyPtrOutput) ToAutoscalarAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyPtrOutput {
	return o
}

func (o AutoscalarAutoscalingPolicyPtrOutput) Elem() AutoscalarAutoscalingPolicyOutput {
	return o.ApplyT(func(v *AutoscalarAutoscalingPolicy) AutoscalarAutoscalingPolicy { return *v }).(AutoscalarAutoscalingPolicyOutput)
}

// The number of seconds that the autoscaler should wait before it
// starts collecting information from a new instance. This prevents
// the autoscaler from collecting information when the instance is
// initializing, during which the collected usage would not be
// reliable. The default time autoscaler waits is 60 seconds.
// Virtual machine initialization times might vary because of
// numerous factors. We recommend that you test how long an
// instance may take to initialize. To do this, create an instance
// and time the startup process.
func (o AutoscalarAutoscalingPolicyPtrOutput) CooldownPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalarAutoscalingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.CooldownPeriod
	}).(pulumi.IntPtrOutput)
}

// Defines the CPU utilization policy that allows the autoscaler to
// scale based on the average CPU utilization of a managed instance
// group.  Structure is documented below.
func (o AutoscalarAutoscalingPolicyPtrOutput) CpuUtilization() AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput {
	return o.ApplyT(func(v *AutoscalarAutoscalingPolicy) *AutoscalarAutoscalingPolicyCpuUtilization {
		if v == nil {
			return nil
		}
		return v.CpuUtilization
	}).(AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput)
}

// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
func (o AutoscalarAutoscalingPolicyPtrOutput) LoadBalancingUtilization() AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o.ApplyT(func(v *AutoscalarAutoscalingPolicy) *AutoscalarAutoscalingPolicyLoadBalancingUtilization {
		if v == nil {
			return nil
		}
		return v.LoadBalancingUtilization
	}).(AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput)
}

// The maximum number of instances that the autoscaler can scale up
// to. This is required when creating or updating an autoscaler. The
// maximum number of replicas should not be lower than minimal number
// of replicas.
func (o AutoscalarAutoscalingPolicyPtrOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalarAutoscalingPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MaxReplicas
	}).(pulumi.IntPtrOutput)
}

// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
func (o AutoscalarAutoscalingPolicyPtrOutput) Metrics() AutoscalarAutoscalingPolicyMetricArrayOutput {
	return o.ApplyT(func(v *AutoscalarAutoscalingPolicy) []AutoscalarAutoscalingPolicyMetric {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(AutoscalarAutoscalingPolicyMetricArrayOutput)
}

// The minimum number of replicas that the autoscaler can scale down
// to. This cannot be less than 0. If not provided, autoscaler will
// choose a default value depending on maximum number of instances
// allowed.
func (o AutoscalarAutoscalingPolicyPtrOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalarAutoscalingPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MinReplicas
	}).(pulumi.IntPtrOutput)
}

type AutoscalarAutoscalingPolicyCpuUtilization struct {
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target float64 `pulumi:"target"`
}

// AutoscalarAutoscalingPolicyCpuUtilizationInput is an input type that accepts AutoscalarAutoscalingPolicyCpuUtilizationArgs and AutoscalarAutoscalingPolicyCpuUtilizationOutput values.
// You can construct a concrete instance of `AutoscalarAutoscalingPolicyCpuUtilizationInput` via:
//
// 		 AutoscalarAutoscalingPolicyCpuUtilizationArgs{...}
//
type AutoscalarAutoscalingPolicyCpuUtilizationInput interface {
	pulumi.Input

	ToAutoscalarAutoscalingPolicyCpuUtilizationOutput() AutoscalarAutoscalingPolicyCpuUtilizationOutput
	ToAutoscalarAutoscalingPolicyCpuUtilizationOutputWithContext(context.Context) AutoscalarAutoscalingPolicyCpuUtilizationOutput
}

type AutoscalarAutoscalingPolicyCpuUtilizationArgs struct {
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target pulumi.Float64Input `pulumi:"target"`
}

func (AutoscalarAutoscalingPolicyCpuUtilizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalarAutoscalingPolicyCpuUtilization)(nil)).Elem()
}

func (i AutoscalarAutoscalingPolicyCpuUtilizationArgs) ToAutoscalarAutoscalingPolicyCpuUtilizationOutput() AutoscalarAutoscalingPolicyCpuUtilizationOutput {
	return i.ToAutoscalarAutoscalingPolicyCpuUtilizationOutputWithContext(context.Background())
}

func (i AutoscalarAutoscalingPolicyCpuUtilizationArgs) ToAutoscalarAutoscalingPolicyCpuUtilizationOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyCpuUtilizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalarAutoscalingPolicyCpuUtilizationOutput)
}

func (i AutoscalarAutoscalingPolicyCpuUtilizationArgs) ToAutoscalarAutoscalingPolicyCpuUtilizationPtrOutput() AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput {
	return i.ToAutoscalarAutoscalingPolicyCpuUtilizationPtrOutputWithContext(context.Background())
}

func (i AutoscalarAutoscalingPolicyCpuUtilizationArgs) ToAutoscalarAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalarAutoscalingPolicyCpuUtilizationOutput).ToAutoscalarAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx)
}

// AutoscalarAutoscalingPolicyCpuUtilizationPtrInput is an input type that accepts AutoscalarAutoscalingPolicyCpuUtilizationArgs, AutoscalarAutoscalingPolicyCpuUtilizationPtr and AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput values.
// You can construct a concrete instance of `AutoscalarAutoscalingPolicyCpuUtilizationPtrInput` via:
//
// 		 AutoscalarAutoscalingPolicyCpuUtilizationArgs{...}
//
//  or:
//
// 		 nil
//
type AutoscalarAutoscalingPolicyCpuUtilizationPtrInput interface {
	pulumi.Input

	ToAutoscalarAutoscalingPolicyCpuUtilizationPtrOutput() AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput
	ToAutoscalarAutoscalingPolicyCpuUtilizationPtrOutputWithContext(context.Context) AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput
}

type autoscalarAutoscalingPolicyCpuUtilizationPtrType AutoscalarAutoscalingPolicyCpuUtilizationArgs

func AutoscalarAutoscalingPolicyCpuUtilizationPtr(v *AutoscalarAutoscalingPolicyCpuUtilizationArgs) AutoscalarAutoscalingPolicyCpuUtilizationPtrInput {
	return (*autoscalarAutoscalingPolicyCpuUtilizationPtrType)(v)
}

func (*autoscalarAutoscalingPolicyCpuUtilizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalarAutoscalingPolicyCpuUtilization)(nil)).Elem()
}

func (i *autoscalarAutoscalingPolicyCpuUtilizationPtrType) ToAutoscalarAutoscalingPolicyCpuUtilizationPtrOutput() AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput {
	return i.ToAutoscalarAutoscalingPolicyCpuUtilizationPtrOutputWithContext(context.Background())
}

func (i *autoscalarAutoscalingPolicyCpuUtilizationPtrType) ToAutoscalarAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput)
}

type AutoscalarAutoscalingPolicyCpuUtilizationOutput struct{ *pulumi.OutputState }

func (AutoscalarAutoscalingPolicyCpuUtilizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalarAutoscalingPolicyCpuUtilization)(nil)).Elem()
}

func (o AutoscalarAutoscalingPolicyCpuUtilizationOutput) ToAutoscalarAutoscalingPolicyCpuUtilizationOutput() AutoscalarAutoscalingPolicyCpuUtilizationOutput {
	return o
}

func (o AutoscalarAutoscalingPolicyCpuUtilizationOutput) ToAutoscalarAutoscalingPolicyCpuUtilizationOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyCpuUtilizationOutput {
	return o
}

func (o AutoscalarAutoscalingPolicyCpuUtilizationOutput) ToAutoscalarAutoscalingPolicyCpuUtilizationPtrOutput() AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput {
	return o.ToAutoscalarAutoscalingPolicyCpuUtilizationPtrOutputWithContext(context.Background())
}

func (o AutoscalarAutoscalingPolicyCpuUtilizationOutput) ToAutoscalarAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput {
	return o.ApplyT(func(v AutoscalarAutoscalingPolicyCpuUtilization) *AutoscalarAutoscalingPolicyCpuUtilization {
		return &v
	}).(AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput)
}

// Fraction of backend capacity utilization (set in HTTP(s) load
// balancing configuration) that autoscaler should maintain. Must
// be a positive float value. If not defined, the default is 0.8.
func (o AutoscalarAutoscalingPolicyCpuUtilizationOutput) Target() pulumi.Float64Output {
	return o.ApplyT(func(v AutoscalarAutoscalingPolicyCpuUtilization) float64 { return v.Target }).(pulumi.Float64Output)
}

type AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput struct{ *pulumi.OutputState }

func (AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalarAutoscalingPolicyCpuUtilization)(nil)).Elem()
}

func (o AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput) ToAutoscalarAutoscalingPolicyCpuUtilizationPtrOutput() AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput {
	return o
}

func (o AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput) ToAutoscalarAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput {
	return o
}

func (o AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput) Elem() AutoscalarAutoscalingPolicyCpuUtilizationOutput {
	return o.ApplyT(func(v *AutoscalarAutoscalingPolicyCpuUtilization) AutoscalarAutoscalingPolicyCpuUtilization {
		return *v
	}).(AutoscalarAutoscalingPolicyCpuUtilizationOutput)
}

// Fraction of backend capacity utilization (set in HTTP(s) load
// balancing configuration) that autoscaler should maintain. Must
// be a positive float value. If not defined, the default is 0.8.
func (o AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput) Target() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AutoscalarAutoscalingPolicyCpuUtilization) *float64 {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(pulumi.Float64PtrOutput)
}

type AutoscalarAutoscalingPolicyLoadBalancingUtilization struct {
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target float64 `pulumi:"target"`
}

// AutoscalarAutoscalingPolicyLoadBalancingUtilizationInput is an input type that accepts AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs and AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput values.
// You can construct a concrete instance of `AutoscalarAutoscalingPolicyLoadBalancingUtilizationInput` via:
//
// 		 AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs{...}
//
type AutoscalarAutoscalingPolicyLoadBalancingUtilizationInput interface {
	pulumi.Input

	ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput() AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput
	ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationOutputWithContext(context.Context) AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput
}

type AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs struct {
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target pulumi.Float64Input `pulumi:"target"`
}

func (AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalarAutoscalingPolicyLoadBalancingUtilization)(nil)).Elem()
}

func (i AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs) ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput() AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput {
	return i.ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationOutputWithContext(context.Background())
}

func (i AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs) ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput)
}

func (i AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs) ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput() AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return i.ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(context.Background())
}

func (i AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs) ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput).ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx)
}

// AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrInput is an input type that accepts AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs, AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtr and AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput values.
// You can construct a concrete instance of `AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrInput` via:
//
// 		 AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs{...}
//
//  or:
//
// 		 nil
//
type AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrInput interface {
	pulumi.Input

	ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput() AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput
	ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(context.Context) AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput
}

type autoscalarAutoscalingPolicyLoadBalancingUtilizationPtrType AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs

func AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtr(v *AutoscalarAutoscalingPolicyLoadBalancingUtilizationArgs) AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrInput {
	return (*autoscalarAutoscalingPolicyLoadBalancingUtilizationPtrType)(v)
}

func (*autoscalarAutoscalingPolicyLoadBalancingUtilizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalarAutoscalingPolicyLoadBalancingUtilization)(nil)).Elem()
}

func (i *autoscalarAutoscalingPolicyLoadBalancingUtilizationPtrType) ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput() AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return i.ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(context.Background())
}

func (i *autoscalarAutoscalingPolicyLoadBalancingUtilizationPtrType) ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput)
}

type AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput struct{ *pulumi.OutputState }

func (AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalarAutoscalingPolicyLoadBalancingUtilization)(nil)).Elem()
}

func (o AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput) ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput() AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput {
	return o
}

func (o AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput) ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput {
	return o
}

func (o AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput) ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput() AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o.ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(context.Background())
}

func (o AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput) ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o.ApplyT(func(v AutoscalarAutoscalingPolicyLoadBalancingUtilization) *AutoscalarAutoscalingPolicyLoadBalancingUtilization {
		return &v
	}).(AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput)
}

// Fraction of backend capacity utilization (set in HTTP(s) load
// balancing configuration) that autoscaler should maintain. Must
// be a positive float value. If not defined, the default is 0.8.
func (o AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput) Target() pulumi.Float64Output {
	return o.ApplyT(func(v AutoscalarAutoscalingPolicyLoadBalancingUtilization) float64 { return v.Target }).(pulumi.Float64Output)
}

type AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput struct{ *pulumi.OutputState }

func (AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalarAutoscalingPolicyLoadBalancingUtilization)(nil)).Elem()
}

func (o AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput) ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput() AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o
}

func (o AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput) ToAutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o
}

func (o AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput) Elem() AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput {
	return o.ApplyT(func(v *AutoscalarAutoscalingPolicyLoadBalancingUtilization) AutoscalarAutoscalingPolicyLoadBalancingUtilization {
		return *v
	}).(AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput)
}

// Fraction of backend capacity utilization (set in HTTP(s) load
// balancing configuration) that autoscaler should maintain. Must
// be a positive float value. If not defined, the default is 0.8.
func (o AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput) Target() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AutoscalarAutoscalingPolicyLoadBalancingUtilization) *float64 {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(pulumi.Float64PtrOutput)
}

type AutoscalarAutoscalingPolicyMetric struct {
	Filter *string `pulumi:"filter"`
	// The identifier (type) of the Stackdriver Monitoring metric.
	// The metric cannot have negative values.
	// The metric must have a value type of INT64 or DOUBLE.
	Name                     string   `pulumi:"name"`
	SingleInstanceAssignment *float64 `pulumi:"singleInstanceAssignment"`
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target *float64 `pulumi:"target"`
	// Defines how target utilization value is expressed for a
	// Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND,
	// or DELTA_PER_MINUTE.
	Type *string `pulumi:"type"`
}

// AutoscalarAutoscalingPolicyMetricInput is an input type that accepts AutoscalarAutoscalingPolicyMetricArgs and AutoscalarAutoscalingPolicyMetricOutput values.
// You can construct a concrete instance of `AutoscalarAutoscalingPolicyMetricInput` via:
//
// 		 AutoscalarAutoscalingPolicyMetricArgs{...}
//
type AutoscalarAutoscalingPolicyMetricInput interface {
	pulumi.Input

	ToAutoscalarAutoscalingPolicyMetricOutput() AutoscalarAutoscalingPolicyMetricOutput
	ToAutoscalarAutoscalingPolicyMetricOutputWithContext(context.Context) AutoscalarAutoscalingPolicyMetricOutput
}

type AutoscalarAutoscalingPolicyMetricArgs struct {
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// The identifier (type) of the Stackdriver Monitoring metric.
	// The metric cannot have negative values.
	// The metric must have a value type of INT64 or DOUBLE.
	Name                     pulumi.StringInput     `pulumi:"name"`
	SingleInstanceAssignment pulumi.Float64PtrInput `pulumi:"singleInstanceAssignment"`
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target pulumi.Float64PtrInput `pulumi:"target"`
	// Defines how target utilization value is expressed for a
	// Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND,
	// or DELTA_PER_MINUTE.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (AutoscalarAutoscalingPolicyMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalarAutoscalingPolicyMetric)(nil)).Elem()
}

func (i AutoscalarAutoscalingPolicyMetricArgs) ToAutoscalarAutoscalingPolicyMetricOutput() AutoscalarAutoscalingPolicyMetricOutput {
	return i.ToAutoscalarAutoscalingPolicyMetricOutputWithContext(context.Background())
}

func (i AutoscalarAutoscalingPolicyMetricArgs) ToAutoscalarAutoscalingPolicyMetricOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalarAutoscalingPolicyMetricOutput)
}

// AutoscalarAutoscalingPolicyMetricArrayInput is an input type that accepts AutoscalarAutoscalingPolicyMetricArray and AutoscalarAutoscalingPolicyMetricArrayOutput values.
// You can construct a concrete instance of `AutoscalarAutoscalingPolicyMetricArrayInput` via:
//
// 		 AutoscalarAutoscalingPolicyMetricArray{ AutoscalarAutoscalingPolicyMetricArgs{...} }
//
type AutoscalarAutoscalingPolicyMetricArrayInput interface {
	pulumi.Input

	ToAutoscalarAutoscalingPolicyMetricArrayOutput() AutoscalarAutoscalingPolicyMetricArrayOutput
	ToAutoscalarAutoscalingPolicyMetricArrayOutputWithContext(context.Context) AutoscalarAutoscalingPolicyMetricArrayOutput
}

type AutoscalarAutoscalingPolicyMetricArray []AutoscalarAutoscalingPolicyMetricInput

func (AutoscalarAutoscalingPolicyMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscalarAutoscalingPolicyMetric)(nil)).Elem()
}

func (i AutoscalarAutoscalingPolicyMetricArray) ToAutoscalarAutoscalingPolicyMetricArrayOutput() AutoscalarAutoscalingPolicyMetricArrayOutput {
	return i.ToAutoscalarAutoscalingPolicyMetricArrayOutputWithContext(context.Background())
}

func (i AutoscalarAutoscalingPolicyMetricArray) ToAutoscalarAutoscalingPolicyMetricArrayOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalarAutoscalingPolicyMetricArrayOutput)
}

type AutoscalarAutoscalingPolicyMetricOutput struct{ *pulumi.OutputState }

func (AutoscalarAutoscalingPolicyMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalarAutoscalingPolicyMetric)(nil)).Elem()
}

func (o AutoscalarAutoscalingPolicyMetricOutput) ToAutoscalarAutoscalingPolicyMetricOutput() AutoscalarAutoscalingPolicyMetricOutput {
	return o
}

func (o AutoscalarAutoscalingPolicyMetricOutput) ToAutoscalarAutoscalingPolicyMetricOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyMetricOutput {
	return o
}

func (o AutoscalarAutoscalingPolicyMetricOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscalarAutoscalingPolicyMetric) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// The identifier (type) of the Stackdriver Monitoring metric.
// The metric cannot have negative values.
// The metric must have a value type of INT64 or DOUBLE.
func (o AutoscalarAutoscalingPolicyMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscalarAutoscalingPolicyMetric) string { return v.Name }).(pulumi.StringOutput)
}

func (o AutoscalarAutoscalingPolicyMetricOutput) SingleInstanceAssignment() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AutoscalarAutoscalingPolicyMetric) *float64 { return v.SingleInstanceAssignment }).(pulumi.Float64PtrOutput)
}

// Fraction of backend capacity utilization (set in HTTP(s) load
// balancing configuration) that autoscaler should maintain. Must
// be a positive float value. If not defined, the default is 0.8.
func (o AutoscalarAutoscalingPolicyMetricOutput) Target() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AutoscalarAutoscalingPolicyMetric) *float64 { return v.Target }).(pulumi.Float64PtrOutput)
}

// Defines how target utilization value is expressed for a
// Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND,
// or DELTA_PER_MINUTE.
func (o AutoscalarAutoscalingPolicyMetricOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscalarAutoscalingPolicyMetric) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AutoscalarAutoscalingPolicyMetricArrayOutput struct{ *pulumi.OutputState }

func (AutoscalarAutoscalingPolicyMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscalarAutoscalingPolicyMetric)(nil)).Elem()
}

func (o AutoscalarAutoscalingPolicyMetricArrayOutput) ToAutoscalarAutoscalingPolicyMetricArrayOutput() AutoscalarAutoscalingPolicyMetricArrayOutput {
	return o
}

func (o AutoscalarAutoscalingPolicyMetricArrayOutput) ToAutoscalarAutoscalingPolicyMetricArrayOutputWithContext(ctx context.Context) AutoscalarAutoscalingPolicyMetricArrayOutput {
	return o
}

func (o AutoscalarAutoscalingPolicyMetricArrayOutput) Index(i pulumi.IntInput) AutoscalarAutoscalingPolicyMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscalarAutoscalingPolicyMetric {
		return vs[0].([]AutoscalarAutoscalingPolicyMetric)[vs[1].(int)]
	}).(AutoscalarAutoscalingPolicyMetricOutput)
}

type AutoscalerAutoscalingPolicy struct {
	// The number of seconds that the autoscaler should wait before it
	// starts collecting information from a new instance. This prevents
	// the autoscaler from collecting information when the instance is
	// initializing, during which the collected usage would not be
	// reliable. The default time autoscaler waits is 60 seconds.
	// Virtual machine initialization times might vary because of
	// numerous factors. We recommend that you test how long an
	// instance may take to initialize. To do this, create an instance
	// and time the startup process.
	CooldownPeriod *int `pulumi:"cooldownPeriod"`
	// Defines the CPU utilization policy that allows the autoscaler to
	// scale based on the average CPU utilization of a managed instance
	// group.  Structure is documented below.
	CpuUtilization *AutoscalerAutoscalingPolicyCpuUtilization `pulumi:"cpuUtilization"`
	// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
	LoadBalancingUtilization *AutoscalerAutoscalingPolicyLoadBalancingUtilization `pulumi:"loadBalancingUtilization"`
	// The maximum number of instances that the autoscaler can scale up
	// to. This is required when creating or updating an autoscaler. The
	// maximum number of replicas should not be lower than minimal number
	// of replicas.
	MaxReplicas int `pulumi:"maxReplicas"`
	// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
	Metrics []AutoscalerAutoscalingPolicyMetric `pulumi:"metrics"`
	// The minimum number of replicas that the autoscaler can scale down
	// to. This cannot be less than 0. If not provided, autoscaler will
	// choose a default value depending on maximum number of instances
	// allowed.
	MinReplicas int `pulumi:"minReplicas"`
}

// AutoscalerAutoscalingPolicyInput is an input type that accepts AutoscalerAutoscalingPolicyArgs and AutoscalerAutoscalingPolicyOutput values.
// You can construct a concrete instance of `AutoscalerAutoscalingPolicyInput` via:
//
// 		 AutoscalerAutoscalingPolicyArgs{...}
//
type AutoscalerAutoscalingPolicyInput interface {
	pulumi.Input

	ToAutoscalerAutoscalingPolicyOutput() AutoscalerAutoscalingPolicyOutput
	ToAutoscalerAutoscalingPolicyOutputWithContext(context.Context) AutoscalerAutoscalingPolicyOutput
}

type AutoscalerAutoscalingPolicyArgs struct {
	// The number of seconds that the autoscaler should wait before it
	// starts collecting information from a new instance. This prevents
	// the autoscaler from collecting information when the instance is
	// initializing, during which the collected usage would not be
	// reliable. The default time autoscaler waits is 60 seconds.
	// Virtual machine initialization times might vary because of
	// numerous factors. We recommend that you test how long an
	// instance may take to initialize. To do this, create an instance
	// and time the startup process.
	CooldownPeriod pulumi.IntPtrInput `pulumi:"cooldownPeriod"`
	// Defines the CPU utilization policy that allows the autoscaler to
	// scale based on the average CPU utilization of a managed instance
	// group.  Structure is documented below.
	CpuUtilization AutoscalerAutoscalingPolicyCpuUtilizationPtrInput `pulumi:"cpuUtilization"`
	// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
	LoadBalancingUtilization AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrInput `pulumi:"loadBalancingUtilization"`
	// The maximum number of instances that the autoscaler can scale up
	// to. This is required when creating or updating an autoscaler. The
	// maximum number of replicas should not be lower than minimal number
	// of replicas.
	MaxReplicas pulumi.IntInput `pulumi:"maxReplicas"`
	// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
	Metrics AutoscalerAutoscalingPolicyMetricArrayInput `pulumi:"metrics"`
	// The minimum number of replicas that the autoscaler can scale down
	// to. This cannot be less than 0. If not provided, autoscaler will
	// choose a default value depending on maximum number of instances
	// allowed.
	MinReplicas pulumi.IntInput `pulumi:"minReplicas"`
}

func (AutoscalerAutoscalingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalerAutoscalingPolicy)(nil)).Elem()
}

func (i AutoscalerAutoscalingPolicyArgs) ToAutoscalerAutoscalingPolicyOutput() AutoscalerAutoscalingPolicyOutput {
	return i.ToAutoscalerAutoscalingPolicyOutputWithContext(context.Background())
}

func (i AutoscalerAutoscalingPolicyArgs) ToAutoscalerAutoscalingPolicyOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalerAutoscalingPolicyOutput)
}

func (i AutoscalerAutoscalingPolicyArgs) ToAutoscalerAutoscalingPolicyPtrOutput() AutoscalerAutoscalingPolicyPtrOutput {
	return i.ToAutoscalerAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (i AutoscalerAutoscalingPolicyArgs) ToAutoscalerAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalerAutoscalingPolicyOutput).ToAutoscalerAutoscalingPolicyPtrOutputWithContext(ctx)
}

// AutoscalerAutoscalingPolicyPtrInput is an input type that accepts AutoscalerAutoscalingPolicyArgs, AutoscalerAutoscalingPolicyPtr and AutoscalerAutoscalingPolicyPtrOutput values.
// You can construct a concrete instance of `AutoscalerAutoscalingPolicyPtrInput` via:
//
// 		 AutoscalerAutoscalingPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type AutoscalerAutoscalingPolicyPtrInput interface {
	pulumi.Input

	ToAutoscalerAutoscalingPolicyPtrOutput() AutoscalerAutoscalingPolicyPtrOutput
	ToAutoscalerAutoscalingPolicyPtrOutputWithContext(context.Context) AutoscalerAutoscalingPolicyPtrOutput
}

type autoscalerAutoscalingPolicyPtrType AutoscalerAutoscalingPolicyArgs

func AutoscalerAutoscalingPolicyPtr(v *AutoscalerAutoscalingPolicyArgs) AutoscalerAutoscalingPolicyPtrInput {
	return (*autoscalerAutoscalingPolicyPtrType)(v)
}

func (*autoscalerAutoscalingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalerAutoscalingPolicy)(nil)).Elem()
}

func (i *autoscalerAutoscalingPolicyPtrType) ToAutoscalerAutoscalingPolicyPtrOutput() AutoscalerAutoscalingPolicyPtrOutput {
	return i.ToAutoscalerAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (i *autoscalerAutoscalingPolicyPtrType) ToAutoscalerAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalerAutoscalingPolicyPtrOutput)
}

type AutoscalerAutoscalingPolicyOutput struct{ *pulumi.OutputState }

func (AutoscalerAutoscalingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalerAutoscalingPolicy)(nil)).Elem()
}

func (o AutoscalerAutoscalingPolicyOutput) ToAutoscalerAutoscalingPolicyOutput() AutoscalerAutoscalingPolicyOutput {
	return o
}

func (o AutoscalerAutoscalingPolicyOutput) ToAutoscalerAutoscalingPolicyOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyOutput {
	return o
}

func (o AutoscalerAutoscalingPolicyOutput) ToAutoscalerAutoscalingPolicyPtrOutput() AutoscalerAutoscalingPolicyPtrOutput {
	return o.ToAutoscalerAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (o AutoscalerAutoscalingPolicyOutput) ToAutoscalerAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyPtrOutput {
	return o.ApplyT(func(v AutoscalerAutoscalingPolicy) *AutoscalerAutoscalingPolicy {
		return &v
	}).(AutoscalerAutoscalingPolicyPtrOutput)
}

// The number of seconds that the autoscaler should wait before it
// starts collecting information from a new instance. This prevents
// the autoscaler from collecting information when the instance is
// initializing, during which the collected usage would not be
// reliable. The default time autoscaler waits is 60 seconds.
// Virtual machine initialization times might vary because of
// numerous factors. We recommend that you test how long an
// instance may take to initialize. To do this, create an instance
// and time the startup process.
func (o AutoscalerAutoscalingPolicyOutput) CooldownPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscalerAutoscalingPolicy) *int { return v.CooldownPeriod }).(pulumi.IntPtrOutput)
}

// Defines the CPU utilization policy that allows the autoscaler to
// scale based on the average CPU utilization of a managed instance
// group.  Structure is documented below.
func (o AutoscalerAutoscalingPolicyOutput) CpuUtilization() AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return o.ApplyT(func(v AutoscalerAutoscalingPolicy) *AutoscalerAutoscalingPolicyCpuUtilization {
		return v.CpuUtilization
	}).(AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput)
}

// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
func (o AutoscalerAutoscalingPolicyOutput) LoadBalancingUtilization() AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o.ApplyT(func(v AutoscalerAutoscalingPolicy) *AutoscalerAutoscalingPolicyLoadBalancingUtilization {
		return v.LoadBalancingUtilization
	}).(AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput)
}

// The maximum number of instances that the autoscaler can scale up
// to. This is required when creating or updating an autoscaler. The
// maximum number of replicas should not be lower than minimal number
// of replicas.
func (o AutoscalerAutoscalingPolicyOutput) MaxReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalerAutoscalingPolicy) int { return v.MaxReplicas }).(pulumi.IntOutput)
}

// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
func (o AutoscalerAutoscalingPolicyOutput) Metrics() AutoscalerAutoscalingPolicyMetricArrayOutput {
	return o.ApplyT(func(v AutoscalerAutoscalingPolicy) []AutoscalerAutoscalingPolicyMetric { return v.Metrics }).(AutoscalerAutoscalingPolicyMetricArrayOutput)
}

// The minimum number of replicas that the autoscaler can scale down
// to. This cannot be less than 0. If not provided, autoscaler will
// choose a default value depending on maximum number of instances
// allowed.
func (o AutoscalerAutoscalingPolicyOutput) MinReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalerAutoscalingPolicy) int { return v.MinReplicas }).(pulumi.IntOutput)
}

type AutoscalerAutoscalingPolicyPtrOutput struct{ *pulumi.OutputState }

func (AutoscalerAutoscalingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalerAutoscalingPolicy)(nil)).Elem()
}

func (o AutoscalerAutoscalingPolicyPtrOutput) ToAutoscalerAutoscalingPolicyPtrOutput() AutoscalerAutoscalingPolicyPtrOutput {
	return o
}

func (o AutoscalerAutoscalingPolicyPtrOutput) ToAutoscalerAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyPtrOutput {
	return o
}

func (o AutoscalerAutoscalingPolicyPtrOutput) Elem() AutoscalerAutoscalingPolicyOutput {
	return o.ApplyT(func(v *AutoscalerAutoscalingPolicy) AutoscalerAutoscalingPolicy { return *v }).(AutoscalerAutoscalingPolicyOutput)
}

// The number of seconds that the autoscaler should wait before it
// starts collecting information from a new instance. This prevents
// the autoscaler from collecting information when the instance is
// initializing, during which the collected usage would not be
// reliable. The default time autoscaler waits is 60 seconds.
// Virtual machine initialization times might vary because of
// numerous factors. We recommend that you test how long an
// instance may take to initialize. To do this, create an instance
// and time the startup process.
func (o AutoscalerAutoscalingPolicyPtrOutput) CooldownPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalerAutoscalingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.CooldownPeriod
	}).(pulumi.IntPtrOutput)
}

// Defines the CPU utilization policy that allows the autoscaler to
// scale based on the average CPU utilization of a managed instance
// group.  Structure is documented below.
func (o AutoscalerAutoscalingPolicyPtrOutput) CpuUtilization() AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return o.ApplyT(func(v *AutoscalerAutoscalingPolicy) *AutoscalerAutoscalingPolicyCpuUtilization {
		if v == nil {
			return nil
		}
		return v.CpuUtilization
	}).(AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput)
}

// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
func (o AutoscalerAutoscalingPolicyPtrOutput) LoadBalancingUtilization() AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o.ApplyT(func(v *AutoscalerAutoscalingPolicy) *AutoscalerAutoscalingPolicyLoadBalancingUtilization {
		if v == nil {
			return nil
		}
		return v.LoadBalancingUtilization
	}).(AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput)
}

// The maximum number of instances that the autoscaler can scale up
// to. This is required when creating or updating an autoscaler. The
// maximum number of replicas should not be lower than minimal number
// of replicas.
func (o AutoscalerAutoscalingPolicyPtrOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalerAutoscalingPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MaxReplicas
	}).(pulumi.IntPtrOutput)
}

// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
func (o AutoscalerAutoscalingPolicyPtrOutput) Metrics() AutoscalerAutoscalingPolicyMetricArrayOutput {
	return o.ApplyT(func(v *AutoscalerAutoscalingPolicy) []AutoscalerAutoscalingPolicyMetric {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(AutoscalerAutoscalingPolicyMetricArrayOutput)
}

// The minimum number of replicas that the autoscaler can scale down
// to. This cannot be less than 0. If not provided, autoscaler will
// choose a default value depending on maximum number of instances
// allowed.
func (o AutoscalerAutoscalingPolicyPtrOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalerAutoscalingPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MinReplicas
	}).(pulumi.IntPtrOutput)
}

type AutoscalerAutoscalingPolicyCpuUtilization struct {
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target float64 `pulumi:"target"`
}

// AutoscalerAutoscalingPolicyCpuUtilizationInput is an input type that accepts AutoscalerAutoscalingPolicyCpuUtilizationArgs and AutoscalerAutoscalingPolicyCpuUtilizationOutput values.
// You can construct a concrete instance of `AutoscalerAutoscalingPolicyCpuUtilizationInput` via:
//
// 		 AutoscalerAutoscalingPolicyCpuUtilizationArgs{...}
//
type AutoscalerAutoscalingPolicyCpuUtilizationInput interface {
	pulumi.Input

	ToAutoscalerAutoscalingPolicyCpuUtilizationOutput() AutoscalerAutoscalingPolicyCpuUtilizationOutput
	ToAutoscalerAutoscalingPolicyCpuUtilizationOutputWithContext(context.Context) AutoscalerAutoscalingPolicyCpuUtilizationOutput
}

type AutoscalerAutoscalingPolicyCpuUtilizationArgs struct {
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target pulumi.Float64Input `pulumi:"target"`
}

func (AutoscalerAutoscalingPolicyCpuUtilizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalerAutoscalingPolicyCpuUtilization)(nil)).Elem()
}

func (i AutoscalerAutoscalingPolicyCpuUtilizationArgs) ToAutoscalerAutoscalingPolicyCpuUtilizationOutput() AutoscalerAutoscalingPolicyCpuUtilizationOutput {
	return i.ToAutoscalerAutoscalingPolicyCpuUtilizationOutputWithContext(context.Background())
}

func (i AutoscalerAutoscalingPolicyCpuUtilizationArgs) ToAutoscalerAutoscalingPolicyCpuUtilizationOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyCpuUtilizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalerAutoscalingPolicyCpuUtilizationOutput)
}

func (i AutoscalerAutoscalingPolicyCpuUtilizationArgs) ToAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput() AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return i.ToAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(context.Background())
}

func (i AutoscalerAutoscalingPolicyCpuUtilizationArgs) ToAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalerAutoscalingPolicyCpuUtilizationOutput).ToAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx)
}

// AutoscalerAutoscalingPolicyCpuUtilizationPtrInput is an input type that accepts AutoscalerAutoscalingPolicyCpuUtilizationArgs, AutoscalerAutoscalingPolicyCpuUtilizationPtr and AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput values.
// You can construct a concrete instance of `AutoscalerAutoscalingPolicyCpuUtilizationPtrInput` via:
//
// 		 AutoscalerAutoscalingPolicyCpuUtilizationArgs{...}
//
//  or:
//
// 		 nil
//
type AutoscalerAutoscalingPolicyCpuUtilizationPtrInput interface {
	pulumi.Input

	ToAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput() AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput
	ToAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(context.Context) AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput
}

type autoscalerAutoscalingPolicyCpuUtilizationPtrType AutoscalerAutoscalingPolicyCpuUtilizationArgs

func AutoscalerAutoscalingPolicyCpuUtilizationPtr(v *AutoscalerAutoscalingPolicyCpuUtilizationArgs) AutoscalerAutoscalingPolicyCpuUtilizationPtrInput {
	return (*autoscalerAutoscalingPolicyCpuUtilizationPtrType)(v)
}

func (*autoscalerAutoscalingPolicyCpuUtilizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalerAutoscalingPolicyCpuUtilization)(nil)).Elem()
}

func (i *autoscalerAutoscalingPolicyCpuUtilizationPtrType) ToAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput() AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return i.ToAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(context.Background())
}

func (i *autoscalerAutoscalingPolicyCpuUtilizationPtrType) ToAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput)
}

type AutoscalerAutoscalingPolicyCpuUtilizationOutput struct{ *pulumi.OutputState }

func (AutoscalerAutoscalingPolicyCpuUtilizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalerAutoscalingPolicyCpuUtilization)(nil)).Elem()
}

func (o AutoscalerAutoscalingPolicyCpuUtilizationOutput) ToAutoscalerAutoscalingPolicyCpuUtilizationOutput() AutoscalerAutoscalingPolicyCpuUtilizationOutput {
	return o
}

func (o AutoscalerAutoscalingPolicyCpuUtilizationOutput) ToAutoscalerAutoscalingPolicyCpuUtilizationOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyCpuUtilizationOutput {
	return o
}

func (o AutoscalerAutoscalingPolicyCpuUtilizationOutput) ToAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput() AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return o.ToAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(context.Background())
}

func (o AutoscalerAutoscalingPolicyCpuUtilizationOutput) ToAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return o.ApplyT(func(v AutoscalerAutoscalingPolicyCpuUtilization) *AutoscalerAutoscalingPolicyCpuUtilization {
		return &v
	}).(AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput)
}

// Fraction of backend capacity utilization (set in HTTP(s) load
// balancing configuration) that autoscaler should maintain. Must
// be a positive float value. If not defined, the default is 0.8.
func (o AutoscalerAutoscalingPolicyCpuUtilizationOutput) Target() pulumi.Float64Output {
	return o.ApplyT(func(v AutoscalerAutoscalingPolicyCpuUtilization) float64 { return v.Target }).(pulumi.Float64Output)
}

type AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput struct{ *pulumi.OutputState }

func (AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalerAutoscalingPolicyCpuUtilization)(nil)).Elem()
}

func (o AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput) ToAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput() AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return o
}

func (o AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput) ToAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return o
}

func (o AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput) Elem() AutoscalerAutoscalingPolicyCpuUtilizationOutput {
	return o.ApplyT(func(v *AutoscalerAutoscalingPolicyCpuUtilization) AutoscalerAutoscalingPolicyCpuUtilization {
		return *v
	}).(AutoscalerAutoscalingPolicyCpuUtilizationOutput)
}

// Fraction of backend capacity utilization (set in HTTP(s) load
// balancing configuration) that autoscaler should maintain. Must
// be a positive float value. If not defined, the default is 0.8.
func (o AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput) Target() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AutoscalerAutoscalingPolicyCpuUtilization) *float64 {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(pulumi.Float64PtrOutput)
}

type AutoscalerAutoscalingPolicyLoadBalancingUtilization struct {
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target float64 `pulumi:"target"`
}

// AutoscalerAutoscalingPolicyLoadBalancingUtilizationInput is an input type that accepts AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs and AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput values.
// You can construct a concrete instance of `AutoscalerAutoscalingPolicyLoadBalancingUtilizationInput` via:
//
// 		 AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs{...}
//
type AutoscalerAutoscalingPolicyLoadBalancingUtilizationInput interface {
	pulumi.Input

	ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput() AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput
	ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutputWithContext(context.Context) AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput
}

type AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs struct {
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target pulumi.Float64Input `pulumi:"target"`
}

func (AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalerAutoscalingPolicyLoadBalancingUtilization)(nil)).Elem()
}

func (i AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs) ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput() AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput {
	return i.ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutputWithContext(context.Background())
}

func (i AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs) ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput)
}

func (i AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs) ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput() AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return i.ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(context.Background())
}

func (i AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs) ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput).ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx)
}

// AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrInput is an input type that accepts AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs, AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtr and AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput values.
// You can construct a concrete instance of `AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrInput` via:
//
// 		 AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs{...}
//
//  or:
//
// 		 nil
//
type AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrInput interface {
	pulumi.Input

	ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput() AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput
	ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(context.Context) AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput
}

type autoscalerAutoscalingPolicyLoadBalancingUtilizationPtrType AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs

func AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtr(v *AutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs) AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrInput {
	return (*autoscalerAutoscalingPolicyLoadBalancingUtilizationPtrType)(v)
}

func (*autoscalerAutoscalingPolicyLoadBalancingUtilizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalerAutoscalingPolicyLoadBalancingUtilization)(nil)).Elem()
}

func (i *autoscalerAutoscalingPolicyLoadBalancingUtilizationPtrType) ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput() AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return i.ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(context.Background())
}

func (i *autoscalerAutoscalingPolicyLoadBalancingUtilizationPtrType) ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput)
}

type AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput struct{ *pulumi.OutputState }

func (AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalerAutoscalingPolicyLoadBalancingUtilization)(nil)).Elem()
}

func (o AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput) ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput() AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput {
	return o
}

func (o AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput) ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput {
	return o
}

func (o AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput) ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput() AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o.ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(context.Background())
}

func (o AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput) ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o.ApplyT(func(v AutoscalerAutoscalingPolicyLoadBalancingUtilization) *AutoscalerAutoscalingPolicyLoadBalancingUtilization {
		return &v
	}).(AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput)
}

// Fraction of backend capacity utilization (set in HTTP(s) load
// balancing configuration) that autoscaler should maintain. Must
// be a positive float value. If not defined, the default is 0.8.
func (o AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput) Target() pulumi.Float64Output {
	return o.ApplyT(func(v AutoscalerAutoscalingPolicyLoadBalancingUtilization) float64 { return v.Target }).(pulumi.Float64Output)
}

type AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput struct{ *pulumi.OutputState }

func (AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalerAutoscalingPolicyLoadBalancingUtilization)(nil)).Elem()
}

func (o AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput) ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput() AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o
}

func (o AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput) ToAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o
}

func (o AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput) Elem() AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput {
	return o.ApplyT(func(v *AutoscalerAutoscalingPolicyLoadBalancingUtilization) AutoscalerAutoscalingPolicyLoadBalancingUtilization {
		return *v
	}).(AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput)
}

// Fraction of backend capacity utilization (set in HTTP(s) load
// balancing configuration) that autoscaler should maintain. Must
// be a positive float value. If not defined, the default is 0.8.
func (o AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput) Target() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AutoscalerAutoscalingPolicyLoadBalancingUtilization) *float64 {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(pulumi.Float64PtrOutput)
}

type AutoscalerAutoscalingPolicyMetric struct {
	Filter *string `pulumi:"filter"`
	// The identifier (type) of the Stackdriver Monitoring metric.
	// The metric cannot have negative values.
	// The metric must have a value type of INT64 or DOUBLE.
	Name                     string   `pulumi:"name"`
	SingleInstanceAssignment *float64 `pulumi:"singleInstanceAssignment"`
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target *float64 `pulumi:"target"`
	// Defines how target utilization value is expressed for a
	// Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND,
	// or DELTA_PER_MINUTE.
	Type *string `pulumi:"type"`
}

// AutoscalerAutoscalingPolicyMetricInput is an input type that accepts AutoscalerAutoscalingPolicyMetricArgs and AutoscalerAutoscalingPolicyMetricOutput values.
// You can construct a concrete instance of `AutoscalerAutoscalingPolicyMetricInput` via:
//
// 		 AutoscalerAutoscalingPolicyMetricArgs{...}
//
type AutoscalerAutoscalingPolicyMetricInput interface {
	pulumi.Input

	ToAutoscalerAutoscalingPolicyMetricOutput() AutoscalerAutoscalingPolicyMetricOutput
	ToAutoscalerAutoscalingPolicyMetricOutputWithContext(context.Context) AutoscalerAutoscalingPolicyMetricOutput
}

type AutoscalerAutoscalingPolicyMetricArgs struct {
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// The identifier (type) of the Stackdriver Monitoring metric.
	// The metric cannot have negative values.
	// The metric must have a value type of INT64 or DOUBLE.
	Name                     pulumi.StringInput     `pulumi:"name"`
	SingleInstanceAssignment pulumi.Float64PtrInput `pulumi:"singleInstanceAssignment"`
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target pulumi.Float64PtrInput `pulumi:"target"`
	// Defines how target utilization value is expressed for a
	// Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND,
	// or DELTA_PER_MINUTE.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (AutoscalerAutoscalingPolicyMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalerAutoscalingPolicyMetric)(nil)).Elem()
}

func (i AutoscalerAutoscalingPolicyMetricArgs) ToAutoscalerAutoscalingPolicyMetricOutput() AutoscalerAutoscalingPolicyMetricOutput {
	return i.ToAutoscalerAutoscalingPolicyMetricOutputWithContext(context.Background())
}

func (i AutoscalerAutoscalingPolicyMetricArgs) ToAutoscalerAutoscalingPolicyMetricOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalerAutoscalingPolicyMetricOutput)
}

// AutoscalerAutoscalingPolicyMetricArrayInput is an input type that accepts AutoscalerAutoscalingPolicyMetricArray and AutoscalerAutoscalingPolicyMetricArrayOutput values.
// You can construct a concrete instance of `AutoscalerAutoscalingPolicyMetricArrayInput` via:
//
// 		 AutoscalerAutoscalingPolicyMetricArray{ AutoscalerAutoscalingPolicyMetricArgs{...} }
//
type AutoscalerAutoscalingPolicyMetricArrayInput interface {
	pulumi.Input

	ToAutoscalerAutoscalingPolicyMetricArrayOutput() AutoscalerAutoscalingPolicyMetricArrayOutput
	ToAutoscalerAutoscalingPolicyMetricArrayOutputWithContext(context.Context) AutoscalerAutoscalingPolicyMetricArrayOutput
}

type AutoscalerAutoscalingPolicyMetricArray []AutoscalerAutoscalingPolicyMetricInput

func (AutoscalerAutoscalingPolicyMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscalerAutoscalingPolicyMetric)(nil)).Elem()
}

func (i AutoscalerAutoscalingPolicyMetricArray) ToAutoscalerAutoscalingPolicyMetricArrayOutput() AutoscalerAutoscalingPolicyMetricArrayOutput {
	return i.ToAutoscalerAutoscalingPolicyMetricArrayOutputWithContext(context.Background())
}

func (i AutoscalerAutoscalingPolicyMetricArray) ToAutoscalerAutoscalingPolicyMetricArrayOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalerAutoscalingPolicyMetricArrayOutput)
}

type AutoscalerAutoscalingPolicyMetricOutput struct{ *pulumi.OutputState }

func (AutoscalerAutoscalingPolicyMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalerAutoscalingPolicyMetric)(nil)).Elem()
}

func (o AutoscalerAutoscalingPolicyMetricOutput) ToAutoscalerAutoscalingPolicyMetricOutput() AutoscalerAutoscalingPolicyMetricOutput {
	return o
}

func (o AutoscalerAutoscalingPolicyMetricOutput) ToAutoscalerAutoscalingPolicyMetricOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyMetricOutput {
	return o
}

func (o AutoscalerAutoscalingPolicyMetricOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscalerAutoscalingPolicyMetric) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// The identifier (type) of the Stackdriver Monitoring metric.
// The metric cannot have negative values.
// The metric must have a value type of INT64 or DOUBLE.
func (o AutoscalerAutoscalingPolicyMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscalerAutoscalingPolicyMetric) string { return v.Name }).(pulumi.StringOutput)
}

func (o AutoscalerAutoscalingPolicyMetricOutput) SingleInstanceAssignment() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AutoscalerAutoscalingPolicyMetric) *float64 { return v.SingleInstanceAssignment }).(pulumi.Float64PtrOutput)
}

// Fraction of backend capacity utilization (set in HTTP(s) load
// balancing configuration) that autoscaler should maintain. Must
// be a positive float value. If not defined, the default is 0.8.
func (o AutoscalerAutoscalingPolicyMetricOutput) Target() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AutoscalerAutoscalingPolicyMetric) *float64 { return v.Target }).(pulumi.Float64PtrOutput)
}

// Defines how target utilization value is expressed for a
// Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND,
// or DELTA_PER_MINUTE.
func (o AutoscalerAutoscalingPolicyMetricOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscalerAutoscalingPolicyMetric) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AutoscalerAutoscalingPolicyMetricArrayOutput struct{ *pulumi.OutputState }

func (AutoscalerAutoscalingPolicyMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscalerAutoscalingPolicyMetric)(nil)).Elem()
}

func (o AutoscalerAutoscalingPolicyMetricArrayOutput) ToAutoscalerAutoscalingPolicyMetricArrayOutput() AutoscalerAutoscalingPolicyMetricArrayOutput {
	return o
}

func (o AutoscalerAutoscalingPolicyMetricArrayOutput) ToAutoscalerAutoscalingPolicyMetricArrayOutputWithContext(ctx context.Context) AutoscalerAutoscalingPolicyMetricArrayOutput {
	return o
}

func (o AutoscalerAutoscalingPolicyMetricArrayOutput) Index(i pulumi.IntInput) AutoscalerAutoscalingPolicyMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscalerAutoscalingPolicyMetric {
		return vs[0].([]AutoscalerAutoscalingPolicyMetric)[vs[1].(int)]
	}).(AutoscalerAutoscalingPolicyMetricOutput)
}

type BackendBucketCdnPolicy struct {
	// Maximum number of seconds the response to a signed URL request will
	// be considered fresh. After this time period,
	// the response will be revalidated before being served.
	// When serving responses to signed URL requests,
	// Cloud CDN will internally behave as though
	// all responses from this backend had a "Cache-Control: public,
	// max-age=[TTL]" header, regardless of any existing Cache-Control
	// header. The actual headers served in responses will not be altered.
	SignedUrlCacheMaxAgeSec int `pulumi:"signedUrlCacheMaxAgeSec"`
}

// BackendBucketCdnPolicyInput is an input type that accepts BackendBucketCdnPolicyArgs and BackendBucketCdnPolicyOutput values.
// You can construct a concrete instance of `BackendBucketCdnPolicyInput` via:
//
// 		 BackendBucketCdnPolicyArgs{...}
//
type BackendBucketCdnPolicyInput interface {
	pulumi.Input

	ToBackendBucketCdnPolicyOutput() BackendBucketCdnPolicyOutput
	ToBackendBucketCdnPolicyOutputWithContext(context.Context) BackendBucketCdnPolicyOutput
}

type BackendBucketCdnPolicyArgs struct {
	// Maximum number of seconds the response to a signed URL request will
	// be considered fresh. After this time period,
	// the response will be revalidated before being served.
	// When serving responses to signed URL requests,
	// Cloud CDN will internally behave as though
	// all responses from this backend had a "Cache-Control: public,
	// max-age=[TTL]" header, regardless of any existing Cache-Control
	// header. The actual headers served in responses will not be altered.
	SignedUrlCacheMaxAgeSec pulumi.IntInput `pulumi:"signedUrlCacheMaxAgeSec"`
}

func (BackendBucketCdnPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendBucketCdnPolicy)(nil)).Elem()
}

func (i BackendBucketCdnPolicyArgs) ToBackendBucketCdnPolicyOutput() BackendBucketCdnPolicyOutput {
	return i.ToBackendBucketCdnPolicyOutputWithContext(context.Background())
}

func (i BackendBucketCdnPolicyArgs) ToBackendBucketCdnPolicyOutputWithContext(ctx context.Context) BackendBucketCdnPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyOutput)
}

func (i BackendBucketCdnPolicyArgs) ToBackendBucketCdnPolicyPtrOutput() BackendBucketCdnPolicyPtrOutput {
	return i.ToBackendBucketCdnPolicyPtrOutputWithContext(context.Background())
}

func (i BackendBucketCdnPolicyArgs) ToBackendBucketCdnPolicyPtrOutputWithContext(ctx context.Context) BackendBucketCdnPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyOutput).ToBackendBucketCdnPolicyPtrOutputWithContext(ctx)
}

// BackendBucketCdnPolicyPtrInput is an input type that accepts BackendBucketCdnPolicyArgs, BackendBucketCdnPolicyPtr and BackendBucketCdnPolicyPtrOutput values.
// You can construct a concrete instance of `BackendBucketCdnPolicyPtrInput` via:
//
// 		 BackendBucketCdnPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type BackendBucketCdnPolicyPtrInput interface {
	pulumi.Input

	ToBackendBucketCdnPolicyPtrOutput() BackendBucketCdnPolicyPtrOutput
	ToBackendBucketCdnPolicyPtrOutputWithContext(context.Context) BackendBucketCdnPolicyPtrOutput
}

type backendBucketCdnPolicyPtrType BackendBucketCdnPolicyArgs

func BackendBucketCdnPolicyPtr(v *BackendBucketCdnPolicyArgs) BackendBucketCdnPolicyPtrInput {
	return (*backendBucketCdnPolicyPtrType)(v)
}

func (*backendBucketCdnPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendBucketCdnPolicy)(nil)).Elem()
}

func (i *backendBucketCdnPolicyPtrType) ToBackendBucketCdnPolicyPtrOutput() BackendBucketCdnPolicyPtrOutput {
	return i.ToBackendBucketCdnPolicyPtrOutputWithContext(context.Background())
}

func (i *backendBucketCdnPolicyPtrType) ToBackendBucketCdnPolicyPtrOutputWithContext(ctx context.Context) BackendBucketCdnPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyPtrOutput)
}

type BackendBucketCdnPolicyOutput struct{ *pulumi.OutputState }

func (BackendBucketCdnPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendBucketCdnPolicy)(nil)).Elem()
}

func (o BackendBucketCdnPolicyOutput) ToBackendBucketCdnPolicyOutput() BackendBucketCdnPolicyOutput {
	return o
}

func (o BackendBucketCdnPolicyOutput) ToBackendBucketCdnPolicyOutputWithContext(ctx context.Context) BackendBucketCdnPolicyOutput {
	return o
}

func (o BackendBucketCdnPolicyOutput) ToBackendBucketCdnPolicyPtrOutput() BackendBucketCdnPolicyPtrOutput {
	return o.ToBackendBucketCdnPolicyPtrOutputWithContext(context.Background())
}

func (o BackendBucketCdnPolicyOutput) ToBackendBucketCdnPolicyPtrOutputWithContext(ctx context.Context) BackendBucketCdnPolicyPtrOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicy) *BackendBucketCdnPolicy {
		return &v
	}).(BackendBucketCdnPolicyPtrOutput)
}

// Maximum number of seconds the response to a signed URL request will
// be considered fresh. After this time period,
// the response will be revalidated before being served.
// When serving responses to signed URL requests,
// Cloud CDN will internally behave as though
// all responses from this backend had a "Cache-Control: public,
// max-age=[TTL]" header, regardless of any existing Cache-Control
// header. The actual headers served in responses will not be altered.
func (o BackendBucketCdnPolicyOutput) SignedUrlCacheMaxAgeSec() pulumi.IntOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicy) int { return v.SignedUrlCacheMaxAgeSec }).(pulumi.IntOutput)
}

type BackendBucketCdnPolicyPtrOutput struct{ *pulumi.OutputState }

func (BackendBucketCdnPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendBucketCdnPolicy)(nil)).Elem()
}

func (o BackendBucketCdnPolicyPtrOutput) ToBackendBucketCdnPolicyPtrOutput() BackendBucketCdnPolicyPtrOutput {
	return o
}

func (o BackendBucketCdnPolicyPtrOutput) ToBackendBucketCdnPolicyPtrOutputWithContext(ctx context.Context) BackendBucketCdnPolicyPtrOutput {
	return o
}

func (o BackendBucketCdnPolicyPtrOutput) Elem() BackendBucketCdnPolicyOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicy) BackendBucketCdnPolicy { return *v }).(BackendBucketCdnPolicyOutput)
}

// Maximum number of seconds the response to a signed URL request will
// be considered fresh. After this time period,
// the response will be revalidated before being served.
// When serving responses to signed URL requests,
// Cloud CDN will internally behave as though
// all responses from this backend had a "Cache-Control: public,
// max-age=[TTL]" header, regardless of any existing Cache-Control
// header. The actual headers served in responses will not be altered.
func (o BackendBucketCdnPolicyPtrOutput) SignedUrlCacheMaxAgeSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.SignedUrlCacheMaxAgeSec
	}).(pulumi.IntPtrOutput)
}

type BackendServiceBackend struct {
	// Specifies the balancing mode for this backend.
	// For global HTTP(S) or TCP/SSL load balancing, the default is
	// UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S))
	// and CONNECTION (for TCP/SSL).
	BalancingMode *string `pulumi:"balancingMode"`
	// A multiplier applied to the group's maximum servicing capacity
	// (based on UTILIZATION, RATE or CONNECTION).
	// Default value is 1, which means the group will serve up to 100%
	// of its configured capacity (depending on balancingMode). A
	// setting of 0 means the group is completely drained, offering
	// 0% of its available Capacity. Valid range is [0.0,1.0].
	CapacityScaler *float64 `pulumi:"capacityScaler"`
	// An optional description of this resource.
	// Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// The fully-qualified URL of an Instance Group or Network Endpoint
	// Group resource. In case of instance group this defines the list
	// of instances that serve traffic. Member virtual machine
	// instances from each instance group must live in the same zone as
	// the instance group itself. No two backends in a backend service
	// are allowed to use same Instance Group resource.
	// For Network Endpoint Groups this defines list of endpoints. All
	// endpoints of Network Endpoint Group must be hosted on instances
	// located in the same zone as the Network Endpoint Group.
	// Backend services cannot mix Instance Group and
	// Network Endpoint Group backends.
	// Note that you must specify an Instance Group or Network Endpoint
	// Group resource using the fully-qualified URL, rather than a
	// partial URL.
	Group string `pulumi:"group"`
	// The maximum number of connections to the backend cluster.
	// Defaults to 1024.
	MaxConnections *int `pulumi:"maxConnections"`
	// The max number of simultaneous connections that a single backend
	// network endpoint can handle. This is used to calculate the
	// capacity of the group. Can be used in either CONNECTION or
	// UTILIZATION balancing modes.
	// For CONNECTION mode, either
	// maxConnections or maxConnectionsPerEndpoint must be set.
	MaxConnectionsPerEndpoint *int `pulumi:"maxConnectionsPerEndpoint"`
	// The max number of simultaneous connections that a single
	// backend instance can handle. This is used to calculate the
	// capacity of the group. Can be used in either CONNECTION or
	// UTILIZATION balancing modes.
	// For CONNECTION mode, either maxConnections or
	// maxConnectionsPerInstance must be set.
	MaxConnectionsPerInstance *int `pulumi:"maxConnectionsPerInstance"`
	// The max requests per second (RPS) of the group.
	// Can be used with either RATE or UTILIZATION balancing modes,
	// but required if RATE mode. For RATE mode, either maxRate or one
	// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
	// group type, must be set.
	MaxRate *int `pulumi:"maxRate"`
	// The max requests per second (RPS) that a single backend network
	// endpoint can handle. This is used to calculate the capacity of
	// the group. Can be used in either balancing mode. For RATE mode,
	// either maxRate or maxRatePerEndpoint must be set.
	MaxRatePerEndpoint *float64 `pulumi:"maxRatePerEndpoint"`
	// The max requests per second (RPS) that a single backend
	// instance can handle. This is used to calculate the capacity of
	// the group. Can be used in either balancing mode. For RATE mode,
	// either maxRate or maxRatePerInstance must be set.
	MaxRatePerInstance *float64 `pulumi:"maxRatePerInstance"`
	// Used when balancingMode is UTILIZATION. This ratio defines the
	// CPU utilization target for the group. The default is 0.8. Valid
	// range is [0.0, 1.0].
	MaxUtilization *float64 `pulumi:"maxUtilization"`
}

// BackendServiceBackendInput is an input type that accepts BackendServiceBackendArgs and BackendServiceBackendOutput values.
// You can construct a concrete instance of `BackendServiceBackendInput` via:
//
// 		 BackendServiceBackendArgs{...}
//
type BackendServiceBackendInput interface {
	pulumi.Input

	ToBackendServiceBackendOutput() BackendServiceBackendOutput
	ToBackendServiceBackendOutputWithContext(context.Context) BackendServiceBackendOutput
}

type BackendServiceBackendArgs struct {
	// Specifies the balancing mode for this backend.
	// For global HTTP(S) or TCP/SSL load balancing, the default is
	// UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S))
	// and CONNECTION (for TCP/SSL).
	BalancingMode pulumi.StringPtrInput `pulumi:"balancingMode"`
	// A multiplier applied to the group's maximum servicing capacity
	// (based on UTILIZATION, RATE or CONNECTION).
	// Default value is 1, which means the group will serve up to 100%
	// of its configured capacity (depending on balancingMode). A
	// setting of 0 means the group is completely drained, offering
	// 0% of its available Capacity. Valid range is [0.0,1.0].
	CapacityScaler pulumi.Float64PtrInput `pulumi:"capacityScaler"`
	// An optional description of this resource.
	// Provide this property when you create the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The fully-qualified URL of an Instance Group or Network Endpoint
	// Group resource. In case of instance group this defines the list
	// of instances that serve traffic. Member virtual machine
	// instances from each instance group must live in the same zone as
	// the instance group itself. No two backends in a backend service
	// are allowed to use same Instance Group resource.
	// For Network Endpoint Groups this defines list of endpoints. All
	// endpoints of Network Endpoint Group must be hosted on instances
	// located in the same zone as the Network Endpoint Group.
	// Backend services cannot mix Instance Group and
	// Network Endpoint Group backends.
	// Note that you must specify an Instance Group or Network Endpoint
	// Group resource using the fully-qualified URL, rather than a
	// partial URL.
	Group pulumi.StringInput `pulumi:"group"`
	// The maximum number of connections to the backend cluster.
	// Defaults to 1024.
	MaxConnections pulumi.IntPtrInput `pulumi:"maxConnections"`
	// The max number of simultaneous connections that a single backend
	// network endpoint can handle. This is used to calculate the
	// capacity of the group. Can be used in either CONNECTION or
	// UTILIZATION balancing modes.
	// For CONNECTION mode, either
	// maxConnections or maxConnectionsPerEndpoint must be set.
	MaxConnectionsPerEndpoint pulumi.IntPtrInput `pulumi:"maxConnectionsPerEndpoint"`
	// The max number of simultaneous connections that a single
	// backend instance can handle. This is used to calculate the
	// capacity of the group. Can be used in either CONNECTION or
	// UTILIZATION balancing modes.
	// For CONNECTION mode, either maxConnections or
	// maxConnectionsPerInstance must be set.
	MaxConnectionsPerInstance pulumi.IntPtrInput `pulumi:"maxConnectionsPerInstance"`
	// The max requests per second (RPS) of the group.
	// Can be used with either RATE or UTILIZATION balancing modes,
	// but required if RATE mode. For RATE mode, either maxRate or one
	// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
	// group type, must be set.
	MaxRate pulumi.IntPtrInput `pulumi:"maxRate"`
	// The max requests per second (RPS) that a single backend network
	// endpoint can handle. This is used to calculate the capacity of
	// the group. Can be used in either balancing mode. For RATE mode,
	// either maxRate or maxRatePerEndpoint must be set.
	MaxRatePerEndpoint pulumi.Float64PtrInput `pulumi:"maxRatePerEndpoint"`
	// The max requests per second (RPS) that a single backend
	// instance can handle. This is used to calculate the capacity of
	// the group. Can be used in either balancing mode. For RATE mode,
	// either maxRate or maxRatePerInstance must be set.
	MaxRatePerInstance pulumi.Float64PtrInput `pulumi:"maxRatePerInstance"`
	// Used when balancingMode is UTILIZATION. This ratio defines the
	// CPU utilization target for the group. The default is 0.8. Valid
	// range is [0.0, 1.0].
	MaxUtilization pulumi.Float64PtrInput `pulumi:"maxUtilization"`
}

func (BackendServiceBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceBackend)(nil)).Elem()
}

func (i BackendServiceBackendArgs) ToBackendServiceBackendOutput() BackendServiceBackendOutput {
	return i.ToBackendServiceBackendOutputWithContext(context.Background())
}

func (i BackendServiceBackendArgs) ToBackendServiceBackendOutputWithContext(ctx context.Context) BackendServiceBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceBackendOutput)
}

// BackendServiceBackendArrayInput is an input type that accepts BackendServiceBackendArray and BackendServiceBackendArrayOutput values.
// You can construct a concrete instance of `BackendServiceBackendArrayInput` via:
//
// 		 BackendServiceBackendArray{ BackendServiceBackendArgs{...} }
//
type BackendServiceBackendArrayInput interface {
	pulumi.Input

	ToBackendServiceBackendArrayOutput() BackendServiceBackendArrayOutput
	ToBackendServiceBackendArrayOutputWithContext(context.Context) BackendServiceBackendArrayOutput
}

type BackendServiceBackendArray []BackendServiceBackendInput

func (BackendServiceBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendServiceBackend)(nil)).Elem()
}

func (i BackendServiceBackendArray) ToBackendServiceBackendArrayOutput() BackendServiceBackendArrayOutput {
	return i.ToBackendServiceBackendArrayOutputWithContext(context.Background())
}

func (i BackendServiceBackendArray) ToBackendServiceBackendArrayOutputWithContext(ctx context.Context) BackendServiceBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceBackendArrayOutput)
}

type BackendServiceBackendOutput struct{ *pulumi.OutputState }

func (BackendServiceBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceBackend)(nil)).Elem()
}

func (o BackendServiceBackendOutput) ToBackendServiceBackendOutput() BackendServiceBackendOutput {
	return o
}

func (o BackendServiceBackendOutput) ToBackendServiceBackendOutputWithContext(ctx context.Context) BackendServiceBackendOutput {
	return o
}

// Specifies the balancing mode for this backend.
// For global HTTP(S) or TCP/SSL load balancing, the default is
// UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S))
// and CONNECTION (for TCP/SSL).
func (o BackendServiceBackendOutput) BalancingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendServiceBackend) *string { return v.BalancingMode }).(pulumi.StringPtrOutput)
}

// A multiplier applied to the group's maximum servicing capacity
// (based on UTILIZATION, RATE or CONNECTION).
// Default value is 1, which means the group will serve up to 100%
// of its configured capacity (depending on balancingMode). A
// setting of 0 means the group is completely drained, offering
// 0% of its available Capacity. Valid range is [0.0,1.0].
func (o BackendServiceBackendOutput) CapacityScaler() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BackendServiceBackend) *float64 { return v.CapacityScaler }).(pulumi.Float64PtrOutput)
}

// An optional description of this resource.
// Provide this property when you create the resource.
func (o BackendServiceBackendOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendServiceBackend) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The fully-qualified URL of an Instance Group or Network Endpoint
// Group resource. In case of instance group this defines the list
// of instances that serve traffic. Member virtual machine
// instances from each instance group must live in the same zone as
// the instance group itself. No two backends in a backend service
// are allowed to use same Instance Group resource.
// For Network Endpoint Groups this defines list of endpoints. All
// endpoints of Network Endpoint Group must be hosted on instances
// located in the same zone as the Network Endpoint Group.
// Backend services cannot mix Instance Group and
// Network Endpoint Group backends.
// Note that you must specify an Instance Group or Network Endpoint
// Group resource using the fully-qualified URL, rather than a
// partial URL.
func (o BackendServiceBackendOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v BackendServiceBackend) string { return v.Group }).(pulumi.StringOutput)
}

// The maximum number of connections to the backend cluster.
// Defaults to 1024.
func (o BackendServiceBackendOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceBackend) *int { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// The max number of simultaneous connections that a single backend
// network endpoint can handle. This is used to calculate the
// capacity of the group. Can be used in either CONNECTION or
// UTILIZATION balancing modes.
// For CONNECTION mode, either
// maxConnections or maxConnectionsPerEndpoint must be set.
func (o BackendServiceBackendOutput) MaxConnectionsPerEndpoint() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceBackend) *int { return v.MaxConnectionsPerEndpoint }).(pulumi.IntPtrOutput)
}

// The max number of simultaneous connections that a single
// backend instance can handle. This is used to calculate the
// capacity of the group. Can be used in either CONNECTION or
// UTILIZATION balancing modes.
// For CONNECTION mode, either maxConnections or
// maxConnectionsPerInstance must be set.
func (o BackendServiceBackendOutput) MaxConnectionsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceBackend) *int { return v.MaxConnectionsPerInstance }).(pulumi.IntPtrOutput)
}

// The max requests per second (RPS) of the group.
// Can be used with either RATE or UTILIZATION balancing modes,
// but required if RATE mode. For RATE mode, either maxRate or one
// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
// group type, must be set.
func (o BackendServiceBackendOutput) MaxRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceBackend) *int { return v.MaxRate }).(pulumi.IntPtrOutput)
}

// The max requests per second (RPS) that a single backend network
// endpoint can handle. This is used to calculate the capacity of
// the group. Can be used in either balancing mode. For RATE mode,
// either maxRate or maxRatePerEndpoint must be set.
func (o BackendServiceBackendOutput) MaxRatePerEndpoint() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BackendServiceBackend) *float64 { return v.MaxRatePerEndpoint }).(pulumi.Float64PtrOutput)
}

// The max requests per second (RPS) that a single backend
// instance can handle. This is used to calculate the capacity of
// the group. Can be used in either balancing mode. For RATE mode,
// either maxRate or maxRatePerInstance must be set.
func (o BackendServiceBackendOutput) MaxRatePerInstance() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BackendServiceBackend) *float64 { return v.MaxRatePerInstance }).(pulumi.Float64PtrOutput)
}

// Used when balancingMode is UTILIZATION. This ratio defines the
// CPU utilization target for the group. The default is 0.8. Valid
// range is [0.0, 1.0].
func (o BackendServiceBackendOutput) MaxUtilization() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BackendServiceBackend) *float64 { return v.MaxUtilization }).(pulumi.Float64PtrOutput)
}

type BackendServiceBackendArrayOutput struct{ *pulumi.OutputState }

func (BackendServiceBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendServiceBackend)(nil)).Elem()
}

func (o BackendServiceBackendArrayOutput) ToBackendServiceBackendArrayOutput() BackendServiceBackendArrayOutput {
	return o
}

func (o BackendServiceBackendArrayOutput) ToBackendServiceBackendArrayOutputWithContext(ctx context.Context) BackendServiceBackendArrayOutput {
	return o
}

func (o BackendServiceBackendArrayOutput) Index(i pulumi.IntInput) BackendServiceBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendServiceBackend {
		return vs[0].([]BackendServiceBackend)[vs[1].(int)]
	}).(BackendServiceBackendOutput)
}

type BackendServiceCdnPolicy struct {
	// The CacheKeyPolicy for this CdnPolicy.  Structure is documented below.
	CacheKeyPolicy *BackendServiceCdnPolicyCacheKeyPolicy `pulumi:"cacheKeyPolicy"`
	// Maximum number of seconds the response to a signed URL request
	// will be considered fresh, defaults to 1hr (3600s). After this
	// time period, the response will be revalidated before
	// being served.
	// When serving responses to signed URL requests, Cloud CDN will
	// internally behave as though all responses from this backend had a
	// "Cache-Control: public, max-age=[TTL]" header, regardless of any
	// existing Cache-Control header. The actual headers served in
	// responses will not be altered.
	SignedUrlCacheMaxAgeSec *int `pulumi:"signedUrlCacheMaxAgeSec"`
}

// BackendServiceCdnPolicyInput is an input type that accepts BackendServiceCdnPolicyArgs and BackendServiceCdnPolicyOutput values.
// You can construct a concrete instance of `BackendServiceCdnPolicyInput` via:
//
// 		 BackendServiceCdnPolicyArgs{...}
//
type BackendServiceCdnPolicyInput interface {
	pulumi.Input

	ToBackendServiceCdnPolicyOutput() BackendServiceCdnPolicyOutput
	ToBackendServiceCdnPolicyOutputWithContext(context.Context) BackendServiceCdnPolicyOutput
}

type BackendServiceCdnPolicyArgs struct {
	// The CacheKeyPolicy for this CdnPolicy.  Structure is documented below.
	CacheKeyPolicy BackendServiceCdnPolicyCacheKeyPolicyPtrInput `pulumi:"cacheKeyPolicy"`
	// Maximum number of seconds the response to a signed URL request
	// will be considered fresh, defaults to 1hr (3600s). After this
	// time period, the response will be revalidated before
	// being served.
	// When serving responses to signed URL requests, Cloud CDN will
	// internally behave as though all responses from this backend had a
	// "Cache-Control: public, max-age=[TTL]" header, regardless of any
	// existing Cache-Control header. The actual headers served in
	// responses will not be altered.
	SignedUrlCacheMaxAgeSec pulumi.IntPtrInput `pulumi:"signedUrlCacheMaxAgeSec"`
}

func (BackendServiceCdnPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCdnPolicy)(nil)).Elem()
}

func (i BackendServiceCdnPolicyArgs) ToBackendServiceCdnPolicyOutput() BackendServiceCdnPolicyOutput {
	return i.ToBackendServiceCdnPolicyOutputWithContext(context.Background())
}

func (i BackendServiceCdnPolicyArgs) ToBackendServiceCdnPolicyOutputWithContext(ctx context.Context) BackendServiceCdnPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyOutput)
}

func (i BackendServiceCdnPolicyArgs) ToBackendServiceCdnPolicyPtrOutput() BackendServiceCdnPolicyPtrOutput {
	return i.ToBackendServiceCdnPolicyPtrOutputWithContext(context.Background())
}

func (i BackendServiceCdnPolicyArgs) ToBackendServiceCdnPolicyPtrOutputWithContext(ctx context.Context) BackendServiceCdnPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyOutput).ToBackendServiceCdnPolicyPtrOutputWithContext(ctx)
}

// BackendServiceCdnPolicyPtrInput is an input type that accepts BackendServiceCdnPolicyArgs, BackendServiceCdnPolicyPtr and BackendServiceCdnPolicyPtrOutput values.
// You can construct a concrete instance of `BackendServiceCdnPolicyPtrInput` via:
//
// 		 BackendServiceCdnPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type BackendServiceCdnPolicyPtrInput interface {
	pulumi.Input

	ToBackendServiceCdnPolicyPtrOutput() BackendServiceCdnPolicyPtrOutput
	ToBackendServiceCdnPolicyPtrOutputWithContext(context.Context) BackendServiceCdnPolicyPtrOutput
}

type backendServiceCdnPolicyPtrType BackendServiceCdnPolicyArgs

func BackendServiceCdnPolicyPtr(v *BackendServiceCdnPolicyArgs) BackendServiceCdnPolicyPtrInput {
	return (*backendServiceCdnPolicyPtrType)(v)
}

func (*backendServiceCdnPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceCdnPolicy)(nil)).Elem()
}

func (i *backendServiceCdnPolicyPtrType) ToBackendServiceCdnPolicyPtrOutput() BackendServiceCdnPolicyPtrOutput {
	return i.ToBackendServiceCdnPolicyPtrOutputWithContext(context.Background())
}

func (i *backendServiceCdnPolicyPtrType) ToBackendServiceCdnPolicyPtrOutputWithContext(ctx context.Context) BackendServiceCdnPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyPtrOutput)
}

type BackendServiceCdnPolicyOutput struct{ *pulumi.OutputState }

func (BackendServiceCdnPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCdnPolicy)(nil)).Elem()
}

func (o BackendServiceCdnPolicyOutput) ToBackendServiceCdnPolicyOutput() BackendServiceCdnPolicyOutput {
	return o
}

func (o BackendServiceCdnPolicyOutput) ToBackendServiceCdnPolicyOutputWithContext(ctx context.Context) BackendServiceCdnPolicyOutput {
	return o
}

func (o BackendServiceCdnPolicyOutput) ToBackendServiceCdnPolicyPtrOutput() BackendServiceCdnPolicyPtrOutput {
	return o.ToBackendServiceCdnPolicyPtrOutputWithContext(context.Background())
}

func (o BackendServiceCdnPolicyOutput) ToBackendServiceCdnPolicyPtrOutputWithContext(ctx context.Context) BackendServiceCdnPolicyPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicy) *BackendServiceCdnPolicy {
		return &v
	}).(BackendServiceCdnPolicyPtrOutput)
}

// The CacheKeyPolicy for this CdnPolicy.  Structure is documented below.
func (o BackendServiceCdnPolicyOutput) CacheKeyPolicy() BackendServiceCdnPolicyCacheKeyPolicyPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicy) *BackendServiceCdnPolicyCacheKeyPolicy { return v.CacheKeyPolicy }).(BackendServiceCdnPolicyCacheKeyPolicyPtrOutput)
}

// Maximum number of seconds the response to a signed URL request
// will be considered fresh, defaults to 1hr (3600s). After this
// time period, the response will be revalidated before
// being served.
// When serving responses to signed URL requests, Cloud CDN will
// internally behave as though all responses from this backend had a
// "Cache-Control: public, max-age=[TTL]" header, regardless of any
// existing Cache-Control header. The actual headers served in
// responses will not be altered.
func (o BackendServiceCdnPolicyOutput) SignedUrlCacheMaxAgeSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicy) *int { return v.SignedUrlCacheMaxAgeSec }).(pulumi.IntPtrOutput)
}

type BackendServiceCdnPolicyPtrOutput struct{ *pulumi.OutputState }

func (BackendServiceCdnPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceCdnPolicy)(nil)).Elem()
}

func (o BackendServiceCdnPolicyPtrOutput) ToBackendServiceCdnPolicyPtrOutput() BackendServiceCdnPolicyPtrOutput {
	return o
}

func (o BackendServiceCdnPolicyPtrOutput) ToBackendServiceCdnPolicyPtrOutputWithContext(ctx context.Context) BackendServiceCdnPolicyPtrOutput {
	return o
}

func (o BackendServiceCdnPolicyPtrOutput) Elem() BackendServiceCdnPolicyOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicy) BackendServiceCdnPolicy { return *v }).(BackendServiceCdnPolicyOutput)
}

// The CacheKeyPolicy for this CdnPolicy.  Structure is documented below.
func (o BackendServiceCdnPolicyPtrOutput) CacheKeyPolicy() BackendServiceCdnPolicyCacheKeyPolicyPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicy) *BackendServiceCdnPolicyCacheKeyPolicy {
		if v == nil {
			return nil
		}
		return v.CacheKeyPolicy
	}).(BackendServiceCdnPolicyCacheKeyPolicyPtrOutput)
}

// Maximum number of seconds the response to a signed URL request
// will be considered fresh, defaults to 1hr (3600s). After this
// time period, the response will be revalidated before
// being served.
// When serving responses to signed URL requests, Cloud CDN will
// internally behave as though all responses from this backend had a
// "Cache-Control: public, max-age=[TTL]" header, regardless of any
// existing Cache-Control header. The actual headers served in
// responses will not be altered.
func (o BackendServiceCdnPolicyPtrOutput) SignedUrlCacheMaxAgeSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicy) *int {
		if v == nil {
			return nil
		}
		return v.SignedUrlCacheMaxAgeSec
	}).(pulumi.IntPtrOutput)
}

type BackendServiceCdnPolicyCacheKeyPolicy struct {
	// If true requests to different hosts will be cached separately.
	IncludeHost *bool `pulumi:"includeHost"`
	// If true, http and https requests will be cached separately.
	IncludeProtocol *bool `pulumi:"includeProtocol"`
	// If true, include query string parameters in the cache key
	// according to queryStringWhitelist and
	// query_string_blacklist. If neither is set, the entire query
	// string will be included.
	// If false, the query string will be excluded from the cache
	// key entirely.
	IncludeQueryString *bool `pulumi:"includeQueryString"`
	// Names of query string parameters to exclude in cache keys.
	// All other parameters will be included. Either specify
	// queryStringWhitelist or query_string_blacklist, not both.
	// '&' and '=' will be percent encoded and not treated as
	// delimiters.
	QueryStringBlacklists []string `pulumi:"queryStringBlacklists"`
	// Names of query string parameters to include in cache keys.
	// All other parameters will be excluded. Either specify
	// queryStringWhitelist or query_string_blacklist, not both.
	// '&' and '=' will be percent encoded and not treated as
	// delimiters.
	QueryStringWhitelists []string `pulumi:"queryStringWhitelists"`
}

// BackendServiceCdnPolicyCacheKeyPolicyInput is an input type that accepts BackendServiceCdnPolicyCacheKeyPolicyArgs and BackendServiceCdnPolicyCacheKeyPolicyOutput values.
// You can construct a concrete instance of `BackendServiceCdnPolicyCacheKeyPolicyInput` via:
//
// 		 BackendServiceCdnPolicyCacheKeyPolicyArgs{...}
//
type BackendServiceCdnPolicyCacheKeyPolicyInput interface {
	pulumi.Input

	ToBackendServiceCdnPolicyCacheKeyPolicyOutput() BackendServiceCdnPolicyCacheKeyPolicyOutput
	ToBackendServiceCdnPolicyCacheKeyPolicyOutputWithContext(context.Context) BackendServiceCdnPolicyCacheKeyPolicyOutput
}

type BackendServiceCdnPolicyCacheKeyPolicyArgs struct {
	// If true requests to different hosts will be cached separately.
	IncludeHost pulumi.BoolPtrInput `pulumi:"includeHost"`
	// If true, http and https requests will be cached separately.
	IncludeProtocol pulumi.BoolPtrInput `pulumi:"includeProtocol"`
	// If true, include query string parameters in the cache key
	// according to queryStringWhitelist and
	// query_string_blacklist. If neither is set, the entire query
	// string will be included.
	// If false, the query string will be excluded from the cache
	// key entirely.
	IncludeQueryString pulumi.BoolPtrInput `pulumi:"includeQueryString"`
	// Names of query string parameters to exclude in cache keys.
	// All other parameters will be included. Either specify
	// queryStringWhitelist or query_string_blacklist, not both.
	// '&' and '=' will be percent encoded and not treated as
	// delimiters.
	QueryStringBlacklists pulumi.StringArrayInput `pulumi:"queryStringBlacklists"`
	// Names of query string parameters to include in cache keys.
	// All other parameters will be excluded. Either specify
	// queryStringWhitelist or query_string_blacklist, not both.
	// '&' and '=' will be percent encoded and not treated as
	// delimiters.
	QueryStringWhitelists pulumi.StringArrayInput `pulumi:"queryStringWhitelists"`
}

func (BackendServiceCdnPolicyCacheKeyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCdnPolicyCacheKeyPolicy)(nil)).Elem()
}

func (i BackendServiceCdnPolicyCacheKeyPolicyArgs) ToBackendServiceCdnPolicyCacheKeyPolicyOutput() BackendServiceCdnPolicyCacheKeyPolicyOutput {
	return i.ToBackendServiceCdnPolicyCacheKeyPolicyOutputWithContext(context.Background())
}

func (i BackendServiceCdnPolicyCacheKeyPolicyArgs) ToBackendServiceCdnPolicyCacheKeyPolicyOutputWithContext(ctx context.Context) BackendServiceCdnPolicyCacheKeyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyCacheKeyPolicyOutput)
}

func (i BackendServiceCdnPolicyCacheKeyPolicyArgs) ToBackendServiceCdnPolicyCacheKeyPolicyPtrOutput() BackendServiceCdnPolicyCacheKeyPolicyPtrOutput {
	return i.ToBackendServiceCdnPolicyCacheKeyPolicyPtrOutputWithContext(context.Background())
}

func (i BackendServiceCdnPolicyCacheKeyPolicyArgs) ToBackendServiceCdnPolicyCacheKeyPolicyPtrOutputWithContext(ctx context.Context) BackendServiceCdnPolicyCacheKeyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyCacheKeyPolicyOutput).ToBackendServiceCdnPolicyCacheKeyPolicyPtrOutputWithContext(ctx)
}

// BackendServiceCdnPolicyCacheKeyPolicyPtrInput is an input type that accepts BackendServiceCdnPolicyCacheKeyPolicyArgs, BackendServiceCdnPolicyCacheKeyPolicyPtr and BackendServiceCdnPolicyCacheKeyPolicyPtrOutput values.
// You can construct a concrete instance of `BackendServiceCdnPolicyCacheKeyPolicyPtrInput` via:
//
// 		 BackendServiceCdnPolicyCacheKeyPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type BackendServiceCdnPolicyCacheKeyPolicyPtrInput interface {
	pulumi.Input

	ToBackendServiceCdnPolicyCacheKeyPolicyPtrOutput() BackendServiceCdnPolicyCacheKeyPolicyPtrOutput
	ToBackendServiceCdnPolicyCacheKeyPolicyPtrOutputWithContext(context.Context) BackendServiceCdnPolicyCacheKeyPolicyPtrOutput
}

type backendServiceCdnPolicyCacheKeyPolicyPtrType BackendServiceCdnPolicyCacheKeyPolicyArgs

func BackendServiceCdnPolicyCacheKeyPolicyPtr(v *BackendServiceCdnPolicyCacheKeyPolicyArgs) BackendServiceCdnPolicyCacheKeyPolicyPtrInput {
	return (*backendServiceCdnPolicyCacheKeyPolicyPtrType)(v)
}

func (*backendServiceCdnPolicyCacheKeyPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceCdnPolicyCacheKeyPolicy)(nil)).Elem()
}

func (i *backendServiceCdnPolicyCacheKeyPolicyPtrType) ToBackendServiceCdnPolicyCacheKeyPolicyPtrOutput() BackendServiceCdnPolicyCacheKeyPolicyPtrOutput {
	return i.ToBackendServiceCdnPolicyCacheKeyPolicyPtrOutputWithContext(context.Background())
}

func (i *backendServiceCdnPolicyCacheKeyPolicyPtrType) ToBackendServiceCdnPolicyCacheKeyPolicyPtrOutputWithContext(ctx context.Context) BackendServiceCdnPolicyCacheKeyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyCacheKeyPolicyPtrOutput)
}

type BackendServiceCdnPolicyCacheKeyPolicyOutput struct{ *pulumi.OutputState }

func (BackendServiceCdnPolicyCacheKeyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCdnPolicyCacheKeyPolicy)(nil)).Elem()
}

func (o BackendServiceCdnPolicyCacheKeyPolicyOutput) ToBackendServiceCdnPolicyCacheKeyPolicyOutput() BackendServiceCdnPolicyCacheKeyPolicyOutput {
	return o
}

func (o BackendServiceCdnPolicyCacheKeyPolicyOutput) ToBackendServiceCdnPolicyCacheKeyPolicyOutputWithContext(ctx context.Context) BackendServiceCdnPolicyCacheKeyPolicyOutput {
	return o
}

func (o BackendServiceCdnPolicyCacheKeyPolicyOutput) ToBackendServiceCdnPolicyCacheKeyPolicyPtrOutput() BackendServiceCdnPolicyCacheKeyPolicyPtrOutput {
	return o.ToBackendServiceCdnPolicyCacheKeyPolicyPtrOutputWithContext(context.Background())
}

func (o BackendServiceCdnPolicyCacheKeyPolicyOutput) ToBackendServiceCdnPolicyCacheKeyPolicyPtrOutputWithContext(ctx context.Context) BackendServiceCdnPolicyCacheKeyPolicyPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyCacheKeyPolicy) *BackendServiceCdnPolicyCacheKeyPolicy {
		return &v
	}).(BackendServiceCdnPolicyCacheKeyPolicyPtrOutput)
}

// If true requests to different hosts will be cached separately.
func (o BackendServiceCdnPolicyCacheKeyPolicyOutput) IncludeHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyCacheKeyPolicy) *bool { return v.IncludeHost }).(pulumi.BoolPtrOutput)
}

// If true, http and https requests will be cached separately.
func (o BackendServiceCdnPolicyCacheKeyPolicyOutput) IncludeProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyCacheKeyPolicy) *bool { return v.IncludeProtocol }).(pulumi.BoolPtrOutput)
}

// If true, include query string parameters in the cache key
// according to queryStringWhitelist and
// query_string_blacklist. If neither is set, the entire query
// string will be included.
// If false, the query string will be excluded from the cache
// key entirely.
func (o BackendServiceCdnPolicyCacheKeyPolicyOutput) IncludeQueryString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyCacheKeyPolicy) *bool { return v.IncludeQueryString }).(pulumi.BoolPtrOutput)
}

// Names of query string parameters to exclude in cache keys.
// All other parameters will be included. Either specify
// queryStringWhitelist or query_string_blacklist, not both.
// '&' and '=' will be percent encoded and not treated as
// delimiters.
func (o BackendServiceCdnPolicyCacheKeyPolicyOutput) QueryStringBlacklists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyCacheKeyPolicy) []string { return v.QueryStringBlacklists }).(pulumi.StringArrayOutput)
}

// Names of query string parameters to include in cache keys.
// All other parameters will be excluded. Either specify
// queryStringWhitelist or query_string_blacklist, not both.
// '&' and '=' will be percent encoded and not treated as
// delimiters.
func (o BackendServiceCdnPolicyCacheKeyPolicyOutput) QueryStringWhitelists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyCacheKeyPolicy) []string { return v.QueryStringWhitelists }).(pulumi.StringArrayOutput)
}

type BackendServiceCdnPolicyCacheKeyPolicyPtrOutput struct{ *pulumi.OutputState }

func (BackendServiceCdnPolicyCacheKeyPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceCdnPolicyCacheKeyPolicy)(nil)).Elem()
}

func (o BackendServiceCdnPolicyCacheKeyPolicyPtrOutput) ToBackendServiceCdnPolicyCacheKeyPolicyPtrOutput() BackendServiceCdnPolicyCacheKeyPolicyPtrOutput {
	return o
}

func (o BackendServiceCdnPolicyCacheKeyPolicyPtrOutput) ToBackendServiceCdnPolicyCacheKeyPolicyPtrOutputWithContext(ctx context.Context) BackendServiceCdnPolicyCacheKeyPolicyPtrOutput {
	return o
}

func (o BackendServiceCdnPolicyCacheKeyPolicyPtrOutput) Elem() BackendServiceCdnPolicyCacheKeyPolicyOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyCacheKeyPolicy) BackendServiceCdnPolicyCacheKeyPolicy { return *v }).(BackendServiceCdnPolicyCacheKeyPolicyOutput)
}

// If true requests to different hosts will be cached separately.
func (o BackendServiceCdnPolicyCacheKeyPolicyPtrOutput) IncludeHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyCacheKeyPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeHost
	}).(pulumi.BoolPtrOutput)
}

// If true, http and https requests will be cached separately.
func (o BackendServiceCdnPolicyCacheKeyPolicyPtrOutput) IncludeProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyCacheKeyPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeProtocol
	}).(pulumi.BoolPtrOutput)
}

// If true, include query string parameters in the cache key
// according to queryStringWhitelist and
// query_string_blacklist. If neither is set, the entire query
// string will be included.
// If false, the query string will be excluded from the cache
// key entirely.
func (o BackendServiceCdnPolicyCacheKeyPolicyPtrOutput) IncludeQueryString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyCacheKeyPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeQueryString
	}).(pulumi.BoolPtrOutput)
}

// Names of query string parameters to exclude in cache keys.
// All other parameters will be included. Either specify
// queryStringWhitelist or query_string_blacklist, not both.
// '&' and '=' will be percent encoded and not treated as
// delimiters.
func (o BackendServiceCdnPolicyCacheKeyPolicyPtrOutput) QueryStringBlacklists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyCacheKeyPolicy) []string {
		if v == nil {
			return nil
		}
		return v.QueryStringBlacklists
	}).(pulumi.StringArrayOutput)
}

// Names of query string parameters to include in cache keys.
// All other parameters will be excluded. Either specify
// queryStringWhitelist or query_string_blacklist, not both.
// '&' and '=' will be percent encoded and not treated as
// delimiters.
func (o BackendServiceCdnPolicyCacheKeyPolicyPtrOutput) QueryStringWhitelists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyCacheKeyPolicy) []string {
		if v == nil {
			return nil
		}
		return v.QueryStringWhitelists
	}).(pulumi.StringArrayOutput)
}

type BackendServiceCircuitBreakers struct {
	// The timeout for new network connections to hosts.  Structure is documented below.
	ConnectTimeout *BackendServiceCircuitBreakersConnectTimeout `pulumi:"connectTimeout"`
	// The maximum number of connections to the backend cluster.
	// Defaults to 1024.
	MaxConnections *int `pulumi:"maxConnections"`
	// The maximum number of pending requests to the backend cluster.
	// Defaults to 1024.
	MaxPendingRequests *int `pulumi:"maxPendingRequests"`
	// The maximum number of parallel requests to the backend cluster.
	// Defaults to 1024.
	MaxRequests *int `pulumi:"maxRequests"`
	// Maximum requests for a single backend connection. This parameter
	// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
	// not specified, there is no limit. Setting this parameter to 1
	// will effectively disable keep alive.
	MaxRequestsPerConnection *int `pulumi:"maxRequestsPerConnection"`
	// The maximum number of parallel retries to the backend cluster.
	// Defaults to 3.
	MaxRetries *int `pulumi:"maxRetries"`
}

// BackendServiceCircuitBreakersInput is an input type that accepts BackendServiceCircuitBreakersArgs and BackendServiceCircuitBreakersOutput values.
// You can construct a concrete instance of `BackendServiceCircuitBreakersInput` via:
//
// 		 BackendServiceCircuitBreakersArgs{...}
//
type BackendServiceCircuitBreakersInput interface {
	pulumi.Input

	ToBackendServiceCircuitBreakersOutput() BackendServiceCircuitBreakersOutput
	ToBackendServiceCircuitBreakersOutputWithContext(context.Context) BackendServiceCircuitBreakersOutput
}

type BackendServiceCircuitBreakersArgs struct {
	// The timeout for new network connections to hosts.  Structure is documented below.
	ConnectTimeout BackendServiceCircuitBreakersConnectTimeoutPtrInput `pulumi:"connectTimeout"`
	// The maximum number of connections to the backend cluster.
	// Defaults to 1024.
	MaxConnections pulumi.IntPtrInput `pulumi:"maxConnections"`
	// The maximum number of pending requests to the backend cluster.
	// Defaults to 1024.
	MaxPendingRequests pulumi.IntPtrInput `pulumi:"maxPendingRequests"`
	// The maximum number of parallel requests to the backend cluster.
	// Defaults to 1024.
	MaxRequests pulumi.IntPtrInput `pulumi:"maxRequests"`
	// Maximum requests for a single backend connection. This parameter
	// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
	// not specified, there is no limit. Setting this parameter to 1
	// will effectively disable keep alive.
	MaxRequestsPerConnection pulumi.IntPtrInput `pulumi:"maxRequestsPerConnection"`
	// The maximum number of parallel retries to the backend cluster.
	// Defaults to 3.
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
}

func (BackendServiceCircuitBreakersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCircuitBreakers)(nil)).Elem()
}

func (i BackendServiceCircuitBreakersArgs) ToBackendServiceCircuitBreakersOutput() BackendServiceCircuitBreakersOutput {
	return i.ToBackendServiceCircuitBreakersOutputWithContext(context.Background())
}

func (i BackendServiceCircuitBreakersArgs) ToBackendServiceCircuitBreakersOutputWithContext(ctx context.Context) BackendServiceCircuitBreakersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCircuitBreakersOutput)
}

func (i BackendServiceCircuitBreakersArgs) ToBackendServiceCircuitBreakersPtrOutput() BackendServiceCircuitBreakersPtrOutput {
	return i.ToBackendServiceCircuitBreakersPtrOutputWithContext(context.Background())
}

func (i BackendServiceCircuitBreakersArgs) ToBackendServiceCircuitBreakersPtrOutputWithContext(ctx context.Context) BackendServiceCircuitBreakersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCircuitBreakersOutput).ToBackendServiceCircuitBreakersPtrOutputWithContext(ctx)
}

// BackendServiceCircuitBreakersPtrInput is an input type that accepts BackendServiceCircuitBreakersArgs, BackendServiceCircuitBreakersPtr and BackendServiceCircuitBreakersPtrOutput values.
// You can construct a concrete instance of `BackendServiceCircuitBreakersPtrInput` via:
//
// 		 BackendServiceCircuitBreakersArgs{...}
//
//  or:
//
// 		 nil
//
type BackendServiceCircuitBreakersPtrInput interface {
	pulumi.Input

	ToBackendServiceCircuitBreakersPtrOutput() BackendServiceCircuitBreakersPtrOutput
	ToBackendServiceCircuitBreakersPtrOutputWithContext(context.Context) BackendServiceCircuitBreakersPtrOutput
}

type backendServiceCircuitBreakersPtrType BackendServiceCircuitBreakersArgs

func BackendServiceCircuitBreakersPtr(v *BackendServiceCircuitBreakersArgs) BackendServiceCircuitBreakersPtrInput {
	return (*backendServiceCircuitBreakersPtrType)(v)
}

func (*backendServiceCircuitBreakersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceCircuitBreakers)(nil)).Elem()
}

func (i *backendServiceCircuitBreakersPtrType) ToBackendServiceCircuitBreakersPtrOutput() BackendServiceCircuitBreakersPtrOutput {
	return i.ToBackendServiceCircuitBreakersPtrOutputWithContext(context.Background())
}

func (i *backendServiceCircuitBreakersPtrType) ToBackendServiceCircuitBreakersPtrOutputWithContext(ctx context.Context) BackendServiceCircuitBreakersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCircuitBreakersPtrOutput)
}

type BackendServiceCircuitBreakersOutput struct{ *pulumi.OutputState }

func (BackendServiceCircuitBreakersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCircuitBreakers)(nil)).Elem()
}

func (o BackendServiceCircuitBreakersOutput) ToBackendServiceCircuitBreakersOutput() BackendServiceCircuitBreakersOutput {
	return o
}

func (o BackendServiceCircuitBreakersOutput) ToBackendServiceCircuitBreakersOutputWithContext(ctx context.Context) BackendServiceCircuitBreakersOutput {
	return o
}

func (o BackendServiceCircuitBreakersOutput) ToBackendServiceCircuitBreakersPtrOutput() BackendServiceCircuitBreakersPtrOutput {
	return o.ToBackendServiceCircuitBreakersPtrOutputWithContext(context.Background())
}

func (o BackendServiceCircuitBreakersOutput) ToBackendServiceCircuitBreakersPtrOutputWithContext(ctx context.Context) BackendServiceCircuitBreakersPtrOutput {
	return o.ApplyT(func(v BackendServiceCircuitBreakers) *BackendServiceCircuitBreakers {
		return &v
	}).(BackendServiceCircuitBreakersPtrOutput)
}

// The timeout for new network connections to hosts.  Structure is documented below.
func (o BackendServiceCircuitBreakersOutput) ConnectTimeout() BackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return o.ApplyT(func(v BackendServiceCircuitBreakers) *BackendServiceCircuitBreakersConnectTimeout {
		return v.ConnectTimeout
	}).(BackendServiceCircuitBreakersConnectTimeoutPtrOutput)
}

// The maximum number of connections to the backend cluster.
// Defaults to 1024.
func (o BackendServiceCircuitBreakersOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceCircuitBreakers) *int { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of pending requests to the backend cluster.
// Defaults to 1024.
func (o BackendServiceCircuitBreakersOutput) MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceCircuitBreakers) *int { return v.MaxPendingRequests }).(pulumi.IntPtrOutput)
}

// The maximum number of parallel requests to the backend cluster.
// Defaults to 1024.
func (o BackendServiceCircuitBreakersOutput) MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceCircuitBreakers) *int { return v.MaxRequests }).(pulumi.IntPtrOutput)
}

// Maximum requests for a single backend connection. This parameter
// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
// not specified, there is no limit. Setting this parameter to 1
// will effectively disable keep alive.
func (o BackendServiceCircuitBreakersOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceCircuitBreakers) *int { return v.MaxRequestsPerConnection }).(pulumi.IntPtrOutput)
}

// The maximum number of parallel retries to the backend cluster.
// Defaults to 3.
func (o BackendServiceCircuitBreakersOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceCircuitBreakers) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

type BackendServiceCircuitBreakersPtrOutput struct{ *pulumi.OutputState }

func (BackendServiceCircuitBreakersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceCircuitBreakers)(nil)).Elem()
}

func (o BackendServiceCircuitBreakersPtrOutput) ToBackendServiceCircuitBreakersPtrOutput() BackendServiceCircuitBreakersPtrOutput {
	return o
}

func (o BackendServiceCircuitBreakersPtrOutput) ToBackendServiceCircuitBreakersPtrOutputWithContext(ctx context.Context) BackendServiceCircuitBreakersPtrOutput {
	return o
}

func (o BackendServiceCircuitBreakersPtrOutput) Elem() BackendServiceCircuitBreakersOutput {
	return o.ApplyT(func(v *BackendServiceCircuitBreakers) BackendServiceCircuitBreakers { return *v }).(BackendServiceCircuitBreakersOutput)
}

// The timeout for new network connections to hosts.  Structure is documented below.
func (o BackendServiceCircuitBreakersPtrOutput) ConnectTimeout() BackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return o.ApplyT(func(v *BackendServiceCircuitBreakers) *BackendServiceCircuitBreakersConnectTimeout {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(BackendServiceCircuitBreakersConnectTimeoutPtrOutput)
}

// The maximum number of connections to the backend cluster.
// Defaults to 1024.
func (o BackendServiceCircuitBreakersPtrOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceCircuitBreakers) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of pending requests to the backend cluster.
// Defaults to 1024.
func (o BackendServiceCircuitBreakersPtrOutput) MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceCircuitBreakers) *int {
		if v == nil {
			return nil
		}
		return v.MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// The maximum number of parallel requests to the backend cluster.
// Defaults to 1024.
func (o BackendServiceCircuitBreakersPtrOutput) MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceCircuitBreakers) *int {
		if v == nil {
			return nil
		}
		return v.MaxRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum requests for a single backend connection. This parameter
// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
// not specified, there is no limit. Setting this parameter to 1
// will effectively disable keep alive.
func (o BackendServiceCircuitBreakersPtrOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceCircuitBreakers) *int {
		if v == nil {
			return nil
		}
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

// The maximum number of parallel retries to the backend cluster.
// Defaults to 3.
func (o BackendServiceCircuitBreakersPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceCircuitBreakers) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

type BackendServiceCircuitBreakersConnectTimeout struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds int `pulumi:"seconds"`
}

// BackendServiceCircuitBreakersConnectTimeoutInput is an input type that accepts BackendServiceCircuitBreakersConnectTimeoutArgs and BackendServiceCircuitBreakersConnectTimeoutOutput values.
// You can construct a concrete instance of `BackendServiceCircuitBreakersConnectTimeoutInput` via:
//
// 		 BackendServiceCircuitBreakersConnectTimeoutArgs{...}
//
type BackendServiceCircuitBreakersConnectTimeoutInput interface {
	pulumi.Input

	ToBackendServiceCircuitBreakersConnectTimeoutOutput() BackendServiceCircuitBreakersConnectTimeoutOutput
	ToBackendServiceCircuitBreakersConnectTimeoutOutputWithContext(context.Context) BackendServiceCircuitBreakersConnectTimeoutOutput
}

type BackendServiceCircuitBreakersConnectTimeoutArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.IntInput `pulumi:"seconds"`
}

func (BackendServiceCircuitBreakersConnectTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCircuitBreakersConnectTimeout)(nil)).Elem()
}

func (i BackendServiceCircuitBreakersConnectTimeoutArgs) ToBackendServiceCircuitBreakersConnectTimeoutOutput() BackendServiceCircuitBreakersConnectTimeoutOutput {
	return i.ToBackendServiceCircuitBreakersConnectTimeoutOutputWithContext(context.Background())
}

func (i BackendServiceCircuitBreakersConnectTimeoutArgs) ToBackendServiceCircuitBreakersConnectTimeoutOutputWithContext(ctx context.Context) BackendServiceCircuitBreakersConnectTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCircuitBreakersConnectTimeoutOutput)
}

func (i BackendServiceCircuitBreakersConnectTimeoutArgs) ToBackendServiceCircuitBreakersConnectTimeoutPtrOutput() BackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return i.ToBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(context.Background())
}

func (i BackendServiceCircuitBreakersConnectTimeoutArgs) ToBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(ctx context.Context) BackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCircuitBreakersConnectTimeoutOutput).ToBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(ctx)
}

// BackendServiceCircuitBreakersConnectTimeoutPtrInput is an input type that accepts BackendServiceCircuitBreakersConnectTimeoutArgs, BackendServiceCircuitBreakersConnectTimeoutPtr and BackendServiceCircuitBreakersConnectTimeoutPtrOutput values.
// You can construct a concrete instance of `BackendServiceCircuitBreakersConnectTimeoutPtrInput` via:
//
// 		 BackendServiceCircuitBreakersConnectTimeoutArgs{...}
//
//  or:
//
// 		 nil
//
type BackendServiceCircuitBreakersConnectTimeoutPtrInput interface {
	pulumi.Input

	ToBackendServiceCircuitBreakersConnectTimeoutPtrOutput() BackendServiceCircuitBreakersConnectTimeoutPtrOutput
	ToBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(context.Context) BackendServiceCircuitBreakersConnectTimeoutPtrOutput
}

type backendServiceCircuitBreakersConnectTimeoutPtrType BackendServiceCircuitBreakersConnectTimeoutArgs

func BackendServiceCircuitBreakersConnectTimeoutPtr(v *BackendServiceCircuitBreakersConnectTimeoutArgs) BackendServiceCircuitBreakersConnectTimeoutPtrInput {
	return (*backendServiceCircuitBreakersConnectTimeoutPtrType)(v)
}

func (*backendServiceCircuitBreakersConnectTimeoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceCircuitBreakersConnectTimeout)(nil)).Elem()
}

func (i *backendServiceCircuitBreakersConnectTimeoutPtrType) ToBackendServiceCircuitBreakersConnectTimeoutPtrOutput() BackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return i.ToBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(context.Background())
}

func (i *backendServiceCircuitBreakersConnectTimeoutPtrType) ToBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(ctx context.Context) BackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCircuitBreakersConnectTimeoutPtrOutput)
}

type BackendServiceCircuitBreakersConnectTimeoutOutput struct{ *pulumi.OutputState }

func (BackendServiceCircuitBreakersConnectTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCircuitBreakersConnectTimeout)(nil)).Elem()
}

func (o BackendServiceCircuitBreakersConnectTimeoutOutput) ToBackendServiceCircuitBreakersConnectTimeoutOutput() BackendServiceCircuitBreakersConnectTimeoutOutput {
	return o
}

func (o BackendServiceCircuitBreakersConnectTimeoutOutput) ToBackendServiceCircuitBreakersConnectTimeoutOutputWithContext(ctx context.Context) BackendServiceCircuitBreakersConnectTimeoutOutput {
	return o
}

func (o BackendServiceCircuitBreakersConnectTimeoutOutput) ToBackendServiceCircuitBreakersConnectTimeoutPtrOutput() BackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return o.ToBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(context.Background())
}

func (o BackendServiceCircuitBreakersConnectTimeoutOutput) ToBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(ctx context.Context) BackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return o.ApplyT(func(v BackendServiceCircuitBreakersConnectTimeout) *BackendServiceCircuitBreakersConnectTimeout {
		return &v
	}).(BackendServiceCircuitBreakersConnectTimeoutPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o BackendServiceCircuitBreakersConnectTimeoutOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceCircuitBreakersConnectTimeout) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o BackendServiceCircuitBreakersConnectTimeoutOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v BackendServiceCircuitBreakersConnectTimeout) int { return v.Seconds }).(pulumi.IntOutput)
}

type BackendServiceCircuitBreakersConnectTimeoutPtrOutput struct{ *pulumi.OutputState }

func (BackendServiceCircuitBreakersConnectTimeoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceCircuitBreakersConnectTimeout)(nil)).Elem()
}

func (o BackendServiceCircuitBreakersConnectTimeoutPtrOutput) ToBackendServiceCircuitBreakersConnectTimeoutPtrOutput() BackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return o
}

func (o BackendServiceCircuitBreakersConnectTimeoutPtrOutput) ToBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(ctx context.Context) BackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return o
}

func (o BackendServiceCircuitBreakersConnectTimeoutPtrOutput) Elem() BackendServiceCircuitBreakersConnectTimeoutOutput {
	return o.ApplyT(func(v *BackendServiceCircuitBreakersConnectTimeout) BackendServiceCircuitBreakersConnectTimeout {
		return *v
	}).(BackendServiceCircuitBreakersConnectTimeoutOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o BackendServiceCircuitBreakersConnectTimeoutPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceCircuitBreakersConnectTimeout) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o BackendServiceCircuitBreakersConnectTimeoutPtrOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceCircuitBreakersConnectTimeout) *int {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.IntPtrOutput)
}

type BackendServiceConsistentHash struct {
	// Hash is based on HTTP Cookie. This field describes a HTTP cookie
	// that will be used as the hash key for the consistent hash load
	// balancer. If the cookie is not present, it will be generated.
	// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.  Structure is documented below.
	HttpCookie *BackendServiceConsistentHashHttpCookie `pulumi:"httpCookie"`
	// The hash based on the value of the specified header field.
	// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
	HttpHeaderName *string `pulumi:"httpHeaderName"`
	// The minimum number of virtual nodes to use for the hash ring.
	// Larger ring sizes result in more granular load
	// distributions. If the number of hosts in the load balancing pool
	// is larger than the ring size, each host will be assigned a single
	// virtual node.
	// Defaults to 1024.
	MinimumRingSize *int `pulumi:"minimumRingSize"`
}

// BackendServiceConsistentHashInput is an input type that accepts BackendServiceConsistentHashArgs and BackendServiceConsistentHashOutput values.
// You can construct a concrete instance of `BackendServiceConsistentHashInput` via:
//
// 		 BackendServiceConsistentHashArgs{...}
//
type BackendServiceConsistentHashInput interface {
	pulumi.Input

	ToBackendServiceConsistentHashOutput() BackendServiceConsistentHashOutput
	ToBackendServiceConsistentHashOutputWithContext(context.Context) BackendServiceConsistentHashOutput
}

type BackendServiceConsistentHashArgs struct {
	// Hash is based on HTTP Cookie. This field describes a HTTP cookie
	// that will be used as the hash key for the consistent hash load
	// balancer. If the cookie is not present, it will be generated.
	// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.  Structure is documented below.
	HttpCookie BackendServiceConsistentHashHttpCookiePtrInput `pulumi:"httpCookie"`
	// The hash based on the value of the specified header field.
	// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
	HttpHeaderName pulumi.StringPtrInput `pulumi:"httpHeaderName"`
	// The minimum number of virtual nodes to use for the hash ring.
	// Larger ring sizes result in more granular load
	// distributions. If the number of hosts in the load balancing pool
	// is larger than the ring size, each host will be assigned a single
	// virtual node.
	// Defaults to 1024.
	MinimumRingSize pulumi.IntPtrInput `pulumi:"minimumRingSize"`
}

func (BackendServiceConsistentHashArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceConsistentHash)(nil)).Elem()
}

func (i BackendServiceConsistentHashArgs) ToBackendServiceConsistentHashOutput() BackendServiceConsistentHashOutput {
	return i.ToBackendServiceConsistentHashOutputWithContext(context.Background())
}

func (i BackendServiceConsistentHashArgs) ToBackendServiceConsistentHashOutputWithContext(ctx context.Context) BackendServiceConsistentHashOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceConsistentHashOutput)
}

func (i BackendServiceConsistentHashArgs) ToBackendServiceConsistentHashPtrOutput() BackendServiceConsistentHashPtrOutput {
	return i.ToBackendServiceConsistentHashPtrOutputWithContext(context.Background())
}

func (i BackendServiceConsistentHashArgs) ToBackendServiceConsistentHashPtrOutputWithContext(ctx context.Context) BackendServiceConsistentHashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceConsistentHashOutput).ToBackendServiceConsistentHashPtrOutputWithContext(ctx)
}

// BackendServiceConsistentHashPtrInput is an input type that accepts BackendServiceConsistentHashArgs, BackendServiceConsistentHashPtr and BackendServiceConsistentHashPtrOutput values.
// You can construct a concrete instance of `BackendServiceConsistentHashPtrInput` via:
//
// 		 BackendServiceConsistentHashArgs{...}
//
//  or:
//
// 		 nil
//
type BackendServiceConsistentHashPtrInput interface {
	pulumi.Input

	ToBackendServiceConsistentHashPtrOutput() BackendServiceConsistentHashPtrOutput
	ToBackendServiceConsistentHashPtrOutputWithContext(context.Context) BackendServiceConsistentHashPtrOutput
}

type backendServiceConsistentHashPtrType BackendServiceConsistentHashArgs

func BackendServiceConsistentHashPtr(v *BackendServiceConsistentHashArgs) BackendServiceConsistentHashPtrInput {
	return (*backendServiceConsistentHashPtrType)(v)
}

func (*backendServiceConsistentHashPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceConsistentHash)(nil)).Elem()
}

func (i *backendServiceConsistentHashPtrType) ToBackendServiceConsistentHashPtrOutput() BackendServiceConsistentHashPtrOutput {
	return i.ToBackendServiceConsistentHashPtrOutputWithContext(context.Background())
}

func (i *backendServiceConsistentHashPtrType) ToBackendServiceConsistentHashPtrOutputWithContext(ctx context.Context) BackendServiceConsistentHashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceConsistentHashPtrOutput)
}

type BackendServiceConsistentHashOutput struct{ *pulumi.OutputState }

func (BackendServiceConsistentHashOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceConsistentHash)(nil)).Elem()
}

func (o BackendServiceConsistentHashOutput) ToBackendServiceConsistentHashOutput() BackendServiceConsistentHashOutput {
	return o
}

func (o BackendServiceConsistentHashOutput) ToBackendServiceConsistentHashOutputWithContext(ctx context.Context) BackendServiceConsistentHashOutput {
	return o
}

func (o BackendServiceConsistentHashOutput) ToBackendServiceConsistentHashPtrOutput() BackendServiceConsistentHashPtrOutput {
	return o.ToBackendServiceConsistentHashPtrOutputWithContext(context.Background())
}

func (o BackendServiceConsistentHashOutput) ToBackendServiceConsistentHashPtrOutputWithContext(ctx context.Context) BackendServiceConsistentHashPtrOutput {
	return o.ApplyT(func(v BackendServiceConsistentHash) *BackendServiceConsistentHash {
		return &v
	}).(BackendServiceConsistentHashPtrOutput)
}

// Hash is based on HTTP Cookie. This field describes a HTTP cookie
// that will be used as the hash key for the consistent hash load
// balancer. If the cookie is not present, it will be generated.
// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.  Structure is documented below.
func (o BackendServiceConsistentHashOutput) HttpCookie() BackendServiceConsistentHashHttpCookiePtrOutput {
	return o.ApplyT(func(v BackendServiceConsistentHash) *BackendServiceConsistentHashHttpCookie { return v.HttpCookie }).(BackendServiceConsistentHashHttpCookiePtrOutput)
}

// The hash based on the value of the specified header field.
// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
func (o BackendServiceConsistentHashOutput) HttpHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendServiceConsistentHash) *string { return v.HttpHeaderName }).(pulumi.StringPtrOutput)
}

// The minimum number of virtual nodes to use for the hash ring.
// Larger ring sizes result in more granular load
// distributions. If the number of hosts in the load balancing pool
// is larger than the ring size, each host will be assigned a single
// virtual node.
// Defaults to 1024.
func (o BackendServiceConsistentHashOutput) MinimumRingSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceConsistentHash) *int { return v.MinimumRingSize }).(pulumi.IntPtrOutput)
}

type BackendServiceConsistentHashPtrOutput struct{ *pulumi.OutputState }

func (BackendServiceConsistentHashPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceConsistentHash)(nil)).Elem()
}

func (o BackendServiceConsistentHashPtrOutput) ToBackendServiceConsistentHashPtrOutput() BackendServiceConsistentHashPtrOutput {
	return o
}

func (o BackendServiceConsistentHashPtrOutput) ToBackendServiceConsistentHashPtrOutputWithContext(ctx context.Context) BackendServiceConsistentHashPtrOutput {
	return o
}

func (o BackendServiceConsistentHashPtrOutput) Elem() BackendServiceConsistentHashOutput {
	return o.ApplyT(func(v *BackendServiceConsistentHash) BackendServiceConsistentHash { return *v }).(BackendServiceConsistentHashOutput)
}

// Hash is based on HTTP Cookie. This field describes a HTTP cookie
// that will be used as the hash key for the consistent hash load
// balancer. If the cookie is not present, it will be generated.
// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.  Structure is documented below.
func (o BackendServiceConsistentHashPtrOutput) HttpCookie() BackendServiceConsistentHashHttpCookiePtrOutput {
	return o.ApplyT(func(v *BackendServiceConsistentHash) *BackendServiceConsistentHashHttpCookie {
		if v == nil {
			return nil
		}
		return v.HttpCookie
	}).(BackendServiceConsistentHashHttpCookiePtrOutput)
}

// The hash based on the value of the specified header field.
// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
func (o BackendServiceConsistentHashPtrOutput) HttpHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceConsistentHash) *string {
		if v == nil {
			return nil
		}
		return v.HttpHeaderName
	}).(pulumi.StringPtrOutput)
}

// The minimum number of virtual nodes to use for the hash ring.
// Larger ring sizes result in more granular load
// distributions. If the number of hosts in the load balancing pool
// is larger than the ring size, each host will be assigned a single
// virtual node.
// Defaults to 1024.
func (o BackendServiceConsistentHashPtrOutput) MinimumRingSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceConsistentHash) *int {
		if v == nil {
			return nil
		}
		return v.MinimumRingSize
	}).(pulumi.IntPtrOutput)
}

type BackendServiceConsistentHashHttpCookie struct {
	// Name of the cookie.
	Name *string `pulumi:"name"`
	// Path to set for the cookie.
	Path *string `pulumi:"path"`
	// Lifetime of the cookie.  Structure is documented below.
	Ttl *BackendServiceConsistentHashHttpCookieTtl `pulumi:"ttl"`
}

// BackendServiceConsistentHashHttpCookieInput is an input type that accepts BackendServiceConsistentHashHttpCookieArgs and BackendServiceConsistentHashHttpCookieOutput values.
// You can construct a concrete instance of `BackendServiceConsistentHashHttpCookieInput` via:
//
// 		 BackendServiceConsistentHashHttpCookieArgs{...}
//
type BackendServiceConsistentHashHttpCookieInput interface {
	pulumi.Input

	ToBackendServiceConsistentHashHttpCookieOutput() BackendServiceConsistentHashHttpCookieOutput
	ToBackendServiceConsistentHashHttpCookieOutputWithContext(context.Context) BackendServiceConsistentHashHttpCookieOutput
}

type BackendServiceConsistentHashHttpCookieArgs struct {
	// Name of the cookie.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path to set for the cookie.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Lifetime of the cookie.  Structure is documented below.
	Ttl BackendServiceConsistentHashHttpCookieTtlPtrInput `pulumi:"ttl"`
}

func (BackendServiceConsistentHashHttpCookieArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceConsistentHashHttpCookie)(nil)).Elem()
}

func (i BackendServiceConsistentHashHttpCookieArgs) ToBackendServiceConsistentHashHttpCookieOutput() BackendServiceConsistentHashHttpCookieOutput {
	return i.ToBackendServiceConsistentHashHttpCookieOutputWithContext(context.Background())
}

func (i BackendServiceConsistentHashHttpCookieArgs) ToBackendServiceConsistentHashHttpCookieOutputWithContext(ctx context.Context) BackendServiceConsistentHashHttpCookieOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceConsistentHashHttpCookieOutput)
}

func (i BackendServiceConsistentHashHttpCookieArgs) ToBackendServiceConsistentHashHttpCookiePtrOutput() BackendServiceConsistentHashHttpCookiePtrOutput {
	return i.ToBackendServiceConsistentHashHttpCookiePtrOutputWithContext(context.Background())
}

func (i BackendServiceConsistentHashHttpCookieArgs) ToBackendServiceConsistentHashHttpCookiePtrOutputWithContext(ctx context.Context) BackendServiceConsistentHashHttpCookiePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceConsistentHashHttpCookieOutput).ToBackendServiceConsistentHashHttpCookiePtrOutputWithContext(ctx)
}

// BackendServiceConsistentHashHttpCookiePtrInput is an input type that accepts BackendServiceConsistentHashHttpCookieArgs, BackendServiceConsistentHashHttpCookiePtr and BackendServiceConsistentHashHttpCookiePtrOutput values.
// You can construct a concrete instance of `BackendServiceConsistentHashHttpCookiePtrInput` via:
//
// 		 BackendServiceConsistentHashHttpCookieArgs{...}
//
//  or:
//
// 		 nil
//
type BackendServiceConsistentHashHttpCookiePtrInput interface {
	pulumi.Input

	ToBackendServiceConsistentHashHttpCookiePtrOutput() BackendServiceConsistentHashHttpCookiePtrOutput
	ToBackendServiceConsistentHashHttpCookiePtrOutputWithContext(context.Context) BackendServiceConsistentHashHttpCookiePtrOutput
}

type backendServiceConsistentHashHttpCookiePtrType BackendServiceConsistentHashHttpCookieArgs

func BackendServiceConsistentHashHttpCookiePtr(v *BackendServiceConsistentHashHttpCookieArgs) BackendServiceConsistentHashHttpCookiePtrInput {
	return (*backendServiceConsistentHashHttpCookiePtrType)(v)
}

func (*backendServiceConsistentHashHttpCookiePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceConsistentHashHttpCookie)(nil)).Elem()
}

func (i *backendServiceConsistentHashHttpCookiePtrType) ToBackendServiceConsistentHashHttpCookiePtrOutput() BackendServiceConsistentHashHttpCookiePtrOutput {
	return i.ToBackendServiceConsistentHashHttpCookiePtrOutputWithContext(context.Background())
}

func (i *backendServiceConsistentHashHttpCookiePtrType) ToBackendServiceConsistentHashHttpCookiePtrOutputWithContext(ctx context.Context) BackendServiceConsistentHashHttpCookiePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceConsistentHashHttpCookiePtrOutput)
}

type BackendServiceConsistentHashHttpCookieOutput struct{ *pulumi.OutputState }

func (BackendServiceConsistentHashHttpCookieOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceConsistentHashHttpCookie)(nil)).Elem()
}

func (o BackendServiceConsistentHashHttpCookieOutput) ToBackendServiceConsistentHashHttpCookieOutput() BackendServiceConsistentHashHttpCookieOutput {
	return o
}

func (o BackendServiceConsistentHashHttpCookieOutput) ToBackendServiceConsistentHashHttpCookieOutputWithContext(ctx context.Context) BackendServiceConsistentHashHttpCookieOutput {
	return o
}

func (o BackendServiceConsistentHashHttpCookieOutput) ToBackendServiceConsistentHashHttpCookiePtrOutput() BackendServiceConsistentHashHttpCookiePtrOutput {
	return o.ToBackendServiceConsistentHashHttpCookiePtrOutputWithContext(context.Background())
}

func (o BackendServiceConsistentHashHttpCookieOutput) ToBackendServiceConsistentHashHttpCookiePtrOutputWithContext(ctx context.Context) BackendServiceConsistentHashHttpCookiePtrOutput {
	return o.ApplyT(func(v BackendServiceConsistentHashHttpCookie) *BackendServiceConsistentHashHttpCookie {
		return &v
	}).(BackendServiceConsistentHashHttpCookiePtrOutput)
}

// Name of the cookie.
func (o BackendServiceConsistentHashHttpCookieOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendServiceConsistentHashHttpCookie) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path to set for the cookie.
func (o BackendServiceConsistentHashHttpCookieOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendServiceConsistentHashHttpCookie) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Lifetime of the cookie.  Structure is documented below.
func (o BackendServiceConsistentHashHttpCookieOutput) Ttl() BackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return o.ApplyT(func(v BackendServiceConsistentHashHttpCookie) *BackendServiceConsistentHashHttpCookieTtl {
		return v.Ttl
	}).(BackendServiceConsistentHashHttpCookieTtlPtrOutput)
}

type BackendServiceConsistentHashHttpCookiePtrOutput struct{ *pulumi.OutputState }

func (BackendServiceConsistentHashHttpCookiePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceConsistentHashHttpCookie)(nil)).Elem()
}

func (o BackendServiceConsistentHashHttpCookiePtrOutput) ToBackendServiceConsistentHashHttpCookiePtrOutput() BackendServiceConsistentHashHttpCookiePtrOutput {
	return o
}

func (o BackendServiceConsistentHashHttpCookiePtrOutput) ToBackendServiceConsistentHashHttpCookiePtrOutputWithContext(ctx context.Context) BackendServiceConsistentHashHttpCookiePtrOutput {
	return o
}

func (o BackendServiceConsistentHashHttpCookiePtrOutput) Elem() BackendServiceConsistentHashHttpCookieOutput {
	return o.ApplyT(func(v *BackendServiceConsistentHashHttpCookie) BackendServiceConsistentHashHttpCookie { return *v }).(BackendServiceConsistentHashHttpCookieOutput)
}

// Name of the cookie.
func (o BackendServiceConsistentHashHttpCookiePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceConsistentHashHttpCookie) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Path to set for the cookie.
func (o BackendServiceConsistentHashHttpCookiePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceConsistentHashHttpCookie) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Lifetime of the cookie.  Structure is documented below.
func (o BackendServiceConsistentHashHttpCookiePtrOutput) Ttl() BackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return o.ApplyT(func(v *BackendServiceConsistentHashHttpCookie) *BackendServiceConsistentHashHttpCookieTtl {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(BackendServiceConsistentHashHttpCookieTtlPtrOutput)
}

type BackendServiceConsistentHashHttpCookieTtl struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds int `pulumi:"seconds"`
}

// BackendServiceConsistentHashHttpCookieTtlInput is an input type that accepts BackendServiceConsistentHashHttpCookieTtlArgs and BackendServiceConsistentHashHttpCookieTtlOutput values.
// You can construct a concrete instance of `BackendServiceConsistentHashHttpCookieTtlInput` via:
//
// 		 BackendServiceConsistentHashHttpCookieTtlArgs{...}
//
type BackendServiceConsistentHashHttpCookieTtlInput interface {
	pulumi.Input

	ToBackendServiceConsistentHashHttpCookieTtlOutput() BackendServiceConsistentHashHttpCookieTtlOutput
	ToBackendServiceConsistentHashHttpCookieTtlOutputWithContext(context.Context) BackendServiceConsistentHashHttpCookieTtlOutput
}

type BackendServiceConsistentHashHttpCookieTtlArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.IntInput `pulumi:"seconds"`
}

func (BackendServiceConsistentHashHttpCookieTtlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceConsistentHashHttpCookieTtl)(nil)).Elem()
}

func (i BackendServiceConsistentHashHttpCookieTtlArgs) ToBackendServiceConsistentHashHttpCookieTtlOutput() BackendServiceConsistentHashHttpCookieTtlOutput {
	return i.ToBackendServiceConsistentHashHttpCookieTtlOutputWithContext(context.Background())
}

func (i BackendServiceConsistentHashHttpCookieTtlArgs) ToBackendServiceConsistentHashHttpCookieTtlOutputWithContext(ctx context.Context) BackendServiceConsistentHashHttpCookieTtlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceConsistentHashHttpCookieTtlOutput)
}

func (i BackendServiceConsistentHashHttpCookieTtlArgs) ToBackendServiceConsistentHashHttpCookieTtlPtrOutput() BackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return i.ToBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(context.Background())
}

func (i BackendServiceConsistentHashHttpCookieTtlArgs) ToBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(ctx context.Context) BackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceConsistentHashHttpCookieTtlOutput).ToBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(ctx)
}

// BackendServiceConsistentHashHttpCookieTtlPtrInput is an input type that accepts BackendServiceConsistentHashHttpCookieTtlArgs, BackendServiceConsistentHashHttpCookieTtlPtr and BackendServiceConsistentHashHttpCookieTtlPtrOutput values.
// You can construct a concrete instance of `BackendServiceConsistentHashHttpCookieTtlPtrInput` via:
//
// 		 BackendServiceConsistentHashHttpCookieTtlArgs{...}
//
//  or:
//
// 		 nil
//
type BackendServiceConsistentHashHttpCookieTtlPtrInput interface {
	pulumi.Input

	ToBackendServiceConsistentHashHttpCookieTtlPtrOutput() BackendServiceConsistentHashHttpCookieTtlPtrOutput
	ToBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(context.Context) BackendServiceConsistentHashHttpCookieTtlPtrOutput
}

type backendServiceConsistentHashHttpCookieTtlPtrType BackendServiceConsistentHashHttpCookieTtlArgs

func BackendServiceConsistentHashHttpCookieTtlPtr(v *BackendServiceConsistentHashHttpCookieTtlArgs) BackendServiceConsistentHashHttpCookieTtlPtrInput {
	return (*backendServiceConsistentHashHttpCookieTtlPtrType)(v)
}

func (*backendServiceConsistentHashHttpCookieTtlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceConsistentHashHttpCookieTtl)(nil)).Elem()
}

func (i *backendServiceConsistentHashHttpCookieTtlPtrType) ToBackendServiceConsistentHashHttpCookieTtlPtrOutput() BackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return i.ToBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(context.Background())
}

func (i *backendServiceConsistentHashHttpCookieTtlPtrType) ToBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(ctx context.Context) BackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceConsistentHashHttpCookieTtlPtrOutput)
}

type BackendServiceConsistentHashHttpCookieTtlOutput struct{ *pulumi.OutputState }

func (BackendServiceConsistentHashHttpCookieTtlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceConsistentHashHttpCookieTtl)(nil)).Elem()
}

func (o BackendServiceConsistentHashHttpCookieTtlOutput) ToBackendServiceConsistentHashHttpCookieTtlOutput() BackendServiceConsistentHashHttpCookieTtlOutput {
	return o
}

func (o BackendServiceConsistentHashHttpCookieTtlOutput) ToBackendServiceConsistentHashHttpCookieTtlOutputWithContext(ctx context.Context) BackendServiceConsistentHashHttpCookieTtlOutput {
	return o
}

func (o BackendServiceConsistentHashHttpCookieTtlOutput) ToBackendServiceConsistentHashHttpCookieTtlPtrOutput() BackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return o.ToBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(context.Background())
}

func (o BackendServiceConsistentHashHttpCookieTtlOutput) ToBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(ctx context.Context) BackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return o.ApplyT(func(v BackendServiceConsistentHashHttpCookieTtl) *BackendServiceConsistentHashHttpCookieTtl {
		return &v
	}).(BackendServiceConsistentHashHttpCookieTtlPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o BackendServiceConsistentHashHttpCookieTtlOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceConsistentHashHttpCookieTtl) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o BackendServiceConsistentHashHttpCookieTtlOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v BackendServiceConsistentHashHttpCookieTtl) int { return v.Seconds }).(pulumi.IntOutput)
}

type BackendServiceConsistentHashHttpCookieTtlPtrOutput struct{ *pulumi.OutputState }

func (BackendServiceConsistentHashHttpCookieTtlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceConsistentHashHttpCookieTtl)(nil)).Elem()
}

func (o BackendServiceConsistentHashHttpCookieTtlPtrOutput) ToBackendServiceConsistentHashHttpCookieTtlPtrOutput() BackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return o
}

func (o BackendServiceConsistentHashHttpCookieTtlPtrOutput) ToBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(ctx context.Context) BackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return o
}

func (o BackendServiceConsistentHashHttpCookieTtlPtrOutput) Elem() BackendServiceConsistentHashHttpCookieTtlOutput {
	return o.ApplyT(func(v *BackendServiceConsistentHashHttpCookieTtl) BackendServiceConsistentHashHttpCookieTtl {
		return *v
	}).(BackendServiceConsistentHashHttpCookieTtlOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o BackendServiceConsistentHashHttpCookieTtlPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceConsistentHashHttpCookieTtl) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o BackendServiceConsistentHashHttpCookieTtlPtrOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceConsistentHashHttpCookieTtl) *int {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.IntPtrOutput)
}

type BackendServiceIap struct {
	// OAuth2 Client ID for IAP
	Oauth2ClientId string `pulumi:"oauth2ClientId"`
	// OAuth2 Client Secret for IAP
	Oauth2ClientSecret string `pulumi:"oauth2ClientSecret"`
	// -
	// OAuth2 Client Secret SHA-256 for IAP
	Oauth2ClientSecretSha256 *string `pulumi:"oauth2ClientSecretSha256"`
}

// BackendServiceIapInput is an input type that accepts BackendServiceIapArgs and BackendServiceIapOutput values.
// You can construct a concrete instance of `BackendServiceIapInput` via:
//
// 		 BackendServiceIapArgs{...}
//
type BackendServiceIapInput interface {
	pulumi.Input

	ToBackendServiceIapOutput() BackendServiceIapOutput
	ToBackendServiceIapOutputWithContext(context.Context) BackendServiceIapOutput
}

type BackendServiceIapArgs struct {
	// OAuth2 Client ID for IAP
	Oauth2ClientId pulumi.StringInput `pulumi:"oauth2ClientId"`
	// OAuth2 Client Secret for IAP
	Oauth2ClientSecret pulumi.StringInput `pulumi:"oauth2ClientSecret"`
	// -
	// OAuth2 Client Secret SHA-256 for IAP
	Oauth2ClientSecretSha256 pulumi.StringPtrInput `pulumi:"oauth2ClientSecretSha256"`
}

func (BackendServiceIapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceIap)(nil)).Elem()
}

func (i BackendServiceIapArgs) ToBackendServiceIapOutput() BackendServiceIapOutput {
	return i.ToBackendServiceIapOutputWithContext(context.Background())
}

func (i BackendServiceIapArgs) ToBackendServiceIapOutputWithContext(ctx context.Context) BackendServiceIapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIapOutput)
}

func (i BackendServiceIapArgs) ToBackendServiceIapPtrOutput() BackendServiceIapPtrOutput {
	return i.ToBackendServiceIapPtrOutputWithContext(context.Background())
}

func (i BackendServiceIapArgs) ToBackendServiceIapPtrOutputWithContext(ctx context.Context) BackendServiceIapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIapOutput).ToBackendServiceIapPtrOutputWithContext(ctx)
}

// BackendServiceIapPtrInput is an input type that accepts BackendServiceIapArgs, BackendServiceIapPtr and BackendServiceIapPtrOutput values.
// You can construct a concrete instance of `BackendServiceIapPtrInput` via:
//
// 		 BackendServiceIapArgs{...}
//
//  or:
//
// 		 nil
//
type BackendServiceIapPtrInput interface {
	pulumi.Input

	ToBackendServiceIapPtrOutput() BackendServiceIapPtrOutput
	ToBackendServiceIapPtrOutputWithContext(context.Context) BackendServiceIapPtrOutput
}

type backendServiceIapPtrType BackendServiceIapArgs

func BackendServiceIapPtr(v *BackendServiceIapArgs) BackendServiceIapPtrInput {
	return (*backendServiceIapPtrType)(v)
}

func (*backendServiceIapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceIap)(nil)).Elem()
}

func (i *backendServiceIapPtrType) ToBackendServiceIapPtrOutput() BackendServiceIapPtrOutput {
	return i.ToBackendServiceIapPtrOutputWithContext(context.Background())
}

func (i *backendServiceIapPtrType) ToBackendServiceIapPtrOutputWithContext(ctx context.Context) BackendServiceIapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIapPtrOutput)
}

type BackendServiceIapOutput struct{ *pulumi.OutputState }

func (BackendServiceIapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceIap)(nil)).Elem()
}

func (o BackendServiceIapOutput) ToBackendServiceIapOutput() BackendServiceIapOutput {
	return o
}

func (o BackendServiceIapOutput) ToBackendServiceIapOutputWithContext(ctx context.Context) BackendServiceIapOutput {
	return o
}

func (o BackendServiceIapOutput) ToBackendServiceIapPtrOutput() BackendServiceIapPtrOutput {
	return o.ToBackendServiceIapPtrOutputWithContext(context.Background())
}

func (o BackendServiceIapOutput) ToBackendServiceIapPtrOutputWithContext(ctx context.Context) BackendServiceIapPtrOutput {
	return o.ApplyT(func(v BackendServiceIap) *BackendServiceIap {
		return &v
	}).(BackendServiceIapPtrOutput)
}

// OAuth2 Client ID for IAP
func (o BackendServiceIapOutput) Oauth2ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v BackendServiceIap) string { return v.Oauth2ClientId }).(pulumi.StringOutput)
}

// OAuth2 Client Secret for IAP
func (o BackendServiceIapOutput) Oauth2ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v BackendServiceIap) string { return v.Oauth2ClientSecret }).(pulumi.StringOutput)
}

// -
// OAuth2 Client Secret SHA-256 for IAP
func (o BackendServiceIapOutput) Oauth2ClientSecretSha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendServiceIap) *string { return v.Oauth2ClientSecretSha256 }).(pulumi.StringPtrOutput)
}

type BackendServiceIapPtrOutput struct{ *pulumi.OutputState }

func (BackendServiceIapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceIap)(nil)).Elem()
}

func (o BackendServiceIapPtrOutput) ToBackendServiceIapPtrOutput() BackendServiceIapPtrOutput {
	return o
}

func (o BackendServiceIapPtrOutput) ToBackendServiceIapPtrOutputWithContext(ctx context.Context) BackendServiceIapPtrOutput {
	return o
}

func (o BackendServiceIapPtrOutput) Elem() BackendServiceIapOutput {
	return o.ApplyT(func(v *BackendServiceIap) BackendServiceIap { return *v }).(BackendServiceIapOutput)
}

// OAuth2 Client ID for IAP
func (o BackendServiceIapPtrOutput) Oauth2ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceIap) *string {
		if v == nil {
			return nil
		}
		return &v.Oauth2ClientId
	}).(pulumi.StringPtrOutput)
}

// OAuth2 Client Secret for IAP
func (o BackendServiceIapPtrOutput) Oauth2ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceIap) *string {
		if v == nil {
			return nil
		}
		return &v.Oauth2ClientSecret
	}).(pulumi.StringPtrOutput)
}

// -
// OAuth2 Client Secret SHA-256 for IAP
func (o BackendServiceIapPtrOutput) Oauth2ClientSecretSha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceIap) *string {
		if v == nil {
			return nil
		}
		return v.Oauth2ClientSecretSha256
	}).(pulumi.StringPtrOutput)
}

type BackendServiceLogConfig struct {
	// Whether to enable logging for the load balancer traffic served by this backend service.
	Enable *bool `pulumi:"enable"`
	// This field can only be specified if logging is enabled for this backend service. The value of
	// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
	// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
	// The default value is 1.0.
	SampleRate *float64 `pulumi:"sampleRate"`
}

// BackendServiceLogConfigInput is an input type that accepts BackendServiceLogConfigArgs and BackendServiceLogConfigOutput values.
// You can construct a concrete instance of `BackendServiceLogConfigInput` via:
//
// 		 BackendServiceLogConfigArgs{...}
//
type BackendServiceLogConfigInput interface {
	pulumi.Input

	ToBackendServiceLogConfigOutput() BackendServiceLogConfigOutput
	ToBackendServiceLogConfigOutputWithContext(context.Context) BackendServiceLogConfigOutput
}

type BackendServiceLogConfigArgs struct {
	// Whether to enable logging for the load balancer traffic served by this backend service.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// This field can only be specified if logging is enabled for this backend service. The value of
	// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
	// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
	// The default value is 1.0.
	SampleRate pulumi.Float64PtrInput `pulumi:"sampleRate"`
}

func (BackendServiceLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceLogConfig)(nil)).Elem()
}

func (i BackendServiceLogConfigArgs) ToBackendServiceLogConfigOutput() BackendServiceLogConfigOutput {
	return i.ToBackendServiceLogConfigOutputWithContext(context.Background())
}

func (i BackendServiceLogConfigArgs) ToBackendServiceLogConfigOutputWithContext(ctx context.Context) BackendServiceLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceLogConfigOutput)
}

func (i BackendServiceLogConfigArgs) ToBackendServiceLogConfigPtrOutput() BackendServiceLogConfigPtrOutput {
	return i.ToBackendServiceLogConfigPtrOutputWithContext(context.Background())
}

func (i BackendServiceLogConfigArgs) ToBackendServiceLogConfigPtrOutputWithContext(ctx context.Context) BackendServiceLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceLogConfigOutput).ToBackendServiceLogConfigPtrOutputWithContext(ctx)
}

// BackendServiceLogConfigPtrInput is an input type that accepts BackendServiceLogConfigArgs, BackendServiceLogConfigPtr and BackendServiceLogConfigPtrOutput values.
// You can construct a concrete instance of `BackendServiceLogConfigPtrInput` via:
//
// 		 BackendServiceLogConfigArgs{...}
//
//  or:
//
// 		 nil
//
type BackendServiceLogConfigPtrInput interface {
	pulumi.Input

	ToBackendServiceLogConfigPtrOutput() BackendServiceLogConfigPtrOutput
	ToBackendServiceLogConfigPtrOutputWithContext(context.Context) BackendServiceLogConfigPtrOutput
}

type backendServiceLogConfigPtrType BackendServiceLogConfigArgs

func BackendServiceLogConfigPtr(v *BackendServiceLogConfigArgs) BackendServiceLogConfigPtrInput {
	return (*backendServiceLogConfigPtrType)(v)
}

func (*backendServiceLogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceLogConfig)(nil)).Elem()
}

func (i *backendServiceLogConfigPtrType) ToBackendServiceLogConfigPtrOutput() BackendServiceLogConfigPtrOutput {
	return i.ToBackendServiceLogConfigPtrOutputWithContext(context.Background())
}

func (i *backendServiceLogConfigPtrType) ToBackendServiceLogConfigPtrOutputWithContext(ctx context.Context) BackendServiceLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceLogConfigPtrOutput)
}

type BackendServiceLogConfigOutput struct{ *pulumi.OutputState }

func (BackendServiceLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceLogConfig)(nil)).Elem()
}

func (o BackendServiceLogConfigOutput) ToBackendServiceLogConfigOutput() BackendServiceLogConfigOutput {
	return o
}

func (o BackendServiceLogConfigOutput) ToBackendServiceLogConfigOutputWithContext(ctx context.Context) BackendServiceLogConfigOutput {
	return o
}

func (o BackendServiceLogConfigOutput) ToBackendServiceLogConfigPtrOutput() BackendServiceLogConfigPtrOutput {
	return o.ToBackendServiceLogConfigPtrOutputWithContext(context.Background())
}

func (o BackendServiceLogConfigOutput) ToBackendServiceLogConfigPtrOutputWithContext(ctx context.Context) BackendServiceLogConfigPtrOutput {
	return o.ApplyT(func(v BackendServiceLogConfig) *BackendServiceLogConfig {
		return &v
	}).(BackendServiceLogConfigPtrOutput)
}

// Whether to enable logging for the load balancer traffic served by this backend service.
func (o BackendServiceLogConfigOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendServiceLogConfig) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// This field can only be specified if logging is enabled for this backend service. The value of
// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
// The default value is 1.0.
func (o BackendServiceLogConfigOutput) SampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BackendServiceLogConfig) *float64 { return v.SampleRate }).(pulumi.Float64PtrOutput)
}

type BackendServiceLogConfigPtrOutput struct{ *pulumi.OutputState }

func (BackendServiceLogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceLogConfig)(nil)).Elem()
}

func (o BackendServiceLogConfigPtrOutput) ToBackendServiceLogConfigPtrOutput() BackendServiceLogConfigPtrOutput {
	return o
}

func (o BackendServiceLogConfigPtrOutput) ToBackendServiceLogConfigPtrOutputWithContext(ctx context.Context) BackendServiceLogConfigPtrOutput {
	return o
}

func (o BackendServiceLogConfigPtrOutput) Elem() BackendServiceLogConfigOutput {
	return o.ApplyT(func(v *BackendServiceLogConfig) BackendServiceLogConfig { return *v }).(BackendServiceLogConfigOutput)
}

// Whether to enable logging for the load balancer traffic served by this backend service.
func (o BackendServiceLogConfigPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendServiceLogConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// This field can only be specified if logging is enabled for this backend service. The value of
// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
// The default value is 1.0.
func (o BackendServiceLogConfigPtrOutput) SampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BackendServiceLogConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.SampleRate
	}).(pulumi.Float64PtrOutput)
}

type BackendServiceOutlierDetection struct {
	// The base time that a host is ejected for. The real time is equal to the base
	// time multiplied by the number of times the host has been ejected. Defaults to
	// 30000ms or 30s.  Structure is documented below.
	BaseEjectionTime *BackendServiceOutlierDetectionBaseEjectionTime `pulumi:"baseEjectionTime"`
	// Number of errors before a host is ejected from the connection pool. When the
	// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
	// Defaults to 5.
	ConsecutiveErrors *int `pulumi:"consecutiveErrors"`
	// The number of consecutive gateway failures (502, 503, 504 status or connection
	// errors that are mapped to one of those status codes) before a consecutive
	// gateway failure ejection occurs. Defaults to 5.
	ConsecutiveGatewayFailure *int `pulumi:"consecutiveGatewayFailure"`
	// The percentage chance that a host will be actually ejected when an outlier
	// status is detected through consecutive 5xx. This setting can be used to disable
	// ejection or to ramp it up slowly. Defaults to 100.
	EnforcingConsecutiveErrors *int `pulumi:"enforcingConsecutiveErrors"`
	// The percentage chance that a host will be actually ejected when an outlier
	// status is detected through consecutive gateway failures. This setting can be
	// used to disable ejection or to ramp it up slowly. Defaults to 0.
	EnforcingConsecutiveGatewayFailure *int `pulumi:"enforcingConsecutiveGatewayFailure"`
	// The percentage chance that a host will be actually ejected when an outlier
	// status is detected through success rate statistics. This setting can be used to
	// disable ejection or to ramp it up slowly. Defaults to 100.
	EnforcingSuccessRate *int `pulumi:"enforcingSuccessRate"`
	// Time interval between ejection sweep analysis. This can result in both new
	// ejections as well as hosts being returned to service. Defaults to 10 seconds.  Structure is documented below.
	Interval *BackendServiceOutlierDetectionInterval `pulumi:"interval"`
	// Maximum percentage of hosts in the load balancing pool for the backend service
	// that can be ejected. Defaults to 10%.
	MaxEjectionPercent *int `pulumi:"maxEjectionPercent"`
	// The number of hosts in a cluster that must have enough request volume to detect
	// success rate outliers. If the number of hosts is less than this setting, outlier
	// detection via success rate statistics is not performed for any host in the
	// cluster. Defaults to 5.
	SuccessRateMinimumHosts *int `pulumi:"successRateMinimumHosts"`
	// The minimum number of total requests that must be collected in one interval (as
	// defined by the interval duration above) to include this host in success rate
	// based outlier detection. If the volume is lower than this setting, outlier
	// detection via success rate statistics is not performed for that host. Defaults
	// to 100.
	SuccessRateRequestVolume *int `pulumi:"successRateRequestVolume"`
	// This factor is used to determine the ejection threshold for success rate outlier
	// ejection. The ejection threshold is the difference between the mean success
	// rate, and the product of this factor and the standard deviation of the mean
	// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
	// by a thousand to get a double. That is, if the desired factor is 1.9, the
	// runtime value should be 1900. Defaults to 1900.
	SuccessRateStdevFactor *int `pulumi:"successRateStdevFactor"`
}

// BackendServiceOutlierDetectionInput is an input type that accepts BackendServiceOutlierDetectionArgs and BackendServiceOutlierDetectionOutput values.
// You can construct a concrete instance of `BackendServiceOutlierDetectionInput` via:
//
// 		 BackendServiceOutlierDetectionArgs{...}
//
type BackendServiceOutlierDetectionInput interface {
	pulumi.Input

	ToBackendServiceOutlierDetectionOutput() BackendServiceOutlierDetectionOutput
	ToBackendServiceOutlierDetectionOutputWithContext(context.Context) BackendServiceOutlierDetectionOutput
}

type BackendServiceOutlierDetectionArgs struct {
	// The base time that a host is ejected for. The real time is equal to the base
	// time multiplied by the number of times the host has been ejected. Defaults to
	// 30000ms or 30s.  Structure is documented below.
	BaseEjectionTime BackendServiceOutlierDetectionBaseEjectionTimePtrInput `pulumi:"baseEjectionTime"`
	// Number of errors before a host is ejected from the connection pool. When the
	// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
	// Defaults to 5.
	ConsecutiveErrors pulumi.IntPtrInput `pulumi:"consecutiveErrors"`
	// The number of consecutive gateway failures (502, 503, 504 status or connection
	// errors that are mapped to one of those status codes) before a consecutive
	// gateway failure ejection occurs. Defaults to 5.
	ConsecutiveGatewayFailure pulumi.IntPtrInput `pulumi:"consecutiveGatewayFailure"`
	// The percentage chance that a host will be actually ejected when an outlier
	// status is detected through consecutive 5xx. This setting can be used to disable
	// ejection or to ramp it up slowly. Defaults to 100.
	EnforcingConsecutiveErrors pulumi.IntPtrInput `pulumi:"enforcingConsecutiveErrors"`
	// The percentage chance that a host will be actually ejected when an outlier
	// status is detected through consecutive gateway failures. This setting can be
	// used to disable ejection or to ramp it up slowly. Defaults to 0.
	EnforcingConsecutiveGatewayFailure pulumi.IntPtrInput `pulumi:"enforcingConsecutiveGatewayFailure"`
	// The percentage chance that a host will be actually ejected when an outlier
	// status is detected through success rate statistics. This setting can be used to
	// disable ejection or to ramp it up slowly. Defaults to 100.
	EnforcingSuccessRate pulumi.IntPtrInput `pulumi:"enforcingSuccessRate"`
	// Time interval between ejection sweep analysis. This can result in both new
	// ejections as well as hosts being returned to service. Defaults to 10 seconds.  Structure is documented below.
	Interval BackendServiceOutlierDetectionIntervalPtrInput `pulumi:"interval"`
	// Maximum percentage of hosts in the load balancing pool for the backend service
	// that can be ejected. Defaults to 10%.
	MaxEjectionPercent pulumi.IntPtrInput `pulumi:"maxEjectionPercent"`
	// The number of hosts in a cluster that must have enough request volume to detect
	// success rate outliers. If the number of hosts is less than this setting, outlier
	// detection via success rate statistics is not performed for any host in the
	// cluster. Defaults to 5.
	SuccessRateMinimumHosts pulumi.IntPtrInput `pulumi:"successRateMinimumHosts"`
	// The minimum number of total requests that must be collected in one interval (as
	// defined by the interval duration above) to include this host in success rate
	// based outlier detection. If the volume is lower than this setting, outlier
	// detection via success rate statistics is not performed for that host. Defaults
	// to 100.
	SuccessRateRequestVolume pulumi.IntPtrInput `pulumi:"successRateRequestVolume"`
	// This factor is used to determine the ejection threshold for success rate outlier
	// ejection. The ejection threshold is the difference between the mean success
	// rate, and the product of this factor and the standard deviation of the mean
	// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
	// by a thousand to get a double. That is, if the desired factor is 1.9, the
	// runtime value should be 1900. Defaults to 1900.
	SuccessRateStdevFactor pulumi.IntPtrInput `pulumi:"successRateStdevFactor"`
}

func (BackendServiceOutlierDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceOutlierDetection)(nil)).Elem()
}

func (i BackendServiceOutlierDetectionArgs) ToBackendServiceOutlierDetectionOutput() BackendServiceOutlierDetectionOutput {
	return i.ToBackendServiceOutlierDetectionOutputWithContext(context.Background())
}

func (i BackendServiceOutlierDetectionArgs) ToBackendServiceOutlierDetectionOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceOutlierDetectionOutput)
}

func (i BackendServiceOutlierDetectionArgs) ToBackendServiceOutlierDetectionPtrOutput() BackendServiceOutlierDetectionPtrOutput {
	return i.ToBackendServiceOutlierDetectionPtrOutputWithContext(context.Background())
}

func (i BackendServiceOutlierDetectionArgs) ToBackendServiceOutlierDetectionPtrOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceOutlierDetectionOutput).ToBackendServiceOutlierDetectionPtrOutputWithContext(ctx)
}

// BackendServiceOutlierDetectionPtrInput is an input type that accepts BackendServiceOutlierDetectionArgs, BackendServiceOutlierDetectionPtr and BackendServiceOutlierDetectionPtrOutput values.
// You can construct a concrete instance of `BackendServiceOutlierDetectionPtrInput` via:
//
// 		 BackendServiceOutlierDetectionArgs{...}
//
//  or:
//
// 		 nil
//
type BackendServiceOutlierDetectionPtrInput interface {
	pulumi.Input

	ToBackendServiceOutlierDetectionPtrOutput() BackendServiceOutlierDetectionPtrOutput
	ToBackendServiceOutlierDetectionPtrOutputWithContext(context.Context) BackendServiceOutlierDetectionPtrOutput
}

type backendServiceOutlierDetectionPtrType BackendServiceOutlierDetectionArgs

func BackendServiceOutlierDetectionPtr(v *BackendServiceOutlierDetectionArgs) BackendServiceOutlierDetectionPtrInput {
	return (*backendServiceOutlierDetectionPtrType)(v)
}

func (*backendServiceOutlierDetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceOutlierDetection)(nil)).Elem()
}

func (i *backendServiceOutlierDetectionPtrType) ToBackendServiceOutlierDetectionPtrOutput() BackendServiceOutlierDetectionPtrOutput {
	return i.ToBackendServiceOutlierDetectionPtrOutputWithContext(context.Background())
}

func (i *backendServiceOutlierDetectionPtrType) ToBackendServiceOutlierDetectionPtrOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceOutlierDetectionPtrOutput)
}

type BackendServiceOutlierDetectionOutput struct{ *pulumi.OutputState }

func (BackendServiceOutlierDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceOutlierDetection)(nil)).Elem()
}

func (o BackendServiceOutlierDetectionOutput) ToBackendServiceOutlierDetectionOutput() BackendServiceOutlierDetectionOutput {
	return o
}

func (o BackendServiceOutlierDetectionOutput) ToBackendServiceOutlierDetectionOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionOutput {
	return o
}

func (o BackendServiceOutlierDetectionOutput) ToBackendServiceOutlierDetectionPtrOutput() BackendServiceOutlierDetectionPtrOutput {
	return o.ToBackendServiceOutlierDetectionPtrOutputWithContext(context.Background())
}

func (o BackendServiceOutlierDetectionOutput) ToBackendServiceOutlierDetectionPtrOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionPtrOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetection) *BackendServiceOutlierDetection {
		return &v
	}).(BackendServiceOutlierDetectionPtrOutput)
}

// The base time that a host is ejected for. The real time is equal to the base
// time multiplied by the number of times the host has been ejected. Defaults to
// 30000ms or 30s.  Structure is documented below.
func (o BackendServiceOutlierDetectionOutput) BaseEjectionTime() BackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetection) *BackendServiceOutlierDetectionBaseEjectionTime {
		return v.BaseEjectionTime
	}).(BackendServiceOutlierDetectionBaseEjectionTimePtrOutput)
}

// Number of errors before a host is ejected from the connection pool. When the
// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
// Defaults to 5.
func (o BackendServiceOutlierDetectionOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetection) *int { return v.ConsecutiveErrors }).(pulumi.IntPtrOutput)
}

// The number of consecutive gateway failures (502, 503, 504 status or connection
// errors that are mapped to one of those status codes) before a consecutive
// gateway failure ejection occurs. Defaults to 5.
func (o BackendServiceOutlierDetectionOutput) ConsecutiveGatewayFailure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetection) *int { return v.ConsecutiveGatewayFailure }).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier
// status is detected through consecutive 5xx. This setting can be used to disable
// ejection or to ramp it up slowly. Defaults to 100.
func (o BackendServiceOutlierDetectionOutput) EnforcingConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetection) *int { return v.EnforcingConsecutiveErrors }).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier
// status is detected through consecutive gateway failures. This setting can be
// used to disable ejection or to ramp it up slowly. Defaults to 0.
func (o BackendServiceOutlierDetectionOutput) EnforcingConsecutiveGatewayFailure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetection) *int { return v.EnforcingConsecutiveGatewayFailure }).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier
// status is detected through success rate statistics. This setting can be used to
// disable ejection or to ramp it up slowly. Defaults to 100.
func (o BackendServiceOutlierDetectionOutput) EnforcingSuccessRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetection) *int { return v.EnforcingSuccessRate }).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis. This can result in both new
// ejections as well as hosts being returned to service. Defaults to 10 seconds.  Structure is documented below.
func (o BackendServiceOutlierDetectionOutput) Interval() BackendServiceOutlierDetectionIntervalPtrOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetection) *BackendServiceOutlierDetectionInterval { return v.Interval }).(BackendServiceOutlierDetectionIntervalPtrOutput)
}

// Maximum percentage of hosts in the load balancing pool for the backend service
// that can be ejected. Defaults to 10%.
func (o BackendServiceOutlierDetectionOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetection) *int { return v.MaxEjectionPercent }).(pulumi.IntPtrOutput)
}

// The number of hosts in a cluster that must have enough request volume to detect
// success rate outliers. If the number of hosts is less than this setting, outlier
// detection via success rate statistics is not performed for any host in the
// cluster. Defaults to 5.
func (o BackendServiceOutlierDetectionOutput) SuccessRateMinimumHosts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetection) *int { return v.SuccessRateMinimumHosts }).(pulumi.IntPtrOutput)
}

// The minimum number of total requests that must be collected in one interval (as
// defined by the interval duration above) to include this host in success rate
// based outlier detection. If the volume is lower than this setting, outlier
// detection via success rate statistics is not performed for that host. Defaults
// to 100.
func (o BackendServiceOutlierDetectionOutput) SuccessRateRequestVolume() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetection) *int { return v.SuccessRateRequestVolume }).(pulumi.IntPtrOutput)
}

// This factor is used to determine the ejection threshold for success rate outlier
// ejection. The ejection threshold is the difference between the mean success
// rate, and the product of this factor and the standard deviation of the mean
// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
// by a thousand to get a double. That is, if the desired factor is 1.9, the
// runtime value should be 1900. Defaults to 1900.
func (o BackendServiceOutlierDetectionOutput) SuccessRateStdevFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetection) *int { return v.SuccessRateStdevFactor }).(pulumi.IntPtrOutput)
}

type BackendServiceOutlierDetectionPtrOutput struct{ *pulumi.OutputState }

func (BackendServiceOutlierDetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceOutlierDetection)(nil)).Elem()
}

func (o BackendServiceOutlierDetectionPtrOutput) ToBackendServiceOutlierDetectionPtrOutput() BackendServiceOutlierDetectionPtrOutput {
	return o
}

func (o BackendServiceOutlierDetectionPtrOutput) ToBackendServiceOutlierDetectionPtrOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionPtrOutput {
	return o
}

func (o BackendServiceOutlierDetectionPtrOutput) Elem() BackendServiceOutlierDetectionOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetection) BackendServiceOutlierDetection { return *v }).(BackendServiceOutlierDetectionOutput)
}

// The base time that a host is ejected for. The real time is equal to the base
// time multiplied by the number of times the host has been ejected. Defaults to
// 30000ms or 30s.  Structure is documented below.
func (o BackendServiceOutlierDetectionPtrOutput) BaseEjectionTime() BackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetection) *BackendServiceOutlierDetectionBaseEjectionTime {
		if v == nil {
			return nil
		}
		return v.BaseEjectionTime
	}).(BackendServiceOutlierDetectionBaseEjectionTimePtrOutput)
}

// Number of errors before a host is ejected from the connection pool. When the
// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
// Defaults to 5.
func (o BackendServiceOutlierDetectionPtrOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// The number of consecutive gateway failures (502, 503, 504 status or connection
// errors that are mapped to one of those status codes) before a consecutive
// gateway failure ejection occurs. Defaults to 5.
func (o BackendServiceOutlierDetectionPtrOutput) ConsecutiveGatewayFailure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveGatewayFailure
	}).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier
// status is detected through consecutive 5xx. This setting can be used to disable
// ejection or to ramp it up slowly. Defaults to 100.
func (o BackendServiceOutlierDetectionPtrOutput) EnforcingConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.EnforcingConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier
// status is detected through consecutive gateway failures. This setting can be
// used to disable ejection or to ramp it up slowly. Defaults to 0.
func (o BackendServiceOutlierDetectionPtrOutput) EnforcingConsecutiveGatewayFailure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.EnforcingConsecutiveGatewayFailure
	}).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier
// status is detected through success rate statistics. This setting can be used to
// disable ejection or to ramp it up slowly. Defaults to 100.
func (o BackendServiceOutlierDetectionPtrOutput) EnforcingSuccessRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.EnforcingSuccessRate
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis. This can result in both new
// ejections as well as hosts being returned to service. Defaults to 10 seconds.  Structure is documented below.
func (o BackendServiceOutlierDetectionPtrOutput) Interval() BackendServiceOutlierDetectionIntervalPtrOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetection) *BackendServiceOutlierDetectionInterval {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(BackendServiceOutlierDetectionIntervalPtrOutput)
}

// Maximum percentage of hosts in the load balancing pool for the backend service
// that can be ejected. Defaults to 10%.
func (o BackendServiceOutlierDetectionPtrOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.MaxEjectionPercent
	}).(pulumi.IntPtrOutput)
}

// The number of hosts in a cluster that must have enough request volume to detect
// success rate outliers. If the number of hosts is less than this setting, outlier
// detection via success rate statistics is not performed for any host in the
// cluster. Defaults to 5.
func (o BackendServiceOutlierDetectionPtrOutput) SuccessRateMinimumHosts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.SuccessRateMinimumHosts
	}).(pulumi.IntPtrOutput)
}

// The minimum number of total requests that must be collected in one interval (as
// defined by the interval duration above) to include this host in success rate
// based outlier detection. If the volume is lower than this setting, outlier
// detection via success rate statistics is not performed for that host. Defaults
// to 100.
func (o BackendServiceOutlierDetectionPtrOutput) SuccessRateRequestVolume() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.SuccessRateRequestVolume
	}).(pulumi.IntPtrOutput)
}

// This factor is used to determine the ejection threshold for success rate outlier
// ejection. The ejection threshold is the difference between the mean success
// rate, and the product of this factor and the standard deviation of the mean
// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
// by a thousand to get a double. That is, if the desired factor is 1.9, the
// runtime value should be 1900. Defaults to 1900.
func (o BackendServiceOutlierDetectionPtrOutput) SuccessRateStdevFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.SuccessRateStdevFactor
	}).(pulumi.IntPtrOutput)
}

type BackendServiceOutlierDetectionBaseEjectionTime struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds int `pulumi:"seconds"`
}

// BackendServiceOutlierDetectionBaseEjectionTimeInput is an input type that accepts BackendServiceOutlierDetectionBaseEjectionTimeArgs and BackendServiceOutlierDetectionBaseEjectionTimeOutput values.
// You can construct a concrete instance of `BackendServiceOutlierDetectionBaseEjectionTimeInput` via:
//
// 		 BackendServiceOutlierDetectionBaseEjectionTimeArgs{...}
//
type BackendServiceOutlierDetectionBaseEjectionTimeInput interface {
	pulumi.Input

	ToBackendServiceOutlierDetectionBaseEjectionTimeOutput() BackendServiceOutlierDetectionBaseEjectionTimeOutput
	ToBackendServiceOutlierDetectionBaseEjectionTimeOutputWithContext(context.Context) BackendServiceOutlierDetectionBaseEjectionTimeOutput
}

type BackendServiceOutlierDetectionBaseEjectionTimeArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.IntInput `pulumi:"seconds"`
}

func (BackendServiceOutlierDetectionBaseEjectionTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceOutlierDetectionBaseEjectionTime)(nil)).Elem()
}

func (i BackendServiceOutlierDetectionBaseEjectionTimeArgs) ToBackendServiceOutlierDetectionBaseEjectionTimeOutput() BackendServiceOutlierDetectionBaseEjectionTimeOutput {
	return i.ToBackendServiceOutlierDetectionBaseEjectionTimeOutputWithContext(context.Background())
}

func (i BackendServiceOutlierDetectionBaseEjectionTimeArgs) ToBackendServiceOutlierDetectionBaseEjectionTimeOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionBaseEjectionTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceOutlierDetectionBaseEjectionTimeOutput)
}

func (i BackendServiceOutlierDetectionBaseEjectionTimeArgs) ToBackendServiceOutlierDetectionBaseEjectionTimePtrOutput() BackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return i.ToBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(context.Background())
}

func (i BackendServiceOutlierDetectionBaseEjectionTimeArgs) ToBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceOutlierDetectionBaseEjectionTimeOutput).ToBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(ctx)
}

// BackendServiceOutlierDetectionBaseEjectionTimePtrInput is an input type that accepts BackendServiceOutlierDetectionBaseEjectionTimeArgs, BackendServiceOutlierDetectionBaseEjectionTimePtr and BackendServiceOutlierDetectionBaseEjectionTimePtrOutput values.
// You can construct a concrete instance of `BackendServiceOutlierDetectionBaseEjectionTimePtrInput` via:
//
// 		 BackendServiceOutlierDetectionBaseEjectionTimeArgs{...}
//
//  or:
//
// 		 nil
//
type BackendServiceOutlierDetectionBaseEjectionTimePtrInput interface {
	pulumi.Input

	ToBackendServiceOutlierDetectionBaseEjectionTimePtrOutput() BackendServiceOutlierDetectionBaseEjectionTimePtrOutput
	ToBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(context.Context) BackendServiceOutlierDetectionBaseEjectionTimePtrOutput
}

type backendServiceOutlierDetectionBaseEjectionTimePtrType BackendServiceOutlierDetectionBaseEjectionTimeArgs

func BackendServiceOutlierDetectionBaseEjectionTimePtr(v *BackendServiceOutlierDetectionBaseEjectionTimeArgs) BackendServiceOutlierDetectionBaseEjectionTimePtrInput {
	return (*backendServiceOutlierDetectionBaseEjectionTimePtrType)(v)
}

func (*backendServiceOutlierDetectionBaseEjectionTimePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceOutlierDetectionBaseEjectionTime)(nil)).Elem()
}

func (i *backendServiceOutlierDetectionBaseEjectionTimePtrType) ToBackendServiceOutlierDetectionBaseEjectionTimePtrOutput() BackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return i.ToBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(context.Background())
}

func (i *backendServiceOutlierDetectionBaseEjectionTimePtrType) ToBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceOutlierDetectionBaseEjectionTimePtrOutput)
}

type BackendServiceOutlierDetectionBaseEjectionTimeOutput struct{ *pulumi.OutputState }

func (BackendServiceOutlierDetectionBaseEjectionTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceOutlierDetectionBaseEjectionTime)(nil)).Elem()
}

func (o BackendServiceOutlierDetectionBaseEjectionTimeOutput) ToBackendServiceOutlierDetectionBaseEjectionTimeOutput() BackendServiceOutlierDetectionBaseEjectionTimeOutput {
	return o
}

func (o BackendServiceOutlierDetectionBaseEjectionTimeOutput) ToBackendServiceOutlierDetectionBaseEjectionTimeOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionBaseEjectionTimeOutput {
	return o
}

func (o BackendServiceOutlierDetectionBaseEjectionTimeOutput) ToBackendServiceOutlierDetectionBaseEjectionTimePtrOutput() BackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return o.ToBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(context.Background())
}

func (o BackendServiceOutlierDetectionBaseEjectionTimeOutput) ToBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetectionBaseEjectionTime) *BackendServiceOutlierDetectionBaseEjectionTime {
		return &v
	}).(BackendServiceOutlierDetectionBaseEjectionTimePtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o BackendServiceOutlierDetectionBaseEjectionTimeOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetectionBaseEjectionTime) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o BackendServiceOutlierDetectionBaseEjectionTimeOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetectionBaseEjectionTime) int { return v.Seconds }).(pulumi.IntOutput)
}

type BackendServiceOutlierDetectionBaseEjectionTimePtrOutput struct{ *pulumi.OutputState }

func (BackendServiceOutlierDetectionBaseEjectionTimePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceOutlierDetectionBaseEjectionTime)(nil)).Elem()
}

func (o BackendServiceOutlierDetectionBaseEjectionTimePtrOutput) ToBackendServiceOutlierDetectionBaseEjectionTimePtrOutput() BackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return o
}

func (o BackendServiceOutlierDetectionBaseEjectionTimePtrOutput) ToBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return o
}

func (o BackendServiceOutlierDetectionBaseEjectionTimePtrOutput) Elem() BackendServiceOutlierDetectionBaseEjectionTimeOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetectionBaseEjectionTime) BackendServiceOutlierDetectionBaseEjectionTime {
		return *v
	}).(BackendServiceOutlierDetectionBaseEjectionTimeOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o BackendServiceOutlierDetectionBaseEjectionTimePtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetectionBaseEjectionTime) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o BackendServiceOutlierDetectionBaseEjectionTimePtrOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetectionBaseEjectionTime) *int {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.IntPtrOutput)
}

type BackendServiceOutlierDetectionInterval struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds int `pulumi:"seconds"`
}

// BackendServiceOutlierDetectionIntervalInput is an input type that accepts BackendServiceOutlierDetectionIntervalArgs and BackendServiceOutlierDetectionIntervalOutput values.
// You can construct a concrete instance of `BackendServiceOutlierDetectionIntervalInput` via:
//
// 		 BackendServiceOutlierDetectionIntervalArgs{...}
//
type BackendServiceOutlierDetectionIntervalInput interface {
	pulumi.Input

	ToBackendServiceOutlierDetectionIntervalOutput() BackendServiceOutlierDetectionIntervalOutput
	ToBackendServiceOutlierDetectionIntervalOutputWithContext(context.Context) BackendServiceOutlierDetectionIntervalOutput
}

type BackendServiceOutlierDetectionIntervalArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.IntInput `pulumi:"seconds"`
}

func (BackendServiceOutlierDetectionIntervalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceOutlierDetectionInterval)(nil)).Elem()
}

func (i BackendServiceOutlierDetectionIntervalArgs) ToBackendServiceOutlierDetectionIntervalOutput() BackendServiceOutlierDetectionIntervalOutput {
	return i.ToBackendServiceOutlierDetectionIntervalOutputWithContext(context.Background())
}

func (i BackendServiceOutlierDetectionIntervalArgs) ToBackendServiceOutlierDetectionIntervalOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionIntervalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceOutlierDetectionIntervalOutput)
}

func (i BackendServiceOutlierDetectionIntervalArgs) ToBackendServiceOutlierDetectionIntervalPtrOutput() BackendServiceOutlierDetectionIntervalPtrOutput {
	return i.ToBackendServiceOutlierDetectionIntervalPtrOutputWithContext(context.Background())
}

func (i BackendServiceOutlierDetectionIntervalArgs) ToBackendServiceOutlierDetectionIntervalPtrOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionIntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceOutlierDetectionIntervalOutput).ToBackendServiceOutlierDetectionIntervalPtrOutputWithContext(ctx)
}

// BackendServiceOutlierDetectionIntervalPtrInput is an input type that accepts BackendServiceOutlierDetectionIntervalArgs, BackendServiceOutlierDetectionIntervalPtr and BackendServiceOutlierDetectionIntervalPtrOutput values.
// You can construct a concrete instance of `BackendServiceOutlierDetectionIntervalPtrInput` via:
//
// 		 BackendServiceOutlierDetectionIntervalArgs{...}
//
//  or:
//
// 		 nil
//
type BackendServiceOutlierDetectionIntervalPtrInput interface {
	pulumi.Input

	ToBackendServiceOutlierDetectionIntervalPtrOutput() BackendServiceOutlierDetectionIntervalPtrOutput
	ToBackendServiceOutlierDetectionIntervalPtrOutputWithContext(context.Context) BackendServiceOutlierDetectionIntervalPtrOutput
}

type backendServiceOutlierDetectionIntervalPtrType BackendServiceOutlierDetectionIntervalArgs

func BackendServiceOutlierDetectionIntervalPtr(v *BackendServiceOutlierDetectionIntervalArgs) BackendServiceOutlierDetectionIntervalPtrInput {
	return (*backendServiceOutlierDetectionIntervalPtrType)(v)
}

func (*backendServiceOutlierDetectionIntervalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceOutlierDetectionInterval)(nil)).Elem()
}

func (i *backendServiceOutlierDetectionIntervalPtrType) ToBackendServiceOutlierDetectionIntervalPtrOutput() BackendServiceOutlierDetectionIntervalPtrOutput {
	return i.ToBackendServiceOutlierDetectionIntervalPtrOutputWithContext(context.Background())
}

func (i *backendServiceOutlierDetectionIntervalPtrType) ToBackendServiceOutlierDetectionIntervalPtrOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionIntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceOutlierDetectionIntervalPtrOutput)
}

type BackendServiceOutlierDetectionIntervalOutput struct{ *pulumi.OutputState }

func (BackendServiceOutlierDetectionIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceOutlierDetectionInterval)(nil)).Elem()
}

func (o BackendServiceOutlierDetectionIntervalOutput) ToBackendServiceOutlierDetectionIntervalOutput() BackendServiceOutlierDetectionIntervalOutput {
	return o
}

func (o BackendServiceOutlierDetectionIntervalOutput) ToBackendServiceOutlierDetectionIntervalOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionIntervalOutput {
	return o
}

func (o BackendServiceOutlierDetectionIntervalOutput) ToBackendServiceOutlierDetectionIntervalPtrOutput() BackendServiceOutlierDetectionIntervalPtrOutput {
	return o.ToBackendServiceOutlierDetectionIntervalPtrOutputWithContext(context.Background())
}

func (o BackendServiceOutlierDetectionIntervalOutput) ToBackendServiceOutlierDetectionIntervalPtrOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionIntervalPtrOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetectionInterval) *BackendServiceOutlierDetectionInterval {
		return &v
	}).(BackendServiceOutlierDetectionIntervalPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o BackendServiceOutlierDetectionIntervalOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetectionInterval) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o BackendServiceOutlierDetectionIntervalOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v BackendServiceOutlierDetectionInterval) int { return v.Seconds }).(pulumi.IntOutput)
}

type BackendServiceOutlierDetectionIntervalPtrOutput struct{ *pulumi.OutputState }

func (BackendServiceOutlierDetectionIntervalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceOutlierDetectionInterval)(nil)).Elem()
}

func (o BackendServiceOutlierDetectionIntervalPtrOutput) ToBackendServiceOutlierDetectionIntervalPtrOutput() BackendServiceOutlierDetectionIntervalPtrOutput {
	return o
}

func (o BackendServiceOutlierDetectionIntervalPtrOutput) ToBackendServiceOutlierDetectionIntervalPtrOutputWithContext(ctx context.Context) BackendServiceOutlierDetectionIntervalPtrOutput {
	return o
}

func (o BackendServiceOutlierDetectionIntervalPtrOutput) Elem() BackendServiceOutlierDetectionIntervalOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetectionInterval) BackendServiceOutlierDetectionInterval { return *v }).(BackendServiceOutlierDetectionIntervalOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o BackendServiceOutlierDetectionIntervalPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetectionInterval) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o BackendServiceOutlierDetectionIntervalPtrOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceOutlierDetectionInterval) *int {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.IntPtrOutput)
}

type DiskDiskEncryptionKey struct {
	// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
	// in the cloud console. Your project's Compute Engine System service account
	// (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
	// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
	// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
	KmsKeySelfLink *string `pulumi:"kmsKeySelfLink"`
	// Specifies a 256-bit customer-supplied encryption key, encoded in
	// RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey *string `pulumi:"rawKey"`
	// -
	// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
	// encryption key that protects this resource.
	Sha256 *string `pulumi:"sha256"`
}

// DiskDiskEncryptionKeyInput is an input type that accepts DiskDiskEncryptionKeyArgs and DiskDiskEncryptionKeyOutput values.
// You can construct a concrete instance of `DiskDiskEncryptionKeyInput` via:
//
// 		 DiskDiskEncryptionKeyArgs{...}
//
type DiskDiskEncryptionKeyInput interface {
	pulumi.Input

	ToDiskDiskEncryptionKeyOutput() DiskDiskEncryptionKeyOutput
	ToDiskDiskEncryptionKeyOutputWithContext(context.Context) DiskDiskEncryptionKeyOutput
}

type DiskDiskEncryptionKeyArgs struct {
	// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
	// in the cloud console. Your project's Compute Engine System service account
	// (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
	// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
	// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
	KmsKeySelfLink pulumi.StringPtrInput `pulumi:"kmsKeySelfLink"`
	// Specifies a 256-bit customer-supplied encryption key, encoded in
	// RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey pulumi.StringPtrInput `pulumi:"rawKey"`
	// -
	// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
	// encryption key that protects this resource.
	Sha256 pulumi.StringPtrInput `pulumi:"sha256"`
}

func (DiskDiskEncryptionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskDiskEncryptionKey)(nil)).Elem()
}

func (i DiskDiskEncryptionKeyArgs) ToDiskDiskEncryptionKeyOutput() DiskDiskEncryptionKeyOutput {
	return i.ToDiskDiskEncryptionKeyOutputWithContext(context.Background())
}

func (i DiskDiskEncryptionKeyArgs) ToDiskDiskEncryptionKeyOutputWithContext(ctx context.Context) DiskDiskEncryptionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskDiskEncryptionKeyOutput)
}

func (i DiskDiskEncryptionKeyArgs) ToDiskDiskEncryptionKeyPtrOutput() DiskDiskEncryptionKeyPtrOutput {
	return i.ToDiskDiskEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i DiskDiskEncryptionKeyArgs) ToDiskDiskEncryptionKeyPtrOutputWithContext(ctx context.Context) DiskDiskEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskDiskEncryptionKeyOutput).ToDiskDiskEncryptionKeyPtrOutputWithContext(ctx)
}

// DiskDiskEncryptionKeyPtrInput is an input type that accepts DiskDiskEncryptionKeyArgs, DiskDiskEncryptionKeyPtr and DiskDiskEncryptionKeyPtrOutput values.
// You can construct a concrete instance of `DiskDiskEncryptionKeyPtrInput` via:
//
// 		 DiskDiskEncryptionKeyArgs{...}
//
//  or:
//
// 		 nil
//
type DiskDiskEncryptionKeyPtrInput interface {
	pulumi.Input

	ToDiskDiskEncryptionKeyPtrOutput() DiskDiskEncryptionKeyPtrOutput
	ToDiskDiskEncryptionKeyPtrOutputWithContext(context.Context) DiskDiskEncryptionKeyPtrOutput
}

type diskDiskEncryptionKeyPtrType DiskDiskEncryptionKeyArgs

func DiskDiskEncryptionKeyPtr(v *DiskDiskEncryptionKeyArgs) DiskDiskEncryptionKeyPtrInput {
	return (*diskDiskEncryptionKeyPtrType)(v)
}

func (*diskDiskEncryptionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskDiskEncryptionKey)(nil)).Elem()
}

func (i *diskDiskEncryptionKeyPtrType) ToDiskDiskEncryptionKeyPtrOutput() DiskDiskEncryptionKeyPtrOutput {
	return i.ToDiskDiskEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i *diskDiskEncryptionKeyPtrType) ToDiskDiskEncryptionKeyPtrOutputWithContext(ctx context.Context) DiskDiskEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskDiskEncryptionKeyPtrOutput)
}

type DiskDiskEncryptionKeyOutput struct{ *pulumi.OutputState }

func (DiskDiskEncryptionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskDiskEncryptionKey)(nil)).Elem()
}

func (o DiskDiskEncryptionKeyOutput) ToDiskDiskEncryptionKeyOutput() DiskDiskEncryptionKeyOutput {
	return o
}

func (o DiskDiskEncryptionKeyOutput) ToDiskDiskEncryptionKeyOutputWithContext(ctx context.Context) DiskDiskEncryptionKeyOutput {
	return o
}

func (o DiskDiskEncryptionKeyOutput) ToDiskDiskEncryptionKeyPtrOutput() DiskDiskEncryptionKeyPtrOutput {
	return o.ToDiskDiskEncryptionKeyPtrOutputWithContext(context.Background())
}

func (o DiskDiskEncryptionKeyOutput) ToDiskDiskEncryptionKeyPtrOutputWithContext(ctx context.Context) DiskDiskEncryptionKeyPtrOutput {
	return o.ApplyT(func(v DiskDiskEncryptionKey) *DiskDiskEncryptionKey {
		return &v
	}).(DiskDiskEncryptionKeyPtrOutput)
}

// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
// in the cloud console. Your project's Compute Engine System service account
// (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
func (o DiskDiskEncryptionKeyOutput) KmsKeySelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskDiskEncryptionKey) *string { return v.KmsKeySelfLink }).(pulumi.StringPtrOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in
// RFC 4648 base64 to either encrypt or decrypt this resource.
func (o DiskDiskEncryptionKeyOutput) RawKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskDiskEncryptionKey) *string { return v.RawKey }).(pulumi.StringPtrOutput)
}

// -
// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
// encryption key that protects this resource.
func (o DiskDiskEncryptionKeyOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskDiskEncryptionKey) *string { return v.Sha256 }).(pulumi.StringPtrOutput)
}

type DiskDiskEncryptionKeyPtrOutput struct{ *pulumi.OutputState }

func (DiskDiskEncryptionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskDiskEncryptionKey)(nil)).Elem()
}

func (o DiskDiskEncryptionKeyPtrOutput) ToDiskDiskEncryptionKeyPtrOutput() DiskDiskEncryptionKeyPtrOutput {
	return o
}

func (o DiskDiskEncryptionKeyPtrOutput) ToDiskDiskEncryptionKeyPtrOutputWithContext(ctx context.Context) DiskDiskEncryptionKeyPtrOutput {
	return o
}

func (o DiskDiskEncryptionKeyPtrOutput) Elem() DiskDiskEncryptionKeyOutput {
	return o.ApplyT(func(v *DiskDiskEncryptionKey) DiskDiskEncryptionKey { return *v }).(DiskDiskEncryptionKeyOutput)
}

// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
// in the cloud console. Your project's Compute Engine System service account
// (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
func (o DiskDiskEncryptionKeyPtrOutput) KmsKeySelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskDiskEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeySelfLink
	}).(pulumi.StringPtrOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in
// RFC 4648 base64 to either encrypt or decrypt this resource.
func (o DiskDiskEncryptionKeyPtrOutput) RawKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskDiskEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.RawKey
	}).(pulumi.StringPtrOutput)
}

// -
// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
// encryption key that protects this resource.
func (o DiskDiskEncryptionKeyPtrOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskDiskEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.Sha256
	}).(pulumi.StringPtrOutput)
}

type DiskSourceImageEncryptionKey struct {
	// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
	// in the cloud console. Your project's Compute Engine System service account
	// (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
	// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
	// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
	KmsKeySelfLink *string `pulumi:"kmsKeySelfLink"`
	// Specifies a 256-bit customer-supplied encryption key, encoded in
	// RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey *string `pulumi:"rawKey"`
	// -
	// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
	// encryption key that protects this resource.
	Sha256 *string `pulumi:"sha256"`
}

// DiskSourceImageEncryptionKeyInput is an input type that accepts DiskSourceImageEncryptionKeyArgs and DiskSourceImageEncryptionKeyOutput values.
// You can construct a concrete instance of `DiskSourceImageEncryptionKeyInput` via:
//
// 		 DiskSourceImageEncryptionKeyArgs{...}
//
type DiskSourceImageEncryptionKeyInput interface {
	pulumi.Input

	ToDiskSourceImageEncryptionKeyOutput() DiskSourceImageEncryptionKeyOutput
	ToDiskSourceImageEncryptionKeyOutputWithContext(context.Context) DiskSourceImageEncryptionKeyOutput
}

type DiskSourceImageEncryptionKeyArgs struct {
	// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
	// in the cloud console. Your project's Compute Engine System service account
	// (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
	// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
	// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
	KmsKeySelfLink pulumi.StringPtrInput `pulumi:"kmsKeySelfLink"`
	// Specifies a 256-bit customer-supplied encryption key, encoded in
	// RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey pulumi.StringPtrInput `pulumi:"rawKey"`
	// -
	// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
	// encryption key that protects this resource.
	Sha256 pulumi.StringPtrInput `pulumi:"sha256"`
}

func (DiskSourceImageEncryptionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSourceImageEncryptionKey)(nil)).Elem()
}

func (i DiskSourceImageEncryptionKeyArgs) ToDiskSourceImageEncryptionKeyOutput() DiskSourceImageEncryptionKeyOutput {
	return i.ToDiskSourceImageEncryptionKeyOutputWithContext(context.Background())
}

func (i DiskSourceImageEncryptionKeyArgs) ToDiskSourceImageEncryptionKeyOutputWithContext(ctx context.Context) DiskSourceImageEncryptionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSourceImageEncryptionKeyOutput)
}

func (i DiskSourceImageEncryptionKeyArgs) ToDiskSourceImageEncryptionKeyPtrOutput() DiskSourceImageEncryptionKeyPtrOutput {
	return i.ToDiskSourceImageEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i DiskSourceImageEncryptionKeyArgs) ToDiskSourceImageEncryptionKeyPtrOutputWithContext(ctx context.Context) DiskSourceImageEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSourceImageEncryptionKeyOutput).ToDiskSourceImageEncryptionKeyPtrOutputWithContext(ctx)
}

// DiskSourceImageEncryptionKeyPtrInput is an input type that accepts DiskSourceImageEncryptionKeyArgs, DiskSourceImageEncryptionKeyPtr and DiskSourceImageEncryptionKeyPtrOutput values.
// You can construct a concrete instance of `DiskSourceImageEncryptionKeyPtrInput` via:
//
// 		 DiskSourceImageEncryptionKeyArgs{...}
//
//  or:
//
// 		 nil
//
type DiskSourceImageEncryptionKeyPtrInput interface {
	pulumi.Input

	ToDiskSourceImageEncryptionKeyPtrOutput() DiskSourceImageEncryptionKeyPtrOutput
	ToDiskSourceImageEncryptionKeyPtrOutputWithContext(context.Context) DiskSourceImageEncryptionKeyPtrOutput
}

type diskSourceImageEncryptionKeyPtrType DiskSourceImageEncryptionKeyArgs

func DiskSourceImageEncryptionKeyPtr(v *DiskSourceImageEncryptionKeyArgs) DiskSourceImageEncryptionKeyPtrInput {
	return (*diskSourceImageEncryptionKeyPtrType)(v)
}

func (*diskSourceImageEncryptionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSourceImageEncryptionKey)(nil)).Elem()
}

func (i *diskSourceImageEncryptionKeyPtrType) ToDiskSourceImageEncryptionKeyPtrOutput() DiskSourceImageEncryptionKeyPtrOutput {
	return i.ToDiskSourceImageEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i *diskSourceImageEncryptionKeyPtrType) ToDiskSourceImageEncryptionKeyPtrOutputWithContext(ctx context.Context) DiskSourceImageEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSourceImageEncryptionKeyPtrOutput)
}

type DiskSourceImageEncryptionKeyOutput struct{ *pulumi.OutputState }

func (DiskSourceImageEncryptionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSourceImageEncryptionKey)(nil)).Elem()
}

func (o DiskSourceImageEncryptionKeyOutput) ToDiskSourceImageEncryptionKeyOutput() DiskSourceImageEncryptionKeyOutput {
	return o
}

func (o DiskSourceImageEncryptionKeyOutput) ToDiskSourceImageEncryptionKeyOutputWithContext(ctx context.Context) DiskSourceImageEncryptionKeyOutput {
	return o
}

func (o DiskSourceImageEncryptionKeyOutput) ToDiskSourceImageEncryptionKeyPtrOutput() DiskSourceImageEncryptionKeyPtrOutput {
	return o.ToDiskSourceImageEncryptionKeyPtrOutputWithContext(context.Background())
}

func (o DiskSourceImageEncryptionKeyOutput) ToDiskSourceImageEncryptionKeyPtrOutputWithContext(ctx context.Context) DiskSourceImageEncryptionKeyPtrOutput {
	return o.ApplyT(func(v DiskSourceImageEncryptionKey) *DiskSourceImageEncryptionKey {
		return &v
	}).(DiskSourceImageEncryptionKeyPtrOutput)
}

// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
// in the cloud console. Your project's Compute Engine System service account
// (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
func (o DiskSourceImageEncryptionKeyOutput) KmsKeySelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSourceImageEncryptionKey) *string { return v.KmsKeySelfLink }).(pulumi.StringPtrOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in
// RFC 4648 base64 to either encrypt or decrypt this resource.
func (o DiskSourceImageEncryptionKeyOutput) RawKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSourceImageEncryptionKey) *string { return v.RawKey }).(pulumi.StringPtrOutput)
}

// -
// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
// encryption key that protects this resource.
func (o DiskSourceImageEncryptionKeyOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSourceImageEncryptionKey) *string { return v.Sha256 }).(pulumi.StringPtrOutput)
}

type DiskSourceImageEncryptionKeyPtrOutput struct{ *pulumi.OutputState }

func (DiskSourceImageEncryptionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSourceImageEncryptionKey)(nil)).Elem()
}

func (o DiskSourceImageEncryptionKeyPtrOutput) ToDiskSourceImageEncryptionKeyPtrOutput() DiskSourceImageEncryptionKeyPtrOutput {
	return o
}

func (o DiskSourceImageEncryptionKeyPtrOutput) ToDiskSourceImageEncryptionKeyPtrOutputWithContext(ctx context.Context) DiskSourceImageEncryptionKeyPtrOutput {
	return o
}

func (o DiskSourceImageEncryptionKeyPtrOutput) Elem() DiskSourceImageEncryptionKeyOutput {
	return o.ApplyT(func(v *DiskSourceImageEncryptionKey) DiskSourceImageEncryptionKey { return *v }).(DiskSourceImageEncryptionKeyOutput)
}

// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
// in the cloud console. Your project's Compute Engine System service account
// (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
func (o DiskSourceImageEncryptionKeyPtrOutput) KmsKeySelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSourceImageEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeySelfLink
	}).(pulumi.StringPtrOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in
// RFC 4648 base64 to either encrypt or decrypt this resource.
func (o DiskSourceImageEncryptionKeyPtrOutput) RawKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSourceImageEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.RawKey
	}).(pulumi.StringPtrOutput)
}

// -
// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
// encryption key that protects this resource.
func (o DiskSourceImageEncryptionKeyPtrOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSourceImageEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.Sha256
	}).(pulumi.StringPtrOutput)
}

type DiskSourceSnapshotEncryptionKey struct {
	// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
	// in the cloud console. Your project's Compute Engine System service account
	// (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
	// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
	// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
	KmsKeySelfLink *string `pulumi:"kmsKeySelfLink"`
	// Specifies a 256-bit customer-supplied encryption key, encoded in
	// RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey *string `pulumi:"rawKey"`
	// -
	// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
	// encryption key that protects this resource.
	Sha256 *string `pulumi:"sha256"`
}

// DiskSourceSnapshotEncryptionKeyInput is an input type that accepts DiskSourceSnapshotEncryptionKeyArgs and DiskSourceSnapshotEncryptionKeyOutput values.
// You can construct a concrete instance of `DiskSourceSnapshotEncryptionKeyInput` via:
//
// 		 DiskSourceSnapshotEncryptionKeyArgs{...}
//
type DiskSourceSnapshotEncryptionKeyInput interface {
	pulumi.Input

	ToDiskSourceSnapshotEncryptionKeyOutput() DiskSourceSnapshotEncryptionKeyOutput
	ToDiskSourceSnapshotEncryptionKeyOutputWithContext(context.Context) DiskSourceSnapshotEncryptionKeyOutput
}

type DiskSourceSnapshotEncryptionKeyArgs struct {
	// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
	// in the cloud console. Your project's Compute Engine System service account
	// (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
	// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
	// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
	KmsKeySelfLink pulumi.StringPtrInput `pulumi:"kmsKeySelfLink"`
	// Specifies a 256-bit customer-supplied encryption key, encoded in
	// RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey pulumi.StringPtrInput `pulumi:"rawKey"`
	// -
	// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
	// encryption key that protects this resource.
	Sha256 pulumi.StringPtrInput `pulumi:"sha256"`
}

func (DiskSourceSnapshotEncryptionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSourceSnapshotEncryptionKey)(nil)).Elem()
}

func (i DiskSourceSnapshotEncryptionKeyArgs) ToDiskSourceSnapshotEncryptionKeyOutput() DiskSourceSnapshotEncryptionKeyOutput {
	return i.ToDiskSourceSnapshotEncryptionKeyOutputWithContext(context.Background())
}

func (i DiskSourceSnapshotEncryptionKeyArgs) ToDiskSourceSnapshotEncryptionKeyOutputWithContext(ctx context.Context) DiskSourceSnapshotEncryptionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSourceSnapshotEncryptionKeyOutput)
}

func (i DiskSourceSnapshotEncryptionKeyArgs) ToDiskSourceSnapshotEncryptionKeyPtrOutput() DiskSourceSnapshotEncryptionKeyPtrOutput {
	return i.ToDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i DiskSourceSnapshotEncryptionKeyArgs) ToDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(ctx context.Context) DiskSourceSnapshotEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSourceSnapshotEncryptionKeyOutput).ToDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(ctx)
}

// DiskSourceSnapshotEncryptionKeyPtrInput is an input type that accepts DiskSourceSnapshotEncryptionKeyArgs, DiskSourceSnapshotEncryptionKeyPtr and DiskSourceSnapshotEncryptionKeyPtrOutput values.
// You can construct a concrete instance of `DiskSourceSnapshotEncryptionKeyPtrInput` via:
//
// 		 DiskSourceSnapshotEncryptionKeyArgs{...}
//
//  or:
//
// 		 nil
//
type DiskSourceSnapshotEncryptionKeyPtrInput interface {
	pulumi.Input

	ToDiskSourceSnapshotEncryptionKeyPtrOutput() DiskSourceSnapshotEncryptionKeyPtrOutput
	ToDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(context.Context) DiskSourceSnapshotEncryptionKeyPtrOutput
}

type diskSourceSnapshotEncryptionKeyPtrType DiskSourceSnapshotEncryptionKeyArgs

func DiskSourceSnapshotEncryptionKeyPtr(v *DiskSourceSnapshotEncryptionKeyArgs) DiskSourceSnapshotEncryptionKeyPtrInput {
	return (*diskSourceSnapshotEncryptionKeyPtrType)(v)
}

func (*diskSourceSnapshotEncryptionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSourceSnapshotEncryptionKey)(nil)).Elem()
}

func (i *diskSourceSnapshotEncryptionKeyPtrType) ToDiskSourceSnapshotEncryptionKeyPtrOutput() DiskSourceSnapshotEncryptionKeyPtrOutput {
	return i.ToDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i *diskSourceSnapshotEncryptionKeyPtrType) ToDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(ctx context.Context) DiskSourceSnapshotEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSourceSnapshotEncryptionKeyPtrOutput)
}

type DiskSourceSnapshotEncryptionKeyOutput struct{ *pulumi.OutputState }

func (DiskSourceSnapshotEncryptionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSourceSnapshotEncryptionKey)(nil)).Elem()
}

func (o DiskSourceSnapshotEncryptionKeyOutput) ToDiskSourceSnapshotEncryptionKeyOutput() DiskSourceSnapshotEncryptionKeyOutput {
	return o
}

func (o DiskSourceSnapshotEncryptionKeyOutput) ToDiskSourceSnapshotEncryptionKeyOutputWithContext(ctx context.Context) DiskSourceSnapshotEncryptionKeyOutput {
	return o
}

func (o DiskSourceSnapshotEncryptionKeyOutput) ToDiskSourceSnapshotEncryptionKeyPtrOutput() DiskSourceSnapshotEncryptionKeyPtrOutput {
	return o.ToDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(context.Background())
}

func (o DiskSourceSnapshotEncryptionKeyOutput) ToDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(ctx context.Context) DiskSourceSnapshotEncryptionKeyPtrOutput {
	return o.ApplyT(func(v DiskSourceSnapshotEncryptionKey) *DiskSourceSnapshotEncryptionKey {
		return &v
	}).(DiskSourceSnapshotEncryptionKeyPtrOutput)
}

// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
// in the cloud console. Your project's Compute Engine System service account
// (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
func (o DiskSourceSnapshotEncryptionKeyOutput) KmsKeySelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSourceSnapshotEncryptionKey) *string { return v.KmsKeySelfLink }).(pulumi.StringPtrOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in
// RFC 4648 base64 to either encrypt or decrypt this resource.
func (o DiskSourceSnapshotEncryptionKeyOutput) RawKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSourceSnapshotEncryptionKey) *string { return v.RawKey }).(pulumi.StringPtrOutput)
}

// -
// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
// encryption key that protects this resource.
func (o DiskSourceSnapshotEncryptionKeyOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSourceSnapshotEncryptionKey) *string { return v.Sha256 }).(pulumi.StringPtrOutput)
}

type DiskSourceSnapshotEncryptionKeyPtrOutput struct{ *pulumi.OutputState }

func (DiskSourceSnapshotEncryptionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSourceSnapshotEncryptionKey)(nil)).Elem()
}

func (o DiskSourceSnapshotEncryptionKeyPtrOutput) ToDiskSourceSnapshotEncryptionKeyPtrOutput() DiskSourceSnapshotEncryptionKeyPtrOutput {
	return o
}

func (o DiskSourceSnapshotEncryptionKeyPtrOutput) ToDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(ctx context.Context) DiskSourceSnapshotEncryptionKeyPtrOutput {
	return o
}

func (o DiskSourceSnapshotEncryptionKeyPtrOutput) Elem() DiskSourceSnapshotEncryptionKeyOutput {
	return o.ApplyT(func(v *DiskSourceSnapshotEncryptionKey) DiskSourceSnapshotEncryptionKey { return *v }).(DiskSourceSnapshotEncryptionKeyOutput)
}

// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
// in the cloud console. Your project's Compute Engine System service account
// (`service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com`) must have
// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
func (o DiskSourceSnapshotEncryptionKeyPtrOutput) KmsKeySelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSourceSnapshotEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeySelfLink
	}).(pulumi.StringPtrOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in
// RFC 4648 base64 to either encrypt or decrypt this resource.
func (o DiskSourceSnapshotEncryptionKeyPtrOutput) RawKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSourceSnapshotEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.RawKey
	}).(pulumi.StringPtrOutput)
}

// -
// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
// encryption key that protects this resource.
func (o DiskSourceSnapshotEncryptionKeyPtrOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSourceSnapshotEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.Sha256
	}).(pulumi.StringPtrOutput)
}

type ExternalVpnGatewayInterface struct {
	// The numberic ID for this interface. Allowed values are based on the redundancy type
	// of this external VPN gateway
	// * `0 - SINGLE_IP_INTERNALLY_REDUNDANT`
	// * `0, 1 - TWO_IPS_REDUNDANCY`
	// * `0, 1, 2, 3 - FOUR_IPS_REDUNDANCY`
	Id *int `pulumi:"id"`
	// IP address of the interface in the external VPN gateway.
	// Only IPv4 is supported. This IP address can be either from
	// your on-premise gateway or another Cloud provider’s VPN gateway,
	// it cannot be an IP address from Google Compute Engine.
	IpAddress *string `pulumi:"ipAddress"`
}

// ExternalVpnGatewayInterfaceInput is an input type that accepts ExternalVpnGatewayInterfaceArgs and ExternalVpnGatewayInterfaceOutput values.
// You can construct a concrete instance of `ExternalVpnGatewayInterfaceInput` via:
//
// 		 ExternalVpnGatewayInterfaceArgs{...}
//
type ExternalVpnGatewayInterfaceInput interface {
	pulumi.Input

	ToExternalVpnGatewayInterfaceOutput() ExternalVpnGatewayInterfaceOutput
	ToExternalVpnGatewayInterfaceOutputWithContext(context.Context) ExternalVpnGatewayInterfaceOutput
}

type ExternalVpnGatewayInterfaceArgs struct {
	// The numberic ID for this interface. Allowed values are based on the redundancy type
	// of this external VPN gateway
	// * `0 - SINGLE_IP_INTERNALLY_REDUNDANT`
	// * `0, 1 - TWO_IPS_REDUNDANCY`
	// * `0, 1, 2, 3 - FOUR_IPS_REDUNDANCY`
	Id pulumi.IntPtrInput `pulumi:"id"`
	// IP address of the interface in the external VPN gateway.
	// Only IPv4 is supported. This IP address can be either from
	// your on-premise gateway or another Cloud provider’s VPN gateway,
	// it cannot be an IP address from Google Compute Engine.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
}

func (ExternalVpnGatewayInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVpnGatewayInterface)(nil)).Elem()
}

func (i ExternalVpnGatewayInterfaceArgs) ToExternalVpnGatewayInterfaceOutput() ExternalVpnGatewayInterfaceOutput {
	return i.ToExternalVpnGatewayInterfaceOutputWithContext(context.Background())
}

func (i ExternalVpnGatewayInterfaceArgs) ToExternalVpnGatewayInterfaceOutputWithContext(ctx context.Context) ExternalVpnGatewayInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVpnGatewayInterfaceOutput)
}

// ExternalVpnGatewayInterfaceArrayInput is an input type that accepts ExternalVpnGatewayInterfaceArray and ExternalVpnGatewayInterfaceArrayOutput values.
// You can construct a concrete instance of `ExternalVpnGatewayInterfaceArrayInput` via:
//
// 		 ExternalVpnGatewayInterfaceArray{ ExternalVpnGatewayInterfaceArgs{...} }
//
type ExternalVpnGatewayInterfaceArrayInput interface {
	pulumi.Input

	ToExternalVpnGatewayInterfaceArrayOutput() ExternalVpnGatewayInterfaceArrayOutput
	ToExternalVpnGatewayInterfaceArrayOutputWithContext(context.Context) ExternalVpnGatewayInterfaceArrayOutput
}

type ExternalVpnGatewayInterfaceArray []ExternalVpnGatewayInterfaceInput

func (ExternalVpnGatewayInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalVpnGatewayInterface)(nil)).Elem()
}

func (i ExternalVpnGatewayInterfaceArray) ToExternalVpnGatewayInterfaceArrayOutput() ExternalVpnGatewayInterfaceArrayOutput {
	return i.ToExternalVpnGatewayInterfaceArrayOutputWithContext(context.Background())
}

func (i ExternalVpnGatewayInterfaceArray) ToExternalVpnGatewayInterfaceArrayOutputWithContext(ctx context.Context) ExternalVpnGatewayInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVpnGatewayInterfaceArrayOutput)
}

type ExternalVpnGatewayInterfaceOutput struct{ *pulumi.OutputState }

func (ExternalVpnGatewayInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVpnGatewayInterface)(nil)).Elem()
}

func (o ExternalVpnGatewayInterfaceOutput) ToExternalVpnGatewayInterfaceOutput() ExternalVpnGatewayInterfaceOutput {
	return o
}

func (o ExternalVpnGatewayInterfaceOutput) ToExternalVpnGatewayInterfaceOutputWithContext(ctx context.Context) ExternalVpnGatewayInterfaceOutput {
	return o
}

// The numberic ID for this interface. Allowed values are based on the redundancy type
// of this external VPN gateway
// * `0 - SINGLE_IP_INTERNALLY_REDUNDANT`
// * `0, 1 - TWO_IPS_REDUNDANCY`
// * `0, 1, 2, 3 - FOUR_IPS_REDUNDANCY`
func (o ExternalVpnGatewayInterfaceOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExternalVpnGatewayInterface) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// IP address of the interface in the external VPN gateway.
// Only IPv4 is supported. This IP address can be either from
// your on-premise gateway or another Cloud provider’s VPN gateway,
// it cannot be an IP address from Google Compute Engine.
func (o ExternalVpnGatewayInterfaceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalVpnGatewayInterface) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

type ExternalVpnGatewayInterfaceArrayOutput struct{ *pulumi.OutputState }

func (ExternalVpnGatewayInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalVpnGatewayInterface)(nil)).Elem()
}

func (o ExternalVpnGatewayInterfaceArrayOutput) ToExternalVpnGatewayInterfaceArrayOutput() ExternalVpnGatewayInterfaceArrayOutput {
	return o
}

func (o ExternalVpnGatewayInterfaceArrayOutput) ToExternalVpnGatewayInterfaceArrayOutputWithContext(ctx context.Context) ExternalVpnGatewayInterfaceArrayOutput {
	return o
}

func (o ExternalVpnGatewayInterfaceArrayOutput) Index(i pulumi.IntInput) ExternalVpnGatewayInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalVpnGatewayInterface {
		return vs[0].([]ExternalVpnGatewayInterface)[vs[1].(int)]
	}).(ExternalVpnGatewayInterfaceOutput)
}

type FirewallAllow struct {
	// An optional list of ports to which this rule applies. This field
	// is only applicable for UDP or TCP protocol. Each entry must be
	// either an integer or a range. If not specified, this rule
	// applies to connections through any port.
	// Example inputs include: ["22"], ["80","443"], and
	// ["12345-12349"].
	Ports []string `pulumi:"ports"`
	// The IP protocol to which this rule applies. The protocol type is
	// required when creating a firewall rule. This value can either be
	// one of the following well known protocol strings (tcp, udp,
	// icmp, esp, ah, sctp, ipip), or the IP protocol number.
	Protocol string `pulumi:"protocol"`
}

// FirewallAllowInput is an input type that accepts FirewallAllowArgs and FirewallAllowOutput values.
// You can construct a concrete instance of `FirewallAllowInput` via:
//
// 		 FirewallAllowArgs{...}
//
type FirewallAllowInput interface {
	pulumi.Input

	ToFirewallAllowOutput() FirewallAllowOutput
	ToFirewallAllowOutputWithContext(context.Context) FirewallAllowOutput
}

type FirewallAllowArgs struct {
	// An optional list of ports to which this rule applies. This field
	// is only applicable for UDP or TCP protocol. Each entry must be
	// either an integer or a range. If not specified, this rule
	// applies to connections through any port.
	// Example inputs include: ["22"], ["80","443"], and
	// ["12345-12349"].
	Ports pulumi.StringArrayInput `pulumi:"ports"`
	// The IP protocol to which this rule applies. The protocol type is
	// required when creating a firewall rule. This value can either be
	// one of the following well known protocol strings (tcp, udp,
	// icmp, esp, ah, sctp, ipip), or the IP protocol number.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (FirewallAllowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallAllow)(nil)).Elem()
}

func (i FirewallAllowArgs) ToFirewallAllowOutput() FirewallAllowOutput {
	return i.ToFirewallAllowOutputWithContext(context.Background())
}

func (i FirewallAllowArgs) ToFirewallAllowOutputWithContext(ctx context.Context) FirewallAllowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallAllowOutput)
}

// FirewallAllowArrayInput is an input type that accepts FirewallAllowArray and FirewallAllowArrayOutput values.
// You can construct a concrete instance of `FirewallAllowArrayInput` via:
//
// 		 FirewallAllowArray{ FirewallAllowArgs{...} }
//
type FirewallAllowArrayInput interface {
	pulumi.Input

	ToFirewallAllowArrayOutput() FirewallAllowArrayOutput
	ToFirewallAllowArrayOutputWithContext(context.Context) FirewallAllowArrayOutput
}

type FirewallAllowArray []FirewallAllowInput

func (FirewallAllowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallAllow)(nil)).Elem()
}

func (i FirewallAllowArray) ToFirewallAllowArrayOutput() FirewallAllowArrayOutput {
	return i.ToFirewallAllowArrayOutputWithContext(context.Background())
}

func (i FirewallAllowArray) ToFirewallAllowArrayOutputWithContext(ctx context.Context) FirewallAllowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallAllowArrayOutput)
}

type FirewallAllowOutput struct{ *pulumi.OutputState }

func (FirewallAllowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallAllow)(nil)).Elem()
}

func (o FirewallAllowOutput) ToFirewallAllowOutput() FirewallAllowOutput {
	return o
}

func (o FirewallAllowOutput) ToFirewallAllowOutputWithContext(ctx context.Context) FirewallAllowOutput {
	return o
}

// An optional list of ports to which this rule applies. This field
// is only applicable for UDP or TCP protocol. Each entry must be
// either an integer or a range. If not specified, this rule
// applies to connections through any port.
// Example inputs include: ["22"], ["80","443"], and
// ["12345-12349"].
func (o FirewallAllowOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallAllow) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

// The IP protocol to which this rule applies. The protocol type is
// required when creating a firewall rule. This value can either be
// one of the following well known protocol strings (tcp, udp,
// icmp, esp, ah, sctp, ipip), or the IP protocol number.
func (o FirewallAllowOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallAllow) string { return v.Protocol }).(pulumi.StringOutput)
}

type FirewallAllowArrayOutput struct{ *pulumi.OutputState }

func (FirewallAllowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallAllow)(nil)).Elem()
}

func (o FirewallAllowArrayOutput) ToFirewallAllowArrayOutput() FirewallAllowArrayOutput {
	return o
}

func (o FirewallAllowArrayOutput) ToFirewallAllowArrayOutputWithContext(ctx context.Context) FirewallAllowArrayOutput {
	return o
}

func (o FirewallAllowArrayOutput) Index(i pulumi.IntInput) FirewallAllowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallAllow {
		return vs[0].([]FirewallAllow)[vs[1].(int)]
	}).(FirewallAllowOutput)
}

type FirewallDeny struct {
	// An optional list of ports to which this rule applies. This field
	// is only applicable for UDP or TCP protocol. Each entry must be
	// either an integer or a range. If not specified, this rule
	// applies to connections through any port.
	// Example inputs include: ["22"], ["80","443"], and
	// ["12345-12349"].
	Ports []string `pulumi:"ports"`
	// The IP protocol to which this rule applies. The protocol type is
	// required when creating a firewall rule. This value can either be
	// one of the following well known protocol strings (tcp, udp,
	// icmp, esp, ah, sctp, ipip), or the IP protocol number.
	Protocol string `pulumi:"protocol"`
}

// FirewallDenyInput is an input type that accepts FirewallDenyArgs and FirewallDenyOutput values.
// You can construct a concrete instance of `FirewallDenyInput` via:
//
// 		 FirewallDenyArgs{...}
//
type FirewallDenyInput interface {
	pulumi.Input

	ToFirewallDenyOutput() FirewallDenyOutput
	ToFirewallDenyOutputWithContext(context.Context) FirewallDenyOutput
}

type FirewallDenyArgs struct {
	// An optional list of ports to which this rule applies. This field
	// is only applicable for UDP or TCP protocol. Each entry must be
	// either an integer or a range. If not specified, this rule
	// applies to connections through any port.
	// Example inputs include: ["22"], ["80","443"], and
	// ["12345-12349"].
	Ports pulumi.StringArrayInput `pulumi:"ports"`
	// The IP protocol to which this rule applies. The protocol type is
	// required when creating a firewall rule. This value can either be
	// one of the following well known protocol strings (tcp, udp,
	// icmp, esp, ah, sctp, ipip), or the IP protocol number.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (FirewallDenyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallDeny)(nil)).Elem()
}

func (i FirewallDenyArgs) ToFirewallDenyOutput() FirewallDenyOutput {
	return i.ToFirewallDenyOutputWithContext(context.Background())
}

func (i FirewallDenyArgs) ToFirewallDenyOutputWithContext(ctx context.Context) FirewallDenyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallDenyOutput)
}

// FirewallDenyArrayInput is an input type that accepts FirewallDenyArray and FirewallDenyArrayOutput values.
// You can construct a concrete instance of `FirewallDenyArrayInput` via:
//
// 		 FirewallDenyArray{ FirewallDenyArgs{...} }
//
type FirewallDenyArrayInput interface {
	pulumi.Input

	ToFirewallDenyArrayOutput() FirewallDenyArrayOutput
	ToFirewallDenyArrayOutputWithContext(context.Context) FirewallDenyArrayOutput
}

type FirewallDenyArray []FirewallDenyInput

func (FirewallDenyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallDeny)(nil)).Elem()
}

func (i FirewallDenyArray) ToFirewallDenyArrayOutput() FirewallDenyArrayOutput {
	return i.ToFirewallDenyArrayOutputWithContext(context.Background())
}

func (i FirewallDenyArray) ToFirewallDenyArrayOutputWithContext(ctx context.Context) FirewallDenyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallDenyArrayOutput)
}

type FirewallDenyOutput struct{ *pulumi.OutputState }

func (FirewallDenyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallDeny)(nil)).Elem()
}

func (o FirewallDenyOutput) ToFirewallDenyOutput() FirewallDenyOutput {
	return o
}

func (o FirewallDenyOutput) ToFirewallDenyOutputWithContext(ctx context.Context) FirewallDenyOutput {
	return o
}

// An optional list of ports to which this rule applies. This field
// is only applicable for UDP or TCP protocol. Each entry must be
// either an integer or a range. If not specified, this rule
// applies to connections through any port.
// Example inputs include: ["22"], ["80","443"], and
// ["12345-12349"].
func (o FirewallDenyOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallDeny) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

// The IP protocol to which this rule applies. The protocol type is
// required when creating a firewall rule. This value can either be
// one of the following well known protocol strings (tcp, udp,
// icmp, esp, ah, sctp, ipip), or the IP protocol number.
func (o FirewallDenyOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallDeny) string { return v.Protocol }).(pulumi.StringOutput)
}

type FirewallDenyArrayOutput struct{ *pulumi.OutputState }

func (FirewallDenyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallDeny)(nil)).Elem()
}

func (o FirewallDenyArrayOutput) ToFirewallDenyArrayOutput() FirewallDenyArrayOutput {
	return o
}

func (o FirewallDenyArrayOutput) ToFirewallDenyArrayOutputWithContext(ctx context.Context) FirewallDenyArrayOutput {
	return o
}

func (o FirewallDenyArrayOutput) Index(i pulumi.IntInput) FirewallDenyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallDeny {
		return vs[0].([]FirewallDeny)[vs[1].(int)]
	}).(FirewallDenyOutput)
}

type GlobalForwardingRuleMetadataFilter struct {
	// The list of label value pairs that must match labels in the
	// provided metadata based on filterMatchCriteria
	// This list must not be empty and can have at the most 64 entries.  Structure is documented below.
	FilterLabels []GlobalForwardingRuleMetadataFilterFilterLabel `pulumi:"filterLabels"`
	// Specifies how individual filterLabel matches within the list of
	// filterLabels contribute towards the overall metadataFilter match.
	// MATCH_ANY - At least one of the filterLabels must have a matching
	// label in the provided metadata.
	// MATCH_ALL - All filterLabels must have matching labels in the
	// provided metadata.
	FilterMatchCriteria string `pulumi:"filterMatchCriteria"`
}

// GlobalForwardingRuleMetadataFilterInput is an input type that accepts GlobalForwardingRuleMetadataFilterArgs and GlobalForwardingRuleMetadataFilterOutput values.
// You can construct a concrete instance of `GlobalForwardingRuleMetadataFilterInput` via:
//
// 		 GlobalForwardingRuleMetadataFilterArgs{...}
//
type GlobalForwardingRuleMetadataFilterInput interface {
	pulumi.Input

	ToGlobalForwardingRuleMetadataFilterOutput() GlobalForwardingRuleMetadataFilterOutput
	ToGlobalForwardingRuleMetadataFilterOutputWithContext(context.Context) GlobalForwardingRuleMetadataFilterOutput
}

type GlobalForwardingRuleMetadataFilterArgs struct {
	// The list of label value pairs that must match labels in the
	// provided metadata based on filterMatchCriteria
	// This list must not be empty and can have at the most 64 entries.  Structure is documented below.
	FilterLabels GlobalForwardingRuleMetadataFilterFilterLabelArrayInput `pulumi:"filterLabels"`
	// Specifies how individual filterLabel matches within the list of
	// filterLabels contribute towards the overall metadataFilter match.
	// MATCH_ANY - At least one of the filterLabels must have a matching
	// label in the provided metadata.
	// MATCH_ALL - All filterLabels must have matching labels in the
	// provided metadata.
	FilterMatchCriteria pulumi.StringInput `pulumi:"filterMatchCriteria"`
}

func (GlobalForwardingRuleMetadataFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalForwardingRuleMetadataFilter)(nil)).Elem()
}

func (i GlobalForwardingRuleMetadataFilterArgs) ToGlobalForwardingRuleMetadataFilterOutput() GlobalForwardingRuleMetadataFilterOutput {
	return i.ToGlobalForwardingRuleMetadataFilterOutputWithContext(context.Background())
}

func (i GlobalForwardingRuleMetadataFilterArgs) ToGlobalForwardingRuleMetadataFilterOutputWithContext(ctx context.Context) GlobalForwardingRuleMetadataFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalForwardingRuleMetadataFilterOutput)
}

// GlobalForwardingRuleMetadataFilterArrayInput is an input type that accepts GlobalForwardingRuleMetadataFilterArray and GlobalForwardingRuleMetadataFilterArrayOutput values.
// You can construct a concrete instance of `GlobalForwardingRuleMetadataFilterArrayInput` via:
//
// 		 GlobalForwardingRuleMetadataFilterArray{ GlobalForwardingRuleMetadataFilterArgs{...} }
//
type GlobalForwardingRuleMetadataFilterArrayInput interface {
	pulumi.Input

	ToGlobalForwardingRuleMetadataFilterArrayOutput() GlobalForwardingRuleMetadataFilterArrayOutput
	ToGlobalForwardingRuleMetadataFilterArrayOutputWithContext(context.Context) GlobalForwardingRuleMetadataFilterArrayOutput
}

type GlobalForwardingRuleMetadataFilterArray []GlobalForwardingRuleMetadataFilterInput

func (GlobalForwardingRuleMetadataFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalForwardingRuleMetadataFilter)(nil)).Elem()
}

func (i GlobalForwardingRuleMetadataFilterArray) ToGlobalForwardingRuleMetadataFilterArrayOutput() GlobalForwardingRuleMetadataFilterArrayOutput {
	return i.ToGlobalForwardingRuleMetadataFilterArrayOutputWithContext(context.Background())
}

func (i GlobalForwardingRuleMetadataFilterArray) ToGlobalForwardingRuleMetadataFilterArrayOutputWithContext(ctx context.Context) GlobalForwardingRuleMetadataFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalForwardingRuleMetadataFilterArrayOutput)
}

type GlobalForwardingRuleMetadataFilterOutput struct{ *pulumi.OutputState }

func (GlobalForwardingRuleMetadataFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalForwardingRuleMetadataFilter)(nil)).Elem()
}

func (o GlobalForwardingRuleMetadataFilterOutput) ToGlobalForwardingRuleMetadataFilterOutput() GlobalForwardingRuleMetadataFilterOutput {
	return o
}

func (o GlobalForwardingRuleMetadataFilterOutput) ToGlobalForwardingRuleMetadataFilterOutputWithContext(ctx context.Context) GlobalForwardingRuleMetadataFilterOutput {
	return o
}

// The list of label value pairs that must match labels in the
// provided metadata based on filterMatchCriteria
// This list must not be empty and can have at the most 64 entries.  Structure is documented below.
func (o GlobalForwardingRuleMetadataFilterOutput) FilterLabels() GlobalForwardingRuleMetadataFilterFilterLabelArrayOutput {
	return o.ApplyT(func(v GlobalForwardingRuleMetadataFilter) []GlobalForwardingRuleMetadataFilterFilterLabel {
		return v.FilterLabels
	}).(GlobalForwardingRuleMetadataFilterFilterLabelArrayOutput)
}

// Specifies how individual filterLabel matches within the list of
// filterLabels contribute towards the overall metadataFilter match.
// MATCH_ANY - At least one of the filterLabels must have a matching
// label in the provided metadata.
// MATCH_ALL - All filterLabels must have matching labels in the
// provided metadata.
func (o GlobalForwardingRuleMetadataFilterOutput) FilterMatchCriteria() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalForwardingRuleMetadataFilter) string { return v.FilterMatchCriteria }).(pulumi.StringOutput)
}

type GlobalForwardingRuleMetadataFilterArrayOutput struct{ *pulumi.OutputState }

func (GlobalForwardingRuleMetadataFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalForwardingRuleMetadataFilter)(nil)).Elem()
}

func (o GlobalForwardingRuleMetadataFilterArrayOutput) ToGlobalForwardingRuleMetadataFilterArrayOutput() GlobalForwardingRuleMetadataFilterArrayOutput {
	return o
}

func (o GlobalForwardingRuleMetadataFilterArrayOutput) ToGlobalForwardingRuleMetadataFilterArrayOutputWithContext(ctx context.Context) GlobalForwardingRuleMetadataFilterArrayOutput {
	return o
}

func (o GlobalForwardingRuleMetadataFilterArrayOutput) Index(i pulumi.IntInput) GlobalForwardingRuleMetadataFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalForwardingRuleMetadataFilter {
		return vs[0].([]GlobalForwardingRuleMetadataFilter)[vs[1].(int)]
	}).(GlobalForwardingRuleMetadataFilterOutput)
}

type GlobalForwardingRuleMetadataFilterFilterLabel struct {
	// Name of the metadata label. The length must be between
	// 1 and 1024 characters, inclusive.
	Name string `pulumi:"name"`
	// The value that the label must match. The value has a maximum
	// length of 1024 characters.
	Value string `pulumi:"value"`
}

// GlobalForwardingRuleMetadataFilterFilterLabelInput is an input type that accepts GlobalForwardingRuleMetadataFilterFilterLabelArgs and GlobalForwardingRuleMetadataFilterFilterLabelOutput values.
// You can construct a concrete instance of `GlobalForwardingRuleMetadataFilterFilterLabelInput` via:
//
// 		 GlobalForwardingRuleMetadataFilterFilterLabelArgs{...}
//
type GlobalForwardingRuleMetadataFilterFilterLabelInput interface {
	pulumi.Input

	ToGlobalForwardingRuleMetadataFilterFilterLabelOutput() GlobalForwardingRuleMetadataFilterFilterLabelOutput
	ToGlobalForwardingRuleMetadataFilterFilterLabelOutputWithContext(context.Context) GlobalForwardingRuleMetadataFilterFilterLabelOutput
}

type GlobalForwardingRuleMetadataFilterFilterLabelArgs struct {
	// Name of the metadata label. The length must be between
	// 1 and 1024 characters, inclusive.
	Name pulumi.StringInput `pulumi:"name"`
	// The value that the label must match. The value has a maximum
	// length of 1024 characters.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GlobalForwardingRuleMetadataFilterFilterLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalForwardingRuleMetadataFilterFilterLabel)(nil)).Elem()
}

func (i GlobalForwardingRuleMetadataFilterFilterLabelArgs) ToGlobalForwardingRuleMetadataFilterFilterLabelOutput() GlobalForwardingRuleMetadataFilterFilterLabelOutput {
	return i.ToGlobalForwardingRuleMetadataFilterFilterLabelOutputWithContext(context.Background())
}

func (i GlobalForwardingRuleMetadataFilterFilterLabelArgs) ToGlobalForwardingRuleMetadataFilterFilterLabelOutputWithContext(ctx context.Context) GlobalForwardingRuleMetadataFilterFilterLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalForwardingRuleMetadataFilterFilterLabelOutput)
}

// GlobalForwardingRuleMetadataFilterFilterLabelArrayInput is an input type that accepts GlobalForwardingRuleMetadataFilterFilterLabelArray and GlobalForwardingRuleMetadataFilterFilterLabelArrayOutput values.
// You can construct a concrete instance of `GlobalForwardingRuleMetadataFilterFilterLabelArrayInput` via:
//
// 		 GlobalForwardingRuleMetadataFilterFilterLabelArray{ GlobalForwardingRuleMetadataFilterFilterLabelArgs{...} }
//
type GlobalForwardingRuleMetadataFilterFilterLabelArrayInput interface {
	pulumi.Input

	ToGlobalForwardingRuleMetadataFilterFilterLabelArrayOutput() GlobalForwardingRuleMetadataFilterFilterLabelArrayOutput
	ToGlobalForwardingRuleMetadataFilterFilterLabelArrayOutputWithContext(context.Context) GlobalForwardingRuleMetadataFilterFilterLabelArrayOutput
}

type GlobalForwardingRuleMetadataFilterFilterLabelArray []GlobalForwardingRuleMetadataFilterFilterLabelInput

func (GlobalForwardingRuleMetadataFilterFilterLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalForwardingRuleMetadataFilterFilterLabel)(nil)).Elem()
}

func (i GlobalForwardingRuleMetadataFilterFilterLabelArray) ToGlobalForwardingRuleMetadataFilterFilterLabelArrayOutput() GlobalForwardingRuleMetadataFilterFilterLabelArrayOutput {
	return i.ToGlobalForwardingRuleMetadataFilterFilterLabelArrayOutputWithContext(context.Background())
}

func (i GlobalForwardingRuleMetadataFilterFilterLabelArray) ToGlobalForwardingRuleMetadataFilterFilterLabelArrayOutputWithContext(ctx context.Context) GlobalForwardingRuleMetadataFilterFilterLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalForwardingRuleMetadataFilterFilterLabelArrayOutput)
}

type GlobalForwardingRuleMetadataFilterFilterLabelOutput struct{ *pulumi.OutputState }

func (GlobalForwardingRuleMetadataFilterFilterLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalForwardingRuleMetadataFilterFilterLabel)(nil)).Elem()
}

func (o GlobalForwardingRuleMetadataFilterFilterLabelOutput) ToGlobalForwardingRuleMetadataFilterFilterLabelOutput() GlobalForwardingRuleMetadataFilterFilterLabelOutput {
	return o
}

func (o GlobalForwardingRuleMetadataFilterFilterLabelOutput) ToGlobalForwardingRuleMetadataFilterFilterLabelOutputWithContext(ctx context.Context) GlobalForwardingRuleMetadataFilterFilterLabelOutput {
	return o
}

// Name of the metadata label. The length must be between
// 1 and 1024 characters, inclusive.
func (o GlobalForwardingRuleMetadataFilterFilterLabelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalForwardingRuleMetadataFilterFilterLabel) string { return v.Name }).(pulumi.StringOutput)
}

// The value that the label must match. The value has a maximum
// length of 1024 characters.
func (o GlobalForwardingRuleMetadataFilterFilterLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalForwardingRuleMetadataFilterFilterLabel) string { return v.Value }).(pulumi.StringOutput)
}

type GlobalForwardingRuleMetadataFilterFilterLabelArrayOutput struct{ *pulumi.OutputState }

func (GlobalForwardingRuleMetadataFilterFilterLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalForwardingRuleMetadataFilterFilterLabel)(nil)).Elem()
}

func (o GlobalForwardingRuleMetadataFilterFilterLabelArrayOutput) ToGlobalForwardingRuleMetadataFilterFilterLabelArrayOutput() GlobalForwardingRuleMetadataFilterFilterLabelArrayOutput {
	return o
}

func (o GlobalForwardingRuleMetadataFilterFilterLabelArrayOutput) ToGlobalForwardingRuleMetadataFilterFilterLabelArrayOutputWithContext(ctx context.Context) GlobalForwardingRuleMetadataFilterFilterLabelArrayOutput {
	return o
}

func (o GlobalForwardingRuleMetadataFilterFilterLabelArrayOutput) Index(i pulumi.IntInput) GlobalForwardingRuleMetadataFilterFilterLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalForwardingRuleMetadataFilterFilterLabel {
		return vs[0].([]GlobalForwardingRuleMetadataFilterFilterLabel)[vs[1].(int)]
	}).(GlobalForwardingRuleMetadataFilterFilterLabelOutput)
}

type HaVpnGatewayVpnInterface struct {
	// an identifier for the resource with format `projects/{{project}}/regions/{{region}}/vpnGateways/{{name}}`
	Id        *int    `pulumi:"id"`
	IpAddress *string `pulumi:"ipAddress"`
}

// HaVpnGatewayVpnInterfaceInput is an input type that accepts HaVpnGatewayVpnInterfaceArgs and HaVpnGatewayVpnInterfaceOutput values.
// You can construct a concrete instance of `HaVpnGatewayVpnInterfaceInput` via:
//
// 		 HaVpnGatewayVpnInterfaceArgs{...}
//
type HaVpnGatewayVpnInterfaceInput interface {
	pulumi.Input

	ToHaVpnGatewayVpnInterfaceOutput() HaVpnGatewayVpnInterfaceOutput
	ToHaVpnGatewayVpnInterfaceOutputWithContext(context.Context) HaVpnGatewayVpnInterfaceOutput
}

type HaVpnGatewayVpnInterfaceArgs struct {
	// an identifier for the resource with format `projects/{{project}}/regions/{{region}}/vpnGateways/{{name}}`
	Id        pulumi.IntPtrInput    `pulumi:"id"`
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
}

func (HaVpnGatewayVpnInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HaVpnGatewayVpnInterface)(nil)).Elem()
}

func (i HaVpnGatewayVpnInterfaceArgs) ToHaVpnGatewayVpnInterfaceOutput() HaVpnGatewayVpnInterfaceOutput {
	return i.ToHaVpnGatewayVpnInterfaceOutputWithContext(context.Background())
}

func (i HaVpnGatewayVpnInterfaceArgs) ToHaVpnGatewayVpnInterfaceOutputWithContext(ctx context.Context) HaVpnGatewayVpnInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaVpnGatewayVpnInterfaceOutput)
}

// HaVpnGatewayVpnInterfaceArrayInput is an input type that accepts HaVpnGatewayVpnInterfaceArray and HaVpnGatewayVpnInterfaceArrayOutput values.
// You can construct a concrete instance of `HaVpnGatewayVpnInterfaceArrayInput` via:
//
// 		 HaVpnGatewayVpnInterfaceArray{ HaVpnGatewayVpnInterfaceArgs{...} }
//
type HaVpnGatewayVpnInterfaceArrayInput interface {
	pulumi.Input

	ToHaVpnGatewayVpnInterfaceArrayOutput() HaVpnGatewayVpnInterfaceArrayOutput
	ToHaVpnGatewayVpnInterfaceArrayOutputWithContext(context.Context) HaVpnGatewayVpnInterfaceArrayOutput
}

type HaVpnGatewayVpnInterfaceArray []HaVpnGatewayVpnInterfaceInput

func (HaVpnGatewayVpnInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HaVpnGatewayVpnInterface)(nil)).Elem()
}

func (i HaVpnGatewayVpnInterfaceArray) ToHaVpnGatewayVpnInterfaceArrayOutput() HaVpnGatewayVpnInterfaceArrayOutput {
	return i.ToHaVpnGatewayVpnInterfaceArrayOutputWithContext(context.Background())
}

func (i HaVpnGatewayVpnInterfaceArray) ToHaVpnGatewayVpnInterfaceArrayOutputWithContext(ctx context.Context) HaVpnGatewayVpnInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaVpnGatewayVpnInterfaceArrayOutput)
}

type HaVpnGatewayVpnInterfaceOutput struct{ *pulumi.OutputState }

func (HaVpnGatewayVpnInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HaVpnGatewayVpnInterface)(nil)).Elem()
}

func (o HaVpnGatewayVpnInterfaceOutput) ToHaVpnGatewayVpnInterfaceOutput() HaVpnGatewayVpnInterfaceOutput {
	return o
}

func (o HaVpnGatewayVpnInterfaceOutput) ToHaVpnGatewayVpnInterfaceOutputWithContext(ctx context.Context) HaVpnGatewayVpnInterfaceOutput {
	return o
}

// an identifier for the resource with format `projects/{{project}}/regions/{{region}}/vpnGateways/{{name}}`
func (o HaVpnGatewayVpnInterfaceOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HaVpnGatewayVpnInterface) *int { return v.Id }).(pulumi.IntPtrOutput)
}

func (o HaVpnGatewayVpnInterfaceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HaVpnGatewayVpnInterface) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

type HaVpnGatewayVpnInterfaceArrayOutput struct{ *pulumi.OutputState }

func (HaVpnGatewayVpnInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HaVpnGatewayVpnInterface)(nil)).Elem()
}

func (o HaVpnGatewayVpnInterfaceArrayOutput) ToHaVpnGatewayVpnInterfaceArrayOutput() HaVpnGatewayVpnInterfaceArrayOutput {
	return o
}

func (o HaVpnGatewayVpnInterfaceArrayOutput) ToHaVpnGatewayVpnInterfaceArrayOutputWithContext(ctx context.Context) HaVpnGatewayVpnInterfaceArrayOutput {
	return o
}

func (o HaVpnGatewayVpnInterfaceArrayOutput) Index(i pulumi.IntInput) HaVpnGatewayVpnInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HaVpnGatewayVpnInterface {
		return vs[0].([]HaVpnGatewayVpnInterface)[vs[1].(int)]
	}).(HaVpnGatewayVpnInterfaceOutput)
}

type HealthCheckHttp2HealthCheck struct {
	// The value of the host header in the HTTP2 health check request.
	// If left empty (default value), the public IP on behalf of which this health
	// check is performed will be used.
	Host *string `pulumi:"host"`
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port *int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName *string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification *string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *string `pulumi:"proxyHeader"`
	// The request path of the HTTP2 health check request.
	// The default value is /.
	RequestPath *string `pulumi:"requestPath"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response *string `pulumi:"response"`
}

// HealthCheckHttp2HealthCheckInput is an input type that accepts HealthCheckHttp2HealthCheckArgs and HealthCheckHttp2HealthCheckOutput values.
// You can construct a concrete instance of `HealthCheckHttp2HealthCheckInput` via:
//
// 		 HealthCheckHttp2HealthCheckArgs{...}
//
type HealthCheckHttp2HealthCheckInput interface {
	pulumi.Input

	ToHealthCheckHttp2HealthCheckOutput() HealthCheckHttp2HealthCheckOutput
	ToHealthCheckHttp2HealthCheckOutputWithContext(context.Context) HealthCheckHttp2HealthCheckOutput
}

type HealthCheckHttp2HealthCheckArgs struct {
	// The value of the host header in the HTTP2 health check request.
	// If left empty (default value), the public IP on behalf of which this health
	// check is performed will be used.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification pulumi.StringPtrInput `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader pulumi.StringPtrInput `pulumi:"proxyHeader"`
	// The request path of the HTTP2 health check request.
	// The default value is /.
	RequestPath pulumi.StringPtrInput `pulumi:"requestPath"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (HealthCheckHttp2HealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckHttp2HealthCheck)(nil)).Elem()
}

func (i HealthCheckHttp2HealthCheckArgs) ToHealthCheckHttp2HealthCheckOutput() HealthCheckHttp2HealthCheckOutput {
	return i.ToHealthCheckHttp2HealthCheckOutputWithContext(context.Background())
}

func (i HealthCheckHttp2HealthCheckArgs) ToHealthCheckHttp2HealthCheckOutputWithContext(ctx context.Context) HealthCheckHttp2HealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckHttp2HealthCheckOutput)
}

func (i HealthCheckHttp2HealthCheckArgs) ToHealthCheckHttp2HealthCheckPtrOutput() HealthCheckHttp2HealthCheckPtrOutput {
	return i.ToHealthCheckHttp2HealthCheckPtrOutputWithContext(context.Background())
}

func (i HealthCheckHttp2HealthCheckArgs) ToHealthCheckHttp2HealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckHttp2HealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckHttp2HealthCheckOutput).ToHealthCheckHttp2HealthCheckPtrOutputWithContext(ctx)
}

// HealthCheckHttp2HealthCheckPtrInput is an input type that accepts HealthCheckHttp2HealthCheckArgs, HealthCheckHttp2HealthCheckPtr and HealthCheckHttp2HealthCheckPtrOutput values.
// You can construct a concrete instance of `HealthCheckHttp2HealthCheckPtrInput` via:
//
// 		 HealthCheckHttp2HealthCheckArgs{...}
//
//  or:
//
// 		 nil
//
type HealthCheckHttp2HealthCheckPtrInput interface {
	pulumi.Input

	ToHealthCheckHttp2HealthCheckPtrOutput() HealthCheckHttp2HealthCheckPtrOutput
	ToHealthCheckHttp2HealthCheckPtrOutputWithContext(context.Context) HealthCheckHttp2HealthCheckPtrOutput
}

type healthCheckHttp2HealthCheckPtrType HealthCheckHttp2HealthCheckArgs

func HealthCheckHttp2HealthCheckPtr(v *HealthCheckHttp2HealthCheckArgs) HealthCheckHttp2HealthCheckPtrInput {
	return (*healthCheckHttp2HealthCheckPtrType)(v)
}

func (*healthCheckHttp2HealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckHttp2HealthCheck)(nil)).Elem()
}

func (i *healthCheckHttp2HealthCheckPtrType) ToHealthCheckHttp2HealthCheckPtrOutput() HealthCheckHttp2HealthCheckPtrOutput {
	return i.ToHealthCheckHttp2HealthCheckPtrOutputWithContext(context.Background())
}

func (i *healthCheckHttp2HealthCheckPtrType) ToHealthCheckHttp2HealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckHttp2HealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckHttp2HealthCheckPtrOutput)
}

type HealthCheckHttp2HealthCheckOutput struct{ *pulumi.OutputState }

func (HealthCheckHttp2HealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckHttp2HealthCheck)(nil)).Elem()
}

func (o HealthCheckHttp2HealthCheckOutput) ToHealthCheckHttp2HealthCheckOutput() HealthCheckHttp2HealthCheckOutput {
	return o
}

func (o HealthCheckHttp2HealthCheckOutput) ToHealthCheckHttp2HealthCheckOutputWithContext(ctx context.Context) HealthCheckHttp2HealthCheckOutput {
	return o
}

func (o HealthCheckHttp2HealthCheckOutput) ToHealthCheckHttp2HealthCheckPtrOutput() HealthCheckHttp2HealthCheckPtrOutput {
	return o.ToHealthCheckHttp2HealthCheckPtrOutputWithContext(context.Background())
}

func (o HealthCheckHttp2HealthCheckOutput) ToHealthCheckHttp2HealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckHttp2HealthCheckPtrOutput {
	return o.ApplyT(func(v HealthCheckHttp2HealthCheck) *HealthCheckHttp2HealthCheck {
		return &v
	}).(HealthCheckHttp2HealthCheckPtrOutput)
}

// The value of the host header in the HTTP2 health check request.
// If left empty (default value), the public IP on behalf of which this health
// check is performed will be used.
func (o HealthCheckHttp2HealthCheckOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttp2HealthCheck) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o HealthCheckHttp2HealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HealthCheckHttp2HealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o HealthCheckHttp2HealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttp2HealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o HealthCheckHttp2HealthCheckOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttp2HealthCheck) *string { return v.PortSpecification }).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o HealthCheckHttp2HealthCheckOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttp2HealthCheck) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

// The request path of the HTTP2 health check request.
// The default value is /.
func (o HealthCheckHttp2HealthCheckOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttp2HealthCheck) *string { return v.RequestPath }).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o HealthCheckHttp2HealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttp2HealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type HealthCheckHttp2HealthCheckPtrOutput struct{ *pulumi.OutputState }

func (HealthCheckHttp2HealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckHttp2HealthCheck)(nil)).Elem()
}

func (o HealthCheckHttp2HealthCheckPtrOutput) ToHealthCheckHttp2HealthCheckPtrOutput() HealthCheckHttp2HealthCheckPtrOutput {
	return o
}

func (o HealthCheckHttp2HealthCheckPtrOutput) ToHealthCheckHttp2HealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckHttp2HealthCheckPtrOutput {
	return o
}

func (o HealthCheckHttp2HealthCheckPtrOutput) Elem() HealthCheckHttp2HealthCheckOutput {
	return o.ApplyT(func(v *HealthCheckHttp2HealthCheck) HealthCheckHttp2HealthCheck { return *v }).(HealthCheckHttp2HealthCheckOutput)
}

// The value of the host header in the HTTP2 health check request.
// If left empty (default value), the public IP on behalf of which this health
// check is performed will be used.
func (o HealthCheckHttp2HealthCheckPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttp2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o HealthCheckHttp2HealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttp2HealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o HealthCheckHttp2HealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttp2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o HealthCheckHttp2HealthCheckPtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttp2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o HealthCheckHttp2HealthCheckPtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttp2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The request path of the HTTP2 health check request.
// The default value is /.
func (o HealthCheckHttp2HealthCheckPtrOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttp2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.RequestPath
	}).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o HealthCheckHttp2HealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttp2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type HealthCheckHttpHealthCheck struct {
	// The value of the host header in the HTTP2 health check request.
	// If left empty (default value), the public IP on behalf of which this health
	// check is performed will be used.
	Host *string `pulumi:"host"`
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port *int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName *string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification *string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *string `pulumi:"proxyHeader"`
	// The request path of the HTTP2 health check request.
	// The default value is /.
	RequestPath *string `pulumi:"requestPath"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response *string `pulumi:"response"`
}

// HealthCheckHttpHealthCheckInput is an input type that accepts HealthCheckHttpHealthCheckArgs and HealthCheckHttpHealthCheckOutput values.
// You can construct a concrete instance of `HealthCheckHttpHealthCheckInput` via:
//
// 		 HealthCheckHttpHealthCheckArgs{...}
//
type HealthCheckHttpHealthCheckInput interface {
	pulumi.Input

	ToHealthCheckHttpHealthCheckOutput() HealthCheckHttpHealthCheckOutput
	ToHealthCheckHttpHealthCheckOutputWithContext(context.Context) HealthCheckHttpHealthCheckOutput
}

type HealthCheckHttpHealthCheckArgs struct {
	// The value of the host header in the HTTP2 health check request.
	// If left empty (default value), the public IP on behalf of which this health
	// check is performed will be used.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification pulumi.StringPtrInput `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader pulumi.StringPtrInput `pulumi:"proxyHeader"`
	// The request path of the HTTP2 health check request.
	// The default value is /.
	RequestPath pulumi.StringPtrInput `pulumi:"requestPath"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (HealthCheckHttpHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckHttpHealthCheck)(nil)).Elem()
}

func (i HealthCheckHttpHealthCheckArgs) ToHealthCheckHttpHealthCheckOutput() HealthCheckHttpHealthCheckOutput {
	return i.ToHealthCheckHttpHealthCheckOutputWithContext(context.Background())
}

func (i HealthCheckHttpHealthCheckArgs) ToHealthCheckHttpHealthCheckOutputWithContext(ctx context.Context) HealthCheckHttpHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckHttpHealthCheckOutput)
}

func (i HealthCheckHttpHealthCheckArgs) ToHealthCheckHttpHealthCheckPtrOutput() HealthCheckHttpHealthCheckPtrOutput {
	return i.ToHealthCheckHttpHealthCheckPtrOutputWithContext(context.Background())
}

func (i HealthCheckHttpHealthCheckArgs) ToHealthCheckHttpHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckHttpHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckHttpHealthCheckOutput).ToHealthCheckHttpHealthCheckPtrOutputWithContext(ctx)
}

// HealthCheckHttpHealthCheckPtrInput is an input type that accepts HealthCheckHttpHealthCheckArgs, HealthCheckHttpHealthCheckPtr and HealthCheckHttpHealthCheckPtrOutput values.
// You can construct a concrete instance of `HealthCheckHttpHealthCheckPtrInput` via:
//
// 		 HealthCheckHttpHealthCheckArgs{...}
//
//  or:
//
// 		 nil
//
type HealthCheckHttpHealthCheckPtrInput interface {
	pulumi.Input

	ToHealthCheckHttpHealthCheckPtrOutput() HealthCheckHttpHealthCheckPtrOutput
	ToHealthCheckHttpHealthCheckPtrOutputWithContext(context.Context) HealthCheckHttpHealthCheckPtrOutput
}

type healthCheckHttpHealthCheckPtrType HealthCheckHttpHealthCheckArgs

func HealthCheckHttpHealthCheckPtr(v *HealthCheckHttpHealthCheckArgs) HealthCheckHttpHealthCheckPtrInput {
	return (*healthCheckHttpHealthCheckPtrType)(v)
}

func (*healthCheckHttpHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckHttpHealthCheck)(nil)).Elem()
}

func (i *healthCheckHttpHealthCheckPtrType) ToHealthCheckHttpHealthCheckPtrOutput() HealthCheckHttpHealthCheckPtrOutput {
	return i.ToHealthCheckHttpHealthCheckPtrOutputWithContext(context.Background())
}

func (i *healthCheckHttpHealthCheckPtrType) ToHealthCheckHttpHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckHttpHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckHttpHealthCheckPtrOutput)
}

type HealthCheckHttpHealthCheckOutput struct{ *pulumi.OutputState }

func (HealthCheckHttpHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckHttpHealthCheck)(nil)).Elem()
}

func (o HealthCheckHttpHealthCheckOutput) ToHealthCheckHttpHealthCheckOutput() HealthCheckHttpHealthCheckOutput {
	return o
}

func (o HealthCheckHttpHealthCheckOutput) ToHealthCheckHttpHealthCheckOutputWithContext(ctx context.Context) HealthCheckHttpHealthCheckOutput {
	return o
}

func (o HealthCheckHttpHealthCheckOutput) ToHealthCheckHttpHealthCheckPtrOutput() HealthCheckHttpHealthCheckPtrOutput {
	return o.ToHealthCheckHttpHealthCheckPtrOutputWithContext(context.Background())
}

func (o HealthCheckHttpHealthCheckOutput) ToHealthCheckHttpHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckHttpHealthCheckPtrOutput {
	return o.ApplyT(func(v HealthCheckHttpHealthCheck) *HealthCheckHttpHealthCheck {
		return &v
	}).(HealthCheckHttpHealthCheckPtrOutput)
}

// The value of the host header in the HTTP2 health check request.
// If left empty (default value), the public IP on behalf of which this health
// check is performed will be used.
func (o HealthCheckHttpHealthCheckOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttpHealthCheck) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o HealthCheckHttpHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HealthCheckHttpHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o HealthCheckHttpHealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttpHealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o HealthCheckHttpHealthCheckOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttpHealthCheck) *string { return v.PortSpecification }).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o HealthCheckHttpHealthCheckOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttpHealthCheck) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

// The request path of the HTTP2 health check request.
// The default value is /.
func (o HealthCheckHttpHealthCheckOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttpHealthCheck) *string { return v.RequestPath }).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o HealthCheckHttpHealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttpHealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type HealthCheckHttpHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (HealthCheckHttpHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckHttpHealthCheck)(nil)).Elem()
}

func (o HealthCheckHttpHealthCheckPtrOutput) ToHealthCheckHttpHealthCheckPtrOutput() HealthCheckHttpHealthCheckPtrOutput {
	return o
}

func (o HealthCheckHttpHealthCheckPtrOutput) ToHealthCheckHttpHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckHttpHealthCheckPtrOutput {
	return o
}

func (o HealthCheckHttpHealthCheckPtrOutput) Elem() HealthCheckHttpHealthCheckOutput {
	return o.ApplyT(func(v *HealthCheckHttpHealthCheck) HealthCheckHttpHealthCheck { return *v }).(HealthCheckHttpHealthCheckOutput)
}

// The value of the host header in the HTTP2 health check request.
// If left empty (default value), the public IP on behalf of which this health
// check is performed will be used.
func (o HealthCheckHttpHealthCheckPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o HealthCheckHttpHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttpHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o HealthCheckHttpHealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o HealthCheckHttpHealthCheckPtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o HealthCheckHttpHealthCheckPtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The request path of the HTTP2 health check request.
// The default value is /.
func (o HealthCheckHttpHealthCheckPtrOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.RequestPath
	}).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o HealthCheckHttpHealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type HealthCheckHttpsHealthCheck struct {
	// The value of the host header in the HTTP2 health check request.
	// If left empty (default value), the public IP on behalf of which this health
	// check is performed will be used.
	Host *string `pulumi:"host"`
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port *int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName *string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification *string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *string `pulumi:"proxyHeader"`
	// The request path of the HTTP2 health check request.
	// The default value is /.
	RequestPath *string `pulumi:"requestPath"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response *string `pulumi:"response"`
}

// HealthCheckHttpsHealthCheckInput is an input type that accepts HealthCheckHttpsHealthCheckArgs and HealthCheckHttpsHealthCheckOutput values.
// You can construct a concrete instance of `HealthCheckHttpsHealthCheckInput` via:
//
// 		 HealthCheckHttpsHealthCheckArgs{...}
//
type HealthCheckHttpsHealthCheckInput interface {
	pulumi.Input

	ToHealthCheckHttpsHealthCheckOutput() HealthCheckHttpsHealthCheckOutput
	ToHealthCheckHttpsHealthCheckOutputWithContext(context.Context) HealthCheckHttpsHealthCheckOutput
}

type HealthCheckHttpsHealthCheckArgs struct {
	// The value of the host header in the HTTP2 health check request.
	// If left empty (default value), the public IP on behalf of which this health
	// check is performed will be used.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification pulumi.StringPtrInput `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader pulumi.StringPtrInput `pulumi:"proxyHeader"`
	// The request path of the HTTP2 health check request.
	// The default value is /.
	RequestPath pulumi.StringPtrInput `pulumi:"requestPath"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (HealthCheckHttpsHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckHttpsHealthCheck)(nil)).Elem()
}

func (i HealthCheckHttpsHealthCheckArgs) ToHealthCheckHttpsHealthCheckOutput() HealthCheckHttpsHealthCheckOutput {
	return i.ToHealthCheckHttpsHealthCheckOutputWithContext(context.Background())
}

func (i HealthCheckHttpsHealthCheckArgs) ToHealthCheckHttpsHealthCheckOutputWithContext(ctx context.Context) HealthCheckHttpsHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckHttpsHealthCheckOutput)
}

func (i HealthCheckHttpsHealthCheckArgs) ToHealthCheckHttpsHealthCheckPtrOutput() HealthCheckHttpsHealthCheckPtrOutput {
	return i.ToHealthCheckHttpsHealthCheckPtrOutputWithContext(context.Background())
}

func (i HealthCheckHttpsHealthCheckArgs) ToHealthCheckHttpsHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckHttpsHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckHttpsHealthCheckOutput).ToHealthCheckHttpsHealthCheckPtrOutputWithContext(ctx)
}

// HealthCheckHttpsHealthCheckPtrInput is an input type that accepts HealthCheckHttpsHealthCheckArgs, HealthCheckHttpsHealthCheckPtr and HealthCheckHttpsHealthCheckPtrOutput values.
// You can construct a concrete instance of `HealthCheckHttpsHealthCheckPtrInput` via:
//
// 		 HealthCheckHttpsHealthCheckArgs{...}
//
//  or:
//
// 		 nil
//
type HealthCheckHttpsHealthCheckPtrInput interface {
	pulumi.Input

	ToHealthCheckHttpsHealthCheckPtrOutput() HealthCheckHttpsHealthCheckPtrOutput
	ToHealthCheckHttpsHealthCheckPtrOutputWithContext(context.Context) HealthCheckHttpsHealthCheckPtrOutput
}

type healthCheckHttpsHealthCheckPtrType HealthCheckHttpsHealthCheckArgs

func HealthCheckHttpsHealthCheckPtr(v *HealthCheckHttpsHealthCheckArgs) HealthCheckHttpsHealthCheckPtrInput {
	return (*healthCheckHttpsHealthCheckPtrType)(v)
}

func (*healthCheckHttpsHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckHttpsHealthCheck)(nil)).Elem()
}

func (i *healthCheckHttpsHealthCheckPtrType) ToHealthCheckHttpsHealthCheckPtrOutput() HealthCheckHttpsHealthCheckPtrOutput {
	return i.ToHealthCheckHttpsHealthCheckPtrOutputWithContext(context.Background())
}

func (i *healthCheckHttpsHealthCheckPtrType) ToHealthCheckHttpsHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckHttpsHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckHttpsHealthCheckPtrOutput)
}

type HealthCheckHttpsHealthCheckOutput struct{ *pulumi.OutputState }

func (HealthCheckHttpsHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckHttpsHealthCheck)(nil)).Elem()
}

func (o HealthCheckHttpsHealthCheckOutput) ToHealthCheckHttpsHealthCheckOutput() HealthCheckHttpsHealthCheckOutput {
	return o
}

func (o HealthCheckHttpsHealthCheckOutput) ToHealthCheckHttpsHealthCheckOutputWithContext(ctx context.Context) HealthCheckHttpsHealthCheckOutput {
	return o
}

func (o HealthCheckHttpsHealthCheckOutput) ToHealthCheckHttpsHealthCheckPtrOutput() HealthCheckHttpsHealthCheckPtrOutput {
	return o.ToHealthCheckHttpsHealthCheckPtrOutputWithContext(context.Background())
}

func (o HealthCheckHttpsHealthCheckOutput) ToHealthCheckHttpsHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckHttpsHealthCheckPtrOutput {
	return o.ApplyT(func(v HealthCheckHttpsHealthCheck) *HealthCheckHttpsHealthCheck {
		return &v
	}).(HealthCheckHttpsHealthCheckPtrOutput)
}

// The value of the host header in the HTTP2 health check request.
// If left empty (default value), the public IP on behalf of which this health
// check is performed will be used.
func (o HealthCheckHttpsHealthCheckOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttpsHealthCheck) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o HealthCheckHttpsHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HealthCheckHttpsHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o HealthCheckHttpsHealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttpsHealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o HealthCheckHttpsHealthCheckOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttpsHealthCheck) *string { return v.PortSpecification }).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o HealthCheckHttpsHealthCheckOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttpsHealthCheck) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

// The request path of the HTTP2 health check request.
// The default value is /.
func (o HealthCheckHttpsHealthCheckOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttpsHealthCheck) *string { return v.RequestPath }).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o HealthCheckHttpsHealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckHttpsHealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type HealthCheckHttpsHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (HealthCheckHttpsHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckHttpsHealthCheck)(nil)).Elem()
}

func (o HealthCheckHttpsHealthCheckPtrOutput) ToHealthCheckHttpsHealthCheckPtrOutput() HealthCheckHttpsHealthCheckPtrOutput {
	return o
}

func (o HealthCheckHttpsHealthCheckPtrOutput) ToHealthCheckHttpsHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckHttpsHealthCheckPtrOutput {
	return o
}

func (o HealthCheckHttpsHealthCheckPtrOutput) Elem() HealthCheckHttpsHealthCheckOutput {
	return o.ApplyT(func(v *HealthCheckHttpsHealthCheck) HealthCheckHttpsHealthCheck { return *v }).(HealthCheckHttpsHealthCheckOutput)
}

// The value of the host header in the HTTP2 health check request.
// If left empty (default value), the public IP on behalf of which this health
// check is performed will be used.
func (o HealthCheckHttpsHealthCheckPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttpsHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o HealthCheckHttpsHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttpsHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o HealthCheckHttpsHealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttpsHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o HealthCheckHttpsHealthCheckPtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttpsHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o HealthCheckHttpsHealthCheckPtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttpsHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The request path of the HTTP2 health check request.
// The default value is /.
func (o HealthCheckHttpsHealthCheckPtrOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttpsHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.RequestPath
	}).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o HealthCheckHttpsHealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckHttpsHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type HealthCheckLogConfig struct {
	// Indicates whether or not to export logs. This is false by default,
	// which means no health check logging will be done.
	Enable *bool `pulumi:"enable"`
}

// HealthCheckLogConfigInput is an input type that accepts HealthCheckLogConfigArgs and HealthCheckLogConfigOutput values.
// You can construct a concrete instance of `HealthCheckLogConfigInput` via:
//
// 		 HealthCheckLogConfigArgs{...}
//
type HealthCheckLogConfigInput interface {
	pulumi.Input

	ToHealthCheckLogConfigOutput() HealthCheckLogConfigOutput
	ToHealthCheckLogConfigOutputWithContext(context.Context) HealthCheckLogConfigOutput
}

type HealthCheckLogConfigArgs struct {
	// Indicates whether or not to export logs. This is false by default,
	// which means no health check logging will be done.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
}

func (HealthCheckLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckLogConfig)(nil)).Elem()
}

func (i HealthCheckLogConfigArgs) ToHealthCheckLogConfigOutput() HealthCheckLogConfigOutput {
	return i.ToHealthCheckLogConfigOutputWithContext(context.Background())
}

func (i HealthCheckLogConfigArgs) ToHealthCheckLogConfigOutputWithContext(ctx context.Context) HealthCheckLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckLogConfigOutput)
}

func (i HealthCheckLogConfigArgs) ToHealthCheckLogConfigPtrOutput() HealthCheckLogConfigPtrOutput {
	return i.ToHealthCheckLogConfigPtrOutputWithContext(context.Background())
}

func (i HealthCheckLogConfigArgs) ToHealthCheckLogConfigPtrOutputWithContext(ctx context.Context) HealthCheckLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckLogConfigOutput).ToHealthCheckLogConfigPtrOutputWithContext(ctx)
}

// HealthCheckLogConfigPtrInput is an input type that accepts HealthCheckLogConfigArgs, HealthCheckLogConfigPtr and HealthCheckLogConfigPtrOutput values.
// You can construct a concrete instance of `HealthCheckLogConfigPtrInput` via:
//
// 		 HealthCheckLogConfigArgs{...}
//
//  or:
//
// 		 nil
//
type HealthCheckLogConfigPtrInput interface {
	pulumi.Input

	ToHealthCheckLogConfigPtrOutput() HealthCheckLogConfigPtrOutput
	ToHealthCheckLogConfigPtrOutputWithContext(context.Context) HealthCheckLogConfigPtrOutput
}

type healthCheckLogConfigPtrType HealthCheckLogConfigArgs

func HealthCheckLogConfigPtr(v *HealthCheckLogConfigArgs) HealthCheckLogConfigPtrInput {
	return (*healthCheckLogConfigPtrType)(v)
}

func (*healthCheckLogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckLogConfig)(nil)).Elem()
}

func (i *healthCheckLogConfigPtrType) ToHealthCheckLogConfigPtrOutput() HealthCheckLogConfigPtrOutput {
	return i.ToHealthCheckLogConfigPtrOutputWithContext(context.Background())
}

func (i *healthCheckLogConfigPtrType) ToHealthCheckLogConfigPtrOutputWithContext(ctx context.Context) HealthCheckLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckLogConfigPtrOutput)
}

type HealthCheckLogConfigOutput struct{ *pulumi.OutputState }

func (HealthCheckLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckLogConfig)(nil)).Elem()
}

func (o HealthCheckLogConfigOutput) ToHealthCheckLogConfigOutput() HealthCheckLogConfigOutput {
	return o
}

func (o HealthCheckLogConfigOutput) ToHealthCheckLogConfigOutputWithContext(ctx context.Context) HealthCheckLogConfigOutput {
	return o
}

func (o HealthCheckLogConfigOutput) ToHealthCheckLogConfigPtrOutput() HealthCheckLogConfigPtrOutput {
	return o.ToHealthCheckLogConfigPtrOutputWithContext(context.Background())
}

func (o HealthCheckLogConfigOutput) ToHealthCheckLogConfigPtrOutputWithContext(ctx context.Context) HealthCheckLogConfigPtrOutput {
	return o.ApplyT(func(v HealthCheckLogConfig) *HealthCheckLogConfig {
		return &v
	}).(HealthCheckLogConfigPtrOutput)
}

// Indicates whether or not to export logs. This is false by default,
// which means no health check logging will be done.
func (o HealthCheckLogConfigOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HealthCheckLogConfig) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

type HealthCheckLogConfigPtrOutput struct{ *pulumi.OutputState }

func (HealthCheckLogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckLogConfig)(nil)).Elem()
}

func (o HealthCheckLogConfigPtrOutput) ToHealthCheckLogConfigPtrOutput() HealthCheckLogConfigPtrOutput {
	return o
}

func (o HealthCheckLogConfigPtrOutput) ToHealthCheckLogConfigPtrOutputWithContext(ctx context.Context) HealthCheckLogConfigPtrOutput {
	return o
}

func (o HealthCheckLogConfigPtrOutput) Elem() HealthCheckLogConfigOutput {
	return o.ApplyT(func(v *HealthCheckLogConfig) HealthCheckLogConfig { return *v }).(HealthCheckLogConfigOutput)
}

// Indicates whether or not to export logs. This is false by default,
// which means no health check logging will be done.
func (o HealthCheckLogConfigPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HealthCheckLogConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

type HealthCheckSslHealthCheck struct {
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port *int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName *string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification *string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *string `pulumi:"proxyHeader"`
	// The application data to send once the SSL connection has been
	// established (default value is empty). If both request and response are
	// empty, the connection establishment alone will indicate health. The request
	// data can only be ASCII.
	Request *string `pulumi:"request"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response *string `pulumi:"response"`
}

// HealthCheckSslHealthCheckInput is an input type that accepts HealthCheckSslHealthCheckArgs and HealthCheckSslHealthCheckOutput values.
// You can construct a concrete instance of `HealthCheckSslHealthCheckInput` via:
//
// 		 HealthCheckSslHealthCheckArgs{...}
//
type HealthCheckSslHealthCheckInput interface {
	pulumi.Input

	ToHealthCheckSslHealthCheckOutput() HealthCheckSslHealthCheckOutput
	ToHealthCheckSslHealthCheckOutputWithContext(context.Context) HealthCheckSslHealthCheckOutput
}

type HealthCheckSslHealthCheckArgs struct {
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification pulumi.StringPtrInput `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader pulumi.StringPtrInput `pulumi:"proxyHeader"`
	// The application data to send once the SSL connection has been
	// established (default value is empty). If both request and response are
	// empty, the connection establishment alone will indicate health. The request
	// data can only be ASCII.
	Request pulumi.StringPtrInput `pulumi:"request"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (HealthCheckSslHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckSslHealthCheck)(nil)).Elem()
}

func (i HealthCheckSslHealthCheckArgs) ToHealthCheckSslHealthCheckOutput() HealthCheckSslHealthCheckOutput {
	return i.ToHealthCheckSslHealthCheckOutputWithContext(context.Background())
}

func (i HealthCheckSslHealthCheckArgs) ToHealthCheckSslHealthCheckOutputWithContext(ctx context.Context) HealthCheckSslHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckSslHealthCheckOutput)
}

func (i HealthCheckSslHealthCheckArgs) ToHealthCheckSslHealthCheckPtrOutput() HealthCheckSslHealthCheckPtrOutput {
	return i.ToHealthCheckSslHealthCheckPtrOutputWithContext(context.Background())
}

func (i HealthCheckSslHealthCheckArgs) ToHealthCheckSslHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckSslHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckSslHealthCheckOutput).ToHealthCheckSslHealthCheckPtrOutputWithContext(ctx)
}

// HealthCheckSslHealthCheckPtrInput is an input type that accepts HealthCheckSslHealthCheckArgs, HealthCheckSslHealthCheckPtr and HealthCheckSslHealthCheckPtrOutput values.
// You can construct a concrete instance of `HealthCheckSslHealthCheckPtrInput` via:
//
// 		 HealthCheckSslHealthCheckArgs{...}
//
//  or:
//
// 		 nil
//
type HealthCheckSslHealthCheckPtrInput interface {
	pulumi.Input

	ToHealthCheckSslHealthCheckPtrOutput() HealthCheckSslHealthCheckPtrOutput
	ToHealthCheckSslHealthCheckPtrOutputWithContext(context.Context) HealthCheckSslHealthCheckPtrOutput
}

type healthCheckSslHealthCheckPtrType HealthCheckSslHealthCheckArgs

func HealthCheckSslHealthCheckPtr(v *HealthCheckSslHealthCheckArgs) HealthCheckSslHealthCheckPtrInput {
	return (*healthCheckSslHealthCheckPtrType)(v)
}

func (*healthCheckSslHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckSslHealthCheck)(nil)).Elem()
}

func (i *healthCheckSslHealthCheckPtrType) ToHealthCheckSslHealthCheckPtrOutput() HealthCheckSslHealthCheckPtrOutput {
	return i.ToHealthCheckSslHealthCheckPtrOutputWithContext(context.Background())
}

func (i *healthCheckSslHealthCheckPtrType) ToHealthCheckSslHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckSslHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckSslHealthCheckPtrOutput)
}

type HealthCheckSslHealthCheckOutput struct{ *pulumi.OutputState }

func (HealthCheckSslHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckSslHealthCheck)(nil)).Elem()
}

func (o HealthCheckSslHealthCheckOutput) ToHealthCheckSslHealthCheckOutput() HealthCheckSslHealthCheckOutput {
	return o
}

func (o HealthCheckSslHealthCheckOutput) ToHealthCheckSslHealthCheckOutputWithContext(ctx context.Context) HealthCheckSslHealthCheckOutput {
	return o
}

func (o HealthCheckSslHealthCheckOutput) ToHealthCheckSslHealthCheckPtrOutput() HealthCheckSslHealthCheckPtrOutput {
	return o.ToHealthCheckSslHealthCheckPtrOutputWithContext(context.Background())
}

func (o HealthCheckSslHealthCheckOutput) ToHealthCheckSslHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckSslHealthCheckPtrOutput {
	return o.ApplyT(func(v HealthCheckSslHealthCheck) *HealthCheckSslHealthCheck {
		return &v
	}).(HealthCheckSslHealthCheckPtrOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o HealthCheckSslHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HealthCheckSslHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o HealthCheckSslHealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckSslHealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o HealthCheckSslHealthCheckOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckSslHealthCheck) *string { return v.PortSpecification }).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o HealthCheckSslHealthCheckOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckSslHealthCheck) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

// The application data to send once the SSL connection has been
// established (default value is empty). If both request and response are
// empty, the connection establishment alone will indicate health. The request
// data can only be ASCII.
func (o HealthCheckSslHealthCheckOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckSslHealthCheck) *string { return v.Request }).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o HealthCheckSslHealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckSslHealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type HealthCheckSslHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (HealthCheckSslHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckSslHealthCheck)(nil)).Elem()
}

func (o HealthCheckSslHealthCheckPtrOutput) ToHealthCheckSslHealthCheckPtrOutput() HealthCheckSslHealthCheckPtrOutput {
	return o
}

func (o HealthCheckSslHealthCheckPtrOutput) ToHealthCheckSslHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckSslHealthCheckPtrOutput {
	return o
}

func (o HealthCheckSslHealthCheckPtrOutput) Elem() HealthCheckSslHealthCheckOutput {
	return o.ApplyT(func(v *HealthCheckSslHealthCheck) HealthCheckSslHealthCheck { return *v }).(HealthCheckSslHealthCheckOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o HealthCheckSslHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthCheckSslHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o HealthCheckSslHealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckSslHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o HealthCheckSslHealthCheckPtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckSslHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o HealthCheckSslHealthCheckPtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckSslHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The application data to send once the SSL connection has been
// established (default value is empty). If both request and response are
// empty, the connection establishment alone will indicate health. The request
// data can only be ASCII.
func (o HealthCheckSslHealthCheckPtrOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckSslHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Request
	}).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o HealthCheckSslHealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckSslHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type HealthCheckTcpHealthCheck struct {
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port *int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName *string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification *string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *string `pulumi:"proxyHeader"`
	// The application data to send once the SSL connection has been
	// established (default value is empty). If both request and response are
	// empty, the connection establishment alone will indicate health. The request
	// data can only be ASCII.
	Request *string `pulumi:"request"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response *string `pulumi:"response"`
}

// HealthCheckTcpHealthCheckInput is an input type that accepts HealthCheckTcpHealthCheckArgs and HealthCheckTcpHealthCheckOutput values.
// You can construct a concrete instance of `HealthCheckTcpHealthCheckInput` via:
//
// 		 HealthCheckTcpHealthCheckArgs{...}
//
type HealthCheckTcpHealthCheckInput interface {
	pulumi.Input

	ToHealthCheckTcpHealthCheckOutput() HealthCheckTcpHealthCheckOutput
	ToHealthCheckTcpHealthCheckOutputWithContext(context.Context) HealthCheckTcpHealthCheckOutput
}

type HealthCheckTcpHealthCheckArgs struct {
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification pulumi.StringPtrInput `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader pulumi.StringPtrInput `pulumi:"proxyHeader"`
	// The application data to send once the SSL connection has been
	// established (default value is empty). If both request and response are
	// empty, the connection establishment alone will indicate health. The request
	// data can only be ASCII.
	Request pulumi.StringPtrInput `pulumi:"request"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (HealthCheckTcpHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckTcpHealthCheck)(nil)).Elem()
}

func (i HealthCheckTcpHealthCheckArgs) ToHealthCheckTcpHealthCheckOutput() HealthCheckTcpHealthCheckOutput {
	return i.ToHealthCheckTcpHealthCheckOutputWithContext(context.Background())
}

func (i HealthCheckTcpHealthCheckArgs) ToHealthCheckTcpHealthCheckOutputWithContext(ctx context.Context) HealthCheckTcpHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckTcpHealthCheckOutput)
}

func (i HealthCheckTcpHealthCheckArgs) ToHealthCheckTcpHealthCheckPtrOutput() HealthCheckTcpHealthCheckPtrOutput {
	return i.ToHealthCheckTcpHealthCheckPtrOutputWithContext(context.Background())
}

func (i HealthCheckTcpHealthCheckArgs) ToHealthCheckTcpHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckTcpHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckTcpHealthCheckOutput).ToHealthCheckTcpHealthCheckPtrOutputWithContext(ctx)
}

// HealthCheckTcpHealthCheckPtrInput is an input type that accepts HealthCheckTcpHealthCheckArgs, HealthCheckTcpHealthCheckPtr and HealthCheckTcpHealthCheckPtrOutput values.
// You can construct a concrete instance of `HealthCheckTcpHealthCheckPtrInput` via:
//
// 		 HealthCheckTcpHealthCheckArgs{...}
//
//  or:
//
// 		 nil
//
type HealthCheckTcpHealthCheckPtrInput interface {
	pulumi.Input

	ToHealthCheckTcpHealthCheckPtrOutput() HealthCheckTcpHealthCheckPtrOutput
	ToHealthCheckTcpHealthCheckPtrOutputWithContext(context.Context) HealthCheckTcpHealthCheckPtrOutput
}

type healthCheckTcpHealthCheckPtrType HealthCheckTcpHealthCheckArgs

func HealthCheckTcpHealthCheckPtr(v *HealthCheckTcpHealthCheckArgs) HealthCheckTcpHealthCheckPtrInput {
	return (*healthCheckTcpHealthCheckPtrType)(v)
}

func (*healthCheckTcpHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckTcpHealthCheck)(nil)).Elem()
}

func (i *healthCheckTcpHealthCheckPtrType) ToHealthCheckTcpHealthCheckPtrOutput() HealthCheckTcpHealthCheckPtrOutput {
	return i.ToHealthCheckTcpHealthCheckPtrOutputWithContext(context.Background())
}

func (i *healthCheckTcpHealthCheckPtrType) ToHealthCheckTcpHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckTcpHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckTcpHealthCheckPtrOutput)
}

type HealthCheckTcpHealthCheckOutput struct{ *pulumi.OutputState }

func (HealthCheckTcpHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckTcpHealthCheck)(nil)).Elem()
}

func (o HealthCheckTcpHealthCheckOutput) ToHealthCheckTcpHealthCheckOutput() HealthCheckTcpHealthCheckOutput {
	return o
}

func (o HealthCheckTcpHealthCheckOutput) ToHealthCheckTcpHealthCheckOutputWithContext(ctx context.Context) HealthCheckTcpHealthCheckOutput {
	return o
}

func (o HealthCheckTcpHealthCheckOutput) ToHealthCheckTcpHealthCheckPtrOutput() HealthCheckTcpHealthCheckPtrOutput {
	return o.ToHealthCheckTcpHealthCheckPtrOutputWithContext(context.Background())
}

func (o HealthCheckTcpHealthCheckOutput) ToHealthCheckTcpHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckTcpHealthCheckPtrOutput {
	return o.ApplyT(func(v HealthCheckTcpHealthCheck) *HealthCheckTcpHealthCheck {
		return &v
	}).(HealthCheckTcpHealthCheckPtrOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o HealthCheckTcpHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HealthCheckTcpHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o HealthCheckTcpHealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckTcpHealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o HealthCheckTcpHealthCheckOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckTcpHealthCheck) *string { return v.PortSpecification }).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o HealthCheckTcpHealthCheckOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckTcpHealthCheck) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

// The application data to send once the SSL connection has been
// established (default value is empty). If both request and response are
// empty, the connection establishment alone will indicate health. The request
// data can only be ASCII.
func (o HealthCheckTcpHealthCheckOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckTcpHealthCheck) *string { return v.Request }).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o HealthCheckTcpHealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthCheckTcpHealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type HealthCheckTcpHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (HealthCheckTcpHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckTcpHealthCheck)(nil)).Elem()
}

func (o HealthCheckTcpHealthCheckPtrOutput) ToHealthCheckTcpHealthCheckPtrOutput() HealthCheckTcpHealthCheckPtrOutput {
	return o
}

func (o HealthCheckTcpHealthCheckPtrOutput) ToHealthCheckTcpHealthCheckPtrOutputWithContext(ctx context.Context) HealthCheckTcpHealthCheckPtrOutput {
	return o
}

func (o HealthCheckTcpHealthCheckPtrOutput) Elem() HealthCheckTcpHealthCheckOutput {
	return o.ApplyT(func(v *HealthCheckTcpHealthCheck) HealthCheckTcpHealthCheck { return *v }).(HealthCheckTcpHealthCheckOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o HealthCheckTcpHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthCheckTcpHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o HealthCheckTcpHealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckTcpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o HealthCheckTcpHealthCheckPtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckTcpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o HealthCheckTcpHealthCheckPtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckTcpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The application data to send once the SSL connection has been
// established (default value is empty). If both request and response are
// empty, the connection establishment alone will indicate health. The request
// data can only be ASCII.
func (o HealthCheckTcpHealthCheckPtrOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckTcpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Request
	}).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o HealthCheckTcpHealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckTcpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type ImageGuestOsFeature struct {
	// The type of supported feature. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options.
	Type string `pulumi:"type"`
}

// ImageGuestOsFeatureInput is an input type that accepts ImageGuestOsFeatureArgs and ImageGuestOsFeatureOutput values.
// You can construct a concrete instance of `ImageGuestOsFeatureInput` via:
//
// 		 ImageGuestOsFeatureArgs{...}
//
type ImageGuestOsFeatureInput interface {
	pulumi.Input

	ToImageGuestOsFeatureOutput() ImageGuestOsFeatureOutput
	ToImageGuestOsFeatureOutputWithContext(context.Context) ImageGuestOsFeatureOutput
}

type ImageGuestOsFeatureArgs struct {
	// The type of supported feature. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageGuestOsFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageGuestOsFeature)(nil)).Elem()
}

func (i ImageGuestOsFeatureArgs) ToImageGuestOsFeatureOutput() ImageGuestOsFeatureOutput {
	return i.ToImageGuestOsFeatureOutputWithContext(context.Background())
}

func (i ImageGuestOsFeatureArgs) ToImageGuestOsFeatureOutputWithContext(ctx context.Context) ImageGuestOsFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageGuestOsFeatureOutput)
}

// ImageGuestOsFeatureArrayInput is an input type that accepts ImageGuestOsFeatureArray and ImageGuestOsFeatureArrayOutput values.
// You can construct a concrete instance of `ImageGuestOsFeatureArrayInput` via:
//
// 		 ImageGuestOsFeatureArray{ ImageGuestOsFeatureArgs{...} }
//
type ImageGuestOsFeatureArrayInput interface {
	pulumi.Input

	ToImageGuestOsFeatureArrayOutput() ImageGuestOsFeatureArrayOutput
	ToImageGuestOsFeatureArrayOutputWithContext(context.Context) ImageGuestOsFeatureArrayOutput
}

type ImageGuestOsFeatureArray []ImageGuestOsFeatureInput

func (ImageGuestOsFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageGuestOsFeature)(nil)).Elem()
}

func (i ImageGuestOsFeatureArray) ToImageGuestOsFeatureArrayOutput() ImageGuestOsFeatureArrayOutput {
	return i.ToImageGuestOsFeatureArrayOutputWithContext(context.Background())
}

func (i ImageGuestOsFeatureArray) ToImageGuestOsFeatureArrayOutputWithContext(ctx context.Context) ImageGuestOsFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageGuestOsFeatureArrayOutput)
}

type ImageGuestOsFeatureOutput struct{ *pulumi.OutputState }

func (ImageGuestOsFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageGuestOsFeature)(nil)).Elem()
}

func (o ImageGuestOsFeatureOutput) ToImageGuestOsFeatureOutput() ImageGuestOsFeatureOutput {
	return o
}

func (o ImageGuestOsFeatureOutput) ToImageGuestOsFeatureOutputWithContext(ctx context.Context) ImageGuestOsFeatureOutput {
	return o
}

// The type of supported feature. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options.
func (o ImageGuestOsFeatureOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageGuestOsFeature) string { return v.Type }).(pulumi.StringOutput)
}

type ImageGuestOsFeatureArrayOutput struct{ *pulumi.OutputState }

func (ImageGuestOsFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageGuestOsFeature)(nil)).Elem()
}

func (o ImageGuestOsFeatureArrayOutput) ToImageGuestOsFeatureArrayOutput() ImageGuestOsFeatureArrayOutput {
	return o
}

func (o ImageGuestOsFeatureArrayOutput) ToImageGuestOsFeatureArrayOutputWithContext(ctx context.Context) ImageGuestOsFeatureArrayOutput {
	return o
}

func (o ImageGuestOsFeatureArrayOutput) Index(i pulumi.IntInput) ImageGuestOsFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageGuestOsFeature {
		return vs[0].([]ImageGuestOsFeature)[vs[1].(int)]
	}).(ImageGuestOsFeatureOutput)
}

type ImageRawDisk struct {
	// The format used to encode and transmit the block device, which
	// should be TAR. This is just a container and transmission format
	// and not a runtime format. Provided by the client when the disk
	// image is created.
	ContainerType *string `pulumi:"containerType"`
	// An optional SHA1 checksum of the disk image before unpackaging.
	// This is provided by the client when the disk image is created.
	Sha1 *string `pulumi:"sha1"`
	// The full Google Cloud Storage URL where disk storage is stored
	// You must provide either this property or the sourceDisk property
	// but not both.
	Source string `pulumi:"source"`
}

// ImageRawDiskInput is an input type that accepts ImageRawDiskArgs and ImageRawDiskOutput values.
// You can construct a concrete instance of `ImageRawDiskInput` via:
//
// 		 ImageRawDiskArgs{...}
//
type ImageRawDiskInput interface {
	pulumi.Input

	ToImageRawDiskOutput() ImageRawDiskOutput
	ToImageRawDiskOutputWithContext(context.Context) ImageRawDiskOutput
}

type ImageRawDiskArgs struct {
	// The format used to encode and transmit the block device, which
	// should be TAR. This is just a container and transmission format
	// and not a runtime format. Provided by the client when the disk
	// image is created.
	ContainerType pulumi.StringPtrInput `pulumi:"containerType"`
	// An optional SHA1 checksum of the disk image before unpackaging.
	// This is provided by the client when the disk image is created.
	Sha1 pulumi.StringPtrInput `pulumi:"sha1"`
	// The full Google Cloud Storage URL where disk storage is stored
	// You must provide either this property or the sourceDisk property
	// but not both.
	Source pulumi.StringInput `pulumi:"source"`
}

func (ImageRawDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRawDisk)(nil)).Elem()
}

func (i ImageRawDiskArgs) ToImageRawDiskOutput() ImageRawDiskOutput {
	return i.ToImageRawDiskOutputWithContext(context.Background())
}

func (i ImageRawDiskArgs) ToImageRawDiskOutputWithContext(ctx context.Context) ImageRawDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRawDiskOutput)
}

func (i ImageRawDiskArgs) ToImageRawDiskPtrOutput() ImageRawDiskPtrOutput {
	return i.ToImageRawDiskPtrOutputWithContext(context.Background())
}

func (i ImageRawDiskArgs) ToImageRawDiskPtrOutputWithContext(ctx context.Context) ImageRawDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRawDiskOutput).ToImageRawDiskPtrOutputWithContext(ctx)
}

// ImageRawDiskPtrInput is an input type that accepts ImageRawDiskArgs, ImageRawDiskPtr and ImageRawDiskPtrOutput values.
// You can construct a concrete instance of `ImageRawDiskPtrInput` via:
//
// 		 ImageRawDiskArgs{...}
//
//  or:
//
// 		 nil
//
type ImageRawDiskPtrInput interface {
	pulumi.Input

	ToImageRawDiskPtrOutput() ImageRawDiskPtrOutput
	ToImageRawDiskPtrOutputWithContext(context.Context) ImageRawDiskPtrOutput
}

type imageRawDiskPtrType ImageRawDiskArgs

func ImageRawDiskPtr(v *ImageRawDiskArgs) ImageRawDiskPtrInput {
	return (*imageRawDiskPtrType)(v)
}

func (*imageRawDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRawDisk)(nil)).Elem()
}

func (i *imageRawDiskPtrType) ToImageRawDiskPtrOutput() ImageRawDiskPtrOutput {
	return i.ToImageRawDiskPtrOutputWithContext(context.Background())
}

func (i *imageRawDiskPtrType) ToImageRawDiskPtrOutputWithContext(ctx context.Context) ImageRawDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRawDiskPtrOutput)
}

type ImageRawDiskOutput struct{ *pulumi.OutputState }

func (ImageRawDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRawDisk)(nil)).Elem()
}

func (o ImageRawDiskOutput) ToImageRawDiskOutput() ImageRawDiskOutput {
	return o
}

func (o ImageRawDiskOutput) ToImageRawDiskOutputWithContext(ctx context.Context) ImageRawDiskOutput {
	return o
}

func (o ImageRawDiskOutput) ToImageRawDiskPtrOutput() ImageRawDiskPtrOutput {
	return o.ToImageRawDiskPtrOutputWithContext(context.Background())
}

func (o ImageRawDiskOutput) ToImageRawDiskPtrOutputWithContext(ctx context.Context) ImageRawDiskPtrOutput {
	return o.ApplyT(func(v ImageRawDisk) *ImageRawDisk {
		return &v
	}).(ImageRawDiskPtrOutput)
}

// The format used to encode and transmit the block device, which
// should be TAR. This is just a container and transmission format
// and not a runtime format. Provided by the client when the disk
// image is created.
func (o ImageRawDiskOutput) ContainerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRawDisk) *string { return v.ContainerType }).(pulumi.StringPtrOutput)
}

// An optional SHA1 checksum of the disk image before unpackaging.
// This is provided by the client when the disk image is created.
func (o ImageRawDiskOutput) Sha1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRawDisk) *string { return v.Sha1 }).(pulumi.StringPtrOutput)
}

// The full Google Cloud Storage URL where disk storage is stored
// You must provide either this property or the sourceDisk property
// but not both.
func (o ImageRawDiskOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRawDisk) string { return v.Source }).(pulumi.StringOutput)
}

type ImageRawDiskPtrOutput struct{ *pulumi.OutputState }

func (ImageRawDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRawDisk)(nil)).Elem()
}

func (o ImageRawDiskPtrOutput) ToImageRawDiskPtrOutput() ImageRawDiskPtrOutput {
	return o
}

func (o ImageRawDiskPtrOutput) ToImageRawDiskPtrOutputWithContext(ctx context.Context) ImageRawDiskPtrOutput {
	return o
}

func (o ImageRawDiskPtrOutput) Elem() ImageRawDiskOutput {
	return o.ApplyT(func(v *ImageRawDisk) ImageRawDisk { return *v }).(ImageRawDiskOutput)
}

// The format used to encode and transmit the block device, which
// should be TAR. This is just a container and transmission format
// and not a runtime format. Provided by the client when the disk
// image is created.
func (o ImageRawDiskPtrOutput) ContainerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRawDisk) *string {
		if v == nil {
			return nil
		}
		return v.ContainerType
	}).(pulumi.StringPtrOutput)
}

// An optional SHA1 checksum of the disk image before unpackaging.
// This is provided by the client when the disk image is created.
func (o ImageRawDiskPtrOutput) Sha1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRawDisk) *string {
		if v == nil {
			return nil
		}
		return v.Sha1
	}).(pulumi.StringPtrOutput)
}

// The full Google Cloud Storage URL where disk storage is stored
// You must provide either this property or the sourceDisk property
// but not both.
func (o ImageRawDiskPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRawDisk) *string {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(pulumi.StringPtrOutput)
}

type InstanceAttachedDisk struct {
	// Name with which the attached disk will be accessible
	// under `/dev/disk/by-id/google-*`
	DeviceName *string `pulumi:"deviceName"`
	// A 256-bit [customer-supplied encryption key]
	// (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
	// encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
	// to encrypt this disk. Only one of `kmsKeySelfLink` and `diskEncryptionKeyRaw` may be set.
	DiskEncryptionKeyRaw    *string `pulumi:"diskEncryptionKeyRaw"`
	DiskEncryptionKeySha256 *string `pulumi:"diskEncryptionKeySha256"`
	// The selfLink of the encryption key that is
	// stored in Google Cloud KMS to encrypt this disk. Only one of `kmsKeySelfLink`
	// and `diskEncryptionKeyRaw` may be set.
	KmsKeySelfLink *string `pulumi:"kmsKeySelfLink"`
	// Either "READ_ONLY" or "READ_WRITE", defaults to "READ_WRITE"
	// If you have a persistent disk with data that you want to share
	// between multiple instances, detach it from any read-write instances and
	// attach it to one or more instances in read-only mode.
	Mode *string `pulumi:"mode"`
	// The name or selfLink of the disk to attach to this instance.
	Source string `pulumi:"source"`
}

// InstanceAttachedDiskInput is an input type that accepts InstanceAttachedDiskArgs and InstanceAttachedDiskOutput values.
// You can construct a concrete instance of `InstanceAttachedDiskInput` via:
//
// 		 InstanceAttachedDiskArgs{...}
//
type InstanceAttachedDiskInput interface {
	pulumi.Input

	ToInstanceAttachedDiskOutput() InstanceAttachedDiskOutput
	ToInstanceAttachedDiskOutputWithContext(context.Context) InstanceAttachedDiskOutput
}

type InstanceAttachedDiskArgs struct {
	// Name with which the attached disk will be accessible
	// under `/dev/disk/by-id/google-*`
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
	// A 256-bit [customer-supplied encryption key]
	// (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
	// encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
	// to encrypt this disk. Only one of `kmsKeySelfLink` and `diskEncryptionKeyRaw` may be set.
	DiskEncryptionKeyRaw    pulumi.StringPtrInput `pulumi:"diskEncryptionKeyRaw"`
	DiskEncryptionKeySha256 pulumi.StringPtrInput `pulumi:"diskEncryptionKeySha256"`
	// The selfLink of the encryption key that is
	// stored in Google Cloud KMS to encrypt this disk. Only one of `kmsKeySelfLink`
	// and `diskEncryptionKeyRaw` may be set.
	KmsKeySelfLink pulumi.StringPtrInput `pulumi:"kmsKeySelfLink"`
	// Either "READ_ONLY" or "READ_WRITE", defaults to "READ_WRITE"
	// If you have a persistent disk with data that you want to share
	// between multiple instances, detach it from any read-write instances and
	// attach it to one or more instances in read-only mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The name or selfLink of the disk to attach to this instance.
	Source pulumi.StringInput `pulumi:"source"`
}

func (InstanceAttachedDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceAttachedDisk)(nil)).Elem()
}

func (i InstanceAttachedDiskArgs) ToInstanceAttachedDiskOutput() InstanceAttachedDiskOutput {
	return i.ToInstanceAttachedDiskOutputWithContext(context.Background())
}

func (i InstanceAttachedDiskArgs) ToInstanceAttachedDiskOutputWithContext(ctx context.Context) InstanceAttachedDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAttachedDiskOutput)
}

// InstanceAttachedDiskArrayInput is an input type that accepts InstanceAttachedDiskArray and InstanceAttachedDiskArrayOutput values.
// You can construct a concrete instance of `InstanceAttachedDiskArrayInput` via:
//
// 		 InstanceAttachedDiskArray{ InstanceAttachedDiskArgs{...} }
//
type InstanceAttachedDiskArrayInput interface {
	pulumi.Input

	ToInstanceAttachedDiskArrayOutput() InstanceAttachedDiskArrayOutput
	ToInstanceAttachedDiskArrayOutputWithContext(context.Context) InstanceAttachedDiskArrayOutput
}

type InstanceAttachedDiskArray []InstanceAttachedDiskInput

func (InstanceAttachedDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceAttachedDisk)(nil)).Elem()
}

func (i InstanceAttachedDiskArray) ToInstanceAttachedDiskArrayOutput() InstanceAttachedDiskArrayOutput {
	return i.ToInstanceAttachedDiskArrayOutputWithContext(context.Background())
}

func (i InstanceAttachedDiskArray) ToInstanceAttachedDiskArrayOutputWithContext(ctx context.Context) InstanceAttachedDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAttachedDiskArrayOutput)
}

type InstanceAttachedDiskOutput struct{ *pulumi.OutputState }

func (InstanceAttachedDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceAttachedDisk)(nil)).Elem()
}

func (o InstanceAttachedDiskOutput) ToInstanceAttachedDiskOutput() InstanceAttachedDiskOutput {
	return o
}

func (o InstanceAttachedDiskOutput) ToInstanceAttachedDiskOutputWithContext(ctx context.Context) InstanceAttachedDiskOutput {
	return o
}

// Name with which the attached disk will be accessible
// under `/dev/disk/by-id/google-*`
func (o InstanceAttachedDiskOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceAttachedDisk) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

// A 256-bit [customer-supplied encryption key]
// (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
// encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
// to encrypt this disk. Only one of `kmsKeySelfLink` and `diskEncryptionKeyRaw` may be set.
func (o InstanceAttachedDiskOutput) DiskEncryptionKeyRaw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceAttachedDisk) *string { return v.DiskEncryptionKeyRaw }).(pulumi.StringPtrOutput)
}

func (o InstanceAttachedDiskOutput) DiskEncryptionKeySha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceAttachedDisk) *string { return v.DiskEncryptionKeySha256 }).(pulumi.StringPtrOutput)
}

// The selfLink of the encryption key that is
// stored in Google Cloud KMS to encrypt this disk. Only one of `kmsKeySelfLink`
// and `diskEncryptionKeyRaw` may be set.
func (o InstanceAttachedDiskOutput) KmsKeySelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceAttachedDisk) *string { return v.KmsKeySelfLink }).(pulumi.StringPtrOutput)
}

// Either "READ_ONLY" or "READ_WRITE", defaults to "READ_WRITE"
// If you have a persistent disk with data that you want to share
// between multiple instances, detach it from any read-write instances and
// attach it to one or more instances in read-only mode.
func (o InstanceAttachedDiskOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceAttachedDisk) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The name or selfLink of the disk to attach to this instance.
func (o InstanceAttachedDiskOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceAttachedDisk) string { return v.Source }).(pulumi.StringOutput)
}

type InstanceAttachedDiskArrayOutput struct{ *pulumi.OutputState }

func (InstanceAttachedDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceAttachedDisk)(nil)).Elem()
}

func (o InstanceAttachedDiskArrayOutput) ToInstanceAttachedDiskArrayOutput() InstanceAttachedDiskArrayOutput {
	return o
}

func (o InstanceAttachedDiskArrayOutput) ToInstanceAttachedDiskArrayOutputWithContext(ctx context.Context) InstanceAttachedDiskArrayOutput {
	return o
}

func (o InstanceAttachedDiskArrayOutput) Index(i pulumi.IntInput) InstanceAttachedDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceAttachedDisk {
		return vs[0].([]InstanceAttachedDisk)[vs[1].(int)]
	}).(InstanceAttachedDiskOutput)
}

type InstanceBootDisk struct {
	// Whether the disk will be auto-deleted when the instance
	// is deleted. Defaults to true.
	AutoDelete *bool `pulumi:"autoDelete"`
	// Name with which the attached disk will be accessible
	// under `/dev/disk/by-id/google-*`
	DeviceName *string `pulumi:"deviceName"`
	// A 256-bit [customer-supplied encryption key]
	// (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
	// encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
	// to encrypt this disk. Only one of `kmsKeySelfLink` and `diskEncryptionKeyRaw` may be set.
	DiskEncryptionKeyRaw    *string `pulumi:"diskEncryptionKeyRaw"`
	DiskEncryptionKeySha256 *string `pulumi:"diskEncryptionKeySha256"`
	// Parameters for a new disk that will be created
	// alongside the new instance. Either `initializeParams` or `source` must be set.
	// Structure is documented below.
	InitializeParams *InstanceBootDiskInitializeParams `pulumi:"initializeParams"`
	// The selfLink of the encryption key that is
	// stored in Google Cloud KMS to encrypt this disk. Only one of `kmsKeySelfLink`
	// and `diskEncryptionKeyRaw` may be set.
	KmsKeySelfLink *string `pulumi:"kmsKeySelfLink"`
	// Either "READ_ONLY" or "READ_WRITE", defaults to "READ_WRITE"
	// If you have a persistent disk with data that you want to share
	// between multiple instances, detach it from any read-write instances and
	// attach it to one or more instances in read-only mode.
	Mode *string `pulumi:"mode"`
	// The name or selfLink of the disk to attach to this instance.
	Source *string `pulumi:"source"`
}

// InstanceBootDiskInput is an input type that accepts InstanceBootDiskArgs and InstanceBootDiskOutput values.
// You can construct a concrete instance of `InstanceBootDiskInput` via:
//
// 		 InstanceBootDiskArgs{...}
//
type InstanceBootDiskInput interface {
	pulumi.Input

	ToInstanceBootDiskOutput() InstanceBootDiskOutput
	ToInstanceBootDiskOutputWithContext(context.Context) InstanceBootDiskOutput
}

type InstanceBootDiskArgs struct {
	// Whether the disk will be auto-deleted when the instance
	// is deleted. Defaults to true.
	AutoDelete pulumi.BoolPtrInput `pulumi:"autoDelete"`
	// Name with which the attached disk will be accessible
	// under `/dev/disk/by-id/google-*`
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
	// A 256-bit [customer-supplied encryption key]
	// (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
	// encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
	// to encrypt this disk. Only one of `kmsKeySelfLink` and `diskEncryptionKeyRaw` may be set.
	DiskEncryptionKeyRaw    pulumi.StringPtrInput `pulumi:"diskEncryptionKeyRaw"`
	DiskEncryptionKeySha256 pulumi.StringPtrInput `pulumi:"diskEncryptionKeySha256"`
	// Parameters for a new disk that will be created
	// alongside the new instance. Either `initializeParams` or `source` must be set.
	// Structure is documented below.
	InitializeParams InstanceBootDiskInitializeParamsPtrInput `pulumi:"initializeParams"`
	// The selfLink of the encryption key that is
	// stored in Google Cloud KMS to encrypt this disk. Only one of `kmsKeySelfLink`
	// and `diskEncryptionKeyRaw` may be set.
	KmsKeySelfLink pulumi.StringPtrInput `pulumi:"kmsKeySelfLink"`
	// Either "READ_ONLY" or "READ_WRITE", defaults to "READ_WRITE"
	// If you have a persistent disk with data that you want to share
	// between multiple instances, detach it from any read-write instances and
	// attach it to one or more instances in read-only mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The name or selfLink of the disk to attach to this instance.
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (InstanceBootDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBootDisk)(nil)).Elem()
}

func (i InstanceBootDiskArgs) ToInstanceBootDiskOutput() InstanceBootDiskOutput {
	return i.ToInstanceBootDiskOutputWithContext(context.Background())
}

func (i InstanceBootDiskArgs) ToInstanceBootDiskOutputWithContext(ctx context.Context) InstanceBootDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBootDiskOutput)
}

func (i InstanceBootDiskArgs) ToInstanceBootDiskPtrOutput() InstanceBootDiskPtrOutput {
	return i.ToInstanceBootDiskPtrOutputWithContext(context.Background())
}

func (i InstanceBootDiskArgs) ToInstanceBootDiskPtrOutputWithContext(ctx context.Context) InstanceBootDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBootDiskOutput).ToInstanceBootDiskPtrOutputWithContext(ctx)
}

// InstanceBootDiskPtrInput is an input type that accepts InstanceBootDiskArgs, InstanceBootDiskPtr and InstanceBootDiskPtrOutput values.
// You can construct a concrete instance of `InstanceBootDiskPtrInput` via:
//
// 		 InstanceBootDiskArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceBootDiskPtrInput interface {
	pulumi.Input

	ToInstanceBootDiskPtrOutput() InstanceBootDiskPtrOutput
	ToInstanceBootDiskPtrOutputWithContext(context.Context) InstanceBootDiskPtrOutput
}

type instanceBootDiskPtrType InstanceBootDiskArgs

func InstanceBootDiskPtr(v *InstanceBootDiskArgs) InstanceBootDiskPtrInput {
	return (*instanceBootDiskPtrType)(v)
}

func (*instanceBootDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBootDisk)(nil)).Elem()
}

func (i *instanceBootDiskPtrType) ToInstanceBootDiskPtrOutput() InstanceBootDiskPtrOutput {
	return i.ToInstanceBootDiskPtrOutputWithContext(context.Background())
}

func (i *instanceBootDiskPtrType) ToInstanceBootDiskPtrOutputWithContext(ctx context.Context) InstanceBootDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBootDiskPtrOutput)
}

type InstanceBootDiskOutput struct{ *pulumi.OutputState }

func (InstanceBootDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBootDisk)(nil)).Elem()
}

func (o InstanceBootDiskOutput) ToInstanceBootDiskOutput() InstanceBootDiskOutput {
	return o
}

func (o InstanceBootDiskOutput) ToInstanceBootDiskOutputWithContext(ctx context.Context) InstanceBootDiskOutput {
	return o
}

func (o InstanceBootDiskOutput) ToInstanceBootDiskPtrOutput() InstanceBootDiskPtrOutput {
	return o.ToInstanceBootDiskPtrOutputWithContext(context.Background())
}

func (o InstanceBootDiskOutput) ToInstanceBootDiskPtrOutputWithContext(ctx context.Context) InstanceBootDiskPtrOutput {
	return o.ApplyT(func(v InstanceBootDisk) *InstanceBootDisk {
		return &v
	}).(InstanceBootDiskPtrOutput)
}

// Whether the disk will be auto-deleted when the instance
// is deleted. Defaults to true.
func (o InstanceBootDiskOutput) AutoDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceBootDisk) *bool { return v.AutoDelete }).(pulumi.BoolPtrOutput)
}

// Name with which the attached disk will be accessible
// under `/dev/disk/by-id/google-*`
func (o InstanceBootDiskOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceBootDisk) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

// A 256-bit [customer-supplied encryption key]
// (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
// encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
// to encrypt this disk. Only one of `kmsKeySelfLink` and `diskEncryptionKeyRaw` may be set.
func (o InstanceBootDiskOutput) DiskEncryptionKeyRaw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceBootDisk) *string { return v.DiskEncryptionKeyRaw }).(pulumi.StringPtrOutput)
}

func (o InstanceBootDiskOutput) DiskEncryptionKeySha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceBootDisk) *string { return v.DiskEncryptionKeySha256 }).(pulumi.StringPtrOutput)
}

// Parameters for a new disk that will be created
// alongside the new instance. Either `initializeParams` or `source` must be set.
// Structure is documented below.
func (o InstanceBootDiskOutput) InitializeParams() InstanceBootDiskInitializeParamsPtrOutput {
	return o.ApplyT(func(v InstanceBootDisk) *InstanceBootDiskInitializeParams { return v.InitializeParams }).(InstanceBootDiskInitializeParamsPtrOutput)
}

// The selfLink of the encryption key that is
// stored in Google Cloud KMS to encrypt this disk. Only one of `kmsKeySelfLink`
// and `diskEncryptionKeyRaw` may be set.
func (o InstanceBootDiskOutput) KmsKeySelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceBootDisk) *string { return v.KmsKeySelfLink }).(pulumi.StringPtrOutput)
}

// Either "READ_ONLY" or "READ_WRITE", defaults to "READ_WRITE"
// If you have a persistent disk with data that you want to share
// between multiple instances, detach it from any read-write instances and
// attach it to one or more instances in read-only mode.
func (o InstanceBootDiskOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceBootDisk) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The name or selfLink of the disk to attach to this instance.
func (o InstanceBootDiskOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceBootDisk) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type InstanceBootDiskPtrOutput struct{ *pulumi.OutputState }

func (InstanceBootDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBootDisk)(nil)).Elem()
}

func (o InstanceBootDiskPtrOutput) ToInstanceBootDiskPtrOutput() InstanceBootDiskPtrOutput {
	return o
}

func (o InstanceBootDiskPtrOutput) ToInstanceBootDiskPtrOutputWithContext(ctx context.Context) InstanceBootDiskPtrOutput {
	return o
}

func (o InstanceBootDiskPtrOutput) Elem() InstanceBootDiskOutput {
	return o.ApplyT(func(v *InstanceBootDisk) InstanceBootDisk { return *v }).(InstanceBootDiskOutput)
}

// Whether the disk will be auto-deleted when the instance
// is deleted. Defaults to true.
func (o InstanceBootDiskPtrOutput) AutoDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceBootDisk) *bool {
		if v == nil {
			return nil
		}
		return v.AutoDelete
	}).(pulumi.BoolPtrOutput)
}

// Name with which the attached disk will be accessible
// under `/dev/disk/by-id/google-*`
func (o InstanceBootDiskPtrOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceBootDisk) *string {
		if v == nil {
			return nil
		}
		return v.DeviceName
	}).(pulumi.StringPtrOutput)
}

// A 256-bit [customer-supplied encryption key]
// (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
// encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
// to encrypt this disk. Only one of `kmsKeySelfLink` and `diskEncryptionKeyRaw` may be set.
func (o InstanceBootDiskPtrOutput) DiskEncryptionKeyRaw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceBootDisk) *string {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionKeyRaw
	}).(pulumi.StringPtrOutput)
}

func (o InstanceBootDiskPtrOutput) DiskEncryptionKeySha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceBootDisk) *string {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionKeySha256
	}).(pulumi.StringPtrOutput)
}

// Parameters for a new disk that will be created
// alongside the new instance. Either `initializeParams` or `source` must be set.
// Structure is documented below.
func (o InstanceBootDiskPtrOutput) InitializeParams() InstanceBootDiskInitializeParamsPtrOutput {
	return o.ApplyT(func(v *InstanceBootDisk) *InstanceBootDiskInitializeParams {
		if v == nil {
			return nil
		}
		return v.InitializeParams
	}).(InstanceBootDiskInitializeParamsPtrOutput)
}

// The selfLink of the encryption key that is
// stored in Google Cloud KMS to encrypt this disk. Only one of `kmsKeySelfLink`
// and `diskEncryptionKeyRaw` may be set.
func (o InstanceBootDiskPtrOutput) KmsKeySelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceBootDisk) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeySelfLink
	}).(pulumi.StringPtrOutput)
}

// Either "READ_ONLY" or "READ_WRITE", defaults to "READ_WRITE"
// If you have a persistent disk with data that you want to share
// between multiple instances, detach it from any read-write instances and
// attach it to one or more instances in read-only mode.
func (o InstanceBootDiskPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceBootDisk) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The name or selfLink of the disk to attach to this instance.
func (o InstanceBootDiskPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceBootDisk) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

type InstanceBootDiskInitializeParams struct {
	// The image from which to initialize this disk. This can be
	// one of: the image's `selfLink`, `projects/{project}/global/images/{image}`,
	// `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
	// `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
	// `{project}/{image}`, `{family}`, or `{image}`. If referred by family, the
	// images names must include the family name. If they don't, use the
	// [compute.Image data source](https://www.terraform.io/docs/providers/google/d/datasource_compute_image.html).
	// For instance, the image `centos-6-v20180104` includes its family name `centos-6`.
	// These images can be referred by family name here.
	Image *string `pulumi:"image"`
	// A map of key/value label pairs to assign to the instance.
	Labels map[string]interface{} `pulumi:"labels"`
	// The size of the image in gigabytes. If not specified, it
	// will inherit the size of its base image.
	Size *int `pulumi:"size"`
	// The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
	Type *string `pulumi:"type"`
}

// InstanceBootDiskInitializeParamsInput is an input type that accepts InstanceBootDiskInitializeParamsArgs and InstanceBootDiskInitializeParamsOutput values.
// You can construct a concrete instance of `InstanceBootDiskInitializeParamsInput` via:
//
// 		 InstanceBootDiskInitializeParamsArgs{...}
//
type InstanceBootDiskInitializeParamsInput interface {
	pulumi.Input

	ToInstanceBootDiskInitializeParamsOutput() InstanceBootDiskInitializeParamsOutput
	ToInstanceBootDiskInitializeParamsOutputWithContext(context.Context) InstanceBootDiskInitializeParamsOutput
}

type InstanceBootDiskInitializeParamsArgs struct {
	// The image from which to initialize this disk. This can be
	// one of: the image's `selfLink`, `projects/{project}/global/images/{image}`,
	// `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
	// `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
	// `{project}/{image}`, `{family}`, or `{image}`. If referred by family, the
	// images names must include the family name. If they don't, use the
	// [compute.Image data source](https://www.terraform.io/docs/providers/google/d/datasource_compute_image.html).
	// For instance, the image `centos-6-v20180104` includes its family name `centos-6`.
	// These images can be referred by family name here.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// A map of key/value label pairs to assign to the instance.
	Labels pulumi.MapInput `pulumi:"labels"`
	// The size of the image in gigabytes. If not specified, it
	// will inherit the size of its base image.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (InstanceBootDiskInitializeParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBootDiskInitializeParams)(nil)).Elem()
}

func (i InstanceBootDiskInitializeParamsArgs) ToInstanceBootDiskInitializeParamsOutput() InstanceBootDiskInitializeParamsOutput {
	return i.ToInstanceBootDiskInitializeParamsOutputWithContext(context.Background())
}

func (i InstanceBootDiskInitializeParamsArgs) ToInstanceBootDiskInitializeParamsOutputWithContext(ctx context.Context) InstanceBootDiskInitializeParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBootDiskInitializeParamsOutput)
}

func (i InstanceBootDiskInitializeParamsArgs) ToInstanceBootDiskInitializeParamsPtrOutput() InstanceBootDiskInitializeParamsPtrOutput {
	return i.ToInstanceBootDiskInitializeParamsPtrOutputWithContext(context.Background())
}

func (i InstanceBootDiskInitializeParamsArgs) ToInstanceBootDiskInitializeParamsPtrOutputWithContext(ctx context.Context) InstanceBootDiskInitializeParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBootDiskInitializeParamsOutput).ToInstanceBootDiskInitializeParamsPtrOutputWithContext(ctx)
}

// InstanceBootDiskInitializeParamsPtrInput is an input type that accepts InstanceBootDiskInitializeParamsArgs, InstanceBootDiskInitializeParamsPtr and InstanceBootDiskInitializeParamsPtrOutput values.
// You can construct a concrete instance of `InstanceBootDiskInitializeParamsPtrInput` via:
//
// 		 InstanceBootDiskInitializeParamsArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceBootDiskInitializeParamsPtrInput interface {
	pulumi.Input

	ToInstanceBootDiskInitializeParamsPtrOutput() InstanceBootDiskInitializeParamsPtrOutput
	ToInstanceBootDiskInitializeParamsPtrOutputWithContext(context.Context) InstanceBootDiskInitializeParamsPtrOutput
}

type instanceBootDiskInitializeParamsPtrType InstanceBootDiskInitializeParamsArgs

func InstanceBootDiskInitializeParamsPtr(v *InstanceBootDiskInitializeParamsArgs) InstanceBootDiskInitializeParamsPtrInput {
	return (*instanceBootDiskInitializeParamsPtrType)(v)
}

func (*instanceBootDiskInitializeParamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBootDiskInitializeParams)(nil)).Elem()
}

func (i *instanceBootDiskInitializeParamsPtrType) ToInstanceBootDiskInitializeParamsPtrOutput() InstanceBootDiskInitializeParamsPtrOutput {
	return i.ToInstanceBootDiskInitializeParamsPtrOutputWithContext(context.Background())
}

func (i *instanceBootDiskInitializeParamsPtrType) ToInstanceBootDiskInitializeParamsPtrOutputWithContext(ctx context.Context) InstanceBootDiskInitializeParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBootDiskInitializeParamsPtrOutput)
}

type InstanceBootDiskInitializeParamsOutput struct{ *pulumi.OutputState }

func (InstanceBootDiskInitializeParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBootDiskInitializeParams)(nil)).Elem()
}

func (o InstanceBootDiskInitializeParamsOutput) ToInstanceBootDiskInitializeParamsOutput() InstanceBootDiskInitializeParamsOutput {
	return o
}

func (o InstanceBootDiskInitializeParamsOutput) ToInstanceBootDiskInitializeParamsOutputWithContext(ctx context.Context) InstanceBootDiskInitializeParamsOutput {
	return o
}

func (o InstanceBootDiskInitializeParamsOutput) ToInstanceBootDiskInitializeParamsPtrOutput() InstanceBootDiskInitializeParamsPtrOutput {
	return o.ToInstanceBootDiskInitializeParamsPtrOutputWithContext(context.Background())
}

func (o InstanceBootDiskInitializeParamsOutput) ToInstanceBootDiskInitializeParamsPtrOutputWithContext(ctx context.Context) InstanceBootDiskInitializeParamsPtrOutput {
	return o.ApplyT(func(v InstanceBootDiskInitializeParams) *InstanceBootDiskInitializeParams {
		return &v
	}).(InstanceBootDiskInitializeParamsPtrOutput)
}

// The image from which to initialize this disk. This can be
// one of: the image's `selfLink`, `projects/{project}/global/images/{image}`,
// `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
// `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
// `{project}/{image}`, `{family}`, or `{image}`. If referred by family, the
// images names must include the family name. If they don't, use the
// [compute.Image data source](https://www.terraform.io/docs/providers/google/d/datasource_compute_image.html).
// For instance, the image `centos-6-v20180104` includes its family name `centos-6`.
// These images can be referred by family name here.
func (o InstanceBootDiskInitializeParamsOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceBootDiskInitializeParams) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// A map of key/value label pairs to assign to the instance.
func (o InstanceBootDiskInitializeParamsOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v InstanceBootDiskInitializeParams) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

// The size of the image in gigabytes. If not specified, it
// will inherit the size of its base image.
func (o InstanceBootDiskInitializeParamsOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceBootDiskInitializeParams) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
func (o InstanceBootDiskInitializeParamsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceBootDiskInitializeParams) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InstanceBootDiskInitializeParamsPtrOutput struct{ *pulumi.OutputState }

func (InstanceBootDiskInitializeParamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBootDiskInitializeParams)(nil)).Elem()
}

func (o InstanceBootDiskInitializeParamsPtrOutput) ToInstanceBootDiskInitializeParamsPtrOutput() InstanceBootDiskInitializeParamsPtrOutput {
	return o
}

func (o InstanceBootDiskInitializeParamsPtrOutput) ToInstanceBootDiskInitializeParamsPtrOutputWithContext(ctx context.Context) InstanceBootDiskInitializeParamsPtrOutput {
	return o
}

func (o InstanceBootDiskInitializeParamsPtrOutput) Elem() InstanceBootDiskInitializeParamsOutput {
	return o.ApplyT(func(v *InstanceBootDiskInitializeParams) InstanceBootDiskInitializeParams { return *v }).(InstanceBootDiskInitializeParamsOutput)
}

// The image from which to initialize this disk. This can be
// one of: the image's `selfLink`, `projects/{project}/global/images/{image}`,
// `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
// `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
// `{project}/{image}`, `{family}`, or `{image}`. If referred by family, the
// images names must include the family name. If they don't, use the
// [compute.Image data source](https://www.terraform.io/docs/providers/google/d/datasource_compute_image.html).
// For instance, the image `centos-6-v20180104` includes its family name `centos-6`.
// These images can be referred by family name here.
func (o InstanceBootDiskInitializeParamsPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceBootDiskInitializeParams) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// A map of key/value label pairs to assign to the instance.
func (o InstanceBootDiskInitializeParamsPtrOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v *InstanceBootDiskInitializeParams) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.MapOutput)
}

// The size of the image in gigabytes. If not specified, it
// will inherit the size of its base image.
func (o InstanceBootDiskInitializeParamsPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceBootDiskInitializeParams) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
func (o InstanceBootDiskInitializeParamsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceBootDiskInitializeParams) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type InstanceFromTemplateAttachedDisk struct {
	DeviceName              *string `pulumi:"deviceName"`
	DiskEncryptionKeyRaw    *string `pulumi:"diskEncryptionKeyRaw"`
	DiskEncryptionKeySha256 *string `pulumi:"diskEncryptionKeySha256"`
	KmsKeySelfLink          *string `pulumi:"kmsKeySelfLink"`
	Mode                    *string `pulumi:"mode"`
	Source                  string  `pulumi:"source"`
}

// InstanceFromTemplateAttachedDiskInput is an input type that accepts InstanceFromTemplateAttachedDiskArgs and InstanceFromTemplateAttachedDiskOutput values.
// You can construct a concrete instance of `InstanceFromTemplateAttachedDiskInput` via:
//
// 		 InstanceFromTemplateAttachedDiskArgs{...}
//
type InstanceFromTemplateAttachedDiskInput interface {
	pulumi.Input

	ToInstanceFromTemplateAttachedDiskOutput() InstanceFromTemplateAttachedDiskOutput
	ToInstanceFromTemplateAttachedDiskOutputWithContext(context.Context) InstanceFromTemplateAttachedDiskOutput
}

type InstanceFromTemplateAttachedDiskArgs struct {
	DeviceName              pulumi.StringPtrInput `pulumi:"deviceName"`
	DiskEncryptionKeyRaw    pulumi.StringPtrInput `pulumi:"diskEncryptionKeyRaw"`
	DiskEncryptionKeySha256 pulumi.StringPtrInput `pulumi:"diskEncryptionKeySha256"`
	KmsKeySelfLink          pulumi.StringPtrInput `pulumi:"kmsKeySelfLink"`
	Mode                    pulumi.StringPtrInput `pulumi:"mode"`
	Source                  pulumi.StringInput    `pulumi:"source"`
}

func (InstanceFromTemplateAttachedDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateAttachedDisk)(nil)).Elem()
}

func (i InstanceFromTemplateAttachedDiskArgs) ToInstanceFromTemplateAttachedDiskOutput() InstanceFromTemplateAttachedDiskOutput {
	return i.ToInstanceFromTemplateAttachedDiskOutputWithContext(context.Background())
}

func (i InstanceFromTemplateAttachedDiskArgs) ToInstanceFromTemplateAttachedDiskOutputWithContext(ctx context.Context) InstanceFromTemplateAttachedDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateAttachedDiskOutput)
}

// InstanceFromTemplateAttachedDiskArrayInput is an input type that accepts InstanceFromTemplateAttachedDiskArray and InstanceFromTemplateAttachedDiskArrayOutput values.
// You can construct a concrete instance of `InstanceFromTemplateAttachedDiskArrayInput` via:
//
// 		 InstanceFromTemplateAttachedDiskArray{ InstanceFromTemplateAttachedDiskArgs{...} }
//
type InstanceFromTemplateAttachedDiskArrayInput interface {
	pulumi.Input

	ToInstanceFromTemplateAttachedDiskArrayOutput() InstanceFromTemplateAttachedDiskArrayOutput
	ToInstanceFromTemplateAttachedDiskArrayOutputWithContext(context.Context) InstanceFromTemplateAttachedDiskArrayOutput
}

type InstanceFromTemplateAttachedDiskArray []InstanceFromTemplateAttachedDiskInput

func (InstanceFromTemplateAttachedDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFromTemplateAttachedDisk)(nil)).Elem()
}

func (i InstanceFromTemplateAttachedDiskArray) ToInstanceFromTemplateAttachedDiskArrayOutput() InstanceFromTemplateAttachedDiskArrayOutput {
	return i.ToInstanceFromTemplateAttachedDiskArrayOutputWithContext(context.Background())
}

func (i InstanceFromTemplateAttachedDiskArray) ToInstanceFromTemplateAttachedDiskArrayOutputWithContext(ctx context.Context) InstanceFromTemplateAttachedDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateAttachedDiskArrayOutput)
}

type InstanceFromTemplateAttachedDiskOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateAttachedDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateAttachedDisk)(nil)).Elem()
}

func (o InstanceFromTemplateAttachedDiskOutput) ToInstanceFromTemplateAttachedDiskOutput() InstanceFromTemplateAttachedDiskOutput {
	return o
}

func (o InstanceFromTemplateAttachedDiskOutput) ToInstanceFromTemplateAttachedDiskOutputWithContext(ctx context.Context) InstanceFromTemplateAttachedDiskOutput {
	return o
}

func (o InstanceFromTemplateAttachedDiskOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateAttachedDisk) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateAttachedDiskOutput) DiskEncryptionKeyRaw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateAttachedDisk) *string { return v.DiskEncryptionKeyRaw }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateAttachedDiskOutput) DiskEncryptionKeySha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateAttachedDisk) *string { return v.DiskEncryptionKeySha256 }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateAttachedDiskOutput) KmsKeySelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateAttachedDisk) *string { return v.KmsKeySelfLink }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateAttachedDiskOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateAttachedDisk) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateAttachedDiskOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceFromTemplateAttachedDisk) string { return v.Source }).(pulumi.StringOutput)
}

type InstanceFromTemplateAttachedDiskArrayOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateAttachedDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFromTemplateAttachedDisk)(nil)).Elem()
}

func (o InstanceFromTemplateAttachedDiskArrayOutput) ToInstanceFromTemplateAttachedDiskArrayOutput() InstanceFromTemplateAttachedDiskArrayOutput {
	return o
}

func (o InstanceFromTemplateAttachedDiskArrayOutput) ToInstanceFromTemplateAttachedDiskArrayOutputWithContext(ctx context.Context) InstanceFromTemplateAttachedDiskArrayOutput {
	return o
}

func (o InstanceFromTemplateAttachedDiskArrayOutput) Index(i pulumi.IntInput) InstanceFromTemplateAttachedDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceFromTemplateAttachedDisk {
		return vs[0].([]InstanceFromTemplateAttachedDisk)[vs[1].(int)]
	}).(InstanceFromTemplateAttachedDiskOutput)
}

type InstanceFromTemplateBootDisk struct {
	AutoDelete              *bool                                         `pulumi:"autoDelete"`
	DeviceName              *string                                       `pulumi:"deviceName"`
	DiskEncryptionKeyRaw    *string                                       `pulumi:"diskEncryptionKeyRaw"`
	DiskEncryptionKeySha256 *string                                       `pulumi:"diskEncryptionKeySha256"`
	InitializeParams        *InstanceFromTemplateBootDiskInitializeParams `pulumi:"initializeParams"`
	KmsKeySelfLink          *string                                       `pulumi:"kmsKeySelfLink"`
	Mode                    *string                                       `pulumi:"mode"`
	Source                  *string                                       `pulumi:"source"`
}

// InstanceFromTemplateBootDiskInput is an input type that accepts InstanceFromTemplateBootDiskArgs and InstanceFromTemplateBootDiskOutput values.
// You can construct a concrete instance of `InstanceFromTemplateBootDiskInput` via:
//
// 		 InstanceFromTemplateBootDiskArgs{...}
//
type InstanceFromTemplateBootDiskInput interface {
	pulumi.Input

	ToInstanceFromTemplateBootDiskOutput() InstanceFromTemplateBootDiskOutput
	ToInstanceFromTemplateBootDiskOutputWithContext(context.Context) InstanceFromTemplateBootDiskOutput
}

type InstanceFromTemplateBootDiskArgs struct {
	AutoDelete              pulumi.BoolPtrInput                                  `pulumi:"autoDelete"`
	DeviceName              pulumi.StringPtrInput                                `pulumi:"deviceName"`
	DiskEncryptionKeyRaw    pulumi.StringPtrInput                                `pulumi:"diskEncryptionKeyRaw"`
	DiskEncryptionKeySha256 pulumi.StringPtrInput                                `pulumi:"diskEncryptionKeySha256"`
	InitializeParams        InstanceFromTemplateBootDiskInitializeParamsPtrInput `pulumi:"initializeParams"`
	KmsKeySelfLink          pulumi.StringPtrInput                                `pulumi:"kmsKeySelfLink"`
	Mode                    pulumi.StringPtrInput                                `pulumi:"mode"`
	Source                  pulumi.StringPtrInput                                `pulumi:"source"`
}

func (InstanceFromTemplateBootDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateBootDisk)(nil)).Elem()
}

func (i InstanceFromTemplateBootDiskArgs) ToInstanceFromTemplateBootDiskOutput() InstanceFromTemplateBootDiskOutput {
	return i.ToInstanceFromTemplateBootDiskOutputWithContext(context.Background())
}

func (i InstanceFromTemplateBootDiskArgs) ToInstanceFromTemplateBootDiskOutputWithContext(ctx context.Context) InstanceFromTemplateBootDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateBootDiskOutput)
}

func (i InstanceFromTemplateBootDiskArgs) ToInstanceFromTemplateBootDiskPtrOutput() InstanceFromTemplateBootDiskPtrOutput {
	return i.ToInstanceFromTemplateBootDiskPtrOutputWithContext(context.Background())
}

func (i InstanceFromTemplateBootDiskArgs) ToInstanceFromTemplateBootDiskPtrOutputWithContext(ctx context.Context) InstanceFromTemplateBootDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateBootDiskOutput).ToInstanceFromTemplateBootDiskPtrOutputWithContext(ctx)
}

// InstanceFromTemplateBootDiskPtrInput is an input type that accepts InstanceFromTemplateBootDiskArgs, InstanceFromTemplateBootDiskPtr and InstanceFromTemplateBootDiskPtrOutput values.
// You can construct a concrete instance of `InstanceFromTemplateBootDiskPtrInput` via:
//
// 		 InstanceFromTemplateBootDiskArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceFromTemplateBootDiskPtrInput interface {
	pulumi.Input

	ToInstanceFromTemplateBootDiskPtrOutput() InstanceFromTemplateBootDiskPtrOutput
	ToInstanceFromTemplateBootDiskPtrOutputWithContext(context.Context) InstanceFromTemplateBootDiskPtrOutput
}

type instanceFromTemplateBootDiskPtrType InstanceFromTemplateBootDiskArgs

func InstanceFromTemplateBootDiskPtr(v *InstanceFromTemplateBootDiskArgs) InstanceFromTemplateBootDiskPtrInput {
	return (*instanceFromTemplateBootDiskPtrType)(v)
}

func (*instanceFromTemplateBootDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFromTemplateBootDisk)(nil)).Elem()
}

func (i *instanceFromTemplateBootDiskPtrType) ToInstanceFromTemplateBootDiskPtrOutput() InstanceFromTemplateBootDiskPtrOutput {
	return i.ToInstanceFromTemplateBootDiskPtrOutputWithContext(context.Background())
}

func (i *instanceFromTemplateBootDiskPtrType) ToInstanceFromTemplateBootDiskPtrOutputWithContext(ctx context.Context) InstanceFromTemplateBootDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateBootDiskPtrOutput)
}

type InstanceFromTemplateBootDiskOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateBootDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateBootDisk)(nil)).Elem()
}

func (o InstanceFromTemplateBootDiskOutput) ToInstanceFromTemplateBootDiskOutput() InstanceFromTemplateBootDiskOutput {
	return o
}

func (o InstanceFromTemplateBootDiskOutput) ToInstanceFromTemplateBootDiskOutputWithContext(ctx context.Context) InstanceFromTemplateBootDiskOutput {
	return o
}

func (o InstanceFromTemplateBootDiskOutput) ToInstanceFromTemplateBootDiskPtrOutput() InstanceFromTemplateBootDiskPtrOutput {
	return o.ToInstanceFromTemplateBootDiskPtrOutputWithContext(context.Background())
}

func (o InstanceFromTemplateBootDiskOutput) ToInstanceFromTemplateBootDiskPtrOutputWithContext(ctx context.Context) InstanceFromTemplateBootDiskPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateBootDisk) *InstanceFromTemplateBootDisk {
		return &v
	}).(InstanceFromTemplateBootDiskPtrOutput)
}
func (o InstanceFromTemplateBootDiskOutput) AutoDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateBootDisk) *bool { return v.AutoDelete }).(pulumi.BoolPtrOutput)
}

func (o InstanceFromTemplateBootDiskOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateBootDisk) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateBootDiskOutput) DiskEncryptionKeyRaw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateBootDisk) *string { return v.DiskEncryptionKeyRaw }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateBootDiskOutput) DiskEncryptionKeySha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateBootDisk) *string { return v.DiskEncryptionKeySha256 }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateBootDiskOutput) InitializeParams() InstanceFromTemplateBootDiskInitializeParamsPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateBootDisk) *InstanceFromTemplateBootDiskInitializeParams {
		return v.InitializeParams
	}).(InstanceFromTemplateBootDiskInitializeParamsPtrOutput)
}

func (o InstanceFromTemplateBootDiskOutput) KmsKeySelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateBootDisk) *string { return v.KmsKeySelfLink }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateBootDiskOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateBootDisk) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateBootDiskOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateBootDisk) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type InstanceFromTemplateBootDiskPtrOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateBootDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFromTemplateBootDisk)(nil)).Elem()
}

func (o InstanceFromTemplateBootDiskPtrOutput) ToInstanceFromTemplateBootDiskPtrOutput() InstanceFromTemplateBootDiskPtrOutput {
	return o
}

func (o InstanceFromTemplateBootDiskPtrOutput) ToInstanceFromTemplateBootDiskPtrOutputWithContext(ctx context.Context) InstanceFromTemplateBootDiskPtrOutput {
	return o
}

func (o InstanceFromTemplateBootDiskPtrOutput) Elem() InstanceFromTemplateBootDiskOutput {
	return o.ApplyT(func(v *InstanceFromTemplateBootDisk) InstanceFromTemplateBootDisk { return *v }).(InstanceFromTemplateBootDiskOutput)
}

func (o InstanceFromTemplateBootDiskPtrOutput) AutoDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateBootDisk) *bool {
		if v == nil {
			return nil
		}
		return v.AutoDelete
	}).(pulumi.BoolPtrOutput)
}

func (o InstanceFromTemplateBootDiskPtrOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateBootDisk) *string {
		if v == nil {
			return nil
		}
		return v.DeviceName
	}).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateBootDiskPtrOutput) DiskEncryptionKeyRaw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateBootDisk) *string {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionKeyRaw
	}).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateBootDiskPtrOutput) DiskEncryptionKeySha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateBootDisk) *string {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionKeySha256
	}).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateBootDiskPtrOutput) InitializeParams() InstanceFromTemplateBootDiskInitializeParamsPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateBootDisk) *InstanceFromTemplateBootDiskInitializeParams {
		if v == nil {
			return nil
		}
		return v.InitializeParams
	}).(InstanceFromTemplateBootDiskInitializeParamsPtrOutput)
}

func (o InstanceFromTemplateBootDiskPtrOutput) KmsKeySelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateBootDisk) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeySelfLink
	}).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateBootDiskPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateBootDisk) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateBootDiskPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateBootDisk) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

type InstanceFromTemplateBootDiskInitializeParams struct {
	Image  *string                `pulumi:"image"`
	Labels map[string]interface{} `pulumi:"labels"`
	Size   *int                   `pulumi:"size"`
	Type   *string                `pulumi:"type"`
}

// InstanceFromTemplateBootDiskInitializeParamsInput is an input type that accepts InstanceFromTemplateBootDiskInitializeParamsArgs and InstanceFromTemplateBootDiskInitializeParamsOutput values.
// You can construct a concrete instance of `InstanceFromTemplateBootDiskInitializeParamsInput` via:
//
// 		 InstanceFromTemplateBootDiskInitializeParamsArgs{...}
//
type InstanceFromTemplateBootDiskInitializeParamsInput interface {
	pulumi.Input

	ToInstanceFromTemplateBootDiskInitializeParamsOutput() InstanceFromTemplateBootDiskInitializeParamsOutput
	ToInstanceFromTemplateBootDiskInitializeParamsOutputWithContext(context.Context) InstanceFromTemplateBootDiskInitializeParamsOutput
}

type InstanceFromTemplateBootDiskInitializeParamsArgs struct {
	Image  pulumi.StringPtrInput `pulumi:"image"`
	Labels pulumi.MapInput       `pulumi:"labels"`
	Size   pulumi.IntPtrInput    `pulumi:"size"`
	Type   pulumi.StringPtrInput `pulumi:"type"`
}

func (InstanceFromTemplateBootDiskInitializeParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateBootDiskInitializeParams)(nil)).Elem()
}

func (i InstanceFromTemplateBootDiskInitializeParamsArgs) ToInstanceFromTemplateBootDiskInitializeParamsOutput() InstanceFromTemplateBootDiskInitializeParamsOutput {
	return i.ToInstanceFromTemplateBootDiskInitializeParamsOutputWithContext(context.Background())
}

func (i InstanceFromTemplateBootDiskInitializeParamsArgs) ToInstanceFromTemplateBootDiskInitializeParamsOutputWithContext(ctx context.Context) InstanceFromTemplateBootDiskInitializeParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateBootDiskInitializeParamsOutput)
}

func (i InstanceFromTemplateBootDiskInitializeParamsArgs) ToInstanceFromTemplateBootDiskInitializeParamsPtrOutput() InstanceFromTemplateBootDiskInitializeParamsPtrOutput {
	return i.ToInstanceFromTemplateBootDiskInitializeParamsPtrOutputWithContext(context.Background())
}

func (i InstanceFromTemplateBootDiskInitializeParamsArgs) ToInstanceFromTemplateBootDiskInitializeParamsPtrOutputWithContext(ctx context.Context) InstanceFromTemplateBootDiskInitializeParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateBootDiskInitializeParamsOutput).ToInstanceFromTemplateBootDiskInitializeParamsPtrOutputWithContext(ctx)
}

// InstanceFromTemplateBootDiskInitializeParamsPtrInput is an input type that accepts InstanceFromTemplateBootDiskInitializeParamsArgs, InstanceFromTemplateBootDiskInitializeParamsPtr and InstanceFromTemplateBootDiskInitializeParamsPtrOutput values.
// You can construct a concrete instance of `InstanceFromTemplateBootDiskInitializeParamsPtrInput` via:
//
// 		 InstanceFromTemplateBootDiskInitializeParamsArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceFromTemplateBootDiskInitializeParamsPtrInput interface {
	pulumi.Input

	ToInstanceFromTemplateBootDiskInitializeParamsPtrOutput() InstanceFromTemplateBootDiskInitializeParamsPtrOutput
	ToInstanceFromTemplateBootDiskInitializeParamsPtrOutputWithContext(context.Context) InstanceFromTemplateBootDiskInitializeParamsPtrOutput
}

type instanceFromTemplateBootDiskInitializeParamsPtrType InstanceFromTemplateBootDiskInitializeParamsArgs

func InstanceFromTemplateBootDiskInitializeParamsPtr(v *InstanceFromTemplateBootDiskInitializeParamsArgs) InstanceFromTemplateBootDiskInitializeParamsPtrInput {
	return (*instanceFromTemplateBootDiskInitializeParamsPtrType)(v)
}

func (*instanceFromTemplateBootDiskInitializeParamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFromTemplateBootDiskInitializeParams)(nil)).Elem()
}

func (i *instanceFromTemplateBootDiskInitializeParamsPtrType) ToInstanceFromTemplateBootDiskInitializeParamsPtrOutput() InstanceFromTemplateBootDiskInitializeParamsPtrOutput {
	return i.ToInstanceFromTemplateBootDiskInitializeParamsPtrOutputWithContext(context.Background())
}

func (i *instanceFromTemplateBootDiskInitializeParamsPtrType) ToInstanceFromTemplateBootDiskInitializeParamsPtrOutputWithContext(ctx context.Context) InstanceFromTemplateBootDiskInitializeParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateBootDiskInitializeParamsPtrOutput)
}

type InstanceFromTemplateBootDiskInitializeParamsOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateBootDiskInitializeParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateBootDiskInitializeParams)(nil)).Elem()
}

func (o InstanceFromTemplateBootDiskInitializeParamsOutput) ToInstanceFromTemplateBootDiskInitializeParamsOutput() InstanceFromTemplateBootDiskInitializeParamsOutput {
	return o
}

func (o InstanceFromTemplateBootDiskInitializeParamsOutput) ToInstanceFromTemplateBootDiskInitializeParamsOutputWithContext(ctx context.Context) InstanceFromTemplateBootDiskInitializeParamsOutput {
	return o
}

func (o InstanceFromTemplateBootDiskInitializeParamsOutput) ToInstanceFromTemplateBootDiskInitializeParamsPtrOutput() InstanceFromTemplateBootDiskInitializeParamsPtrOutput {
	return o.ToInstanceFromTemplateBootDiskInitializeParamsPtrOutputWithContext(context.Background())
}

func (o InstanceFromTemplateBootDiskInitializeParamsOutput) ToInstanceFromTemplateBootDiskInitializeParamsPtrOutputWithContext(ctx context.Context) InstanceFromTemplateBootDiskInitializeParamsPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateBootDiskInitializeParams) *InstanceFromTemplateBootDiskInitializeParams {
		return &v
	}).(InstanceFromTemplateBootDiskInitializeParamsPtrOutput)
}
func (o InstanceFromTemplateBootDiskInitializeParamsOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateBootDiskInitializeParams) *string { return v.Image }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateBootDiskInitializeParamsOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v InstanceFromTemplateBootDiskInitializeParams) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

func (o InstanceFromTemplateBootDiskInitializeParamsOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateBootDiskInitializeParams) *int { return v.Size }).(pulumi.IntPtrOutput)
}

func (o InstanceFromTemplateBootDiskInitializeParamsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateBootDiskInitializeParams) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InstanceFromTemplateBootDiskInitializeParamsPtrOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateBootDiskInitializeParamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFromTemplateBootDiskInitializeParams)(nil)).Elem()
}

func (o InstanceFromTemplateBootDiskInitializeParamsPtrOutput) ToInstanceFromTemplateBootDiskInitializeParamsPtrOutput() InstanceFromTemplateBootDiskInitializeParamsPtrOutput {
	return o
}

func (o InstanceFromTemplateBootDiskInitializeParamsPtrOutput) ToInstanceFromTemplateBootDiskInitializeParamsPtrOutputWithContext(ctx context.Context) InstanceFromTemplateBootDiskInitializeParamsPtrOutput {
	return o
}

func (o InstanceFromTemplateBootDiskInitializeParamsPtrOutput) Elem() InstanceFromTemplateBootDiskInitializeParamsOutput {
	return o.ApplyT(func(v *InstanceFromTemplateBootDiskInitializeParams) InstanceFromTemplateBootDiskInitializeParams {
		return *v
	}).(InstanceFromTemplateBootDiskInitializeParamsOutput)
}

func (o InstanceFromTemplateBootDiskInitializeParamsPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateBootDiskInitializeParams) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateBootDiskInitializeParamsPtrOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v *InstanceFromTemplateBootDiskInitializeParams) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.MapOutput)
}

func (o InstanceFromTemplateBootDiskInitializeParamsPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateBootDiskInitializeParams) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

func (o InstanceFromTemplateBootDiskInitializeParamsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateBootDiskInitializeParams) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type InstanceFromTemplateGuestAccelerator struct {
	Count int    `pulumi:"count"`
	Type  string `pulumi:"type"`
}

// InstanceFromTemplateGuestAcceleratorInput is an input type that accepts InstanceFromTemplateGuestAcceleratorArgs and InstanceFromTemplateGuestAcceleratorOutput values.
// You can construct a concrete instance of `InstanceFromTemplateGuestAcceleratorInput` via:
//
// 		 InstanceFromTemplateGuestAcceleratorArgs{...}
//
type InstanceFromTemplateGuestAcceleratorInput interface {
	pulumi.Input

	ToInstanceFromTemplateGuestAcceleratorOutput() InstanceFromTemplateGuestAcceleratorOutput
	ToInstanceFromTemplateGuestAcceleratorOutputWithContext(context.Context) InstanceFromTemplateGuestAcceleratorOutput
}

type InstanceFromTemplateGuestAcceleratorArgs struct {
	Count pulumi.IntInput    `pulumi:"count"`
	Type  pulumi.StringInput `pulumi:"type"`
}

func (InstanceFromTemplateGuestAcceleratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateGuestAccelerator)(nil)).Elem()
}

func (i InstanceFromTemplateGuestAcceleratorArgs) ToInstanceFromTemplateGuestAcceleratorOutput() InstanceFromTemplateGuestAcceleratorOutput {
	return i.ToInstanceFromTemplateGuestAcceleratorOutputWithContext(context.Background())
}

func (i InstanceFromTemplateGuestAcceleratorArgs) ToInstanceFromTemplateGuestAcceleratorOutputWithContext(ctx context.Context) InstanceFromTemplateGuestAcceleratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateGuestAcceleratorOutput)
}

// InstanceFromTemplateGuestAcceleratorArrayInput is an input type that accepts InstanceFromTemplateGuestAcceleratorArray and InstanceFromTemplateGuestAcceleratorArrayOutput values.
// You can construct a concrete instance of `InstanceFromTemplateGuestAcceleratorArrayInput` via:
//
// 		 InstanceFromTemplateGuestAcceleratorArray{ InstanceFromTemplateGuestAcceleratorArgs{...} }
//
type InstanceFromTemplateGuestAcceleratorArrayInput interface {
	pulumi.Input

	ToInstanceFromTemplateGuestAcceleratorArrayOutput() InstanceFromTemplateGuestAcceleratorArrayOutput
	ToInstanceFromTemplateGuestAcceleratorArrayOutputWithContext(context.Context) InstanceFromTemplateGuestAcceleratorArrayOutput
}

type InstanceFromTemplateGuestAcceleratorArray []InstanceFromTemplateGuestAcceleratorInput

func (InstanceFromTemplateGuestAcceleratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFromTemplateGuestAccelerator)(nil)).Elem()
}

func (i InstanceFromTemplateGuestAcceleratorArray) ToInstanceFromTemplateGuestAcceleratorArrayOutput() InstanceFromTemplateGuestAcceleratorArrayOutput {
	return i.ToInstanceFromTemplateGuestAcceleratorArrayOutputWithContext(context.Background())
}

func (i InstanceFromTemplateGuestAcceleratorArray) ToInstanceFromTemplateGuestAcceleratorArrayOutputWithContext(ctx context.Context) InstanceFromTemplateGuestAcceleratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateGuestAcceleratorArrayOutput)
}

type InstanceFromTemplateGuestAcceleratorOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateGuestAcceleratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateGuestAccelerator)(nil)).Elem()
}

func (o InstanceFromTemplateGuestAcceleratorOutput) ToInstanceFromTemplateGuestAcceleratorOutput() InstanceFromTemplateGuestAcceleratorOutput {
	return o
}

func (o InstanceFromTemplateGuestAcceleratorOutput) ToInstanceFromTemplateGuestAcceleratorOutputWithContext(ctx context.Context) InstanceFromTemplateGuestAcceleratorOutput {
	return o
}

func (o InstanceFromTemplateGuestAcceleratorOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceFromTemplateGuestAccelerator) int { return v.Count }).(pulumi.IntOutput)
}

func (o InstanceFromTemplateGuestAcceleratorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceFromTemplateGuestAccelerator) string { return v.Type }).(pulumi.StringOutput)
}

type InstanceFromTemplateGuestAcceleratorArrayOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateGuestAcceleratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFromTemplateGuestAccelerator)(nil)).Elem()
}

func (o InstanceFromTemplateGuestAcceleratorArrayOutput) ToInstanceFromTemplateGuestAcceleratorArrayOutput() InstanceFromTemplateGuestAcceleratorArrayOutput {
	return o
}

func (o InstanceFromTemplateGuestAcceleratorArrayOutput) ToInstanceFromTemplateGuestAcceleratorArrayOutputWithContext(ctx context.Context) InstanceFromTemplateGuestAcceleratorArrayOutput {
	return o
}

func (o InstanceFromTemplateGuestAcceleratorArrayOutput) Index(i pulumi.IntInput) InstanceFromTemplateGuestAcceleratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceFromTemplateGuestAccelerator {
		return vs[0].([]InstanceFromTemplateGuestAccelerator)[vs[1].(int)]
	}).(InstanceFromTemplateGuestAcceleratorOutput)
}

type InstanceFromTemplateNetworkInterface struct {
	AccessConfigs []InstanceFromTemplateNetworkInterfaceAccessConfig `pulumi:"accessConfigs"`
	AliasIpRanges []InstanceFromTemplateNetworkInterfaceAliasIpRange `pulumi:"aliasIpRanges"`
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name              *string `pulumi:"name"`
	Network           *string `pulumi:"network"`
	NetworkIp         *string `pulumi:"networkIp"`
	Subnetwork        *string `pulumi:"subnetwork"`
	SubnetworkProject *string `pulumi:"subnetworkProject"`
}

// InstanceFromTemplateNetworkInterfaceInput is an input type that accepts InstanceFromTemplateNetworkInterfaceArgs and InstanceFromTemplateNetworkInterfaceOutput values.
// You can construct a concrete instance of `InstanceFromTemplateNetworkInterfaceInput` via:
//
// 		 InstanceFromTemplateNetworkInterfaceArgs{...}
//
type InstanceFromTemplateNetworkInterfaceInput interface {
	pulumi.Input

	ToInstanceFromTemplateNetworkInterfaceOutput() InstanceFromTemplateNetworkInterfaceOutput
	ToInstanceFromTemplateNetworkInterfaceOutputWithContext(context.Context) InstanceFromTemplateNetworkInterfaceOutput
}

type InstanceFromTemplateNetworkInterfaceArgs struct {
	AccessConfigs InstanceFromTemplateNetworkInterfaceAccessConfigArrayInput `pulumi:"accessConfigs"`
	AliasIpRanges InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayInput `pulumi:"aliasIpRanges"`
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name              pulumi.StringPtrInput `pulumi:"name"`
	Network           pulumi.StringPtrInput `pulumi:"network"`
	NetworkIp         pulumi.StringPtrInput `pulumi:"networkIp"`
	Subnetwork        pulumi.StringPtrInput `pulumi:"subnetwork"`
	SubnetworkProject pulumi.StringPtrInput `pulumi:"subnetworkProject"`
}

func (InstanceFromTemplateNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateNetworkInterface)(nil)).Elem()
}

func (i InstanceFromTemplateNetworkInterfaceArgs) ToInstanceFromTemplateNetworkInterfaceOutput() InstanceFromTemplateNetworkInterfaceOutput {
	return i.ToInstanceFromTemplateNetworkInterfaceOutputWithContext(context.Background())
}

func (i InstanceFromTemplateNetworkInterfaceArgs) ToInstanceFromTemplateNetworkInterfaceOutputWithContext(ctx context.Context) InstanceFromTemplateNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateNetworkInterfaceOutput)
}

// InstanceFromTemplateNetworkInterfaceArrayInput is an input type that accepts InstanceFromTemplateNetworkInterfaceArray and InstanceFromTemplateNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `InstanceFromTemplateNetworkInterfaceArrayInput` via:
//
// 		 InstanceFromTemplateNetworkInterfaceArray{ InstanceFromTemplateNetworkInterfaceArgs{...} }
//
type InstanceFromTemplateNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToInstanceFromTemplateNetworkInterfaceArrayOutput() InstanceFromTemplateNetworkInterfaceArrayOutput
	ToInstanceFromTemplateNetworkInterfaceArrayOutputWithContext(context.Context) InstanceFromTemplateNetworkInterfaceArrayOutput
}

type InstanceFromTemplateNetworkInterfaceArray []InstanceFromTemplateNetworkInterfaceInput

func (InstanceFromTemplateNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFromTemplateNetworkInterface)(nil)).Elem()
}

func (i InstanceFromTemplateNetworkInterfaceArray) ToInstanceFromTemplateNetworkInterfaceArrayOutput() InstanceFromTemplateNetworkInterfaceArrayOutput {
	return i.ToInstanceFromTemplateNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i InstanceFromTemplateNetworkInterfaceArray) ToInstanceFromTemplateNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstanceFromTemplateNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateNetworkInterfaceArrayOutput)
}

type InstanceFromTemplateNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateNetworkInterface)(nil)).Elem()
}

func (o InstanceFromTemplateNetworkInterfaceOutput) ToInstanceFromTemplateNetworkInterfaceOutput() InstanceFromTemplateNetworkInterfaceOutput {
	return o
}

func (o InstanceFromTemplateNetworkInterfaceOutput) ToInstanceFromTemplateNetworkInterfaceOutputWithContext(ctx context.Context) InstanceFromTemplateNetworkInterfaceOutput {
	return o
}

func (o InstanceFromTemplateNetworkInterfaceOutput) AccessConfigs() InstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput {
	return o.ApplyT(func(v InstanceFromTemplateNetworkInterface) []InstanceFromTemplateNetworkInterfaceAccessConfig {
		return v.AccessConfigs
	}).(InstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput)
}

func (o InstanceFromTemplateNetworkInterfaceOutput) AliasIpRanges() InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput {
	return o.ApplyT(func(v InstanceFromTemplateNetworkInterface) []InstanceFromTemplateNetworkInterfaceAliasIpRange {
		return v.AliasIpRanges
	}).(InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput)
}

// A unique name for the resource, required by GCE.
// Changing this forces a new resource to be created.
func (o InstanceFromTemplateNetworkInterfaceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateNetworkInterface) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateNetworkInterfaceOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateNetworkInterface) *string { return v.Network }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateNetworkInterfaceOutput) NetworkIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateNetworkInterface) *string { return v.NetworkIp }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateNetworkInterfaceOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateNetworkInterface) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateNetworkInterfaceOutput) SubnetworkProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateNetworkInterface) *string { return v.SubnetworkProject }).(pulumi.StringPtrOutput)
}

type InstanceFromTemplateNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFromTemplateNetworkInterface)(nil)).Elem()
}

func (o InstanceFromTemplateNetworkInterfaceArrayOutput) ToInstanceFromTemplateNetworkInterfaceArrayOutput() InstanceFromTemplateNetworkInterfaceArrayOutput {
	return o
}

func (o InstanceFromTemplateNetworkInterfaceArrayOutput) ToInstanceFromTemplateNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstanceFromTemplateNetworkInterfaceArrayOutput {
	return o
}

func (o InstanceFromTemplateNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) InstanceFromTemplateNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceFromTemplateNetworkInterface {
		return vs[0].([]InstanceFromTemplateNetworkInterface)[vs[1].(int)]
	}).(InstanceFromTemplateNetworkInterfaceOutput)
}

type InstanceFromTemplateNetworkInterfaceAccessConfig struct {
	NatIp               *string `pulumi:"natIp"`
	NetworkTier         *string `pulumi:"networkTier"`
	PublicPtrDomainName *string `pulumi:"publicPtrDomainName"`
}

// InstanceFromTemplateNetworkInterfaceAccessConfigInput is an input type that accepts InstanceFromTemplateNetworkInterfaceAccessConfigArgs and InstanceFromTemplateNetworkInterfaceAccessConfigOutput values.
// You can construct a concrete instance of `InstanceFromTemplateNetworkInterfaceAccessConfigInput` via:
//
// 		 InstanceFromTemplateNetworkInterfaceAccessConfigArgs{...}
//
type InstanceFromTemplateNetworkInterfaceAccessConfigInput interface {
	pulumi.Input

	ToInstanceFromTemplateNetworkInterfaceAccessConfigOutput() InstanceFromTemplateNetworkInterfaceAccessConfigOutput
	ToInstanceFromTemplateNetworkInterfaceAccessConfigOutputWithContext(context.Context) InstanceFromTemplateNetworkInterfaceAccessConfigOutput
}

type InstanceFromTemplateNetworkInterfaceAccessConfigArgs struct {
	NatIp               pulumi.StringPtrInput `pulumi:"natIp"`
	NetworkTier         pulumi.StringPtrInput `pulumi:"networkTier"`
	PublicPtrDomainName pulumi.StringPtrInput `pulumi:"publicPtrDomainName"`
}

func (InstanceFromTemplateNetworkInterfaceAccessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateNetworkInterfaceAccessConfig)(nil)).Elem()
}

func (i InstanceFromTemplateNetworkInterfaceAccessConfigArgs) ToInstanceFromTemplateNetworkInterfaceAccessConfigOutput() InstanceFromTemplateNetworkInterfaceAccessConfigOutput {
	return i.ToInstanceFromTemplateNetworkInterfaceAccessConfigOutputWithContext(context.Background())
}

func (i InstanceFromTemplateNetworkInterfaceAccessConfigArgs) ToInstanceFromTemplateNetworkInterfaceAccessConfigOutputWithContext(ctx context.Context) InstanceFromTemplateNetworkInterfaceAccessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateNetworkInterfaceAccessConfigOutput)
}

// InstanceFromTemplateNetworkInterfaceAccessConfigArrayInput is an input type that accepts InstanceFromTemplateNetworkInterfaceAccessConfigArray and InstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput values.
// You can construct a concrete instance of `InstanceFromTemplateNetworkInterfaceAccessConfigArrayInput` via:
//
// 		 InstanceFromTemplateNetworkInterfaceAccessConfigArray{ InstanceFromTemplateNetworkInterfaceAccessConfigArgs{...} }
//
type InstanceFromTemplateNetworkInterfaceAccessConfigArrayInput interface {
	pulumi.Input

	ToInstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput() InstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput
	ToInstanceFromTemplateNetworkInterfaceAccessConfigArrayOutputWithContext(context.Context) InstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput
}

type InstanceFromTemplateNetworkInterfaceAccessConfigArray []InstanceFromTemplateNetworkInterfaceAccessConfigInput

func (InstanceFromTemplateNetworkInterfaceAccessConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFromTemplateNetworkInterfaceAccessConfig)(nil)).Elem()
}

func (i InstanceFromTemplateNetworkInterfaceAccessConfigArray) ToInstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput() InstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput {
	return i.ToInstanceFromTemplateNetworkInterfaceAccessConfigArrayOutputWithContext(context.Background())
}

func (i InstanceFromTemplateNetworkInterfaceAccessConfigArray) ToInstanceFromTemplateNetworkInterfaceAccessConfigArrayOutputWithContext(ctx context.Context) InstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput)
}

type InstanceFromTemplateNetworkInterfaceAccessConfigOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateNetworkInterfaceAccessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateNetworkInterfaceAccessConfig)(nil)).Elem()
}

func (o InstanceFromTemplateNetworkInterfaceAccessConfigOutput) ToInstanceFromTemplateNetworkInterfaceAccessConfigOutput() InstanceFromTemplateNetworkInterfaceAccessConfigOutput {
	return o
}

func (o InstanceFromTemplateNetworkInterfaceAccessConfigOutput) ToInstanceFromTemplateNetworkInterfaceAccessConfigOutputWithContext(ctx context.Context) InstanceFromTemplateNetworkInterfaceAccessConfigOutput {
	return o
}

func (o InstanceFromTemplateNetworkInterfaceAccessConfigOutput) NatIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateNetworkInterfaceAccessConfig) *string { return v.NatIp }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateNetworkInterfaceAccessConfigOutput) NetworkTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateNetworkInterfaceAccessConfig) *string { return v.NetworkTier }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateNetworkInterfaceAccessConfigOutput) PublicPtrDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateNetworkInterfaceAccessConfig) *string { return v.PublicPtrDomainName }).(pulumi.StringPtrOutput)
}

type InstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFromTemplateNetworkInterfaceAccessConfig)(nil)).Elem()
}

func (o InstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput) ToInstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput() InstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput {
	return o
}

func (o InstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput) ToInstanceFromTemplateNetworkInterfaceAccessConfigArrayOutputWithContext(ctx context.Context) InstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput {
	return o
}

func (o InstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput) Index(i pulumi.IntInput) InstanceFromTemplateNetworkInterfaceAccessConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceFromTemplateNetworkInterfaceAccessConfig {
		return vs[0].([]InstanceFromTemplateNetworkInterfaceAccessConfig)[vs[1].(int)]
	}).(InstanceFromTemplateNetworkInterfaceAccessConfigOutput)
}

type InstanceFromTemplateNetworkInterfaceAliasIpRange struct {
	IpCidrRange         string  `pulumi:"ipCidrRange"`
	SubnetworkRangeName *string `pulumi:"subnetworkRangeName"`
}

// InstanceFromTemplateNetworkInterfaceAliasIpRangeInput is an input type that accepts InstanceFromTemplateNetworkInterfaceAliasIpRangeArgs and InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput values.
// You can construct a concrete instance of `InstanceFromTemplateNetworkInterfaceAliasIpRangeInput` via:
//
// 		 InstanceFromTemplateNetworkInterfaceAliasIpRangeArgs{...}
//
type InstanceFromTemplateNetworkInterfaceAliasIpRangeInput interface {
	pulumi.Input

	ToInstanceFromTemplateNetworkInterfaceAliasIpRangeOutput() InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput
	ToInstanceFromTemplateNetworkInterfaceAliasIpRangeOutputWithContext(context.Context) InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput
}

type InstanceFromTemplateNetworkInterfaceAliasIpRangeArgs struct {
	IpCidrRange         pulumi.StringInput    `pulumi:"ipCidrRange"`
	SubnetworkRangeName pulumi.StringPtrInput `pulumi:"subnetworkRangeName"`
}

func (InstanceFromTemplateNetworkInterfaceAliasIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateNetworkInterfaceAliasIpRange)(nil)).Elem()
}

func (i InstanceFromTemplateNetworkInterfaceAliasIpRangeArgs) ToInstanceFromTemplateNetworkInterfaceAliasIpRangeOutput() InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput {
	return i.ToInstanceFromTemplateNetworkInterfaceAliasIpRangeOutputWithContext(context.Background())
}

func (i InstanceFromTemplateNetworkInterfaceAliasIpRangeArgs) ToInstanceFromTemplateNetworkInterfaceAliasIpRangeOutputWithContext(ctx context.Context) InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput)
}

// InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayInput is an input type that accepts InstanceFromTemplateNetworkInterfaceAliasIpRangeArray and InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput values.
// You can construct a concrete instance of `InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayInput` via:
//
// 		 InstanceFromTemplateNetworkInterfaceAliasIpRangeArray{ InstanceFromTemplateNetworkInterfaceAliasIpRangeArgs{...} }
//
type InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayInput interface {
	pulumi.Input

	ToInstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput() InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput
	ToInstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutputWithContext(context.Context) InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput
}

type InstanceFromTemplateNetworkInterfaceAliasIpRangeArray []InstanceFromTemplateNetworkInterfaceAliasIpRangeInput

func (InstanceFromTemplateNetworkInterfaceAliasIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFromTemplateNetworkInterfaceAliasIpRange)(nil)).Elem()
}

func (i InstanceFromTemplateNetworkInterfaceAliasIpRangeArray) ToInstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput() InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput {
	return i.ToInstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutputWithContext(context.Background())
}

func (i InstanceFromTemplateNetworkInterfaceAliasIpRangeArray) ToInstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutputWithContext(ctx context.Context) InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput)
}

type InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateNetworkInterfaceAliasIpRange)(nil)).Elem()
}

func (o InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput) ToInstanceFromTemplateNetworkInterfaceAliasIpRangeOutput() InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput {
	return o
}

func (o InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput) ToInstanceFromTemplateNetworkInterfaceAliasIpRangeOutputWithContext(ctx context.Context) InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput {
	return o
}

func (o InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput) IpCidrRange() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceFromTemplateNetworkInterfaceAliasIpRange) string { return v.IpCidrRange }).(pulumi.StringOutput)
}

func (o InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput) SubnetworkRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateNetworkInterfaceAliasIpRange) *string { return v.SubnetworkRangeName }).(pulumi.StringPtrOutput)
}

type InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFromTemplateNetworkInterfaceAliasIpRange)(nil)).Elem()
}

func (o InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput) ToInstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput() InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput {
	return o
}

func (o InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput) ToInstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutputWithContext(ctx context.Context) InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput {
	return o
}

func (o InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput) Index(i pulumi.IntInput) InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceFromTemplateNetworkInterfaceAliasIpRange {
		return vs[0].([]InstanceFromTemplateNetworkInterfaceAliasIpRange)[vs[1].(int)]
	}).(InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput)
}

type InstanceFromTemplateScheduling struct {
	AutomaticRestart  *bool                                        `pulumi:"automaticRestart"`
	NodeAffinities    []InstanceFromTemplateSchedulingNodeAffinity `pulumi:"nodeAffinities"`
	OnHostMaintenance *string                                      `pulumi:"onHostMaintenance"`
	Preemptible       *bool                                        `pulumi:"preemptible"`
}

// InstanceFromTemplateSchedulingInput is an input type that accepts InstanceFromTemplateSchedulingArgs and InstanceFromTemplateSchedulingOutput values.
// You can construct a concrete instance of `InstanceFromTemplateSchedulingInput` via:
//
// 		 InstanceFromTemplateSchedulingArgs{...}
//
type InstanceFromTemplateSchedulingInput interface {
	pulumi.Input

	ToInstanceFromTemplateSchedulingOutput() InstanceFromTemplateSchedulingOutput
	ToInstanceFromTemplateSchedulingOutputWithContext(context.Context) InstanceFromTemplateSchedulingOutput
}

type InstanceFromTemplateSchedulingArgs struct {
	AutomaticRestart  pulumi.BoolPtrInput                                  `pulumi:"automaticRestart"`
	NodeAffinities    InstanceFromTemplateSchedulingNodeAffinityArrayInput `pulumi:"nodeAffinities"`
	OnHostMaintenance pulumi.StringPtrInput                                `pulumi:"onHostMaintenance"`
	Preemptible       pulumi.BoolPtrInput                                  `pulumi:"preemptible"`
}

func (InstanceFromTemplateSchedulingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateScheduling)(nil)).Elem()
}

func (i InstanceFromTemplateSchedulingArgs) ToInstanceFromTemplateSchedulingOutput() InstanceFromTemplateSchedulingOutput {
	return i.ToInstanceFromTemplateSchedulingOutputWithContext(context.Background())
}

func (i InstanceFromTemplateSchedulingArgs) ToInstanceFromTemplateSchedulingOutputWithContext(ctx context.Context) InstanceFromTemplateSchedulingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateSchedulingOutput)
}

func (i InstanceFromTemplateSchedulingArgs) ToInstanceFromTemplateSchedulingPtrOutput() InstanceFromTemplateSchedulingPtrOutput {
	return i.ToInstanceFromTemplateSchedulingPtrOutputWithContext(context.Background())
}

func (i InstanceFromTemplateSchedulingArgs) ToInstanceFromTemplateSchedulingPtrOutputWithContext(ctx context.Context) InstanceFromTemplateSchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateSchedulingOutput).ToInstanceFromTemplateSchedulingPtrOutputWithContext(ctx)
}

// InstanceFromTemplateSchedulingPtrInput is an input type that accepts InstanceFromTemplateSchedulingArgs, InstanceFromTemplateSchedulingPtr and InstanceFromTemplateSchedulingPtrOutput values.
// You can construct a concrete instance of `InstanceFromTemplateSchedulingPtrInput` via:
//
// 		 InstanceFromTemplateSchedulingArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceFromTemplateSchedulingPtrInput interface {
	pulumi.Input

	ToInstanceFromTemplateSchedulingPtrOutput() InstanceFromTemplateSchedulingPtrOutput
	ToInstanceFromTemplateSchedulingPtrOutputWithContext(context.Context) InstanceFromTemplateSchedulingPtrOutput
}

type instanceFromTemplateSchedulingPtrType InstanceFromTemplateSchedulingArgs

func InstanceFromTemplateSchedulingPtr(v *InstanceFromTemplateSchedulingArgs) InstanceFromTemplateSchedulingPtrInput {
	return (*instanceFromTemplateSchedulingPtrType)(v)
}

func (*instanceFromTemplateSchedulingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFromTemplateScheduling)(nil)).Elem()
}

func (i *instanceFromTemplateSchedulingPtrType) ToInstanceFromTemplateSchedulingPtrOutput() InstanceFromTemplateSchedulingPtrOutput {
	return i.ToInstanceFromTemplateSchedulingPtrOutputWithContext(context.Background())
}

func (i *instanceFromTemplateSchedulingPtrType) ToInstanceFromTemplateSchedulingPtrOutputWithContext(ctx context.Context) InstanceFromTemplateSchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateSchedulingPtrOutput)
}

type InstanceFromTemplateSchedulingOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateSchedulingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateScheduling)(nil)).Elem()
}

func (o InstanceFromTemplateSchedulingOutput) ToInstanceFromTemplateSchedulingOutput() InstanceFromTemplateSchedulingOutput {
	return o
}

func (o InstanceFromTemplateSchedulingOutput) ToInstanceFromTemplateSchedulingOutputWithContext(ctx context.Context) InstanceFromTemplateSchedulingOutput {
	return o
}

func (o InstanceFromTemplateSchedulingOutput) ToInstanceFromTemplateSchedulingPtrOutput() InstanceFromTemplateSchedulingPtrOutput {
	return o.ToInstanceFromTemplateSchedulingPtrOutputWithContext(context.Background())
}

func (o InstanceFromTemplateSchedulingOutput) ToInstanceFromTemplateSchedulingPtrOutputWithContext(ctx context.Context) InstanceFromTemplateSchedulingPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateScheduling) *InstanceFromTemplateScheduling {
		return &v
	}).(InstanceFromTemplateSchedulingPtrOutput)
}
func (o InstanceFromTemplateSchedulingOutput) AutomaticRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateScheduling) *bool { return v.AutomaticRestart }).(pulumi.BoolPtrOutput)
}

func (o InstanceFromTemplateSchedulingOutput) NodeAffinities() InstanceFromTemplateSchedulingNodeAffinityArrayOutput {
	return o.ApplyT(func(v InstanceFromTemplateScheduling) []InstanceFromTemplateSchedulingNodeAffinity {
		return v.NodeAffinities
	}).(InstanceFromTemplateSchedulingNodeAffinityArrayOutput)
}

func (o InstanceFromTemplateSchedulingOutput) OnHostMaintenance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateScheduling) *string { return v.OnHostMaintenance }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateSchedulingOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateScheduling) *bool { return v.Preemptible }).(pulumi.BoolPtrOutput)
}

type InstanceFromTemplateSchedulingPtrOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateSchedulingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFromTemplateScheduling)(nil)).Elem()
}

func (o InstanceFromTemplateSchedulingPtrOutput) ToInstanceFromTemplateSchedulingPtrOutput() InstanceFromTemplateSchedulingPtrOutput {
	return o
}

func (o InstanceFromTemplateSchedulingPtrOutput) ToInstanceFromTemplateSchedulingPtrOutputWithContext(ctx context.Context) InstanceFromTemplateSchedulingPtrOutput {
	return o
}

func (o InstanceFromTemplateSchedulingPtrOutput) Elem() InstanceFromTemplateSchedulingOutput {
	return o.ApplyT(func(v *InstanceFromTemplateScheduling) InstanceFromTemplateScheduling { return *v }).(InstanceFromTemplateSchedulingOutput)
}

func (o InstanceFromTemplateSchedulingPtrOutput) AutomaticRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateScheduling) *bool {
		if v == nil {
			return nil
		}
		return v.AutomaticRestart
	}).(pulumi.BoolPtrOutput)
}

func (o InstanceFromTemplateSchedulingPtrOutput) NodeAffinities() InstanceFromTemplateSchedulingNodeAffinityArrayOutput {
	return o.ApplyT(func(v *InstanceFromTemplateScheduling) []InstanceFromTemplateSchedulingNodeAffinity {
		if v == nil {
			return nil
		}
		return v.NodeAffinities
	}).(InstanceFromTemplateSchedulingNodeAffinityArrayOutput)
}

func (o InstanceFromTemplateSchedulingPtrOutput) OnHostMaintenance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateScheduling) *string {
		if v == nil {
			return nil
		}
		return v.OnHostMaintenance
	}).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateSchedulingPtrOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateScheduling) *bool {
		if v == nil {
			return nil
		}
		return v.Preemptible
	}).(pulumi.BoolPtrOutput)
}

type InstanceFromTemplateSchedulingNodeAffinity struct {
	Key      string   `pulumi:"key"`
	Operator string   `pulumi:"operator"`
	Values   []string `pulumi:"values"`
}

// InstanceFromTemplateSchedulingNodeAffinityInput is an input type that accepts InstanceFromTemplateSchedulingNodeAffinityArgs and InstanceFromTemplateSchedulingNodeAffinityOutput values.
// You can construct a concrete instance of `InstanceFromTemplateSchedulingNodeAffinityInput` via:
//
// 		 InstanceFromTemplateSchedulingNodeAffinityArgs{...}
//
type InstanceFromTemplateSchedulingNodeAffinityInput interface {
	pulumi.Input

	ToInstanceFromTemplateSchedulingNodeAffinityOutput() InstanceFromTemplateSchedulingNodeAffinityOutput
	ToInstanceFromTemplateSchedulingNodeAffinityOutputWithContext(context.Context) InstanceFromTemplateSchedulingNodeAffinityOutput
}

type InstanceFromTemplateSchedulingNodeAffinityArgs struct {
	Key      pulumi.StringInput      `pulumi:"key"`
	Operator pulumi.StringInput      `pulumi:"operator"`
	Values   pulumi.StringArrayInput `pulumi:"values"`
}

func (InstanceFromTemplateSchedulingNodeAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateSchedulingNodeAffinity)(nil)).Elem()
}

func (i InstanceFromTemplateSchedulingNodeAffinityArgs) ToInstanceFromTemplateSchedulingNodeAffinityOutput() InstanceFromTemplateSchedulingNodeAffinityOutput {
	return i.ToInstanceFromTemplateSchedulingNodeAffinityOutputWithContext(context.Background())
}

func (i InstanceFromTemplateSchedulingNodeAffinityArgs) ToInstanceFromTemplateSchedulingNodeAffinityOutputWithContext(ctx context.Context) InstanceFromTemplateSchedulingNodeAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateSchedulingNodeAffinityOutput)
}

// InstanceFromTemplateSchedulingNodeAffinityArrayInput is an input type that accepts InstanceFromTemplateSchedulingNodeAffinityArray and InstanceFromTemplateSchedulingNodeAffinityArrayOutput values.
// You can construct a concrete instance of `InstanceFromTemplateSchedulingNodeAffinityArrayInput` via:
//
// 		 InstanceFromTemplateSchedulingNodeAffinityArray{ InstanceFromTemplateSchedulingNodeAffinityArgs{...} }
//
type InstanceFromTemplateSchedulingNodeAffinityArrayInput interface {
	pulumi.Input

	ToInstanceFromTemplateSchedulingNodeAffinityArrayOutput() InstanceFromTemplateSchedulingNodeAffinityArrayOutput
	ToInstanceFromTemplateSchedulingNodeAffinityArrayOutputWithContext(context.Context) InstanceFromTemplateSchedulingNodeAffinityArrayOutput
}

type InstanceFromTemplateSchedulingNodeAffinityArray []InstanceFromTemplateSchedulingNodeAffinityInput

func (InstanceFromTemplateSchedulingNodeAffinityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFromTemplateSchedulingNodeAffinity)(nil)).Elem()
}

func (i InstanceFromTemplateSchedulingNodeAffinityArray) ToInstanceFromTemplateSchedulingNodeAffinityArrayOutput() InstanceFromTemplateSchedulingNodeAffinityArrayOutput {
	return i.ToInstanceFromTemplateSchedulingNodeAffinityArrayOutputWithContext(context.Background())
}

func (i InstanceFromTemplateSchedulingNodeAffinityArray) ToInstanceFromTemplateSchedulingNodeAffinityArrayOutputWithContext(ctx context.Context) InstanceFromTemplateSchedulingNodeAffinityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateSchedulingNodeAffinityArrayOutput)
}

type InstanceFromTemplateSchedulingNodeAffinityOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateSchedulingNodeAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateSchedulingNodeAffinity)(nil)).Elem()
}

func (o InstanceFromTemplateSchedulingNodeAffinityOutput) ToInstanceFromTemplateSchedulingNodeAffinityOutput() InstanceFromTemplateSchedulingNodeAffinityOutput {
	return o
}

func (o InstanceFromTemplateSchedulingNodeAffinityOutput) ToInstanceFromTemplateSchedulingNodeAffinityOutputWithContext(ctx context.Context) InstanceFromTemplateSchedulingNodeAffinityOutput {
	return o
}

func (o InstanceFromTemplateSchedulingNodeAffinityOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceFromTemplateSchedulingNodeAffinity) string { return v.Key }).(pulumi.StringOutput)
}

func (o InstanceFromTemplateSchedulingNodeAffinityOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceFromTemplateSchedulingNodeAffinity) string { return v.Operator }).(pulumi.StringOutput)
}

func (o InstanceFromTemplateSchedulingNodeAffinityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceFromTemplateSchedulingNodeAffinity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type InstanceFromTemplateSchedulingNodeAffinityArrayOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateSchedulingNodeAffinityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFromTemplateSchedulingNodeAffinity)(nil)).Elem()
}

func (o InstanceFromTemplateSchedulingNodeAffinityArrayOutput) ToInstanceFromTemplateSchedulingNodeAffinityArrayOutput() InstanceFromTemplateSchedulingNodeAffinityArrayOutput {
	return o
}

func (o InstanceFromTemplateSchedulingNodeAffinityArrayOutput) ToInstanceFromTemplateSchedulingNodeAffinityArrayOutputWithContext(ctx context.Context) InstanceFromTemplateSchedulingNodeAffinityArrayOutput {
	return o
}

func (o InstanceFromTemplateSchedulingNodeAffinityArrayOutput) Index(i pulumi.IntInput) InstanceFromTemplateSchedulingNodeAffinityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceFromTemplateSchedulingNodeAffinity {
		return vs[0].([]InstanceFromTemplateSchedulingNodeAffinity)[vs[1].(int)]
	}).(InstanceFromTemplateSchedulingNodeAffinityOutput)
}

type InstanceFromTemplateScratchDisk struct {
	Interface string `pulumi:"interface"`
}

// InstanceFromTemplateScratchDiskInput is an input type that accepts InstanceFromTemplateScratchDiskArgs and InstanceFromTemplateScratchDiskOutput values.
// You can construct a concrete instance of `InstanceFromTemplateScratchDiskInput` via:
//
// 		 InstanceFromTemplateScratchDiskArgs{...}
//
type InstanceFromTemplateScratchDiskInput interface {
	pulumi.Input

	ToInstanceFromTemplateScratchDiskOutput() InstanceFromTemplateScratchDiskOutput
	ToInstanceFromTemplateScratchDiskOutputWithContext(context.Context) InstanceFromTemplateScratchDiskOutput
}

type InstanceFromTemplateScratchDiskArgs struct {
	Interface pulumi.StringInput `pulumi:"interface"`
}

func (InstanceFromTemplateScratchDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateScratchDisk)(nil)).Elem()
}

func (i InstanceFromTemplateScratchDiskArgs) ToInstanceFromTemplateScratchDiskOutput() InstanceFromTemplateScratchDiskOutput {
	return i.ToInstanceFromTemplateScratchDiskOutputWithContext(context.Background())
}

func (i InstanceFromTemplateScratchDiskArgs) ToInstanceFromTemplateScratchDiskOutputWithContext(ctx context.Context) InstanceFromTemplateScratchDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateScratchDiskOutput)
}

// InstanceFromTemplateScratchDiskArrayInput is an input type that accepts InstanceFromTemplateScratchDiskArray and InstanceFromTemplateScratchDiskArrayOutput values.
// You can construct a concrete instance of `InstanceFromTemplateScratchDiskArrayInput` via:
//
// 		 InstanceFromTemplateScratchDiskArray{ InstanceFromTemplateScratchDiskArgs{...} }
//
type InstanceFromTemplateScratchDiskArrayInput interface {
	pulumi.Input

	ToInstanceFromTemplateScratchDiskArrayOutput() InstanceFromTemplateScratchDiskArrayOutput
	ToInstanceFromTemplateScratchDiskArrayOutputWithContext(context.Context) InstanceFromTemplateScratchDiskArrayOutput
}

type InstanceFromTemplateScratchDiskArray []InstanceFromTemplateScratchDiskInput

func (InstanceFromTemplateScratchDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFromTemplateScratchDisk)(nil)).Elem()
}

func (i InstanceFromTemplateScratchDiskArray) ToInstanceFromTemplateScratchDiskArrayOutput() InstanceFromTemplateScratchDiskArrayOutput {
	return i.ToInstanceFromTemplateScratchDiskArrayOutputWithContext(context.Background())
}

func (i InstanceFromTemplateScratchDiskArray) ToInstanceFromTemplateScratchDiskArrayOutputWithContext(ctx context.Context) InstanceFromTemplateScratchDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateScratchDiskArrayOutput)
}

type InstanceFromTemplateScratchDiskOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateScratchDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateScratchDisk)(nil)).Elem()
}

func (o InstanceFromTemplateScratchDiskOutput) ToInstanceFromTemplateScratchDiskOutput() InstanceFromTemplateScratchDiskOutput {
	return o
}

func (o InstanceFromTemplateScratchDiskOutput) ToInstanceFromTemplateScratchDiskOutputWithContext(ctx context.Context) InstanceFromTemplateScratchDiskOutput {
	return o
}

func (o InstanceFromTemplateScratchDiskOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceFromTemplateScratchDisk) string { return v.Interface }).(pulumi.StringOutput)
}

type InstanceFromTemplateScratchDiskArrayOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateScratchDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFromTemplateScratchDisk)(nil)).Elem()
}

func (o InstanceFromTemplateScratchDiskArrayOutput) ToInstanceFromTemplateScratchDiskArrayOutput() InstanceFromTemplateScratchDiskArrayOutput {
	return o
}

func (o InstanceFromTemplateScratchDiskArrayOutput) ToInstanceFromTemplateScratchDiskArrayOutputWithContext(ctx context.Context) InstanceFromTemplateScratchDiskArrayOutput {
	return o
}

func (o InstanceFromTemplateScratchDiskArrayOutput) Index(i pulumi.IntInput) InstanceFromTemplateScratchDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceFromTemplateScratchDisk {
		return vs[0].([]InstanceFromTemplateScratchDisk)[vs[1].(int)]
	}).(InstanceFromTemplateScratchDiskOutput)
}

type InstanceFromTemplateServiceAccount struct {
	Email  *string  `pulumi:"email"`
	Scopes []string `pulumi:"scopes"`
}

// InstanceFromTemplateServiceAccountInput is an input type that accepts InstanceFromTemplateServiceAccountArgs and InstanceFromTemplateServiceAccountOutput values.
// You can construct a concrete instance of `InstanceFromTemplateServiceAccountInput` via:
//
// 		 InstanceFromTemplateServiceAccountArgs{...}
//
type InstanceFromTemplateServiceAccountInput interface {
	pulumi.Input

	ToInstanceFromTemplateServiceAccountOutput() InstanceFromTemplateServiceAccountOutput
	ToInstanceFromTemplateServiceAccountOutputWithContext(context.Context) InstanceFromTemplateServiceAccountOutput
}

type InstanceFromTemplateServiceAccountArgs struct {
	Email  pulumi.StringPtrInput   `pulumi:"email"`
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (InstanceFromTemplateServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateServiceAccount)(nil)).Elem()
}

func (i InstanceFromTemplateServiceAccountArgs) ToInstanceFromTemplateServiceAccountOutput() InstanceFromTemplateServiceAccountOutput {
	return i.ToInstanceFromTemplateServiceAccountOutputWithContext(context.Background())
}

func (i InstanceFromTemplateServiceAccountArgs) ToInstanceFromTemplateServiceAccountOutputWithContext(ctx context.Context) InstanceFromTemplateServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateServiceAccountOutput)
}

func (i InstanceFromTemplateServiceAccountArgs) ToInstanceFromTemplateServiceAccountPtrOutput() InstanceFromTemplateServiceAccountPtrOutput {
	return i.ToInstanceFromTemplateServiceAccountPtrOutputWithContext(context.Background())
}

func (i InstanceFromTemplateServiceAccountArgs) ToInstanceFromTemplateServiceAccountPtrOutputWithContext(ctx context.Context) InstanceFromTemplateServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateServiceAccountOutput).ToInstanceFromTemplateServiceAccountPtrOutputWithContext(ctx)
}

// InstanceFromTemplateServiceAccountPtrInput is an input type that accepts InstanceFromTemplateServiceAccountArgs, InstanceFromTemplateServiceAccountPtr and InstanceFromTemplateServiceAccountPtrOutput values.
// You can construct a concrete instance of `InstanceFromTemplateServiceAccountPtrInput` via:
//
// 		 InstanceFromTemplateServiceAccountArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceFromTemplateServiceAccountPtrInput interface {
	pulumi.Input

	ToInstanceFromTemplateServiceAccountPtrOutput() InstanceFromTemplateServiceAccountPtrOutput
	ToInstanceFromTemplateServiceAccountPtrOutputWithContext(context.Context) InstanceFromTemplateServiceAccountPtrOutput
}

type instanceFromTemplateServiceAccountPtrType InstanceFromTemplateServiceAccountArgs

func InstanceFromTemplateServiceAccountPtr(v *InstanceFromTemplateServiceAccountArgs) InstanceFromTemplateServiceAccountPtrInput {
	return (*instanceFromTemplateServiceAccountPtrType)(v)
}

func (*instanceFromTemplateServiceAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFromTemplateServiceAccount)(nil)).Elem()
}

func (i *instanceFromTemplateServiceAccountPtrType) ToInstanceFromTemplateServiceAccountPtrOutput() InstanceFromTemplateServiceAccountPtrOutput {
	return i.ToInstanceFromTemplateServiceAccountPtrOutputWithContext(context.Background())
}

func (i *instanceFromTemplateServiceAccountPtrType) ToInstanceFromTemplateServiceAccountPtrOutputWithContext(ctx context.Context) InstanceFromTemplateServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateServiceAccountPtrOutput)
}

type InstanceFromTemplateServiceAccountOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateServiceAccount)(nil)).Elem()
}

func (o InstanceFromTemplateServiceAccountOutput) ToInstanceFromTemplateServiceAccountOutput() InstanceFromTemplateServiceAccountOutput {
	return o
}

func (o InstanceFromTemplateServiceAccountOutput) ToInstanceFromTemplateServiceAccountOutputWithContext(ctx context.Context) InstanceFromTemplateServiceAccountOutput {
	return o
}

func (o InstanceFromTemplateServiceAccountOutput) ToInstanceFromTemplateServiceAccountPtrOutput() InstanceFromTemplateServiceAccountPtrOutput {
	return o.ToInstanceFromTemplateServiceAccountPtrOutputWithContext(context.Background())
}

func (o InstanceFromTemplateServiceAccountOutput) ToInstanceFromTemplateServiceAccountPtrOutputWithContext(ctx context.Context) InstanceFromTemplateServiceAccountPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateServiceAccount) *InstanceFromTemplateServiceAccount {
		return &v
	}).(InstanceFromTemplateServiceAccountPtrOutput)
}
func (o InstanceFromTemplateServiceAccountOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateServiceAccount) *string { return v.Email }).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateServiceAccountOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceFromTemplateServiceAccount) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type InstanceFromTemplateServiceAccountPtrOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateServiceAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFromTemplateServiceAccount)(nil)).Elem()
}

func (o InstanceFromTemplateServiceAccountPtrOutput) ToInstanceFromTemplateServiceAccountPtrOutput() InstanceFromTemplateServiceAccountPtrOutput {
	return o
}

func (o InstanceFromTemplateServiceAccountPtrOutput) ToInstanceFromTemplateServiceAccountPtrOutputWithContext(ctx context.Context) InstanceFromTemplateServiceAccountPtrOutput {
	return o
}

func (o InstanceFromTemplateServiceAccountPtrOutput) Elem() InstanceFromTemplateServiceAccountOutput {
	return o.ApplyT(func(v *InstanceFromTemplateServiceAccount) InstanceFromTemplateServiceAccount { return *v }).(InstanceFromTemplateServiceAccountOutput)
}

func (o InstanceFromTemplateServiceAccountPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

func (o InstanceFromTemplateServiceAccountPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceFromTemplateServiceAccount) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

type InstanceFromTemplateShieldedInstanceConfig struct {
	EnableIntegrityMonitoring *bool `pulumi:"enableIntegrityMonitoring"`
	EnableSecureBoot          *bool `pulumi:"enableSecureBoot"`
	EnableVtpm                *bool `pulumi:"enableVtpm"`
}

// InstanceFromTemplateShieldedInstanceConfigInput is an input type that accepts InstanceFromTemplateShieldedInstanceConfigArgs and InstanceFromTemplateShieldedInstanceConfigOutput values.
// You can construct a concrete instance of `InstanceFromTemplateShieldedInstanceConfigInput` via:
//
// 		 InstanceFromTemplateShieldedInstanceConfigArgs{...}
//
type InstanceFromTemplateShieldedInstanceConfigInput interface {
	pulumi.Input

	ToInstanceFromTemplateShieldedInstanceConfigOutput() InstanceFromTemplateShieldedInstanceConfigOutput
	ToInstanceFromTemplateShieldedInstanceConfigOutputWithContext(context.Context) InstanceFromTemplateShieldedInstanceConfigOutput
}

type InstanceFromTemplateShieldedInstanceConfigArgs struct {
	EnableIntegrityMonitoring pulumi.BoolPtrInput `pulumi:"enableIntegrityMonitoring"`
	EnableSecureBoot          pulumi.BoolPtrInput `pulumi:"enableSecureBoot"`
	EnableVtpm                pulumi.BoolPtrInput `pulumi:"enableVtpm"`
}

func (InstanceFromTemplateShieldedInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateShieldedInstanceConfig)(nil)).Elem()
}

func (i InstanceFromTemplateShieldedInstanceConfigArgs) ToInstanceFromTemplateShieldedInstanceConfigOutput() InstanceFromTemplateShieldedInstanceConfigOutput {
	return i.ToInstanceFromTemplateShieldedInstanceConfigOutputWithContext(context.Background())
}

func (i InstanceFromTemplateShieldedInstanceConfigArgs) ToInstanceFromTemplateShieldedInstanceConfigOutputWithContext(ctx context.Context) InstanceFromTemplateShieldedInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateShieldedInstanceConfigOutput)
}

func (i InstanceFromTemplateShieldedInstanceConfigArgs) ToInstanceFromTemplateShieldedInstanceConfigPtrOutput() InstanceFromTemplateShieldedInstanceConfigPtrOutput {
	return i.ToInstanceFromTemplateShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i InstanceFromTemplateShieldedInstanceConfigArgs) ToInstanceFromTemplateShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) InstanceFromTemplateShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateShieldedInstanceConfigOutput).ToInstanceFromTemplateShieldedInstanceConfigPtrOutputWithContext(ctx)
}

// InstanceFromTemplateShieldedInstanceConfigPtrInput is an input type that accepts InstanceFromTemplateShieldedInstanceConfigArgs, InstanceFromTemplateShieldedInstanceConfigPtr and InstanceFromTemplateShieldedInstanceConfigPtrOutput values.
// You can construct a concrete instance of `InstanceFromTemplateShieldedInstanceConfigPtrInput` via:
//
// 		 InstanceFromTemplateShieldedInstanceConfigArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceFromTemplateShieldedInstanceConfigPtrInput interface {
	pulumi.Input

	ToInstanceFromTemplateShieldedInstanceConfigPtrOutput() InstanceFromTemplateShieldedInstanceConfigPtrOutput
	ToInstanceFromTemplateShieldedInstanceConfigPtrOutputWithContext(context.Context) InstanceFromTemplateShieldedInstanceConfigPtrOutput
}

type instanceFromTemplateShieldedInstanceConfigPtrType InstanceFromTemplateShieldedInstanceConfigArgs

func InstanceFromTemplateShieldedInstanceConfigPtr(v *InstanceFromTemplateShieldedInstanceConfigArgs) InstanceFromTemplateShieldedInstanceConfigPtrInput {
	return (*instanceFromTemplateShieldedInstanceConfigPtrType)(v)
}

func (*instanceFromTemplateShieldedInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFromTemplateShieldedInstanceConfig)(nil)).Elem()
}

func (i *instanceFromTemplateShieldedInstanceConfigPtrType) ToInstanceFromTemplateShieldedInstanceConfigPtrOutput() InstanceFromTemplateShieldedInstanceConfigPtrOutput {
	return i.ToInstanceFromTemplateShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *instanceFromTemplateShieldedInstanceConfigPtrType) ToInstanceFromTemplateShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) InstanceFromTemplateShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFromTemplateShieldedInstanceConfigPtrOutput)
}

type InstanceFromTemplateShieldedInstanceConfigOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateShieldedInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFromTemplateShieldedInstanceConfig)(nil)).Elem()
}

func (o InstanceFromTemplateShieldedInstanceConfigOutput) ToInstanceFromTemplateShieldedInstanceConfigOutput() InstanceFromTemplateShieldedInstanceConfigOutput {
	return o
}

func (o InstanceFromTemplateShieldedInstanceConfigOutput) ToInstanceFromTemplateShieldedInstanceConfigOutputWithContext(ctx context.Context) InstanceFromTemplateShieldedInstanceConfigOutput {
	return o
}

func (o InstanceFromTemplateShieldedInstanceConfigOutput) ToInstanceFromTemplateShieldedInstanceConfigPtrOutput() InstanceFromTemplateShieldedInstanceConfigPtrOutput {
	return o.ToInstanceFromTemplateShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (o InstanceFromTemplateShieldedInstanceConfigOutput) ToInstanceFromTemplateShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) InstanceFromTemplateShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateShieldedInstanceConfig) *InstanceFromTemplateShieldedInstanceConfig {
		return &v
	}).(InstanceFromTemplateShieldedInstanceConfigPtrOutput)
}
func (o InstanceFromTemplateShieldedInstanceConfigOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateShieldedInstanceConfig) *bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolPtrOutput)
}

func (o InstanceFromTemplateShieldedInstanceConfigOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateShieldedInstanceConfig) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

func (o InstanceFromTemplateShieldedInstanceConfigOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceFromTemplateShieldedInstanceConfig) *bool { return v.EnableVtpm }).(pulumi.BoolPtrOutput)
}

type InstanceFromTemplateShieldedInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (InstanceFromTemplateShieldedInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFromTemplateShieldedInstanceConfig)(nil)).Elem()
}

func (o InstanceFromTemplateShieldedInstanceConfigPtrOutput) ToInstanceFromTemplateShieldedInstanceConfigPtrOutput() InstanceFromTemplateShieldedInstanceConfigPtrOutput {
	return o
}

func (o InstanceFromTemplateShieldedInstanceConfigPtrOutput) ToInstanceFromTemplateShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) InstanceFromTemplateShieldedInstanceConfigPtrOutput {
	return o
}

func (o InstanceFromTemplateShieldedInstanceConfigPtrOutput) Elem() InstanceFromTemplateShieldedInstanceConfigOutput {
	return o.ApplyT(func(v *InstanceFromTemplateShieldedInstanceConfig) InstanceFromTemplateShieldedInstanceConfig {
		return *v
	}).(InstanceFromTemplateShieldedInstanceConfigOutput)
}

func (o InstanceFromTemplateShieldedInstanceConfigPtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

func (o InstanceFromTemplateShieldedInstanceConfigPtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

func (o InstanceFromTemplateShieldedInstanceConfigPtrOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceFromTemplateShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVtpm
	}).(pulumi.BoolPtrOutput)
}

type InstanceGroupManagerAutoHealingPolicies struct {
	// The health check resource that signals autohealing.
	HealthCheck string `pulumi:"healthCheck"`
	// The number of seconds that the managed instance group waits before
	// it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.
	InitialDelaySec int `pulumi:"initialDelaySec"`
}

// InstanceGroupManagerAutoHealingPoliciesInput is an input type that accepts InstanceGroupManagerAutoHealingPoliciesArgs and InstanceGroupManagerAutoHealingPoliciesOutput values.
// You can construct a concrete instance of `InstanceGroupManagerAutoHealingPoliciesInput` via:
//
// 		 InstanceGroupManagerAutoHealingPoliciesArgs{...}
//
type InstanceGroupManagerAutoHealingPoliciesInput interface {
	pulumi.Input

	ToInstanceGroupManagerAutoHealingPoliciesOutput() InstanceGroupManagerAutoHealingPoliciesOutput
	ToInstanceGroupManagerAutoHealingPoliciesOutputWithContext(context.Context) InstanceGroupManagerAutoHealingPoliciesOutput
}

type InstanceGroupManagerAutoHealingPoliciesArgs struct {
	// The health check resource that signals autohealing.
	HealthCheck pulumi.StringInput `pulumi:"healthCheck"`
	// The number of seconds that the managed instance group waits before
	// it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.
	InitialDelaySec pulumi.IntInput `pulumi:"initialDelaySec"`
}

func (InstanceGroupManagerAutoHealingPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerAutoHealingPolicies)(nil)).Elem()
}

func (i InstanceGroupManagerAutoHealingPoliciesArgs) ToInstanceGroupManagerAutoHealingPoliciesOutput() InstanceGroupManagerAutoHealingPoliciesOutput {
	return i.ToInstanceGroupManagerAutoHealingPoliciesOutputWithContext(context.Background())
}

func (i InstanceGroupManagerAutoHealingPoliciesArgs) ToInstanceGroupManagerAutoHealingPoliciesOutputWithContext(ctx context.Context) InstanceGroupManagerAutoHealingPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerAutoHealingPoliciesOutput)
}

func (i InstanceGroupManagerAutoHealingPoliciesArgs) ToInstanceGroupManagerAutoHealingPoliciesPtrOutput() InstanceGroupManagerAutoHealingPoliciesPtrOutput {
	return i.ToInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(context.Background())
}

func (i InstanceGroupManagerAutoHealingPoliciesArgs) ToInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(ctx context.Context) InstanceGroupManagerAutoHealingPoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerAutoHealingPoliciesOutput).ToInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(ctx)
}

// InstanceGroupManagerAutoHealingPoliciesPtrInput is an input type that accepts InstanceGroupManagerAutoHealingPoliciesArgs, InstanceGroupManagerAutoHealingPoliciesPtr and InstanceGroupManagerAutoHealingPoliciesPtrOutput values.
// You can construct a concrete instance of `InstanceGroupManagerAutoHealingPoliciesPtrInput` via:
//
// 		 InstanceGroupManagerAutoHealingPoliciesArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceGroupManagerAutoHealingPoliciesPtrInput interface {
	pulumi.Input

	ToInstanceGroupManagerAutoHealingPoliciesPtrOutput() InstanceGroupManagerAutoHealingPoliciesPtrOutput
	ToInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(context.Context) InstanceGroupManagerAutoHealingPoliciesPtrOutput
}

type instanceGroupManagerAutoHealingPoliciesPtrType InstanceGroupManagerAutoHealingPoliciesArgs

func InstanceGroupManagerAutoHealingPoliciesPtr(v *InstanceGroupManagerAutoHealingPoliciesArgs) InstanceGroupManagerAutoHealingPoliciesPtrInput {
	return (*instanceGroupManagerAutoHealingPoliciesPtrType)(v)
}

func (*instanceGroupManagerAutoHealingPoliciesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerAutoHealingPolicies)(nil)).Elem()
}

func (i *instanceGroupManagerAutoHealingPoliciesPtrType) ToInstanceGroupManagerAutoHealingPoliciesPtrOutput() InstanceGroupManagerAutoHealingPoliciesPtrOutput {
	return i.ToInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(context.Background())
}

func (i *instanceGroupManagerAutoHealingPoliciesPtrType) ToInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(ctx context.Context) InstanceGroupManagerAutoHealingPoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerAutoHealingPoliciesPtrOutput)
}

type InstanceGroupManagerAutoHealingPoliciesOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerAutoHealingPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerAutoHealingPolicies)(nil)).Elem()
}

func (o InstanceGroupManagerAutoHealingPoliciesOutput) ToInstanceGroupManagerAutoHealingPoliciesOutput() InstanceGroupManagerAutoHealingPoliciesOutput {
	return o
}

func (o InstanceGroupManagerAutoHealingPoliciesOutput) ToInstanceGroupManagerAutoHealingPoliciesOutputWithContext(ctx context.Context) InstanceGroupManagerAutoHealingPoliciesOutput {
	return o
}

func (o InstanceGroupManagerAutoHealingPoliciesOutput) ToInstanceGroupManagerAutoHealingPoliciesPtrOutput() InstanceGroupManagerAutoHealingPoliciesPtrOutput {
	return o.ToInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(context.Background())
}

func (o InstanceGroupManagerAutoHealingPoliciesOutput) ToInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(ctx context.Context) InstanceGroupManagerAutoHealingPoliciesPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerAutoHealingPolicies) *InstanceGroupManagerAutoHealingPolicies {
		return &v
	}).(InstanceGroupManagerAutoHealingPoliciesPtrOutput)
}

// The health check resource that signals autohealing.
func (o InstanceGroupManagerAutoHealingPoliciesOutput) HealthCheck() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceGroupManagerAutoHealingPolicies) string { return v.HealthCheck }).(pulumi.StringOutput)
}

// The number of seconds that the managed instance group waits before
// it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.
func (o InstanceGroupManagerAutoHealingPoliciesOutput) InitialDelaySec() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceGroupManagerAutoHealingPolicies) int { return v.InitialDelaySec }).(pulumi.IntOutput)
}

type InstanceGroupManagerAutoHealingPoliciesPtrOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerAutoHealingPoliciesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerAutoHealingPolicies)(nil)).Elem()
}

func (o InstanceGroupManagerAutoHealingPoliciesPtrOutput) ToInstanceGroupManagerAutoHealingPoliciesPtrOutput() InstanceGroupManagerAutoHealingPoliciesPtrOutput {
	return o
}

func (o InstanceGroupManagerAutoHealingPoliciesPtrOutput) ToInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(ctx context.Context) InstanceGroupManagerAutoHealingPoliciesPtrOutput {
	return o
}

func (o InstanceGroupManagerAutoHealingPoliciesPtrOutput) Elem() InstanceGroupManagerAutoHealingPoliciesOutput {
	return o.ApplyT(func(v *InstanceGroupManagerAutoHealingPolicies) InstanceGroupManagerAutoHealingPolicies { return *v }).(InstanceGroupManagerAutoHealingPoliciesOutput)
}

// The health check resource that signals autohealing.
func (o InstanceGroupManagerAutoHealingPoliciesPtrOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerAutoHealingPolicies) *string {
		if v == nil {
			return nil
		}
		return &v.HealthCheck
	}).(pulumi.StringPtrOutput)
}

// The number of seconds that the managed instance group waits before
// it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.
func (o InstanceGroupManagerAutoHealingPoliciesPtrOutput) InitialDelaySec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerAutoHealingPolicies) *int {
		if v == nil {
			return nil
		}
		return &v.InitialDelaySec
	}).(pulumi.IntPtrOutput)
}

type InstanceGroupManagerNamedPort struct {
	// - Version name.
	Name string `pulumi:"name"`
	// The port number.
	// - - -
	Port int `pulumi:"port"`
}

// InstanceGroupManagerNamedPortInput is an input type that accepts InstanceGroupManagerNamedPortArgs and InstanceGroupManagerNamedPortOutput values.
// You can construct a concrete instance of `InstanceGroupManagerNamedPortInput` via:
//
// 		 InstanceGroupManagerNamedPortArgs{...}
//
type InstanceGroupManagerNamedPortInput interface {
	pulumi.Input

	ToInstanceGroupManagerNamedPortOutput() InstanceGroupManagerNamedPortOutput
	ToInstanceGroupManagerNamedPortOutputWithContext(context.Context) InstanceGroupManagerNamedPortOutput
}

type InstanceGroupManagerNamedPortArgs struct {
	// - Version name.
	Name pulumi.StringInput `pulumi:"name"`
	// The port number.
	// - - -
	Port pulumi.IntInput `pulumi:"port"`
}

func (InstanceGroupManagerNamedPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerNamedPort)(nil)).Elem()
}

func (i InstanceGroupManagerNamedPortArgs) ToInstanceGroupManagerNamedPortOutput() InstanceGroupManagerNamedPortOutput {
	return i.ToInstanceGroupManagerNamedPortOutputWithContext(context.Background())
}

func (i InstanceGroupManagerNamedPortArgs) ToInstanceGroupManagerNamedPortOutputWithContext(ctx context.Context) InstanceGroupManagerNamedPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerNamedPortOutput)
}

// InstanceGroupManagerNamedPortArrayInput is an input type that accepts InstanceGroupManagerNamedPortArray and InstanceGroupManagerNamedPortArrayOutput values.
// You can construct a concrete instance of `InstanceGroupManagerNamedPortArrayInput` via:
//
// 		 InstanceGroupManagerNamedPortArray{ InstanceGroupManagerNamedPortArgs{...} }
//
type InstanceGroupManagerNamedPortArrayInput interface {
	pulumi.Input

	ToInstanceGroupManagerNamedPortArrayOutput() InstanceGroupManagerNamedPortArrayOutput
	ToInstanceGroupManagerNamedPortArrayOutputWithContext(context.Context) InstanceGroupManagerNamedPortArrayOutput
}

type InstanceGroupManagerNamedPortArray []InstanceGroupManagerNamedPortInput

func (InstanceGroupManagerNamedPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupManagerNamedPort)(nil)).Elem()
}

func (i InstanceGroupManagerNamedPortArray) ToInstanceGroupManagerNamedPortArrayOutput() InstanceGroupManagerNamedPortArrayOutput {
	return i.ToInstanceGroupManagerNamedPortArrayOutputWithContext(context.Background())
}

func (i InstanceGroupManagerNamedPortArray) ToInstanceGroupManagerNamedPortArrayOutputWithContext(ctx context.Context) InstanceGroupManagerNamedPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerNamedPortArrayOutput)
}

type InstanceGroupManagerNamedPortOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerNamedPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerNamedPort)(nil)).Elem()
}

func (o InstanceGroupManagerNamedPortOutput) ToInstanceGroupManagerNamedPortOutput() InstanceGroupManagerNamedPortOutput {
	return o
}

func (o InstanceGroupManagerNamedPortOutput) ToInstanceGroupManagerNamedPortOutputWithContext(ctx context.Context) InstanceGroupManagerNamedPortOutput {
	return o
}

// - Version name.
func (o InstanceGroupManagerNamedPortOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceGroupManagerNamedPort) string { return v.Name }).(pulumi.StringOutput)
}

// The port number.
// - - -
func (o InstanceGroupManagerNamedPortOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceGroupManagerNamedPort) int { return v.Port }).(pulumi.IntOutput)
}

type InstanceGroupManagerNamedPortArrayOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerNamedPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupManagerNamedPort)(nil)).Elem()
}

func (o InstanceGroupManagerNamedPortArrayOutput) ToInstanceGroupManagerNamedPortArrayOutput() InstanceGroupManagerNamedPortArrayOutput {
	return o
}

func (o InstanceGroupManagerNamedPortArrayOutput) ToInstanceGroupManagerNamedPortArrayOutputWithContext(ctx context.Context) InstanceGroupManagerNamedPortArrayOutput {
	return o
}

func (o InstanceGroupManagerNamedPortArrayOutput) Index(i pulumi.IntInput) InstanceGroupManagerNamedPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceGroupManagerNamedPort {
		return vs[0].([]InstanceGroupManagerNamedPort)[vs[1].(int)]
	}).(InstanceGroupManagerNamedPortOutput)
}

type InstanceGroupManagerUpdatePolicy struct {
	// , The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with `maxSurgePercent`. If neither is set, defaults to 1
	MaxSurgeFixed *int `pulumi:"maxSurgeFixed"`
	// , The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with `maxSurgeFixed`.
	MaxSurgePercent *int `pulumi:"maxSurgePercent"`
	// , The maximum number of instances that can be unavailable during the update process. Conflicts with `maxUnavailablePercent`. If neither is set, defaults to 1
	MaxUnavailableFixed *int `pulumi:"maxUnavailableFixed"`
	// , The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with `maxUnavailableFixed`.
	MaxUnavailablePercent *int `pulumi:"maxUnavailablePercent"`
	// , Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600]
	// - - -
	MinReadySec *int `pulumi:"minReadySec"`
	// - Minimal action to be taken on an instance. You can specify either `RESTART` to restart existing instances or `REPLACE` to delete and create new instances from the target template. If you specify a `RESTART`, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
	MinimalAction string `pulumi:"minimalAction"`
	// - The type of update process. You can specify either `PROACTIVE` so that the instance group manager proactively executes actions in order to bring instances to their target versions or `OPPORTUNISTIC` so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
	Type string `pulumi:"type"`
}

// InstanceGroupManagerUpdatePolicyInput is an input type that accepts InstanceGroupManagerUpdatePolicyArgs and InstanceGroupManagerUpdatePolicyOutput values.
// You can construct a concrete instance of `InstanceGroupManagerUpdatePolicyInput` via:
//
// 		 InstanceGroupManagerUpdatePolicyArgs{...}
//
type InstanceGroupManagerUpdatePolicyInput interface {
	pulumi.Input

	ToInstanceGroupManagerUpdatePolicyOutput() InstanceGroupManagerUpdatePolicyOutput
	ToInstanceGroupManagerUpdatePolicyOutputWithContext(context.Context) InstanceGroupManagerUpdatePolicyOutput
}

type InstanceGroupManagerUpdatePolicyArgs struct {
	// , The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with `maxSurgePercent`. If neither is set, defaults to 1
	MaxSurgeFixed pulumi.IntPtrInput `pulumi:"maxSurgeFixed"`
	// , The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with `maxSurgeFixed`.
	MaxSurgePercent pulumi.IntPtrInput `pulumi:"maxSurgePercent"`
	// , The maximum number of instances that can be unavailable during the update process. Conflicts with `maxUnavailablePercent`. If neither is set, defaults to 1
	MaxUnavailableFixed pulumi.IntPtrInput `pulumi:"maxUnavailableFixed"`
	// , The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with `maxUnavailableFixed`.
	MaxUnavailablePercent pulumi.IntPtrInput `pulumi:"maxUnavailablePercent"`
	// , Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600]
	// - - -
	MinReadySec pulumi.IntPtrInput `pulumi:"minReadySec"`
	// - Minimal action to be taken on an instance. You can specify either `RESTART` to restart existing instances or `REPLACE` to delete and create new instances from the target template. If you specify a `RESTART`, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
	MinimalAction pulumi.StringInput `pulumi:"minimalAction"`
	// - The type of update process. You can specify either `PROACTIVE` so that the instance group manager proactively executes actions in order to bring instances to their target versions or `OPPORTUNISTIC` so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
	Type pulumi.StringInput `pulumi:"type"`
}

func (InstanceGroupManagerUpdatePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerUpdatePolicy)(nil)).Elem()
}

func (i InstanceGroupManagerUpdatePolicyArgs) ToInstanceGroupManagerUpdatePolicyOutput() InstanceGroupManagerUpdatePolicyOutput {
	return i.ToInstanceGroupManagerUpdatePolicyOutputWithContext(context.Background())
}

func (i InstanceGroupManagerUpdatePolicyArgs) ToInstanceGroupManagerUpdatePolicyOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerUpdatePolicyOutput)
}

func (i InstanceGroupManagerUpdatePolicyArgs) ToInstanceGroupManagerUpdatePolicyPtrOutput() InstanceGroupManagerUpdatePolicyPtrOutput {
	return i.ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(context.Background())
}

func (i InstanceGroupManagerUpdatePolicyArgs) ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerUpdatePolicyOutput).ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(ctx)
}

// InstanceGroupManagerUpdatePolicyPtrInput is an input type that accepts InstanceGroupManagerUpdatePolicyArgs, InstanceGroupManagerUpdatePolicyPtr and InstanceGroupManagerUpdatePolicyPtrOutput values.
// You can construct a concrete instance of `InstanceGroupManagerUpdatePolicyPtrInput` via:
//
// 		 InstanceGroupManagerUpdatePolicyArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceGroupManagerUpdatePolicyPtrInput interface {
	pulumi.Input

	ToInstanceGroupManagerUpdatePolicyPtrOutput() InstanceGroupManagerUpdatePolicyPtrOutput
	ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(context.Context) InstanceGroupManagerUpdatePolicyPtrOutput
}

type instanceGroupManagerUpdatePolicyPtrType InstanceGroupManagerUpdatePolicyArgs

func InstanceGroupManagerUpdatePolicyPtr(v *InstanceGroupManagerUpdatePolicyArgs) InstanceGroupManagerUpdatePolicyPtrInput {
	return (*instanceGroupManagerUpdatePolicyPtrType)(v)
}

func (*instanceGroupManagerUpdatePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerUpdatePolicy)(nil)).Elem()
}

func (i *instanceGroupManagerUpdatePolicyPtrType) ToInstanceGroupManagerUpdatePolicyPtrOutput() InstanceGroupManagerUpdatePolicyPtrOutput {
	return i.ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(context.Background())
}

func (i *instanceGroupManagerUpdatePolicyPtrType) ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerUpdatePolicyPtrOutput)
}

type InstanceGroupManagerUpdatePolicyOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerUpdatePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerUpdatePolicy)(nil)).Elem()
}

func (o InstanceGroupManagerUpdatePolicyOutput) ToInstanceGroupManagerUpdatePolicyOutput() InstanceGroupManagerUpdatePolicyOutput {
	return o
}

func (o InstanceGroupManagerUpdatePolicyOutput) ToInstanceGroupManagerUpdatePolicyOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyOutput {
	return o
}

func (o InstanceGroupManagerUpdatePolicyOutput) ToInstanceGroupManagerUpdatePolicyPtrOutput() InstanceGroupManagerUpdatePolicyPtrOutput {
	return o.ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(context.Background())
}

func (o InstanceGroupManagerUpdatePolicyOutput) ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicy) *InstanceGroupManagerUpdatePolicy {
		return &v
	}).(InstanceGroupManagerUpdatePolicyPtrOutput)
}

// , The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with `maxSurgePercent`. If neither is set, defaults to 1
func (o InstanceGroupManagerUpdatePolicyOutput) MaxSurgeFixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicy) *int { return v.MaxSurgeFixed }).(pulumi.IntPtrOutput)
}

// , The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with `maxSurgeFixed`.
func (o InstanceGroupManagerUpdatePolicyOutput) MaxSurgePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicy) *int { return v.MaxSurgePercent }).(pulumi.IntPtrOutput)
}

// , The maximum number of instances that can be unavailable during the update process. Conflicts with `maxUnavailablePercent`. If neither is set, defaults to 1
func (o InstanceGroupManagerUpdatePolicyOutput) MaxUnavailableFixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicy) *int { return v.MaxUnavailableFixed }).(pulumi.IntPtrOutput)
}

// , The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with `maxUnavailableFixed`.
func (o InstanceGroupManagerUpdatePolicyOutput) MaxUnavailablePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicy) *int { return v.MaxUnavailablePercent }).(pulumi.IntPtrOutput)
}

// , Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600]
// - - -
func (o InstanceGroupManagerUpdatePolicyOutput) MinReadySec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicy) *int { return v.MinReadySec }).(pulumi.IntPtrOutput)
}

// - Minimal action to be taken on an instance. You can specify either `RESTART` to restart existing instances or `REPLACE` to delete and create new instances from the target template. If you specify a `RESTART`, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
func (o InstanceGroupManagerUpdatePolicyOutput) MinimalAction() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicy) string { return v.MinimalAction }).(pulumi.StringOutput)
}

// - The type of update process. You can specify either `PROACTIVE` so that the instance group manager proactively executes actions in order to bring instances to their target versions or `OPPORTUNISTIC` so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
func (o InstanceGroupManagerUpdatePolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicy) string { return v.Type }).(pulumi.StringOutput)
}

type InstanceGroupManagerUpdatePolicyPtrOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerUpdatePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerUpdatePolicy)(nil)).Elem()
}

func (o InstanceGroupManagerUpdatePolicyPtrOutput) ToInstanceGroupManagerUpdatePolicyPtrOutput() InstanceGroupManagerUpdatePolicyPtrOutput {
	return o
}

func (o InstanceGroupManagerUpdatePolicyPtrOutput) ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyPtrOutput {
	return o
}

func (o InstanceGroupManagerUpdatePolicyPtrOutput) Elem() InstanceGroupManagerUpdatePolicyOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicy) InstanceGroupManagerUpdatePolicy { return *v }).(InstanceGroupManagerUpdatePolicyOutput)
}

// , The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with `maxSurgePercent`. If neither is set, defaults to 1
func (o InstanceGroupManagerUpdatePolicyPtrOutput) MaxSurgeFixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxSurgeFixed
	}).(pulumi.IntPtrOutput)
}

// , The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with `maxSurgeFixed`.
func (o InstanceGroupManagerUpdatePolicyPtrOutput) MaxSurgePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxSurgePercent
	}).(pulumi.IntPtrOutput)
}

// , The maximum number of instances that can be unavailable during the update process. Conflicts with `maxUnavailablePercent`. If neither is set, defaults to 1
func (o InstanceGroupManagerUpdatePolicyPtrOutput) MaxUnavailableFixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnavailableFixed
	}).(pulumi.IntPtrOutput)
}

// , The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with `maxUnavailableFixed`.
func (o InstanceGroupManagerUpdatePolicyPtrOutput) MaxUnavailablePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnavailablePercent
	}).(pulumi.IntPtrOutput)
}

// , Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600]
// - - -
func (o InstanceGroupManagerUpdatePolicyPtrOutput) MinReadySec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicy) *int {
		if v == nil {
			return nil
		}
		return v.MinReadySec
	}).(pulumi.IntPtrOutput)
}

// - Minimal action to be taken on an instance. You can specify either `RESTART` to restart existing instances or `REPLACE` to delete and create new instances from the target template. If you specify a `RESTART`, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
func (o InstanceGroupManagerUpdatePolicyPtrOutput) MinimalAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.MinimalAction
	}).(pulumi.StringPtrOutput)
}

// - The type of update process. You can specify either `PROACTIVE` so that the instance group manager proactively executes actions in order to bring instances to their target versions or `OPPORTUNISTIC` so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
func (o InstanceGroupManagerUpdatePolicyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type InstanceGroupManagerVersion struct {
	// - The full URL to an instance template from which all new instances of this version will be created.
	InstanceTemplate string `pulumi:"instanceTemplate"`
	// - Version name.
	Name *string `pulumi:"name"`
	// - The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.
	TargetSize *InstanceGroupManagerVersionTargetSize `pulumi:"targetSize"`
}

// InstanceGroupManagerVersionInput is an input type that accepts InstanceGroupManagerVersionArgs and InstanceGroupManagerVersionOutput values.
// You can construct a concrete instance of `InstanceGroupManagerVersionInput` via:
//
// 		 InstanceGroupManagerVersionArgs{...}
//
type InstanceGroupManagerVersionInput interface {
	pulumi.Input

	ToInstanceGroupManagerVersionOutput() InstanceGroupManagerVersionOutput
	ToInstanceGroupManagerVersionOutputWithContext(context.Context) InstanceGroupManagerVersionOutput
}

type InstanceGroupManagerVersionArgs struct {
	// - The full URL to an instance template from which all new instances of this version will be created.
	InstanceTemplate pulumi.StringInput `pulumi:"instanceTemplate"`
	// - Version name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// - The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.
	TargetSize InstanceGroupManagerVersionTargetSizePtrInput `pulumi:"targetSize"`
}

func (InstanceGroupManagerVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerVersion)(nil)).Elem()
}

func (i InstanceGroupManagerVersionArgs) ToInstanceGroupManagerVersionOutput() InstanceGroupManagerVersionOutput {
	return i.ToInstanceGroupManagerVersionOutputWithContext(context.Background())
}

func (i InstanceGroupManagerVersionArgs) ToInstanceGroupManagerVersionOutputWithContext(ctx context.Context) InstanceGroupManagerVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerVersionOutput)
}

// InstanceGroupManagerVersionArrayInput is an input type that accepts InstanceGroupManagerVersionArray and InstanceGroupManagerVersionArrayOutput values.
// You can construct a concrete instance of `InstanceGroupManagerVersionArrayInput` via:
//
// 		 InstanceGroupManagerVersionArray{ InstanceGroupManagerVersionArgs{...} }
//
type InstanceGroupManagerVersionArrayInput interface {
	pulumi.Input

	ToInstanceGroupManagerVersionArrayOutput() InstanceGroupManagerVersionArrayOutput
	ToInstanceGroupManagerVersionArrayOutputWithContext(context.Context) InstanceGroupManagerVersionArrayOutput
}

type InstanceGroupManagerVersionArray []InstanceGroupManagerVersionInput

func (InstanceGroupManagerVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupManagerVersion)(nil)).Elem()
}

func (i InstanceGroupManagerVersionArray) ToInstanceGroupManagerVersionArrayOutput() InstanceGroupManagerVersionArrayOutput {
	return i.ToInstanceGroupManagerVersionArrayOutputWithContext(context.Background())
}

func (i InstanceGroupManagerVersionArray) ToInstanceGroupManagerVersionArrayOutputWithContext(ctx context.Context) InstanceGroupManagerVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerVersionArrayOutput)
}

type InstanceGroupManagerVersionOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerVersion)(nil)).Elem()
}

func (o InstanceGroupManagerVersionOutput) ToInstanceGroupManagerVersionOutput() InstanceGroupManagerVersionOutput {
	return o
}

func (o InstanceGroupManagerVersionOutput) ToInstanceGroupManagerVersionOutputWithContext(ctx context.Context) InstanceGroupManagerVersionOutput {
	return o
}

// - The full URL to an instance template from which all new instances of this version will be created.
func (o InstanceGroupManagerVersionOutput) InstanceTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceGroupManagerVersion) string { return v.InstanceTemplate }).(pulumi.StringOutput)
}

// - Version name.
func (o InstanceGroupManagerVersionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerVersion) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// - The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.
func (o InstanceGroupManagerVersionOutput) TargetSize() InstanceGroupManagerVersionTargetSizePtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerVersion) *InstanceGroupManagerVersionTargetSize { return v.TargetSize }).(InstanceGroupManagerVersionTargetSizePtrOutput)
}

type InstanceGroupManagerVersionArrayOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupManagerVersion)(nil)).Elem()
}

func (o InstanceGroupManagerVersionArrayOutput) ToInstanceGroupManagerVersionArrayOutput() InstanceGroupManagerVersionArrayOutput {
	return o
}

func (o InstanceGroupManagerVersionArrayOutput) ToInstanceGroupManagerVersionArrayOutputWithContext(ctx context.Context) InstanceGroupManagerVersionArrayOutput {
	return o
}

func (o InstanceGroupManagerVersionArrayOutput) Index(i pulumi.IntInput) InstanceGroupManagerVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceGroupManagerVersion {
		return vs[0].([]InstanceGroupManagerVersion)[vs[1].(int)]
	}).(InstanceGroupManagerVersionOutput)
}

type InstanceGroupManagerVersionTargetSize struct {
	// , The number of instances which are managed for this version. Conflicts with `percent`.
	Fixed *int `pulumi:"fixed"`
	// , The number of instances (calculated as percentage) which are managed for this version. Conflicts with `fixed`.
	// Note that when using `percent`, rounding will be in favor of explicitly set `targetSize` values; a managed instance group with 2 instances and 2 `version`s,
	// one of which has a `target_size.percent` of `60` will create 2 instances of that `version`.
	Percent *int `pulumi:"percent"`
}

// InstanceGroupManagerVersionTargetSizeInput is an input type that accepts InstanceGroupManagerVersionTargetSizeArgs and InstanceGroupManagerVersionTargetSizeOutput values.
// You can construct a concrete instance of `InstanceGroupManagerVersionTargetSizeInput` via:
//
// 		 InstanceGroupManagerVersionTargetSizeArgs{...}
//
type InstanceGroupManagerVersionTargetSizeInput interface {
	pulumi.Input

	ToInstanceGroupManagerVersionTargetSizeOutput() InstanceGroupManagerVersionTargetSizeOutput
	ToInstanceGroupManagerVersionTargetSizeOutputWithContext(context.Context) InstanceGroupManagerVersionTargetSizeOutput
}

type InstanceGroupManagerVersionTargetSizeArgs struct {
	// , The number of instances which are managed for this version. Conflicts with `percent`.
	Fixed pulumi.IntPtrInput `pulumi:"fixed"`
	// , The number of instances (calculated as percentage) which are managed for this version. Conflicts with `fixed`.
	// Note that when using `percent`, rounding will be in favor of explicitly set `targetSize` values; a managed instance group with 2 instances and 2 `version`s,
	// one of which has a `target_size.percent` of `60` will create 2 instances of that `version`.
	Percent pulumi.IntPtrInput `pulumi:"percent"`
}

func (InstanceGroupManagerVersionTargetSizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerVersionTargetSize)(nil)).Elem()
}

func (i InstanceGroupManagerVersionTargetSizeArgs) ToInstanceGroupManagerVersionTargetSizeOutput() InstanceGroupManagerVersionTargetSizeOutput {
	return i.ToInstanceGroupManagerVersionTargetSizeOutputWithContext(context.Background())
}

func (i InstanceGroupManagerVersionTargetSizeArgs) ToInstanceGroupManagerVersionTargetSizeOutputWithContext(ctx context.Context) InstanceGroupManagerVersionTargetSizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerVersionTargetSizeOutput)
}

func (i InstanceGroupManagerVersionTargetSizeArgs) ToInstanceGroupManagerVersionTargetSizePtrOutput() InstanceGroupManagerVersionTargetSizePtrOutput {
	return i.ToInstanceGroupManagerVersionTargetSizePtrOutputWithContext(context.Background())
}

func (i InstanceGroupManagerVersionTargetSizeArgs) ToInstanceGroupManagerVersionTargetSizePtrOutputWithContext(ctx context.Context) InstanceGroupManagerVersionTargetSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerVersionTargetSizeOutput).ToInstanceGroupManagerVersionTargetSizePtrOutputWithContext(ctx)
}

// InstanceGroupManagerVersionTargetSizePtrInput is an input type that accepts InstanceGroupManagerVersionTargetSizeArgs, InstanceGroupManagerVersionTargetSizePtr and InstanceGroupManagerVersionTargetSizePtrOutput values.
// You can construct a concrete instance of `InstanceGroupManagerVersionTargetSizePtrInput` via:
//
// 		 InstanceGroupManagerVersionTargetSizeArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceGroupManagerVersionTargetSizePtrInput interface {
	pulumi.Input

	ToInstanceGroupManagerVersionTargetSizePtrOutput() InstanceGroupManagerVersionTargetSizePtrOutput
	ToInstanceGroupManagerVersionTargetSizePtrOutputWithContext(context.Context) InstanceGroupManagerVersionTargetSizePtrOutput
}

type instanceGroupManagerVersionTargetSizePtrType InstanceGroupManagerVersionTargetSizeArgs

func InstanceGroupManagerVersionTargetSizePtr(v *InstanceGroupManagerVersionTargetSizeArgs) InstanceGroupManagerVersionTargetSizePtrInput {
	return (*instanceGroupManagerVersionTargetSizePtrType)(v)
}

func (*instanceGroupManagerVersionTargetSizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerVersionTargetSize)(nil)).Elem()
}

func (i *instanceGroupManagerVersionTargetSizePtrType) ToInstanceGroupManagerVersionTargetSizePtrOutput() InstanceGroupManagerVersionTargetSizePtrOutput {
	return i.ToInstanceGroupManagerVersionTargetSizePtrOutputWithContext(context.Background())
}

func (i *instanceGroupManagerVersionTargetSizePtrType) ToInstanceGroupManagerVersionTargetSizePtrOutputWithContext(ctx context.Context) InstanceGroupManagerVersionTargetSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerVersionTargetSizePtrOutput)
}

type InstanceGroupManagerVersionTargetSizeOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerVersionTargetSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerVersionTargetSize)(nil)).Elem()
}

func (o InstanceGroupManagerVersionTargetSizeOutput) ToInstanceGroupManagerVersionTargetSizeOutput() InstanceGroupManagerVersionTargetSizeOutput {
	return o
}

func (o InstanceGroupManagerVersionTargetSizeOutput) ToInstanceGroupManagerVersionTargetSizeOutputWithContext(ctx context.Context) InstanceGroupManagerVersionTargetSizeOutput {
	return o
}

func (o InstanceGroupManagerVersionTargetSizeOutput) ToInstanceGroupManagerVersionTargetSizePtrOutput() InstanceGroupManagerVersionTargetSizePtrOutput {
	return o.ToInstanceGroupManagerVersionTargetSizePtrOutputWithContext(context.Background())
}

func (o InstanceGroupManagerVersionTargetSizeOutput) ToInstanceGroupManagerVersionTargetSizePtrOutputWithContext(ctx context.Context) InstanceGroupManagerVersionTargetSizePtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerVersionTargetSize) *InstanceGroupManagerVersionTargetSize {
		return &v
	}).(InstanceGroupManagerVersionTargetSizePtrOutput)
}

// , The number of instances which are managed for this version. Conflicts with `percent`.
func (o InstanceGroupManagerVersionTargetSizeOutput) Fixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerVersionTargetSize) *int { return v.Fixed }).(pulumi.IntPtrOutput)
}

// , The number of instances (calculated as percentage) which are managed for this version. Conflicts with `fixed`.
// Note that when using `percent`, rounding will be in favor of explicitly set `targetSize` values; a managed instance group with 2 instances and 2 `version`s,
// one of which has a `target_size.percent` of `60` will create 2 instances of that `version`.
func (o InstanceGroupManagerVersionTargetSizeOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerVersionTargetSize) *int { return v.Percent }).(pulumi.IntPtrOutput)
}

type InstanceGroupManagerVersionTargetSizePtrOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerVersionTargetSizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerVersionTargetSize)(nil)).Elem()
}

func (o InstanceGroupManagerVersionTargetSizePtrOutput) ToInstanceGroupManagerVersionTargetSizePtrOutput() InstanceGroupManagerVersionTargetSizePtrOutput {
	return o
}

func (o InstanceGroupManagerVersionTargetSizePtrOutput) ToInstanceGroupManagerVersionTargetSizePtrOutputWithContext(ctx context.Context) InstanceGroupManagerVersionTargetSizePtrOutput {
	return o
}

func (o InstanceGroupManagerVersionTargetSizePtrOutput) Elem() InstanceGroupManagerVersionTargetSizeOutput {
	return o.ApplyT(func(v *InstanceGroupManagerVersionTargetSize) InstanceGroupManagerVersionTargetSize { return *v }).(InstanceGroupManagerVersionTargetSizeOutput)
}

// , The number of instances which are managed for this version. Conflicts with `percent`.
func (o InstanceGroupManagerVersionTargetSizePtrOutput) Fixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerVersionTargetSize) *int {
		if v == nil {
			return nil
		}
		return v.Fixed
	}).(pulumi.IntPtrOutput)
}

// , The number of instances (calculated as percentage) which are managed for this version. Conflicts with `fixed`.
// Note that when using `percent`, rounding will be in favor of explicitly set `targetSize` values; a managed instance group with 2 instances and 2 `version`s,
// one of which has a `target_size.percent` of `60` will create 2 instances of that `version`.
func (o InstanceGroupManagerVersionTargetSizePtrOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerVersionTargetSize) *int {
		if v == nil {
			return nil
		}
		return v.Percent
	}).(pulumi.IntPtrOutput)
}

type InstanceGroupNamedPortType struct {
	// The name which the port will be mapped to.
	Name string `pulumi:"name"`
	// The port number to map the name to.
	Port int `pulumi:"port"`
}

// InstanceGroupNamedPortTypeInput is an input type that accepts InstanceGroupNamedPortTypeArgs and InstanceGroupNamedPortTypeOutput values.
// You can construct a concrete instance of `InstanceGroupNamedPortTypeInput` via:
//
// 		 InstanceGroupNamedPortTypeArgs{...}
//
type InstanceGroupNamedPortTypeInput interface {
	pulumi.Input

	ToInstanceGroupNamedPortTypeOutput() InstanceGroupNamedPortTypeOutput
	ToInstanceGroupNamedPortTypeOutputWithContext(context.Context) InstanceGroupNamedPortTypeOutput
}

type InstanceGroupNamedPortTypeArgs struct {
	// The name which the port will be mapped to.
	Name pulumi.StringInput `pulumi:"name"`
	// The port number to map the name to.
	Port pulumi.IntInput `pulumi:"port"`
}

func (InstanceGroupNamedPortTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupNamedPortType)(nil)).Elem()
}

func (i InstanceGroupNamedPortTypeArgs) ToInstanceGroupNamedPortTypeOutput() InstanceGroupNamedPortTypeOutput {
	return i.ToInstanceGroupNamedPortTypeOutputWithContext(context.Background())
}

func (i InstanceGroupNamedPortTypeArgs) ToInstanceGroupNamedPortTypeOutputWithContext(ctx context.Context) InstanceGroupNamedPortTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupNamedPortTypeOutput)
}

// InstanceGroupNamedPortTypeArrayInput is an input type that accepts InstanceGroupNamedPortTypeArray and InstanceGroupNamedPortTypeArrayOutput values.
// You can construct a concrete instance of `InstanceGroupNamedPortTypeArrayInput` via:
//
// 		 InstanceGroupNamedPortTypeArray{ InstanceGroupNamedPortTypeArgs{...} }
//
type InstanceGroupNamedPortTypeArrayInput interface {
	pulumi.Input

	ToInstanceGroupNamedPortTypeArrayOutput() InstanceGroupNamedPortTypeArrayOutput
	ToInstanceGroupNamedPortTypeArrayOutputWithContext(context.Context) InstanceGroupNamedPortTypeArrayOutput
}

type InstanceGroupNamedPortTypeArray []InstanceGroupNamedPortTypeInput

func (InstanceGroupNamedPortTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupNamedPortType)(nil)).Elem()
}

func (i InstanceGroupNamedPortTypeArray) ToInstanceGroupNamedPortTypeArrayOutput() InstanceGroupNamedPortTypeArrayOutput {
	return i.ToInstanceGroupNamedPortTypeArrayOutputWithContext(context.Background())
}

func (i InstanceGroupNamedPortTypeArray) ToInstanceGroupNamedPortTypeArrayOutputWithContext(ctx context.Context) InstanceGroupNamedPortTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupNamedPortTypeArrayOutput)
}

type InstanceGroupNamedPortTypeOutput struct{ *pulumi.OutputState }

func (InstanceGroupNamedPortTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupNamedPortType)(nil)).Elem()
}

func (o InstanceGroupNamedPortTypeOutput) ToInstanceGroupNamedPortTypeOutput() InstanceGroupNamedPortTypeOutput {
	return o
}

func (o InstanceGroupNamedPortTypeOutput) ToInstanceGroupNamedPortTypeOutputWithContext(ctx context.Context) InstanceGroupNamedPortTypeOutput {
	return o
}

// The name which the port will be mapped to.
func (o InstanceGroupNamedPortTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceGroupNamedPortType) string { return v.Name }).(pulumi.StringOutput)
}

// The port number to map the name to.
func (o InstanceGroupNamedPortTypeOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceGroupNamedPortType) int { return v.Port }).(pulumi.IntOutput)
}

type InstanceGroupNamedPortTypeArrayOutput struct{ *pulumi.OutputState }

func (InstanceGroupNamedPortTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupNamedPortType)(nil)).Elem()
}

func (o InstanceGroupNamedPortTypeArrayOutput) ToInstanceGroupNamedPortTypeArrayOutput() InstanceGroupNamedPortTypeArrayOutput {
	return o
}

func (o InstanceGroupNamedPortTypeArrayOutput) ToInstanceGroupNamedPortTypeArrayOutputWithContext(ctx context.Context) InstanceGroupNamedPortTypeArrayOutput {
	return o
}

func (o InstanceGroupNamedPortTypeArrayOutput) Index(i pulumi.IntInput) InstanceGroupNamedPortTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceGroupNamedPortType {
		return vs[0].([]InstanceGroupNamedPortType)[vs[1].(int)]
	}).(InstanceGroupNamedPortTypeOutput)
}

type InstanceGuestAccelerator struct {
	// The number of the guest accelerator cards exposed to this instance.
	Count int `pulumi:"count"`
	// The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
	Type string `pulumi:"type"`
}

// InstanceGuestAcceleratorInput is an input type that accepts InstanceGuestAcceleratorArgs and InstanceGuestAcceleratorOutput values.
// You can construct a concrete instance of `InstanceGuestAcceleratorInput` via:
//
// 		 InstanceGuestAcceleratorArgs{...}
//
type InstanceGuestAcceleratorInput interface {
	pulumi.Input

	ToInstanceGuestAcceleratorOutput() InstanceGuestAcceleratorOutput
	ToInstanceGuestAcceleratorOutputWithContext(context.Context) InstanceGuestAcceleratorOutput
}

type InstanceGuestAcceleratorArgs struct {
	// The number of the guest accelerator cards exposed to this instance.
	Count pulumi.IntInput `pulumi:"count"`
	// The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (InstanceGuestAcceleratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGuestAccelerator)(nil)).Elem()
}

func (i InstanceGuestAcceleratorArgs) ToInstanceGuestAcceleratorOutput() InstanceGuestAcceleratorOutput {
	return i.ToInstanceGuestAcceleratorOutputWithContext(context.Background())
}

func (i InstanceGuestAcceleratorArgs) ToInstanceGuestAcceleratorOutputWithContext(ctx context.Context) InstanceGuestAcceleratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGuestAcceleratorOutput)
}

// InstanceGuestAcceleratorArrayInput is an input type that accepts InstanceGuestAcceleratorArray and InstanceGuestAcceleratorArrayOutput values.
// You can construct a concrete instance of `InstanceGuestAcceleratorArrayInput` via:
//
// 		 InstanceGuestAcceleratorArray{ InstanceGuestAcceleratorArgs{...} }
//
type InstanceGuestAcceleratorArrayInput interface {
	pulumi.Input

	ToInstanceGuestAcceleratorArrayOutput() InstanceGuestAcceleratorArrayOutput
	ToInstanceGuestAcceleratorArrayOutputWithContext(context.Context) InstanceGuestAcceleratorArrayOutput
}

type InstanceGuestAcceleratorArray []InstanceGuestAcceleratorInput

func (InstanceGuestAcceleratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGuestAccelerator)(nil)).Elem()
}

func (i InstanceGuestAcceleratorArray) ToInstanceGuestAcceleratorArrayOutput() InstanceGuestAcceleratorArrayOutput {
	return i.ToInstanceGuestAcceleratorArrayOutputWithContext(context.Background())
}

func (i InstanceGuestAcceleratorArray) ToInstanceGuestAcceleratorArrayOutputWithContext(ctx context.Context) InstanceGuestAcceleratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGuestAcceleratorArrayOutput)
}

type InstanceGuestAcceleratorOutput struct{ *pulumi.OutputState }

func (InstanceGuestAcceleratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGuestAccelerator)(nil)).Elem()
}

func (o InstanceGuestAcceleratorOutput) ToInstanceGuestAcceleratorOutput() InstanceGuestAcceleratorOutput {
	return o
}

func (o InstanceGuestAcceleratorOutput) ToInstanceGuestAcceleratorOutputWithContext(ctx context.Context) InstanceGuestAcceleratorOutput {
	return o
}

// The number of the guest accelerator cards exposed to this instance.
func (o InstanceGuestAcceleratorOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceGuestAccelerator) int { return v.Count }).(pulumi.IntOutput)
}

// The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
func (o InstanceGuestAcceleratorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceGuestAccelerator) string { return v.Type }).(pulumi.StringOutput)
}

type InstanceGuestAcceleratorArrayOutput struct{ *pulumi.OutputState }

func (InstanceGuestAcceleratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGuestAccelerator)(nil)).Elem()
}

func (o InstanceGuestAcceleratorArrayOutput) ToInstanceGuestAcceleratorArrayOutput() InstanceGuestAcceleratorArrayOutput {
	return o
}

func (o InstanceGuestAcceleratorArrayOutput) ToInstanceGuestAcceleratorArrayOutputWithContext(ctx context.Context) InstanceGuestAcceleratorArrayOutput {
	return o
}

func (o InstanceGuestAcceleratorArrayOutput) Index(i pulumi.IntInput) InstanceGuestAcceleratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceGuestAccelerator {
		return vs[0].([]InstanceGuestAccelerator)[vs[1].(int)]
	}).(InstanceGuestAcceleratorOutput)
}

type InstanceIAMBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// InstanceIAMBindingConditionInput is an input type that accepts InstanceIAMBindingConditionArgs and InstanceIAMBindingConditionOutput values.
// You can construct a concrete instance of `InstanceIAMBindingConditionInput` via:
//
// 		 InstanceIAMBindingConditionArgs{...}
//
type InstanceIAMBindingConditionInput interface {
	pulumi.Input

	ToInstanceIAMBindingConditionOutput() InstanceIAMBindingConditionOutput
	ToInstanceIAMBindingConditionOutputWithContext(context.Context) InstanceIAMBindingConditionOutput
}

type InstanceIAMBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (InstanceIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIAMBindingCondition)(nil)).Elem()
}

func (i InstanceIAMBindingConditionArgs) ToInstanceIAMBindingConditionOutput() InstanceIAMBindingConditionOutput {
	return i.ToInstanceIAMBindingConditionOutputWithContext(context.Background())
}

func (i InstanceIAMBindingConditionArgs) ToInstanceIAMBindingConditionOutputWithContext(ctx context.Context) InstanceIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIAMBindingConditionOutput)
}

func (i InstanceIAMBindingConditionArgs) ToInstanceIAMBindingConditionPtrOutput() InstanceIAMBindingConditionPtrOutput {
	return i.ToInstanceIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i InstanceIAMBindingConditionArgs) ToInstanceIAMBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIAMBindingConditionOutput).ToInstanceIAMBindingConditionPtrOutputWithContext(ctx)
}

// InstanceIAMBindingConditionPtrInput is an input type that accepts InstanceIAMBindingConditionArgs, InstanceIAMBindingConditionPtr and InstanceIAMBindingConditionPtrOutput values.
// You can construct a concrete instance of `InstanceIAMBindingConditionPtrInput` via:
//
// 		 InstanceIAMBindingConditionArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToInstanceIAMBindingConditionPtrOutput() InstanceIAMBindingConditionPtrOutput
	ToInstanceIAMBindingConditionPtrOutputWithContext(context.Context) InstanceIAMBindingConditionPtrOutput
}

type instanceIAMBindingConditionPtrType InstanceIAMBindingConditionArgs

func InstanceIAMBindingConditionPtr(v *InstanceIAMBindingConditionArgs) InstanceIAMBindingConditionPtrInput {
	return (*instanceIAMBindingConditionPtrType)(v)
}

func (*instanceIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIAMBindingCondition)(nil)).Elem()
}

func (i *instanceIAMBindingConditionPtrType) ToInstanceIAMBindingConditionPtrOutput() InstanceIAMBindingConditionPtrOutput {
	return i.ToInstanceIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *instanceIAMBindingConditionPtrType) ToInstanceIAMBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIAMBindingConditionPtrOutput)
}

type InstanceIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (InstanceIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIAMBindingCondition)(nil)).Elem()
}

func (o InstanceIAMBindingConditionOutput) ToInstanceIAMBindingConditionOutput() InstanceIAMBindingConditionOutput {
	return o
}

func (o InstanceIAMBindingConditionOutput) ToInstanceIAMBindingConditionOutputWithContext(ctx context.Context) InstanceIAMBindingConditionOutput {
	return o
}

func (o InstanceIAMBindingConditionOutput) ToInstanceIAMBindingConditionPtrOutput() InstanceIAMBindingConditionPtrOutput {
	return o.ToInstanceIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o InstanceIAMBindingConditionOutput) ToInstanceIAMBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIAMBindingConditionPtrOutput {
	return o.ApplyT(func(v InstanceIAMBindingCondition) *InstanceIAMBindingCondition {
		return &v
	}).(InstanceIAMBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o InstanceIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o InstanceIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o InstanceIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (InstanceIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIAMBindingCondition)(nil)).Elem()
}

func (o InstanceIAMBindingConditionPtrOutput) ToInstanceIAMBindingConditionPtrOutput() InstanceIAMBindingConditionPtrOutput {
	return o
}

func (o InstanceIAMBindingConditionPtrOutput) ToInstanceIAMBindingConditionPtrOutputWithContext(ctx context.Context) InstanceIAMBindingConditionPtrOutput {
	return o
}

func (o InstanceIAMBindingConditionPtrOutput) Elem() InstanceIAMBindingConditionOutput {
	return o.ApplyT(func(v *InstanceIAMBindingCondition) InstanceIAMBindingCondition { return *v }).(InstanceIAMBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o InstanceIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o InstanceIAMBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o InstanceIAMBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type InstanceIAMMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// InstanceIAMMemberConditionInput is an input type that accepts InstanceIAMMemberConditionArgs and InstanceIAMMemberConditionOutput values.
// You can construct a concrete instance of `InstanceIAMMemberConditionInput` via:
//
// 		 InstanceIAMMemberConditionArgs{...}
//
type InstanceIAMMemberConditionInput interface {
	pulumi.Input

	ToInstanceIAMMemberConditionOutput() InstanceIAMMemberConditionOutput
	ToInstanceIAMMemberConditionOutputWithContext(context.Context) InstanceIAMMemberConditionOutput
}

type InstanceIAMMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (InstanceIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIAMMemberCondition)(nil)).Elem()
}

func (i InstanceIAMMemberConditionArgs) ToInstanceIAMMemberConditionOutput() InstanceIAMMemberConditionOutput {
	return i.ToInstanceIAMMemberConditionOutputWithContext(context.Background())
}

func (i InstanceIAMMemberConditionArgs) ToInstanceIAMMemberConditionOutputWithContext(ctx context.Context) InstanceIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIAMMemberConditionOutput)
}

func (i InstanceIAMMemberConditionArgs) ToInstanceIAMMemberConditionPtrOutput() InstanceIAMMemberConditionPtrOutput {
	return i.ToInstanceIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i InstanceIAMMemberConditionArgs) ToInstanceIAMMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIAMMemberConditionOutput).ToInstanceIAMMemberConditionPtrOutputWithContext(ctx)
}

// InstanceIAMMemberConditionPtrInput is an input type that accepts InstanceIAMMemberConditionArgs, InstanceIAMMemberConditionPtr and InstanceIAMMemberConditionPtrOutput values.
// You can construct a concrete instance of `InstanceIAMMemberConditionPtrInput` via:
//
// 		 InstanceIAMMemberConditionArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToInstanceIAMMemberConditionPtrOutput() InstanceIAMMemberConditionPtrOutput
	ToInstanceIAMMemberConditionPtrOutputWithContext(context.Context) InstanceIAMMemberConditionPtrOutput
}

type instanceIAMMemberConditionPtrType InstanceIAMMemberConditionArgs

func InstanceIAMMemberConditionPtr(v *InstanceIAMMemberConditionArgs) InstanceIAMMemberConditionPtrInput {
	return (*instanceIAMMemberConditionPtrType)(v)
}

func (*instanceIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIAMMemberCondition)(nil)).Elem()
}

func (i *instanceIAMMemberConditionPtrType) ToInstanceIAMMemberConditionPtrOutput() InstanceIAMMemberConditionPtrOutput {
	return i.ToInstanceIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *instanceIAMMemberConditionPtrType) ToInstanceIAMMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIAMMemberConditionPtrOutput)
}

type InstanceIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (InstanceIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIAMMemberCondition)(nil)).Elem()
}

func (o InstanceIAMMemberConditionOutput) ToInstanceIAMMemberConditionOutput() InstanceIAMMemberConditionOutput {
	return o
}

func (o InstanceIAMMemberConditionOutput) ToInstanceIAMMemberConditionOutputWithContext(ctx context.Context) InstanceIAMMemberConditionOutput {
	return o
}

func (o InstanceIAMMemberConditionOutput) ToInstanceIAMMemberConditionPtrOutput() InstanceIAMMemberConditionPtrOutput {
	return o.ToInstanceIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o InstanceIAMMemberConditionOutput) ToInstanceIAMMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIAMMemberConditionPtrOutput {
	return o.ApplyT(func(v InstanceIAMMemberCondition) *InstanceIAMMemberCondition {
		return &v
	}).(InstanceIAMMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o InstanceIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o InstanceIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o InstanceIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type InstanceIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (InstanceIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIAMMemberCondition)(nil)).Elem()
}

func (o InstanceIAMMemberConditionPtrOutput) ToInstanceIAMMemberConditionPtrOutput() InstanceIAMMemberConditionPtrOutput {
	return o
}

func (o InstanceIAMMemberConditionPtrOutput) ToInstanceIAMMemberConditionPtrOutputWithContext(ctx context.Context) InstanceIAMMemberConditionPtrOutput {
	return o
}

func (o InstanceIAMMemberConditionPtrOutput) Elem() InstanceIAMMemberConditionOutput {
	return o.ApplyT(func(v *InstanceIAMMemberCondition) InstanceIAMMemberCondition { return *v }).(InstanceIAMMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o InstanceIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o InstanceIAMMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o InstanceIAMMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type InstanceNetworkInterface struct {
	// Access configurations, i.e. IPs via which this
	// instance can be accessed via the Internet. Omit to ensure that the instance
	// is not accessible from the Internet. If omitted, ssh will not
	// work unless this provider can send traffic to the instance's network (e.g. via
	// tunnel or because it is running on another cloud instance on that network).
	// This block can be repeated multiple times. Structure documented below.
	AccessConfigs []InstanceNetworkInterfaceAccessConfig `pulumi:"accessConfigs"`
	// An
	// array of alias IP ranges for this network interface. Can only be specified for network
	// interfaces on subnet-mode networks. Structure documented below.
	AliasIpRanges []InstanceNetworkInterfaceAliasIpRange `pulumi:"aliasIpRanges"`
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name or selfLink of the network to attach this interface to.
	// Either `network` or `subnetwork` must be provided.
	Network *string `pulumi:"network"`
	// The private IP address to assign to the instance. If
	// empty, the address will be automatically assigned.
	NetworkIp *string `pulumi:"networkIp"`
	// The name or selfLink of the subnetwork to attach this
	// interface to. The subnetwork must exist in the same region this instance will be
	// created in. Either `network` or `subnetwork` must be provided.
	Subnetwork *string `pulumi:"subnetwork"`
	// The project in which the subnetwork belongs.
	// If the `subnetwork` is a self_link, this field is ignored in favor of the project
	// defined in the subnetwork self_link. If the `subnetwork` is a name and this
	// field is not provided, the provider project is used.
	SubnetworkProject *string `pulumi:"subnetworkProject"`
}

// InstanceNetworkInterfaceInput is an input type that accepts InstanceNetworkInterfaceArgs and InstanceNetworkInterfaceOutput values.
// You can construct a concrete instance of `InstanceNetworkInterfaceInput` via:
//
// 		 InstanceNetworkInterfaceArgs{...}
//
type InstanceNetworkInterfaceInput interface {
	pulumi.Input

	ToInstanceNetworkInterfaceOutput() InstanceNetworkInterfaceOutput
	ToInstanceNetworkInterfaceOutputWithContext(context.Context) InstanceNetworkInterfaceOutput
}

type InstanceNetworkInterfaceArgs struct {
	// Access configurations, i.e. IPs via which this
	// instance can be accessed via the Internet. Omit to ensure that the instance
	// is not accessible from the Internet. If omitted, ssh will not
	// work unless this provider can send traffic to the instance's network (e.g. via
	// tunnel or because it is running on another cloud instance on that network).
	// This block can be repeated multiple times. Structure documented below.
	AccessConfigs InstanceNetworkInterfaceAccessConfigArrayInput `pulumi:"accessConfigs"`
	// An
	// array of alias IP ranges for this network interface. Can only be specified for network
	// interfaces on subnet-mode networks. Structure documented below.
	AliasIpRanges InstanceNetworkInterfaceAliasIpRangeArrayInput `pulumi:"aliasIpRanges"`
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name or selfLink of the network to attach this interface to.
	// Either `network` or `subnetwork` must be provided.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// The private IP address to assign to the instance. If
	// empty, the address will be automatically assigned.
	NetworkIp pulumi.StringPtrInput `pulumi:"networkIp"`
	// The name or selfLink of the subnetwork to attach this
	// interface to. The subnetwork must exist in the same region this instance will be
	// created in. Either `network` or `subnetwork` must be provided.
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
	// The project in which the subnetwork belongs.
	// If the `subnetwork` is a self_link, this field is ignored in favor of the project
	// defined in the subnetwork self_link. If the `subnetwork` is a name and this
	// field is not provided, the provider project is used.
	SubnetworkProject pulumi.StringPtrInput `pulumi:"subnetworkProject"`
}

func (InstanceNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNetworkInterface)(nil)).Elem()
}

func (i InstanceNetworkInterfaceArgs) ToInstanceNetworkInterfaceOutput() InstanceNetworkInterfaceOutput {
	return i.ToInstanceNetworkInterfaceOutputWithContext(context.Background())
}

func (i InstanceNetworkInterfaceArgs) ToInstanceNetworkInterfaceOutputWithContext(ctx context.Context) InstanceNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNetworkInterfaceOutput)
}

// InstanceNetworkInterfaceArrayInput is an input type that accepts InstanceNetworkInterfaceArray and InstanceNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `InstanceNetworkInterfaceArrayInput` via:
//
// 		 InstanceNetworkInterfaceArray{ InstanceNetworkInterfaceArgs{...} }
//
type InstanceNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToInstanceNetworkInterfaceArrayOutput() InstanceNetworkInterfaceArrayOutput
	ToInstanceNetworkInterfaceArrayOutputWithContext(context.Context) InstanceNetworkInterfaceArrayOutput
}

type InstanceNetworkInterfaceArray []InstanceNetworkInterfaceInput

func (InstanceNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNetworkInterface)(nil)).Elem()
}

func (i InstanceNetworkInterfaceArray) ToInstanceNetworkInterfaceArrayOutput() InstanceNetworkInterfaceArrayOutput {
	return i.ToInstanceNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i InstanceNetworkInterfaceArray) ToInstanceNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstanceNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNetworkInterfaceArrayOutput)
}

type InstanceNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (InstanceNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNetworkInterface)(nil)).Elem()
}

func (o InstanceNetworkInterfaceOutput) ToInstanceNetworkInterfaceOutput() InstanceNetworkInterfaceOutput {
	return o
}

func (o InstanceNetworkInterfaceOutput) ToInstanceNetworkInterfaceOutputWithContext(ctx context.Context) InstanceNetworkInterfaceOutput {
	return o
}

// Access configurations, i.e. IPs via which this
// instance can be accessed via the Internet. Omit to ensure that the instance
// is not accessible from the Internet. If omitted, ssh will not
// work unless this provider can send traffic to the instance's network (e.g. via
// tunnel or because it is running on another cloud instance on that network).
// This block can be repeated multiple times. Structure documented below.
func (o InstanceNetworkInterfaceOutput) AccessConfigs() InstanceNetworkInterfaceAccessConfigArrayOutput {
	return o.ApplyT(func(v InstanceNetworkInterface) []InstanceNetworkInterfaceAccessConfig { return v.AccessConfigs }).(InstanceNetworkInterfaceAccessConfigArrayOutput)
}

// An
// array of alias IP ranges for this network interface. Can only be specified for network
// interfaces on subnet-mode networks. Structure documented below.
func (o InstanceNetworkInterfaceOutput) AliasIpRanges() InstanceNetworkInterfaceAliasIpRangeArrayOutput {
	return o.ApplyT(func(v InstanceNetworkInterface) []InstanceNetworkInterfaceAliasIpRange { return v.AliasIpRanges }).(InstanceNetworkInterfaceAliasIpRangeArrayOutput)
}

// A unique name for the resource, required by GCE.
// Changing this forces a new resource to be created.
func (o InstanceNetworkInterfaceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNetworkInterface) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The name or selfLink of the network to attach this interface to.
// Either `network` or `subnetwork` must be provided.
func (o InstanceNetworkInterfaceOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNetworkInterface) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// The private IP address to assign to the instance. If
// empty, the address will be automatically assigned.
func (o InstanceNetworkInterfaceOutput) NetworkIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNetworkInterface) *string { return v.NetworkIp }).(pulumi.StringPtrOutput)
}

// The name or selfLink of the subnetwork to attach this
// interface to. The subnetwork must exist in the same region this instance will be
// created in. Either `network` or `subnetwork` must be provided.
func (o InstanceNetworkInterfaceOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNetworkInterface) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

// The project in which the subnetwork belongs.
// If the `subnetwork` is a self_link, this field is ignored in favor of the project
// defined in the subnetwork self_link. If the `subnetwork` is a name and this
// field is not provided, the provider project is used.
func (o InstanceNetworkInterfaceOutput) SubnetworkProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNetworkInterface) *string { return v.SubnetworkProject }).(pulumi.StringPtrOutput)
}

type InstanceNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (InstanceNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNetworkInterface)(nil)).Elem()
}

func (o InstanceNetworkInterfaceArrayOutput) ToInstanceNetworkInterfaceArrayOutput() InstanceNetworkInterfaceArrayOutput {
	return o
}

func (o InstanceNetworkInterfaceArrayOutput) ToInstanceNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstanceNetworkInterfaceArrayOutput {
	return o
}

func (o InstanceNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) InstanceNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceNetworkInterface {
		return vs[0].([]InstanceNetworkInterface)[vs[1].(int)]
	}).(InstanceNetworkInterfaceOutput)
}

type InstanceNetworkInterfaceAccessConfig struct {
	// The IP address that will be 1:1 mapped to the instance's
	// network ip. If not given, one will be generated.
	NatIp *string `pulumi:"natIp"`
	// The [networking tier][network-tier] used for configuring this instance.
	// This field can take the following values: PREMIUM or STANDARD. If this field is
	// not specified, it is assumed to be PREMIUM.
	NetworkTier *string `pulumi:"networkTier"`
	// The DNS domain name for the public PTR record.
	// To set this field on an instance, you must be verified as the owner of the domain.
	// See [the docs](https://cloud.google.com/compute/docs/instances/create-ptr-record) for how
	// to become verified as a domain owner.
	PublicPtrDomainName *string `pulumi:"publicPtrDomainName"`
}

// InstanceNetworkInterfaceAccessConfigInput is an input type that accepts InstanceNetworkInterfaceAccessConfigArgs and InstanceNetworkInterfaceAccessConfigOutput values.
// You can construct a concrete instance of `InstanceNetworkInterfaceAccessConfigInput` via:
//
// 		 InstanceNetworkInterfaceAccessConfigArgs{...}
//
type InstanceNetworkInterfaceAccessConfigInput interface {
	pulumi.Input

	ToInstanceNetworkInterfaceAccessConfigOutput() InstanceNetworkInterfaceAccessConfigOutput
	ToInstanceNetworkInterfaceAccessConfigOutputWithContext(context.Context) InstanceNetworkInterfaceAccessConfigOutput
}

type InstanceNetworkInterfaceAccessConfigArgs struct {
	// The IP address that will be 1:1 mapped to the instance's
	// network ip. If not given, one will be generated.
	NatIp pulumi.StringPtrInput `pulumi:"natIp"`
	// The [networking tier][network-tier] used for configuring this instance.
	// This field can take the following values: PREMIUM or STANDARD. If this field is
	// not specified, it is assumed to be PREMIUM.
	NetworkTier pulumi.StringPtrInput `pulumi:"networkTier"`
	// The DNS domain name for the public PTR record.
	// To set this field on an instance, you must be verified as the owner of the domain.
	// See [the docs](https://cloud.google.com/compute/docs/instances/create-ptr-record) for how
	// to become verified as a domain owner.
	PublicPtrDomainName pulumi.StringPtrInput `pulumi:"publicPtrDomainName"`
}

func (InstanceNetworkInterfaceAccessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNetworkInterfaceAccessConfig)(nil)).Elem()
}

func (i InstanceNetworkInterfaceAccessConfigArgs) ToInstanceNetworkInterfaceAccessConfigOutput() InstanceNetworkInterfaceAccessConfigOutput {
	return i.ToInstanceNetworkInterfaceAccessConfigOutputWithContext(context.Background())
}

func (i InstanceNetworkInterfaceAccessConfigArgs) ToInstanceNetworkInterfaceAccessConfigOutputWithContext(ctx context.Context) InstanceNetworkInterfaceAccessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNetworkInterfaceAccessConfigOutput)
}

// InstanceNetworkInterfaceAccessConfigArrayInput is an input type that accepts InstanceNetworkInterfaceAccessConfigArray and InstanceNetworkInterfaceAccessConfigArrayOutput values.
// You can construct a concrete instance of `InstanceNetworkInterfaceAccessConfigArrayInput` via:
//
// 		 InstanceNetworkInterfaceAccessConfigArray{ InstanceNetworkInterfaceAccessConfigArgs{...} }
//
type InstanceNetworkInterfaceAccessConfigArrayInput interface {
	pulumi.Input

	ToInstanceNetworkInterfaceAccessConfigArrayOutput() InstanceNetworkInterfaceAccessConfigArrayOutput
	ToInstanceNetworkInterfaceAccessConfigArrayOutputWithContext(context.Context) InstanceNetworkInterfaceAccessConfigArrayOutput
}

type InstanceNetworkInterfaceAccessConfigArray []InstanceNetworkInterfaceAccessConfigInput

func (InstanceNetworkInterfaceAccessConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNetworkInterfaceAccessConfig)(nil)).Elem()
}

func (i InstanceNetworkInterfaceAccessConfigArray) ToInstanceNetworkInterfaceAccessConfigArrayOutput() InstanceNetworkInterfaceAccessConfigArrayOutput {
	return i.ToInstanceNetworkInterfaceAccessConfigArrayOutputWithContext(context.Background())
}

func (i InstanceNetworkInterfaceAccessConfigArray) ToInstanceNetworkInterfaceAccessConfigArrayOutputWithContext(ctx context.Context) InstanceNetworkInterfaceAccessConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNetworkInterfaceAccessConfigArrayOutput)
}

type InstanceNetworkInterfaceAccessConfigOutput struct{ *pulumi.OutputState }

func (InstanceNetworkInterfaceAccessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNetworkInterfaceAccessConfig)(nil)).Elem()
}

func (o InstanceNetworkInterfaceAccessConfigOutput) ToInstanceNetworkInterfaceAccessConfigOutput() InstanceNetworkInterfaceAccessConfigOutput {
	return o
}

func (o InstanceNetworkInterfaceAccessConfigOutput) ToInstanceNetworkInterfaceAccessConfigOutputWithContext(ctx context.Context) InstanceNetworkInterfaceAccessConfigOutput {
	return o
}

// The IP address that will be 1:1 mapped to the instance's
// network ip. If not given, one will be generated.
func (o InstanceNetworkInterfaceAccessConfigOutput) NatIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNetworkInterfaceAccessConfig) *string { return v.NatIp }).(pulumi.StringPtrOutput)
}

// The [networking tier][network-tier] used for configuring this instance.
// This field can take the following values: PREMIUM or STANDARD. If this field is
// not specified, it is assumed to be PREMIUM.
func (o InstanceNetworkInterfaceAccessConfigOutput) NetworkTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNetworkInterfaceAccessConfig) *string { return v.NetworkTier }).(pulumi.StringPtrOutput)
}

// The DNS domain name for the public PTR record.
// To set this field on an instance, you must be verified as the owner of the domain.
// See [the docs](https://cloud.google.com/compute/docs/instances/create-ptr-record) for how
// to become verified as a domain owner.
func (o InstanceNetworkInterfaceAccessConfigOutput) PublicPtrDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNetworkInterfaceAccessConfig) *string { return v.PublicPtrDomainName }).(pulumi.StringPtrOutput)
}

type InstanceNetworkInterfaceAccessConfigArrayOutput struct{ *pulumi.OutputState }

func (InstanceNetworkInterfaceAccessConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNetworkInterfaceAccessConfig)(nil)).Elem()
}

func (o InstanceNetworkInterfaceAccessConfigArrayOutput) ToInstanceNetworkInterfaceAccessConfigArrayOutput() InstanceNetworkInterfaceAccessConfigArrayOutput {
	return o
}

func (o InstanceNetworkInterfaceAccessConfigArrayOutput) ToInstanceNetworkInterfaceAccessConfigArrayOutputWithContext(ctx context.Context) InstanceNetworkInterfaceAccessConfigArrayOutput {
	return o
}

func (o InstanceNetworkInterfaceAccessConfigArrayOutput) Index(i pulumi.IntInput) InstanceNetworkInterfaceAccessConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceNetworkInterfaceAccessConfig {
		return vs[0].([]InstanceNetworkInterfaceAccessConfig)[vs[1].(int)]
	}).(InstanceNetworkInterfaceAccessConfigOutput)
}

type InstanceNetworkInterfaceAliasIpRange struct {
	// The IP CIDR range represented by this alias IP range. This IP CIDR range
	// must belong to the specified subnetwork and cannot contain IP addresses reserved by
	// system or used by other network interfaces. This range may be a single IP address
	// (e.g. 10.2.3.4), a netmask (e.g. /24) or a CIDR format string (e.g. 10.1.2.0/24).
	IpCidrRange string `pulumi:"ipCidrRange"`
	// The subnetwork secondary range name specifying
	// the secondary range from which to allocate the IP CIDR range for this alias IP
	// range. If left unspecified, the primary range of the subnetwork will be used.
	SubnetworkRangeName *string `pulumi:"subnetworkRangeName"`
}

// InstanceNetworkInterfaceAliasIpRangeInput is an input type that accepts InstanceNetworkInterfaceAliasIpRangeArgs and InstanceNetworkInterfaceAliasIpRangeOutput values.
// You can construct a concrete instance of `InstanceNetworkInterfaceAliasIpRangeInput` via:
//
// 		 InstanceNetworkInterfaceAliasIpRangeArgs{...}
//
type InstanceNetworkInterfaceAliasIpRangeInput interface {
	pulumi.Input

	ToInstanceNetworkInterfaceAliasIpRangeOutput() InstanceNetworkInterfaceAliasIpRangeOutput
	ToInstanceNetworkInterfaceAliasIpRangeOutputWithContext(context.Context) InstanceNetworkInterfaceAliasIpRangeOutput
}

type InstanceNetworkInterfaceAliasIpRangeArgs struct {
	// The IP CIDR range represented by this alias IP range. This IP CIDR range
	// must belong to the specified subnetwork and cannot contain IP addresses reserved by
	// system or used by other network interfaces. This range may be a single IP address
	// (e.g. 10.2.3.4), a netmask (e.g. /24) or a CIDR format string (e.g. 10.1.2.0/24).
	IpCidrRange pulumi.StringInput `pulumi:"ipCidrRange"`
	// The subnetwork secondary range name specifying
	// the secondary range from which to allocate the IP CIDR range for this alias IP
	// range. If left unspecified, the primary range of the subnetwork will be used.
	SubnetworkRangeName pulumi.StringPtrInput `pulumi:"subnetworkRangeName"`
}

func (InstanceNetworkInterfaceAliasIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNetworkInterfaceAliasIpRange)(nil)).Elem()
}

func (i InstanceNetworkInterfaceAliasIpRangeArgs) ToInstanceNetworkInterfaceAliasIpRangeOutput() InstanceNetworkInterfaceAliasIpRangeOutput {
	return i.ToInstanceNetworkInterfaceAliasIpRangeOutputWithContext(context.Background())
}

func (i InstanceNetworkInterfaceAliasIpRangeArgs) ToInstanceNetworkInterfaceAliasIpRangeOutputWithContext(ctx context.Context) InstanceNetworkInterfaceAliasIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNetworkInterfaceAliasIpRangeOutput)
}

// InstanceNetworkInterfaceAliasIpRangeArrayInput is an input type that accepts InstanceNetworkInterfaceAliasIpRangeArray and InstanceNetworkInterfaceAliasIpRangeArrayOutput values.
// You can construct a concrete instance of `InstanceNetworkInterfaceAliasIpRangeArrayInput` via:
//
// 		 InstanceNetworkInterfaceAliasIpRangeArray{ InstanceNetworkInterfaceAliasIpRangeArgs{...} }
//
type InstanceNetworkInterfaceAliasIpRangeArrayInput interface {
	pulumi.Input

	ToInstanceNetworkInterfaceAliasIpRangeArrayOutput() InstanceNetworkInterfaceAliasIpRangeArrayOutput
	ToInstanceNetworkInterfaceAliasIpRangeArrayOutputWithContext(context.Context) InstanceNetworkInterfaceAliasIpRangeArrayOutput
}

type InstanceNetworkInterfaceAliasIpRangeArray []InstanceNetworkInterfaceAliasIpRangeInput

func (InstanceNetworkInterfaceAliasIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNetworkInterfaceAliasIpRange)(nil)).Elem()
}

func (i InstanceNetworkInterfaceAliasIpRangeArray) ToInstanceNetworkInterfaceAliasIpRangeArrayOutput() InstanceNetworkInterfaceAliasIpRangeArrayOutput {
	return i.ToInstanceNetworkInterfaceAliasIpRangeArrayOutputWithContext(context.Background())
}

func (i InstanceNetworkInterfaceAliasIpRangeArray) ToInstanceNetworkInterfaceAliasIpRangeArrayOutputWithContext(ctx context.Context) InstanceNetworkInterfaceAliasIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNetworkInterfaceAliasIpRangeArrayOutput)
}

type InstanceNetworkInterfaceAliasIpRangeOutput struct{ *pulumi.OutputState }

func (InstanceNetworkInterfaceAliasIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNetworkInterfaceAliasIpRange)(nil)).Elem()
}

func (o InstanceNetworkInterfaceAliasIpRangeOutput) ToInstanceNetworkInterfaceAliasIpRangeOutput() InstanceNetworkInterfaceAliasIpRangeOutput {
	return o
}

func (o InstanceNetworkInterfaceAliasIpRangeOutput) ToInstanceNetworkInterfaceAliasIpRangeOutputWithContext(ctx context.Context) InstanceNetworkInterfaceAliasIpRangeOutput {
	return o
}

// The IP CIDR range represented by this alias IP range. This IP CIDR range
// must belong to the specified subnetwork and cannot contain IP addresses reserved by
// system or used by other network interfaces. This range may be a single IP address
// (e.g. 10.2.3.4), a netmask (e.g. /24) or a CIDR format string (e.g. 10.1.2.0/24).
func (o InstanceNetworkInterfaceAliasIpRangeOutput) IpCidrRange() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceNetworkInterfaceAliasIpRange) string { return v.IpCidrRange }).(pulumi.StringOutput)
}

// The subnetwork secondary range name specifying
// the secondary range from which to allocate the IP CIDR range for this alias IP
// range. If left unspecified, the primary range of the subnetwork will be used.
func (o InstanceNetworkInterfaceAliasIpRangeOutput) SubnetworkRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNetworkInterfaceAliasIpRange) *string { return v.SubnetworkRangeName }).(pulumi.StringPtrOutput)
}

type InstanceNetworkInterfaceAliasIpRangeArrayOutput struct{ *pulumi.OutputState }

func (InstanceNetworkInterfaceAliasIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNetworkInterfaceAliasIpRange)(nil)).Elem()
}

func (o InstanceNetworkInterfaceAliasIpRangeArrayOutput) ToInstanceNetworkInterfaceAliasIpRangeArrayOutput() InstanceNetworkInterfaceAliasIpRangeArrayOutput {
	return o
}

func (o InstanceNetworkInterfaceAliasIpRangeArrayOutput) ToInstanceNetworkInterfaceAliasIpRangeArrayOutputWithContext(ctx context.Context) InstanceNetworkInterfaceAliasIpRangeArrayOutput {
	return o
}

func (o InstanceNetworkInterfaceAliasIpRangeArrayOutput) Index(i pulumi.IntInput) InstanceNetworkInterfaceAliasIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceNetworkInterfaceAliasIpRange {
		return vs[0].([]InstanceNetworkInterfaceAliasIpRange)[vs[1].(int)]
	}).(InstanceNetworkInterfaceAliasIpRangeOutput)
}

type InstanceScheduling struct {
	// Specifies if the instance should be
	// restarted if it was terminated by Compute Engine (not a user).
	// Defaults to true.
	AutomaticRestart *bool `pulumi:"automaticRestart"`
	// Specifies node affinities or anti-affinities
	// to determine which sole-tenant nodes your instances and managed instance
	// groups will use as host systems. Read more on sole-tenant node creation
	// [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
	// Structure documented below.
	NodeAffinities []InstanceSchedulingNodeAffinity `pulumi:"nodeAffinities"`
	// Describes maintenance behavior for the
	// instance. Can be MIGRATE or TERMINATE, for more info, read
	// [here](https://cloud.google.com/compute/docs/instances/setting-instance-scheduling-options).
	OnHostMaintenance *string `pulumi:"onHostMaintenance"`
	// Specifies if the instance is preemptible.
	// If this field is set to true, then `automaticRestart` must be
	// set to false.  Defaults to false.
	Preemptible *bool `pulumi:"preemptible"`
}

// InstanceSchedulingInput is an input type that accepts InstanceSchedulingArgs and InstanceSchedulingOutput values.
// You can construct a concrete instance of `InstanceSchedulingInput` via:
//
// 		 InstanceSchedulingArgs{...}
//
type InstanceSchedulingInput interface {
	pulumi.Input

	ToInstanceSchedulingOutput() InstanceSchedulingOutput
	ToInstanceSchedulingOutputWithContext(context.Context) InstanceSchedulingOutput
}

type InstanceSchedulingArgs struct {
	// Specifies if the instance should be
	// restarted if it was terminated by Compute Engine (not a user).
	// Defaults to true.
	AutomaticRestart pulumi.BoolPtrInput `pulumi:"automaticRestart"`
	// Specifies node affinities or anti-affinities
	// to determine which sole-tenant nodes your instances and managed instance
	// groups will use as host systems. Read more on sole-tenant node creation
	// [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
	// Structure documented below.
	NodeAffinities InstanceSchedulingNodeAffinityArrayInput `pulumi:"nodeAffinities"`
	// Describes maintenance behavior for the
	// instance. Can be MIGRATE or TERMINATE, for more info, read
	// [here](https://cloud.google.com/compute/docs/instances/setting-instance-scheduling-options).
	OnHostMaintenance pulumi.StringPtrInput `pulumi:"onHostMaintenance"`
	// Specifies if the instance is preemptible.
	// If this field is set to true, then `automaticRestart` must be
	// set to false.  Defaults to false.
	Preemptible pulumi.BoolPtrInput `pulumi:"preemptible"`
}

func (InstanceSchedulingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceScheduling)(nil)).Elem()
}

func (i InstanceSchedulingArgs) ToInstanceSchedulingOutput() InstanceSchedulingOutput {
	return i.ToInstanceSchedulingOutputWithContext(context.Background())
}

func (i InstanceSchedulingArgs) ToInstanceSchedulingOutputWithContext(ctx context.Context) InstanceSchedulingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSchedulingOutput)
}

func (i InstanceSchedulingArgs) ToInstanceSchedulingPtrOutput() InstanceSchedulingPtrOutput {
	return i.ToInstanceSchedulingPtrOutputWithContext(context.Background())
}

func (i InstanceSchedulingArgs) ToInstanceSchedulingPtrOutputWithContext(ctx context.Context) InstanceSchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSchedulingOutput).ToInstanceSchedulingPtrOutputWithContext(ctx)
}

// InstanceSchedulingPtrInput is an input type that accepts InstanceSchedulingArgs, InstanceSchedulingPtr and InstanceSchedulingPtrOutput values.
// You can construct a concrete instance of `InstanceSchedulingPtrInput` via:
//
// 		 InstanceSchedulingArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceSchedulingPtrInput interface {
	pulumi.Input

	ToInstanceSchedulingPtrOutput() InstanceSchedulingPtrOutput
	ToInstanceSchedulingPtrOutputWithContext(context.Context) InstanceSchedulingPtrOutput
}

type instanceSchedulingPtrType InstanceSchedulingArgs

func InstanceSchedulingPtr(v *InstanceSchedulingArgs) InstanceSchedulingPtrInput {
	return (*instanceSchedulingPtrType)(v)
}

func (*instanceSchedulingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceScheduling)(nil)).Elem()
}

func (i *instanceSchedulingPtrType) ToInstanceSchedulingPtrOutput() InstanceSchedulingPtrOutput {
	return i.ToInstanceSchedulingPtrOutputWithContext(context.Background())
}

func (i *instanceSchedulingPtrType) ToInstanceSchedulingPtrOutputWithContext(ctx context.Context) InstanceSchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSchedulingPtrOutput)
}

type InstanceSchedulingOutput struct{ *pulumi.OutputState }

func (InstanceSchedulingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceScheduling)(nil)).Elem()
}

func (o InstanceSchedulingOutput) ToInstanceSchedulingOutput() InstanceSchedulingOutput {
	return o
}

func (o InstanceSchedulingOutput) ToInstanceSchedulingOutputWithContext(ctx context.Context) InstanceSchedulingOutput {
	return o
}

func (o InstanceSchedulingOutput) ToInstanceSchedulingPtrOutput() InstanceSchedulingPtrOutput {
	return o.ToInstanceSchedulingPtrOutputWithContext(context.Background())
}

func (o InstanceSchedulingOutput) ToInstanceSchedulingPtrOutputWithContext(ctx context.Context) InstanceSchedulingPtrOutput {
	return o.ApplyT(func(v InstanceScheduling) *InstanceScheduling {
		return &v
	}).(InstanceSchedulingPtrOutput)
}

// Specifies if the instance should be
// restarted if it was terminated by Compute Engine (not a user).
// Defaults to true.
func (o InstanceSchedulingOutput) AutomaticRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceScheduling) *bool { return v.AutomaticRestart }).(pulumi.BoolPtrOutput)
}

// Specifies node affinities or anti-affinities
// to determine which sole-tenant nodes your instances and managed instance
// groups will use as host systems. Read more on sole-tenant node creation
// [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
// Structure documented below.
func (o InstanceSchedulingOutput) NodeAffinities() InstanceSchedulingNodeAffinityArrayOutput {
	return o.ApplyT(func(v InstanceScheduling) []InstanceSchedulingNodeAffinity { return v.NodeAffinities }).(InstanceSchedulingNodeAffinityArrayOutput)
}

// Describes maintenance behavior for the
// instance. Can be MIGRATE or TERMINATE, for more info, read
// [here](https://cloud.google.com/compute/docs/instances/setting-instance-scheduling-options).
func (o InstanceSchedulingOutput) OnHostMaintenance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceScheduling) *string { return v.OnHostMaintenance }).(pulumi.StringPtrOutput)
}

// Specifies if the instance is preemptible.
// If this field is set to true, then `automaticRestart` must be
// set to false.  Defaults to false.
func (o InstanceSchedulingOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceScheduling) *bool { return v.Preemptible }).(pulumi.BoolPtrOutput)
}

type InstanceSchedulingPtrOutput struct{ *pulumi.OutputState }

func (InstanceSchedulingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceScheduling)(nil)).Elem()
}

func (o InstanceSchedulingPtrOutput) ToInstanceSchedulingPtrOutput() InstanceSchedulingPtrOutput {
	return o
}

func (o InstanceSchedulingPtrOutput) ToInstanceSchedulingPtrOutputWithContext(ctx context.Context) InstanceSchedulingPtrOutput {
	return o
}

func (o InstanceSchedulingPtrOutput) Elem() InstanceSchedulingOutput {
	return o.ApplyT(func(v *InstanceScheduling) InstanceScheduling { return *v }).(InstanceSchedulingOutput)
}

// Specifies if the instance should be
// restarted if it was terminated by Compute Engine (not a user).
// Defaults to true.
func (o InstanceSchedulingPtrOutput) AutomaticRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceScheduling) *bool {
		if v == nil {
			return nil
		}
		return v.AutomaticRestart
	}).(pulumi.BoolPtrOutput)
}

// Specifies node affinities or anti-affinities
// to determine which sole-tenant nodes your instances and managed instance
// groups will use as host systems. Read more on sole-tenant node creation
// [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
// Structure documented below.
func (o InstanceSchedulingPtrOutput) NodeAffinities() InstanceSchedulingNodeAffinityArrayOutput {
	return o.ApplyT(func(v *InstanceScheduling) []InstanceSchedulingNodeAffinity {
		if v == nil {
			return nil
		}
		return v.NodeAffinities
	}).(InstanceSchedulingNodeAffinityArrayOutput)
}

// Describes maintenance behavior for the
// instance. Can be MIGRATE or TERMINATE, for more info, read
// [here](https://cloud.google.com/compute/docs/instances/setting-instance-scheduling-options).
func (o InstanceSchedulingPtrOutput) OnHostMaintenance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceScheduling) *string {
		if v == nil {
			return nil
		}
		return v.OnHostMaintenance
	}).(pulumi.StringPtrOutput)
}

// Specifies if the instance is preemptible.
// If this field is set to true, then `automaticRestart` must be
// set to false.  Defaults to false.
func (o InstanceSchedulingPtrOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceScheduling) *bool {
		if v == nil {
			return nil
		}
		return v.Preemptible
	}).(pulumi.BoolPtrOutput)
}

type InstanceSchedulingNodeAffinity struct {
	// The key for the node affinity label.
	Key string `pulumi:"key"`
	// The operator. Can be `IN` for node-affinities
	// or `NOT_IN` for anti-affinities.
	Operator string   `pulumi:"operator"`
	Values   []string `pulumi:"values"`
}

// InstanceSchedulingNodeAffinityInput is an input type that accepts InstanceSchedulingNodeAffinityArgs and InstanceSchedulingNodeAffinityOutput values.
// You can construct a concrete instance of `InstanceSchedulingNodeAffinityInput` via:
//
// 		 InstanceSchedulingNodeAffinityArgs{...}
//
type InstanceSchedulingNodeAffinityInput interface {
	pulumi.Input

	ToInstanceSchedulingNodeAffinityOutput() InstanceSchedulingNodeAffinityOutput
	ToInstanceSchedulingNodeAffinityOutputWithContext(context.Context) InstanceSchedulingNodeAffinityOutput
}

type InstanceSchedulingNodeAffinityArgs struct {
	// The key for the node affinity label.
	Key pulumi.StringInput `pulumi:"key"`
	// The operator. Can be `IN` for node-affinities
	// or `NOT_IN` for anti-affinities.
	Operator pulumi.StringInput      `pulumi:"operator"`
	Values   pulumi.StringArrayInput `pulumi:"values"`
}

func (InstanceSchedulingNodeAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSchedulingNodeAffinity)(nil)).Elem()
}

func (i InstanceSchedulingNodeAffinityArgs) ToInstanceSchedulingNodeAffinityOutput() InstanceSchedulingNodeAffinityOutput {
	return i.ToInstanceSchedulingNodeAffinityOutputWithContext(context.Background())
}

func (i InstanceSchedulingNodeAffinityArgs) ToInstanceSchedulingNodeAffinityOutputWithContext(ctx context.Context) InstanceSchedulingNodeAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSchedulingNodeAffinityOutput)
}

// InstanceSchedulingNodeAffinityArrayInput is an input type that accepts InstanceSchedulingNodeAffinityArray and InstanceSchedulingNodeAffinityArrayOutput values.
// You can construct a concrete instance of `InstanceSchedulingNodeAffinityArrayInput` via:
//
// 		 InstanceSchedulingNodeAffinityArray{ InstanceSchedulingNodeAffinityArgs{...} }
//
type InstanceSchedulingNodeAffinityArrayInput interface {
	pulumi.Input

	ToInstanceSchedulingNodeAffinityArrayOutput() InstanceSchedulingNodeAffinityArrayOutput
	ToInstanceSchedulingNodeAffinityArrayOutputWithContext(context.Context) InstanceSchedulingNodeAffinityArrayOutput
}

type InstanceSchedulingNodeAffinityArray []InstanceSchedulingNodeAffinityInput

func (InstanceSchedulingNodeAffinityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSchedulingNodeAffinity)(nil)).Elem()
}

func (i InstanceSchedulingNodeAffinityArray) ToInstanceSchedulingNodeAffinityArrayOutput() InstanceSchedulingNodeAffinityArrayOutput {
	return i.ToInstanceSchedulingNodeAffinityArrayOutputWithContext(context.Background())
}

func (i InstanceSchedulingNodeAffinityArray) ToInstanceSchedulingNodeAffinityArrayOutputWithContext(ctx context.Context) InstanceSchedulingNodeAffinityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSchedulingNodeAffinityArrayOutput)
}

type InstanceSchedulingNodeAffinityOutput struct{ *pulumi.OutputState }

func (InstanceSchedulingNodeAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSchedulingNodeAffinity)(nil)).Elem()
}

func (o InstanceSchedulingNodeAffinityOutput) ToInstanceSchedulingNodeAffinityOutput() InstanceSchedulingNodeAffinityOutput {
	return o
}

func (o InstanceSchedulingNodeAffinityOutput) ToInstanceSchedulingNodeAffinityOutputWithContext(ctx context.Context) InstanceSchedulingNodeAffinityOutput {
	return o
}

// The key for the node affinity label.
func (o InstanceSchedulingNodeAffinityOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSchedulingNodeAffinity) string { return v.Key }).(pulumi.StringOutput)
}

// The operator. Can be `IN` for node-affinities
// or `NOT_IN` for anti-affinities.
func (o InstanceSchedulingNodeAffinityOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSchedulingNodeAffinity) string { return v.Operator }).(pulumi.StringOutput)
}

func (o InstanceSchedulingNodeAffinityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceSchedulingNodeAffinity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type InstanceSchedulingNodeAffinityArrayOutput struct{ *pulumi.OutputState }

func (InstanceSchedulingNodeAffinityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSchedulingNodeAffinity)(nil)).Elem()
}

func (o InstanceSchedulingNodeAffinityArrayOutput) ToInstanceSchedulingNodeAffinityArrayOutput() InstanceSchedulingNodeAffinityArrayOutput {
	return o
}

func (o InstanceSchedulingNodeAffinityArrayOutput) ToInstanceSchedulingNodeAffinityArrayOutputWithContext(ctx context.Context) InstanceSchedulingNodeAffinityArrayOutput {
	return o
}

func (o InstanceSchedulingNodeAffinityArrayOutput) Index(i pulumi.IntInput) InstanceSchedulingNodeAffinityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceSchedulingNodeAffinity {
		return vs[0].([]InstanceSchedulingNodeAffinity)[vs[1].(int)]
	}).(InstanceSchedulingNodeAffinityOutput)
}

type InstanceScratchDisk struct {
	// The disk interface to use for attaching this disk; either SCSI or NVME.
	Interface string `pulumi:"interface"`
}

// InstanceScratchDiskInput is an input type that accepts InstanceScratchDiskArgs and InstanceScratchDiskOutput values.
// You can construct a concrete instance of `InstanceScratchDiskInput` via:
//
// 		 InstanceScratchDiskArgs{...}
//
type InstanceScratchDiskInput interface {
	pulumi.Input

	ToInstanceScratchDiskOutput() InstanceScratchDiskOutput
	ToInstanceScratchDiskOutputWithContext(context.Context) InstanceScratchDiskOutput
}

type InstanceScratchDiskArgs struct {
	// The disk interface to use for attaching this disk; either SCSI or NVME.
	Interface pulumi.StringInput `pulumi:"interface"`
}

func (InstanceScratchDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceScratchDisk)(nil)).Elem()
}

func (i InstanceScratchDiskArgs) ToInstanceScratchDiskOutput() InstanceScratchDiskOutput {
	return i.ToInstanceScratchDiskOutputWithContext(context.Background())
}

func (i InstanceScratchDiskArgs) ToInstanceScratchDiskOutputWithContext(ctx context.Context) InstanceScratchDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceScratchDiskOutput)
}

// InstanceScratchDiskArrayInput is an input type that accepts InstanceScratchDiskArray and InstanceScratchDiskArrayOutput values.
// You can construct a concrete instance of `InstanceScratchDiskArrayInput` via:
//
// 		 InstanceScratchDiskArray{ InstanceScratchDiskArgs{...} }
//
type InstanceScratchDiskArrayInput interface {
	pulumi.Input

	ToInstanceScratchDiskArrayOutput() InstanceScratchDiskArrayOutput
	ToInstanceScratchDiskArrayOutputWithContext(context.Context) InstanceScratchDiskArrayOutput
}

type InstanceScratchDiskArray []InstanceScratchDiskInput

func (InstanceScratchDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceScratchDisk)(nil)).Elem()
}

func (i InstanceScratchDiskArray) ToInstanceScratchDiskArrayOutput() InstanceScratchDiskArrayOutput {
	return i.ToInstanceScratchDiskArrayOutputWithContext(context.Background())
}

func (i InstanceScratchDiskArray) ToInstanceScratchDiskArrayOutputWithContext(ctx context.Context) InstanceScratchDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceScratchDiskArrayOutput)
}

type InstanceScratchDiskOutput struct{ *pulumi.OutputState }

func (InstanceScratchDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceScratchDisk)(nil)).Elem()
}

func (o InstanceScratchDiskOutput) ToInstanceScratchDiskOutput() InstanceScratchDiskOutput {
	return o
}

func (o InstanceScratchDiskOutput) ToInstanceScratchDiskOutputWithContext(ctx context.Context) InstanceScratchDiskOutput {
	return o
}

// The disk interface to use for attaching this disk; either SCSI or NVME.
func (o InstanceScratchDiskOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceScratchDisk) string { return v.Interface }).(pulumi.StringOutput)
}

type InstanceScratchDiskArrayOutput struct{ *pulumi.OutputState }

func (InstanceScratchDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceScratchDisk)(nil)).Elem()
}

func (o InstanceScratchDiskArrayOutput) ToInstanceScratchDiskArrayOutput() InstanceScratchDiskArrayOutput {
	return o
}

func (o InstanceScratchDiskArrayOutput) ToInstanceScratchDiskArrayOutputWithContext(ctx context.Context) InstanceScratchDiskArrayOutput {
	return o
}

func (o InstanceScratchDiskArrayOutput) Index(i pulumi.IntInput) InstanceScratchDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceScratchDisk {
		return vs[0].([]InstanceScratchDisk)[vs[1].(int)]
	}).(InstanceScratchDiskOutput)
}

type InstanceServiceAccount struct {
	// The service account e-mail address. If not given, the
	// default Google Compute Engine service account is used.
	// **Note**: `allowStoppingForUpdate` must be set to true or your instance must have a `desiredStatus` of `TERMINATED` in order to update this field.
	Email *string `pulumi:"email"`
	// A list of service scopes. Both OAuth2 URLs and gcloud
	// short names are supported. To allow full access to all Cloud APIs, use the
	// `cloud-platform` scope. See a complete list of scopes [here](https://cloud.google.com/sdk/gcloud/reference/alpha/compute/instances/set-scopes#--scopes).
	// **Note**: `allowStoppingForUpdate` must be set to true or your instance must have a `desiredStatus` of `TERMINATED` in order to update this field.
	Scopes []string `pulumi:"scopes"`
}

// InstanceServiceAccountInput is an input type that accepts InstanceServiceAccountArgs and InstanceServiceAccountOutput values.
// You can construct a concrete instance of `InstanceServiceAccountInput` via:
//
// 		 InstanceServiceAccountArgs{...}
//
type InstanceServiceAccountInput interface {
	pulumi.Input

	ToInstanceServiceAccountOutput() InstanceServiceAccountOutput
	ToInstanceServiceAccountOutputWithContext(context.Context) InstanceServiceAccountOutput
}

type InstanceServiceAccountArgs struct {
	// The service account e-mail address. If not given, the
	// default Google Compute Engine service account is used.
	// **Note**: `allowStoppingForUpdate` must be set to true or your instance must have a `desiredStatus` of `TERMINATED` in order to update this field.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// A list of service scopes. Both OAuth2 URLs and gcloud
	// short names are supported. To allow full access to all Cloud APIs, use the
	// `cloud-platform` scope. See a complete list of scopes [here](https://cloud.google.com/sdk/gcloud/reference/alpha/compute/instances/set-scopes#--scopes).
	// **Note**: `allowStoppingForUpdate` must be set to true or your instance must have a `desiredStatus` of `TERMINATED` in order to update this field.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (InstanceServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceServiceAccount)(nil)).Elem()
}

func (i InstanceServiceAccountArgs) ToInstanceServiceAccountOutput() InstanceServiceAccountOutput {
	return i.ToInstanceServiceAccountOutputWithContext(context.Background())
}

func (i InstanceServiceAccountArgs) ToInstanceServiceAccountOutputWithContext(ctx context.Context) InstanceServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceServiceAccountOutput)
}

func (i InstanceServiceAccountArgs) ToInstanceServiceAccountPtrOutput() InstanceServiceAccountPtrOutput {
	return i.ToInstanceServiceAccountPtrOutputWithContext(context.Background())
}

func (i InstanceServiceAccountArgs) ToInstanceServiceAccountPtrOutputWithContext(ctx context.Context) InstanceServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceServiceAccountOutput).ToInstanceServiceAccountPtrOutputWithContext(ctx)
}

// InstanceServiceAccountPtrInput is an input type that accepts InstanceServiceAccountArgs, InstanceServiceAccountPtr and InstanceServiceAccountPtrOutput values.
// You can construct a concrete instance of `InstanceServiceAccountPtrInput` via:
//
// 		 InstanceServiceAccountArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceServiceAccountPtrInput interface {
	pulumi.Input

	ToInstanceServiceAccountPtrOutput() InstanceServiceAccountPtrOutput
	ToInstanceServiceAccountPtrOutputWithContext(context.Context) InstanceServiceAccountPtrOutput
}

type instanceServiceAccountPtrType InstanceServiceAccountArgs

func InstanceServiceAccountPtr(v *InstanceServiceAccountArgs) InstanceServiceAccountPtrInput {
	return (*instanceServiceAccountPtrType)(v)
}

func (*instanceServiceAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceServiceAccount)(nil)).Elem()
}

func (i *instanceServiceAccountPtrType) ToInstanceServiceAccountPtrOutput() InstanceServiceAccountPtrOutput {
	return i.ToInstanceServiceAccountPtrOutputWithContext(context.Background())
}

func (i *instanceServiceAccountPtrType) ToInstanceServiceAccountPtrOutputWithContext(ctx context.Context) InstanceServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceServiceAccountPtrOutput)
}

type InstanceServiceAccountOutput struct{ *pulumi.OutputState }

func (InstanceServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceServiceAccount)(nil)).Elem()
}

func (o InstanceServiceAccountOutput) ToInstanceServiceAccountOutput() InstanceServiceAccountOutput {
	return o
}

func (o InstanceServiceAccountOutput) ToInstanceServiceAccountOutputWithContext(ctx context.Context) InstanceServiceAccountOutput {
	return o
}

func (o InstanceServiceAccountOutput) ToInstanceServiceAccountPtrOutput() InstanceServiceAccountPtrOutput {
	return o.ToInstanceServiceAccountPtrOutputWithContext(context.Background())
}

func (o InstanceServiceAccountOutput) ToInstanceServiceAccountPtrOutputWithContext(ctx context.Context) InstanceServiceAccountPtrOutput {
	return o.ApplyT(func(v InstanceServiceAccount) *InstanceServiceAccount {
		return &v
	}).(InstanceServiceAccountPtrOutput)
}

// The service account e-mail address. If not given, the
// default Google Compute Engine service account is used.
// **Note**: `allowStoppingForUpdate` must be set to true or your instance must have a `desiredStatus` of `TERMINATED` in order to update this field.
func (o InstanceServiceAccountOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceServiceAccount) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// A list of service scopes. Both OAuth2 URLs and gcloud
// short names are supported. To allow full access to all Cloud APIs, use the
// `cloud-platform` scope. See a complete list of scopes [here](https://cloud.google.com/sdk/gcloud/reference/alpha/compute/instances/set-scopes#--scopes).
// **Note**: `allowStoppingForUpdate` must be set to true or your instance must have a `desiredStatus` of `TERMINATED` in order to update this field.
func (o InstanceServiceAccountOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceServiceAccount) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type InstanceServiceAccountPtrOutput struct{ *pulumi.OutputState }

func (InstanceServiceAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceServiceAccount)(nil)).Elem()
}

func (o InstanceServiceAccountPtrOutput) ToInstanceServiceAccountPtrOutput() InstanceServiceAccountPtrOutput {
	return o
}

func (o InstanceServiceAccountPtrOutput) ToInstanceServiceAccountPtrOutputWithContext(ctx context.Context) InstanceServiceAccountPtrOutput {
	return o
}

func (o InstanceServiceAccountPtrOutput) Elem() InstanceServiceAccountOutput {
	return o.ApplyT(func(v *InstanceServiceAccount) InstanceServiceAccount { return *v }).(InstanceServiceAccountOutput)
}

// The service account e-mail address. If not given, the
// default Google Compute Engine service account is used.
// **Note**: `allowStoppingForUpdate` must be set to true or your instance must have a `desiredStatus` of `TERMINATED` in order to update this field.
func (o InstanceServiceAccountPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// A list of service scopes. Both OAuth2 URLs and gcloud
// short names are supported. To allow full access to all Cloud APIs, use the
// `cloud-platform` scope. See a complete list of scopes [here](https://cloud.google.com/sdk/gcloud/reference/alpha/compute/instances/set-scopes#--scopes).
// **Note**: `allowStoppingForUpdate` must be set to true or your instance must have a `desiredStatus` of `TERMINATED` in order to update this field.
func (o InstanceServiceAccountPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceServiceAccount) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

type InstanceShieldedInstanceConfig struct {
	// -- Compare the most recent boot measurements to the integrity policy baseline and return a pair of pass/fail results depending on whether they match or not. Defaults to true.
	EnableIntegrityMonitoring *bool `pulumi:"enableIntegrityMonitoring"`
	// -- Verify the digital signature of all boot components, and halt the boot process if signature verification fails. Defaults to false.
	EnableSecureBoot *bool `pulumi:"enableSecureBoot"`
	// -- Use a virtualized trusted platform module, which is a specialized computer chip you can use to encrypt objects like keys and certificates. Defaults to true.
	EnableVtpm *bool `pulumi:"enableVtpm"`
}

// InstanceShieldedInstanceConfigInput is an input type that accepts InstanceShieldedInstanceConfigArgs and InstanceShieldedInstanceConfigOutput values.
// You can construct a concrete instance of `InstanceShieldedInstanceConfigInput` via:
//
// 		 InstanceShieldedInstanceConfigArgs{...}
//
type InstanceShieldedInstanceConfigInput interface {
	pulumi.Input

	ToInstanceShieldedInstanceConfigOutput() InstanceShieldedInstanceConfigOutput
	ToInstanceShieldedInstanceConfigOutputWithContext(context.Context) InstanceShieldedInstanceConfigOutput
}

type InstanceShieldedInstanceConfigArgs struct {
	// -- Compare the most recent boot measurements to the integrity policy baseline and return a pair of pass/fail results depending on whether they match or not. Defaults to true.
	EnableIntegrityMonitoring pulumi.BoolPtrInput `pulumi:"enableIntegrityMonitoring"`
	// -- Verify the digital signature of all boot components, and halt the boot process if signature verification fails. Defaults to false.
	EnableSecureBoot pulumi.BoolPtrInput `pulumi:"enableSecureBoot"`
	// -- Use a virtualized trusted platform module, which is a specialized computer chip you can use to encrypt objects like keys and certificates. Defaults to true.
	EnableVtpm pulumi.BoolPtrInput `pulumi:"enableVtpm"`
}

func (InstanceShieldedInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceShieldedInstanceConfig)(nil)).Elem()
}

func (i InstanceShieldedInstanceConfigArgs) ToInstanceShieldedInstanceConfigOutput() InstanceShieldedInstanceConfigOutput {
	return i.ToInstanceShieldedInstanceConfigOutputWithContext(context.Background())
}

func (i InstanceShieldedInstanceConfigArgs) ToInstanceShieldedInstanceConfigOutputWithContext(ctx context.Context) InstanceShieldedInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceShieldedInstanceConfigOutput)
}

func (i InstanceShieldedInstanceConfigArgs) ToInstanceShieldedInstanceConfigPtrOutput() InstanceShieldedInstanceConfigPtrOutput {
	return i.ToInstanceShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i InstanceShieldedInstanceConfigArgs) ToInstanceShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) InstanceShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceShieldedInstanceConfigOutput).ToInstanceShieldedInstanceConfigPtrOutputWithContext(ctx)
}

// InstanceShieldedInstanceConfigPtrInput is an input type that accepts InstanceShieldedInstanceConfigArgs, InstanceShieldedInstanceConfigPtr and InstanceShieldedInstanceConfigPtrOutput values.
// You can construct a concrete instance of `InstanceShieldedInstanceConfigPtrInput` via:
//
// 		 InstanceShieldedInstanceConfigArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceShieldedInstanceConfigPtrInput interface {
	pulumi.Input

	ToInstanceShieldedInstanceConfigPtrOutput() InstanceShieldedInstanceConfigPtrOutput
	ToInstanceShieldedInstanceConfigPtrOutputWithContext(context.Context) InstanceShieldedInstanceConfigPtrOutput
}

type instanceShieldedInstanceConfigPtrType InstanceShieldedInstanceConfigArgs

func InstanceShieldedInstanceConfigPtr(v *InstanceShieldedInstanceConfigArgs) InstanceShieldedInstanceConfigPtrInput {
	return (*instanceShieldedInstanceConfigPtrType)(v)
}

func (*instanceShieldedInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceShieldedInstanceConfig)(nil)).Elem()
}

func (i *instanceShieldedInstanceConfigPtrType) ToInstanceShieldedInstanceConfigPtrOutput() InstanceShieldedInstanceConfigPtrOutput {
	return i.ToInstanceShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *instanceShieldedInstanceConfigPtrType) ToInstanceShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) InstanceShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceShieldedInstanceConfigPtrOutput)
}

type InstanceShieldedInstanceConfigOutput struct{ *pulumi.OutputState }

func (InstanceShieldedInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceShieldedInstanceConfig)(nil)).Elem()
}

func (o InstanceShieldedInstanceConfigOutput) ToInstanceShieldedInstanceConfigOutput() InstanceShieldedInstanceConfigOutput {
	return o
}

func (o InstanceShieldedInstanceConfigOutput) ToInstanceShieldedInstanceConfigOutputWithContext(ctx context.Context) InstanceShieldedInstanceConfigOutput {
	return o
}

func (o InstanceShieldedInstanceConfigOutput) ToInstanceShieldedInstanceConfigPtrOutput() InstanceShieldedInstanceConfigPtrOutput {
	return o.ToInstanceShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (o InstanceShieldedInstanceConfigOutput) ToInstanceShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) InstanceShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v InstanceShieldedInstanceConfig) *InstanceShieldedInstanceConfig {
		return &v
	}).(InstanceShieldedInstanceConfigPtrOutput)
}

// -- Compare the most recent boot measurements to the integrity policy baseline and return a pair of pass/fail results depending on whether they match or not. Defaults to true.
func (o InstanceShieldedInstanceConfigOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceShieldedInstanceConfig) *bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolPtrOutput)
}

// -- Verify the digital signature of all boot components, and halt the boot process if signature verification fails. Defaults to false.
func (o InstanceShieldedInstanceConfigOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceShieldedInstanceConfig) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

// -- Use a virtualized trusted platform module, which is a specialized computer chip you can use to encrypt objects like keys and certificates. Defaults to true.
func (o InstanceShieldedInstanceConfigOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceShieldedInstanceConfig) *bool { return v.EnableVtpm }).(pulumi.BoolPtrOutput)
}

type InstanceShieldedInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (InstanceShieldedInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceShieldedInstanceConfig)(nil)).Elem()
}

func (o InstanceShieldedInstanceConfigPtrOutput) ToInstanceShieldedInstanceConfigPtrOutput() InstanceShieldedInstanceConfigPtrOutput {
	return o
}

func (o InstanceShieldedInstanceConfigPtrOutput) ToInstanceShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) InstanceShieldedInstanceConfigPtrOutput {
	return o
}

func (o InstanceShieldedInstanceConfigPtrOutput) Elem() InstanceShieldedInstanceConfigOutput {
	return o.ApplyT(func(v *InstanceShieldedInstanceConfig) InstanceShieldedInstanceConfig { return *v }).(InstanceShieldedInstanceConfigOutput)
}

// -- Compare the most recent boot measurements to the integrity policy baseline and return a pair of pass/fail results depending on whether they match or not. Defaults to true.
func (o InstanceShieldedInstanceConfigPtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

// -- Verify the digital signature of all boot components, and halt the boot process if signature verification fails. Defaults to false.
func (o InstanceShieldedInstanceConfigPtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// -- Use a virtualized trusted platform module, which is a specialized computer chip you can use to encrypt objects like keys and certificates. Defaults to true.
func (o InstanceShieldedInstanceConfigPtrOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVtpm
	}).(pulumi.BoolPtrOutput)
}

type InstanceTemplateDisk struct {
	// Whether or not the disk should be auto-deleted.
	// This defaults to true.
	AutoDelete *bool `pulumi:"autoDelete"`
	// Indicates that this is a boot disk.
	Boot *bool `pulumi:"boot"`
	// A unique device name that is reflected into the
	// /dev/  tree of a Linux operating system running within the instance. If not
	// specified, the server chooses a default device name to apply to this disk.
	DeviceName *string `pulumi:"deviceName"`
	// Encrypts or decrypts a disk using a customer-supplied encryption key.
	DiskEncryptionKey *InstanceTemplateDiskDiskEncryptionKey `pulumi:"diskEncryptionKey"`
	// Name of the disk. When not provided, this defaults
	// to the name of the instance.
	DiskName *string `pulumi:"diskName"`
	// The size of the image in gigabytes. If not
	// specified, it will inherit the size of its base image. For SCRATCH disks,
	// the size must be exactly 375GB.
	DiskSizeGb *int `pulumi:"diskSizeGb"`
	// The GCE disk type. Can be either `"pd-ssd"`,
	// `"local-ssd"`, or `"pd-standard"`.
	DiskType *string `pulumi:"diskType"`
	// Specifies the disk interface to use for attaching
	// this disk.
	Interface *string `pulumi:"interface"`
	// A set of key/value label pairs to assign to instances
	// created from this template,
	Labels map[string]string `pulumi:"labels"`
	// The mode in which to attach this disk, either READ_WRITE
	// or READ_ONLY. If you are attaching or creating a boot disk, this must
	// read-write mode.
	Mode *string `pulumi:"mode"`
	// The name (**not self_link**)
	// of the disk (such as those managed by `compute.Disk`) to attach.
	// > **Note:** Either `source` or `sourceImage` is **required** when creating a new instance except for when creating a local SSD. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
	Source *string `pulumi:"source"`
	// The image from which to
	// initialize this disk. This can be one of: the image's `selfLink`,
	// `projects/{project}/global/images/{image}`,
	// `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
	// `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
	// `{project}/{image}`, `{family}`, or `{image}`.
	// > **Note:** Either `source` or `sourceImage` is **required** when creating a new instance except for when creating a local SSD. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
	SourceImage *string `pulumi:"sourceImage"`
	// The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
	Type *string `pulumi:"type"`
}

// InstanceTemplateDiskInput is an input type that accepts InstanceTemplateDiskArgs and InstanceTemplateDiskOutput values.
// You can construct a concrete instance of `InstanceTemplateDiskInput` via:
//
// 		 InstanceTemplateDiskArgs{...}
//
type InstanceTemplateDiskInput interface {
	pulumi.Input

	ToInstanceTemplateDiskOutput() InstanceTemplateDiskOutput
	ToInstanceTemplateDiskOutputWithContext(context.Context) InstanceTemplateDiskOutput
}

type InstanceTemplateDiskArgs struct {
	// Whether or not the disk should be auto-deleted.
	// This defaults to true.
	AutoDelete pulumi.BoolPtrInput `pulumi:"autoDelete"`
	// Indicates that this is a boot disk.
	Boot pulumi.BoolPtrInput `pulumi:"boot"`
	// A unique device name that is reflected into the
	// /dev/  tree of a Linux operating system running within the instance. If not
	// specified, the server chooses a default device name to apply to this disk.
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
	// Encrypts or decrypts a disk using a customer-supplied encryption key.
	DiskEncryptionKey InstanceTemplateDiskDiskEncryptionKeyPtrInput `pulumi:"diskEncryptionKey"`
	// Name of the disk. When not provided, this defaults
	// to the name of the instance.
	DiskName pulumi.StringPtrInput `pulumi:"diskName"`
	// The size of the image in gigabytes. If not
	// specified, it will inherit the size of its base image. For SCRATCH disks,
	// the size must be exactly 375GB.
	DiskSizeGb pulumi.IntPtrInput `pulumi:"diskSizeGb"`
	// The GCE disk type. Can be either `"pd-ssd"`,
	// `"local-ssd"`, or `"pd-standard"`.
	DiskType pulumi.StringPtrInput `pulumi:"diskType"`
	// Specifies the disk interface to use for attaching
	// this disk.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
	// A set of key/value label pairs to assign to instances
	// created from this template,
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The mode in which to attach this disk, either READ_WRITE
	// or READ_ONLY. If you are attaching or creating a boot disk, this must
	// read-write mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The name (**not self_link**)
	// of the disk (such as those managed by `compute.Disk`) to attach.
	// > **Note:** Either `source` or `sourceImage` is **required** when creating a new instance except for when creating a local SSD. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The image from which to
	// initialize this disk. This can be one of: the image's `selfLink`,
	// `projects/{project}/global/images/{image}`,
	// `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
	// `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
	// `{project}/{image}`, `{family}`, or `{image}`.
	// > **Note:** Either `source` or `sourceImage` is **required** when creating a new instance except for when creating a local SSD. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
	SourceImage pulumi.StringPtrInput `pulumi:"sourceImage"`
	// The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (InstanceTemplateDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateDisk)(nil)).Elem()
}

func (i InstanceTemplateDiskArgs) ToInstanceTemplateDiskOutput() InstanceTemplateDiskOutput {
	return i.ToInstanceTemplateDiskOutputWithContext(context.Background())
}

func (i InstanceTemplateDiskArgs) ToInstanceTemplateDiskOutputWithContext(ctx context.Context) InstanceTemplateDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateDiskOutput)
}

// InstanceTemplateDiskArrayInput is an input type that accepts InstanceTemplateDiskArray and InstanceTemplateDiskArrayOutput values.
// You can construct a concrete instance of `InstanceTemplateDiskArrayInput` via:
//
// 		 InstanceTemplateDiskArray{ InstanceTemplateDiskArgs{...} }
//
type InstanceTemplateDiskArrayInput interface {
	pulumi.Input

	ToInstanceTemplateDiskArrayOutput() InstanceTemplateDiskArrayOutput
	ToInstanceTemplateDiskArrayOutputWithContext(context.Context) InstanceTemplateDiskArrayOutput
}

type InstanceTemplateDiskArray []InstanceTemplateDiskInput

func (InstanceTemplateDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTemplateDisk)(nil)).Elem()
}

func (i InstanceTemplateDiskArray) ToInstanceTemplateDiskArrayOutput() InstanceTemplateDiskArrayOutput {
	return i.ToInstanceTemplateDiskArrayOutputWithContext(context.Background())
}

func (i InstanceTemplateDiskArray) ToInstanceTemplateDiskArrayOutputWithContext(ctx context.Context) InstanceTemplateDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateDiskArrayOutput)
}

type InstanceTemplateDiskOutput struct{ *pulumi.OutputState }

func (InstanceTemplateDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateDisk)(nil)).Elem()
}

func (o InstanceTemplateDiskOutput) ToInstanceTemplateDiskOutput() InstanceTemplateDiskOutput {
	return o
}

func (o InstanceTemplateDiskOutput) ToInstanceTemplateDiskOutputWithContext(ctx context.Context) InstanceTemplateDiskOutput {
	return o
}

// Whether or not the disk should be auto-deleted.
// This defaults to true.
func (o InstanceTemplateDiskOutput) AutoDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceTemplateDisk) *bool { return v.AutoDelete }).(pulumi.BoolPtrOutput)
}

// Indicates that this is a boot disk.
func (o InstanceTemplateDiskOutput) Boot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceTemplateDisk) *bool { return v.Boot }).(pulumi.BoolPtrOutput)
}

// A unique device name that is reflected into the
// /dev/  tree of a Linux operating system running within the instance. If not
// specified, the server chooses a default device name to apply to this disk.
func (o InstanceTemplateDiskOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateDisk) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

// Encrypts or decrypts a disk using a customer-supplied encryption key.
func (o InstanceTemplateDiskOutput) DiskEncryptionKey() InstanceTemplateDiskDiskEncryptionKeyPtrOutput {
	return o.ApplyT(func(v InstanceTemplateDisk) *InstanceTemplateDiskDiskEncryptionKey { return v.DiskEncryptionKey }).(InstanceTemplateDiskDiskEncryptionKeyPtrOutput)
}

// Name of the disk. When not provided, this defaults
// to the name of the instance.
func (o InstanceTemplateDiskOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateDisk) *string { return v.DiskName }).(pulumi.StringPtrOutput)
}

// The size of the image in gigabytes. If not
// specified, it will inherit the size of its base image. For SCRATCH disks,
// the size must be exactly 375GB.
func (o InstanceTemplateDiskOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceTemplateDisk) *int { return v.DiskSizeGb }).(pulumi.IntPtrOutput)
}

// The GCE disk type. Can be either `"pd-ssd"`,
// `"local-ssd"`, or `"pd-standard"`.
func (o InstanceTemplateDiskOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateDisk) *string { return v.DiskType }).(pulumi.StringPtrOutput)
}

// Specifies the disk interface to use for attaching
// this disk.
func (o InstanceTemplateDiskOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateDisk) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// A set of key/value label pairs to assign to instances
// created from this template,
func (o InstanceTemplateDiskOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceTemplateDisk) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The mode in which to attach this disk, either READ_WRITE
// or READ_ONLY. If you are attaching or creating a boot disk, this must
// read-write mode.
func (o InstanceTemplateDiskOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateDisk) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The name (**not self_link**)
// of the disk (such as those managed by `compute.Disk`) to attach.
// > **Note:** Either `source` or `sourceImage` is **required** when creating a new instance except for when creating a local SSD. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
func (o InstanceTemplateDiskOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateDisk) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The image from which to
// initialize this disk. This can be one of: the image's `selfLink`,
// `projects/{project}/global/images/{image}`,
// `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
// `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
// `{project}/{image}`, `{family}`, or `{image}`.
// > **Note:** Either `source` or `sourceImage` is **required** when creating a new instance except for when creating a local SSD. Check the API [docs](https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates/insert) for details.
func (o InstanceTemplateDiskOutput) SourceImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateDisk) *string { return v.SourceImage }).(pulumi.StringPtrOutput)
}

// The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
func (o InstanceTemplateDiskOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateDisk) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InstanceTemplateDiskArrayOutput struct{ *pulumi.OutputState }

func (InstanceTemplateDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTemplateDisk)(nil)).Elem()
}

func (o InstanceTemplateDiskArrayOutput) ToInstanceTemplateDiskArrayOutput() InstanceTemplateDiskArrayOutput {
	return o
}

func (o InstanceTemplateDiskArrayOutput) ToInstanceTemplateDiskArrayOutputWithContext(ctx context.Context) InstanceTemplateDiskArrayOutput {
	return o
}

func (o InstanceTemplateDiskArrayOutput) Index(i pulumi.IntInput) InstanceTemplateDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTemplateDisk {
		return vs[0].([]InstanceTemplateDisk)[vs[1].(int)]
	}).(InstanceTemplateDiskOutput)
}

type InstanceTemplateDiskDiskEncryptionKey struct {
	// The self link of the encryption key that is stored in Google Cloud KMS
	KmsKeySelfLink string `pulumi:"kmsKeySelfLink"`
}

// InstanceTemplateDiskDiskEncryptionKeyInput is an input type that accepts InstanceTemplateDiskDiskEncryptionKeyArgs and InstanceTemplateDiskDiskEncryptionKeyOutput values.
// You can construct a concrete instance of `InstanceTemplateDiskDiskEncryptionKeyInput` via:
//
// 		 InstanceTemplateDiskDiskEncryptionKeyArgs{...}
//
type InstanceTemplateDiskDiskEncryptionKeyInput interface {
	pulumi.Input

	ToInstanceTemplateDiskDiskEncryptionKeyOutput() InstanceTemplateDiskDiskEncryptionKeyOutput
	ToInstanceTemplateDiskDiskEncryptionKeyOutputWithContext(context.Context) InstanceTemplateDiskDiskEncryptionKeyOutput
}

type InstanceTemplateDiskDiskEncryptionKeyArgs struct {
	// The self link of the encryption key that is stored in Google Cloud KMS
	KmsKeySelfLink pulumi.StringInput `pulumi:"kmsKeySelfLink"`
}

func (InstanceTemplateDiskDiskEncryptionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateDiskDiskEncryptionKey)(nil)).Elem()
}

func (i InstanceTemplateDiskDiskEncryptionKeyArgs) ToInstanceTemplateDiskDiskEncryptionKeyOutput() InstanceTemplateDiskDiskEncryptionKeyOutput {
	return i.ToInstanceTemplateDiskDiskEncryptionKeyOutputWithContext(context.Background())
}

func (i InstanceTemplateDiskDiskEncryptionKeyArgs) ToInstanceTemplateDiskDiskEncryptionKeyOutputWithContext(ctx context.Context) InstanceTemplateDiskDiskEncryptionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateDiskDiskEncryptionKeyOutput)
}

func (i InstanceTemplateDiskDiskEncryptionKeyArgs) ToInstanceTemplateDiskDiskEncryptionKeyPtrOutput() InstanceTemplateDiskDiskEncryptionKeyPtrOutput {
	return i.ToInstanceTemplateDiskDiskEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i InstanceTemplateDiskDiskEncryptionKeyArgs) ToInstanceTemplateDiskDiskEncryptionKeyPtrOutputWithContext(ctx context.Context) InstanceTemplateDiskDiskEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateDiskDiskEncryptionKeyOutput).ToInstanceTemplateDiskDiskEncryptionKeyPtrOutputWithContext(ctx)
}

// InstanceTemplateDiskDiskEncryptionKeyPtrInput is an input type that accepts InstanceTemplateDiskDiskEncryptionKeyArgs, InstanceTemplateDiskDiskEncryptionKeyPtr and InstanceTemplateDiskDiskEncryptionKeyPtrOutput values.
// You can construct a concrete instance of `InstanceTemplateDiskDiskEncryptionKeyPtrInput` via:
//
// 		 InstanceTemplateDiskDiskEncryptionKeyArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceTemplateDiskDiskEncryptionKeyPtrInput interface {
	pulumi.Input

	ToInstanceTemplateDiskDiskEncryptionKeyPtrOutput() InstanceTemplateDiskDiskEncryptionKeyPtrOutput
	ToInstanceTemplateDiskDiskEncryptionKeyPtrOutputWithContext(context.Context) InstanceTemplateDiskDiskEncryptionKeyPtrOutput
}

type instanceTemplateDiskDiskEncryptionKeyPtrType InstanceTemplateDiskDiskEncryptionKeyArgs

func InstanceTemplateDiskDiskEncryptionKeyPtr(v *InstanceTemplateDiskDiskEncryptionKeyArgs) InstanceTemplateDiskDiskEncryptionKeyPtrInput {
	return (*instanceTemplateDiskDiskEncryptionKeyPtrType)(v)
}

func (*instanceTemplateDiskDiskEncryptionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTemplateDiskDiskEncryptionKey)(nil)).Elem()
}

func (i *instanceTemplateDiskDiskEncryptionKeyPtrType) ToInstanceTemplateDiskDiskEncryptionKeyPtrOutput() InstanceTemplateDiskDiskEncryptionKeyPtrOutput {
	return i.ToInstanceTemplateDiskDiskEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i *instanceTemplateDiskDiskEncryptionKeyPtrType) ToInstanceTemplateDiskDiskEncryptionKeyPtrOutputWithContext(ctx context.Context) InstanceTemplateDiskDiskEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateDiskDiskEncryptionKeyPtrOutput)
}

type InstanceTemplateDiskDiskEncryptionKeyOutput struct{ *pulumi.OutputState }

func (InstanceTemplateDiskDiskEncryptionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateDiskDiskEncryptionKey)(nil)).Elem()
}

func (o InstanceTemplateDiskDiskEncryptionKeyOutput) ToInstanceTemplateDiskDiskEncryptionKeyOutput() InstanceTemplateDiskDiskEncryptionKeyOutput {
	return o
}

func (o InstanceTemplateDiskDiskEncryptionKeyOutput) ToInstanceTemplateDiskDiskEncryptionKeyOutputWithContext(ctx context.Context) InstanceTemplateDiskDiskEncryptionKeyOutput {
	return o
}

func (o InstanceTemplateDiskDiskEncryptionKeyOutput) ToInstanceTemplateDiskDiskEncryptionKeyPtrOutput() InstanceTemplateDiskDiskEncryptionKeyPtrOutput {
	return o.ToInstanceTemplateDiskDiskEncryptionKeyPtrOutputWithContext(context.Background())
}

func (o InstanceTemplateDiskDiskEncryptionKeyOutput) ToInstanceTemplateDiskDiskEncryptionKeyPtrOutputWithContext(ctx context.Context) InstanceTemplateDiskDiskEncryptionKeyPtrOutput {
	return o.ApplyT(func(v InstanceTemplateDiskDiskEncryptionKey) *InstanceTemplateDiskDiskEncryptionKey {
		return &v
	}).(InstanceTemplateDiskDiskEncryptionKeyPtrOutput)
}

// The self link of the encryption key that is stored in Google Cloud KMS
func (o InstanceTemplateDiskDiskEncryptionKeyOutput) KmsKeySelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTemplateDiskDiskEncryptionKey) string { return v.KmsKeySelfLink }).(pulumi.StringOutput)
}

type InstanceTemplateDiskDiskEncryptionKeyPtrOutput struct{ *pulumi.OutputState }

func (InstanceTemplateDiskDiskEncryptionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTemplateDiskDiskEncryptionKey)(nil)).Elem()
}

func (o InstanceTemplateDiskDiskEncryptionKeyPtrOutput) ToInstanceTemplateDiskDiskEncryptionKeyPtrOutput() InstanceTemplateDiskDiskEncryptionKeyPtrOutput {
	return o
}

func (o InstanceTemplateDiskDiskEncryptionKeyPtrOutput) ToInstanceTemplateDiskDiskEncryptionKeyPtrOutputWithContext(ctx context.Context) InstanceTemplateDiskDiskEncryptionKeyPtrOutput {
	return o
}

func (o InstanceTemplateDiskDiskEncryptionKeyPtrOutput) Elem() InstanceTemplateDiskDiskEncryptionKeyOutput {
	return o.ApplyT(func(v *InstanceTemplateDiskDiskEncryptionKey) InstanceTemplateDiskDiskEncryptionKey { return *v }).(InstanceTemplateDiskDiskEncryptionKeyOutput)
}

// The self link of the encryption key that is stored in Google Cloud KMS
func (o InstanceTemplateDiskDiskEncryptionKeyPtrOutput) KmsKeySelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceTemplateDiskDiskEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeySelfLink
	}).(pulumi.StringPtrOutput)
}

type InstanceTemplateGuestAccelerator struct {
	// The number of the guest accelerator cards exposed to this instance.
	Count int `pulumi:"count"`
	// The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
	Type string `pulumi:"type"`
}

// InstanceTemplateGuestAcceleratorInput is an input type that accepts InstanceTemplateGuestAcceleratorArgs and InstanceTemplateGuestAcceleratorOutput values.
// You can construct a concrete instance of `InstanceTemplateGuestAcceleratorInput` via:
//
// 		 InstanceTemplateGuestAcceleratorArgs{...}
//
type InstanceTemplateGuestAcceleratorInput interface {
	pulumi.Input

	ToInstanceTemplateGuestAcceleratorOutput() InstanceTemplateGuestAcceleratorOutput
	ToInstanceTemplateGuestAcceleratorOutputWithContext(context.Context) InstanceTemplateGuestAcceleratorOutput
}

type InstanceTemplateGuestAcceleratorArgs struct {
	// The number of the guest accelerator cards exposed to this instance.
	Count pulumi.IntInput `pulumi:"count"`
	// The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (InstanceTemplateGuestAcceleratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateGuestAccelerator)(nil)).Elem()
}

func (i InstanceTemplateGuestAcceleratorArgs) ToInstanceTemplateGuestAcceleratorOutput() InstanceTemplateGuestAcceleratorOutput {
	return i.ToInstanceTemplateGuestAcceleratorOutputWithContext(context.Background())
}

func (i InstanceTemplateGuestAcceleratorArgs) ToInstanceTemplateGuestAcceleratorOutputWithContext(ctx context.Context) InstanceTemplateGuestAcceleratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateGuestAcceleratorOutput)
}

// InstanceTemplateGuestAcceleratorArrayInput is an input type that accepts InstanceTemplateGuestAcceleratorArray and InstanceTemplateGuestAcceleratorArrayOutput values.
// You can construct a concrete instance of `InstanceTemplateGuestAcceleratorArrayInput` via:
//
// 		 InstanceTemplateGuestAcceleratorArray{ InstanceTemplateGuestAcceleratorArgs{...} }
//
type InstanceTemplateGuestAcceleratorArrayInput interface {
	pulumi.Input

	ToInstanceTemplateGuestAcceleratorArrayOutput() InstanceTemplateGuestAcceleratorArrayOutput
	ToInstanceTemplateGuestAcceleratorArrayOutputWithContext(context.Context) InstanceTemplateGuestAcceleratorArrayOutput
}

type InstanceTemplateGuestAcceleratorArray []InstanceTemplateGuestAcceleratorInput

func (InstanceTemplateGuestAcceleratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTemplateGuestAccelerator)(nil)).Elem()
}

func (i InstanceTemplateGuestAcceleratorArray) ToInstanceTemplateGuestAcceleratorArrayOutput() InstanceTemplateGuestAcceleratorArrayOutput {
	return i.ToInstanceTemplateGuestAcceleratorArrayOutputWithContext(context.Background())
}

func (i InstanceTemplateGuestAcceleratorArray) ToInstanceTemplateGuestAcceleratorArrayOutputWithContext(ctx context.Context) InstanceTemplateGuestAcceleratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateGuestAcceleratorArrayOutput)
}

type InstanceTemplateGuestAcceleratorOutput struct{ *pulumi.OutputState }

func (InstanceTemplateGuestAcceleratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateGuestAccelerator)(nil)).Elem()
}

func (o InstanceTemplateGuestAcceleratorOutput) ToInstanceTemplateGuestAcceleratorOutput() InstanceTemplateGuestAcceleratorOutput {
	return o
}

func (o InstanceTemplateGuestAcceleratorOutput) ToInstanceTemplateGuestAcceleratorOutputWithContext(ctx context.Context) InstanceTemplateGuestAcceleratorOutput {
	return o
}

// The number of the guest accelerator cards exposed to this instance.
func (o InstanceTemplateGuestAcceleratorOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTemplateGuestAccelerator) int { return v.Count }).(pulumi.IntOutput)
}

// The accelerator type resource to expose to this instance. E.g. `nvidia-tesla-k80`.
func (o InstanceTemplateGuestAcceleratorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTemplateGuestAccelerator) string { return v.Type }).(pulumi.StringOutput)
}

type InstanceTemplateGuestAcceleratorArrayOutput struct{ *pulumi.OutputState }

func (InstanceTemplateGuestAcceleratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTemplateGuestAccelerator)(nil)).Elem()
}

func (o InstanceTemplateGuestAcceleratorArrayOutput) ToInstanceTemplateGuestAcceleratorArrayOutput() InstanceTemplateGuestAcceleratorArrayOutput {
	return o
}

func (o InstanceTemplateGuestAcceleratorArrayOutput) ToInstanceTemplateGuestAcceleratorArrayOutputWithContext(ctx context.Context) InstanceTemplateGuestAcceleratorArrayOutput {
	return o
}

func (o InstanceTemplateGuestAcceleratorArrayOutput) Index(i pulumi.IntInput) InstanceTemplateGuestAcceleratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTemplateGuestAccelerator {
		return vs[0].([]InstanceTemplateGuestAccelerator)[vs[1].(int)]
	}).(InstanceTemplateGuestAcceleratorOutput)
}

type InstanceTemplateNetworkInterface struct {
	// Access configurations, i.e. IPs via which this
	// instance can be accessed via the Internet. Omit to ensure that the instance
	// is not accessible from the Internet (this means that ssh provisioners will
	// not work unless you can send traffic to the instance's
	// network (e.g. via tunnel or because it is running on another cloud instance
	// on that network). This block can be repeated multiple times. Structure documented below.
	AccessConfigs []InstanceTemplateNetworkInterfaceAccessConfig `pulumi:"accessConfigs"`
	// An
	// array of alias IP ranges for this network interface. Can only be specified for network
	// interfaces on subnet-mode networks. Structure documented below.
	AliasIpRanges []InstanceTemplateNetworkInterfaceAliasIpRange `pulumi:"aliasIpRanges"`
	// The name of the instance template. If you leave
	// this blank, the provider will auto-generate a unique name.
	Name *string `pulumi:"name"`
	// The name or selfLink of the network to attach this interface to.
	// Use `network` attribute for Legacy or Auto subnetted networks and
	// `subnetwork` for custom subnetted networks.
	Network *string `pulumi:"network"`
	// The private IP address to assign to the instance. If
	// empty, the address will be automatically assigned.
	NetworkIp *string `pulumi:"networkIp"`
	// the name of the subnetwork to attach this interface
	// to. The subnetwork must exist in the same `region` this instance will be
	// created in. Either `network` or `subnetwork` must be provided.
	Subnetwork *string `pulumi:"subnetwork"`
	// The ID of the project in which the subnetwork belongs.
	// If it is not provided, the provider project is used.
	SubnetworkProject *string `pulumi:"subnetworkProject"`
}

// InstanceTemplateNetworkInterfaceInput is an input type that accepts InstanceTemplateNetworkInterfaceArgs and InstanceTemplateNetworkInterfaceOutput values.
// You can construct a concrete instance of `InstanceTemplateNetworkInterfaceInput` via:
//
// 		 InstanceTemplateNetworkInterfaceArgs{...}
//
type InstanceTemplateNetworkInterfaceInput interface {
	pulumi.Input

	ToInstanceTemplateNetworkInterfaceOutput() InstanceTemplateNetworkInterfaceOutput
	ToInstanceTemplateNetworkInterfaceOutputWithContext(context.Context) InstanceTemplateNetworkInterfaceOutput
}

type InstanceTemplateNetworkInterfaceArgs struct {
	// Access configurations, i.e. IPs via which this
	// instance can be accessed via the Internet. Omit to ensure that the instance
	// is not accessible from the Internet (this means that ssh provisioners will
	// not work unless you can send traffic to the instance's
	// network (e.g. via tunnel or because it is running on another cloud instance
	// on that network). This block can be repeated multiple times. Structure documented below.
	AccessConfigs InstanceTemplateNetworkInterfaceAccessConfigArrayInput `pulumi:"accessConfigs"`
	// An
	// array of alias IP ranges for this network interface. Can only be specified for network
	// interfaces on subnet-mode networks. Structure documented below.
	AliasIpRanges InstanceTemplateNetworkInterfaceAliasIpRangeArrayInput `pulumi:"aliasIpRanges"`
	// The name of the instance template. If you leave
	// this blank, the provider will auto-generate a unique name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name or selfLink of the network to attach this interface to.
	// Use `network` attribute for Legacy or Auto subnetted networks and
	// `subnetwork` for custom subnetted networks.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// The private IP address to assign to the instance. If
	// empty, the address will be automatically assigned.
	NetworkIp pulumi.StringPtrInput `pulumi:"networkIp"`
	// the name of the subnetwork to attach this interface
	// to. The subnetwork must exist in the same `region` this instance will be
	// created in. Either `network` or `subnetwork` must be provided.
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
	// The ID of the project in which the subnetwork belongs.
	// If it is not provided, the provider project is used.
	SubnetworkProject pulumi.StringPtrInput `pulumi:"subnetworkProject"`
}

func (InstanceTemplateNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateNetworkInterface)(nil)).Elem()
}

func (i InstanceTemplateNetworkInterfaceArgs) ToInstanceTemplateNetworkInterfaceOutput() InstanceTemplateNetworkInterfaceOutput {
	return i.ToInstanceTemplateNetworkInterfaceOutputWithContext(context.Background())
}

func (i InstanceTemplateNetworkInterfaceArgs) ToInstanceTemplateNetworkInterfaceOutputWithContext(ctx context.Context) InstanceTemplateNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateNetworkInterfaceOutput)
}

// InstanceTemplateNetworkInterfaceArrayInput is an input type that accepts InstanceTemplateNetworkInterfaceArray and InstanceTemplateNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `InstanceTemplateNetworkInterfaceArrayInput` via:
//
// 		 InstanceTemplateNetworkInterfaceArray{ InstanceTemplateNetworkInterfaceArgs{...} }
//
type InstanceTemplateNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToInstanceTemplateNetworkInterfaceArrayOutput() InstanceTemplateNetworkInterfaceArrayOutput
	ToInstanceTemplateNetworkInterfaceArrayOutputWithContext(context.Context) InstanceTemplateNetworkInterfaceArrayOutput
}

type InstanceTemplateNetworkInterfaceArray []InstanceTemplateNetworkInterfaceInput

func (InstanceTemplateNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTemplateNetworkInterface)(nil)).Elem()
}

func (i InstanceTemplateNetworkInterfaceArray) ToInstanceTemplateNetworkInterfaceArrayOutput() InstanceTemplateNetworkInterfaceArrayOutput {
	return i.ToInstanceTemplateNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i InstanceTemplateNetworkInterfaceArray) ToInstanceTemplateNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstanceTemplateNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateNetworkInterfaceArrayOutput)
}

type InstanceTemplateNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (InstanceTemplateNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateNetworkInterface)(nil)).Elem()
}

func (o InstanceTemplateNetworkInterfaceOutput) ToInstanceTemplateNetworkInterfaceOutput() InstanceTemplateNetworkInterfaceOutput {
	return o
}

func (o InstanceTemplateNetworkInterfaceOutput) ToInstanceTemplateNetworkInterfaceOutputWithContext(ctx context.Context) InstanceTemplateNetworkInterfaceOutput {
	return o
}

// Access configurations, i.e. IPs via which this
// instance can be accessed via the Internet. Omit to ensure that the instance
// is not accessible from the Internet (this means that ssh provisioners will
// not work unless you can send traffic to the instance's
// network (e.g. via tunnel or because it is running on another cloud instance
// on that network). This block can be repeated multiple times. Structure documented below.
func (o InstanceTemplateNetworkInterfaceOutput) AccessConfigs() InstanceTemplateNetworkInterfaceAccessConfigArrayOutput {
	return o.ApplyT(func(v InstanceTemplateNetworkInterface) []InstanceTemplateNetworkInterfaceAccessConfig {
		return v.AccessConfigs
	}).(InstanceTemplateNetworkInterfaceAccessConfigArrayOutput)
}

// An
// array of alias IP ranges for this network interface. Can only be specified for network
// interfaces on subnet-mode networks. Structure documented below.
func (o InstanceTemplateNetworkInterfaceOutput) AliasIpRanges() InstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput {
	return o.ApplyT(func(v InstanceTemplateNetworkInterface) []InstanceTemplateNetworkInterfaceAliasIpRange {
		return v.AliasIpRanges
	}).(InstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput)
}

// The name of the instance template. If you leave
// this blank, the provider will auto-generate a unique name.
func (o InstanceTemplateNetworkInterfaceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateNetworkInterface) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The name or selfLink of the network to attach this interface to.
// Use `network` attribute for Legacy or Auto subnetted networks and
// `subnetwork` for custom subnetted networks.
func (o InstanceTemplateNetworkInterfaceOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateNetworkInterface) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// The private IP address to assign to the instance. If
// empty, the address will be automatically assigned.
func (o InstanceTemplateNetworkInterfaceOutput) NetworkIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateNetworkInterface) *string { return v.NetworkIp }).(pulumi.StringPtrOutput)
}

// the name of the subnetwork to attach this interface
// to. The subnetwork must exist in the same `region` this instance will be
// created in. Either `network` or `subnetwork` must be provided.
func (o InstanceTemplateNetworkInterfaceOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateNetworkInterface) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

// The ID of the project in which the subnetwork belongs.
// If it is not provided, the provider project is used.
func (o InstanceTemplateNetworkInterfaceOutput) SubnetworkProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateNetworkInterface) *string { return v.SubnetworkProject }).(pulumi.StringPtrOutput)
}

type InstanceTemplateNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (InstanceTemplateNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTemplateNetworkInterface)(nil)).Elem()
}

func (o InstanceTemplateNetworkInterfaceArrayOutput) ToInstanceTemplateNetworkInterfaceArrayOutput() InstanceTemplateNetworkInterfaceArrayOutput {
	return o
}

func (o InstanceTemplateNetworkInterfaceArrayOutput) ToInstanceTemplateNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstanceTemplateNetworkInterfaceArrayOutput {
	return o
}

func (o InstanceTemplateNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) InstanceTemplateNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTemplateNetworkInterface {
		return vs[0].([]InstanceTemplateNetworkInterface)[vs[1].(int)]
	}).(InstanceTemplateNetworkInterfaceOutput)
}

type InstanceTemplateNetworkInterfaceAccessConfig struct {
	// The IP address that will be 1:1 mapped to the instance's
	// network ip. If not given, one will be generated.
	NatIp *string `pulumi:"natIp"`
	// The [networking tier][network-tier] used for configuring
	// this instance template. This field can take the following values: PREMIUM or
	// STANDARD. If this field is not specified, it is assumed to be PREMIUM.
	NetworkTier         *string `pulumi:"networkTier"`
	PublicPtrDomainName *string `pulumi:"publicPtrDomainName"`
}

// InstanceTemplateNetworkInterfaceAccessConfigInput is an input type that accepts InstanceTemplateNetworkInterfaceAccessConfigArgs and InstanceTemplateNetworkInterfaceAccessConfigOutput values.
// You can construct a concrete instance of `InstanceTemplateNetworkInterfaceAccessConfigInput` via:
//
// 		 InstanceTemplateNetworkInterfaceAccessConfigArgs{...}
//
type InstanceTemplateNetworkInterfaceAccessConfigInput interface {
	pulumi.Input

	ToInstanceTemplateNetworkInterfaceAccessConfigOutput() InstanceTemplateNetworkInterfaceAccessConfigOutput
	ToInstanceTemplateNetworkInterfaceAccessConfigOutputWithContext(context.Context) InstanceTemplateNetworkInterfaceAccessConfigOutput
}

type InstanceTemplateNetworkInterfaceAccessConfigArgs struct {
	// The IP address that will be 1:1 mapped to the instance's
	// network ip. If not given, one will be generated.
	NatIp pulumi.StringPtrInput `pulumi:"natIp"`
	// The [networking tier][network-tier] used for configuring
	// this instance template. This field can take the following values: PREMIUM or
	// STANDARD. If this field is not specified, it is assumed to be PREMIUM.
	NetworkTier         pulumi.StringPtrInput `pulumi:"networkTier"`
	PublicPtrDomainName pulumi.StringPtrInput `pulumi:"publicPtrDomainName"`
}

func (InstanceTemplateNetworkInterfaceAccessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateNetworkInterfaceAccessConfig)(nil)).Elem()
}

func (i InstanceTemplateNetworkInterfaceAccessConfigArgs) ToInstanceTemplateNetworkInterfaceAccessConfigOutput() InstanceTemplateNetworkInterfaceAccessConfigOutput {
	return i.ToInstanceTemplateNetworkInterfaceAccessConfigOutputWithContext(context.Background())
}

func (i InstanceTemplateNetworkInterfaceAccessConfigArgs) ToInstanceTemplateNetworkInterfaceAccessConfigOutputWithContext(ctx context.Context) InstanceTemplateNetworkInterfaceAccessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateNetworkInterfaceAccessConfigOutput)
}

// InstanceTemplateNetworkInterfaceAccessConfigArrayInput is an input type that accepts InstanceTemplateNetworkInterfaceAccessConfigArray and InstanceTemplateNetworkInterfaceAccessConfigArrayOutput values.
// You can construct a concrete instance of `InstanceTemplateNetworkInterfaceAccessConfigArrayInput` via:
//
// 		 InstanceTemplateNetworkInterfaceAccessConfigArray{ InstanceTemplateNetworkInterfaceAccessConfigArgs{...} }
//
type InstanceTemplateNetworkInterfaceAccessConfigArrayInput interface {
	pulumi.Input

	ToInstanceTemplateNetworkInterfaceAccessConfigArrayOutput() InstanceTemplateNetworkInterfaceAccessConfigArrayOutput
	ToInstanceTemplateNetworkInterfaceAccessConfigArrayOutputWithContext(context.Context) InstanceTemplateNetworkInterfaceAccessConfigArrayOutput
}

type InstanceTemplateNetworkInterfaceAccessConfigArray []InstanceTemplateNetworkInterfaceAccessConfigInput

func (InstanceTemplateNetworkInterfaceAccessConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTemplateNetworkInterfaceAccessConfig)(nil)).Elem()
}

func (i InstanceTemplateNetworkInterfaceAccessConfigArray) ToInstanceTemplateNetworkInterfaceAccessConfigArrayOutput() InstanceTemplateNetworkInterfaceAccessConfigArrayOutput {
	return i.ToInstanceTemplateNetworkInterfaceAccessConfigArrayOutputWithContext(context.Background())
}

func (i InstanceTemplateNetworkInterfaceAccessConfigArray) ToInstanceTemplateNetworkInterfaceAccessConfigArrayOutputWithContext(ctx context.Context) InstanceTemplateNetworkInterfaceAccessConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateNetworkInterfaceAccessConfigArrayOutput)
}

type InstanceTemplateNetworkInterfaceAccessConfigOutput struct{ *pulumi.OutputState }

func (InstanceTemplateNetworkInterfaceAccessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateNetworkInterfaceAccessConfig)(nil)).Elem()
}

func (o InstanceTemplateNetworkInterfaceAccessConfigOutput) ToInstanceTemplateNetworkInterfaceAccessConfigOutput() InstanceTemplateNetworkInterfaceAccessConfigOutput {
	return o
}

func (o InstanceTemplateNetworkInterfaceAccessConfigOutput) ToInstanceTemplateNetworkInterfaceAccessConfigOutputWithContext(ctx context.Context) InstanceTemplateNetworkInterfaceAccessConfigOutput {
	return o
}

// The IP address that will be 1:1 mapped to the instance's
// network ip. If not given, one will be generated.
func (o InstanceTemplateNetworkInterfaceAccessConfigOutput) NatIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateNetworkInterfaceAccessConfig) *string { return v.NatIp }).(pulumi.StringPtrOutput)
}

// The [networking tier][network-tier] used for configuring
// this instance template. This field can take the following values: PREMIUM or
// STANDARD. If this field is not specified, it is assumed to be PREMIUM.
func (o InstanceTemplateNetworkInterfaceAccessConfigOutput) NetworkTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateNetworkInterfaceAccessConfig) *string { return v.NetworkTier }).(pulumi.StringPtrOutput)
}

func (o InstanceTemplateNetworkInterfaceAccessConfigOutput) PublicPtrDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateNetworkInterfaceAccessConfig) *string { return v.PublicPtrDomainName }).(pulumi.StringPtrOutput)
}

type InstanceTemplateNetworkInterfaceAccessConfigArrayOutput struct{ *pulumi.OutputState }

func (InstanceTemplateNetworkInterfaceAccessConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTemplateNetworkInterfaceAccessConfig)(nil)).Elem()
}

func (o InstanceTemplateNetworkInterfaceAccessConfigArrayOutput) ToInstanceTemplateNetworkInterfaceAccessConfigArrayOutput() InstanceTemplateNetworkInterfaceAccessConfigArrayOutput {
	return o
}

func (o InstanceTemplateNetworkInterfaceAccessConfigArrayOutput) ToInstanceTemplateNetworkInterfaceAccessConfigArrayOutputWithContext(ctx context.Context) InstanceTemplateNetworkInterfaceAccessConfigArrayOutput {
	return o
}

func (o InstanceTemplateNetworkInterfaceAccessConfigArrayOutput) Index(i pulumi.IntInput) InstanceTemplateNetworkInterfaceAccessConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTemplateNetworkInterfaceAccessConfig {
		return vs[0].([]InstanceTemplateNetworkInterfaceAccessConfig)[vs[1].(int)]
	}).(InstanceTemplateNetworkInterfaceAccessConfigOutput)
}

type InstanceTemplateNetworkInterfaceAliasIpRange struct {
	// The IP CIDR range represented by this alias IP range. This IP CIDR range
	// must belong to the specified subnetwork and cannot contain IP addresses reserved by
	// system or used by other network interfaces. At the time of writing only a
	// netmask (e.g. /24) may be supplied, with a CIDR format resulting in an API
	// error.
	IpCidrRange string `pulumi:"ipCidrRange"`
	// The subnetwork secondary range name specifying
	// the secondary range from which to allocate the IP CIDR range for this alias IP
	// range. If left unspecified, the primary range of the subnetwork will be used.
	SubnetworkRangeName *string `pulumi:"subnetworkRangeName"`
}

// InstanceTemplateNetworkInterfaceAliasIpRangeInput is an input type that accepts InstanceTemplateNetworkInterfaceAliasIpRangeArgs and InstanceTemplateNetworkInterfaceAliasIpRangeOutput values.
// You can construct a concrete instance of `InstanceTemplateNetworkInterfaceAliasIpRangeInput` via:
//
// 		 InstanceTemplateNetworkInterfaceAliasIpRangeArgs{...}
//
type InstanceTemplateNetworkInterfaceAliasIpRangeInput interface {
	pulumi.Input

	ToInstanceTemplateNetworkInterfaceAliasIpRangeOutput() InstanceTemplateNetworkInterfaceAliasIpRangeOutput
	ToInstanceTemplateNetworkInterfaceAliasIpRangeOutputWithContext(context.Context) InstanceTemplateNetworkInterfaceAliasIpRangeOutput
}

type InstanceTemplateNetworkInterfaceAliasIpRangeArgs struct {
	// The IP CIDR range represented by this alias IP range. This IP CIDR range
	// must belong to the specified subnetwork and cannot contain IP addresses reserved by
	// system or used by other network interfaces. At the time of writing only a
	// netmask (e.g. /24) may be supplied, with a CIDR format resulting in an API
	// error.
	IpCidrRange pulumi.StringInput `pulumi:"ipCidrRange"`
	// The subnetwork secondary range name specifying
	// the secondary range from which to allocate the IP CIDR range for this alias IP
	// range. If left unspecified, the primary range of the subnetwork will be used.
	SubnetworkRangeName pulumi.StringPtrInput `pulumi:"subnetworkRangeName"`
}

func (InstanceTemplateNetworkInterfaceAliasIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateNetworkInterfaceAliasIpRange)(nil)).Elem()
}

func (i InstanceTemplateNetworkInterfaceAliasIpRangeArgs) ToInstanceTemplateNetworkInterfaceAliasIpRangeOutput() InstanceTemplateNetworkInterfaceAliasIpRangeOutput {
	return i.ToInstanceTemplateNetworkInterfaceAliasIpRangeOutputWithContext(context.Background())
}

func (i InstanceTemplateNetworkInterfaceAliasIpRangeArgs) ToInstanceTemplateNetworkInterfaceAliasIpRangeOutputWithContext(ctx context.Context) InstanceTemplateNetworkInterfaceAliasIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateNetworkInterfaceAliasIpRangeOutput)
}

// InstanceTemplateNetworkInterfaceAliasIpRangeArrayInput is an input type that accepts InstanceTemplateNetworkInterfaceAliasIpRangeArray and InstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput values.
// You can construct a concrete instance of `InstanceTemplateNetworkInterfaceAliasIpRangeArrayInput` via:
//
// 		 InstanceTemplateNetworkInterfaceAliasIpRangeArray{ InstanceTemplateNetworkInterfaceAliasIpRangeArgs{...} }
//
type InstanceTemplateNetworkInterfaceAliasIpRangeArrayInput interface {
	pulumi.Input

	ToInstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput() InstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput
	ToInstanceTemplateNetworkInterfaceAliasIpRangeArrayOutputWithContext(context.Context) InstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput
}

type InstanceTemplateNetworkInterfaceAliasIpRangeArray []InstanceTemplateNetworkInterfaceAliasIpRangeInput

func (InstanceTemplateNetworkInterfaceAliasIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTemplateNetworkInterfaceAliasIpRange)(nil)).Elem()
}

func (i InstanceTemplateNetworkInterfaceAliasIpRangeArray) ToInstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput() InstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput {
	return i.ToInstanceTemplateNetworkInterfaceAliasIpRangeArrayOutputWithContext(context.Background())
}

func (i InstanceTemplateNetworkInterfaceAliasIpRangeArray) ToInstanceTemplateNetworkInterfaceAliasIpRangeArrayOutputWithContext(ctx context.Context) InstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput)
}

type InstanceTemplateNetworkInterfaceAliasIpRangeOutput struct{ *pulumi.OutputState }

func (InstanceTemplateNetworkInterfaceAliasIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateNetworkInterfaceAliasIpRange)(nil)).Elem()
}

func (o InstanceTemplateNetworkInterfaceAliasIpRangeOutput) ToInstanceTemplateNetworkInterfaceAliasIpRangeOutput() InstanceTemplateNetworkInterfaceAliasIpRangeOutput {
	return o
}

func (o InstanceTemplateNetworkInterfaceAliasIpRangeOutput) ToInstanceTemplateNetworkInterfaceAliasIpRangeOutputWithContext(ctx context.Context) InstanceTemplateNetworkInterfaceAliasIpRangeOutput {
	return o
}

// The IP CIDR range represented by this alias IP range. This IP CIDR range
// must belong to the specified subnetwork and cannot contain IP addresses reserved by
// system or used by other network interfaces. At the time of writing only a
// netmask (e.g. /24) may be supplied, with a CIDR format resulting in an API
// error.
func (o InstanceTemplateNetworkInterfaceAliasIpRangeOutput) IpCidrRange() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTemplateNetworkInterfaceAliasIpRange) string { return v.IpCidrRange }).(pulumi.StringOutput)
}

// The subnetwork secondary range name specifying
// the secondary range from which to allocate the IP CIDR range for this alias IP
// range. If left unspecified, the primary range of the subnetwork will be used.
func (o InstanceTemplateNetworkInterfaceAliasIpRangeOutput) SubnetworkRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateNetworkInterfaceAliasIpRange) *string { return v.SubnetworkRangeName }).(pulumi.StringPtrOutput)
}

type InstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput struct{ *pulumi.OutputState }

func (InstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTemplateNetworkInterfaceAliasIpRange)(nil)).Elem()
}

func (o InstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput) ToInstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput() InstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput {
	return o
}

func (o InstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput) ToInstanceTemplateNetworkInterfaceAliasIpRangeArrayOutputWithContext(ctx context.Context) InstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput {
	return o
}

func (o InstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput) Index(i pulumi.IntInput) InstanceTemplateNetworkInterfaceAliasIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTemplateNetworkInterfaceAliasIpRange {
		return vs[0].([]InstanceTemplateNetworkInterfaceAliasIpRange)[vs[1].(int)]
	}).(InstanceTemplateNetworkInterfaceAliasIpRangeOutput)
}

type InstanceTemplateScheduling struct {
	// Specifies whether the instance should be
	// automatically restarted if it is terminated by Compute Engine (not
	// terminated by a user). This defaults to true.
	AutomaticRestart *bool `pulumi:"automaticRestart"`
	// Specifies node affinities or anti-affinities
	// to determine which sole-tenant nodes your instances and managed instance
	// groups will use as host systems. Read more on sole-tenant node creation
	// [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
	// Structure documented below.
	NodeAffinities []InstanceTemplateSchedulingNodeAffinity `pulumi:"nodeAffinities"`
	// Defines the maintenance behavior for this
	// instance.
	OnHostMaintenance *string `pulumi:"onHostMaintenance"`
	// Allows instance to be preempted. This defaults to
	// false. Read more on this
	// [here](https://cloud.google.com/compute/docs/instances/preemptible).
	Preemptible *bool `pulumi:"preemptible"`
}

// InstanceTemplateSchedulingInput is an input type that accepts InstanceTemplateSchedulingArgs and InstanceTemplateSchedulingOutput values.
// You can construct a concrete instance of `InstanceTemplateSchedulingInput` via:
//
// 		 InstanceTemplateSchedulingArgs{...}
//
type InstanceTemplateSchedulingInput interface {
	pulumi.Input

	ToInstanceTemplateSchedulingOutput() InstanceTemplateSchedulingOutput
	ToInstanceTemplateSchedulingOutputWithContext(context.Context) InstanceTemplateSchedulingOutput
}

type InstanceTemplateSchedulingArgs struct {
	// Specifies whether the instance should be
	// automatically restarted if it is terminated by Compute Engine (not
	// terminated by a user). This defaults to true.
	AutomaticRestart pulumi.BoolPtrInput `pulumi:"automaticRestart"`
	// Specifies node affinities or anti-affinities
	// to determine which sole-tenant nodes your instances and managed instance
	// groups will use as host systems. Read more on sole-tenant node creation
	// [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
	// Structure documented below.
	NodeAffinities InstanceTemplateSchedulingNodeAffinityArrayInput `pulumi:"nodeAffinities"`
	// Defines the maintenance behavior for this
	// instance.
	OnHostMaintenance pulumi.StringPtrInput `pulumi:"onHostMaintenance"`
	// Allows instance to be preempted. This defaults to
	// false. Read more on this
	// [here](https://cloud.google.com/compute/docs/instances/preemptible).
	Preemptible pulumi.BoolPtrInput `pulumi:"preemptible"`
}

func (InstanceTemplateSchedulingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateScheduling)(nil)).Elem()
}

func (i InstanceTemplateSchedulingArgs) ToInstanceTemplateSchedulingOutput() InstanceTemplateSchedulingOutput {
	return i.ToInstanceTemplateSchedulingOutputWithContext(context.Background())
}

func (i InstanceTemplateSchedulingArgs) ToInstanceTemplateSchedulingOutputWithContext(ctx context.Context) InstanceTemplateSchedulingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateSchedulingOutput)
}

func (i InstanceTemplateSchedulingArgs) ToInstanceTemplateSchedulingPtrOutput() InstanceTemplateSchedulingPtrOutput {
	return i.ToInstanceTemplateSchedulingPtrOutputWithContext(context.Background())
}

func (i InstanceTemplateSchedulingArgs) ToInstanceTemplateSchedulingPtrOutputWithContext(ctx context.Context) InstanceTemplateSchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateSchedulingOutput).ToInstanceTemplateSchedulingPtrOutputWithContext(ctx)
}

// InstanceTemplateSchedulingPtrInput is an input type that accepts InstanceTemplateSchedulingArgs, InstanceTemplateSchedulingPtr and InstanceTemplateSchedulingPtrOutput values.
// You can construct a concrete instance of `InstanceTemplateSchedulingPtrInput` via:
//
// 		 InstanceTemplateSchedulingArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceTemplateSchedulingPtrInput interface {
	pulumi.Input

	ToInstanceTemplateSchedulingPtrOutput() InstanceTemplateSchedulingPtrOutput
	ToInstanceTemplateSchedulingPtrOutputWithContext(context.Context) InstanceTemplateSchedulingPtrOutput
}

type instanceTemplateSchedulingPtrType InstanceTemplateSchedulingArgs

func InstanceTemplateSchedulingPtr(v *InstanceTemplateSchedulingArgs) InstanceTemplateSchedulingPtrInput {
	return (*instanceTemplateSchedulingPtrType)(v)
}

func (*instanceTemplateSchedulingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTemplateScheduling)(nil)).Elem()
}

func (i *instanceTemplateSchedulingPtrType) ToInstanceTemplateSchedulingPtrOutput() InstanceTemplateSchedulingPtrOutput {
	return i.ToInstanceTemplateSchedulingPtrOutputWithContext(context.Background())
}

func (i *instanceTemplateSchedulingPtrType) ToInstanceTemplateSchedulingPtrOutputWithContext(ctx context.Context) InstanceTemplateSchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateSchedulingPtrOutput)
}

type InstanceTemplateSchedulingOutput struct{ *pulumi.OutputState }

func (InstanceTemplateSchedulingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateScheduling)(nil)).Elem()
}

func (o InstanceTemplateSchedulingOutput) ToInstanceTemplateSchedulingOutput() InstanceTemplateSchedulingOutput {
	return o
}

func (o InstanceTemplateSchedulingOutput) ToInstanceTemplateSchedulingOutputWithContext(ctx context.Context) InstanceTemplateSchedulingOutput {
	return o
}

func (o InstanceTemplateSchedulingOutput) ToInstanceTemplateSchedulingPtrOutput() InstanceTemplateSchedulingPtrOutput {
	return o.ToInstanceTemplateSchedulingPtrOutputWithContext(context.Background())
}

func (o InstanceTemplateSchedulingOutput) ToInstanceTemplateSchedulingPtrOutputWithContext(ctx context.Context) InstanceTemplateSchedulingPtrOutput {
	return o.ApplyT(func(v InstanceTemplateScheduling) *InstanceTemplateScheduling {
		return &v
	}).(InstanceTemplateSchedulingPtrOutput)
}

// Specifies whether the instance should be
// automatically restarted if it is terminated by Compute Engine (not
// terminated by a user). This defaults to true.
func (o InstanceTemplateSchedulingOutput) AutomaticRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceTemplateScheduling) *bool { return v.AutomaticRestart }).(pulumi.BoolPtrOutput)
}

// Specifies node affinities or anti-affinities
// to determine which sole-tenant nodes your instances and managed instance
// groups will use as host systems. Read more on sole-tenant node creation
// [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
// Structure documented below.
func (o InstanceTemplateSchedulingOutput) NodeAffinities() InstanceTemplateSchedulingNodeAffinityArrayOutput {
	return o.ApplyT(func(v InstanceTemplateScheduling) []InstanceTemplateSchedulingNodeAffinity { return v.NodeAffinities }).(InstanceTemplateSchedulingNodeAffinityArrayOutput)
}

// Defines the maintenance behavior for this
// instance.
func (o InstanceTemplateSchedulingOutput) OnHostMaintenance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateScheduling) *string { return v.OnHostMaintenance }).(pulumi.StringPtrOutput)
}

// Allows instance to be preempted. This defaults to
// false. Read more on this
// [here](https://cloud.google.com/compute/docs/instances/preemptible).
func (o InstanceTemplateSchedulingOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceTemplateScheduling) *bool { return v.Preemptible }).(pulumi.BoolPtrOutput)
}

type InstanceTemplateSchedulingPtrOutput struct{ *pulumi.OutputState }

func (InstanceTemplateSchedulingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTemplateScheduling)(nil)).Elem()
}

func (o InstanceTemplateSchedulingPtrOutput) ToInstanceTemplateSchedulingPtrOutput() InstanceTemplateSchedulingPtrOutput {
	return o
}

func (o InstanceTemplateSchedulingPtrOutput) ToInstanceTemplateSchedulingPtrOutputWithContext(ctx context.Context) InstanceTemplateSchedulingPtrOutput {
	return o
}

func (o InstanceTemplateSchedulingPtrOutput) Elem() InstanceTemplateSchedulingOutput {
	return o.ApplyT(func(v *InstanceTemplateScheduling) InstanceTemplateScheduling { return *v }).(InstanceTemplateSchedulingOutput)
}

// Specifies whether the instance should be
// automatically restarted if it is terminated by Compute Engine (not
// terminated by a user). This defaults to true.
func (o InstanceTemplateSchedulingPtrOutput) AutomaticRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceTemplateScheduling) *bool {
		if v == nil {
			return nil
		}
		return v.AutomaticRestart
	}).(pulumi.BoolPtrOutput)
}

// Specifies node affinities or anti-affinities
// to determine which sole-tenant nodes your instances and managed instance
// groups will use as host systems. Read more on sole-tenant node creation
// [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
// Structure documented below.
func (o InstanceTemplateSchedulingPtrOutput) NodeAffinities() InstanceTemplateSchedulingNodeAffinityArrayOutput {
	return o.ApplyT(func(v *InstanceTemplateScheduling) []InstanceTemplateSchedulingNodeAffinity {
		if v == nil {
			return nil
		}
		return v.NodeAffinities
	}).(InstanceTemplateSchedulingNodeAffinityArrayOutput)
}

// Defines the maintenance behavior for this
// instance.
func (o InstanceTemplateSchedulingPtrOutput) OnHostMaintenance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceTemplateScheduling) *string {
		if v == nil {
			return nil
		}
		return v.OnHostMaintenance
	}).(pulumi.StringPtrOutput)
}

// Allows instance to be preempted. This defaults to
// false. Read more on this
// [here](https://cloud.google.com/compute/docs/instances/preemptible).
func (o InstanceTemplateSchedulingPtrOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceTemplateScheduling) *bool {
		if v == nil {
			return nil
		}
		return v.Preemptible
	}).(pulumi.BoolPtrOutput)
}

type InstanceTemplateSchedulingNodeAffinity struct {
	// The key for the node affinity label.
	Key string `pulumi:"key"`
	// The operator. Can be `IN` for node-affinities
	// or `NOT_IN` for anti-affinities.
	Operator string   `pulumi:"operator"`
	Values   []string `pulumi:"values"`
}

// InstanceTemplateSchedulingNodeAffinityInput is an input type that accepts InstanceTemplateSchedulingNodeAffinityArgs and InstanceTemplateSchedulingNodeAffinityOutput values.
// You can construct a concrete instance of `InstanceTemplateSchedulingNodeAffinityInput` via:
//
// 		 InstanceTemplateSchedulingNodeAffinityArgs{...}
//
type InstanceTemplateSchedulingNodeAffinityInput interface {
	pulumi.Input

	ToInstanceTemplateSchedulingNodeAffinityOutput() InstanceTemplateSchedulingNodeAffinityOutput
	ToInstanceTemplateSchedulingNodeAffinityOutputWithContext(context.Context) InstanceTemplateSchedulingNodeAffinityOutput
}

type InstanceTemplateSchedulingNodeAffinityArgs struct {
	// The key for the node affinity label.
	Key pulumi.StringInput `pulumi:"key"`
	// The operator. Can be `IN` for node-affinities
	// or `NOT_IN` for anti-affinities.
	Operator pulumi.StringInput      `pulumi:"operator"`
	Values   pulumi.StringArrayInput `pulumi:"values"`
}

func (InstanceTemplateSchedulingNodeAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateSchedulingNodeAffinity)(nil)).Elem()
}

func (i InstanceTemplateSchedulingNodeAffinityArgs) ToInstanceTemplateSchedulingNodeAffinityOutput() InstanceTemplateSchedulingNodeAffinityOutput {
	return i.ToInstanceTemplateSchedulingNodeAffinityOutputWithContext(context.Background())
}

func (i InstanceTemplateSchedulingNodeAffinityArgs) ToInstanceTemplateSchedulingNodeAffinityOutputWithContext(ctx context.Context) InstanceTemplateSchedulingNodeAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateSchedulingNodeAffinityOutput)
}

// InstanceTemplateSchedulingNodeAffinityArrayInput is an input type that accepts InstanceTemplateSchedulingNodeAffinityArray and InstanceTemplateSchedulingNodeAffinityArrayOutput values.
// You can construct a concrete instance of `InstanceTemplateSchedulingNodeAffinityArrayInput` via:
//
// 		 InstanceTemplateSchedulingNodeAffinityArray{ InstanceTemplateSchedulingNodeAffinityArgs{...} }
//
type InstanceTemplateSchedulingNodeAffinityArrayInput interface {
	pulumi.Input

	ToInstanceTemplateSchedulingNodeAffinityArrayOutput() InstanceTemplateSchedulingNodeAffinityArrayOutput
	ToInstanceTemplateSchedulingNodeAffinityArrayOutputWithContext(context.Context) InstanceTemplateSchedulingNodeAffinityArrayOutput
}

type InstanceTemplateSchedulingNodeAffinityArray []InstanceTemplateSchedulingNodeAffinityInput

func (InstanceTemplateSchedulingNodeAffinityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTemplateSchedulingNodeAffinity)(nil)).Elem()
}

func (i InstanceTemplateSchedulingNodeAffinityArray) ToInstanceTemplateSchedulingNodeAffinityArrayOutput() InstanceTemplateSchedulingNodeAffinityArrayOutput {
	return i.ToInstanceTemplateSchedulingNodeAffinityArrayOutputWithContext(context.Background())
}

func (i InstanceTemplateSchedulingNodeAffinityArray) ToInstanceTemplateSchedulingNodeAffinityArrayOutputWithContext(ctx context.Context) InstanceTemplateSchedulingNodeAffinityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateSchedulingNodeAffinityArrayOutput)
}

type InstanceTemplateSchedulingNodeAffinityOutput struct{ *pulumi.OutputState }

func (InstanceTemplateSchedulingNodeAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateSchedulingNodeAffinity)(nil)).Elem()
}

func (o InstanceTemplateSchedulingNodeAffinityOutput) ToInstanceTemplateSchedulingNodeAffinityOutput() InstanceTemplateSchedulingNodeAffinityOutput {
	return o
}

func (o InstanceTemplateSchedulingNodeAffinityOutput) ToInstanceTemplateSchedulingNodeAffinityOutputWithContext(ctx context.Context) InstanceTemplateSchedulingNodeAffinityOutput {
	return o
}

// The key for the node affinity label.
func (o InstanceTemplateSchedulingNodeAffinityOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTemplateSchedulingNodeAffinity) string { return v.Key }).(pulumi.StringOutput)
}

// The operator. Can be `IN` for node-affinities
// or `NOT_IN` for anti-affinities.
func (o InstanceTemplateSchedulingNodeAffinityOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTemplateSchedulingNodeAffinity) string { return v.Operator }).(pulumi.StringOutput)
}

func (o InstanceTemplateSchedulingNodeAffinityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceTemplateSchedulingNodeAffinity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type InstanceTemplateSchedulingNodeAffinityArrayOutput struct{ *pulumi.OutputState }

func (InstanceTemplateSchedulingNodeAffinityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTemplateSchedulingNodeAffinity)(nil)).Elem()
}

func (o InstanceTemplateSchedulingNodeAffinityArrayOutput) ToInstanceTemplateSchedulingNodeAffinityArrayOutput() InstanceTemplateSchedulingNodeAffinityArrayOutput {
	return o
}

func (o InstanceTemplateSchedulingNodeAffinityArrayOutput) ToInstanceTemplateSchedulingNodeAffinityArrayOutputWithContext(ctx context.Context) InstanceTemplateSchedulingNodeAffinityArrayOutput {
	return o
}

func (o InstanceTemplateSchedulingNodeAffinityArrayOutput) Index(i pulumi.IntInput) InstanceTemplateSchedulingNodeAffinityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTemplateSchedulingNodeAffinity {
		return vs[0].([]InstanceTemplateSchedulingNodeAffinity)[vs[1].(int)]
	}).(InstanceTemplateSchedulingNodeAffinityOutput)
}

type InstanceTemplateServiceAccount struct {
	// The service account e-mail address. If not given, the
	// default Google Compute Engine service account is used.
	Email *string `pulumi:"email"`
	// A list of service scopes. Both OAuth2 URLs and gcloud
	// short names are supported. To allow full access to all Cloud APIs, use the
	// `cloud-platform` scope. See a complete list of scopes [here](https://cloud.google.com/sdk/gcloud/reference/alpha/compute/instances/set-scopes#--scopes).
	Scopes []string `pulumi:"scopes"`
}

// InstanceTemplateServiceAccountInput is an input type that accepts InstanceTemplateServiceAccountArgs and InstanceTemplateServiceAccountOutput values.
// You can construct a concrete instance of `InstanceTemplateServiceAccountInput` via:
//
// 		 InstanceTemplateServiceAccountArgs{...}
//
type InstanceTemplateServiceAccountInput interface {
	pulumi.Input

	ToInstanceTemplateServiceAccountOutput() InstanceTemplateServiceAccountOutput
	ToInstanceTemplateServiceAccountOutputWithContext(context.Context) InstanceTemplateServiceAccountOutput
}

type InstanceTemplateServiceAccountArgs struct {
	// The service account e-mail address. If not given, the
	// default Google Compute Engine service account is used.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// A list of service scopes. Both OAuth2 URLs and gcloud
	// short names are supported. To allow full access to all Cloud APIs, use the
	// `cloud-platform` scope. See a complete list of scopes [here](https://cloud.google.com/sdk/gcloud/reference/alpha/compute/instances/set-scopes#--scopes).
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (InstanceTemplateServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateServiceAccount)(nil)).Elem()
}

func (i InstanceTemplateServiceAccountArgs) ToInstanceTemplateServiceAccountOutput() InstanceTemplateServiceAccountOutput {
	return i.ToInstanceTemplateServiceAccountOutputWithContext(context.Background())
}

func (i InstanceTemplateServiceAccountArgs) ToInstanceTemplateServiceAccountOutputWithContext(ctx context.Context) InstanceTemplateServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateServiceAccountOutput)
}

func (i InstanceTemplateServiceAccountArgs) ToInstanceTemplateServiceAccountPtrOutput() InstanceTemplateServiceAccountPtrOutput {
	return i.ToInstanceTemplateServiceAccountPtrOutputWithContext(context.Background())
}

func (i InstanceTemplateServiceAccountArgs) ToInstanceTemplateServiceAccountPtrOutputWithContext(ctx context.Context) InstanceTemplateServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateServiceAccountOutput).ToInstanceTemplateServiceAccountPtrOutputWithContext(ctx)
}

// InstanceTemplateServiceAccountPtrInput is an input type that accepts InstanceTemplateServiceAccountArgs, InstanceTemplateServiceAccountPtr and InstanceTemplateServiceAccountPtrOutput values.
// You can construct a concrete instance of `InstanceTemplateServiceAccountPtrInput` via:
//
// 		 InstanceTemplateServiceAccountArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceTemplateServiceAccountPtrInput interface {
	pulumi.Input

	ToInstanceTemplateServiceAccountPtrOutput() InstanceTemplateServiceAccountPtrOutput
	ToInstanceTemplateServiceAccountPtrOutputWithContext(context.Context) InstanceTemplateServiceAccountPtrOutput
}

type instanceTemplateServiceAccountPtrType InstanceTemplateServiceAccountArgs

func InstanceTemplateServiceAccountPtr(v *InstanceTemplateServiceAccountArgs) InstanceTemplateServiceAccountPtrInput {
	return (*instanceTemplateServiceAccountPtrType)(v)
}

func (*instanceTemplateServiceAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTemplateServiceAccount)(nil)).Elem()
}

func (i *instanceTemplateServiceAccountPtrType) ToInstanceTemplateServiceAccountPtrOutput() InstanceTemplateServiceAccountPtrOutput {
	return i.ToInstanceTemplateServiceAccountPtrOutputWithContext(context.Background())
}

func (i *instanceTemplateServiceAccountPtrType) ToInstanceTemplateServiceAccountPtrOutputWithContext(ctx context.Context) InstanceTemplateServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateServiceAccountPtrOutput)
}

type InstanceTemplateServiceAccountOutput struct{ *pulumi.OutputState }

func (InstanceTemplateServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateServiceAccount)(nil)).Elem()
}

func (o InstanceTemplateServiceAccountOutput) ToInstanceTemplateServiceAccountOutput() InstanceTemplateServiceAccountOutput {
	return o
}

func (o InstanceTemplateServiceAccountOutput) ToInstanceTemplateServiceAccountOutputWithContext(ctx context.Context) InstanceTemplateServiceAccountOutput {
	return o
}

func (o InstanceTemplateServiceAccountOutput) ToInstanceTemplateServiceAccountPtrOutput() InstanceTemplateServiceAccountPtrOutput {
	return o.ToInstanceTemplateServiceAccountPtrOutputWithContext(context.Background())
}

func (o InstanceTemplateServiceAccountOutput) ToInstanceTemplateServiceAccountPtrOutputWithContext(ctx context.Context) InstanceTemplateServiceAccountPtrOutput {
	return o.ApplyT(func(v InstanceTemplateServiceAccount) *InstanceTemplateServiceAccount {
		return &v
	}).(InstanceTemplateServiceAccountPtrOutput)
}

// The service account e-mail address. If not given, the
// default Google Compute Engine service account is used.
func (o InstanceTemplateServiceAccountOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTemplateServiceAccount) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// A list of service scopes. Both OAuth2 URLs and gcloud
// short names are supported. To allow full access to all Cloud APIs, use the
// `cloud-platform` scope. See a complete list of scopes [here](https://cloud.google.com/sdk/gcloud/reference/alpha/compute/instances/set-scopes#--scopes).
func (o InstanceTemplateServiceAccountOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceTemplateServiceAccount) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type InstanceTemplateServiceAccountPtrOutput struct{ *pulumi.OutputState }

func (InstanceTemplateServiceAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTemplateServiceAccount)(nil)).Elem()
}

func (o InstanceTemplateServiceAccountPtrOutput) ToInstanceTemplateServiceAccountPtrOutput() InstanceTemplateServiceAccountPtrOutput {
	return o
}

func (o InstanceTemplateServiceAccountPtrOutput) ToInstanceTemplateServiceAccountPtrOutputWithContext(ctx context.Context) InstanceTemplateServiceAccountPtrOutput {
	return o
}

func (o InstanceTemplateServiceAccountPtrOutput) Elem() InstanceTemplateServiceAccountOutput {
	return o.ApplyT(func(v *InstanceTemplateServiceAccount) InstanceTemplateServiceAccount { return *v }).(InstanceTemplateServiceAccountOutput)
}

// The service account e-mail address. If not given, the
// default Google Compute Engine service account is used.
func (o InstanceTemplateServiceAccountPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceTemplateServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// A list of service scopes. Both OAuth2 URLs and gcloud
// short names are supported. To allow full access to all Cloud APIs, use the
// `cloud-platform` scope. See a complete list of scopes [here](https://cloud.google.com/sdk/gcloud/reference/alpha/compute/instances/set-scopes#--scopes).
func (o InstanceTemplateServiceAccountPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceTemplateServiceAccount) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

type InstanceTemplateShieldedInstanceConfig struct {
	// -- Compare the most recent boot measurements to the integrity policy baseline and return a pair of pass/fail results depending on whether they match or not. Defaults to true.
	EnableIntegrityMonitoring *bool `pulumi:"enableIntegrityMonitoring"`
	// -- Verify the digital signature of all boot components, and halt the boot process if signature verification fails. Defaults to false.
	EnableSecureBoot *bool `pulumi:"enableSecureBoot"`
	// -- Use a virtualized trusted platform module, which is a specialized computer chip you can use to encrypt objects like keys and certificates. Defaults to true.
	EnableVtpm *bool `pulumi:"enableVtpm"`
}

// InstanceTemplateShieldedInstanceConfigInput is an input type that accepts InstanceTemplateShieldedInstanceConfigArgs and InstanceTemplateShieldedInstanceConfigOutput values.
// You can construct a concrete instance of `InstanceTemplateShieldedInstanceConfigInput` via:
//
// 		 InstanceTemplateShieldedInstanceConfigArgs{...}
//
type InstanceTemplateShieldedInstanceConfigInput interface {
	pulumi.Input

	ToInstanceTemplateShieldedInstanceConfigOutput() InstanceTemplateShieldedInstanceConfigOutput
	ToInstanceTemplateShieldedInstanceConfigOutputWithContext(context.Context) InstanceTemplateShieldedInstanceConfigOutput
}

type InstanceTemplateShieldedInstanceConfigArgs struct {
	// -- Compare the most recent boot measurements to the integrity policy baseline and return a pair of pass/fail results depending on whether they match or not. Defaults to true.
	EnableIntegrityMonitoring pulumi.BoolPtrInput `pulumi:"enableIntegrityMonitoring"`
	// -- Verify the digital signature of all boot components, and halt the boot process if signature verification fails. Defaults to false.
	EnableSecureBoot pulumi.BoolPtrInput `pulumi:"enableSecureBoot"`
	// -- Use a virtualized trusted platform module, which is a specialized computer chip you can use to encrypt objects like keys and certificates. Defaults to true.
	EnableVtpm pulumi.BoolPtrInput `pulumi:"enableVtpm"`
}

func (InstanceTemplateShieldedInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateShieldedInstanceConfig)(nil)).Elem()
}

func (i InstanceTemplateShieldedInstanceConfigArgs) ToInstanceTemplateShieldedInstanceConfigOutput() InstanceTemplateShieldedInstanceConfigOutput {
	return i.ToInstanceTemplateShieldedInstanceConfigOutputWithContext(context.Background())
}

func (i InstanceTemplateShieldedInstanceConfigArgs) ToInstanceTemplateShieldedInstanceConfigOutputWithContext(ctx context.Context) InstanceTemplateShieldedInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateShieldedInstanceConfigOutput)
}

func (i InstanceTemplateShieldedInstanceConfigArgs) ToInstanceTemplateShieldedInstanceConfigPtrOutput() InstanceTemplateShieldedInstanceConfigPtrOutput {
	return i.ToInstanceTemplateShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i InstanceTemplateShieldedInstanceConfigArgs) ToInstanceTemplateShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) InstanceTemplateShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateShieldedInstanceConfigOutput).ToInstanceTemplateShieldedInstanceConfigPtrOutputWithContext(ctx)
}

// InstanceTemplateShieldedInstanceConfigPtrInput is an input type that accepts InstanceTemplateShieldedInstanceConfigArgs, InstanceTemplateShieldedInstanceConfigPtr and InstanceTemplateShieldedInstanceConfigPtrOutput values.
// You can construct a concrete instance of `InstanceTemplateShieldedInstanceConfigPtrInput` via:
//
// 		 InstanceTemplateShieldedInstanceConfigArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceTemplateShieldedInstanceConfigPtrInput interface {
	pulumi.Input

	ToInstanceTemplateShieldedInstanceConfigPtrOutput() InstanceTemplateShieldedInstanceConfigPtrOutput
	ToInstanceTemplateShieldedInstanceConfigPtrOutputWithContext(context.Context) InstanceTemplateShieldedInstanceConfigPtrOutput
}

type instanceTemplateShieldedInstanceConfigPtrType InstanceTemplateShieldedInstanceConfigArgs

func InstanceTemplateShieldedInstanceConfigPtr(v *InstanceTemplateShieldedInstanceConfigArgs) InstanceTemplateShieldedInstanceConfigPtrInput {
	return (*instanceTemplateShieldedInstanceConfigPtrType)(v)
}

func (*instanceTemplateShieldedInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTemplateShieldedInstanceConfig)(nil)).Elem()
}

func (i *instanceTemplateShieldedInstanceConfigPtrType) ToInstanceTemplateShieldedInstanceConfigPtrOutput() InstanceTemplateShieldedInstanceConfigPtrOutput {
	return i.ToInstanceTemplateShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *instanceTemplateShieldedInstanceConfigPtrType) ToInstanceTemplateShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) InstanceTemplateShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateShieldedInstanceConfigPtrOutput)
}

type InstanceTemplateShieldedInstanceConfigOutput struct{ *pulumi.OutputState }

func (InstanceTemplateShieldedInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateShieldedInstanceConfig)(nil)).Elem()
}

func (o InstanceTemplateShieldedInstanceConfigOutput) ToInstanceTemplateShieldedInstanceConfigOutput() InstanceTemplateShieldedInstanceConfigOutput {
	return o
}

func (o InstanceTemplateShieldedInstanceConfigOutput) ToInstanceTemplateShieldedInstanceConfigOutputWithContext(ctx context.Context) InstanceTemplateShieldedInstanceConfigOutput {
	return o
}

func (o InstanceTemplateShieldedInstanceConfigOutput) ToInstanceTemplateShieldedInstanceConfigPtrOutput() InstanceTemplateShieldedInstanceConfigPtrOutput {
	return o.ToInstanceTemplateShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (o InstanceTemplateShieldedInstanceConfigOutput) ToInstanceTemplateShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) InstanceTemplateShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v InstanceTemplateShieldedInstanceConfig) *InstanceTemplateShieldedInstanceConfig {
		return &v
	}).(InstanceTemplateShieldedInstanceConfigPtrOutput)
}

// -- Compare the most recent boot measurements to the integrity policy baseline and return a pair of pass/fail results depending on whether they match or not. Defaults to true.
func (o InstanceTemplateShieldedInstanceConfigOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceTemplateShieldedInstanceConfig) *bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolPtrOutput)
}

// -- Verify the digital signature of all boot components, and halt the boot process if signature verification fails. Defaults to false.
func (o InstanceTemplateShieldedInstanceConfigOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceTemplateShieldedInstanceConfig) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

// -- Use a virtualized trusted platform module, which is a specialized computer chip you can use to encrypt objects like keys and certificates. Defaults to true.
func (o InstanceTemplateShieldedInstanceConfigOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceTemplateShieldedInstanceConfig) *bool { return v.EnableVtpm }).(pulumi.BoolPtrOutput)
}

type InstanceTemplateShieldedInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (InstanceTemplateShieldedInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTemplateShieldedInstanceConfig)(nil)).Elem()
}

func (o InstanceTemplateShieldedInstanceConfigPtrOutput) ToInstanceTemplateShieldedInstanceConfigPtrOutput() InstanceTemplateShieldedInstanceConfigPtrOutput {
	return o
}

func (o InstanceTemplateShieldedInstanceConfigPtrOutput) ToInstanceTemplateShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) InstanceTemplateShieldedInstanceConfigPtrOutput {
	return o
}

func (o InstanceTemplateShieldedInstanceConfigPtrOutput) Elem() InstanceTemplateShieldedInstanceConfigOutput {
	return o.ApplyT(func(v *InstanceTemplateShieldedInstanceConfig) InstanceTemplateShieldedInstanceConfig { return *v }).(InstanceTemplateShieldedInstanceConfigOutput)
}

// -- Compare the most recent boot measurements to the integrity policy baseline and return a pair of pass/fail results depending on whether they match or not. Defaults to true.
func (o InstanceTemplateShieldedInstanceConfigPtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceTemplateShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

// -- Verify the digital signature of all boot components, and halt the boot process if signature verification fails. Defaults to false.
func (o InstanceTemplateShieldedInstanceConfigPtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceTemplateShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// -- Use a virtualized trusted platform module, which is a specialized computer chip you can use to encrypt objects like keys and certificates. Defaults to true.
func (o InstanceTemplateShieldedInstanceConfigPtrOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceTemplateShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVtpm
	}).(pulumi.BoolPtrOutput)
}

type InterconnectAttachmentPrivateInterconnectInfo struct {
	Tag8021q *int `pulumi:"tag8021q"`
}

// InterconnectAttachmentPrivateInterconnectInfoInput is an input type that accepts InterconnectAttachmentPrivateInterconnectInfoArgs and InterconnectAttachmentPrivateInterconnectInfoOutput values.
// You can construct a concrete instance of `InterconnectAttachmentPrivateInterconnectInfoInput` via:
//
// 		 InterconnectAttachmentPrivateInterconnectInfoArgs{...}
//
type InterconnectAttachmentPrivateInterconnectInfoInput interface {
	pulumi.Input

	ToInterconnectAttachmentPrivateInterconnectInfoOutput() InterconnectAttachmentPrivateInterconnectInfoOutput
	ToInterconnectAttachmentPrivateInterconnectInfoOutputWithContext(context.Context) InterconnectAttachmentPrivateInterconnectInfoOutput
}

type InterconnectAttachmentPrivateInterconnectInfoArgs struct {
	Tag8021q pulumi.IntPtrInput `pulumi:"tag8021q"`
}

func (InterconnectAttachmentPrivateInterconnectInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterconnectAttachmentPrivateInterconnectInfo)(nil)).Elem()
}

func (i InterconnectAttachmentPrivateInterconnectInfoArgs) ToInterconnectAttachmentPrivateInterconnectInfoOutput() InterconnectAttachmentPrivateInterconnectInfoOutput {
	return i.ToInterconnectAttachmentPrivateInterconnectInfoOutputWithContext(context.Background())
}

func (i InterconnectAttachmentPrivateInterconnectInfoArgs) ToInterconnectAttachmentPrivateInterconnectInfoOutputWithContext(ctx context.Context) InterconnectAttachmentPrivateInterconnectInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentPrivateInterconnectInfoOutput)
}

func (i InterconnectAttachmentPrivateInterconnectInfoArgs) ToInterconnectAttachmentPrivateInterconnectInfoPtrOutput() InterconnectAttachmentPrivateInterconnectInfoPtrOutput {
	return i.ToInterconnectAttachmentPrivateInterconnectInfoPtrOutputWithContext(context.Background())
}

func (i InterconnectAttachmentPrivateInterconnectInfoArgs) ToInterconnectAttachmentPrivateInterconnectInfoPtrOutputWithContext(ctx context.Context) InterconnectAttachmentPrivateInterconnectInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentPrivateInterconnectInfoOutput).ToInterconnectAttachmentPrivateInterconnectInfoPtrOutputWithContext(ctx)
}

// InterconnectAttachmentPrivateInterconnectInfoPtrInput is an input type that accepts InterconnectAttachmentPrivateInterconnectInfoArgs, InterconnectAttachmentPrivateInterconnectInfoPtr and InterconnectAttachmentPrivateInterconnectInfoPtrOutput values.
// You can construct a concrete instance of `InterconnectAttachmentPrivateInterconnectInfoPtrInput` via:
//
// 		 InterconnectAttachmentPrivateInterconnectInfoArgs{...}
//
//  or:
//
// 		 nil
//
type InterconnectAttachmentPrivateInterconnectInfoPtrInput interface {
	pulumi.Input

	ToInterconnectAttachmentPrivateInterconnectInfoPtrOutput() InterconnectAttachmentPrivateInterconnectInfoPtrOutput
	ToInterconnectAttachmentPrivateInterconnectInfoPtrOutputWithContext(context.Context) InterconnectAttachmentPrivateInterconnectInfoPtrOutput
}

type interconnectAttachmentPrivateInterconnectInfoPtrType InterconnectAttachmentPrivateInterconnectInfoArgs

func InterconnectAttachmentPrivateInterconnectInfoPtr(v *InterconnectAttachmentPrivateInterconnectInfoArgs) InterconnectAttachmentPrivateInterconnectInfoPtrInput {
	return (*interconnectAttachmentPrivateInterconnectInfoPtrType)(v)
}

func (*interconnectAttachmentPrivateInterconnectInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InterconnectAttachmentPrivateInterconnectInfo)(nil)).Elem()
}

func (i *interconnectAttachmentPrivateInterconnectInfoPtrType) ToInterconnectAttachmentPrivateInterconnectInfoPtrOutput() InterconnectAttachmentPrivateInterconnectInfoPtrOutput {
	return i.ToInterconnectAttachmentPrivateInterconnectInfoPtrOutputWithContext(context.Background())
}

func (i *interconnectAttachmentPrivateInterconnectInfoPtrType) ToInterconnectAttachmentPrivateInterconnectInfoPtrOutputWithContext(ctx context.Context) InterconnectAttachmentPrivateInterconnectInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentPrivateInterconnectInfoPtrOutput)
}

type InterconnectAttachmentPrivateInterconnectInfoOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentPrivateInterconnectInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterconnectAttachmentPrivateInterconnectInfo)(nil)).Elem()
}

func (o InterconnectAttachmentPrivateInterconnectInfoOutput) ToInterconnectAttachmentPrivateInterconnectInfoOutput() InterconnectAttachmentPrivateInterconnectInfoOutput {
	return o
}

func (o InterconnectAttachmentPrivateInterconnectInfoOutput) ToInterconnectAttachmentPrivateInterconnectInfoOutputWithContext(ctx context.Context) InterconnectAttachmentPrivateInterconnectInfoOutput {
	return o
}

func (o InterconnectAttachmentPrivateInterconnectInfoOutput) ToInterconnectAttachmentPrivateInterconnectInfoPtrOutput() InterconnectAttachmentPrivateInterconnectInfoPtrOutput {
	return o.ToInterconnectAttachmentPrivateInterconnectInfoPtrOutputWithContext(context.Background())
}

func (o InterconnectAttachmentPrivateInterconnectInfoOutput) ToInterconnectAttachmentPrivateInterconnectInfoPtrOutputWithContext(ctx context.Context) InterconnectAttachmentPrivateInterconnectInfoPtrOutput {
	return o.ApplyT(func(v InterconnectAttachmentPrivateInterconnectInfo) *InterconnectAttachmentPrivateInterconnectInfo {
		return &v
	}).(InterconnectAttachmentPrivateInterconnectInfoPtrOutput)
}
func (o InterconnectAttachmentPrivateInterconnectInfoOutput) Tag8021q() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InterconnectAttachmentPrivateInterconnectInfo) *int { return v.Tag8021q }).(pulumi.IntPtrOutput)
}

type InterconnectAttachmentPrivateInterconnectInfoPtrOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentPrivateInterconnectInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterconnectAttachmentPrivateInterconnectInfo)(nil)).Elem()
}

func (o InterconnectAttachmentPrivateInterconnectInfoPtrOutput) ToInterconnectAttachmentPrivateInterconnectInfoPtrOutput() InterconnectAttachmentPrivateInterconnectInfoPtrOutput {
	return o
}

func (o InterconnectAttachmentPrivateInterconnectInfoPtrOutput) ToInterconnectAttachmentPrivateInterconnectInfoPtrOutputWithContext(ctx context.Context) InterconnectAttachmentPrivateInterconnectInfoPtrOutput {
	return o
}

func (o InterconnectAttachmentPrivateInterconnectInfoPtrOutput) Elem() InterconnectAttachmentPrivateInterconnectInfoOutput {
	return o.ApplyT(func(v *InterconnectAttachmentPrivateInterconnectInfo) InterconnectAttachmentPrivateInterconnectInfo {
		return *v
	}).(InterconnectAttachmentPrivateInterconnectInfoOutput)
}

func (o InterconnectAttachmentPrivateInterconnectInfoPtrOutput) Tag8021q() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterconnectAttachmentPrivateInterconnectInfo) *int {
		if v == nil {
			return nil
		}
		return v.Tag8021q
	}).(pulumi.IntPtrOutput)
}

type ManagedSslCertificateManaged struct {
	// Domains for which a managed SSL certificate will be valid.  Currently,
	// there can be up to 100 domains in this list.
	Domains []string `pulumi:"domains"`
}

// ManagedSslCertificateManagedInput is an input type that accepts ManagedSslCertificateManagedArgs and ManagedSslCertificateManagedOutput values.
// You can construct a concrete instance of `ManagedSslCertificateManagedInput` via:
//
// 		 ManagedSslCertificateManagedArgs{...}
//
type ManagedSslCertificateManagedInput interface {
	pulumi.Input

	ToManagedSslCertificateManagedOutput() ManagedSslCertificateManagedOutput
	ToManagedSslCertificateManagedOutputWithContext(context.Context) ManagedSslCertificateManagedOutput
}

type ManagedSslCertificateManagedArgs struct {
	// Domains for which a managed SSL certificate will be valid.  Currently,
	// there can be up to 100 domains in this list.
	Domains pulumi.StringArrayInput `pulumi:"domains"`
}

func (ManagedSslCertificateManagedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedSslCertificateManaged)(nil)).Elem()
}

func (i ManagedSslCertificateManagedArgs) ToManagedSslCertificateManagedOutput() ManagedSslCertificateManagedOutput {
	return i.ToManagedSslCertificateManagedOutputWithContext(context.Background())
}

func (i ManagedSslCertificateManagedArgs) ToManagedSslCertificateManagedOutputWithContext(ctx context.Context) ManagedSslCertificateManagedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedSslCertificateManagedOutput)
}

func (i ManagedSslCertificateManagedArgs) ToManagedSslCertificateManagedPtrOutput() ManagedSslCertificateManagedPtrOutput {
	return i.ToManagedSslCertificateManagedPtrOutputWithContext(context.Background())
}

func (i ManagedSslCertificateManagedArgs) ToManagedSslCertificateManagedPtrOutputWithContext(ctx context.Context) ManagedSslCertificateManagedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedSslCertificateManagedOutput).ToManagedSslCertificateManagedPtrOutputWithContext(ctx)
}

// ManagedSslCertificateManagedPtrInput is an input type that accepts ManagedSslCertificateManagedArgs, ManagedSslCertificateManagedPtr and ManagedSslCertificateManagedPtrOutput values.
// You can construct a concrete instance of `ManagedSslCertificateManagedPtrInput` via:
//
// 		 ManagedSslCertificateManagedArgs{...}
//
//  or:
//
// 		 nil
//
type ManagedSslCertificateManagedPtrInput interface {
	pulumi.Input

	ToManagedSslCertificateManagedPtrOutput() ManagedSslCertificateManagedPtrOutput
	ToManagedSslCertificateManagedPtrOutputWithContext(context.Context) ManagedSslCertificateManagedPtrOutput
}

type managedSslCertificateManagedPtrType ManagedSslCertificateManagedArgs

func ManagedSslCertificateManagedPtr(v *ManagedSslCertificateManagedArgs) ManagedSslCertificateManagedPtrInput {
	return (*managedSslCertificateManagedPtrType)(v)
}

func (*managedSslCertificateManagedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedSslCertificateManaged)(nil)).Elem()
}

func (i *managedSslCertificateManagedPtrType) ToManagedSslCertificateManagedPtrOutput() ManagedSslCertificateManagedPtrOutput {
	return i.ToManagedSslCertificateManagedPtrOutputWithContext(context.Background())
}

func (i *managedSslCertificateManagedPtrType) ToManagedSslCertificateManagedPtrOutputWithContext(ctx context.Context) ManagedSslCertificateManagedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedSslCertificateManagedPtrOutput)
}

type ManagedSslCertificateManagedOutput struct{ *pulumi.OutputState }

func (ManagedSslCertificateManagedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedSslCertificateManaged)(nil)).Elem()
}

func (o ManagedSslCertificateManagedOutput) ToManagedSslCertificateManagedOutput() ManagedSslCertificateManagedOutput {
	return o
}

func (o ManagedSslCertificateManagedOutput) ToManagedSslCertificateManagedOutputWithContext(ctx context.Context) ManagedSslCertificateManagedOutput {
	return o
}

func (o ManagedSslCertificateManagedOutput) ToManagedSslCertificateManagedPtrOutput() ManagedSslCertificateManagedPtrOutput {
	return o.ToManagedSslCertificateManagedPtrOutputWithContext(context.Background())
}

func (o ManagedSslCertificateManagedOutput) ToManagedSslCertificateManagedPtrOutputWithContext(ctx context.Context) ManagedSslCertificateManagedPtrOutput {
	return o.ApplyT(func(v ManagedSslCertificateManaged) *ManagedSslCertificateManaged {
		return &v
	}).(ManagedSslCertificateManagedPtrOutput)
}

// Domains for which a managed SSL certificate will be valid.  Currently,
// there can be up to 100 domains in this list.
func (o ManagedSslCertificateManagedOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedSslCertificateManaged) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

type ManagedSslCertificateManagedPtrOutput struct{ *pulumi.OutputState }

func (ManagedSslCertificateManagedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedSslCertificateManaged)(nil)).Elem()
}

func (o ManagedSslCertificateManagedPtrOutput) ToManagedSslCertificateManagedPtrOutput() ManagedSslCertificateManagedPtrOutput {
	return o
}

func (o ManagedSslCertificateManagedPtrOutput) ToManagedSslCertificateManagedPtrOutputWithContext(ctx context.Context) ManagedSslCertificateManagedPtrOutput {
	return o
}

func (o ManagedSslCertificateManagedPtrOutput) Elem() ManagedSslCertificateManagedOutput {
	return o.ApplyT(func(v *ManagedSslCertificateManaged) ManagedSslCertificateManaged { return *v }).(ManagedSslCertificateManagedOutput)
}

// Domains for which a managed SSL certificate will be valid.  Currently,
// there can be up to 100 domains in this list.
func (o ManagedSslCertificateManagedPtrOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedSslCertificateManaged) []string {
		if v == nil {
			return nil
		}
		return v.Domains
	}).(pulumi.StringArrayOutput)
}

type MangedSslCertificateManaged struct {
	Domains []string `pulumi:"domains"`
}

// MangedSslCertificateManagedInput is an input type that accepts MangedSslCertificateManagedArgs and MangedSslCertificateManagedOutput values.
// You can construct a concrete instance of `MangedSslCertificateManagedInput` via:
//
// 		 MangedSslCertificateManagedArgs{...}
//
type MangedSslCertificateManagedInput interface {
	pulumi.Input

	ToMangedSslCertificateManagedOutput() MangedSslCertificateManagedOutput
	ToMangedSslCertificateManagedOutputWithContext(context.Context) MangedSslCertificateManagedOutput
}

type MangedSslCertificateManagedArgs struct {
	Domains pulumi.StringArrayInput `pulumi:"domains"`
}

func (MangedSslCertificateManagedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MangedSslCertificateManaged)(nil)).Elem()
}

func (i MangedSslCertificateManagedArgs) ToMangedSslCertificateManagedOutput() MangedSslCertificateManagedOutput {
	return i.ToMangedSslCertificateManagedOutputWithContext(context.Background())
}

func (i MangedSslCertificateManagedArgs) ToMangedSslCertificateManagedOutputWithContext(ctx context.Context) MangedSslCertificateManagedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MangedSslCertificateManagedOutput)
}

func (i MangedSslCertificateManagedArgs) ToMangedSslCertificateManagedPtrOutput() MangedSslCertificateManagedPtrOutput {
	return i.ToMangedSslCertificateManagedPtrOutputWithContext(context.Background())
}

func (i MangedSslCertificateManagedArgs) ToMangedSslCertificateManagedPtrOutputWithContext(ctx context.Context) MangedSslCertificateManagedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MangedSslCertificateManagedOutput).ToMangedSslCertificateManagedPtrOutputWithContext(ctx)
}

// MangedSslCertificateManagedPtrInput is an input type that accepts MangedSslCertificateManagedArgs, MangedSslCertificateManagedPtr and MangedSslCertificateManagedPtrOutput values.
// You can construct a concrete instance of `MangedSslCertificateManagedPtrInput` via:
//
// 		 MangedSslCertificateManagedArgs{...}
//
//  or:
//
// 		 nil
//
type MangedSslCertificateManagedPtrInput interface {
	pulumi.Input

	ToMangedSslCertificateManagedPtrOutput() MangedSslCertificateManagedPtrOutput
	ToMangedSslCertificateManagedPtrOutputWithContext(context.Context) MangedSslCertificateManagedPtrOutput
}

type mangedSslCertificateManagedPtrType MangedSslCertificateManagedArgs

func MangedSslCertificateManagedPtr(v *MangedSslCertificateManagedArgs) MangedSslCertificateManagedPtrInput {
	return (*mangedSslCertificateManagedPtrType)(v)
}

func (*mangedSslCertificateManagedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MangedSslCertificateManaged)(nil)).Elem()
}

func (i *mangedSslCertificateManagedPtrType) ToMangedSslCertificateManagedPtrOutput() MangedSslCertificateManagedPtrOutput {
	return i.ToMangedSslCertificateManagedPtrOutputWithContext(context.Background())
}

func (i *mangedSslCertificateManagedPtrType) ToMangedSslCertificateManagedPtrOutputWithContext(ctx context.Context) MangedSslCertificateManagedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MangedSslCertificateManagedPtrOutput)
}

type MangedSslCertificateManagedOutput struct{ *pulumi.OutputState }

func (MangedSslCertificateManagedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MangedSslCertificateManaged)(nil)).Elem()
}

func (o MangedSslCertificateManagedOutput) ToMangedSslCertificateManagedOutput() MangedSslCertificateManagedOutput {
	return o
}

func (o MangedSslCertificateManagedOutput) ToMangedSslCertificateManagedOutputWithContext(ctx context.Context) MangedSslCertificateManagedOutput {
	return o
}

func (o MangedSslCertificateManagedOutput) ToMangedSslCertificateManagedPtrOutput() MangedSslCertificateManagedPtrOutput {
	return o.ToMangedSslCertificateManagedPtrOutputWithContext(context.Background())
}

func (o MangedSslCertificateManagedOutput) ToMangedSslCertificateManagedPtrOutputWithContext(ctx context.Context) MangedSslCertificateManagedPtrOutput {
	return o.ApplyT(func(v MangedSslCertificateManaged) *MangedSslCertificateManaged {
		return &v
	}).(MangedSslCertificateManagedPtrOutput)
}
func (o MangedSslCertificateManagedOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MangedSslCertificateManaged) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

type MangedSslCertificateManagedPtrOutput struct{ *pulumi.OutputState }

func (MangedSslCertificateManagedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MangedSslCertificateManaged)(nil)).Elem()
}

func (o MangedSslCertificateManagedPtrOutput) ToMangedSslCertificateManagedPtrOutput() MangedSslCertificateManagedPtrOutput {
	return o
}

func (o MangedSslCertificateManagedPtrOutput) ToMangedSslCertificateManagedPtrOutputWithContext(ctx context.Context) MangedSslCertificateManagedPtrOutput {
	return o
}

func (o MangedSslCertificateManagedPtrOutput) Elem() MangedSslCertificateManagedOutput {
	return o.ApplyT(func(v *MangedSslCertificateManaged) MangedSslCertificateManaged { return *v }).(MangedSslCertificateManagedOutput)
}

func (o MangedSslCertificateManagedPtrOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MangedSslCertificateManaged) []string {
		if v == nil {
			return nil
		}
		return v.Domains
	}).(pulumi.StringArrayOutput)
}

type NodeGroupAutoscalingPolicy struct {
	// Maximum size of the node group. Set to a value less than or equal
	// to 100 and greater than or equal to min-nodes.
	MaxNodes *int `pulumi:"maxNodes"`
	// Minimum size of the node group. Must be less
	// than or equal to max-nodes. The default value is 0.
	MinNodes *int `pulumi:"minNodes"`
	// The autoscaling mode. Set to one of the following:
	// - OFF: Disables the autoscaler.
	// - ON: Enables scaling in and scaling out.
	// - ONLY_SCALE_OUT: Enables only scaling out.
	// You must use this mode if your node groups are configured to
	// restart their hosted VMs on minimal servers.
	Mode *string `pulumi:"mode"`
}

// NodeGroupAutoscalingPolicyInput is an input type that accepts NodeGroupAutoscalingPolicyArgs and NodeGroupAutoscalingPolicyOutput values.
// You can construct a concrete instance of `NodeGroupAutoscalingPolicyInput` via:
//
// 		 NodeGroupAutoscalingPolicyArgs{...}
//
type NodeGroupAutoscalingPolicyInput interface {
	pulumi.Input

	ToNodeGroupAutoscalingPolicyOutput() NodeGroupAutoscalingPolicyOutput
	ToNodeGroupAutoscalingPolicyOutputWithContext(context.Context) NodeGroupAutoscalingPolicyOutput
}

type NodeGroupAutoscalingPolicyArgs struct {
	// Maximum size of the node group. Set to a value less than or equal
	// to 100 and greater than or equal to min-nodes.
	MaxNodes pulumi.IntPtrInput `pulumi:"maxNodes"`
	// Minimum size of the node group. Must be less
	// than or equal to max-nodes. The default value is 0.
	MinNodes pulumi.IntPtrInput `pulumi:"minNodes"`
	// The autoscaling mode. Set to one of the following:
	// - OFF: Disables the autoscaler.
	// - ON: Enables scaling in and scaling out.
	// - ONLY_SCALE_OUT: Enables only scaling out.
	// You must use this mode if your node groups are configured to
	// restart their hosted VMs on minimal servers.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (NodeGroupAutoscalingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupAutoscalingPolicy)(nil)).Elem()
}

func (i NodeGroupAutoscalingPolicyArgs) ToNodeGroupAutoscalingPolicyOutput() NodeGroupAutoscalingPolicyOutput {
	return i.ToNodeGroupAutoscalingPolicyOutputWithContext(context.Background())
}

func (i NodeGroupAutoscalingPolicyArgs) ToNodeGroupAutoscalingPolicyOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupAutoscalingPolicyOutput)
}

func (i NodeGroupAutoscalingPolicyArgs) ToNodeGroupAutoscalingPolicyPtrOutput() NodeGroupAutoscalingPolicyPtrOutput {
	return i.ToNodeGroupAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (i NodeGroupAutoscalingPolicyArgs) ToNodeGroupAutoscalingPolicyPtrOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupAutoscalingPolicyOutput).ToNodeGroupAutoscalingPolicyPtrOutputWithContext(ctx)
}

// NodeGroupAutoscalingPolicyPtrInput is an input type that accepts NodeGroupAutoscalingPolicyArgs, NodeGroupAutoscalingPolicyPtr and NodeGroupAutoscalingPolicyPtrOutput values.
// You can construct a concrete instance of `NodeGroupAutoscalingPolicyPtrInput` via:
//
// 		 NodeGroupAutoscalingPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type NodeGroupAutoscalingPolicyPtrInput interface {
	pulumi.Input

	ToNodeGroupAutoscalingPolicyPtrOutput() NodeGroupAutoscalingPolicyPtrOutput
	ToNodeGroupAutoscalingPolicyPtrOutputWithContext(context.Context) NodeGroupAutoscalingPolicyPtrOutput
}

type nodeGroupAutoscalingPolicyPtrType NodeGroupAutoscalingPolicyArgs

func NodeGroupAutoscalingPolicyPtr(v *NodeGroupAutoscalingPolicyArgs) NodeGroupAutoscalingPolicyPtrInput {
	return (*nodeGroupAutoscalingPolicyPtrType)(v)
}

func (*nodeGroupAutoscalingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupAutoscalingPolicy)(nil)).Elem()
}

func (i *nodeGroupAutoscalingPolicyPtrType) ToNodeGroupAutoscalingPolicyPtrOutput() NodeGroupAutoscalingPolicyPtrOutput {
	return i.ToNodeGroupAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (i *nodeGroupAutoscalingPolicyPtrType) ToNodeGroupAutoscalingPolicyPtrOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupAutoscalingPolicyPtrOutput)
}

type NodeGroupAutoscalingPolicyOutput struct{ *pulumi.OutputState }

func (NodeGroupAutoscalingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupAutoscalingPolicy)(nil)).Elem()
}

func (o NodeGroupAutoscalingPolicyOutput) ToNodeGroupAutoscalingPolicyOutput() NodeGroupAutoscalingPolicyOutput {
	return o
}

func (o NodeGroupAutoscalingPolicyOutput) ToNodeGroupAutoscalingPolicyOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyOutput {
	return o
}

func (o NodeGroupAutoscalingPolicyOutput) ToNodeGroupAutoscalingPolicyPtrOutput() NodeGroupAutoscalingPolicyPtrOutput {
	return o.ToNodeGroupAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (o NodeGroupAutoscalingPolicyOutput) ToNodeGroupAutoscalingPolicyPtrOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyPtrOutput {
	return o.ApplyT(func(v NodeGroupAutoscalingPolicy) *NodeGroupAutoscalingPolicy {
		return &v
	}).(NodeGroupAutoscalingPolicyPtrOutput)
}

// Maximum size of the node group. Set to a value less than or equal
// to 100 and greater than or equal to min-nodes.
func (o NodeGroupAutoscalingPolicyOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeGroupAutoscalingPolicy) *int { return v.MaxNodes }).(pulumi.IntPtrOutput)
}

// Minimum size of the node group. Must be less
// than or equal to max-nodes. The default value is 0.
func (o NodeGroupAutoscalingPolicyOutput) MinNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeGroupAutoscalingPolicy) *int { return v.MinNodes }).(pulumi.IntPtrOutput)
}

// The autoscaling mode. Set to one of the following:
// - OFF: Disables the autoscaler.
// - ON: Enables scaling in and scaling out.
// - ONLY_SCALE_OUT: Enables only scaling out.
// You must use this mode if your node groups are configured to
// restart their hosted VMs on minimal servers.
func (o NodeGroupAutoscalingPolicyOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGroupAutoscalingPolicy) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type NodeGroupAutoscalingPolicyPtrOutput struct{ *pulumi.OutputState }

func (NodeGroupAutoscalingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupAutoscalingPolicy)(nil)).Elem()
}

func (o NodeGroupAutoscalingPolicyPtrOutput) ToNodeGroupAutoscalingPolicyPtrOutput() NodeGroupAutoscalingPolicyPtrOutput {
	return o
}

func (o NodeGroupAutoscalingPolicyPtrOutput) ToNodeGroupAutoscalingPolicyPtrOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyPtrOutput {
	return o
}

func (o NodeGroupAutoscalingPolicyPtrOutput) Elem() NodeGroupAutoscalingPolicyOutput {
	return o.ApplyT(func(v *NodeGroupAutoscalingPolicy) NodeGroupAutoscalingPolicy { return *v }).(NodeGroupAutoscalingPolicyOutput)
}

// Maximum size of the node group. Set to a value less than or equal
// to 100 and greater than or equal to min-nodes.
func (o NodeGroupAutoscalingPolicyPtrOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeGroupAutoscalingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodes
	}).(pulumi.IntPtrOutput)
}

// Minimum size of the node group. Must be less
// than or equal to max-nodes. The default value is 0.
func (o NodeGroupAutoscalingPolicyPtrOutput) MinNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeGroupAutoscalingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MinNodes
	}).(pulumi.IntPtrOutput)
}

// The autoscaling mode. Set to one of the following:
// - OFF: Disables the autoscaler.
// - ON: Enables scaling in and scaling out.
// - ONLY_SCALE_OUT: Enables only scaling out.
// You must use this mode if your node groups are configured to
// restart their hosted VMs on minimal servers.
func (o NodeGroupAutoscalingPolicyPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroupAutoscalingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

type NodeTemplateNodeTypeFlexibility struct {
	// Number of virtual CPUs to use.
	Cpus *string `pulumi:"cpus"`
	// -
	// Use local SSD
	LocalSsd *string `pulumi:"localSsd"`
	// Physical memory available to the node, defined in MB.
	Memory *string `pulumi:"memory"`
}

// NodeTemplateNodeTypeFlexibilityInput is an input type that accepts NodeTemplateNodeTypeFlexibilityArgs and NodeTemplateNodeTypeFlexibilityOutput values.
// You can construct a concrete instance of `NodeTemplateNodeTypeFlexibilityInput` via:
//
// 		 NodeTemplateNodeTypeFlexibilityArgs{...}
//
type NodeTemplateNodeTypeFlexibilityInput interface {
	pulumi.Input

	ToNodeTemplateNodeTypeFlexibilityOutput() NodeTemplateNodeTypeFlexibilityOutput
	ToNodeTemplateNodeTypeFlexibilityOutputWithContext(context.Context) NodeTemplateNodeTypeFlexibilityOutput
}

type NodeTemplateNodeTypeFlexibilityArgs struct {
	// Number of virtual CPUs to use.
	Cpus pulumi.StringPtrInput `pulumi:"cpus"`
	// -
	// Use local SSD
	LocalSsd pulumi.StringPtrInput `pulumi:"localSsd"`
	// Physical memory available to the node, defined in MB.
	Memory pulumi.StringPtrInput `pulumi:"memory"`
}

func (NodeTemplateNodeTypeFlexibilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTemplateNodeTypeFlexibility)(nil)).Elem()
}

func (i NodeTemplateNodeTypeFlexibilityArgs) ToNodeTemplateNodeTypeFlexibilityOutput() NodeTemplateNodeTypeFlexibilityOutput {
	return i.ToNodeTemplateNodeTypeFlexibilityOutputWithContext(context.Background())
}

func (i NodeTemplateNodeTypeFlexibilityArgs) ToNodeTemplateNodeTypeFlexibilityOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTemplateNodeTypeFlexibilityOutput)
}

func (i NodeTemplateNodeTypeFlexibilityArgs) ToNodeTemplateNodeTypeFlexibilityPtrOutput() NodeTemplateNodeTypeFlexibilityPtrOutput {
	return i.ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(context.Background())
}

func (i NodeTemplateNodeTypeFlexibilityArgs) ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTemplateNodeTypeFlexibilityOutput).ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(ctx)
}

// NodeTemplateNodeTypeFlexibilityPtrInput is an input type that accepts NodeTemplateNodeTypeFlexibilityArgs, NodeTemplateNodeTypeFlexibilityPtr and NodeTemplateNodeTypeFlexibilityPtrOutput values.
// You can construct a concrete instance of `NodeTemplateNodeTypeFlexibilityPtrInput` via:
//
// 		 NodeTemplateNodeTypeFlexibilityArgs{...}
//
//  or:
//
// 		 nil
//
type NodeTemplateNodeTypeFlexibilityPtrInput interface {
	pulumi.Input

	ToNodeTemplateNodeTypeFlexibilityPtrOutput() NodeTemplateNodeTypeFlexibilityPtrOutput
	ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(context.Context) NodeTemplateNodeTypeFlexibilityPtrOutput
}

type nodeTemplateNodeTypeFlexibilityPtrType NodeTemplateNodeTypeFlexibilityArgs

func NodeTemplateNodeTypeFlexibilityPtr(v *NodeTemplateNodeTypeFlexibilityArgs) NodeTemplateNodeTypeFlexibilityPtrInput {
	return (*nodeTemplateNodeTypeFlexibilityPtrType)(v)
}

func (*nodeTemplateNodeTypeFlexibilityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeTemplateNodeTypeFlexibility)(nil)).Elem()
}

func (i *nodeTemplateNodeTypeFlexibilityPtrType) ToNodeTemplateNodeTypeFlexibilityPtrOutput() NodeTemplateNodeTypeFlexibilityPtrOutput {
	return i.ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(context.Background())
}

func (i *nodeTemplateNodeTypeFlexibilityPtrType) ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTemplateNodeTypeFlexibilityPtrOutput)
}

type NodeTemplateNodeTypeFlexibilityOutput struct{ *pulumi.OutputState }

func (NodeTemplateNodeTypeFlexibilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTemplateNodeTypeFlexibility)(nil)).Elem()
}

func (o NodeTemplateNodeTypeFlexibilityOutput) ToNodeTemplateNodeTypeFlexibilityOutput() NodeTemplateNodeTypeFlexibilityOutput {
	return o
}

func (o NodeTemplateNodeTypeFlexibilityOutput) ToNodeTemplateNodeTypeFlexibilityOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityOutput {
	return o
}

func (o NodeTemplateNodeTypeFlexibilityOutput) ToNodeTemplateNodeTypeFlexibilityPtrOutput() NodeTemplateNodeTypeFlexibilityPtrOutput {
	return o.ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(context.Background())
}

func (o NodeTemplateNodeTypeFlexibilityOutput) ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityPtrOutput {
	return o.ApplyT(func(v NodeTemplateNodeTypeFlexibility) *NodeTemplateNodeTypeFlexibility {
		return &v
	}).(NodeTemplateNodeTypeFlexibilityPtrOutput)
}

// Number of virtual CPUs to use.
func (o NodeTemplateNodeTypeFlexibilityOutput) Cpus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTemplateNodeTypeFlexibility) *string { return v.Cpus }).(pulumi.StringPtrOutput)
}

// -
// Use local SSD
func (o NodeTemplateNodeTypeFlexibilityOutput) LocalSsd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTemplateNodeTypeFlexibility) *string { return v.LocalSsd }).(pulumi.StringPtrOutput)
}

// Physical memory available to the node, defined in MB.
func (o NodeTemplateNodeTypeFlexibilityOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTemplateNodeTypeFlexibility) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

type NodeTemplateNodeTypeFlexibilityPtrOutput struct{ *pulumi.OutputState }

func (NodeTemplateNodeTypeFlexibilityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeTemplateNodeTypeFlexibility)(nil)).Elem()
}

func (o NodeTemplateNodeTypeFlexibilityPtrOutput) ToNodeTemplateNodeTypeFlexibilityPtrOutput() NodeTemplateNodeTypeFlexibilityPtrOutput {
	return o
}

func (o NodeTemplateNodeTypeFlexibilityPtrOutput) ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityPtrOutput {
	return o
}

func (o NodeTemplateNodeTypeFlexibilityPtrOutput) Elem() NodeTemplateNodeTypeFlexibilityOutput {
	return o.ApplyT(func(v *NodeTemplateNodeTypeFlexibility) NodeTemplateNodeTypeFlexibility { return *v }).(NodeTemplateNodeTypeFlexibilityOutput)
}

// Number of virtual CPUs to use.
func (o NodeTemplateNodeTypeFlexibilityPtrOutput) Cpus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTemplateNodeTypeFlexibility) *string {
		if v == nil {
			return nil
		}
		return v.Cpus
	}).(pulumi.StringPtrOutput)
}

// -
// Use local SSD
func (o NodeTemplateNodeTypeFlexibilityPtrOutput) LocalSsd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTemplateNodeTypeFlexibility) *string {
		if v == nil {
			return nil
		}
		return v.LocalSsd
	}).(pulumi.StringPtrOutput)
}

// Physical memory available to the node, defined in MB.
func (o NodeTemplateNodeTypeFlexibilityPtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTemplateNodeTypeFlexibility) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

type NodeTemplateServerBinding struct {
	// Type of server binding policy. If `RESTART_NODE_ON_ANY_SERVER`,
	// nodes using this template will restart on any physical server
	// following a maintenance event.
	// If `RESTART_NODE_ON_MINIMAL_SERVER`, nodes using this template
	// will restart on the same physical server following a maintenance
	// event, instead of being live migrated to or restarted on a new
	// physical server. This option may be useful if you are using
	// software licenses tied to the underlying server characteristics
	// such as physical sockets or cores, to avoid the need for
	// additional licenses when maintenance occurs. However, VMs on such
	// nodes will experience outages while maintenance is applied.
	Type string `pulumi:"type"`
}

// NodeTemplateServerBindingInput is an input type that accepts NodeTemplateServerBindingArgs and NodeTemplateServerBindingOutput values.
// You can construct a concrete instance of `NodeTemplateServerBindingInput` via:
//
// 		 NodeTemplateServerBindingArgs{...}
//
type NodeTemplateServerBindingInput interface {
	pulumi.Input

	ToNodeTemplateServerBindingOutput() NodeTemplateServerBindingOutput
	ToNodeTemplateServerBindingOutputWithContext(context.Context) NodeTemplateServerBindingOutput
}

type NodeTemplateServerBindingArgs struct {
	// Type of server binding policy. If `RESTART_NODE_ON_ANY_SERVER`,
	// nodes using this template will restart on any physical server
	// following a maintenance event.
	// If `RESTART_NODE_ON_MINIMAL_SERVER`, nodes using this template
	// will restart on the same physical server following a maintenance
	// event, instead of being live migrated to or restarted on a new
	// physical server. This option may be useful if you are using
	// software licenses tied to the underlying server characteristics
	// such as physical sockets or cores, to avoid the need for
	// additional licenses when maintenance occurs. However, VMs on such
	// nodes will experience outages while maintenance is applied.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NodeTemplateServerBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTemplateServerBinding)(nil)).Elem()
}

func (i NodeTemplateServerBindingArgs) ToNodeTemplateServerBindingOutput() NodeTemplateServerBindingOutput {
	return i.ToNodeTemplateServerBindingOutputWithContext(context.Background())
}

func (i NodeTemplateServerBindingArgs) ToNodeTemplateServerBindingOutputWithContext(ctx context.Context) NodeTemplateServerBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTemplateServerBindingOutput)
}

func (i NodeTemplateServerBindingArgs) ToNodeTemplateServerBindingPtrOutput() NodeTemplateServerBindingPtrOutput {
	return i.ToNodeTemplateServerBindingPtrOutputWithContext(context.Background())
}

func (i NodeTemplateServerBindingArgs) ToNodeTemplateServerBindingPtrOutputWithContext(ctx context.Context) NodeTemplateServerBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTemplateServerBindingOutput).ToNodeTemplateServerBindingPtrOutputWithContext(ctx)
}

// NodeTemplateServerBindingPtrInput is an input type that accepts NodeTemplateServerBindingArgs, NodeTemplateServerBindingPtr and NodeTemplateServerBindingPtrOutput values.
// You can construct a concrete instance of `NodeTemplateServerBindingPtrInput` via:
//
// 		 NodeTemplateServerBindingArgs{...}
//
//  or:
//
// 		 nil
//
type NodeTemplateServerBindingPtrInput interface {
	pulumi.Input

	ToNodeTemplateServerBindingPtrOutput() NodeTemplateServerBindingPtrOutput
	ToNodeTemplateServerBindingPtrOutputWithContext(context.Context) NodeTemplateServerBindingPtrOutput
}

type nodeTemplateServerBindingPtrType NodeTemplateServerBindingArgs

func NodeTemplateServerBindingPtr(v *NodeTemplateServerBindingArgs) NodeTemplateServerBindingPtrInput {
	return (*nodeTemplateServerBindingPtrType)(v)
}

func (*nodeTemplateServerBindingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeTemplateServerBinding)(nil)).Elem()
}

func (i *nodeTemplateServerBindingPtrType) ToNodeTemplateServerBindingPtrOutput() NodeTemplateServerBindingPtrOutput {
	return i.ToNodeTemplateServerBindingPtrOutputWithContext(context.Background())
}

func (i *nodeTemplateServerBindingPtrType) ToNodeTemplateServerBindingPtrOutputWithContext(ctx context.Context) NodeTemplateServerBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTemplateServerBindingPtrOutput)
}

type NodeTemplateServerBindingOutput struct{ *pulumi.OutputState }

func (NodeTemplateServerBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTemplateServerBinding)(nil)).Elem()
}

func (o NodeTemplateServerBindingOutput) ToNodeTemplateServerBindingOutput() NodeTemplateServerBindingOutput {
	return o
}

func (o NodeTemplateServerBindingOutput) ToNodeTemplateServerBindingOutputWithContext(ctx context.Context) NodeTemplateServerBindingOutput {
	return o
}

func (o NodeTemplateServerBindingOutput) ToNodeTemplateServerBindingPtrOutput() NodeTemplateServerBindingPtrOutput {
	return o.ToNodeTemplateServerBindingPtrOutputWithContext(context.Background())
}

func (o NodeTemplateServerBindingOutput) ToNodeTemplateServerBindingPtrOutputWithContext(ctx context.Context) NodeTemplateServerBindingPtrOutput {
	return o.ApplyT(func(v NodeTemplateServerBinding) *NodeTemplateServerBinding {
		return &v
	}).(NodeTemplateServerBindingPtrOutput)
}

// Type of server binding policy. If `RESTART_NODE_ON_ANY_SERVER`,
// nodes using this template will restart on any physical server
// following a maintenance event.
// If `RESTART_NODE_ON_MINIMAL_SERVER`, nodes using this template
// will restart on the same physical server following a maintenance
// event, instead of being live migrated to or restarted on a new
// physical server. This option may be useful if you are using
// software licenses tied to the underlying server characteristics
// such as physical sockets or cores, to avoid the need for
// additional licenses when maintenance occurs. However, VMs on such
// nodes will experience outages while maintenance is applied.
func (o NodeTemplateServerBindingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTemplateServerBinding) string { return v.Type }).(pulumi.StringOutput)
}

type NodeTemplateServerBindingPtrOutput struct{ *pulumi.OutputState }

func (NodeTemplateServerBindingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeTemplateServerBinding)(nil)).Elem()
}

func (o NodeTemplateServerBindingPtrOutput) ToNodeTemplateServerBindingPtrOutput() NodeTemplateServerBindingPtrOutput {
	return o
}

func (o NodeTemplateServerBindingPtrOutput) ToNodeTemplateServerBindingPtrOutputWithContext(ctx context.Context) NodeTemplateServerBindingPtrOutput {
	return o
}

func (o NodeTemplateServerBindingPtrOutput) Elem() NodeTemplateServerBindingOutput {
	return o.ApplyT(func(v *NodeTemplateServerBinding) NodeTemplateServerBinding { return *v }).(NodeTemplateServerBindingOutput)
}

// Type of server binding policy. If `RESTART_NODE_ON_ANY_SERVER`,
// nodes using this template will restart on any physical server
// following a maintenance event.
// If `RESTART_NODE_ON_MINIMAL_SERVER`, nodes using this template
// will restart on the same physical server following a maintenance
// event, instead of being live migrated to or restarted on a new
// physical server. This option may be useful if you are using
// software licenses tied to the underlying server characteristics
// such as physical sockets or cores, to avoid the need for
// additional licenses when maintenance occurs. However, VMs on such
// nodes will experience outages while maintenance is applied.
func (o NodeTemplateServerBindingPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTemplateServerBinding) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type PacketMirroringCollectorIlb struct {
	// The URL of the instances where this rule should be active.
	Url string `pulumi:"url"`
}

// PacketMirroringCollectorIlbInput is an input type that accepts PacketMirroringCollectorIlbArgs and PacketMirroringCollectorIlbOutput values.
// You can construct a concrete instance of `PacketMirroringCollectorIlbInput` via:
//
// 		 PacketMirroringCollectorIlbArgs{...}
//
type PacketMirroringCollectorIlbInput interface {
	pulumi.Input

	ToPacketMirroringCollectorIlbOutput() PacketMirroringCollectorIlbOutput
	ToPacketMirroringCollectorIlbOutputWithContext(context.Context) PacketMirroringCollectorIlbOutput
}

type PacketMirroringCollectorIlbArgs struct {
	// The URL of the instances where this rule should be active.
	Url pulumi.StringInput `pulumi:"url"`
}

func (PacketMirroringCollectorIlbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringCollectorIlb)(nil)).Elem()
}

func (i PacketMirroringCollectorIlbArgs) ToPacketMirroringCollectorIlbOutput() PacketMirroringCollectorIlbOutput {
	return i.ToPacketMirroringCollectorIlbOutputWithContext(context.Background())
}

func (i PacketMirroringCollectorIlbArgs) ToPacketMirroringCollectorIlbOutputWithContext(ctx context.Context) PacketMirroringCollectorIlbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringCollectorIlbOutput)
}

func (i PacketMirroringCollectorIlbArgs) ToPacketMirroringCollectorIlbPtrOutput() PacketMirroringCollectorIlbPtrOutput {
	return i.ToPacketMirroringCollectorIlbPtrOutputWithContext(context.Background())
}

func (i PacketMirroringCollectorIlbArgs) ToPacketMirroringCollectorIlbPtrOutputWithContext(ctx context.Context) PacketMirroringCollectorIlbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringCollectorIlbOutput).ToPacketMirroringCollectorIlbPtrOutputWithContext(ctx)
}

// PacketMirroringCollectorIlbPtrInput is an input type that accepts PacketMirroringCollectorIlbArgs, PacketMirroringCollectorIlbPtr and PacketMirroringCollectorIlbPtrOutput values.
// You can construct a concrete instance of `PacketMirroringCollectorIlbPtrInput` via:
//
// 		 PacketMirroringCollectorIlbArgs{...}
//
//  or:
//
// 		 nil
//
type PacketMirroringCollectorIlbPtrInput interface {
	pulumi.Input

	ToPacketMirroringCollectorIlbPtrOutput() PacketMirroringCollectorIlbPtrOutput
	ToPacketMirroringCollectorIlbPtrOutputWithContext(context.Context) PacketMirroringCollectorIlbPtrOutput
}

type packetMirroringCollectorIlbPtrType PacketMirroringCollectorIlbArgs

func PacketMirroringCollectorIlbPtr(v *PacketMirroringCollectorIlbArgs) PacketMirroringCollectorIlbPtrInput {
	return (*packetMirroringCollectorIlbPtrType)(v)
}

func (*packetMirroringCollectorIlbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringCollectorIlb)(nil)).Elem()
}

func (i *packetMirroringCollectorIlbPtrType) ToPacketMirroringCollectorIlbPtrOutput() PacketMirroringCollectorIlbPtrOutput {
	return i.ToPacketMirroringCollectorIlbPtrOutputWithContext(context.Background())
}

func (i *packetMirroringCollectorIlbPtrType) ToPacketMirroringCollectorIlbPtrOutputWithContext(ctx context.Context) PacketMirroringCollectorIlbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringCollectorIlbPtrOutput)
}

type PacketMirroringCollectorIlbOutput struct{ *pulumi.OutputState }

func (PacketMirroringCollectorIlbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringCollectorIlb)(nil)).Elem()
}

func (o PacketMirroringCollectorIlbOutput) ToPacketMirroringCollectorIlbOutput() PacketMirroringCollectorIlbOutput {
	return o
}

func (o PacketMirroringCollectorIlbOutput) ToPacketMirroringCollectorIlbOutputWithContext(ctx context.Context) PacketMirroringCollectorIlbOutput {
	return o
}

func (o PacketMirroringCollectorIlbOutput) ToPacketMirroringCollectorIlbPtrOutput() PacketMirroringCollectorIlbPtrOutput {
	return o.ToPacketMirroringCollectorIlbPtrOutputWithContext(context.Background())
}

func (o PacketMirroringCollectorIlbOutput) ToPacketMirroringCollectorIlbPtrOutputWithContext(ctx context.Context) PacketMirroringCollectorIlbPtrOutput {
	return o.ApplyT(func(v PacketMirroringCollectorIlb) *PacketMirroringCollectorIlb {
		return &v
	}).(PacketMirroringCollectorIlbPtrOutput)
}

// The URL of the instances where this rule should be active.
func (o PacketMirroringCollectorIlbOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v PacketMirroringCollectorIlb) string { return v.Url }).(pulumi.StringOutput)
}

type PacketMirroringCollectorIlbPtrOutput struct{ *pulumi.OutputState }

func (PacketMirroringCollectorIlbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringCollectorIlb)(nil)).Elem()
}

func (o PacketMirroringCollectorIlbPtrOutput) ToPacketMirroringCollectorIlbPtrOutput() PacketMirroringCollectorIlbPtrOutput {
	return o
}

func (o PacketMirroringCollectorIlbPtrOutput) ToPacketMirroringCollectorIlbPtrOutputWithContext(ctx context.Context) PacketMirroringCollectorIlbPtrOutput {
	return o
}

func (o PacketMirroringCollectorIlbPtrOutput) Elem() PacketMirroringCollectorIlbOutput {
	return o.ApplyT(func(v *PacketMirroringCollectorIlb) PacketMirroringCollectorIlb { return *v }).(PacketMirroringCollectorIlbOutput)
}

// The URL of the instances where this rule should be active.
func (o PacketMirroringCollectorIlbPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PacketMirroringCollectorIlb) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type PacketMirroringFilter struct {
	// IP CIDR ranges that apply as a filter on the source (ingress) or
	// destination (egress) IP in the IP header. Only IPv4 is supported.
	CidrRanges []string `pulumi:"cidrRanges"`
	// Protocols that apply as a filter on mirrored traffic.
	IpProtocols []string `pulumi:"ipProtocols"`
}

// PacketMirroringFilterInput is an input type that accepts PacketMirroringFilterArgs and PacketMirroringFilterOutput values.
// You can construct a concrete instance of `PacketMirroringFilterInput` via:
//
// 		 PacketMirroringFilterArgs{...}
//
type PacketMirroringFilterInput interface {
	pulumi.Input

	ToPacketMirroringFilterOutput() PacketMirroringFilterOutput
	ToPacketMirroringFilterOutputWithContext(context.Context) PacketMirroringFilterOutput
}

type PacketMirroringFilterArgs struct {
	// IP CIDR ranges that apply as a filter on the source (ingress) or
	// destination (egress) IP in the IP header. Only IPv4 is supported.
	CidrRanges pulumi.StringArrayInput `pulumi:"cidrRanges"`
	// Protocols that apply as a filter on mirrored traffic.
	IpProtocols pulumi.StringArrayInput `pulumi:"ipProtocols"`
}

func (PacketMirroringFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringFilter)(nil)).Elem()
}

func (i PacketMirroringFilterArgs) ToPacketMirroringFilterOutput() PacketMirroringFilterOutput {
	return i.ToPacketMirroringFilterOutputWithContext(context.Background())
}

func (i PacketMirroringFilterArgs) ToPacketMirroringFilterOutputWithContext(ctx context.Context) PacketMirroringFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringFilterOutput)
}

func (i PacketMirroringFilterArgs) ToPacketMirroringFilterPtrOutput() PacketMirroringFilterPtrOutput {
	return i.ToPacketMirroringFilterPtrOutputWithContext(context.Background())
}

func (i PacketMirroringFilterArgs) ToPacketMirroringFilterPtrOutputWithContext(ctx context.Context) PacketMirroringFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringFilterOutput).ToPacketMirroringFilterPtrOutputWithContext(ctx)
}

// PacketMirroringFilterPtrInput is an input type that accepts PacketMirroringFilterArgs, PacketMirroringFilterPtr and PacketMirroringFilterPtrOutput values.
// You can construct a concrete instance of `PacketMirroringFilterPtrInput` via:
//
// 		 PacketMirroringFilterArgs{...}
//
//  or:
//
// 		 nil
//
type PacketMirroringFilterPtrInput interface {
	pulumi.Input

	ToPacketMirroringFilterPtrOutput() PacketMirroringFilterPtrOutput
	ToPacketMirroringFilterPtrOutputWithContext(context.Context) PacketMirroringFilterPtrOutput
}

type packetMirroringFilterPtrType PacketMirroringFilterArgs

func PacketMirroringFilterPtr(v *PacketMirroringFilterArgs) PacketMirroringFilterPtrInput {
	return (*packetMirroringFilterPtrType)(v)
}

func (*packetMirroringFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringFilter)(nil)).Elem()
}

func (i *packetMirroringFilterPtrType) ToPacketMirroringFilterPtrOutput() PacketMirroringFilterPtrOutput {
	return i.ToPacketMirroringFilterPtrOutputWithContext(context.Background())
}

func (i *packetMirroringFilterPtrType) ToPacketMirroringFilterPtrOutputWithContext(ctx context.Context) PacketMirroringFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringFilterPtrOutput)
}

type PacketMirroringFilterOutput struct{ *pulumi.OutputState }

func (PacketMirroringFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringFilter)(nil)).Elem()
}

func (o PacketMirroringFilterOutput) ToPacketMirroringFilterOutput() PacketMirroringFilterOutput {
	return o
}

func (o PacketMirroringFilterOutput) ToPacketMirroringFilterOutputWithContext(ctx context.Context) PacketMirroringFilterOutput {
	return o
}

func (o PacketMirroringFilterOutput) ToPacketMirroringFilterPtrOutput() PacketMirroringFilterPtrOutput {
	return o.ToPacketMirroringFilterPtrOutputWithContext(context.Background())
}

func (o PacketMirroringFilterOutput) ToPacketMirroringFilterPtrOutputWithContext(ctx context.Context) PacketMirroringFilterPtrOutput {
	return o.ApplyT(func(v PacketMirroringFilter) *PacketMirroringFilter {
		return &v
	}).(PacketMirroringFilterPtrOutput)
}

// IP CIDR ranges that apply as a filter on the source (ingress) or
// destination (egress) IP in the IP header. Only IPv4 is supported.
func (o PacketMirroringFilterOutput) CidrRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PacketMirroringFilter) []string { return v.CidrRanges }).(pulumi.StringArrayOutput)
}

// Protocols that apply as a filter on mirrored traffic.
func (o PacketMirroringFilterOutput) IpProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PacketMirroringFilter) []string { return v.IpProtocols }).(pulumi.StringArrayOutput)
}

type PacketMirroringFilterPtrOutput struct{ *pulumi.OutputState }

func (PacketMirroringFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringFilter)(nil)).Elem()
}

func (o PacketMirroringFilterPtrOutput) ToPacketMirroringFilterPtrOutput() PacketMirroringFilterPtrOutput {
	return o
}

func (o PacketMirroringFilterPtrOutput) ToPacketMirroringFilterPtrOutputWithContext(ctx context.Context) PacketMirroringFilterPtrOutput {
	return o
}

func (o PacketMirroringFilterPtrOutput) Elem() PacketMirroringFilterOutput {
	return o.ApplyT(func(v *PacketMirroringFilter) PacketMirroringFilter { return *v }).(PacketMirroringFilterOutput)
}

// IP CIDR ranges that apply as a filter on the source (ingress) or
// destination (egress) IP in the IP header. Only IPv4 is supported.
func (o PacketMirroringFilterPtrOutput) CidrRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PacketMirroringFilter) []string {
		if v == nil {
			return nil
		}
		return v.CidrRanges
	}).(pulumi.StringArrayOutput)
}

// Protocols that apply as a filter on mirrored traffic.
func (o PacketMirroringFilterPtrOutput) IpProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PacketMirroringFilter) []string {
		if v == nil {
			return nil
		}
		return v.IpProtocols
	}).(pulumi.StringArrayOutput)
}

type PacketMirroringMirroredResources struct {
	// All the listed instances will be mirrored.  Specify at most 50.  Structure is documented below.
	Instances []PacketMirroringMirroredResourcesInstance `pulumi:"instances"`
	// All instances in one of these subnetworks will be mirrored.  Structure is documented below.
	Subnetworks []PacketMirroringMirroredResourcesSubnetwork `pulumi:"subnetworks"`
	// All instances with these tags will be mirrored.
	Tags []string `pulumi:"tags"`
}

// PacketMirroringMirroredResourcesInput is an input type that accepts PacketMirroringMirroredResourcesArgs and PacketMirroringMirroredResourcesOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourcesInput` via:
//
// 		 PacketMirroringMirroredResourcesArgs{...}
//
type PacketMirroringMirroredResourcesInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourcesOutput() PacketMirroringMirroredResourcesOutput
	ToPacketMirroringMirroredResourcesOutputWithContext(context.Context) PacketMirroringMirroredResourcesOutput
}

type PacketMirroringMirroredResourcesArgs struct {
	// All the listed instances will be mirrored.  Specify at most 50.  Structure is documented below.
	Instances PacketMirroringMirroredResourcesInstanceArrayInput `pulumi:"instances"`
	// All instances in one of these subnetworks will be mirrored.  Structure is documented below.
	Subnetworks PacketMirroringMirroredResourcesSubnetworkArrayInput `pulumi:"subnetworks"`
	// All instances with these tags will be mirrored.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (PacketMirroringMirroredResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResources)(nil)).Elem()
}

func (i PacketMirroringMirroredResourcesArgs) ToPacketMirroringMirroredResourcesOutput() PacketMirroringMirroredResourcesOutput {
	return i.ToPacketMirroringMirroredResourcesOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourcesArgs) ToPacketMirroringMirroredResourcesOutputWithContext(ctx context.Context) PacketMirroringMirroredResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourcesOutput)
}

func (i PacketMirroringMirroredResourcesArgs) ToPacketMirroringMirroredResourcesPtrOutput() PacketMirroringMirroredResourcesPtrOutput {
	return i.ToPacketMirroringMirroredResourcesPtrOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourcesArgs) ToPacketMirroringMirroredResourcesPtrOutputWithContext(ctx context.Context) PacketMirroringMirroredResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourcesOutput).ToPacketMirroringMirroredResourcesPtrOutputWithContext(ctx)
}

// PacketMirroringMirroredResourcesPtrInput is an input type that accepts PacketMirroringMirroredResourcesArgs, PacketMirroringMirroredResourcesPtr and PacketMirroringMirroredResourcesPtrOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourcesPtrInput` via:
//
// 		 PacketMirroringMirroredResourcesArgs{...}
//
//  or:
//
// 		 nil
//
type PacketMirroringMirroredResourcesPtrInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourcesPtrOutput() PacketMirroringMirroredResourcesPtrOutput
	ToPacketMirroringMirroredResourcesPtrOutputWithContext(context.Context) PacketMirroringMirroredResourcesPtrOutput
}

type packetMirroringMirroredResourcesPtrType PacketMirroringMirroredResourcesArgs

func PacketMirroringMirroredResourcesPtr(v *PacketMirroringMirroredResourcesArgs) PacketMirroringMirroredResourcesPtrInput {
	return (*packetMirroringMirroredResourcesPtrType)(v)
}

func (*packetMirroringMirroredResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringMirroredResources)(nil)).Elem()
}

func (i *packetMirroringMirroredResourcesPtrType) ToPacketMirroringMirroredResourcesPtrOutput() PacketMirroringMirroredResourcesPtrOutput {
	return i.ToPacketMirroringMirroredResourcesPtrOutputWithContext(context.Background())
}

func (i *packetMirroringMirroredResourcesPtrType) ToPacketMirroringMirroredResourcesPtrOutputWithContext(ctx context.Context) PacketMirroringMirroredResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourcesPtrOutput)
}

type PacketMirroringMirroredResourcesOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResources)(nil)).Elem()
}

func (o PacketMirroringMirroredResourcesOutput) ToPacketMirroringMirroredResourcesOutput() PacketMirroringMirroredResourcesOutput {
	return o
}

func (o PacketMirroringMirroredResourcesOutput) ToPacketMirroringMirroredResourcesOutputWithContext(ctx context.Context) PacketMirroringMirroredResourcesOutput {
	return o
}

func (o PacketMirroringMirroredResourcesOutput) ToPacketMirroringMirroredResourcesPtrOutput() PacketMirroringMirroredResourcesPtrOutput {
	return o.ToPacketMirroringMirroredResourcesPtrOutputWithContext(context.Background())
}

func (o PacketMirroringMirroredResourcesOutput) ToPacketMirroringMirroredResourcesPtrOutputWithContext(ctx context.Context) PacketMirroringMirroredResourcesPtrOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResources) *PacketMirroringMirroredResources {
		return &v
	}).(PacketMirroringMirroredResourcesPtrOutput)
}

// All the listed instances will be mirrored.  Specify at most 50.  Structure is documented below.
func (o PacketMirroringMirroredResourcesOutput) Instances() PacketMirroringMirroredResourcesInstanceArrayOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResources) []PacketMirroringMirroredResourcesInstance {
		return v.Instances
	}).(PacketMirroringMirroredResourcesInstanceArrayOutput)
}

// All instances in one of these subnetworks will be mirrored.  Structure is documented below.
func (o PacketMirroringMirroredResourcesOutput) Subnetworks() PacketMirroringMirroredResourcesSubnetworkArrayOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResources) []PacketMirroringMirroredResourcesSubnetwork {
		return v.Subnetworks
	}).(PacketMirroringMirroredResourcesSubnetworkArrayOutput)
}

// All instances with these tags will be mirrored.
func (o PacketMirroringMirroredResourcesOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResources) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type PacketMirroringMirroredResourcesPtrOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringMirroredResources)(nil)).Elem()
}

func (o PacketMirroringMirroredResourcesPtrOutput) ToPacketMirroringMirroredResourcesPtrOutput() PacketMirroringMirroredResourcesPtrOutput {
	return o
}

func (o PacketMirroringMirroredResourcesPtrOutput) ToPacketMirroringMirroredResourcesPtrOutputWithContext(ctx context.Context) PacketMirroringMirroredResourcesPtrOutput {
	return o
}

func (o PacketMirroringMirroredResourcesPtrOutput) Elem() PacketMirroringMirroredResourcesOutput {
	return o.ApplyT(func(v *PacketMirroringMirroredResources) PacketMirroringMirroredResources { return *v }).(PacketMirroringMirroredResourcesOutput)
}

// All the listed instances will be mirrored.  Specify at most 50.  Structure is documented below.
func (o PacketMirroringMirroredResourcesPtrOutput) Instances() PacketMirroringMirroredResourcesInstanceArrayOutput {
	return o.ApplyT(func(v *PacketMirroringMirroredResources) []PacketMirroringMirroredResourcesInstance {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(PacketMirroringMirroredResourcesInstanceArrayOutput)
}

// All instances in one of these subnetworks will be mirrored.  Structure is documented below.
func (o PacketMirroringMirroredResourcesPtrOutput) Subnetworks() PacketMirroringMirroredResourcesSubnetworkArrayOutput {
	return o.ApplyT(func(v *PacketMirroringMirroredResources) []PacketMirroringMirroredResourcesSubnetwork {
		if v == nil {
			return nil
		}
		return v.Subnetworks
	}).(PacketMirroringMirroredResourcesSubnetworkArrayOutput)
}

// All instances with these tags will be mirrored.
func (o PacketMirroringMirroredResourcesPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PacketMirroringMirroredResources) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

type PacketMirroringMirroredResourcesInstance struct {
	// The URL of the instances where this rule should be active.
	Url string `pulumi:"url"`
}

// PacketMirroringMirroredResourcesInstanceInput is an input type that accepts PacketMirroringMirroredResourcesInstanceArgs and PacketMirroringMirroredResourcesInstanceOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourcesInstanceInput` via:
//
// 		 PacketMirroringMirroredResourcesInstanceArgs{...}
//
type PacketMirroringMirroredResourcesInstanceInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourcesInstanceOutput() PacketMirroringMirroredResourcesInstanceOutput
	ToPacketMirroringMirroredResourcesInstanceOutputWithContext(context.Context) PacketMirroringMirroredResourcesInstanceOutput
}

type PacketMirroringMirroredResourcesInstanceArgs struct {
	// The URL of the instances where this rule should be active.
	Url pulumi.StringInput `pulumi:"url"`
}

func (PacketMirroringMirroredResourcesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResourcesInstance)(nil)).Elem()
}

func (i PacketMirroringMirroredResourcesInstanceArgs) ToPacketMirroringMirroredResourcesInstanceOutput() PacketMirroringMirroredResourcesInstanceOutput {
	return i.ToPacketMirroringMirroredResourcesInstanceOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourcesInstanceArgs) ToPacketMirroringMirroredResourcesInstanceOutputWithContext(ctx context.Context) PacketMirroringMirroredResourcesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourcesInstanceOutput)
}

// PacketMirroringMirroredResourcesInstanceArrayInput is an input type that accepts PacketMirroringMirroredResourcesInstanceArray and PacketMirroringMirroredResourcesInstanceArrayOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourcesInstanceArrayInput` via:
//
// 		 PacketMirroringMirroredResourcesInstanceArray{ PacketMirroringMirroredResourcesInstanceArgs{...} }
//
type PacketMirroringMirroredResourcesInstanceArrayInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourcesInstanceArrayOutput() PacketMirroringMirroredResourcesInstanceArrayOutput
	ToPacketMirroringMirroredResourcesInstanceArrayOutputWithContext(context.Context) PacketMirroringMirroredResourcesInstanceArrayOutput
}

type PacketMirroringMirroredResourcesInstanceArray []PacketMirroringMirroredResourcesInstanceInput

func (PacketMirroringMirroredResourcesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PacketMirroringMirroredResourcesInstance)(nil)).Elem()
}

func (i PacketMirroringMirroredResourcesInstanceArray) ToPacketMirroringMirroredResourcesInstanceArrayOutput() PacketMirroringMirroredResourcesInstanceArrayOutput {
	return i.ToPacketMirroringMirroredResourcesInstanceArrayOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourcesInstanceArray) ToPacketMirroringMirroredResourcesInstanceArrayOutputWithContext(ctx context.Context) PacketMirroringMirroredResourcesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourcesInstanceArrayOutput)
}

type PacketMirroringMirroredResourcesInstanceOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourcesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResourcesInstance)(nil)).Elem()
}

func (o PacketMirroringMirroredResourcesInstanceOutput) ToPacketMirroringMirroredResourcesInstanceOutput() PacketMirroringMirroredResourcesInstanceOutput {
	return o
}

func (o PacketMirroringMirroredResourcesInstanceOutput) ToPacketMirroringMirroredResourcesInstanceOutputWithContext(ctx context.Context) PacketMirroringMirroredResourcesInstanceOutput {
	return o
}

// The URL of the instances where this rule should be active.
func (o PacketMirroringMirroredResourcesInstanceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResourcesInstance) string { return v.Url }).(pulumi.StringOutput)
}

type PacketMirroringMirroredResourcesInstanceArrayOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourcesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PacketMirroringMirroredResourcesInstance)(nil)).Elem()
}

func (o PacketMirroringMirroredResourcesInstanceArrayOutput) ToPacketMirroringMirroredResourcesInstanceArrayOutput() PacketMirroringMirroredResourcesInstanceArrayOutput {
	return o
}

func (o PacketMirroringMirroredResourcesInstanceArrayOutput) ToPacketMirroringMirroredResourcesInstanceArrayOutputWithContext(ctx context.Context) PacketMirroringMirroredResourcesInstanceArrayOutput {
	return o
}

func (o PacketMirroringMirroredResourcesInstanceArrayOutput) Index(i pulumi.IntInput) PacketMirroringMirroredResourcesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PacketMirroringMirroredResourcesInstance {
		return vs[0].([]PacketMirroringMirroredResourcesInstance)[vs[1].(int)]
	}).(PacketMirroringMirroredResourcesInstanceOutput)
}

type PacketMirroringMirroredResourcesSubnetwork struct {
	// The URL of the instances where this rule should be active.
	Url string `pulumi:"url"`
}

// PacketMirroringMirroredResourcesSubnetworkInput is an input type that accepts PacketMirroringMirroredResourcesSubnetworkArgs and PacketMirroringMirroredResourcesSubnetworkOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourcesSubnetworkInput` via:
//
// 		 PacketMirroringMirroredResourcesSubnetworkArgs{...}
//
type PacketMirroringMirroredResourcesSubnetworkInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourcesSubnetworkOutput() PacketMirroringMirroredResourcesSubnetworkOutput
	ToPacketMirroringMirroredResourcesSubnetworkOutputWithContext(context.Context) PacketMirroringMirroredResourcesSubnetworkOutput
}

type PacketMirroringMirroredResourcesSubnetworkArgs struct {
	// The URL of the instances where this rule should be active.
	Url pulumi.StringInput `pulumi:"url"`
}

func (PacketMirroringMirroredResourcesSubnetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResourcesSubnetwork)(nil)).Elem()
}

func (i PacketMirroringMirroredResourcesSubnetworkArgs) ToPacketMirroringMirroredResourcesSubnetworkOutput() PacketMirroringMirroredResourcesSubnetworkOutput {
	return i.ToPacketMirroringMirroredResourcesSubnetworkOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourcesSubnetworkArgs) ToPacketMirroringMirroredResourcesSubnetworkOutputWithContext(ctx context.Context) PacketMirroringMirroredResourcesSubnetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourcesSubnetworkOutput)
}

// PacketMirroringMirroredResourcesSubnetworkArrayInput is an input type that accepts PacketMirroringMirroredResourcesSubnetworkArray and PacketMirroringMirroredResourcesSubnetworkArrayOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourcesSubnetworkArrayInput` via:
//
// 		 PacketMirroringMirroredResourcesSubnetworkArray{ PacketMirroringMirroredResourcesSubnetworkArgs{...} }
//
type PacketMirroringMirroredResourcesSubnetworkArrayInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourcesSubnetworkArrayOutput() PacketMirroringMirroredResourcesSubnetworkArrayOutput
	ToPacketMirroringMirroredResourcesSubnetworkArrayOutputWithContext(context.Context) PacketMirroringMirroredResourcesSubnetworkArrayOutput
}

type PacketMirroringMirroredResourcesSubnetworkArray []PacketMirroringMirroredResourcesSubnetworkInput

func (PacketMirroringMirroredResourcesSubnetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PacketMirroringMirroredResourcesSubnetwork)(nil)).Elem()
}

func (i PacketMirroringMirroredResourcesSubnetworkArray) ToPacketMirroringMirroredResourcesSubnetworkArrayOutput() PacketMirroringMirroredResourcesSubnetworkArrayOutput {
	return i.ToPacketMirroringMirroredResourcesSubnetworkArrayOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourcesSubnetworkArray) ToPacketMirroringMirroredResourcesSubnetworkArrayOutputWithContext(ctx context.Context) PacketMirroringMirroredResourcesSubnetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourcesSubnetworkArrayOutput)
}

type PacketMirroringMirroredResourcesSubnetworkOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourcesSubnetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResourcesSubnetwork)(nil)).Elem()
}

func (o PacketMirroringMirroredResourcesSubnetworkOutput) ToPacketMirroringMirroredResourcesSubnetworkOutput() PacketMirroringMirroredResourcesSubnetworkOutput {
	return o
}

func (o PacketMirroringMirroredResourcesSubnetworkOutput) ToPacketMirroringMirroredResourcesSubnetworkOutputWithContext(ctx context.Context) PacketMirroringMirroredResourcesSubnetworkOutput {
	return o
}

// The URL of the instances where this rule should be active.
func (o PacketMirroringMirroredResourcesSubnetworkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResourcesSubnetwork) string { return v.Url }).(pulumi.StringOutput)
}

type PacketMirroringMirroredResourcesSubnetworkArrayOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourcesSubnetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PacketMirroringMirroredResourcesSubnetwork)(nil)).Elem()
}

func (o PacketMirroringMirroredResourcesSubnetworkArrayOutput) ToPacketMirroringMirroredResourcesSubnetworkArrayOutput() PacketMirroringMirroredResourcesSubnetworkArrayOutput {
	return o
}

func (o PacketMirroringMirroredResourcesSubnetworkArrayOutput) ToPacketMirroringMirroredResourcesSubnetworkArrayOutputWithContext(ctx context.Context) PacketMirroringMirroredResourcesSubnetworkArrayOutput {
	return o
}

func (o PacketMirroringMirroredResourcesSubnetworkArrayOutput) Index(i pulumi.IntInput) PacketMirroringMirroredResourcesSubnetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PacketMirroringMirroredResourcesSubnetwork {
		return vs[0].([]PacketMirroringMirroredResourcesSubnetwork)[vs[1].(int)]
	}).(PacketMirroringMirroredResourcesSubnetworkOutput)
}

type PacketMirroringNetwork struct {
	// The URL of the instances where this rule should be active.
	Url string `pulumi:"url"`
}

// PacketMirroringNetworkInput is an input type that accepts PacketMirroringNetworkArgs and PacketMirroringNetworkOutput values.
// You can construct a concrete instance of `PacketMirroringNetworkInput` via:
//
// 		 PacketMirroringNetworkArgs{...}
//
type PacketMirroringNetworkInput interface {
	pulumi.Input

	ToPacketMirroringNetworkOutput() PacketMirroringNetworkOutput
	ToPacketMirroringNetworkOutputWithContext(context.Context) PacketMirroringNetworkOutput
}

type PacketMirroringNetworkArgs struct {
	// The URL of the instances where this rule should be active.
	Url pulumi.StringInput `pulumi:"url"`
}

func (PacketMirroringNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringNetwork)(nil)).Elem()
}

func (i PacketMirroringNetworkArgs) ToPacketMirroringNetworkOutput() PacketMirroringNetworkOutput {
	return i.ToPacketMirroringNetworkOutputWithContext(context.Background())
}

func (i PacketMirroringNetworkArgs) ToPacketMirroringNetworkOutputWithContext(ctx context.Context) PacketMirroringNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringNetworkOutput)
}

func (i PacketMirroringNetworkArgs) ToPacketMirroringNetworkPtrOutput() PacketMirroringNetworkPtrOutput {
	return i.ToPacketMirroringNetworkPtrOutputWithContext(context.Background())
}

func (i PacketMirroringNetworkArgs) ToPacketMirroringNetworkPtrOutputWithContext(ctx context.Context) PacketMirroringNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringNetworkOutput).ToPacketMirroringNetworkPtrOutputWithContext(ctx)
}

// PacketMirroringNetworkPtrInput is an input type that accepts PacketMirroringNetworkArgs, PacketMirroringNetworkPtr and PacketMirroringNetworkPtrOutput values.
// You can construct a concrete instance of `PacketMirroringNetworkPtrInput` via:
//
// 		 PacketMirroringNetworkArgs{...}
//
//  or:
//
// 		 nil
//
type PacketMirroringNetworkPtrInput interface {
	pulumi.Input

	ToPacketMirroringNetworkPtrOutput() PacketMirroringNetworkPtrOutput
	ToPacketMirroringNetworkPtrOutputWithContext(context.Context) PacketMirroringNetworkPtrOutput
}

type packetMirroringNetworkPtrType PacketMirroringNetworkArgs

func PacketMirroringNetworkPtr(v *PacketMirroringNetworkArgs) PacketMirroringNetworkPtrInput {
	return (*packetMirroringNetworkPtrType)(v)
}

func (*packetMirroringNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringNetwork)(nil)).Elem()
}

func (i *packetMirroringNetworkPtrType) ToPacketMirroringNetworkPtrOutput() PacketMirroringNetworkPtrOutput {
	return i.ToPacketMirroringNetworkPtrOutputWithContext(context.Background())
}

func (i *packetMirroringNetworkPtrType) ToPacketMirroringNetworkPtrOutputWithContext(ctx context.Context) PacketMirroringNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringNetworkPtrOutput)
}

type PacketMirroringNetworkOutput struct{ *pulumi.OutputState }

func (PacketMirroringNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringNetwork)(nil)).Elem()
}

func (o PacketMirroringNetworkOutput) ToPacketMirroringNetworkOutput() PacketMirroringNetworkOutput {
	return o
}

func (o PacketMirroringNetworkOutput) ToPacketMirroringNetworkOutputWithContext(ctx context.Context) PacketMirroringNetworkOutput {
	return o
}

func (o PacketMirroringNetworkOutput) ToPacketMirroringNetworkPtrOutput() PacketMirroringNetworkPtrOutput {
	return o.ToPacketMirroringNetworkPtrOutputWithContext(context.Background())
}

func (o PacketMirroringNetworkOutput) ToPacketMirroringNetworkPtrOutputWithContext(ctx context.Context) PacketMirroringNetworkPtrOutput {
	return o.ApplyT(func(v PacketMirroringNetwork) *PacketMirroringNetwork {
		return &v
	}).(PacketMirroringNetworkPtrOutput)
}

// The URL of the instances where this rule should be active.
func (o PacketMirroringNetworkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v PacketMirroringNetwork) string { return v.Url }).(pulumi.StringOutput)
}

type PacketMirroringNetworkPtrOutput struct{ *pulumi.OutputState }

func (PacketMirroringNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringNetwork)(nil)).Elem()
}

func (o PacketMirroringNetworkPtrOutput) ToPacketMirroringNetworkPtrOutput() PacketMirroringNetworkPtrOutput {
	return o
}

func (o PacketMirroringNetworkPtrOutput) ToPacketMirroringNetworkPtrOutputWithContext(ctx context.Context) PacketMirroringNetworkPtrOutput {
	return o
}

func (o PacketMirroringNetworkPtrOutput) Elem() PacketMirroringNetworkOutput {
	return o.ApplyT(func(v *PacketMirroringNetwork) PacketMirroringNetwork { return *v }).(PacketMirroringNetworkOutput)
}

// The URL of the instances where this rule should be active.
func (o PacketMirroringNetworkPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PacketMirroringNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type RegionAutoscalerAutoscalingPolicy struct {
	// The number of seconds that the autoscaler should wait before it
	// starts collecting information from a new instance. This prevents
	// the autoscaler from collecting information when the instance is
	// initializing, during which the collected usage would not be
	// reliable. The default time autoscaler waits is 60 seconds.
	// Virtual machine initialization times might vary because of
	// numerous factors. We recommend that you test how long an
	// instance may take to initialize. To do this, create an instance
	// and time the startup process.
	CooldownPeriod *int `pulumi:"cooldownPeriod"`
	// Defines the CPU utilization policy that allows the autoscaler to
	// scale based on the average CPU utilization of a managed instance
	// group.  Structure is documented below.
	CpuUtilization *RegionAutoscalerAutoscalingPolicyCpuUtilization `pulumi:"cpuUtilization"`
	// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
	LoadBalancingUtilization *RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization `pulumi:"loadBalancingUtilization"`
	// The maximum number of instances that the autoscaler can scale up
	// to. This is required when creating or updating an autoscaler. The
	// maximum number of replicas should not be lower than minimal number
	// of replicas.
	MaxReplicas int `pulumi:"maxReplicas"`
	// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
	Metrics []RegionAutoscalerAutoscalingPolicyMetric `pulumi:"metrics"`
	// The minimum number of replicas that the autoscaler can scale down
	// to. This cannot be less than 0. If not provided, autoscaler will
	// choose a default value depending on maximum number of instances
	// allowed.
	MinReplicas int `pulumi:"minReplicas"`
}

// RegionAutoscalerAutoscalingPolicyInput is an input type that accepts RegionAutoscalerAutoscalingPolicyArgs and RegionAutoscalerAutoscalingPolicyOutput values.
// You can construct a concrete instance of `RegionAutoscalerAutoscalingPolicyInput` via:
//
// 		 RegionAutoscalerAutoscalingPolicyArgs{...}
//
type RegionAutoscalerAutoscalingPolicyInput interface {
	pulumi.Input

	ToRegionAutoscalerAutoscalingPolicyOutput() RegionAutoscalerAutoscalingPolicyOutput
	ToRegionAutoscalerAutoscalingPolicyOutputWithContext(context.Context) RegionAutoscalerAutoscalingPolicyOutput
}

type RegionAutoscalerAutoscalingPolicyArgs struct {
	// The number of seconds that the autoscaler should wait before it
	// starts collecting information from a new instance. This prevents
	// the autoscaler from collecting information when the instance is
	// initializing, during which the collected usage would not be
	// reliable. The default time autoscaler waits is 60 seconds.
	// Virtual machine initialization times might vary because of
	// numerous factors. We recommend that you test how long an
	// instance may take to initialize. To do this, create an instance
	// and time the startup process.
	CooldownPeriod pulumi.IntPtrInput `pulumi:"cooldownPeriod"`
	// Defines the CPU utilization policy that allows the autoscaler to
	// scale based on the average CPU utilization of a managed instance
	// group.  Structure is documented below.
	CpuUtilization RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrInput `pulumi:"cpuUtilization"`
	// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
	LoadBalancingUtilization RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrInput `pulumi:"loadBalancingUtilization"`
	// The maximum number of instances that the autoscaler can scale up
	// to. This is required when creating or updating an autoscaler. The
	// maximum number of replicas should not be lower than minimal number
	// of replicas.
	MaxReplicas pulumi.IntInput `pulumi:"maxReplicas"`
	// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
	Metrics RegionAutoscalerAutoscalingPolicyMetricArrayInput `pulumi:"metrics"`
	// The minimum number of replicas that the autoscaler can scale down
	// to. This cannot be less than 0. If not provided, autoscaler will
	// choose a default value depending on maximum number of instances
	// allowed.
	MinReplicas pulumi.IntInput `pulumi:"minReplicas"`
}

func (RegionAutoscalerAutoscalingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionAutoscalerAutoscalingPolicy)(nil)).Elem()
}

func (i RegionAutoscalerAutoscalingPolicyArgs) ToRegionAutoscalerAutoscalingPolicyOutput() RegionAutoscalerAutoscalingPolicyOutput {
	return i.ToRegionAutoscalerAutoscalingPolicyOutputWithContext(context.Background())
}

func (i RegionAutoscalerAutoscalingPolicyArgs) ToRegionAutoscalerAutoscalingPolicyOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionAutoscalerAutoscalingPolicyOutput)
}

func (i RegionAutoscalerAutoscalingPolicyArgs) ToRegionAutoscalerAutoscalingPolicyPtrOutput() RegionAutoscalerAutoscalingPolicyPtrOutput {
	return i.ToRegionAutoscalerAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (i RegionAutoscalerAutoscalingPolicyArgs) ToRegionAutoscalerAutoscalingPolicyPtrOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionAutoscalerAutoscalingPolicyOutput).ToRegionAutoscalerAutoscalingPolicyPtrOutputWithContext(ctx)
}

// RegionAutoscalerAutoscalingPolicyPtrInput is an input type that accepts RegionAutoscalerAutoscalingPolicyArgs, RegionAutoscalerAutoscalingPolicyPtr and RegionAutoscalerAutoscalingPolicyPtrOutput values.
// You can construct a concrete instance of `RegionAutoscalerAutoscalingPolicyPtrInput` via:
//
// 		 RegionAutoscalerAutoscalingPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type RegionAutoscalerAutoscalingPolicyPtrInput interface {
	pulumi.Input

	ToRegionAutoscalerAutoscalingPolicyPtrOutput() RegionAutoscalerAutoscalingPolicyPtrOutput
	ToRegionAutoscalerAutoscalingPolicyPtrOutputWithContext(context.Context) RegionAutoscalerAutoscalingPolicyPtrOutput
}

type regionAutoscalerAutoscalingPolicyPtrType RegionAutoscalerAutoscalingPolicyArgs

func RegionAutoscalerAutoscalingPolicyPtr(v *RegionAutoscalerAutoscalingPolicyArgs) RegionAutoscalerAutoscalingPolicyPtrInput {
	return (*regionAutoscalerAutoscalingPolicyPtrType)(v)
}

func (*regionAutoscalerAutoscalingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionAutoscalerAutoscalingPolicy)(nil)).Elem()
}

func (i *regionAutoscalerAutoscalingPolicyPtrType) ToRegionAutoscalerAutoscalingPolicyPtrOutput() RegionAutoscalerAutoscalingPolicyPtrOutput {
	return i.ToRegionAutoscalerAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (i *regionAutoscalerAutoscalingPolicyPtrType) ToRegionAutoscalerAutoscalingPolicyPtrOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionAutoscalerAutoscalingPolicyPtrOutput)
}

type RegionAutoscalerAutoscalingPolicyOutput struct{ *pulumi.OutputState }

func (RegionAutoscalerAutoscalingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionAutoscalerAutoscalingPolicy)(nil)).Elem()
}

func (o RegionAutoscalerAutoscalingPolicyOutput) ToRegionAutoscalerAutoscalingPolicyOutput() RegionAutoscalerAutoscalingPolicyOutput {
	return o
}

func (o RegionAutoscalerAutoscalingPolicyOutput) ToRegionAutoscalerAutoscalingPolicyOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyOutput {
	return o
}

func (o RegionAutoscalerAutoscalingPolicyOutput) ToRegionAutoscalerAutoscalingPolicyPtrOutput() RegionAutoscalerAutoscalingPolicyPtrOutput {
	return o.ToRegionAutoscalerAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (o RegionAutoscalerAutoscalingPolicyOutput) ToRegionAutoscalerAutoscalingPolicyPtrOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyPtrOutput {
	return o.ApplyT(func(v RegionAutoscalerAutoscalingPolicy) *RegionAutoscalerAutoscalingPolicy {
		return &v
	}).(RegionAutoscalerAutoscalingPolicyPtrOutput)
}

// The number of seconds that the autoscaler should wait before it
// starts collecting information from a new instance. This prevents
// the autoscaler from collecting information when the instance is
// initializing, during which the collected usage would not be
// reliable. The default time autoscaler waits is 60 seconds.
// Virtual machine initialization times might vary because of
// numerous factors. We recommend that you test how long an
// instance may take to initialize. To do this, create an instance
// and time the startup process.
func (o RegionAutoscalerAutoscalingPolicyOutput) CooldownPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionAutoscalerAutoscalingPolicy) *int { return v.CooldownPeriod }).(pulumi.IntPtrOutput)
}

// Defines the CPU utilization policy that allows the autoscaler to
// scale based on the average CPU utilization of a managed instance
// group.  Structure is documented below.
func (o RegionAutoscalerAutoscalingPolicyOutput) CpuUtilization() RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return o.ApplyT(func(v RegionAutoscalerAutoscalingPolicy) *RegionAutoscalerAutoscalingPolicyCpuUtilization {
		return v.CpuUtilization
	}).(RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput)
}

// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
func (o RegionAutoscalerAutoscalingPolicyOutput) LoadBalancingUtilization() RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o.ApplyT(func(v RegionAutoscalerAutoscalingPolicy) *RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization {
		return v.LoadBalancingUtilization
	}).(RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput)
}

// The maximum number of instances that the autoscaler can scale up
// to. This is required when creating or updating an autoscaler. The
// maximum number of replicas should not be lower than minimal number
// of replicas.
func (o RegionAutoscalerAutoscalingPolicyOutput) MaxReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v RegionAutoscalerAutoscalingPolicy) int { return v.MaxReplicas }).(pulumi.IntOutput)
}

// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
func (o RegionAutoscalerAutoscalingPolicyOutput) Metrics() RegionAutoscalerAutoscalingPolicyMetricArrayOutput {
	return o.ApplyT(func(v RegionAutoscalerAutoscalingPolicy) []RegionAutoscalerAutoscalingPolicyMetric { return v.Metrics }).(RegionAutoscalerAutoscalingPolicyMetricArrayOutput)
}

// The minimum number of replicas that the autoscaler can scale down
// to. This cannot be less than 0. If not provided, autoscaler will
// choose a default value depending on maximum number of instances
// allowed.
func (o RegionAutoscalerAutoscalingPolicyOutput) MinReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v RegionAutoscalerAutoscalingPolicy) int { return v.MinReplicas }).(pulumi.IntOutput)
}

type RegionAutoscalerAutoscalingPolicyPtrOutput struct{ *pulumi.OutputState }

func (RegionAutoscalerAutoscalingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionAutoscalerAutoscalingPolicy)(nil)).Elem()
}

func (o RegionAutoscalerAutoscalingPolicyPtrOutput) ToRegionAutoscalerAutoscalingPolicyPtrOutput() RegionAutoscalerAutoscalingPolicyPtrOutput {
	return o
}

func (o RegionAutoscalerAutoscalingPolicyPtrOutput) ToRegionAutoscalerAutoscalingPolicyPtrOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyPtrOutput {
	return o
}

func (o RegionAutoscalerAutoscalingPolicyPtrOutput) Elem() RegionAutoscalerAutoscalingPolicyOutput {
	return o.ApplyT(func(v *RegionAutoscalerAutoscalingPolicy) RegionAutoscalerAutoscalingPolicy { return *v }).(RegionAutoscalerAutoscalingPolicyOutput)
}

// The number of seconds that the autoscaler should wait before it
// starts collecting information from a new instance. This prevents
// the autoscaler from collecting information when the instance is
// initializing, during which the collected usage would not be
// reliable. The default time autoscaler waits is 60 seconds.
// Virtual machine initialization times might vary because of
// numerous factors. We recommend that you test how long an
// instance may take to initialize. To do this, create an instance
// and time the startup process.
func (o RegionAutoscalerAutoscalingPolicyPtrOutput) CooldownPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionAutoscalerAutoscalingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.CooldownPeriod
	}).(pulumi.IntPtrOutput)
}

// Defines the CPU utilization policy that allows the autoscaler to
// scale based on the average CPU utilization of a managed instance
// group.  Structure is documented below.
func (o RegionAutoscalerAutoscalingPolicyPtrOutput) CpuUtilization() RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return o.ApplyT(func(v *RegionAutoscalerAutoscalingPolicy) *RegionAutoscalerAutoscalingPolicyCpuUtilization {
		if v == nil {
			return nil
		}
		return v.CpuUtilization
	}).(RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput)
}

// Configuration parameters of autoscaling based on a load balancer.  Structure is documented below.
func (o RegionAutoscalerAutoscalingPolicyPtrOutput) LoadBalancingUtilization() RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o.ApplyT(func(v *RegionAutoscalerAutoscalingPolicy) *RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization {
		if v == nil {
			return nil
		}
		return v.LoadBalancingUtilization
	}).(RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput)
}

// The maximum number of instances that the autoscaler can scale up
// to. This is required when creating or updating an autoscaler. The
// maximum number of replicas should not be lower than minimal number
// of replicas.
func (o RegionAutoscalerAutoscalingPolicyPtrOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionAutoscalerAutoscalingPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MaxReplicas
	}).(pulumi.IntPtrOutput)
}

// Configuration parameters of autoscaling based on a custom metric.  Structure is documented below.
func (o RegionAutoscalerAutoscalingPolicyPtrOutput) Metrics() RegionAutoscalerAutoscalingPolicyMetricArrayOutput {
	return o.ApplyT(func(v *RegionAutoscalerAutoscalingPolicy) []RegionAutoscalerAutoscalingPolicyMetric {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(RegionAutoscalerAutoscalingPolicyMetricArrayOutput)
}

// The minimum number of replicas that the autoscaler can scale down
// to. This cannot be less than 0. If not provided, autoscaler will
// choose a default value depending on maximum number of instances
// allowed.
func (o RegionAutoscalerAutoscalingPolicyPtrOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionAutoscalerAutoscalingPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MinReplicas
	}).(pulumi.IntPtrOutput)
}

type RegionAutoscalerAutoscalingPolicyCpuUtilization struct {
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target float64 `pulumi:"target"`
}

// RegionAutoscalerAutoscalingPolicyCpuUtilizationInput is an input type that accepts RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs and RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput values.
// You can construct a concrete instance of `RegionAutoscalerAutoscalingPolicyCpuUtilizationInput` via:
//
// 		 RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs{...}
//
type RegionAutoscalerAutoscalingPolicyCpuUtilizationInput interface {
	pulumi.Input

	ToRegionAutoscalerAutoscalingPolicyCpuUtilizationOutput() RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput
	ToRegionAutoscalerAutoscalingPolicyCpuUtilizationOutputWithContext(context.Context) RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput
}

type RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs struct {
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target pulumi.Float64Input `pulumi:"target"`
}

func (RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionAutoscalerAutoscalingPolicyCpuUtilization)(nil)).Elem()
}

func (i RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs) ToRegionAutoscalerAutoscalingPolicyCpuUtilizationOutput() RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput {
	return i.ToRegionAutoscalerAutoscalingPolicyCpuUtilizationOutputWithContext(context.Background())
}

func (i RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs) ToRegionAutoscalerAutoscalingPolicyCpuUtilizationOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput)
}

func (i RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs) ToRegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput() RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return i.ToRegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(context.Background())
}

func (i RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs) ToRegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput).ToRegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx)
}

// RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrInput is an input type that accepts RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs, RegionAutoscalerAutoscalingPolicyCpuUtilizationPtr and RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput values.
// You can construct a concrete instance of `RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrInput` via:
//
// 		 RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs{...}
//
//  or:
//
// 		 nil
//
type RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrInput interface {
	pulumi.Input

	ToRegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput() RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput
	ToRegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(context.Context) RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput
}

type regionAutoscalerAutoscalingPolicyCpuUtilizationPtrType RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs

func RegionAutoscalerAutoscalingPolicyCpuUtilizationPtr(v *RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs) RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrInput {
	return (*regionAutoscalerAutoscalingPolicyCpuUtilizationPtrType)(v)
}

func (*regionAutoscalerAutoscalingPolicyCpuUtilizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionAutoscalerAutoscalingPolicyCpuUtilization)(nil)).Elem()
}

func (i *regionAutoscalerAutoscalingPolicyCpuUtilizationPtrType) ToRegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput() RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return i.ToRegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(context.Background())
}

func (i *regionAutoscalerAutoscalingPolicyCpuUtilizationPtrType) ToRegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput)
}

type RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput struct{ *pulumi.OutputState }

func (RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionAutoscalerAutoscalingPolicyCpuUtilization)(nil)).Elem()
}

func (o RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput) ToRegionAutoscalerAutoscalingPolicyCpuUtilizationOutput() RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput {
	return o
}

func (o RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput) ToRegionAutoscalerAutoscalingPolicyCpuUtilizationOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput {
	return o
}

func (o RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput) ToRegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput() RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return o.ToRegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(context.Background())
}

func (o RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput) ToRegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return o.ApplyT(func(v RegionAutoscalerAutoscalingPolicyCpuUtilization) *RegionAutoscalerAutoscalingPolicyCpuUtilization {
		return &v
	}).(RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput)
}

// Fraction of backend capacity utilization (set in HTTP(s) load
// balancing configuration) that autoscaler should maintain. Must
// be a positive float value. If not defined, the default is 0.8.
func (o RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput) Target() pulumi.Float64Output {
	return o.ApplyT(func(v RegionAutoscalerAutoscalingPolicyCpuUtilization) float64 { return v.Target }).(pulumi.Float64Output)
}

type RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput struct{ *pulumi.OutputState }

func (RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionAutoscalerAutoscalingPolicyCpuUtilization)(nil)).Elem()
}

func (o RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput) ToRegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput() RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return o
}

func (o RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput) ToRegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput {
	return o
}

func (o RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput) Elem() RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput {
	return o.ApplyT(func(v *RegionAutoscalerAutoscalingPolicyCpuUtilization) RegionAutoscalerAutoscalingPolicyCpuUtilization {
		return *v
	}).(RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput)
}

// Fraction of backend capacity utilization (set in HTTP(s) load
// balancing configuration) that autoscaler should maintain. Must
// be a positive float value. If not defined, the default is 0.8.
func (o RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput) Target() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RegionAutoscalerAutoscalingPolicyCpuUtilization) *float64 {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(pulumi.Float64PtrOutput)
}

type RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization struct {
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target float64 `pulumi:"target"`
}

// RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationInput is an input type that accepts RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs and RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput values.
// You can construct a concrete instance of `RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationInput` via:
//
// 		 RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs{...}
//
type RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationInput interface {
	pulumi.Input

	ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput() RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput
	ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutputWithContext(context.Context) RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput
}

type RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs struct {
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target pulumi.Float64Input `pulumi:"target"`
}

func (RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization)(nil)).Elem()
}

func (i RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs) ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput() RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput {
	return i.ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutputWithContext(context.Background())
}

func (i RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs) ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput)
}

func (i RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs) ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput() RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return i.ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(context.Background())
}

func (i RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs) ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput).ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx)
}

// RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrInput is an input type that accepts RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs, RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtr and RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput values.
// You can construct a concrete instance of `RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrInput` via:
//
// 		 RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs{...}
//
//  or:
//
// 		 nil
//
type RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrInput interface {
	pulumi.Input

	ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput() RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput
	ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(context.Context) RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput
}

type regionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrType RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs

func RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtr(v *RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationArgs) RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrInput {
	return (*regionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrType)(v)
}

func (*regionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization)(nil)).Elem()
}

func (i *regionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrType) ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput() RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return i.ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(context.Background())
}

func (i *regionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrType) ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput)
}

type RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput struct{ *pulumi.OutputState }

func (RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization)(nil)).Elem()
}

func (o RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput) ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput() RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput {
	return o
}

func (o RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput) ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput {
	return o
}

func (o RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput) ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput() RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o.ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(context.Background())
}

func (o RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput) ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o.ApplyT(func(v RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization) *RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization {
		return &v
	}).(RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput)
}

// Fraction of backend capacity utilization (set in HTTP(s) load
// balancing configuration) that autoscaler should maintain. Must
// be a positive float value. If not defined, the default is 0.8.
func (o RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput) Target() pulumi.Float64Output {
	return o.ApplyT(func(v RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization) float64 { return v.Target }).(pulumi.Float64Output)
}

type RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput struct{ *pulumi.OutputState }

func (RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization)(nil)).Elem()
}

func (o RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput) ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput() RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o
}

func (o RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput) ToRegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o
}

func (o RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput) Elem() RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput {
	return o.ApplyT(func(v *RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization) RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization {
		return *v
	}).(RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput)
}

// Fraction of backend capacity utilization (set in HTTP(s) load
// balancing configuration) that autoscaler should maintain. Must
// be a positive float value. If not defined, the default is 0.8.
func (o RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput) Target() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RegionAutoscalerAutoscalingPolicyLoadBalancingUtilization) *float64 {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(pulumi.Float64PtrOutput)
}

type RegionAutoscalerAutoscalingPolicyMetric struct {
	// A filter string to be used as the filter string for
	// a Stackdriver Monitoring TimeSeries.list API call.
	// This filter is used to select a specific TimeSeries for
	// the purpose of autoscaling and to determine whether the metric
	// is exporting per-instance or per-group data.
	// You can only use the AND operator for joining selectors.
	// You can only use direct equality comparison operator (=) without
	// any functions for each selector.
	// You can specify the metric in both the filter string and in the
	// metric field. However, if specified in both places, the metric must
	// be identical.
	// The monitored resource type determines what kind of values are
	// expected for the metric. If it is a gce_instance, the autoscaler
	// expects the metric to include a separate TimeSeries for each
	// instance in a group. In such a case, you cannot filter on resource
	// labels.
	// If the resource type is any other value, the autoscaler expects
	// this metric to contain values that apply to the entire autoscaled
	// instance group and resource label filtering can be performed to
	// point autoscaler at the correct TimeSeries to scale upon.
	// This is called a per-group metric for the purpose of autoscaling.
	// If not specified, the type defaults to gce_instance.
	// You should provide a filter that is selective enough to pick just
	// one TimeSeries for the autoscaled group or for each of the instances
	// (if you are using gceInstance resource type). If multiple
	// TimeSeries are returned upon the query execution, the autoscaler
	// will sum their respective values to obtain its scaling value.
	Filter *string `pulumi:"filter"`
	// The identifier (type) of the Stackdriver Monitoring metric.
	// The metric cannot have negative values.
	// The metric must have a value type of INT64 or DOUBLE.
	Name string `pulumi:"name"`
	// If scaling is based on a per-group metric value that represents the
	// total amount of work to be done or resource usage, set this value to
	// an amount assigned for a single instance of the scaled group.
	// The autoscaler will keep the number of instances proportional to the
	// value of this metric, the metric itself should not change value due
	// to group resizing.
	// For example, a good metric to use with the target is
	// `pubsub.googleapis.com/subscription/num_undelivered_messages`
	// or a custom metric exporting the total number of requests coming to
	// your instances.
	// A bad example would be a metric exporting an average or median
	// latency, since this value can't include a chunk assignable to a
	// single instance, it could be better used with utilizationTarget
	// instead.
	SingleInstanceAssignment *float64 `pulumi:"singleInstanceAssignment"`
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target *float64 `pulumi:"target"`
	// Defines how target utilization value is expressed for a
	// Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND,
	// or DELTA_PER_MINUTE.
	Type *string `pulumi:"type"`
}

// RegionAutoscalerAutoscalingPolicyMetricInput is an input type that accepts RegionAutoscalerAutoscalingPolicyMetricArgs and RegionAutoscalerAutoscalingPolicyMetricOutput values.
// You can construct a concrete instance of `RegionAutoscalerAutoscalingPolicyMetricInput` via:
//
// 		 RegionAutoscalerAutoscalingPolicyMetricArgs{...}
//
type RegionAutoscalerAutoscalingPolicyMetricInput interface {
	pulumi.Input

	ToRegionAutoscalerAutoscalingPolicyMetricOutput() RegionAutoscalerAutoscalingPolicyMetricOutput
	ToRegionAutoscalerAutoscalingPolicyMetricOutputWithContext(context.Context) RegionAutoscalerAutoscalingPolicyMetricOutput
}

type RegionAutoscalerAutoscalingPolicyMetricArgs struct {
	// A filter string to be used as the filter string for
	// a Stackdriver Monitoring TimeSeries.list API call.
	// This filter is used to select a specific TimeSeries for
	// the purpose of autoscaling and to determine whether the metric
	// is exporting per-instance or per-group data.
	// You can only use the AND operator for joining selectors.
	// You can only use direct equality comparison operator (=) without
	// any functions for each selector.
	// You can specify the metric in both the filter string and in the
	// metric field. However, if specified in both places, the metric must
	// be identical.
	// The monitored resource type determines what kind of values are
	// expected for the metric. If it is a gce_instance, the autoscaler
	// expects the metric to include a separate TimeSeries for each
	// instance in a group. In such a case, you cannot filter on resource
	// labels.
	// If the resource type is any other value, the autoscaler expects
	// this metric to contain values that apply to the entire autoscaled
	// instance group and resource label filtering can be performed to
	// point autoscaler at the correct TimeSeries to scale upon.
	// This is called a per-group metric for the purpose of autoscaling.
	// If not specified, the type defaults to gce_instance.
	// You should provide a filter that is selective enough to pick just
	// one TimeSeries for the autoscaled group or for each of the instances
	// (if you are using gceInstance resource type). If multiple
	// TimeSeries are returned upon the query execution, the autoscaler
	// will sum their respective values to obtain its scaling value.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// The identifier (type) of the Stackdriver Monitoring metric.
	// The metric cannot have negative values.
	// The metric must have a value type of INT64 or DOUBLE.
	Name pulumi.StringInput `pulumi:"name"`
	// If scaling is based on a per-group metric value that represents the
	// total amount of work to be done or resource usage, set this value to
	// an amount assigned for a single instance of the scaled group.
	// The autoscaler will keep the number of instances proportional to the
	// value of this metric, the metric itself should not change value due
	// to group resizing.
	// For example, a good metric to use with the target is
	// `pubsub.googleapis.com/subscription/num_undelivered_messages`
	// or a custom metric exporting the total number of requests coming to
	// your instances.
	// A bad example would be a metric exporting an average or median
	// latency, since this value can't include a chunk assignable to a
	// single instance, it could be better used with utilizationTarget
	// instead.
	SingleInstanceAssignment pulumi.Float64PtrInput `pulumi:"singleInstanceAssignment"`
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target pulumi.Float64PtrInput `pulumi:"target"`
	// Defines how target utilization value is expressed for a
	// Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND,
	// or DELTA_PER_MINUTE.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RegionAutoscalerAutoscalingPolicyMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionAutoscalerAutoscalingPolicyMetric)(nil)).Elem()
}

func (i RegionAutoscalerAutoscalingPolicyMetricArgs) ToRegionAutoscalerAutoscalingPolicyMetricOutput() RegionAutoscalerAutoscalingPolicyMetricOutput {
	return i.ToRegionAutoscalerAutoscalingPolicyMetricOutputWithContext(context.Background())
}

func (i RegionAutoscalerAutoscalingPolicyMetricArgs) ToRegionAutoscalerAutoscalingPolicyMetricOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionAutoscalerAutoscalingPolicyMetricOutput)
}

// RegionAutoscalerAutoscalingPolicyMetricArrayInput is an input type that accepts RegionAutoscalerAutoscalingPolicyMetricArray and RegionAutoscalerAutoscalingPolicyMetricArrayOutput values.
// You can construct a concrete instance of `RegionAutoscalerAutoscalingPolicyMetricArrayInput` via:
//
// 		 RegionAutoscalerAutoscalingPolicyMetricArray{ RegionAutoscalerAutoscalingPolicyMetricArgs{...} }
//
type RegionAutoscalerAutoscalingPolicyMetricArrayInput interface {
	pulumi.Input

	ToRegionAutoscalerAutoscalingPolicyMetricArrayOutput() RegionAutoscalerAutoscalingPolicyMetricArrayOutput
	ToRegionAutoscalerAutoscalingPolicyMetricArrayOutputWithContext(context.Context) RegionAutoscalerAutoscalingPolicyMetricArrayOutput
}

type RegionAutoscalerAutoscalingPolicyMetricArray []RegionAutoscalerAutoscalingPolicyMetricInput

func (RegionAutoscalerAutoscalingPolicyMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionAutoscalerAutoscalingPolicyMetric)(nil)).Elem()
}

func (i RegionAutoscalerAutoscalingPolicyMetricArray) ToRegionAutoscalerAutoscalingPolicyMetricArrayOutput() RegionAutoscalerAutoscalingPolicyMetricArrayOutput {
	return i.ToRegionAutoscalerAutoscalingPolicyMetricArrayOutputWithContext(context.Background())
}

func (i RegionAutoscalerAutoscalingPolicyMetricArray) ToRegionAutoscalerAutoscalingPolicyMetricArrayOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionAutoscalerAutoscalingPolicyMetricArrayOutput)
}

type RegionAutoscalerAutoscalingPolicyMetricOutput struct{ *pulumi.OutputState }

func (RegionAutoscalerAutoscalingPolicyMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionAutoscalerAutoscalingPolicyMetric)(nil)).Elem()
}

func (o RegionAutoscalerAutoscalingPolicyMetricOutput) ToRegionAutoscalerAutoscalingPolicyMetricOutput() RegionAutoscalerAutoscalingPolicyMetricOutput {
	return o
}

func (o RegionAutoscalerAutoscalingPolicyMetricOutput) ToRegionAutoscalerAutoscalingPolicyMetricOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyMetricOutput {
	return o
}

// A filter string to be used as the filter string for
// a Stackdriver Monitoring TimeSeries.list API call.
// This filter is used to select a specific TimeSeries for
// the purpose of autoscaling and to determine whether the metric
// is exporting per-instance or per-group data.
// You can only use the AND operator for joining selectors.
// You can only use direct equality comparison operator (=) without
// any functions for each selector.
// You can specify the metric in both the filter string and in the
// metric field. However, if specified in both places, the metric must
// be identical.
// The monitored resource type determines what kind of values are
// expected for the metric. If it is a gce_instance, the autoscaler
// expects the metric to include a separate TimeSeries for each
// instance in a group. In such a case, you cannot filter on resource
// labels.
// If the resource type is any other value, the autoscaler expects
// this metric to contain values that apply to the entire autoscaled
// instance group and resource label filtering can be performed to
// point autoscaler at the correct TimeSeries to scale upon.
// This is called a per-group metric for the purpose of autoscaling.
// If not specified, the type defaults to gce_instance.
// You should provide a filter that is selective enough to pick just
// one TimeSeries for the autoscaled group or for each of the instances
// (if you are using gceInstance resource type). If multiple
// TimeSeries are returned upon the query execution, the autoscaler
// will sum their respective values to obtain its scaling value.
func (o RegionAutoscalerAutoscalingPolicyMetricOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionAutoscalerAutoscalingPolicyMetric) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// The identifier (type) of the Stackdriver Monitoring metric.
// The metric cannot have negative values.
// The metric must have a value type of INT64 or DOUBLE.
func (o RegionAutoscalerAutoscalingPolicyMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RegionAutoscalerAutoscalingPolicyMetric) string { return v.Name }).(pulumi.StringOutput)
}

// If scaling is based on a per-group metric value that represents the
// total amount of work to be done or resource usage, set this value to
// an amount assigned for a single instance of the scaled group.
// The autoscaler will keep the number of instances proportional to the
// value of this metric, the metric itself should not change value due
// to group resizing.
// For example, a good metric to use with the target is
// `pubsub.googleapis.com/subscription/num_undelivered_messages`
// or a custom metric exporting the total number of requests coming to
// your instances.
// A bad example would be a metric exporting an average or median
// latency, since this value can't include a chunk assignable to a
// single instance, it could be better used with utilizationTarget
// instead.
func (o RegionAutoscalerAutoscalingPolicyMetricOutput) SingleInstanceAssignment() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RegionAutoscalerAutoscalingPolicyMetric) *float64 { return v.SingleInstanceAssignment }).(pulumi.Float64PtrOutput)
}

// Fraction of backend capacity utilization (set in HTTP(s) load
// balancing configuration) that autoscaler should maintain. Must
// be a positive float value. If not defined, the default is 0.8.
func (o RegionAutoscalerAutoscalingPolicyMetricOutput) Target() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RegionAutoscalerAutoscalingPolicyMetric) *float64 { return v.Target }).(pulumi.Float64PtrOutput)
}

// Defines how target utilization value is expressed for a
// Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND,
// or DELTA_PER_MINUTE.
func (o RegionAutoscalerAutoscalingPolicyMetricOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionAutoscalerAutoscalingPolicyMetric) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RegionAutoscalerAutoscalingPolicyMetricArrayOutput struct{ *pulumi.OutputState }

func (RegionAutoscalerAutoscalingPolicyMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionAutoscalerAutoscalingPolicyMetric)(nil)).Elem()
}

func (o RegionAutoscalerAutoscalingPolicyMetricArrayOutput) ToRegionAutoscalerAutoscalingPolicyMetricArrayOutput() RegionAutoscalerAutoscalingPolicyMetricArrayOutput {
	return o
}

func (o RegionAutoscalerAutoscalingPolicyMetricArrayOutput) ToRegionAutoscalerAutoscalingPolicyMetricArrayOutputWithContext(ctx context.Context) RegionAutoscalerAutoscalingPolicyMetricArrayOutput {
	return o
}

func (o RegionAutoscalerAutoscalingPolicyMetricArrayOutput) Index(i pulumi.IntInput) RegionAutoscalerAutoscalingPolicyMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionAutoscalerAutoscalingPolicyMetric {
		return vs[0].([]RegionAutoscalerAutoscalingPolicyMetric)[vs[1].(int)]
	}).(RegionAutoscalerAutoscalingPolicyMetricOutput)
}

type RegionBackendServiceBackend struct {
	// Specifies the balancing mode for this backend. Defaults to CONNECTION.
	BalancingMode *string `pulumi:"balancingMode"`
	// A multiplier applied to the group's maximum servicing capacity
	// (based on UTILIZATION, RATE or CONNECTION).
	// ~>**NOTE**: This field cannot be set for
	// INTERNAL region backend services (default loadBalancingScheme),
	// but is required for non-INTERNAL backend service. The total
	// capacityScaler for all backends must be non-zero.
	// A setting of 0 means the group is completely drained, offering
	// 0% of its available Capacity. Valid range is [0.0,1.0].
	CapacityScaler *float64 `pulumi:"capacityScaler"`
	// An optional description of this resource.
	// Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// This field designates whether this is a failover backend. More
	// than one failover backend can be configured for a given RegionBackendService.
	Failover *bool `pulumi:"failover"`
	// The fully-qualified URL of an Instance Group or Network Endpoint
	// Group resource. In case of instance group this defines the list
	// of instances that serve traffic. Member virtual machine
	// instances from each instance group must live in the same zone as
	// the instance group itself. No two backends in a backend service
	// are allowed to use same Instance Group resource.
	// For Network Endpoint Groups this defines list of endpoints. All
	// endpoints of Network Endpoint Group must be hosted on instances
	// located in the same zone as the Network Endpoint Group.
	// Backend services cannot mix Instance Group and
	// Network Endpoint Group backends.
	// When the `loadBalancingScheme` is INTERNAL, only instance groups
	// are supported.
	// Note that you must specify an Instance Group or Network Endpoint
	// Group resource using the fully-qualified URL, rather than a
	// partial URL.
	Group string `pulumi:"group"`
	// The maximum number of connections to the backend cluster.
	// Defaults to 1024.
	MaxConnections *int `pulumi:"maxConnections"`
	// The max number of simultaneous connections that a single backend
	// network endpoint can handle. Cannot be set
	// for INTERNAL backend services.
	// This is used to calculate the capacity of the group. Can be
	// used in either CONNECTION or UTILIZATION balancing modes. For
	// CONNECTION mode, either maxConnections or
	// maxConnectionsPerEndpoint must be set.
	MaxConnectionsPerEndpoint *int `pulumi:"maxConnectionsPerEndpoint"`
	// The max number of simultaneous connections that a single
	// backend instance can handle. Cannot be set for INTERNAL backend
	// services.
	// This is used to calculate the capacity of the group.
	// Can be used in either CONNECTION or UTILIZATION balancing modes.
	// For CONNECTION mode, either maxConnections or
	// maxConnectionsPerInstance must be set.
	MaxConnectionsPerInstance *int `pulumi:"maxConnectionsPerInstance"`
	// The max requests per second (RPS) of the group. Cannot be set
	// for INTERNAL backend services.
	// Can be used with either RATE or UTILIZATION balancing modes,
	// but required if RATE mode. Either maxRate or one
	// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
	// group type, must be set.
	MaxRate *int `pulumi:"maxRate"`
	// The max requests per second (RPS) that a single backend network
	// endpoint can handle. This is used to calculate the capacity of
	// the group. Can be used in either balancing mode. For RATE mode,
	// either maxRate or maxRatePerEndpoint must be set. Cannot be set
	// for INTERNAL backend services.
	MaxRatePerEndpoint *float64 `pulumi:"maxRatePerEndpoint"`
	// The max requests per second (RPS) that a single backend
	// instance can handle. This is used to calculate the capacity of
	// the group. Can be used in either balancing mode. For RATE mode,
	// either maxRate or maxRatePerInstance must be set. Cannot be set
	// for INTERNAL backend services.
	MaxRatePerInstance *float64 `pulumi:"maxRatePerInstance"`
	// Used when balancingMode is UTILIZATION. This ratio defines the
	// CPU utilization target for the group. Valid range is [0.0, 1.0].
	// Cannot be set for INTERNAL backend services.
	MaxUtilization *float64 `pulumi:"maxUtilization"`
}

// RegionBackendServiceBackendInput is an input type that accepts RegionBackendServiceBackendArgs and RegionBackendServiceBackendOutput values.
// You can construct a concrete instance of `RegionBackendServiceBackendInput` via:
//
// 		 RegionBackendServiceBackendArgs{...}
//
type RegionBackendServiceBackendInput interface {
	pulumi.Input

	ToRegionBackendServiceBackendOutput() RegionBackendServiceBackendOutput
	ToRegionBackendServiceBackendOutputWithContext(context.Context) RegionBackendServiceBackendOutput
}

type RegionBackendServiceBackendArgs struct {
	// Specifies the balancing mode for this backend. Defaults to CONNECTION.
	BalancingMode pulumi.StringPtrInput `pulumi:"balancingMode"`
	// A multiplier applied to the group's maximum servicing capacity
	// (based on UTILIZATION, RATE or CONNECTION).
	// ~>**NOTE**: This field cannot be set for
	// INTERNAL region backend services (default loadBalancingScheme),
	// but is required for non-INTERNAL backend service. The total
	// capacityScaler for all backends must be non-zero.
	// A setting of 0 means the group is completely drained, offering
	// 0% of its available Capacity. Valid range is [0.0,1.0].
	CapacityScaler pulumi.Float64PtrInput `pulumi:"capacityScaler"`
	// An optional description of this resource.
	// Provide this property when you create the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// This field designates whether this is a failover backend. More
	// than one failover backend can be configured for a given RegionBackendService.
	Failover pulumi.BoolPtrInput `pulumi:"failover"`
	// The fully-qualified URL of an Instance Group or Network Endpoint
	// Group resource. In case of instance group this defines the list
	// of instances that serve traffic. Member virtual machine
	// instances from each instance group must live in the same zone as
	// the instance group itself. No two backends in a backend service
	// are allowed to use same Instance Group resource.
	// For Network Endpoint Groups this defines list of endpoints. All
	// endpoints of Network Endpoint Group must be hosted on instances
	// located in the same zone as the Network Endpoint Group.
	// Backend services cannot mix Instance Group and
	// Network Endpoint Group backends.
	// When the `loadBalancingScheme` is INTERNAL, only instance groups
	// are supported.
	// Note that you must specify an Instance Group or Network Endpoint
	// Group resource using the fully-qualified URL, rather than a
	// partial URL.
	Group pulumi.StringInput `pulumi:"group"`
	// The maximum number of connections to the backend cluster.
	// Defaults to 1024.
	MaxConnections pulumi.IntPtrInput `pulumi:"maxConnections"`
	// The max number of simultaneous connections that a single backend
	// network endpoint can handle. Cannot be set
	// for INTERNAL backend services.
	// This is used to calculate the capacity of the group. Can be
	// used in either CONNECTION or UTILIZATION balancing modes. For
	// CONNECTION mode, either maxConnections or
	// maxConnectionsPerEndpoint must be set.
	MaxConnectionsPerEndpoint pulumi.IntPtrInput `pulumi:"maxConnectionsPerEndpoint"`
	// The max number of simultaneous connections that a single
	// backend instance can handle. Cannot be set for INTERNAL backend
	// services.
	// This is used to calculate the capacity of the group.
	// Can be used in either CONNECTION or UTILIZATION balancing modes.
	// For CONNECTION mode, either maxConnections or
	// maxConnectionsPerInstance must be set.
	MaxConnectionsPerInstance pulumi.IntPtrInput `pulumi:"maxConnectionsPerInstance"`
	// The max requests per second (RPS) of the group. Cannot be set
	// for INTERNAL backend services.
	// Can be used with either RATE or UTILIZATION balancing modes,
	// but required if RATE mode. Either maxRate or one
	// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
	// group type, must be set.
	MaxRate pulumi.IntPtrInput `pulumi:"maxRate"`
	// The max requests per second (RPS) that a single backend network
	// endpoint can handle. This is used to calculate the capacity of
	// the group. Can be used in either balancing mode. For RATE mode,
	// either maxRate or maxRatePerEndpoint must be set. Cannot be set
	// for INTERNAL backend services.
	MaxRatePerEndpoint pulumi.Float64PtrInput `pulumi:"maxRatePerEndpoint"`
	// The max requests per second (RPS) that a single backend
	// instance can handle. This is used to calculate the capacity of
	// the group. Can be used in either balancing mode. For RATE mode,
	// either maxRate or maxRatePerInstance must be set. Cannot be set
	// for INTERNAL backend services.
	MaxRatePerInstance pulumi.Float64PtrInput `pulumi:"maxRatePerInstance"`
	// Used when balancingMode is UTILIZATION. This ratio defines the
	// CPU utilization target for the group. Valid range is [0.0, 1.0].
	// Cannot be set for INTERNAL backend services.
	MaxUtilization pulumi.Float64PtrInput `pulumi:"maxUtilization"`
}

func (RegionBackendServiceBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceBackend)(nil)).Elem()
}

func (i RegionBackendServiceBackendArgs) ToRegionBackendServiceBackendOutput() RegionBackendServiceBackendOutput {
	return i.ToRegionBackendServiceBackendOutputWithContext(context.Background())
}

func (i RegionBackendServiceBackendArgs) ToRegionBackendServiceBackendOutputWithContext(ctx context.Context) RegionBackendServiceBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceBackendOutput)
}

// RegionBackendServiceBackendArrayInput is an input type that accepts RegionBackendServiceBackendArray and RegionBackendServiceBackendArrayOutput values.
// You can construct a concrete instance of `RegionBackendServiceBackendArrayInput` via:
//
// 		 RegionBackendServiceBackendArray{ RegionBackendServiceBackendArgs{...} }
//
type RegionBackendServiceBackendArrayInput interface {
	pulumi.Input

	ToRegionBackendServiceBackendArrayOutput() RegionBackendServiceBackendArrayOutput
	ToRegionBackendServiceBackendArrayOutputWithContext(context.Context) RegionBackendServiceBackendArrayOutput
}

type RegionBackendServiceBackendArray []RegionBackendServiceBackendInput

func (RegionBackendServiceBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionBackendServiceBackend)(nil)).Elem()
}

func (i RegionBackendServiceBackendArray) ToRegionBackendServiceBackendArrayOutput() RegionBackendServiceBackendArrayOutput {
	return i.ToRegionBackendServiceBackendArrayOutputWithContext(context.Background())
}

func (i RegionBackendServiceBackendArray) ToRegionBackendServiceBackendArrayOutputWithContext(ctx context.Context) RegionBackendServiceBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceBackendArrayOutput)
}

type RegionBackendServiceBackendOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceBackend)(nil)).Elem()
}

func (o RegionBackendServiceBackendOutput) ToRegionBackendServiceBackendOutput() RegionBackendServiceBackendOutput {
	return o
}

func (o RegionBackendServiceBackendOutput) ToRegionBackendServiceBackendOutputWithContext(ctx context.Context) RegionBackendServiceBackendOutput {
	return o
}

// Specifies the balancing mode for this backend. Defaults to CONNECTION.
func (o RegionBackendServiceBackendOutput) BalancingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceBackend) *string { return v.BalancingMode }).(pulumi.StringPtrOutput)
}

// A multiplier applied to the group's maximum servicing capacity
// (based on UTILIZATION, RATE or CONNECTION).
// ~>**NOTE**: This field cannot be set for
// INTERNAL region backend services (default loadBalancingScheme),
// but is required for non-INTERNAL backend service. The total
// capacityScaler for all backends must be non-zero.
// A setting of 0 means the group is completely drained, offering
// 0% of its available Capacity. Valid range is [0.0,1.0].
func (o RegionBackendServiceBackendOutput) CapacityScaler() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RegionBackendServiceBackend) *float64 { return v.CapacityScaler }).(pulumi.Float64PtrOutput)
}

// An optional description of this resource.
// Provide this property when you create the resource.
func (o RegionBackendServiceBackendOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceBackend) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// This field designates whether this is a failover backend. More
// than one failover backend can be configured for a given RegionBackendService.
func (o RegionBackendServiceBackendOutput) Failover() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceBackend) *bool { return v.Failover }).(pulumi.BoolPtrOutput)
}

// The fully-qualified URL of an Instance Group or Network Endpoint
// Group resource. In case of instance group this defines the list
// of instances that serve traffic. Member virtual machine
// instances from each instance group must live in the same zone as
// the instance group itself. No two backends in a backend service
// are allowed to use same Instance Group resource.
// For Network Endpoint Groups this defines list of endpoints. All
// endpoints of Network Endpoint Group must be hosted on instances
// located in the same zone as the Network Endpoint Group.
// Backend services cannot mix Instance Group and
// Network Endpoint Group backends.
// When the `loadBalancingScheme` is INTERNAL, only instance groups
// are supported.
// Note that you must specify an Instance Group or Network Endpoint
// Group resource using the fully-qualified URL, rather than a
// partial URL.
func (o RegionBackendServiceBackendOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v RegionBackendServiceBackend) string { return v.Group }).(pulumi.StringOutput)
}

// The maximum number of connections to the backend cluster.
// Defaults to 1024.
func (o RegionBackendServiceBackendOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceBackend) *int { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// The max number of simultaneous connections that a single backend
// network endpoint can handle. Cannot be set
// for INTERNAL backend services.
// This is used to calculate the capacity of the group. Can be
// used in either CONNECTION or UTILIZATION balancing modes. For
// CONNECTION mode, either maxConnections or
// maxConnectionsPerEndpoint must be set.
func (o RegionBackendServiceBackendOutput) MaxConnectionsPerEndpoint() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceBackend) *int { return v.MaxConnectionsPerEndpoint }).(pulumi.IntPtrOutput)
}

// The max number of simultaneous connections that a single
// backend instance can handle. Cannot be set for INTERNAL backend
// services.
// This is used to calculate the capacity of the group.
// Can be used in either CONNECTION or UTILIZATION balancing modes.
// For CONNECTION mode, either maxConnections or
// maxConnectionsPerInstance must be set.
func (o RegionBackendServiceBackendOutput) MaxConnectionsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceBackend) *int { return v.MaxConnectionsPerInstance }).(pulumi.IntPtrOutput)
}

// The max requests per second (RPS) of the group. Cannot be set
// for INTERNAL backend services.
// Can be used with either RATE or UTILIZATION balancing modes,
// but required if RATE mode. Either maxRate or one
// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
// group type, must be set.
func (o RegionBackendServiceBackendOutput) MaxRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceBackend) *int { return v.MaxRate }).(pulumi.IntPtrOutput)
}

// The max requests per second (RPS) that a single backend network
// endpoint can handle. This is used to calculate the capacity of
// the group. Can be used in either balancing mode. For RATE mode,
// either maxRate or maxRatePerEndpoint must be set. Cannot be set
// for INTERNAL backend services.
func (o RegionBackendServiceBackendOutput) MaxRatePerEndpoint() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RegionBackendServiceBackend) *float64 { return v.MaxRatePerEndpoint }).(pulumi.Float64PtrOutput)
}

// The max requests per second (RPS) that a single backend
// instance can handle. This is used to calculate the capacity of
// the group. Can be used in either balancing mode. For RATE mode,
// either maxRate or maxRatePerInstance must be set. Cannot be set
// for INTERNAL backend services.
func (o RegionBackendServiceBackendOutput) MaxRatePerInstance() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RegionBackendServiceBackend) *float64 { return v.MaxRatePerInstance }).(pulumi.Float64PtrOutput)
}

// Used when balancingMode is UTILIZATION. This ratio defines the
// CPU utilization target for the group. Valid range is [0.0, 1.0].
// Cannot be set for INTERNAL backend services.
func (o RegionBackendServiceBackendOutput) MaxUtilization() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RegionBackendServiceBackend) *float64 { return v.MaxUtilization }).(pulumi.Float64PtrOutput)
}

type RegionBackendServiceBackendArrayOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionBackendServiceBackend)(nil)).Elem()
}

func (o RegionBackendServiceBackendArrayOutput) ToRegionBackendServiceBackendArrayOutput() RegionBackendServiceBackendArrayOutput {
	return o
}

func (o RegionBackendServiceBackendArrayOutput) ToRegionBackendServiceBackendArrayOutputWithContext(ctx context.Context) RegionBackendServiceBackendArrayOutput {
	return o
}

func (o RegionBackendServiceBackendArrayOutput) Index(i pulumi.IntInput) RegionBackendServiceBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionBackendServiceBackend {
		return vs[0].([]RegionBackendServiceBackend)[vs[1].(int)]
	}).(RegionBackendServiceBackendOutput)
}

type RegionBackendServiceCircuitBreakers struct {
	// The timeout for new network connections to hosts.  Structure is documented below.
	ConnectTimeout *RegionBackendServiceCircuitBreakersConnectTimeout `pulumi:"connectTimeout"`
	// The maximum number of connections to the backend cluster.
	// Defaults to 1024.
	MaxConnections *int `pulumi:"maxConnections"`
	// The maximum number of pending requests to the backend cluster.
	// Defaults to 1024.
	MaxPendingRequests *int `pulumi:"maxPendingRequests"`
	// The maximum number of parallel requests to the backend cluster.
	// Defaults to 1024.
	MaxRequests *int `pulumi:"maxRequests"`
	// Maximum requests for a single backend connection. This parameter
	// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
	// not specified, there is no limit. Setting this parameter to 1
	// will effectively disable keep alive.
	MaxRequestsPerConnection *int `pulumi:"maxRequestsPerConnection"`
	// The maximum number of parallel retries to the backend cluster.
	// Defaults to 3.
	MaxRetries *int `pulumi:"maxRetries"`
}

// RegionBackendServiceCircuitBreakersInput is an input type that accepts RegionBackendServiceCircuitBreakersArgs and RegionBackendServiceCircuitBreakersOutput values.
// You can construct a concrete instance of `RegionBackendServiceCircuitBreakersInput` via:
//
// 		 RegionBackendServiceCircuitBreakersArgs{...}
//
type RegionBackendServiceCircuitBreakersInput interface {
	pulumi.Input

	ToRegionBackendServiceCircuitBreakersOutput() RegionBackendServiceCircuitBreakersOutput
	ToRegionBackendServiceCircuitBreakersOutputWithContext(context.Context) RegionBackendServiceCircuitBreakersOutput
}

type RegionBackendServiceCircuitBreakersArgs struct {
	// The timeout for new network connections to hosts.  Structure is documented below.
	ConnectTimeout RegionBackendServiceCircuitBreakersConnectTimeoutPtrInput `pulumi:"connectTimeout"`
	// The maximum number of connections to the backend cluster.
	// Defaults to 1024.
	MaxConnections pulumi.IntPtrInput `pulumi:"maxConnections"`
	// The maximum number of pending requests to the backend cluster.
	// Defaults to 1024.
	MaxPendingRequests pulumi.IntPtrInput `pulumi:"maxPendingRequests"`
	// The maximum number of parallel requests to the backend cluster.
	// Defaults to 1024.
	MaxRequests pulumi.IntPtrInput `pulumi:"maxRequests"`
	// Maximum requests for a single backend connection. This parameter
	// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
	// not specified, there is no limit. Setting this parameter to 1
	// will effectively disable keep alive.
	MaxRequestsPerConnection pulumi.IntPtrInput `pulumi:"maxRequestsPerConnection"`
	// The maximum number of parallel retries to the backend cluster.
	// Defaults to 3.
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
}

func (RegionBackendServiceCircuitBreakersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceCircuitBreakers)(nil)).Elem()
}

func (i RegionBackendServiceCircuitBreakersArgs) ToRegionBackendServiceCircuitBreakersOutput() RegionBackendServiceCircuitBreakersOutput {
	return i.ToRegionBackendServiceCircuitBreakersOutputWithContext(context.Background())
}

func (i RegionBackendServiceCircuitBreakersArgs) ToRegionBackendServiceCircuitBreakersOutputWithContext(ctx context.Context) RegionBackendServiceCircuitBreakersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceCircuitBreakersOutput)
}

func (i RegionBackendServiceCircuitBreakersArgs) ToRegionBackendServiceCircuitBreakersPtrOutput() RegionBackendServiceCircuitBreakersPtrOutput {
	return i.ToRegionBackendServiceCircuitBreakersPtrOutputWithContext(context.Background())
}

func (i RegionBackendServiceCircuitBreakersArgs) ToRegionBackendServiceCircuitBreakersPtrOutputWithContext(ctx context.Context) RegionBackendServiceCircuitBreakersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceCircuitBreakersOutput).ToRegionBackendServiceCircuitBreakersPtrOutputWithContext(ctx)
}

// RegionBackendServiceCircuitBreakersPtrInput is an input type that accepts RegionBackendServiceCircuitBreakersArgs, RegionBackendServiceCircuitBreakersPtr and RegionBackendServiceCircuitBreakersPtrOutput values.
// You can construct a concrete instance of `RegionBackendServiceCircuitBreakersPtrInput` via:
//
// 		 RegionBackendServiceCircuitBreakersArgs{...}
//
//  or:
//
// 		 nil
//
type RegionBackendServiceCircuitBreakersPtrInput interface {
	pulumi.Input

	ToRegionBackendServiceCircuitBreakersPtrOutput() RegionBackendServiceCircuitBreakersPtrOutput
	ToRegionBackendServiceCircuitBreakersPtrOutputWithContext(context.Context) RegionBackendServiceCircuitBreakersPtrOutput
}

type regionBackendServiceCircuitBreakersPtrType RegionBackendServiceCircuitBreakersArgs

func RegionBackendServiceCircuitBreakersPtr(v *RegionBackendServiceCircuitBreakersArgs) RegionBackendServiceCircuitBreakersPtrInput {
	return (*regionBackendServiceCircuitBreakersPtrType)(v)
}

func (*regionBackendServiceCircuitBreakersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceCircuitBreakers)(nil)).Elem()
}

func (i *regionBackendServiceCircuitBreakersPtrType) ToRegionBackendServiceCircuitBreakersPtrOutput() RegionBackendServiceCircuitBreakersPtrOutput {
	return i.ToRegionBackendServiceCircuitBreakersPtrOutputWithContext(context.Background())
}

func (i *regionBackendServiceCircuitBreakersPtrType) ToRegionBackendServiceCircuitBreakersPtrOutputWithContext(ctx context.Context) RegionBackendServiceCircuitBreakersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceCircuitBreakersPtrOutput)
}

type RegionBackendServiceCircuitBreakersOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceCircuitBreakersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceCircuitBreakers)(nil)).Elem()
}

func (o RegionBackendServiceCircuitBreakersOutput) ToRegionBackendServiceCircuitBreakersOutput() RegionBackendServiceCircuitBreakersOutput {
	return o
}

func (o RegionBackendServiceCircuitBreakersOutput) ToRegionBackendServiceCircuitBreakersOutputWithContext(ctx context.Context) RegionBackendServiceCircuitBreakersOutput {
	return o
}

func (o RegionBackendServiceCircuitBreakersOutput) ToRegionBackendServiceCircuitBreakersPtrOutput() RegionBackendServiceCircuitBreakersPtrOutput {
	return o.ToRegionBackendServiceCircuitBreakersPtrOutputWithContext(context.Background())
}

func (o RegionBackendServiceCircuitBreakersOutput) ToRegionBackendServiceCircuitBreakersPtrOutputWithContext(ctx context.Context) RegionBackendServiceCircuitBreakersPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceCircuitBreakers) *RegionBackendServiceCircuitBreakers {
		return &v
	}).(RegionBackendServiceCircuitBreakersPtrOutput)
}

// The timeout for new network connections to hosts.  Structure is documented below.
func (o RegionBackendServiceCircuitBreakersOutput) ConnectTimeout() RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceCircuitBreakers) *RegionBackendServiceCircuitBreakersConnectTimeout {
		return v.ConnectTimeout
	}).(RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput)
}

// The maximum number of connections to the backend cluster.
// Defaults to 1024.
func (o RegionBackendServiceCircuitBreakersOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceCircuitBreakers) *int { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of pending requests to the backend cluster.
// Defaults to 1024.
func (o RegionBackendServiceCircuitBreakersOutput) MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceCircuitBreakers) *int { return v.MaxPendingRequests }).(pulumi.IntPtrOutput)
}

// The maximum number of parallel requests to the backend cluster.
// Defaults to 1024.
func (o RegionBackendServiceCircuitBreakersOutput) MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceCircuitBreakers) *int { return v.MaxRequests }).(pulumi.IntPtrOutput)
}

// Maximum requests for a single backend connection. This parameter
// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
// not specified, there is no limit. Setting this parameter to 1
// will effectively disable keep alive.
func (o RegionBackendServiceCircuitBreakersOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceCircuitBreakers) *int { return v.MaxRequestsPerConnection }).(pulumi.IntPtrOutput)
}

// The maximum number of parallel retries to the backend cluster.
// Defaults to 3.
func (o RegionBackendServiceCircuitBreakersOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceCircuitBreakers) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

type RegionBackendServiceCircuitBreakersPtrOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceCircuitBreakersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceCircuitBreakers)(nil)).Elem()
}

func (o RegionBackendServiceCircuitBreakersPtrOutput) ToRegionBackendServiceCircuitBreakersPtrOutput() RegionBackendServiceCircuitBreakersPtrOutput {
	return o
}

func (o RegionBackendServiceCircuitBreakersPtrOutput) ToRegionBackendServiceCircuitBreakersPtrOutputWithContext(ctx context.Context) RegionBackendServiceCircuitBreakersPtrOutput {
	return o
}

func (o RegionBackendServiceCircuitBreakersPtrOutput) Elem() RegionBackendServiceCircuitBreakersOutput {
	return o.ApplyT(func(v *RegionBackendServiceCircuitBreakers) RegionBackendServiceCircuitBreakers { return *v }).(RegionBackendServiceCircuitBreakersOutput)
}

// The timeout for new network connections to hosts.  Structure is documented below.
func (o RegionBackendServiceCircuitBreakersPtrOutput) ConnectTimeout() RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceCircuitBreakers) *RegionBackendServiceCircuitBreakersConnectTimeout {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput)
}

// The maximum number of connections to the backend cluster.
// Defaults to 1024.
func (o RegionBackendServiceCircuitBreakersPtrOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceCircuitBreakers) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of pending requests to the backend cluster.
// Defaults to 1024.
func (o RegionBackendServiceCircuitBreakersPtrOutput) MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceCircuitBreakers) *int {
		if v == nil {
			return nil
		}
		return v.MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// The maximum number of parallel requests to the backend cluster.
// Defaults to 1024.
func (o RegionBackendServiceCircuitBreakersPtrOutput) MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceCircuitBreakers) *int {
		if v == nil {
			return nil
		}
		return v.MaxRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum requests for a single backend connection. This parameter
// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
// not specified, there is no limit. Setting this parameter to 1
// will effectively disable keep alive.
func (o RegionBackendServiceCircuitBreakersPtrOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceCircuitBreakers) *int {
		if v == nil {
			return nil
		}
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

// The maximum number of parallel retries to the backend cluster.
// Defaults to 3.
func (o RegionBackendServiceCircuitBreakersPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceCircuitBreakers) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

type RegionBackendServiceCircuitBreakersConnectTimeout struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds int `pulumi:"seconds"`
}

// RegionBackendServiceCircuitBreakersConnectTimeoutInput is an input type that accepts RegionBackendServiceCircuitBreakersConnectTimeoutArgs and RegionBackendServiceCircuitBreakersConnectTimeoutOutput values.
// You can construct a concrete instance of `RegionBackendServiceCircuitBreakersConnectTimeoutInput` via:
//
// 		 RegionBackendServiceCircuitBreakersConnectTimeoutArgs{...}
//
type RegionBackendServiceCircuitBreakersConnectTimeoutInput interface {
	pulumi.Input

	ToRegionBackendServiceCircuitBreakersConnectTimeoutOutput() RegionBackendServiceCircuitBreakersConnectTimeoutOutput
	ToRegionBackendServiceCircuitBreakersConnectTimeoutOutputWithContext(context.Context) RegionBackendServiceCircuitBreakersConnectTimeoutOutput
}

type RegionBackendServiceCircuitBreakersConnectTimeoutArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.IntInput `pulumi:"seconds"`
}

func (RegionBackendServiceCircuitBreakersConnectTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceCircuitBreakersConnectTimeout)(nil)).Elem()
}

func (i RegionBackendServiceCircuitBreakersConnectTimeoutArgs) ToRegionBackendServiceCircuitBreakersConnectTimeoutOutput() RegionBackendServiceCircuitBreakersConnectTimeoutOutput {
	return i.ToRegionBackendServiceCircuitBreakersConnectTimeoutOutputWithContext(context.Background())
}

func (i RegionBackendServiceCircuitBreakersConnectTimeoutArgs) ToRegionBackendServiceCircuitBreakersConnectTimeoutOutputWithContext(ctx context.Context) RegionBackendServiceCircuitBreakersConnectTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceCircuitBreakersConnectTimeoutOutput)
}

func (i RegionBackendServiceCircuitBreakersConnectTimeoutArgs) ToRegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput() RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return i.ToRegionBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(context.Background())
}

func (i RegionBackendServiceCircuitBreakersConnectTimeoutArgs) ToRegionBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(ctx context.Context) RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceCircuitBreakersConnectTimeoutOutput).ToRegionBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(ctx)
}

// RegionBackendServiceCircuitBreakersConnectTimeoutPtrInput is an input type that accepts RegionBackendServiceCircuitBreakersConnectTimeoutArgs, RegionBackendServiceCircuitBreakersConnectTimeoutPtr and RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput values.
// You can construct a concrete instance of `RegionBackendServiceCircuitBreakersConnectTimeoutPtrInput` via:
//
// 		 RegionBackendServiceCircuitBreakersConnectTimeoutArgs{...}
//
//  or:
//
// 		 nil
//
type RegionBackendServiceCircuitBreakersConnectTimeoutPtrInput interface {
	pulumi.Input

	ToRegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput() RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput
	ToRegionBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(context.Context) RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput
}

type regionBackendServiceCircuitBreakersConnectTimeoutPtrType RegionBackendServiceCircuitBreakersConnectTimeoutArgs

func RegionBackendServiceCircuitBreakersConnectTimeoutPtr(v *RegionBackendServiceCircuitBreakersConnectTimeoutArgs) RegionBackendServiceCircuitBreakersConnectTimeoutPtrInput {
	return (*regionBackendServiceCircuitBreakersConnectTimeoutPtrType)(v)
}

func (*regionBackendServiceCircuitBreakersConnectTimeoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceCircuitBreakersConnectTimeout)(nil)).Elem()
}

func (i *regionBackendServiceCircuitBreakersConnectTimeoutPtrType) ToRegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput() RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return i.ToRegionBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(context.Background())
}

func (i *regionBackendServiceCircuitBreakersConnectTimeoutPtrType) ToRegionBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(ctx context.Context) RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput)
}

type RegionBackendServiceCircuitBreakersConnectTimeoutOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceCircuitBreakersConnectTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceCircuitBreakersConnectTimeout)(nil)).Elem()
}

func (o RegionBackendServiceCircuitBreakersConnectTimeoutOutput) ToRegionBackendServiceCircuitBreakersConnectTimeoutOutput() RegionBackendServiceCircuitBreakersConnectTimeoutOutput {
	return o
}

func (o RegionBackendServiceCircuitBreakersConnectTimeoutOutput) ToRegionBackendServiceCircuitBreakersConnectTimeoutOutputWithContext(ctx context.Context) RegionBackendServiceCircuitBreakersConnectTimeoutOutput {
	return o
}

func (o RegionBackendServiceCircuitBreakersConnectTimeoutOutput) ToRegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput() RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return o.ToRegionBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(context.Background())
}

func (o RegionBackendServiceCircuitBreakersConnectTimeoutOutput) ToRegionBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(ctx context.Context) RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceCircuitBreakersConnectTimeout) *RegionBackendServiceCircuitBreakersConnectTimeout {
		return &v
	}).(RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionBackendServiceCircuitBreakersConnectTimeoutOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceCircuitBreakersConnectTimeout) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionBackendServiceCircuitBreakersConnectTimeoutOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v RegionBackendServiceCircuitBreakersConnectTimeout) int { return v.Seconds }).(pulumi.IntOutput)
}

type RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceCircuitBreakersConnectTimeout)(nil)).Elem()
}

func (o RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput) ToRegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput() RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return o
}

func (o RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput) ToRegionBackendServiceCircuitBreakersConnectTimeoutPtrOutputWithContext(ctx context.Context) RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput {
	return o
}

func (o RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput) Elem() RegionBackendServiceCircuitBreakersConnectTimeoutOutput {
	return o.ApplyT(func(v *RegionBackendServiceCircuitBreakersConnectTimeout) RegionBackendServiceCircuitBreakersConnectTimeout {
		return *v
	}).(RegionBackendServiceCircuitBreakersConnectTimeoutOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceCircuitBreakersConnectTimeout) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceCircuitBreakersConnectTimeout) *int {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.IntPtrOutput)
}

type RegionBackendServiceConsistentHash struct {
	// Hash is based on HTTP Cookie. This field describes a HTTP cookie
	// that will be used as the hash key for the consistent hash load
	// balancer. If the cookie is not present, it will be generated.
	// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.  Structure is documented below.
	HttpCookie *RegionBackendServiceConsistentHashHttpCookie `pulumi:"httpCookie"`
	// The hash based on the value of the specified header field.
	// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
	HttpHeaderName *string `pulumi:"httpHeaderName"`
	// The minimum number of virtual nodes to use for the hash ring.
	// Larger ring sizes result in more granular load
	// distributions. If the number of hosts in the load balancing pool
	// is larger than the ring size, each host will be assigned a single
	// virtual node.
	// Defaults to 1024.
	MinimumRingSize *int `pulumi:"minimumRingSize"`
}

// RegionBackendServiceConsistentHashInput is an input type that accepts RegionBackendServiceConsistentHashArgs and RegionBackendServiceConsistentHashOutput values.
// You can construct a concrete instance of `RegionBackendServiceConsistentHashInput` via:
//
// 		 RegionBackendServiceConsistentHashArgs{...}
//
type RegionBackendServiceConsistentHashInput interface {
	pulumi.Input

	ToRegionBackendServiceConsistentHashOutput() RegionBackendServiceConsistentHashOutput
	ToRegionBackendServiceConsistentHashOutputWithContext(context.Context) RegionBackendServiceConsistentHashOutput
}

type RegionBackendServiceConsistentHashArgs struct {
	// Hash is based on HTTP Cookie. This field describes a HTTP cookie
	// that will be used as the hash key for the consistent hash load
	// balancer. If the cookie is not present, it will be generated.
	// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.  Structure is documented below.
	HttpCookie RegionBackendServiceConsistentHashHttpCookiePtrInput `pulumi:"httpCookie"`
	// The hash based on the value of the specified header field.
	// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
	HttpHeaderName pulumi.StringPtrInput `pulumi:"httpHeaderName"`
	// The minimum number of virtual nodes to use for the hash ring.
	// Larger ring sizes result in more granular load
	// distributions. If the number of hosts in the load balancing pool
	// is larger than the ring size, each host will be assigned a single
	// virtual node.
	// Defaults to 1024.
	MinimumRingSize pulumi.IntPtrInput `pulumi:"minimumRingSize"`
}

func (RegionBackendServiceConsistentHashArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceConsistentHash)(nil)).Elem()
}

func (i RegionBackendServiceConsistentHashArgs) ToRegionBackendServiceConsistentHashOutput() RegionBackendServiceConsistentHashOutput {
	return i.ToRegionBackendServiceConsistentHashOutputWithContext(context.Background())
}

func (i RegionBackendServiceConsistentHashArgs) ToRegionBackendServiceConsistentHashOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceConsistentHashOutput)
}

func (i RegionBackendServiceConsistentHashArgs) ToRegionBackendServiceConsistentHashPtrOutput() RegionBackendServiceConsistentHashPtrOutput {
	return i.ToRegionBackendServiceConsistentHashPtrOutputWithContext(context.Background())
}

func (i RegionBackendServiceConsistentHashArgs) ToRegionBackendServiceConsistentHashPtrOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceConsistentHashOutput).ToRegionBackendServiceConsistentHashPtrOutputWithContext(ctx)
}

// RegionBackendServiceConsistentHashPtrInput is an input type that accepts RegionBackendServiceConsistentHashArgs, RegionBackendServiceConsistentHashPtr and RegionBackendServiceConsistentHashPtrOutput values.
// You can construct a concrete instance of `RegionBackendServiceConsistentHashPtrInput` via:
//
// 		 RegionBackendServiceConsistentHashArgs{...}
//
//  or:
//
// 		 nil
//
type RegionBackendServiceConsistentHashPtrInput interface {
	pulumi.Input

	ToRegionBackendServiceConsistentHashPtrOutput() RegionBackendServiceConsistentHashPtrOutput
	ToRegionBackendServiceConsistentHashPtrOutputWithContext(context.Context) RegionBackendServiceConsistentHashPtrOutput
}

type regionBackendServiceConsistentHashPtrType RegionBackendServiceConsistentHashArgs

func RegionBackendServiceConsistentHashPtr(v *RegionBackendServiceConsistentHashArgs) RegionBackendServiceConsistentHashPtrInput {
	return (*regionBackendServiceConsistentHashPtrType)(v)
}

func (*regionBackendServiceConsistentHashPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceConsistentHash)(nil)).Elem()
}

func (i *regionBackendServiceConsistentHashPtrType) ToRegionBackendServiceConsistentHashPtrOutput() RegionBackendServiceConsistentHashPtrOutput {
	return i.ToRegionBackendServiceConsistentHashPtrOutputWithContext(context.Background())
}

func (i *regionBackendServiceConsistentHashPtrType) ToRegionBackendServiceConsistentHashPtrOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceConsistentHashPtrOutput)
}

type RegionBackendServiceConsistentHashOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceConsistentHashOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceConsistentHash)(nil)).Elem()
}

func (o RegionBackendServiceConsistentHashOutput) ToRegionBackendServiceConsistentHashOutput() RegionBackendServiceConsistentHashOutput {
	return o
}

func (o RegionBackendServiceConsistentHashOutput) ToRegionBackendServiceConsistentHashOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashOutput {
	return o
}

func (o RegionBackendServiceConsistentHashOutput) ToRegionBackendServiceConsistentHashPtrOutput() RegionBackendServiceConsistentHashPtrOutput {
	return o.ToRegionBackendServiceConsistentHashPtrOutputWithContext(context.Background())
}

func (o RegionBackendServiceConsistentHashOutput) ToRegionBackendServiceConsistentHashPtrOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceConsistentHash) *RegionBackendServiceConsistentHash {
		return &v
	}).(RegionBackendServiceConsistentHashPtrOutput)
}

// Hash is based on HTTP Cookie. This field describes a HTTP cookie
// that will be used as the hash key for the consistent hash load
// balancer. If the cookie is not present, it will be generated.
// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.  Structure is documented below.
func (o RegionBackendServiceConsistentHashOutput) HttpCookie() RegionBackendServiceConsistentHashHttpCookiePtrOutput {
	return o.ApplyT(func(v RegionBackendServiceConsistentHash) *RegionBackendServiceConsistentHashHttpCookie {
		return v.HttpCookie
	}).(RegionBackendServiceConsistentHashHttpCookiePtrOutput)
}

// The hash based on the value of the specified header field.
// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
func (o RegionBackendServiceConsistentHashOutput) HttpHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceConsistentHash) *string { return v.HttpHeaderName }).(pulumi.StringPtrOutput)
}

// The minimum number of virtual nodes to use for the hash ring.
// Larger ring sizes result in more granular load
// distributions. If the number of hosts in the load balancing pool
// is larger than the ring size, each host will be assigned a single
// virtual node.
// Defaults to 1024.
func (o RegionBackendServiceConsistentHashOutput) MinimumRingSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceConsistentHash) *int { return v.MinimumRingSize }).(pulumi.IntPtrOutput)
}

type RegionBackendServiceConsistentHashPtrOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceConsistentHashPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceConsistentHash)(nil)).Elem()
}

func (o RegionBackendServiceConsistentHashPtrOutput) ToRegionBackendServiceConsistentHashPtrOutput() RegionBackendServiceConsistentHashPtrOutput {
	return o
}

func (o RegionBackendServiceConsistentHashPtrOutput) ToRegionBackendServiceConsistentHashPtrOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashPtrOutput {
	return o
}

func (o RegionBackendServiceConsistentHashPtrOutput) Elem() RegionBackendServiceConsistentHashOutput {
	return o.ApplyT(func(v *RegionBackendServiceConsistentHash) RegionBackendServiceConsistentHash { return *v }).(RegionBackendServiceConsistentHashOutput)
}

// Hash is based on HTTP Cookie. This field describes a HTTP cookie
// that will be used as the hash key for the consistent hash load
// balancer. If the cookie is not present, it will be generated.
// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.  Structure is documented below.
func (o RegionBackendServiceConsistentHashPtrOutput) HttpCookie() RegionBackendServiceConsistentHashHttpCookiePtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceConsistentHash) *RegionBackendServiceConsistentHashHttpCookie {
		if v == nil {
			return nil
		}
		return v.HttpCookie
	}).(RegionBackendServiceConsistentHashHttpCookiePtrOutput)
}

// The hash based on the value of the specified header field.
// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
func (o RegionBackendServiceConsistentHashPtrOutput) HttpHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceConsistentHash) *string {
		if v == nil {
			return nil
		}
		return v.HttpHeaderName
	}).(pulumi.StringPtrOutput)
}

// The minimum number of virtual nodes to use for the hash ring.
// Larger ring sizes result in more granular load
// distributions. If the number of hosts in the load balancing pool
// is larger than the ring size, each host will be assigned a single
// virtual node.
// Defaults to 1024.
func (o RegionBackendServiceConsistentHashPtrOutput) MinimumRingSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceConsistentHash) *int {
		if v == nil {
			return nil
		}
		return v.MinimumRingSize
	}).(pulumi.IntPtrOutput)
}

type RegionBackendServiceConsistentHashHttpCookie struct {
	// Name of the cookie.
	Name *string `pulumi:"name"`
	// Path to set for the cookie.
	Path *string `pulumi:"path"`
	// Lifetime of the cookie.  Structure is documented below.
	Ttl *RegionBackendServiceConsistentHashHttpCookieTtl `pulumi:"ttl"`
}

// RegionBackendServiceConsistentHashHttpCookieInput is an input type that accepts RegionBackendServiceConsistentHashHttpCookieArgs and RegionBackendServiceConsistentHashHttpCookieOutput values.
// You can construct a concrete instance of `RegionBackendServiceConsistentHashHttpCookieInput` via:
//
// 		 RegionBackendServiceConsistentHashHttpCookieArgs{...}
//
type RegionBackendServiceConsistentHashHttpCookieInput interface {
	pulumi.Input

	ToRegionBackendServiceConsistentHashHttpCookieOutput() RegionBackendServiceConsistentHashHttpCookieOutput
	ToRegionBackendServiceConsistentHashHttpCookieOutputWithContext(context.Context) RegionBackendServiceConsistentHashHttpCookieOutput
}

type RegionBackendServiceConsistentHashHttpCookieArgs struct {
	// Name of the cookie.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path to set for the cookie.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Lifetime of the cookie.  Structure is documented below.
	Ttl RegionBackendServiceConsistentHashHttpCookieTtlPtrInput `pulumi:"ttl"`
}

func (RegionBackendServiceConsistentHashHttpCookieArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceConsistentHashHttpCookie)(nil)).Elem()
}

func (i RegionBackendServiceConsistentHashHttpCookieArgs) ToRegionBackendServiceConsistentHashHttpCookieOutput() RegionBackendServiceConsistentHashHttpCookieOutput {
	return i.ToRegionBackendServiceConsistentHashHttpCookieOutputWithContext(context.Background())
}

func (i RegionBackendServiceConsistentHashHttpCookieArgs) ToRegionBackendServiceConsistentHashHttpCookieOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashHttpCookieOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceConsistentHashHttpCookieOutput)
}

func (i RegionBackendServiceConsistentHashHttpCookieArgs) ToRegionBackendServiceConsistentHashHttpCookiePtrOutput() RegionBackendServiceConsistentHashHttpCookiePtrOutput {
	return i.ToRegionBackendServiceConsistentHashHttpCookiePtrOutputWithContext(context.Background())
}

func (i RegionBackendServiceConsistentHashHttpCookieArgs) ToRegionBackendServiceConsistentHashHttpCookiePtrOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashHttpCookiePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceConsistentHashHttpCookieOutput).ToRegionBackendServiceConsistentHashHttpCookiePtrOutputWithContext(ctx)
}

// RegionBackendServiceConsistentHashHttpCookiePtrInput is an input type that accepts RegionBackendServiceConsistentHashHttpCookieArgs, RegionBackendServiceConsistentHashHttpCookiePtr and RegionBackendServiceConsistentHashHttpCookiePtrOutput values.
// You can construct a concrete instance of `RegionBackendServiceConsistentHashHttpCookiePtrInput` via:
//
// 		 RegionBackendServiceConsistentHashHttpCookieArgs{...}
//
//  or:
//
// 		 nil
//
type RegionBackendServiceConsistentHashHttpCookiePtrInput interface {
	pulumi.Input

	ToRegionBackendServiceConsistentHashHttpCookiePtrOutput() RegionBackendServiceConsistentHashHttpCookiePtrOutput
	ToRegionBackendServiceConsistentHashHttpCookiePtrOutputWithContext(context.Context) RegionBackendServiceConsistentHashHttpCookiePtrOutput
}

type regionBackendServiceConsistentHashHttpCookiePtrType RegionBackendServiceConsistentHashHttpCookieArgs

func RegionBackendServiceConsistentHashHttpCookiePtr(v *RegionBackendServiceConsistentHashHttpCookieArgs) RegionBackendServiceConsistentHashHttpCookiePtrInput {
	return (*regionBackendServiceConsistentHashHttpCookiePtrType)(v)
}

func (*regionBackendServiceConsistentHashHttpCookiePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceConsistentHashHttpCookie)(nil)).Elem()
}

func (i *regionBackendServiceConsistentHashHttpCookiePtrType) ToRegionBackendServiceConsistentHashHttpCookiePtrOutput() RegionBackendServiceConsistentHashHttpCookiePtrOutput {
	return i.ToRegionBackendServiceConsistentHashHttpCookiePtrOutputWithContext(context.Background())
}

func (i *regionBackendServiceConsistentHashHttpCookiePtrType) ToRegionBackendServiceConsistentHashHttpCookiePtrOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashHttpCookiePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceConsistentHashHttpCookiePtrOutput)
}

type RegionBackendServiceConsistentHashHttpCookieOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceConsistentHashHttpCookieOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceConsistentHashHttpCookie)(nil)).Elem()
}

func (o RegionBackendServiceConsistentHashHttpCookieOutput) ToRegionBackendServiceConsistentHashHttpCookieOutput() RegionBackendServiceConsistentHashHttpCookieOutput {
	return o
}

func (o RegionBackendServiceConsistentHashHttpCookieOutput) ToRegionBackendServiceConsistentHashHttpCookieOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashHttpCookieOutput {
	return o
}

func (o RegionBackendServiceConsistentHashHttpCookieOutput) ToRegionBackendServiceConsistentHashHttpCookiePtrOutput() RegionBackendServiceConsistentHashHttpCookiePtrOutput {
	return o.ToRegionBackendServiceConsistentHashHttpCookiePtrOutputWithContext(context.Background())
}

func (o RegionBackendServiceConsistentHashHttpCookieOutput) ToRegionBackendServiceConsistentHashHttpCookiePtrOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashHttpCookiePtrOutput {
	return o.ApplyT(func(v RegionBackendServiceConsistentHashHttpCookie) *RegionBackendServiceConsistentHashHttpCookie {
		return &v
	}).(RegionBackendServiceConsistentHashHttpCookiePtrOutput)
}

// Name of the cookie.
func (o RegionBackendServiceConsistentHashHttpCookieOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceConsistentHashHttpCookie) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path to set for the cookie.
func (o RegionBackendServiceConsistentHashHttpCookieOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceConsistentHashHttpCookie) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Lifetime of the cookie.  Structure is documented below.
func (o RegionBackendServiceConsistentHashHttpCookieOutput) Ttl() RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceConsistentHashHttpCookie) *RegionBackendServiceConsistentHashHttpCookieTtl {
		return v.Ttl
	}).(RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput)
}

type RegionBackendServiceConsistentHashHttpCookiePtrOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceConsistentHashHttpCookiePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceConsistentHashHttpCookie)(nil)).Elem()
}

func (o RegionBackendServiceConsistentHashHttpCookiePtrOutput) ToRegionBackendServiceConsistentHashHttpCookiePtrOutput() RegionBackendServiceConsistentHashHttpCookiePtrOutput {
	return o
}

func (o RegionBackendServiceConsistentHashHttpCookiePtrOutput) ToRegionBackendServiceConsistentHashHttpCookiePtrOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashHttpCookiePtrOutput {
	return o
}

func (o RegionBackendServiceConsistentHashHttpCookiePtrOutput) Elem() RegionBackendServiceConsistentHashHttpCookieOutput {
	return o.ApplyT(func(v *RegionBackendServiceConsistentHashHttpCookie) RegionBackendServiceConsistentHashHttpCookie {
		return *v
	}).(RegionBackendServiceConsistentHashHttpCookieOutput)
}

// Name of the cookie.
func (o RegionBackendServiceConsistentHashHttpCookiePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceConsistentHashHttpCookie) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Path to set for the cookie.
func (o RegionBackendServiceConsistentHashHttpCookiePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceConsistentHashHttpCookie) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Lifetime of the cookie.  Structure is documented below.
func (o RegionBackendServiceConsistentHashHttpCookiePtrOutput) Ttl() RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceConsistentHashHttpCookie) *RegionBackendServiceConsistentHashHttpCookieTtl {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput)
}

type RegionBackendServiceConsistentHashHttpCookieTtl struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds int `pulumi:"seconds"`
}

// RegionBackendServiceConsistentHashHttpCookieTtlInput is an input type that accepts RegionBackendServiceConsistentHashHttpCookieTtlArgs and RegionBackendServiceConsistentHashHttpCookieTtlOutput values.
// You can construct a concrete instance of `RegionBackendServiceConsistentHashHttpCookieTtlInput` via:
//
// 		 RegionBackendServiceConsistentHashHttpCookieTtlArgs{...}
//
type RegionBackendServiceConsistentHashHttpCookieTtlInput interface {
	pulumi.Input

	ToRegionBackendServiceConsistentHashHttpCookieTtlOutput() RegionBackendServiceConsistentHashHttpCookieTtlOutput
	ToRegionBackendServiceConsistentHashHttpCookieTtlOutputWithContext(context.Context) RegionBackendServiceConsistentHashHttpCookieTtlOutput
}

type RegionBackendServiceConsistentHashHttpCookieTtlArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.IntInput `pulumi:"seconds"`
}

func (RegionBackendServiceConsistentHashHttpCookieTtlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceConsistentHashHttpCookieTtl)(nil)).Elem()
}

func (i RegionBackendServiceConsistentHashHttpCookieTtlArgs) ToRegionBackendServiceConsistentHashHttpCookieTtlOutput() RegionBackendServiceConsistentHashHttpCookieTtlOutput {
	return i.ToRegionBackendServiceConsistentHashHttpCookieTtlOutputWithContext(context.Background())
}

func (i RegionBackendServiceConsistentHashHttpCookieTtlArgs) ToRegionBackendServiceConsistentHashHttpCookieTtlOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashHttpCookieTtlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceConsistentHashHttpCookieTtlOutput)
}

func (i RegionBackendServiceConsistentHashHttpCookieTtlArgs) ToRegionBackendServiceConsistentHashHttpCookieTtlPtrOutput() RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return i.ToRegionBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(context.Background())
}

func (i RegionBackendServiceConsistentHashHttpCookieTtlArgs) ToRegionBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceConsistentHashHttpCookieTtlOutput).ToRegionBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(ctx)
}

// RegionBackendServiceConsistentHashHttpCookieTtlPtrInput is an input type that accepts RegionBackendServiceConsistentHashHttpCookieTtlArgs, RegionBackendServiceConsistentHashHttpCookieTtlPtr and RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput values.
// You can construct a concrete instance of `RegionBackendServiceConsistentHashHttpCookieTtlPtrInput` via:
//
// 		 RegionBackendServiceConsistentHashHttpCookieTtlArgs{...}
//
//  or:
//
// 		 nil
//
type RegionBackendServiceConsistentHashHttpCookieTtlPtrInput interface {
	pulumi.Input

	ToRegionBackendServiceConsistentHashHttpCookieTtlPtrOutput() RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput
	ToRegionBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(context.Context) RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput
}

type regionBackendServiceConsistentHashHttpCookieTtlPtrType RegionBackendServiceConsistentHashHttpCookieTtlArgs

func RegionBackendServiceConsistentHashHttpCookieTtlPtr(v *RegionBackendServiceConsistentHashHttpCookieTtlArgs) RegionBackendServiceConsistentHashHttpCookieTtlPtrInput {
	return (*regionBackendServiceConsistentHashHttpCookieTtlPtrType)(v)
}

func (*regionBackendServiceConsistentHashHttpCookieTtlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceConsistentHashHttpCookieTtl)(nil)).Elem()
}

func (i *regionBackendServiceConsistentHashHttpCookieTtlPtrType) ToRegionBackendServiceConsistentHashHttpCookieTtlPtrOutput() RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return i.ToRegionBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(context.Background())
}

func (i *regionBackendServiceConsistentHashHttpCookieTtlPtrType) ToRegionBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput)
}

type RegionBackendServiceConsistentHashHttpCookieTtlOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceConsistentHashHttpCookieTtlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceConsistentHashHttpCookieTtl)(nil)).Elem()
}

func (o RegionBackendServiceConsistentHashHttpCookieTtlOutput) ToRegionBackendServiceConsistentHashHttpCookieTtlOutput() RegionBackendServiceConsistentHashHttpCookieTtlOutput {
	return o
}

func (o RegionBackendServiceConsistentHashHttpCookieTtlOutput) ToRegionBackendServiceConsistentHashHttpCookieTtlOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashHttpCookieTtlOutput {
	return o
}

func (o RegionBackendServiceConsistentHashHttpCookieTtlOutput) ToRegionBackendServiceConsistentHashHttpCookieTtlPtrOutput() RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return o.ToRegionBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(context.Background())
}

func (o RegionBackendServiceConsistentHashHttpCookieTtlOutput) ToRegionBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceConsistentHashHttpCookieTtl) *RegionBackendServiceConsistentHashHttpCookieTtl {
		return &v
	}).(RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionBackendServiceConsistentHashHttpCookieTtlOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceConsistentHashHttpCookieTtl) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionBackendServiceConsistentHashHttpCookieTtlOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v RegionBackendServiceConsistentHashHttpCookieTtl) int { return v.Seconds }).(pulumi.IntOutput)
}

type RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceConsistentHashHttpCookieTtl)(nil)).Elem()
}

func (o RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput) ToRegionBackendServiceConsistentHashHttpCookieTtlPtrOutput() RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return o
}

func (o RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput) ToRegionBackendServiceConsistentHashHttpCookieTtlPtrOutputWithContext(ctx context.Context) RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput {
	return o
}

func (o RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput) Elem() RegionBackendServiceConsistentHashHttpCookieTtlOutput {
	return o.ApplyT(func(v *RegionBackendServiceConsistentHashHttpCookieTtl) RegionBackendServiceConsistentHashHttpCookieTtl {
		return *v
	}).(RegionBackendServiceConsistentHashHttpCookieTtlOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceConsistentHashHttpCookieTtl) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceConsistentHashHttpCookieTtl) *int {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.IntPtrOutput)
}

type RegionBackendServiceFailoverPolicy struct {
	// On failover or failback, this field indicates whether connection drain
	// will be honored. Setting this to true has the following effect: connections
	// to the old active pool are not drained. Connections to the new active pool
	// use the timeout of 10 min (currently fixed). Setting to false has the
	// following effect: both old and new connections will have a drain timeout
	// of 10 min.
	// This can be set to true only if the protocol is TCP.
	// The default is false.
	DisableConnectionDrainOnFailover *bool `pulumi:"disableConnectionDrainOnFailover"`
	// This option is used only when no healthy VMs are detected in the primary
	// and backup instance groups. When set to true, traffic is dropped. When
	// set to false, new connections are sent across all VMs in the primary group.
	// The default is false.
	DropTrafficIfUnhealthy *bool `pulumi:"dropTrafficIfUnhealthy"`
	// The value of the field must be in [0, 1]. If the ratio of the healthy
	// VMs in the primary backend is at or below this number, traffic arriving
	// at the load-balanced IP will be directed to the failover backend.
	// In case where 'failoverRatio' is not set or all the VMs in the backup
	// backend are unhealthy, the traffic will be directed back to the primary
	// backend in the "force" mode, where traffic will be spread to the healthy
	// VMs with the best effort, or to all VMs when no VM is healthy.
	// This field is only used with l4 load balancing.
	FailoverRatio *float64 `pulumi:"failoverRatio"`
}

// RegionBackendServiceFailoverPolicyInput is an input type that accepts RegionBackendServiceFailoverPolicyArgs and RegionBackendServiceFailoverPolicyOutput values.
// You can construct a concrete instance of `RegionBackendServiceFailoverPolicyInput` via:
//
// 		 RegionBackendServiceFailoverPolicyArgs{...}
//
type RegionBackendServiceFailoverPolicyInput interface {
	pulumi.Input

	ToRegionBackendServiceFailoverPolicyOutput() RegionBackendServiceFailoverPolicyOutput
	ToRegionBackendServiceFailoverPolicyOutputWithContext(context.Context) RegionBackendServiceFailoverPolicyOutput
}

type RegionBackendServiceFailoverPolicyArgs struct {
	// On failover or failback, this field indicates whether connection drain
	// will be honored. Setting this to true has the following effect: connections
	// to the old active pool are not drained. Connections to the new active pool
	// use the timeout of 10 min (currently fixed). Setting to false has the
	// following effect: both old and new connections will have a drain timeout
	// of 10 min.
	// This can be set to true only if the protocol is TCP.
	// The default is false.
	DisableConnectionDrainOnFailover pulumi.BoolPtrInput `pulumi:"disableConnectionDrainOnFailover"`
	// This option is used only when no healthy VMs are detected in the primary
	// and backup instance groups. When set to true, traffic is dropped. When
	// set to false, new connections are sent across all VMs in the primary group.
	// The default is false.
	DropTrafficIfUnhealthy pulumi.BoolPtrInput `pulumi:"dropTrafficIfUnhealthy"`
	// The value of the field must be in [0, 1]. If the ratio of the healthy
	// VMs in the primary backend is at or below this number, traffic arriving
	// at the load-balanced IP will be directed to the failover backend.
	// In case where 'failoverRatio' is not set or all the VMs in the backup
	// backend are unhealthy, the traffic will be directed back to the primary
	// backend in the "force" mode, where traffic will be spread to the healthy
	// VMs with the best effort, or to all VMs when no VM is healthy.
	// This field is only used with l4 load balancing.
	FailoverRatio pulumi.Float64PtrInput `pulumi:"failoverRatio"`
}

func (RegionBackendServiceFailoverPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceFailoverPolicy)(nil)).Elem()
}

func (i RegionBackendServiceFailoverPolicyArgs) ToRegionBackendServiceFailoverPolicyOutput() RegionBackendServiceFailoverPolicyOutput {
	return i.ToRegionBackendServiceFailoverPolicyOutputWithContext(context.Background())
}

func (i RegionBackendServiceFailoverPolicyArgs) ToRegionBackendServiceFailoverPolicyOutputWithContext(ctx context.Context) RegionBackendServiceFailoverPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceFailoverPolicyOutput)
}

func (i RegionBackendServiceFailoverPolicyArgs) ToRegionBackendServiceFailoverPolicyPtrOutput() RegionBackendServiceFailoverPolicyPtrOutput {
	return i.ToRegionBackendServiceFailoverPolicyPtrOutputWithContext(context.Background())
}

func (i RegionBackendServiceFailoverPolicyArgs) ToRegionBackendServiceFailoverPolicyPtrOutputWithContext(ctx context.Context) RegionBackendServiceFailoverPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceFailoverPolicyOutput).ToRegionBackendServiceFailoverPolicyPtrOutputWithContext(ctx)
}

// RegionBackendServiceFailoverPolicyPtrInput is an input type that accepts RegionBackendServiceFailoverPolicyArgs, RegionBackendServiceFailoverPolicyPtr and RegionBackendServiceFailoverPolicyPtrOutput values.
// You can construct a concrete instance of `RegionBackendServiceFailoverPolicyPtrInput` via:
//
// 		 RegionBackendServiceFailoverPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type RegionBackendServiceFailoverPolicyPtrInput interface {
	pulumi.Input

	ToRegionBackendServiceFailoverPolicyPtrOutput() RegionBackendServiceFailoverPolicyPtrOutput
	ToRegionBackendServiceFailoverPolicyPtrOutputWithContext(context.Context) RegionBackendServiceFailoverPolicyPtrOutput
}

type regionBackendServiceFailoverPolicyPtrType RegionBackendServiceFailoverPolicyArgs

func RegionBackendServiceFailoverPolicyPtr(v *RegionBackendServiceFailoverPolicyArgs) RegionBackendServiceFailoverPolicyPtrInput {
	return (*regionBackendServiceFailoverPolicyPtrType)(v)
}

func (*regionBackendServiceFailoverPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceFailoverPolicy)(nil)).Elem()
}

func (i *regionBackendServiceFailoverPolicyPtrType) ToRegionBackendServiceFailoverPolicyPtrOutput() RegionBackendServiceFailoverPolicyPtrOutput {
	return i.ToRegionBackendServiceFailoverPolicyPtrOutputWithContext(context.Background())
}

func (i *regionBackendServiceFailoverPolicyPtrType) ToRegionBackendServiceFailoverPolicyPtrOutputWithContext(ctx context.Context) RegionBackendServiceFailoverPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceFailoverPolicyPtrOutput)
}

type RegionBackendServiceFailoverPolicyOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceFailoverPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceFailoverPolicy)(nil)).Elem()
}

func (o RegionBackendServiceFailoverPolicyOutput) ToRegionBackendServiceFailoverPolicyOutput() RegionBackendServiceFailoverPolicyOutput {
	return o
}

func (o RegionBackendServiceFailoverPolicyOutput) ToRegionBackendServiceFailoverPolicyOutputWithContext(ctx context.Context) RegionBackendServiceFailoverPolicyOutput {
	return o
}

func (o RegionBackendServiceFailoverPolicyOutput) ToRegionBackendServiceFailoverPolicyPtrOutput() RegionBackendServiceFailoverPolicyPtrOutput {
	return o.ToRegionBackendServiceFailoverPolicyPtrOutputWithContext(context.Background())
}

func (o RegionBackendServiceFailoverPolicyOutput) ToRegionBackendServiceFailoverPolicyPtrOutputWithContext(ctx context.Context) RegionBackendServiceFailoverPolicyPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceFailoverPolicy) *RegionBackendServiceFailoverPolicy {
		return &v
	}).(RegionBackendServiceFailoverPolicyPtrOutput)
}

// On failover or failback, this field indicates whether connection drain
// will be honored. Setting this to true has the following effect: connections
// to the old active pool are not drained. Connections to the new active pool
// use the timeout of 10 min (currently fixed). Setting to false has the
// following effect: both old and new connections will have a drain timeout
// of 10 min.
// This can be set to true only if the protocol is TCP.
// The default is false.
func (o RegionBackendServiceFailoverPolicyOutput) DisableConnectionDrainOnFailover() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceFailoverPolicy) *bool { return v.DisableConnectionDrainOnFailover }).(pulumi.BoolPtrOutput)
}

// This option is used only when no healthy VMs are detected in the primary
// and backup instance groups. When set to true, traffic is dropped. When
// set to false, new connections are sent across all VMs in the primary group.
// The default is false.
func (o RegionBackendServiceFailoverPolicyOutput) DropTrafficIfUnhealthy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceFailoverPolicy) *bool { return v.DropTrafficIfUnhealthy }).(pulumi.BoolPtrOutput)
}

// The value of the field must be in [0, 1]. If the ratio of the healthy
// VMs in the primary backend is at or below this number, traffic arriving
// at the load-balanced IP will be directed to the failover backend.
// In case where 'failoverRatio' is not set or all the VMs in the backup
// backend are unhealthy, the traffic will be directed back to the primary
// backend in the "force" mode, where traffic will be spread to the healthy
// VMs with the best effort, or to all VMs when no VM is healthy.
// This field is only used with l4 load balancing.
func (o RegionBackendServiceFailoverPolicyOutput) FailoverRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RegionBackendServiceFailoverPolicy) *float64 { return v.FailoverRatio }).(pulumi.Float64PtrOutput)
}

type RegionBackendServiceFailoverPolicyPtrOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceFailoverPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceFailoverPolicy)(nil)).Elem()
}

func (o RegionBackendServiceFailoverPolicyPtrOutput) ToRegionBackendServiceFailoverPolicyPtrOutput() RegionBackendServiceFailoverPolicyPtrOutput {
	return o
}

func (o RegionBackendServiceFailoverPolicyPtrOutput) ToRegionBackendServiceFailoverPolicyPtrOutputWithContext(ctx context.Context) RegionBackendServiceFailoverPolicyPtrOutput {
	return o
}

func (o RegionBackendServiceFailoverPolicyPtrOutput) Elem() RegionBackendServiceFailoverPolicyOutput {
	return o.ApplyT(func(v *RegionBackendServiceFailoverPolicy) RegionBackendServiceFailoverPolicy { return *v }).(RegionBackendServiceFailoverPolicyOutput)
}

// On failover or failback, this field indicates whether connection drain
// will be honored. Setting this to true has the following effect: connections
// to the old active pool are not drained. Connections to the new active pool
// use the timeout of 10 min (currently fixed). Setting to false has the
// following effect: both old and new connections will have a drain timeout
// of 10 min.
// This can be set to true only if the protocol is TCP.
// The default is false.
func (o RegionBackendServiceFailoverPolicyPtrOutput) DisableConnectionDrainOnFailover() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceFailoverPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.DisableConnectionDrainOnFailover
	}).(pulumi.BoolPtrOutput)
}

// This option is used only when no healthy VMs are detected in the primary
// and backup instance groups. When set to true, traffic is dropped. When
// set to false, new connections are sent across all VMs in the primary group.
// The default is false.
func (o RegionBackendServiceFailoverPolicyPtrOutput) DropTrafficIfUnhealthy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceFailoverPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.DropTrafficIfUnhealthy
	}).(pulumi.BoolPtrOutput)
}

// The value of the field must be in [0, 1]. If the ratio of the healthy
// VMs in the primary backend is at or below this number, traffic arriving
// at the load-balanced IP will be directed to the failover backend.
// In case where 'failoverRatio' is not set or all the VMs in the backup
// backend are unhealthy, the traffic will be directed back to the primary
// backend in the "force" mode, where traffic will be spread to the healthy
// VMs with the best effort, or to all VMs when no VM is healthy.
// This field is only used with l4 load balancing.
func (o RegionBackendServiceFailoverPolicyPtrOutput) FailoverRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceFailoverPolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.FailoverRatio
	}).(pulumi.Float64PtrOutput)
}

type RegionBackendServiceLogConfig struct {
	// Whether to enable logging for the load balancer traffic served by this backend service.
	Enable *bool `pulumi:"enable"`
	// This field can only be specified if logging is enabled for this backend service. The value of
	// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
	// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
	// The default value is 1.0.
	SampleRate *float64 `pulumi:"sampleRate"`
}

// RegionBackendServiceLogConfigInput is an input type that accepts RegionBackendServiceLogConfigArgs and RegionBackendServiceLogConfigOutput values.
// You can construct a concrete instance of `RegionBackendServiceLogConfigInput` via:
//
// 		 RegionBackendServiceLogConfigArgs{...}
//
type RegionBackendServiceLogConfigInput interface {
	pulumi.Input

	ToRegionBackendServiceLogConfigOutput() RegionBackendServiceLogConfigOutput
	ToRegionBackendServiceLogConfigOutputWithContext(context.Context) RegionBackendServiceLogConfigOutput
}

type RegionBackendServiceLogConfigArgs struct {
	// Whether to enable logging for the load balancer traffic served by this backend service.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// This field can only be specified if logging is enabled for this backend service. The value of
	// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
	// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
	// The default value is 1.0.
	SampleRate pulumi.Float64PtrInput `pulumi:"sampleRate"`
}

func (RegionBackendServiceLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceLogConfig)(nil)).Elem()
}

func (i RegionBackendServiceLogConfigArgs) ToRegionBackendServiceLogConfigOutput() RegionBackendServiceLogConfigOutput {
	return i.ToRegionBackendServiceLogConfigOutputWithContext(context.Background())
}

func (i RegionBackendServiceLogConfigArgs) ToRegionBackendServiceLogConfigOutputWithContext(ctx context.Context) RegionBackendServiceLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceLogConfigOutput)
}

func (i RegionBackendServiceLogConfigArgs) ToRegionBackendServiceLogConfigPtrOutput() RegionBackendServiceLogConfigPtrOutput {
	return i.ToRegionBackendServiceLogConfigPtrOutputWithContext(context.Background())
}

func (i RegionBackendServiceLogConfigArgs) ToRegionBackendServiceLogConfigPtrOutputWithContext(ctx context.Context) RegionBackendServiceLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceLogConfigOutput).ToRegionBackendServiceLogConfigPtrOutputWithContext(ctx)
}

// RegionBackendServiceLogConfigPtrInput is an input type that accepts RegionBackendServiceLogConfigArgs, RegionBackendServiceLogConfigPtr and RegionBackendServiceLogConfigPtrOutput values.
// You can construct a concrete instance of `RegionBackendServiceLogConfigPtrInput` via:
//
// 		 RegionBackendServiceLogConfigArgs{...}
//
//  or:
//
// 		 nil
//
type RegionBackendServiceLogConfigPtrInput interface {
	pulumi.Input

	ToRegionBackendServiceLogConfigPtrOutput() RegionBackendServiceLogConfigPtrOutput
	ToRegionBackendServiceLogConfigPtrOutputWithContext(context.Context) RegionBackendServiceLogConfigPtrOutput
}

type regionBackendServiceLogConfigPtrType RegionBackendServiceLogConfigArgs

func RegionBackendServiceLogConfigPtr(v *RegionBackendServiceLogConfigArgs) RegionBackendServiceLogConfigPtrInput {
	return (*regionBackendServiceLogConfigPtrType)(v)
}

func (*regionBackendServiceLogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceLogConfig)(nil)).Elem()
}

func (i *regionBackendServiceLogConfigPtrType) ToRegionBackendServiceLogConfigPtrOutput() RegionBackendServiceLogConfigPtrOutput {
	return i.ToRegionBackendServiceLogConfigPtrOutputWithContext(context.Background())
}

func (i *regionBackendServiceLogConfigPtrType) ToRegionBackendServiceLogConfigPtrOutputWithContext(ctx context.Context) RegionBackendServiceLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceLogConfigPtrOutput)
}

type RegionBackendServiceLogConfigOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceLogConfig)(nil)).Elem()
}

func (o RegionBackendServiceLogConfigOutput) ToRegionBackendServiceLogConfigOutput() RegionBackendServiceLogConfigOutput {
	return o
}

func (o RegionBackendServiceLogConfigOutput) ToRegionBackendServiceLogConfigOutputWithContext(ctx context.Context) RegionBackendServiceLogConfigOutput {
	return o
}

func (o RegionBackendServiceLogConfigOutput) ToRegionBackendServiceLogConfigPtrOutput() RegionBackendServiceLogConfigPtrOutput {
	return o.ToRegionBackendServiceLogConfigPtrOutputWithContext(context.Background())
}

func (o RegionBackendServiceLogConfigOutput) ToRegionBackendServiceLogConfigPtrOutputWithContext(ctx context.Context) RegionBackendServiceLogConfigPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceLogConfig) *RegionBackendServiceLogConfig {
		return &v
	}).(RegionBackendServiceLogConfigPtrOutput)
}

// Whether to enable logging for the load balancer traffic served by this backend service.
func (o RegionBackendServiceLogConfigOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceLogConfig) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// This field can only be specified if logging is enabled for this backend service. The value of
// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
// The default value is 1.0.
func (o RegionBackendServiceLogConfigOutput) SampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RegionBackendServiceLogConfig) *float64 { return v.SampleRate }).(pulumi.Float64PtrOutput)
}

type RegionBackendServiceLogConfigPtrOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceLogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceLogConfig)(nil)).Elem()
}

func (o RegionBackendServiceLogConfigPtrOutput) ToRegionBackendServiceLogConfigPtrOutput() RegionBackendServiceLogConfigPtrOutput {
	return o
}

func (o RegionBackendServiceLogConfigPtrOutput) ToRegionBackendServiceLogConfigPtrOutputWithContext(ctx context.Context) RegionBackendServiceLogConfigPtrOutput {
	return o
}

func (o RegionBackendServiceLogConfigPtrOutput) Elem() RegionBackendServiceLogConfigOutput {
	return o.ApplyT(func(v *RegionBackendServiceLogConfig) RegionBackendServiceLogConfig { return *v }).(RegionBackendServiceLogConfigOutput)
}

// Whether to enable logging for the load balancer traffic served by this backend service.
func (o RegionBackendServiceLogConfigPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceLogConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// This field can only be specified if logging is enabled for this backend service. The value of
// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
// The default value is 1.0.
func (o RegionBackendServiceLogConfigPtrOutput) SampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceLogConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.SampleRate
	}).(pulumi.Float64PtrOutput)
}

type RegionBackendServiceOutlierDetection struct {
	// The base time that a host is ejected for. The real time is equal to the base
	// time multiplied by the number of times the host has been ejected. Defaults to
	// 30000ms or 30s.  Structure is documented below.
	BaseEjectionTime *RegionBackendServiceOutlierDetectionBaseEjectionTime `pulumi:"baseEjectionTime"`
	// Number of errors before a host is ejected from the connection pool. When the
	// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
	// Defaults to 5.
	ConsecutiveErrors *int `pulumi:"consecutiveErrors"`
	// The number of consecutive gateway failures (502, 503, 504 status or connection
	// errors that are mapped to one of those status codes) before a consecutive
	// gateway failure ejection occurs. Defaults to 5.
	ConsecutiveGatewayFailure *int `pulumi:"consecutiveGatewayFailure"`
	// The percentage chance that a host will be actually ejected when an outlier
	// status is detected through consecutive 5xx. This setting can be used to disable
	// ejection or to ramp it up slowly. Defaults to 100.
	EnforcingConsecutiveErrors *int `pulumi:"enforcingConsecutiveErrors"`
	// The percentage chance that a host will be actually ejected when an outlier
	// status is detected through consecutive gateway failures. This setting can be
	// used to disable ejection or to ramp it up slowly. Defaults to 0.
	EnforcingConsecutiveGatewayFailure *int `pulumi:"enforcingConsecutiveGatewayFailure"`
	// The percentage chance that a host will be actually ejected when an outlier
	// status is detected through success rate statistics. This setting can be used to
	// disable ejection or to ramp it up slowly. Defaults to 100.
	EnforcingSuccessRate *int `pulumi:"enforcingSuccessRate"`
	// Time interval between ejection sweep analysis. This can result in both new
	// ejections as well as hosts being returned to service. Defaults to 10 seconds.  Structure is documented below.
	Interval *RegionBackendServiceOutlierDetectionInterval `pulumi:"interval"`
	// Maximum percentage of hosts in the load balancing pool for the backend service
	// that can be ejected. Defaults to 10%.
	MaxEjectionPercent *int `pulumi:"maxEjectionPercent"`
	// The number of hosts in a cluster that must have enough request volume to detect
	// success rate outliers. If the number of hosts is less than this setting, outlier
	// detection via success rate statistics is not performed for any host in the
	// cluster. Defaults to 5.
	SuccessRateMinimumHosts *int `pulumi:"successRateMinimumHosts"`
	// The minimum number of total requests that must be collected in one interval (as
	// defined by the interval duration above) to include this host in success rate
	// based outlier detection. If the volume is lower than this setting, outlier
	// detection via success rate statistics is not performed for that host. Defaults
	// to 100.
	SuccessRateRequestVolume *int `pulumi:"successRateRequestVolume"`
	// This factor is used to determine the ejection threshold for success rate outlier
	// ejection. The ejection threshold is the difference between the mean success
	// rate, and the product of this factor and the standard deviation of the mean
	// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
	// by a thousand to get a double. That is, if the desired factor is 1.9, the
	// runtime value should be 1900. Defaults to 1900.
	SuccessRateStdevFactor *int `pulumi:"successRateStdevFactor"`
}

// RegionBackendServiceOutlierDetectionInput is an input type that accepts RegionBackendServiceOutlierDetectionArgs and RegionBackendServiceOutlierDetectionOutput values.
// You can construct a concrete instance of `RegionBackendServiceOutlierDetectionInput` via:
//
// 		 RegionBackendServiceOutlierDetectionArgs{...}
//
type RegionBackendServiceOutlierDetectionInput interface {
	pulumi.Input

	ToRegionBackendServiceOutlierDetectionOutput() RegionBackendServiceOutlierDetectionOutput
	ToRegionBackendServiceOutlierDetectionOutputWithContext(context.Context) RegionBackendServiceOutlierDetectionOutput
}

type RegionBackendServiceOutlierDetectionArgs struct {
	// The base time that a host is ejected for. The real time is equal to the base
	// time multiplied by the number of times the host has been ejected. Defaults to
	// 30000ms or 30s.  Structure is documented below.
	BaseEjectionTime RegionBackendServiceOutlierDetectionBaseEjectionTimePtrInput `pulumi:"baseEjectionTime"`
	// Number of errors before a host is ejected from the connection pool. When the
	// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
	// Defaults to 5.
	ConsecutiveErrors pulumi.IntPtrInput `pulumi:"consecutiveErrors"`
	// The number of consecutive gateway failures (502, 503, 504 status or connection
	// errors that are mapped to one of those status codes) before a consecutive
	// gateway failure ejection occurs. Defaults to 5.
	ConsecutiveGatewayFailure pulumi.IntPtrInput `pulumi:"consecutiveGatewayFailure"`
	// The percentage chance that a host will be actually ejected when an outlier
	// status is detected through consecutive 5xx. This setting can be used to disable
	// ejection or to ramp it up slowly. Defaults to 100.
	EnforcingConsecutiveErrors pulumi.IntPtrInput `pulumi:"enforcingConsecutiveErrors"`
	// The percentage chance that a host will be actually ejected when an outlier
	// status is detected through consecutive gateway failures. This setting can be
	// used to disable ejection or to ramp it up slowly. Defaults to 0.
	EnforcingConsecutiveGatewayFailure pulumi.IntPtrInput `pulumi:"enforcingConsecutiveGatewayFailure"`
	// The percentage chance that a host will be actually ejected when an outlier
	// status is detected through success rate statistics. This setting can be used to
	// disable ejection or to ramp it up slowly. Defaults to 100.
	EnforcingSuccessRate pulumi.IntPtrInput `pulumi:"enforcingSuccessRate"`
	// Time interval between ejection sweep analysis. This can result in both new
	// ejections as well as hosts being returned to service. Defaults to 10 seconds.  Structure is documented below.
	Interval RegionBackendServiceOutlierDetectionIntervalPtrInput `pulumi:"interval"`
	// Maximum percentage of hosts in the load balancing pool for the backend service
	// that can be ejected. Defaults to 10%.
	MaxEjectionPercent pulumi.IntPtrInput `pulumi:"maxEjectionPercent"`
	// The number of hosts in a cluster that must have enough request volume to detect
	// success rate outliers. If the number of hosts is less than this setting, outlier
	// detection via success rate statistics is not performed for any host in the
	// cluster. Defaults to 5.
	SuccessRateMinimumHosts pulumi.IntPtrInput `pulumi:"successRateMinimumHosts"`
	// The minimum number of total requests that must be collected in one interval (as
	// defined by the interval duration above) to include this host in success rate
	// based outlier detection. If the volume is lower than this setting, outlier
	// detection via success rate statistics is not performed for that host. Defaults
	// to 100.
	SuccessRateRequestVolume pulumi.IntPtrInput `pulumi:"successRateRequestVolume"`
	// This factor is used to determine the ejection threshold for success rate outlier
	// ejection. The ejection threshold is the difference between the mean success
	// rate, and the product of this factor and the standard deviation of the mean
	// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
	// by a thousand to get a double. That is, if the desired factor is 1.9, the
	// runtime value should be 1900. Defaults to 1900.
	SuccessRateStdevFactor pulumi.IntPtrInput `pulumi:"successRateStdevFactor"`
}

func (RegionBackendServiceOutlierDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceOutlierDetection)(nil)).Elem()
}

func (i RegionBackendServiceOutlierDetectionArgs) ToRegionBackendServiceOutlierDetectionOutput() RegionBackendServiceOutlierDetectionOutput {
	return i.ToRegionBackendServiceOutlierDetectionOutputWithContext(context.Background())
}

func (i RegionBackendServiceOutlierDetectionArgs) ToRegionBackendServiceOutlierDetectionOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceOutlierDetectionOutput)
}

func (i RegionBackendServiceOutlierDetectionArgs) ToRegionBackendServiceOutlierDetectionPtrOutput() RegionBackendServiceOutlierDetectionPtrOutput {
	return i.ToRegionBackendServiceOutlierDetectionPtrOutputWithContext(context.Background())
}

func (i RegionBackendServiceOutlierDetectionArgs) ToRegionBackendServiceOutlierDetectionPtrOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceOutlierDetectionOutput).ToRegionBackendServiceOutlierDetectionPtrOutputWithContext(ctx)
}

// RegionBackendServiceOutlierDetectionPtrInput is an input type that accepts RegionBackendServiceOutlierDetectionArgs, RegionBackendServiceOutlierDetectionPtr and RegionBackendServiceOutlierDetectionPtrOutput values.
// You can construct a concrete instance of `RegionBackendServiceOutlierDetectionPtrInput` via:
//
// 		 RegionBackendServiceOutlierDetectionArgs{...}
//
//  or:
//
// 		 nil
//
type RegionBackendServiceOutlierDetectionPtrInput interface {
	pulumi.Input

	ToRegionBackendServiceOutlierDetectionPtrOutput() RegionBackendServiceOutlierDetectionPtrOutput
	ToRegionBackendServiceOutlierDetectionPtrOutputWithContext(context.Context) RegionBackendServiceOutlierDetectionPtrOutput
}

type regionBackendServiceOutlierDetectionPtrType RegionBackendServiceOutlierDetectionArgs

func RegionBackendServiceOutlierDetectionPtr(v *RegionBackendServiceOutlierDetectionArgs) RegionBackendServiceOutlierDetectionPtrInput {
	return (*regionBackendServiceOutlierDetectionPtrType)(v)
}

func (*regionBackendServiceOutlierDetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceOutlierDetection)(nil)).Elem()
}

func (i *regionBackendServiceOutlierDetectionPtrType) ToRegionBackendServiceOutlierDetectionPtrOutput() RegionBackendServiceOutlierDetectionPtrOutput {
	return i.ToRegionBackendServiceOutlierDetectionPtrOutputWithContext(context.Background())
}

func (i *regionBackendServiceOutlierDetectionPtrType) ToRegionBackendServiceOutlierDetectionPtrOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceOutlierDetectionPtrOutput)
}

type RegionBackendServiceOutlierDetectionOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceOutlierDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceOutlierDetection)(nil)).Elem()
}

func (o RegionBackendServiceOutlierDetectionOutput) ToRegionBackendServiceOutlierDetectionOutput() RegionBackendServiceOutlierDetectionOutput {
	return o
}

func (o RegionBackendServiceOutlierDetectionOutput) ToRegionBackendServiceOutlierDetectionOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionOutput {
	return o
}

func (o RegionBackendServiceOutlierDetectionOutput) ToRegionBackendServiceOutlierDetectionPtrOutput() RegionBackendServiceOutlierDetectionPtrOutput {
	return o.ToRegionBackendServiceOutlierDetectionPtrOutputWithContext(context.Background())
}

func (o RegionBackendServiceOutlierDetectionOutput) ToRegionBackendServiceOutlierDetectionPtrOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetection) *RegionBackendServiceOutlierDetection {
		return &v
	}).(RegionBackendServiceOutlierDetectionPtrOutput)
}

// The base time that a host is ejected for. The real time is equal to the base
// time multiplied by the number of times the host has been ejected. Defaults to
// 30000ms or 30s.  Structure is documented below.
func (o RegionBackendServiceOutlierDetectionOutput) BaseEjectionTime() RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetection) *RegionBackendServiceOutlierDetectionBaseEjectionTime {
		return v.BaseEjectionTime
	}).(RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput)
}

// Number of errors before a host is ejected from the connection pool. When the
// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
// Defaults to 5.
func (o RegionBackendServiceOutlierDetectionOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetection) *int { return v.ConsecutiveErrors }).(pulumi.IntPtrOutput)
}

// The number of consecutive gateway failures (502, 503, 504 status or connection
// errors that are mapped to one of those status codes) before a consecutive
// gateway failure ejection occurs. Defaults to 5.
func (o RegionBackendServiceOutlierDetectionOutput) ConsecutiveGatewayFailure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetection) *int { return v.ConsecutiveGatewayFailure }).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier
// status is detected through consecutive 5xx. This setting can be used to disable
// ejection or to ramp it up slowly. Defaults to 100.
func (o RegionBackendServiceOutlierDetectionOutput) EnforcingConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetection) *int { return v.EnforcingConsecutiveErrors }).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier
// status is detected through consecutive gateway failures. This setting can be
// used to disable ejection or to ramp it up slowly. Defaults to 0.
func (o RegionBackendServiceOutlierDetectionOutput) EnforcingConsecutiveGatewayFailure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetection) *int { return v.EnforcingConsecutiveGatewayFailure }).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier
// status is detected through success rate statistics. This setting can be used to
// disable ejection or to ramp it up slowly. Defaults to 100.
func (o RegionBackendServiceOutlierDetectionOutput) EnforcingSuccessRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetection) *int { return v.EnforcingSuccessRate }).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis. This can result in both new
// ejections as well as hosts being returned to service. Defaults to 10 seconds.  Structure is documented below.
func (o RegionBackendServiceOutlierDetectionOutput) Interval() RegionBackendServiceOutlierDetectionIntervalPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetection) *RegionBackendServiceOutlierDetectionInterval {
		return v.Interval
	}).(RegionBackendServiceOutlierDetectionIntervalPtrOutput)
}

// Maximum percentage of hosts in the load balancing pool for the backend service
// that can be ejected. Defaults to 10%.
func (o RegionBackendServiceOutlierDetectionOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetection) *int { return v.MaxEjectionPercent }).(pulumi.IntPtrOutput)
}

// The number of hosts in a cluster that must have enough request volume to detect
// success rate outliers. If the number of hosts is less than this setting, outlier
// detection via success rate statistics is not performed for any host in the
// cluster. Defaults to 5.
func (o RegionBackendServiceOutlierDetectionOutput) SuccessRateMinimumHosts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetection) *int { return v.SuccessRateMinimumHosts }).(pulumi.IntPtrOutput)
}

// The minimum number of total requests that must be collected in one interval (as
// defined by the interval duration above) to include this host in success rate
// based outlier detection. If the volume is lower than this setting, outlier
// detection via success rate statistics is not performed for that host. Defaults
// to 100.
func (o RegionBackendServiceOutlierDetectionOutput) SuccessRateRequestVolume() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetection) *int { return v.SuccessRateRequestVolume }).(pulumi.IntPtrOutput)
}

// This factor is used to determine the ejection threshold for success rate outlier
// ejection. The ejection threshold is the difference between the mean success
// rate, and the product of this factor and the standard deviation of the mean
// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
// by a thousand to get a double. That is, if the desired factor is 1.9, the
// runtime value should be 1900. Defaults to 1900.
func (o RegionBackendServiceOutlierDetectionOutput) SuccessRateStdevFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetection) *int { return v.SuccessRateStdevFactor }).(pulumi.IntPtrOutput)
}

type RegionBackendServiceOutlierDetectionPtrOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceOutlierDetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceOutlierDetection)(nil)).Elem()
}

func (o RegionBackendServiceOutlierDetectionPtrOutput) ToRegionBackendServiceOutlierDetectionPtrOutput() RegionBackendServiceOutlierDetectionPtrOutput {
	return o
}

func (o RegionBackendServiceOutlierDetectionPtrOutput) ToRegionBackendServiceOutlierDetectionPtrOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionPtrOutput {
	return o
}

func (o RegionBackendServiceOutlierDetectionPtrOutput) Elem() RegionBackendServiceOutlierDetectionOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetection) RegionBackendServiceOutlierDetection { return *v }).(RegionBackendServiceOutlierDetectionOutput)
}

// The base time that a host is ejected for. The real time is equal to the base
// time multiplied by the number of times the host has been ejected. Defaults to
// 30000ms or 30s.  Structure is documented below.
func (o RegionBackendServiceOutlierDetectionPtrOutput) BaseEjectionTime() RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetection) *RegionBackendServiceOutlierDetectionBaseEjectionTime {
		if v == nil {
			return nil
		}
		return v.BaseEjectionTime
	}).(RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput)
}

// Number of errors before a host is ejected from the connection pool. When the
// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
// Defaults to 5.
func (o RegionBackendServiceOutlierDetectionPtrOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// The number of consecutive gateway failures (502, 503, 504 status or connection
// errors that are mapped to one of those status codes) before a consecutive
// gateway failure ejection occurs. Defaults to 5.
func (o RegionBackendServiceOutlierDetectionPtrOutput) ConsecutiveGatewayFailure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveGatewayFailure
	}).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier
// status is detected through consecutive 5xx. This setting can be used to disable
// ejection or to ramp it up slowly. Defaults to 100.
func (o RegionBackendServiceOutlierDetectionPtrOutput) EnforcingConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.EnforcingConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier
// status is detected through consecutive gateway failures. This setting can be
// used to disable ejection or to ramp it up slowly. Defaults to 0.
func (o RegionBackendServiceOutlierDetectionPtrOutput) EnforcingConsecutiveGatewayFailure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.EnforcingConsecutiveGatewayFailure
	}).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier
// status is detected through success rate statistics. This setting can be used to
// disable ejection or to ramp it up slowly. Defaults to 100.
func (o RegionBackendServiceOutlierDetectionPtrOutput) EnforcingSuccessRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.EnforcingSuccessRate
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis. This can result in both new
// ejections as well as hosts being returned to service. Defaults to 10 seconds.  Structure is documented below.
func (o RegionBackendServiceOutlierDetectionPtrOutput) Interval() RegionBackendServiceOutlierDetectionIntervalPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetection) *RegionBackendServiceOutlierDetectionInterval {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(RegionBackendServiceOutlierDetectionIntervalPtrOutput)
}

// Maximum percentage of hosts in the load balancing pool for the backend service
// that can be ejected. Defaults to 10%.
func (o RegionBackendServiceOutlierDetectionPtrOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.MaxEjectionPercent
	}).(pulumi.IntPtrOutput)
}

// The number of hosts in a cluster that must have enough request volume to detect
// success rate outliers. If the number of hosts is less than this setting, outlier
// detection via success rate statistics is not performed for any host in the
// cluster. Defaults to 5.
func (o RegionBackendServiceOutlierDetectionPtrOutput) SuccessRateMinimumHosts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.SuccessRateMinimumHosts
	}).(pulumi.IntPtrOutput)
}

// The minimum number of total requests that must be collected in one interval (as
// defined by the interval duration above) to include this host in success rate
// based outlier detection. If the volume is lower than this setting, outlier
// detection via success rate statistics is not performed for that host. Defaults
// to 100.
func (o RegionBackendServiceOutlierDetectionPtrOutput) SuccessRateRequestVolume() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.SuccessRateRequestVolume
	}).(pulumi.IntPtrOutput)
}

// This factor is used to determine the ejection threshold for success rate outlier
// ejection. The ejection threshold is the difference between the mean success
// rate, and the product of this factor and the standard deviation of the mean
// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
// by a thousand to get a double. That is, if the desired factor is 1.9, the
// runtime value should be 1900. Defaults to 1900.
func (o RegionBackendServiceOutlierDetectionPtrOutput) SuccessRateStdevFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.SuccessRateStdevFactor
	}).(pulumi.IntPtrOutput)
}

type RegionBackendServiceOutlierDetectionBaseEjectionTime struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds int `pulumi:"seconds"`
}

// RegionBackendServiceOutlierDetectionBaseEjectionTimeInput is an input type that accepts RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs and RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput values.
// You can construct a concrete instance of `RegionBackendServiceOutlierDetectionBaseEjectionTimeInput` via:
//
// 		 RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs{...}
//
type RegionBackendServiceOutlierDetectionBaseEjectionTimeInput interface {
	pulumi.Input

	ToRegionBackendServiceOutlierDetectionBaseEjectionTimeOutput() RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput
	ToRegionBackendServiceOutlierDetectionBaseEjectionTimeOutputWithContext(context.Context) RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput
}

type RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.IntInput `pulumi:"seconds"`
}

func (RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceOutlierDetectionBaseEjectionTime)(nil)).Elem()
}

func (i RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs) ToRegionBackendServiceOutlierDetectionBaseEjectionTimeOutput() RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput {
	return i.ToRegionBackendServiceOutlierDetectionBaseEjectionTimeOutputWithContext(context.Background())
}

func (i RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs) ToRegionBackendServiceOutlierDetectionBaseEjectionTimeOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput)
}

func (i RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs) ToRegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput() RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return i.ToRegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(context.Background())
}

func (i RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs) ToRegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput).ToRegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(ctx)
}

// RegionBackendServiceOutlierDetectionBaseEjectionTimePtrInput is an input type that accepts RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs, RegionBackendServiceOutlierDetectionBaseEjectionTimePtr and RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput values.
// You can construct a concrete instance of `RegionBackendServiceOutlierDetectionBaseEjectionTimePtrInput` via:
//
// 		 RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs{...}
//
//  or:
//
// 		 nil
//
type RegionBackendServiceOutlierDetectionBaseEjectionTimePtrInput interface {
	pulumi.Input

	ToRegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput() RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput
	ToRegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(context.Context) RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput
}

type regionBackendServiceOutlierDetectionBaseEjectionTimePtrType RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs

func RegionBackendServiceOutlierDetectionBaseEjectionTimePtr(v *RegionBackendServiceOutlierDetectionBaseEjectionTimeArgs) RegionBackendServiceOutlierDetectionBaseEjectionTimePtrInput {
	return (*regionBackendServiceOutlierDetectionBaseEjectionTimePtrType)(v)
}

func (*regionBackendServiceOutlierDetectionBaseEjectionTimePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceOutlierDetectionBaseEjectionTime)(nil)).Elem()
}

func (i *regionBackendServiceOutlierDetectionBaseEjectionTimePtrType) ToRegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput() RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return i.ToRegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(context.Background())
}

func (i *regionBackendServiceOutlierDetectionBaseEjectionTimePtrType) ToRegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput)
}

type RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceOutlierDetectionBaseEjectionTime)(nil)).Elem()
}

func (o RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput) ToRegionBackendServiceOutlierDetectionBaseEjectionTimeOutput() RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput {
	return o
}

func (o RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput) ToRegionBackendServiceOutlierDetectionBaseEjectionTimeOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput {
	return o
}

func (o RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput) ToRegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput() RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return o.ToRegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(context.Background())
}

func (o RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput) ToRegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetectionBaseEjectionTime) *RegionBackendServiceOutlierDetectionBaseEjectionTime {
		return &v
	}).(RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetectionBaseEjectionTime) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetectionBaseEjectionTime) int { return v.Seconds }).(pulumi.IntOutput)
}

type RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceOutlierDetectionBaseEjectionTime)(nil)).Elem()
}

func (o RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput) ToRegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput() RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return o
}

func (o RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput) ToRegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput {
	return o
}

func (o RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput) Elem() RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetectionBaseEjectionTime) RegionBackendServiceOutlierDetectionBaseEjectionTime {
		return *v
	}).(RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetectionBaseEjectionTime) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetectionBaseEjectionTime) *int {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.IntPtrOutput)
}

type RegionBackendServiceOutlierDetectionInterval struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds int `pulumi:"seconds"`
}

// RegionBackendServiceOutlierDetectionIntervalInput is an input type that accepts RegionBackendServiceOutlierDetectionIntervalArgs and RegionBackendServiceOutlierDetectionIntervalOutput values.
// You can construct a concrete instance of `RegionBackendServiceOutlierDetectionIntervalInput` via:
//
// 		 RegionBackendServiceOutlierDetectionIntervalArgs{...}
//
type RegionBackendServiceOutlierDetectionIntervalInput interface {
	pulumi.Input

	ToRegionBackendServiceOutlierDetectionIntervalOutput() RegionBackendServiceOutlierDetectionIntervalOutput
	ToRegionBackendServiceOutlierDetectionIntervalOutputWithContext(context.Context) RegionBackendServiceOutlierDetectionIntervalOutput
}

type RegionBackendServiceOutlierDetectionIntervalArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.IntInput `pulumi:"seconds"`
}

func (RegionBackendServiceOutlierDetectionIntervalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceOutlierDetectionInterval)(nil)).Elem()
}

func (i RegionBackendServiceOutlierDetectionIntervalArgs) ToRegionBackendServiceOutlierDetectionIntervalOutput() RegionBackendServiceOutlierDetectionIntervalOutput {
	return i.ToRegionBackendServiceOutlierDetectionIntervalOutputWithContext(context.Background())
}

func (i RegionBackendServiceOutlierDetectionIntervalArgs) ToRegionBackendServiceOutlierDetectionIntervalOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionIntervalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceOutlierDetectionIntervalOutput)
}

func (i RegionBackendServiceOutlierDetectionIntervalArgs) ToRegionBackendServiceOutlierDetectionIntervalPtrOutput() RegionBackendServiceOutlierDetectionIntervalPtrOutput {
	return i.ToRegionBackendServiceOutlierDetectionIntervalPtrOutputWithContext(context.Background())
}

func (i RegionBackendServiceOutlierDetectionIntervalArgs) ToRegionBackendServiceOutlierDetectionIntervalPtrOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionIntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceOutlierDetectionIntervalOutput).ToRegionBackendServiceOutlierDetectionIntervalPtrOutputWithContext(ctx)
}

// RegionBackendServiceOutlierDetectionIntervalPtrInput is an input type that accepts RegionBackendServiceOutlierDetectionIntervalArgs, RegionBackendServiceOutlierDetectionIntervalPtr and RegionBackendServiceOutlierDetectionIntervalPtrOutput values.
// You can construct a concrete instance of `RegionBackendServiceOutlierDetectionIntervalPtrInput` via:
//
// 		 RegionBackendServiceOutlierDetectionIntervalArgs{...}
//
//  or:
//
// 		 nil
//
type RegionBackendServiceOutlierDetectionIntervalPtrInput interface {
	pulumi.Input

	ToRegionBackendServiceOutlierDetectionIntervalPtrOutput() RegionBackendServiceOutlierDetectionIntervalPtrOutput
	ToRegionBackendServiceOutlierDetectionIntervalPtrOutputWithContext(context.Context) RegionBackendServiceOutlierDetectionIntervalPtrOutput
}

type regionBackendServiceOutlierDetectionIntervalPtrType RegionBackendServiceOutlierDetectionIntervalArgs

func RegionBackendServiceOutlierDetectionIntervalPtr(v *RegionBackendServiceOutlierDetectionIntervalArgs) RegionBackendServiceOutlierDetectionIntervalPtrInput {
	return (*regionBackendServiceOutlierDetectionIntervalPtrType)(v)
}

func (*regionBackendServiceOutlierDetectionIntervalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceOutlierDetectionInterval)(nil)).Elem()
}

func (i *regionBackendServiceOutlierDetectionIntervalPtrType) ToRegionBackendServiceOutlierDetectionIntervalPtrOutput() RegionBackendServiceOutlierDetectionIntervalPtrOutput {
	return i.ToRegionBackendServiceOutlierDetectionIntervalPtrOutputWithContext(context.Background())
}

func (i *regionBackendServiceOutlierDetectionIntervalPtrType) ToRegionBackendServiceOutlierDetectionIntervalPtrOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionIntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceOutlierDetectionIntervalPtrOutput)
}

type RegionBackendServiceOutlierDetectionIntervalOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceOutlierDetectionIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionBackendServiceOutlierDetectionInterval)(nil)).Elem()
}

func (o RegionBackendServiceOutlierDetectionIntervalOutput) ToRegionBackendServiceOutlierDetectionIntervalOutput() RegionBackendServiceOutlierDetectionIntervalOutput {
	return o
}

func (o RegionBackendServiceOutlierDetectionIntervalOutput) ToRegionBackendServiceOutlierDetectionIntervalOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionIntervalOutput {
	return o
}

func (o RegionBackendServiceOutlierDetectionIntervalOutput) ToRegionBackendServiceOutlierDetectionIntervalPtrOutput() RegionBackendServiceOutlierDetectionIntervalPtrOutput {
	return o.ToRegionBackendServiceOutlierDetectionIntervalPtrOutputWithContext(context.Background())
}

func (o RegionBackendServiceOutlierDetectionIntervalOutput) ToRegionBackendServiceOutlierDetectionIntervalPtrOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionIntervalPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetectionInterval) *RegionBackendServiceOutlierDetectionInterval {
		return &v
	}).(RegionBackendServiceOutlierDetectionIntervalPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionBackendServiceOutlierDetectionIntervalOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetectionInterval) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionBackendServiceOutlierDetectionIntervalOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v RegionBackendServiceOutlierDetectionInterval) int { return v.Seconds }).(pulumi.IntOutput)
}

type RegionBackendServiceOutlierDetectionIntervalPtrOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceOutlierDetectionIntervalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceOutlierDetectionInterval)(nil)).Elem()
}

func (o RegionBackendServiceOutlierDetectionIntervalPtrOutput) ToRegionBackendServiceOutlierDetectionIntervalPtrOutput() RegionBackendServiceOutlierDetectionIntervalPtrOutput {
	return o
}

func (o RegionBackendServiceOutlierDetectionIntervalPtrOutput) ToRegionBackendServiceOutlierDetectionIntervalPtrOutputWithContext(ctx context.Context) RegionBackendServiceOutlierDetectionIntervalPtrOutput {
	return o
}

func (o RegionBackendServiceOutlierDetectionIntervalPtrOutput) Elem() RegionBackendServiceOutlierDetectionIntervalOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetectionInterval) RegionBackendServiceOutlierDetectionInterval {
		return *v
	}).(RegionBackendServiceOutlierDetectionIntervalOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionBackendServiceOutlierDetectionIntervalPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetectionInterval) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionBackendServiceOutlierDetectionIntervalPtrOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceOutlierDetectionInterval) *int {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.IntPtrOutput)
}

type RegionDiskDiskEncryptionKey struct {
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// Specifies a 256-bit customer-supplied encryption key, encoded in
	// RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey *string `pulumi:"rawKey"`
	// -
	// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
	// encryption key that protects this resource.
	Sha256 *string `pulumi:"sha256"`
}

// RegionDiskDiskEncryptionKeyInput is an input type that accepts RegionDiskDiskEncryptionKeyArgs and RegionDiskDiskEncryptionKeyOutput values.
// You can construct a concrete instance of `RegionDiskDiskEncryptionKeyInput` via:
//
// 		 RegionDiskDiskEncryptionKeyArgs{...}
//
type RegionDiskDiskEncryptionKeyInput interface {
	pulumi.Input

	ToRegionDiskDiskEncryptionKeyOutput() RegionDiskDiskEncryptionKeyOutput
	ToRegionDiskDiskEncryptionKeyOutputWithContext(context.Context) RegionDiskDiskEncryptionKeyOutput
}

type RegionDiskDiskEncryptionKeyArgs struct {
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
	// Specifies a 256-bit customer-supplied encryption key, encoded in
	// RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey pulumi.StringPtrInput `pulumi:"rawKey"`
	// -
	// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
	// encryption key that protects this resource.
	Sha256 pulumi.StringPtrInput `pulumi:"sha256"`
}

func (RegionDiskDiskEncryptionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionDiskDiskEncryptionKey)(nil)).Elem()
}

func (i RegionDiskDiskEncryptionKeyArgs) ToRegionDiskDiskEncryptionKeyOutput() RegionDiskDiskEncryptionKeyOutput {
	return i.ToRegionDiskDiskEncryptionKeyOutputWithContext(context.Background())
}

func (i RegionDiskDiskEncryptionKeyArgs) ToRegionDiskDiskEncryptionKeyOutputWithContext(ctx context.Context) RegionDiskDiskEncryptionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionDiskDiskEncryptionKeyOutput)
}

func (i RegionDiskDiskEncryptionKeyArgs) ToRegionDiskDiskEncryptionKeyPtrOutput() RegionDiskDiskEncryptionKeyPtrOutput {
	return i.ToRegionDiskDiskEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i RegionDiskDiskEncryptionKeyArgs) ToRegionDiskDiskEncryptionKeyPtrOutputWithContext(ctx context.Context) RegionDiskDiskEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionDiskDiskEncryptionKeyOutput).ToRegionDiskDiskEncryptionKeyPtrOutputWithContext(ctx)
}

// RegionDiskDiskEncryptionKeyPtrInput is an input type that accepts RegionDiskDiskEncryptionKeyArgs, RegionDiskDiskEncryptionKeyPtr and RegionDiskDiskEncryptionKeyPtrOutput values.
// You can construct a concrete instance of `RegionDiskDiskEncryptionKeyPtrInput` via:
//
// 		 RegionDiskDiskEncryptionKeyArgs{...}
//
//  or:
//
// 		 nil
//
type RegionDiskDiskEncryptionKeyPtrInput interface {
	pulumi.Input

	ToRegionDiskDiskEncryptionKeyPtrOutput() RegionDiskDiskEncryptionKeyPtrOutput
	ToRegionDiskDiskEncryptionKeyPtrOutputWithContext(context.Context) RegionDiskDiskEncryptionKeyPtrOutput
}

type regionDiskDiskEncryptionKeyPtrType RegionDiskDiskEncryptionKeyArgs

func RegionDiskDiskEncryptionKeyPtr(v *RegionDiskDiskEncryptionKeyArgs) RegionDiskDiskEncryptionKeyPtrInput {
	return (*regionDiskDiskEncryptionKeyPtrType)(v)
}

func (*regionDiskDiskEncryptionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionDiskDiskEncryptionKey)(nil)).Elem()
}

func (i *regionDiskDiskEncryptionKeyPtrType) ToRegionDiskDiskEncryptionKeyPtrOutput() RegionDiskDiskEncryptionKeyPtrOutput {
	return i.ToRegionDiskDiskEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i *regionDiskDiskEncryptionKeyPtrType) ToRegionDiskDiskEncryptionKeyPtrOutputWithContext(ctx context.Context) RegionDiskDiskEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionDiskDiskEncryptionKeyPtrOutput)
}

type RegionDiskDiskEncryptionKeyOutput struct{ *pulumi.OutputState }

func (RegionDiskDiskEncryptionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionDiskDiskEncryptionKey)(nil)).Elem()
}

func (o RegionDiskDiskEncryptionKeyOutput) ToRegionDiskDiskEncryptionKeyOutput() RegionDiskDiskEncryptionKeyOutput {
	return o
}

func (o RegionDiskDiskEncryptionKeyOutput) ToRegionDiskDiskEncryptionKeyOutputWithContext(ctx context.Context) RegionDiskDiskEncryptionKeyOutput {
	return o
}

func (o RegionDiskDiskEncryptionKeyOutput) ToRegionDiskDiskEncryptionKeyPtrOutput() RegionDiskDiskEncryptionKeyPtrOutput {
	return o.ToRegionDiskDiskEncryptionKeyPtrOutputWithContext(context.Background())
}

func (o RegionDiskDiskEncryptionKeyOutput) ToRegionDiskDiskEncryptionKeyPtrOutputWithContext(ctx context.Context) RegionDiskDiskEncryptionKeyPtrOutput {
	return o.ApplyT(func(v RegionDiskDiskEncryptionKey) *RegionDiskDiskEncryptionKey {
		return &v
	}).(RegionDiskDiskEncryptionKeyPtrOutput)
}
func (o RegionDiskDiskEncryptionKeyOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionDiskDiskEncryptionKey) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in
// RFC 4648 base64 to either encrypt or decrypt this resource.
func (o RegionDiskDiskEncryptionKeyOutput) RawKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionDiskDiskEncryptionKey) *string { return v.RawKey }).(pulumi.StringPtrOutput)
}

// -
// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
// encryption key that protects this resource.
func (o RegionDiskDiskEncryptionKeyOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionDiskDiskEncryptionKey) *string { return v.Sha256 }).(pulumi.StringPtrOutput)
}

type RegionDiskDiskEncryptionKeyPtrOutput struct{ *pulumi.OutputState }

func (RegionDiskDiskEncryptionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionDiskDiskEncryptionKey)(nil)).Elem()
}

func (o RegionDiskDiskEncryptionKeyPtrOutput) ToRegionDiskDiskEncryptionKeyPtrOutput() RegionDiskDiskEncryptionKeyPtrOutput {
	return o
}

func (o RegionDiskDiskEncryptionKeyPtrOutput) ToRegionDiskDiskEncryptionKeyPtrOutputWithContext(ctx context.Context) RegionDiskDiskEncryptionKeyPtrOutput {
	return o
}

func (o RegionDiskDiskEncryptionKeyPtrOutput) Elem() RegionDiskDiskEncryptionKeyOutput {
	return o.ApplyT(func(v *RegionDiskDiskEncryptionKey) RegionDiskDiskEncryptionKey { return *v }).(RegionDiskDiskEncryptionKeyOutput)
}

func (o RegionDiskDiskEncryptionKeyPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionDiskDiskEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in
// RFC 4648 base64 to either encrypt or decrypt this resource.
func (o RegionDiskDiskEncryptionKeyPtrOutput) RawKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionDiskDiskEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.RawKey
	}).(pulumi.StringPtrOutput)
}

// -
// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
// encryption key that protects this resource.
func (o RegionDiskDiskEncryptionKeyPtrOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionDiskDiskEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.Sha256
	}).(pulumi.StringPtrOutput)
}

type RegionDiskSourceSnapshotEncryptionKey struct {
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// Specifies a 256-bit customer-supplied encryption key, encoded in
	// RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey *string `pulumi:"rawKey"`
	// -
	// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
	// encryption key that protects this resource.
	Sha256 *string `pulumi:"sha256"`
}

// RegionDiskSourceSnapshotEncryptionKeyInput is an input type that accepts RegionDiskSourceSnapshotEncryptionKeyArgs and RegionDiskSourceSnapshotEncryptionKeyOutput values.
// You can construct a concrete instance of `RegionDiskSourceSnapshotEncryptionKeyInput` via:
//
// 		 RegionDiskSourceSnapshotEncryptionKeyArgs{...}
//
type RegionDiskSourceSnapshotEncryptionKeyInput interface {
	pulumi.Input

	ToRegionDiskSourceSnapshotEncryptionKeyOutput() RegionDiskSourceSnapshotEncryptionKeyOutput
	ToRegionDiskSourceSnapshotEncryptionKeyOutputWithContext(context.Context) RegionDiskSourceSnapshotEncryptionKeyOutput
}

type RegionDiskSourceSnapshotEncryptionKeyArgs struct {
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
	// Specifies a 256-bit customer-supplied encryption key, encoded in
	// RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey pulumi.StringPtrInput `pulumi:"rawKey"`
	// -
	// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
	// encryption key that protects this resource.
	Sha256 pulumi.StringPtrInput `pulumi:"sha256"`
}

func (RegionDiskSourceSnapshotEncryptionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionDiskSourceSnapshotEncryptionKey)(nil)).Elem()
}

func (i RegionDiskSourceSnapshotEncryptionKeyArgs) ToRegionDiskSourceSnapshotEncryptionKeyOutput() RegionDiskSourceSnapshotEncryptionKeyOutput {
	return i.ToRegionDiskSourceSnapshotEncryptionKeyOutputWithContext(context.Background())
}

func (i RegionDiskSourceSnapshotEncryptionKeyArgs) ToRegionDiskSourceSnapshotEncryptionKeyOutputWithContext(ctx context.Context) RegionDiskSourceSnapshotEncryptionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionDiskSourceSnapshotEncryptionKeyOutput)
}

func (i RegionDiskSourceSnapshotEncryptionKeyArgs) ToRegionDiskSourceSnapshotEncryptionKeyPtrOutput() RegionDiskSourceSnapshotEncryptionKeyPtrOutput {
	return i.ToRegionDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i RegionDiskSourceSnapshotEncryptionKeyArgs) ToRegionDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(ctx context.Context) RegionDiskSourceSnapshotEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionDiskSourceSnapshotEncryptionKeyOutput).ToRegionDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(ctx)
}

// RegionDiskSourceSnapshotEncryptionKeyPtrInput is an input type that accepts RegionDiskSourceSnapshotEncryptionKeyArgs, RegionDiskSourceSnapshotEncryptionKeyPtr and RegionDiskSourceSnapshotEncryptionKeyPtrOutput values.
// You can construct a concrete instance of `RegionDiskSourceSnapshotEncryptionKeyPtrInput` via:
//
// 		 RegionDiskSourceSnapshotEncryptionKeyArgs{...}
//
//  or:
//
// 		 nil
//
type RegionDiskSourceSnapshotEncryptionKeyPtrInput interface {
	pulumi.Input

	ToRegionDiskSourceSnapshotEncryptionKeyPtrOutput() RegionDiskSourceSnapshotEncryptionKeyPtrOutput
	ToRegionDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(context.Context) RegionDiskSourceSnapshotEncryptionKeyPtrOutput
}

type regionDiskSourceSnapshotEncryptionKeyPtrType RegionDiskSourceSnapshotEncryptionKeyArgs

func RegionDiskSourceSnapshotEncryptionKeyPtr(v *RegionDiskSourceSnapshotEncryptionKeyArgs) RegionDiskSourceSnapshotEncryptionKeyPtrInput {
	return (*regionDiskSourceSnapshotEncryptionKeyPtrType)(v)
}

func (*regionDiskSourceSnapshotEncryptionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionDiskSourceSnapshotEncryptionKey)(nil)).Elem()
}

func (i *regionDiskSourceSnapshotEncryptionKeyPtrType) ToRegionDiskSourceSnapshotEncryptionKeyPtrOutput() RegionDiskSourceSnapshotEncryptionKeyPtrOutput {
	return i.ToRegionDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i *regionDiskSourceSnapshotEncryptionKeyPtrType) ToRegionDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(ctx context.Context) RegionDiskSourceSnapshotEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionDiskSourceSnapshotEncryptionKeyPtrOutput)
}

type RegionDiskSourceSnapshotEncryptionKeyOutput struct{ *pulumi.OutputState }

func (RegionDiskSourceSnapshotEncryptionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionDiskSourceSnapshotEncryptionKey)(nil)).Elem()
}

func (o RegionDiskSourceSnapshotEncryptionKeyOutput) ToRegionDiskSourceSnapshotEncryptionKeyOutput() RegionDiskSourceSnapshotEncryptionKeyOutput {
	return o
}

func (o RegionDiskSourceSnapshotEncryptionKeyOutput) ToRegionDiskSourceSnapshotEncryptionKeyOutputWithContext(ctx context.Context) RegionDiskSourceSnapshotEncryptionKeyOutput {
	return o
}

func (o RegionDiskSourceSnapshotEncryptionKeyOutput) ToRegionDiskSourceSnapshotEncryptionKeyPtrOutput() RegionDiskSourceSnapshotEncryptionKeyPtrOutput {
	return o.ToRegionDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(context.Background())
}

func (o RegionDiskSourceSnapshotEncryptionKeyOutput) ToRegionDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(ctx context.Context) RegionDiskSourceSnapshotEncryptionKeyPtrOutput {
	return o.ApplyT(func(v RegionDiskSourceSnapshotEncryptionKey) *RegionDiskSourceSnapshotEncryptionKey {
		return &v
	}).(RegionDiskSourceSnapshotEncryptionKeyPtrOutput)
}
func (o RegionDiskSourceSnapshotEncryptionKeyOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionDiskSourceSnapshotEncryptionKey) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in
// RFC 4648 base64 to either encrypt or decrypt this resource.
func (o RegionDiskSourceSnapshotEncryptionKeyOutput) RawKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionDiskSourceSnapshotEncryptionKey) *string { return v.RawKey }).(pulumi.StringPtrOutput)
}

// -
// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
// encryption key that protects this resource.
func (o RegionDiskSourceSnapshotEncryptionKeyOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionDiskSourceSnapshotEncryptionKey) *string { return v.Sha256 }).(pulumi.StringPtrOutput)
}

type RegionDiskSourceSnapshotEncryptionKeyPtrOutput struct{ *pulumi.OutputState }

func (RegionDiskSourceSnapshotEncryptionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionDiskSourceSnapshotEncryptionKey)(nil)).Elem()
}

func (o RegionDiskSourceSnapshotEncryptionKeyPtrOutput) ToRegionDiskSourceSnapshotEncryptionKeyPtrOutput() RegionDiskSourceSnapshotEncryptionKeyPtrOutput {
	return o
}

func (o RegionDiskSourceSnapshotEncryptionKeyPtrOutput) ToRegionDiskSourceSnapshotEncryptionKeyPtrOutputWithContext(ctx context.Context) RegionDiskSourceSnapshotEncryptionKeyPtrOutput {
	return o
}

func (o RegionDiskSourceSnapshotEncryptionKeyPtrOutput) Elem() RegionDiskSourceSnapshotEncryptionKeyOutput {
	return o.ApplyT(func(v *RegionDiskSourceSnapshotEncryptionKey) RegionDiskSourceSnapshotEncryptionKey { return *v }).(RegionDiskSourceSnapshotEncryptionKeyOutput)
}

func (o RegionDiskSourceSnapshotEncryptionKeyPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionDiskSourceSnapshotEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in
// RFC 4648 base64 to either encrypt or decrypt this resource.
func (o RegionDiskSourceSnapshotEncryptionKeyPtrOutput) RawKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionDiskSourceSnapshotEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.RawKey
	}).(pulumi.StringPtrOutput)
}

// -
// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
// encryption key that protects this resource.
func (o RegionDiskSourceSnapshotEncryptionKeyPtrOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionDiskSourceSnapshotEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.Sha256
	}).(pulumi.StringPtrOutput)
}

type RegionHealthCheckHttp2HealthCheck struct {
	// The value of the host header in the HTTP2 health check request.
	// If left empty (default value), the public IP on behalf of which this health
	// check is performed will be used.
	Host *string `pulumi:"host"`
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port *int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName *string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification *string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *string `pulumi:"proxyHeader"`
	// The request path of the HTTP2 health check request.
	// The default value is /.
	RequestPath *string `pulumi:"requestPath"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response *string `pulumi:"response"`
}

// RegionHealthCheckHttp2HealthCheckInput is an input type that accepts RegionHealthCheckHttp2HealthCheckArgs and RegionHealthCheckHttp2HealthCheckOutput values.
// You can construct a concrete instance of `RegionHealthCheckHttp2HealthCheckInput` via:
//
// 		 RegionHealthCheckHttp2HealthCheckArgs{...}
//
type RegionHealthCheckHttp2HealthCheckInput interface {
	pulumi.Input

	ToRegionHealthCheckHttp2HealthCheckOutput() RegionHealthCheckHttp2HealthCheckOutput
	ToRegionHealthCheckHttp2HealthCheckOutputWithContext(context.Context) RegionHealthCheckHttp2HealthCheckOutput
}

type RegionHealthCheckHttp2HealthCheckArgs struct {
	// The value of the host header in the HTTP2 health check request.
	// If left empty (default value), the public IP on behalf of which this health
	// check is performed will be used.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification pulumi.StringPtrInput `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader pulumi.StringPtrInput `pulumi:"proxyHeader"`
	// The request path of the HTTP2 health check request.
	// The default value is /.
	RequestPath pulumi.StringPtrInput `pulumi:"requestPath"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (RegionHealthCheckHttp2HealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionHealthCheckHttp2HealthCheck)(nil)).Elem()
}

func (i RegionHealthCheckHttp2HealthCheckArgs) ToRegionHealthCheckHttp2HealthCheckOutput() RegionHealthCheckHttp2HealthCheckOutput {
	return i.ToRegionHealthCheckHttp2HealthCheckOutputWithContext(context.Background())
}

func (i RegionHealthCheckHttp2HealthCheckArgs) ToRegionHealthCheckHttp2HealthCheckOutputWithContext(ctx context.Context) RegionHealthCheckHttp2HealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckHttp2HealthCheckOutput)
}

func (i RegionHealthCheckHttp2HealthCheckArgs) ToRegionHealthCheckHttp2HealthCheckPtrOutput() RegionHealthCheckHttp2HealthCheckPtrOutput {
	return i.ToRegionHealthCheckHttp2HealthCheckPtrOutputWithContext(context.Background())
}

func (i RegionHealthCheckHttp2HealthCheckArgs) ToRegionHealthCheckHttp2HealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckHttp2HealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckHttp2HealthCheckOutput).ToRegionHealthCheckHttp2HealthCheckPtrOutputWithContext(ctx)
}

// RegionHealthCheckHttp2HealthCheckPtrInput is an input type that accepts RegionHealthCheckHttp2HealthCheckArgs, RegionHealthCheckHttp2HealthCheckPtr and RegionHealthCheckHttp2HealthCheckPtrOutput values.
// You can construct a concrete instance of `RegionHealthCheckHttp2HealthCheckPtrInput` via:
//
// 		 RegionHealthCheckHttp2HealthCheckArgs{...}
//
//  or:
//
// 		 nil
//
type RegionHealthCheckHttp2HealthCheckPtrInput interface {
	pulumi.Input

	ToRegionHealthCheckHttp2HealthCheckPtrOutput() RegionHealthCheckHttp2HealthCheckPtrOutput
	ToRegionHealthCheckHttp2HealthCheckPtrOutputWithContext(context.Context) RegionHealthCheckHttp2HealthCheckPtrOutput
}

type regionHealthCheckHttp2HealthCheckPtrType RegionHealthCheckHttp2HealthCheckArgs

func RegionHealthCheckHttp2HealthCheckPtr(v *RegionHealthCheckHttp2HealthCheckArgs) RegionHealthCheckHttp2HealthCheckPtrInput {
	return (*regionHealthCheckHttp2HealthCheckPtrType)(v)
}

func (*regionHealthCheckHttp2HealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionHealthCheckHttp2HealthCheck)(nil)).Elem()
}

func (i *regionHealthCheckHttp2HealthCheckPtrType) ToRegionHealthCheckHttp2HealthCheckPtrOutput() RegionHealthCheckHttp2HealthCheckPtrOutput {
	return i.ToRegionHealthCheckHttp2HealthCheckPtrOutputWithContext(context.Background())
}

func (i *regionHealthCheckHttp2HealthCheckPtrType) ToRegionHealthCheckHttp2HealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckHttp2HealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckHttp2HealthCheckPtrOutput)
}

type RegionHealthCheckHttp2HealthCheckOutput struct{ *pulumi.OutputState }

func (RegionHealthCheckHttp2HealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionHealthCheckHttp2HealthCheck)(nil)).Elem()
}

func (o RegionHealthCheckHttp2HealthCheckOutput) ToRegionHealthCheckHttp2HealthCheckOutput() RegionHealthCheckHttp2HealthCheckOutput {
	return o
}

func (o RegionHealthCheckHttp2HealthCheckOutput) ToRegionHealthCheckHttp2HealthCheckOutputWithContext(ctx context.Context) RegionHealthCheckHttp2HealthCheckOutput {
	return o
}

func (o RegionHealthCheckHttp2HealthCheckOutput) ToRegionHealthCheckHttp2HealthCheckPtrOutput() RegionHealthCheckHttp2HealthCheckPtrOutput {
	return o.ToRegionHealthCheckHttp2HealthCheckPtrOutputWithContext(context.Background())
}

func (o RegionHealthCheckHttp2HealthCheckOutput) ToRegionHealthCheckHttp2HealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckHttp2HealthCheckPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttp2HealthCheck) *RegionHealthCheckHttp2HealthCheck {
		return &v
	}).(RegionHealthCheckHttp2HealthCheckPtrOutput)
}

// The value of the host header in the HTTP2 health check request.
// If left empty (default value), the public IP on behalf of which this health
// check is performed will be used.
func (o RegionHealthCheckHttp2HealthCheckOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttp2HealthCheck) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o RegionHealthCheckHttp2HealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttp2HealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o RegionHealthCheckHttp2HealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttp2HealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o RegionHealthCheckHttp2HealthCheckOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttp2HealthCheck) *string { return v.PortSpecification }).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o RegionHealthCheckHttp2HealthCheckOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttp2HealthCheck) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

// The request path of the HTTP2 health check request.
// The default value is /.
func (o RegionHealthCheckHttp2HealthCheckOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttp2HealthCheck) *string { return v.RequestPath }).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o RegionHealthCheckHttp2HealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttp2HealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type RegionHealthCheckHttp2HealthCheckPtrOutput struct{ *pulumi.OutputState }

func (RegionHealthCheckHttp2HealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionHealthCheckHttp2HealthCheck)(nil)).Elem()
}

func (o RegionHealthCheckHttp2HealthCheckPtrOutput) ToRegionHealthCheckHttp2HealthCheckPtrOutput() RegionHealthCheckHttp2HealthCheckPtrOutput {
	return o
}

func (o RegionHealthCheckHttp2HealthCheckPtrOutput) ToRegionHealthCheckHttp2HealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckHttp2HealthCheckPtrOutput {
	return o
}

func (o RegionHealthCheckHttp2HealthCheckPtrOutput) Elem() RegionHealthCheckHttp2HealthCheckOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttp2HealthCheck) RegionHealthCheckHttp2HealthCheck { return *v }).(RegionHealthCheckHttp2HealthCheckOutput)
}

// The value of the host header in the HTTP2 health check request.
// If left empty (default value), the public IP on behalf of which this health
// check is performed will be used.
func (o RegionHealthCheckHttp2HealthCheckPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttp2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o RegionHealthCheckHttp2HealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttp2HealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o RegionHealthCheckHttp2HealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttp2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o RegionHealthCheckHttp2HealthCheckPtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttp2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o RegionHealthCheckHttp2HealthCheckPtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttp2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The request path of the HTTP2 health check request.
// The default value is /.
func (o RegionHealthCheckHttp2HealthCheckPtrOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttp2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.RequestPath
	}).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o RegionHealthCheckHttp2HealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttp2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type RegionHealthCheckHttpHealthCheck struct {
	// The value of the host header in the HTTP2 health check request.
	// If left empty (default value), the public IP on behalf of which this health
	// check is performed will be used.
	Host *string `pulumi:"host"`
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port *int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName *string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification *string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *string `pulumi:"proxyHeader"`
	// The request path of the HTTP2 health check request.
	// The default value is /.
	RequestPath *string `pulumi:"requestPath"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response *string `pulumi:"response"`
}

// RegionHealthCheckHttpHealthCheckInput is an input type that accepts RegionHealthCheckHttpHealthCheckArgs and RegionHealthCheckHttpHealthCheckOutput values.
// You can construct a concrete instance of `RegionHealthCheckHttpHealthCheckInput` via:
//
// 		 RegionHealthCheckHttpHealthCheckArgs{...}
//
type RegionHealthCheckHttpHealthCheckInput interface {
	pulumi.Input

	ToRegionHealthCheckHttpHealthCheckOutput() RegionHealthCheckHttpHealthCheckOutput
	ToRegionHealthCheckHttpHealthCheckOutputWithContext(context.Context) RegionHealthCheckHttpHealthCheckOutput
}

type RegionHealthCheckHttpHealthCheckArgs struct {
	// The value of the host header in the HTTP2 health check request.
	// If left empty (default value), the public IP on behalf of which this health
	// check is performed will be used.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification pulumi.StringPtrInput `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader pulumi.StringPtrInput `pulumi:"proxyHeader"`
	// The request path of the HTTP2 health check request.
	// The default value is /.
	RequestPath pulumi.StringPtrInput `pulumi:"requestPath"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (RegionHealthCheckHttpHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionHealthCheckHttpHealthCheck)(nil)).Elem()
}

func (i RegionHealthCheckHttpHealthCheckArgs) ToRegionHealthCheckHttpHealthCheckOutput() RegionHealthCheckHttpHealthCheckOutput {
	return i.ToRegionHealthCheckHttpHealthCheckOutputWithContext(context.Background())
}

func (i RegionHealthCheckHttpHealthCheckArgs) ToRegionHealthCheckHttpHealthCheckOutputWithContext(ctx context.Context) RegionHealthCheckHttpHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckHttpHealthCheckOutput)
}

func (i RegionHealthCheckHttpHealthCheckArgs) ToRegionHealthCheckHttpHealthCheckPtrOutput() RegionHealthCheckHttpHealthCheckPtrOutput {
	return i.ToRegionHealthCheckHttpHealthCheckPtrOutputWithContext(context.Background())
}

func (i RegionHealthCheckHttpHealthCheckArgs) ToRegionHealthCheckHttpHealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckHttpHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckHttpHealthCheckOutput).ToRegionHealthCheckHttpHealthCheckPtrOutputWithContext(ctx)
}

// RegionHealthCheckHttpHealthCheckPtrInput is an input type that accepts RegionHealthCheckHttpHealthCheckArgs, RegionHealthCheckHttpHealthCheckPtr and RegionHealthCheckHttpHealthCheckPtrOutput values.
// You can construct a concrete instance of `RegionHealthCheckHttpHealthCheckPtrInput` via:
//
// 		 RegionHealthCheckHttpHealthCheckArgs{...}
//
//  or:
//
// 		 nil
//
type RegionHealthCheckHttpHealthCheckPtrInput interface {
	pulumi.Input

	ToRegionHealthCheckHttpHealthCheckPtrOutput() RegionHealthCheckHttpHealthCheckPtrOutput
	ToRegionHealthCheckHttpHealthCheckPtrOutputWithContext(context.Context) RegionHealthCheckHttpHealthCheckPtrOutput
}

type regionHealthCheckHttpHealthCheckPtrType RegionHealthCheckHttpHealthCheckArgs

func RegionHealthCheckHttpHealthCheckPtr(v *RegionHealthCheckHttpHealthCheckArgs) RegionHealthCheckHttpHealthCheckPtrInput {
	return (*regionHealthCheckHttpHealthCheckPtrType)(v)
}

func (*regionHealthCheckHttpHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionHealthCheckHttpHealthCheck)(nil)).Elem()
}

func (i *regionHealthCheckHttpHealthCheckPtrType) ToRegionHealthCheckHttpHealthCheckPtrOutput() RegionHealthCheckHttpHealthCheckPtrOutput {
	return i.ToRegionHealthCheckHttpHealthCheckPtrOutputWithContext(context.Background())
}

func (i *regionHealthCheckHttpHealthCheckPtrType) ToRegionHealthCheckHttpHealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckHttpHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckHttpHealthCheckPtrOutput)
}

type RegionHealthCheckHttpHealthCheckOutput struct{ *pulumi.OutputState }

func (RegionHealthCheckHttpHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionHealthCheckHttpHealthCheck)(nil)).Elem()
}

func (o RegionHealthCheckHttpHealthCheckOutput) ToRegionHealthCheckHttpHealthCheckOutput() RegionHealthCheckHttpHealthCheckOutput {
	return o
}

func (o RegionHealthCheckHttpHealthCheckOutput) ToRegionHealthCheckHttpHealthCheckOutputWithContext(ctx context.Context) RegionHealthCheckHttpHealthCheckOutput {
	return o
}

func (o RegionHealthCheckHttpHealthCheckOutput) ToRegionHealthCheckHttpHealthCheckPtrOutput() RegionHealthCheckHttpHealthCheckPtrOutput {
	return o.ToRegionHealthCheckHttpHealthCheckPtrOutputWithContext(context.Background())
}

func (o RegionHealthCheckHttpHealthCheckOutput) ToRegionHealthCheckHttpHealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckHttpHealthCheckPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttpHealthCheck) *RegionHealthCheckHttpHealthCheck {
		return &v
	}).(RegionHealthCheckHttpHealthCheckPtrOutput)
}

// The value of the host header in the HTTP2 health check request.
// If left empty (default value), the public IP on behalf of which this health
// check is performed will be used.
func (o RegionHealthCheckHttpHealthCheckOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttpHealthCheck) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o RegionHealthCheckHttpHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttpHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o RegionHealthCheckHttpHealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttpHealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o RegionHealthCheckHttpHealthCheckOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttpHealthCheck) *string { return v.PortSpecification }).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o RegionHealthCheckHttpHealthCheckOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttpHealthCheck) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

// The request path of the HTTP2 health check request.
// The default value is /.
func (o RegionHealthCheckHttpHealthCheckOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttpHealthCheck) *string { return v.RequestPath }).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o RegionHealthCheckHttpHealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttpHealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type RegionHealthCheckHttpHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (RegionHealthCheckHttpHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionHealthCheckHttpHealthCheck)(nil)).Elem()
}

func (o RegionHealthCheckHttpHealthCheckPtrOutput) ToRegionHealthCheckHttpHealthCheckPtrOutput() RegionHealthCheckHttpHealthCheckPtrOutput {
	return o
}

func (o RegionHealthCheckHttpHealthCheckPtrOutput) ToRegionHealthCheckHttpHealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckHttpHealthCheckPtrOutput {
	return o
}

func (o RegionHealthCheckHttpHealthCheckPtrOutput) Elem() RegionHealthCheckHttpHealthCheckOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttpHealthCheck) RegionHealthCheckHttpHealthCheck { return *v }).(RegionHealthCheckHttpHealthCheckOutput)
}

// The value of the host header in the HTTP2 health check request.
// If left empty (default value), the public IP on behalf of which this health
// check is performed will be used.
func (o RegionHealthCheckHttpHealthCheckPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o RegionHealthCheckHttpHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttpHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o RegionHealthCheckHttpHealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o RegionHealthCheckHttpHealthCheckPtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o RegionHealthCheckHttpHealthCheckPtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The request path of the HTTP2 health check request.
// The default value is /.
func (o RegionHealthCheckHttpHealthCheckPtrOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.RequestPath
	}).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o RegionHealthCheckHttpHealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type RegionHealthCheckHttpsHealthCheck struct {
	// The value of the host header in the HTTP2 health check request.
	// If left empty (default value), the public IP on behalf of which this health
	// check is performed will be used.
	Host *string `pulumi:"host"`
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port *int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName *string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification *string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *string `pulumi:"proxyHeader"`
	// The request path of the HTTP2 health check request.
	// The default value is /.
	RequestPath *string `pulumi:"requestPath"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response *string `pulumi:"response"`
}

// RegionHealthCheckHttpsHealthCheckInput is an input type that accepts RegionHealthCheckHttpsHealthCheckArgs and RegionHealthCheckHttpsHealthCheckOutput values.
// You can construct a concrete instance of `RegionHealthCheckHttpsHealthCheckInput` via:
//
// 		 RegionHealthCheckHttpsHealthCheckArgs{...}
//
type RegionHealthCheckHttpsHealthCheckInput interface {
	pulumi.Input

	ToRegionHealthCheckHttpsHealthCheckOutput() RegionHealthCheckHttpsHealthCheckOutput
	ToRegionHealthCheckHttpsHealthCheckOutputWithContext(context.Context) RegionHealthCheckHttpsHealthCheckOutput
}

type RegionHealthCheckHttpsHealthCheckArgs struct {
	// The value of the host header in the HTTP2 health check request.
	// If left empty (default value), the public IP on behalf of which this health
	// check is performed will be used.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification pulumi.StringPtrInput `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader pulumi.StringPtrInput `pulumi:"proxyHeader"`
	// The request path of the HTTP2 health check request.
	// The default value is /.
	RequestPath pulumi.StringPtrInput `pulumi:"requestPath"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (RegionHealthCheckHttpsHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionHealthCheckHttpsHealthCheck)(nil)).Elem()
}

func (i RegionHealthCheckHttpsHealthCheckArgs) ToRegionHealthCheckHttpsHealthCheckOutput() RegionHealthCheckHttpsHealthCheckOutput {
	return i.ToRegionHealthCheckHttpsHealthCheckOutputWithContext(context.Background())
}

func (i RegionHealthCheckHttpsHealthCheckArgs) ToRegionHealthCheckHttpsHealthCheckOutputWithContext(ctx context.Context) RegionHealthCheckHttpsHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckHttpsHealthCheckOutput)
}

func (i RegionHealthCheckHttpsHealthCheckArgs) ToRegionHealthCheckHttpsHealthCheckPtrOutput() RegionHealthCheckHttpsHealthCheckPtrOutput {
	return i.ToRegionHealthCheckHttpsHealthCheckPtrOutputWithContext(context.Background())
}

func (i RegionHealthCheckHttpsHealthCheckArgs) ToRegionHealthCheckHttpsHealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckHttpsHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckHttpsHealthCheckOutput).ToRegionHealthCheckHttpsHealthCheckPtrOutputWithContext(ctx)
}

// RegionHealthCheckHttpsHealthCheckPtrInput is an input type that accepts RegionHealthCheckHttpsHealthCheckArgs, RegionHealthCheckHttpsHealthCheckPtr and RegionHealthCheckHttpsHealthCheckPtrOutput values.
// You can construct a concrete instance of `RegionHealthCheckHttpsHealthCheckPtrInput` via:
//
// 		 RegionHealthCheckHttpsHealthCheckArgs{...}
//
//  or:
//
// 		 nil
//
type RegionHealthCheckHttpsHealthCheckPtrInput interface {
	pulumi.Input

	ToRegionHealthCheckHttpsHealthCheckPtrOutput() RegionHealthCheckHttpsHealthCheckPtrOutput
	ToRegionHealthCheckHttpsHealthCheckPtrOutputWithContext(context.Context) RegionHealthCheckHttpsHealthCheckPtrOutput
}

type regionHealthCheckHttpsHealthCheckPtrType RegionHealthCheckHttpsHealthCheckArgs

func RegionHealthCheckHttpsHealthCheckPtr(v *RegionHealthCheckHttpsHealthCheckArgs) RegionHealthCheckHttpsHealthCheckPtrInput {
	return (*regionHealthCheckHttpsHealthCheckPtrType)(v)
}

func (*regionHealthCheckHttpsHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionHealthCheckHttpsHealthCheck)(nil)).Elem()
}

func (i *regionHealthCheckHttpsHealthCheckPtrType) ToRegionHealthCheckHttpsHealthCheckPtrOutput() RegionHealthCheckHttpsHealthCheckPtrOutput {
	return i.ToRegionHealthCheckHttpsHealthCheckPtrOutputWithContext(context.Background())
}

func (i *regionHealthCheckHttpsHealthCheckPtrType) ToRegionHealthCheckHttpsHealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckHttpsHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckHttpsHealthCheckPtrOutput)
}

type RegionHealthCheckHttpsHealthCheckOutput struct{ *pulumi.OutputState }

func (RegionHealthCheckHttpsHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionHealthCheckHttpsHealthCheck)(nil)).Elem()
}

func (o RegionHealthCheckHttpsHealthCheckOutput) ToRegionHealthCheckHttpsHealthCheckOutput() RegionHealthCheckHttpsHealthCheckOutput {
	return o
}

func (o RegionHealthCheckHttpsHealthCheckOutput) ToRegionHealthCheckHttpsHealthCheckOutputWithContext(ctx context.Context) RegionHealthCheckHttpsHealthCheckOutput {
	return o
}

func (o RegionHealthCheckHttpsHealthCheckOutput) ToRegionHealthCheckHttpsHealthCheckPtrOutput() RegionHealthCheckHttpsHealthCheckPtrOutput {
	return o.ToRegionHealthCheckHttpsHealthCheckPtrOutputWithContext(context.Background())
}

func (o RegionHealthCheckHttpsHealthCheckOutput) ToRegionHealthCheckHttpsHealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckHttpsHealthCheckPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttpsHealthCheck) *RegionHealthCheckHttpsHealthCheck {
		return &v
	}).(RegionHealthCheckHttpsHealthCheckPtrOutput)
}

// The value of the host header in the HTTP2 health check request.
// If left empty (default value), the public IP on behalf of which this health
// check is performed will be used.
func (o RegionHealthCheckHttpsHealthCheckOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttpsHealthCheck) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o RegionHealthCheckHttpsHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttpsHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o RegionHealthCheckHttpsHealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttpsHealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o RegionHealthCheckHttpsHealthCheckOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttpsHealthCheck) *string { return v.PortSpecification }).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o RegionHealthCheckHttpsHealthCheckOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttpsHealthCheck) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

// The request path of the HTTP2 health check request.
// The default value is /.
func (o RegionHealthCheckHttpsHealthCheckOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttpsHealthCheck) *string { return v.RequestPath }).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o RegionHealthCheckHttpsHealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckHttpsHealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type RegionHealthCheckHttpsHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (RegionHealthCheckHttpsHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionHealthCheckHttpsHealthCheck)(nil)).Elem()
}

func (o RegionHealthCheckHttpsHealthCheckPtrOutput) ToRegionHealthCheckHttpsHealthCheckPtrOutput() RegionHealthCheckHttpsHealthCheckPtrOutput {
	return o
}

func (o RegionHealthCheckHttpsHealthCheckPtrOutput) ToRegionHealthCheckHttpsHealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckHttpsHealthCheckPtrOutput {
	return o
}

func (o RegionHealthCheckHttpsHealthCheckPtrOutput) Elem() RegionHealthCheckHttpsHealthCheckOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttpsHealthCheck) RegionHealthCheckHttpsHealthCheck { return *v }).(RegionHealthCheckHttpsHealthCheckOutput)
}

// The value of the host header in the HTTP2 health check request.
// If left empty (default value), the public IP on behalf of which this health
// check is performed will be used.
func (o RegionHealthCheckHttpsHealthCheckPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttpsHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o RegionHealthCheckHttpsHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttpsHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o RegionHealthCheckHttpsHealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttpsHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o RegionHealthCheckHttpsHealthCheckPtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttpsHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o RegionHealthCheckHttpsHealthCheckPtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttpsHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The request path of the HTTP2 health check request.
// The default value is /.
func (o RegionHealthCheckHttpsHealthCheckPtrOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttpsHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.RequestPath
	}).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o RegionHealthCheckHttpsHealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckHttpsHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type RegionHealthCheckLogConfig struct {
	// Indicates whether or not to export logs. This is false by default,
	// which means no health check logging will be done.
	Enable *bool `pulumi:"enable"`
}

// RegionHealthCheckLogConfigInput is an input type that accepts RegionHealthCheckLogConfigArgs and RegionHealthCheckLogConfigOutput values.
// You can construct a concrete instance of `RegionHealthCheckLogConfigInput` via:
//
// 		 RegionHealthCheckLogConfigArgs{...}
//
type RegionHealthCheckLogConfigInput interface {
	pulumi.Input

	ToRegionHealthCheckLogConfigOutput() RegionHealthCheckLogConfigOutput
	ToRegionHealthCheckLogConfigOutputWithContext(context.Context) RegionHealthCheckLogConfigOutput
}

type RegionHealthCheckLogConfigArgs struct {
	// Indicates whether or not to export logs. This is false by default,
	// which means no health check logging will be done.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
}

func (RegionHealthCheckLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionHealthCheckLogConfig)(nil)).Elem()
}

func (i RegionHealthCheckLogConfigArgs) ToRegionHealthCheckLogConfigOutput() RegionHealthCheckLogConfigOutput {
	return i.ToRegionHealthCheckLogConfigOutputWithContext(context.Background())
}

func (i RegionHealthCheckLogConfigArgs) ToRegionHealthCheckLogConfigOutputWithContext(ctx context.Context) RegionHealthCheckLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckLogConfigOutput)
}

func (i RegionHealthCheckLogConfigArgs) ToRegionHealthCheckLogConfigPtrOutput() RegionHealthCheckLogConfigPtrOutput {
	return i.ToRegionHealthCheckLogConfigPtrOutputWithContext(context.Background())
}

func (i RegionHealthCheckLogConfigArgs) ToRegionHealthCheckLogConfigPtrOutputWithContext(ctx context.Context) RegionHealthCheckLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckLogConfigOutput).ToRegionHealthCheckLogConfigPtrOutputWithContext(ctx)
}

// RegionHealthCheckLogConfigPtrInput is an input type that accepts RegionHealthCheckLogConfigArgs, RegionHealthCheckLogConfigPtr and RegionHealthCheckLogConfigPtrOutput values.
// You can construct a concrete instance of `RegionHealthCheckLogConfigPtrInput` via:
//
// 		 RegionHealthCheckLogConfigArgs{...}
//
//  or:
//
// 		 nil
//
type RegionHealthCheckLogConfigPtrInput interface {
	pulumi.Input

	ToRegionHealthCheckLogConfigPtrOutput() RegionHealthCheckLogConfigPtrOutput
	ToRegionHealthCheckLogConfigPtrOutputWithContext(context.Context) RegionHealthCheckLogConfigPtrOutput
}

type regionHealthCheckLogConfigPtrType RegionHealthCheckLogConfigArgs

func RegionHealthCheckLogConfigPtr(v *RegionHealthCheckLogConfigArgs) RegionHealthCheckLogConfigPtrInput {
	return (*regionHealthCheckLogConfigPtrType)(v)
}

func (*regionHealthCheckLogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionHealthCheckLogConfig)(nil)).Elem()
}

func (i *regionHealthCheckLogConfigPtrType) ToRegionHealthCheckLogConfigPtrOutput() RegionHealthCheckLogConfigPtrOutput {
	return i.ToRegionHealthCheckLogConfigPtrOutputWithContext(context.Background())
}

func (i *regionHealthCheckLogConfigPtrType) ToRegionHealthCheckLogConfigPtrOutputWithContext(ctx context.Context) RegionHealthCheckLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckLogConfigPtrOutput)
}

type RegionHealthCheckLogConfigOutput struct{ *pulumi.OutputState }

func (RegionHealthCheckLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionHealthCheckLogConfig)(nil)).Elem()
}

func (o RegionHealthCheckLogConfigOutput) ToRegionHealthCheckLogConfigOutput() RegionHealthCheckLogConfigOutput {
	return o
}

func (o RegionHealthCheckLogConfigOutput) ToRegionHealthCheckLogConfigOutputWithContext(ctx context.Context) RegionHealthCheckLogConfigOutput {
	return o
}

func (o RegionHealthCheckLogConfigOutput) ToRegionHealthCheckLogConfigPtrOutput() RegionHealthCheckLogConfigPtrOutput {
	return o.ToRegionHealthCheckLogConfigPtrOutputWithContext(context.Background())
}

func (o RegionHealthCheckLogConfigOutput) ToRegionHealthCheckLogConfigPtrOutputWithContext(ctx context.Context) RegionHealthCheckLogConfigPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckLogConfig) *RegionHealthCheckLogConfig {
		return &v
	}).(RegionHealthCheckLogConfigPtrOutput)
}

// Indicates whether or not to export logs. This is false by default,
// which means no health check logging will be done.
func (o RegionHealthCheckLogConfigOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckLogConfig) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

type RegionHealthCheckLogConfigPtrOutput struct{ *pulumi.OutputState }

func (RegionHealthCheckLogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionHealthCheckLogConfig)(nil)).Elem()
}

func (o RegionHealthCheckLogConfigPtrOutput) ToRegionHealthCheckLogConfigPtrOutput() RegionHealthCheckLogConfigPtrOutput {
	return o
}

func (o RegionHealthCheckLogConfigPtrOutput) ToRegionHealthCheckLogConfigPtrOutputWithContext(ctx context.Context) RegionHealthCheckLogConfigPtrOutput {
	return o
}

func (o RegionHealthCheckLogConfigPtrOutput) Elem() RegionHealthCheckLogConfigOutput {
	return o.ApplyT(func(v *RegionHealthCheckLogConfig) RegionHealthCheckLogConfig { return *v }).(RegionHealthCheckLogConfigOutput)
}

// Indicates whether or not to export logs. This is false by default,
// which means no health check logging will be done.
func (o RegionHealthCheckLogConfigPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckLogConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

type RegionHealthCheckSslHealthCheck struct {
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port *int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName *string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification *string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *string `pulumi:"proxyHeader"`
	// The application data to send once the SSL connection has been
	// established (default value is empty). If both request and response are
	// empty, the connection establishment alone will indicate health. The request
	// data can only be ASCII.
	Request *string `pulumi:"request"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response *string `pulumi:"response"`
}

// RegionHealthCheckSslHealthCheckInput is an input type that accepts RegionHealthCheckSslHealthCheckArgs and RegionHealthCheckSslHealthCheckOutput values.
// You can construct a concrete instance of `RegionHealthCheckSslHealthCheckInput` via:
//
// 		 RegionHealthCheckSslHealthCheckArgs{...}
//
type RegionHealthCheckSslHealthCheckInput interface {
	pulumi.Input

	ToRegionHealthCheckSslHealthCheckOutput() RegionHealthCheckSslHealthCheckOutput
	ToRegionHealthCheckSslHealthCheckOutputWithContext(context.Context) RegionHealthCheckSslHealthCheckOutput
}

type RegionHealthCheckSslHealthCheckArgs struct {
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification pulumi.StringPtrInput `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader pulumi.StringPtrInput `pulumi:"proxyHeader"`
	// The application data to send once the SSL connection has been
	// established (default value is empty). If both request and response are
	// empty, the connection establishment alone will indicate health. The request
	// data can only be ASCII.
	Request pulumi.StringPtrInput `pulumi:"request"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (RegionHealthCheckSslHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionHealthCheckSslHealthCheck)(nil)).Elem()
}

func (i RegionHealthCheckSslHealthCheckArgs) ToRegionHealthCheckSslHealthCheckOutput() RegionHealthCheckSslHealthCheckOutput {
	return i.ToRegionHealthCheckSslHealthCheckOutputWithContext(context.Background())
}

func (i RegionHealthCheckSslHealthCheckArgs) ToRegionHealthCheckSslHealthCheckOutputWithContext(ctx context.Context) RegionHealthCheckSslHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckSslHealthCheckOutput)
}

func (i RegionHealthCheckSslHealthCheckArgs) ToRegionHealthCheckSslHealthCheckPtrOutput() RegionHealthCheckSslHealthCheckPtrOutput {
	return i.ToRegionHealthCheckSslHealthCheckPtrOutputWithContext(context.Background())
}

func (i RegionHealthCheckSslHealthCheckArgs) ToRegionHealthCheckSslHealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckSslHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckSslHealthCheckOutput).ToRegionHealthCheckSslHealthCheckPtrOutputWithContext(ctx)
}

// RegionHealthCheckSslHealthCheckPtrInput is an input type that accepts RegionHealthCheckSslHealthCheckArgs, RegionHealthCheckSslHealthCheckPtr and RegionHealthCheckSslHealthCheckPtrOutput values.
// You can construct a concrete instance of `RegionHealthCheckSslHealthCheckPtrInput` via:
//
// 		 RegionHealthCheckSslHealthCheckArgs{...}
//
//  or:
//
// 		 nil
//
type RegionHealthCheckSslHealthCheckPtrInput interface {
	pulumi.Input

	ToRegionHealthCheckSslHealthCheckPtrOutput() RegionHealthCheckSslHealthCheckPtrOutput
	ToRegionHealthCheckSslHealthCheckPtrOutputWithContext(context.Context) RegionHealthCheckSslHealthCheckPtrOutput
}

type regionHealthCheckSslHealthCheckPtrType RegionHealthCheckSslHealthCheckArgs

func RegionHealthCheckSslHealthCheckPtr(v *RegionHealthCheckSslHealthCheckArgs) RegionHealthCheckSslHealthCheckPtrInput {
	return (*regionHealthCheckSslHealthCheckPtrType)(v)
}

func (*regionHealthCheckSslHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionHealthCheckSslHealthCheck)(nil)).Elem()
}

func (i *regionHealthCheckSslHealthCheckPtrType) ToRegionHealthCheckSslHealthCheckPtrOutput() RegionHealthCheckSslHealthCheckPtrOutput {
	return i.ToRegionHealthCheckSslHealthCheckPtrOutputWithContext(context.Background())
}

func (i *regionHealthCheckSslHealthCheckPtrType) ToRegionHealthCheckSslHealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckSslHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckSslHealthCheckPtrOutput)
}

type RegionHealthCheckSslHealthCheckOutput struct{ *pulumi.OutputState }

func (RegionHealthCheckSslHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionHealthCheckSslHealthCheck)(nil)).Elem()
}

func (o RegionHealthCheckSslHealthCheckOutput) ToRegionHealthCheckSslHealthCheckOutput() RegionHealthCheckSslHealthCheckOutput {
	return o
}

func (o RegionHealthCheckSslHealthCheckOutput) ToRegionHealthCheckSslHealthCheckOutputWithContext(ctx context.Context) RegionHealthCheckSslHealthCheckOutput {
	return o
}

func (o RegionHealthCheckSslHealthCheckOutput) ToRegionHealthCheckSslHealthCheckPtrOutput() RegionHealthCheckSslHealthCheckPtrOutput {
	return o.ToRegionHealthCheckSslHealthCheckPtrOutputWithContext(context.Background())
}

func (o RegionHealthCheckSslHealthCheckOutput) ToRegionHealthCheckSslHealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckSslHealthCheckPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckSslHealthCheck) *RegionHealthCheckSslHealthCheck {
		return &v
	}).(RegionHealthCheckSslHealthCheckPtrOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o RegionHealthCheckSslHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckSslHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o RegionHealthCheckSslHealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckSslHealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o RegionHealthCheckSslHealthCheckOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckSslHealthCheck) *string { return v.PortSpecification }).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o RegionHealthCheckSslHealthCheckOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckSslHealthCheck) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

// The application data to send once the SSL connection has been
// established (default value is empty). If both request and response are
// empty, the connection establishment alone will indicate health. The request
// data can only be ASCII.
func (o RegionHealthCheckSslHealthCheckOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckSslHealthCheck) *string { return v.Request }).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o RegionHealthCheckSslHealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckSslHealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type RegionHealthCheckSslHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (RegionHealthCheckSslHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionHealthCheckSslHealthCheck)(nil)).Elem()
}

func (o RegionHealthCheckSslHealthCheckPtrOutput) ToRegionHealthCheckSslHealthCheckPtrOutput() RegionHealthCheckSslHealthCheckPtrOutput {
	return o
}

func (o RegionHealthCheckSslHealthCheckPtrOutput) ToRegionHealthCheckSslHealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckSslHealthCheckPtrOutput {
	return o
}

func (o RegionHealthCheckSslHealthCheckPtrOutput) Elem() RegionHealthCheckSslHealthCheckOutput {
	return o.ApplyT(func(v *RegionHealthCheckSslHealthCheck) RegionHealthCheckSslHealthCheck { return *v }).(RegionHealthCheckSslHealthCheckOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o RegionHealthCheckSslHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckSslHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o RegionHealthCheckSslHealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckSslHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o RegionHealthCheckSslHealthCheckPtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckSslHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o RegionHealthCheckSslHealthCheckPtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckSslHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The application data to send once the SSL connection has been
// established (default value is empty). If both request and response are
// empty, the connection establishment alone will indicate health. The request
// data can only be ASCII.
func (o RegionHealthCheckSslHealthCheckPtrOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckSslHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Request
	}).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o RegionHealthCheckSslHealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckSslHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type RegionHealthCheckTcpHealthCheck struct {
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port *int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName *string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification *string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *string `pulumi:"proxyHeader"`
	// The application data to send once the SSL connection has been
	// established (default value is empty). If both request and response are
	// empty, the connection establishment alone will indicate health. The request
	// data can only be ASCII.
	Request *string `pulumi:"request"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response *string `pulumi:"response"`
}

// RegionHealthCheckTcpHealthCheckInput is an input type that accepts RegionHealthCheckTcpHealthCheckArgs and RegionHealthCheckTcpHealthCheckOutput values.
// You can construct a concrete instance of `RegionHealthCheckTcpHealthCheckInput` via:
//
// 		 RegionHealthCheckTcpHealthCheckArgs{...}
//
type RegionHealthCheckTcpHealthCheckInput interface {
	pulumi.Input

	ToRegionHealthCheckTcpHealthCheckOutput() RegionHealthCheckTcpHealthCheckOutput
	ToRegionHealthCheckTcpHealthCheckOutputWithContext(context.Context) RegionHealthCheckTcpHealthCheckOutput
}

type RegionHealthCheckTcpHealthCheckArgs struct {
	// The TCP port number for the HTTP2 health check request.
	// The default value is 443.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and
	// portName are defined, port takes precedence.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of the
	// following values:
	// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
	// * `USE_NAMED_PORT`: The `portName` is used for health checking.
	// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
	// network endpoint is used for health checking. For other backends, the
	// port or named port specified in the Backend Service is used for health
	// checking.
	// If not specified, HTTP2 health check follows behavior specified in `port` and
	// `portName` fields.
	PortSpecification pulumi.StringPtrInput `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the
	// backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader pulumi.StringPtrInput `pulumi:"proxyHeader"`
	// The application data to send once the SSL connection has been
	// established (default value is empty). If both request and response are
	// empty, the connection establishment alone will indicate health. The request
	// data can only be ASCII.
	Request pulumi.StringPtrInput `pulumi:"request"`
	// The bytes to match against the beginning of the response data. If left empty
	// (the default value), any response will indicate health. The response data
	// can only be ASCII.
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (RegionHealthCheckTcpHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionHealthCheckTcpHealthCheck)(nil)).Elem()
}

func (i RegionHealthCheckTcpHealthCheckArgs) ToRegionHealthCheckTcpHealthCheckOutput() RegionHealthCheckTcpHealthCheckOutput {
	return i.ToRegionHealthCheckTcpHealthCheckOutputWithContext(context.Background())
}

func (i RegionHealthCheckTcpHealthCheckArgs) ToRegionHealthCheckTcpHealthCheckOutputWithContext(ctx context.Context) RegionHealthCheckTcpHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckTcpHealthCheckOutput)
}

func (i RegionHealthCheckTcpHealthCheckArgs) ToRegionHealthCheckTcpHealthCheckPtrOutput() RegionHealthCheckTcpHealthCheckPtrOutput {
	return i.ToRegionHealthCheckTcpHealthCheckPtrOutputWithContext(context.Background())
}

func (i RegionHealthCheckTcpHealthCheckArgs) ToRegionHealthCheckTcpHealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckTcpHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckTcpHealthCheckOutput).ToRegionHealthCheckTcpHealthCheckPtrOutputWithContext(ctx)
}

// RegionHealthCheckTcpHealthCheckPtrInput is an input type that accepts RegionHealthCheckTcpHealthCheckArgs, RegionHealthCheckTcpHealthCheckPtr and RegionHealthCheckTcpHealthCheckPtrOutput values.
// You can construct a concrete instance of `RegionHealthCheckTcpHealthCheckPtrInput` via:
//
// 		 RegionHealthCheckTcpHealthCheckArgs{...}
//
//  or:
//
// 		 nil
//
type RegionHealthCheckTcpHealthCheckPtrInput interface {
	pulumi.Input

	ToRegionHealthCheckTcpHealthCheckPtrOutput() RegionHealthCheckTcpHealthCheckPtrOutput
	ToRegionHealthCheckTcpHealthCheckPtrOutputWithContext(context.Context) RegionHealthCheckTcpHealthCheckPtrOutput
}

type regionHealthCheckTcpHealthCheckPtrType RegionHealthCheckTcpHealthCheckArgs

func RegionHealthCheckTcpHealthCheckPtr(v *RegionHealthCheckTcpHealthCheckArgs) RegionHealthCheckTcpHealthCheckPtrInput {
	return (*regionHealthCheckTcpHealthCheckPtrType)(v)
}

func (*regionHealthCheckTcpHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionHealthCheckTcpHealthCheck)(nil)).Elem()
}

func (i *regionHealthCheckTcpHealthCheckPtrType) ToRegionHealthCheckTcpHealthCheckPtrOutput() RegionHealthCheckTcpHealthCheckPtrOutput {
	return i.ToRegionHealthCheckTcpHealthCheckPtrOutputWithContext(context.Background())
}

func (i *regionHealthCheckTcpHealthCheckPtrType) ToRegionHealthCheckTcpHealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckTcpHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckTcpHealthCheckPtrOutput)
}

type RegionHealthCheckTcpHealthCheckOutput struct{ *pulumi.OutputState }

func (RegionHealthCheckTcpHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionHealthCheckTcpHealthCheck)(nil)).Elem()
}

func (o RegionHealthCheckTcpHealthCheckOutput) ToRegionHealthCheckTcpHealthCheckOutput() RegionHealthCheckTcpHealthCheckOutput {
	return o
}

func (o RegionHealthCheckTcpHealthCheckOutput) ToRegionHealthCheckTcpHealthCheckOutputWithContext(ctx context.Context) RegionHealthCheckTcpHealthCheckOutput {
	return o
}

func (o RegionHealthCheckTcpHealthCheckOutput) ToRegionHealthCheckTcpHealthCheckPtrOutput() RegionHealthCheckTcpHealthCheckPtrOutput {
	return o.ToRegionHealthCheckTcpHealthCheckPtrOutputWithContext(context.Background())
}

func (o RegionHealthCheckTcpHealthCheckOutput) ToRegionHealthCheckTcpHealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckTcpHealthCheckPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckTcpHealthCheck) *RegionHealthCheckTcpHealthCheck {
		return &v
	}).(RegionHealthCheckTcpHealthCheckPtrOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o RegionHealthCheckTcpHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckTcpHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o RegionHealthCheckTcpHealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckTcpHealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o RegionHealthCheckTcpHealthCheckOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckTcpHealthCheck) *string { return v.PortSpecification }).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o RegionHealthCheckTcpHealthCheckOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckTcpHealthCheck) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

// The application data to send once the SSL connection has been
// established (default value is empty). If both request and response are
// empty, the connection establishment alone will indicate health. The request
// data can only be ASCII.
func (o RegionHealthCheckTcpHealthCheckOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckTcpHealthCheck) *string { return v.Request }).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o RegionHealthCheckTcpHealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionHealthCheckTcpHealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type RegionHealthCheckTcpHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (RegionHealthCheckTcpHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionHealthCheckTcpHealthCheck)(nil)).Elem()
}

func (o RegionHealthCheckTcpHealthCheckPtrOutput) ToRegionHealthCheckTcpHealthCheckPtrOutput() RegionHealthCheckTcpHealthCheckPtrOutput {
	return o
}

func (o RegionHealthCheckTcpHealthCheckPtrOutput) ToRegionHealthCheckTcpHealthCheckPtrOutputWithContext(ctx context.Context) RegionHealthCheckTcpHealthCheckPtrOutput {
	return o
}

func (o RegionHealthCheckTcpHealthCheckPtrOutput) Elem() RegionHealthCheckTcpHealthCheckOutput {
	return o.ApplyT(func(v *RegionHealthCheckTcpHealthCheck) RegionHealthCheckTcpHealthCheck { return *v }).(RegionHealthCheckTcpHealthCheckOutput)
}

// The TCP port number for the HTTP2 health check request.
// The default value is 443.
func (o RegionHealthCheckTcpHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckTcpHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and
// portName are defined, port takes precedence.
func (o RegionHealthCheckTcpHealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckTcpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of the
// following values:
// * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
// * `USE_NAMED_PORT`: The `portName` is used for health checking.
// * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
// network endpoint is used for health checking. For other backends, the
// port or named port specified in the Backend Service is used for health
// checking.
// If not specified, HTTP2 health check follows behavior specified in `port` and
// `portName` fields.
func (o RegionHealthCheckTcpHealthCheckPtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckTcpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the
// backend, either NONE or PROXY_V1. The default is NONE.
func (o RegionHealthCheckTcpHealthCheckPtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckTcpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The application data to send once the SSL connection has been
// established (default value is empty). If both request and response are
// empty, the connection establishment alone will indicate health. The request
// data can only be ASCII.
func (o RegionHealthCheckTcpHealthCheckPtrOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckTcpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Request
	}).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty
// (the default value), any response will indicate health. The response data
// can only be ASCII.
func (o RegionHealthCheckTcpHealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckTcpHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type RegionInstanceGroupManagerAutoHealingPolicies struct {
	// The health check resource that signals autohealing.
	HealthCheck string `pulumi:"healthCheck"`
	// The number of seconds that the managed instance group waits before
	// it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.
	InitialDelaySec int `pulumi:"initialDelaySec"`
}

// RegionInstanceGroupManagerAutoHealingPoliciesInput is an input type that accepts RegionInstanceGroupManagerAutoHealingPoliciesArgs and RegionInstanceGroupManagerAutoHealingPoliciesOutput values.
// You can construct a concrete instance of `RegionInstanceGroupManagerAutoHealingPoliciesInput` via:
//
// 		 RegionInstanceGroupManagerAutoHealingPoliciesArgs{...}
//
type RegionInstanceGroupManagerAutoHealingPoliciesInput interface {
	pulumi.Input

	ToRegionInstanceGroupManagerAutoHealingPoliciesOutput() RegionInstanceGroupManagerAutoHealingPoliciesOutput
	ToRegionInstanceGroupManagerAutoHealingPoliciesOutputWithContext(context.Context) RegionInstanceGroupManagerAutoHealingPoliciesOutput
}

type RegionInstanceGroupManagerAutoHealingPoliciesArgs struct {
	// The health check resource that signals autohealing.
	HealthCheck pulumi.StringInput `pulumi:"healthCheck"`
	// The number of seconds that the managed instance group waits before
	// it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.
	InitialDelaySec pulumi.IntInput `pulumi:"initialDelaySec"`
}

func (RegionInstanceGroupManagerAutoHealingPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionInstanceGroupManagerAutoHealingPolicies)(nil)).Elem()
}

func (i RegionInstanceGroupManagerAutoHealingPoliciesArgs) ToRegionInstanceGroupManagerAutoHealingPoliciesOutput() RegionInstanceGroupManagerAutoHealingPoliciesOutput {
	return i.ToRegionInstanceGroupManagerAutoHealingPoliciesOutputWithContext(context.Background())
}

func (i RegionInstanceGroupManagerAutoHealingPoliciesArgs) ToRegionInstanceGroupManagerAutoHealingPoliciesOutputWithContext(ctx context.Context) RegionInstanceGroupManagerAutoHealingPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionInstanceGroupManagerAutoHealingPoliciesOutput)
}

func (i RegionInstanceGroupManagerAutoHealingPoliciesArgs) ToRegionInstanceGroupManagerAutoHealingPoliciesPtrOutput() RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput {
	return i.ToRegionInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(context.Background())
}

func (i RegionInstanceGroupManagerAutoHealingPoliciesArgs) ToRegionInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(ctx context.Context) RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionInstanceGroupManagerAutoHealingPoliciesOutput).ToRegionInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(ctx)
}

// RegionInstanceGroupManagerAutoHealingPoliciesPtrInput is an input type that accepts RegionInstanceGroupManagerAutoHealingPoliciesArgs, RegionInstanceGroupManagerAutoHealingPoliciesPtr and RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput values.
// You can construct a concrete instance of `RegionInstanceGroupManagerAutoHealingPoliciesPtrInput` via:
//
// 		 RegionInstanceGroupManagerAutoHealingPoliciesArgs{...}
//
//  or:
//
// 		 nil
//
type RegionInstanceGroupManagerAutoHealingPoliciesPtrInput interface {
	pulumi.Input

	ToRegionInstanceGroupManagerAutoHealingPoliciesPtrOutput() RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput
	ToRegionInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(context.Context) RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput
}

type regionInstanceGroupManagerAutoHealingPoliciesPtrType RegionInstanceGroupManagerAutoHealingPoliciesArgs

func RegionInstanceGroupManagerAutoHealingPoliciesPtr(v *RegionInstanceGroupManagerAutoHealingPoliciesArgs) RegionInstanceGroupManagerAutoHealingPoliciesPtrInput {
	return (*regionInstanceGroupManagerAutoHealingPoliciesPtrType)(v)
}

func (*regionInstanceGroupManagerAutoHealingPoliciesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionInstanceGroupManagerAutoHealingPolicies)(nil)).Elem()
}

func (i *regionInstanceGroupManagerAutoHealingPoliciesPtrType) ToRegionInstanceGroupManagerAutoHealingPoliciesPtrOutput() RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput {
	return i.ToRegionInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(context.Background())
}

func (i *regionInstanceGroupManagerAutoHealingPoliciesPtrType) ToRegionInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(ctx context.Context) RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput)
}

type RegionInstanceGroupManagerAutoHealingPoliciesOutput struct{ *pulumi.OutputState }

func (RegionInstanceGroupManagerAutoHealingPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionInstanceGroupManagerAutoHealingPolicies)(nil)).Elem()
}

func (o RegionInstanceGroupManagerAutoHealingPoliciesOutput) ToRegionInstanceGroupManagerAutoHealingPoliciesOutput() RegionInstanceGroupManagerAutoHealingPoliciesOutput {
	return o
}

func (o RegionInstanceGroupManagerAutoHealingPoliciesOutput) ToRegionInstanceGroupManagerAutoHealingPoliciesOutputWithContext(ctx context.Context) RegionInstanceGroupManagerAutoHealingPoliciesOutput {
	return o
}

func (o RegionInstanceGroupManagerAutoHealingPoliciesOutput) ToRegionInstanceGroupManagerAutoHealingPoliciesPtrOutput() RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput {
	return o.ToRegionInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(context.Background())
}

func (o RegionInstanceGroupManagerAutoHealingPoliciesOutput) ToRegionInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(ctx context.Context) RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerAutoHealingPolicies) *RegionInstanceGroupManagerAutoHealingPolicies {
		return &v
	}).(RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput)
}

// The health check resource that signals autohealing.
func (o RegionInstanceGroupManagerAutoHealingPoliciesOutput) HealthCheck() pulumi.StringOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerAutoHealingPolicies) string { return v.HealthCheck }).(pulumi.StringOutput)
}

// The number of seconds that the managed instance group waits before
// it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.
func (o RegionInstanceGroupManagerAutoHealingPoliciesOutput) InitialDelaySec() pulumi.IntOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerAutoHealingPolicies) int { return v.InitialDelaySec }).(pulumi.IntOutput)
}

type RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput struct{ *pulumi.OutputState }

func (RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionInstanceGroupManagerAutoHealingPolicies)(nil)).Elem()
}

func (o RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput) ToRegionInstanceGroupManagerAutoHealingPoliciesPtrOutput() RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput {
	return o
}

func (o RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput) ToRegionInstanceGroupManagerAutoHealingPoliciesPtrOutputWithContext(ctx context.Context) RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput {
	return o
}

func (o RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput) Elem() RegionInstanceGroupManagerAutoHealingPoliciesOutput {
	return o.ApplyT(func(v *RegionInstanceGroupManagerAutoHealingPolicies) RegionInstanceGroupManagerAutoHealingPolicies {
		return *v
	}).(RegionInstanceGroupManagerAutoHealingPoliciesOutput)
}

// The health check resource that signals autohealing.
func (o RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionInstanceGroupManagerAutoHealingPolicies) *string {
		if v == nil {
			return nil
		}
		return &v.HealthCheck
	}).(pulumi.StringPtrOutput)
}

// The number of seconds that the managed instance group waits before
// it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.
func (o RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput) InitialDelaySec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionInstanceGroupManagerAutoHealingPolicies) *int {
		if v == nil {
			return nil
		}
		return &v.InitialDelaySec
	}).(pulumi.IntPtrOutput)
}

type RegionInstanceGroupManagerNamedPort struct {
	// - Version name.
	Name string `pulumi:"name"`
	// The port number.
	// - - -
	Port int `pulumi:"port"`
}

// RegionInstanceGroupManagerNamedPortInput is an input type that accepts RegionInstanceGroupManagerNamedPortArgs and RegionInstanceGroupManagerNamedPortOutput values.
// You can construct a concrete instance of `RegionInstanceGroupManagerNamedPortInput` via:
//
// 		 RegionInstanceGroupManagerNamedPortArgs{...}
//
type RegionInstanceGroupManagerNamedPortInput interface {
	pulumi.Input

	ToRegionInstanceGroupManagerNamedPortOutput() RegionInstanceGroupManagerNamedPortOutput
	ToRegionInstanceGroupManagerNamedPortOutputWithContext(context.Context) RegionInstanceGroupManagerNamedPortOutput
}

type RegionInstanceGroupManagerNamedPortArgs struct {
	// - Version name.
	Name pulumi.StringInput `pulumi:"name"`
	// The port number.
	// - - -
	Port pulumi.IntInput `pulumi:"port"`
}

func (RegionInstanceGroupManagerNamedPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionInstanceGroupManagerNamedPort)(nil)).Elem()
}

func (i RegionInstanceGroupManagerNamedPortArgs) ToRegionInstanceGroupManagerNamedPortOutput() RegionInstanceGroupManagerNamedPortOutput {
	return i.ToRegionInstanceGroupManagerNamedPortOutputWithContext(context.Background())
}

func (i RegionInstanceGroupManagerNamedPortArgs) ToRegionInstanceGroupManagerNamedPortOutputWithContext(ctx context.Context) RegionInstanceGroupManagerNamedPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionInstanceGroupManagerNamedPortOutput)
}

// RegionInstanceGroupManagerNamedPortArrayInput is an input type that accepts RegionInstanceGroupManagerNamedPortArray and RegionInstanceGroupManagerNamedPortArrayOutput values.
// You can construct a concrete instance of `RegionInstanceGroupManagerNamedPortArrayInput` via:
//
// 		 RegionInstanceGroupManagerNamedPortArray{ RegionInstanceGroupManagerNamedPortArgs{...} }
//
type RegionInstanceGroupManagerNamedPortArrayInput interface {
	pulumi.Input

	ToRegionInstanceGroupManagerNamedPortArrayOutput() RegionInstanceGroupManagerNamedPortArrayOutput
	ToRegionInstanceGroupManagerNamedPortArrayOutputWithContext(context.Context) RegionInstanceGroupManagerNamedPortArrayOutput
}

type RegionInstanceGroupManagerNamedPortArray []RegionInstanceGroupManagerNamedPortInput

func (RegionInstanceGroupManagerNamedPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionInstanceGroupManagerNamedPort)(nil)).Elem()
}

func (i RegionInstanceGroupManagerNamedPortArray) ToRegionInstanceGroupManagerNamedPortArrayOutput() RegionInstanceGroupManagerNamedPortArrayOutput {
	return i.ToRegionInstanceGroupManagerNamedPortArrayOutputWithContext(context.Background())
}

func (i RegionInstanceGroupManagerNamedPortArray) ToRegionInstanceGroupManagerNamedPortArrayOutputWithContext(ctx context.Context) RegionInstanceGroupManagerNamedPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionInstanceGroupManagerNamedPortArrayOutput)
}

type RegionInstanceGroupManagerNamedPortOutput struct{ *pulumi.OutputState }

func (RegionInstanceGroupManagerNamedPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionInstanceGroupManagerNamedPort)(nil)).Elem()
}

func (o RegionInstanceGroupManagerNamedPortOutput) ToRegionInstanceGroupManagerNamedPortOutput() RegionInstanceGroupManagerNamedPortOutput {
	return o
}

func (o RegionInstanceGroupManagerNamedPortOutput) ToRegionInstanceGroupManagerNamedPortOutputWithContext(ctx context.Context) RegionInstanceGroupManagerNamedPortOutput {
	return o
}

// - Version name.
func (o RegionInstanceGroupManagerNamedPortOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerNamedPort) string { return v.Name }).(pulumi.StringOutput)
}

// The port number.
// - - -
func (o RegionInstanceGroupManagerNamedPortOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerNamedPort) int { return v.Port }).(pulumi.IntOutput)
}

type RegionInstanceGroupManagerNamedPortArrayOutput struct{ *pulumi.OutputState }

func (RegionInstanceGroupManagerNamedPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionInstanceGroupManagerNamedPort)(nil)).Elem()
}

func (o RegionInstanceGroupManagerNamedPortArrayOutput) ToRegionInstanceGroupManagerNamedPortArrayOutput() RegionInstanceGroupManagerNamedPortArrayOutput {
	return o
}

func (o RegionInstanceGroupManagerNamedPortArrayOutput) ToRegionInstanceGroupManagerNamedPortArrayOutputWithContext(ctx context.Context) RegionInstanceGroupManagerNamedPortArrayOutput {
	return o
}

func (o RegionInstanceGroupManagerNamedPortArrayOutput) Index(i pulumi.IntInput) RegionInstanceGroupManagerNamedPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionInstanceGroupManagerNamedPort {
		return vs[0].([]RegionInstanceGroupManagerNamedPort)[vs[1].(int)]
	}).(RegionInstanceGroupManagerNamedPortOutput)
}

type RegionInstanceGroupManagerUpdatePolicy struct {
	// - The instance redistribution policy for regional managed instance groups. Valid values are: `"PROACTIVE"`, `"NONE"`. If `PROACTIVE` (default), the group attempts to maintain an even distribution of VM instances across zones in the region. If `NONE`, proactive redistribution is disabled.
	InstanceRedistributionType *string `pulumi:"instanceRedistributionType"`
	// , The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with `maxSurgePercent`. It has to be either 0 or at least equal to the number of zones.  If fixed values are used, at least one of `maxUnavailableFixed` or `maxSurgeFixed` must be greater than 0.
	MaxSurgeFixed *int `pulumi:"maxSurgeFixed"`
	// , The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with `maxSurgeFixed`. Percent value is only allowed for regional managed instance groups with size at least 10.
	MaxSurgePercent *int `pulumi:"maxSurgePercent"`
	// , The maximum number of instances that can be unavailable during the update process. Conflicts with `maxUnavailablePercent`. It has to be either 0 or at least equal to the number of zones. If fixed values are used, at least one of `maxUnavailableFixed` or `maxSurgeFixed` must be greater than 0.
	MaxUnavailableFixed *int `pulumi:"maxUnavailableFixed"`
	// , The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with `maxUnavailableFixed`. Percent value is only allowed for regional managed instance groups with size at least 10.
	MaxUnavailablePercent *int `pulumi:"maxUnavailablePercent"`
	// , Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600]
	// - - -
	MinReadySec *int `pulumi:"minReadySec"`
	// - Minimal action to be taken on an instance. You can specify either `RESTART` to restart existing instances or `REPLACE` to delete and create new instances from the target template. If you specify a `RESTART`, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
	MinimalAction string `pulumi:"minimalAction"`
	// - The type of update process. You can specify either `PROACTIVE` so that the instance group manager proactively executes actions in order to bring instances to their target versions or `OPPORTUNISTIC` so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
	Type string `pulumi:"type"`
}

// RegionInstanceGroupManagerUpdatePolicyInput is an input type that accepts RegionInstanceGroupManagerUpdatePolicyArgs and RegionInstanceGroupManagerUpdatePolicyOutput values.
// You can construct a concrete instance of `RegionInstanceGroupManagerUpdatePolicyInput` via:
//
// 		 RegionInstanceGroupManagerUpdatePolicyArgs{...}
//
type RegionInstanceGroupManagerUpdatePolicyInput interface {
	pulumi.Input

	ToRegionInstanceGroupManagerUpdatePolicyOutput() RegionInstanceGroupManagerUpdatePolicyOutput
	ToRegionInstanceGroupManagerUpdatePolicyOutputWithContext(context.Context) RegionInstanceGroupManagerUpdatePolicyOutput
}

type RegionInstanceGroupManagerUpdatePolicyArgs struct {
	// - The instance redistribution policy for regional managed instance groups. Valid values are: `"PROACTIVE"`, `"NONE"`. If `PROACTIVE` (default), the group attempts to maintain an even distribution of VM instances across zones in the region. If `NONE`, proactive redistribution is disabled.
	InstanceRedistributionType pulumi.StringPtrInput `pulumi:"instanceRedistributionType"`
	// , The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with `maxSurgePercent`. It has to be either 0 or at least equal to the number of zones.  If fixed values are used, at least one of `maxUnavailableFixed` or `maxSurgeFixed` must be greater than 0.
	MaxSurgeFixed pulumi.IntPtrInput `pulumi:"maxSurgeFixed"`
	// , The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with `maxSurgeFixed`. Percent value is only allowed for regional managed instance groups with size at least 10.
	MaxSurgePercent pulumi.IntPtrInput `pulumi:"maxSurgePercent"`
	// , The maximum number of instances that can be unavailable during the update process. Conflicts with `maxUnavailablePercent`. It has to be either 0 or at least equal to the number of zones. If fixed values are used, at least one of `maxUnavailableFixed` or `maxSurgeFixed` must be greater than 0.
	MaxUnavailableFixed pulumi.IntPtrInput `pulumi:"maxUnavailableFixed"`
	// , The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with `maxUnavailableFixed`. Percent value is only allowed for regional managed instance groups with size at least 10.
	MaxUnavailablePercent pulumi.IntPtrInput `pulumi:"maxUnavailablePercent"`
	// , Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600]
	// - - -
	MinReadySec pulumi.IntPtrInput `pulumi:"minReadySec"`
	// - Minimal action to be taken on an instance. You can specify either `RESTART` to restart existing instances or `REPLACE` to delete and create new instances from the target template. If you specify a `RESTART`, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
	MinimalAction pulumi.StringInput `pulumi:"minimalAction"`
	// - The type of update process. You can specify either `PROACTIVE` so that the instance group manager proactively executes actions in order to bring instances to their target versions or `OPPORTUNISTIC` so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
	Type pulumi.StringInput `pulumi:"type"`
}

func (RegionInstanceGroupManagerUpdatePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionInstanceGroupManagerUpdatePolicy)(nil)).Elem()
}

func (i RegionInstanceGroupManagerUpdatePolicyArgs) ToRegionInstanceGroupManagerUpdatePolicyOutput() RegionInstanceGroupManagerUpdatePolicyOutput {
	return i.ToRegionInstanceGroupManagerUpdatePolicyOutputWithContext(context.Background())
}

func (i RegionInstanceGroupManagerUpdatePolicyArgs) ToRegionInstanceGroupManagerUpdatePolicyOutputWithContext(ctx context.Context) RegionInstanceGroupManagerUpdatePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionInstanceGroupManagerUpdatePolicyOutput)
}

func (i RegionInstanceGroupManagerUpdatePolicyArgs) ToRegionInstanceGroupManagerUpdatePolicyPtrOutput() RegionInstanceGroupManagerUpdatePolicyPtrOutput {
	return i.ToRegionInstanceGroupManagerUpdatePolicyPtrOutputWithContext(context.Background())
}

func (i RegionInstanceGroupManagerUpdatePolicyArgs) ToRegionInstanceGroupManagerUpdatePolicyPtrOutputWithContext(ctx context.Context) RegionInstanceGroupManagerUpdatePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionInstanceGroupManagerUpdatePolicyOutput).ToRegionInstanceGroupManagerUpdatePolicyPtrOutputWithContext(ctx)
}

// RegionInstanceGroupManagerUpdatePolicyPtrInput is an input type that accepts RegionInstanceGroupManagerUpdatePolicyArgs, RegionInstanceGroupManagerUpdatePolicyPtr and RegionInstanceGroupManagerUpdatePolicyPtrOutput values.
// You can construct a concrete instance of `RegionInstanceGroupManagerUpdatePolicyPtrInput` via:
//
// 		 RegionInstanceGroupManagerUpdatePolicyArgs{...}
//
//  or:
//
// 		 nil
//
type RegionInstanceGroupManagerUpdatePolicyPtrInput interface {
	pulumi.Input

	ToRegionInstanceGroupManagerUpdatePolicyPtrOutput() RegionInstanceGroupManagerUpdatePolicyPtrOutput
	ToRegionInstanceGroupManagerUpdatePolicyPtrOutputWithContext(context.Context) RegionInstanceGroupManagerUpdatePolicyPtrOutput
}

type regionInstanceGroupManagerUpdatePolicyPtrType RegionInstanceGroupManagerUpdatePolicyArgs

func RegionInstanceGroupManagerUpdatePolicyPtr(v *RegionInstanceGroupManagerUpdatePolicyArgs) RegionInstanceGroupManagerUpdatePolicyPtrInput {
	return (*regionInstanceGroupManagerUpdatePolicyPtrType)(v)
}

func (*regionInstanceGroupManagerUpdatePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionInstanceGroupManagerUpdatePolicy)(nil)).Elem()
}

func (i *regionInstanceGroupManagerUpdatePolicyPtrType) ToRegionInstanceGroupManagerUpdatePolicyPtrOutput() RegionInstanceGroupManagerUpdatePolicyPtrOutput {
	return i.ToRegionInstanceGroupManagerUpdatePolicyPtrOutputWithContext(context.Background())
}

func (i *regionInstanceGroupManagerUpdatePolicyPtrType) ToRegionInstanceGroupManagerUpdatePolicyPtrOutputWithContext(ctx context.Context) RegionInstanceGroupManagerUpdatePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionInstanceGroupManagerUpdatePolicyPtrOutput)
}

type RegionInstanceGroupManagerUpdatePolicyOutput struct{ *pulumi.OutputState }

func (RegionInstanceGroupManagerUpdatePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionInstanceGroupManagerUpdatePolicy)(nil)).Elem()
}

func (o RegionInstanceGroupManagerUpdatePolicyOutput) ToRegionInstanceGroupManagerUpdatePolicyOutput() RegionInstanceGroupManagerUpdatePolicyOutput {
	return o
}

func (o RegionInstanceGroupManagerUpdatePolicyOutput) ToRegionInstanceGroupManagerUpdatePolicyOutputWithContext(ctx context.Context) RegionInstanceGroupManagerUpdatePolicyOutput {
	return o
}

func (o RegionInstanceGroupManagerUpdatePolicyOutput) ToRegionInstanceGroupManagerUpdatePolicyPtrOutput() RegionInstanceGroupManagerUpdatePolicyPtrOutput {
	return o.ToRegionInstanceGroupManagerUpdatePolicyPtrOutputWithContext(context.Background())
}

func (o RegionInstanceGroupManagerUpdatePolicyOutput) ToRegionInstanceGroupManagerUpdatePolicyPtrOutputWithContext(ctx context.Context) RegionInstanceGroupManagerUpdatePolicyPtrOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerUpdatePolicy) *RegionInstanceGroupManagerUpdatePolicy {
		return &v
	}).(RegionInstanceGroupManagerUpdatePolicyPtrOutput)
}

// - The instance redistribution policy for regional managed instance groups. Valid values are: `"PROACTIVE"`, `"NONE"`. If `PROACTIVE` (default), the group attempts to maintain an even distribution of VM instances across zones in the region. If `NONE`, proactive redistribution is disabled.
func (o RegionInstanceGroupManagerUpdatePolicyOutput) InstanceRedistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerUpdatePolicy) *string { return v.InstanceRedistributionType }).(pulumi.StringPtrOutput)
}

// , The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with `maxSurgePercent`. It has to be either 0 or at least equal to the number of zones.  If fixed values are used, at least one of `maxUnavailableFixed` or `maxSurgeFixed` must be greater than 0.
func (o RegionInstanceGroupManagerUpdatePolicyOutput) MaxSurgeFixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerUpdatePolicy) *int { return v.MaxSurgeFixed }).(pulumi.IntPtrOutput)
}

// , The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with `maxSurgeFixed`. Percent value is only allowed for regional managed instance groups with size at least 10.
func (o RegionInstanceGroupManagerUpdatePolicyOutput) MaxSurgePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerUpdatePolicy) *int { return v.MaxSurgePercent }).(pulumi.IntPtrOutput)
}

// , The maximum number of instances that can be unavailable during the update process. Conflicts with `maxUnavailablePercent`. It has to be either 0 or at least equal to the number of zones. If fixed values are used, at least one of `maxUnavailableFixed` or `maxSurgeFixed` must be greater than 0.
func (o RegionInstanceGroupManagerUpdatePolicyOutput) MaxUnavailableFixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerUpdatePolicy) *int { return v.MaxUnavailableFixed }).(pulumi.IntPtrOutput)
}

// , The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with `maxUnavailableFixed`. Percent value is only allowed for regional managed instance groups with size at least 10.
func (o RegionInstanceGroupManagerUpdatePolicyOutput) MaxUnavailablePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerUpdatePolicy) *int { return v.MaxUnavailablePercent }).(pulumi.IntPtrOutput)
}

// , Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600]
// - - -
func (o RegionInstanceGroupManagerUpdatePolicyOutput) MinReadySec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerUpdatePolicy) *int { return v.MinReadySec }).(pulumi.IntPtrOutput)
}

// - Minimal action to be taken on an instance. You can specify either `RESTART` to restart existing instances or `REPLACE` to delete and create new instances from the target template. If you specify a `RESTART`, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
func (o RegionInstanceGroupManagerUpdatePolicyOutput) MinimalAction() pulumi.StringOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerUpdatePolicy) string { return v.MinimalAction }).(pulumi.StringOutput)
}

// - The type of update process. You can specify either `PROACTIVE` so that the instance group manager proactively executes actions in order to bring instances to their target versions or `OPPORTUNISTIC` so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
func (o RegionInstanceGroupManagerUpdatePolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerUpdatePolicy) string { return v.Type }).(pulumi.StringOutput)
}

type RegionInstanceGroupManagerUpdatePolicyPtrOutput struct{ *pulumi.OutputState }

func (RegionInstanceGroupManagerUpdatePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionInstanceGroupManagerUpdatePolicy)(nil)).Elem()
}

func (o RegionInstanceGroupManagerUpdatePolicyPtrOutput) ToRegionInstanceGroupManagerUpdatePolicyPtrOutput() RegionInstanceGroupManagerUpdatePolicyPtrOutput {
	return o
}

func (o RegionInstanceGroupManagerUpdatePolicyPtrOutput) ToRegionInstanceGroupManagerUpdatePolicyPtrOutputWithContext(ctx context.Context) RegionInstanceGroupManagerUpdatePolicyPtrOutput {
	return o
}

func (o RegionInstanceGroupManagerUpdatePolicyPtrOutput) Elem() RegionInstanceGroupManagerUpdatePolicyOutput {
	return o.ApplyT(func(v *RegionInstanceGroupManagerUpdatePolicy) RegionInstanceGroupManagerUpdatePolicy { return *v }).(RegionInstanceGroupManagerUpdatePolicyOutput)
}

// - The instance redistribution policy for regional managed instance groups. Valid values are: `"PROACTIVE"`, `"NONE"`. If `PROACTIVE` (default), the group attempts to maintain an even distribution of VM instances across zones in the region. If `NONE`, proactive redistribution is disabled.
func (o RegionInstanceGroupManagerUpdatePolicyPtrOutput) InstanceRedistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionInstanceGroupManagerUpdatePolicy) *string {
		if v == nil {
			return nil
		}
		return v.InstanceRedistributionType
	}).(pulumi.StringPtrOutput)
}

// , The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with `maxSurgePercent`. It has to be either 0 or at least equal to the number of zones.  If fixed values are used, at least one of `maxUnavailableFixed` or `maxSurgeFixed` must be greater than 0.
func (o RegionInstanceGroupManagerUpdatePolicyPtrOutput) MaxSurgeFixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionInstanceGroupManagerUpdatePolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxSurgeFixed
	}).(pulumi.IntPtrOutput)
}

// , The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with `maxSurgeFixed`. Percent value is only allowed for regional managed instance groups with size at least 10.
func (o RegionInstanceGroupManagerUpdatePolicyPtrOutput) MaxSurgePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionInstanceGroupManagerUpdatePolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxSurgePercent
	}).(pulumi.IntPtrOutput)
}

// , The maximum number of instances that can be unavailable during the update process. Conflicts with `maxUnavailablePercent`. It has to be either 0 or at least equal to the number of zones. If fixed values are used, at least one of `maxUnavailableFixed` or `maxSurgeFixed` must be greater than 0.
func (o RegionInstanceGroupManagerUpdatePolicyPtrOutput) MaxUnavailableFixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionInstanceGroupManagerUpdatePolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnavailableFixed
	}).(pulumi.IntPtrOutput)
}

// , The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with `maxUnavailableFixed`. Percent value is only allowed for regional managed instance groups with size at least 10.
func (o RegionInstanceGroupManagerUpdatePolicyPtrOutput) MaxUnavailablePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionInstanceGroupManagerUpdatePolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnavailablePercent
	}).(pulumi.IntPtrOutput)
}

// , Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600]
// - - -
func (o RegionInstanceGroupManagerUpdatePolicyPtrOutput) MinReadySec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionInstanceGroupManagerUpdatePolicy) *int {
		if v == nil {
			return nil
		}
		return v.MinReadySec
	}).(pulumi.IntPtrOutput)
}

// - Minimal action to be taken on an instance. You can specify either `RESTART` to restart existing instances or `REPLACE` to delete and create new instances from the target template. If you specify a `RESTART`, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
func (o RegionInstanceGroupManagerUpdatePolicyPtrOutput) MinimalAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionInstanceGroupManagerUpdatePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.MinimalAction
	}).(pulumi.StringPtrOutput)
}

// - The type of update process. You can specify either `PROACTIVE` so that the instance group manager proactively executes actions in order to bring instances to their target versions or `OPPORTUNISTIC` so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
func (o RegionInstanceGroupManagerUpdatePolicyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionInstanceGroupManagerUpdatePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type RegionInstanceGroupManagerVersion struct {
	// - The full URL to an instance template from which all new instances of this version will be created.
	InstanceTemplate string `pulumi:"instanceTemplate"`
	// - Version name.
	Name *string `pulumi:"name"`
	// - The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.
	TargetSize *RegionInstanceGroupManagerVersionTargetSize `pulumi:"targetSize"`
}

// RegionInstanceGroupManagerVersionInput is an input type that accepts RegionInstanceGroupManagerVersionArgs and RegionInstanceGroupManagerVersionOutput values.
// You can construct a concrete instance of `RegionInstanceGroupManagerVersionInput` via:
//
// 		 RegionInstanceGroupManagerVersionArgs{...}
//
type RegionInstanceGroupManagerVersionInput interface {
	pulumi.Input

	ToRegionInstanceGroupManagerVersionOutput() RegionInstanceGroupManagerVersionOutput
	ToRegionInstanceGroupManagerVersionOutputWithContext(context.Context) RegionInstanceGroupManagerVersionOutput
}

type RegionInstanceGroupManagerVersionArgs struct {
	// - The full URL to an instance template from which all new instances of this version will be created.
	InstanceTemplate pulumi.StringInput `pulumi:"instanceTemplate"`
	// - Version name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// - The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.
	TargetSize RegionInstanceGroupManagerVersionTargetSizePtrInput `pulumi:"targetSize"`
}

func (RegionInstanceGroupManagerVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionInstanceGroupManagerVersion)(nil)).Elem()
}

func (i RegionInstanceGroupManagerVersionArgs) ToRegionInstanceGroupManagerVersionOutput() RegionInstanceGroupManagerVersionOutput {
	return i.ToRegionInstanceGroupManagerVersionOutputWithContext(context.Background())
}

func (i RegionInstanceGroupManagerVersionArgs) ToRegionInstanceGroupManagerVersionOutputWithContext(ctx context.Context) RegionInstanceGroupManagerVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionInstanceGroupManagerVersionOutput)
}

// RegionInstanceGroupManagerVersionArrayInput is an input type that accepts RegionInstanceGroupManagerVersionArray and RegionInstanceGroupManagerVersionArrayOutput values.
// You can construct a concrete instance of `RegionInstanceGroupManagerVersionArrayInput` via:
//
// 		 RegionInstanceGroupManagerVersionArray{ RegionInstanceGroupManagerVersionArgs{...} }
//
type RegionInstanceGroupManagerVersionArrayInput interface {
	pulumi.Input

	ToRegionInstanceGroupManagerVersionArrayOutput() RegionInstanceGroupManagerVersionArrayOutput
	ToRegionInstanceGroupManagerVersionArrayOutputWithContext(context.Context) RegionInstanceGroupManagerVersionArrayOutput
}

type RegionInstanceGroupManagerVersionArray []RegionInstanceGroupManagerVersionInput

func (RegionInstanceGroupManagerVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionInstanceGroupManagerVersion)(nil)).Elem()
}

func (i RegionInstanceGroupManagerVersionArray) ToRegionInstanceGroupManagerVersionArrayOutput() RegionInstanceGroupManagerVersionArrayOutput {
	return i.ToRegionInstanceGroupManagerVersionArrayOutputWithContext(context.Background())
}

func (i RegionInstanceGroupManagerVersionArray) ToRegionInstanceGroupManagerVersionArrayOutputWithContext(ctx context.Context) RegionInstanceGroupManagerVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionInstanceGroupManagerVersionArrayOutput)
}

type RegionInstanceGroupManagerVersionOutput struct{ *pulumi.OutputState }

func (RegionInstanceGroupManagerVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionInstanceGroupManagerVersion)(nil)).Elem()
}

func (o RegionInstanceGroupManagerVersionOutput) ToRegionInstanceGroupManagerVersionOutput() RegionInstanceGroupManagerVersionOutput {
	return o
}

func (o RegionInstanceGroupManagerVersionOutput) ToRegionInstanceGroupManagerVersionOutputWithContext(ctx context.Context) RegionInstanceGroupManagerVersionOutput {
	return o
}

// - The full URL to an instance template from which all new instances of this version will be created.
func (o RegionInstanceGroupManagerVersionOutput) InstanceTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerVersion) string { return v.InstanceTemplate }).(pulumi.StringOutput)
}

// - Version name.
func (o RegionInstanceGroupManagerVersionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerVersion) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// - The number of instances calculated as a fixed number or a percentage depending on the settings. Structure is documented below.
func (o RegionInstanceGroupManagerVersionOutput) TargetSize() RegionInstanceGroupManagerVersionTargetSizePtrOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerVersion) *RegionInstanceGroupManagerVersionTargetSize {
		return v.TargetSize
	}).(RegionInstanceGroupManagerVersionTargetSizePtrOutput)
}

type RegionInstanceGroupManagerVersionArrayOutput struct{ *pulumi.OutputState }

func (RegionInstanceGroupManagerVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionInstanceGroupManagerVersion)(nil)).Elem()
}

func (o RegionInstanceGroupManagerVersionArrayOutput) ToRegionInstanceGroupManagerVersionArrayOutput() RegionInstanceGroupManagerVersionArrayOutput {
	return o
}

func (o RegionInstanceGroupManagerVersionArrayOutput) ToRegionInstanceGroupManagerVersionArrayOutputWithContext(ctx context.Context) RegionInstanceGroupManagerVersionArrayOutput {
	return o
}

func (o RegionInstanceGroupManagerVersionArrayOutput) Index(i pulumi.IntInput) RegionInstanceGroupManagerVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionInstanceGroupManagerVersion {
		return vs[0].([]RegionInstanceGroupManagerVersion)[vs[1].(int)]
	}).(RegionInstanceGroupManagerVersionOutput)
}

type RegionInstanceGroupManagerVersionTargetSize struct {
	// , The number of instances which are managed for this version. Conflicts with `percent`.
	Fixed *int `pulumi:"fixed"`
	// , The number of instances (calculated as percentage) which are managed for this version. Conflicts with `fixed`.
	// Note that when using `percent`, rounding will be in favor of explicitly set `targetSize` values; a managed instance group with 2 instances and 2 `version`s,
	// one of which has a `target_size.percent` of `60` will create 2 instances of that `version`.
	Percent *int `pulumi:"percent"`
}

// RegionInstanceGroupManagerVersionTargetSizeInput is an input type that accepts RegionInstanceGroupManagerVersionTargetSizeArgs and RegionInstanceGroupManagerVersionTargetSizeOutput values.
// You can construct a concrete instance of `RegionInstanceGroupManagerVersionTargetSizeInput` via:
//
// 		 RegionInstanceGroupManagerVersionTargetSizeArgs{...}
//
type RegionInstanceGroupManagerVersionTargetSizeInput interface {
	pulumi.Input

	ToRegionInstanceGroupManagerVersionTargetSizeOutput() RegionInstanceGroupManagerVersionTargetSizeOutput
	ToRegionInstanceGroupManagerVersionTargetSizeOutputWithContext(context.Context) RegionInstanceGroupManagerVersionTargetSizeOutput
}

type RegionInstanceGroupManagerVersionTargetSizeArgs struct {
	// , The number of instances which are managed for this version. Conflicts with `percent`.
	Fixed pulumi.IntPtrInput `pulumi:"fixed"`
	// , The number of instances (calculated as percentage) which are managed for this version. Conflicts with `fixed`.
	// Note that when using `percent`, rounding will be in favor of explicitly set `targetSize` values; a managed instance group with 2 instances and 2 `version`s,
	// one of which has a `target_size.percent` of `60` will create 2 instances of that `version`.
	Percent pulumi.IntPtrInput `pulumi:"percent"`
}

func (RegionInstanceGroupManagerVersionTargetSizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionInstanceGroupManagerVersionTargetSize)(nil)).Elem()
}

func (i RegionInstanceGroupManagerVersionTargetSizeArgs) ToRegionInstanceGroupManagerVersionTargetSizeOutput() RegionInstanceGroupManagerVersionTargetSizeOutput {
	return i.ToRegionInstanceGroupManagerVersionTargetSizeOutputWithContext(context.Background())
}

func (i RegionInstanceGroupManagerVersionTargetSizeArgs) ToRegionInstanceGroupManagerVersionTargetSizeOutputWithContext(ctx context.Context) RegionInstanceGroupManagerVersionTargetSizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionInstanceGroupManagerVersionTargetSizeOutput)
}

func (i RegionInstanceGroupManagerVersionTargetSizeArgs) ToRegionInstanceGroupManagerVersionTargetSizePtrOutput() RegionInstanceGroupManagerVersionTargetSizePtrOutput {
	return i.ToRegionInstanceGroupManagerVersionTargetSizePtrOutputWithContext(context.Background())
}

func (i RegionInstanceGroupManagerVersionTargetSizeArgs) ToRegionInstanceGroupManagerVersionTargetSizePtrOutputWithContext(ctx context.Context) RegionInstanceGroupManagerVersionTargetSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionInstanceGroupManagerVersionTargetSizeOutput).ToRegionInstanceGroupManagerVersionTargetSizePtrOutputWithContext(ctx)
}

// RegionInstanceGroupManagerVersionTargetSizePtrInput is an input type that accepts RegionInstanceGroupManagerVersionTargetSizeArgs, RegionInstanceGroupManagerVersionTargetSizePtr and RegionInstanceGroupManagerVersionTargetSizePtrOutput values.
// You can construct a concrete instance of `RegionInstanceGroupManagerVersionTargetSizePtrInput` via:
//
// 		 RegionInstanceGroupManagerVersionTargetSizeArgs{...}
//
//  or:
//
// 		 nil
//
type RegionInstanceGroupManagerVersionTargetSizePtrInput interface {
	pulumi.Input

	ToRegionInstanceGroupManagerVersionTargetSizePtrOutput() RegionInstanceGroupManagerVersionTargetSizePtrOutput
	ToRegionInstanceGroupManagerVersionTargetSizePtrOutputWithContext(context.Context) RegionInstanceGroupManagerVersionTargetSizePtrOutput
}

type regionInstanceGroupManagerVersionTargetSizePtrType RegionInstanceGroupManagerVersionTargetSizeArgs

func RegionInstanceGroupManagerVersionTargetSizePtr(v *RegionInstanceGroupManagerVersionTargetSizeArgs) RegionInstanceGroupManagerVersionTargetSizePtrInput {
	return (*regionInstanceGroupManagerVersionTargetSizePtrType)(v)
}

func (*regionInstanceGroupManagerVersionTargetSizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionInstanceGroupManagerVersionTargetSize)(nil)).Elem()
}

func (i *regionInstanceGroupManagerVersionTargetSizePtrType) ToRegionInstanceGroupManagerVersionTargetSizePtrOutput() RegionInstanceGroupManagerVersionTargetSizePtrOutput {
	return i.ToRegionInstanceGroupManagerVersionTargetSizePtrOutputWithContext(context.Background())
}

func (i *regionInstanceGroupManagerVersionTargetSizePtrType) ToRegionInstanceGroupManagerVersionTargetSizePtrOutputWithContext(ctx context.Context) RegionInstanceGroupManagerVersionTargetSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionInstanceGroupManagerVersionTargetSizePtrOutput)
}

type RegionInstanceGroupManagerVersionTargetSizeOutput struct{ *pulumi.OutputState }

func (RegionInstanceGroupManagerVersionTargetSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionInstanceGroupManagerVersionTargetSize)(nil)).Elem()
}

func (o RegionInstanceGroupManagerVersionTargetSizeOutput) ToRegionInstanceGroupManagerVersionTargetSizeOutput() RegionInstanceGroupManagerVersionTargetSizeOutput {
	return o
}

func (o RegionInstanceGroupManagerVersionTargetSizeOutput) ToRegionInstanceGroupManagerVersionTargetSizeOutputWithContext(ctx context.Context) RegionInstanceGroupManagerVersionTargetSizeOutput {
	return o
}

func (o RegionInstanceGroupManagerVersionTargetSizeOutput) ToRegionInstanceGroupManagerVersionTargetSizePtrOutput() RegionInstanceGroupManagerVersionTargetSizePtrOutput {
	return o.ToRegionInstanceGroupManagerVersionTargetSizePtrOutputWithContext(context.Background())
}

func (o RegionInstanceGroupManagerVersionTargetSizeOutput) ToRegionInstanceGroupManagerVersionTargetSizePtrOutputWithContext(ctx context.Context) RegionInstanceGroupManagerVersionTargetSizePtrOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerVersionTargetSize) *RegionInstanceGroupManagerVersionTargetSize {
		return &v
	}).(RegionInstanceGroupManagerVersionTargetSizePtrOutput)
}

// , The number of instances which are managed for this version. Conflicts with `percent`.
func (o RegionInstanceGroupManagerVersionTargetSizeOutput) Fixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerVersionTargetSize) *int { return v.Fixed }).(pulumi.IntPtrOutput)
}

// , The number of instances (calculated as percentage) which are managed for this version. Conflicts with `fixed`.
// Note that when using `percent`, rounding will be in favor of explicitly set `targetSize` values; a managed instance group with 2 instances and 2 `version`s,
// one of which has a `target_size.percent` of `60` will create 2 instances of that `version`.
func (o RegionInstanceGroupManagerVersionTargetSizeOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionInstanceGroupManagerVersionTargetSize) *int { return v.Percent }).(pulumi.IntPtrOutput)
}

type RegionInstanceGroupManagerVersionTargetSizePtrOutput struct{ *pulumi.OutputState }

func (RegionInstanceGroupManagerVersionTargetSizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionInstanceGroupManagerVersionTargetSize)(nil)).Elem()
}

func (o RegionInstanceGroupManagerVersionTargetSizePtrOutput) ToRegionInstanceGroupManagerVersionTargetSizePtrOutput() RegionInstanceGroupManagerVersionTargetSizePtrOutput {
	return o
}

func (o RegionInstanceGroupManagerVersionTargetSizePtrOutput) ToRegionInstanceGroupManagerVersionTargetSizePtrOutputWithContext(ctx context.Context) RegionInstanceGroupManagerVersionTargetSizePtrOutput {
	return o
}

func (o RegionInstanceGroupManagerVersionTargetSizePtrOutput) Elem() RegionInstanceGroupManagerVersionTargetSizeOutput {
	return o.ApplyT(func(v *RegionInstanceGroupManagerVersionTargetSize) RegionInstanceGroupManagerVersionTargetSize {
		return *v
	}).(RegionInstanceGroupManagerVersionTargetSizeOutput)
}

// , The number of instances which are managed for this version. Conflicts with `percent`.
func (o RegionInstanceGroupManagerVersionTargetSizePtrOutput) Fixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionInstanceGroupManagerVersionTargetSize) *int {
		if v == nil {
			return nil
		}
		return v.Fixed
	}).(pulumi.IntPtrOutput)
}

// , The number of instances (calculated as percentage) which are managed for this version. Conflicts with `fixed`.
// Note that when using `percent`, rounding will be in favor of explicitly set `targetSize` values; a managed instance group with 2 instances and 2 `version`s,
// one of which has a `target_size.percent` of `60` will create 2 instances of that `version`.
func (o RegionInstanceGroupManagerVersionTargetSizePtrOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionInstanceGroupManagerVersionTargetSize) *int {
		if v == nil {
			return nil
		}
		return v.Percent
	}).(pulumi.IntPtrOutput)
}

type RegionUrlMapHostRule struct {
	// Description of this test case.
	Description *string `pulumi:"description"`
	// The list of host patterns to match. They must be valid
	// hostnames, except * will match any string of ([a-z0-9-.]*). In
	// that case, * must be the first character and must be followed in
	// the pattern by either - or ..
	Hosts []string `pulumi:"hosts"`
	// The name of the PathMatcher to use to match the path portion of
	// the URL if the hostRule matches the URL's host portion.
	PathMatcher string `pulumi:"pathMatcher"`
}

// RegionUrlMapHostRuleInput is an input type that accepts RegionUrlMapHostRuleArgs and RegionUrlMapHostRuleOutput values.
// You can construct a concrete instance of `RegionUrlMapHostRuleInput` via:
//
// 		 RegionUrlMapHostRuleArgs{...}
//
type RegionUrlMapHostRuleInput interface {
	pulumi.Input

	ToRegionUrlMapHostRuleOutput() RegionUrlMapHostRuleOutput
	ToRegionUrlMapHostRuleOutputWithContext(context.Context) RegionUrlMapHostRuleOutput
}

type RegionUrlMapHostRuleArgs struct {
	// Description of this test case.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The list of host patterns to match. They must be valid
	// hostnames, except * will match any string of ([a-z0-9-.]*). In
	// that case, * must be the first character and must be followed in
	// the pattern by either - or ..
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// The name of the PathMatcher to use to match the path portion of
	// the URL if the hostRule matches the URL's host portion.
	PathMatcher pulumi.StringInput `pulumi:"pathMatcher"`
}

func (RegionUrlMapHostRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapHostRule)(nil)).Elem()
}

func (i RegionUrlMapHostRuleArgs) ToRegionUrlMapHostRuleOutput() RegionUrlMapHostRuleOutput {
	return i.ToRegionUrlMapHostRuleOutputWithContext(context.Background())
}

func (i RegionUrlMapHostRuleArgs) ToRegionUrlMapHostRuleOutputWithContext(ctx context.Context) RegionUrlMapHostRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapHostRuleOutput)
}

// RegionUrlMapHostRuleArrayInput is an input type that accepts RegionUrlMapHostRuleArray and RegionUrlMapHostRuleArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapHostRuleArrayInput` via:
//
// 		 RegionUrlMapHostRuleArray{ RegionUrlMapHostRuleArgs{...} }
//
type RegionUrlMapHostRuleArrayInput interface {
	pulumi.Input

	ToRegionUrlMapHostRuleArrayOutput() RegionUrlMapHostRuleArrayOutput
	ToRegionUrlMapHostRuleArrayOutputWithContext(context.Context) RegionUrlMapHostRuleArrayOutput
}

type RegionUrlMapHostRuleArray []RegionUrlMapHostRuleInput

func (RegionUrlMapHostRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapHostRule)(nil)).Elem()
}

func (i RegionUrlMapHostRuleArray) ToRegionUrlMapHostRuleArrayOutput() RegionUrlMapHostRuleArrayOutput {
	return i.ToRegionUrlMapHostRuleArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapHostRuleArray) ToRegionUrlMapHostRuleArrayOutputWithContext(ctx context.Context) RegionUrlMapHostRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapHostRuleArrayOutput)
}

type RegionUrlMapHostRuleOutput struct{ *pulumi.OutputState }

func (RegionUrlMapHostRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapHostRule)(nil)).Elem()
}

func (o RegionUrlMapHostRuleOutput) ToRegionUrlMapHostRuleOutput() RegionUrlMapHostRuleOutput {
	return o
}

func (o RegionUrlMapHostRuleOutput) ToRegionUrlMapHostRuleOutputWithContext(ctx context.Context) RegionUrlMapHostRuleOutput {
	return o
}

// Description of this test case.
func (o RegionUrlMapHostRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapHostRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The list of host patterns to match. They must be valid
// hostnames, except * will match any string of ([a-z0-9-.]*). In
// that case, * must be the first character and must be followed in
// the pattern by either - or ..
func (o RegionUrlMapHostRuleOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapHostRule) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// The name of the PathMatcher to use to match the path portion of
// the URL if the hostRule matches the URL's host portion.
func (o RegionUrlMapHostRuleOutput) PathMatcher() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapHostRule) string { return v.PathMatcher }).(pulumi.StringOutput)
}

type RegionUrlMapHostRuleArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapHostRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapHostRule)(nil)).Elem()
}

func (o RegionUrlMapHostRuleArrayOutput) ToRegionUrlMapHostRuleArrayOutput() RegionUrlMapHostRuleArrayOutput {
	return o
}

func (o RegionUrlMapHostRuleArrayOutput) ToRegionUrlMapHostRuleArrayOutputWithContext(ctx context.Context) RegionUrlMapHostRuleArrayOutput {
	return o
}

func (o RegionUrlMapHostRuleArrayOutput) Index(i pulumi.IntInput) RegionUrlMapHostRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapHostRule {
		return vs[0].([]RegionUrlMapHostRule)[vs[1].(int)]
	}).(RegionUrlMapHostRuleOutput)
}

type RegionUrlMapPathMatcher struct {
	// A reference to a RegionBackendService resource. This will be used if
	// none of the pathRules defined by this PathMatcher is matched by
	// the URL's path portion.
	DefaultService string `pulumi:"defaultService"`
	// Description of this test case.
	Description *string `pulumi:"description"`
	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name string `pulumi:"name"`
	// The list of path rules. Use this list instead of routeRules when routing based
	// on simple path matching is all that's required. The order by which path rules
	// are specified does not matter. Matches are always done on the longest-path-first
	// basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
	// irrespective of the order in which those paths appear in this list. Within a
	// given pathMatcher, only one of pathRules or routeRules must be set.  Structure is documented below.
	PathRules []RegionUrlMapPathMatcherPathRule `pulumi:"pathRules"`
	// The list of ordered HTTP route rules. Use this list instead of pathRules when
	// advanced route matching and routing actions are desired. The order of specifying
	// routeRules matters: the first rule that matches will cause its specified routing
	// action to take effect. Within a given pathMatcher, only one of pathRules or
	// routeRules must be set. routeRules are not supported in UrlMaps intended for
	// External load balancers.  Structure is documented below.
	RouteRules []RegionUrlMapPathMatcherRouteRule `pulumi:"routeRules"`
}

// RegionUrlMapPathMatcherInput is an input type that accepts RegionUrlMapPathMatcherArgs and RegionUrlMapPathMatcherOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherInput` via:
//
// 		 RegionUrlMapPathMatcherArgs{...}
//
type RegionUrlMapPathMatcherInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherOutput() RegionUrlMapPathMatcherOutput
	ToRegionUrlMapPathMatcherOutputWithContext(context.Context) RegionUrlMapPathMatcherOutput
}

type RegionUrlMapPathMatcherArgs struct {
	// A reference to a RegionBackendService resource. This will be used if
	// none of the pathRules defined by this PathMatcher is matched by
	// the URL's path portion.
	DefaultService pulumi.StringInput `pulumi:"defaultService"`
	// Description of this test case.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name pulumi.StringInput `pulumi:"name"`
	// The list of path rules. Use this list instead of routeRules when routing based
	// on simple path matching is all that's required. The order by which path rules
	// are specified does not matter. Matches are always done on the longest-path-first
	// basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
	// irrespective of the order in which those paths appear in this list. Within a
	// given pathMatcher, only one of pathRules or routeRules must be set.  Structure is documented below.
	PathRules RegionUrlMapPathMatcherPathRuleArrayInput `pulumi:"pathRules"`
	// The list of ordered HTTP route rules. Use this list instead of pathRules when
	// advanced route matching and routing actions are desired. The order of specifying
	// routeRules matters: the first rule that matches will cause its specified routing
	// action to take effect. Within a given pathMatcher, only one of pathRules or
	// routeRules must be set. routeRules are not supported in UrlMaps intended for
	// External load balancers.  Structure is documented below.
	RouteRules RegionUrlMapPathMatcherRouteRuleArrayInput `pulumi:"routeRules"`
}

func (RegionUrlMapPathMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcher)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherArgs) ToRegionUrlMapPathMatcherOutput() RegionUrlMapPathMatcherOutput {
	return i.ToRegionUrlMapPathMatcherOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherArgs) ToRegionUrlMapPathMatcherOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherOutput)
}

// RegionUrlMapPathMatcherArrayInput is an input type that accepts RegionUrlMapPathMatcherArray and RegionUrlMapPathMatcherArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherArrayInput` via:
//
// 		 RegionUrlMapPathMatcherArray{ RegionUrlMapPathMatcherArgs{...} }
//
type RegionUrlMapPathMatcherArrayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherArrayOutput() RegionUrlMapPathMatcherArrayOutput
	ToRegionUrlMapPathMatcherArrayOutputWithContext(context.Context) RegionUrlMapPathMatcherArrayOutput
}

type RegionUrlMapPathMatcherArray []RegionUrlMapPathMatcherInput

func (RegionUrlMapPathMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcher)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherArray) ToRegionUrlMapPathMatcherArrayOutput() RegionUrlMapPathMatcherArrayOutput {
	return i.ToRegionUrlMapPathMatcherArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherArray) ToRegionUrlMapPathMatcherArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherArrayOutput)
}

type RegionUrlMapPathMatcherOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcher)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherOutput) ToRegionUrlMapPathMatcherOutput() RegionUrlMapPathMatcherOutput {
	return o
}

func (o RegionUrlMapPathMatcherOutput) ToRegionUrlMapPathMatcherOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherOutput {
	return o
}

// A reference to a RegionBackendService resource. This will be used if
// none of the pathRules defined by this PathMatcher is matched by
// the URL's path portion.
func (o RegionUrlMapPathMatcherOutput) DefaultService() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcher) string { return v.DefaultService }).(pulumi.StringOutput)
}

// Description of this test case.
func (o RegionUrlMapPathMatcherOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcher) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the query parameter to match. The query parameter must exist in the
// request, in the absence of which the request match fails.
func (o RegionUrlMapPathMatcherOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcher) string { return v.Name }).(pulumi.StringOutput)
}

// The list of path rules. Use this list instead of routeRules when routing based
// on simple path matching is all that's required. The order by which path rules
// are specified does not matter. Matches are always done on the longest-path-first
// basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
// irrespective of the order in which those paths appear in this list. Within a
// given pathMatcher, only one of pathRules or routeRules must be set.  Structure is documented below.
func (o RegionUrlMapPathMatcherOutput) PathRules() RegionUrlMapPathMatcherPathRuleArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcher) []RegionUrlMapPathMatcherPathRule { return v.PathRules }).(RegionUrlMapPathMatcherPathRuleArrayOutput)
}

// The list of ordered HTTP route rules. Use this list instead of pathRules when
// advanced route matching and routing actions are desired. The order of specifying
// routeRules matters: the first rule that matches will cause its specified routing
// action to take effect. Within a given pathMatcher, only one of pathRules or
// routeRules must be set. routeRules are not supported in UrlMaps intended for
// External load balancers.  Structure is documented below.
func (o RegionUrlMapPathMatcherOutput) RouteRules() RegionUrlMapPathMatcherRouteRuleArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcher) []RegionUrlMapPathMatcherRouteRule { return v.RouteRules }).(RegionUrlMapPathMatcherRouteRuleArrayOutput)
}

type RegionUrlMapPathMatcherArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcher)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherArrayOutput) ToRegionUrlMapPathMatcherArrayOutput() RegionUrlMapPathMatcherArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherArrayOutput) ToRegionUrlMapPathMatcherArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherArrayOutput) Index(i pulumi.IntInput) RegionUrlMapPathMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapPathMatcher {
		return vs[0].([]RegionUrlMapPathMatcher)[vs[1].(int)]
	}).(RegionUrlMapPathMatcherOutput)
}

type RegionUrlMapPathMatcherPathRule struct {
	// The list of path patterns to match. Each must start with / and the only place a
	// * is allowed is at the end following a /. The string fed to the path matcher
	// does not include any text after the first ? or #, and those chars are not
	// allowed here.
	Paths []string `pulumi:"paths"`
	// In response to a matching path, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.  Structure is documented below.
	RouteAction *RegionUrlMapPathMatcherPathRuleRouteAction `pulumi:"routeAction"`
	// A reference to expected RegionBackendService resource the given URL should be mapped to.
	Service *string `pulumi:"service"`
	// When a path pattern is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.  Structure is documented below.
	UrlRedirect *RegionUrlMapPathMatcherPathRuleUrlRedirect `pulumi:"urlRedirect"`
}

// RegionUrlMapPathMatcherPathRuleInput is an input type that accepts RegionUrlMapPathMatcherPathRuleArgs and RegionUrlMapPathMatcherPathRuleOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleArgs{...}
//
type RegionUrlMapPathMatcherPathRuleInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleOutput() RegionUrlMapPathMatcherPathRuleOutput
	ToRegionUrlMapPathMatcherPathRuleOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleOutput
}

type RegionUrlMapPathMatcherPathRuleArgs struct {
	// The list of path patterns to match. Each must start with / and the only place a
	// * is allowed is at the end following a /. The string fed to the path matcher
	// does not include any text after the first ? or #, and those chars are not
	// allowed here.
	Paths pulumi.StringArrayInput `pulumi:"paths"`
	// In response to a matching path, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.  Structure is documented below.
	RouteAction RegionUrlMapPathMatcherPathRuleRouteActionPtrInput `pulumi:"routeAction"`
	// A reference to expected RegionBackendService resource the given URL should be mapped to.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// When a path pattern is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.  Structure is documented below.
	UrlRedirect RegionUrlMapPathMatcherPathRuleUrlRedirectPtrInput `pulumi:"urlRedirect"`
}

func (RegionUrlMapPathMatcherPathRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRule)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleArgs) ToRegionUrlMapPathMatcherPathRuleOutput() RegionUrlMapPathMatcherPathRuleOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleArgs) ToRegionUrlMapPathMatcherPathRuleOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleOutput)
}

// RegionUrlMapPathMatcherPathRuleArrayInput is an input type that accepts RegionUrlMapPathMatcherPathRuleArray and RegionUrlMapPathMatcherPathRuleArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleArrayInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleArray{ RegionUrlMapPathMatcherPathRuleArgs{...} }
//
type RegionUrlMapPathMatcherPathRuleArrayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleArrayOutput() RegionUrlMapPathMatcherPathRuleArrayOutput
	ToRegionUrlMapPathMatcherPathRuleArrayOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleArrayOutput
}

type RegionUrlMapPathMatcherPathRuleArray []RegionUrlMapPathMatcherPathRuleInput

func (RegionUrlMapPathMatcherPathRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherPathRule)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleArray) ToRegionUrlMapPathMatcherPathRuleArrayOutput() RegionUrlMapPathMatcherPathRuleArrayOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleArray) ToRegionUrlMapPathMatcherPathRuleArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleArrayOutput)
}

type RegionUrlMapPathMatcherPathRuleOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRule)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleOutput) ToRegionUrlMapPathMatcherPathRuleOutput() RegionUrlMapPathMatcherPathRuleOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleOutput) ToRegionUrlMapPathMatcherPathRuleOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleOutput {
	return o
}

// The list of path patterns to match. Each must start with / and the only place a
// * is allowed is at the end following a /. The string fed to the path matcher
// does not include any text after the first ? or #, and those chars are not
// allowed here.
func (o RegionUrlMapPathMatcherPathRuleOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRule) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// In response to a matching path, the load balancer performs advanced routing
// actions like URL rewrites, header transformations, etc. prior to forwarding the
// request to the selected backend. If routeAction specifies any
// weightedBackendServices, service must not be set. Conversely if service is set,
// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
// or urlRedirect must be set.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleOutput) RouteAction() RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRule) *RegionUrlMapPathMatcherPathRuleRouteAction {
		return v.RouteAction
	}).(RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput)
}

// A reference to expected RegionBackendService resource the given URL should be mapped to.
func (o RegionUrlMapPathMatcherPathRuleOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRule) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// When a path pattern is matched, the request is redirected to a URL specified by
// urlRedirect. If urlRedirect is specified, service or routeAction must not be
// set.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleOutput) UrlRedirect() RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRule) *RegionUrlMapPathMatcherPathRuleUrlRedirect {
		return v.UrlRedirect
	}).(RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherPathRule)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleArrayOutput) ToRegionUrlMapPathMatcherPathRuleArrayOutput() RegionUrlMapPathMatcherPathRuleArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleArrayOutput) ToRegionUrlMapPathMatcherPathRuleArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleArrayOutput) Index(i pulumi.IntInput) RegionUrlMapPathMatcherPathRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapPathMatcherPathRule {
		return vs[0].([]RegionUrlMapPathMatcherPathRule)[vs[1].(int)]
	}).(RegionUrlMapPathMatcherPathRuleOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteAction struct {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing  Structure is documented below.
	CorsPolicy *RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy `pulumi:"corsPolicy"`
	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retryPolicy will be
	// ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
	FaultInjectionPolicy *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy `pulumi:"faultInjectionPolicy"`
	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.  Structure is documented below.
	RequestMirrorPolicy *RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy `pulumi:"requestMirrorPolicy"`
	// Specifies the retry policy associated with this route.  Structure is documented below.
	RetryPolicy *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy `pulumi:"retryPolicy"`
	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.  Structure is documented below.
	Timeout *RegionUrlMapPathMatcherPathRuleRouteActionTimeout `pulumi:"timeout"`
	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service  Structure is documented below.
	UrlRewrite *RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite `pulumi:"urlRewrite"`
	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.  Structure is documented below.
	WeightedBackendServices []RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService `pulumi:"weightedBackendServices"`
}

// RegionUrlMapPathMatcherPathRuleRouteActionInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionArgs and RegionUrlMapPathMatcherPathRuleRouteActionOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionArgs{...}
//
type RegionUrlMapPathMatcherPathRuleRouteActionInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionOutput() RegionUrlMapPathMatcherPathRuleRouteActionOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionArgs struct {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing  Structure is documented below.
	CorsPolicy RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrInput `pulumi:"corsPolicy"`
	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retryPolicy will be
	// ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
	FaultInjectionPolicy RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrInput `pulumi:"faultInjectionPolicy"`
	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.  Structure is documented below.
	RequestMirrorPolicy RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrInput `pulumi:"requestMirrorPolicy"`
	// Specifies the retry policy associated with this route.  Structure is documented below.
	RetryPolicy RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrInput `pulumi:"retryPolicy"`
	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.  Structure is documented below.
	Timeout RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrInput `pulumi:"timeout"`
	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service  Structure is documented below.
	UrlRewrite RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrInput `pulumi:"urlRewrite"`
	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.  Structure is documented below.
	WeightedBackendServices RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayInput `pulumi:"weightedBackendServices"`
}

func (RegionUrlMapPathMatcherPathRuleRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteAction)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionOutput() RegionUrlMapPathMatcherPathRuleRouteActionOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionOutput)
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionOutput).ToRegionUrlMapPathMatcherPathRuleRouteActionPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherPathRuleRouteActionPtrInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionArgs, RegionUrlMapPathMatcherPathRuleRouteActionPtr and RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionPtrInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherPathRuleRouteActionPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput
}

type regionUrlMapPathMatcherPathRuleRouteActionPtrType RegionUrlMapPathMatcherPathRuleRouteActionArgs

func RegionUrlMapPathMatcherPathRuleRouteActionPtr(v *RegionUrlMapPathMatcherPathRuleRouteActionArgs) RegionUrlMapPathMatcherPathRuleRouteActionPtrInput {
	return (*regionUrlMapPathMatcherPathRuleRouteActionPtrType)(v)
}

func (*regionUrlMapPathMatcherPathRuleRouteActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteAction)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteAction)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionOutput() RegionUrlMapPathMatcherPathRuleRouteActionOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput {
	return o.ToRegionUrlMapPathMatcherPathRuleRouteActionPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteAction) *RegionUrlMapPathMatcherPathRuleRouteAction {
		return &v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput)
}

// The specification for allowing client side cross-origin requests. Please see W3C
// Recommendation for Cross Origin Resource Sharing  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionOutput) CorsPolicy() RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteAction) *RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy {
		return v.CorsPolicy
	}).(RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput)
}

// The specification for fault injection introduced into traffic to test the
// resiliency of clients to backend service failure. As part of fault injection,
// when clients send requests to a backend service, delays can be introduced by
// Loadbalancer on a percentage of requests before sending those request to the
// backend service. Similarly requests from clients can be aborted by the
// Loadbalancer for a percentage of requests. timeout and retryPolicy will be
// ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionOutput) FaultInjectionPolicy() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteAction) *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy {
		return v.FaultInjectionPolicy
	}).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput)
}

// Specifies the policy on how requests intended for the route's backends are
// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
// responses from the shadow service. Prior to sending traffic to the shadow
// service, the host / authority header is suffixed with -shadow.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionOutput) RequestMirrorPolicy() RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteAction) *RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy {
		return v.RequestMirrorPolicy
	}).(RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput)
}

// Specifies the retry policy associated with this route.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionOutput) RetryPolicy() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteAction) *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy {
		return v.RetryPolicy
	}).(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput)
}

// Specifies the timeout for the selected route. Timeout is computed from the time
// the request is has been fully processed (i.e. end-of-stream) up until the
// response has been completely processed. Timeout includes all retries. If not
// specified, the default value is 15 seconds.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionOutput) Timeout() RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteAction) *RegionUrlMapPathMatcherPathRuleRouteActionTimeout {
		return v.Timeout
	}).(RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput)
}

// The spec to modify the URL of the request, prior to forwarding the request to
// the matched service  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionOutput) UrlRewrite() RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteAction) *RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite {
		return v.UrlRewrite
	}).(RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput)
}

// A list of weighted backend services to send traffic to when a route match
// occurs. The weights determine the fraction of traffic that flows to their
// corresponding backend service. If all traffic needs to go to a single backend
// service, there must be one  weightedBackendService with weight set to a non 0
// number. Once a backendService is identified and before forwarding the request to
// the backend service, advanced routing actions like Url rewrites and header
// transformations are applied depending on additional settings specified in this
// HttpRouteAction.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionOutput) WeightedBackendServices() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteAction) []RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService {
		return v.WeightedBackendServices
	}).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteAction)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput) Elem() RegionUrlMapPathMatcherPathRuleRouteActionOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteAction) RegionUrlMapPathMatcherPathRuleRouteAction {
		return *v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionOutput)
}

// The specification for allowing client side cross-origin requests. Please see W3C
// Recommendation for Cross Origin Resource Sharing  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput) CorsPolicy() RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteAction) *RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy {
		if v == nil {
			return nil
		}
		return v.CorsPolicy
	}).(RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput)
}

// The specification for fault injection introduced into traffic to test the
// resiliency of clients to backend service failure. As part of fault injection,
// when clients send requests to a backend service, delays can be introduced by
// Loadbalancer on a percentage of requests before sending those request to the
// backend service. Similarly requests from clients can be aborted by the
// Loadbalancer for a percentage of requests. timeout and retryPolicy will be
// ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput) FaultInjectionPolicy() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteAction) *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy {
		if v == nil {
			return nil
		}
		return v.FaultInjectionPolicy
	}).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput)
}

// Specifies the policy on how requests intended for the route's backends are
// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
// responses from the shadow service. Prior to sending traffic to the shadow
// service, the host / authority header is suffixed with -shadow.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput) RequestMirrorPolicy() RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteAction) *RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy {
		if v == nil {
			return nil
		}
		return v.RequestMirrorPolicy
	}).(RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput)
}

// Specifies the retry policy associated with this route.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput) RetryPolicy() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteAction) *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy {
		if v == nil {
			return nil
		}
		return v.RetryPolicy
	}).(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput)
}

// Specifies the timeout for the selected route. Timeout is computed from the time
// the request is has been fully processed (i.e. end-of-stream) up until the
// response has been completely processed. Timeout includes all retries. If not
// specified, the default value is 15 seconds.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput) Timeout() RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteAction) *RegionUrlMapPathMatcherPathRuleRouteActionTimeout {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput)
}

// The spec to modify the URL of the request, prior to forwarding the request to
// the matched service  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput) UrlRewrite() RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteAction) *RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite {
		if v == nil {
			return nil
		}
		return v.UrlRewrite
	}).(RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput)
}

// A list of weighted backend services to send traffic to when a route match
// occurs. The weights determine the fraction of traffic that flows to their
// corresponding backend service. If all traffic needs to go to a single backend
// service, there must be one  weightedBackendService with weight set to a non 0
// number. Once a backendService is identified and before forwarding the request to
// the backend service, advanced routing actions like Url rewrites and header
// transformations are applied depending on additional settings specified in this
// HttpRouteAction.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput) WeightedBackendServices() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteAction) []RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService {
		if v == nil {
			return nil
		}
		return v.WeightedBackendServices
	}).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy struct {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	AllowCredentials *bool `pulumi:"allowCredentials"`
	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods []string `pulumi:"allowMethods"`
	// Specifies the regualar expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allowOrigins or allow_origin_regex.
	AllowOriginRegexes []string `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allowOrigins or allow_origin_regex.
	AllowOrigins []string `pulumi:"allowOrigins"`
	// If true, specifies the CORS policy is disabled.
	Disabled bool `pulumi:"disabled"`
	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	MaxAge *int `pulumi:"maxAge"`
}

// RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs and RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs{...}
//
type RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput() RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs struct {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	AllowCredentials pulumi.BoolPtrInput `pulumi:"allowCredentials"`
	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders pulumi.StringArrayInput `pulumi:"allowHeaders"`
	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods pulumi.StringArrayInput `pulumi:"allowMethods"`
	// Specifies the regualar expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allowOrigins or allow_origin_regex.
	AllowOriginRegexes pulumi.StringArrayInput `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allowOrigins or allow_origin_regex.
	AllowOrigins pulumi.StringArrayInput `pulumi:"allowOrigins"`
	// If true, specifies the CORS policy is disabled.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	MaxAge pulumi.IntPtrInput `pulumi:"maxAge"`
}

func (RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput() RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput)
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput).ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs, RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtr and RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput
}

type regionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrType RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs

func RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtr(v *RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs) RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrInput {
	return (*regionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrType)(v)
}

func (*regionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput() RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return o.ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) *RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy {
		return &v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput)
}

// In response to a preflight request, setting this to true indicates that the
// actual request can include user credentials. This translates to the Access-
// Control-Allow-Credentials header. Defaults to false.
func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) *bool { return v.AllowCredentials }).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers header.
func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) []string { return v.AllowHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the content for the Access-Control-Allow-Methods header.
func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) []string { return v.AllowMethods }).(pulumi.StringArrayOutput)
}

// Specifies the regualar expression patterns that match allowed origins. For
// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
// An origin is allowed if it matches either allowOrigins or allow_origin_regex.
func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) []string { return v.AllowOriginRegexes }).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests. An
// origin is allowed if it matches either allowOrigins or allow_origin_regex.
func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) []string { return v.AllowOrigins }).(pulumi.StringArrayOutput)
}

// If true, specifies the CORS policy is disabled.
func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// Specifies the content for the Access-Control-Expose-Headers header.
func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

// Specifies how long the results of a preflight request can be cached. This
// translates to the content for the Access-Control-Max-Age header.
func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) *int { return v.MaxAge }).(pulumi.IntPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) Elem() RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy {
		return *v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput)
}

// In response to a preflight request, setting this to true indicates that the
// actual request can include user credentials. This translates to the Access-
// Control-Allow-Credentials header. Defaults to false.
func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers header.
func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the Access-Control-Allow-Methods header.
func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowMethods
	}).(pulumi.StringArrayOutput)
}

// Specifies the regualar expression patterns that match allowed origins. For
// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
// An origin is allowed if it matches either allowOrigins or allow_origin_regex.
func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOriginRegexes
	}).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests. An
// origin is allowed if it matches either allowOrigins or allow_origin_regex.
func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOrigins
	}).(pulumi.StringArrayOutput)
}

// If true, specifies the CORS policy is disabled.
func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Expose-Headers header.
func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies how long the results of a preflight request can be cached. This
// translates to the content for the Access-Control-Max-Age header.
func (o RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxAge
	}).(pulumi.IntPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy struct {
	// The specification for how client requests are aborted as part of fault
	// injection.  Structure is documented below.
	Abort *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort `pulumi:"abort"`
	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.  Structure is documented below.
	Delay *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay `pulumi:"delay"`
}

// RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs and RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs{...}
//
type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs struct {
	// The specification for how client requests are aborted as part of fault
	// injection.  Structure is documented below.
	Abort RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrInput `pulumi:"abort"`
	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.  Structure is documented below.
	Delay RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrInput `pulumi:"delay"`
}

func (RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput)
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput).ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs, RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtr and RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput
}

type regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrType RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs

func RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtr(v *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrInput {
	return (*regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrType)(v)
}

func (*regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o.ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy) *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy {
		return &v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput)
}

// The specification for how client requests are aborted as part of fault
// injection.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput) Abort() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy) *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort {
		return v.Abort
	}).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput)
}

// The specification for how client requests are delayed as part of fault
// injection, before being sent to a backend service.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput) Delay() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy) *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay {
		return v.Delay
	}).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput) Elem() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy {
		return *v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput)
}

// The specification for how client requests are aborted as part of fault
// injection.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput) Abort() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy) *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort {
		if v == nil {
			return nil
		}
		return v.Abort
	}).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput)
}

// The specification for how client requests are delayed as part of fault
// injection, before being sent to a backend service.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput) Delay() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicy) *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort struct {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	HttpStatus int `pulumi:"httpStatus"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage float64 `pulumi:"percentage"`
}

// RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs and RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs{...}
//
type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs struct {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	HttpStatus pulumi.IntInput `pulumi:"httpStatus"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage pulumi.Float64Input `pulumi:"percentage"`
}

func (RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput)
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput).ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs, RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtr and RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput
}

type regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrType RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs

func RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtr(v *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrInput {
	return (*regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrType)(v)
}

func (*regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o.ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort) *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort {
		return &v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput)
}

// The HTTP status code used to abort the request. The value must be between 200
// and 599 inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput) HttpStatus() pulumi.IntOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort) int { return v.HttpStatus }).(pulumi.IntOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will
// be introduced as part of fault injection. The value must be between 0.0 and
// 100.0 inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput) Percentage() pulumi.Float64Output {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort) float64 {
		return v.Percentage
	}).(pulumi.Float64Output)
}

type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput) Elem() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort {
		return *v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput)
}

// The HTTP status code used to abort the request. The value must be between 200
// and 599 inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput) HttpStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort) *int {
		if v == nil {
			return nil
		}
		return &v.HttpStatus
	}).(pulumi.IntPtrOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will
// be introduced as part of fault injection. The value must be between 0.0 and
// 100.0 inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort) *float64 {
		if v == nil {
			return nil
		}
		return &v.Percentage
	}).(pulumi.Float64PtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay struct {
	// Specifies the value of the fixed delay interval.  Structure is documented below.
	FixedDelay RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay `pulumi:"fixedDelay"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage float64 `pulumi:"percentage"`
}

// RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs and RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs{...}
//
type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs struct {
	// Specifies the value of the fixed delay interval.  Structure is documented below.
	FixedDelay RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayInput `pulumi:"fixedDelay"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage pulumi.Float64Input `pulumi:"percentage"`
}

func (RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput)
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput).ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs, RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtr and RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput
}

type regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrType RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs

func RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtr(v *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrInput {
	return (*regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrType)(v)
}

func (*regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o.ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay) *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay {
		return &v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput)
}

// Specifies the value of the fixed delay interval.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput) FixedDelay() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay {
		return v.FixedDelay
	}).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will
// be introduced as part of fault injection. The value must be between 0.0 and
// 100.0 inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput) Percentage() pulumi.Float64Output {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay) float64 {
		return v.Percentage
	}).(pulumi.Float64Output)
}

type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput) Elem() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay {
		return *v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput)
}

// Specifies the value of the fixed delay interval.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput) FixedDelay() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay) *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay {
		if v == nil {
			return nil
		}
		return &v.FixedDelay
	}).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will
// be introduced as part of fault injection. The value must be between 0.0 and
// 100.0 inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay) *float64 {
		if v == nil {
			return nil
		}
		return &v.Percentage
	}).(pulumi.Float64PtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds string `pulumi:"seconds"`
}

// RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs and RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs{...}
//
type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.StringInput `pulumi:"seconds"`
}

func (RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput)
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput).ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs, RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtr and RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput
}

type regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs

func RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtr(v *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput {
	return (*regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType)(v)
}

func (*regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o.ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay) *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay {
		return &v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay) *int {
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) Seconds() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay) string {
		return v.Seconds
	}).(pulumi.StringOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) Elem() RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay) RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay {
		return *v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay) *string {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.StringPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy struct {
	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService string `pulumi:"backendService"`
}

// RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs and RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs{...}
//
type RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput() RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs struct {
	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService pulumi.StringInput `pulumi:"backendService"`
}

func (RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput() RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput)
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput).ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs, RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtr and RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput
}

type regionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrType RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs

func RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtr(v *RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs) RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrInput {
	return (*regionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrType)(v)
}

func (*regionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput() RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o.ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy) *RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy {
		return &v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput)
}

// The default RegionBackendService resource. Before
// forwarding the request to backendService, the loadbalancer applies any relevant
// headerActions specified as part of this backendServiceWeight.
func (o RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput) BackendService() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy) string { return v.BackendService }).(pulumi.StringOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput) Elem() RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy) RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy {
		return *v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput)
}

// The default RegionBackendService resource. Before
// forwarding the request to backendService, the loadbalancer applies any relevant
// headerActions specified as part of this backendServiceWeight.
func (o RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput) BackendService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.BackendService
	}).(pulumi.StringPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy struct {
	// Specifies the allowed number retries. This number must be > 0.
	NumRetries *int `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt.  Structure is documented below.
	PerTryTimeout *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout `pulumi:"perTryTimeout"`
	// Specifies one or more conditions when this retry rule applies. Valid values are:
	// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
	// any 5xx response code, or if the backend service does not respond at all,
	// example: disconnects, reset, read timeout, connection failure, and refused
	// streams.
	// - gateway-error: Similar to 5xx, but only applies to response codes
	// 502, 503 or 504.
	// - connect-failure: Loadbalancer will retry on failures
	// connecting to backend services, for example due to connection timeouts.
	// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
	// Currently the only retriable error supported is 409.
	// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
	// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
	// - cancelled: Loadbalancer will retry if the gRPC status code in the response
	// header is set to cancelled
	// - deadline-exceeded: Loadbalancer will retry if the
	// gRPC status code in the response header is set to deadline-exceeded
	// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
	// header is set to resource-exhausted
	// - unavailable: Loadbalancer will retry if
	// the gRPC status code in the response header is set to unavailable
	RetryConditions []string `pulumi:"retryConditions"`
}

// RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs and RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs{...}
//
type RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs struct {
	// Specifies the allowed number retries. This number must be > 0.
	NumRetries pulumi.IntPtrInput `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt.  Structure is documented below.
	PerTryTimeout RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrInput `pulumi:"perTryTimeout"`
	// Specifies one or more conditions when this retry rule applies. Valid values are:
	// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
	// any 5xx response code, or if the backend service does not respond at all,
	// example: disconnects, reset, read timeout, connection failure, and refused
	// streams.
	// - gateway-error: Similar to 5xx, but only applies to response codes
	// 502, 503 or 504.
	// - connect-failure: Loadbalancer will retry on failures
	// connecting to backend services, for example due to connection timeouts.
	// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
	// Currently the only retriable error supported is 409.
	// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
	// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
	// - cancelled: Loadbalancer will retry if the gRPC status code in the response
	// header is set to cancelled
	// - deadline-exceeded: Loadbalancer will retry if the
	// gRPC status code in the response header is set to deadline-exceeded
	// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
	// header is set to resource-exhausted
	// - unavailable: Loadbalancer will retry if
	// the gRPC status code in the response header is set to unavailable
	RetryConditions pulumi.StringArrayInput `pulumi:"retryConditions"`
}

func (RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput)
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput).ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs, RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtr and RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput
}

type regionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrType RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs

func RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtr(v *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrInput {
	return (*regionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrType)(v)
}

func (*regionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return o.ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy) *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy {
		return &v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput)
}

// Specifies the allowed number retries. This number must be > 0.
func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy) *int { return v.NumRetries }).(pulumi.IntPtrOutput)
}

// Specifies a non-zero timeout per retry attempt.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput) PerTryTimeout() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy) *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout {
		return v.PerTryTimeout
	}).(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput)
}

// Specifies one or more conditions when this retry rule applies. Valid values are:
// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
// any 5xx response code, or if the backend service does not respond at all,
// example: disconnects, reset, read timeout, connection failure, and refused
// streams.
// - gateway-error: Similar to 5xx, but only applies to response codes
// 502, 503 or 504.
// - connect-failure: Loadbalancer will retry on failures
// connecting to backend services, for example due to connection timeouts.
// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
// Currently the only retriable error supported is 409.
// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
// - cancelled: Loadbalancer will retry if the gRPC status code in the response
// header is set to cancelled
// - deadline-exceeded: Loadbalancer will retry if the
// gRPC status code in the response header is set to deadline-exceeded
// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
// header is set to resource-exhausted
// - unavailable: Loadbalancer will retry if
// the gRPC status code in the response header is set to unavailable
func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy) []string { return v.RetryConditions }).(pulumi.StringArrayOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput) Elem() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy {
		return *v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput)
}

// Specifies the allowed number retries. This number must be > 0.
func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.NumRetries
	}).(pulumi.IntPtrOutput)
}

// Specifies a non-zero timeout per retry attempt.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput) PerTryTimeout() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy) *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout {
		if v == nil {
			return nil
		}
		return v.PerTryTimeout
	}).(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput)
}

// Specifies one or more conditions when this retry rule applies. Valid values are:
// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
// any 5xx response code, or if the backend service does not respond at all,
// example: disconnects, reset, read timeout, connection failure, and refused
// streams.
// - gateway-error: Similar to 5xx, but only applies to response codes
// 502, 503 or 504.
// - connect-failure: Loadbalancer will retry on failures
// connecting to backend services, for example due to connection timeouts.
// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
// Currently the only retriable error supported is 409.
// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
// - cancelled: Loadbalancer will retry if the gRPC status code in the response
// header is set to cancelled
// - deadline-exceeded: Loadbalancer will retry if the
// gRPC status code in the response header is set to deadline-exceeded
// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
// header is set to resource-exhausted
// - unavailable: Loadbalancer will retry if
// the gRPC status code in the response header is set to unavailable
func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicy) []string {
		if v == nil {
			return nil
		}
		return v.RetryConditions
	}).(pulumi.StringArrayOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds string `pulumi:"seconds"`
}

// RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs and RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs{...}
//
type RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.StringInput `pulumi:"seconds"`
}

func (RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput)
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput).ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs, RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtr and RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput
}

type regionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrType RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs

func RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtr(v *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrInput {
	return (*regionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrType)(v)
}

func (*regionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o.ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout) *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout {
		return &v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput) Seconds() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout) string { return v.Seconds }).(pulumi.StringOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) Elem() RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout) RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout {
		return *v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout) *string {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.StringPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionTimeout struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds string `pulumi:"seconds"`
}

// RegionUrlMapPathMatcherPathRuleRouteActionTimeoutInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs and RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionTimeoutInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs{...}
//
type RegionUrlMapPathMatcherPathRuleRouteActionTimeoutInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput() RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.StringInput `pulumi:"seconds"`
}

func (RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionTimeout)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput() RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput)
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput).ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs, RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtr and RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput
}

type regionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrType RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs

func RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtr(v *RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs) RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrInput {
	return (*regionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrType)(v)
}

func (*regionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionTimeout)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionTimeout)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput() RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return o.ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionTimeout) *RegionUrlMapPathMatcherPathRuleRouteActionTimeout {
		return &v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionTimeout) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput) Seconds() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionTimeout) string { return v.Seconds }).(pulumi.StringOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionTimeout)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput) Elem() RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionTimeout) RegionUrlMapPathMatcherPathRuleRouteActionTimeout {
		return *v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionTimeout) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionTimeout) *string {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.StringPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite struct {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	HostRewrite *string `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	PathPrefixRewrite *string `pulumi:"pathPrefixRewrite"`
}

// RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs and RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs{...}
//
type RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput() RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs struct {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	HostRewrite pulumi.StringPtrInput `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	PathPrefixRewrite pulumi.StringPtrInput `pulumi:"pathPrefixRewrite"`
}

func (RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput() RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput)
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput).ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs, RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtr and RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput
}

type regionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrType RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs

func RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtr(v *RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs) RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrInput {
	return (*regionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrType)(v)
}

func (*regionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput() RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return o.ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite) *RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite {
		return &v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput)
}

// Prior to forwarding the request to the selected service, the request's host
// header is replaced with contents of hostRewrite. The value must be between 1 and
// 255 characters.
func (o RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite) *string { return v.HostRewrite }).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected backend service, the matching
// portion of the request's path is replaced by pathPrefixRewrite. The value must
// be between 1 and 1024 characters.
func (o RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite) *string { return v.PathPrefixRewrite }).(pulumi.StringPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput) Elem() RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite) RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite {
		return *v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput)
}

// Prior to forwarding the request to the selected service, the request's host
// header is replaced with contents of hostRewrite. The value must be between 1 and
// 255 characters.
func (o RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.HostRewrite
	}).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected backend service, the matching
// portion of the request's path is replaced by pathPrefixRewrite. The value must
// be between 1 and 1024 characters.
func (o RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.PathPrefixRewrite
	}).(pulumi.StringPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService struct {
	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService string `pulumi:"backendService"`
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
	HeaderAction *RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction `pulumi:"headerAction"`
	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	Weight int `pulumi:"weight"`
}

// RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs and RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs{...}
//
type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs struct {
	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService pulumi.StringInput `pulumi:"backendService"`
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
	HeaderAction RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrInput `pulumi:"headerAction"`
	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput)
}

// RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArray and RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArray{ RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs{...} }
//
type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArray []RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceInput

func (RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArray) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArray) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput {
	return o
}

// The default RegionBackendService resource. Before
// forwarding the request to backendService, the loadbalancer applies any relevant
// headerActions specified as part of this backendServiceWeight.
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput) BackendService() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService) string {
		return v.BackendService
	}).(pulumi.StringOutput)
}

// Specifies changes to request and response headers that need to take effect for
// the selected backendService. headerAction specified here take effect before
// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput) HeaderAction() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService) *RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction {
		return v.HeaderAction
	}).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput)
}

// Specifies the fraction of traffic sent to backendService, computed as weight /
// (sum of all weightedBackendService weights in routeAction) . The selection of a
// backend service is determined only for new traffic. Once a user's request has
// been directed to a backendService, subsequent requests will be sent to the same
// backendService as determined by the BackendService's session affinity policy.
// The value must be between 0 and 1000
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService) int { return v.Weight }).(pulumi.IntOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput) Index(i pulumi.IntInput) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService {
		return vs[0].([]RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendService)[vs[1].(int)]
	}).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.  Structure is documented below.
	RequestHeadersToAdds []RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd `pulumi:"requestHeadersToAdds"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemoves []string `pulumi:"requestHeadersToRemoves"`
	// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
	ResponseHeadersToAdds []RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd `pulumi:"responseHeadersToAdds"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemoves []string `pulumi:"responseHeadersToRemoves"`
}

// RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs and RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs{...}
//
type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.  Structure is documented below.
	RequestHeadersToAdds RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayInput `pulumi:"requestHeadersToAdds"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemoves pulumi.StringArrayInput `pulumi:"requestHeadersToRemoves"`
	// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
	ResponseHeadersToAdds RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayInput `pulumi:"responseHeadersToAdds"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemoves pulumi.StringArrayInput `pulumi:"responseHeadersToRemoves"`
}

func (RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput)
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput).ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs, RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtr and RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput
}

type regionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrType RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs

func RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtr(v *RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrInput {
	return (*regionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrType)(v)
}

func (*regionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrType) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o.ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) *RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction {
		return &v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput)
}

// Headers to add to a matching request prior to forwarding the request to the
// backendService.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) RequestHeadersToAdds() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) []RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd {
		return v.RequestHeadersToAdds
	}).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request
// prior to forwarding the request to the backendService.
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) RequestHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) []string {
		return v.RequestHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) ResponseHeadersToAdds() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) []RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd {
		return v.ResponseHeadersToAdds
	}).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the response
// prior to sending the response back to the client.
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) ResponseHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) []string {
		return v.ResponseHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) Elem() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction {
		return *v
	}).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput)
}

// Headers to add to a matching request prior to forwarding the request to the
// backendService.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) RequestHeadersToAdds() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) []RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToAdds
	}).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request
// prior to forwarding the request to the backendService.
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) RequestHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ResponseHeadersToAdds() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) []RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToAdds
	}).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the response
// prior to sending the response back to the client.
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ResponseHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace bool `pulumi:"replace"`
}

// RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs and RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs{...}
//
type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput)
}

// RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray and RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray{ RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs{...} }
//
type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray []RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddInput

func (RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return o
}

// The name of the header.
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd) string {
		return v.HeaderName
	}).(pulumi.StringOutput)
}

// The value of the header to add.
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd) string {
		return v.HeaderValue
	}).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the
// header. If true, headerValue is set for the header, discarding any values that
// were set for that header.
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd) bool {
		return v.Replace
	}).(pulumi.BoolOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput) Index(i pulumi.IntInput) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd {
		return vs[0].([]RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)[vs[1].(int)]
	}).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace bool `pulumi:"replace"`
}

// RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs and RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs{...}
//
type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput)
}

// RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayInput is an input type that accepts RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray and RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray{ RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs{...} }
//
type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput
	ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray []RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddInput

func (RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return o
}

// The name of the header.
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd) string {
		return v.HeaderName
	}).(pulumi.StringOutput)
}

// The value of the header to add.
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd) string {
		return v.HeaderValue
	}).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the
// header. If true, headerValue is set for the header, discarding any values that
// were set for that header.
func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd) bool {
		return v.Replace
	}).(pulumi.BoolOutput)
}

type RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput() RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput) ToRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput) Index(i pulumi.IntInput) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd {
		return vs[0].([]RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)[vs[1].(int)]
	}).(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput)
}

type RegionUrlMapPathMatcherPathRuleUrlRedirect struct {
	// The host that will be used in the redirect response instead of the one that was
	// supplied in the request. The value must be between 1 and 255 characters.
	HostRedirect *string `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set
	// to false, the URL scheme of the redirected request will remain the same as that
	// of the request. This must only be set for UrlMaps used in TargetHttpProxys.
	// Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
	HttpsRedirect *bool `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was
	// supplied in the request. Only one of pathRedirect or prefixRedirect must be
	// specified. The value must be between 1 and 1024 characters.
	PathRedirect *string `pulumi:"pathRedirect"`
	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	// retaining the remaining portion of the URL before redirecting the request.
	PrefixRedirect *string `pulumi:"prefixRedirect"`
	// The HTTP Status code to use for this RedirectAction. Supported values are:
	// - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
	// - FOUND, which corresponds to 302.
	// - SEE_OTHER which corresponds to 303.
	// - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
	// will be retained.
	// - PERMANENT_REDIRECT, which corresponds to 308. In this case,
	// the request method will be retained.
	RedirectResponseCode *string `pulumi:"redirectResponseCode"`
	// If set to true, any accompanying query portion of the original URL is removed
	// prior to redirecting the request. If set to false, the query portion of the
	// original URL is retained.
	StripQuery bool `pulumi:"stripQuery"`
}

// RegionUrlMapPathMatcherPathRuleUrlRedirectInput is an input type that accepts RegionUrlMapPathMatcherPathRuleUrlRedirectArgs and RegionUrlMapPathMatcherPathRuleUrlRedirectOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleUrlRedirectInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleUrlRedirectArgs{...}
//
type RegionUrlMapPathMatcherPathRuleUrlRedirectInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleUrlRedirectOutput() RegionUrlMapPathMatcherPathRuleUrlRedirectOutput
	ToRegionUrlMapPathMatcherPathRuleUrlRedirectOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleUrlRedirectOutput
}

type RegionUrlMapPathMatcherPathRuleUrlRedirectArgs struct {
	// The host that will be used in the redirect response instead of the one that was
	// supplied in the request. The value must be between 1 and 255 characters.
	HostRedirect pulumi.StringPtrInput `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set
	// to false, the URL scheme of the redirected request will remain the same as that
	// of the request. This must only be set for UrlMaps used in TargetHttpProxys.
	// Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
	HttpsRedirect pulumi.BoolPtrInput `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was
	// supplied in the request. Only one of pathRedirect or prefixRedirect must be
	// specified. The value must be between 1 and 1024 characters.
	PathRedirect pulumi.StringPtrInput `pulumi:"pathRedirect"`
	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	// retaining the remaining portion of the URL before redirecting the request.
	PrefixRedirect pulumi.StringPtrInput `pulumi:"prefixRedirect"`
	// The HTTP Status code to use for this RedirectAction. Supported values are:
	// - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
	// - FOUND, which corresponds to 302.
	// - SEE_OTHER which corresponds to 303.
	// - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
	// will be retained.
	// - PERMANENT_REDIRECT, which corresponds to 308. In this case,
	// the request method will be retained.
	RedirectResponseCode pulumi.StringPtrInput `pulumi:"redirectResponseCode"`
	// If set to true, any accompanying query portion of the original URL is removed
	// prior to redirecting the request. If set to false, the query portion of the
	// original URL is retained.
	StripQuery pulumi.BoolInput `pulumi:"stripQuery"`
}

func (RegionUrlMapPathMatcherPathRuleUrlRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleUrlRedirect)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherPathRuleUrlRedirectArgs) ToRegionUrlMapPathMatcherPathRuleUrlRedirectOutput() RegionUrlMapPathMatcherPathRuleUrlRedirectOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleUrlRedirectOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleUrlRedirectArgs) ToRegionUrlMapPathMatcherPathRuleUrlRedirectOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleUrlRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleUrlRedirectOutput)
}

func (i RegionUrlMapPathMatcherPathRuleUrlRedirectArgs) ToRegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput() RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherPathRuleUrlRedirectArgs) ToRegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleUrlRedirectOutput).ToRegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherPathRuleUrlRedirectPtrInput is an input type that accepts RegionUrlMapPathMatcherPathRuleUrlRedirectArgs, RegionUrlMapPathMatcherPathRuleUrlRedirectPtr and RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherPathRuleUrlRedirectPtrInput` via:
//
// 		 RegionUrlMapPathMatcherPathRuleUrlRedirectArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherPathRuleUrlRedirectPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput() RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput
	ToRegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput
}

type regionUrlMapPathMatcherPathRuleUrlRedirectPtrType RegionUrlMapPathMatcherPathRuleUrlRedirectArgs

func RegionUrlMapPathMatcherPathRuleUrlRedirectPtr(v *RegionUrlMapPathMatcherPathRuleUrlRedirectArgs) RegionUrlMapPathMatcherPathRuleUrlRedirectPtrInput {
	return (*regionUrlMapPathMatcherPathRuleUrlRedirectPtrType)(v)
}

func (*regionUrlMapPathMatcherPathRuleUrlRedirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleUrlRedirect)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherPathRuleUrlRedirectPtrType) ToRegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput() RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return i.ToRegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherPathRuleUrlRedirectPtrType) ToRegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput)
}

type RegionUrlMapPathMatcherPathRuleUrlRedirectOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleUrlRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherPathRuleUrlRedirect)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleUrlRedirectOutput) ToRegionUrlMapPathMatcherPathRuleUrlRedirectOutput() RegionUrlMapPathMatcherPathRuleUrlRedirectOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleUrlRedirectOutput) ToRegionUrlMapPathMatcherPathRuleUrlRedirectOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleUrlRedirectOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleUrlRedirectOutput) ToRegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput() RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return o.ToRegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherPathRuleUrlRedirectOutput) ToRegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleUrlRedirect) *RegionUrlMapPathMatcherPathRuleUrlRedirect {
		return &v
	}).(RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput)
}

// The host that will be used in the redirect response instead of the one that was
// supplied in the request. The value must be between 1 and 255 characters.
func (o RegionUrlMapPathMatcherPathRuleUrlRedirectOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleUrlRedirect) *string { return v.HostRedirect }).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set
// to false, the URL scheme of the redirected request will remain the same as that
// of the request. This must only be set for UrlMaps used in TargetHttpProxys.
// Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
func (o RegionUrlMapPathMatcherPathRuleUrlRedirectOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleUrlRedirect) *bool { return v.HttpsRedirect }).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was
// supplied in the request. Only one of pathRedirect or prefixRedirect must be
// specified. The value must be between 1 and 1024 characters.
func (o RegionUrlMapPathMatcherPathRuleUrlRedirectOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleUrlRedirect) *string { return v.PathRedirect }).(pulumi.StringPtrOutput)
}

// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
// retaining the remaining portion of the URL before redirecting the request.
func (o RegionUrlMapPathMatcherPathRuleUrlRedirectOutput) PrefixRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleUrlRedirect) *string { return v.PrefixRedirect }).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for this RedirectAction. Supported values are:
// - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
// - FOUND, which corresponds to 302.
// - SEE_OTHER which corresponds to 303.
// - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
// will be retained.
// - PERMANENT_REDIRECT, which corresponds to 308. In this case,
// the request method will be retained.
func (o RegionUrlMapPathMatcherPathRuleUrlRedirectOutput) RedirectResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleUrlRedirect) *string { return v.RedirectResponseCode }).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed
// prior to redirecting the request. If set to false, the query portion of the
// original URL is retained.
func (o RegionUrlMapPathMatcherPathRuleUrlRedirectOutput) StripQuery() pulumi.BoolOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherPathRuleUrlRedirect) bool { return v.StripQuery }).(pulumi.BoolOutput)
}

type RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherPathRuleUrlRedirect)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput) ToRegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput() RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput) ToRegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput) Elem() RegionUrlMapPathMatcherPathRuleUrlRedirectOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleUrlRedirect) RegionUrlMapPathMatcherPathRuleUrlRedirect {
		return *v
	}).(RegionUrlMapPathMatcherPathRuleUrlRedirectOutput)
}

// The host that will be used in the redirect response instead of the one that was
// supplied in the request. The value must be between 1 and 255 characters.
func (o RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.HostRedirect
	}).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set
// to false, the URL scheme of the redirected request will remain the same as that
// of the request. This must only be set for UrlMaps used in TargetHttpProxys.
// Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
func (o RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleUrlRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.HttpsRedirect
	}).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was
// supplied in the request. Only one of pathRedirect or prefixRedirect must be
// specified. The value must be between 1 and 1024 characters.
func (o RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.PathRedirect
	}).(pulumi.StringPtrOutput)
}

// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
// retaining the remaining portion of the URL before redirecting the request.
func (o RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput) PrefixRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.PrefixRedirect
	}).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for this RedirectAction. Supported values are:
// - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
// - FOUND, which corresponds to 302.
// - SEE_OTHER which corresponds to 303.
// - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
// will be retained.
// - PERMANENT_REDIRECT, which corresponds to 308. In this case,
// the request method will be retained.
func (o RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput) RedirectResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.RedirectResponseCode
	}).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed
// prior to redirecting the request. If set to false, the query portion of the
// original URL is retained.
func (o RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherPathRuleUrlRedirect) *bool {
		if v == nil {
			return nil
		}
		return &v.StripQuery
	}).(pulumi.BoolPtrOutput)
}

type RegionUrlMapPathMatcherRouteRule struct {
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
	HeaderAction *RegionUrlMapPathMatcherRouteRuleHeaderAction `pulumi:"headerAction"`
	// The rules for determining a match.  Structure is documented below.
	MatchRules []RegionUrlMapPathMatcherRouteRuleMatchRule `pulumi:"matchRules"`
	// For routeRules within a given pathMatcher, priority determines the order
	// in which load balancer will interpret routeRules. RouteRules are evaluated
	// in order of priority, from the lowest to highest number. The priority of
	// a rule decreases as its number increases (1, 2, 3, N+1). The first rule
	// that matches the request is applied.
	// You cannot configure two or more routeRules with the same priority.
	// Priority for each rule must be set to a number between 0 and
	// 2147483647 inclusive.
	// Priority numbers can have gaps, which enable you to add or remove rules
	// in the future without affecting the rest of the rules. For example,
	// 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
	// you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
	// future without any impact on existing rules.
	Priority int `pulumi:"priority"`
	// In response to a matching path, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.  Structure is documented below.
	RouteAction *RegionUrlMapPathMatcherRouteRuleRouteAction `pulumi:"routeAction"`
	// A reference to expected RegionBackendService resource the given URL should be mapped to.
	Service *string `pulumi:"service"`
	// When a path pattern is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.  Structure is documented below.
	UrlRedirect *RegionUrlMapPathMatcherRouteRuleUrlRedirect `pulumi:"urlRedirect"`
}

// RegionUrlMapPathMatcherRouteRuleInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleArgs and RegionUrlMapPathMatcherRouteRuleOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleOutput() RegionUrlMapPathMatcherRouteRuleOutput
	ToRegionUrlMapPathMatcherRouteRuleOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleOutput
}

type RegionUrlMapPathMatcherRouteRuleArgs struct {
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
	HeaderAction RegionUrlMapPathMatcherRouteRuleHeaderActionPtrInput `pulumi:"headerAction"`
	// The rules for determining a match.  Structure is documented below.
	MatchRules RegionUrlMapPathMatcherRouteRuleMatchRuleArrayInput `pulumi:"matchRules"`
	// For routeRules within a given pathMatcher, priority determines the order
	// in which load balancer will interpret routeRules. RouteRules are evaluated
	// in order of priority, from the lowest to highest number. The priority of
	// a rule decreases as its number increases (1, 2, 3, N+1). The first rule
	// that matches the request is applied.
	// You cannot configure two or more routeRules with the same priority.
	// Priority for each rule must be set to a number between 0 and
	// 2147483647 inclusive.
	// Priority numbers can have gaps, which enable you to add or remove rules
	// in the future without affecting the rest of the rules. For example,
	// 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
	// you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
	// future without any impact on existing rules.
	Priority pulumi.IntInput `pulumi:"priority"`
	// In response to a matching path, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.  Structure is documented below.
	RouteAction RegionUrlMapPathMatcherRouteRuleRouteActionPtrInput `pulumi:"routeAction"`
	// A reference to expected RegionBackendService resource the given URL should be mapped to.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// When a path pattern is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.  Structure is documented below.
	UrlRedirect RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrInput `pulumi:"urlRedirect"`
}

func (RegionUrlMapPathMatcherRouteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRule)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleArgs) ToRegionUrlMapPathMatcherRouteRuleOutput() RegionUrlMapPathMatcherRouteRuleOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleArgs) ToRegionUrlMapPathMatcherRouteRuleOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleOutput)
}

// RegionUrlMapPathMatcherRouteRuleArrayInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleArray and RegionUrlMapPathMatcherRouteRuleArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleArrayInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleArray{ RegionUrlMapPathMatcherRouteRuleArgs{...} }
//
type RegionUrlMapPathMatcherRouteRuleArrayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleArrayOutput() RegionUrlMapPathMatcherRouteRuleArrayOutput
	ToRegionUrlMapPathMatcherRouteRuleArrayOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleArrayOutput
}

type RegionUrlMapPathMatcherRouteRuleArray []RegionUrlMapPathMatcherRouteRuleInput

func (RegionUrlMapPathMatcherRouteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRule)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleArray) ToRegionUrlMapPathMatcherRouteRuleArrayOutput() RegionUrlMapPathMatcherRouteRuleArrayOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleArray) ToRegionUrlMapPathMatcherRouteRuleArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRule)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleOutput) ToRegionUrlMapPathMatcherRouteRuleOutput() RegionUrlMapPathMatcherRouteRuleOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleOutput) ToRegionUrlMapPathMatcherRouteRuleOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleOutput {
	return o
}

// Specifies changes to request and response headers that need to take effect for
// the selected backendService. headerAction specified here take effect before
// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleOutput) HeaderAction() RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRule) *RegionUrlMapPathMatcherRouteRuleHeaderAction {
		return v.HeaderAction
	}).(RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput)
}

// The rules for determining a match.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleOutput) MatchRules() RegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRule) []RegionUrlMapPathMatcherRouteRuleMatchRule {
		return v.MatchRules
	}).(RegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput)
}

// For routeRules within a given pathMatcher, priority determines the order
// in which load balancer will interpret routeRules. RouteRules are evaluated
// in order of priority, from the lowest to highest number. The priority of
// a rule decreases as its number increases (1, 2, 3, N+1). The first rule
// that matches the request is applied.
// You cannot configure two or more routeRules with the same priority.
// Priority for each rule must be set to a number between 0 and
// 2147483647 inclusive.
// Priority numbers can have gaps, which enable you to add or remove rules
// in the future without affecting the rest of the rules. For example,
// 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
// you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
// future without any impact on existing rules.
func (o RegionUrlMapPathMatcherRouteRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRule) int { return v.Priority }).(pulumi.IntOutput)
}

// In response to a matching path, the load balancer performs advanced routing
// actions like URL rewrites, header transformations, etc. prior to forwarding the
// request to the selected backend. If routeAction specifies any
// weightedBackendServices, service must not be set. Conversely if service is set,
// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
// or urlRedirect must be set.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleOutput) RouteAction() RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRule) *RegionUrlMapPathMatcherRouteRuleRouteAction {
		return v.RouteAction
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput)
}

// A reference to expected RegionBackendService resource the given URL should be mapped to.
func (o RegionUrlMapPathMatcherRouteRuleOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRule) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// When a path pattern is matched, the request is redirected to a URL specified by
// urlRedirect. If urlRedirect is specified, service or routeAction must not be
// set.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleOutput) UrlRedirect() RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRule) *RegionUrlMapPathMatcherRouteRuleUrlRedirect {
		return v.UrlRedirect
	}).(RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRule)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleArrayOutput) ToRegionUrlMapPathMatcherRouteRuleArrayOutput() RegionUrlMapPathMatcherRouteRuleArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleArrayOutput) ToRegionUrlMapPathMatcherRouteRuleArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleArrayOutput) Index(i pulumi.IntInput) RegionUrlMapPathMatcherRouteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapPathMatcherRouteRule {
		return vs[0].([]RegionUrlMapPathMatcherRouteRule)[vs[1].(int)]
	}).(RegionUrlMapPathMatcherRouteRuleOutput)
}

type RegionUrlMapPathMatcherRouteRuleHeaderAction struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.  Structure is documented below.
	RequestHeadersToAdds []RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd `pulumi:"requestHeadersToAdds"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemoves []string `pulumi:"requestHeadersToRemoves"`
	// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
	ResponseHeadersToAdds []RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd `pulumi:"responseHeadersToAdds"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemoves []string `pulumi:"responseHeadersToRemoves"`
}

// RegionUrlMapPathMatcherRouteRuleHeaderActionInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleHeaderActionArgs and RegionUrlMapPathMatcherRouteRuleHeaderActionOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleHeaderActionInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleHeaderActionArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleHeaderActionInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleHeaderActionOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionOutput
	ToRegionUrlMapPathMatcherRouteRuleHeaderActionOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionOutput
}

type RegionUrlMapPathMatcherRouteRuleHeaderActionArgs struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.  Structure is documented below.
	RequestHeadersToAdds RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayInput `pulumi:"requestHeadersToAdds"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemoves pulumi.StringArrayInput `pulumi:"requestHeadersToRemoves"`
	// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
	ResponseHeadersToAdds RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayInput `pulumi:"responseHeadersToAdds"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemoves pulumi.StringArrayInput `pulumi:"responseHeadersToRemoves"`
}

func (RegionUrlMapPathMatcherRouteRuleHeaderActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleHeaderAction)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleHeaderActionArgs) ToRegionUrlMapPathMatcherRouteRuleHeaderActionOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleHeaderActionOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleHeaderActionArgs) ToRegionUrlMapPathMatcherRouteRuleHeaderActionOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleHeaderActionOutput)
}

func (i RegionUrlMapPathMatcherRouteRuleHeaderActionArgs) ToRegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleHeaderActionArgs) ToRegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleHeaderActionOutput).ToRegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherRouteRuleHeaderActionPtrInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleHeaderActionArgs, RegionUrlMapPathMatcherRouteRuleHeaderActionPtr and RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleHeaderActionPtrInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleHeaderActionArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherRouteRuleHeaderActionPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput
	ToRegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput
}

type regionUrlMapPathMatcherRouteRuleHeaderActionPtrType RegionUrlMapPathMatcherRouteRuleHeaderActionArgs

func RegionUrlMapPathMatcherRouteRuleHeaderActionPtr(v *RegionUrlMapPathMatcherRouteRuleHeaderActionArgs) RegionUrlMapPathMatcherRouteRuleHeaderActionPtrInput {
	return (*regionUrlMapPathMatcherRouteRuleHeaderActionPtrType)(v)
}

func (*regionUrlMapPathMatcherRouteRuleHeaderActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleHeaderAction)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherRouteRuleHeaderActionPtrType) ToRegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherRouteRuleHeaderActionPtrType) ToRegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleHeaderActionOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleHeaderActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleHeaderAction)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionOutput) ToRegionUrlMapPathMatcherRouteRuleHeaderActionOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionOutput) ToRegionUrlMapPathMatcherRouteRuleHeaderActionOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionOutput) ToRegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return o.ToRegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionOutput) ToRegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleHeaderAction) *RegionUrlMapPathMatcherRouteRuleHeaderAction {
		return &v
	}).(RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput)
}

// Headers to add to a matching request prior to forwarding the request to the
// backendService.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleHeaderActionOutput) RequestHeadersToAdds() RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleHeaderAction) []RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd {
		return v.RequestHeadersToAdds
	}).(RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request
// prior to forwarding the request to the backendService.
func (o RegionUrlMapPathMatcherRouteRuleHeaderActionOutput) RequestHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleHeaderAction) []string { return v.RequestHeadersToRemoves }).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleHeaderActionOutput) ResponseHeadersToAdds() RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleHeaderAction) []RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd {
		return v.ResponseHeadersToAdds
	}).(RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the response
// prior to sending the response back to the client.
func (o RegionUrlMapPathMatcherRouteRuleHeaderActionOutput) ResponseHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleHeaderAction) []string { return v.ResponseHeadersToRemoves }).(pulumi.StringArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleHeaderAction)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput) ToRegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput) ToRegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput) Elem() RegionUrlMapPathMatcherRouteRuleHeaderActionOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleHeaderAction) RegionUrlMapPathMatcherRouteRuleHeaderAction {
		return *v
	}).(RegionUrlMapPathMatcherRouteRuleHeaderActionOutput)
}

// Headers to add to a matching request prior to forwarding the request to the
// backendService.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput) RequestHeadersToAdds() RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleHeaderAction) []RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToAdds
	}).(RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request
// prior to forwarding the request to the backendService.
func (o RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput) RequestHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput) ResponseHeadersToAdds() RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleHeaderAction) []RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToAdds
	}).(RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the response
// prior to sending the response back to the client.
func (o RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput) ResponseHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace bool `pulumi:"replace"`
}

// RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs and RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput
	ToRegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput
}

type RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs) ToRegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs) ToRegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput)
}

// RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArray and RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArray{ RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs{...} }
//
type RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput
	ToRegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput
}

type RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArray []RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddInput

func (RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArray) ToRegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArray) ToRegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput) ToRegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput) ToRegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput {
	return o
}

// The name of the header.
func (o RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd) string { return v.HeaderName }).(pulumi.StringOutput)
}

// The value of the header to add.
func (o RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd) string { return v.HeaderValue }).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the
// header. If true, headerValue is set for the header, discarding any values that
// were set for that header.
func (o RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd) bool { return v.Replace }).(pulumi.BoolOutput)
}

type RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput) ToRegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput) ToRegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput) Index(i pulumi.IntInput) RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd {
		return vs[0].([]RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd)[vs[1].(int)]
	}).(RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput)
}

type RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace bool `pulumi:"replace"`
}

// RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs and RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput
	ToRegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput
}

type RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs) ToRegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs) ToRegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput)
}

// RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArray and RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArray{ RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs{...} }
//
type RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput
	ToRegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput
}

type RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArray []RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddInput

func (RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArray) ToRegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArray) ToRegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput) ToRegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput) ToRegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput {
	return o
}

// The name of the header.
func (o RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd) string { return v.HeaderName }).(pulumi.StringOutput)
}

// The value of the header to add.
func (o RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd) string { return v.HeaderValue }).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the
// header. If true, headerValue is set for the header, discarding any values that
// were set for that header.
func (o RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd) bool { return v.Replace }).(pulumi.BoolOutput)
}

type RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput) ToRegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput() RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput) ToRegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput) Index(i pulumi.IntInput) RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd {
		return vs[0].([]RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd)[vs[1].(int)]
	}).(RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRule struct {
	// For satifying the matchRule condition, the path of the request must exactly
	// match the value specified in fullPathMatch after removing any query parameters
	// and anchor that may be part of the original URL. FullPathMatch must be between 1
	// and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
	// be specified.
	FullPathMatch *string `pulumi:"fullPathMatch"`
	// Specifies a list of header match criteria, all of which must match corresponding
	// headers in the request.  Structure is documented below.
	HeaderMatches []RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch `pulumi:"headerMatches"`
	// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
	// Defaults to false.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to
	// a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
	// clients present node metadata. If a match takes place, the relevant routing
	// configuration is made available to those proxies. For each metadataFilter in
	// this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
	// filterLabels must match the corresponding label provided in the metadata. If its
	// filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
	// with corresponding labels in the provided metadata. metadataFilters specified
	// here can be overrides those specified in ForwardingRule that refers to this
	// UrlMap. metadataFilters only applies to Loadbalancers that have their
	// loadBalancingScheme set to INTERNAL_SELF_MANAGED.  Structure is documented below.
	MetadataFilters []RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter `pulumi:"metadataFilters"`
	// The value of the header must start with the contents of prefixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	PrefixMatch *string `pulumi:"prefixMatch"`
	// Specifies a list of query parameter match criteria, all of which must match
	// corresponding query parameters in the request.  Structure is documented below.
	QueryParameterMatches []RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch `pulumi:"queryParameterMatches"`
	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch *string `pulumi:"regexMatch"`
}

// RegionUrlMapPathMatcherRouteRuleMatchRuleInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleMatchRuleArgs and RegionUrlMapPathMatcherRouteRuleMatchRuleOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleMatchRuleInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleMatchRuleArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleMatchRuleInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleMatchRuleOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleOutput
	ToRegionUrlMapPathMatcherRouteRuleMatchRuleOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleOutput
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleArgs struct {
	// For satifying the matchRule condition, the path of the request must exactly
	// match the value specified in fullPathMatch after removing any query parameters
	// and anchor that may be part of the original URL. FullPathMatch must be between 1
	// and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
	// be specified.
	FullPathMatch pulumi.StringPtrInput `pulumi:"fullPathMatch"`
	// Specifies a list of header match criteria, all of which must match corresponding
	// headers in the request.  Structure is documented below.
	HeaderMatches RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput `pulumi:"headerMatches"`
	// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
	// Defaults to false.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to
	// a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
	// clients present node metadata. If a match takes place, the relevant routing
	// configuration is made available to those proxies. For each metadataFilter in
	// this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
	// filterLabels must match the corresponding label provided in the metadata. If its
	// filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
	// with corresponding labels in the provided metadata. metadataFilters specified
	// here can be overrides those specified in ForwardingRule that refers to this
	// UrlMap. metadataFilters only applies to Loadbalancers that have their
	// loadBalancingScheme set to INTERNAL_SELF_MANAGED.  Structure is documented below.
	MetadataFilters RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayInput `pulumi:"metadataFilters"`
	// The value of the header must start with the contents of prefixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	PrefixMatch pulumi.StringPtrInput `pulumi:"prefixMatch"`
	// Specifies a list of query parameter match criteria, all of which must match
	// corresponding query parameters in the request.  Structure is documented below.
	QueryParameterMatches RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput `pulumi:"queryParameterMatches"`
	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch pulumi.StringPtrInput `pulumi:"regexMatch"`
}

func (RegionUrlMapPathMatcherRouteRuleMatchRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleMatchRule)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleArgs) ToRegionUrlMapPathMatcherRouteRuleMatchRuleOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleMatchRuleOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleArgs) ToRegionUrlMapPathMatcherRouteRuleMatchRuleOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleMatchRuleOutput)
}

// RegionUrlMapPathMatcherRouteRuleMatchRuleArrayInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleMatchRuleArray and RegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleMatchRuleArrayInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleMatchRuleArray{ RegionUrlMapPathMatcherRouteRuleMatchRuleArgs{...} }
//
type RegionUrlMapPathMatcherRouteRuleMatchRuleArrayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput
	ToRegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleArray []RegionUrlMapPathMatcherRouteRuleMatchRuleInput

func (RegionUrlMapPathMatcherRouteRuleMatchRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleMatchRule)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleArray) ToRegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleArray) ToRegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleMatchRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleMatchRule)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleOutput {
	return o
}

// For satifying the matchRule condition, the path of the request must exactly
// match the value specified in fullPathMatch after removing any query parameters
// and anchor that may be part of the original URL. FullPathMatch must be between 1
// and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
// be specified.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleOutput) FullPathMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRule) *string { return v.FullPathMatch }).(pulumi.StringPtrOutput)
}

// Specifies a list of header match criteria, all of which must match corresponding
// headers in the request.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleOutput) HeaderMatches() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRule) []RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch {
		return v.HeaderMatches
	}).(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput)
}

// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
// Defaults to false.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRule) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// Opaque filter criteria used by Loadbalancer to restrict routing configuration to
// a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
// clients present node metadata. If a match takes place, the relevant routing
// configuration is made available to those proxies. For each metadataFilter in
// this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
// filterLabels must match the corresponding label provided in the metadata. If its
// filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
// with corresponding labels in the provided metadata. metadataFilters specified
// here can be overrides those specified in ForwardingRule that refers to this
// UrlMap. metadataFilters only applies to Loadbalancers that have their
// loadBalancingScheme set to INTERNAL_SELF_MANAGED.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleOutput) MetadataFilters() RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRule) []RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter {
		return v.MetadataFilters
	}).(RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput)
}

// The value of the header must start with the contents of prefixMatch. Only one of
// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
// must be set.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleOutput) PrefixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRule) *string { return v.PrefixMatch }).(pulumi.StringPtrOutput)
}

// Specifies a list of query parameter match criteria, all of which must match
// corresponding query parameters in the request.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleOutput) QueryParameterMatches() RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRule) []RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch {
		return v.QueryParameterMatches
	}).(RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput)
}

// The queryParameterMatch matches if the value of the parameter matches the
// regular expression specified by regexMatch. For the regular expression grammar,
// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
// exactMatch and regexMatch must be set.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRule) *string { return v.RegexMatch }).(pulumi.StringPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleMatchRule)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput) Index(i pulumi.IntInput) RegionUrlMapPathMatcherRouteRuleMatchRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapPathMatcherRouteRuleMatchRule {
		return vs[0].([]RegionUrlMapPathMatcherRouteRuleMatchRule)[vs[1].(int)]
	}).(RegionUrlMapPathMatcherRouteRuleMatchRuleOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	ExactMatch *string `pulumi:"exactMatch"`
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// If set to false, the headerMatch is considered a match if the match criteria
	// above are met. If set to true, the headerMatch is considered a match if the
	// match criteria above are NOT met. Defaults to false.
	InvertMatch *bool `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	PrefixMatch *string `pulumi:"prefixMatch"`
	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	PresentMatch *bool `pulumi:"presentMatch"`
	// The header value must be an integer and its value must be in the range specified
	// in rangeMatch. If the header does not contain an integer, number or is empty,
	// the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
	// not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.  Structure is documented below.
	RangeMatch *RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch `pulumi:"rangeMatch"`
	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch *string `pulumi:"regexMatch"`
	// The value of the header must end with the contents of suffixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	SuffixMatch *string `pulumi:"suffixMatch"`
}

// RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs and RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput
	ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	ExactMatch pulumi.StringPtrInput `pulumi:"exactMatch"`
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// If set to false, the headerMatch is considered a match if the match criteria
	// above are met. If set to true, the headerMatch is considered a match if the
	// match criteria above are NOT met. Defaults to false.
	InvertMatch pulumi.BoolPtrInput `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	PrefixMatch pulumi.StringPtrInput `pulumi:"prefixMatch"`
	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	PresentMatch pulumi.BoolPtrInput `pulumi:"presentMatch"`
	// The header value must be an integer and its value must be in the range specified
	// in rangeMatch. If the header does not contain an integer, number or is empty,
	// the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
	// not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.  Structure is documented below.
	RangeMatch RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrInput `pulumi:"rangeMatch"`
	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch pulumi.StringPtrInput `pulumi:"regexMatch"`
	// The value of the header must end with the contents of suffixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	SuffixMatch pulumi.StringPtrInput `pulumi:"suffixMatch"`
}

func (RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput)
}

// RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArray and RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArray{ RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs{...} }
//
type RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput
	ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArray []RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchInput

func (RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArray) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArray) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return o
}

// The queryParameterMatch matches if the value of the parameter exactly matches
// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
// must be set.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) ExactMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch) *string { return v.ExactMatch }).(pulumi.StringPtrOutput)
}

// The name of the header.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch) string { return v.HeaderName }).(pulumi.StringOutput)
}

// If set to false, the headerMatch is considered a match if the match criteria
// above are met. If set to true, the headerMatch is considered a match if the
// match criteria above are NOT met. Defaults to false.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) InvertMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch) *bool { return v.InvertMatch }).(pulumi.BoolPtrOutput)
}

// The value of the header must start with the contents of prefixMatch. Only one of
// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
// must be set.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) PrefixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch) *string { return v.PrefixMatch }).(pulumi.StringPtrOutput)
}

// Specifies that the queryParameterMatch matches if the request contains the query
// parameter, irrespective of whether the parameter has a value or not. Only one of
// presentMatch, exactMatch and regexMatch must be set.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) PresentMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch) *bool { return v.PresentMatch }).(pulumi.BoolPtrOutput)
}

// The header value must be an integer and its value must be in the range specified
// in rangeMatch. If the header does not contain an integer, number or is empty,
// the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
// not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
// must be set.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) RangeMatch() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch) *RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch {
		return v.RangeMatch
	}).(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput)
}

// The queryParameterMatch matches if the value of the parameter matches the
// regular expression specified by regexMatch. For the regular expression grammar,
// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
// exactMatch and regexMatch must be set.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch) *string { return v.RegexMatch }).(pulumi.StringPtrOutput)
}

// The value of the header must end with the contents of suffixMatch. Only one of
// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
// must be set.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) SuffixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch) *string { return v.SuffixMatch }).(pulumi.StringPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput) Index(i pulumi.IntInput) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch {
		return vs[0].([]RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatch)[vs[1].(int)]
	}).(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch struct {
	// The end of the range (exclusive).
	RangeEnd int `pulumi:"rangeEnd"`
	// The start of the range (inclusive).
	RangeStart int `pulumi:"rangeStart"`
}

// RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs and RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput
	ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs struct {
	// The end of the range (exclusive).
	RangeEnd pulumi.IntInput `pulumi:"rangeEnd"`
	// The start of the range (inclusive).
	RangeStart pulumi.IntInput `pulumi:"rangeStart"`
}

func (RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput)
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput).ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs, RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtr and RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput
	ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput
}

type regionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrType RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs

func RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtr(v *RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrInput {
	return (*regionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrType)(v)
}

func (*regionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrType) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrType) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return o.ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch) *RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch {
		return &v
	}).(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput)
}

// The end of the range (exclusive).
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput) RangeEnd() pulumi.IntOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch) int { return v.RangeEnd }).(pulumi.IntOutput)
}

// The start of the range (inclusive).
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput) RangeStart() pulumi.IntOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch) int { return v.RangeStart }).(pulumi.IntOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput) Elem() RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch) RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch {
		return *v
	}).(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput)
}

// The end of the range (exclusive).
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput) RangeEnd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch) *int {
		if v == nil {
			return nil
		}
		return &v.RangeEnd
	}).(pulumi.IntPtrOutput)
}

// The start of the range (inclusive).
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput) RangeStart() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch) *int {
		if v == nil {
			return nil
		}
		return &v.RangeStart
	}).(pulumi.IntPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter struct {
	// The list of label value pairs that must match labels in the provided metadata
	// based on filterMatchCriteria  This list must not be empty and can have at the
	// most 64 entries.  Structure is documented below.
	FilterLabels []RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel `pulumi:"filterLabels"`
	// Specifies how individual filterLabel matches within the list of filterLabels
	// contribute towards the overall metadataFilter match. Supported values are:
	// - MATCH_ANY: At least one of the filterLabels must have a matching label in the
	// provided metadata.
	// - MATCH_ALL: All filterLabels must have matching labels in
	// the provided metadata.
	FilterMatchCriteria string `pulumi:"filterMatchCriteria"`
}

// RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs and RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput
	ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs struct {
	// The list of label value pairs that must match labels in the provided metadata
	// based on filterMatchCriteria  This list must not be empty and can have at the
	// most 64 entries.  Structure is documented below.
	FilterLabels RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayInput `pulumi:"filterLabels"`
	// Specifies how individual filterLabel matches within the list of filterLabels
	// contribute towards the overall metadataFilter match. Supported values are:
	// - MATCH_ANY: At least one of the filterLabels must have a matching label in the
	// provided metadata.
	// - MATCH_ALL: All filterLabels must have matching labels in
	// the provided metadata.
	FilterMatchCriteria pulumi.StringInput `pulumi:"filterMatchCriteria"`
}

func (RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs) ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs) ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput)
}

// RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArray and RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArray{ RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs{...} }
//
type RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput
	ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArray []RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterInput

func (RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArray) ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArray) ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput {
	return o
}

// The list of label value pairs that must match labels in the provided metadata
// based on filterMatchCriteria  This list must not be empty and can have at the
// most 64 entries.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput) FilterLabels() RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter) []RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel {
		return v.FilterLabels
	}).(RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput)
}

// Specifies how individual filterLabel matches within the list of filterLabels
// contribute towards the overall metadataFilter match. Supported values are:
// - MATCH_ANY: At least one of the filterLabels must have a matching label in the
// provided metadata.
// - MATCH_ALL: All filterLabels must have matching labels in
// the provided metadata.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput) FilterMatchCriteria() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter) string { return v.FilterMatchCriteria }).(pulumi.StringOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput) Index(i pulumi.IntInput) RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter {
		return vs[0].([]RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilter)[vs[1].(int)]
	}).(RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel struct {
	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name string `pulumi:"name"`
	// The value of the label must match the specified value. value can have a maximum
	// length of 1024 characters.
	Value string `pulumi:"value"`
}

// RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs and RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput
	ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs struct {
	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the label must match the specified value. value can have a maximum
	// length of 1024 characters.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs) ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs) ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput)
}

// RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArray and RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArray{ RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs{...} }
//
type RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput
	ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArray []RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelInput

func (RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArray) ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArray) ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput {
	return o
}

// The name of the query parameter to match. The query parameter must exist in the
// request, in the absence of which the request match fails.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the label must match the specified value. value can have a maximum
// length of 1024 characters.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel) string { return v.Value }).(pulumi.StringOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput) Index(i pulumi.IntInput) RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel {
		return vs[0].([]RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel)[vs[1].(int)]
	}).(RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	ExactMatch *string `pulumi:"exactMatch"`
	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name string `pulumi:"name"`
	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	PresentMatch *bool `pulumi:"presentMatch"`
	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch *string `pulumi:"regexMatch"`
}

// RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs and RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput
	ToRegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	ExactMatch pulumi.StringPtrInput `pulumi:"exactMatch"`
	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	PresentMatch pulumi.BoolPtrInput `pulumi:"presentMatch"`
	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch pulumi.StringPtrInput `pulumi:"regexMatch"`
}

func (RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs) ToRegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs) ToRegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput)
}

// RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArray and RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArray{ RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs{...} }
//
type RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput
	ToRegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArray []RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchInput

func (RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArray) ToRegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArray) ToRegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return o
}

// The queryParameterMatch matches if the value of the parameter exactly matches
// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
// must be set.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) ExactMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch) *string { return v.ExactMatch }).(pulumi.StringPtrOutput)
}

// The name of the query parameter to match. The query parameter must exist in the
// request, in the absence of which the request match fails.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies that the queryParameterMatch matches if the request contains the query
// parameter, irrespective of whether the parameter has a value or not. Only one of
// presentMatch, exactMatch and regexMatch must be set.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) PresentMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch) *bool { return v.PresentMatch }).(pulumi.BoolPtrOutput)
}

// The queryParameterMatch matches if the value of the parameter matches the
// regular expression specified by regexMatch. For the regular expression grammar,
// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
// exactMatch and regexMatch must be set.
func (o RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch) *string { return v.RegexMatch }).(pulumi.StringPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput() RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput) ToRegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput) Index(i pulumi.IntInput) RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch {
		return vs[0].([]RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatch)[vs[1].(int)]
	}).(RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteAction struct {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing  Structure is documented below.
	CorsPolicy *RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy `pulumi:"corsPolicy"`
	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retryPolicy will be
	// ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
	FaultInjectionPolicy *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy `pulumi:"faultInjectionPolicy"`
	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.  Structure is documented below.
	RequestMirrorPolicy *RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy `pulumi:"requestMirrorPolicy"`
	// Specifies the retry policy associated with this route.  Structure is documented below.
	RetryPolicy *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy `pulumi:"retryPolicy"`
	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.  Structure is documented below.
	Timeout *RegionUrlMapPathMatcherRouteRuleRouteActionTimeout `pulumi:"timeout"`
	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service  Structure is documented below.
	UrlRewrite *RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite `pulumi:"urlRewrite"`
	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.  Structure is documented below.
	WeightedBackendServices []RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService `pulumi:"weightedBackendServices"`
}

// RegionUrlMapPathMatcherRouteRuleRouteActionInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionArgs and RegionUrlMapPathMatcherRouteRuleRouteActionOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleRouteActionInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionOutput() RegionUrlMapPathMatcherRouteRuleRouteActionOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionArgs struct {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing  Structure is documented below.
	CorsPolicy RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrInput `pulumi:"corsPolicy"`
	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retryPolicy will be
	// ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
	FaultInjectionPolicy RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrInput `pulumi:"faultInjectionPolicy"`
	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.  Structure is documented below.
	RequestMirrorPolicy RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrInput `pulumi:"requestMirrorPolicy"`
	// Specifies the retry policy associated with this route.  Structure is documented below.
	RetryPolicy RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrInput `pulumi:"retryPolicy"`
	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.  Structure is documented below.
	Timeout RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrInput `pulumi:"timeout"`
	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service  Structure is documented below.
	UrlRewrite RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrInput `pulumi:"urlRewrite"`
	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.  Structure is documented below.
	WeightedBackendServices RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayInput `pulumi:"weightedBackendServices"`
}

func (RegionUrlMapPathMatcherRouteRuleRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteAction)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionOutput() RegionUrlMapPathMatcherRouteRuleRouteActionOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionOutput)
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionOutput).ToRegionUrlMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherRouteRuleRouteActionPtrInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionArgs, RegionUrlMapPathMatcherRouteRuleRouteActionPtr and RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionPtrInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherRouteRuleRouteActionPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput
}

type regionUrlMapPathMatcherRouteRuleRouteActionPtrType RegionUrlMapPathMatcherRouteRuleRouteActionArgs

func RegionUrlMapPathMatcherRouteRuleRouteActionPtr(v *RegionUrlMapPathMatcherRouteRuleRouteActionArgs) RegionUrlMapPathMatcherRouteRuleRouteActionPtrInput {
	return (*regionUrlMapPathMatcherRouteRuleRouteActionPtrType)(v)
}

func (*regionUrlMapPathMatcherRouteRuleRouteActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteAction)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteAction)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionOutput() RegionUrlMapPathMatcherRouteRuleRouteActionOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput {
	return o.ToRegionUrlMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteAction) *RegionUrlMapPathMatcherRouteRuleRouteAction {
		return &v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput)
}

// The specification for allowing client side cross-origin requests. Please see W3C
// Recommendation for Cross Origin Resource Sharing  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionOutput) CorsPolicy() RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteAction) *RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy {
		return v.CorsPolicy
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput)
}

// The specification for fault injection introduced into traffic to test the
// resiliency of clients to backend service failure. As part of fault injection,
// when clients send requests to a backend service, delays can be introduced by
// Loadbalancer on a percentage of requests before sending those request to the
// backend service. Similarly requests from clients can be aborted by the
// Loadbalancer for a percentage of requests. timeout and retryPolicy will be
// ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionOutput) FaultInjectionPolicy() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteAction) *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy {
		return v.FaultInjectionPolicy
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput)
}

// Specifies the policy on how requests intended for the route's backends are
// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
// responses from the shadow service. Prior to sending traffic to the shadow
// service, the host / authority header is suffixed with -shadow.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionOutput) RequestMirrorPolicy() RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteAction) *RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy {
		return v.RequestMirrorPolicy
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput)
}

// Specifies the retry policy associated with this route.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionOutput) RetryPolicy() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteAction) *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy {
		return v.RetryPolicy
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput)
}

// Specifies the timeout for the selected route. Timeout is computed from the time
// the request is has been fully processed (i.e. end-of-stream) up until the
// response has been completely processed. Timeout includes all retries. If not
// specified, the default value is 15 seconds.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionOutput) Timeout() RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteAction) *RegionUrlMapPathMatcherRouteRuleRouteActionTimeout {
		return v.Timeout
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput)
}

// The spec to modify the URL of the request, prior to forwarding the request to
// the matched service  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionOutput) UrlRewrite() RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteAction) *RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite {
		return v.UrlRewrite
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput)
}

// A list of weighted backend services to send traffic to when a route match
// occurs. The weights determine the fraction of traffic that flows to their
// corresponding backend service. If all traffic needs to go to a single backend
// service, there must be one  weightedBackendService with weight set to a non 0
// number. Once a backendService is identified and before forwarding the request to
// the backend service, advanced routing actions like Url rewrites and header
// transformations are applied depending on additional settings specified in this
// HttpRouteAction.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionOutput) WeightedBackendServices() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteAction) []RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService {
		return v.WeightedBackendServices
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteAction)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput) Elem() RegionUrlMapPathMatcherRouteRuleRouteActionOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteAction) RegionUrlMapPathMatcherRouteRuleRouteAction {
		return *v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionOutput)
}

// The specification for allowing client side cross-origin requests. Please see W3C
// Recommendation for Cross Origin Resource Sharing  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput) CorsPolicy() RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteAction) *RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy {
		if v == nil {
			return nil
		}
		return v.CorsPolicy
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput)
}

// The specification for fault injection introduced into traffic to test the
// resiliency of clients to backend service failure. As part of fault injection,
// when clients send requests to a backend service, delays can be introduced by
// Loadbalancer on a percentage of requests before sending those request to the
// backend service. Similarly requests from clients can be aborted by the
// Loadbalancer for a percentage of requests. timeout and retryPolicy will be
// ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput) FaultInjectionPolicy() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteAction) *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy {
		if v == nil {
			return nil
		}
		return v.FaultInjectionPolicy
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput)
}

// Specifies the policy on how requests intended for the route's backends are
// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
// responses from the shadow service. Prior to sending traffic to the shadow
// service, the host / authority header is suffixed with -shadow.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput) RequestMirrorPolicy() RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteAction) *RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy {
		if v == nil {
			return nil
		}
		return v.RequestMirrorPolicy
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput)
}

// Specifies the retry policy associated with this route.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput) RetryPolicy() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteAction) *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy {
		if v == nil {
			return nil
		}
		return v.RetryPolicy
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput)
}

// Specifies the timeout for the selected route. Timeout is computed from the time
// the request is has been fully processed (i.e. end-of-stream) up until the
// response has been completely processed. Timeout includes all retries. If not
// specified, the default value is 15 seconds.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput) Timeout() RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteAction) *RegionUrlMapPathMatcherRouteRuleRouteActionTimeout {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput)
}

// The spec to modify the URL of the request, prior to forwarding the request to
// the matched service  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput) UrlRewrite() RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteAction) *RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite {
		if v == nil {
			return nil
		}
		return v.UrlRewrite
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput)
}

// A list of weighted backend services to send traffic to when a route match
// occurs. The weights determine the fraction of traffic that flows to their
// corresponding backend service. If all traffic needs to go to a single backend
// service, there must be one  weightedBackendService with weight set to a non 0
// number. Once a backendService is identified and before forwarding the request to
// the backend service, advanced routing actions like Url rewrites and header
// transformations are applied depending on additional settings specified in this
// HttpRouteAction.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput) WeightedBackendServices() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteAction) []RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService {
		if v == nil {
			return nil
		}
		return v.WeightedBackendServices
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy struct {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	AllowCredentials *bool `pulumi:"allowCredentials"`
	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods []string `pulumi:"allowMethods"`
	// Specifies the regualar expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allowOrigins or allow_origin_regex.
	AllowOriginRegexes []string `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allowOrigins or allow_origin_regex.
	AllowOrigins []string `pulumi:"allowOrigins"`
	// If true, specifies the CORS policy is disabled.
	Disabled *bool `pulumi:"disabled"`
	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	MaxAge *int `pulumi:"maxAge"`
}

// RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs and RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput() RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs struct {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	AllowCredentials pulumi.BoolPtrInput `pulumi:"allowCredentials"`
	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders pulumi.StringArrayInput `pulumi:"allowHeaders"`
	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods pulumi.StringArrayInput `pulumi:"allowMethods"`
	// Specifies the regualar expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allowOrigins or allow_origin_regex.
	AllowOriginRegexes pulumi.StringArrayInput `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allowOrigins or allow_origin_regex.
	AllowOrigins pulumi.StringArrayInput `pulumi:"allowOrigins"`
	// If true, specifies the CORS policy is disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	MaxAge pulumi.IntPtrInput `pulumi:"maxAge"`
}

func (RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput() RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput)
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput).ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs, RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtr and RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput
}

type regionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrType RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs

func RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtr(v *RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyArgs) RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrInput {
	return (*regionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrType)(v)
}

func (*regionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput() RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o.ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) *RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy {
		return &v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput)
}

// In response to a preflight request, setting this to true indicates that the
// actual request can include user credentials. This translates to the Access-
// Control-Allow-Credentials header. Defaults to false.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) *bool { return v.AllowCredentials }).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers header.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) []string { return v.AllowHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the content for the Access-Control-Allow-Methods header.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) []string { return v.AllowMethods }).(pulumi.StringArrayOutput)
}

// Specifies the regualar expression patterns that match allowed origins. For
// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
// An origin is allowed if it matches either allowOrigins or allow_origin_regex.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) []string { return v.AllowOriginRegexes }).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests. An
// origin is allowed if it matches either allowOrigins or allow_origin_regex.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) []string { return v.AllowOrigins }).(pulumi.StringArrayOutput)
}

// If true, specifies the CORS policy is disabled.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Expose-Headers header.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

// Specifies how long the results of a preflight request can be cached. This
// translates to the content for the Access-Control-Max-Age header.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) *int { return v.MaxAge }).(pulumi.IntPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) Elem() RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy {
		return *v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput)
}

// In response to a preflight request, setting this to true indicates that the
// actual request can include user credentials. This translates to the Access-
// Control-Allow-Credentials header. Defaults to false.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers header.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the Access-Control-Allow-Methods header.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowMethods
	}).(pulumi.StringArrayOutput)
}

// Specifies the regualar expression patterns that match allowed origins. For
// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
// An origin is allowed if it matches either allowOrigins or allow_origin_regex.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOriginRegexes
	}).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests. An
// origin is allowed if it matches either allowOrigins or allow_origin_regex.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOrigins
	}).(pulumi.StringArrayOutput)
}

// If true, specifies the CORS policy is disabled.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Expose-Headers header.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies how long the results of a preflight request can be cached. This
// translates to the content for the Access-Control-Max-Age header.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxAge
	}).(pulumi.IntPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy struct {
	// The specification for how client requests are aborted as part of fault
	// injection.  Structure is documented below.
	Abort *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort `pulumi:"abort"`
	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.  Structure is documented below.
	Delay *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay `pulumi:"delay"`
}

// RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs and RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs struct {
	// The specification for how client requests are aborted as part of fault
	// injection.  Structure is documented below.
	Abort RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrInput `pulumi:"abort"`
	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.  Structure is documented below.
	Delay RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrInput `pulumi:"delay"`
}

func (RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput)
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput).ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs, RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtr and RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput
}

type regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrType RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs

func RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtr(v *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrInput {
	return (*regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrType)(v)
}

func (*regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o.ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy) *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy {
		return &v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput)
}

// The specification for how client requests are aborted as part of fault
// injection.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput) Abort() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy) *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort {
		return v.Abort
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput)
}

// The specification for how client requests are delayed as part of fault
// injection, before being sent to a backend service.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput) Delay() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy) *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay {
		return v.Delay
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput) Elem() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy {
		return *v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput)
}

// The specification for how client requests are aborted as part of fault
// injection.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput) Abort() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy) *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort {
		if v == nil {
			return nil
		}
		return v.Abort
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput)
}

// The specification for how client requests are delayed as part of fault
// injection, before being sent to a backend service.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput) Delay() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy) *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort struct {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	HttpStatus *int `pulumi:"httpStatus"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `pulumi:"percentage"`
}

// RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs and RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs struct {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	HttpStatus pulumi.IntPtrInput `pulumi:"httpStatus"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage pulumi.Float64PtrInput `pulumi:"percentage"`
}

func (RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput)
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput).ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs, RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtr and RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput
}

type regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrType RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs

func RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtr(v *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrInput {
	return (*regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrType)(v)
}

func (*regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o.ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort) *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort {
		return &v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput)
}

// The HTTP status code used to abort the request. The value must be between 200
// and 599 inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput) HttpStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort) *int {
		return v.HttpStatus
	}).(pulumi.IntPtrOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will
// be introduced as part of fault injection. The value must be between 0.0 and
// 100.0 inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort) *float64 {
		return v.Percentage
	}).(pulumi.Float64PtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput) Elem() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort {
		return *v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput)
}

// The HTTP status code used to abort the request. The value must be between 200
// and 599 inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput) HttpStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort) *int {
		if v == nil {
			return nil
		}
		return v.HttpStatus
	}).(pulumi.IntPtrOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will
// be introduced as part of fault injection. The value must be between 0.0 and
// 100.0 inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort) *float64 {
		if v == nil {
			return nil
		}
		return v.Percentage
	}).(pulumi.Float64PtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay struct {
	// Specifies the value of the fixed delay interval.  Structure is documented below.
	FixedDelay *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay `pulumi:"fixedDelay"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `pulumi:"percentage"`
}

// RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs and RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs struct {
	// Specifies the value of the fixed delay interval.  Structure is documented below.
	FixedDelay RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput `pulumi:"fixedDelay"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage pulumi.Float64PtrInput `pulumi:"percentage"`
}

func (RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput)
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput).ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs, RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtr and RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput
}

type regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrType RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs

func RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtr(v *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrInput {
	return (*regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrType)(v)
}

func (*regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o.ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay) *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay {
		return &v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput)
}

// Specifies the value of the fixed delay interval.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput) FixedDelay() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay) *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay {
		return v.FixedDelay
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will
// be introduced as part of fault injection. The value must be between 0.0 and
// 100.0 inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay) *float64 {
		return v.Percentage
	}).(pulumi.Float64PtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput) Elem() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay {
		return *v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput)
}

// Specifies the value of the fixed delay interval.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput) FixedDelay() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay) *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay {
		if v == nil {
			return nil
		}
		return v.FixedDelay
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will
// be introduced as part of fault injection. The value must be between 0.0 and
// 100.0 inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay) *float64 {
		if v == nil {
			return nil
		}
		return v.Percentage
	}).(pulumi.Float64PtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds string `pulumi:"seconds"`
}

// RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs and RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.StringInput `pulumi:"seconds"`
}

func (RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput)
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput).ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs, RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtr and RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput
}

type regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs

func RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtr(v *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput {
	return (*regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType)(v)
}

func (*regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o.ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay) *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay {
		return &v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay) *int {
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) Seconds() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay) string {
		return v.Seconds
	}).(pulumi.StringOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) Elem() RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay) RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay {
		return *v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay) *string {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.StringPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy struct {
	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService string `pulumi:"backendService"`
}

// RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs and RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs struct {
	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService pulumi.StringInput `pulumi:"backendService"`
}

func (RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput)
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput).ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs, RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtr and RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput
}

type regionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrType RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs

func RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtr(v *RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs) RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrInput {
	return (*regionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrType)(v)
}

func (*regionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o.ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy) *RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy {
		return &v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput)
}

// The default RegionBackendService resource. Before
// forwarding the request to backendService, the loadbalancer applies any relevant
// headerActions specified as part of this backendServiceWeight.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput) BackendService() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy) string {
		return v.BackendService
	}).(pulumi.StringOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput) Elem() RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy) RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy {
		return *v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput)
}

// The default RegionBackendService resource. Before
// forwarding the request to backendService, the loadbalancer applies any relevant
// headerActions specified as part of this backendServiceWeight.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput) BackendService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.BackendService
	}).(pulumi.StringPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy struct {
	// Specifies the allowed number retries. This number must be > 0.
	NumRetries int `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt.  Structure is documented below.
	PerTryTimeout *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout `pulumi:"perTryTimeout"`
	// Specifies one or more conditions when this retry rule applies. Valid values are:
	// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
	// any 5xx response code, or if the backend service does not respond at all,
	// example: disconnects, reset, read timeout, connection failure, and refused
	// streams.
	// - gateway-error: Similar to 5xx, but only applies to response codes
	// 502, 503 or 504.
	// - connect-failure: Loadbalancer will retry on failures
	// connecting to backend services, for example due to connection timeouts.
	// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
	// Currently the only retriable error supported is 409.
	// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
	// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
	// - cancelled: Loadbalancer will retry if the gRPC status code in the response
	// header is set to cancelled
	// - deadline-exceeded: Loadbalancer will retry if the
	// gRPC status code in the response header is set to deadline-exceeded
	// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
	// header is set to resource-exhausted
	// - unavailable: Loadbalancer will retry if
	// the gRPC status code in the response header is set to unavailable
	RetryConditions []string `pulumi:"retryConditions"`
}

// RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs and RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs struct {
	// Specifies the allowed number retries. This number must be > 0.
	NumRetries pulumi.IntInput `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt.  Structure is documented below.
	PerTryTimeout RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrInput `pulumi:"perTryTimeout"`
	// Specifies one or more conditions when this retry rule applies. Valid values are:
	// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
	// any 5xx response code, or if the backend service does not respond at all,
	// example: disconnects, reset, read timeout, connection failure, and refused
	// streams.
	// - gateway-error: Similar to 5xx, but only applies to response codes
	// 502, 503 or 504.
	// - connect-failure: Loadbalancer will retry on failures
	// connecting to backend services, for example due to connection timeouts.
	// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
	// Currently the only retriable error supported is 409.
	// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
	// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
	// - cancelled: Loadbalancer will retry if the gRPC status code in the response
	// header is set to cancelled
	// - deadline-exceeded: Loadbalancer will retry if the
	// gRPC status code in the response header is set to deadline-exceeded
	// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
	// header is set to resource-exhausted
	// - unavailable: Loadbalancer will retry if
	// the gRPC status code in the response header is set to unavailable
	RetryConditions pulumi.StringArrayInput `pulumi:"retryConditions"`
}

func (RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput)
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput).ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs, RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtr and RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput
}

type regionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrType RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs

func RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtr(v *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyArgs) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrInput {
	return (*regionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrType)(v)
}

func (*regionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return o.ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy) *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy {
		return &v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput)
}

// Specifies the allowed number retries. This number must be > 0.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput) NumRetries() pulumi.IntOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy) int { return v.NumRetries }).(pulumi.IntOutput)
}

// Specifies a non-zero timeout per retry attempt.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput) PerTryTimeout() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy) *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout {
		return v.PerTryTimeout
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput)
}

// Specifies one or more conditions when this retry rule applies. Valid values are:
// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
// any 5xx response code, or if the backend service does not respond at all,
// example: disconnects, reset, read timeout, connection failure, and refused
// streams.
// - gateway-error: Similar to 5xx, but only applies to response codes
// 502, 503 or 504.
// - connect-failure: Loadbalancer will retry on failures
// connecting to backend services, for example due to connection timeouts.
// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
// Currently the only retriable error supported is 409.
// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
// - cancelled: Loadbalancer will retry if the gRPC status code in the response
// header is set to cancelled
// - deadline-exceeded: Loadbalancer will retry if the
// gRPC status code in the response header is set to deadline-exceeded
// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
// header is set to resource-exhausted
// - unavailable: Loadbalancer will retry if
// the gRPC status code in the response header is set to unavailable
func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy) []string { return v.RetryConditions }).(pulumi.StringArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput) Elem() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy {
		return *v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput)
}

// Specifies the allowed number retries. This number must be > 0.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.NumRetries
	}).(pulumi.IntPtrOutput)
}

// Specifies a non-zero timeout per retry attempt.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput) PerTryTimeout() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy) *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout {
		if v == nil {
			return nil
		}
		return v.PerTryTimeout
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput)
}

// Specifies one or more conditions when this retry rule applies. Valid values are:
// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
// any 5xx response code, or if the backend service does not respond at all,
// example: disconnects, reset, read timeout, connection failure, and refused
// streams.
// - gateway-error: Similar to 5xx, but only applies to response codes
// 502, 503 or 504.
// - connect-failure: Loadbalancer will retry on failures
// connecting to backend services, for example due to connection timeouts.
// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
// Currently the only retriable error supported is 409.
// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
// - cancelled: Loadbalancer will retry if the gRPC status code in the response
// header is set to cancelled
// - deadline-exceeded: Loadbalancer will retry if the
// gRPC status code in the response header is set to deadline-exceeded
// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
// header is set to resource-exhausted
// - unavailable: Loadbalancer will retry if
// the gRPC status code in the response header is set to unavailable
func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicy) []string {
		if v == nil {
			return nil
		}
		return v.RetryConditions
	}).(pulumi.StringArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds string `pulumi:"seconds"`
}

// RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs and RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.StringInput `pulumi:"seconds"`
}

func (RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput)
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput).ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs, RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtr and RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput
}

type regionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrType RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs

func RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtr(v *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrInput {
	return (*regionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrType)(v)
}

func (*regionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o.ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout) *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout {
		return &v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput) Seconds() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout) string { return v.Seconds }).(pulumi.StringOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) Elem() RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout) RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout {
		return *v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout) *string {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.StringPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionTimeout struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds string `pulumi:"seconds"`
}

// RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs and RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput() RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.StringInput `pulumi:"seconds"`
}

func (RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionTimeout)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput() RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput)
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput).ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs, RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtr and RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput
}

type regionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrType RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs

func RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtr(v *RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutArgs) RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrInput {
	return (*regionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrType)(v)
}

func (*regionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionTimeout)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionTimeout)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput() RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return o.ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionTimeout) *RegionUrlMapPathMatcherRouteRuleRouteActionTimeout {
		return &v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionTimeout) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput) Seconds() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionTimeout) string { return v.Seconds }).(pulumi.StringOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionTimeout)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput) Elem() RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionTimeout) RegionUrlMapPathMatcherRouteRuleRouteActionTimeout {
		return *v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionTimeout) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionTimeout) *string {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.StringPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite struct {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	HostRewrite *string `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	PathPrefixRewrite *string `pulumi:"pathPrefixRewrite"`
}

// RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs and RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput() RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs struct {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	HostRewrite pulumi.StringPtrInput `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	PathPrefixRewrite pulumi.StringPtrInput `pulumi:"pathPrefixRewrite"`
}

func (RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput() RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput)
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput).ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs, RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtr and RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput
}

type regionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrType RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs

func RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtr(v *RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs) RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrInput {
	return (*regionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrType)(v)
}

func (*regionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput() RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o.ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite) *RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite {
		return &v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput)
}

// Prior to forwarding the request to the selected service, the request's host
// header is replaced with contents of hostRewrite. The value must be between 1 and
// 255 characters.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite) *string { return v.HostRewrite }).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected backend service, the matching
// portion of the request's path is replaced by pathPrefixRewrite. The value must
// be between 1 and 1024 characters.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite) *string { return v.PathPrefixRewrite }).(pulumi.StringPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) Elem() RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite) RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite {
		return *v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput)
}

// Prior to forwarding the request to the selected service, the request's host
// header is replaced with contents of hostRewrite. The value must be between 1 and
// 255 characters.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.HostRewrite
	}).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected backend service, the matching
// portion of the request's path is replaced by pathPrefixRewrite. The value must
// be between 1 and 1024 characters.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.PathPrefixRewrite
	}).(pulumi.StringPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService struct {
	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService string `pulumi:"backendService"`
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
	HeaderAction *RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction `pulumi:"headerAction"`
	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	Weight int `pulumi:"weight"`
}

// RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs and RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs struct {
	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService pulumi.StringInput `pulumi:"backendService"`
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
	HeaderAction RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrInput `pulumi:"headerAction"`
	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput)
}

// RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArray and RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArray{ RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs{...} }
//
type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArray []RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceInput

func (RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArray) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArray) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput {
	return o
}

// The default RegionBackendService resource. Before
// forwarding the request to backendService, the loadbalancer applies any relevant
// headerActions specified as part of this backendServiceWeight.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput) BackendService() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService) string {
		return v.BackendService
	}).(pulumi.StringOutput)
}

// Specifies changes to request and response headers that need to take effect for
// the selected backendService. headerAction specified here take effect before
// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput) HeaderAction() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService) *RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction {
		return v.HeaderAction
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput)
}

// Specifies the fraction of traffic sent to backendService, computed as weight /
// (sum of all weightedBackendService weights in routeAction) . The selection of a
// backend service is determined only for new traffic. Once a user's request has
// been directed to a backendService, subsequent requests will be sent to the same
// backendService as determined by the BackendService's session affinity policy.
// The value must be between 0 and 1000
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService) int { return v.Weight }).(pulumi.IntOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput) Index(i pulumi.IntInput) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService {
		return vs[0].([]RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendService)[vs[1].(int)]
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.  Structure is documented below.
	RequestHeadersToAdds []RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd `pulumi:"requestHeadersToAdds"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemoves []string `pulumi:"requestHeadersToRemoves"`
	// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
	ResponseHeadersToAdds []RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd `pulumi:"responseHeadersToAdds"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemoves []string `pulumi:"responseHeadersToRemoves"`
}

// RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs and RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.  Structure is documented below.
	RequestHeadersToAdds RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayInput `pulumi:"requestHeadersToAdds"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemoves pulumi.StringArrayInput `pulumi:"requestHeadersToRemoves"`
	// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
	ResponseHeadersToAdds RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayInput `pulumi:"responseHeadersToAdds"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemoves pulumi.StringArrayInput `pulumi:"responseHeadersToRemoves"`
}

func (RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput)
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput).ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs, RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtr and RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput
}

type regionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrType RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs

func RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtr(v *RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrInput {
	return (*regionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrType)(v)
}

func (*regionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrType) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o.ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) *RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction {
		return &v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput)
}

// Headers to add to a matching request prior to forwarding the request to the
// backendService.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) RequestHeadersToAdds() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) []RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd {
		return v.RequestHeadersToAdds
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request
// prior to forwarding the request to the backendService.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) RequestHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) []string {
		return v.RequestHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) ResponseHeadersToAdds() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) []RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd {
		return v.ResponseHeadersToAdds
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the response
// prior to sending the response back to the client.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) ResponseHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) []string {
		return v.ResponseHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) Elem() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction {
		return *v
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput)
}

// Headers to add to a matching request prior to forwarding the request to the
// backendService.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) RequestHeadersToAdds() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) []RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToAdds
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request
// prior to forwarding the request to the backendService.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) RequestHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ResponseHeadersToAdds() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) []RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToAdds
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the response
// prior to sending the response back to the client.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ResponseHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace bool `pulumi:"replace"`
}

// RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs and RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput)
}

// RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray and RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray{ RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs{...} }
//
type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray []RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddInput

func (RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return o
}

// The name of the header.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd) string {
		return v.HeaderName
	}).(pulumi.StringOutput)
}

// The value of the header to add.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd) string {
		return v.HeaderValue
	}).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the
// header. If true, headerValue is set for the header, discarding any values that
// were set for that header.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd) bool {
		return v.Replace
	}).(pulumi.BoolOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput) Index(i pulumi.IntInput) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd {
		return vs[0].([]RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)[vs[1].(int)]
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace bool `pulumi:"replace"`
}

// RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs and RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput)
}

// RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray and RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray{ RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs{...} }
//
type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput
	ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray []RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddInput

func (RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return o
}

// The name of the header.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd) string {
		return v.HeaderName
	}).(pulumi.StringOutput)
}

// The value of the header to add.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd) string {
		return v.HeaderValue
	}).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the
// header. If true, headerValue is set for the header, discarding any values that
// were set for that header.
func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd) bool {
		return v.Replace
	}).(pulumi.BoolOutput)
}

type RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput() RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput) ToRegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput) Index(i pulumi.IntInput) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd {
		return vs[0].([]RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)[vs[1].(int)]
	}).(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput)
}

type RegionUrlMapPathMatcherRouteRuleUrlRedirect struct {
	// The host that will be used in the redirect response instead of the one that was
	// supplied in the request. The value must be between 1 and 255 characters.
	HostRedirect *string `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set
	// to false, the URL scheme of the redirected request will remain the same as that
	// of the request. This must only be set for UrlMaps used in TargetHttpProxys.
	// Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
	HttpsRedirect *bool `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was
	// supplied in the request. Only one of pathRedirect or prefixRedirect must be
	// specified. The value must be between 1 and 1024 characters.
	PathRedirect *string `pulumi:"pathRedirect"`
	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	// retaining the remaining portion of the URL before redirecting the request.
	PrefixRedirect *string `pulumi:"prefixRedirect"`
	// The HTTP Status code to use for this RedirectAction. Supported values are:
	// - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
	// - FOUND, which corresponds to 302.
	// - SEE_OTHER which corresponds to 303.
	// - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
	// will be retained.
	// - PERMANENT_REDIRECT, which corresponds to 308. In this case,
	// the request method will be retained.
	RedirectResponseCode *string `pulumi:"redirectResponseCode"`
	// If set to true, any accompanying query portion of the original URL is removed
	// prior to redirecting the request. If set to false, the query portion of the
	// original URL is retained.
	StripQuery *bool `pulumi:"stripQuery"`
}

// RegionUrlMapPathMatcherRouteRuleUrlRedirectInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs and RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleUrlRedirectInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs{...}
//
type RegionUrlMapPathMatcherRouteRuleUrlRedirectInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleUrlRedirectOutput() RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput
	ToRegionUrlMapPathMatcherRouteRuleUrlRedirectOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput
}

type RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs struct {
	// The host that will be used in the redirect response instead of the one that was
	// supplied in the request. The value must be between 1 and 255 characters.
	HostRedirect pulumi.StringPtrInput `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set
	// to false, the URL scheme of the redirected request will remain the same as that
	// of the request. This must only be set for UrlMaps used in TargetHttpProxys.
	// Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
	HttpsRedirect pulumi.BoolPtrInput `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was
	// supplied in the request. Only one of pathRedirect or prefixRedirect must be
	// specified. The value must be between 1 and 1024 characters.
	PathRedirect pulumi.StringPtrInput `pulumi:"pathRedirect"`
	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	// retaining the remaining portion of the URL before redirecting the request.
	PrefixRedirect pulumi.StringPtrInput `pulumi:"prefixRedirect"`
	// The HTTP Status code to use for this RedirectAction. Supported values are:
	// - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
	// - FOUND, which corresponds to 302.
	// - SEE_OTHER which corresponds to 303.
	// - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
	// will be retained.
	// - PERMANENT_REDIRECT, which corresponds to 308. In this case,
	// the request method will be retained.
	RedirectResponseCode pulumi.StringPtrInput `pulumi:"redirectResponseCode"`
	// If set to true, any accompanying query portion of the original URL is removed
	// prior to redirecting the request. If set to false, the query portion of the
	// original URL is retained.
	StripQuery pulumi.BoolPtrInput `pulumi:"stripQuery"`
}

func (RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleUrlRedirect)(nil)).Elem()
}

func (i RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs) ToRegionUrlMapPathMatcherRouteRuleUrlRedirectOutput() RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleUrlRedirectOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs) ToRegionUrlMapPathMatcherRouteRuleUrlRedirectOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput)
}

func (i RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs) ToRegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput() RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (i RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs) ToRegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput).ToRegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx)
}

// RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrInput is an input type that accepts RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs, RegionUrlMapPathMatcherRouteRuleUrlRedirectPtr and RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput values.
// You can construct a concrete instance of `RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrInput` via:
//
// 		 RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs{...}
//
//  or:
//
// 		 nil
//
type RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrInput interface {
	pulumi.Input

	ToRegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput() RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput
	ToRegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(context.Context) RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput
}

type regionUrlMapPathMatcherRouteRuleUrlRedirectPtrType RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs

func RegionUrlMapPathMatcherRouteRuleUrlRedirectPtr(v *RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs) RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrInput {
	return (*regionUrlMapPathMatcherRouteRuleUrlRedirectPtrType)(v)
}

func (*regionUrlMapPathMatcherRouteRuleUrlRedirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleUrlRedirect)(nil)).Elem()
}

func (i *regionUrlMapPathMatcherRouteRuleUrlRedirectPtrType) ToRegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput() RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return i.ToRegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (i *regionUrlMapPathMatcherRouteRuleUrlRedirectPtrType) ToRegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapPathMatcherRouteRuleUrlRedirect)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput) ToRegionUrlMapPathMatcherRouteRuleUrlRedirectOutput() RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput) ToRegionUrlMapPathMatcherRouteRuleUrlRedirectOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput) ToRegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput() RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o.ToRegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput) ToRegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleUrlRedirect) *RegionUrlMapPathMatcherRouteRuleUrlRedirect {
		return &v
	}).(RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput)
}

// The host that will be used in the redirect response instead of the one that was
// supplied in the request. The value must be between 1 and 255 characters.
func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleUrlRedirect) *string { return v.HostRedirect }).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set
// to false, the URL scheme of the redirected request will remain the same as that
// of the request. This must only be set for UrlMaps used in TargetHttpProxys.
// Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleUrlRedirect) *bool { return v.HttpsRedirect }).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was
// supplied in the request. Only one of pathRedirect or prefixRedirect must be
// specified. The value must be between 1 and 1024 characters.
func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleUrlRedirect) *string { return v.PathRedirect }).(pulumi.StringPtrOutput)
}

// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
// retaining the remaining portion of the URL before redirecting the request.
func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput) PrefixRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleUrlRedirect) *string { return v.PrefixRedirect }).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for this RedirectAction. Supported values are:
// - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
// - FOUND, which corresponds to 302.
// - SEE_OTHER which corresponds to 303.
// - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
// will be retained.
// - PERMANENT_REDIRECT, which corresponds to 308. In this case,
// the request method will be retained.
func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput) RedirectResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleUrlRedirect) *string { return v.RedirectResponseCode }).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed
// prior to redirecting the request. If set to false, the query portion of the
// original URL is retained.
func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegionUrlMapPathMatcherRouteRuleUrlRedirect) *bool { return v.StripQuery }).(pulumi.BoolPtrOutput)
}

type RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput struct{ *pulumi.OutputState }

func (RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionUrlMapPathMatcherRouteRuleUrlRedirect)(nil)).Elem()
}

func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput) ToRegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput() RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput) ToRegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx context.Context) RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o
}

func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput) Elem() RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleUrlRedirect) RegionUrlMapPathMatcherRouteRuleUrlRedirect {
		return *v
	}).(RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput)
}

// The host that will be used in the redirect response instead of the one that was
// supplied in the request. The value must be between 1 and 255 characters.
func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.HostRedirect
	}).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set
// to false, the URL scheme of the redirected request will remain the same as that
// of the request. This must only be set for UrlMaps used in TargetHttpProxys.
// Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleUrlRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.HttpsRedirect
	}).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was
// supplied in the request. Only one of pathRedirect or prefixRedirect must be
// specified. The value must be between 1 and 1024 characters.
func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.PathRedirect
	}).(pulumi.StringPtrOutput)
}

// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
// retaining the remaining portion of the URL before redirecting the request.
func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput) PrefixRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.PrefixRedirect
	}).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for this RedirectAction. Supported values are:
// - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
// - FOUND, which corresponds to 302.
// - SEE_OTHER which corresponds to 303.
// - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
// will be retained.
// - PERMANENT_REDIRECT, which corresponds to 308. In this case,
// the request method will be retained.
func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput) RedirectResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.RedirectResponseCode
	}).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed
// prior to redirecting the request. If set to false, the query portion of the
// original URL is retained.
func (o RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionUrlMapPathMatcherRouteRuleUrlRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.StripQuery
	}).(pulumi.BoolPtrOutput)
}

type RegionUrlMapTest struct {
	// Description of this test case.
	Description *string `pulumi:"description"`
	// Host portion of the URL.
	Host string `pulumi:"host"`
	// Path portion of the URL.
	Path string `pulumi:"path"`
	// A reference to expected RegionBackendService resource the given URL should be mapped to.
	Service string `pulumi:"service"`
}

// RegionUrlMapTestInput is an input type that accepts RegionUrlMapTestArgs and RegionUrlMapTestOutput values.
// You can construct a concrete instance of `RegionUrlMapTestInput` via:
//
// 		 RegionUrlMapTestArgs{...}
//
type RegionUrlMapTestInput interface {
	pulumi.Input

	ToRegionUrlMapTestOutput() RegionUrlMapTestOutput
	ToRegionUrlMapTestOutputWithContext(context.Context) RegionUrlMapTestOutput
}

type RegionUrlMapTestArgs struct {
	// Description of this test case.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Host portion of the URL.
	Host pulumi.StringInput `pulumi:"host"`
	// Path portion of the URL.
	Path pulumi.StringInput `pulumi:"path"`
	// A reference to expected RegionBackendService resource the given URL should be mapped to.
	Service pulumi.StringInput `pulumi:"service"`
}

func (RegionUrlMapTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapTest)(nil)).Elem()
}

func (i RegionUrlMapTestArgs) ToRegionUrlMapTestOutput() RegionUrlMapTestOutput {
	return i.ToRegionUrlMapTestOutputWithContext(context.Background())
}

func (i RegionUrlMapTestArgs) ToRegionUrlMapTestOutputWithContext(ctx context.Context) RegionUrlMapTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapTestOutput)
}

// RegionUrlMapTestArrayInput is an input type that accepts RegionUrlMapTestArray and RegionUrlMapTestArrayOutput values.
// You can construct a concrete instance of `RegionUrlMapTestArrayInput` via:
//
// 		 RegionUrlMapTestArray{ RegionUrlMapTestArgs{...} }
//
type RegionUrlMapTestArrayInput interface {
	pulumi.Input

	ToRegionUrlMapTestArrayOutput() RegionUrlMapTestArrayOutput
	ToRegionUrlMapTestArrayOutputWithContext(context.Context) RegionUrlMapTestArrayOutput
}

type RegionUrlMapTestArray []RegionUrlMapTestInput

func (RegionUrlMapTestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapTest)(nil)).Elem()
}

func (i RegionUrlMapTestArray) ToRegionUrlMapTestArrayOutput() RegionUrlMapTestArrayOutput {
	return i.ToRegionUrlMapTestArrayOutputWithContext(context.Background())
}

func (i RegionUrlMapTestArray) ToRegionUrlMapTestArrayOutputWithContext(ctx context.Context) RegionUrlMapTestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionUrlMapTestArrayOutput)
}

type RegionUrlMapTestOutput struct{ *pulumi.OutputState }

func (RegionUrlMapTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionUrlMapTest)(nil)).Elem()
}

func (o RegionUrlMapTestOutput) ToRegionUrlMapTestOutput() RegionUrlMapTestOutput {
	return o
}

func (o RegionUrlMapTestOutput) ToRegionUrlMapTestOutputWithContext(ctx context.Context) RegionUrlMapTestOutput {
	return o
}

// Description of this test case.
func (o RegionUrlMapTestOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionUrlMapTest) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Host portion of the URL.
func (o RegionUrlMapTestOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapTest) string { return v.Host }).(pulumi.StringOutput)
}

// Path portion of the URL.
func (o RegionUrlMapTestOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapTest) string { return v.Path }).(pulumi.StringOutput)
}

// A reference to expected RegionBackendService resource the given URL should be mapped to.
func (o RegionUrlMapTestOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v RegionUrlMapTest) string { return v.Service }).(pulumi.StringOutput)
}

type RegionUrlMapTestArrayOutput struct{ *pulumi.OutputState }

func (RegionUrlMapTestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionUrlMapTest)(nil)).Elem()
}

func (o RegionUrlMapTestArrayOutput) ToRegionUrlMapTestArrayOutput() RegionUrlMapTestArrayOutput {
	return o
}

func (o RegionUrlMapTestArrayOutput) ToRegionUrlMapTestArrayOutputWithContext(ctx context.Context) RegionUrlMapTestArrayOutput {
	return o
}

func (o RegionUrlMapTestArrayOutput) Index(i pulumi.IntInput) RegionUrlMapTestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionUrlMapTest {
		return vs[0].([]RegionUrlMapTest)[vs[1].(int)]
	}).(RegionUrlMapTestOutput)
}

type ReservationSpecificReservation struct {
	// The number of resources that are allocated.
	Count int `pulumi:"count"`
	// -
	// How many instances are in use.
	InUseCount *int `pulumi:"inUseCount"`
	// The instance properties for the reservation.  Structure is documented below.
	InstanceProperties ReservationSpecificReservationInstanceProperties `pulumi:"instanceProperties"`
}

// ReservationSpecificReservationInput is an input type that accepts ReservationSpecificReservationArgs and ReservationSpecificReservationOutput values.
// You can construct a concrete instance of `ReservationSpecificReservationInput` via:
//
// 		 ReservationSpecificReservationArgs{...}
//
type ReservationSpecificReservationInput interface {
	pulumi.Input

	ToReservationSpecificReservationOutput() ReservationSpecificReservationOutput
	ToReservationSpecificReservationOutputWithContext(context.Context) ReservationSpecificReservationOutput
}

type ReservationSpecificReservationArgs struct {
	// The number of resources that are allocated.
	Count pulumi.IntInput `pulumi:"count"`
	// -
	// How many instances are in use.
	InUseCount pulumi.IntPtrInput `pulumi:"inUseCount"`
	// The instance properties for the reservation.  Structure is documented below.
	InstanceProperties ReservationSpecificReservationInstancePropertiesInput `pulumi:"instanceProperties"`
}

func (ReservationSpecificReservationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationSpecificReservation)(nil)).Elem()
}

func (i ReservationSpecificReservationArgs) ToReservationSpecificReservationOutput() ReservationSpecificReservationOutput {
	return i.ToReservationSpecificReservationOutputWithContext(context.Background())
}

func (i ReservationSpecificReservationArgs) ToReservationSpecificReservationOutputWithContext(ctx context.Context) ReservationSpecificReservationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationSpecificReservationOutput)
}

func (i ReservationSpecificReservationArgs) ToReservationSpecificReservationPtrOutput() ReservationSpecificReservationPtrOutput {
	return i.ToReservationSpecificReservationPtrOutputWithContext(context.Background())
}

func (i ReservationSpecificReservationArgs) ToReservationSpecificReservationPtrOutputWithContext(ctx context.Context) ReservationSpecificReservationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationSpecificReservationOutput).ToReservationSpecificReservationPtrOutputWithContext(ctx)
}

// ReservationSpecificReservationPtrInput is an input type that accepts ReservationSpecificReservationArgs, ReservationSpecificReservationPtr and ReservationSpecificReservationPtrOutput values.
// You can construct a concrete instance of `ReservationSpecificReservationPtrInput` via:
//
// 		 ReservationSpecificReservationArgs{...}
//
//  or:
//
// 		 nil
//
type ReservationSpecificReservationPtrInput interface {
	pulumi.Input

	ToReservationSpecificReservationPtrOutput() ReservationSpecificReservationPtrOutput
	ToReservationSpecificReservationPtrOutputWithContext(context.Context) ReservationSpecificReservationPtrOutput
}

type reservationSpecificReservationPtrType ReservationSpecificReservationArgs

func ReservationSpecificReservationPtr(v *ReservationSpecificReservationArgs) ReservationSpecificReservationPtrInput {
	return (*reservationSpecificReservationPtrType)(v)
}

func (*reservationSpecificReservationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationSpecificReservation)(nil)).Elem()
}

func (i *reservationSpecificReservationPtrType) ToReservationSpecificReservationPtrOutput() ReservationSpecificReservationPtrOutput {
	return i.ToReservationSpecificReservationPtrOutputWithContext(context.Background())
}

func (i *reservationSpecificReservationPtrType) ToReservationSpecificReservationPtrOutputWithContext(ctx context.Context) ReservationSpecificReservationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationSpecificReservationPtrOutput)
}

type ReservationSpecificReservationOutput struct{ *pulumi.OutputState }

func (ReservationSpecificReservationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationSpecificReservation)(nil)).Elem()
}

func (o ReservationSpecificReservationOutput) ToReservationSpecificReservationOutput() ReservationSpecificReservationOutput {
	return o
}

func (o ReservationSpecificReservationOutput) ToReservationSpecificReservationOutputWithContext(ctx context.Context) ReservationSpecificReservationOutput {
	return o
}

func (o ReservationSpecificReservationOutput) ToReservationSpecificReservationPtrOutput() ReservationSpecificReservationPtrOutput {
	return o.ToReservationSpecificReservationPtrOutputWithContext(context.Background())
}

func (o ReservationSpecificReservationOutput) ToReservationSpecificReservationPtrOutputWithContext(ctx context.Context) ReservationSpecificReservationPtrOutput {
	return o.ApplyT(func(v ReservationSpecificReservation) *ReservationSpecificReservation {
		return &v
	}).(ReservationSpecificReservationPtrOutput)
}

// The number of resources that are allocated.
func (o ReservationSpecificReservationOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v ReservationSpecificReservation) int { return v.Count }).(pulumi.IntOutput)
}

// -
// How many instances are in use.
func (o ReservationSpecificReservationOutput) InUseCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReservationSpecificReservation) *int { return v.InUseCount }).(pulumi.IntPtrOutput)
}

// The instance properties for the reservation.  Structure is documented below.
func (o ReservationSpecificReservationOutput) InstanceProperties() ReservationSpecificReservationInstancePropertiesOutput {
	return o.ApplyT(func(v ReservationSpecificReservation) ReservationSpecificReservationInstanceProperties {
		return v.InstanceProperties
	}).(ReservationSpecificReservationInstancePropertiesOutput)
}

type ReservationSpecificReservationPtrOutput struct{ *pulumi.OutputState }

func (ReservationSpecificReservationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationSpecificReservation)(nil)).Elem()
}

func (o ReservationSpecificReservationPtrOutput) ToReservationSpecificReservationPtrOutput() ReservationSpecificReservationPtrOutput {
	return o
}

func (o ReservationSpecificReservationPtrOutput) ToReservationSpecificReservationPtrOutputWithContext(ctx context.Context) ReservationSpecificReservationPtrOutput {
	return o
}

func (o ReservationSpecificReservationPtrOutput) Elem() ReservationSpecificReservationOutput {
	return o.ApplyT(func(v *ReservationSpecificReservation) ReservationSpecificReservation { return *v }).(ReservationSpecificReservationOutput)
}

// The number of resources that are allocated.
func (o ReservationSpecificReservationPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReservationSpecificReservation) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// -
// How many instances are in use.
func (o ReservationSpecificReservationPtrOutput) InUseCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReservationSpecificReservation) *int {
		if v == nil {
			return nil
		}
		return v.InUseCount
	}).(pulumi.IntPtrOutput)
}

// The instance properties for the reservation.  Structure is documented below.
func (o ReservationSpecificReservationPtrOutput) InstanceProperties() ReservationSpecificReservationInstancePropertiesPtrOutput {
	return o.ApplyT(func(v *ReservationSpecificReservation) *ReservationSpecificReservationInstanceProperties {
		if v == nil {
			return nil
		}
		return &v.InstanceProperties
	}).(ReservationSpecificReservationInstancePropertiesPtrOutput)
}

type ReservationSpecificReservationInstanceProperties struct {
	// Guest accelerator type and count.  Structure is documented below.
	GuestAccelerators []ReservationSpecificReservationInstancePropertiesGuestAccelerator `pulumi:"guestAccelerators"`
	// The amount of local ssd to reserve with each instance. This
	// reserves disks of type `local-ssd`.  Structure is documented below.
	LocalSsds []ReservationSpecificReservationInstancePropertiesLocalSsd `pulumi:"localSsds"`
	// The name of the machine type to reserve.
	MachineType string `pulumi:"machineType"`
	// The minimum CPU platform for the reservation. For example,
	// `"Intel Skylake"`. See
	// the CPU platform availability reference](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform#availablezones)
	// for information on available CPU platforms.
	MinCpuPlatform *string `pulumi:"minCpuPlatform"`
}

// ReservationSpecificReservationInstancePropertiesInput is an input type that accepts ReservationSpecificReservationInstancePropertiesArgs and ReservationSpecificReservationInstancePropertiesOutput values.
// You can construct a concrete instance of `ReservationSpecificReservationInstancePropertiesInput` via:
//
// 		 ReservationSpecificReservationInstancePropertiesArgs{...}
//
type ReservationSpecificReservationInstancePropertiesInput interface {
	pulumi.Input

	ToReservationSpecificReservationInstancePropertiesOutput() ReservationSpecificReservationInstancePropertiesOutput
	ToReservationSpecificReservationInstancePropertiesOutputWithContext(context.Context) ReservationSpecificReservationInstancePropertiesOutput
}

type ReservationSpecificReservationInstancePropertiesArgs struct {
	// Guest accelerator type and count.  Structure is documented below.
	GuestAccelerators ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayInput `pulumi:"guestAccelerators"`
	// The amount of local ssd to reserve with each instance. This
	// reserves disks of type `local-ssd`.  Structure is documented below.
	LocalSsds ReservationSpecificReservationInstancePropertiesLocalSsdArrayInput `pulumi:"localSsds"`
	// The name of the machine type to reserve.
	MachineType pulumi.StringInput `pulumi:"machineType"`
	// The minimum CPU platform for the reservation. For example,
	// `"Intel Skylake"`. See
	// the CPU platform availability reference](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform#availablezones)
	// for information on available CPU platforms.
	MinCpuPlatform pulumi.StringPtrInput `pulumi:"minCpuPlatform"`
}

func (ReservationSpecificReservationInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationSpecificReservationInstanceProperties)(nil)).Elem()
}

func (i ReservationSpecificReservationInstancePropertiesArgs) ToReservationSpecificReservationInstancePropertiesOutput() ReservationSpecificReservationInstancePropertiesOutput {
	return i.ToReservationSpecificReservationInstancePropertiesOutputWithContext(context.Background())
}

func (i ReservationSpecificReservationInstancePropertiesArgs) ToReservationSpecificReservationInstancePropertiesOutputWithContext(ctx context.Context) ReservationSpecificReservationInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationSpecificReservationInstancePropertiesOutput)
}

func (i ReservationSpecificReservationInstancePropertiesArgs) ToReservationSpecificReservationInstancePropertiesPtrOutput() ReservationSpecificReservationInstancePropertiesPtrOutput {
	return i.ToReservationSpecificReservationInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i ReservationSpecificReservationInstancePropertiesArgs) ToReservationSpecificReservationInstancePropertiesPtrOutputWithContext(ctx context.Context) ReservationSpecificReservationInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationSpecificReservationInstancePropertiesOutput).ToReservationSpecificReservationInstancePropertiesPtrOutputWithContext(ctx)
}

// ReservationSpecificReservationInstancePropertiesPtrInput is an input type that accepts ReservationSpecificReservationInstancePropertiesArgs, ReservationSpecificReservationInstancePropertiesPtr and ReservationSpecificReservationInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `ReservationSpecificReservationInstancePropertiesPtrInput` via:
//
// 		 ReservationSpecificReservationInstancePropertiesArgs{...}
//
//  or:
//
// 		 nil
//
type ReservationSpecificReservationInstancePropertiesPtrInput interface {
	pulumi.Input

	ToReservationSpecificReservationInstancePropertiesPtrOutput() ReservationSpecificReservationInstancePropertiesPtrOutput
	ToReservationSpecificReservationInstancePropertiesPtrOutputWithContext(context.Context) ReservationSpecificReservationInstancePropertiesPtrOutput
}

type reservationSpecificReservationInstancePropertiesPtrType ReservationSpecificReservationInstancePropertiesArgs

func ReservationSpecificReservationInstancePropertiesPtr(v *ReservationSpecificReservationInstancePropertiesArgs) ReservationSpecificReservationInstancePropertiesPtrInput {
	return (*reservationSpecificReservationInstancePropertiesPtrType)(v)
}

func (*reservationSpecificReservationInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationSpecificReservationInstanceProperties)(nil)).Elem()
}

func (i *reservationSpecificReservationInstancePropertiesPtrType) ToReservationSpecificReservationInstancePropertiesPtrOutput() ReservationSpecificReservationInstancePropertiesPtrOutput {
	return i.ToReservationSpecificReservationInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *reservationSpecificReservationInstancePropertiesPtrType) ToReservationSpecificReservationInstancePropertiesPtrOutputWithContext(ctx context.Context) ReservationSpecificReservationInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationSpecificReservationInstancePropertiesPtrOutput)
}

type ReservationSpecificReservationInstancePropertiesOutput struct{ *pulumi.OutputState }

func (ReservationSpecificReservationInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationSpecificReservationInstanceProperties)(nil)).Elem()
}

func (o ReservationSpecificReservationInstancePropertiesOutput) ToReservationSpecificReservationInstancePropertiesOutput() ReservationSpecificReservationInstancePropertiesOutput {
	return o
}

func (o ReservationSpecificReservationInstancePropertiesOutput) ToReservationSpecificReservationInstancePropertiesOutputWithContext(ctx context.Context) ReservationSpecificReservationInstancePropertiesOutput {
	return o
}

func (o ReservationSpecificReservationInstancePropertiesOutput) ToReservationSpecificReservationInstancePropertiesPtrOutput() ReservationSpecificReservationInstancePropertiesPtrOutput {
	return o.ToReservationSpecificReservationInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o ReservationSpecificReservationInstancePropertiesOutput) ToReservationSpecificReservationInstancePropertiesPtrOutputWithContext(ctx context.Context) ReservationSpecificReservationInstancePropertiesPtrOutput {
	return o.ApplyT(func(v ReservationSpecificReservationInstanceProperties) *ReservationSpecificReservationInstanceProperties {
		return &v
	}).(ReservationSpecificReservationInstancePropertiesPtrOutput)
}

// Guest accelerator type and count.  Structure is documented below.
func (o ReservationSpecificReservationInstancePropertiesOutput) GuestAccelerators() ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput {
	return o.ApplyT(func(v ReservationSpecificReservationInstanceProperties) []ReservationSpecificReservationInstancePropertiesGuestAccelerator {
		return v.GuestAccelerators
	}).(ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput)
}

// The amount of local ssd to reserve with each instance. This
// reserves disks of type `local-ssd`.  Structure is documented below.
func (o ReservationSpecificReservationInstancePropertiesOutput) LocalSsds() ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput {
	return o.ApplyT(func(v ReservationSpecificReservationInstanceProperties) []ReservationSpecificReservationInstancePropertiesLocalSsd {
		return v.LocalSsds
	}).(ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput)
}

// The name of the machine type to reserve.
func (o ReservationSpecificReservationInstancePropertiesOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationSpecificReservationInstanceProperties) string { return v.MachineType }).(pulumi.StringOutput)
}

// The minimum CPU platform for the reservation. For example,
// `"Intel Skylake"`. See
// the CPU platform availability reference](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform#availablezones)
// for information on available CPU platforms.
func (o ReservationSpecificReservationInstancePropertiesOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservationSpecificReservationInstanceProperties) *string { return v.MinCpuPlatform }).(pulumi.StringPtrOutput)
}

type ReservationSpecificReservationInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ReservationSpecificReservationInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationSpecificReservationInstanceProperties)(nil)).Elem()
}

func (o ReservationSpecificReservationInstancePropertiesPtrOutput) ToReservationSpecificReservationInstancePropertiesPtrOutput() ReservationSpecificReservationInstancePropertiesPtrOutput {
	return o
}

func (o ReservationSpecificReservationInstancePropertiesPtrOutput) ToReservationSpecificReservationInstancePropertiesPtrOutputWithContext(ctx context.Context) ReservationSpecificReservationInstancePropertiesPtrOutput {
	return o
}

func (o ReservationSpecificReservationInstancePropertiesPtrOutput) Elem() ReservationSpecificReservationInstancePropertiesOutput {
	return o.ApplyT(func(v *ReservationSpecificReservationInstanceProperties) ReservationSpecificReservationInstanceProperties {
		return *v
	}).(ReservationSpecificReservationInstancePropertiesOutput)
}

// Guest accelerator type and count.  Structure is documented below.
func (o ReservationSpecificReservationInstancePropertiesPtrOutput) GuestAccelerators() ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput {
	return o.ApplyT(func(v *ReservationSpecificReservationInstanceProperties) []ReservationSpecificReservationInstancePropertiesGuestAccelerator {
		if v == nil {
			return nil
		}
		return v.GuestAccelerators
	}).(ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput)
}

// The amount of local ssd to reserve with each instance. This
// reserves disks of type `local-ssd`.  Structure is documented below.
func (o ReservationSpecificReservationInstancePropertiesPtrOutput) LocalSsds() ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput {
	return o.ApplyT(func(v *ReservationSpecificReservationInstanceProperties) []ReservationSpecificReservationInstancePropertiesLocalSsd {
		if v == nil {
			return nil
		}
		return v.LocalSsds
	}).(ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput)
}

// The name of the machine type to reserve.
func (o ReservationSpecificReservationInstancePropertiesPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservationSpecificReservationInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.MachineType
	}).(pulumi.StringPtrOutput)
}

// The minimum CPU platform for the reservation. For example,
// `"Intel Skylake"`. See
// the CPU platform availability reference](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform#availablezones)
// for information on available CPU platforms.
func (o ReservationSpecificReservationInstancePropertiesPtrOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservationSpecificReservationInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.MinCpuPlatform
	}).(pulumi.StringPtrOutput)
}

type ReservationSpecificReservationInstancePropertiesGuestAccelerator struct {
	// The number of the guest accelerator cards exposed to
	// this instance.
	AcceleratorCount int `pulumi:"acceleratorCount"`
	// The full or partial URL of the accelerator type to
	// attach to this instance. For example:
	// `projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100`
	// If you are creating an instance template, specify only the accelerator name.
	AcceleratorType string `pulumi:"acceleratorType"`
}

// ReservationSpecificReservationInstancePropertiesGuestAcceleratorInput is an input type that accepts ReservationSpecificReservationInstancePropertiesGuestAcceleratorArgs and ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput values.
// You can construct a concrete instance of `ReservationSpecificReservationInstancePropertiesGuestAcceleratorInput` via:
//
// 		 ReservationSpecificReservationInstancePropertiesGuestAcceleratorArgs{...}
//
type ReservationSpecificReservationInstancePropertiesGuestAcceleratorInput interface {
	pulumi.Input

	ToReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput() ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput
	ToReservationSpecificReservationInstancePropertiesGuestAcceleratorOutputWithContext(context.Context) ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput
}

type ReservationSpecificReservationInstancePropertiesGuestAcceleratorArgs struct {
	// The number of the guest accelerator cards exposed to
	// this instance.
	AcceleratorCount pulumi.IntInput `pulumi:"acceleratorCount"`
	// The full or partial URL of the accelerator type to
	// attach to this instance. For example:
	// `projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100`
	// If you are creating an instance template, specify only the accelerator name.
	AcceleratorType pulumi.StringInput `pulumi:"acceleratorType"`
}

func (ReservationSpecificReservationInstancePropertiesGuestAcceleratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationSpecificReservationInstancePropertiesGuestAccelerator)(nil)).Elem()
}

func (i ReservationSpecificReservationInstancePropertiesGuestAcceleratorArgs) ToReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput() ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput {
	return i.ToReservationSpecificReservationInstancePropertiesGuestAcceleratorOutputWithContext(context.Background())
}

func (i ReservationSpecificReservationInstancePropertiesGuestAcceleratorArgs) ToReservationSpecificReservationInstancePropertiesGuestAcceleratorOutputWithContext(ctx context.Context) ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput)
}

// ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayInput is an input type that accepts ReservationSpecificReservationInstancePropertiesGuestAcceleratorArray and ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput values.
// You can construct a concrete instance of `ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayInput` via:
//
// 		 ReservationSpecificReservationInstancePropertiesGuestAcceleratorArray{ ReservationSpecificReservationInstancePropertiesGuestAcceleratorArgs{...} }
//
type ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayInput interface {
	pulumi.Input

	ToReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput() ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput
	ToReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutputWithContext(context.Context) ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput
}

type ReservationSpecificReservationInstancePropertiesGuestAcceleratorArray []ReservationSpecificReservationInstancePropertiesGuestAcceleratorInput

func (ReservationSpecificReservationInstancePropertiesGuestAcceleratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReservationSpecificReservationInstancePropertiesGuestAccelerator)(nil)).Elem()
}

func (i ReservationSpecificReservationInstancePropertiesGuestAcceleratorArray) ToReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput() ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput {
	return i.ToReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutputWithContext(context.Background())
}

func (i ReservationSpecificReservationInstancePropertiesGuestAcceleratorArray) ToReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutputWithContext(ctx context.Context) ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput)
}

type ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput struct{ *pulumi.OutputState }

func (ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationSpecificReservationInstancePropertiesGuestAccelerator)(nil)).Elem()
}

func (o ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput) ToReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput() ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput {
	return o
}

func (o ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput) ToReservationSpecificReservationInstancePropertiesGuestAcceleratorOutputWithContext(ctx context.Context) ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput {
	return o
}

// The number of the guest accelerator cards exposed to
// this instance.
func (o ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput) AcceleratorCount() pulumi.IntOutput {
	return o.ApplyT(func(v ReservationSpecificReservationInstancePropertiesGuestAccelerator) int {
		return v.AcceleratorCount
	}).(pulumi.IntOutput)
}

// The full or partial URL of the accelerator type to
// attach to this instance. For example:
// `projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100`
// If you are creating an instance template, specify only the accelerator name.
func (o ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput) AcceleratorType() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationSpecificReservationInstancePropertiesGuestAccelerator) string {
		return v.AcceleratorType
	}).(pulumi.StringOutput)
}

type ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput struct{ *pulumi.OutputState }

func (ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReservationSpecificReservationInstancePropertiesGuestAccelerator)(nil)).Elem()
}

func (o ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput) ToReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput() ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput {
	return o
}

func (o ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput) ToReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutputWithContext(ctx context.Context) ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput {
	return o
}

func (o ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput) Index(i pulumi.IntInput) ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReservationSpecificReservationInstancePropertiesGuestAccelerator {
		return vs[0].([]ReservationSpecificReservationInstancePropertiesGuestAccelerator)[vs[1].(int)]
	}).(ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput)
}

type ReservationSpecificReservationInstancePropertiesLocalSsd struct {
	// The size of the disk in base-2 GB.
	DiskSizeGb int `pulumi:"diskSizeGb"`
	// The disk interface to use for attaching this disk, one
	// of `SCSI` or `NVME`. The default is `SCSI`.
	Interface *string `pulumi:"interface"`
}

// ReservationSpecificReservationInstancePropertiesLocalSsdInput is an input type that accepts ReservationSpecificReservationInstancePropertiesLocalSsdArgs and ReservationSpecificReservationInstancePropertiesLocalSsdOutput values.
// You can construct a concrete instance of `ReservationSpecificReservationInstancePropertiesLocalSsdInput` via:
//
// 		 ReservationSpecificReservationInstancePropertiesLocalSsdArgs{...}
//
type ReservationSpecificReservationInstancePropertiesLocalSsdInput interface {
	pulumi.Input

	ToReservationSpecificReservationInstancePropertiesLocalSsdOutput() ReservationSpecificReservationInstancePropertiesLocalSsdOutput
	ToReservationSpecificReservationInstancePropertiesLocalSsdOutputWithContext(context.Context) ReservationSpecificReservationInstancePropertiesLocalSsdOutput
}

type ReservationSpecificReservationInstancePropertiesLocalSsdArgs struct {
	// The size of the disk in base-2 GB.
	DiskSizeGb pulumi.IntInput `pulumi:"diskSizeGb"`
	// The disk interface to use for attaching this disk, one
	// of `SCSI` or `NVME`. The default is `SCSI`.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
}

func (ReservationSpecificReservationInstancePropertiesLocalSsdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationSpecificReservationInstancePropertiesLocalSsd)(nil)).Elem()
}

func (i ReservationSpecificReservationInstancePropertiesLocalSsdArgs) ToReservationSpecificReservationInstancePropertiesLocalSsdOutput() ReservationSpecificReservationInstancePropertiesLocalSsdOutput {
	return i.ToReservationSpecificReservationInstancePropertiesLocalSsdOutputWithContext(context.Background())
}

func (i ReservationSpecificReservationInstancePropertiesLocalSsdArgs) ToReservationSpecificReservationInstancePropertiesLocalSsdOutputWithContext(ctx context.Context) ReservationSpecificReservationInstancePropertiesLocalSsdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationSpecificReservationInstancePropertiesLocalSsdOutput)
}

// ReservationSpecificReservationInstancePropertiesLocalSsdArrayInput is an input type that accepts ReservationSpecificReservationInstancePropertiesLocalSsdArray and ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput values.
// You can construct a concrete instance of `ReservationSpecificReservationInstancePropertiesLocalSsdArrayInput` via:
//
// 		 ReservationSpecificReservationInstancePropertiesLocalSsdArray{ ReservationSpecificReservationInstancePropertiesLocalSsdArgs{...} }
//
type ReservationSpecificReservationInstancePropertiesLocalSsdArrayInput interface {
	pulumi.Input

	ToReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput() ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput
	ToReservationSpecificReservationInstancePropertiesLocalSsdArrayOutputWithContext(context.Context) ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput
}

type ReservationSpecificReservationInstancePropertiesLocalSsdArray []ReservationSpecificReservationInstancePropertiesLocalSsdInput

func (ReservationSpecificReservationInstancePropertiesLocalSsdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReservationSpecificReservationInstancePropertiesLocalSsd)(nil)).Elem()
}

func (i ReservationSpecificReservationInstancePropertiesLocalSsdArray) ToReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput() ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput {
	return i.ToReservationSpecificReservationInstancePropertiesLocalSsdArrayOutputWithContext(context.Background())
}

func (i ReservationSpecificReservationInstancePropertiesLocalSsdArray) ToReservationSpecificReservationInstancePropertiesLocalSsdArrayOutputWithContext(ctx context.Context) ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput)
}

type ReservationSpecificReservationInstancePropertiesLocalSsdOutput struct{ *pulumi.OutputState }

func (ReservationSpecificReservationInstancePropertiesLocalSsdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationSpecificReservationInstancePropertiesLocalSsd)(nil)).Elem()
}

func (o ReservationSpecificReservationInstancePropertiesLocalSsdOutput) ToReservationSpecificReservationInstancePropertiesLocalSsdOutput() ReservationSpecificReservationInstancePropertiesLocalSsdOutput {
	return o
}

func (o ReservationSpecificReservationInstancePropertiesLocalSsdOutput) ToReservationSpecificReservationInstancePropertiesLocalSsdOutputWithContext(ctx context.Context) ReservationSpecificReservationInstancePropertiesLocalSsdOutput {
	return o
}

// The size of the disk in base-2 GB.
func (o ReservationSpecificReservationInstancePropertiesLocalSsdOutput) DiskSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v ReservationSpecificReservationInstancePropertiesLocalSsd) int { return v.DiskSizeGb }).(pulumi.IntOutput)
}

// The disk interface to use for attaching this disk, one
// of `SCSI` or `NVME`. The default is `SCSI`.
func (o ReservationSpecificReservationInstancePropertiesLocalSsdOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservationSpecificReservationInstancePropertiesLocalSsd) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

type ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput struct{ *pulumi.OutputState }

func (ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReservationSpecificReservationInstancePropertiesLocalSsd)(nil)).Elem()
}

func (o ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput) ToReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput() ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput {
	return o
}

func (o ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput) ToReservationSpecificReservationInstancePropertiesLocalSsdArrayOutputWithContext(ctx context.Context) ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput {
	return o
}

func (o ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput) Index(i pulumi.IntInput) ReservationSpecificReservationInstancePropertiesLocalSsdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReservationSpecificReservationInstancePropertiesLocalSsd {
		return vs[0].([]ReservationSpecificReservationInstancePropertiesLocalSsd)[vs[1].(int)]
	}).(ReservationSpecificReservationInstancePropertiesLocalSsdOutput)
}

type ResourcePolicySnapshotSchedulePolicy struct {
	// Retention policy applied to snapshots created by this resource policy.  Structure is documented below.
	RetentionPolicy *ResourcePolicySnapshotSchedulePolicyRetentionPolicy `pulumi:"retentionPolicy"`
	// Contains one of an `hourlySchedule`, `dailySchedule`, or `weeklySchedule`.  Structure is documented below.
	Schedule ResourcePolicySnapshotSchedulePolicySchedule `pulumi:"schedule"`
	// Properties with which the snapshots are created, such as labels.  Structure is documented below.
	SnapshotProperties *ResourcePolicySnapshotSchedulePolicySnapshotProperties `pulumi:"snapshotProperties"`
}

// ResourcePolicySnapshotSchedulePolicyInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyArgs and ResourcePolicySnapshotSchedulePolicyOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyInput` via:
//
// 		 ResourcePolicySnapshotSchedulePolicyArgs{...}
//
type ResourcePolicySnapshotSchedulePolicyInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyOutput() ResourcePolicySnapshotSchedulePolicyOutput
	ToResourcePolicySnapshotSchedulePolicyOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyOutput
}

type ResourcePolicySnapshotSchedulePolicyArgs struct {
	// Retention policy applied to snapshots created by this resource policy.  Structure is documented below.
	RetentionPolicy ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrInput `pulumi:"retentionPolicy"`
	// Contains one of an `hourlySchedule`, `dailySchedule`, or `weeklySchedule`.  Structure is documented below.
	Schedule ResourcePolicySnapshotSchedulePolicyScheduleInput `pulumi:"schedule"`
	// Properties with which the snapshots are created, such as labels.  Structure is documented below.
	SnapshotProperties ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrInput `pulumi:"snapshotProperties"`
}

func (ResourcePolicySnapshotSchedulePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicy)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicyArgs) ToResourcePolicySnapshotSchedulePolicyOutput() ResourcePolicySnapshotSchedulePolicyOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyArgs) ToResourcePolicySnapshotSchedulePolicyOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyOutput)
}

func (i ResourcePolicySnapshotSchedulePolicyArgs) ToResourcePolicySnapshotSchedulePolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyPtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyArgs) ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyOutput).ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(ctx)
}

// ResourcePolicySnapshotSchedulePolicyPtrInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyArgs, ResourcePolicySnapshotSchedulePolicyPtr and ResourcePolicySnapshotSchedulePolicyPtrOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyPtrInput` via:
//
// 		 ResourcePolicySnapshotSchedulePolicyArgs{...}
//
//  or:
//
// 		 nil
//
type ResourcePolicySnapshotSchedulePolicyPtrInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyPtrOutput
	ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyPtrOutput
}

type resourcePolicySnapshotSchedulePolicyPtrType ResourcePolicySnapshotSchedulePolicyArgs

func ResourcePolicySnapshotSchedulePolicyPtr(v *ResourcePolicySnapshotSchedulePolicyArgs) ResourcePolicySnapshotSchedulePolicyPtrInput {
	return (*resourcePolicySnapshotSchedulePolicyPtrType)(v)
}

func (*resourcePolicySnapshotSchedulePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicy)(nil)).Elem()
}

func (i *resourcePolicySnapshotSchedulePolicyPtrType) ToResourcePolicySnapshotSchedulePolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyPtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(context.Background())
}

func (i *resourcePolicySnapshotSchedulePolicyPtrType) ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyPtrOutput)
}

type ResourcePolicySnapshotSchedulePolicyOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicy)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyOutput) ToResourcePolicySnapshotSchedulePolicyOutput() ResourcePolicySnapshotSchedulePolicyOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyOutput) ToResourcePolicySnapshotSchedulePolicyOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyOutput) ToResourcePolicySnapshotSchedulePolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyPtrOutput {
	return o.ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(context.Background())
}

func (o ResourcePolicySnapshotSchedulePolicyOutput) ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicy) *ResourcePolicySnapshotSchedulePolicy {
		return &v
	}).(ResourcePolicySnapshotSchedulePolicyPtrOutput)
}

// Retention policy applied to snapshots created by this resource policy.  Structure is documented below.
func (o ResourcePolicySnapshotSchedulePolicyOutput) RetentionPolicy() ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicy) *ResourcePolicySnapshotSchedulePolicyRetentionPolicy {
		return v.RetentionPolicy
	}).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput)
}

// Contains one of an `hourlySchedule`, `dailySchedule`, or `weeklySchedule`.  Structure is documented below.
func (o ResourcePolicySnapshotSchedulePolicyOutput) Schedule() ResourcePolicySnapshotSchedulePolicyScheduleOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicy) ResourcePolicySnapshotSchedulePolicySchedule {
		return v.Schedule
	}).(ResourcePolicySnapshotSchedulePolicyScheduleOutput)
}

// Properties with which the snapshots are created, such as labels.  Structure is documented below.
func (o ResourcePolicySnapshotSchedulePolicyOutput) SnapshotProperties() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicy) *ResourcePolicySnapshotSchedulePolicySnapshotProperties {
		return v.SnapshotProperties
	}).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput)
}

type ResourcePolicySnapshotSchedulePolicyPtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicy)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyPtrOutput) ToResourcePolicySnapshotSchedulePolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyPtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyPtrOutput) ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyPtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyPtrOutput) Elem() ResourcePolicySnapshotSchedulePolicyOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicy) ResourcePolicySnapshotSchedulePolicy { return *v }).(ResourcePolicySnapshotSchedulePolicyOutput)
}

// Retention policy applied to snapshots created by this resource policy.  Structure is documented below.
func (o ResourcePolicySnapshotSchedulePolicyPtrOutput) RetentionPolicy() ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicy) *ResourcePolicySnapshotSchedulePolicyRetentionPolicy {
		if v == nil {
			return nil
		}
		return v.RetentionPolicy
	}).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput)
}

// Contains one of an `hourlySchedule`, `dailySchedule`, or `weeklySchedule`.  Structure is documented below.
func (o ResourcePolicySnapshotSchedulePolicyPtrOutput) Schedule() ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicy) *ResourcePolicySnapshotSchedulePolicySchedule {
		if v == nil {
			return nil
		}
		return &v.Schedule
	}).(ResourcePolicySnapshotSchedulePolicySchedulePtrOutput)
}

// Properties with which the snapshots are created, such as labels.  Structure is documented below.
func (o ResourcePolicySnapshotSchedulePolicyPtrOutput) SnapshotProperties() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicy) *ResourcePolicySnapshotSchedulePolicySnapshotProperties {
		if v == nil {
			return nil
		}
		return v.SnapshotProperties
	}).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput)
}

type ResourcePolicySnapshotSchedulePolicyRetentionPolicy struct {
	// Maximum age of the snapshot that is allowed to be kept.
	MaxRetentionDays int `pulumi:"maxRetentionDays"`
	// Specifies the behavior to apply to scheduled snapshots when
	// the source disk is deleted.
	// Valid options are KEEP_AUTO_SNAPSHOTS and APPLY_RETENTION_POLICY
	OnSourceDiskDelete *string `pulumi:"onSourceDiskDelete"`
}

// ResourcePolicySnapshotSchedulePolicyRetentionPolicyInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs and ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyRetentionPolicyInput` via:
//
// 		 ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs{...}
//
type ResourcePolicySnapshotSchedulePolicyRetentionPolicyInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput
	ToResourcePolicySnapshotSchedulePolicyRetentionPolicyOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput
}

type ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs struct {
	// Maximum age of the snapshot that is allowed to be kept.
	MaxRetentionDays pulumi.IntInput `pulumi:"maxRetentionDays"`
	// Specifies the behavior to apply to scheduled snapshots when
	// the source disk is deleted.
	// Valid options are KEEP_AUTO_SNAPSHOTS and APPLY_RETENTION_POLICY
	OnSourceDiskDelete pulumi.StringPtrInput `pulumi:"onSourceDiskDelete"`
}

func (ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyRetentionPolicy)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyRetentionPolicyOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput)
}

func (i ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput).ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(ctx)
}

// ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs, ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtr and ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrInput` via:
//
// 		 ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput
	ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput
}

type resourcePolicySnapshotSchedulePolicyRetentionPolicyPtrType ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs

func ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtr(v *ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs) ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrInput {
	return (*resourcePolicySnapshotSchedulePolicyRetentionPolicyPtrType)(v)
}

func (*resourcePolicySnapshotSchedulePolicyRetentionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicyRetentionPolicy)(nil)).Elem()
}

func (i *resourcePolicySnapshotSchedulePolicyRetentionPolicyPtrType) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i *resourcePolicySnapshotSchedulePolicyRetentionPolicyPtrType) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput)
}

type ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyRetentionPolicy)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return o.ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(context.Background())
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyRetentionPolicy) *ResourcePolicySnapshotSchedulePolicyRetentionPolicy {
		return &v
	}).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput)
}

// Maximum age of the snapshot that is allowed to be kept.
func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput) MaxRetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyRetentionPolicy) int { return v.MaxRetentionDays }).(pulumi.IntOutput)
}

// Specifies the behavior to apply to scheduled snapshots when
// the source disk is deleted.
// Valid options are KEEP_AUTO_SNAPSHOTS and APPLY_RETENTION_POLICY
func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput) OnSourceDiskDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyRetentionPolicy) *string { return v.OnSourceDiskDelete }).(pulumi.StringPtrOutput)
}

type ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicyRetentionPolicy)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput) Elem() ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyRetentionPolicy) ResourcePolicySnapshotSchedulePolicyRetentionPolicy {
		return *v
	}).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput)
}

// Maximum age of the snapshot that is allowed to be kept.
func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput) MaxRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyRetentionPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MaxRetentionDays
	}).(pulumi.IntPtrOutput)
}

// Specifies the behavior to apply to scheduled snapshots when
// the source disk is deleted.
// Valid options are KEEP_AUTO_SNAPSHOTS and APPLY_RETENTION_POLICY
func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput) OnSourceDiskDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyRetentionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.OnSourceDiskDelete
	}).(pulumi.StringPtrOutput)
}

type ResourcePolicySnapshotSchedulePolicySchedule struct {
	// The policy will execute every nth day at the specified time.  Structure is documented below.
	DailySchedule *ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule `pulumi:"dailySchedule"`
	// The policy will execute every nth hour starting at the specified time.  Structure is documented below.
	HourlySchedule *ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule `pulumi:"hourlySchedule"`
	// Allows specifying a snapshot time for each day of the week.  Structure is documented below.
	WeeklySchedule *ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule `pulumi:"weeklySchedule"`
}

// ResourcePolicySnapshotSchedulePolicyScheduleInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyScheduleArgs and ResourcePolicySnapshotSchedulePolicyScheduleOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyScheduleInput` via:
//
// 		 ResourcePolicySnapshotSchedulePolicyScheduleArgs{...}
//
type ResourcePolicySnapshotSchedulePolicyScheduleInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyScheduleOutput() ResourcePolicySnapshotSchedulePolicyScheduleOutput
	ToResourcePolicySnapshotSchedulePolicyScheduleOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyScheduleOutput
}

type ResourcePolicySnapshotSchedulePolicyScheduleArgs struct {
	// The policy will execute every nth day at the specified time.  Structure is documented below.
	DailySchedule ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrInput `pulumi:"dailySchedule"`
	// The policy will execute every nth hour starting at the specified time.  Structure is documented below.
	HourlySchedule ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrInput `pulumi:"hourlySchedule"`
	// Allows specifying a snapshot time for each day of the week.  Structure is documented below.
	WeeklySchedule ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrInput `pulumi:"weeklySchedule"`
}

func (ResourcePolicySnapshotSchedulePolicyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicySchedule)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleArgs) ToResourcePolicySnapshotSchedulePolicyScheduleOutput() ResourcePolicySnapshotSchedulePolicyScheduleOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyScheduleOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleArgs) ToResourcePolicySnapshotSchedulePolicyScheduleOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleOutput)
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleArgs) ToResourcePolicySnapshotSchedulePolicySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleArgs) ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleOutput).ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(ctx)
}

// ResourcePolicySnapshotSchedulePolicySchedulePtrInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyScheduleArgs, ResourcePolicySnapshotSchedulePolicySchedulePtr and ResourcePolicySnapshotSchedulePolicySchedulePtrOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicySchedulePtrInput` via:
//
// 		 ResourcePolicySnapshotSchedulePolicyScheduleArgs{...}
//
//  or:
//
// 		 nil
//
type ResourcePolicySnapshotSchedulePolicySchedulePtrInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicySchedulePtrOutput
	ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicySchedulePtrOutput
}

type resourcePolicySnapshotSchedulePolicySchedulePtrType ResourcePolicySnapshotSchedulePolicyScheduleArgs

func ResourcePolicySnapshotSchedulePolicySchedulePtr(v *ResourcePolicySnapshotSchedulePolicyScheduleArgs) ResourcePolicySnapshotSchedulePolicySchedulePtrInput {
	return (*resourcePolicySnapshotSchedulePolicySchedulePtrType)(v)
}

func (*resourcePolicySnapshotSchedulePolicySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicySchedule)(nil)).Elem()
}

func (i *resourcePolicySnapshotSchedulePolicySchedulePtrType) ToResourcePolicySnapshotSchedulePolicySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(context.Background())
}

func (i *resourcePolicySnapshotSchedulePolicySchedulePtrType) ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicySchedulePtrOutput)
}

type ResourcePolicySnapshotSchedulePolicyScheduleOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicySchedule)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleOutput) ToResourcePolicySnapshotSchedulePolicyScheduleOutput() ResourcePolicySnapshotSchedulePolicyScheduleOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleOutput) ToResourcePolicySnapshotSchedulePolicyScheduleOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleOutput) ToResourcePolicySnapshotSchedulePolicySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return o.ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(context.Background())
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleOutput) ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySchedule) *ResourcePolicySnapshotSchedulePolicySchedule {
		return &v
	}).(ResourcePolicySnapshotSchedulePolicySchedulePtrOutput)
}

// The policy will execute every nth day at the specified time.  Structure is documented below.
func (o ResourcePolicySnapshotSchedulePolicyScheduleOutput) DailySchedule() ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySchedule) *ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule {
		return v.DailySchedule
	}).(ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput)
}

// The policy will execute every nth hour starting at the specified time.  Structure is documented below.
func (o ResourcePolicySnapshotSchedulePolicyScheduleOutput) HourlySchedule() ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySchedule) *ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule {
		return v.HourlySchedule
	}).(ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput)
}

// Allows specifying a snapshot time for each day of the week.  Structure is documented below.
func (o ResourcePolicySnapshotSchedulePolicyScheduleOutput) WeeklySchedule() ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySchedule) *ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule {
		return v.WeeklySchedule
	}).(ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput)
}

type ResourcePolicySnapshotSchedulePolicySchedulePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicySchedule)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicySchedulePtrOutput) ToResourcePolicySnapshotSchedulePolicySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicySchedulePtrOutput) ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicySchedulePtrOutput) Elem() ResourcePolicySnapshotSchedulePolicyScheduleOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySchedule) ResourcePolicySnapshotSchedulePolicySchedule {
		return *v
	}).(ResourcePolicySnapshotSchedulePolicyScheduleOutput)
}

// The policy will execute every nth day at the specified time.  Structure is documented below.
func (o ResourcePolicySnapshotSchedulePolicySchedulePtrOutput) DailySchedule() ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySchedule) *ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule {
		if v == nil {
			return nil
		}
		return v.DailySchedule
	}).(ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput)
}

// The policy will execute every nth hour starting at the specified time.  Structure is documented below.
func (o ResourcePolicySnapshotSchedulePolicySchedulePtrOutput) HourlySchedule() ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySchedule) *ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule {
		if v == nil {
			return nil
		}
		return v.HourlySchedule
	}).(ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput)
}

// Allows specifying a snapshot time for each day of the week.  Structure is documented below.
func (o ResourcePolicySnapshotSchedulePolicySchedulePtrOutput) WeeklySchedule() ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySchedule) *ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule {
		if v == nil {
			return nil
		}
		return v.WeeklySchedule
	}).(ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput)
}

type ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule struct {
	// The number of days between snapshots.
	DaysInCycle int `pulumi:"daysInCycle"`
	// Time within the window to start the operations.
	// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
	StartTime string `pulumi:"startTime"`
}

// ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs and ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleInput` via:
//
// 		 ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs{...}
//
type ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput() ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput
	ToResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput
}

type ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs struct {
	// The number of days between snapshots.
	DaysInCycle pulumi.IntInput `pulumi:"daysInCycle"`
	// Time within the window to start the operations.
	// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs) ToResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput() ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs) ToResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput)
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs) ToResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs) ToResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput).ToResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutputWithContext(ctx)
}

// ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs, ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtr and ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrInput` via:
//
// 		 ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs{...}
//
//  or:
//
// 		 nil
//
type ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput
	ToResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput
}

type resourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrType ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs

func ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtr(v *ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleArgs) ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrInput {
	return (*resourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrType)(v)
}

func (*resourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule)(nil)).Elem()
}

func (i *resourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrType) ToResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutputWithContext(context.Background())
}

func (i *resourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrType) ToResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput)
}

type ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput) ToResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput() ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput) ToResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput) ToResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput {
	return o.ToResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutputWithContext(context.Background())
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput) ToResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule) *ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule {
		return &v
	}).(ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput)
}

// The number of days between snapshots.
func (o ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput) DaysInCycle() pulumi.IntOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule) int { return v.DaysInCycle }).(pulumi.IntOutput)
}

// Time within the window to start the operations.
// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
func (o ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule) string { return v.StartTime }).(pulumi.StringOutput)
}

type ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput) ToResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput) ToResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput) Elem() ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule) ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule {
		return *v
	}).(ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput)
}

// The number of days between snapshots.
func (o ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput) DaysInCycle() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.DaysInCycle
	}).(pulumi.IntPtrOutput)
}

// Time within the window to start the operations.
// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
func (o ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyScheduleDailySchedule) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

type ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule struct {
	// The number of hours between snapshots.
	HoursInCycle int `pulumi:"hoursInCycle"`
	// Time within the window to start the operations.
	// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
	StartTime string `pulumi:"startTime"`
}

// ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs and ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleInput` via:
//
// 		 ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs{...}
//
type ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput() ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput
	ToResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput
}

type ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs struct {
	// The number of hours between snapshots.
	HoursInCycle pulumi.IntInput `pulumi:"hoursInCycle"`
	// Time within the window to start the operations.
	// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs) ToResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput() ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs) ToResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput)
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs) ToResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs) ToResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput).ToResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutputWithContext(ctx)
}

// ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs, ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtr and ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrInput` via:
//
// 		 ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs{...}
//
//  or:
//
// 		 nil
//
type ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput
	ToResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput
}

type resourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrType ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs

func ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtr(v *ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs) ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrInput {
	return (*resourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrType)(v)
}

func (*resourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule)(nil)).Elem()
}

func (i *resourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrType) ToResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutputWithContext(context.Background())
}

func (i *resourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrType) ToResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput)
}

type ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput) ToResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput() ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput) ToResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput) ToResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput {
	return o.ToResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutputWithContext(context.Background())
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput) ToResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule) *ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule {
		return &v
	}).(ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput)
}

// The number of hours between snapshots.
func (o ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput) HoursInCycle() pulumi.IntOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule) int { return v.HoursInCycle }).(pulumi.IntOutput)
}

// Time within the window to start the operations.
// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
func (o ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule) string { return v.StartTime }).(pulumi.StringOutput)
}

type ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput) ToResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput) ToResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput) Elem() ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule) ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule {
		return *v
	}).(ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput)
}

// The number of hours between snapshots.
func (o ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput) HoursInCycle() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.HoursInCycle
	}).(pulumi.IntPtrOutput)
}

// Time within the window to start the operations.
// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
func (o ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedule) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

type ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule struct {
	// May contain up to seven (one for each day of the week) snapshot times.  Structure is documented below.
	DayOfWeeks []ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek `pulumi:"dayOfWeeks"`
}

// ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs and ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleInput` via:
//
// 		 ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs{...}
//
type ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput() ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput
	ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput
}

type ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs struct {
	// May contain up to seven (one for each day of the week) snapshot times.  Structure is documented below.
	DayOfWeeks ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayInput `pulumi:"dayOfWeeks"`
}

func (ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput() ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput)
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput).ToResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutputWithContext(ctx)
}

// ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs, ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtr and ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrInput` via:
//
// 		 ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs{...}
//
//  or:
//
// 		 nil
//
type ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput
	ToResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput
}

type resourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrType ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs

func ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtr(v *ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleArgs) ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrInput {
	return (*resourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrType)(v)
}

func (*resourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule)(nil)).Elem()
}

func (i *resourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrType) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i *resourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrType) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput)
}

type ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput() ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput {
	return o.ToResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutputWithContext(context.Background())
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule) *ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule {
		return &v
	}).(ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput)
}

// May contain up to seven (one for each day of the week) snapshot times.  Structure is documented below.
func (o ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput) DayOfWeeks() ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule) []ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek {
		return v.DayOfWeeks
	}).(ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput)
}

type ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput) Elem() ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule) ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule {
		return *v
	}).(ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput)
}

// May contain up to seven (one for each day of the week) snapshot times.  Structure is documented below.
func (o ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput) DayOfWeeks() ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedule) []ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek {
		if v == nil {
			return nil
		}
		return v.DayOfWeeks
	}).(ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput)
}

type ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek struct {
	// The day of the week to create the snapshot. e.g. MONDAY
	Day string `pulumi:"day"`
	// Time within the window to start the operations.
	// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
	StartTime string `pulumi:"startTime"`
}

// ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArgs and ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekInput` via:
//
// 		 ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArgs{...}
//
type ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput() ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput
	ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput
}

type ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArgs struct {
	// The day of the week to create the snapshot. e.g. MONDAY
	Day pulumi.StringInput `pulumi:"day"`
	// Time within the window to start the operations.
	// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArgs) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput() ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArgs) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput)
}

// ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArray and ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayInput` via:
//
// 		 ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArray{ ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArgs{...} }
//
type ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput() ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput
	ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput
}

type ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArray []ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekInput

func (ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArray) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput() ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArray) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput)
}

type ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput() ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput {
	return o
}

// The day of the week to create the snapshot. e.g. MONDAY
func (o ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput) Day() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek) string { return v.Day }).(pulumi.StringOutput)
}

// Time within the window to start the operations.
// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
func (o ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek) string {
		return v.StartTime
	}).(pulumi.StringOutput)
}

type ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput() ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput) ToResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput) Index(i pulumi.IntInput) ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek {
		return vs[0].([]ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeek)[vs[1].(int)]
	}).(ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput)
}

type ResourcePolicySnapshotSchedulePolicySnapshotProperties struct {
	// Whether to perform a 'guest aware' snapshot.
	GuestFlush *bool `pulumi:"guestFlush"`
	// A set of key-value pairs.
	Labels map[string]string `pulumi:"labels"`
	// Cloud Storage bucket location to store the auto snapshot
	// (regional or multi-regional)
	StorageLocations *string `pulumi:"storageLocations"`
}

// ResourcePolicySnapshotSchedulePolicySnapshotPropertiesInput is an input type that accepts ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs and ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicySnapshotPropertiesInput` via:
//
// 		 ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs{...}
//
type ResourcePolicySnapshotSchedulePolicySnapshotPropertiesInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput
	ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput
}

type ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs struct {
	// Whether to perform a 'guest aware' snapshot.
	GuestFlush pulumi.BoolPtrInput `pulumi:"guestFlush"`
	// A set of key-value pairs.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Cloud Storage bucket location to store the auto snapshot
	// (regional or multi-regional)
	StorageLocations pulumi.StringPtrInput `pulumi:"storageLocations"`
}

func (ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicySnapshotProperties)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput {
	return i.ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput)
}

func (i ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput).ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(ctx)
}

// ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrInput is an input type that accepts ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs, ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtr and ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrInput` via:
//
// 		 ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs{...}
//
//  or:
//
// 		 nil
//
type ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput
	ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput
}

type resourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrType ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs

func ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtr(v *ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrInput {
	return (*resourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrType)(v)
}

func (*resourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicySnapshotProperties)(nil)).Elem()
}

func (i *resourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrType) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(context.Background())
}

func (i *resourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrType) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput)
}

type ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicySnapshotProperties)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return o.ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(context.Background())
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySnapshotProperties) *ResourcePolicySnapshotSchedulePolicySnapshotProperties {
		return &v
	}).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput)
}

// Whether to perform a 'guest aware' snapshot.
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) GuestFlush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySnapshotProperties) *bool { return v.GuestFlush }).(pulumi.BoolPtrOutput)
}

// A set of key-value pairs.
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySnapshotProperties) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Cloud Storage bucket location to store the auto snapshot
// (regional or multi-regional)
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) StorageLocations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySnapshotProperties) *string { return v.StorageLocations }).(pulumi.StringPtrOutput)
}

type ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicySnapshotProperties)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput) Elem() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySnapshotProperties) ResourcePolicySnapshotSchedulePolicySnapshotProperties {
		return *v
	}).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput)
}

// Whether to perform a 'guest aware' snapshot.
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput) GuestFlush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySnapshotProperties) *bool {
		if v == nil {
			return nil
		}
		return v.GuestFlush
	}).(pulumi.BoolPtrOutput)
}

// A set of key-value pairs.
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySnapshotProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Cloud Storage bucket location to store the auto snapshot
// (regional or multi-regional)
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput) StorageLocations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySnapshotProperties) *string {
		if v == nil {
			return nil
		}
		return v.StorageLocations
	}).(pulumi.StringPtrOutput)
}

type RouterBgp struct {
	// User-specified flag to indicate which mode to use for advertisement.
	// Valid values of this enum field are: DEFAULT, CUSTOM
	AdvertiseMode *string `pulumi:"advertiseMode"`
	// User-specified list of prefix groups to advertise in custom mode.
	// This field can only be populated if advertiseMode is CUSTOM and
	// is advertised to all peers of the router. These groups will be
	// advertised in addition to any specified prefixes. Leave this field
	// blank to advertise no custom groups.
	// This enum field has the one valid value: ALL_SUBNETS
	AdvertisedGroups []string `pulumi:"advertisedGroups"`
	// User-specified list of individual IP ranges to advertise in
	// custom mode. This field can only be populated if advertiseMode
	// is CUSTOM and is advertised to all peers of the router. These IP
	// ranges will be advertised in addition to any specified groups.
	// Leave this field blank to advertise no custom IP ranges.  Structure is documented below.
	AdvertisedIpRanges []RouterBgpAdvertisedIpRange `pulumi:"advertisedIpRanges"`
	// Local BGP Autonomous System Number (ASN). Must be an RFC6996
	// private ASN, either 16-bit or 32-bit. The value will be fixed for
	// this router resource. All VPN tunnels that link to this router
	// will have the same local ASN.
	Asn int `pulumi:"asn"`
}

// RouterBgpInput is an input type that accepts RouterBgpArgs and RouterBgpOutput values.
// You can construct a concrete instance of `RouterBgpInput` via:
//
// 		 RouterBgpArgs{...}
//
type RouterBgpInput interface {
	pulumi.Input

	ToRouterBgpOutput() RouterBgpOutput
	ToRouterBgpOutputWithContext(context.Context) RouterBgpOutput
}

type RouterBgpArgs struct {
	// User-specified flag to indicate which mode to use for advertisement.
	// Valid values of this enum field are: DEFAULT, CUSTOM
	AdvertiseMode pulumi.StringPtrInput `pulumi:"advertiseMode"`
	// User-specified list of prefix groups to advertise in custom mode.
	// This field can only be populated if advertiseMode is CUSTOM and
	// is advertised to all peers of the router. These groups will be
	// advertised in addition to any specified prefixes. Leave this field
	// blank to advertise no custom groups.
	// This enum field has the one valid value: ALL_SUBNETS
	AdvertisedGroups pulumi.StringArrayInput `pulumi:"advertisedGroups"`
	// User-specified list of individual IP ranges to advertise in
	// custom mode. This field can only be populated if advertiseMode
	// is CUSTOM and is advertised to all peers of the router. These IP
	// ranges will be advertised in addition to any specified groups.
	// Leave this field blank to advertise no custom IP ranges.  Structure is documented below.
	AdvertisedIpRanges RouterBgpAdvertisedIpRangeArrayInput `pulumi:"advertisedIpRanges"`
	// Local BGP Autonomous System Number (ASN). Must be an RFC6996
	// private ASN, either 16-bit or 32-bit. The value will be fixed for
	// this router resource. All VPN tunnels that link to this router
	// will have the same local ASN.
	Asn pulumi.IntInput `pulumi:"asn"`
}

func (RouterBgpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterBgp)(nil)).Elem()
}

func (i RouterBgpArgs) ToRouterBgpOutput() RouterBgpOutput {
	return i.ToRouterBgpOutputWithContext(context.Background())
}

func (i RouterBgpArgs) ToRouterBgpOutputWithContext(ctx context.Context) RouterBgpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpOutput)
}

func (i RouterBgpArgs) ToRouterBgpPtrOutput() RouterBgpPtrOutput {
	return i.ToRouterBgpPtrOutputWithContext(context.Background())
}

func (i RouterBgpArgs) ToRouterBgpPtrOutputWithContext(ctx context.Context) RouterBgpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpOutput).ToRouterBgpPtrOutputWithContext(ctx)
}

// RouterBgpPtrInput is an input type that accepts RouterBgpArgs, RouterBgpPtr and RouterBgpPtrOutput values.
// You can construct a concrete instance of `RouterBgpPtrInput` via:
//
// 		 RouterBgpArgs{...}
//
//  or:
//
// 		 nil
//
type RouterBgpPtrInput interface {
	pulumi.Input

	ToRouterBgpPtrOutput() RouterBgpPtrOutput
	ToRouterBgpPtrOutputWithContext(context.Context) RouterBgpPtrOutput
}

type routerBgpPtrType RouterBgpArgs

func RouterBgpPtr(v *RouterBgpArgs) RouterBgpPtrInput {
	return (*routerBgpPtrType)(v)
}

func (*routerBgpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterBgp)(nil)).Elem()
}

func (i *routerBgpPtrType) ToRouterBgpPtrOutput() RouterBgpPtrOutput {
	return i.ToRouterBgpPtrOutputWithContext(context.Background())
}

func (i *routerBgpPtrType) ToRouterBgpPtrOutputWithContext(ctx context.Context) RouterBgpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpPtrOutput)
}

type RouterBgpOutput struct{ *pulumi.OutputState }

func (RouterBgpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterBgp)(nil)).Elem()
}

func (o RouterBgpOutput) ToRouterBgpOutput() RouterBgpOutput {
	return o
}

func (o RouterBgpOutput) ToRouterBgpOutputWithContext(ctx context.Context) RouterBgpOutput {
	return o
}

func (o RouterBgpOutput) ToRouterBgpPtrOutput() RouterBgpPtrOutput {
	return o.ToRouterBgpPtrOutputWithContext(context.Background())
}

func (o RouterBgpOutput) ToRouterBgpPtrOutputWithContext(ctx context.Context) RouterBgpPtrOutput {
	return o.ApplyT(func(v RouterBgp) *RouterBgp {
		return &v
	}).(RouterBgpPtrOutput)
}

// User-specified flag to indicate which mode to use for advertisement.
// Valid values of this enum field are: DEFAULT, CUSTOM
func (o RouterBgpOutput) AdvertiseMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterBgp) *string { return v.AdvertiseMode }).(pulumi.StringPtrOutput)
}

// User-specified list of prefix groups to advertise in custom mode.
// This field can only be populated if advertiseMode is CUSTOM and
// is advertised to all peers of the router. These groups will be
// advertised in addition to any specified prefixes. Leave this field
// blank to advertise no custom groups.
// This enum field has the one valid value: ALL_SUBNETS
func (o RouterBgpOutput) AdvertisedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouterBgp) []string { return v.AdvertisedGroups }).(pulumi.StringArrayOutput)
}

// User-specified list of individual IP ranges to advertise in
// custom mode. This field can only be populated if advertiseMode
// is CUSTOM and is advertised to all peers of the router. These IP
// ranges will be advertised in addition to any specified groups.
// Leave this field blank to advertise no custom IP ranges.  Structure is documented below.
func (o RouterBgpOutput) AdvertisedIpRanges() RouterBgpAdvertisedIpRangeArrayOutput {
	return o.ApplyT(func(v RouterBgp) []RouterBgpAdvertisedIpRange { return v.AdvertisedIpRanges }).(RouterBgpAdvertisedIpRangeArrayOutput)
}

// Local BGP Autonomous System Number (ASN). Must be an RFC6996
// private ASN, either 16-bit or 32-bit. The value will be fixed for
// this router resource. All VPN tunnels that link to this router
// will have the same local ASN.
func (o RouterBgpOutput) Asn() pulumi.IntOutput {
	return o.ApplyT(func(v RouterBgp) int { return v.Asn }).(pulumi.IntOutput)
}

type RouterBgpPtrOutput struct{ *pulumi.OutputState }

func (RouterBgpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterBgp)(nil)).Elem()
}

func (o RouterBgpPtrOutput) ToRouterBgpPtrOutput() RouterBgpPtrOutput {
	return o
}

func (o RouterBgpPtrOutput) ToRouterBgpPtrOutputWithContext(ctx context.Context) RouterBgpPtrOutput {
	return o
}

func (o RouterBgpPtrOutput) Elem() RouterBgpOutput {
	return o.ApplyT(func(v *RouterBgp) RouterBgp { return *v }).(RouterBgpOutput)
}

// User-specified flag to indicate which mode to use for advertisement.
// Valid values of this enum field are: DEFAULT, CUSTOM
func (o RouterBgpPtrOutput) AdvertiseMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterBgp) *string {
		if v == nil {
			return nil
		}
		return v.AdvertiseMode
	}).(pulumi.StringPtrOutput)
}

// User-specified list of prefix groups to advertise in custom mode.
// This field can only be populated if advertiseMode is CUSTOM and
// is advertised to all peers of the router. These groups will be
// advertised in addition to any specified prefixes. Leave this field
// blank to advertise no custom groups.
// This enum field has the one valid value: ALL_SUBNETS
func (o RouterBgpPtrOutput) AdvertisedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouterBgp) []string {
		if v == nil {
			return nil
		}
		return v.AdvertisedGroups
	}).(pulumi.StringArrayOutput)
}

// User-specified list of individual IP ranges to advertise in
// custom mode. This field can only be populated if advertiseMode
// is CUSTOM and is advertised to all peers of the router. These IP
// ranges will be advertised in addition to any specified groups.
// Leave this field blank to advertise no custom IP ranges.  Structure is documented below.
func (o RouterBgpPtrOutput) AdvertisedIpRanges() RouterBgpAdvertisedIpRangeArrayOutput {
	return o.ApplyT(func(v *RouterBgp) []RouterBgpAdvertisedIpRange {
		if v == nil {
			return nil
		}
		return v.AdvertisedIpRanges
	}).(RouterBgpAdvertisedIpRangeArrayOutput)
}

// Local BGP Autonomous System Number (ASN). Must be an RFC6996
// private ASN, either 16-bit or 32-bit. The value will be fixed for
// this router resource. All VPN tunnels that link to this router
// will have the same local ASN.
func (o RouterBgpPtrOutput) Asn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouterBgp) *int {
		if v == nil {
			return nil
		}
		return &v.Asn
	}).(pulumi.IntPtrOutput)
}

type RouterBgpAdvertisedIpRange struct {
	// User-specified description for the IP range.
	Description *string `pulumi:"description"`
	// The IP range to advertise. The value must be a
	// CIDR-formatted string.
	Range string `pulumi:"range"`
}

// RouterBgpAdvertisedIpRangeInput is an input type that accepts RouterBgpAdvertisedIpRangeArgs and RouterBgpAdvertisedIpRangeOutput values.
// You can construct a concrete instance of `RouterBgpAdvertisedIpRangeInput` via:
//
// 		 RouterBgpAdvertisedIpRangeArgs{...}
//
type RouterBgpAdvertisedIpRangeInput interface {
	pulumi.Input

	ToRouterBgpAdvertisedIpRangeOutput() RouterBgpAdvertisedIpRangeOutput
	ToRouterBgpAdvertisedIpRangeOutputWithContext(context.Context) RouterBgpAdvertisedIpRangeOutput
}

type RouterBgpAdvertisedIpRangeArgs struct {
	// User-specified description for the IP range.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The IP range to advertise. The value must be a
	// CIDR-formatted string.
	Range pulumi.StringInput `pulumi:"range"`
}

func (RouterBgpAdvertisedIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterBgpAdvertisedIpRange)(nil)).Elem()
}

func (i RouterBgpAdvertisedIpRangeArgs) ToRouterBgpAdvertisedIpRangeOutput() RouterBgpAdvertisedIpRangeOutput {
	return i.ToRouterBgpAdvertisedIpRangeOutputWithContext(context.Background())
}

func (i RouterBgpAdvertisedIpRangeArgs) ToRouterBgpAdvertisedIpRangeOutputWithContext(ctx context.Context) RouterBgpAdvertisedIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpAdvertisedIpRangeOutput)
}

// RouterBgpAdvertisedIpRangeArrayInput is an input type that accepts RouterBgpAdvertisedIpRangeArray and RouterBgpAdvertisedIpRangeArrayOutput values.
// You can construct a concrete instance of `RouterBgpAdvertisedIpRangeArrayInput` via:
//
// 		 RouterBgpAdvertisedIpRangeArray{ RouterBgpAdvertisedIpRangeArgs{...} }
//
type RouterBgpAdvertisedIpRangeArrayInput interface {
	pulumi.Input

	ToRouterBgpAdvertisedIpRangeArrayOutput() RouterBgpAdvertisedIpRangeArrayOutput
	ToRouterBgpAdvertisedIpRangeArrayOutputWithContext(context.Context) RouterBgpAdvertisedIpRangeArrayOutput
}

type RouterBgpAdvertisedIpRangeArray []RouterBgpAdvertisedIpRangeInput

func (RouterBgpAdvertisedIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterBgpAdvertisedIpRange)(nil)).Elem()
}

func (i RouterBgpAdvertisedIpRangeArray) ToRouterBgpAdvertisedIpRangeArrayOutput() RouterBgpAdvertisedIpRangeArrayOutput {
	return i.ToRouterBgpAdvertisedIpRangeArrayOutputWithContext(context.Background())
}

func (i RouterBgpAdvertisedIpRangeArray) ToRouterBgpAdvertisedIpRangeArrayOutputWithContext(ctx context.Context) RouterBgpAdvertisedIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpAdvertisedIpRangeArrayOutput)
}

type RouterBgpAdvertisedIpRangeOutput struct{ *pulumi.OutputState }

func (RouterBgpAdvertisedIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterBgpAdvertisedIpRange)(nil)).Elem()
}

func (o RouterBgpAdvertisedIpRangeOutput) ToRouterBgpAdvertisedIpRangeOutput() RouterBgpAdvertisedIpRangeOutput {
	return o
}

func (o RouterBgpAdvertisedIpRangeOutput) ToRouterBgpAdvertisedIpRangeOutputWithContext(ctx context.Context) RouterBgpAdvertisedIpRangeOutput {
	return o
}

// User-specified description for the IP range.
func (o RouterBgpAdvertisedIpRangeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterBgpAdvertisedIpRange) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The IP range to advertise. The value must be a
// CIDR-formatted string.
func (o RouterBgpAdvertisedIpRangeOutput) Range() pulumi.StringOutput {
	return o.ApplyT(func(v RouterBgpAdvertisedIpRange) string { return v.Range }).(pulumi.StringOutput)
}

type RouterBgpAdvertisedIpRangeArrayOutput struct{ *pulumi.OutputState }

func (RouterBgpAdvertisedIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterBgpAdvertisedIpRange)(nil)).Elem()
}

func (o RouterBgpAdvertisedIpRangeArrayOutput) ToRouterBgpAdvertisedIpRangeArrayOutput() RouterBgpAdvertisedIpRangeArrayOutput {
	return o
}

func (o RouterBgpAdvertisedIpRangeArrayOutput) ToRouterBgpAdvertisedIpRangeArrayOutputWithContext(ctx context.Context) RouterBgpAdvertisedIpRangeArrayOutput {
	return o
}

func (o RouterBgpAdvertisedIpRangeArrayOutput) Index(i pulumi.IntInput) RouterBgpAdvertisedIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterBgpAdvertisedIpRange {
		return vs[0].([]RouterBgpAdvertisedIpRange)[vs[1].(int)]
	}).(RouterBgpAdvertisedIpRangeOutput)
}

type RouterNatLogConfig struct {
	// Indicates whether or not to export logs.
	Enable bool `pulumi:"enable"`
	// Specifies the desired filtering of logs on this NAT. Valid
	// values are: `"ERRORS_ONLY"`, `"TRANSLATIONS_ONLY"`, `"ALL"`
	Filter string `pulumi:"filter"`
}

// RouterNatLogConfigInput is an input type that accepts RouterNatLogConfigArgs and RouterNatLogConfigOutput values.
// You can construct a concrete instance of `RouterNatLogConfigInput` via:
//
// 		 RouterNatLogConfigArgs{...}
//
type RouterNatLogConfigInput interface {
	pulumi.Input

	ToRouterNatLogConfigOutput() RouterNatLogConfigOutput
	ToRouterNatLogConfigOutputWithContext(context.Context) RouterNatLogConfigOutput
}

type RouterNatLogConfigArgs struct {
	// Indicates whether or not to export logs.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// Specifies the desired filtering of logs on this NAT. Valid
	// values are: `"ERRORS_ONLY"`, `"TRANSLATIONS_ONLY"`, `"ALL"`
	Filter pulumi.StringInput `pulumi:"filter"`
}

func (RouterNatLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterNatLogConfig)(nil)).Elem()
}

func (i RouterNatLogConfigArgs) ToRouterNatLogConfigOutput() RouterNatLogConfigOutput {
	return i.ToRouterNatLogConfigOutputWithContext(context.Background())
}

func (i RouterNatLogConfigArgs) ToRouterNatLogConfigOutputWithContext(ctx context.Context) RouterNatLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatLogConfigOutput)
}

func (i RouterNatLogConfigArgs) ToRouterNatLogConfigPtrOutput() RouterNatLogConfigPtrOutput {
	return i.ToRouterNatLogConfigPtrOutputWithContext(context.Background())
}

func (i RouterNatLogConfigArgs) ToRouterNatLogConfigPtrOutputWithContext(ctx context.Context) RouterNatLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatLogConfigOutput).ToRouterNatLogConfigPtrOutputWithContext(ctx)
}

// RouterNatLogConfigPtrInput is an input type that accepts RouterNatLogConfigArgs, RouterNatLogConfigPtr and RouterNatLogConfigPtrOutput values.
// You can construct a concrete instance of `RouterNatLogConfigPtrInput` via:
//
// 		 RouterNatLogConfigArgs{...}
//
//  or:
//
// 		 nil
//
type RouterNatLogConfigPtrInput interface {
	pulumi.Input

	ToRouterNatLogConfigPtrOutput() RouterNatLogConfigPtrOutput
	ToRouterNatLogConfigPtrOutputWithContext(context.Context) RouterNatLogConfigPtrOutput
}

type routerNatLogConfigPtrType RouterNatLogConfigArgs

func RouterNatLogConfigPtr(v *RouterNatLogConfigArgs) RouterNatLogConfigPtrInput {
	return (*routerNatLogConfigPtrType)(v)
}

func (*routerNatLogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterNatLogConfig)(nil)).Elem()
}

func (i *routerNatLogConfigPtrType) ToRouterNatLogConfigPtrOutput() RouterNatLogConfigPtrOutput {
	return i.ToRouterNatLogConfigPtrOutputWithContext(context.Background())
}

func (i *routerNatLogConfigPtrType) ToRouterNatLogConfigPtrOutputWithContext(ctx context.Context) RouterNatLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatLogConfigPtrOutput)
}

type RouterNatLogConfigOutput struct{ *pulumi.OutputState }

func (RouterNatLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterNatLogConfig)(nil)).Elem()
}

func (o RouterNatLogConfigOutput) ToRouterNatLogConfigOutput() RouterNatLogConfigOutput {
	return o
}

func (o RouterNatLogConfigOutput) ToRouterNatLogConfigOutputWithContext(ctx context.Context) RouterNatLogConfigOutput {
	return o
}

func (o RouterNatLogConfigOutput) ToRouterNatLogConfigPtrOutput() RouterNatLogConfigPtrOutput {
	return o.ToRouterNatLogConfigPtrOutputWithContext(context.Background())
}

func (o RouterNatLogConfigOutput) ToRouterNatLogConfigPtrOutputWithContext(ctx context.Context) RouterNatLogConfigPtrOutput {
	return o.ApplyT(func(v RouterNatLogConfig) *RouterNatLogConfig {
		return &v
	}).(RouterNatLogConfigPtrOutput)
}

// Indicates whether or not to export logs.
func (o RouterNatLogConfigOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v RouterNatLogConfig) bool { return v.Enable }).(pulumi.BoolOutput)
}

// Specifies the desired filtering of logs on this NAT. Valid
// values are: `"ERRORS_ONLY"`, `"TRANSLATIONS_ONLY"`, `"ALL"`
func (o RouterNatLogConfigOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v RouterNatLogConfig) string { return v.Filter }).(pulumi.StringOutput)
}

type RouterNatLogConfigPtrOutput struct{ *pulumi.OutputState }

func (RouterNatLogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterNatLogConfig)(nil)).Elem()
}

func (o RouterNatLogConfigPtrOutput) ToRouterNatLogConfigPtrOutput() RouterNatLogConfigPtrOutput {
	return o
}

func (o RouterNatLogConfigPtrOutput) ToRouterNatLogConfigPtrOutputWithContext(ctx context.Context) RouterNatLogConfigPtrOutput {
	return o
}

func (o RouterNatLogConfigPtrOutput) Elem() RouterNatLogConfigOutput {
	return o.ApplyT(func(v *RouterNatLogConfig) RouterNatLogConfig { return *v }).(RouterNatLogConfigOutput)
}

// Indicates whether or not to export logs.
func (o RouterNatLogConfigPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RouterNatLogConfig) *bool {
		if v == nil {
			return nil
		}
		return &v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Specifies the desired filtering of logs on this NAT. Valid
// values are: `"ERRORS_ONLY"`, `"TRANSLATIONS_ONLY"`, `"ALL"`
func (o RouterNatLogConfigPtrOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterNatLogConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Filter
	}).(pulumi.StringPtrOutput)
}

type RouterNatSubnetwork struct {
	// Self-link of subnetwork to NAT
	Name string `pulumi:"name"`
	// List of the secondary ranges of the subnetwork that are allowed
	// to use NAT. This can be populated only if
	// `LIST_OF_SECONDARY_IP_RANGES` is one of the values in
	// sourceIpRangesToNat
	SecondaryIpRangeNames []string `pulumi:"secondaryIpRangeNames"`
	// List of options for which source IPs in the subnetwork
	// should have NAT enabled. Supported values include:
	// `ALL_IP_RANGES`, `LIST_OF_SECONDARY_IP_RANGES`,
	// `PRIMARY_IP_RANGE`.
	SourceIpRangesToNats []string `pulumi:"sourceIpRangesToNats"`
}

// RouterNatSubnetworkInput is an input type that accepts RouterNatSubnetworkArgs and RouterNatSubnetworkOutput values.
// You can construct a concrete instance of `RouterNatSubnetworkInput` via:
//
// 		 RouterNatSubnetworkArgs{...}
//
type RouterNatSubnetworkInput interface {
	pulumi.Input

	ToRouterNatSubnetworkOutput() RouterNatSubnetworkOutput
	ToRouterNatSubnetworkOutputWithContext(context.Context) RouterNatSubnetworkOutput
}

type RouterNatSubnetworkArgs struct {
	// Self-link of subnetwork to NAT
	Name pulumi.StringInput `pulumi:"name"`
	// List of the secondary ranges of the subnetwork that are allowed
	// to use NAT. This can be populated only if
	// `LIST_OF_SECONDARY_IP_RANGES` is one of the values in
	// sourceIpRangesToNat
	SecondaryIpRangeNames pulumi.StringArrayInput `pulumi:"secondaryIpRangeNames"`
	// List of options for which source IPs in the subnetwork
	// should have NAT enabled. Supported values include:
	// `ALL_IP_RANGES`, `LIST_OF_SECONDARY_IP_RANGES`,
	// `PRIMARY_IP_RANGE`.
	SourceIpRangesToNats pulumi.StringArrayInput `pulumi:"sourceIpRangesToNats"`
}

func (RouterNatSubnetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterNatSubnetwork)(nil)).Elem()
}

func (i RouterNatSubnetworkArgs) ToRouterNatSubnetworkOutput() RouterNatSubnetworkOutput {
	return i.ToRouterNatSubnetworkOutputWithContext(context.Background())
}

func (i RouterNatSubnetworkArgs) ToRouterNatSubnetworkOutputWithContext(ctx context.Context) RouterNatSubnetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatSubnetworkOutput)
}

// RouterNatSubnetworkArrayInput is an input type that accepts RouterNatSubnetworkArray and RouterNatSubnetworkArrayOutput values.
// You can construct a concrete instance of `RouterNatSubnetworkArrayInput` via:
//
// 		 RouterNatSubnetworkArray{ RouterNatSubnetworkArgs{...} }
//
type RouterNatSubnetworkArrayInput interface {
	pulumi.Input

	ToRouterNatSubnetworkArrayOutput() RouterNatSubnetworkArrayOutput
	ToRouterNatSubnetworkArrayOutputWithContext(context.Context) RouterNatSubnetworkArrayOutput
}

type RouterNatSubnetworkArray []RouterNatSubnetworkInput

func (RouterNatSubnetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterNatSubnetwork)(nil)).Elem()
}

func (i RouterNatSubnetworkArray) ToRouterNatSubnetworkArrayOutput() RouterNatSubnetworkArrayOutput {
	return i.ToRouterNatSubnetworkArrayOutputWithContext(context.Background())
}

func (i RouterNatSubnetworkArray) ToRouterNatSubnetworkArrayOutputWithContext(ctx context.Context) RouterNatSubnetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatSubnetworkArrayOutput)
}

type RouterNatSubnetworkOutput struct{ *pulumi.OutputState }

func (RouterNatSubnetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterNatSubnetwork)(nil)).Elem()
}

func (o RouterNatSubnetworkOutput) ToRouterNatSubnetworkOutput() RouterNatSubnetworkOutput {
	return o
}

func (o RouterNatSubnetworkOutput) ToRouterNatSubnetworkOutputWithContext(ctx context.Context) RouterNatSubnetworkOutput {
	return o
}

// Self-link of subnetwork to NAT
func (o RouterNatSubnetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RouterNatSubnetwork) string { return v.Name }).(pulumi.StringOutput)
}

// List of the secondary ranges of the subnetwork that are allowed
// to use NAT. This can be populated only if
// `LIST_OF_SECONDARY_IP_RANGES` is one of the values in
// sourceIpRangesToNat
func (o RouterNatSubnetworkOutput) SecondaryIpRangeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouterNatSubnetwork) []string { return v.SecondaryIpRangeNames }).(pulumi.StringArrayOutput)
}

// List of options for which source IPs in the subnetwork
// should have NAT enabled. Supported values include:
// `ALL_IP_RANGES`, `LIST_OF_SECONDARY_IP_RANGES`,
// `PRIMARY_IP_RANGE`.
func (o RouterNatSubnetworkOutput) SourceIpRangesToNats() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouterNatSubnetwork) []string { return v.SourceIpRangesToNats }).(pulumi.StringArrayOutput)
}

type RouterNatSubnetworkArrayOutput struct{ *pulumi.OutputState }

func (RouterNatSubnetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterNatSubnetwork)(nil)).Elem()
}

func (o RouterNatSubnetworkArrayOutput) ToRouterNatSubnetworkArrayOutput() RouterNatSubnetworkArrayOutput {
	return o
}

func (o RouterNatSubnetworkArrayOutput) ToRouterNatSubnetworkArrayOutputWithContext(ctx context.Context) RouterNatSubnetworkArrayOutput {
	return o
}

func (o RouterNatSubnetworkArrayOutput) Index(i pulumi.IntInput) RouterNatSubnetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterNatSubnetwork {
		return vs[0].([]RouterNatSubnetwork)[vs[1].(int)]
	}).(RouterNatSubnetworkOutput)
}

type RouterPeerAdvertisedIpRange struct {
	// User-specified description for the IP range.
	Description *string `pulumi:"description"`
	// The IP range to advertise. The value must be a
	// CIDR-formatted string.
	Range string `pulumi:"range"`
}

// RouterPeerAdvertisedIpRangeInput is an input type that accepts RouterPeerAdvertisedIpRangeArgs and RouterPeerAdvertisedIpRangeOutput values.
// You can construct a concrete instance of `RouterPeerAdvertisedIpRangeInput` via:
//
// 		 RouterPeerAdvertisedIpRangeArgs{...}
//
type RouterPeerAdvertisedIpRangeInput interface {
	pulumi.Input

	ToRouterPeerAdvertisedIpRangeOutput() RouterPeerAdvertisedIpRangeOutput
	ToRouterPeerAdvertisedIpRangeOutputWithContext(context.Context) RouterPeerAdvertisedIpRangeOutput
}

type RouterPeerAdvertisedIpRangeArgs struct {
	// User-specified description for the IP range.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The IP range to advertise. The value must be a
	// CIDR-formatted string.
	Range pulumi.StringInput `pulumi:"range"`
}

func (RouterPeerAdvertisedIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterPeerAdvertisedIpRange)(nil)).Elem()
}

func (i RouterPeerAdvertisedIpRangeArgs) ToRouterPeerAdvertisedIpRangeOutput() RouterPeerAdvertisedIpRangeOutput {
	return i.ToRouterPeerAdvertisedIpRangeOutputWithContext(context.Background())
}

func (i RouterPeerAdvertisedIpRangeArgs) ToRouterPeerAdvertisedIpRangeOutputWithContext(ctx context.Context) RouterPeerAdvertisedIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterPeerAdvertisedIpRangeOutput)
}

// RouterPeerAdvertisedIpRangeArrayInput is an input type that accepts RouterPeerAdvertisedIpRangeArray and RouterPeerAdvertisedIpRangeArrayOutput values.
// You can construct a concrete instance of `RouterPeerAdvertisedIpRangeArrayInput` via:
//
// 		 RouterPeerAdvertisedIpRangeArray{ RouterPeerAdvertisedIpRangeArgs{...} }
//
type RouterPeerAdvertisedIpRangeArrayInput interface {
	pulumi.Input

	ToRouterPeerAdvertisedIpRangeArrayOutput() RouterPeerAdvertisedIpRangeArrayOutput
	ToRouterPeerAdvertisedIpRangeArrayOutputWithContext(context.Context) RouterPeerAdvertisedIpRangeArrayOutput
}

type RouterPeerAdvertisedIpRangeArray []RouterPeerAdvertisedIpRangeInput

func (RouterPeerAdvertisedIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterPeerAdvertisedIpRange)(nil)).Elem()
}

func (i RouterPeerAdvertisedIpRangeArray) ToRouterPeerAdvertisedIpRangeArrayOutput() RouterPeerAdvertisedIpRangeArrayOutput {
	return i.ToRouterPeerAdvertisedIpRangeArrayOutputWithContext(context.Background())
}

func (i RouterPeerAdvertisedIpRangeArray) ToRouterPeerAdvertisedIpRangeArrayOutputWithContext(ctx context.Context) RouterPeerAdvertisedIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterPeerAdvertisedIpRangeArrayOutput)
}

type RouterPeerAdvertisedIpRangeOutput struct{ *pulumi.OutputState }

func (RouterPeerAdvertisedIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterPeerAdvertisedIpRange)(nil)).Elem()
}

func (o RouterPeerAdvertisedIpRangeOutput) ToRouterPeerAdvertisedIpRangeOutput() RouterPeerAdvertisedIpRangeOutput {
	return o
}

func (o RouterPeerAdvertisedIpRangeOutput) ToRouterPeerAdvertisedIpRangeOutputWithContext(ctx context.Context) RouterPeerAdvertisedIpRangeOutput {
	return o
}

// User-specified description for the IP range.
func (o RouterPeerAdvertisedIpRangeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterPeerAdvertisedIpRange) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The IP range to advertise. The value must be a
// CIDR-formatted string.
func (o RouterPeerAdvertisedIpRangeOutput) Range() pulumi.StringOutput {
	return o.ApplyT(func(v RouterPeerAdvertisedIpRange) string { return v.Range }).(pulumi.StringOutput)
}

type RouterPeerAdvertisedIpRangeArrayOutput struct{ *pulumi.OutputState }

func (RouterPeerAdvertisedIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterPeerAdvertisedIpRange)(nil)).Elem()
}

func (o RouterPeerAdvertisedIpRangeArrayOutput) ToRouterPeerAdvertisedIpRangeArrayOutput() RouterPeerAdvertisedIpRangeArrayOutput {
	return o
}

func (o RouterPeerAdvertisedIpRangeArrayOutput) ToRouterPeerAdvertisedIpRangeArrayOutputWithContext(ctx context.Context) RouterPeerAdvertisedIpRangeArrayOutput {
	return o
}

func (o RouterPeerAdvertisedIpRangeArrayOutput) Index(i pulumi.IntInput) RouterPeerAdvertisedIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterPeerAdvertisedIpRange {
		return vs[0].([]RouterPeerAdvertisedIpRange)[vs[1].(int)]
	}).(RouterPeerAdvertisedIpRangeOutput)
}

type SecurityPolicyRule struct {
	// Action to take when `match` matches the request. Valid values:
	// * "allow" : allow access to target
	// * "deny(status)" : deny access to target, returns the  HTTP response code specified (valid values are 403, 404 and 502)
	Action string `pulumi:"action"`
	// An optional description of this rule. Max size is 64.
	Description *string `pulumi:"description"`
	// A match condition that incoming traffic is evaluated against.
	// If it evaluates to true, the corresponding `action` is enforced. Structure is documented below.
	Match SecurityPolicyRuleMatch `pulumi:"match"`
	// When set to true, the `action` specified above is not enforced.
	// Stackdriver logs for requests that trigger a preview action are annotated as such.
	Preview *bool `pulumi:"preview"`
	// An unique positive integer indicating the priority of evaluation for a rule.
	// Rules are evaluated from highest priority (lowest numerically) to lowest priority (highest numerically) in order.
	Priority int `pulumi:"priority"`
}

// SecurityPolicyRuleInput is an input type that accepts SecurityPolicyRuleArgs and SecurityPolicyRuleOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleInput` via:
//
// 		 SecurityPolicyRuleArgs{...}
//
type SecurityPolicyRuleInput interface {
	pulumi.Input

	ToSecurityPolicyRuleOutput() SecurityPolicyRuleOutput
	ToSecurityPolicyRuleOutputWithContext(context.Context) SecurityPolicyRuleOutput
}

type SecurityPolicyRuleArgs struct {
	// Action to take when `match` matches the request. Valid values:
	// * "allow" : allow access to target
	// * "deny(status)" : deny access to target, returns the  HTTP response code specified (valid values are 403, 404 and 502)
	Action pulumi.StringInput `pulumi:"action"`
	// An optional description of this rule. Max size is 64.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A match condition that incoming traffic is evaluated against.
	// If it evaluates to true, the corresponding `action` is enforced. Structure is documented below.
	Match SecurityPolicyRuleMatchInput `pulumi:"match"`
	// When set to true, the `action` specified above is not enforced.
	// Stackdriver logs for requests that trigger a preview action are annotated as such.
	Preview pulumi.BoolPtrInput `pulumi:"preview"`
	// An unique positive integer indicating the priority of evaluation for a rule.
	// Rules are evaluated from highest priority (lowest numerically) to lowest priority (highest numerically) in order.
	Priority pulumi.IntInput `pulumi:"priority"`
}

func (SecurityPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRule)(nil)).Elem()
}

func (i SecurityPolicyRuleArgs) ToSecurityPolicyRuleOutput() SecurityPolicyRuleOutput {
	return i.ToSecurityPolicyRuleOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleArgs) ToSecurityPolicyRuleOutputWithContext(ctx context.Context) SecurityPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleOutput)
}

// SecurityPolicyRuleArrayInput is an input type that accepts SecurityPolicyRuleArray and SecurityPolicyRuleArrayOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleArrayInput` via:
//
// 		 SecurityPolicyRuleArray{ SecurityPolicyRuleArgs{...} }
//
type SecurityPolicyRuleArrayInput interface {
	pulumi.Input

	ToSecurityPolicyRuleArrayOutput() SecurityPolicyRuleArrayOutput
	ToSecurityPolicyRuleArrayOutputWithContext(context.Context) SecurityPolicyRuleArrayOutput
}

type SecurityPolicyRuleArray []SecurityPolicyRuleInput

func (SecurityPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityPolicyRule)(nil)).Elem()
}

func (i SecurityPolicyRuleArray) ToSecurityPolicyRuleArrayOutput() SecurityPolicyRuleArrayOutput {
	return i.ToSecurityPolicyRuleArrayOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleArray) ToSecurityPolicyRuleArrayOutputWithContext(ctx context.Context) SecurityPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleArrayOutput)
}

type SecurityPolicyRuleOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRule)(nil)).Elem()
}

func (o SecurityPolicyRuleOutput) ToSecurityPolicyRuleOutput() SecurityPolicyRuleOutput {
	return o
}

func (o SecurityPolicyRuleOutput) ToSecurityPolicyRuleOutputWithContext(ctx context.Context) SecurityPolicyRuleOutput {
	return o
}

// Action to take when `match` matches the request. Valid values:
// * "allow" : allow access to target
// * "deny(status)" : deny access to target, returns the  HTTP response code specified (valid values are 403, 404 and 502)
func (o SecurityPolicyRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPolicyRule) string { return v.Action }).(pulumi.StringOutput)
}

// An optional description of this rule. Max size is 64.
func (o SecurityPolicyRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A match condition that incoming traffic is evaluated against.
// If it evaluates to true, the corresponding `action` is enforced. Structure is documented below.
func (o SecurityPolicyRuleOutput) Match() SecurityPolicyRuleMatchOutput {
	return o.ApplyT(func(v SecurityPolicyRule) SecurityPolicyRuleMatch { return v.Match }).(SecurityPolicyRuleMatchOutput)
}

// When set to true, the `action` specified above is not enforced.
// Stackdriver logs for requests that trigger a preview action are annotated as such.
func (o SecurityPolicyRuleOutput) Preview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRule) *bool { return v.Preview }).(pulumi.BoolPtrOutput)
}

// An unique positive integer indicating the priority of evaluation for a rule.
// Rules are evaluated from highest priority (lowest numerically) to lowest priority (highest numerically) in order.
func (o SecurityPolicyRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v SecurityPolicyRule) int { return v.Priority }).(pulumi.IntOutput)
}

type SecurityPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityPolicyRule)(nil)).Elem()
}

func (o SecurityPolicyRuleArrayOutput) ToSecurityPolicyRuleArrayOutput() SecurityPolicyRuleArrayOutput {
	return o
}

func (o SecurityPolicyRuleArrayOutput) ToSecurityPolicyRuleArrayOutputWithContext(ctx context.Context) SecurityPolicyRuleArrayOutput {
	return o
}

func (o SecurityPolicyRuleArrayOutput) Index(i pulumi.IntInput) SecurityPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityPolicyRule {
		return vs[0].([]SecurityPolicyRule)[vs[1].(int)]
	}).(SecurityPolicyRuleOutput)
}

type SecurityPolicyRuleMatch struct {
	// The configuration options available when specifying `versionedExpr`.
	// This field must be specified if `versionedExpr` is specified and cannot be specified if `versionedExpr` is not specified.
	// Structure is documented below.
	Config *SecurityPolicyRuleMatchConfig `pulumi:"config"`
	// User defined CEVAL expression. A CEVAL expression is used to specify match criteria
	// such as origin.ip, source.region_code and contents in the request header.
	// Structure is documented below.
	Expr *SecurityPolicyRuleMatchExpr `pulumi:"expr"`
	// Predefined rule expression. If this field is specified, `config` must also be specified.
	// Available options:
	// * SRC_IPS_V1: Must specify the corresponding `srcIpRanges` field in `config`.
	VersionedExpr *string `pulumi:"versionedExpr"`
}

// SecurityPolicyRuleMatchInput is an input type that accepts SecurityPolicyRuleMatchArgs and SecurityPolicyRuleMatchOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleMatchInput` via:
//
// 		 SecurityPolicyRuleMatchArgs{...}
//
type SecurityPolicyRuleMatchInput interface {
	pulumi.Input

	ToSecurityPolicyRuleMatchOutput() SecurityPolicyRuleMatchOutput
	ToSecurityPolicyRuleMatchOutputWithContext(context.Context) SecurityPolicyRuleMatchOutput
}

type SecurityPolicyRuleMatchArgs struct {
	// The configuration options available when specifying `versionedExpr`.
	// This field must be specified if `versionedExpr` is specified and cannot be specified if `versionedExpr` is not specified.
	// Structure is documented below.
	Config SecurityPolicyRuleMatchConfigPtrInput `pulumi:"config"`
	// User defined CEVAL expression. A CEVAL expression is used to specify match criteria
	// such as origin.ip, source.region_code and contents in the request header.
	// Structure is documented below.
	Expr SecurityPolicyRuleMatchExprPtrInput `pulumi:"expr"`
	// Predefined rule expression. If this field is specified, `config` must also be specified.
	// Available options:
	// * SRC_IPS_V1: Must specify the corresponding `srcIpRanges` field in `config`.
	VersionedExpr pulumi.StringPtrInput `pulumi:"versionedExpr"`
}

func (SecurityPolicyRuleMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRuleMatch)(nil)).Elem()
}

func (i SecurityPolicyRuleMatchArgs) ToSecurityPolicyRuleMatchOutput() SecurityPolicyRuleMatchOutput {
	return i.ToSecurityPolicyRuleMatchOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleMatchArgs) ToSecurityPolicyRuleMatchOutputWithContext(ctx context.Context) SecurityPolicyRuleMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleMatchOutput)
}

type SecurityPolicyRuleMatchOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRuleMatch)(nil)).Elem()
}

func (o SecurityPolicyRuleMatchOutput) ToSecurityPolicyRuleMatchOutput() SecurityPolicyRuleMatchOutput {
	return o
}

func (o SecurityPolicyRuleMatchOutput) ToSecurityPolicyRuleMatchOutputWithContext(ctx context.Context) SecurityPolicyRuleMatchOutput {
	return o
}

// The configuration options available when specifying `versionedExpr`.
// This field must be specified if `versionedExpr` is specified and cannot be specified if `versionedExpr` is not specified.
// Structure is documented below.
func (o SecurityPolicyRuleMatchOutput) Config() SecurityPolicyRuleMatchConfigPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatch) *SecurityPolicyRuleMatchConfig { return v.Config }).(SecurityPolicyRuleMatchConfigPtrOutput)
}

// User defined CEVAL expression. A CEVAL expression is used to specify match criteria
// such as origin.ip, source.region_code and contents in the request header.
// Structure is documented below.
func (o SecurityPolicyRuleMatchOutput) Expr() SecurityPolicyRuleMatchExprPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatch) *SecurityPolicyRuleMatchExpr { return v.Expr }).(SecurityPolicyRuleMatchExprPtrOutput)
}

// Predefined rule expression. If this field is specified, `config` must also be specified.
// Available options:
// * SRC_IPS_V1: Must specify the corresponding `srcIpRanges` field in `config`.
func (o SecurityPolicyRuleMatchOutput) VersionedExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatch) *string { return v.VersionedExpr }).(pulumi.StringPtrOutput)
}

type SecurityPolicyRuleMatchConfig struct {
	// Set of IP addresses or ranges (IPV4 or IPV6) in CIDR notation
	// to match against inbound traffic. There is a limit of 5 IP ranges per rule. A value of '\*' matches all IPs
	// (can be used to override the default behavior).
	SrcIpRanges []string `pulumi:"srcIpRanges"`
}

// SecurityPolicyRuleMatchConfigInput is an input type that accepts SecurityPolicyRuleMatchConfigArgs and SecurityPolicyRuleMatchConfigOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleMatchConfigInput` via:
//
// 		 SecurityPolicyRuleMatchConfigArgs{...}
//
type SecurityPolicyRuleMatchConfigInput interface {
	pulumi.Input

	ToSecurityPolicyRuleMatchConfigOutput() SecurityPolicyRuleMatchConfigOutput
	ToSecurityPolicyRuleMatchConfigOutputWithContext(context.Context) SecurityPolicyRuleMatchConfigOutput
}

type SecurityPolicyRuleMatchConfigArgs struct {
	// Set of IP addresses or ranges (IPV4 or IPV6) in CIDR notation
	// to match against inbound traffic. There is a limit of 5 IP ranges per rule. A value of '\*' matches all IPs
	// (can be used to override the default behavior).
	SrcIpRanges pulumi.StringArrayInput `pulumi:"srcIpRanges"`
}

func (SecurityPolicyRuleMatchConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRuleMatchConfig)(nil)).Elem()
}

func (i SecurityPolicyRuleMatchConfigArgs) ToSecurityPolicyRuleMatchConfigOutput() SecurityPolicyRuleMatchConfigOutput {
	return i.ToSecurityPolicyRuleMatchConfigOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleMatchConfigArgs) ToSecurityPolicyRuleMatchConfigOutputWithContext(ctx context.Context) SecurityPolicyRuleMatchConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleMatchConfigOutput)
}

func (i SecurityPolicyRuleMatchConfigArgs) ToSecurityPolicyRuleMatchConfigPtrOutput() SecurityPolicyRuleMatchConfigPtrOutput {
	return i.ToSecurityPolicyRuleMatchConfigPtrOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleMatchConfigArgs) ToSecurityPolicyRuleMatchConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyRuleMatchConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleMatchConfigOutput).ToSecurityPolicyRuleMatchConfigPtrOutputWithContext(ctx)
}

// SecurityPolicyRuleMatchConfigPtrInput is an input type that accepts SecurityPolicyRuleMatchConfigArgs, SecurityPolicyRuleMatchConfigPtr and SecurityPolicyRuleMatchConfigPtrOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleMatchConfigPtrInput` via:
//
// 		 SecurityPolicyRuleMatchConfigArgs{...}
//
//  or:
//
// 		 nil
//
type SecurityPolicyRuleMatchConfigPtrInput interface {
	pulumi.Input

	ToSecurityPolicyRuleMatchConfigPtrOutput() SecurityPolicyRuleMatchConfigPtrOutput
	ToSecurityPolicyRuleMatchConfigPtrOutputWithContext(context.Context) SecurityPolicyRuleMatchConfigPtrOutput
}

type securityPolicyRuleMatchConfigPtrType SecurityPolicyRuleMatchConfigArgs

func SecurityPolicyRuleMatchConfigPtr(v *SecurityPolicyRuleMatchConfigArgs) SecurityPolicyRuleMatchConfigPtrInput {
	return (*securityPolicyRuleMatchConfigPtrType)(v)
}

func (*securityPolicyRuleMatchConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyRuleMatchConfig)(nil)).Elem()
}

func (i *securityPolicyRuleMatchConfigPtrType) ToSecurityPolicyRuleMatchConfigPtrOutput() SecurityPolicyRuleMatchConfigPtrOutput {
	return i.ToSecurityPolicyRuleMatchConfigPtrOutputWithContext(context.Background())
}

func (i *securityPolicyRuleMatchConfigPtrType) ToSecurityPolicyRuleMatchConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyRuleMatchConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleMatchConfigPtrOutput)
}

type SecurityPolicyRuleMatchConfigOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleMatchConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRuleMatchConfig)(nil)).Elem()
}

func (o SecurityPolicyRuleMatchConfigOutput) ToSecurityPolicyRuleMatchConfigOutput() SecurityPolicyRuleMatchConfigOutput {
	return o
}

func (o SecurityPolicyRuleMatchConfigOutput) ToSecurityPolicyRuleMatchConfigOutputWithContext(ctx context.Context) SecurityPolicyRuleMatchConfigOutput {
	return o
}

func (o SecurityPolicyRuleMatchConfigOutput) ToSecurityPolicyRuleMatchConfigPtrOutput() SecurityPolicyRuleMatchConfigPtrOutput {
	return o.ToSecurityPolicyRuleMatchConfigPtrOutputWithContext(context.Background())
}

func (o SecurityPolicyRuleMatchConfigOutput) ToSecurityPolicyRuleMatchConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyRuleMatchConfigPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatchConfig) *SecurityPolicyRuleMatchConfig {
		return &v
	}).(SecurityPolicyRuleMatchConfigPtrOutput)
}

// Set of IP addresses or ranges (IPV4 or IPV6) in CIDR notation
// to match against inbound traffic. There is a limit of 5 IP ranges per rule. A value of '\*' matches all IPs
// (can be used to override the default behavior).
func (o SecurityPolicyRuleMatchConfigOutput) SrcIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatchConfig) []string { return v.SrcIpRanges }).(pulumi.StringArrayOutput)
}

type SecurityPolicyRuleMatchConfigPtrOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleMatchConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyRuleMatchConfig)(nil)).Elem()
}

func (o SecurityPolicyRuleMatchConfigPtrOutput) ToSecurityPolicyRuleMatchConfigPtrOutput() SecurityPolicyRuleMatchConfigPtrOutput {
	return o
}

func (o SecurityPolicyRuleMatchConfigPtrOutput) ToSecurityPolicyRuleMatchConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyRuleMatchConfigPtrOutput {
	return o
}

func (o SecurityPolicyRuleMatchConfigPtrOutput) Elem() SecurityPolicyRuleMatchConfigOutput {
	return o.ApplyT(func(v *SecurityPolicyRuleMatchConfig) SecurityPolicyRuleMatchConfig { return *v }).(SecurityPolicyRuleMatchConfigOutput)
}

// Set of IP addresses or ranges (IPV4 or IPV6) in CIDR notation
// to match against inbound traffic. There is a limit of 5 IP ranges per rule. A value of '\*' matches all IPs
// (can be used to override the default behavior).
func (o SecurityPolicyRuleMatchConfigPtrOutput) SrcIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityPolicyRuleMatchConfig) []string {
		if v == nil {
			return nil
		}
		return v.SrcIpRanges
	}).(pulumi.StringArrayOutput)
}

type SecurityPolicyRuleMatchExpr struct {
	// Textual representation of an expression in Common Expression Language syntax.
	// The application context of the containing message determines which well-known feature set of CEL is supported.
	Expression string `pulumi:"expression"`
}

// SecurityPolicyRuleMatchExprInput is an input type that accepts SecurityPolicyRuleMatchExprArgs and SecurityPolicyRuleMatchExprOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleMatchExprInput` via:
//
// 		 SecurityPolicyRuleMatchExprArgs{...}
//
type SecurityPolicyRuleMatchExprInput interface {
	pulumi.Input

	ToSecurityPolicyRuleMatchExprOutput() SecurityPolicyRuleMatchExprOutput
	ToSecurityPolicyRuleMatchExprOutputWithContext(context.Context) SecurityPolicyRuleMatchExprOutput
}

type SecurityPolicyRuleMatchExprArgs struct {
	// Textual representation of an expression in Common Expression Language syntax.
	// The application context of the containing message determines which well-known feature set of CEL is supported.
	Expression pulumi.StringInput `pulumi:"expression"`
}

func (SecurityPolicyRuleMatchExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRuleMatchExpr)(nil)).Elem()
}

func (i SecurityPolicyRuleMatchExprArgs) ToSecurityPolicyRuleMatchExprOutput() SecurityPolicyRuleMatchExprOutput {
	return i.ToSecurityPolicyRuleMatchExprOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleMatchExprArgs) ToSecurityPolicyRuleMatchExprOutputWithContext(ctx context.Context) SecurityPolicyRuleMatchExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleMatchExprOutput)
}

func (i SecurityPolicyRuleMatchExprArgs) ToSecurityPolicyRuleMatchExprPtrOutput() SecurityPolicyRuleMatchExprPtrOutput {
	return i.ToSecurityPolicyRuleMatchExprPtrOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleMatchExprArgs) ToSecurityPolicyRuleMatchExprPtrOutputWithContext(ctx context.Context) SecurityPolicyRuleMatchExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleMatchExprOutput).ToSecurityPolicyRuleMatchExprPtrOutputWithContext(ctx)
}

// SecurityPolicyRuleMatchExprPtrInput is an input type that accepts SecurityPolicyRuleMatchExprArgs, SecurityPolicyRuleMatchExprPtr and SecurityPolicyRuleMatchExprPtrOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleMatchExprPtrInput` via:
//
// 		 SecurityPolicyRuleMatchExprArgs{...}
//
//  or:
//
// 		 nil
//
type SecurityPolicyRuleMatchExprPtrInput interface {
	pulumi.Input

	ToSecurityPolicyRuleMatchExprPtrOutput() SecurityPolicyRuleMatchExprPtrOutput
	ToSecurityPolicyRuleMatchExprPtrOutputWithContext(context.Context) SecurityPolicyRuleMatchExprPtrOutput
}

type securityPolicyRuleMatchExprPtrType SecurityPolicyRuleMatchExprArgs

func SecurityPolicyRuleMatchExprPtr(v *SecurityPolicyRuleMatchExprArgs) SecurityPolicyRuleMatchExprPtrInput {
	return (*securityPolicyRuleMatchExprPtrType)(v)
}

func (*securityPolicyRuleMatchExprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyRuleMatchExpr)(nil)).Elem()
}

func (i *securityPolicyRuleMatchExprPtrType) ToSecurityPolicyRuleMatchExprPtrOutput() SecurityPolicyRuleMatchExprPtrOutput {
	return i.ToSecurityPolicyRuleMatchExprPtrOutputWithContext(context.Background())
}

func (i *securityPolicyRuleMatchExprPtrType) ToSecurityPolicyRuleMatchExprPtrOutputWithContext(ctx context.Context) SecurityPolicyRuleMatchExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleMatchExprPtrOutput)
}

type SecurityPolicyRuleMatchExprOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleMatchExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRuleMatchExpr)(nil)).Elem()
}

func (o SecurityPolicyRuleMatchExprOutput) ToSecurityPolicyRuleMatchExprOutput() SecurityPolicyRuleMatchExprOutput {
	return o
}

func (o SecurityPolicyRuleMatchExprOutput) ToSecurityPolicyRuleMatchExprOutputWithContext(ctx context.Context) SecurityPolicyRuleMatchExprOutput {
	return o
}

func (o SecurityPolicyRuleMatchExprOutput) ToSecurityPolicyRuleMatchExprPtrOutput() SecurityPolicyRuleMatchExprPtrOutput {
	return o.ToSecurityPolicyRuleMatchExprPtrOutputWithContext(context.Background())
}

func (o SecurityPolicyRuleMatchExprOutput) ToSecurityPolicyRuleMatchExprPtrOutputWithContext(ctx context.Context) SecurityPolicyRuleMatchExprPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatchExpr) *SecurityPolicyRuleMatchExpr {
		return &v
	}).(SecurityPolicyRuleMatchExprPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
// The application context of the containing message determines which well-known feature set of CEL is supported.
func (o SecurityPolicyRuleMatchExprOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatchExpr) string { return v.Expression }).(pulumi.StringOutput)
}

type SecurityPolicyRuleMatchExprPtrOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleMatchExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyRuleMatchExpr)(nil)).Elem()
}

func (o SecurityPolicyRuleMatchExprPtrOutput) ToSecurityPolicyRuleMatchExprPtrOutput() SecurityPolicyRuleMatchExprPtrOutput {
	return o
}

func (o SecurityPolicyRuleMatchExprPtrOutput) ToSecurityPolicyRuleMatchExprPtrOutputWithContext(ctx context.Context) SecurityPolicyRuleMatchExprPtrOutput {
	return o
}

func (o SecurityPolicyRuleMatchExprPtrOutput) Elem() SecurityPolicyRuleMatchExprOutput {
	return o.ApplyT(func(v *SecurityPolicyRuleMatchExpr) SecurityPolicyRuleMatchExpr { return *v }).(SecurityPolicyRuleMatchExprOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
// The application context of the containing message determines which well-known feature set of CEL is supported.
func (o SecurityPolicyRuleMatchExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyRuleMatchExpr) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

type SecurityScanConfigAuthentication struct {
	// Describes authentication configuration that uses a custom account.  Structure is documented below.
	CustomAccount *SecurityScanConfigAuthenticationCustomAccount `pulumi:"customAccount"`
	// Describes authentication configuration that uses a Google account.  Structure is documented below.
	GoogleAccount *SecurityScanConfigAuthenticationGoogleAccount `pulumi:"googleAccount"`
}

// SecurityScanConfigAuthenticationInput is an input type that accepts SecurityScanConfigAuthenticationArgs and SecurityScanConfigAuthenticationOutput values.
// You can construct a concrete instance of `SecurityScanConfigAuthenticationInput` via:
//
// 		 SecurityScanConfigAuthenticationArgs{...}
//
type SecurityScanConfigAuthenticationInput interface {
	pulumi.Input

	ToSecurityScanConfigAuthenticationOutput() SecurityScanConfigAuthenticationOutput
	ToSecurityScanConfigAuthenticationOutputWithContext(context.Context) SecurityScanConfigAuthenticationOutput
}

type SecurityScanConfigAuthenticationArgs struct {
	// Describes authentication configuration that uses a custom account.  Structure is documented below.
	CustomAccount SecurityScanConfigAuthenticationCustomAccountPtrInput `pulumi:"customAccount"`
	// Describes authentication configuration that uses a Google account.  Structure is documented below.
	GoogleAccount SecurityScanConfigAuthenticationGoogleAccountPtrInput `pulumi:"googleAccount"`
}

func (SecurityScanConfigAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityScanConfigAuthentication)(nil)).Elem()
}

func (i SecurityScanConfigAuthenticationArgs) ToSecurityScanConfigAuthenticationOutput() SecurityScanConfigAuthenticationOutput {
	return i.ToSecurityScanConfigAuthenticationOutputWithContext(context.Background())
}

func (i SecurityScanConfigAuthenticationArgs) ToSecurityScanConfigAuthenticationOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityScanConfigAuthenticationOutput)
}

func (i SecurityScanConfigAuthenticationArgs) ToSecurityScanConfigAuthenticationPtrOutput() SecurityScanConfigAuthenticationPtrOutput {
	return i.ToSecurityScanConfigAuthenticationPtrOutputWithContext(context.Background())
}

func (i SecurityScanConfigAuthenticationArgs) ToSecurityScanConfigAuthenticationPtrOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityScanConfigAuthenticationOutput).ToSecurityScanConfigAuthenticationPtrOutputWithContext(ctx)
}

// SecurityScanConfigAuthenticationPtrInput is an input type that accepts SecurityScanConfigAuthenticationArgs, SecurityScanConfigAuthenticationPtr and SecurityScanConfigAuthenticationPtrOutput values.
// You can construct a concrete instance of `SecurityScanConfigAuthenticationPtrInput` via:
//
// 		 SecurityScanConfigAuthenticationArgs{...}
//
//  or:
//
// 		 nil
//
type SecurityScanConfigAuthenticationPtrInput interface {
	pulumi.Input

	ToSecurityScanConfigAuthenticationPtrOutput() SecurityScanConfigAuthenticationPtrOutput
	ToSecurityScanConfigAuthenticationPtrOutputWithContext(context.Context) SecurityScanConfigAuthenticationPtrOutput
}

type securityScanConfigAuthenticationPtrType SecurityScanConfigAuthenticationArgs

func SecurityScanConfigAuthenticationPtr(v *SecurityScanConfigAuthenticationArgs) SecurityScanConfigAuthenticationPtrInput {
	return (*securityScanConfigAuthenticationPtrType)(v)
}

func (*securityScanConfigAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityScanConfigAuthentication)(nil)).Elem()
}

func (i *securityScanConfigAuthenticationPtrType) ToSecurityScanConfigAuthenticationPtrOutput() SecurityScanConfigAuthenticationPtrOutput {
	return i.ToSecurityScanConfigAuthenticationPtrOutputWithContext(context.Background())
}

func (i *securityScanConfigAuthenticationPtrType) ToSecurityScanConfigAuthenticationPtrOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityScanConfigAuthenticationPtrOutput)
}

type SecurityScanConfigAuthenticationOutput struct{ *pulumi.OutputState }

func (SecurityScanConfigAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityScanConfigAuthentication)(nil)).Elem()
}

func (o SecurityScanConfigAuthenticationOutput) ToSecurityScanConfigAuthenticationOutput() SecurityScanConfigAuthenticationOutput {
	return o
}

func (o SecurityScanConfigAuthenticationOutput) ToSecurityScanConfigAuthenticationOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationOutput {
	return o
}

func (o SecurityScanConfigAuthenticationOutput) ToSecurityScanConfigAuthenticationPtrOutput() SecurityScanConfigAuthenticationPtrOutput {
	return o.ToSecurityScanConfigAuthenticationPtrOutputWithContext(context.Background())
}

func (o SecurityScanConfigAuthenticationOutput) ToSecurityScanConfigAuthenticationPtrOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationPtrOutput {
	return o.ApplyT(func(v SecurityScanConfigAuthentication) *SecurityScanConfigAuthentication {
		return &v
	}).(SecurityScanConfigAuthenticationPtrOutput)
}

// Describes authentication configuration that uses a custom account.  Structure is documented below.
func (o SecurityScanConfigAuthenticationOutput) CustomAccount() SecurityScanConfigAuthenticationCustomAccountPtrOutput {
	return o.ApplyT(func(v SecurityScanConfigAuthentication) *SecurityScanConfigAuthenticationCustomAccount {
		return v.CustomAccount
	}).(SecurityScanConfigAuthenticationCustomAccountPtrOutput)
}

// Describes authentication configuration that uses a Google account.  Structure is documented below.
func (o SecurityScanConfigAuthenticationOutput) GoogleAccount() SecurityScanConfigAuthenticationGoogleAccountPtrOutput {
	return o.ApplyT(func(v SecurityScanConfigAuthentication) *SecurityScanConfigAuthenticationGoogleAccount {
		return v.GoogleAccount
	}).(SecurityScanConfigAuthenticationGoogleAccountPtrOutput)
}

type SecurityScanConfigAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (SecurityScanConfigAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityScanConfigAuthentication)(nil)).Elem()
}

func (o SecurityScanConfigAuthenticationPtrOutput) ToSecurityScanConfigAuthenticationPtrOutput() SecurityScanConfigAuthenticationPtrOutput {
	return o
}

func (o SecurityScanConfigAuthenticationPtrOutput) ToSecurityScanConfigAuthenticationPtrOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationPtrOutput {
	return o
}

func (o SecurityScanConfigAuthenticationPtrOutput) Elem() SecurityScanConfigAuthenticationOutput {
	return o.ApplyT(func(v *SecurityScanConfigAuthentication) SecurityScanConfigAuthentication { return *v }).(SecurityScanConfigAuthenticationOutput)
}

// Describes authentication configuration that uses a custom account.  Structure is documented below.
func (o SecurityScanConfigAuthenticationPtrOutput) CustomAccount() SecurityScanConfigAuthenticationCustomAccountPtrOutput {
	return o.ApplyT(func(v *SecurityScanConfigAuthentication) *SecurityScanConfigAuthenticationCustomAccount {
		if v == nil {
			return nil
		}
		return v.CustomAccount
	}).(SecurityScanConfigAuthenticationCustomAccountPtrOutput)
}

// Describes authentication configuration that uses a Google account.  Structure is documented below.
func (o SecurityScanConfigAuthenticationPtrOutput) GoogleAccount() SecurityScanConfigAuthenticationGoogleAccountPtrOutput {
	return o.ApplyT(func(v *SecurityScanConfigAuthentication) *SecurityScanConfigAuthenticationGoogleAccount {
		if v == nil {
			return nil
		}
		return v.GoogleAccount
	}).(SecurityScanConfigAuthenticationGoogleAccountPtrOutput)
}

type SecurityScanConfigAuthenticationCustomAccount struct {
	// The login form URL of the website.
	LoginUrl string `pulumi:"loginUrl"`
	// The password of the custom account. The credential is stored encrypted
	// in GCP.
	Password string `pulumi:"password"`
	// The user name of the custom account.
	Username string `pulumi:"username"`
}

// SecurityScanConfigAuthenticationCustomAccountInput is an input type that accepts SecurityScanConfigAuthenticationCustomAccountArgs and SecurityScanConfigAuthenticationCustomAccountOutput values.
// You can construct a concrete instance of `SecurityScanConfigAuthenticationCustomAccountInput` via:
//
// 		 SecurityScanConfigAuthenticationCustomAccountArgs{...}
//
type SecurityScanConfigAuthenticationCustomAccountInput interface {
	pulumi.Input

	ToSecurityScanConfigAuthenticationCustomAccountOutput() SecurityScanConfigAuthenticationCustomAccountOutput
	ToSecurityScanConfigAuthenticationCustomAccountOutputWithContext(context.Context) SecurityScanConfigAuthenticationCustomAccountOutput
}

type SecurityScanConfigAuthenticationCustomAccountArgs struct {
	// The login form URL of the website.
	LoginUrl pulumi.StringInput `pulumi:"loginUrl"`
	// The password of the custom account. The credential is stored encrypted
	// in GCP.
	Password pulumi.StringInput `pulumi:"password"`
	// The user name of the custom account.
	Username pulumi.StringInput `pulumi:"username"`
}

func (SecurityScanConfigAuthenticationCustomAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityScanConfigAuthenticationCustomAccount)(nil)).Elem()
}

func (i SecurityScanConfigAuthenticationCustomAccountArgs) ToSecurityScanConfigAuthenticationCustomAccountOutput() SecurityScanConfigAuthenticationCustomAccountOutput {
	return i.ToSecurityScanConfigAuthenticationCustomAccountOutputWithContext(context.Background())
}

func (i SecurityScanConfigAuthenticationCustomAccountArgs) ToSecurityScanConfigAuthenticationCustomAccountOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationCustomAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityScanConfigAuthenticationCustomAccountOutput)
}

func (i SecurityScanConfigAuthenticationCustomAccountArgs) ToSecurityScanConfigAuthenticationCustomAccountPtrOutput() SecurityScanConfigAuthenticationCustomAccountPtrOutput {
	return i.ToSecurityScanConfigAuthenticationCustomAccountPtrOutputWithContext(context.Background())
}

func (i SecurityScanConfigAuthenticationCustomAccountArgs) ToSecurityScanConfigAuthenticationCustomAccountPtrOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationCustomAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityScanConfigAuthenticationCustomAccountOutput).ToSecurityScanConfigAuthenticationCustomAccountPtrOutputWithContext(ctx)
}

// SecurityScanConfigAuthenticationCustomAccountPtrInput is an input type that accepts SecurityScanConfigAuthenticationCustomAccountArgs, SecurityScanConfigAuthenticationCustomAccountPtr and SecurityScanConfigAuthenticationCustomAccountPtrOutput values.
// You can construct a concrete instance of `SecurityScanConfigAuthenticationCustomAccountPtrInput` via:
//
// 		 SecurityScanConfigAuthenticationCustomAccountArgs{...}
//
//  or:
//
// 		 nil
//
type SecurityScanConfigAuthenticationCustomAccountPtrInput interface {
	pulumi.Input

	ToSecurityScanConfigAuthenticationCustomAccountPtrOutput() SecurityScanConfigAuthenticationCustomAccountPtrOutput
	ToSecurityScanConfigAuthenticationCustomAccountPtrOutputWithContext(context.Context) SecurityScanConfigAuthenticationCustomAccountPtrOutput
}

type securityScanConfigAuthenticationCustomAccountPtrType SecurityScanConfigAuthenticationCustomAccountArgs

func SecurityScanConfigAuthenticationCustomAccountPtr(v *SecurityScanConfigAuthenticationCustomAccountArgs) SecurityScanConfigAuthenticationCustomAccountPtrInput {
	return (*securityScanConfigAuthenticationCustomAccountPtrType)(v)
}

func (*securityScanConfigAuthenticationCustomAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityScanConfigAuthenticationCustomAccount)(nil)).Elem()
}

func (i *securityScanConfigAuthenticationCustomAccountPtrType) ToSecurityScanConfigAuthenticationCustomAccountPtrOutput() SecurityScanConfigAuthenticationCustomAccountPtrOutput {
	return i.ToSecurityScanConfigAuthenticationCustomAccountPtrOutputWithContext(context.Background())
}

func (i *securityScanConfigAuthenticationCustomAccountPtrType) ToSecurityScanConfigAuthenticationCustomAccountPtrOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationCustomAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityScanConfigAuthenticationCustomAccountPtrOutput)
}

type SecurityScanConfigAuthenticationCustomAccountOutput struct{ *pulumi.OutputState }

func (SecurityScanConfigAuthenticationCustomAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityScanConfigAuthenticationCustomAccount)(nil)).Elem()
}

func (o SecurityScanConfigAuthenticationCustomAccountOutput) ToSecurityScanConfigAuthenticationCustomAccountOutput() SecurityScanConfigAuthenticationCustomAccountOutput {
	return o
}

func (o SecurityScanConfigAuthenticationCustomAccountOutput) ToSecurityScanConfigAuthenticationCustomAccountOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationCustomAccountOutput {
	return o
}

func (o SecurityScanConfigAuthenticationCustomAccountOutput) ToSecurityScanConfigAuthenticationCustomAccountPtrOutput() SecurityScanConfigAuthenticationCustomAccountPtrOutput {
	return o.ToSecurityScanConfigAuthenticationCustomAccountPtrOutputWithContext(context.Background())
}

func (o SecurityScanConfigAuthenticationCustomAccountOutput) ToSecurityScanConfigAuthenticationCustomAccountPtrOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationCustomAccountPtrOutput {
	return o.ApplyT(func(v SecurityScanConfigAuthenticationCustomAccount) *SecurityScanConfigAuthenticationCustomAccount {
		return &v
	}).(SecurityScanConfigAuthenticationCustomAccountPtrOutput)
}

// The login form URL of the website.
func (o SecurityScanConfigAuthenticationCustomAccountOutput) LoginUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityScanConfigAuthenticationCustomAccount) string { return v.LoginUrl }).(pulumi.StringOutput)
}

// The password of the custom account. The credential is stored encrypted
// in GCP.
func (o SecurityScanConfigAuthenticationCustomAccountOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityScanConfigAuthenticationCustomAccount) string { return v.Password }).(pulumi.StringOutput)
}

// The user name of the custom account.
func (o SecurityScanConfigAuthenticationCustomAccountOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityScanConfigAuthenticationCustomAccount) string { return v.Username }).(pulumi.StringOutput)
}

type SecurityScanConfigAuthenticationCustomAccountPtrOutput struct{ *pulumi.OutputState }

func (SecurityScanConfigAuthenticationCustomAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityScanConfigAuthenticationCustomAccount)(nil)).Elem()
}

func (o SecurityScanConfigAuthenticationCustomAccountPtrOutput) ToSecurityScanConfigAuthenticationCustomAccountPtrOutput() SecurityScanConfigAuthenticationCustomAccountPtrOutput {
	return o
}

func (o SecurityScanConfigAuthenticationCustomAccountPtrOutput) ToSecurityScanConfigAuthenticationCustomAccountPtrOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationCustomAccountPtrOutput {
	return o
}

func (o SecurityScanConfigAuthenticationCustomAccountPtrOutput) Elem() SecurityScanConfigAuthenticationCustomAccountOutput {
	return o.ApplyT(func(v *SecurityScanConfigAuthenticationCustomAccount) SecurityScanConfigAuthenticationCustomAccount {
		return *v
	}).(SecurityScanConfigAuthenticationCustomAccountOutput)
}

// The login form URL of the website.
func (o SecurityScanConfigAuthenticationCustomAccountPtrOutput) LoginUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityScanConfigAuthenticationCustomAccount) *string {
		if v == nil {
			return nil
		}
		return &v.LoginUrl
	}).(pulumi.StringPtrOutput)
}

// The password of the custom account. The credential is stored encrypted
// in GCP.
func (o SecurityScanConfigAuthenticationCustomAccountPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityScanConfigAuthenticationCustomAccount) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The user name of the custom account.
func (o SecurityScanConfigAuthenticationCustomAccountPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityScanConfigAuthenticationCustomAccount) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type SecurityScanConfigAuthenticationGoogleAccount struct {
	// The password of the custom account. The credential is stored encrypted
	// in GCP.
	Password string `pulumi:"password"`
	// The user name of the custom account.
	Username string `pulumi:"username"`
}

// SecurityScanConfigAuthenticationGoogleAccountInput is an input type that accepts SecurityScanConfigAuthenticationGoogleAccountArgs and SecurityScanConfigAuthenticationGoogleAccountOutput values.
// You can construct a concrete instance of `SecurityScanConfigAuthenticationGoogleAccountInput` via:
//
// 		 SecurityScanConfigAuthenticationGoogleAccountArgs{...}
//
type SecurityScanConfigAuthenticationGoogleAccountInput interface {
	pulumi.Input

	ToSecurityScanConfigAuthenticationGoogleAccountOutput() SecurityScanConfigAuthenticationGoogleAccountOutput
	ToSecurityScanConfigAuthenticationGoogleAccountOutputWithContext(context.Context) SecurityScanConfigAuthenticationGoogleAccountOutput
}

type SecurityScanConfigAuthenticationGoogleAccountArgs struct {
	// The password of the custom account. The credential is stored encrypted
	// in GCP.
	Password pulumi.StringInput `pulumi:"password"`
	// The user name of the custom account.
	Username pulumi.StringInput `pulumi:"username"`
}

func (SecurityScanConfigAuthenticationGoogleAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityScanConfigAuthenticationGoogleAccount)(nil)).Elem()
}

func (i SecurityScanConfigAuthenticationGoogleAccountArgs) ToSecurityScanConfigAuthenticationGoogleAccountOutput() SecurityScanConfigAuthenticationGoogleAccountOutput {
	return i.ToSecurityScanConfigAuthenticationGoogleAccountOutputWithContext(context.Background())
}

func (i SecurityScanConfigAuthenticationGoogleAccountArgs) ToSecurityScanConfigAuthenticationGoogleAccountOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationGoogleAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityScanConfigAuthenticationGoogleAccountOutput)
}

func (i SecurityScanConfigAuthenticationGoogleAccountArgs) ToSecurityScanConfigAuthenticationGoogleAccountPtrOutput() SecurityScanConfigAuthenticationGoogleAccountPtrOutput {
	return i.ToSecurityScanConfigAuthenticationGoogleAccountPtrOutputWithContext(context.Background())
}

func (i SecurityScanConfigAuthenticationGoogleAccountArgs) ToSecurityScanConfigAuthenticationGoogleAccountPtrOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationGoogleAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityScanConfigAuthenticationGoogleAccountOutput).ToSecurityScanConfigAuthenticationGoogleAccountPtrOutputWithContext(ctx)
}

// SecurityScanConfigAuthenticationGoogleAccountPtrInput is an input type that accepts SecurityScanConfigAuthenticationGoogleAccountArgs, SecurityScanConfigAuthenticationGoogleAccountPtr and SecurityScanConfigAuthenticationGoogleAccountPtrOutput values.
// You can construct a concrete instance of `SecurityScanConfigAuthenticationGoogleAccountPtrInput` via:
//
// 		 SecurityScanConfigAuthenticationGoogleAccountArgs{...}
//
//  or:
//
// 		 nil
//
type SecurityScanConfigAuthenticationGoogleAccountPtrInput interface {
	pulumi.Input

	ToSecurityScanConfigAuthenticationGoogleAccountPtrOutput() SecurityScanConfigAuthenticationGoogleAccountPtrOutput
	ToSecurityScanConfigAuthenticationGoogleAccountPtrOutputWithContext(context.Context) SecurityScanConfigAuthenticationGoogleAccountPtrOutput
}

type securityScanConfigAuthenticationGoogleAccountPtrType SecurityScanConfigAuthenticationGoogleAccountArgs

func SecurityScanConfigAuthenticationGoogleAccountPtr(v *SecurityScanConfigAuthenticationGoogleAccountArgs) SecurityScanConfigAuthenticationGoogleAccountPtrInput {
	return (*securityScanConfigAuthenticationGoogleAccountPtrType)(v)
}

func (*securityScanConfigAuthenticationGoogleAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityScanConfigAuthenticationGoogleAccount)(nil)).Elem()
}

func (i *securityScanConfigAuthenticationGoogleAccountPtrType) ToSecurityScanConfigAuthenticationGoogleAccountPtrOutput() SecurityScanConfigAuthenticationGoogleAccountPtrOutput {
	return i.ToSecurityScanConfigAuthenticationGoogleAccountPtrOutputWithContext(context.Background())
}

func (i *securityScanConfigAuthenticationGoogleAccountPtrType) ToSecurityScanConfigAuthenticationGoogleAccountPtrOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationGoogleAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityScanConfigAuthenticationGoogleAccountPtrOutput)
}

type SecurityScanConfigAuthenticationGoogleAccountOutput struct{ *pulumi.OutputState }

func (SecurityScanConfigAuthenticationGoogleAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityScanConfigAuthenticationGoogleAccount)(nil)).Elem()
}

func (o SecurityScanConfigAuthenticationGoogleAccountOutput) ToSecurityScanConfigAuthenticationGoogleAccountOutput() SecurityScanConfigAuthenticationGoogleAccountOutput {
	return o
}

func (o SecurityScanConfigAuthenticationGoogleAccountOutput) ToSecurityScanConfigAuthenticationGoogleAccountOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationGoogleAccountOutput {
	return o
}

func (o SecurityScanConfigAuthenticationGoogleAccountOutput) ToSecurityScanConfigAuthenticationGoogleAccountPtrOutput() SecurityScanConfigAuthenticationGoogleAccountPtrOutput {
	return o.ToSecurityScanConfigAuthenticationGoogleAccountPtrOutputWithContext(context.Background())
}

func (o SecurityScanConfigAuthenticationGoogleAccountOutput) ToSecurityScanConfigAuthenticationGoogleAccountPtrOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationGoogleAccountPtrOutput {
	return o.ApplyT(func(v SecurityScanConfigAuthenticationGoogleAccount) *SecurityScanConfigAuthenticationGoogleAccount {
		return &v
	}).(SecurityScanConfigAuthenticationGoogleAccountPtrOutput)
}

// The password of the custom account. The credential is stored encrypted
// in GCP.
func (o SecurityScanConfigAuthenticationGoogleAccountOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityScanConfigAuthenticationGoogleAccount) string { return v.Password }).(pulumi.StringOutput)
}

// The user name of the custom account.
func (o SecurityScanConfigAuthenticationGoogleAccountOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityScanConfigAuthenticationGoogleAccount) string { return v.Username }).(pulumi.StringOutput)
}

type SecurityScanConfigAuthenticationGoogleAccountPtrOutput struct{ *pulumi.OutputState }

func (SecurityScanConfigAuthenticationGoogleAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityScanConfigAuthenticationGoogleAccount)(nil)).Elem()
}

func (o SecurityScanConfigAuthenticationGoogleAccountPtrOutput) ToSecurityScanConfigAuthenticationGoogleAccountPtrOutput() SecurityScanConfigAuthenticationGoogleAccountPtrOutput {
	return o
}

func (o SecurityScanConfigAuthenticationGoogleAccountPtrOutput) ToSecurityScanConfigAuthenticationGoogleAccountPtrOutputWithContext(ctx context.Context) SecurityScanConfigAuthenticationGoogleAccountPtrOutput {
	return o
}

func (o SecurityScanConfigAuthenticationGoogleAccountPtrOutput) Elem() SecurityScanConfigAuthenticationGoogleAccountOutput {
	return o.ApplyT(func(v *SecurityScanConfigAuthenticationGoogleAccount) SecurityScanConfigAuthenticationGoogleAccount {
		return *v
	}).(SecurityScanConfigAuthenticationGoogleAccountOutput)
}

// The password of the custom account. The credential is stored encrypted
// in GCP.
func (o SecurityScanConfigAuthenticationGoogleAccountPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityScanConfigAuthenticationGoogleAccount) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The user name of the custom account.
func (o SecurityScanConfigAuthenticationGoogleAccountPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityScanConfigAuthenticationGoogleAccount) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type SecurityScanConfigSchedule struct {
	// The duration of time between executions in days
	IntervalDurationDays int `pulumi:"intervalDurationDays"`
	// A timestamp indicates when the next run will be scheduled. The value is refreshed
	// by the server after each run. If unspecified, it will default to current server time,
	// which means the scan will be scheduled to start immediately.
	ScheduleTime *string `pulumi:"scheduleTime"`
}

// SecurityScanConfigScheduleInput is an input type that accepts SecurityScanConfigScheduleArgs and SecurityScanConfigScheduleOutput values.
// You can construct a concrete instance of `SecurityScanConfigScheduleInput` via:
//
// 		 SecurityScanConfigScheduleArgs{...}
//
type SecurityScanConfigScheduleInput interface {
	pulumi.Input

	ToSecurityScanConfigScheduleOutput() SecurityScanConfigScheduleOutput
	ToSecurityScanConfigScheduleOutputWithContext(context.Context) SecurityScanConfigScheduleOutput
}

type SecurityScanConfigScheduleArgs struct {
	// The duration of time between executions in days
	IntervalDurationDays pulumi.IntInput `pulumi:"intervalDurationDays"`
	// A timestamp indicates when the next run will be scheduled. The value is refreshed
	// by the server after each run. If unspecified, it will default to current server time,
	// which means the scan will be scheduled to start immediately.
	ScheduleTime pulumi.StringPtrInput `pulumi:"scheduleTime"`
}

func (SecurityScanConfigScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityScanConfigSchedule)(nil)).Elem()
}

func (i SecurityScanConfigScheduleArgs) ToSecurityScanConfigScheduleOutput() SecurityScanConfigScheduleOutput {
	return i.ToSecurityScanConfigScheduleOutputWithContext(context.Background())
}

func (i SecurityScanConfigScheduleArgs) ToSecurityScanConfigScheduleOutputWithContext(ctx context.Context) SecurityScanConfigScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityScanConfigScheduleOutput)
}

func (i SecurityScanConfigScheduleArgs) ToSecurityScanConfigSchedulePtrOutput() SecurityScanConfigSchedulePtrOutput {
	return i.ToSecurityScanConfigSchedulePtrOutputWithContext(context.Background())
}

func (i SecurityScanConfigScheduleArgs) ToSecurityScanConfigSchedulePtrOutputWithContext(ctx context.Context) SecurityScanConfigSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityScanConfigScheduleOutput).ToSecurityScanConfigSchedulePtrOutputWithContext(ctx)
}

// SecurityScanConfigSchedulePtrInput is an input type that accepts SecurityScanConfigScheduleArgs, SecurityScanConfigSchedulePtr and SecurityScanConfigSchedulePtrOutput values.
// You can construct a concrete instance of `SecurityScanConfigSchedulePtrInput` via:
//
// 		 SecurityScanConfigScheduleArgs{...}
//
//  or:
//
// 		 nil
//
type SecurityScanConfigSchedulePtrInput interface {
	pulumi.Input

	ToSecurityScanConfigSchedulePtrOutput() SecurityScanConfigSchedulePtrOutput
	ToSecurityScanConfigSchedulePtrOutputWithContext(context.Context) SecurityScanConfigSchedulePtrOutput
}

type securityScanConfigSchedulePtrType SecurityScanConfigScheduleArgs

func SecurityScanConfigSchedulePtr(v *SecurityScanConfigScheduleArgs) SecurityScanConfigSchedulePtrInput {
	return (*securityScanConfigSchedulePtrType)(v)
}

func (*securityScanConfigSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityScanConfigSchedule)(nil)).Elem()
}

func (i *securityScanConfigSchedulePtrType) ToSecurityScanConfigSchedulePtrOutput() SecurityScanConfigSchedulePtrOutput {
	return i.ToSecurityScanConfigSchedulePtrOutputWithContext(context.Background())
}

func (i *securityScanConfigSchedulePtrType) ToSecurityScanConfigSchedulePtrOutputWithContext(ctx context.Context) SecurityScanConfigSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityScanConfigSchedulePtrOutput)
}

type SecurityScanConfigScheduleOutput struct{ *pulumi.OutputState }

func (SecurityScanConfigScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityScanConfigSchedule)(nil)).Elem()
}

func (o SecurityScanConfigScheduleOutput) ToSecurityScanConfigScheduleOutput() SecurityScanConfigScheduleOutput {
	return o
}

func (o SecurityScanConfigScheduleOutput) ToSecurityScanConfigScheduleOutputWithContext(ctx context.Context) SecurityScanConfigScheduleOutput {
	return o
}

func (o SecurityScanConfigScheduleOutput) ToSecurityScanConfigSchedulePtrOutput() SecurityScanConfigSchedulePtrOutput {
	return o.ToSecurityScanConfigSchedulePtrOutputWithContext(context.Background())
}

func (o SecurityScanConfigScheduleOutput) ToSecurityScanConfigSchedulePtrOutputWithContext(ctx context.Context) SecurityScanConfigSchedulePtrOutput {
	return o.ApplyT(func(v SecurityScanConfigSchedule) *SecurityScanConfigSchedule {
		return &v
	}).(SecurityScanConfigSchedulePtrOutput)
}

// The duration of time between executions in days
func (o SecurityScanConfigScheduleOutput) IntervalDurationDays() pulumi.IntOutput {
	return o.ApplyT(func(v SecurityScanConfigSchedule) int { return v.IntervalDurationDays }).(pulumi.IntOutput)
}

// A timestamp indicates when the next run will be scheduled. The value is refreshed
// by the server after each run. If unspecified, it will default to current server time,
// which means the scan will be scheduled to start immediately.
func (o SecurityScanConfigScheduleOutput) ScheduleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityScanConfigSchedule) *string { return v.ScheduleTime }).(pulumi.StringPtrOutput)
}

type SecurityScanConfigSchedulePtrOutput struct{ *pulumi.OutputState }

func (SecurityScanConfigSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityScanConfigSchedule)(nil)).Elem()
}

func (o SecurityScanConfigSchedulePtrOutput) ToSecurityScanConfigSchedulePtrOutput() SecurityScanConfigSchedulePtrOutput {
	return o
}

func (o SecurityScanConfigSchedulePtrOutput) ToSecurityScanConfigSchedulePtrOutputWithContext(ctx context.Context) SecurityScanConfigSchedulePtrOutput {
	return o
}

func (o SecurityScanConfigSchedulePtrOutput) Elem() SecurityScanConfigScheduleOutput {
	return o.ApplyT(func(v *SecurityScanConfigSchedule) SecurityScanConfigSchedule { return *v }).(SecurityScanConfigScheduleOutput)
}

// The duration of time between executions in days
func (o SecurityScanConfigSchedulePtrOutput) IntervalDurationDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityScanConfigSchedule) *int {
		if v == nil {
			return nil
		}
		return &v.IntervalDurationDays
	}).(pulumi.IntPtrOutput)
}

// A timestamp indicates when the next run will be scheduled. The value is refreshed
// by the server after each run. If unspecified, it will default to current server time,
// which means the scan will be scheduled to start immediately.
func (o SecurityScanConfigSchedulePtrOutput) ScheduleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityScanConfigSchedule) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleTime
	}).(pulumi.StringPtrOutput)
}

type SnapshotSnapshotEncryptionKey struct {
	// Specifies a 256-bit customer-supplied encryption key, encoded in
	// RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey string `pulumi:"rawKey"`
	// -
	// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
	// encryption key that protects this resource.
	Sha256 *string `pulumi:"sha256"`
}

// SnapshotSnapshotEncryptionKeyInput is an input type that accepts SnapshotSnapshotEncryptionKeyArgs and SnapshotSnapshotEncryptionKeyOutput values.
// You can construct a concrete instance of `SnapshotSnapshotEncryptionKeyInput` via:
//
// 		 SnapshotSnapshotEncryptionKeyArgs{...}
//
type SnapshotSnapshotEncryptionKeyInput interface {
	pulumi.Input

	ToSnapshotSnapshotEncryptionKeyOutput() SnapshotSnapshotEncryptionKeyOutput
	ToSnapshotSnapshotEncryptionKeyOutputWithContext(context.Context) SnapshotSnapshotEncryptionKeyOutput
}

type SnapshotSnapshotEncryptionKeyArgs struct {
	// Specifies a 256-bit customer-supplied encryption key, encoded in
	// RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey pulumi.StringInput `pulumi:"rawKey"`
	// -
	// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
	// encryption key that protects this resource.
	Sha256 pulumi.StringPtrInput `pulumi:"sha256"`
}

func (SnapshotSnapshotEncryptionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSnapshotEncryptionKey)(nil)).Elem()
}

func (i SnapshotSnapshotEncryptionKeyArgs) ToSnapshotSnapshotEncryptionKeyOutput() SnapshotSnapshotEncryptionKeyOutput {
	return i.ToSnapshotSnapshotEncryptionKeyOutputWithContext(context.Background())
}

func (i SnapshotSnapshotEncryptionKeyArgs) ToSnapshotSnapshotEncryptionKeyOutputWithContext(ctx context.Context) SnapshotSnapshotEncryptionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSnapshotEncryptionKeyOutput)
}

func (i SnapshotSnapshotEncryptionKeyArgs) ToSnapshotSnapshotEncryptionKeyPtrOutput() SnapshotSnapshotEncryptionKeyPtrOutput {
	return i.ToSnapshotSnapshotEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i SnapshotSnapshotEncryptionKeyArgs) ToSnapshotSnapshotEncryptionKeyPtrOutputWithContext(ctx context.Context) SnapshotSnapshotEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSnapshotEncryptionKeyOutput).ToSnapshotSnapshotEncryptionKeyPtrOutputWithContext(ctx)
}

// SnapshotSnapshotEncryptionKeyPtrInput is an input type that accepts SnapshotSnapshotEncryptionKeyArgs, SnapshotSnapshotEncryptionKeyPtr and SnapshotSnapshotEncryptionKeyPtrOutput values.
// You can construct a concrete instance of `SnapshotSnapshotEncryptionKeyPtrInput` via:
//
// 		 SnapshotSnapshotEncryptionKeyArgs{...}
//
//  or:
//
// 		 nil
//
type SnapshotSnapshotEncryptionKeyPtrInput interface {
	pulumi.Input

	ToSnapshotSnapshotEncryptionKeyPtrOutput() SnapshotSnapshotEncryptionKeyPtrOutput
	ToSnapshotSnapshotEncryptionKeyPtrOutputWithContext(context.Context) SnapshotSnapshotEncryptionKeyPtrOutput
}

type snapshotSnapshotEncryptionKeyPtrType SnapshotSnapshotEncryptionKeyArgs

func SnapshotSnapshotEncryptionKeyPtr(v *SnapshotSnapshotEncryptionKeyArgs) SnapshotSnapshotEncryptionKeyPtrInput {
	return (*snapshotSnapshotEncryptionKeyPtrType)(v)
}

func (*snapshotSnapshotEncryptionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSnapshotEncryptionKey)(nil)).Elem()
}

func (i *snapshotSnapshotEncryptionKeyPtrType) ToSnapshotSnapshotEncryptionKeyPtrOutput() SnapshotSnapshotEncryptionKeyPtrOutput {
	return i.ToSnapshotSnapshotEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i *snapshotSnapshotEncryptionKeyPtrType) ToSnapshotSnapshotEncryptionKeyPtrOutputWithContext(ctx context.Context) SnapshotSnapshotEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSnapshotEncryptionKeyPtrOutput)
}

type SnapshotSnapshotEncryptionKeyOutput struct{ *pulumi.OutputState }

func (SnapshotSnapshotEncryptionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSnapshotEncryptionKey)(nil)).Elem()
}

func (o SnapshotSnapshotEncryptionKeyOutput) ToSnapshotSnapshotEncryptionKeyOutput() SnapshotSnapshotEncryptionKeyOutput {
	return o
}

func (o SnapshotSnapshotEncryptionKeyOutput) ToSnapshotSnapshotEncryptionKeyOutputWithContext(ctx context.Context) SnapshotSnapshotEncryptionKeyOutput {
	return o
}

func (o SnapshotSnapshotEncryptionKeyOutput) ToSnapshotSnapshotEncryptionKeyPtrOutput() SnapshotSnapshotEncryptionKeyPtrOutput {
	return o.ToSnapshotSnapshotEncryptionKeyPtrOutputWithContext(context.Background())
}

func (o SnapshotSnapshotEncryptionKeyOutput) ToSnapshotSnapshotEncryptionKeyPtrOutputWithContext(ctx context.Context) SnapshotSnapshotEncryptionKeyPtrOutput {
	return o.ApplyT(func(v SnapshotSnapshotEncryptionKey) *SnapshotSnapshotEncryptionKey {
		return &v
	}).(SnapshotSnapshotEncryptionKeyPtrOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in
// RFC 4648 base64 to either encrypt or decrypt this resource.
func (o SnapshotSnapshotEncryptionKeyOutput) RawKey() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotSnapshotEncryptionKey) string { return v.RawKey }).(pulumi.StringOutput)
}

// -
// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
// encryption key that protects this resource.
func (o SnapshotSnapshotEncryptionKeyOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotSnapshotEncryptionKey) *string { return v.Sha256 }).(pulumi.StringPtrOutput)
}

type SnapshotSnapshotEncryptionKeyPtrOutput struct{ *pulumi.OutputState }

func (SnapshotSnapshotEncryptionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSnapshotEncryptionKey)(nil)).Elem()
}

func (o SnapshotSnapshotEncryptionKeyPtrOutput) ToSnapshotSnapshotEncryptionKeyPtrOutput() SnapshotSnapshotEncryptionKeyPtrOutput {
	return o
}

func (o SnapshotSnapshotEncryptionKeyPtrOutput) ToSnapshotSnapshotEncryptionKeyPtrOutputWithContext(ctx context.Context) SnapshotSnapshotEncryptionKeyPtrOutput {
	return o
}

func (o SnapshotSnapshotEncryptionKeyPtrOutput) Elem() SnapshotSnapshotEncryptionKeyOutput {
	return o.ApplyT(func(v *SnapshotSnapshotEncryptionKey) SnapshotSnapshotEncryptionKey { return *v }).(SnapshotSnapshotEncryptionKeyOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in
// RFC 4648 base64 to either encrypt or decrypt this resource.
func (o SnapshotSnapshotEncryptionKeyPtrOutput) RawKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotSnapshotEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return &v.RawKey
	}).(pulumi.StringPtrOutput)
}

// -
// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
// encryption key that protects this resource.
func (o SnapshotSnapshotEncryptionKeyPtrOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotSnapshotEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.Sha256
	}).(pulumi.StringPtrOutput)
}

type SnapshotSourceDiskEncryptionKey struct {
	// Specifies a 256-bit customer-supplied encryption key, encoded in
	// RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey *string `pulumi:"rawKey"`
}

// SnapshotSourceDiskEncryptionKeyInput is an input type that accepts SnapshotSourceDiskEncryptionKeyArgs and SnapshotSourceDiskEncryptionKeyOutput values.
// You can construct a concrete instance of `SnapshotSourceDiskEncryptionKeyInput` via:
//
// 		 SnapshotSourceDiskEncryptionKeyArgs{...}
//
type SnapshotSourceDiskEncryptionKeyInput interface {
	pulumi.Input

	ToSnapshotSourceDiskEncryptionKeyOutput() SnapshotSourceDiskEncryptionKeyOutput
	ToSnapshotSourceDiskEncryptionKeyOutputWithContext(context.Context) SnapshotSourceDiskEncryptionKeyOutput
}

type SnapshotSourceDiskEncryptionKeyArgs struct {
	// Specifies a 256-bit customer-supplied encryption key, encoded in
	// RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey pulumi.StringPtrInput `pulumi:"rawKey"`
}

func (SnapshotSourceDiskEncryptionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSourceDiskEncryptionKey)(nil)).Elem()
}

func (i SnapshotSourceDiskEncryptionKeyArgs) ToSnapshotSourceDiskEncryptionKeyOutput() SnapshotSourceDiskEncryptionKeyOutput {
	return i.ToSnapshotSourceDiskEncryptionKeyOutputWithContext(context.Background())
}

func (i SnapshotSourceDiskEncryptionKeyArgs) ToSnapshotSourceDiskEncryptionKeyOutputWithContext(ctx context.Context) SnapshotSourceDiskEncryptionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSourceDiskEncryptionKeyOutput)
}

func (i SnapshotSourceDiskEncryptionKeyArgs) ToSnapshotSourceDiskEncryptionKeyPtrOutput() SnapshotSourceDiskEncryptionKeyPtrOutput {
	return i.ToSnapshotSourceDiskEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i SnapshotSourceDiskEncryptionKeyArgs) ToSnapshotSourceDiskEncryptionKeyPtrOutputWithContext(ctx context.Context) SnapshotSourceDiskEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSourceDiskEncryptionKeyOutput).ToSnapshotSourceDiskEncryptionKeyPtrOutputWithContext(ctx)
}

// SnapshotSourceDiskEncryptionKeyPtrInput is an input type that accepts SnapshotSourceDiskEncryptionKeyArgs, SnapshotSourceDiskEncryptionKeyPtr and SnapshotSourceDiskEncryptionKeyPtrOutput values.
// You can construct a concrete instance of `SnapshotSourceDiskEncryptionKeyPtrInput` via:
//
// 		 SnapshotSourceDiskEncryptionKeyArgs{...}
//
//  or:
//
// 		 nil
//
type SnapshotSourceDiskEncryptionKeyPtrInput interface {
	pulumi.Input

	ToSnapshotSourceDiskEncryptionKeyPtrOutput() SnapshotSourceDiskEncryptionKeyPtrOutput
	ToSnapshotSourceDiskEncryptionKeyPtrOutputWithContext(context.Context) SnapshotSourceDiskEncryptionKeyPtrOutput
}

type snapshotSourceDiskEncryptionKeyPtrType SnapshotSourceDiskEncryptionKeyArgs

func SnapshotSourceDiskEncryptionKeyPtr(v *SnapshotSourceDiskEncryptionKeyArgs) SnapshotSourceDiskEncryptionKeyPtrInput {
	return (*snapshotSourceDiskEncryptionKeyPtrType)(v)
}

func (*snapshotSourceDiskEncryptionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSourceDiskEncryptionKey)(nil)).Elem()
}

func (i *snapshotSourceDiskEncryptionKeyPtrType) ToSnapshotSourceDiskEncryptionKeyPtrOutput() SnapshotSourceDiskEncryptionKeyPtrOutput {
	return i.ToSnapshotSourceDiskEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i *snapshotSourceDiskEncryptionKeyPtrType) ToSnapshotSourceDiskEncryptionKeyPtrOutputWithContext(ctx context.Context) SnapshotSourceDiskEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSourceDiskEncryptionKeyPtrOutput)
}

type SnapshotSourceDiskEncryptionKeyOutput struct{ *pulumi.OutputState }

func (SnapshotSourceDiskEncryptionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSourceDiskEncryptionKey)(nil)).Elem()
}

func (o SnapshotSourceDiskEncryptionKeyOutput) ToSnapshotSourceDiskEncryptionKeyOutput() SnapshotSourceDiskEncryptionKeyOutput {
	return o
}

func (o SnapshotSourceDiskEncryptionKeyOutput) ToSnapshotSourceDiskEncryptionKeyOutputWithContext(ctx context.Context) SnapshotSourceDiskEncryptionKeyOutput {
	return o
}

func (o SnapshotSourceDiskEncryptionKeyOutput) ToSnapshotSourceDiskEncryptionKeyPtrOutput() SnapshotSourceDiskEncryptionKeyPtrOutput {
	return o.ToSnapshotSourceDiskEncryptionKeyPtrOutputWithContext(context.Background())
}

func (o SnapshotSourceDiskEncryptionKeyOutput) ToSnapshotSourceDiskEncryptionKeyPtrOutputWithContext(ctx context.Context) SnapshotSourceDiskEncryptionKeyPtrOutput {
	return o.ApplyT(func(v SnapshotSourceDiskEncryptionKey) *SnapshotSourceDiskEncryptionKey {
		return &v
	}).(SnapshotSourceDiskEncryptionKeyPtrOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in
// RFC 4648 base64 to either encrypt or decrypt this resource.
func (o SnapshotSourceDiskEncryptionKeyOutput) RawKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotSourceDiskEncryptionKey) *string { return v.RawKey }).(pulumi.StringPtrOutput)
}

type SnapshotSourceDiskEncryptionKeyPtrOutput struct{ *pulumi.OutputState }

func (SnapshotSourceDiskEncryptionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSourceDiskEncryptionKey)(nil)).Elem()
}

func (o SnapshotSourceDiskEncryptionKeyPtrOutput) ToSnapshotSourceDiskEncryptionKeyPtrOutput() SnapshotSourceDiskEncryptionKeyPtrOutput {
	return o
}

func (o SnapshotSourceDiskEncryptionKeyPtrOutput) ToSnapshotSourceDiskEncryptionKeyPtrOutputWithContext(ctx context.Context) SnapshotSourceDiskEncryptionKeyPtrOutput {
	return o
}

func (o SnapshotSourceDiskEncryptionKeyPtrOutput) Elem() SnapshotSourceDiskEncryptionKeyOutput {
	return o.ApplyT(func(v *SnapshotSourceDiskEncryptionKey) SnapshotSourceDiskEncryptionKey { return *v }).(SnapshotSourceDiskEncryptionKeyOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in
// RFC 4648 base64 to either encrypt or decrypt this resource.
func (o SnapshotSourceDiskEncryptionKeyPtrOutput) RawKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotSourceDiskEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.RawKey
	}).(pulumi.StringPtrOutput)
}

type SubnetworkIAMBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// SubnetworkIAMBindingConditionInput is an input type that accepts SubnetworkIAMBindingConditionArgs and SubnetworkIAMBindingConditionOutput values.
// You can construct a concrete instance of `SubnetworkIAMBindingConditionInput` via:
//
// 		 SubnetworkIAMBindingConditionArgs{...}
//
type SubnetworkIAMBindingConditionInput interface {
	pulumi.Input

	ToSubnetworkIAMBindingConditionOutput() SubnetworkIAMBindingConditionOutput
	ToSubnetworkIAMBindingConditionOutputWithContext(context.Context) SubnetworkIAMBindingConditionOutput
}

type SubnetworkIAMBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (SubnetworkIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkIAMBindingCondition)(nil)).Elem()
}

func (i SubnetworkIAMBindingConditionArgs) ToSubnetworkIAMBindingConditionOutput() SubnetworkIAMBindingConditionOutput {
	return i.ToSubnetworkIAMBindingConditionOutputWithContext(context.Background())
}

func (i SubnetworkIAMBindingConditionArgs) ToSubnetworkIAMBindingConditionOutputWithContext(ctx context.Context) SubnetworkIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkIAMBindingConditionOutput)
}

func (i SubnetworkIAMBindingConditionArgs) ToSubnetworkIAMBindingConditionPtrOutput() SubnetworkIAMBindingConditionPtrOutput {
	return i.ToSubnetworkIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i SubnetworkIAMBindingConditionArgs) ToSubnetworkIAMBindingConditionPtrOutputWithContext(ctx context.Context) SubnetworkIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkIAMBindingConditionOutput).ToSubnetworkIAMBindingConditionPtrOutputWithContext(ctx)
}

// SubnetworkIAMBindingConditionPtrInput is an input type that accepts SubnetworkIAMBindingConditionArgs, SubnetworkIAMBindingConditionPtr and SubnetworkIAMBindingConditionPtrOutput values.
// You can construct a concrete instance of `SubnetworkIAMBindingConditionPtrInput` via:
//
// 		 SubnetworkIAMBindingConditionArgs{...}
//
//  or:
//
// 		 nil
//
type SubnetworkIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToSubnetworkIAMBindingConditionPtrOutput() SubnetworkIAMBindingConditionPtrOutput
	ToSubnetworkIAMBindingConditionPtrOutputWithContext(context.Context) SubnetworkIAMBindingConditionPtrOutput
}

type subnetworkIAMBindingConditionPtrType SubnetworkIAMBindingConditionArgs

func SubnetworkIAMBindingConditionPtr(v *SubnetworkIAMBindingConditionArgs) SubnetworkIAMBindingConditionPtrInput {
	return (*subnetworkIAMBindingConditionPtrType)(v)
}

func (*subnetworkIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetworkIAMBindingCondition)(nil)).Elem()
}

func (i *subnetworkIAMBindingConditionPtrType) ToSubnetworkIAMBindingConditionPtrOutput() SubnetworkIAMBindingConditionPtrOutput {
	return i.ToSubnetworkIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *subnetworkIAMBindingConditionPtrType) ToSubnetworkIAMBindingConditionPtrOutputWithContext(ctx context.Context) SubnetworkIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkIAMBindingConditionPtrOutput)
}

type SubnetworkIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (SubnetworkIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkIAMBindingCondition)(nil)).Elem()
}

func (o SubnetworkIAMBindingConditionOutput) ToSubnetworkIAMBindingConditionOutput() SubnetworkIAMBindingConditionOutput {
	return o
}

func (o SubnetworkIAMBindingConditionOutput) ToSubnetworkIAMBindingConditionOutputWithContext(ctx context.Context) SubnetworkIAMBindingConditionOutput {
	return o
}

func (o SubnetworkIAMBindingConditionOutput) ToSubnetworkIAMBindingConditionPtrOutput() SubnetworkIAMBindingConditionPtrOutput {
	return o.ToSubnetworkIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o SubnetworkIAMBindingConditionOutput) ToSubnetworkIAMBindingConditionPtrOutputWithContext(ctx context.Context) SubnetworkIAMBindingConditionPtrOutput {
	return o.ApplyT(func(v SubnetworkIAMBindingCondition) *SubnetworkIAMBindingCondition {
		return &v
	}).(SubnetworkIAMBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o SubnetworkIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetworkIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o SubnetworkIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o SubnetworkIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type SubnetworkIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (SubnetworkIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetworkIAMBindingCondition)(nil)).Elem()
}

func (o SubnetworkIAMBindingConditionPtrOutput) ToSubnetworkIAMBindingConditionPtrOutput() SubnetworkIAMBindingConditionPtrOutput {
	return o
}

func (o SubnetworkIAMBindingConditionPtrOutput) ToSubnetworkIAMBindingConditionPtrOutputWithContext(ctx context.Context) SubnetworkIAMBindingConditionPtrOutput {
	return o
}

func (o SubnetworkIAMBindingConditionPtrOutput) Elem() SubnetworkIAMBindingConditionOutput {
	return o.ApplyT(func(v *SubnetworkIAMBindingCondition) SubnetworkIAMBindingCondition { return *v }).(SubnetworkIAMBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o SubnetworkIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetworkIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o SubnetworkIAMBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetworkIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o SubnetworkIAMBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetworkIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type SubnetworkIAMMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// SubnetworkIAMMemberConditionInput is an input type that accepts SubnetworkIAMMemberConditionArgs and SubnetworkIAMMemberConditionOutput values.
// You can construct a concrete instance of `SubnetworkIAMMemberConditionInput` via:
//
// 		 SubnetworkIAMMemberConditionArgs{...}
//
type SubnetworkIAMMemberConditionInput interface {
	pulumi.Input

	ToSubnetworkIAMMemberConditionOutput() SubnetworkIAMMemberConditionOutput
	ToSubnetworkIAMMemberConditionOutputWithContext(context.Context) SubnetworkIAMMemberConditionOutput
}

type SubnetworkIAMMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (SubnetworkIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkIAMMemberCondition)(nil)).Elem()
}

func (i SubnetworkIAMMemberConditionArgs) ToSubnetworkIAMMemberConditionOutput() SubnetworkIAMMemberConditionOutput {
	return i.ToSubnetworkIAMMemberConditionOutputWithContext(context.Background())
}

func (i SubnetworkIAMMemberConditionArgs) ToSubnetworkIAMMemberConditionOutputWithContext(ctx context.Context) SubnetworkIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkIAMMemberConditionOutput)
}

func (i SubnetworkIAMMemberConditionArgs) ToSubnetworkIAMMemberConditionPtrOutput() SubnetworkIAMMemberConditionPtrOutput {
	return i.ToSubnetworkIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i SubnetworkIAMMemberConditionArgs) ToSubnetworkIAMMemberConditionPtrOutputWithContext(ctx context.Context) SubnetworkIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkIAMMemberConditionOutput).ToSubnetworkIAMMemberConditionPtrOutputWithContext(ctx)
}

// SubnetworkIAMMemberConditionPtrInput is an input type that accepts SubnetworkIAMMemberConditionArgs, SubnetworkIAMMemberConditionPtr and SubnetworkIAMMemberConditionPtrOutput values.
// You can construct a concrete instance of `SubnetworkIAMMemberConditionPtrInput` via:
//
// 		 SubnetworkIAMMemberConditionArgs{...}
//
//  or:
//
// 		 nil
//
type SubnetworkIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToSubnetworkIAMMemberConditionPtrOutput() SubnetworkIAMMemberConditionPtrOutput
	ToSubnetworkIAMMemberConditionPtrOutputWithContext(context.Context) SubnetworkIAMMemberConditionPtrOutput
}

type subnetworkIAMMemberConditionPtrType SubnetworkIAMMemberConditionArgs

func SubnetworkIAMMemberConditionPtr(v *SubnetworkIAMMemberConditionArgs) SubnetworkIAMMemberConditionPtrInput {
	return (*subnetworkIAMMemberConditionPtrType)(v)
}

func (*subnetworkIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetworkIAMMemberCondition)(nil)).Elem()
}

func (i *subnetworkIAMMemberConditionPtrType) ToSubnetworkIAMMemberConditionPtrOutput() SubnetworkIAMMemberConditionPtrOutput {
	return i.ToSubnetworkIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *subnetworkIAMMemberConditionPtrType) ToSubnetworkIAMMemberConditionPtrOutputWithContext(ctx context.Context) SubnetworkIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkIAMMemberConditionPtrOutput)
}

type SubnetworkIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (SubnetworkIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkIAMMemberCondition)(nil)).Elem()
}

func (o SubnetworkIAMMemberConditionOutput) ToSubnetworkIAMMemberConditionOutput() SubnetworkIAMMemberConditionOutput {
	return o
}

func (o SubnetworkIAMMemberConditionOutput) ToSubnetworkIAMMemberConditionOutputWithContext(ctx context.Context) SubnetworkIAMMemberConditionOutput {
	return o
}

func (o SubnetworkIAMMemberConditionOutput) ToSubnetworkIAMMemberConditionPtrOutput() SubnetworkIAMMemberConditionPtrOutput {
	return o.ToSubnetworkIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o SubnetworkIAMMemberConditionOutput) ToSubnetworkIAMMemberConditionPtrOutputWithContext(ctx context.Context) SubnetworkIAMMemberConditionPtrOutput {
	return o.ApplyT(func(v SubnetworkIAMMemberCondition) *SubnetworkIAMMemberCondition {
		return &v
	}).(SubnetworkIAMMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o SubnetworkIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetworkIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o SubnetworkIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o SubnetworkIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type SubnetworkIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (SubnetworkIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetworkIAMMemberCondition)(nil)).Elem()
}

func (o SubnetworkIAMMemberConditionPtrOutput) ToSubnetworkIAMMemberConditionPtrOutput() SubnetworkIAMMemberConditionPtrOutput {
	return o
}

func (o SubnetworkIAMMemberConditionPtrOutput) ToSubnetworkIAMMemberConditionPtrOutputWithContext(ctx context.Context) SubnetworkIAMMemberConditionPtrOutput {
	return o
}

func (o SubnetworkIAMMemberConditionPtrOutput) Elem() SubnetworkIAMMemberConditionOutput {
	return o.ApplyT(func(v *SubnetworkIAMMemberCondition) SubnetworkIAMMemberCondition { return *v }).(SubnetworkIAMMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o SubnetworkIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetworkIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o SubnetworkIAMMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetworkIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o SubnetworkIAMMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetworkIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type SubnetworkLogConfig struct {
	// Can only be specified if VPC flow logging for this subnetwork is enabled.
	// Toggles the aggregation interval for collecting flow logs. Increasing the
	// interval time will reduce the amount of generated flow logs for long
	// lasting connections. Default is an interval of 5 seconds per connection.
	// Possible values are INTERVAL_5_SEC, INTERVAL_30_SEC, INTERVAL_1_MIN,
	// INTERVAL_5_MIN, INTERVAL_10_MIN, INTERVAL_15_MIN
	AggregationInterval *string `pulumi:"aggregationInterval"`
	// Can only be specified if VPC flow logging for this subnetwork is enabled.
	// The value of the field must be in [0, 1]. Set the sampling rate of VPC
	// flow logs within the subnetwork where 1.0 means all collected logs are
	// reported and 0.0 means no logs are reported. Default is 0.5 which means
	// half of all collected logs are reported.
	FlowSampling *float64 `pulumi:"flowSampling"`
	// Can only be specified if VPC flow logging for this subnetwork is enabled.
	// Configures whether metadata fields should be added to the reported VPC
	// flow logs. Default is `INCLUDE_ALL_METADATA`.
	Metadata *string `pulumi:"metadata"`
}

// SubnetworkLogConfigInput is an input type that accepts SubnetworkLogConfigArgs and SubnetworkLogConfigOutput values.
// You can construct a concrete instance of `SubnetworkLogConfigInput` via:
//
// 		 SubnetworkLogConfigArgs{...}
//
type SubnetworkLogConfigInput interface {
	pulumi.Input

	ToSubnetworkLogConfigOutput() SubnetworkLogConfigOutput
	ToSubnetworkLogConfigOutputWithContext(context.Context) SubnetworkLogConfigOutput
}

type SubnetworkLogConfigArgs struct {
	// Can only be specified if VPC flow logging for this subnetwork is enabled.
	// Toggles the aggregation interval for collecting flow logs. Increasing the
	// interval time will reduce the amount of generated flow logs for long
	// lasting connections. Default is an interval of 5 seconds per connection.
	// Possible values are INTERVAL_5_SEC, INTERVAL_30_SEC, INTERVAL_1_MIN,
	// INTERVAL_5_MIN, INTERVAL_10_MIN, INTERVAL_15_MIN
	AggregationInterval pulumi.StringPtrInput `pulumi:"aggregationInterval"`
	// Can only be specified if VPC flow logging for this subnetwork is enabled.
	// The value of the field must be in [0, 1]. Set the sampling rate of VPC
	// flow logs within the subnetwork where 1.0 means all collected logs are
	// reported and 0.0 means no logs are reported. Default is 0.5 which means
	// half of all collected logs are reported.
	FlowSampling pulumi.Float64PtrInput `pulumi:"flowSampling"`
	// Can only be specified if VPC flow logging for this subnetwork is enabled.
	// Configures whether metadata fields should be added to the reported VPC
	// flow logs. Default is `INCLUDE_ALL_METADATA`.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
}

func (SubnetworkLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkLogConfig)(nil)).Elem()
}

func (i SubnetworkLogConfigArgs) ToSubnetworkLogConfigOutput() SubnetworkLogConfigOutput {
	return i.ToSubnetworkLogConfigOutputWithContext(context.Background())
}

func (i SubnetworkLogConfigArgs) ToSubnetworkLogConfigOutputWithContext(ctx context.Context) SubnetworkLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkLogConfigOutput)
}

func (i SubnetworkLogConfigArgs) ToSubnetworkLogConfigPtrOutput() SubnetworkLogConfigPtrOutput {
	return i.ToSubnetworkLogConfigPtrOutputWithContext(context.Background())
}

func (i SubnetworkLogConfigArgs) ToSubnetworkLogConfigPtrOutputWithContext(ctx context.Context) SubnetworkLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkLogConfigOutput).ToSubnetworkLogConfigPtrOutputWithContext(ctx)
}

// SubnetworkLogConfigPtrInput is an input type that accepts SubnetworkLogConfigArgs, SubnetworkLogConfigPtr and SubnetworkLogConfigPtrOutput values.
// You can construct a concrete instance of `SubnetworkLogConfigPtrInput` via:
//
// 		 SubnetworkLogConfigArgs{...}
//
//  or:
//
// 		 nil
//
type SubnetworkLogConfigPtrInput interface {
	pulumi.Input

	ToSubnetworkLogConfigPtrOutput() SubnetworkLogConfigPtrOutput
	ToSubnetworkLogConfigPtrOutputWithContext(context.Context) SubnetworkLogConfigPtrOutput
}

type subnetworkLogConfigPtrType SubnetworkLogConfigArgs

func SubnetworkLogConfigPtr(v *SubnetworkLogConfigArgs) SubnetworkLogConfigPtrInput {
	return (*subnetworkLogConfigPtrType)(v)
}

func (*subnetworkLogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetworkLogConfig)(nil)).Elem()
}

func (i *subnetworkLogConfigPtrType) ToSubnetworkLogConfigPtrOutput() SubnetworkLogConfigPtrOutput {
	return i.ToSubnetworkLogConfigPtrOutputWithContext(context.Background())
}

func (i *subnetworkLogConfigPtrType) ToSubnetworkLogConfigPtrOutputWithContext(ctx context.Context) SubnetworkLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkLogConfigPtrOutput)
}

type SubnetworkLogConfigOutput struct{ *pulumi.OutputState }

func (SubnetworkLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkLogConfig)(nil)).Elem()
}

func (o SubnetworkLogConfigOutput) ToSubnetworkLogConfigOutput() SubnetworkLogConfigOutput {
	return o
}

func (o SubnetworkLogConfigOutput) ToSubnetworkLogConfigOutputWithContext(ctx context.Context) SubnetworkLogConfigOutput {
	return o
}

func (o SubnetworkLogConfigOutput) ToSubnetworkLogConfigPtrOutput() SubnetworkLogConfigPtrOutput {
	return o.ToSubnetworkLogConfigPtrOutputWithContext(context.Background())
}

func (o SubnetworkLogConfigOutput) ToSubnetworkLogConfigPtrOutputWithContext(ctx context.Context) SubnetworkLogConfigPtrOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) *SubnetworkLogConfig {
		return &v
	}).(SubnetworkLogConfigPtrOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled.
// Toggles the aggregation interval for collecting flow logs. Increasing the
// interval time will reduce the amount of generated flow logs for long
// lasting connections. Default is an interval of 5 seconds per connection.
// Possible values are INTERVAL_5_SEC, INTERVAL_30_SEC, INTERVAL_1_MIN,
// INTERVAL_5_MIN, INTERVAL_10_MIN, INTERVAL_15_MIN
func (o SubnetworkLogConfigOutput) AggregationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) *string { return v.AggregationInterval }).(pulumi.StringPtrOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled.
// The value of the field must be in [0, 1]. Set the sampling rate of VPC
// flow logs within the subnetwork where 1.0 means all collected logs are
// reported and 0.0 means no logs are reported. Default is 0.5 which means
// half of all collected logs are reported.
func (o SubnetworkLogConfigOutput) FlowSampling() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) *float64 { return v.FlowSampling }).(pulumi.Float64PtrOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled.
// Configures whether metadata fields should be added to the reported VPC
// flow logs. Default is `INCLUDE_ALL_METADATA`.
func (o SubnetworkLogConfigOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

type SubnetworkLogConfigPtrOutput struct{ *pulumi.OutputState }

func (SubnetworkLogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetworkLogConfig)(nil)).Elem()
}

func (o SubnetworkLogConfigPtrOutput) ToSubnetworkLogConfigPtrOutput() SubnetworkLogConfigPtrOutput {
	return o
}

func (o SubnetworkLogConfigPtrOutput) ToSubnetworkLogConfigPtrOutputWithContext(ctx context.Context) SubnetworkLogConfigPtrOutput {
	return o
}

func (o SubnetworkLogConfigPtrOutput) Elem() SubnetworkLogConfigOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) SubnetworkLogConfig { return *v }).(SubnetworkLogConfigOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled.
// Toggles the aggregation interval for collecting flow logs. Increasing the
// interval time will reduce the amount of generated flow logs for long
// lasting connections. Default is an interval of 5 seconds per connection.
// Possible values are INTERVAL_5_SEC, INTERVAL_30_SEC, INTERVAL_1_MIN,
// INTERVAL_5_MIN, INTERVAL_10_MIN, INTERVAL_15_MIN
func (o SubnetworkLogConfigPtrOutput) AggregationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) *string {
		if v == nil {
			return nil
		}
		return v.AggregationInterval
	}).(pulumi.StringPtrOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled.
// The value of the field must be in [0, 1]. Set the sampling rate of VPC
// flow logs within the subnetwork where 1.0 means all collected logs are
// reported and 0.0 means no logs are reported. Default is 0.5 which means
// half of all collected logs are reported.
func (o SubnetworkLogConfigPtrOutput) FlowSampling() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.FlowSampling
	}).(pulumi.Float64PtrOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled.
// Configures whether metadata fields should be added to the reported VPC
// flow logs. Default is `INCLUDE_ALL_METADATA`.
func (o SubnetworkLogConfigPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

type SubnetworkSecondaryIpRange struct {
	// The range of IP addresses belonging to this subnetwork secondary
	// range. Provide this property when you create the subnetwork.
	// Ranges must be unique and non-overlapping with all primary and
	// secondary IP ranges within a network. Only IPv4 is supported.
	IpCidrRange string `pulumi:"ipCidrRange"`
	// The name associated with this subnetwork secondary range, used
	// when adding an alias IP range to a VM instance. The name must
	// be 1-63 characters long, and comply with RFC1035. The name
	// must be unique within the subnetwork.
	RangeName string `pulumi:"rangeName"`
}

// SubnetworkSecondaryIpRangeInput is an input type that accepts SubnetworkSecondaryIpRangeArgs and SubnetworkSecondaryIpRangeOutput values.
// You can construct a concrete instance of `SubnetworkSecondaryIpRangeInput` via:
//
// 		 SubnetworkSecondaryIpRangeArgs{...}
//
type SubnetworkSecondaryIpRangeInput interface {
	pulumi.Input

	ToSubnetworkSecondaryIpRangeOutput() SubnetworkSecondaryIpRangeOutput
	ToSubnetworkSecondaryIpRangeOutputWithContext(context.Context) SubnetworkSecondaryIpRangeOutput
}

type SubnetworkSecondaryIpRangeArgs struct {
	// The range of IP addresses belonging to this subnetwork secondary
	// range. Provide this property when you create the subnetwork.
	// Ranges must be unique and non-overlapping with all primary and
	// secondary IP ranges within a network. Only IPv4 is supported.
	IpCidrRange pulumi.StringInput `pulumi:"ipCidrRange"`
	// The name associated with this subnetwork secondary range, used
	// when adding an alias IP range to a VM instance. The name must
	// be 1-63 characters long, and comply with RFC1035. The name
	// must be unique within the subnetwork.
	RangeName pulumi.StringInput `pulumi:"rangeName"`
}

func (SubnetworkSecondaryIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkSecondaryIpRange)(nil)).Elem()
}

func (i SubnetworkSecondaryIpRangeArgs) ToSubnetworkSecondaryIpRangeOutput() SubnetworkSecondaryIpRangeOutput {
	return i.ToSubnetworkSecondaryIpRangeOutputWithContext(context.Background())
}

func (i SubnetworkSecondaryIpRangeArgs) ToSubnetworkSecondaryIpRangeOutputWithContext(ctx context.Context) SubnetworkSecondaryIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkSecondaryIpRangeOutput)
}

// SubnetworkSecondaryIpRangeArrayInput is an input type that accepts SubnetworkSecondaryIpRangeArray and SubnetworkSecondaryIpRangeArrayOutput values.
// You can construct a concrete instance of `SubnetworkSecondaryIpRangeArrayInput` via:
//
// 		 SubnetworkSecondaryIpRangeArray{ SubnetworkSecondaryIpRangeArgs{...} }
//
type SubnetworkSecondaryIpRangeArrayInput interface {
	pulumi.Input

	ToSubnetworkSecondaryIpRangeArrayOutput() SubnetworkSecondaryIpRangeArrayOutput
	ToSubnetworkSecondaryIpRangeArrayOutputWithContext(context.Context) SubnetworkSecondaryIpRangeArrayOutput
}

type SubnetworkSecondaryIpRangeArray []SubnetworkSecondaryIpRangeInput

func (SubnetworkSecondaryIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetworkSecondaryIpRange)(nil)).Elem()
}

func (i SubnetworkSecondaryIpRangeArray) ToSubnetworkSecondaryIpRangeArrayOutput() SubnetworkSecondaryIpRangeArrayOutput {
	return i.ToSubnetworkSecondaryIpRangeArrayOutputWithContext(context.Background())
}

func (i SubnetworkSecondaryIpRangeArray) ToSubnetworkSecondaryIpRangeArrayOutputWithContext(ctx context.Context) SubnetworkSecondaryIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkSecondaryIpRangeArrayOutput)
}

type SubnetworkSecondaryIpRangeOutput struct{ *pulumi.OutputState }

func (SubnetworkSecondaryIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkSecondaryIpRange)(nil)).Elem()
}

func (o SubnetworkSecondaryIpRangeOutput) ToSubnetworkSecondaryIpRangeOutput() SubnetworkSecondaryIpRangeOutput {
	return o
}

func (o SubnetworkSecondaryIpRangeOutput) ToSubnetworkSecondaryIpRangeOutputWithContext(ctx context.Context) SubnetworkSecondaryIpRangeOutput {
	return o
}

// The range of IP addresses belonging to this subnetwork secondary
// range. Provide this property when you create the subnetwork.
// Ranges must be unique and non-overlapping with all primary and
// secondary IP ranges within a network. Only IPv4 is supported.
func (o SubnetworkSecondaryIpRangeOutput) IpCidrRange() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkSecondaryIpRange) string { return v.IpCidrRange }).(pulumi.StringOutput)
}

// The name associated with this subnetwork secondary range, used
// when adding an alias IP range to a VM instance. The name must
// be 1-63 characters long, and comply with RFC1035. The name
// must be unique within the subnetwork.
func (o SubnetworkSecondaryIpRangeOutput) RangeName() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkSecondaryIpRange) string { return v.RangeName }).(pulumi.StringOutput)
}

type SubnetworkSecondaryIpRangeArrayOutput struct{ *pulumi.OutputState }

func (SubnetworkSecondaryIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetworkSecondaryIpRange)(nil)).Elem()
}

func (o SubnetworkSecondaryIpRangeArrayOutput) ToSubnetworkSecondaryIpRangeArrayOutput() SubnetworkSecondaryIpRangeArrayOutput {
	return o
}

func (o SubnetworkSecondaryIpRangeArrayOutput) ToSubnetworkSecondaryIpRangeArrayOutputWithContext(ctx context.Context) SubnetworkSecondaryIpRangeArrayOutput {
	return o
}

func (o SubnetworkSecondaryIpRangeArrayOutput) Index(i pulumi.IntInput) SubnetworkSecondaryIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubnetworkSecondaryIpRange {
		return vs[0].([]SubnetworkSecondaryIpRange)[vs[1].(int)]
	}).(SubnetworkSecondaryIpRangeOutput)
}

type URLMapHeaderAction struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.  Structure is documented below.
	RequestHeadersToAdds []URLMapHeaderActionRequestHeadersToAdd `pulumi:"requestHeadersToAdds"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemoves []string `pulumi:"requestHeadersToRemoves"`
	// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
	ResponseHeadersToAdds []URLMapHeaderActionResponseHeadersToAdd `pulumi:"responseHeadersToAdds"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemoves []string `pulumi:"responseHeadersToRemoves"`
}

// URLMapHeaderActionInput is an input type that accepts URLMapHeaderActionArgs and URLMapHeaderActionOutput values.
// You can construct a concrete instance of `URLMapHeaderActionInput` via:
//
// 		 URLMapHeaderActionArgs{...}
//
type URLMapHeaderActionInput interface {
	pulumi.Input

	ToURLMapHeaderActionOutput() URLMapHeaderActionOutput
	ToURLMapHeaderActionOutputWithContext(context.Context) URLMapHeaderActionOutput
}

type URLMapHeaderActionArgs struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.  Structure is documented below.
	RequestHeadersToAdds URLMapHeaderActionRequestHeadersToAddArrayInput `pulumi:"requestHeadersToAdds"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemoves pulumi.StringArrayInput `pulumi:"requestHeadersToRemoves"`
	// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
	ResponseHeadersToAdds URLMapHeaderActionResponseHeadersToAddArrayInput `pulumi:"responseHeadersToAdds"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemoves pulumi.StringArrayInput `pulumi:"responseHeadersToRemoves"`
}

func (URLMapHeaderActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapHeaderAction)(nil)).Elem()
}

func (i URLMapHeaderActionArgs) ToURLMapHeaderActionOutput() URLMapHeaderActionOutput {
	return i.ToURLMapHeaderActionOutputWithContext(context.Background())
}

func (i URLMapHeaderActionArgs) ToURLMapHeaderActionOutputWithContext(ctx context.Context) URLMapHeaderActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapHeaderActionOutput)
}

func (i URLMapHeaderActionArgs) ToURLMapHeaderActionPtrOutput() URLMapHeaderActionPtrOutput {
	return i.ToURLMapHeaderActionPtrOutputWithContext(context.Background())
}

func (i URLMapHeaderActionArgs) ToURLMapHeaderActionPtrOutputWithContext(ctx context.Context) URLMapHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapHeaderActionOutput).ToURLMapHeaderActionPtrOutputWithContext(ctx)
}

// URLMapHeaderActionPtrInput is an input type that accepts URLMapHeaderActionArgs, URLMapHeaderActionPtr and URLMapHeaderActionPtrOutput values.
// You can construct a concrete instance of `URLMapHeaderActionPtrInput` via:
//
// 		 URLMapHeaderActionArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapHeaderActionPtrInput interface {
	pulumi.Input

	ToURLMapHeaderActionPtrOutput() URLMapHeaderActionPtrOutput
	ToURLMapHeaderActionPtrOutputWithContext(context.Context) URLMapHeaderActionPtrOutput
}

type urlmapHeaderActionPtrType URLMapHeaderActionArgs

func URLMapHeaderActionPtr(v *URLMapHeaderActionArgs) URLMapHeaderActionPtrInput {
	return (*urlmapHeaderActionPtrType)(v)
}

func (*urlmapHeaderActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapHeaderAction)(nil)).Elem()
}

func (i *urlmapHeaderActionPtrType) ToURLMapHeaderActionPtrOutput() URLMapHeaderActionPtrOutput {
	return i.ToURLMapHeaderActionPtrOutputWithContext(context.Background())
}

func (i *urlmapHeaderActionPtrType) ToURLMapHeaderActionPtrOutputWithContext(ctx context.Context) URLMapHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapHeaderActionPtrOutput)
}

type URLMapHeaderActionOutput struct{ *pulumi.OutputState }

func (URLMapHeaderActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapHeaderAction)(nil)).Elem()
}

func (o URLMapHeaderActionOutput) ToURLMapHeaderActionOutput() URLMapHeaderActionOutput {
	return o
}

func (o URLMapHeaderActionOutput) ToURLMapHeaderActionOutputWithContext(ctx context.Context) URLMapHeaderActionOutput {
	return o
}

func (o URLMapHeaderActionOutput) ToURLMapHeaderActionPtrOutput() URLMapHeaderActionPtrOutput {
	return o.ToURLMapHeaderActionPtrOutputWithContext(context.Background())
}

func (o URLMapHeaderActionOutput) ToURLMapHeaderActionPtrOutputWithContext(ctx context.Context) URLMapHeaderActionPtrOutput {
	return o.ApplyT(func(v URLMapHeaderAction) *URLMapHeaderAction {
		return &v
	}).(URLMapHeaderActionPtrOutput)
}

// Headers to add to a matching request prior to forwarding the request to the
// backendService.  Structure is documented below.
func (o URLMapHeaderActionOutput) RequestHeadersToAdds() URLMapHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v URLMapHeaderAction) []URLMapHeaderActionRequestHeadersToAdd { return v.RequestHeadersToAdds }).(URLMapHeaderActionRequestHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request
// prior to forwarding the request to the backendService.
func (o URLMapHeaderActionOutput) RequestHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapHeaderAction) []string { return v.RequestHeadersToRemoves }).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
func (o URLMapHeaderActionOutput) ResponseHeadersToAdds() URLMapHeaderActionResponseHeadersToAddArrayOutput {
	return o.ApplyT(func(v URLMapHeaderAction) []URLMapHeaderActionResponseHeadersToAdd { return v.ResponseHeadersToAdds }).(URLMapHeaderActionResponseHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the response
// prior to sending the response back to the client.
func (o URLMapHeaderActionOutput) ResponseHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapHeaderAction) []string { return v.ResponseHeadersToRemoves }).(pulumi.StringArrayOutput)
}

type URLMapHeaderActionPtrOutput struct{ *pulumi.OutputState }

func (URLMapHeaderActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapHeaderAction)(nil)).Elem()
}

func (o URLMapHeaderActionPtrOutput) ToURLMapHeaderActionPtrOutput() URLMapHeaderActionPtrOutput {
	return o
}

func (o URLMapHeaderActionPtrOutput) ToURLMapHeaderActionPtrOutputWithContext(ctx context.Context) URLMapHeaderActionPtrOutput {
	return o
}

func (o URLMapHeaderActionPtrOutput) Elem() URLMapHeaderActionOutput {
	return o.ApplyT(func(v *URLMapHeaderAction) URLMapHeaderAction { return *v }).(URLMapHeaderActionOutput)
}

// Headers to add to a matching request prior to forwarding the request to the
// backendService.  Structure is documented below.
func (o URLMapHeaderActionPtrOutput) RequestHeadersToAdds() URLMapHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v *URLMapHeaderAction) []URLMapHeaderActionRequestHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToAdds
	}).(URLMapHeaderActionRequestHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request
// prior to forwarding the request to the backendService.
func (o URLMapHeaderActionPtrOutput) RequestHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
func (o URLMapHeaderActionPtrOutput) ResponseHeadersToAdds() URLMapHeaderActionResponseHeadersToAddArrayOutput {
	return o.ApplyT(func(v *URLMapHeaderAction) []URLMapHeaderActionResponseHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToAdds
	}).(URLMapHeaderActionResponseHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the response
// prior to sending the response back to the client.
func (o URLMapHeaderActionPtrOutput) ResponseHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

type URLMapHeaderActionRequestHeadersToAdd struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace bool `pulumi:"replace"`
}

// URLMapHeaderActionRequestHeadersToAddInput is an input type that accepts URLMapHeaderActionRequestHeadersToAddArgs and URLMapHeaderActionRequestHeadersToAddOutput values.
// You can construct a concrete instance of `URLMapHeaderActionRequestHeadersToAddInput` via:
//
// 		 URLMapHeaderActionRequestHeadersToAddArgs{...}
//
type URLMapHeaderActionRequestHeadersToAddInput interface {
	pulumi.Input

	ToURLMapHeaderActionRequestHeadersToAddOutput() URLMapHeaderActionRequestHeadersToAddOutput
	ToURLMapHeaderActionRequestHeadersToAddOutputWithContext(context.Context) URLMapHeaderActionRequestHeadersToAddOutput
}

type URLMapHeaderActionRequestHeadersToAddArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (URLMapHeaderActionRequestHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i URLMapHeaderActionRequestHeadersToAddArgs) ToURLMapHeaderActionRequestHeadersToAddOutput() URLMapHeaderActionRequestHeadersToAddOutput {
	return i.ToURLMapHeaderActionRequestHeadersToAddOutputWithContext(context.Background())
}

func (i URLMapHeaderActionRequestHeadersToAddArgs) ToURLMapHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) URLMapHeaderActionRequestHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapHeaderActionRequestHeadersToAddOutput)
}

// URLMapHeaderActionRequestHeadersToAddArrayInput is an input type that accepts URLMapHeaderActionRequestHeadersToAddArray and URLMapHeaderActionRequestHeadersToAddArrayOutput values.
// You can construct a concrete instance of `URLMapHeaderActionRequestHeadersToAddArrayInput` via:
//
// 		 URLMapHeaderActionRequestHeadersToAddArray{ URLMapHeaderActionRequestHeadersToAddArgs{...} }
//
type URLMapHeaderActionRequestHeadersToAddArrayInput interface {
	pulumi.Input

	ToURLMapHeaderActionRequestHeadersToAddArrayOutput() URLMapHeaderActionRequestHeadersToAddArrayOutput
	ToURLMapHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Context) URLMapHeaderActionRequestHeadersToAddArrayOutput
}

type URLMapHeaderActionRequestHeadersToAddArray []URLMapHeaderActionRequestHeadersToAddInput

func (URLMapHeaderActionRequestHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i URLMapHeaderActionRequestHeadersToAddArray) ToURLMapHeaderActionRequestHeadersToAddArrayOutput() URLMapHeaderActionRequestHeadersToAddArrayOutput {
	return i.ToURLMapHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Background())
}

func (i URLMapHeaderActionRequestHeadersToAddArray) ToURLMapHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapHeaderActionRequestHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapHeaderActionRequestHeadersToAddArrayOutput)
}

type URLMapHeaderActionRequestHeadersToAddOutput struct{ *pulumi.OutputState }

func (URLMapHeaderActionRequestHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o URLMapHeaderActionRequestHeadersToAddOutput) ToURLMapHeaderActionRequestHeadersToAddOutput() URLMapHeaderActionRequestHeadersToAddOutput {
	return o
}

func (o URLMapHeaderActionRequestHeadersToAddOutput) ToURLMapHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) URLMapHeaderActionRequestHeadersToAddOutput {
	return o
}

// The name of the header.
func (o URLMapHeaderActionRequestHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapHeaderActionRequestHeadersToAdd) string { return v.HeaderName }).(pulumi.StringOutput)
}

// The value of the header to add.
func (o URLMapHeaderActionRequestHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapHeaderActionRequestHeadersToAdd) string { return v.HeaderValue }).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the
// header. If true, headerValue is set for the header, discarding any values that
// were set for that header.
func (o URLMapHeaderActionRequestHeadersToAddOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v URLMapHeaderActionRequestHeadersToAdd) bool { return v.Replace }).(pulumi.BoolOutput)
}

type URLMapHeaderActionRequestHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (URLMapHeaderActionRequestHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o URLMapHeaderActionRequestHeadersToAddArrayOutput) ToURLMapHeaderActionRequestHeadersToAddArrayOutput() URLMapHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o URLMapHeaderActionRequestHeadersToAddArrayOutput) ToURLMapHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o URLMapHeaderActionRequestHeadersToAddArrayOutput) Index(i pulumi.IntInput) URLMapHeaderActionRequestHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapHeaderActionRequestHeadersToAdd {
		return vs[0].([]URLMapHeaderActionRequestHeadersToAdd)[vs[1].(int)]
	}).(URLMapHeaderActionRequestHeadersToAddOutput)
}

type URLMapHeaderActionResponseHeadersToAdd struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace bool `pulumi:"replace"`
}

// URLMapHeaderActionResponseHeadersToAddInput is an input type that accepts URLMapHeaderActionResponseHeadersToAddArgs and URLMapHeaderActionResponseHeadersToAddOutput values.
// You can construct a concrete instance of `URLMapHeaderActionResponseHeadersToAddInput` via:
//
// 		 URLMapHeaderActionResponseHeadersToAddArgs{...}
//
type URLMapHeaderActionResponseHeadersToAddInput interface {
	pulumi.Input

	ToURLMapHeaderActionResponseHeadersToAddOutput() URLMapHeaderActionResponseHeadersToAddOutput
	ToURLMapHeaderActionResponseHeadersToAddOutputWithContext(context.Context) URLMapHeaderActionResponseHeadersToAddOutput
}

type URLMapHeaderActionResponseHeadersToAddArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (URLMapHeaderActionResponseHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (i URLMapHeaderActionResponseHeadersToAddArgs) ToURLMapHeaderActionResponseHeadersToAddOutput() URLMapHeaderActionResponseHeadersToAddOutput {
	return i.ToURLMapHeaderActionResponseHeadersToAddOutputWithContext(context.Background())
}

func (i URLMapHeaderActionResponseHeadersToAddArgs) ToURLMapHeaderActionResponseHeadersToAddOutputWithContext(ctx context.Context) URLMapHeaderActionResponseHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapHeaderActionResponseHeadersToAddOutput)
}

// URLMapHeaderActionResponseHeadersToAddArrayInput is an input type that accepts URLMapHeaderActionResponseHeadersToAddArray and URLMapHeaderActionResponseHeadersToAddArrayOutput values.
// You can construct a concrete instance of `URLMapHeaderActionResponseHeadersToAddArrayInput` via:
//
// 		 URLMapHeaderActionResponseHeadersToAddArray{ URLMapHeaderActionResponseHeadersToAddArgs{...} }
//
type URLMapHeaderActionResponseHeadersToAddArrayInput interface {
	pulumi.Input

	ToURLMapHeaderActionResponseHeadersToAddArrayOutput() URLMapHeaderActionResponseHeadersToAddArrayOutput
	ToURLMapHeaderActionResponseHeadersToAddArrayOutputWithContext(context.Context) URLMapHeaderActionResponseHeadersToAddArrayOutput
}

type URLMapHeaderActionResponseHeadersToAddArray []URLMapHeaderActionResponseHeadersToAddInput

func (URLMapHeaderActionResponseHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (i URLMapHeaderActionResponseHeadersToAddArray) ToURLMapHeaderActionResponseHeadersToAddArrayOutput() URLMapHeaderActionResponseHeadersToAddArrayOutput {
	return i.ToURLMapHeaderActionResponseHeadersToAddArrayOutputWithContext(context.Background())
}

func (i URLMapHeaderActionResponseHeadersToAddArray) ToURLMapHeaderActionResponseHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapHeaderActionResponseHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapHeaderActionResponseHeadersToAddArrayOutput)
}

type URLMapHeaderActionResponseHeadersToAddOutput struct{ *pulumi.OutputState }

func (URLMapHeaderActionResponseHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (o URLMapHeaderActionResponseHeadersToAddOutput) ToURLMapHeaderActionResponseHeadersToAddOutput() URLMapHeaderActionResponseHeadersToAddOutput {
	return o
}

func (o URLMapHeaderActionResponseHeadersToAddOutput) ToURLMapHeaderActionResponseHeadersToAddOutputWithContext(ctx context.Context) URLMapHeaderActionResponseHeadersToAddOutput {
	return o
}

// The name of the header.
func (o URLMapHeaderActionResponseHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapHeaderActionResponseHeadersToAdd) string { return v.HeaderName }).(pulumi.StringOutput)
}

// The value of the header to add.
func (o URLMapHeaderActionResponseHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapHeaderActionResponseHeadersToAdd) string { return v.HeaderValue }).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the
// header. If true, headerValue is set for the header, discarding any values that
// were set for that header.
func (o URLMapHeaderActionResponseHeadersToAddOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v URLMapHeaderActionResponseHeadersToAdd) bool { return v.Replace }).(pulumi.BoolOutput)
}

type URLMapHeaderActionResponseHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (URLMapHeaderActionResponseHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (o URLMapHeaderActionResponseHeadersToAddArrayOutput) ToURLMapHeaderActionResponseHeadersToAddArrayOutput() URLMapHeaderActionResponseHeadersToAddArrayOutput {
	return o
}

func (o URLMapHeaderActionResponseHeadersToAddArrayOutput) ToURLMapHeaderActionResponseHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapHeaderActionResponseHeadersToAddArrayOutput {
	return o
}

func (o URLMapHeaderActionResponseHeadersToAddArrayOutput) Index(i pulumi.IntInput) URLMapHeaderActionResponseHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapHeaderActionResponseHeadersToAdd {
		return vs[0].([]URLMapHeaderActionResponseHeadersToAdd)[vs[1].(int)]
	}).(URLMapHeaderActionResponseHeadersToAddOutput)
}

type URLMapHostRule struct {
	// Description of this test case.
	Description *string `pulumi:"description"`
	// The list of host patterns to match. They must be valid hostnames, except * will
	// match any string of ([a-z0-9-.]*). In that case, * must be the first character
	// and must be followed in the pattern by either - or ..
	Hosts []string `pulumi:"hosts"`
	// The name of the PathMatcher to use to match the path portion of the URL if the
	// hostRule matches the URL's host portion.
	PathMatcher string `pulumi:"pathMatcher"`
}

// URLMapHostRuleInput is an input type that accepts URLMapHostRuleArgs and URLMapHostRuleOutput values.
// You can construct a concrete instance of `URLMapHostRuleInput` via:
//
// 		 URLMapHostRuleArgs{...}
//
type URLMapHostRuleInput interface {
	pulumi.Input

	ToURLMapHostRuleOutput() URLMapHostRuleOutput
	ToURLMapHostRuleOutputWithContext(context.Context) URLMapHostRuleOutput
}

type URLMapHostRuleArgs struct {
	// Description of this test case.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The list of host patterns to match. They must be valid hostnames, except * will
	// match any string of ([a-z0-9-.]*). In that case, * must be the first character
	// and must be followed in the pattern by either - or ..
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// The name of the PathMatcher to use to match the path portion of the URL if the
	// hostRule matches the URL's host portion.
	PathMatcher pulumi.StringInput `pulumi:"pathMatcher"`
}

func (URLMapHostRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapHostRule)(nil)).Elem()
}

func (i URLMapHostRuleArgs) ToURLMapHostRuleOutput() URLMapHostRuleOutput {
	return i.ToURLMapHostRuleOutputWithContext(context.Background())
}

func (i URLMapHostRuleArgs) ToURLMapHostRuleOutputWithContext(ctx context.Context) URLMapHostRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapHostRuleOutput)
}

// URLMapHostRuleArrayInput is an input type that accepts URLMapHostRuleArray and URLMapHostRuleArrayOutput values.
// You can construct a concrete instance of `URLMapHostRuleArrayInput` via:
//
// 		 URLMapHostRuleArray{ URLMapHostRuleArgs{...} }
//
type URLMapHostRuleArrayInput interface {
	pulumi.Input

	ToURLMapHostRuleArrayOutput() URLMapHostRuleArrayOutput
	ToURLMapHostRuleArrayOutputWithContext(context.Context) URLMapHostRuleArrayOutput
}

type URLMapHostRuleArray []URLMapHostRuleInput

func (URLMapHostRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapHostRule)(nil)).Elem()
}

func (i URLMapHostRuleArray) ToURLMapHostRuleArrayOutput() URLMapHostRuleArrayOutput {
	return i.ToURLMapHostRuleArrayOutputWithContext(context.Background())
}

func (i URLMapHostRuleArray) ToURLMapHostRuleArrayOutputWithContext(ctx context.Context) URLMapHostRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapHostRuleArrayOutput)
}

type URLMapHostRuleOutput struct{ *pulumi.OutputState }

func (URLMapHostRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapHostRule)(nil)).Elem()
}

func (o URLMapHostRuleOutput) ToURLMapHostRuleOutput() URLMapHostRuleOutput {
	return o
}

func (o URLMapHostRuleOutput) ToURLMapHostRuleOutputWithContext(ctx context.Context) URLMapHostRuleOutput {
	return o
}

// Description of this test case.
func (o URLMapHostRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapHostRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The list of host patterns to match. They must be valid hostnames, except * will
// match any string of ([a-z0-9-.]*). In that case, * must be the first character
// and must be followed in the pattern by either - or ..
func (o URLMapHostRuleOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapHostRule) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// The name of the PathMatcher to use to match the path portion of the URL if the
// hostRule matches the URL's host portion.
func (o URLMapHostRuleOutput) PathMatcher() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapHostRule) string { return v.PathMatcher }).(pulumi.StringOutput)
}

type URLMapHostRuleArrayOutput struct{ *pulumi.OutputState }

func (URLMapHostRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapHostRule)(nil)).Elem()
}

func (o URLMapHostRuleArrayOutput) ToURLMapHostRuleArrayOutput() URLMapHostRuleArrayOutput {
	return o
}

func (o URLMapHostRuleArrayOutput) ToURLMapHostRuleArrayOutputWithContext(ctx context.Context) URLMapHostRuleArrayOutput {
	return o
}

func (o URLMapHostRuleArrayOutput) Index(i pulumi.IntInput) URLMapHostRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapHostRule {
		return vs[0].([]URLMapHostRule)[vs[1].(int)]
	}).(URLMapHostRuleOutput)
}

type URLMapPathMatcher struct {
	// The backend service or backend bucket to use when none of the given paths match.
	DefaultService *string `pulumi:"defaultService"`
	// Description of this test case.
	Description *string `pulumi:"description"`
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
	HeaderAction *URLMapPathMatcherHeaderAction `pulumi:"headerAction"`
	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name string `pulumi:"name"`
	// The list of path rules. Use this list instead of routeRules when routing based
	// on simple path matching is all that's required. The order by which path rules
	// are specified does not matter. Matches are always done on the longest-path-first
	// basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
	// irrespective of the order in which those paths appear in this list. Within a
	// given pathMatcher, only one of pathRules or routeRules must be set.  Structure is documented below.
	PathRules []URLMapPathMatcherPathRule `pulumi:"pathRules"`
	// The list of ordered HTTP route rules. Use this list instead of pathRules when
	// advanced route matching and routing actions are desired. The order of specifying
	// routeRules matters: the first rule that matches will cause its specified routing
	// action to take effect. Within a given pathMatcher, only one of pathRules or
	// routeRules must be set. routeRules are not supported in UrlMaps intended for
	// External load balancers.  Structure is documented below.
	RouteRules []URLMapPathMatcherRouteRule `pulumi:"routeRules"`
}

// URLMapPathMatcherInput is an input type that accepts URLMapPathMatcherArgs and URLMapPathMatcherOutput values.
// You can construct a concrete instance of `URLMapPathMatcherInput` via:
//
// 		 URLMapPathMatcherArgs{...}
//
type URLMapPathMatcherInput interface {
	pulumi.Input

	ToURLMapPathMatcherOutput() URLMapPathMatcherOutput
	ToURLMapPathMatcherOutputWithContext(context.Context) URLMapPathMatcherOutput
}

type URLMapPathMatcherArgs struct {
	// The backend service or backend bucket to use when none of the given paths match.
	DefaultService pulumi.StringPtrInput `pulumi:"defaultService"`
	// Description of this test case.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
	HeaderAction URLMapPathMatcherHeaderActionPtrInput `pulumi:"headerAction"`
	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name pulumi.StringInput `pulumi:"name"`
	// The list of path rules. Use this list instead of routeRules when routing based
	// on simple path matching is all that's required. The order by which path rules
	// are specified does not matter. Matches are always done on the longest-path-first
	// basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
	// irrespective of the order in which those paths appear in this list. Within a
	// given pathMatcher, only one of pathRules or routeRules must be set.  Structure is documented below.
	PathRules URLMapPathMatcherPathRuleArrayInput `pulumi:"pathRules"`
	// The list of ordered HTTP route rules. Use this list instead of pathRules when
	// advanced route matching and routing actions are desired. The order of specifying
	// routeRules matters: the first rule that matches will cause its specified routing
	// action to take effect. Within a given pathMatcher, only one of pathRules or
	// routeRules must be set. routeRules are not supported in UrlMaps intended for
	// External load balancers.  Structure is documented below.
	RouteRules URLMapPathMatcherRouteRuleArrayInput `pulumi:"routeRules"`
}

func (URLMapPathMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcher)(nil)).Elem()
}

func (i URLMapPathMatcherArgs) ToURLMapPathMatcherOutput() URLMapPathMatcherOutput {
	return i.ToURLMapPathMatcherOutputWithContext(context.Background())
}

func (i URLMapPathMatcherArgs) ToURLMapPathMatcherOutputWithContext(ctx context.Context) URLMapPathMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherOutput)
}

// URLMapPathMatcherArrayInput is an input type that accepts URLMapPathMatcherArray and URLMapPathMatcherArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherArrayInput` via:
//
// 		 URLMapPathMatcherArray{ URLMapPathMatcherArgs{...} }
//
type URLMapPathMatcherArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherArrayOutput() URLMapPathMatcherArrayOutput
	ToURLMapPathMatcherArrayOutputWithContext(context.Context) URLMapPathMatcherArrayOutput
}

type URLMapPathMatcherArray []URLMapPathMatcherInput

func (URLMapPathMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcher)(nil)).Elem()
}

func (i URLMapPathMatcherArray) ToURLMapPathMatcherArrayOutput() URLMapPathMatcherArrayOutput {
	return i.ToURLMapPathMatcherArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherArray) ToURLMapPathMatcherArrayOutputWithContext(ctx context.Context) URLMapPathMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherArrayOutput)
}

type URLMapPathMatcherOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcher)(nil)).Elem()
}

func (o URLMapPathMatcherOutput) ToURLMapPathMatcherOutput() URLMapPathMatcherOutput {
	return o
}

func (o URLMapPathMatcherOutput) ToURLMapPathMatcherOutputWithContext(ctx context.Context) URLMapPathMatcherOutput {
	return o
}

// The backend service or backend bucket to use when none of the given paths match.
func (o URLMapPathMatcherOutput) DefaultService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcher) *string { return v.DefaultService }).(pulumi.StringPtrOutput)
}

// Description of this test case.
func (o URLMapPathMatcherOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcher) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies changes to request and response headers that need to take effect for
// the selected backendService. headerAction specified here take effect before
// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
func (o URLMapPathMatcherOutput) HeaderAction() URLMapPathMatcherHeaderActionPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcher) *URLMapPathMatcherHeaderAction { return v.HeaderAction }).(URLMapPathMatcherHeaderActionPtrOutput)
}

// The name of the query parameter to match. The query parameter must exist in the
// request, in the absence of which the request match fails.
func (o URLMapPathMatcherOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcher) string { return v.Name }).(pulumi.StringOutput)
}

// The list of path rules. Use this list instead of routeRules when routing based
// on simple path matching is all that's required. The order by which path rules
// are specified does not matter. Matches are always done on the longest-path-first
// basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
// irrespective of the order in which those paths appear in this list. Within a
// given pathMatcher, only one of pathRules or routeRules must be set.  Structure is documented below.
func (o URLMapPathMatcherOutput) PathRules() URLMapPathMatcherPathRuleArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcher) []URLMapPathMatcherPathRule { return v.PathRules }).(URLMapPathMatcherPathRuleArrayOutput)
}

// The list of ordered HTTP route rules. Use this list instead of pathRules when
// advanced route matching and routing actions are desired. The order of specifying
// routeRules matters: the first rule that matches will cause its specified routing
// action to take effect. Within a given pathMatcher, only one of pathRules or
// routeRules must be set. routeRules are not supported in UrlMaps intended for
// External load balancers.  Structure is documented below.
func (o URLMapPathMatcherOutput) RouteRules() URLMapPathMatcherRouteRuleArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcher) []URLMapPathMatcherRouteRule { return v.RouteRules }).(URLMapPathMatcherRouteRuleArrayOutput)
}

type URLMapPathMatcherArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcher)(nil)).Elem()
}

func (o URLMapPathMatcherArrayOutput) ToURLMapPathMatcherArrayOutput() URLMapPathMatcherArrayOutput {
	return o
}

func (o URLMapPathMatcherArrayOutput) ToURLMapPathMatcherArrayOutputWithContext(ctx context.Context) URLMapPathMatcherArrayOutput {
	return o
}

func (o URLMapPathMatcherArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcher {
		return vs[0].([]URLMapPathMatcher)[vs[1].(int)]
	}).(URLMapPathMatcherOutput)
}

type URLMapPathMatcherHeaderAction struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.  Structure is documented below.
	RequestHeadersToAdds []URLMapPathMatcherHeaderActionRequestHeadersToAdd `pulumi:"requestHeadersToAdds"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemoves []string `pulumi:"requestHeadersToRemoves"`
	// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
	ResponseHeadersToAdds []URLMapPathMatcherHeaderActionResponseHeadersToAdd `pulumi:"responseHeadersToAdds"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemoves []string `pulumi:"responseHeadersToRemoves"`
}

// URLMapPathMatcherHeaderActionInput is an input type that accepts URLMapPathMatcherHeaderActionArgs and URLMapPathMatcherHeaderActionOutput values.
// You can construct a concrete instance of `URLMapPathMatcherHeaderActionInput` via:
//
// 		 URLMapPathMatcherHeaderActionArgs{...}
//
type URLMapPathMatcherHeaderActionInput interface {
	pulumi.Input

	ToURLMapPathMatcherHeaderActionOutput() URLMapPathMatcherHeaderActionOutput
	ToURLMapPathMatcherHeaderActionOutputWithContext(context.Context) URLMapPathMatcherHeaderActionOutput
}

type URLMapPathMatcherHeaderActionArgs struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.  Structure is documented below.
	RequestHeadersToAdds URLMapPathMatcherHeaderActionRequestHeadersToAddArrayInput `pulumi:"requestHeadersToAdds"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemoves pulumi.StringArrayInput `pulumi:"requestHeadersToRemoves"`
	// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
	ResponseHeadersToAdds URLMapPathMatcherHeaderActionResponseHeadersToAddArrayInput `pulumi:"responseHeadersToAdds"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemoves pulumi.StringArrayInput `pulumi:"responseHeadersToRemoves"`
}

func (URLMapPathMatcherHeaderActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherHeaderAction)(nil)).Elem()
}

func (i URLMapPathMatcherHeaderActionArgs) ToURLMapPathMatcherHeaderActionOutput() URLMapPathMatcherHeaderActionOutput {
	return i.ToURLMapPathMatcherHeaderActionOutputWithContext(context.Background())
}

func (i URLMapPathMatcherHeaderActionArgs) ToURLMapPathMatcherHeaderActionOutputWithContext(ctx context.Context) URLMapPathMatcherHeaderActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherHeaderActionOutput)
}

func (i URLMapPathMatcherHeaderActionArgs) ToURLMapPathMatcherHeaderActionPtrOutput() URLMapPathMatcherHeaderActionPtrOutput {
	return i.ToURLMapPathMatcherHeaderActionPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherHeaderActionArgs) ToURLMapPathMatcherHeaderActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherHeaderActionOutput).ToURLMapPathMatcherHeaderActionPtrOutputWithContext(ctx)
}

// URLMapPathMatcherHeaderActionPtrInput is an input type that accepts URLMapPathMatcherHeaderActionArgs, URLMapPathMatcherHeaderActionPtr and URLMapPathMatcherHeaderActionPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherHeaderActionPtrInput` via:
//
// 		 URLMapPathMatcherHeaderActionArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherHeaderActionPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherHeaderActionPtrOutput() URLMapPathMatcherHeaderActionPtrOutput
	ToURLMapPathMatcherHeaderActionPtrOutputWithContext(context.Context) URLMapPathMatcherHeaderActionPtrOutput
}

type urlmapPathMatcherHeaderActionPtrType URLMapPathMatcherHeaderActionArgs

func URLMapPathMatcherHeaderActionPtr(v *URLMapPathMatcherHeaderActionArgs) URLMapPathMatcherHeaderActionPtrInput {
	return (*urlmapPathMatcherHeaderActionPtrType)(v)
}

func (*urlmapPathMatcherHeaderActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherHeaderAction)(nil)).Elem()
}

func (i *urlmapPathMatcherHeaderActionPtrType) ToURLMapPathMatcherHeaderActionPtrOutput() URLMapPathMatcherHeaderActionPtrOutput {
	return i.ToURLMapPathMatcherHeaderActionPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherHeaderActionPtrType) ToURLMapPathMatcherHeaderActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherHeaderActionPtrOutput)
}

type URLMapPathMatcherHeaderActionOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherHeaderActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherHeaderAction)(nil)).Elem()
}

func (o URLMapPathMatcherHeaderActionOutput) ToURLMapPathMatcherHeaderActionOutput() URLMapPathMatcherHeaderActionOutput {
	return o
}

func (o URLMapPathMatcherHeaderActionOutput) ToURLMapPathMatcherHeaderActionOutputWithContext(ctx context.Context) URLMapPathMatcherHeaderActionOutput {
	return o
}

func (o URLMapPathMatcherHeaderActionOutput) ToURLMapPathMatcherHeaderActionPtrOutput() URLMapPathMatcherHeaderActionPtrOutput {
	return o.ToURLMapPathMatcherHeaderActionPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherHeaderActionOutput) ToURLMapPathMatcherHeaderActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherHeaderActionPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherHeaderAction) *URLMapPathMatcherHeaderAction {
		return &v
	}).(URLMapPathMatcherHeaderActionPtrOutput)
}

// Headers to add to a matching request prior to forwarding the request to the
// backendService.  Structure is documented below.
func (o URLMapPathMatcherHeaderActionOutput) RequestHeadersToAdds() URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherHeaderAction) []URLMapPathMatcherHeaderActionRequestHeadersToAdd {
		return v.RequestHeadersToAdds
	}).(URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request
// prior to forwarding the request to the backendService.
func (o URLMapPathMatcherHeaderActionOutput) RequestHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherHeaderAction) []string { return v.RequestHeadersToRemoves }).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
func (o URLMapPathMatcherHeaderActionOutput) ResponseHeadersToAdds() URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherHeaderAction) []URLMapPathMatcherHeaderActionResponseHeadersToAdd {
		return v.ResponseHeadersToAdds
	}).(URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the response
// prior to sending the response back to the client.
func (o URLMapPathMatcherHeaderActionOutput) ResponseHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherHeaderAction) []string { return v.ResponseHeadersToRemoves }).(pulumi.StringArrayOutput)
}

type URLMapPathMatcherHeaderActionPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherHeaderActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherHeaderAction)(nil)).Elem()
}

func (o URLMapPathMatcherHeaderActionPtrOutput) ToURLMapPathMatcherHeaderActionPtrOutput() URLMapPathMatcherHeaderActionPtrOutput {
	return o
}

func (o URLMapPathMatcherHeaderActionPtrOutput) ToURLMapPathMatcherHeaderActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherHeaderActionPtrOutput {
	return o
}

func (o URLMapPathMatcherHeaderActionPtrOutput) Elem() URLMapPathMatcherHeaderActionOutput {
	return o.ApplyT(func(v *URLMapPathMatcherHeaderAction) URLMapPathMatcherHeaderAction { return *v }).(URLMapPathMatcherHeaderActionOutput)
}

// Headers to add to a matching request prior to forwarding the request to the
// backendService.  Structure is documented below.
func (o URLMapPathMatcherHeaderActionPtrOutput) RequestHeadersToAdds() URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherHeaderAction) []URLMapPathMatcherHeaderActionRequestHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToAdds
	}).(URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request
// prior to forwarding the request to the backendService.
func (o URLMapPathMatcherHeaderActionPtrOutput) RequestHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
func (o URLMapPathMatcherHeaderActionPtrOutput) ResponseHeadersToAdds() URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherHeaderAction) []URLMapPathMatcherHeaderActionResponseHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToAdds
	}).(URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the response
// prior to sending the response back to the client.
func (o URLMapPathMatcherHeaderActionPtrOutput) ResponseHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

type URLMapPathMatcherHeaderActionRequestHeadersToAdd struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace bool `pulumi:"replace"`
}

// URLMapPathMatcherHeaderActionRequestHeadersToAddInput is an input type that accepts URLMapPathMatcherHeaderActionRequestHeadersToAddArgs and URLMapPathMatcherHeaderActionRequestHeadersToAddOutput values.
// You can construct a concrete instance of `URLMapPathMatcherHeaderActionRequestHeadersToAddInput` via:
//
// 		 URLMapPathMatcherHeaderActionRequestHeadersToAddArgs{...}
//
type URLMapPathMatcherHeaderActionRequestHeadersToAddInput interface {
	pulumi.Input

	ToURLMapPathMatcherHeaderActionRequestHeadersToAddOutput() URLMapPathMatcherHeaderActionRequestHeadersToAddOutput
	ToURLMapPathMatcherHeaderActionRequestHeadersToAddOutputWithContext(context.Context) URLMapPathMatcherHeaderActionRequestHeadersToAddOutput
}

type URLMapPathMatcherHeaderActionRequestHeadersToAddArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (URLMapPathMatcherHeaderActionRequestHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i URLMapPathMatcherHeaderActionRequestHeadersToAddArgs) ToURLMapPathMatcherHeaderActionRequestHeadersToAddOutput() URLMapPathMatcherHeaderActionRequestHeadersToAddOutput {
	return i.ToURLMapPathMatcherHeaderActionRequestHeadersToAddOutputWithContext(context.Background())
}

func (i URLMapPathMatcherHeaderActionRequestHeadersToAddArgs) ToURLMapPathMatcherHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) URLMapPathMatcherHeaderActionRequestHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherHeaderActionRequestHeadersToAddOutput)
}

// URLMapPathMatcherHeaderActionRequestHeadersToAddArrayInput is an input type that accepts URLMapPathMatcherHeaderActionRequestHeadersToAddArray and URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherHeaderActionRequestHeadersToAddArrayInput` via:
//
// 		 URLMapPathMatcherHeaderActionRequestHeadersToAddArray{ URLMapPathMatcherHeaderActionRequestHeadersToAddArgs{...} }
//
type URLMapPathMatcherHeaderActionRequestHeadersToAddArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput() URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput
	ToURLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Context) URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput
}

type URLMapPathMatcherHeaderActionRequestHeadersToAddArray []URLMapPathMatcherHeaderActionRequestHeadersToAddInput

func (URLMapPathMatcherHeaderActionRequestHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i URLMapPathMatcherHeaderActionRequestHeadersToAddArray) ToURLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput() URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput {
	return i.ToURLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherHeaderActionRequestHeadersToAddArray) ToURLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput)
}

type URLMapPathMatcherHeaderActionRequestHeadersToAddOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherHeaderActionRequestHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o URLMapPathMatcherHeaderActionRequestHeadersToAddOutput) ToURLMapPathMatcherHeaderActionRequestHeadersToAddOutput() URLMapPathMatcherHeaderActionRequestHeadersToAddOutput {
	return o
}

func (o URLMapPathMatcherHeaderActionRequestHeadersToAddOutput) ToURLMapPathMatcherHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) URLMapPathMatcherHeaderActionRequestHeadersToAddOutput {
	return o
}

// The name of the header.
func (o URLMapPathMatcherHeaderActionRequestHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherHeaderActionRequestHeadersToAdd) string { return v.HeaderName }).(pulumi.StringOutput)
}

// The value of the header to add.
func (o URLMapPathMatcherHeaderActionRequestHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherHeaderActionRequestHeadersToAdd) string { return v.HeaderValue }).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the
// header. If true, headerValue is set for the header, discarding any values that
// were set for that header.
func (o URLMapPathMatcherHeaderActionRequestHeadersToAddOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v URLMapPathMatcherHeaderActionRequestHeadersToAdd) bool { return v.Replace }).(pulumi.BoolOutput)
}

type URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput) ToURLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput() URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput) ToURLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherHeaderActionRequestHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherHeaderActionRequestHeadersToAdd {
		return vs[0].([]URLMapPathMatcherHeaderActionRequestHeadersToAdd)[vs[1].(int)]
	}).(URLMapPathMatcherHeaderActionRequestHeadersToAddOutput)
}

type URLMapPathMatcherHeaderActionResponseHeadersToAdd struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace bool `pulumi:"replace"`
}

// URLMapPathMatcherHeaderActionResponseHeadersToAddInput is an input type that accepts URLMapPathMatcherHeaderActionResponseHeadersToAddArgs and URLMapPathMatcherHeaderActionResponseHeadersToAddOutput values.
// You can construct a concrete instance of `URLMapPathMatcherHeaderActionResponseHeadersToAddInput` via:
//
// 		 URLMapPathMatcherHeaderActionResponseHeadersToAddArgs{...}
//
type URLMapPathMatcherHeaderActionResponseHeadersToAddInput interface {
	pulumi.Input

	ToURLMapPathMatcherHeaderActionResponseHeadersToAddOutput() URLMapPathMatcherHeaderActionResponseHeadersToAddOutput
	ToURLMapPathMatcherHeaderActionResponseHeadersToAddOutputWithContext(context.Context) URLMapPathMatcherHeaderActionResponseHeadersToAddOutput
}

type URLMapPathMatcherHeaderActionResponseHeadersToAddArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (URLMapPathMatcherHeaderActionResponseHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (i URLMapPathMatcherHeaderActionResponseHeadersToAddArgs) ToURLMapPathMatcherHeaderActionResponseHeadersToAddOutput() URLMapPathMatcherHeaderActionResponseHeadersToAddOutput {
	return i.ToURLMapPathMatcherHeaderActionResponseHeadersToAddOutputWithContext(context.Background())
}

func (i URLMapPathMatcherHeaderActionResponseHeadersToAddArgs) ToURLMapPathMatcherHeaderActionResponseHeadersToAddOutputWithContext(ctx context.Context) URLMapPathMatcherHeaderActionResponseHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherHeaderActionResponseHeadersToAddOutput)
}

// URLMapPathMatcherHeaderActionResponseHeadersToAddArrayInput is an input type that accepts URLMapPathMatcherHeaderActionResponseHeadersToAddArray and URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherHeaderActionResponseHeadersToAddArrayInput` via:
//
// 		 URLMapPathMatcherHeaderActionResponseHeadersToAddArray{ URLMapPathMatcherHeaderActionResponseHeadersToAddArgs{...} }
//
type URLMapPathMatcherHeaderActionResponseHeadersToAddArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput() URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput
	ToURLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutputWithContext(context.Context) URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput
}

type URLMapPathMatcherHeaderActionResponseHeadersToAddArray []URLMapPathMatcherHeaderActionResponseHeadersToAddInput

func (URLMapPathMatcherHeaderActionResponseHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (i URLMapPathMatcherHeaderActionResponseHeadersToAddArray) ToURLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput() URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput {
	return i.ToURLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherHeaderActionResponseHeadersToAddArray) ToURLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput)
}

type URLMapPathMatcherHeaderActionResponseHeadersToAddOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherHeaderActionResponseHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (o URLMapPathMatcherHeaderActionResponseHeadersToAddOutput) ToURLMapPathMatcherHeaderActionResponseHeadersToAddOutput() URLMapPathMatcherHeaderActionResponseHeadersToAddOutput {
	return o
}

func (o URLMapPathMatcherHeaderActionResponseHeadersToAddOutput) ToURLMapPathMatcherHeaderActionResponseHeadersToAddOutputWithContext(ctx context.Context) URLMapPathMatcherHeaderActionResponseHeadersToAddOutput {
	return o
}

// The name of the header.
func (o URLMapPathMatcherHeaderActionResponseHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherHeaderActionResponseHeadersToAdd) string { return v.HeaderName }).(pulumi.StringOutput)
}

// The value of the header to add.
func (o URLMapPathMatcherHeaderActionResponseHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherHeaderActionResponseHeadersToAdd) string { return v.HeaderValue }).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the
// header. If true, headerValue is set for the header, discarding any values that
// were set for that header.
func (o URLMapPathMatcherHeaderActionResponseHeadersToAddOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v URLMapPathMatcherHeaderActionResponseHeadersToAdd) bool { return v.Replace }).(pulumi.BoolOutput)
}

type URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (o URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput) ToURLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput() URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput {
	return o
}

func (o URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput) ToURLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput {
	return o
}

func (o URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherHeaderActionResponseHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherHeaderActionResponseHeadersToAdd {
		return vs[0].([]URLMapPathMatcherHeaderActionResponseHeadersToAdd)[vs[1].(int)]
	}).(URLMapPathMatcherHeaderActionResponseHeadersToAddOutput)
}

type URLMapPathMatcherPathRule struct {
	// The list of path patterns to match. Each must start with / and the only place a
	// * is allowed is at the end following a /. The string fed to the path matcher
	// does not include any text after the first ? or #, and those chars are not
	// allowed here.
	Paths []string `pulumi:"paths"`
	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.  Structure is documented below.
	RouteAction *URLMapPathMatcherPathRuleRouteAction `pulumi:"routeAction"`
	// The backend service or backend bucket link that should be matched by this test.
	Service *string `pulumi:"service"`
	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.  Structure is documented below.
	UrlRedirect *URLMapPathMatcherPathRuleUrlRedirect `pulumi:"urlRedirect"`
}

// URLMapPathMatcherPathRuleInput is an input type that accepts URLMapPathMatcherPathRuleArgs and URLMapPathMatcherPathRuleOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleInput` via:
//
// 		 URLMapPathMatcherPathRuleArgs{...}
//
type URLMapPathMatcherPathRuleInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleOutput() URLMapPathMatcherPathRuleOutput
	ToURLMapPathMatcherPathRuleOutputWithContext(context.Context) URLMapPathMatcherPathRuleOutput
}

type URLMapPathMatcherPathRuleArgs struct {
	// The list of path patterns to match. Each must start with / and the only place a
	// * is allowed is at the end following a /. The string fed to the path matcher
	// does not include any text after the first ? or #, and those chars are not
	// allowed here.
	Paths pulumi.StringArrayInput `pulumi:"paths"`
	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.  Structure is documented below.
	RouteAction URLMapPathMatcherPathRuleRouteActionPtrInput `pulumi:"routeAction"`
	// The backend service or backend bucket link that should be matched by this test.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.  Structure is documented below.
	UrlRedirect URLMapPathMatcherPathRuleUrlRedirectPtrInput `pulumi:"urlRedirect"`
}

func (URLMapPathMatcherPathRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRule)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleArgs) ToURLMapPathMatcherPathRuleOutput() URLMapPathMatcherPathRuleOutput {
	return i.ToURLMapPathMatcherPathRuleOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleArgs) ToURLMapPathMatcherPathRuleOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleOutput)
}

// URLMapPathMatcherPathRuleArrayInput is an input type that accepts URLMapPathMatcherPathRuleArray and URLMapPathMatcherPathRuleArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleArrayInput` via:
//
// 		 URLMapPathMatcherPathRuleArray{ URLMapPathMatcherPathRuleArgs{...} }
//
type URLMapPathMatcherPathRuleArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleArrayOutput() URLMapPathMatcherPathRuleArrayOutput
	ToURLMapPathMatcherPathRuleArrayOutputWithContext(context.Context) URLMapPathMatcherPathRuleArrayOutput
}

type URLMapPathMatcherPathRuleArray []URLMapPathMatcherPathRuleInput

func (URLMapPathMatcherPathRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherPathRule)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleArray) ToURLMapPathMatcherPathRuleArrayOutput() URLMapPathMatcherPathRuleArrayOutput {
	return i.ToURLMapPathMatcherPathRuleArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleArray) ToURLMapPathMatcherPathRuleArrayOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleArrayOutput)
}

type URLMapPathMatcherPathRuleOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRule)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleOutput) ToURLMapPathMatcherPathRuleOutput() URLMapPathMatcherPathRuleOutput {
	return o
}

func (o URLMapPathMatcherPathRuleOutput) ToURLMapPathMatcherPathRuleOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleOutput {
	return o
}

// The list of path patterns to match. Each must start with / and the only place a
// * is allowed is at the end following a /. The string fed to the path matcher
// does not include any text after the first ? or #, and those chars are not
// allowed here.
func (o URLMapPathMatcherPathRuleOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRule) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// In response to a matching matchRule, the load balancer performs advanced routing
// actions like URL rewrites, header transformations, etc. prior to forwarding the
// request to the selected backend. If  routeAction specifies any
// weightedBackendServices, service must not be set. Conversely if service is set,
// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
// or urlRedirect must be set.  Structure is documented below.
func (o URLMapPathMatcherPathRuleOutput) RouteAction() URLMapPathMatcherPathRuleRouteActionPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRule) *URLMapPathMatcherPathRuleRouteAction { return v.RouteAction }).(URLMapPathMatcherPathRuleRouteActionPtrOutput)
}

// The backend service or backend bucket link that should be matched by this test.
func (o URLMapPathMatcherPathRuleOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRule) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// When this rule is matched, the request is redirected to a URL specified by
// urlRedirect. If urlRedirect is specified, service or routeAction must not be
// set.  Structure is documented below.
func (o URLMapPathMatcherPathRuleOutput) UrlRedirect() URLMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRule) *URLMapPathMatcherPathRuleUrlRedirect { return v.UrlRedirect }).(URLMapPathMatcherPathRuleUrlRedirectPtrOutput)
}

type URLMapPathMatcherPathRuleArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherPathRule)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleArrayOutput) ToURLMapPathMatcherPathRuleArrayOutput() URLMapPathMatcherPathRuleArrayOutput {
	return o
}

func (o URLMapPathMatcherPathRuleArrayOutput) ToURLMapPathMatcherPathRuleArrayOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleArrayOutput {
	return o
}

func (o URLMapPathMatcherPathRuleArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherPathRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherPathRule {
		return vs[0].([]URLMapPathMatcherPathRule)[vs[1].(int)]
	}).(URLMapPathMatcherPathRuleOutput)
}

type URLMapPathMatcherPathRuleRouteAction struct {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing  Structure is documented below.
	CorsPolicy *URLMapPathMatcherPathRuleRouteActionCorsPolicy `pulumi:"corsPolicy"`
	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retryPolicy will be
	// ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
	FaultInjectionPolicy *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy `pulumi:"faultInjectionPolicy"`
	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.  Structure is documented below.
	RequestMirrorPolicy *URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy `pulumi:"requestMirrorPolicy"`
	// Specifies the retry policy associated with this route.  Structure is documented below.
	RetryPolicy *URLMapPathMatcherPathRuleRouteActionRetryPolicy `pulumi:"retryPolicy"`
	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.  Structure is documented below.
	Timeout *URLMapPathMatcherPathRuleRouteActionTimeout `pulumi:"timeout"`
	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service  Structure is documented below.
	UrlRewrite *URLMapPathMatcherPathRuleRouteActionUrlRewrite `pulumi:"urlRewrite"`
	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.  Structure is documented below.
	WeightedBackendServices []URLMapPathMatcherPathRuleRouteActionWeightedBackendService `pulumi:"weightedBackendServices"`
}

// URLMapPathMatcherPathRuleRouteActionInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionArgs and URLMapPathMatcherPathRuleRouteActionOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionArgs{...}
//
type URLMapPathMatcherPathRuleRouteActionInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionOutput() URLMapPathMatcherPathRuleRouteActionOutput
	ToURLMapPathMatcherPathRuleRouteActionOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionOutput
}

type URLMapPathMatcherPathRuleRouteActionArgs struct {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing  Structure is documented below.
	CorsPolicy URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrInput `pulumi:"corsPolicy"`
	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retryPolicy will be
	// ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
	FaultInjectionPolicy URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrInput `pulumi:"faultInjectionPolicy"`
	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.  Structure is documented below.
	RequestMirrorPolicy URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrInput `pulumi:"requestMirrorPolicy"`
	// Specifies the retry policy associated with this route.  Structure is documented below.
	RetryPolicy URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrInput `pulumi:"retryPolicy"`
	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.  Structure is documented below.
	Timeout URLMapPathMatcherPathRuleRouteActionTimeoutPtrInput `pulumi:"timeout"`
	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service  Structure is documented below.
	UrlRewrite URLMapPathMatcherPathRuleRouteActionUrlRewritePtrInput `pulumi:"urlRewrite"`
	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.  Structure is documented below.
	WeightedBackendServices URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayInput `pulumi:"weightedBackendServices"`
}

func (URLMapPathMatcherPathRuleRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteAction)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionArgs) ToURLMapPathMatcherPathRuleRouteActionOutput() URLMapPathMatcherPathRuleRouteActionOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionArgs) ToURLMapPathMatcherPathRuleRouteActionOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionOutput)
}

func (i URLMapPathMatcherPathRuleRouteActionArgs) ToURLMapPathMatcherPathRuleRouteActionPtrOutput() URLMapPathMatcherPathRuleRouteActionPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionArgs) ToURLMapPathMatcherPathRuleRouteActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionOutput).ToURLMapPathMatcherPathRuleRouteActionPtrOutputWithContext(ctx)
}

// URLMapPathMatcherPathRuleRouteActionPtrInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionArgs, URLMapPathMatcherPathRuleRouteActionPtr and URLMapPathMatcherPathRuleRouteActionPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionPtrInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherPathRuleRouteActionPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionPtrOutput() URLMapPathMatcherPathRuleRouteActionPtrOutput
	ToURLMapPathMatcherPathRuleRouteActionPtrOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionPtrOutput
}

type urlmapPathMatcherPathRuleRouteActionPtrType URLMapPathMatcherPathRuleRouteActionArgs

func URLMapPathMatcherPathRuleRouteActionPtr(v *URLMapPathMatcherPathRuleRouteActionArgs) URLMapPathMatcherPathRuleRouteActionPtrInput {
	return (*urlmapPathMatcherPathRuleRouteActionPtrType)(v)
}

func (*urlmapPathMatcherPathRuleRouteActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteAction)(nil)).Elem()
}

func (i *urlmapPathMatcherPathRuleRouteActionPtrType) ToURLMapPathMatcherPathRuleRouteActionPtrOutput() URLMapPathMatcherPathRuleRouteActionPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherPathRuleRouteActionPtrType) ToURLMapPathMatcherPathRuleRouteActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteAction)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionOutput) ToURLMapPathMatcherPathRuleRouteActionOutput() URLMapPathMatcherPathRuleRouteActionOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionOutput) ToURLMapPathMatcherPathRuleRouteActionOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionOutput) ToURLMapPathMatcherPathRuleRouteActionPtrOutput() URLMapPathMatcherPathRuleRouteActionPtrOutput {
	return o.ToURLMapPathMatcherPathRuleRouteActionPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherPathRuleRouteActionOutput) ToURLMapPathMatcherPathRuleRouteActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteAction) *URLMapPathMatcherPathRuleRouteAction {
		return &v
	}).(URLMapPathMatcherPathRuleRouteActionPtrOutput)
}

// The specification for allowing client side cross-origin requests. Please see W3C
// Recommendation for Cross Origin Resource Sharing  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionOutput) CorsPolicy() URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteAction) *URLMapPathMatcherPathRuleRouteActionCorsPolicy {
		return v.CorsPolicy
	}).(URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput)
}

// The specification for fault injection introduced into traffic to test the
// resiliency of clients to backend service failure. As part of fault injection,
// when clients send requests to a backend service, delays can be introduced by
// Loadbalancer on a percentage of requests before sending those request to the
// backend service. Similarly requests from clients can be aborted by the
// Loadbalancer for a percentage of requests. timeout and retryPolicy will be
// ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionOutput) FaultInjectionPolicy() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteAction) *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy {
		return v.FaultInjectionPolicy
	}).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput)
}

// Specifies the policy on how requests intended for the route's backends are
// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
// responses from the shadow service. Prior to sending traffic to the shadow
// service, the host / authority header is suffixed with -shadow.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionOutput) RequestMirrorPolicy() URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteAction) *URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy {
		return v.RequestMirrorPolicy
	}).(URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput)
}

// Specifies the retry policy associated with this route.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionOutput) RetryPolicy() URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteAction) *URLMapPathMatcherPathRuleRouteActionRetryPolicy {
		return v.RetryPolicy
	}).(URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput)
}

// Specifies the timeout for the selected route. Timeout is computed from the time
// the request is has been fully processed (i.e. end-of-stream) up until the
// response has been completely processed. Timeout includes all retries. If not
// specified, the default value is 15 seconds.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionOutput) Timeout() URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteAction) *URLMapPathMatcherPathRuleRouteActionTimeout {
		return v.Timeout
	}).(URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput)
}

// The spec to modify the URL of the request, prior to forwarding the request to
// the matched service  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionOutput) UrlRewrite() URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteAction) *URLMapPathMatcherPathRuleRouteActionUrlRewrite {
		return v.UrlRewrite
	}).(URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput)
}

// A list of weighted backend services to send traffic to when a route match
// occurs. The weights determine the fraction of traffic that flows to their
// corresponding backend service. If all traffic needs to go to a single backend
// service, there must be one  weightedBackendService with weight set to a non 0
// number. Once a backendService is identified and before forwarding the request to
// the backend service, advanced routing actions like Url rewrites and header
// transformations are applied depending on additional settings specified in this
// HttpRouteAction.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionOutput) WeightedBackendServices() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteAction) []URLMapPathMatcherPathRuleRouteActionWeightedBackendService {
		return v.WeightedBackendServices
	}).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput)
}

type URLMapPathMatcherPathRuleRouteActionPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteAction)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionPtrOutput) ToURLMapPathMatcherPathRuleRouteActionPtrOutput() URLMapPathMatcherPathRuleRouteActionPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionPtrOutput) ToURLMapPathMatcherPathRuleRouteActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionPtrOutput) Elem() URLMapPathMatcherPathRuleRouteActionOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteAction) URLMapPathMatcherPathRuleRouteAction { return *v }).(URLMapPathMatcherPathRuleRouteActionOutput)
}

// The specification for allowing client side cross-origin requests. Please see W3C
// Recommendation for Cross Origin Resource Sharing  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionPtrOutput) CorsPolicy() URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteAction) *URLMapPathMatcherPathRuleRouteActionCorsPolicy {
		if v == nil {
			return nil
		}
		return v.CorsPolicy
	}).(URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput)
}

// The specification for fault injection introduced into traffic to test the
// resiliency of clients to backend service failure. As part of fault injection,
// when clients send requests to a backend service, delays can be introduced by
// Loadbalancer on a percentage of requests before sending those request to the
// backend service. Similarly requests from clients can be aborted by the
// Loadbalancer for a percentage of requests. timeout and retryPolicy will be
// ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionPtrOutput) FaultInjectionPolicy() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteAction) *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy {
		if v == nil {
			return nil
		}
		return v.FaultInjectionPolicy
	}).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput)
}

// Specifies the policy on how requests intended for the route's backends are
// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
// responses from the shadow service. Prior to sending traffic to the shadow
// service, the host / authority header is suffixed with -shadow.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionPtrOutput) RequestMirrorPolicy() URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteAction) *URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy {
		if v == nil {
			return nil
		}
		return v.RequestMirrorPolicy
	}).(URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput)
}

// Specifies the retry policy associated with this route.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionPtrOutput) RetryPolicy() URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteAction) *URLMapPathMatcherPathRuleRouteActionRetryPolicy {
		if v == nil {
			return nil
		}
		return v.RetryPolicy
	}).(URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput)
}

// Specifies the timeout for the selected route. Timeout is computed from the time
// the request is has been fully processed (i.e. end-of-stream) up until the
// response has been completely processed. Timeout includes all retries. If not
// specified, the default value is 15 seconds.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionPtrOutput) Timeout() URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteAction) *URLMapPathMatcherPathRuleRouteActionTimeout {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput)
}

// The spec to modify the URL of the request, prior to forwarding the request to
// the matched service  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionPtrOutput) UrlRewrite() URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteAction) *URLMapPathMatcherPathRuleRouteActionUrlRewrite {
		if v == nil {
			return nil
		}
		return v.UrlRewrite
	}).(URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput)
}

// A list of weighted backend services to send traffic to when a route match
// occurs. The weights determine the fraction of traffic that flows to their
// corresponding backend service. If all traffic needs to go to a single backend
// service, there must be one  weightedBackendService with weight set to a non 0
// number. Once a backendService is identified and before forwarding the request to
// the backend service, advanced routing actions like Url rewrites and header
// transformations are applied depending on additional settings specified in this
// HttpRouteAction.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionPtrOutput) WeightedBackendServices() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteAction) []URLMapPathMatcherPathRuleRouteActionWeightedBackendService {
		if v == nil {
			return nil
		}
		return v.WeightedBackendServices
	}).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput)
}

type URLMapPathMatcherPathRuleRouteActionCorsPolicy struct {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	AllowCredentials *bool `pulumi:"allowCredentials"`
	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods []string `pulumi:"allowMethods"`
	// Specifies the regualar expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allowOrigins or allow_origin_regex.
	AllowOriginRegexes []string `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allowOrigins or allow_origin_regex.
	AllowOrigins []string `pulumi:"allowOrigins"`
	// If true, specifies the CORS policy is disabled.
	// which indicates that the CORS policy is in effect. Defaults to false.
	Disabled bool `pulumi:"disabled"`
	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	MaxAge *int `pulumi:"maxAge"`
}

// URLMapPathMatcherPathRuleRouteActionCorsPolicyInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs and URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionCorsPolicyInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs{...}
//
type URLMapPathMatcherPathRuleRouteActionCorsPolicyInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionCorsPolicyOutput() URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput
	ToURLMapPathMatcherPathRuleRouteActionCorsPolicyOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput
}

type URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs struct {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	AllowCredentials pulumi.BoolPtrInput `pulumi:"allowCredentials"`
	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders pulumi.StringArrayInput `pulumi:"allowHeaders"`
	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods pulumi.StringArrayInput `pulumi:"allowMethods"`
	// Specifies the regualar expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allowOrigins or allow_origin_regex.
	AllowOriginRegexes pulumi.StringArrayInput `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allowOrigins or allow_origin_regex.
	AllowOrigins pulumi.StringArrayInput `pulumi:"allowOrigins"`
	// If true, specifies the CORS policy is disabled.
	// which indicates that the CORS policy is in effect. Defaults to false.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	MaxAge pulumi.IntPtrInput `pulumi:"maxAge"`
}

func (URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs) ToURLMapPathMatcherPathRuleRouteActionCorsPolicyOutput() URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionCorsPolicyOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs) ToURLMapPathMatcherPathRuleRouteActionCorsPolicyOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput)
}

func (i URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs) ToURLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs) ToURLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput).ToURLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(ctx)
}

// URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs, URLMapPathMatcherPathRuleRouteActionCorsPolicyPtr and URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput
	ToURLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput
}

type urlmapPathMatcherPathRuleRouteActionCorsPolicyPtrType URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs

func URLMapPathMatcherPathRuleRouteActionCorsPolicyPtr(v *URLMapPathMatcherPathRuleRouteActionCorsPolicyArgs) URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrInput {
	return (*urlmapPathMatcherPathRuleRouteActionCorsPolicyPtrType)(v)
}

func (*urlmapPathMatcherPathRuleRouteActionCorsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (i *urlmapPathMatcherPathRuleRouteActionCorsPolicyPtrType) ToURLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherPathRuleRouteActionCorsPolicyPtrType) ToURLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput) ToURLMapPathMatcherPathRuleRouteActionCorsPolicyOutput() URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput) ToURLMapPathMatcherPathRuleRouteActionCorsPolicyOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput) ToURLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return o.ToURLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput) ToURLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionCorsPolicy) *URLMapPathMatcherPathRuleRouteActionCorsPolicy {
		return &v
	}).(URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput)
}

// In response to a preflight request, setting this to true indicates that the
// actual request can include user credentials. This translates to the Access-
// Control-Allow-Credentials header. Defaults to false.
func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionCorsPolicy) *bool { return v.AllowCredentials }).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers header.
func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionCorsPolicy) []string { return v.AllowHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the content for the Access-Control-Allow-Methods header.
func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionCorsPolicy) []string { return v.AllowMethods }).(pulumi.StringArrayOutput)
}

// Specifies the regualar expression patterns that match allowed origins. For
// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
// An origin is allowed if it matches either allowOrigins or allow_origin_regex.
func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionCorsPolicy) []string { return v.AllowOriginRegexes }).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests. An
// origin is allowed if it matches either allowOrigins or allow_origin_regex.
func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionCorsPolicy) []string { return v.AllowOrigins }).(pulumi.StringArrayOutput)
}

// If true, specifies the CORS policy is disabled.
// which indicates that the CORS policy is in effect. Defaults to false.
func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionCorsPolicy) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// Specifies the content for the Access-Control-Expose-Headers header.
func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionCorsPolicy) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

// Specifies how long the results of a preflight request can be cached. This
// translates to the content for the Access-Control-Max-Age header.
func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionCorsPolicy) *int { return v.MaxAge }).(pulumi.IntPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) ToURLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) ToURLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) Elem() URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionCorsPolicy) URLMapPathMatcherPathRuleRouteActionCorsPolicy {
		return *v
	}).(URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput)
}

// In response to a preflight request, setting this to true indicates that the
// actual request can include user credentials. This translates to the Access-
// Control-Allow-Credentials header. Defaults to false.
func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers header.
func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the Access-Control-Allow-Methods header.
func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowMethods
	}).(pulumi.StringArrayOutput)
}

// Specifies the regualar expression patterns that match allowed origins. For
// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
// An origin is allowed if it matches either allowOrigins or allow_origin_regex.
func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOriginRegexes
	}).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests. An
// origin is allowed if it matches either allowOrigins or allow_origin_regex.
func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOrigins
	}).(pulumi.StringArrayOutput)
}

// If true, specifies the CORS policy is disabled.
// which indicates that the CORS policy is in effect. Defaults to false.
func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Expose-Headers header.
func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies how long the results of a preflight request can be cached. This
// translates to the content for the Access-Control-Max-Age header.
func (o URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionCorsPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxAge
	}).(pulumi.IntPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy struct {
	// The specification for how client requests are aborted as part of fault
	// injection.  Structure is documented below.
	Abort *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort `pulumi:"abort"`
	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.  Structure is documented below.
	Delay *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay `pulumi:"delay"`
}

// URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs and URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs{...}
//
type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput
	ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput
}

type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs struct {
	// The specification for how client requests are aborted as part of fault
	// injection.  Structure is documented below.
	Abort URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrInput `pulumi:"abort"`
	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.  Structure is documented below.
	Delay URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrInput `pulumi:"delay"`
}

func (URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput)
}

func (i URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput).ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx)
}

// URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs, URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtr and URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput
	ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput
}

type urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrType URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs

func URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtr(v *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrInput {
	return (*urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrType)(v)
}

func (*urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy)(nil)).Elem()
}

func (i *urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrType) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrType) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o.ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy) *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy {
		return &v
	}).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput)
}

// The specification for how client requests are aborted as part of fault
// injection.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput) Abort() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy) *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort {
		return v.Abort
	}).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput)
}

// The specification for how client requests are delayed as part of fault
// injection, before being sent to a backend service.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput) Delay() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy) *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay {
		return v.Delay
	}).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput) Elem() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy {
		return *v
	}).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput)
}

// The specification for how client requests are aborted as part of fault
// injection.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput) Abort() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy) *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort {
		if v == nil {
			return nil
		}
		return v.Abort
	}).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput)
}

// The specification for how client requests are delayed as part of fault
// injection, before being sent to a backend service.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput) Delay() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicy) *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort struct {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	HttpStatus int `pulumi:"httpStatus"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage float64 `pulumi:"percentage"`
}

// URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs and URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs{...}
//
type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput
	ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput
}

type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs struct {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	HttpStatus pulumi.IntInput `pulumi:"httpStatus"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage pulumi.Float64Input `pulumi:"percentage"`
}

func (URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput)
}

func (i URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput).ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx)
}

// URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs, URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtr and URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput
	ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput
}

type urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrType URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs

func URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtr(v *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrInput {
	return (*urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrType)(v)
}

func (*urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (i *urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrType) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrType) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o.ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort) *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort {
		return &v
	}).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput)
}

// The HTTP status code used to abort the request. The value must be between 200
// and 599 inclusive.
func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput) HttpStatus() pulumi.IntOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort) int { return v.HttpStatus }).(pulumi.IntOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will
// be introduced as part of fault injection. The value must be between 0.0 and
// 100.0 inclusive.
func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput) Percentage() pulumi.Float64Output {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort) float64 { return v.Percentage }).(pulumi.Float64Output)
}

type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput) Elem() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort {
		return *v
	}).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput)
}

// The HTTP status code used to abort the request. The value must be between 200
// and 599 inclusive.
func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput) HttpStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort) *int {
		if v == nil {
			return nil
		}
		return &v.HttpStatus
	}).(pulumi.IntPtrOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will
// be introduced as part of fault injection. The value must be between 0.0 and
// 100.0 inclusive.
func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort) *float64 {
		if v == nil {
			return nil
		}
		return &v.Percentage
	}).(pulumi.Float64PtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay struct {
	// Specifies the value of the fixed delay interval.  Structure is documented below.
	FixedDelay URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay `pulumi:"fixedDelay"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage float64 `pulumi:"percentage"`
}

// URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs and URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs{...}
//
type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput
	ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput
}

type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs struct {
	// Specifies the value of the fixed delay interval.  Structure is documented below.
	FixedDelay URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayInput `pulumi:"fixedDelay"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage pulumi.Float64Input `pulumi:"percentage"`
}

func (URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput)
}

func (i URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput).ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx)
}

// URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs, URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtr and URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput
	ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput
}

type urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrType URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs

func URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtr(v *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrInput {
	return (*urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrType)(v)
}

func (*urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (i *urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrType) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrType) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o.ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay) *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay {
		return &v
	}).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput)
}

// Specifies the value of the fixed delay interval.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput) FixedDelay() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay {
		return v.FixedDelay
	}).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will
// be introduced as part of fault injection. The value must be between 0.0 and
// 100.0 inclusive.
func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput) Percentage() pulumi.Float64Output {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay) float64 { return v.Percentage }).(pulumi.Float64Output)
}

type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput) Elem() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay {
		return *v
	}).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput)
}

// Specifies the value of the fixed delay interval.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput) FixedDelay() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay) *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay {
		if v == nil {
			return nil
		}
		return &v.FixedDelay
	}).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will
// be introduced as part of fault injection. The value must be between 0.0 and
// 100.0 inclusive.
func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay) *float64 {
		if v == nil {
			return nil
		}
		return &v.Percentage
	}).(pulumi.Float64PtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds string `pulumi:"seconds"`
}

// URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs and URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs{...}
//
type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput
	ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput
}

type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.StringInput `pulumi:"seconds"`
}

func (URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput)
}

func (i URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput).ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx)
}

// URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs, URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtr and URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput
	ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput
}

type urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs

func URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtr(v *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput {
	return (*urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType)(v)
}

func (*urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay)(nil)).Elem()
}

func (i *urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o.ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay) *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay {
		return &v
	}).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) Seconds() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay) string {
		return v.Seconds
	}).(pulumi.StringOutput)
}

type URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) ToURLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) Elem() URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay) URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay {
		return *v
	}).(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay) *string {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.StringPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy struct {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService string `pulumi:"backendService"`
}

// URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs and URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs{...}
//
type URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput() URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput
	ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput
}

type URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs struct {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService pulumi.StringInput `pulumi:"backendService"`
}

func (URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs) ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput() URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs) ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput)
}

func (i URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs) ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs) ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput).ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx)
}

// URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs, URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtr and URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput
	ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput
}

type urlmapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrType URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs

func URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtr(v *URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs) URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrInput {
	return (*urlmapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrType)(v)
}

func (*urlmapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy)(nil)).Elem()
}

func (i *urlmapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrType) ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrType) ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput) ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput() URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput) ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput) ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o.ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput) ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy) *URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy {
		return &v
	}).(URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput)
}

// The default BackendService resource. Before
// forwarding the request to backendService, the loadbalancer applies any relevant
// headerActions specified as part of this backendServiceWeight.
func (o URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput) BackendService() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy) string { return v.BackendService }).(pulumi.StringOutput)
}

type URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput) ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput) ToURLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput) Elem() URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy) URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy {
		return *v
	}).(URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput)
}

// The default BackendService resource. Before
// forwarding the request to backendService, the loadbalancer applies any relevant
// headerActions specified as part of this backendServiceWeight.
func (o URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput) BackendService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.BackendService
	}).(pulumi.StringPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionRetryPolicy struct {
	// Specifies the allowed number retries. This number must be > 0.
	NumRetries *int `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt.
	// If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction
	// is not set, will use the largest timeout among all backend services associated with the route.  Structure is documented below.
	PerTryTimeout *URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout `pulumi:"perTryTimeout"`
	// Specfies one or more conditions when this retry rule applies. Valid values are:
	// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
	// any 5xx response code, or if the backend service does not respond at all,
	// example: disconnects, reset, read timeout, connection failure, and refused
	// streams.
	// - gateway-error: Similar to 5xx, but only applies to response codes
	// 502, 503 or 504.
	// - connect-failure: Loadbalancer will retry on failures
	// connecting to backend services, for example due to connection timeouts.
	// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
	// Currently the only retriable error supported is 409.
	// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
	// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
	// - cancelled: Loadbalancer will retry if the gRPC status code in the response
	// header is set to cancelled
	// - deadline-exceeded: Loadbalancer will retry if the
	// gRPC status code in the response header is set to deadline-exceeded
	// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
	// header is set to resource-exhausted
	// - unavailable: Loadbalancer will retry if the gRPC status code in
	// the response header is set to unavailable
	RetryConditions []string `pulumi:"retryConditions"`
}

// URLMapPathMatcherPathRuleRouteActionRetryPolicyInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs and URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionRetryPolicyInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs{...}
//
type URLMapPathMatcherPathRuleRouteActionRetryPolicyInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionRetryPolicyOutput() URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput
	ToURLMapPathMatcherPathRuleRouteActionRetryPolicyOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput
}

type URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs struct {
	// Specifies the allowed number retries. This number must be > 0.
	NumRetries pulumi.IntPtrInput `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt.
	// If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction
	// is not set, will use the largest timeout among all backend services associated with the route.  Structure is documented below.
	PerTryTimeout URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrInput `pulumi:"perTryTimeout"`
	// Specfies one or more conditions when this retry rule applies. Valid values are:
	// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
	// any 5xx response code, or if the backend service does not respond at all,
	// example: disconnects, reset, read timeout, connection failure, and refused
	// streams.
	// - gateway-error: Similar to 5xx, but only applies to response codes
	// 502, 503 or 504.
	// - connect-failure: Loadbalancer will retry on failures
	// connecting to backend services, for example due to connection timeouts.
	// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
	// Currently the only retriable error supported is 409.
	// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
	// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
	// - cancelled: Loadbalancer will retry if the gRPC status code in the response
	// header is set to cancelled
	// - deadline-exceeded: Loadbalancer will retry if the
	// gRPC status code in the response header is set to deadline-exceeded
	// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
	// header is set to resource-exhausted
	// - unavailable: Loadbalancer will retry if the gRPC status code in
	// the response header is set to unavailable
	RetryConditions pulumi.StringArrayInput `pulumi:"retryConditions"`
}

func (URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionRetryPolicy)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyOutput() URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionRetryPolicyOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput)
}

func (i URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput).ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(ctx)
}

// URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs, URLMapPathMatcherPathRuleRouteActionRetryPolicyPtr and URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput
	ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput
}

type urlmapPathMatcherPathRuleRouteActionRetryPolicyPtrType URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs

func URLMapPathMatcherPathRuleRouteActionRetryPolicyPtr(v *URLMapPathMatcherPathRuleRouteActionRetryPolicyArgs) URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrInput {
	return (*urlmapPathMatcherPathRuleRouteActionRetryPolicyPtrType)(v)
}

func (*urlmapPathMatcherPathRuleRouteActionRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionRetryPolicy)(nil)).Elem()
}

func (i *urlmapPathMatcherPathRuleRouteActionRetryPolicyPtrType) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherPathRuleRouteActionRetryPolicyPtrType) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionRetryPolicy)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyOutput() URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return o.ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionRetryPolicy) *URLMapPathMatcherPathRuleRouteActionRetryPolicy {
		return &v
	}).(URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput)
}

// Specifies the allowed number retries. This number must be > 0.
func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionRetryPolicy) *int { return v.NumRetries }).(pulumi.IntPtrOutput)
}

// Specifies a non-zero timeout per retry attempt.
// If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction
// is not set, will use the largest timeout among all backend services associated with the route.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput) PerTryTimeout() URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionRetryPolicy) *URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout {
		return v.PerTryTimeout
	}).(URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput)
}

// Specfies one or more conditions when this retry rule applies. Valid values are:
// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
// any 5xx response code, or if the backend service does not respond at all,
// example: disconnects, reset, read timeout, connection failure, and refused
// streams.
// - gateway-error: Similar to 5xx, but only applies to response codes
// 502, 503 or 504.
// - connect-failure: Loadbalancer will retry on failures
// connecting to backend services, for example due to connection timeouts.
// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
// Currently the only retriable error supported is 409.
// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
// - cancelled: Loadbalancer will retry if the gRPC status code in the response
// header is set to cancelled
// - deadline-exceeded: Loadbalancer will retry if the
// gRPC status code in the response header is set to deadline-exceeded
// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
// header is set to resource-exhausted
// - unavailable: Loadbalancer will retry if the gRPC status code in
// the response header is set to unavailable
func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionRetryPolicy) []string { return v.RetryConditions }).(pulumi.StringArrayOutput)
}

type URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionRetryPolicy)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput() URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput) Elem() URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionRetryPolicy) URLMapPathMatcherPathRuleRouteActionRetryPolicy {
		return *v
	}).(URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput)
}

// Specifies the allowed number retries. This number must be > 0.
func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.NumRetries
	}).(pulumi.IntPtrOutput)
}

// Specifies a non-zero timeout per retry attempt.
// If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction
// is not set, will use the largest timeout among all backend services associated with the route.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput) PerTryTimeout() URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionRetryPolicy) *URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout {
		if v == nil {
			return nil
		}
		return v.PerTryTimeout
	}).(URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput)
}

// Specfies one or more conditions when this retry rule applies. Valid values are:
// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
// any 5xx response code, or if the backend service does not respond at all,
// example: disconnects, reset, read timeout, connection failure, and refused
// streams.
// - gateway-error: Similar to 5xx, but only applies to response codes
// 502, 503 or 504.
// - connect-failure: Loadbalancer will retry on failures
// connecting to backend services, for example due to connection timeouts.
// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
// Currently the only retriable error supported is 409.
// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
// - cancelled: Loadbalancer will retry if the gRPC status code in the response
// header is set to cancelled
// - deadline-exceeded: Loadbalancer will retry if the
// gRPC status code in the response header is set to deadline-exceeded
// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
// header is set to resource-exhausted
// - unavailable: Loadbalancer will retry if the gRPC status code in
// the response header is set to unavailable
func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionRetryPolicy) []string {
		if v == nil {
			return nil
		}
		return v.RetryConditions
	}).(pulumi.StringArrayOutput)
}

type URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds string `pulumi:"seconds"`
}

// URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs and URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs{...}
//
type URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput() URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput
	ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput
}

type URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.StringInput `pulumi:"seconds"`
}

func (URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput() URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput)
}

func (i URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput).ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx)
}

// URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs, URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtr and URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput
	ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput
}

type urlmapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrType URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs

func URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtr(v *URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs) URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrInput {
	return (*urlmapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrType)(v)
}

func (*urlmapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout)(nil)).Elem()
}

func (i *urlmapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrType) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrType) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput() URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o.ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout) *URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout {
		return &v
	}).(URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput) Seconds() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout) string { return v.Seconds }).(pulumi.StringOutput)
}

type URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) ToURLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) Elem() URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout) URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout {
		return *v
	}).(URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout) *string {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.StringPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionTimeout struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds string `pulumi:"seconds"`
}

// URLMapPathMatcherPathRuleRouteActionTimeoutInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionTimeoutArgs and URLMapPathMatcherPathRuleRouteActionTimeoutOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionTimeoutInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionTimeoutArgs{...}
//
type URLMapPathMatcherPathRuleRouteActionTimeoutInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionTimeoutOutput() URLMapPathMatcherPathRuleRouteActionTimeoutOutput
	ToURLMapPathMatcherPathRuleRouteActionTimeoutOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionTimeoutOutput
}

type URLMapPathMatcherPathRuleRouteActionTimeoutArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.StringInput `pulumi:"seconds"`
}

func (URLMapPathMatcherPathRuleRouteActionTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionTimeout)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionTimeoutArgs) ToURLMapPathMatcherPathRuleRouteActionTimeoutOutput() URLMapPathMatcherPathRuleRouteActionTimeoutOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionTimeoutOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionTimeoutArgs) ToURLMapPathMatcherPathRuleRouteActionTimeoutOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionTimeoutOutput)
}

func (i URLMapPathMatcherPathRuleRouteActionTimeoutArgs) ToURLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput() URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionTimeoutArgs) ToURLMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionTimeoutOutput).ToURLMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(ctx)
}

// URLMapPathMatcherPathRuleRouteActionTimeoutPtrInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionTimeoutArgs, URLMapPathMatcherPathRuleRouteActionTimeoutPtr and URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionTimeoutPtrInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionTimeoutArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherPathRuleRouteActionTimeoutPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput() URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput
	ToURLMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput
}

type urlmapPathMatcherPathRuleRouteActionTimeoutPtrType URLMapPathMatcherPathRuleRouteActionTimeoutArgs

func URLMapPathMatcherPathRuleRouteActionTimeoutPtr(v *URLMapPathMatcherPathRuleRouteActionTimeoutArgs) URLMapPathMatcherPathRuleRouteActionTimeoutPtrInput {
	return (*urlmapPathMatcherPathRuleRouteActionTimeoutPtrType)(v)
}

func (*urlmapPathMatcherPathRuleRouteActionTimeoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionTimeout)(nil)).Elem()
}

func (i *urlmapPathMatcherPathRuleRouteActionTimeoutPtrType) ToURLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput() URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherPathRuleRouteActionTimeoutPtrType) ToURLMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionTimeoutOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionTimeout)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionTimeoutOutput) ToURLMapPathMatcherPathRuleRouteActionTimeoutOutput() URLMapPathMatcherPathRuleRouteActionTimeoutOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionTimeoutOutput) ToURLMapPathMatcherPathRuleRouteActionTimeoutOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionTimeoutOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionTimeoutOutput) ToURLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput() URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return o.ToURLMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherPathRuleRouteActionTimeoutOutput) ToURLMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionTimeout) *URLMapPathMatcherPathRuleRouteActionTimeout {
		return &v
	}).(URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o URLMapPathMatcherPathRuleRouteActionTimeoutOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionTimeout) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o URLMapPathMatcherPathRuleRouteActionTimeoutOutput) Seconds() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionTimeout) string { return v.Seconds }).(pulumi.StringOutput)
}

type URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionTimeout)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput) ToURLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput() URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput) ToURLMapPathMatcherPathRuleRouteActionTimeoutPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput) Elem() URLMapPathMatcherPathRuleRouteActionTimeoutOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionTimeout) URLMapPathMatcherPathRuleRouteActionTimeout {
		return *v
	}).(URLMapPathMatcherPathRuleRouteActionTimeoutOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionTimeout) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionTimeout) *string {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.StringPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionUrlRewrite struct {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	HostRewrite *string `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	PathPrefixRewrite *string `pulumi:"pathPrefixRewrite"`
}

// URLMapPathMatcherPathRuleRouteActionUrlRewriteInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs and URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionUrlRewriteInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs{...}
//
type URLMapPathMatcherPathRuleRouteActionUrlRewriteInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionUrlRewriteOutput() URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput
	ToURLMapPathMatcherPathRuleRouteActionUrlRewriteOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput
}

type URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs struct {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	HostRewrite pulumi.StringPtrInput `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	PathPrefixRewrite pulumi.StringPtrInput `pulumi:"pathPrefixRewrite"`
}

func (URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs) ToURLMapPathMatcherPathRuleRouteActionUrlRewriteOutput() URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionUrlRewriteOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs) ToURLMapPathMatcherPathRuleRouteActionUrlRewriteOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput)
}

func (i URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs) ToURLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput() URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs) ToURLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput).ToURLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(ctx)
}

// URLMapPathMatcherPathRuleRouteActionUrlRewritePtrInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs, URLMapPathMatcherPathRuleRouteActionUrlRewritePtr and URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionUrlRewritePtrInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherPathRuleRouteActionUrlRewritePtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput() URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput
	ToURLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput
}

type urlmapPathMatcherPathRuleRouteActionUrlRewritePtrType URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs

func URLMapPathMatcherPathRuleRouteActionUrlRewritePtr(v *URLMapPathMatcherPathRuleRouteActionUrlRewriteArgs) URLMapPathMatcherPathRuleRouteActionUrlRewritePtrInput {
	return (*urlmapPathMatcherPathRuleRouteActionUrlRewritePtrType)(v)
}

func (*urlmapPathMatcherPathRuleRouteActionUrlRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (i *urlmapPathMatcherPathRuleRouteActionUrlRewritePtrType) ToURLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput() URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherPathRuleRouteActionUrlRewritePtrType) ToURLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput) ToURLMapPathMatcherPathRuleRouteActionUrlRewriteOutput() URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput) ToURLMapPathMatcherPathRuleRouteActionUrlRewriteOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput) ToURLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput() URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return o.ToURLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput) ToURLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionUrlRewrite) *URLMapPathMatcherPathRuleRouteActionUrlRewrite {
		return &v
	}).(URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput)
}

// Prior to forwarding the request to the selected service, the request's host
// header is replaced with contents of hostRewrite. The value must be between 1 and
// 255 characters.
func (o URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionUrlRewrite) *string { return v.HostRewrite }).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected backend service, the matching
// portion of the request's path is replaced by pathPrefixRewrite. The value must
// be between 1 and 1024 characters.
func (o URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionUrlRewrite) *string { return v.PathPrefixRewrite }).(pulumi.StringPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput) ToURLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput() URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput) ToURLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput) Elem() URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionUrlRewrite) URLMapPathMatcherPathRuleRouteActionUrlRewrite {
		return *v
	}).(URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput)
}

// Prior to forwarding the request to the selected service, the request's host
// header is replaced with contents of hostRewrite. The value must be between 1 and
// 255 characters.
func (o URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.HostRewrite
	}).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected backend service, the matching
// portion of the request's path is replaced by pathPrefixRewrite. The value must
// be between 1 and 1024 characters.
func (o URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.PathPrefixRewrite
	}).(pulumi.StringPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendService struct {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService string `pulumi:"backendService"`
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
	HeaderAction *URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction `pulumi:"headerAction"`
	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	Weight int `pulumi:"weight"`
}

// URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs and URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs{...}
//
type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput
	ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs struct {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService pulumi.StringInput `pulumi:"backendService"`
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
	HeaderAction URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrInput `pulumi:"headerAction"`
	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionWeightedBackendService)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput)
}

// URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArray and URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArray{ URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs{...} }
//
type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput
	ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArray []URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceInput

func (URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherPathRuleRouteActionWeightedBackendService)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArray) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArray) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput)
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionWeightedBackendService)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput {
	return o
}

// The default BackendService resource. Before
// forwarding the request to backendService, the loadbalancer applies any relevant
// headerActions specified as part of this backendServiceWeight.
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput) BackendService() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionWeightedBackendService) string { return v.BackendService }).(pulumi.StringOutput)
}

// Specifies changes to request and response headers that need to take effect for
// the selected backendService. headerAction specified here take effect before
// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput) HeaderAction() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionWeightedBackendService) *URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction {
		return v.HeaderAction
	}).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput)
}

// Specifies the fraction of traffic sent to backendService, computed as weight /
// (sum of all weightedBackendService weights in routeAction) . The selection of a
// backend service is determined only for new traffic. Once a user's request has
// been directed to a backendService, subsequent requests will be sent to the same
// backendService as determined by the BackendService's session affinity policy.
// The value must be between 0 and 1000
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionWeightedBackendService) int { return v.Weight }).(pulumi.IntOutput)
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherPathRuleRouteActionWeightedBackendService)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherPathRuleRouteActionWeightedBackendService {
		return vs[0].([]URLMapPathMatcherPathRuleRouteActionWeightedBackendService)[vs[1].(int)]
	}).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput)
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.  Structure is documented below.
	RequestHeadersToAdds []URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd `pulumi:"requestHeadersToAdds"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemoves []string `pulumi:"requestHeadersToRemoves"`
	// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
	ResponseHeadersToAdds []URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd `pulumi:"responseHeadersToAdds"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemoves []string `pulumi:"responseHeadersToRemoves"`
}

// URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs and URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs{...}
//
type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput
	ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.  Structure is documented below.
	RequestHeadersToAdds URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayInput `pulumi:"requestHeadersToAdds"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemoves pulumi.StringArrayInput `pulumi:"requestHeadersToRemoves"`
	// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
	ResponseHeadersToAdds URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayInput `pulumi:"responseHeadersToAdds"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemoves pulumi.StringArrayInput `pulumi:"responseHeadersToRemoves"`
}

func (URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput)
}

func (i URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput).ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx)
}

// URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs, URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtr and URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput
	ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput
}

type urlmapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrType URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs

func URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtr(v *URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrInput {
	return (*urlmapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrType)(v)
}

func (*urlmapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction)(nil)).Elem()
}

func (i *urlmapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrType) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrType) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput)
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o.ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) *URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction {
		return &v
	}).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput)
}

// Headers to add to a matching request prior to forwarding the request to the
// backendService.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) RequestHeadersToAdds() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) []URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd {
		return v.RequestHeadersToAdds
	}).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request
// prior to forwarding the request to the backendService.
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) RequestHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) []string {
		return v.RequestHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) ResponseHeadersToAdds() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) []URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd {
		return v.ResponseHeadersToAdds
	}).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the response
// prior to sending the response back to the client.
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput) ResponseHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) []string {
		return v.ResponseHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) Elem() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction {
		return *v
	}).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput)
}

// Headers to add to a matching request prior to forwarding the request to the
// backendService.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) RequestHeadersToAdds() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) []URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToAdds
	}).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request
// prior to forwarding the request to the backendService.
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) RequestHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ResponseHeadersToAdds() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) []URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToAdds
	}).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the response
// prior to sending the response back to the client.
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ResponseHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace bool `pulumi:"replace"`
}

// URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs and URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs{...}
//
type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput
	ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput)
}

// URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray and URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray{ URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs{...} }
//
type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput
	ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray []URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddInput

func (URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput)
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return o
}

// The name of the header.
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd) string {
		return v.HeaderName
	}).(pulumi.StringOutput)
}

// The value of the header to add.
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd) string {
		return v.HeaderValue
	}).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the
// header. If true, headerValue is set for the header, discarding any values that
// were set for that header.
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd) bool {
		return v.Replace
	}).(pulumi.BoolOutput)
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd {
		return vs[0].([]URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)[vs[1].(int)]
	}).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput)
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace bool `pulumi:"replace"`
}

// URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs and URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs{...}
//
type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput
	ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput)
}

// URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayInput is an input type that accepts URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray and URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayInput` via:
//
// 		 URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray{ URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs{...} }
//
type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput
	ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutputWithContext(context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray []URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddInput

func (URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return i.ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput)
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return o
}

// The name of the header.
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd) string {
		return v.HeaderName
	}).(pulumi.StringOutput)
}

// The value of the header to add.
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd) string {
		return v.HeaderValue
	}).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the
// header. If true, headerValue is set for the header, discarding any values that
// were set for that header.
func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd) bool {
		return v.Replace
	}).(pulumi.BoolOutput)
}

type URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput() URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput) ToURLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return o
}

func (o URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd {
		return vs[0].([]URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)[vs[1].(int)]
	}).(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput)
}

type URLMapPathMatcherPathRuleUrlRedirect struct {
	// The host that will be used in the redirect response instead of the one that was
	// supplied in the request. The value must be between 1 and 255 characters.
	HostRedirect *string `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set
	// to false, the URL scheme of the redirected request will remain the same as that
	// of the request. This must only be set for UrlMaps used in TargetHttpProxys.
	// Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
	HttpsRedirect *bool `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was
	// supplied in the request. Only one of pathRedirect or prefixRedirect must be
	// specified. The value must be between 1 and 1024 characters.
	PathRedirect *string `pulumi:"pathRedirect"`
	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	// retaining the remaining portion of the URL before redirecting the request.
	PrefixRedirect *string `pulumi:"prefixRedirect"`
	// The HTTP Status code to use for this RedirectAction. Supported values are:   -
	// MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.  -
	// FOUND, which corresponds to 302.  - SEE_OTHER which corresponds to 303.  -
	// TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
	// will be retained.  - PERMANENT_REDIRECT, which corresponds to 308. In this case,
	// the request method will be retained.
	RedirectResponseCode *string `pulumi:"redirectResponseCode"`
	// If set to true, any accompanying query portion of the original URL is removed
	// prior to redirecting the request. If set to false, the query portion of the
	// original URL is retained. Defaults to false.
	StripQuery bool `pulumi:"stripQuery"`
}

// URLMapPathMatcherPathRuleUrlRedirectInput is an input type that accepts URLMapPathMatcherPathRuleUrlRedirectArgs and URLMapPathMatcherPathRuleUrlRedirectOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleUrlRedirectInput` via:
//
// 		 URLMapPathMatcherPathRuleUrlRedirectArgs{...}
//
type URLMapPathMatcherPathRuleUrlRedirectInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleUrlRedirectOutput() URLMapPathMatcherPathRuleUrlRedirectOutput
	ToURLMapPathMatcherPathRuleUrlRedirectOutputWithContext(context.Context) URLMapPathMatcherPathRuleUrlRedirectOutput
}

type URLMapPathMatcherPathRuleUrlRedirectArgs struct {
	// The host that will be used in the redirect response instead of the one that was
	// supplied in the request. The value must be between 1 and 255 characters.
	HostRedirect pulumi.StringPtrInput `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set
	// to false, the URL scheme of the redirected request will remain the same as that
	// of the request. This must only be set for UrlMaps used in TargetHttpProxys.
	// Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
	HttpsRedirect pulumi.BoolPtrInput `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was
	// supplied in the request. Only one of pathRedirect or prefixRedirect must be
	// specified. The value must be between 1 and 1024 characters.
	PathRedirect pulumi.StringPtrInput `pulumi:"pathRedirect"`
	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	// retaining the remaining portion of the URL before redirecting the request.
	PrefixRedirect pulumi.StringPtrInput `pulumi:"prefixRedirect"`
	// The HTTP Status code to use for this RedirectAction. Supported values are:   -
	// MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.  -
	// FOUND, which corresponds to 302.  - SEE_OTHER which corresponds to 303.  -
	// TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
	// will be retained.  - PERMANENT_REDIRECT, which corresponds to 308. In this case,
	// the request method will be retained.
	RedirectResponseCode pulumi.StringPtrInput `pulumi:"redirectResponseCode"`
	// If set to true, any accompanying query portion of the original URL is removed
	// prior to redirecting the request. If set to false, the query portion of the
	// original URL is retained. Defaults to false.
	StripQuery pulumi.BoolInput `pulumi:"stripQuery"`
}

func (URLMapPathMatcherPathRuleUrlRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleUrlRedirect)(nil)).Elem()
}

func (i URLMapPathMatcherPathRuleUrlRedirectArgs) ToURLMapPathMatcherPathRuleUrlRedirectOutput() URLMapPathMatcherPathRuleUrlRedirectOutput {
	return i.ToURLMapPathMatcherPathRuleUrlRedirectOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleUrlRedirectArgs) ToURLMapPathMatcherPathRuleUrlRedirectOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleUrlRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleUrlRedirectOutput)
}

func (i URLMapPathMatcherPathRuleUrlRedirectArgs) ToURLMapPathMatcherPathRuleUrlRedirectPtrOutput() URLMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return i.ToURLMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherPathRuleUrlRedirectArgs) ToURLMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleUrlRedirectOutput).ToURLMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(ctx)
}

// URLMapPathMatcherPathRuleUrlRedirectPtrInput is an input type that accepts URLMapPathMatcherPathRuleUrlRedirectArgs, URLMapPathMatcherPathRuleUrlRedirectPtr and URLMapPathMatcherPathRuleUrlRedirectPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherPathRuleUrlRedirectPtrInput` via:
//
// 		 URLMapPathMatcherPathRuleUrlRedirectArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherPathRuleUrlRedirectPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherPathRuleUrlRedirectPtrOutput() URLMapPathMatcherPathRuleUrlRedirectPtrOutput
	ToURLMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(context.Context) URLMapPathMatcherPathRuleUrlRedirectPtrOutput
}

type urlmapPathMatcherPathRuleUrlRedirectPtrType URLMapPathMatcherPathRuleUrlRedirectArgs

func URLMapPathMatcherPathRuleUrlRedirectPtr(v *URLMapPathMatcherPathRuleUrlRedirectArgs) URLMapPathMatcherPathRuleUrlRedirectPtrInput {
	return (*urlmapPathMatcherPathRuleUrlRedirectPtrType)(v)
}

func (*urlmapPathMatcherPathRuleUrlRedirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleUrlRedirect)(nil)).Elem()
}

func (i *urlmapPathMatcherPathRuleUrlRedirectPtrType) ToURLMapPathMatcherPathRuleUrlRedirectPtrOutput() URLMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return i.ToURLMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherPathRuleUrlRedirectPtrType) ToURLMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherPathRuleUrlRedirectPtrOutput)
}

type URLMapPathMatcherPathRuleUrlRedirectOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleUrlRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherPathRuleUrlRedirect)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleUrlRedirectOutput) ToURLMapPathMatcherPathRuleUrlRedirectOutput() URLMapPathMatcherPathRuleUrlRedirectOutput {
	return o
}

func (o URLMapPathMatcherPathRuleUrlRedirectOutput) ToURLMapPathMatcherPathRuleUrlRedirectOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleUrlRedirectOutput {
	return o
}

func (o URLMapPathMatcherPathRuleUrlRedirectOutput) ToURLMapPathMatcherPathRuleUrlRedirectPtrOutput() URLMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return o.ToURLMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherPathRuleUrlRedirectOutput) ToURLMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleUrlRedirect) *URLMapPathMatcherPathRuleUrlRedirect {
		return &v
	}).(URLMapPathMatcherPathRuleUrlRedirectPtrOutput)
}

// The host that will be used in the redirect response instead of the one that was
// supplied in the request. The value must be between 1 and 255 characters.
func (o URLMapPathMatcherPathRuleUrlRedirectOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleUrlRedirect) *string { return v.HostRedirect }).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set
// to false, the URL scheme of the redirected request will remain the same as that
// of the request. This must only be set for UrlMaps used in TargetHttpProxys.
// Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
func (o URLMapPathMatcherPathRuleUrlRedirectOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleUrlRedirect) *bool { return v.HttpsRedirect }).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was
// supplied in the request. Only one of pathRedirect or prefixRedirect must be
// specified. The value must be between 1 and 1024 characters.
func (o URLMapPathMatcherPathRuleUrlRedirectOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleUrlRedirect) *string { return v.PathRedirect }).(pulumi.StringPtrOutput)
}

// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
// retaining the remaining portion of the URL before redirecting the request.
func (o URLMapPathMatcherPathRuleUrlRedirectOutput) PrefixRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleUrlRedirect) *string { return v.PrefixRedirect }).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for this RedirectAction. Supported values are:   -
// MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.  -
// FOUND, which corresponds to 302.  - SEE_OTHER which corresponds to 303.  -
// TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
// will be retained.  - PERMANENT_REDIRECT, which corresponds to 308. In this case,
// the request method will be retained.
func (o URLMapPathMatcherPathRuleUrlRedirectOutput) RedirectResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleUrlRedirect) *string { return v.RedirectResponseCode }).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed
// prior to redirecting the request. If set to false, the query portion of the
// original URL is retained. Defaults to false.
func (o URLMapPathMatcherPathRuleUrlRedirectOutput) StripQuery() pulumi.BoolOutput {
	return o.ApplyT(func(v URLMapPathMatcherPathRuleUrlRedirect) bool { return v.StripQuery }).(pulumi.BoolOutput)
}

type URLMapPathMatcherPathRuleUrlRedirectPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherPathRuleUrlRedirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherPathRuleUrlRedirect)(nil)).Elem()
}

func (o URLMapPathMatcherPathRuleUrlRedirectPtrOutput) ToURLMapPathMatcherPathRuleUrlRedirectPtrOutput() URLMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleUrlRedirectPtrOutput) ToURLMapPathMatcherPathRuleUrlRedirectPtrOutputWithContext(ctx context.Context) URLMapPathMatcherPathRuleUrlRedirectPtrOutput {
	return o
}

func (o URLMapPathMatcherPathRuleUrlRedirectPtrOutput) Elem() URLMapPathMatcherPathRuleUrlRedirectOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleUrlRedirect) URLMapPathMatcherPathRuleUrlRedirect { return *v }).(URLMapPathMatcherPathRuleUrlRedirectOutput)
}

// The host that will be used in the redirect response instead of the one that was
// supplied in the request. The value must be between 1 and 255 characters.
func (o URLMapPathMatcherPathRuleUrlRedirectPtrOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.HostRedirect
	}).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set
// to false, the URL scheme of the redirected request will remain the same as that
// of the request. This must only be set for UrlMaps used in TargetHttpProxys.
// Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
func (o URLMapPathMatcherPathRuleUrlRedirectPtrOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleUrlRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.HttpsRedirect
	}).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was
// supplied in the request. Only one of pathRedirect or prefixRedirect must be
// specified. The value must be between 1 and 1024 characters.
func (o URLMapPathMatcherPathRuleUrlRedirectPtrOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.PathRedirect
	}).(pulumi.StringPtrOutput)
}

// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
// retaining the remaining portion of the URL before redirecting the request.
func (o URLMapPathMatcherPathRuleUrlRedirectPtrOutput) PrefixRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.PrefixRedirect
	}).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for this RedirectAction. Supported values are:   -
// MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.  -
// FOUND, which corresponds to 302.  - SEE_OTHER which corresponds to 303.  -
// TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
// will be retained.  - PERMANENT_REDIRECT, which corresponds to 308. In this case,
// the request method will be retained.
func (o URLMapPathMatcherPathRuleUrlRedirectPtrOutput) RedirectResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.RedirectResponseCode
	}).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed
// prior to redirecting the request. If set to false, the query portion of the
// original URL is retained. Defaults to false.
func (o URLMapPathMatcherPathRuleUrlRedirectPtrOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherPathRuleUrlRedirect) *bool {
		if v == nil {
			return nil
		}
		return &v.StripQuery
	}).(pulumi.BoolPtrOutput)
}

type URLMapPathMatcherRouteRule struct {
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
	HeaderAction *URLMapPathMatcherRouteRuleHeaderAction `pulumi:"headerAction"`
	// The rules for determining a match.  Structure is documented below.
	MatchRules []URLMapPathMatcherRouteRuleMatchRule `pulumi:"matchRules"`
	// For routeRules within a given pathMatcher, priority determines the order
	// in which load balancer will interpret routeRules. RouteRules are evaluated
	// in order of priority, from the lowest to highest number. The priority of
	// a rule decreases as its number increases (1, 2, 3, N+1). The first rule
	// that matches the request is applied.
	// You cannot configure two or more routeRules with the same priority.
	// Priority for each rule must be set to a number between 0 and
	// 2147483647 inclusive.
	// Priority numbers can have gaps, which enable you to add or remove rules
	// in the future without affecting the rest of the rules. For example,
	// 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
	// you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
	// future without any impact on existing rules.
	Priority int `pulumi:"priority"`
	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.  Structure is documented below.
	RouteAction *URLMapPathMatcherRouteRuleRouteAction `pulumi:"routeAction"`
	// The backend service or backend bucket link that should be matched by this test.
	Service *string `pulumi:"service"`
	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.  Structure is documented below.
	UrlRedirect *URLMapPathMatcherRouteRuleUrlRedirect `pulumi:"urlRedirect"`
}

// URLMapPathMatcherRouteRuleInput is an input type that accepts URLMapPathMatcherRouteRuleArgs and URLMapPathMatcherRouteRuleOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleInput` via:
//
// 		 URLMapPathMatcherRouteRuleArgs{...}
//
type URLMapPathMatcherRouteRuleInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleOutput() URLMapPathMatcherRouteRuleOutput
	ToURLMapPathMatcherRouteRuleOutputWithContext(context.Context) URLMapPathMatcherRouteRuleOutput
}

type URLMapPathMatcherRouteRuleArgs struct {
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
	HeaderAction URLMapPathMatcherRouteRuleHeaderActionPtrInput `pulumi:"headerAction"`
	// The rules for determining a match.  Structure is documented below.
	MatchRules URLMapPathMatcherRouteRuleMatchRuleArrayInput `pulumi:"matchRules"`
	// For routeRules within a given pathMatcher, priority determines the order
	// in which load balancer will interpret routeRules. RouteRules are evaluated
	// in order of priority, from the lowest to highest number. The priority of
	// a rule decreases as its number increases (1, 2, 3, N+1). The first rule
	// that matches the request is applied.
	// You cannot configure two or more routeRules with the same priority.
	// Priority for each rule must be set to a number between 0 and
	// 2147483647 inclusive.
	// Priority numbers can have gaps, which enable you to add or remove rules
	// in the future without affecting the rest of the rules. For example,
	// 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
	// you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
	// future without any impact on existing rules.
	Priority pulumi.IntInput `pulumi:"priority"`
	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.  Structure is documented below.
	RouteAction URLMapPathMatcherRouteRuleRouteActionPtrInput `pulumi:"routeAction"`
	// The backend service or backend bucket link that should be matched by this test.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.  Structure is documented below.
	UrlRedirect URLMapPathMatcherRouteRuleUrlRedirectPtrInput `pulumi:"urlRedirect"`
}

func (URLMapPathMatcherRouteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRule)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleArgs) ToURLMapPathMatcherRouteRuleOutput() URLMapPathMatcherRouteRuleOutput {
	return i.ToURLMapPathMatcherRouteRuleOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleArgs) ToURLMapPathMatcherRouteRuleOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleOutput)
}

// URLMapPathMatcherRouteRuleArrayInput is an input type that accepts URLMapPathMatcherRouteRuleArray and URLMapPathMatcherRouteRuleArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleArrayInput` via:
//
// 		 URLMapPathMatcherRouteRuleArray{ URLMapPathMatcherRouteRuleArgs{...} }
//
type URLMapPathMatcherRouteRuleArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleArrayOutput() URLMapPathMatcherRouteRuleArrayOutput
	ToURLMapPathMatcherRouteRuleArrayOutputWithContext(context.Context) URLMapPathMatcherRouteRuleArrayOutput
}

type URLMapPathMatcherRouteRuleArray []URLMapPathMatcherRouteRuleInput

func (URLMapPathMatcherRouteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRule)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleArray) ToURLMapPathMatcherRouteRuleArrayOutput() URLMapPathMatcherRouteRuleArrayOutput {
	return i.ToURLMapPathMatcherRouteRuleArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleArray) ToURLMapPathMatcherRouteRuleArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleArrayOutput)
}

type URLMapPathMatcherRouteRuleOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRule)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleOutput) ToURLMapPathMatcherRouteRuleOutput() URLMapPathMatcherRouteRuleOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleOutput) ToURLMapPathMatcherRouteRuleOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleOutput {
	return o
}

// Specifies changes to request and response headers that need to take effect for
// the selected backendService. headerAction specified here take effect before
// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleOutput) HeaderAction() URLMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRule) *URLMapPathMatcherRouteRuleHeaderAction { return v.HeaderAction }).(URLMapPathMatcherRouteRuleHeaderActionPtrOutput)
}

// The rules for determining a match.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleOutput) MatchRules() URLMapPathMatcherRouteRuleMatchRuleArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRule) []URLMapPathMatcherRouteRuleMatchRule { return v.MatchRules }).(URLMapPathMatcherRouteRuleMatchRuleArrayOutput)
}

// For routeRules within a given pathMatcher, priority determines the order
// in which load balancer will interpret routeRules. RouteRules are evaluated
// in order of priority, from the lowest to highest number. The priority of
// a rule decreases as its number increases (1, 2, 3, N+1). The first rule
// that matches the request is applied.
// You cannot configure two or more routeRules with the same priority.
// Priority for each rule must be set to a number between 0 and
// 2147483647 inclusive.
// Priority numbers can have gaps, which enable you to add or remove rules
// in the future without affecting the rest of the rules. For example,
// 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
// you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
// future without any impact on existing rules.
func (o URLMapPathMatcherRouteRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRule) int { return v.Priority }).(pulumi.IntOutput)
}

// In response to a matching matchRule, the load balancer performs advanced routing
// actions like URL rewrites, header transformations, etc. prior to forwarding the
// request to the selected backend. If  routeAction specifies any
// weightedBackendServices, service must not be set. Conversely if service is set,
// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
// or urlRedirect must be set.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleOutput) RouteAction() URLMapPathMatcherRouteRuleRouteActionPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRule) *URLMapPathMatcherRouteRuleRouteAction { return v.RouteAction }).(URLMapPathMatcherRouteRuleRouteActionPtrOutput)
}

// The backend service or backend bucket link that should be matched by this test.
func (o URLMapPathMatcherRouteRuleOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRule) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// When this rule is matched, the request is redirected to a URL specified by
// urlRedirect. If urlRedirect is specified, service or routeAction must not be
// set.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleOutput) UrlRedirect() URLMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRule) *URLMapPathMatcherRouteRuleUrlRedirect { return v.UrlRedirect }).(URLMapPathMatcherRouteRuleUrlRedirectPtrOutput)
}

type URLMapPathMatcherRouteRuleArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRule)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleArrayOutput) ToURLMapPathMatcherRouteRuleArrayOutput() URLMapPathMatcherRouteRuleArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleArrayOutput) ToURLMapPathMatcherRouteRuleArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherRouteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherRouteRule {
		return vs[0].([]URLMapPathMatcherRouteRule)[vs[1].(int)]
	}).(URLMapPathMatcherRouteRuleOutput)
}

type URLMapPathMatcherRouteRuleHeaderAction struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.  Structure is documented below.
	RequestHeadersToAdds []URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd `pulumi:"requestHeadersToAdds"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemoves []string `pulumi:"requestHeadersToRemoves"`
	// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
	ResponseHeadersToAdds []URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd `pulumi:"responseHeadersToAdds"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemoves []string `pulumi:"responseHeadersToRemoves"`
}

// URLMapPathMatcherRouteRuleHeaderActionInput is an input type that accepts URLMapPathMatcherRouteRuleHeaderActionArgs and URLMapPathMatcherRouteRuleHeaderActionOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleHeaderActionInput` via:
//
// 		 URLMapPathMatcherRouteRuleHeaderActionArgs{...}
//
type URLMapPathMatcherRouteRuleHeaderActionInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleHeaderActionOutput() URLMapPathMatcherRouteRuleHeaderActionOutput
	ToURLMapPathMatcherRouteRuleHeaderActionOutputWithContext(context.Context) URLMapPathMatcherRouteRuleHeaderActionOutput
}

type URLMapPathMatcherRouteRuleHeaderActionArgs struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.  Structure is documented below.
	RequestHeadersToAdds URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayInput `pulumi:"requestHeadersToAdds"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemoves pulumi.StringArrayInput `pulumi:"requestHeadersToRemoves"`
	// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
	ResponseHeadersToAdds URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayInput `pulumi:"responseHeadersToAdds"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemoves pulumi.StringArrayInput `pulumi:"responseHeadersToRemoves"`
}

func (URLMapPathMatcherRouteRuleHeaderActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleHeaderAction)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleHeaderActionArgs) ToURLMapPathMatcherRouteRuleHeaderActionOutput() URLMapPathMatcherRouteRuleHeaderActionOutput {
	return i.ToURLMapPathMatcherRouteRuleHeaderActionOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleHeaderActionArgs) ToURLMapPathMatcherRouteRuleHeaderActionOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleHeaderActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleHeaderActionOutput)
}

func (i URLMapPathMatcherRouteRuleHeaderActionArgs) ToURLMapPathMatcherRouteRuleHeaderActionPtrOutput() URLMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleHeaderActionArgs) ToURLMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleHeaderActionOutput).ToURLMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx)
}

// URLMapPathMatcherRouteRuleHeaderActionPtrInput is an input type that accepts URLMapPathMatcherRouteRuleHeaderActionArgs, URLMapPathMatcherRouteRuleHeaderActionPtr and URLMapPathMatcherRouteRuleHeaderActionPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleHeaderActionPtrInput` via:
//
// 		 URLMapPathMatcherRouteRuleHeaderActionArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherRouteRuleHeaderActionPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleHeaderActionPtrOutput() URLMapPathMatcherRouteRuleHeaderActionPtrOutput
	ToURLMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(context.Context) URLMapPathMatcherRouteRuleHeaderActionPtrOutput
}

type urlmapPathMatcherRouteRuleHeaderActionPtrType URLMapPathMatcherRouteRuleHeaderActionArgs

func URLMapPathMatcherRouteRuleHeaderActionPtr(v *URLMapPathMatcherRouteRuleHeaderActionArgs) URLMapPathMatcherRouteRuleHeaderActionPtrInput {
	return (*urlmapPathMatcherRouteRuleHeaderActionPtrType)(v)
}

func (*urlmapPathMatcherRouteRuleHeaderActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleHeaderAction)(nil)).Elem()
}

func (i *urlmapPathMatcherRouteRuleHeaderActionPtrType) ToURLMapPathMatcherRouteRuleHeaderActionPtrOutput() URLMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherRouteRuleHeaderActionPtrType) ToURLMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleHeaderActionPtrOutput)
}

type URLMapPathMatcherRouteRuleHeaderActionOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleHeaderActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleHeaderAction)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleHeaderActionOutput) ToURLMapPathMatcherRouteRuleHeaderActionOutput() URLMapPathMatcherRouteRuleHeaderActionOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleHeaderActionOutput) ToURLMapPathMatcherRouteRuleHeaderActionOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleHeaderActionOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleHeaderActionOutput) ToURLMapPathMatcherRouteRuleHeaderActionPtrOutput() URLMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return o.ToURLMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherRouteRuleHeaderActionOutput) ToURLMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleHeaderAction) *URLMapPathMatcherRouteRuleHeaderAction {
		return &v
	}).(URLMapPathMatcherRouteRuleHeaderActionPtrOutput)
}

// Headers to add to a matching request prior to forwarding the request to the
// backendService.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleHeaderActionOutput) RequestHeadersToAdds() URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleHeaderAction) []URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd {
		return v.RequestHeadersToAdds
	}).(URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request
// prior to forwarding the request to the backendService.
func (o URLMapPathMatcherRouteRuleHeaderActionOutput) RequestHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleHeaderAction) []string { return v.RequestHeadersToRemoves }).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleHeaderActionOutput) ResponseHeadersToAdds() URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleHeaderAction) []URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd {
		return v.ResponseHeadersToAdds
	}).(URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the response
// prior to sending the response back to the client.
func (o URLMapPathMatcherRouteRuleHeaderActionOutput) ResponseHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleHeaderAction) []string { return v.ResponseHeadersToRemoves }).(pulumi.StringArrayOutput)
}

type URLMapPathMatcherRouteRuleHeaderActionPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleHeaderActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleHeaderAction)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleHeaderActionPtrOutput) ToURLMapPathMatcherRouteRuleHeaderActionPtrOutput() URLMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleHeaderActionPtrOutput) ToURLMapPathMatcherRouteRuleHeaderActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleHeaderActionPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleHeaderActionPtrOutput) Elem() URLMapPathMatcherRouteRuleHeaderActionOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleHeaderAction) URLMapPathMatcherRouteRuleHeaderAction { return *v }).(URLMapPathMatcherRouteRuleHeaderActionOutput)
}

// Headers to add to a matching request prior to forwarding the request to the
// backendService.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleHeaderActionPtrOutput) RequestHeadersToAdds() URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleHeaderAction) []URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToAdds
	}).(URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request
// prior to forwarding the request to the backendService.
func (o URLMapPathMatcherRouteRuleHeaderActionPtrOutput) RequestHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleHeaderActionPtrOutput) ResponseHeadersToAdds() URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleHeaderAction) []URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToAdds
	}).(URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the response
// prior to sending the response back to the client.
func (o URLMapPathMatcherRouteRuleHeaderActionPtrOutput) ResponseHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

type URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace bool `pulumi:"replace"`
}

// URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddInput is an input type that accepts URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs and URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddInput` via:
//
// 		 URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs{...}
//
type URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput() URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput
	ToURLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutputWithContext(context.Context) URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput
}

type URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs) ToURLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput() URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput {
	return i.ToURLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs) ToURLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput)
}

// URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayInput is an input type that accepts URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArray and URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayInput` via:
//
// 		 URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArray{ URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs{...} }
//
type URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput() URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput
	ToURLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Context) URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput
}

type URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArray []URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddInput

func (URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArray) ToURLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput() URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput {
	return i.ToURLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArray) ToURLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput)
}

type URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput) ToURLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput() URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput) ToURLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput {
	return o
}

// The name of the header.
func (o URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd) string { return v.HeaderName }).(pulumi.StringOutput)
}

// The value of the header to add.
func (o URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd) string { return v.HeaderValue }).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the
// header. If true, headerValue is set for the header, discarding any values that
// were set for that header.
func (o URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd) bool { return v.Replace }).(pulumi.BoolOutput)
}

type URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput) ToURLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput() URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput) ToURLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd {
		return vs[0].([]URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAdd)[vs[1].(int)]
	}).(URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput)
}

type URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace bool `pulumi:"replace"`
}

// URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddInput is an input type that accepts URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs and URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddInput` via:
//
// 		 URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs{...}
//
type URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput() URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput
	ToURLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutputWithContext(context.Context) URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput
}

type URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs) ToURLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput() URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput {
	return i.ToURLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs) ToURLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput)
}

// URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayInput is an input type that accepts URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArray and URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayInput` via:
//
// 		 URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArray{ URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs{...} }
//
type URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput() URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput
	ToURLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutputWithContext(context.Context) URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput
}

type URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArray []URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddInput

func (URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArray) ToURLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput() URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput {
	return i.ToURLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArray) ToURLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput)
}

type URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput) ToURLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput() URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput) ToURLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput {
	return o
}

// The name of the header.
func (o URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd) string { return v.HeaderName }).(pulumi.StringOutput)
}

// The value of the header to add.
func (o URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd) string { return v.HeaderValue }).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the
// header. If true, headerValue is set for the header, discarding any values that
// were set for that header.
func (o URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd) bool { return v.Replace }).(pulumi.BoolOutput)
}

type URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput) ToURLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput() URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput) ToURLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd {
		return vs[0].([]URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAdd)[vs[1].(int)]
	}).(URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput)
}

type URLMapPathMatcherRouteRuleMatchRule struct {
	// For satifying the matchRule condition, the path of the request must exactly
	// match the value specified in fullPathMatch after removing any query parameters
	// and anchor that may be part of the original URL. FullPathMatch must be between 1
	// and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
	// be specified.
	FullPathMatch *string `pulumi:"fullPathMatch"`
	// Specifies a list of header match criteria, all of which must match corresponding
	// headers in the request.  Structure is documented below.
	HeaderMatches []URLMapPathMatcherRouteRuleMatchRuleHeaderMatch `pulumi:"headerMatches"`
	// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
	// Defaults to false.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to
	// a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
	// clients present node metadata. If a match takes place, the relevant routing
	// configuration is made available to those proxies. For each metadataFilter in
	// this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
	// filterLabels must match the corresponding label provided in the metadata. If its
	// filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
	// with corresponding labels in the provided metadata. metadataFilters specified
	// here can be overrides those specified in ForwardingRule that refers to this
	// UrlMap. metadataFilters only applies to Loadbalancers that have their
	// loadBalancingScheme set to INTERNAL_SELF_MANAGED.  Structure is documented below.
	MetadataFilters []URLMapPathMatcherRouteRuleMatchRuleMetadataFilter `pulumi:"metadataFilters"`
	// The value of the header must start with the contents of prefixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	PrefixMatch *string `pulumi:"prefixMatch"`
	// Specifies a list of query parameter match criteria, all of which must match
	// corresponding query parameters in the request.  Structure is documented below.
	QueryParameterMatches []URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch `pulumi:"queryParameterMatches"`
	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch *string `pulumi:"regexMatch"`
}

// URLMapPathMatcherRouteRuleMatchRuleInput is an input type that accepts URLMapPathMatcherRouteRuleMatchRuleArgs and URLMapPathMatcherRouteRuleMatchRuleOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleMatchRuleInput` via:
//
// 		 URLMapPathMatcherRouteRuleMatchRuleArgs{...}
//
type URLMapPathMatcherRouteRuleMatchRuleInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleMatchRuleOutput() URLMapPathMatcherRouteRuleMatchRuleOutput
	ToURLMapPathMatcherRouteRuleMatchRuleOutputWithContext(context.Context) URLMapPathMatcherRouteRuleMatchRuleOutput
}

type URLMapPathMatcherRouteRuleMatchRuleArgs struct {
	// For satifying the matchRule condition, the path of the request must exactly
	// match the value specified in fullPathMatch after removing any query parameters
	// and anchor that may be part of the original URL. FullPathMatch must be between 1
	// and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
	// be specified.
	FullPathMatch pulumi.StringPtrInput `pulumi:"fullPathMatch"`
	// Specifies a list of header match criteria, all of which must match corresponding
	// headers in the request.  Structure is documented below.
	HeaderMatches URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput `pulumi:"headerMatches"`
	// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
	// Defaults to false.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to
	// a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
	// clients present node metadata. If a match takes place, the relevant routing
	// configuration is made available to those proxies. For each metadataFilter in
	// this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
	// filterLabels must match the corresponding label provided in the metadata. If its
	// filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
	// with corresponding labels in the provided metadata. metadataFilters specified
	// here can be overrides those specified in ForwardingRule that refers to this
	// UrlMap. metadataFilters only applies to Loadbalancers that have their
	// loadBalancingScheme set to INTERNAL_SELF_MANAGED.  Structure is documented below.
	MetadataFilters URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayInput `pulumi:"metadataFilters"`
	// The value of the header must start with the contents of prefixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	PrefixMatch pulumi.StringPtrInput `pulumi:"prefixMatch"`
	// Specifies a list of query parameter match criteria, all of which must match
	// corresponding query parameters in the request.  Structure is documented below.
	QueryParameterMatches URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput `pulumi:"queryParameterMatches"`
	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch pulumi.StringPtrInput `pulumi:"regexMatch"`
}

func (URLMapPathMatcherRouteRuleMatchRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleMatchRule)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleMatchRuleArgs) ToURLMapPathMatcherRouteRuleMatchRuleOutput() URLMapPathMatcherRouteRuleMatchRuleOutput {
	return i.ToURLMapPathMatcherRouteRuleMatchRuleOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleMatchRuleArgs) ToURLMapPathMatcherRouteRuleMatchRuleOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleMatchRuleOutput)
}

// URLMapPathMatcherRouteRuleMatchRuleArrayInput is an input type that accepts URLMapPathMatcherRouteRuleMatchRuleArray and URLMapPathMatcherRouteRuleMatchRuleArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleMatchRuleArrayInput` via:
//
// 		 URLMapPathMatcherRouteRuleMatchRuleArray{ URLMapPathMatcherRouteRuleMatchRuleArgs{...} }
//
type URLMapPathMatcherRouteRuleMatchRuleArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleMatchRuleArrayOutput() URLMapPathMatcherRouteRuleMatchRuleArrayOutput
	ToURLMapPathMatcherRouteRuleMatchRuleArrayOutputWithContext(context.Context) URLMapPathMatcherRouteRuleMatchRuleArrayOutput
}

type URLMapPathMatcherRouteRuleMatchRuleArray []URLMapPathMatcherRouteRuleMatchRuleInput

func (URLMapPathMatcherRouteRuleMatchRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleMatchRule)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleMatchRuleArray) ToURLMapPathMatcherRouteRuleMatchRuleArrayOutput() URLMapPathMatcherRouteRuleMatchRuleArrayOutput {
	return i.ToURLMapPathMatcherRouteRuleMatchRuleArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleMatchRuleArray) ToURLMapPathMatcherRouteRuleMatchRuleArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleMatchRuleArrayOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleMatchRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleMatchRule)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleMatchRuleOutput) ToURLMapPathMatcherRouteRuleMatchRuleOutput() URLMapPathMatcherRouteRuleMatchRuleOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleOutput) ToURLMapPathMatcherRouteRuleMatchRuleOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleOutput {
	return o
}

// For satifying the matchRule condition, the path of the request must exactly
// match the value specified in fullPathMatch after removing any query parameters
// and anchor that may be part of the original URL. FullPathMatch must be between 1
// and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
// be specified.
func (o URLMapPathMatcherRouteRuleMatchRuleOutput) FullPathMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRule) *string { return v.FullPathMatch }).(pulumi.StringPtrOutput)
}

// Specifies a list of header match criteria, all of which must match corresponding
// headers in the request.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleMatchRuleOutput) HeaderMatches() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRule) []URLMapPathMatcherRouteRuleMatchRuleHeaderMatch {
		return v.HeaderMatches
	}).(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput)
}

// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
// Defaults to false.
func (o URLMapPathMatcherRouteRuleMatchRuleOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRule) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// Opaque filter criteria used by Loadbalancer to restrict routing configuration to
// a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
// clients present node metadata. If a match takes place, the relevant routing
// configuration is made available to those proxies. For each metadataFilter in
// this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
// filterLabels must match the corresponding label provided in the metadata. If its
// filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
// with corresponding labels in the provided metadata. metadataFilters specified
// here can be overrides those specified in ForwardingRule that refers to this
// UrlMap. metadataFilters only applies to Loadbalancers that have their
// loadBalancingScheme set to INTERNAL_SELF_MANAGED.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleMatchRuleOutput) MetadataFilters() URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRule) []URLMapPathMatcherRouteRuleMatchRuleMetadataFilter {
		return v.MetadataFilters
	}).(URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput)
}

// The value of the header must start with the contents of prefixMatch. Only one of
// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
// must be set.
func (o URLMapPathMatcherRouteRuleMatchRuleOutput) PrefixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRule) *string { return v.PrefixMatch }).(pulumi.StringPtrOutput)
}

// Specifies a list of query parameter match criteria, all of which must match
// corresponding query parameters in the request.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleMatchRuleOutput) QueryParameterMatches() URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRule) []URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch {
		return v.QueryParameterMatches
	}).(URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput)
}

// The queryParameterMatch matches if the value of the parameter matches the
// regular expression specified by regexMatch. For the regular expression grammar,
// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
// exactMatch and regexMatch must be set.
func (o URLMapPathMatcherRouteRuleMatchRuleOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRule) *string { return v.RegexMatch }).(pulumi.StringPtrOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleMatchRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleMatchRule)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleMatchRuleArrayOutput) ToURLMapPathMatcherRouteRuleMatchRuleArrayOutput() URLMapPathMatcherRouteRuleMatchRuleArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleArrayOutput) ToURLMapPathMatcherRouteRuleMatchRuleArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherRouteRuleMatchRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherRouteRuleMatchRule {
		return vs[0].([]URLMapPathMatcherRouteRuleMatchRule)[vs[1].(int)]
	}).(URLMapPathMatcherRouteRuleMatchRuleOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleHeaderMatch struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	ExactMatch *string `pulumi:"exactMatch"`
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// If set to false, the headerMatch is considered a match if the match criteria
	// above are met. If set to true, the headerMatch is considered a match if the
	// match criteria above are NOT met. Defaults to false.
	InvertMatch *bool `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	PrefixMatch *string `pulumi:"prefixMatch"`
	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	PresentMatch *bool `pulumi:"presentMatch"`
	// The header value must be an integer and its value must be in the range specified
	// in rangeMatch. If the header does not contain an integer, number or is empty,
	// the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
	// not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.  Structure is documented below.
	RangeMatch *URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch `pulumi:"rangeMatch"`
	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch *string `pulumi:"regexMatch"`
	// The value of the header must end with the contents of suffixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	SuffixMatch *string `pulumi:"suffixMatch"`
}

// URLMapPathMatcherRouteRuleMatchRuleHeaderMatchInput is an input type that accepts URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs and URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleMatchRuleHeaderMatchInput` via:
//
// 		 URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs{...}
//
type URLMapPathMatcherRouteRuleMatchRuleHeaderMatchInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput
	ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutputWithContext(context.Context) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput
}

type URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	ExactMatch pulumi.StringPtrInput `pulumi:"exactMatch"`
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// If set to false, the headerMatch is considered a match if the match criteria
	// above are met. If set to true, the headerMatch is considered a match if the
	// match criteria above are NOT met. Defaults to false.
	InvertMatch pulumi.BoolPtrInput `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	PrefixMatch pulumi.StringPtrInput `pulumi:"prefixMatch"`
	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	PresentMatch pulumi.BoolPtrInput `pulumi:"presentMatch"`
	// The header value must be an integer and its value must be in the range specified
	// in rangeMatch. If the header does not contain an integer, number or is empty,
	// the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
	// not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.  Structure is documented below.
	RangeMatch URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrInput `pulumi:"rangeMatch"`
	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch pulumi.StringPtrInput `pulumi:"regexMatch"`
	// The value of the header must end with the contents of suffixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	SuffixMatch pulumi.StringPtrInput `pulumi:"suffixMatch"`
}

func (URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleMatchRuleHeaderMatch)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return i.ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput)
}

// URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput is an input type that accepts URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArray and URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput` via:
//
// 		 URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArray{ URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs{...} }
//
type URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput
	ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutputWithContext(context.Context) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput
}

type URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArray []URLMapPathMatcherRouteRuleMatchRuleHeaderMatchInput

func (URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleMatchRuleHeaderMatch)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArray) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return i.ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArray) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleMatchRuleHeaderMatch)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return o
}

// The queryParameterMatch matches if the value of the parameter exactly matches
// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
// must be set.
func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) ExactMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleHeaderMatch) *string { return v.ExactMatch }).(pulumi.StringPtrOutput)
}

// The name of the header.
func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleHeaderMatch) string { return v.HeaderName }).(pulumi.StringOutput)
}

// If set to false, the headerMatch is considered a match if the match criteria
// above are met. If set to true, the headerMatch is considered a match if the
// match criteria above are NOT met. Defaults to false.
func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) InvertMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleHeaderMatch) *bool { return v.InvertMatch }).(pulumi.BoolPtrOutput)
}

// The value of the header must start with the contents of prefixMatch. Only one of
// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
// must be set.
func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) PrefixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleHeaderMatch) *string { return v.PrefixMatch }).(pulumi.StringPtrOutput)
}

// Specifies that the queryParameterMatch matches if the request contains the query
// parameter, irrespective of whether the parameter has a value or not. Only one of
// presentMatch, exactMatch and regexMatch must be set.
func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) PresentMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleHeaderMatch) *bool { return v.PresentMatch }).(pulumi.BoolPtrOutput)
}

// The header value must be an integer and its value must be in the range specified
// in rangeMatch. If the header does not contain an integer, number or is empty,
// the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
// not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
// must be set.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) RangeMatch() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleHeaderMatch) *URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch {
		return v.RangeMatch
	}).(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput)
}

// The queryParameterMatch matches if the value of the parameter matches the
// regular expression specified by regexMatch. For the regular expression grammar,
// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
// exactMatch and regexMatch must be set.
func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleHeaderMatch) *string { return v.RegexMatch }).(pulumi.StringPtrOutput)
}

// The value of the header must end with the contents of suffixMatch. Only one of
// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
// must be set.
func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput) SuffixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleHeaderMatch) *string { return v.SuffixMatch }).(pulumi.StringPtrOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleMatchRuleHeaderMatch)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherRouteRuleMatchRuleHeaderMatch {
		return vs[0].([]URLMapPathMatcherRouteRuleMatchRuleHeaderMatch)[vs[1].(int)]
	}).(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch struct {
	// The end of the range (exclusive).
	RangeEnd int `pulumi:"rangeEnd"`
	// The start of the range (inclusive).
	RangeStart int `pulumi:"rangeStart"`
}

// URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchInput is an input type that accepts URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs and URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchInput` via:
//
// 		 URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs{...}
//
type URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput
	ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutputWithContext(context.Context) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput
}

type URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs struct {
	// The end of the range (exclusive).
	RangeEnd pulumi.IntInput `pulumi:"rangeEnd"`
	// The start of the range (inclusive).
	RangeStart pulumi.IntInput `pulumi:"rangeStart"`
}

func (URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput {
	return i.ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput)
}

func (i URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput).ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(ctx)
}

// URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrInput is an input type that accepts URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs, URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtr and URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrInput` via:
//
// 		 URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput
	ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(context.Context) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput
}

type urlmapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrType URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs

func URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtr(v *URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchArgs) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrInput {
	return (*urlmapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrType)(v)
}

func (*urlmapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch)(nil)).Elem()
}

func (i *urlmapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrType) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrType) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return o.ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch) *URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch {
		return &v
	}).(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput)
}

// The end of the range (exclusive).
func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput) RangeEnd() pulumi.IntOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch) int { return v.RangeEnd }).(pulumi.IntOutput)
}

// The start of the range (inclusive).
func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput) RangeStart() pulumi.IntOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch) int { return v.RangeStart }).(pulumi.IntOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput) ToURLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput) Elem() URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch) URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch {
		return *v
	}).(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput)
}

// The end of the range (exclusive).
func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput) RangeEnd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch) *int {
		if v == nil {
			return nil
		}
		return &v.RangeEnd
	}).(pulumi.IntPtrOutput)
}

// The start of the range (inclusive).
func (o URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput) RangeStart() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatch) *int {
		if v == nil {
			return nil
		}
		return &v.RangeStart
	}).(pulumi.IntPtrOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleMetadataFilter struct {
	// The list of label value pairs that must match labels in the provided metadata
	// based on filterMatchCriteria  This list must not be empty and can have at the
	// most 64 entries.  Structure is documented below.
	FilterLabels []URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel `pulumi:"filterLabels"`
	// Specifies how individual filterLabel matches within the list of filterLabels
	// contribute towards the overall metadataFilter match. Supported values are:
	// - MATCH_ANY: At least one of the filterLabels must have a matching label in the
	// provided metadata.
	// - MATCH_ALL: All filterLabels must have matching labels in
	// the provided metadata.
	FilterMatchCriteria string `pulumi:"filterMatchCriteria"`
}

// URLMapPathMatcherRouteRuleMatchRuleMetadataFilterInput is an input type that accepts URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs and URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleMatchRuleMetadataFilterInput` via:
//
// 		 URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs{...}
//
type URLMapPathMatcherRouteRuleMatchRuleMetadataFilterInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput() URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput
	ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutputWithContext(context.Context) URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput
}

type URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs struct {
	// The list of label value pairs that must match labels in the provided metadata
	// based on filterMatchCriteria  This list must not be empty and can have at the
	// most 64 entries.  Structure is documented below.
	FilterLabels URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayInput `pulumi:"filterLabels"`
	// Specifies how individual filterLabel matches within the list of filterLabels
	// contribute towards the overall metadataFilter match. Supported values are:
	// - MATCH_ANY: At least one of the filterLabels must have a matching label in the
	// provided metadata.
	// - MATCH_ALL: All filterLabels must have matching labels in
	// the provided metadata.
	FilterMatchCriteria pulumi.StringInput `pulumi:"filterMatchCriteria"`
}

func (URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleMatchRuleMetadataFilter)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs) ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput() URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput {
	return i.ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs) ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput)
}

// URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayInput is an input type that accepts URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArray and URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayInput` via:
//
// 		 URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArray{ URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs{...} }
//
type URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput() URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput
	ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutputWithContext(context.Context) URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput
}

type URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArray []URLMapPathMatcherRouteRuleMatchRuleMetadataFilterInput

func (URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleMatchRuleMetadataFilter)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArray) ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput() URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput {
	return i.ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArray) ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleMatchRuleMetadataFilter)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput) ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput() URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput) ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput {
	return o
}

// The list of label value pairs that must match labels in the provided metadata
// based on filterMatchCriteria  This list must not be empty and can have at the
// most 64 entries.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput) FilterLabels() URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleMetadataFilter) []URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel {
		return v.FilterLabels
	}).(URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput)
}

// Specifies how individual filterLabel matches within the list of filterLabels
// contribute towards the overall metadataFilter match. Supported values are:
// - MATCH_ANY: At least one of the filterLabels must have a matching label in the
// provided metadata.
// - MATCH_ALL: All filterLabels must have matching labels in
// the provided metadata.
func (o URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput) FilterMatchCriteria() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleMetadataFilter) string { return v.FilterMatchCriteria }).(pulumi.StringOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleMatchRuleMetadataFilter)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput) ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput() URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput) ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherRouteRuleMatchRuleMetadataFilter {
		return vs[0].([]URLMapPathMatcherRouteRuleMatchRuleMetadataFilter)[vs[1].(int)]
	}).(URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel struct {
	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name string `pulumi:"name"`
	// The value of the label must match the specified value. value can have a maximum
	// length of 1024 characters.
	Value string `pulumi:"value"`
}

// URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelInput is an input type that accepts URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs and URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelInput` via:
//
// 		 URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs{...}
//
type URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput() URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput
	ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutputWithContext(context.Context) URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput
}

type URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs struct {
	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the label must match the specified value. value can have a maximum
	// length of 1024 characters.
	Value pulumi.StringInput `pulumi:"value"`
}

func (URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs) ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput() URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput {
	return i.ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs) ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput)
}

// URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayInput is an input type that accepts URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArray and URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayInput` via:
//
// 		 URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArray{ URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs{...} }
//
type URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput() URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput
	ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutputWithContext(context.Context) URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput
}

type URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArray []URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelInput

func (URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArray) ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput() URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput {
	return i.ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArray) ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput) ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput() URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput) ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput {
	return o
}

// The name of the query parameter to match. The query parameter must exist in the
// request, in the absence of which the request match fails.
func (o URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the label must match the specified value. value can have a maximum
// length of 1024 characters.
func (o URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel) string { return v.Value }).(pulumi.StringOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput) ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput() URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput) ToURLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel {
		return vs[0].([]URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabel)[vs[1].(int)]
	}).(URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	ExactMatch *string `pulumi:"exactMatch"`
	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name string `pulumi:"name"`
	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	PresentMatch *bool `pulumi:"presentMatch"`
	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch *string `pulumi:"regexMatch"`
}

// URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchInput is an input type that accepts URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs and URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchInput` via:
//
// 		 URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs{...}
//
type URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput() URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput
	ToURLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputWithContext(context.Context) URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput
}

type URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	ExactMatch pulumi.StringPtrInput `pulumi:"exactMatch"`
	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	PresentMatch pulumi.BoolPtrInput `pulumi:"presentMatch"`
	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch pulumi.StringPtrInput `pulumi:"regexMatch"`
}

func (URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs) ToURLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput() URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return i.ToURLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs) ToURLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput)
}

// URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput is an input type that accepts URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArray and URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput` via:
//
// 		 URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArray{ URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs{...} }
//
type URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput() URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput
	ToURLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutputWithContext(context.Context) URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput
}

type URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArray []URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchInput

func (URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArray) ToURLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput() URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return i.ToURLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArray) ToURLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) ToURLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput() URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) ToURLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return o
}

// The queryParameterMatch matches if the value of the parameter exactly matches
// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
// must be set.
func (o URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) ExactMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch) *string { return v.ExactMatch }).(pulumi.StringPtrOutput)
}

// The name of the query parameter to match. The query parameter must exist in the
// request, in the absence of which the request match fails.
func (o URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies that the queryParameterMatch matches if the request contains the query
// parameter, irrespective of whether the parameter has a value or not. Only one of
// presentMatch, exactMatch and regexMatch must be set.
func (o URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) PresentMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch) *bool { return v.PresentMatch }).(pulumi.BoolPtrOutput)
}

// The queryParameterMatch matches if the value of the parameter matches the
// regular expression specified by regexMatch. For the regular expression grammar,
// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
// exactMatch and regexMatch must be set.
func (o URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch) *string { return v.RegexMatch }).(pulumi.StringPtrOutput)
}

type URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput) ToURLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput() URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput) ToURLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch {
		return vs[0].([]URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatch)[vs[1].(int)]
	}).(URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput)
}

type URLMapPathMatcherRouteRuleRouteAction struct {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing  Structure is documented below.
	CorsPolicy *URLMapPathMatcherRouteRuleRouteActionCorsPolicy `pulumi:"corsPolicy"`
	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retryPolicy will be
	// ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
	FaultInjectionPolicy *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy `pulumi:"faultInjectionPolicy"`
	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.  Structure is documented below.
	RequestMirrorPolicy *URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy `pulumi:"requestMirrorPolicy"`
	// Specifies the retry policy associated with this route.  Structure is documented below.
	RetryPolicy *URLMapPathMatcherRouteRuleRouteActionRetryPolicy `pulumi:"retryPolicy"`
	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.  Structure is documented below.
	Timeout *URLMapPathMatcherRouteRuleRouteActionTimeout `pulumi:"timeout"`
	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service  Structure is documented below.
	UrlRewrite *URLMapPathMatcherRouteRuleRouteActionUrlRewrite `pulumi:"urlRewrite"`
	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.  Structure is documented below.
	WeightedBackendServices []URLMapPathMatcherRouteRuleRouteActionWeightedBackendService `pulumi:"weightedBackendServices"`
}

// URLMapPathMatcherRouteRuleRouteActionInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionArgs and URLMapPathMatcherRouteRuleRouteActionOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionArgs{...}
//
type URLMapPathMatcherRouteRuleRouteActionInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionOutput() URLMapPathMatcherRouteRuleRouteActionOutput
	ToURLMapPathMatcherRouteRuleRouteActionOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionOutput
}

type URLMapPathMatcherRouteRuleRouteActionArgs struct {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing  Structure is documented below.
	CorsPolicy URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrInput `pulumi:"corsPolicy"`
	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retryPolicy will be
	// ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
	FaultInjectionPolicy URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrInput `pulumi:"faultInjectionPolicy"`
	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.  Structure is documented below.
	RequestMirrorPolicy URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrInput `pulumi:"requestMirrorPolicy"`
	// Specifies the retry policy associated with this route.  Structure is documented below.
	RetryPolicy URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrInput `pulumi:"retryPolicy"`
	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.  Structure is documented below.
	Timeout URLMapPathMatcherRouteRuleRouteActionTimeoutPtrInput `pulumi:"timeout"`
	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service  Structure is documented below.
	UrlRewrite URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrInput `pulumi:"urlRewrite"`
	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.  Structure is documented below.
	WeightedBackendServices URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayInput `pulumi:"weightedBackendServices"`
}

func (URLMapPathMatcherRouteRuleRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteAction)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionArgs) ToURLMapPathMatcherRouteRuleRouteActionOutput() URLMapPathMatcherRouteRuleRouteActionOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionArgs) ToURLMapPathMatcherRouteRuleRouteActionOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionOutput)
}

func (i URLMapPathMatcherRouteRuleRouteActionArgs) ToURLMapPathMatcherRouteRuleRouteActionPtrOutput() URLMapPathMatcherRouteRuleRouteActionPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionArgs) ToURLMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionOutput).ToURLMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx)
}

// URLMapPathMatcherRouteRuleRouteActionPtrInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionArgs, URLMapPathMatcherRouteRuleRouteActionPtr and URLMapPathMatcherRouteRuleRouteActionPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionPtrInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherRouteRuleRouteActionPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionPtrOutput() URLMapPathMatcherRouteRuleRouteActionPtrOutput
	ToURLMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionPtrOutput
}

type urlmapPathMatcherRouteRuleRouteActionPtrType URLMapPathMatcherRouteRuleRouteActionArgs

func URLMapPathMatcherRouteRuleRouteActionPtr(v *URLMapPathMatcherRouteRuleRouteActionArgs) URLMapPathMatcherRouteRuleRouteActionPtrInput {
	return (*urlmapPathMatcherRouteRuleRouteActionPtrType)(v)
}

func (*urlmapPathMatcherRouteRuleRouteActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteAction)(nil)).Elem()
}

func (i *urlmapPathMatcherRouteRuleRouteActionPtrType) ToURLMapPathMatcherRouteRuleRouteActionPtrOutput() URLMapPathMatcherRouteRuleRouteActionPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherRouteRuleRouteActionPtrType) ToURLMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteAction)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionOutput) ToURLMapPathMatcherRouteRuleRouteActionOutput() URLMapPathMatcherRouteRuleRouteActionOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionOutput) ToURLMapPathMatcherRouteRuleRouteActionOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionOutput) ToURLMapPathMatcherRouteRuleRouteActionPtrOutput() URLMapPathMatcherRouteRuleRouteActionPtrOutput {
	return o.ToURLMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherRouteRuleRouteActionOutput) ToURLMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteAction) *URLMapPathMatcherRouteRuleRouteAction {
		return &v
	}).(URLMapPathMatcherRouteRuleRouteActionPtrOutput)
}

// The specification for allowing client side cross-origin requests. Please see W3C
// Recommendation for Cross Origin Resource Sharing  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionOutput) CorsPolicy() URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteAction) *URLMapPathMatcherRouteRuleRouteActionCorsPolicy {
		return v.CorsPolicy
	}).(URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput)
}

// The specification for fault injection introduced into traffic to test the
// resiliency of clients to backend service failure. As part of fault injection,
// when clients send requests to a backend service, delays can be introduced by
// Loadbalancer on a percentage of requests before sending those request to the
// backend service. Similarly requests from clients can be aborted by the
// Loadbalancer for a percentage of requests. timeout and retryPolicy will be
// ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionOutput) FaultInjectionPolicy() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteAction) *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy {
		return v.FaultInjectionPolicy
	}).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput)
}

// Specifies the policy on how requests intended for the route's backends are
// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
// responses from the shadow service. Prior to sending traffic to the shadow
// service, the host / authority header is suffixed with -shadow.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionOutput) RequestMirrorPolicy() URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteAction) *URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy {
		return v.RequestMirrorPolicy
	}).(URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput)
}

// Specifies the retry policy associated with this route.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionOutput) RetryPolicy() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteAction) *URLMapPathMatcherRouteRuleRouteActionRetryPolicy {
		return v.RetryPolicy
	}).(URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput)
}

// Specifies the timeout for the selected route. Timeout is computed from the time
// the request is has been fully processed (i.e. end-of-stream) up until the
// response has been completely processed. Timeout includes all retries. If not
// specified, the default value is 15 seconds.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionOutput) Timeout() URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteAction) *URLMapPathMatcherRouteRuleRouteActionTimeout {
		return v.Timeout
	}).(URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput)
}

// The spec to modify the URL of the request, prior to forwarding the request to
// the matched service  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionOutput) UrlRewrite() URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteAction) *URLMapPathMatcherRouteRuleRouteActionUrlRewrite {
		return v.UrlRewrite
	}).(URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput)
}

// A list of weighted backend services to send traffic to when a route match
// occurs. The weights determine the fraction of traffic that flows to their
// corresponding backend service. If all traffic needs to go to a single backend
// service, there must be one  weightedBackendService with weight set to a non 0
// number. Once a backendService is identified and before forwarding the request to
// the backend service, advanced routing actions like Url rewrites and header
// transformations are applied depending on additional settings specified in this
// HttpRouteAction.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionOutput) WeightedBackendServices() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteAction) []URLMapPathMatcherRouteRuleRouteActionWeightedBackendService {
		return v.WeightedBackendServices
	}).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput)
}

type URLMapPathMatcherRouteRuleRouteActionPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteAction)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionPtrOutput() URLMapPathMatcherRouteRuleRouteActionPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionPtrOutput) Elem() URLMapPathMatcherRouteRuleRouteActionOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteAction) URLMapPathMatcherRouteRuleRouteAction { return *v }).(URLMapPathMatcherRouteRuleRouteActionOutput)
}

// The specification for allowing client side cross-origin requests. Please see W3C
// Recommendation for Cross Origin Resource Sharing  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionPtrOutput) CorsPolicy() URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteAction) *URLMapPathMatcherRouteRuleRouteActionCorsPolicy {
		if v == nil {
			return nil
		}
		return v.CorsPolicy
	}).(URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput)
}

// The specification for fault injection introduced into traffic to test the
// resiliency of clients to backend service failure. As part of fault injection,
// when clients send requests to a backend service, delays can be introduced by
// Loadbalancer on a percentage of requests before sending those request to the
// backend service. Similarly requests from clients can be aborted by the
// Loadbalancer for a percentage of requests. timeout and retryPolicy will be
// ignored by clients that are configured with a fault_injection_policy.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionPtrOutput) FaultInjectionPolicy() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteAction) *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy {
		if v == nil {
			return nil
		}
		return v.FaultInjectionPolicy
	}).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput)
}

// Specifies the policy on how requests intended for the route's backends are
// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
// responses from the shadow service. Prior to sending traffic to the shadow
// service, the host / authority header is suffixed with -shadow.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionPtrOutput) RequestMirrorPolicy() URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteAction) *URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy {
		if v == nil {
			return nil
		}
		return v.RequestMirrorPolicy
	}).(URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput)
}

// Specifies the retry policy associated with this route.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionPtrOutput) RetryPolicy() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteAction) *URLMapPathMatcherRouteRuleRouteActionRetryPolicy {
		if v == nil {
			return nil
		}
		return v.RetryPolicy
	}).(URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput)
}

// Specifies the timeout for the selected route. Timeout is computed from the time
// the request is has been fully processed (i.e. end-of-stream) up until the
// response has been completely processed. Timeout includes all retries. If not
// specified, the default value is 15 seconds.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionPtrOutput) Timeout() URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteAction) *URLMapPathMatcherRouteRuleRouteActionTimeout {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput)
}

// The spec to modify the URL of the request, prior to forwarding the request to
// the matched service  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionPtrOutput) UrlRewrite() URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteAction) *URLMapPathMatcherRouteRuleRouteActionUrlRewrite {
		if v == nil {
			return nil
		}
		return v.UrlRewrite
	}).(URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput)
}

// A list of weighted backend services to send traffic to when a route match
// occurs. The weights determine the fraction of traffic that flows to their
// corresponding backend service. If all traffic needs to go to a single backend
// service, there must be one  weightedBackendService with weight set to a non 0
// number. Once a backendService is identified and before forwarding the request to
// the backend service, advanced routing actions like Url rewrites and header
// transformations are applied depending on additional settings specified in this
// HttpRouteAction.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionPtrOutput) WeightedBackendServices() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteAction) []URLMapPathMatcherRouteRuleRouteActionWeightedBackendService {
		if v == nil {
			return nil
		}
		return v.WeightedBackendServices
	}).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput)
}

type URLMapPathMatcherRouteRuleRouteActionCorsPolicy struct {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	AllowCredentials *bool `pulumi:"allowCredentials"`
	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods []string `pulumi:"allowMethods"`
	// Specifies the regualar expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allowOrigins or allow_origin_regex.
	AllowOriginRegexes []string `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allowOrigins or allow_origin_regex.
	AllowOrigins []string `pulumi:"allowOrigins"`
	// If true, specifies the CORS policy is disabled.
	// which indicates that the CORS policy is in effect. Defaults to false.
	Disabled *bool `pulumi:"disabled"`
	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	MaxAge *int `pulumi:"maxAge"`
}

// URLMapPathMatcherRouteRuleRouteActionCorsPolicyInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs and URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionCorsPolicyInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs{...}
//
type URLMapPathMatcherRouteRuleRouteActionCorsPolicyInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput() URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput
	ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput
}

type URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs struct {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	AllowCredentials pulumi.BoolPtrInput `pulumi:"allowCredentials"`
	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders pulumi.StringArrayInput `pulumi:"allowHeaders"`
	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods pulumi.StringArrayInput `pulumi:"allowMethods"`
	// Specifies the regualar expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allowOrigins or allow_origin_regex.
	AllowOriginRegexes pulumi.StringArrayInput `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allowOrigins or allow_origin_regex.
	AllowOrigins pulumi.StringArrayInput `pulumi:"allowOrigins"`
	// If true, specifies the CORS policy is disabled.
	// which indicates that the CORS policy is in effect. Defaults to false.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	MaxAge pulumi.IntPtrInput `pulumi:"maxAge"`
}

func (URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs) ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput() URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs) ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput)
}

func (i URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs) ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs) ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput).ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx)
}

// URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs, URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtr and URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput
	ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput
}

type urlmapPathMatcherRouteRuleRouteActionCorsPolicyPtrType URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs

func URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtr(v *URLMapPathMatcherRouteRuleRouteActionCorsPolicyArgs) URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrInput {
	return (*urlmapPathMatcherRouteRuleRouteActionCorsPolicyPtrType)(v)
}

func (*urlmapPathMatcherRouteRuleRouteActionCorsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (i *urlmapPathMatcherRouteRuleRouteActionCorsPolicyPtrType) ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherRouteRuleRouteActionCorsPolicyPtrType) ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput() URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o.ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionCorsPolicy) *URLMapPathMatcherRouteRuleRouteActionCorsPolicy {
		return &v
	}).(URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput)
}

// In response to a preflight request, setting this to true indicates that the
// actual request can include user credentials. This translates to the Access-
// Control-Allow-Credentials header. Defaults to false.
func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionCorsPolicy) *bool { return v.AllowCredentials }).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers header.
func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionCorsPolicy) []string { return v.AllowHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the content for the Access-Control-Allow-Methods header.
func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionCorsPolicy) []string { return v.AllowMethods }).(pulumi.StringArrayOutput)
}

// Specifies the regualar expression patterns that match allowed origins. For
// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
// An origin is allowed if it matches either allowOrigins or allow_origin_regex.
func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionCorsPolicy) []string { return v.AllowOriginRegexes }).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests. An
// origin is allowed if it matches either allowOrigins or allow_origin_regex.
func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionCorsPolicy) []string { return v.AllowOrigins }).(pulumi.StringArrayOutput)
}

// If true, specifies the CORS policy is disabled.
// which indicates that the CORS policy is in effect. Defaults to false.
func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionCorsPolicy) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Expose-Headers header.
func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionCorsPolicy) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

// Specifies how long the results of a preflight request can be cached. This
// translates to the content for the Access-Control-Max-Age header.
func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionCorsPolicy) *int { return v.MaxAge }).(pulumi.IntPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionCorsPolicy)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) Elem() URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionCorsPolicy) URLMapPathMatcherRouteRuleRouteActionCorsPolicy {
		return *v
	}).(URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput)
}

// In response to a preflight request, setting this to true indicates that the
// actual request can include user credentials. This translates to the Access-
// Control-Allow-Credentials header. Defaults to false.
func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers header.
func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the Access-Control-Allow-Methods header.
func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowMethods
	}).(pulumi.StringArrayOutput)
}

// Specifies the regualar expression patterns that match allowed origins. For
// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
// An origin is allowed if it matches either allowOrigins or allow_origin_regex.
func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOriginRegexes
	}).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests. An
// origin is allowed if it matches either allowOrigins or allow_origin_regex.
func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOrigins
	}).(pulumi.StringArrayOutput)
}

// If true, specifies the CORS policy is disabled.
// which indicates that the CORS policy is in effect. Defaults to false.
func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Expose-Headers header.
func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies how long the results of a preflight request can be cached. This
// translates to the content for the Access-Control-Max-Age header.
func (o URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionCorsPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxAge
	}).(pulumi.IntPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy struct {
	// The specification for how client requests are aborted as part of fault
	// injection.  Structure is documented below.
	Abort *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort `pulumi:"abort"`
	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.  Structure is documented below.
	Delay *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay `pulumi:"delay"`
}

// URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs and URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs{...}
//
type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput
	ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput
}

type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs struct {
	// The specification for how client requests are aborted as part of fault
	// injection.  Structure is documented below.
	Abort URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrInput `pulumi:"abort"`
	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.  Structure is documented below.
	Delay URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrInput `pulumi:"delay"`
}

func (URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput)
}

func (i URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput).ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx)
}

// URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs, URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtr and URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput
	ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput
}

type urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrType URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs

func URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtr(v *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyArgs) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrInput {
	return (*urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrType)(v)
}

func (*urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy)(nil)).Elem()
}

func (i *urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrType) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrType) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o.ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy) *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy {
		return &v
	}).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput)
}

// The specification for how client requests are aborted as part of fault
// injection.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput) Abort() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy) *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort {
		return v.Abort
	}).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput)
}

// The specification for how client requests are delayed as part of fault
// injection, before being sent to a backend service.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput) Delay() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy) *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay {
		return v.Delay
	}).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput) Elem() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy {
		return *v
	}).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput)
}

// The specification for how client requests are aborted as part of fault
// injection.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput) Abort() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy) *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort {
		if v == nil {
			return nil
		}
		return v.Abort
	}).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput)
}

// The specification for how client requests are delayed as part of fault
// injection, before being sent to a backend service.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput) Delay() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicy) *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort struct {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	HttpStatus *int `pulumi:"httpStatus"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `pulumi:"percentage"`
}

// URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs and URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs{...}
//
type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput
	ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput
}

type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs struct {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	HttpStatus pulumi.IntPtrInput `pulumi:"httpStatus"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage pulumi.Float64PtrInput `pulumi:"percentage"`
}

func (URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput)
}

func (i URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput).ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx)
}

// URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs, URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtr and URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput
	ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput
}

type urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrType URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs

func URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtr(v *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortArgs) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrInput {
	return (*urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrType)(v)
}

func (*urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (i *urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrType) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrType) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o.ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort) *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort {
		return &v
	}).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput)
}

// The HTTP status code used to abort the request. The value must be between 200
// and 599 inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput) HttpStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort) *int { return v.HttpStatus }).(pulumi.IntPtrOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will
// be introduced as part of fault injection. The value must be between 0.0 and
// 100.0 inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort) *float64 { return v.Percentage }).(pulumi.Float64PtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput) Elem() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort {
		return *v
	}).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput)
}

// The HTTP status code used to abort the request. The value must be between 200
// and 599 inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput) HttpStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort) *int {
		if v == nil {
			return nil
		}
		return v.HttpStatus
	}).(pulumi.IntPtrOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will
// be introduced as part of fault injection. The value must be between 0.0 and
// 100.0 inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbort) *float64 {
		if v == nil {
			return nil
		}
		return v.Percentage
	}).(pulumi.Float64PtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay struct {
	// Specifies the value of the fixed delay interval.  Structure is documented below.
	FixedDelay *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay `pulumi:"fixedDelay"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `pulumi:"percentage"`
}

// URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs and URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs{...}
//
type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput
	ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput
}

type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs struct {
	// Specifies the value of the fixed delay interval.  Structure is documented below.
	FixedDelay URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput `pulumi:"fixedDelay"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage pulumi.Float64PtrInput `pulumi:"percentage"`
}

func (URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput)
}

func (i URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput).ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx)
}

// URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs, URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtr and URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput
	ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput
}

type urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrType URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs

func URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtr(v *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayArgs) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrInput {
	return (*urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrType)(v)
}

func (*urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (i *urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrType) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrType) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o.ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay) *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay {
		return &v
	}).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput)
}

// Specifies the value of the fixed delay interval.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput) FixedDelay() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay) *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay {
		return v.FixedDelay
	}).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will
// be introduced as part of fault injection. The value must be between 0.0 and
// 100.0 inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay) *float64 { return v.Percentage }).(pulumi.Float64PtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput) Elem() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay {
		return *v
	}).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput)
}

// Specifies the value of the fixed delay interval.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput) FixedDelay() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay) *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay {
		if v == nil {
			return nil
		}
		return v.FixedDelay
	}).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will
// be introduced as part of fault injection. The value must be between 0.0 and
// 100.0 inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelay) *float64 {
		if v == nil {
			return nil
		}
		return v.Percentage
	}).(pulumi.Float64PtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds string `pulumi:"seconds"`
}

// URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs and URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs{...}
//
type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput
	ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput
}

type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.StringInput `pulumi:"seconds"`
}

func (URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput)
}

func (i URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput).ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx)
}

// URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs, URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtr and URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput
	ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput
}

type urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs

func URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtr(v *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrInput {
	return (*urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType)(v)
}

func (*urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay)(nil)).Elem()
}

func (i *urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrType) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o.ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay) *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay {
		return &v
	}).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput) Seconds() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay) string {
		return v.Seconds
	}).(pulumi.StringOutput)
}

type URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) Elem() URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay) URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay {
		return *v
	}).(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelay) *string {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.StringPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy struct {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService string `pulumi:"backendService"`
}

// URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs and URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs{...}
//
type URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput() URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput
	ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput
}

type URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs struct {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService pulumi.StringInput `pulumi:"backendService"`
}

func (URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs) ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput() URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs) ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput)
}

func (i URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs) ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs) ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput).ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx)
}

// URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs, URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtr and URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput
	ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput
}

type urlmapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrType URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs

func URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtr(v *URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyArgs) URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrInput {
	return (*urlmapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrType)(v)
}

func (*urlmapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy)(nil)).Elem()
}

func (i *urlmapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrType) ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrType) ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput) ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput() URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput) ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput) ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o.ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput) ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy) *URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy {
		return &v
	}).(URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput)
}

// The default BackendService resource. Before
// forwarding the request to backendService, the loadbalancer applies any relevant
// headerActions specified as part of this backendServiceWeight.
func (o URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput) BackendService() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy) string { return v.BackendService }).(pulumi.StringOutput)
}

type URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput) Elem() URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy) URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy {
		return *v
	}).(URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput)
}

// The default BackendService resource. Before
// forwarding the request to backendService, the loadbalancer applies any relevant
// headerActions specified as part of this backendServiceWeight.
func (o URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput) BackendService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.BackendService
	}).(pulumi.StringPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionRetryPolicy struct {
	// Specifies the allowed number retries. This number must be > 0.
	NumRetries int `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt.
	// If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction
	// is not set, will use the largest timeout among all backend services associated with the route.  Structure is documented below.
	PerTryTimeout *URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout `pulumi:"perTryTimeout"`
	// Specfies one or more conditions when this retry rule applies. Valid values are:
	// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
	// any 5xx response code, or if the backend service does not respond at all,
	// example: disconnects, reset, read timeout, connection failure, and refused
	// streams.
	// - gateway-error: Similar to 5xx, but only applies to response codes
	// 502, 503 or 504.
	// - connect-failure: Loadbalancer will retry on failures
	// connecting to backend services, for example due to connection timeouts.
	// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
	// Currently the only retriable error supported is 409.
	// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
	// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
	// - cancelled: Loadbalancer will retry if the gRPC status code in the response
	// header is set to cancelled
	// - deadline-exceeded: Loadbalancer will retry if the
	// gRPC status code in the response header is set to deadline-exceeded
	// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
	// header is set to resource-exhausted
	// - unavailable: Loadbalancer will retry if the gRPC status code in
	// the response header is set to unavailable
	RetryConditions []string `pulumi:"retryConditions"`
}

// URLMapPathMatcherRouteRuleRouteActionRetryPolicyInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs and URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionRetryPolicyInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs{...}
//
type URLMapPathMatcherRouteRuleRouteActionRetryPolicyInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput() URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput
	ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput
}

type URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs struct {
	// Specifies the allowed number retries. This number must be > 0.
	NumRetries pulumi.IntInput `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt.
	// If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction
	// is not set, will use the largest timeout among all backend services associated with the route.  Structure is documented below.
	PerTryTimeout URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrInput `pulumi:"perTryTimeout"`
	// Specfies one or more conditions when this retry rule applies. Valid values are:
	// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
	// any 5xx response code, or if the backend service does not respond at all,
	// example: disconnects, reset, read timeout, connection failure, and refused
	// streams.
	// - gateway-error: Similar to 5xx, but only applies to response codes
	// 502, 503 or 504.
	// - connect-failure: Loadbalancer will retry on failures
	// connecting to backend services, for example due to connection timeouts.
	// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
	// Currently the only retriable error supported is 409.
	// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
	// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
	// - cancelled: Loadbalancer will retry if the gRPC status code in the response
	// header is set to cancelled
	// - deadline-exceeded: Loadbalancer will retry if the
	// gRPC status code in the response header is set to deadline-exceeded
	// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
	// header is set to resource-exhausted
	// - unavailable: Loadbalancer will retry if the gRPC status code in
	// the response header is set to unavailable
	RetryConditions pulumi.StringArrayInput `pulumi:"retryConditions"`
}

func (URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionRetryPolicy)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput() URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput)
}

func (i URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput).ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(ctx)
}

// URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs, URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtr and URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput
	ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput
}

type urlmapPathMatcherRouteRuleRouteActionRetryPolicyPtrType URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs

func URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtr(v *URLMapPathMatcherRouteRuleRouteActionRetryPolicyArgs) URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrInput {
	return (*urlmapPathMatcherRouteRuleRouteActionRetryPolicyPtrType)(v)
}

func (*urlmapPathMatcherRouteRuleRouteActionRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionRetryPolicy)(nil)).Elem()
}

func (i *urlmapPathMatcherRouteRuleRouteActionRetryPolicyPtrType) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherRouteRuleRouteActionRetryPolicyPtrType) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionRetryPolicy)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput() URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return o.ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionRetryPolicy) *URLMapPathMatcherRouteRuleRouteActionRetryPolicy {
		return &v
	}).(URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput)
}

// Specifies the allowed number retries. This number must be > 0.
func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput) NumRetries() pulumi.IntOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionRetryPolicy) int { return v.NumRetries }).(pulumi.IntOutput)
}

// Specifies a non-zero timeout per retry attempt.
// If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction
// is not set, will use the largest timeout among all backend services associated with the route.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput) PerTryTimeout() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionRetryPolicy) *URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout {
		return v.PerTryTimeout
	}).(URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput)
}

// Specfies one or more conditions when this retry rule applies. Valid values are:
// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
// any 5xx response code, or if the backend service does not respond at all,
// example: disconnects, reset, read timeout, connection failure, and refused
// streams.
// - gateway-error: Similar to 5xx, but only applies to response codes
// 502, 503 or 504.
// - connect-failure: Loadbalancer will retry on failures
// connecting to backend services, for example due to connection timeouts.
// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
// Currently the only retriable error supported is 409.
// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
// - cancelled: Loadbalancer will retry if the gRPC status code in the response
// header is set to cancelled
// - deadline-exceeded: Loadbalancer will retry if the
// gRPC status code in the response header is set to deadline-exceeded
// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
// header is set to resource-exhausted
// - unavailable: Loadbalancer will retry if the gRPC status code in
// the response header is set to unavailable
func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionRetryPolicy) []string { return v.RetryConditions }).(pulumi.StringArrayOutput)
}

type URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionRetryPolicy)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput) Elem() URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionRetryPolicy) URLMapPathMatcherRouteRuleRouteActionRetryPolicy {
		return *v
	}).(URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput)
}

// Specifies the allowed number retries. This number must be > 0.
func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.NumRetries
	}).(pulumi.IntPtrOutput)
}

// Specifies a non-zero timeout per retry attempt.
// If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction
// is not set, will use the largest timeout among all backend services associated with the route.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput) PerTryTimeout() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionRetryPolicy) *URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout {
		if v == nil {
			return nil
		}
		return v.PerTryTimeout
	}).(URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput)
}

// Specfies one or more conditions when this retry rule applies. Valid values are:
// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
// any 5xx response code, or if the backend service does not respond at all,
// example: disconnects, reset, read timeout, connection failure, and refused
// streams.
// - gateway-error: Similar to 5xx, but only applies to response codes
// 502, 503 or 504.
// - connect-failure: Loadbalancer will retry on failures
// connecting to backend services, for example due to connection timeouts.
// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
// Currently the only retriable error supported is 409.
// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
// - cancelled: Loadbalancer will retry if the gRPC status code in the response
// header is set to cancelled
// - deadline-exceeded: Loadbalancer will retry if the
// gRPC status code in the response header is set to deadline-exceeded
// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
// header is set to resource-exhausted
// - unavailable: Loadbalancer will retry if the gRPC status code in
// the response header is set to unavailable
func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionRetryPolicy) []string {
		if v == nil {
			return nil
		}
		return v.RetryConditions
	}).(pulumi.StringArrayOutput)
}

type URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds string `pulumi:"seconds"`
}

// URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs and URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs{...}
//
type URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput
	ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput
}

type URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.StringInput `pulumi:"seconds"`
}

func (URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput)
}

func (i URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput).ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx)
}

// URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs, URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtr and URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput
	ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput
}

type urlmapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrType URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs

func URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtr(v *URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutArgs) URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrInput {
	return (*urlmapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrType)(v)
}

func (*urlmapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout)(nil)).Elem()
}

func (i *urlmapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrType) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrType) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o.ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout) *URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout {
		return &v
	}).(URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput) Seconds() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout) string { return v.Seconds }).(pulumi.StringOutput)
}

type URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) Elem() URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout) URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout {
		return *v
	}).(URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeout) *string {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.StringPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionTimeout struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds string `pulumi:"seconds"`
}

// URLMapPathMatcherRouteRuleRouteActionTimeoutInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionTimeoutArgs and URLMapPathMatcherRouteRuleRouteActionTimeoutOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionTimeoutInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionTimeoutArgs{...}
//
type URLMapPathMatcherRouteRuleRouteActionTimeoutInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionTimeoutOutput() URLMapPathMatcherRouteRuleRouteActionTimeoutOutput
	ToURLMapPathMatcherRouteRuleRouteActionTimeoutOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionTimeoutOutput
}

type URLMapPathMatcherRouteRuleRouteActionTimeoutArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 `seconds` field and a positive
	// `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds pulumi.StringInput `pulumi:"seconds"`
}

func (URLMapPathMatcherRouteRuleRouteActionTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionTimeout)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionTimeoutArgs) ToURLMapPathMatcherRouteRuleRouteActionTimeoutOutput() URLMapPathMatcherRouteRuleRouteActionTimeoutOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionTimeoutOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionTimeoutArgs) ToURLMapPathMatcherRouteRuleRouteActionTimeoutOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionTimeoutOutput)
}

func (i URLMapPathMatcherRouteRuleRouteActionTimeoutArgs) ToURLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput() URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionTimeoutArgs) ToURLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionTimeoutOutput).ToURLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(ctx)
}

// URLMapPathMatcherRouteRuleRouteActionTimeoutPtrInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionTimeoutArgs, URLMapPathMatcherRouteRuleRouteActionTimeoutPtr and URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionTimeoutPtrInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionTimeoutArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherRouteRuleRouteActionTimeoutPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput() URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput
	ToURLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput
}

type urlmapPathMatcherRouteRuleRouteActionTimeoutPtrType URLMapPathMatcherRouteRuleRouteActionTimeoutArgs

func URLMapPathMatcherRouteRuleRouteActionTimeoutPtr(v *URLMapPathMatcherRouteRuleRouteActionTimeoutArgs) URLMapPathMatcherRouteRuleRouteActionTimeoutPtrInput {
	return (*urlmapPathMatcherRouteRuleRouteActionTimeoutPtrType)(v)
}

func (*urlmapPathMatcherRouteRuleRouteActionTimeoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionTimeout)(nil)).Elem()
}

func (i *urlmapPathMatcherRouteRuleRouteActionTimeoutPtrType) ToURLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput() URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherRouteRuleRouteActionTimeoutPtrType) ToURLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionTimeoutOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionTimeout)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionTimeoutOutput) ToURLMapPathMatcherRouteRuleRouteActionTimeoutOutput() URLMapPathMatcherRouteRuleRouteActionTimeoutOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionTimeoutOutput) ToURLMapPathMatcherRouteRuleRouteActionTimeoutOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionTimeoutOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionTimeoutOutput) ToURLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput() URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return o.ToURLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherRouteRuleRouteActionTimeoutOutput) ToURLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionTimeout) *URLMapPathMatcherRouteRuleRouteActionTimeout {
		return &v
	}).(URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionTimeoutOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionTimeout) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionTimeoutOutput) Seconds() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionTimeout) string { return v.Seconds }).(pulumi.StringOutput)
}

type URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionTimeout)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput() URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput) Elem() URLMapPathMatcherRouteRuleRouteActionTimeoutOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionTimeout) URLMapPathMatcherRouteRuleRouteActionTimeout {
		return *v
	}).(URLMapPathMatcherRouteRuleRouteActionTimeoutOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations
// less than one second are represented with a 0 `seconds` field and a positive
// `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionTimeout) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
// inclusive.
func (o URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionTimeout) *string {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.StringPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionUrlRewrite struct {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	HostRewrite *string `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	PathPrefixRewrite *string `pulumi:"pathPrefixRewrite"`
}

// URLMapPathMatcherRouteRuleRouteActionUrlRewriteInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs and URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionUrlRewriteInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs{...}
//
type URLMapPathMatcherRouteRuleRouteActionUrlRewriteInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput() URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput
	ToURLMapPathMatcherRouteRuleRouteActionUrlRewriteOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput
}

type URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs struct {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	HostRewrite pulumi.StringPtrInput `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	PathPrefixRewrite pulumi.StringPtrInput `pulumi:"pathPrefixRewrite"`
}

func (URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs) ToURLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput() URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionUrlRewriteOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs) ToURLMapPathMatcherRouteRuleRouteActionUrlRewriteOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput)
}

func (i URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs) ToURLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs) ToURLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput).ToURLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx)
}

// URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs, URLMapPathMatcherRouteRuleRouteActionUrlRewritePtr and URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput
	ToURLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput
}

type urlmapPathMatcherRouteRuleRouteActionUrlRewritePtrType URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs

func URLMapPathMatcherRouteRuleRouteActionUrlRewritePtr(v *URLMapPathMatcherRouteRuleRouteActionUrlRewriteArgs) URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrInput {
	return (*urlmapPathMatcherRouteRuleRouteActionUrlRewritePtrType)(v)
}

func (*urlmapPathMatcherRouteRuleRouteActionUrlRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (i *urlmapPathMatcherRouteRuleRouteActionUrlRewritePtrType) ToURLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherRouteRuleRouteActionUrlRewritePtrType) ToURLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput) ToURLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput() URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput) ToURLMapPathMatcherRouteRuleRouteActionUrlRewriteOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput) ToURLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o.ToURLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput) ToURLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionUrlRewrite) *URLMapPathMatcherRouteRuleRouteActionUrlRewrite {
		return &v
	}).(URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput)
}

// Prior to forwarding the request to the selected service, the request's host
// header is replaced with contents of hostRewrite. The value must be between 1 and
// 255 characters.
func (o URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionUrlRewrite) *string { return v.HostRewrite }).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected backend service, the matching
// portion of the request's path is replaced by pathPrefixRewrite. The value must
// be between 1 and 1024 characters.
func (o URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionUrlRewrite) *string { return v.PathPrefixRewrite }).(pulumi.StringPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionUrlRewrite)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) ToURLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput() URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) ToURLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) Elem() URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionUrlRewrite) URLMapPathMatcherRouteRuleRouteActionUrlRewrite {
		return *v
	}).(URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput)
}

// Prior to forwarding the request to the selected service, the request's host
// header is replaced with contents of hostRewrite. The value must be between 1 and
// 255 characters.
func (o URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.HostRewrite
	}).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected backend service, the matching
// portion of the request's path is replaced by pathPrefixRewrite. The value must
// be between 1 and 1024 characters.
func (o URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionUrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.PathPrefixRewrite
	}).(pulumi.StringPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendService struct {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService string `pulumi:"backendService"`
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
	HeaderAction *URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction `pulumi:"headerAction"`
	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	Weight int `pulumi:"weight"`
}

// URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs and URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs{...}
//
type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput
	ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs struct {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService pulumi.StringInput `pulumi:"backendService"`
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
	HeaderAction URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrInput `pulumi:"headerAction"`
	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionWeightedBackendService)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput)
}

// URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArray and URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArray{ URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArgs{...} }
//
type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput
	ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArray []URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceInput

func (URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleRouteActionWeightedBackendService)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArray) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArray) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput)
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionWeightedBackendService)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput {
	return o
}

// The default BackendService resource. Before
// forwarding the request to backendService, the loadbalancer applies any relevant
// headerActions specified as part of this backendServiceWeight.
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput) BackendService() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionWeightedBackendService) string { return v.BackendService }).(pulumi.StringOutput)
}

// Specifies changes to request and response headers that need to take effect for
// the selected backendService. headerAction specified here take effect before
// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput) HeaderAction() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionWeightedBackendService) *URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction {
		return v.HeaderAction
	}).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput)
}

// Specifies the fraction of traffic sent to backendService, computed as weight /
// (sum of all weightedBackendService weights in routeAction) . The selection of a
// backend service is determined only for new traffic. Once a user's request has
// been directed to a backendService, subsequent requests will be sent to the same
// backendService as determined by the BackendService's session affinity policy.
// The value must be between 0 and 1000
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionWeightedBackendService) int { return v.Weight }).(pulumi.IntOutput)
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleRouteActionWeightedBackendService)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherRouteRuleRouteActionWeightedBackendService {
		return vs[0].([]URLMapPathMatcherRouteRuleRouteActionWeightedBackendService)[vs[1].(int)]
	}).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput)
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.  Structure is documented below.
	RequestHeadersToAdds []URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd `pulumi:"requestHeadersToAdds"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemoves []string `pulumi:"requestHeadersToRemoves"`
	// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
	ResponseHeadersToAdds []URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd `pulumi:"responseHeadersToAdds"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemoves []string `pulumi:"responseHeadersToRemoves"`
}

// URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs and URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs{...}
//
type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput
	ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.  Structure is documented below.
	RequestHeadersToAdds URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayInput `pulumi:"requestHeadersToAdds"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemoves pulumi.StringArrayInput `pulumi:"requestHeadersToRemoves"`
	// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
	ResponseHeadersToAdds URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayInput `pulumi:"responseHeadersToAdds"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemoves pulumi.StringArrayInput `pulumi:"responseHeadersToRemoves"`
}

func (URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput)
}

func (i URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput).ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx)
}

// URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs, URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtr and URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput
	ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput
}

type urlmapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrType URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs

func URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtr(v *URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionArgs) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrInput {
	return (*urlmapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrType)(v)
}

func (*urlmapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction)(nil)).Elem()
}

func (i *urlmapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrType) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrType) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput)
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o.ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) *URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction {
		return &v
	}).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput)
}

// Headers to add to a matching request prior to forwarding the request to the
// backendService.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) RequestHeadersToAdds() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) []URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd {
		return v.RequestHeadersToAdds
	}).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request
// prior to forwarding the request to the backendService.
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) RequestHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) []string {
		return v.RequestHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) ResponseHeadersToAdds() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) []URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd {
		return v.ResponseHeadersToAdds
	}).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the response
// prior to sending the response back to the client.
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput) ResponseHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) []string {
		return v.ResponseHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) Elem() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction {
		return *v
	}).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput)
}

// Headers to add to a matching request prior to forwarding the request to the
// backendService.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) RequestHeadersToAdds() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) []URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToAdds
	}).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the request
// prior to forwarding the request to the backendService.
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) RequestHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.  Structure is documented below.
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ResponseHeadersToAdds() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) []URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToAdds
	}).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput)
}

// A list of header names for headers that need to be removed from the response
// prior to sending the response back to the client.
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput) ResponseHeadersToRemoves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToRemoves
	}).(pulumi.StringArrayOutput)
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace bool `pulumi:"replace"`
}

// URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs and URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs{...}
//
type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput
	ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput)
}

// URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray and URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray{ URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs{...} }
//
type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput
	ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray []URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddInput

func (URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArray) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput)
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return o
}

// The name of the header.
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd) string {
		return v.HeaderName
	}).(pulumi.StringOutput)
}

// The value of the header to add.
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd) string {
		return v.HeaderValue
	}).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the
// header. If true, headerValue is set for the header, discarding any values that
// were set for that header.
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd) bool {
		return v.Replace
	}).(pulumi.BoolOutput)
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd {
		return vs[0].([]URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAdd)[vs[1].(int)]
	}).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput)
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace bool `pulumi:"replace"`
}

// URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs and URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs{...}
//
type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput
	ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput)
}

// URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayInput is an input type that accepts URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray and URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayInput` via:
//
// 		 URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray{ URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs{...} }
//
type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput
	ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutputWithContext(context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray []URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddInput

func (URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return i.ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArray) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput)
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return o
}

// The name of the header.
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd) string {
		return v.HeaderName
	}).(pulumi.StringOutput)
}

// The value of the header to add.
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd) string {
		return v.HeaderValue
	}).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the
// header. If true, headerValue is set for the header, discarding any values that
// were set for that header.
func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd) bool {
		return v.Replace
	}).(pulumi.BoolOutput)
}

type URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput() URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput) ToURLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput) Index(i pulumi.IntInput) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd {
		return vs[0].([]URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAdd)[vs[1].(int)]
	}).(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput)
}

type URLMapPathMatcherRouteRuleUrlRedirect struct {
	// The host that will be used in the redirect response instead of the one that was
	// supplied in the request. The value must be between 1 and 255 characters.
	HostRedirect *string `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set
	// to false, the URL scheme of the redirected request will remain the same as that
	// of the request. This must only be set for UrlMaps used in TargetHttpProxys.
	// Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
	HttpsRedirect *bool `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was
	// supplied in the request. Only one of pathRedirect or prefixRedirect must be
	// specified. The value must be between 1 and 1024 characters.
	PathRedirect *string `pulumi:"pathRedirect"`
	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	// retaining the remaining portion of the URL before redirecting the request.
	PrefixRedirect *string `pulumi:"prefixRedirect"`
	// The HTTP Status code to use for this RedirectAction. Supported values are:   -
	// MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.  -
	// FOUND, which corresponds to 302.  - SEE_OTHER which corresponds to 303.  -
	// TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
	// will be retained.  - PERMANENT_REDIRECT, which corresponds to 308. In this case,
	// the request method will be retained.
	RedirectResponseCode *string `pulumi:"redirectResponseCode"`
	// If set to true, any accompanying query portion of the original URL is removed
	// prior to redirecting the request. If set to false, the query portion of the
	// original URL is retained. Defaults to false.
	StripQuery *bool `pulumi:"stripQuery"`
}

// URLMapPathMatcherRouteRuleUrlRedirectInput is an input type that accepts URLMapPathMatcherRouteRuleUrlRedirectArgs and URLMapPathMatcherRouteRuleUrlRedirectOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleUrlRedirectInput` via:
//
// 		 URLMapPathMatcherRouteRuleUrlRedirectArgs{...}
//
type URLMapPathMatcherRouteRuleUrlRedirectInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleUrlRedirectOutput() URLMapPathMatcherRouteRuleUrlRedirectOutput
	ToURLMapPathMatcherRouteRuleUrlRedirectOutputWithContext(context.Context) URLMapPathMatcherRouteRuleUrlRedirectOutput
}

type URLMapPathMatcherRouteRuleUrlRedirectArgs struct {
	// The host that will be used in the redirect response instead of the one that was
	// supplied in the request. The value must be between 1 and 255 characters.
	HostRedirect pulumi.StringPtrInput `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set
	// to false, the URL scheme of the redirected request will remain the same as that
	// of the request. This must only be set for UrlMaps used in TargetHttpProxys.
	// Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
	HttpsRedirect pulumi.BoolPtrInput `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was
	// supplied in the request. Only one of pathRedirect or prefixRedirect must be
	// specified. The value must be between 1 and 1024 characters.
	PathRedirect pulumi.StringPtrInput `pulumi:"pathRedirect"`
	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	// retaining the remaining portion of the URL before redirecting the request.
	PrefixRedirect pulumi.StringPtrInput `pulumi:"prefixRedirect"`
	// The HTTP Status code to use for this RedirectAction. Supported values are:   -
	// MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.  -
	// FOUND, which corresponds to 302.  - SEE_OTHER which corresponds to 303.  -
	// TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
	// will be retained.  - PERMANENT_REDIRECT, which corresponds to 308. In this case,
	// the request method will be retained.
	RedirectResponseCode pulumi.StringPtrInput `pulumi:"redirectResponseCode"`
	// If set to true, any accompanying query portion of the original URL is removed
	// prior to redirecting the request. If set to false, the query portion of the
	// original URL is retained. Defaults to false.
	StripQuery pulumi.BoolPtrInput `pulumi:"stripQuery"`
}

func (URLMapPathMatcherRouteRuleUrlRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleUrlRedirect)(nil)).Elem()
}

func (i URLMapPathMatcherRouteRuleUrlRedirectArgs) ToURLMapPathMatcherRouteRuleUrlRedirectOutput() URLMapPathMatcherRouteRuleUrlRedirectOutput {
	return i.ToURLMapPathMatcherRouteRuleUrlRedirectOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleUrlRedirectArgs) ToURLMapPathMatcherRouteRuleUrlRedirectOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleUrlRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleUrlRedirectOutput)
}

func (i URLMapPathMatcherRouteRuleUrlRedirectArgs) ToURLMapPathMatcherRouteRuleUrlRedirectPtrOutput() URLMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (i URLMapPathMatcherRouteRuleUrlRedirectArgs) ToURLMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleUrlRedirectOutput).ToURLMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx)
}

// URLMapPathMatcherRouteRuleUrlRedirectPtrInput is an input type that accepts URLMapPathMatcherRouteRuleUrlRedirectArgs, URLMapPathMatcherRouteRuleUrlRedirectPtr and URLMapPathMatcherRouteRuleUrlRedirectPtrOutput values.
// You can construct a concrete instance of `URLMapPathMatcherRouteRuleUrlRedirectPtrInput` via:
//
// 		 URLMapPathMatcherRouteRuleUrlRedirectArgs{...}
//
//  or:
//
// 		 nil
//
type URLMapPathMatcherRouteRuleUrlRedirectPtrInput interface {
	pulumi.Input

	ToURLMapPathMatcherRouteRuleUrlRedirectPtrOutput() URLMapPathMatcherRouteRuleUrlRedirectPtrOutput
	ToURLMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(context.Context) URLMapPathMatcherRouteRuleUrlRedirectPtrOutput
}

type urlmapPathMatcherRouteRuleUrlRedirectPtrType URLMapPathMatcherRouteRuleUrlRedirectArgs

func URLMapPathMatcherRouteRuleUrlRedirectPtr(v *URLMapPathMatcherRouteRuleUrlRedirectArgs) URLMapPathMatcherRouteRuleUrlRedirectPtrInput {
	return (*urlmapPathMatcherRouteRuleUrlRedirectPtrType)(v)
}

func (*urlmapPathMatcherRouteRuleUrlRedirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleUrlRedirect)(nil)).Elem()
}

func (i *urlmapPathMatcherRouteRuleUrlRedirectPtrType) ToURLMapPathMatcherRouteRuleUrlRedirectPtrOutput() URLMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return i.ToURLMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (i *urlmapPathMatcherRouteRuleUrlRedirectPtrType) ToURLMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapPathMatcherRouteRuleUrlRedirectPtrOutput)
}

type URLMapPathMatcherRouteRuleUrlRedirectOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleUrlRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapPathMatcherRouteRuleUrlRedirect)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleUrlRedirectOutput) ToURLMapPathMatcherRouteRuleUrlRedirectOutput() URLMapPathMatcherRouteRuleUrlRedirectOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleUrlRedirectOutput) ToURLMapPathMatcherRouteRuleUrlRedirectOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleUrlRedirectOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleUrlRedirectOutput) ToURLMapPathMatcherRouteRuleUrlRedirectPtrOutput() URLMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o.ToURLMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(context.Background())
}

func (o URLMapPathMatcherRouteRuleUrlRedirectOutput) ToURLMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleUrlRedirect) *URLMapPathMatcherRouteRuleUrlRedirect {
		return &v
	}).(URLMapPathMatcherRouteRuleUrlRedirectPtrOutput)
}

// The host that will be used in the redirect response instead of the one that was
// supplied in the request. The value must be between 1 and 255 characters.
func (o URLMapPathMatcherRouteRuleUrlRedirectOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleUrlRedirect) *string { return v.HostRedirect }).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set
// to false, the URL scheme of the redirected request will remain the same as that
// of the request. This must only be set for UrlMaps used in TargetHttpProxys.
// Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
func (o URLMapPathMatcherRouteRuleUrlRedirectOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleUrlRedirect) *bool { return v.HttpsRedirect }).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was
// supplied in the request. Only one of pathRedirect or prefixRedirect must be
// specified. The value must be between 1 and 1024 characters.
func (o URLMapPathMatcherRouteRuleUrlRedirectOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleUrlRedirect) *string { return v.PathRedirect }).(pulumi.StringPtrOutput)
}

// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
// retaining the remaining portion of the URL before redirecting the request.
func (o URLMapPathMatcherRouteRuleUrlRedirectOutput) PrefixRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleUrlRedirect) *string { return v.PrefixRedirect }).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for this RedirectAction. Supported values are:   -
// MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.  -
// FOUND, which corresponds to 302.  - SEE_OTHER which corresponds to 303.  -
// TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
// will be retained.  - PERMANENT_REDIRECT, which corresponds to 308. In this case,
// the request method will be retained.
func (o URLMapPathMatcherRouteRuleUrlRedirectOutput) RedirectResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleUrlRedirect) *string { return v.RedirectResponseCode }).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed
// prior to redirecting the request. If set to false, the query portion of the
// original URL is retained. Defaults to false.
func (o URLMapPathMatcherRouteRuleUrlRedirectOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v URLMapPathMatcherRouteRuleUrlRedirect) *bool { return v.StripQuery }).(pulumi.BoolPtrOutput)
}

type URLMapPathMatcherRouteRuleUrlRedirectPtrOutput struct{ *pulumi.OutputState }

func (URLMapPathMatcherRouteRuleUrlRedirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**URLMapPathMatcherRouteRuleUrlRedirect)(nil)).Elem()
}

func (o URLMapPathMatcherRouteRuleUrlRedirectPtrOutput) ToURLMapPathMatcherRouteRuleUrlRedirectPtrOutput() URLMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleUrlRedirectPtrOutput) ToURLMapPathMatcherRouteRuleUrlRedirectPtrOutputWithContext(ctx context.Context) URLMapPathMatcherRouteRuleUrlRedirectPtrOutput {
	return o
}

func (o URLMapPathMatcherRouteRuleUrlRedirectPtrOutput) Elem() URLMapPathMatcherRouteRuleUrlRedirectOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleUrlRedirect) URLMapPathMatcherRouteRuleUrlRedirect { return *v }).(URLMapPathMatcherRouteRuleUrlRedirectOutput)
}

// The host that will be used in the redirect response instead of the one that was
// supplied in the request. The value must be between 1 and 255 characters.
func (o URLMapPathMatcherRouteRuleUrlRedirectPtrOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.HostRedirect
	}).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set
// to false, the URL scheme of the redirected request will remain the same as that
// of the request. This must only be set for UrlMaps used in TargetHttpProxys.
// Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
func (o URLMapPathMatcherRouteRuleUrlRedirectPtrOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleUrlRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.HttpsRedirect
	}).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was
// supplied in the request. Only one of pathRedirect or prefixRedirect must be
// specified. The value must be between 1 and 1024 characters.
func (o URLMapPathMatcherRouteRuleUrlRedirectPtrOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.PathRedirect
	}).(pulumi.StringPtrOutput)
}

// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
// retaining the remaining portion of the URL before redirecting the request.
func (o URLMapPathMatcherRouteRuleUrlRedirectPtrOutput) PrefixRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.PrefixRedirect
	}).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for this RedirectAction. Supported values are:   -
// MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.  -
// FOUND, which corresponds to 302.  - SEE_OTHER which corresponds to 303.  -
// TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
// will be retained.  - PERMANENT_REDIRECT, which corresponds to 308. In this case,
// the request method will be retained.
func (o URLMapPathMatcherRouteRuleUrlRedirectPtrOutput) RedirectResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleUrlRedirect) *string {
		if v == nil {
			return nil
		}
		return v.RedirectResponseCode
	}).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed
// prior to redirecting the request. If set to false, the query portion of the
// original URL is retained. Defaults to false.
func (o URLMapPathMatcherRouteRuleUrlRedirectPtrOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *URLMapPathMatcherRouteRuleUrlRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.StripQuery
	}).(pulumi.BoolPtrOutput)
}

type URLMapTest struct {
	// Description of this test case.
	Description *string `pulumi:"description"`
	// Host portion of the URL.
	Host string `pulumi:"host"`
	// Path portion of the URL.
	Path string `pulumi:"path"`
	// The backend service or backend bucket link that should be matched by this test.
	Service string `pulumi:"service"`
}

// URLMapTestInput is an input type that accepts URLMapTestArgs and URLMapTestOutput values.
// You can construct a concrete instance of `URLMapTestInput` via:
//
// 		 URLMapTestArgs{...}
//
type URLMapTestInput interface {
	pulumi.Input

	ToURLMapTestOutput() URLMapTestOutput
	ToURLMapTestOutputWithContext(context.Context) URLMapTestOutput
}

type URLMapTestArgs struct {
	// Description of this test case.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Host portion of the URL.
	Host pulumi.StringInput `pulumi:"host"`
	// Path portion of the URL.
	Path pulumi.StringInput `pulumi:"path"`
	// The backend service or backend bucket link that should be matched by this test.
	Service pulumi.StringInput `pulumi:"service"`
}

func (URLMapTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapTest)(nil)).Elem()
}

func (i URLMapTestArgs) ToURLMapTestOutput() URLMapTestOutput {
	return i.ToURLMapTestOutputWithContext(context.Background())
}

func (i URLMapTestArgs) ToURLMapTestOutputWithContext(ctx context.Context) URLMapTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapTestOutput)
}

// URLMapTestArrayInput is an input type that accepts URLMapTestArray and URLMapTestArrayOutput values.
// You can construct a concrete instance of `URLMapTestArrayInput` via:
//
// 		 URLMapTestArray{ URLMapTestArgs{...} }
//
type URLMapTestArrayInput interface {
	pulumi.Input

	ToURLMapTestArrayOutput() URLMapTestArrayOutput
	ToURLMapTestArrayOutputWithContext(context.Context) URLMapTestArrayOutput
}

type URLMapTestArray []URLMapTestInput

func (URLMapTestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapTest)(nil)).Elem()
}

func (i URLMapTestArray) ToURLMapTestArrayOutput() URLMapTestArrayOutput {
	return i.ToURLMapTestArrayOutputWithContext(context.Background())
}

func (i URLMapTestArray) ToURLMapTestArrayOutputWithContext(ctx context.Context) URLMapTestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(URLMapTestArrayOutput)
}

type URLMapTestOutput struct{ *pulumi.OutputState }

func (URLMapTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*URLMapTest)(nil)).Elem()
}

func (o URLMapTestOutput) ToURLMapTestOutput() URLMapTestOutput {
	return o
}

func (o URLMapTestOutput) ToURLMapTestOutputWithContext(ctx context.Context) URLMapTestOutput {
	return o
}

// Description of this test case.
func (o URLMapTestOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v URLMapTest) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Host portion of the URL.
func (o URLMapTestOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapTest) string { return v.Host }).(pulumi.StringOutput)
}

// Path portion of the URL.
func (o URLMapTestOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapTest) string { return v.Path }).(pulumi.StringOutput)
}

// The backend service or backend bucket link that should be matched by this test.
func (o URLMapTestOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v URLMapTest) string { return v.Service }).(pulumi.StringOutput)
}

type URLMapTestArrayOutput struct{ *pulumi.OutputState }

func (URLMapTestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]URLMapTest)(nil)).Elem()
}

func (o URLMapTestArrayOutput) ToURLMapTestArrayOutput() URLMapTestArrayOutput {
	return o
}

func (o URLMapTestArrayOutput) ToURLMapTestArrayOutputWithContext(ctx context.Context) URLMapTestArrayOutput {
	return o
}

func (o URLMapTestArrayOutput) Index(i pulumi.IntInput) URLMapTestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) URLMapTest {
		return vs[0].([]URLMapTest)[vs[1].(int)]
	}).(URLMapTestOutput)
}

type GetBackendBucketCdnPolicy struct {
	// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
	SignedUrlCacheMaxAgeSec int `pulumi:"signedUrlCacheMaxAgeSec"`
}

// GetBackendBucketCdnPolicyInput is an input type that accepts GetBackendBucketCdnPolicyArgs and GetBackendBucketCdnPolicyOutput values.
// You can construct a concrete instance of `GetBackendBucketCdnPolicyInput` via:
//
// 		 GetBackendBucketCdnPolicyArgs{...}
//
type GetBackendBucketCdnPolicyInput interface {
	pulumi.Input

	ToGetBackendBucketCdnPolicyOutput() GetBackendBucketCdnPolicyOutput
	ToGetBackendBucketCdnPolicyOutputWithContext(context.Context) GetBackendBucketCdnPolicyOutput
}

type GetBackendBucketCdnPolicyArgs struct {
	// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
	SignedUrlCacheMaxAgeSec pulumi.IntInput `pulumi:"signedUrlCacheMaxAgeSec"`
}

func (GetBackendBucketCdnPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendBucketCdnPolicy)(nil)).Elem()
}

func (i GetBackendBucketCdnPolicyArgs) ToGetBackendBucketCdnPolicyOutput() GetBackendBucketCdnPolicyOutput {
	return i.ToGetBackendBucketCdnPolicyOutputWithContext(context.Background())
}

func (i GetBackendBucketCdnPolicyArgs) ToGetBackendBucketCdnPolicyOutputWithContext(ctx context.Context) GetBackendBucketCdnPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendBucketCdnPolicyOutput)
}

// GetBackendBucketCdnPolicyArrayInput is an input type that accepts GetBackendBucketCdnPolicyArray and GetBackendBucketCdnPolicyArrayOutput values.
// You can construct a concrete instance of `GetBackendBucketCdnPolicyArrayInput` via:
//
// 		 GetBackendBucketCdnPolicyArray{ GetBackendBucketCdnPolicyArgs{...} }
//
type GetBackendBucketCdnPolicyArrayInput interface {
	pulumi.Input

	ToGetBackendBucketCdnPolicyArrayOutput() GetBackendBucketCdnPolicyArrayOutput
	ToGetBackendBucketCdnPolicyArrayOutputWithContext(context.Context) GetBackendBucketCdnPolicyArrayOutput
}

type GetBackendBucketCdnPolicyArray []GetBackendBucketCdnPolicyInput

func (GetBackendBucketCdnPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendBucketCdnPolicy)(nil)).Elem()
}

func (i GetBackendBucketCdnPolicyArray) ToGetBackendBucketCdnPolicyArrayOutput() GetBackendBucketCdnPolicyArrayOutput {
	return i.ToGetBackendBucketCdnPolicyArrayOutputWithContext(context.Background())
}

func (i GetBackendBucketCdnPolicyArray) ToGetBackendBucketCdnPolicyArrayOutputWithContext(ctx context.Context) GetBackendBucketCdnPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendBucketCdnPolicyArrayOutput)
}

type GetBackendBucketCdnPolicyOutput struct{ *pulumi.OutputState }

func (GetBackendBucketCdnPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendBucketCdnPolicy)(nil)).Elem()
}

func (o GetBackendBucketCdnPolicyOutput) ToGetBackendBucketCdnPolicyOutput() GetBackendBucketCdnPolicyOutput {
	return o
}

func (o GetBackendBucketCdnPolicyOutput) ToGetBackendBucketCdnPolicyOutputWithContext(ctx context.Context) GetBackendBucketCdnPolicyOutput {
	return o
}

// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
func (o GetBackendBucketCdnPolicyOutput) SignedUrlCacheMaxAgeSec() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendBucketCdnPolicy) int { return v.SignedUrlCacheMaxAgeSec }).(pulumi.IntOutput)
}

type GetBackendBucketCdnPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetBackendBucketCdnPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendBucketCdnPolicy)(nil)).Elem()
}

func (o GetBackendBucketCdnPolicyArrayOutput) ToGetBackendBucketCdnPolicyArrayOutput() GetBackendBucketCdnPolicyArrayOutput {
	return o
}

func (o GetBackendBucketCdnPolicyArrayOutput) ToGetBackendBucketCdnPolicyArrayOutputWithContext(ctx context.Context) GetBackendBucketCdnPolicyArrayOutput {
	return o
}

func (o GetBackendBucketCdnPolicyArrayOutput) Index(i pulumi.IntInput) GetBackendBucketCdnPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendBucketCdnPolicy {
		return vs[0].([]GetBackendBucketCdnPolicy)[vs[1].(int)]
	}).(GetBackendBucketCdnPolicyOutput)
}

type GetBackendServiceBackend struct {
	BalancingMode  string  `pulumi:"balancingMode"`
	CapacityScaler float64 `pulumi:"capacityScaler"`
	// Textual description for the Backend Service.
	Description               string  `pulumi:"description"`
	Group                     string  `pulumi:"group"`
	MaxConnections            int     `pulumi:"maxConnections"`
	MaxConnectionsPerEndpoint int     `pulumi:"maxConnectionsPerEndpoint"`
	MaxConnectionsPerInstance int     `pulumi:"maxConnectionsPerInstance"`
	MaxRate                   int     `pulumi:"maxRate"`
	MaxRatePerEndpoint        float64 `pulumi:"maxRatePerEndpoint"`
	MaxRatePerInstance        float64 `pulumi:"maxRatePerInstance"`
	MaxUtilization            float64 `pulumi:"maxUtilization"`
}

// GetBackendServiceBackendInput is an input type that accepts GetBackendServiceBackendArgs and GetBackendServiceBackendOutput values.
// You can construct a concrete instance of `GetBackendServiceBackendInput` via:
//
// 		 GetBackendServiceBackendArgs{...}
//
type GetBackendServiceBackendInput interface {
	pulumi.Input

	ToGetBackendServiceBackendOutput() GetBackendServiceBackendOutput
	ToGetBackendServiceBackendOutputWithContext(context.Context) GetBackendServiceBackendOutput
}

type GetBackendServiceBackendArgs struct {
	BalancingMode  pulumi.StringInput  `pulumi:"balancingMode"`
	CapacityScaler pulumi.Float64Input `pulumi:"capacityScaler"`
	// Textual description for the Backend Service.
	Description               pulumi.StringInput  `pulumi:"description"`
	Group                     pulumi.StringInput  `pulumi:"group"`
	MaxConnections            pulumi.IntInput     `pulumi:"maxConnections"`
	MaxConnectionsPerEndpoint pulumi.IntInput     `pulumi:"maxConnectionsPerEndpoint"`
	MaxConnectionsPerInstance pulumi.IntInput     `pulumi:"maxConnectionsPerInstance"`
	MaxRate                   pulumi.IntInput     `pulumi:"maxRate"`
	MaxRatePerEndpoint        pulumi.Float64Input `pulumi:"maxRatePerEndpoint"`
	MaxRatePerInstance        pulumi.Float64Input `pulumi:"maxRatePerInstance"`
	MaxUtilization            pulumi.Float64Input `pulumi:"maxUtilization"`
}

func (GetBackendServiceBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceBackend)(nil)).Elem()
}

func (i GetBackendServiceBackendArgs) ToGetBackendServiceBackendOutput() GetBackendServiceBackendOutput {
	return i.ToGetBackendServiceBackendOutputWithContext(context.Background())
}

func (i GetBackendServiceBackendArgs) ToGetBackendServiceBackendOutputWithContext(ctx context.Context) GetBackendServiceBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceBackendOutput)
}

// GetBackendServiceBackendArrayInput is an input type that accepts GetBackendServiceBackendArray and GetBackendServiceBackendArrayOutput values.
// You can construct a concrete instance of `GetBackendServiceBackendArrayInput` via:
//
// 		 GetBackendServiceBackendArray{ GetBackendServiceBackendArgs{...} }
//
type GetBackendServiceBackendArrayInput interface {
	pulumi.Input

	ToGetBackendServiceBackendArrayOutput() GetBackendServiceBackendArrayOutput
	ToGetBackendServiceBackendArrayOutputWithContext(context.Context) GetBackendServiceBackendArrayOutput
}

type GetBackendServiceBackendArray []GetBackendServiceBackendInput

func (GetBackendServiceBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceBackend)(nil)).Elem()
}

func (i GetBackendServiceBackendArray) ToGetBackendServiceBackendArrayOutput() GetBackendServiceBackendArrayOutput {
	return i.ToGetBackendServiceBackendArrayOutputWithContext(context.Background())
}

func (i GetBackendServiceBackendArray) ToGetBackendServiceBackendArrayOutputWithContext(ctx context.Context) GetBackendServiceBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceBackendArrayOutput)
}

type GetBackendServiceBackendOutput struct{ *pulumi.OutputState }

func (GetBackendServiceBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceBackend)(nil)).Elem()
}

func (o GetBackendServiceBackendOutput) ToGetBackendServiceBackendOutput() GetBackendServiceBackendOutput {
	return o
}

func (o GetBackendServiceBackendOutput) ToGetBackendServiceBackendOutputWithContext(ctx context.Context) GetBackendServiceBackendOutput {
	return o
}

func (o GetBackendServiceBackendOutput) BalancingMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendServiceBackend) string { return v.BalancingMode }).(pulumi.StringOutput)
}

func (o GetBackendServiceBackendOutput) CapacityScaler() pulumi.Float64Output {
	return o.ApplyT(func(v GetBackendServiceBackend) float64 { return v.CapacityScaler }).(pulumi.Float64Output)
}

// Textual description for the Backend Service.
func (o GetBackendServiceBackendOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendServiceBackend) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetBackendServiceBackendOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendServiceBackend) string { return v.Group }).(pulumi.StringOutput)
}

func (o GetBackendServiceBackendOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceBackend) int { return v.MaxConnections }).(pulumi.IntOutput)
}

func (o GetBackendServiceBackendOutput) MaxConnectionsPerEndpoint() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceBackend) int { return v.MaxConnectionsPerEndpoint }).(pulumi.IntOutput)
}

func (o GetBackendServiceBackendOutput) MaxConnectionsPerInstance() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceBackend) int { return v.MaxConnectionsPerInstance }).(pulumi.IntOutput)
}

func (o GetBackendServiceBackendOutput) MaxRate() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceBackend) int { return v.MaxRate }).(pulumi.IntOutput)
}

func (o GetBackendServiceBackendOutput) MaxRatePerEndpoint() pulumi.Float64Output {
	return o.ApplyT(func(v GetBackendServiceBackend) float64 { return v.MaxRatePerEndpoint }).(pulumi.Float64Output)
}

func (o GetBackendServiceBackendOutput) MaxRatePerInstance() pulumi.Float64Output {
	return o.ApplyT(func(v GetBackendServiceBackend) float64 { return v.MaxRatePerInstance }).(pulumi.Float64Output)
}

func (o GetBackendServiceBackendOutput) MaxUtilization() pulumi.Float64Output {
	return o.ApplyT(func(v GetBackendServiceBackend) float64 { return v.MaxUtilization }).(pulumi.Float64Output)
}

type GetBackendServiceBackendArrayOutput struct{ *pulumi.OutputState }

func (GetBackendServiceBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceBackend)(nil)).Elem()
}

func (o GetBackendServiceBackendArrayOutput) ToGetBackendServiceBackendArrayOutput() GetBackendServiceBackendArrayOutput {
	return o
}

func (o GetBackendServiceBackendArrayOutput) ToGetBackendServiceBackendArrayOutputWithContext(ctx context.Context) GetBackendServiceBackendArrayOutput {
	return o
}

func (o GetBackendServiceBackendArrayOutput) Index(i pulumi.IntInput) GetBackendServiceBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendServiceBackend {
		return vs[0].([]GetBackendServiceBackend)[vs[1].(int)]
	}).(GetBackendServiceBackendOutput)
}

type GetBackendServiceCdnPolicy struct {
	CacheKeyPolicies        []GetBackendServiceCdnPolicyCacheKeyPolicy `pulumi:"cacheKeyPolicies"`
	SignedUrlCacheMaxAgeSec int                                        `pulumi:"signedUrlCacheMaxAgeSec"`
}

// GetBackendServiceCdnPolicyInput is an input type that accepts GetBackendServiceCdnPolicyArgs and GetBackendServiceCdnPolicyOutput values.
// You can construct a concrete instance of `GetBackendServiceCdnPolicyInput` via:
//
// 		 GetBackendServiceCdnPolicyArgs{...}
//
type GetBackendServiceCdnPolicyInput interface {
	pulumi.Input

	ToGetBackendServiceCdnPolicyOutput() GetBackendServiceCdnPolicyOutput
	ToGetBackendServiceCdnPolicyOutputWithContext(context.Context) GetBackendServiceCdnPolicyOutput
}

type GetBackendServiceCdnPolicyArgs struct {
	CacheKeyPolicies        GetBackendServiceCdnPolicyCacheKeyPolicyArrayInput `pulumi:"cacheKeyPolicies"`
	SignedUrlCacheMaxAgeSec pulumi.IntInput                                    `pulumi:"signedUrlCacheMaxAgeSec"`
}

func (GetBackendServiceCdnPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceCdnPolicy)(nil)).Elem()
}

func (i GetBackendServiceCdnPolicyArgs) ToGetBackendServiceCdnPolicyOutput() GetBackendServiceCdnPolicyOutput {
	return i.ToGetBackendServiceCdnPolicyOutputWithContext(context.Background())
}

func (i GetBackendServiceCdnPolicyArgs) ToGetBackendServiceCdnPolicyOutputWithContext(ctx context.Context) GetBackendServiceCdnPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceCdnPolicyOutput)
}

// GetBackendServiceCdnPolicyArrayInput is an input type that accepts GetBackendServiceCdnPolicyArray and GetBackendServiceCdnPolicyArrayOutput values.
// You can construct a concrete instance of `GetBackendServiceCdnPolicyArrayInput` via:
//
// 		 GetBackendServiceCdnPolicyArray{ GetBackendServiceCdnPolicyArgs{...} }
//
type GetBackendServiceCdnPolicyArrayInput interface {
	pulumi.Input

	ToGetBackendServiceCdnPolicyArrayOutput() GetBackendServiceCdnPolicyArrayOutput
	ToGetBackendServiceCdnPolicyArrayOutputWithContext(context.Context) GetBackendServiceCdnPolicyArrayOutput
}

type GetBackendServiceCdnPolicyArray []GetBackendServiceCdnPolicyInput

func (GetBackendServiceCdnPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceCdnPolicy)(nil)).Elem()
}

func (i GetBackendServiceCdnPolicyArray) ToGetBackendServiceCdnPolicyArrayOutput() GetBackendServiceCdnPolicyArrayOutput {
	return i.ToGetBackendServiceCdnPolicyArrayOutputWithContext(context.Background())
}

func (i GetBackendServiceCdnPolicyArray) ToGetBackendServiceCdnPolicyArrayOutputWithContext(ctx context.Context) GetBackendServiceCdnPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceCdnPolicyArrayOutput)
}

type GetBackendServiceCdnPolicyOutput struct{ *pulumi.OutputState }

func (GetBackendServiceCdnPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceCdnPolicy)(nil)).Elem()
}

func (o GetBackendServiceCdnPolicyOutput) ToGetBackendServiceCdnPolicyOutput() GetBackendServiceCdnPolicyOutput {
	return o
}

func (o GetBackendServiceCdnPolicyOutput) ToGetBackendServiceCdnPolicyOutputWithContext(ctx context.Context) GetBackendServiceCdnPolicyOutput {
	return o
}

func (o GetBackendServiceCdnPolicyOutput) CacheKeyPolicies() GetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput {
	return o.ApplyT(func(v GetBackendServiceCdnPolicy) []GetBackendServiceCdnPolicyCacheKeyPolicy {
		return v.CacheKeyPolicies
	}).(GetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput)
}

func (o GetBackendServiceCdnPolicyOutput) SignedUrlCacheMaxAgeSec() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceCdnPolicy) int { return v.SignedUrlCacheMaxAgeSec }).(pulumi.IntOutput)
}

type GetBackendServiceCdnPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetBackendServiceCdnPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceCdnPolicy)(nil)).Elem()
}

func (o GetBackendServiceCdnPolicyArrayOutput) ToGetBackendServiceCdnPolicyArrayOutput() GetBackendServiceCdnPolicyArrayOutput {
	return o
}

func (o GetBackendServiceCdnPolicyArrayOutput) ToGetBackendServiceCdnPolicyArrayOutputWithContext(ctx context.Context) GetBackendServiceCdnPolicyArrayOutput {
	return o
}

func (o GetBackendServiceCdnPolicyArrayOutput) Index(i pulumi.IntInput) GetBackendServiceCdnPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendServiceCdnPolicy {
		return vs[0].([]GetBackendServiceCdnPolicy)[vs[1].(int)]
	}).(GetBackendServiceCdnPolicyOutput)
}

type GetBackendServiceCdnPolicyCacheKeyPolicy struct {
	IncludeHost           bool     `pulumi:"includeHost"`
	IncludeProtocol       bool     `pulumi:"includeProtocol"`
	IncludeQueryString    bool     `pulumi:"includeQueryString"`
	QueryStringBlacklists []string `pulumi:"queryStringBlacklists"`
	QueryStringWhitelists []string `pulumi:"queryStringWhitelists"`
}

// GetBackendServiceCdnPolicyCacheKeyPolicyInput is an input type that accepts GetBackendServiceCdnPolicyCacheKeyPolicyArgs and GetBackendServiceCdnPolicyCacheKeyPolicyOutput values.
// You can construct a concrete instance of `GetBackendServiceCdnPolicyCacheKeyPolicyInput` via:
//
// 		 GetBackendServiceCdnPolicyCacheKeyPolicyArgs{...}
//
type GetBackendServiceCdnPolicyCacheKeyPolicyInput interface {
	pulumi.Input

	ToGetBackendServiceCdnPolicyCacheKeyPolicyOutput() GetBackendServiceCdnPolicyCacheKeyPolicyOutput
	ToGetBackendServiceCdnPolicyCacheKeyPolicyOutputWithContext(context.Context) GetBackendServiceCdnPolicyCacheKeyPolicyOutput
}

type GetBackendServiceCdnPolicyCacheKeyPolicyArgs struct {
	IncludeHost           pulumi.BoolInput        `pulumi:"includeHost"`
	IncludeProtocol       pulumi.BoolInput        `pulumi:"includeProtocol"`
	IncludeQueryString    pulumi.BoolInput        `pulumi:"includeQueryString"`
	QueryStringBlacklists pulumi.StringArrayInput `pulumi:"queryStringBlacklists"`
	QueryStringWhitelists pulumi.StringArrayInput `pulumi:"queryStringWhitelists"`
}

func (GetBackendServiceCdnPolicyCacheKeyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceCdnPolicyCacheKeyPolicy)(nil)).Elem()
}

func (i GetBackendServiceCdnPolicyCacheKeyPolicyArgs) ToGetBackendServiceCdnPolicyCacheKeyPolicyOutput() GetBackendServiceCdnPolicyCacheKeyPolicyOutput {
	return i.ToGetBackendServiceCdnPolicyCacheKeyPolicyOutputWithContext(context.Background())
}

func (i GetBackendServiceCdnPolicyCacheKeyPolicyArgs) ToGetBackendServiceCdnPolicyCacheKeyPolicyOutputWithContext(ctx context.Context) GetBackendServiceCdnPolicyCacheKeyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceCdnPolicyCacheKeyPolicyOutput)
}

// GetBackendServiceCdnPolicyCacheKeyPolicyArrayInput is an input type that accepts GetBackendServiceCdnPolicyCacheKeyPolicyArray and GetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput values.
// You can construct a concrete instance of `GetBackendServiceCdnPolicyCacheKeyPolicyArrayInput` via:
//
// 		 GetBackendServiceCdnPolicyCacheKeyPolicyArray{ GetBackendServiceCdnPolicyCacheKeyPolicyArgs{...} }
//
type GetBackendServiceCdnPolicyCacheKeyPolicyArrayInput interface {
	pulumi.Input

	ToGetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput() GetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput
	ToGetBackendServiceCdnPolicyCacheKeyPolicyArrayOutputWithContext(context.Context) GetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput
}

type GetBackendServiceCdnPolicyCacheKeyPolicyArray []GetBackendServiceCdnPolicyCacheKeyPolicyInput

func (GetBackendServiceCdnPolicyCacheKeyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceCdnPolicyCacheKeyPolicy)(nil)).Elem()
}

func (i GetBackendServiceCdnPolicyCacheKeyPolicyArray) ToGetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput() GetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput {
	return i.ToGetBackendServiceCdnPolicyCacheKeyPolicyArrayOutputWithContext(context.Background())
}

func (i GetBackendServiceCdnPolicyCacheKeyPolicyArray) ToGetBackendServiceCdnPolicyCacheKeyPolicyArrayOutputWithContext(ctx context.Context) GetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput)
}

type GetBackendServiceCdnPolicyCacheKeyPolicyOutput struct{ *pulumi.OutputState }

func (GetBackendServiceCdnPolicyCacheKeyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceCdnPolicyCacheKeyPolicy)(nil)).Elem()
}

func (o GetBackendServiceCdnPolicyCacheKeyPolicyOutput) ToGetBackendServiceCdnPolicyCacheKeyPolicyOutput() GetBackendServiceCdnPolicyCacheKeyPolicyOutput {
	return o
}

func (o GetBackendServiceCdnPolicyCacheKeyPolicyOutput) ToGetBackendServiceCdnPolicyCacheKeyPolicyOutputWithContext(ctx context.Context) GetBackendServiceCdnPolicyCacheKeyPolicyOutput {
	return o
}

func (o GetBackendServiceCdnPolicyCacheKeyPolicyOutput) IncludeHost() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBackendServiceCdnPolicyCacheKeyPolicy) bool { return v.IncludeHost }).(pulumi.BoolOutput)
}

func (o GetBackendServiceCdnPolicyCacheKeyPolicyOutput) IncludeProtocol() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBackendServiceCdnPolicyCacheKeyPolicy) bool { return v.IncludeProtocol }).(pulumi.BoolOutput)
}

func (o GetBackendServiceCdnPolicyCacheKeyPolicyOutput) IncludeQueryString() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBackendServiceCdnPolicyCacheKeyPolicy) bool { return v.IncludeQueryString }).(pulumi.BoolOutput)
}

func (o GetBackendServiceCdnPolicyCacheKeyPolicyOutput) QueryStringBlacklists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBackendServiceCdnPolicyCacheKeyPolicy) []string { return v.QueryStringBlacklists }).(pulumi.StringArrayOutput)
}

func (o GetBackendServiceCdnPolicyCacheKeyPolicyOutput) QueryStringWhitelists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBackendServiceCdnPolicyCacheKeyPolicy) []string { return v.QueryStringWhitelists }).(pulumi.StringArrayOutput)
}

type GetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceCdnPolicyCacheKeyPolicy)(nil)).Elem()
}

func (o GetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput) ToGetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput() GetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput {
	return o
}

func (o GetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput) ToGetBackendServiceCdnPolicyCacheKeyPolicyArrayOutputWithContext(ctx context.Context) GetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput {
	return o
}

func (o GetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput) Index(i pulumi.IntInput) GetBackendServiceCdnPolicyCacheKeyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendServiceCdnPolicyCacheKeyPolicy {
		return vs[0].([]GetBackendServiceCdnPolicyCacheKeyPolicy)[vs[1].(int)]
	}).(GetBackendServiceCdnPolicyCacheKeyPolicyOutput)
}

type GetBackendServiceCircuitBreaker struct {
	ConnectTimeouts          []GetBackendServiceCircuitBreakerConnectTimeout `pulumi:"connectTimeouts"`
	MaxConnections           int                                             `pulumi:"maxConnections"`
	MaxPendingRequests       int                                             `pulumi:"maxPendingRequests"`
	MaxRequests              int                                             `pulumi:"maxRequests"`
	MaxRequestsPerConnection int                                             `pulumi:"maxRequestsPerConnection"`
	MaxRetries               int                                             `pulumi:"maxRetries"`
}

// GetBackendServiceCircuitBreakerInput is an input type that accepts GetBackendServiceCircuitBreakerArgs and GetBackendServiceCircuitBreakerOutput values.
// You can construct a concrete instance of `GetBackendServiceCircuitBreakerInput` via:
//
// 		 GetBackendServiceCircuitBreakerArgs{...}
//
type GetBackendServiceCircuitBreakerInput interface {
	pulumi.Input

	ToGetBackendServiceCircuitBreakerOutput() GetBackendServiceCircuitBreakerOutput
	ToGetBackendServiceCircuitBreakerOutputWithContext(context.Context) GetBackendServiceCircuitBreakerOutput
}

type GetBackendServiceCircuitBreakerArgs struct {
	ConnectTimeouts          GetBackendServiceCircuitBreakerConnectTimeoutArrayInput `pulumi:"connectTimeouts"`
	MaxConnections           pulumi.IntInput                                         `pulumi:"maxConnections"`
	MaxPendingRequests       pulumi.IntInput                                         `pulumi:"maxPendingRequests"`
	MaxRequests              pulumi.IntInput                                         `pulumi:"maxRequests"`
	MaxRequestsPerConnection pulumi.IntInput                                         `pulumi:"maxRequestsPerConnection"`
	MaxRetries               pulumi.IntInput                                         `pulumi:"maxRetries"`
}

func (GetBackendServiceCircuitBreakerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceCircuitBreaker)(nil)).Elem()
}

func (i GetBackendServiceCircuitBreakerArgs) ToGetBackendServiceCircuitBreakerOutput() GetBackendServiceCircuitBreakerOutput {
	return i.ToGetBackendServiceCircuitBreakerOutputWithContext(context.Background())
}

func (i GetBackendServiceCircuitBreakerArgs) ToGetBackendServiceCircuitBreakerOutputWithContext(ctx context.Context) GetBackendServiceCircuitBreakerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceCircuitBreakerOutput)
}

// GetBackendServiceCircuitBreakerArrayInput is an input type that accepts GetBackendServiceCircuitBreakerArray and GetBackendServiceCircuitBreakerArrayOutput values.
// You can construct a concrete instance of `GetBackendServiceCircuitBreakerArrayInput` via:
//
// 		 GetBackendServiceCircuitBreakerArray{ GetBackendServiceCircuitBreakerArgs{...} }
//
type GetBackendServiceCircuitBreakerArrayInput interface {
	pulumi.Input

	ToGetBackendServiceCircuitBreakerArrayOutput() GetBackendServiceCircuitBreakerArrayOutput
	ToGetBackendServiceCircuitBreakerArrayOutputWithContext(context.Context) GetBackendServiceCircuitBreakerArrayOutput
}

type GetBackendServiceCircuitBreakerArray []GetBackendServiceCircuitBreakerInput

func (GetBackendServiceCircuitBreakerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceCircuitBreaker)(nil)).Elem()
}

func (i GetBackendServiceCircuitBreakerArray) ToGetBackendServiceCircuitBreakerArrayOutput() GetBackendServiceCircuitBreakerArrayOutput {
	return i.ToGetBackendServiceCircuitBreakerArrayOutputWithContext(context.Background())
}

func (i GetBackendServiceCircuitBreakerArray) ToGetBackendServiceCircuitBreakerArrayOutputWithContext(ctx context.Context) GetBackendServiceCircuitBreakerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceCircuitBreakerArrayOutput)
}

type GetBackendServiceCircuitBreakerOutput struct{ *pulumi.OutputState }

func (GetBackendServiceCircuitBreakerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceCircuitBreaker)(nil)).Elem()
}

func (o GetBackendServiceCircuitBreakerOutput) ToGetBackendServiceCircuitBreakerOutput() GetBackendServiceCircuitBreakerOutput {
	return o
}

func (o GetBackendServiceCircuitBreakerOutput) ToGetBackendServiceCircuitBreakerOutputWithContext(ctx context.Context) GetBackendServiceCircuitBreakerOutput {
	return o
}

func (o GetBackendServiceCircuitBreakerOutput) ConnectTimeouts() GetBackendServiceCircuitBreakerConnectTimeoutArrayOutput {
	return o.ApplyT(func(v GetBackendServiceCircuitBreaker) []GetBackendServiceCircuitBreakerConnectTimeout {
		return v.ConnectTimeouts
	}).(GetBackendServiceCircuitBreakerConnectTimeoutArrayOutput)
}

func (o GetBackendServiceCircuitBreakerOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceCircuitBreaker) int { return v.MaxConnections }).(pulumi.IntOutput)
}

func (o GetBackendServiceCircuitBreakerOutput) MaxPendingRequests() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceCircuitBreaker) int { return v.MaxPendingRequests }).(pulumi.IntOutput)
}

func (o GetBackendServiceCircuitBreakerOutput) MaxRequests() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceCircuitBreaker) int { return v.MaxRequests }).(pulumi.IntOutput)
}

func (o GetBackendServiceCircuitBreakerOutput) MaxRequestsPerConnection() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceCircuitBreaker) int { return v.MaxRequestsPerConnection }).(pulumi.IntOutput)
}

func (o GetBackendServiceCircuitBreakerOutput) MaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceCircuitBreaker) int { return v.MaxRetries }).(pulumi.IntOutput)
}

type GetBackendServiceCircuitBreakerArrayOutput struct{ *pulumi.OutputState }

func (GetBackendServiceCircuitBreakerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceCircuitBreaker)(nil)).Elem()
}

func (o GetBackendServiceCircuitBreakerArrayOutput) ToGetBackendServiceCircuitBreakerArrayOutput() GetBackendServiceCircuitBreakerArrayOutput {
	return o
}

func (o GetBackendServiceCircuitBreakerArrayOutput) ToGetBackendServiceCircuitBreakerArrayOutputWithContext(ctx context.Context) GetBackendServiceCircuitBreakerArrayOutput {
	return o
}

func (o GetBackendServiceCircuitBreakerArrayOutput) Index(i pulumi.IntInput) GetBackendServiceCircuitBreakerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendServiceCircuitBreaker {
		return vs[0].([]GetBackendServiceCircuitBreaker)[vs[1].(int)]
	}).(GetBackendServiceCircuitBreakerOutput)
}

type GetBackendServiceCircuitBreakerConnectTimeout struct {
	Nanos   int `pulumi:"nanos"`
	Seconds int `pulumi:"seconds"`
}

// GetBackendServiceCircuitBreakerConnectTimeoutInput is an input type that accepts GetBackendServiceCircuitBreakerConnectTimeoutArgs and GetBackendServiceCircuitBreakerConnectTimeoutOutput values.
// You can construct a concrete instance of `GetBackendServiceCircuitBreakerConnectTimeoutInput` via:
//
// 		 GetBackendServiceCircuitBreakerConnectTimeoutArgs{...}
//
type GetBackendServiceCircuitBreakerConnectTimeoutInput interface {
	pulumi.Input

	ToGetBackendServiceCircuitBreakerConnectTimeoutOutput() GetBackendServiceCircuitBreakerConnectTimeoutOutput
	ToGetBackendServiceCircuitBreakerConnectTimeoutOutputWithContext(context.Context) GetBackendServiceCircuitBreakerConnectTimeoutOutput
}

type GetBackendServiceCircuitBreakerConnectTimeoutArgs struct {
	Nanos   pulumi.IntInput `pulumi:"nanos"`
	Seconds pulumi.IntInput `pulumi:"seconds"`
}

func (GetBackendServiceCircuitBreakerConnectTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceCircuitBreakerConnectTimeout)(nil)).Elem()
}

func (i GetBackendServiceCircuitBreakerConnectTimeoutArgs) ToGetBackendServiceCircuitBreakerConnectTimeoutOutput() GetBackendServiceCircuitBreakerConnectTimeoutOutput {
	return i.ToGetBackendServiceCircuitBreakerConnectTimeoutOutputWithContext(context.Background())
}

func (i GetBackendServiceCircuitBreakerConnectTimeoutArgs) ToGetBackendServiceCircuitBreakerConnectTimeoutOutputWithContext(ctx context.Context) GetBackendServiceCircuitBreakerConnectTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceCircuitBreakerConnectTimeoutOutput)
}

// GetBackendServiceCircuitBreakerConnectTimeoutArrayInput is an input type that accepts GetBackendServiceCircuitBreakerConnectTimeoutArray and GetBackendServiceCircuitBreakerConnectTimeoutArrayOutput values.
// You can construct a concrete instance of `GetBackendServiceCircuitBreakerConnectTimeoutArrayInput` via:
//
// 		 GetBackendServiceCircuitBreakerConnectTimeoutArray{ GetBackendServiceCircuitBreakerConnectTimeoutArgs{...} }
//
type GetBackendServiceCircuitBreakerConnectTimeoutArrayInput interface {
	pulumi.Input

	ToGetBackendServiceCircuitBreakerConnectTimeoutArrayOutput() GetBackendServiceCircuitBreakerConnectTimeoutArrayOutput
	ToGetBackendServiceCircuitBreakerConnectTimeoutArrayOutputWithContext(context.Context) GetBackendServiceCircuitBreakerConnectTimeoutArrayOutput
}

type GetBackendServiceCircuitBreakerConnectTimeoutArray []GetBackendServiceCircuitBreakerConnectTimeoutInput

func (GetBackendServiceCircuitBreakerConnectTimeoutArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceCircuitBreakerConnectTimeout)(nil)).Elem()
}

func (i GetBackendServiceCircuitBreakerConnectTimeoutArray) ToGetBackendServiceCircuitBreakerConnectTimeoutArrayOutput() GetBackendServiceCircuitBreakerConnectTimeoutArrayOutput {
	return i.ToGetBackendServiceCircuitBreakerConnectTimeoutArrayOutputWithContext(context.Background())
}

func (i GetBackendServiceCircuitBreakerConnectTimeoutArray) ToGetBackendServiceCircuitBreakerConnectTimeoutArrayOutputWithContext(ctx context.Context) GetBackendServiceCircuitBreakerConnectTimeoutArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceCircuitBreakerConnectTimeoutArrayOutput)
}

type GetBackendServiceCircuitBreakerConnectTimeoutOutput struct{ *pulumi.OutputState }

func (GetBackendServiceCircuitBreakerConnectTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceCircuitBreakerConnectTimeout)(nil)).Elem()
}

func (o GetBackendServiceCircuitBreakerConnectTimeoutOutput) ToGetBackendServiceCircuitBreakerConnectTimeoutOutput() GetBackendServiceCircuitBreakerConnectTimeoutOutput {
	return o
}

func (o GetBackendServiceCircuitBreakerConnectTimeoutOutput) ToGetBackendServiceCircuitBreakerConnectTimeoutOutputWithContext(ctx context.Context) GetBackendServiceCircuitBreakerConnectTimeoutOutput {
	return o
}

func (o GetBackendServiceCircuitBreakerConnectTimeoutOutput) Nanos() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceCircuitBreakerConnectTimeout) int { return v.Nanos }).(pulumi.IntOutput)
}

func (o GetBackendServiceCircuitBreakerConnectTimeoutOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceCircuitBreakerConnectTimeout) int { return v.Seconds }).(pulumi.IntOutput)
}

type GetBackendServiceCircuitBreakerConnectTimeoutArrayOutput struct{ *pulumi.OutputState }

func (GetBackendServiceCircuitBreakerConnectTimeoutArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceCircuitBreakerConnectTimeout)(nil)).Elem()
}

func (o GetBackendServiceCircuitBreakerConnectTimeoutArrayOutput) ToGetBackendServiceCircuitBreakerConnectTimeoutArrayOutput() GetBackendServiceCircuitBreakerConnectTimeoutArrayOutput {
	return o
}

func (o GetBackendServiceCircuitBreakerConnectTimeoutArrayOutput) ToGetBackendServiceCircuitBreakerConnectTimeoutArrayOutputWithContext(ctx context.Context) GetBackendServiceCircuitBreakerConnectTimeoutArrayOutput {
	return o
}

func (o GetBackendServiceCircuitBreakerConnectTimeoutArrayOutput) Index(i pulumi.IntInput) GetBackendServiceCircuitBreakerConnectTimeoutOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendServiceCircuitBreakerConnectTimeout {
		return vs[0].([]GetBackendServiceCircuitBreakerConnectTimeout)[vs[1].(int)]
	}).(GetBackendServiceCircuitBreakerConnectTimeoutOutput)
}

type GetBackendServiceConsistentHash struct {
	HttpCookies     []GetBackendServiceConsistentHashHttpCooky `pulumi:"httpCookies"`
	HttpHeaderName  string                                     `pulumi:"httpHeaderName"`
	MinimumRingSize int                                        `pulumi:"minimumRingSize"`
}

// GetBackendServiceConsistentHashInput is an input type that accepts GetBackendServiceConsistentHashArgs and GetBackendServiceConsistentHashOutput values.
// You can construct a concrete instance of `GetBackendServiceConsistentHashInput` via:
//
// 		 GetBackendServiceConsistentHashArgs{...}
//
type GetBackendServiceConsistentHashInput interface {
	pulumi.Input

	ToGetBackendServiceConsistentHashOutput() GetBackendServiceConsistentHashOutput
	ToGetBackendServiceConsistentHashOutputWithContext(context.Context) GetBackendServiceConsistentHashOutput
}

type GetBackendServiceConsistentHashArgs struct {
	HttpCookies     GetBackendServiceConsistentHashHttpCookyArrayInput `pulumi:"httpCookies"`
	HttpHeaderName  pulumi.StringInput                                 `pulumi:"httpHeaderName"`
	MinimumRingSize pulumi.IntInput                                    `pulumi:"minimumRingSize"`
}

func (GetBackendServiceConsistentHashArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceConsistentHash)(nil)).Elem()
}

func (i GetBackendServiceConsistentHashArgs) ToGetBackendServiceConsistentHashOutput() GetBackendServiceConsistentHashOutput {
	return i.ToGetBackendServiceConsistentHashOutputWithContext(context.Background())
}

func (i GetBackendServiceConsistentHashArgs) ToGetBackendServiceConsistentHashOutputWithContext(ctx context.Context) GetBackendServiceConsistentHashOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceConsistentHashOutput)
}

// GetBackendServiceConsistentHashArrayInput is an input type that accepts GetBackendServiceConsistentHashArray and GetBackendServiceConsistentHashArrayOutput values.
// You can construct a concrete instance of `GetBackendServiceConsistentHashArrayInput` via:
//
// 		 GetBackendServiceConsistentHashArray{ GetBackendServiceConsistentHashArgs{...} }
//
type GetBackendServiceConsistentHashArrayInput interface {
	pulumi.Input

	ToGetBackendServiceConsistentHashArrayOutput() GetBackendServiceConsistentHashArrayOutput
	ToGetBackendServiceConsistentHashArrayOutputWithContext(context.Context) GetBackendServiceConsistentHashArrayOutput
}

type GetBackendServiceConsistentHashArray []GetBackendServiceConsistentHashInput

func (GetBackendServiceConsistentHashArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceConsistentHash)(nil)).Elem()
}

func (i GetBackendServiceConsistentHashArray) ToGetBackendServiceConsistentHashArrayOutput() GetBackendServiceConsistentHashArrayOutput {
	return i.ToGetBackendServiceConsistentHashArrayOutputWithContext(context.Background())
}

func (i GetBackendServiceConsistentHashArray) ToGetBackendServiceConsistentHashArrayOutputWithContext(ctx context.Context) GetBackendServiceConsistentHashArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceConsistentHashArrayOutput)
}

type GetBackendServiceConsistentHashOutput struct{ *pulumi.OutputState }

func (GetBackendServiceConsistentHashOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceConsistentHash)(nil)).Elem()
}

func (o GetBackendServiceConsistentHashOutput) ToGetBackendServiceConsistentHashOutput() GetBackendServiceConsistentHashOutput {
	return o
}

func (o GetBackendServiceConsistentHashOutput) ToGetBackendServiceConsistentHashOutputWithContext(ctx context.Context) GetBackendServiceConsistentHashOutput {
	return o
}

func (o GetBackendServiceConsistentHashOutput) HttpCookies() GetBackendServiceConsistentHashHttpCookyArrayOutput {
	return o.ApplyT(func(v GetBackendServiceConsistentHash) []GetBackendServiceConsistentHashHttpCooky {
		return v.HttpCookies
	}).(GetBackendServiceConsistentHashHttpCookyArrayOutput)
}

func (o GetBackendServiceConsistentHashOutput) HttpHeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendServiceConsistentHash) string { return v.HttpHeaderName }).(pulumi.StringOutput)
}

func (o GetBackendServiceConsistentHashOutput) MinimumRingSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceConsistentHash) int { return v.MinimumRingSize }).(pulumi.IntOutput)
}

type GetBackendServiceConsistentHashArrayOutput struct{ *pulumi.OutputState }

func (GetBackendServiceConsistentHashArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceConsistentHash)(nil)).Elem()
}

func (o GetBackendServiceConsistentHashArrayOutput) ToGetBackendServiceConsistentHashArrayOutput() GetBackendServiceConsistentHashArrayOutput {
	return o
}

func (o GetBackendServiceConsistentHashArrayOutput) ToGetBackendServiceConsistentHashArrayOutputWithContext(ctx context.Context) GetBackendServiceConsistentHashArrayOutput {
	return o
}

func (o GetBackendServiceConsistentHashArrayOutput) Index(i pulumi.IntInput) GetBackendServiceConsistentHashOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendServiceConsistentHash {
		return vs[0].([]GetBackendServiceConsistentHash)[vs[1].(int)]
	}).(GetBackendServiceConsistentHashOutput)
}

type GetBackendServiceConsistentHashHttpCooky struct {
	// The name of the Backend Service.
	Name string                                        `pulumi:"name"`
	Path string                                        `pulumi:"path"`
	Ttls []GetBackendServiceConsistentHashHttpCookyTtl `pulumi:"ttls"`
}

// GetBackendServiceConsistentHashHttpCookyInput is an input type that accepts GetBackendServiceConsistentHashHttpCookyArgs and GetBackendServiceConsistentHashHttpCookyOutput values.
// You can construct a concrete instance of `GetBackendServiceConsistentHashHttpCookyInput` via:
//
// 		 GetBackendServiceConsistentHashHttpCookyArgs{...}
//
type GetBackendServiceConsistentHashHttpCookyInput interface {
	pulumi.Input

	ToGetBackendServiceConsistentHashHttpCookyOutput() GetBackendServiceConsistentHashHttpCookyOutput
	ToGetBackendServiceConsistentHashHttpCookyOutputWithContext(context.Context) GetBackendServiceConsistentHashHttpCookyOutput
}

type GetBackendServiceConsistentHashHttpCookyArgs struct {
	// The name of the Backend Service.
	Name pulumi.StringInput                                    `pulumi:"name"`
	Path pulumi.StringInput                                    `pulumi:"path"`
	Ttls GetBackendServiceConsistentHashHttpCookyTtlArrayInput `pulumi:"ttls"`
}

func (GetBackendServiceConsistentHashHttpCookyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceConsistentHashHttpCooky)(nil)).Elem()
}

func (i GetBackendServiceConsistentHashHttpCookyArgs) ToGetBackendServiceConsistentHashHttpCookyOutput() GetBackendServiceConsistentHashHttpCookyOutput {
	return i.ToGetBackendServiceConsistentHashHttpCookyOutputWithContext(context.Background())
}

func (i GetBackendServiceConsistentHashHttpCookyArgs) ToGetBackendServiceConsistentHashHttpCookyOutputWithContext(ctx context.Context) GetBackendServiceConsistentHashHttpCookyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceConsistentHashHttpCookyOutput)
}

// GetBackendServiceConsistentHashHttpCookyArrayInput is an input type that accepts GetBackendServiceConsistentHashHttpCookyArray and GetBackendServiceConsistentHashHttpCookyArrayOutput values.
// You can construct a concrete instance of `GetBackendServiceConsistentHashHttpCookyArrayInput` via:
//
// 		 GetBackendServiceConsistentHashHttpCookyArray{ GetBackendServiceConsistentHashHttpCookyArgs{...} }
//
type GetBackendServiceConsistentHashHttpCookyArrayInput interface {
	pulumi.Input

	ToGetBackendServiceConsistentHashHttpCookyArrayOutput() GetBackendServiceConsistentHashHttpCookyArrayOutput
	ToGetBackendServiceConsistentHashHttpCookyArrayOutputWithContext(context.Context) GetBackendServiceConsistentHashHttpCookyArrayOutput
}

type GetBackendServiceConsistentHashHttpCookyArray []GetBackendServiceConsistentHashHttpCookyInput

func (GetBackendServiceConsistentHashHttpCookyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceConsistentHashHttpCooky)(nil)).Elem()
}

func (i GetBackendServiceConsistentHashHttpCookyArray) ToGetBackendServiceConsistentHashHttpCookyArrayOutput() GetBackendServiceConsistentHashHttpCookyArrayOutput {
	return i.ToGetBackendServiceConsistentHashHttpCookyArrayOutputWithContext(context.Background())
}

func (i GetBackendServiceConsistentHashHttpCookyArray) ToGetBackendServiceConsistentHashHttpCookyArrayOutputWithContext(ctx context.Context) GetBackendServiceConsistentHashHttpCookyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceConsistentHashHttpCookyArrayOutput)
}

type GetBackendServiceConsistentHashHttpCookyOutput struct{ *pulumi.OutputState }

func (GetBackendServiceConsistentHashHttpCookyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceConsistentHashHttpCooky)(nil)).Elem()
}

func (o GetBackendServiceConsistentHashHttpCookyOutput) ToGetBackendServiceConsistentHashHttpCookyOutput() GetBackendServiceConsistentHashHttpCookyOutput {
	return o
}

func (o GetBackendServiceConsistentHashHttpCookyOutput) ToGetBackendServiceConsistentHashHttpCookyOutputWithContext(ctx context.Context) GetBackendServiceConsistentHashHttpCookyOutput {
	return o
}

// The name of the Backend Service.
func (o GetBackendServiceConsistentHashHttpCookyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendServiceConsistentHashHttpCooky) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetBackendServiceConsistentHashHttpCookyOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendServiceConsistentHashHttpCooky) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetBackendServiceConsistentHashHttpCookyOutput) Ttls() GetBackendServiceConsistentHashHttpCookyTtlArrayOutput {
	return o.ApplyT(func(v GetBackendServiceConsistentHashHttpCooky) []GetBackendServiceConsistentHashHttpCookyTtl {
		return v.Ttls
	}).(GetBackendServiceConsistentHashHttpCookyTtlArrayOutput)
}

type GetBackendServiceConsistentHashHttpCookyArrayOutput struct{ *pulumi.OutputState }

func (GetBackendServiceConsistentHashHttpCookyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceConsistentHashHttpCooky)(nil)).Elem()
}

func (o GetBackendServiceConsistentHashHttpCookyArrayOutput) ToGetBackendServiceConsistentHashHttpCookyArrayOutput() GetBackendServiceConsistentHashHttpCookyArrayOutput {
	return o
}

func (o GetBackendServiceConsistentHashHttpCookyArrayOutput) ToGetBackendServiceConsistentHashHttpCookyArrayOutputWithContext(ctx context.Context) GetBackendServiceConsistentHashHttpCookyArrayOutput {
	return o
}

func (o GetBackendServiceConsistentHashHttpCookyArrayOutput) Index(i pulumi.IntInput) GetBackendServiceConsistentHashHttpCookyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendServiceConsistentHashHttpCooky {
		return vs[0].([]GetBackendServiceConsistentHashHttpCooky)[vs[1].(int)]
	}).(GetBackendServiceConsistentHashHttpCookyOutput)
}

type GetBackendServiceConsistentHashHttpCookyTtl struct {
	Nanos   int `pulumi:"nanos"`
	Seconds int `pulumi:"seconds"`
}

// GetBackendServiceConsistentHashHttpCookyTtlInput is an input type that accepts GetBackendServiceConsistentHashHttpCookyTtlArgs and GetBackendServiceConsistentHashHttpCookyTtlOutput values.
// You can construct a concrete instance of `GetBackendServiceConsistentHashHttpCookyTtlInput` via:
//
// 		 GetBackendServiceConsistentHashHttpCookyTtlArgs{...}
//
type GetBackendServiceConsistentHashHttpCookyTtlInput interface {
	pulumi.Input

	ToGetBackendServiceConsistentHashHttpCookyTtlOutput() GetBackendServiceConsistentHashHttpCookyTtlOutput
	ToGetBackendServiceConsistentHashHttpCookyTtlOutputWithContext(context.Context) GetBackendServiceConsistentHashHttpCookyTtlOutput
}

type GetBackendServiceConsistentHashHttpCookyTtlArgs struct {
	Nanos   pulumi.IntInput `pulumi:"nanos"`
	Seconds pulumi.IntInput `pulumi:"seconds"`
}

func (GetBackendServiceConsistentHashHttpCookyTtlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceConsistentHashHttpCookyTtl)(nil)).Elem()
}

func (i GetBackendServiceConsistentHashHttpCookyTtlArgs) ToGetBackendServiceConsistentHashHttpCookyTtlOutput() GetBackendServiceConsistentHashHttpCookyTtlOutput {
	return i.ToGetBackendServiceConsistentHashHttpCookyTtlOutputWithContext(context.Background())
}

func (i GetBackendServiceConsistentHashHttpCookyTtlArgs) ToGetBackendServiceConsistentHashHttpCookyTtlOutputWithContext(ctx context.Context) GetBackendServiceConsistentHashHttpCookyTtlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceConsistentHashHttpCookyTtlOutput)
}

// GetBackendServiceConsistentHashHttpCookyTtlArrayInput is an input type that accepts GetBackendServiceConsistentHashHttpCookyTtlArray and GetBackendServiceConsistentHashHttpCookyTtlArrayOutput values.
// You can construct a concrete instance of `GetBackendServiceConsistentHashHttpCookyTtlArrayInput` via:
//
// 		 GetBackendServiceConsistentHashHttpCookyTtlArray{ GetBackendServiceConsistentHashHttpCookyTtlArgs{...} }
//
type GetBackendServiceConsistentHashHttpCookyTtlArrayInput interface {
	pulumi.Input

	ToGetBackendServiceConsistentHashHttpCookyTtlArrayOutput() GetBackendServiceConsistentHashHttpCookyTtlArrayOutput
	ToGetBackendServiceConsistentHashHttpCookyTtlArrayOutputWithContext(context.Context) GetBackendServiceConsistentHashHttpCookyTtlArrayOutput
}

type GetBackendServiceConsistentHashHttpCookyTtlArray []GetBackendServiceConsistentHashHttpCookyTtlInput

func (GetBackendServiceConsistentHashHttpCookyTtlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceConsistentHashHttpCookyTtl)(nil)).Elem()
}

func (i GetBackendServiceConsistentHashHttpCookyTtlArray) ToGetBackendServiceConsistentHashHttpCookyTtlArrayOutput() GetBackendServiceConsistentHashHttpCookyTtlArrayOutput {
	return i.ToGetBackendServiceConsistentHashHttpCookyTtlArrayOutputWithContext(context.Background())
}

func (i GetBackendServiceConsistentHashHttpCookyTtlArray) ToGetBackendServiceConsistentHashHttpCookyTtlArrayOutputWithContext(ctx context.Context) GetBackendServiceConsistentHashHttpCookyTtlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceConsistentHashHttpCookyTtlArrayOutput)
}

type GetBackendServiceConsistentHashHttpCookyTtlOutput struct{ *pulumi.OutputState }

func (GetBackendServiceConsistentHashHttpCookyTtlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceConsistentHashHttpCookyTtl)(nil)).Elem()
}

func (o GetBackendServiceConsistentHashHttpCookyTtlOutput) ToGetBackendServiceConsistentHashHttpCookyTtlOutput() GetBackendServiceConsistentHashHttpCookyTtlOutput {
	return o
}

func (o GetBackendServiceConsistentHashHttpCookyTtlOutput) ToGetBackendServiceConsistentHashHttpCookyTtlOutputWithContext(ctx context.Context) GetBackendServiceConsistentHashHttpCookyTtlOutput {
	return o
}

func (o GetBackendServiceConsistentHashHttpCookyTtlOutput) Nanos() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceConsistentHashHttpCookyTtl) int { return v.Nanos }).(pulumi.IntOutput)
}

func (o GetBackendServiceConsistentHashHttpCookyTtlOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceConsistentHashHttpCookyTtl) int { return v.Seconds }).(pulumi.IntOutput)
}

type GetBackendServiceConsistentHashHttpCookyTtlArrayOutput struct{ *pulumi.OutputState }

func (GetBackendServiceConsistentHashHttpCookyTtlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceConsistentHashHttpCookyTtl)(nil)).Elem()
}

func (o GetBackendServiceConsistentHashHttpCookyTtlArrayOutput) ToGetBackendServiceConsistentHashHttpCookyTtlArrayOutput() GetBackendServiceConsistentHashHttpCookyTtlArrayOutput {
	return o
}

func (o GetBackendServiceConsistentHashHttpCookyTtlArrayOutput) ToGetBackendServiceConsistentHashHttpCookyTtlArrayOutputWithContext(ctx context.Context) GetBackendServiceConsistentHashHttpCookyTtlArrayOutput {
	return o
}

func (o GetBackendServiceConsistentHashHttpCookyTtlArrayOutput) Index(i pulumi.IntInput) GetBackendServiceConsistentHashHttpCookyTtlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendServiceConsistentHashHttpCookyTtl {
		return vs[0].([]GetBackendServiceConsistentHashHttpCookyTtl)[vs[1].(int)]
	}).(GetBackendServiceConsistentHashHttpCookyTtlOutput)
}

type GetBackendServiceIap struct {
	Oauth2ClientId           string `pulumi:"oauth2ClientId"`
	Oauth2ClientSecret       string `pulumi:"oauth2ClientSecret"`
	Oauth2ClientSecretSha256 string `pulumi:"oauth2ClientSecretSha256"`
}

// GetBackendServiceIapInput is an input type that accepts GetBackendServiceIapArgs and GetBackendServiceIapOutput values.
// You can construct a concrete instance of `GetBackendServiceIapInput` via:
//
// 		 GetBackendServiceIapArgs{...}
//
type GetBackendServiceIapInput interface {
	pulumi.Input

	ToGetBackendServiceIapOutput() GetBackendServiceIapOutput
	ToGetBackendServiceIapOutputWithContext(context.Context) GetBackendServiceIapOutput
}

type GetBackendServiceIapArgs struct {
	Oauth2ClientId           pulumi.StringInput `pulumi:"oauth2ClientId"`
	Oauth2ClientSecret       pulumi.StringInput `pulumi:"oauth2ClientSecret"`
	Oauth2ClientSecretSha256 pulumi.StringInput `pulumi:"oauth2ClientSecretSha256"`
}

func (GetBackendServiceIapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceIap)(nil)).Elem()
}

func (i GetBackendServiceIapArgs) ToGetBackendServiceIapOutput() GetBackendServiceIapOutput {
	return i.ToGetBackendServiceIapOutputWithContext(context.Background())
}

func (i GetBackendServiceIapArgs) ToGetBackendServiceIapOutputWithContext(ctx context.Context) GetBackendServiceIapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceIapOutput)
}

// GetBackendServiceIapArrayInput is an input type that accepts GetBackendServiceIapArray and GetBackendServiceIapArrayOutput values.
// You can construct a concrete instance of `GetBackendServiceIapArrayInput` via:
//
// 		 GetBackendServiceIapArray{ GetBackendServiceIapArgs{...} }
//
type GetBackendServiceIapArrayInput interface {
	pulumi.Input

	ToGetBackendServiceIapArrayOutput() GetBackendServiceIapArrayOutput
	ToGetBackendServiceIapArrayOutputWithContext(context.Context) GetBackendServiceIapArrayOutput
}

type GetBackendServiceIapArray []GetBackendServiceIapInput

func (GetBackendServiceIapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceIap)(nil)).Elem()
}

func (i GetBackendServiceIapArray) ToGetBackendServiceIapArrayOutput() GetBackendServiceIapArrayOutput {
	return i.ToGetBackendServiceIapArrayOutputWithContext(context.Background())
}

func (i GetBackendServiceIapArray) ToGetBackendServiceIapArrayOutputWithContext(ctx context.Context) GetBackendServiceIapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceIapArrayOutput)
}

type GetBackendServiceIapOutput struct{ *pulumi.OutputState }

func (GetBackendServiceIapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceIap)(nil)).Elem()
}

func (o GetBackendServiceIapOutput) ToGetBackendServiceIapOutput() GetBackendServiceIapOutput {
	return o
}

func (o GetBackendServiceIapOutput) ToGetBackendServiceIapOutputWithContext(ctx context.Context) GetBackendServiceIapOutput {
	return o
}

func (o GetBackendServiceIapOutput) Oauth2ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendServiceIap) string { return v.Oauth2ClientId }).(pulumi.StringOutput)
}

func (o GetBackendServiceIapOutput) Oauth2ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendServiceIap) string { return v.Oauth2ClientSecret }).(pulumi.StringOutput)
}

func (o GetBackendServiceIapOutput) Oauth2ClientSecretSha256() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendServiceIap) string { return v.Oauth2ClientSecretSha256 }).(pulumi.StringOutput)
}

type GetBackendServiceIapArrayOutput struct{ *pulumi.OutputState }

func (GetBackendServiceIapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceIap)(nil)).Elem()
}

func (o GetBackendServiceIapArrayOutput) ToGetBackendServiceIapArrayOutput() GetBackendServiceIapArrayOutput {
	return o
}

func (o GetBackendServiceIapArrayOutput) ToGetBackendServiceIapArrayOutputWithContext(ctx context.Context) GetBackendServiceIapArrayOutput {
	return o
}

func (o GetBackendServiceIapArrayOutput) Index(i pulumi.IntInput) GetBackendServiceIapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendServiceIap {
		return vs[0].([]GetBackendServiceIap)[vs[1].(int)]
	}).(GetBackendServiceIapOutput)
}

type GetBackendServiceLogConfig struct {
	Enable     bool    `pulumi:"enable"`
	SampleRate float64 `pulumi:"sampleRate"`
}

// GetBackendServiceLogConfigInput is an input type that accepts GetBackendServiceLogConfigArgs and GetBackendServiceLogConfigOutput values.
// You can construct a concrete instance of `GetBackendServiceLogConfigInput` via:
//
// 		 GetBackendServiceLogConfigArgs{...}
//
type GetBackendServiceLogConfigInput interface {
	pulumi.Input

	ToGetBackendServiceLogConfigOutput() GetBackendServiceLogConfigOutput
	ToGetBackendServiceLogConfigOutputWithContext(context.Context) GetBackendServiceLogConfigOutput
}

type GetBackendServiceLogConfigArgs struct {
	Enable     pulumi.BoolInput    `pulumi:"enable"`
	SampleRate pulumi.Float64Input `pulumi:"sampleRate"`
}

func (GetBackendServiceLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceLogConfig)(nil)).Elem()
}

func (i GetBackendServiceLogConfigArgs) ToGetBackendServiceLogConfigOutput() GetBackendServiceLogConfigOutput {
	return i.ToGetBackendServiceLogConfigOutputWithContext(context.Background())
}

func (i GetBackendServiceLogConfigArgs) ToGetBackendServiceLogConfigOutputWithContext(ctx context.Context) GetBackendServiceLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceLogConfigOutput)
}

// GetBackendServiceLogConfigArrayInput is an input type that accepts GetBackendServiceLogConfigArray and GetBackendServiceLogConfigArrayOutput values.
// You can construct a concrete instance of `GetBackendServiceLogConfigArrayInput` via:
//
// 		 GetBackendServiceLogConfigArray{ GetBackendServiceLogConfigArgs{...} }
//
type GetBackendServiceLogConfigArrayInput interface {
	pulumi.Input

	ToGetBackendServiceLogConfigArrayOutput() GetBackendServiceLogConfigArrayOutput
	ToGetBackendServiceLogConfigArrayOutputWithContext(context.Context) GetBackendServiceLogConfigArrayOutput
}

type GetBackendServiceLogConfigArray []GetBackendServiceLogConfigInput

func (GetBackendServiceLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceLogConfig)(nil)).Elem()
}

func (i GetBackendServiceLogConfigArray) ToGetBackendServiceLogConfigArrayOutput() GetBackendServiceLogConfigArrayOutput {
	return i.ToGetBackendServiceLogConfigArrayOutputWithContext(context.Background())
}

func (i GetBackendServiceLogConfigArray) ToGetBackendServiceLogConfigArrayOutputWithContext(ctx context.Context) GetBackendServiceLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceLogConfigArrayOutput)
}

type GetBackendServiceLogConfigOutput struct{ *pulumi.OutputState }

func (GetBackendServiceLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceLogConfig)(nil)).Elem()
}

func (o GetBackendServiceLogConfigOutput) ToGetBackendServiceLogConfigOutput() GetBackendServiceLogConfigOutput {
	return o
}

func (o GetBackendServiceLogConfigOutput) ToGetBackendServiceLogConfigOutputWithContext(ctx context.Context) GetBackendServiceLogConfigOutput {
	return o
}

func (o GetBackendServiceLogConfigOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBackendServiceLogConfig) bool { return v.Enable }).(pulumi.BoolOutput)
}

func (o GetBackendServiceLogConfigOutput) SampleRate() pulumi.Float64Output {
	return o.ApplyT(func(v GetBackendServiceLogConfig) float64 { return v.SampleRate }).(pulumi.Float64Output)
}

type GetBackendServiceLogConfigArrayOutput struct{ *pulumi.OutputState }

func (GetBackendServiceLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceLogConfig)(nil)).Elem()
}

func (o GetBackendServiceLogConfigArrayOutput) ToGetBackendServiceLogConfigArrayOutput() GetBackendServiceLogConfigArrayOutput {
	return o
}

func (o GetBackendServiceLogConfigArrayOutput) ToGetBackendServiceLogConfigArrayOutputWithContext(ctx context.Context) GetBackendServiceLogConfigArrayOutput {
	return o
}

func (o GetBackendServiceLogConfigArrayOutput) Index(i pulumi.IntInput) GetBackendServiceLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendServiceLogConfig {
		return vs[0].([]GetBackendServiceLogConfig)[vs[1].(int)]
	}).(GetBackendServiceLogConfigOutput)
}

type GetBackendServiceOutlierDetection struct {
	BaseEjectionTimes                  []GetBackendServiceOutlierDetectionBaseEjectionTime `pulumi:"baseEjectionTimes"`
	ConsecutiveErrors                  int                                                 `pulumi:"consecutiveErrors"`
	ConsecutiveGatewayFailure          int                                                 `pulumi:"consecutiveGatewayFailure"`
	EnforcingConsecutiveErrors         int                                                 `pulumi:"enforcingConsecutiveErrors"`
	EnforcingConsecutiveGatewayFailure int                                                 `pulumi:"enforcingConsecutiveGatewayFailure"`
	EnforcingSuccessRate               int                                                 `pulumi:"enforcingSuccessRate"`
	Intervals                          []GetBackendServiceOutlierDetectionInterval         `pulumi:"intervals"`
	MaxEjectionPercent                 int                                                 `pulumi:"maxEjectionPercent"`
	SuccessRateMinimumHosts            int                                                 `pulumi:"successRateMinimumHosts"`
	SuccessRateRequestVolume           int                                                 `pulumi:"successRateRequestVolume"`
	SuccessRateStdevFactor             int                                                 `pulumi:"successRateStdevFactor"`
}

// GetBackendServiceOutlierDetectionInput is an input type that accepts GetBackendServiceOutlierDetectionArgs and GetBackendServiceOutlierDetectionOutput values.
// You can construct a concrete instance of `GetBackendServiceOutlierDetectionInput` via:
//
// 		 GetBackendServiceOutlierDetectionArgs{...}
//
type GetBackendServiceOutlierDetectionInput interface {
	pulumi.Input

	ToGetBackendServiceOutlierDetectionOutput() GetBackendServiceOutlierDetectionOutput
	ToGetBackendServiceOutlierDetectionOutputWithContext(context.Context) GetBackendServiceOutlierDetectionOutput
}

type GetBackendServiceOutlierDetectionArgs struct {
	BaseEjectionTimes                  GetBackendServiceOutlierDetectionBaseEjectionTimeArrayInput `pulumi:"baseEjectionTimes"`
	ConsecutiveErrors                  pulumi.IntInput                                             `pulumi:"consecutiveErrors"`
	ConsecutiveGatewayFailure          pulumi.IntInput                                             `pulumi:"consecutiveGatewayFailure"`
	EnforcingConsecutiveErrors         pulumi.IntInput                                             `pulumi:"enforcingConsecutiveErrors"`
	EnforcingConsecutiveGatewayFailure pulumi.IntInput                                             `pulumi:"enforcingConsecutiveGatewayFailure"`
	EnforcingSuccessRate               pulumi.IntInput                                             `pulumi:"enforcingSuccessRate"`
	Intervals                          GetBackendServiceOutlierDetectionIntervalArrayInput         `pulumi:"intervals"`
	MaxEjectionPercent                 pulumi.IntInput                                             `pulumi:"maxEjectionPercent"`
	SuccessRateMinimumHosts            pulumi.IntInput                                             `pulumi:"successRateMinimumHosts"`
	SuccessRateRequestVolume           pulumi.IntInput                                             `pulumi:"successRateRequestVolume"`
	SuccessRateStdevFactor             pulumi.IntInput                                             `pulumi:"successRateStdevFactor"`
}

func (GetBackendServiceOutlierDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceOutlierDetection)(nil)).Elem()
}

func (i GetBackendServiceOutlierDetectionArgs) ToGetBackendServiceOutlierDetectionOutput() GetBackendServiceOutlierDetectionOutput {
	return i.ToGetBackendServiceOutlierDetectionOutputWithContext(context.Background())
}

func (i GetBackendServiceOutlierDetectionArgs) ToGetBackendServiceOutlierDetectionOutputWithContext(ctx context.Context) GetBackendServiceOutlierDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceOutlierDetectionOutput)
}

// GetBackendServiceOutlierDetectionArrayInput is an input type that accepts GetBackendServiceOutlierDetectionArray and GetBackendServiceOutlierDetectionArrayOutput values.
// You can construct a concrete instance of `GetBackendServiceOutlierDetectionArrayInput` via:
//
// 		 GetBackendServiceOutlierDetectionArray{ GetBackendServiceOutlierDetectionArgs{...} }
//
type GetBackendServiceOutlierDetectionArrayInput interface {
	pulumi.Input

	ToGetBackendServiceOutlierDetectionArrayOutput() GetBackendServiceOutlierDetectionArrayOutput
	ToGetBackendServiceOutlierDetectionArrayOutputWithContext(context.Context) GetBackendServiceOutlierDetectionArrayOutput
}

type GetBackendServiceOutlierDetectionArray []GetBackendServiceOutlierDetectionInput

func (GetBackendServiceOutlierDetectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceOutlierDetection)(nil)).Elem()
}

func (i GetBackendServiceOutlierDetectionArray) ToGetBackendServiceOutlierDetectionArrayOutput() GetBackendServiceOutlierDetectionArrayOutput {
	return i.ToGetBackendServiceOutlierDetectionArrayOutputWithContext(context.Background())
}

func (i GetBackendServiceOutlierDetectionArray) ToGetBackendServiceOutlierDetectionArrayOutputWithContext(ctx context.Context) GetBackendServiceOutlierDetectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceOutlierDetectionArrayOutput)
}

type GetBackendServiceOutlierDetectionOutput struct{ *pulumi.OutputState }

func (GetBackendServiceOutlierDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceOutlierDetection)(nil)).Elem()
}

func (o GetBackendServiceOutlierDetectionOutput) ToGetBackendServiceOutlierDetectionOutput() GetBackendServiceOutlierDetectionOutput {
	return o
}

func (o GetBackendServiceOutlierDetectionOutput) ToGetBackendServiceOutlierDetectionOutputWithContext(ctx context.Context) GetBackendServiceOutlierDetectionOutput {
	return o
}

func (o GetBackendServiceOutlierDetectionOutput) BaseEjectionTimes() GetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput {
	return o.ApplyT(func(v GetBackendServiceOutlierDetection) []GetBackendServiceOutlierDetectionBaseEjectionTime {
		return v.BaseEjectionTimes
	}).(GetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput)
}

func (o GetBackendServiceOutlierDetectionOutput) ConsecutiveErrors() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceOutlierDetection) int { return v.ConsecutiveErrors }).(pulumi.IntOutput)
}

func (o GetBackendServiceOutlierDetectionOutput) ConsecutiveGatewayFailure() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceOutlierDetection) int { return v.ConsecutiveGatewayFailure }).(pulumi.IntOutput)
}

func (o GetBackendServiceOutlierDetectionOutput) EnforcingConsecutiveErrors() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceOutlierDetection) int { return v.EnforcingConsecutiveErrors }).(pulumi.IntOutput)
}

func (o GetBackendServiceOutlierDetectionOutput) EnforcingConsecutiveGatewayFailure() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceOutlierDetection) int { return v.EnforcingConsecutiveGatewayFailure }).(pulumi.IntOutput)
}

func (o GetBackendServiceOutlierDetectionOutput) EnforcingSuccessRate() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceOutlierDetection) int { return v.EnforcingSuccessRate }).(pulumi.IntOutput)
}

func (o GetBackendServiceOutlierDetectionOutput) Intervals() GetBackendServiceOutlierDetectionIntervalArrayOutput {
	return o.ApplyT(func(v GetBackendServiceOutlierDetection) []GetBackendServiceOutlierDetectionInterval {
		return v.Intervals
	}).(GetBackendServiceOutlierDetectionIntervalArrayOutput)
}

func (o GetBackendServiceOutlierDetectionOutput) MaxEjectionPercent() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceOutlierDetection) int { return v.MaxEjectionPercent }).(pulumi.IntOutput)
}

func (o GetBackendServiceOutlierDetectionOutput) SuccessRateMinimumHosts() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceOutlierDetection) int { return v.SuccessRateMinimumHosts }).(pulumi.IntOutput)
}

func (o GetBackendServiceOutlierDetectionOutput) SuccessRateRequestVolume() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceOutlierDetection) int { return v.SuccessRateRequestVolume }).(pulumi.IntOutput)
}

func (o GetBackendServiceOutlierDetectionOutput) SuccessRateStdevFactor() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceOutlierDetection) int { return v.SuccessRateStdevFactor }).(pulumi.IntOutput)
}

type GetBackendServiceOutlierDetectionArrayOutput struct{ *pulumi.OutputState }

func (GetBackendServiceOutlierDetectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceOutlierDetection)(nil)).Elem()
}

func (o GetBackendServiceOutlierDetectionArrayOutput) ToGetBackendServiceOutlierDetectionArrayOutput() GetBackendServiceOutlierDetectionArrayOutput {
	return o
}

func (o GetBackendServiceOutlierDetectionArrayOutput) ToGetBackendServiceOutlierDetectionArrayOutputWithContext(ctx context.Context) GetBackendServiceOutlierDetectionArrayOutput {
	return o
}

func (o GetBackendServiceOutlierDetectionArrayOutput) Index(i pulumi.IntInput) GetBackendServiceOutlierDetectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendServiceOutlierDetection {
		return vs[0].([]GetBackendServiceOutlierDetection)[vs[1].(int)]
	}).(GetBackendServiceOutlierDetectionOutput)
}

type GetBackendServiceOutlierDetectionBaseEjectionTime struct {
	Nanos   int `pulumi:"nanos"`
	Seconds int `pulumi:"seconds"`
}

// GetBackendServiceOutlierDetectionBaseEjectionTimeInput is an input type that accepts GetBackendServiceOutlierDetectionBaseEjectionTimeArgs and GetBackendServiceOutlierDetectionBaseEjectionTimeOutput values.
// You can construct a concrete instance of `GetBackendServiceOutlierDetectionBaseEjectionTimeInput` via:
//
// 		 GetBackendServiceOutlierDetectionBaseEjectionTimeArgs{...}
//
type GetBackendServiceOutlierDetectionBaseEjectionTimeInput interface {
	pulumi.Input

	ToGetBackendServiceOutlierDetectionBaseEjectionTimeOutput() GetBackendServiceOutlierDetectionBaseEjectionTimeOutput
	ToGetBackendServiceOutlierDetectionBaseEjectionTimeOutputWithContext(context.Context) GetBackendServiceOutlierDetectionBaseEjectionTimeOutput
}

type GetBackendServiceOutlierDetectionBaseEjectionTimeArgs struct {
	Nanos   pulumi.IntInput `pulumi:"nanos"`
	Seconds pulumi.IntInput `pulumi:"seconds"`
}

func (GetBackendServiceOutlierDetectionBaseEjectionTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceOutlierDetectionBaseEjectionTime)(nil)).Elem()
}

func (i GetBackendServiceOutlierDetectionBaseEjectionTimeArgs) ToGetBackendServiceOutlierDetectionBaseEjectionTimeOutput() GetBackendServiceOutlierDetectionBaseEjectionTimeOutput {
	return i.ToGetBackendServiceOutlierDetectionBaseEjectionTimeOutputWithContext(context.Background())
}

func (i GetBackendServiceOutlierDetectionBaseEjectionTimeArgs) ToGetBackendServiceOutlierDetectionBaseEjectionTimeOutputWithContext(ctx context.Context) GetBackendServiceOutlierDetectionBaseEjectionTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceOutlierDetectionBaseEjectionTimeOutput)
}

// GetBackendServiceOutlierDetectionBaseEjectionTimeArrayInput is an input type that accepts GetBackendServiceOutlierDetectionBaseEjectionTimeArray and GetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput values.
// You can construct a concrete instance of `GetBackendServiceOutlierDetectionBaseEjectionTimeArrayInput` via:
//
// 		 GetBackendServiceOutlierDetectionBaseEjectionTimeArray{ GetBackendServiceOutlierDetectionBaseEjectionTimeArgs{...} }
//
type GetBackendServiceOutlierDetectionBaseEjectionTimeArrayInput interface {
	pulumi.Input

	ToGetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput() GetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput
	ToGetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutputWithContext(context.Context) GetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput
}

type GetBackendServiceOutlierDetectionBaseEjectionTimeArray []GetBackendServiceOutlierDetectionBaseEjectionTimeInput

func (GetBackendServiceOutlierDetectionBaseEjectionTimeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceOutlierDetectionBaseEjectionTime)(nil)).Elem()
}

func (i GetBackendServiceOutlierDetectionBaseEjectionTimeArray) ToGetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput() GetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput {
	return i.ToGetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutputWithContext(context.Background())
}

func (i GetBackendServiceOutlierDetectionBaseEjectionTimeArray) ToGetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutputWithContext(ctx context.Context) GetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput)
}

type GetBackendServiceOutlierDetectionBaseEjectionTimeOutput struct{ *pulumi.OutputState }

func (GetBackendServiceOutlierDetectionBaseEjectionTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceOutlierDetectionBaseEjectionTime)(nil)).Elem()
}

func (o GetBackendServiceOutlierDetectionBaseEjectionTimeOutput) ToGetBackendServiceOutlierDetectionBaseEjectionTimeOutput() GetBackendServiceOutlierDetectionBaseEjectionTimeOutput {
	return o
}

func (o GetBackendServiceOutlierDetectionBaseEjectionTimeOutput) ToGetBackendServiceOutlierDetectionBaseEjectionTimeOutputWithContext(ctx context.Context) GetBackendServiceOutlierDetectionBaseEjectionTimeOutput {
	return o
}

func (o GetBackendServiceOutlierDetectionBaseEjectionTimeOutput) Nanos() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceOutlierDetectionBaseEjectionTime) int { return v.Nanos }).(pulumi.IntOutput)
}

func (o GetBackendServiceOutlierDetectionBaseEjectionTimeOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceOutlierDetectionBaseEjectionTime) int { return v.Seconds }).(pulumi.IntOutput)
}

type GetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput struct{ *pulumi.OutputState }

func (GetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceOutlierDetectionBaseEjectionTime)(nil)).Elem()
}

func (o GetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput) ToGetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput() GetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput {
	return o
}

func (o GetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput) ToGetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutputWithContext(ctx context.Context) GetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput {
	return o
}

func (o GetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput) Index(i pulumi.IntInput) GetBackendServiceOutlierDetectionBaseEjectionTimeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendServiceOutlierDetectionBaseEjectionTime {
		return vs[0].([]GetBackendServiceOutlierDetectionBaseEjectionTime)[vs[1].(int)]
	}).(GetBackendServiceOutlierDetectionBaseEjectionTimeOutput)
}

type GetBackendServiceOutlierDetectionInterval struct {
	Nanos   int `pulumi:"nanos"`
	Seconds int `pulumi:"seconds"`
}

// GetBackendServiceOutlierDetectionIntervalInput is an input type that accepts GetBackendServiceOutlierDetectionIntervalArgs and GetBackendServiceOutlierDetectionIntervalOutput values.
// You can construct a concrete instance of `GetBackendServiceOutlierDetectionIntervalInput` via:
//
// 		 GetBackendServiceOutlierDetectionIntervalArgs{...}
//
type GetBackendServiceOutlierDetectionIntervalInput interface {
	pulumi.Input

	ToGetBackendServiceOutlierDetectionIntervalOutput() GetBackendServiceOutlierDetectionIntervalOutput
	ToGetBackendServiceOutlierDetectionIntervalOutputWithContext(context.Context) GetBackendServiceOutlierDetectionIntervalOutput
}

type GetBackendServiceOutlierDetectionIntervalArgs struct {
	Nanos   pulumi.IntInput `pulumi:"nanos"`
	Seconds pulumi.IntInput `pulumi:"seconds"`
}

func (GetBackendServiceOutlierDetectionIntervalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceOutlierDetectionInterval)(nil)).Elem()
}

func (i GetBackendServiceOutlierDetectionIntervalArgs) ToGetBackendServiceOutlierDetectionIntervalOutput() GetBackendServiceOutlierDetectionIntervalOutput {
	return i.ToGetBackendServiceOutlierDetectionIntervalOutputWithContext(context.Background())
}

func (i GetBackendServiceOutlierDetectionIntervalArgs) ToGetBackendServiceOutlierDetectionIntervalOutputWithContext(ctx context.Context) GetBackendServiceOutlierDetectionIntervalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceOutlierDetectionIntervalOutput)
}

// GetBackendServiceOutlierDetectionIntervalArrayInput is an input type that accepts GetBackendServiceOutlierDetectionIntervalArray and GetBackendServiceOutlierDetectionIntervalArrayOutput values.
// You can construct a concrete instance of `GetBackendServiceOutlierDetectionIntervalArrayInput` via:
//
// 		 GetBackendServiceOutlierDetectionIntervalArray{ GetBackendServiceOutlierDetectionIntervalArgs{...} }
//
type GetBackendServiceOutlierDetectionIntervalArrayInput interface {
	pulumi.Input

	ToGetBackendServiceOutlierDetectionIntervalArrayOutput() GetBackendServiceOutlierDetectionIntervalArrayOutput
	ToGetBackendServiceOutlierDetectionIntervalArrayOutputWithContext(context.Context) GetBackendServiceOutlierDetectionIntervalArrayOutput
}

type GetBackendServiceOutlierDetectionIntervalArray []GetBackendServiceOutlierDetectionIntervalInput

func (GetBackendServiceOutlierDetectionIntervalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceOutlierDetectionInterval)(nil)).Elem()
}

func (i GetBackendServiceOutlierDetectionIntervalArray) ToGetBackendServiceOutlierDetectionIntervalArrayOutput() GetBackendServiceOutlierDetectionIntervalArrayOutput {
	return i.ToGetBackendServiceOutlierDetectionIntervalArrayOutputWithContext(context.Background())
}

func (i GetBackendServiceOutlierDetectionIntervalArray) ToGetBackendServiceOutlierDetectionIntervalArrayOutputWithContext(ctx context.Context) GetBackendServiceOutlierDetectionIntervalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendServiceOutlierDetectionIntervalArrayOutput)
}

type GetBackendServiceOutlierDetectionIntervalOutput struct{ *pulumi.OutputState }

func (GetBackendServiceOutlierDetectionIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendServiceOutlierDetectionInterval)(nil)).Elem()
}

func (o GetBackendServiceOutlierDetectionIntervalOutput) ToGetBackendServiceOutlierDetectionIntervalOutput() GetBackendServiceOutlierDetectionIntervalOutput {
	return o
}

func (o GetBackendServiceOutlierDetectionIntervalOutput) ToGetBackendServiceOutlierDetectionIntervalOutputWithContext(ctx context.Context) GetBackendServiceOutlierDetectionIntervalOutput {
	return o
}

func (o GetBackendServiceOutlierDetectionIntervalOutput) Nanos() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceOutlierDetectionInterval) int { return v.Nanos }).(pulumi.IntOutput)
}

func (o GetBackendServiceOutlierDetectionIntervalOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendServiceOutlierDetectionInterval) int { return v.Seconds }).(pulumi.IntOutput)
}

type GetBackendServiceOutlierDetectionIntervalArrayOutput struct{ *pulumi.OutputState }

func (GetBackendServiceOutlierDetectionIntervalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendServiceOutlierDetectionInterval)(nil)).Elem()
}

func (o GetBackendServiceOutlierDetectionIntervalArrayOutput) ToGetBackendServiceOutlierDetectionIntervalArrayOutput() GetBackendServiceOutlierDetectionIntervalArrayOutput {
	return o
}

func (o GetBackendServiceOutlierDetectionIntervalArrayOutput) ToGetBackendServiceOutlierDetectionIntervalArrayOutputWithContext(ctx context.Context) GetBackendServiceOutlierDetectionIntervalArrayOutput {
	return o
}

func (o GetBackendServiceOutlierDetectionIntervalArrayOutput) Index(i pulumi.IntInput) GetBackendServiceOutlierDetectionIntervalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendServiceOutlierDetectionInterval {
		return vs[0].([]GetBackendServiceOutlierDetectionInterval)[vs[1].(int)]
	}).(GetBackendServiceOutlierDetectionIntervalOutput)
}

type GetInstanceAttachedDisk struct {
	// Name with which the attached disk is accessible
	// under `/dev/disk/by-id/`
	DeviceName              string `pulumi:"deviceName"`
	DiskEncryptionKeyRaw    string `pulumi:"diskEncryptionKeyRaw"`
	DiskEncryptionKeySha256 string `pulumi:"diskEncryptionKeySha256"`
	KmsKeySelfLink          string `pulumi:"kmsKeySelfLink"`
	// Read/write mode for the disk. One of `"READ_ONLY"` or `"READ_WRITE"`.
	Mode string `pulumi:"mode"`
	// The name or selfLink of the disk attached to this instance.
	Source string `pulumi:"source"`
}

// GetInstanceAttachedDiskInput is an input type that accepts GetInstanceAttachedDiskArgs and GetInstanceAttachedDiskOutput values.
// You can construct a concrete instance of `GetInstanceAttachedDiskInput` via:
//
// 		 GetInstanceAttachedDiskArgs{...}
//
type GetInstanceAttachedDiskInput interface {
	pulumi.Input

	ToGetInstanceAttachedDiskOutput() GetInstanceAttachedDiskOutput
	ToGetInstanceAttachedDiskOutputWithContext(context.Context) GetInstanceAttachedDiskOutput
}

type GetInstanceAttachedDiskArgs struct {
	// Name with which the attached disk is accessible
	// under `/dev/disk/by-id/`
	DeviceName              pulumi.StringInput `pulumi:"deviceName"`
	DiskEncryptionKeyRaw    pulumi.StringInput `pulumi:"diskEncryptionKeyRaw"`
	DiskEncryptionKeySha256 pulumi.StringInput `pulumi:"diskEncryptionKeySha256"`
	KmsKeySelfLink          pulumi.StringInput `pulumi:"kmsKeySelfLink"`
	// Read/write mode for the disk. One of `"READ_ONLY"` or `"READ_WRITE"`.
	Mode pulumi.StringInput `pulumi:"mode"`
	// The name or selfLink of the disk attached to this instance.
	Source pulumi.StringInput `pulumi:"source"`
}

func (GetInstanceAttachedDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceAttachedDisk)(nil)).Elem()
}

func (i GetInstanceAttachedDiskArgs) ToGetInstanceAttachedDiskOutput() GetInstanceAttachedDiskOutput {
	return i.ToGetInstanceAttachedDiskOutputWithContext(context.Background())
}

func (i GetInstanceAttachedDiskArgs) ToGetInstanceAttachedDiskOutputWithContext(ctx context.Context) GetInstanceAttachedDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceAttachedDiskOutput)
}

// GetInstanceAttachedDiskArrayInput is an input type that accepts GetInstanceAttachedDiskArray and GetInstanceAttachedDiskArrayOutput values.
// You can construct a concrete instance of `GetInstanceAttachedDiskArrayInput` via:
//
// 		 GetInstanceAttachedDiskArray{ GetInstanceAttachedDiskArgs{...} }
//
type GetInstanceAttachedDiskArrayInput interface {
	pulumi.Input

	ToGetInstanceAttachedDiskArrayOutput() GetInstanceAttachedDiskArrayOutput
	ToGetInstanceAttachedDiskArrayOutputWithContext(context.Context) GetInstanceAttachedDiskArrayOutput
}

type GetInstanceAttachedDiskArray []GetInstanceAttachedDiskInput

func (GetInstanceAttachedDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceAttachedDisk)(nil)).Elem()
}

func (i GetInstanceAttachedDiskArray) ToGetInstanceAttachedDiskArrayOutput() GetInstanceAttachedDiskArrayOutput {
	return i.ToGetInstanceAttachedDiskArrayOutputWithContext(context.Background())
}

func (i GetInstanceAttachedDiskArray) ToGetInstanceAttachedDiskArrayOutputWithContext(ctx context.Context) GetInstanceAttachedDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceAttachedDiskArrayOutput)
}

type GetInstanceAttachedDiskOutput struct{ *pulumi.OutputState }

func (GetInstanceAttachedDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceAttachedDisk)(nil)).Elem()
}

func (o GetInstanceAttachedDiskOutput) ToGetInstanceAttachedDiskOutput() GetInstanceAttachedDiskOutput {
	return o
}

func (o GetInstanceAttachedDiskOutput) ToGetInstanceAttachedDiskOutputWithContext(ctx context.Context) GetInstanceAttachedDiskOutput {
	return o
}

// Name with which the attached disk is accessible
// under `/dev/disk/by-id/`
func (o GetInstanceAttachedDiskOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachedDisk) string { return v.DeviceName }).(pulumi.StringOutput)
}

func (o GetInstanceAttachedDiskOutput) DiskEncryptionKeyRaw() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachedDisk) string { return v.DiskEncryptionKeyRaw }).(pulumi.StringOutput)
}

func (o GetInstanceAttachedDiskOutput) DiskEncryptionKeySha256() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachedDisk) string { return v.DiskEncryptionKeySha256 }).(pulumi.StringOutput)
}

func (o GetInstanceAttachedDiskOutput) KmsKeySelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachedDisk) string { return v.KmsKeySelfLink }).(pulumi.StringOutput)
}

// Read/write mode for the disk. One of `"READ_ONLY"` or `"READ_WRITE"`.
func (o GetInstanceAttachedDiskOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachedDisk) string { return v.Mode }).(pulumi.StringOutput)
}

// The name or selfLink of the disk attached to this instance.
func (o GetInstanceAttachedDiskOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAttachedDisk) string { return v.Source }).(pulumi.StringOutput)
}

type GetInstanceAttachedDiskArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceAttachedDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceAttachedDisk)(nil)).Elem()
}

func (o GetInstanceAttachedDiskArrayOutput) ToGetInstanceAttachedDiskArrayOutput() GetInstanceAttachedDiskArrayOutput {
	return o
}

func (o GetInstanceAttachedDiskArrayOutput) ToGetInstanceAttachedDiskArrayOutputWithContext(ctx context.Context) GetInstanceAttachedDiskArrayOutput {
	return o
}

func (o GetInstanceAttachedDiskArrayOutput) Index(i pulumi.IntInput) GetInstanceAttachedDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceAttachedDisk {
		return vs[0].([]GetInstanceAttachedDisk)[vs[1].(int)]
	}).(GetInstanceAttachedDiskOutput)
}

type GetInstanceBootDisk struct {
	// Whether the disk will be auto-deleted when the instance is deleted.
	AutoDelete bool `pulumi:"autoDelete"`
	// Name with which the attached disk is accessible
	// under `/dev/disk/by-id/`
	DeviceName              string `pulumi:"deviceName"`
	DiskEncryptionKeyRaw    string `pulumi:"diskEncryptionKeyRaw"`
	DiskEncryptionKeySha256 string `pulumi:"diskEncryptionKeySha256"`
	// Parameters with which a disk was created alongside the instance.
	// Structure is documented below.
	InitializeParams []GetInstanceBootDiskInitializeParam `pulumi:"initializeParams"`
	KmsKeySelfLink   string                               `pulumi:"kmsKeySelfLink"`
	// Read/write mode for the disk. One of `"READ_ONLY"` or `"READ_WRITE"`.
	Mode string `pulumi:"mode"`
	// The name or selfLink of the disk attached to this instance.
	Source string `pulumi:"source"`
}

// GetInstanceBootDiskInput is an input type that accepts GetInstanceBootDiskArgs and GetInstanceBootDiskOutput values.
// You can construct a concrete instance of `GetInstanceBootDiskInput` via:
//
// 		 GetInstanceBootDiskArgs{...}
//
type GetInstanceBootDiskInput interface {
	pulumi.Input

	ToGetInstanceBootDiskOutput() GetInstanceBootDiskOutput
	ToGetInstanceBootDiskOutputWithContext(context.Context) GetInstanceBootDiskOutput
}

type GetInstanceBootDiskArgs struct {
	// Whether the disk will be auto-deleted when the instance is deleted.
	AutoDelete pulumi.BoolInput `pulumi:"autoDelete"`
	// Name with which the attached disk is accessible
	// under `/dev/disk/by-id/`
	DeviceName              pulumi.StringInput `pulumi:"deviceName"`
	DiskEncryptionKeyRaw    pulumi.StringInput `pulumi:"diskEncryptionKeyRaw"`
	DiskEncryptionKeySha256 pulumi.StringInput `pulumi:"diskEncryptionKeySha256"`
	// Parameters with which a disk was created alongside the instance.
	// Structure is documented below.
	InitializeParams GetInstanceBootDiskInitializeParamArrayInput `pulumi:"initializeParams"`
	KmsKeySelfLink   pulumi.StringInput                           `pulumi:"kmsKeySelfLink"`
	// Read/write mode for the disk. One of `"READ_ONLY"` or `"READ_WRITE"`.
	Mode pulumi.StringInput `pulumi:"mode"`
	// The name or selfLink of the disk attached to this instance.
	Source pulumi.StringInput `pulumi:"source"`
}

func (GetInstanceBootDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceBootDisk)(nil)).Elem()
}

func (i GetInstanceBootDiskArgs) ToGetInstanceBootDiskOutput() GetInstanceBootDiskOutput {
	return i.ToGetInstanceBootDiskOutputWithContext(context.Background())
}

func (i GetInstanceBootDiskArgs) ToGetInstanceBootDiskOutputWithContext(ctx context.Context) GetInstanceBootDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceBootDiskOutput)
}

// GetInstanceBootDiskArrayInput is an input type that accepts GetInstanceBootDiskArray and GetInstanceBootDiskArrayOutput values.
// You can construct a concrete instance of `GetInstanceBootDiskArrayInput` via:
//
// 		 GetInstanceBootDiskArray{ GetInstanceBootDiskArgs{...} }
//
type GetInstanceBootDiskArrayInput interface {
	pulumi.Input

	ToGetInstanceBootDiskArrayOutput() GetInstanceBootDiskArrayOutput
	ToGetInstanceBootDiskArrayOutputWithContext(context.Context) GetInstanceBootDiskArrayOutput
}

type GetInstanceBootDiskArray []GetInstanceBootDiskInput

func (GetInstanceBootDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceBootDisk)(nil)).Elem()
}

func (i GetInstanceBootDiskArray) ToGetInstanceBootDiskArrayOutput() GetInstanceBootDiskArrayOutput {
	return i.ToGetInstanceBootDiskArrayOutputWithContext(context.Background())
}

func (i GetInstanceBootDiskArray) ToGetInstanceBootDiskArrayOutputWithContext(ctx context.Context) GetInstanceBootDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceBootDiskArrayOutput)
}

type GetInstanceBootDiskOutput struct{ *pulumi.OutputState }

func (GetInstanceBootDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceBootDisk)(nil)).Elem()
}

func (o GetInstanceBootDiskOutput) ToGetInstanceBootDiskOutput() GetInstanceBootDiskOutput {
	return o
}

func (o GetInstanceBootDiskOutput) ToGetInstanceBootDiskOutputWithContext(ctx context.Context) GetInstanceBootDiskOutput {
	return o
}

// Whether the disk will be auto-deleted when the instance is deleted.
func (o GetInstanceBootDiskOutput) AutoDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceBootDisk) bool { return v.AutoDelete }).(pulumi.BoolOutput)
}

// Name with which the attached disk is accessible
// under `/dev/disk/by-id/`
func (o GetInstanceBootDiskOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceBootDisk) string { return v.DeviceName }).(pulumi.StringOutput)
}

func (o GetInstanceBootDiskOutput) DiskEncryptionKeyRaw() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceBootDisk) string { return v.DiskEncryptionKeyRaw }).(pulumi.StringOutput)
}

func (o GetInstanceBootDiskOutput) DiskEncryptionKeySha256() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceBootDisk) string { return v.DiskEncryptionKeySha256 }).(pulumi.StringOutput)
}

// Parameters with which a disk was created alongside the instance.
// Structure is documented below.
func (o GetInstanceBootDiskOutput) InitializeParams() GetInstanceBootDiskInitializeParamArrayOutput {
	return o.ApplyT(func(v GetInstanceBootDisk) []GetInstanceBootDiskInitializeParam { return v.InitializeParams }).(GetInstanceBootDiskInitializeParamArrayOutput)
}

func (o GetInstanceBootDiskOutput) KmsKeySelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceBootDisk) string { return v.KmsKeySelfLink }).(pulumi.StringOutput)
}

// Read/write mode for the disk. One of `"READ_ONLY"` or `"READ_WRITE"`.
func (o GetInstanceBootDiskOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceBootDisk) string { return v.Mode }).(pulumi.StringOutput)
}

// The name or selfLink of the disk attached to this instance.
func (o GetInstanceBootDiskOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceBootDisk) string { return v.Source }).(pulumi.StringOutput)
}

type GetInstanceBootDiskArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceBootDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceBootDisk)(nil)).Elem()
}

func (o GetInstanceBootDiskArrayOutput) ToGetInstanceBootDiskArrayOutput() GetInstanceBootDiskArrayOutput {
	return o
}

func (o GetInstanceBootDiskArrayOutput) ToGetInstanceBootDiskArrayOutputWithContext(ctx context.Context) GetInstanceBootDiskArrayOutput {
	return o
}

func (o GetInstanceBootDiskArrayOutput) Index(i pulumi.IntInput) GetInstanceBootDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceBootDisk {
		return vs[0].([]GetInstanceBootDisk)[vs[1].(int)]
	}).(GetInstanceBootDiskOutput)
}

type GetInstanceBootDiskInitializeParam struct {
	// The image from which this disk was initialised.
	Image string `pulumi:"image"`
	// A set of key/value label pairs assigned to the instance.
	Labels map[string]interface{} `pulumi:"labels"`
	// The size of the image in gigabytes.
	Size int `pulumi:"size"`
	// The accelerator type resource exposed to this instance. E.g. `nvidia-tesla-k80`.
	Type string `pulumi:"type"`
}

// GetInstanceBootDiskInitializeParamInput is an input type that accepts GetInstanceBootDiskInitializeParamArgs and GetInstanceBootDiskInitializeParamOutput values.
// You can construct a concrete instance of `GetInstanceBootDiskInitializeParamInput` via:
//
// 		 GetInstanceBootDiskInitializeParamArgs{...}
//
type GetInstanceBootDiskInitializeParamInput interface {
	pulumi.Input

	ToGetInstanceBootDiskInitializeParamOutput() GetInstanceBootDiskInitializeParamOutput
	ToGetInstanceBootDiskInitializeParamOutputWithContext(context.Context) GetInstanceBootDiskInitializeParamOutput
}

type GetInstanceBootDiskInitializeParamArgs struct {
	// The image from which this disk was initialised.
	Image pulumi.StringInput `pulumi:"image"`
	// A set of key/value label pairs assigned to the instance.
	Labels pulumi.MapInput `pulumi:"labels"`
	// The size of the image in gigabytes.
	Size pulumi.IntInput `pulumi:"size"`
	// The accelerator type resource exposed to this instance. E.g. `nvidia-tesla-k80`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetInstanceBootDiskInitializeParamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceBootDiskInitializeParam)(nil)).Elem()
}

func (i GetInstanceBootDiskInitializeParamArgs) ToGetInstanceBootDiskInitializeParamOutput() GetInstanceBootDiskInitializeParamOutput {
	return i.ToGetInstanceBootDiskInitializeParamOutputWithContext(context.Background())
}

func (i GetInstanceBootDiskInitializeParamArgs) ToGetInstanceBootDiskInitializeParamOutputWithContext(ctx context.Context) GetInstanceBootDiskInitializeParamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceBootDiskInitializeParamOutput)
}

// GetInstanceBootDiskInitializeParamArrayInput is an input type that accepts GetInstanceBootDiskInitializeParamArray and GetInstanceBootDiskInitializeParamArrayOutput values.
// You can construct a concrete instance of `GetInstanceBootDiskInitializeParamArrayInput` via:
//
// 		 GetInstanceBootDiskInitializeParamArray{ GetInstanceBootDiskInitializeParamArgs{...} }
//
type GetInstanceBootDiskInitializeParamArrayInput interface {
	pulumi.Input

	ToGetInstanceBootDiskInitializeParamArrayOutput() GetInstanceBootDiskInitializeParamArrayOutput
	ToGetInstanceBootDiskInitializeParamArrayOutputWithContext(context.Context) GetInstanceBootDiskInitializeParamArrayOutput
}

type GetInstanceBootDiskInitializeParamArray []GetInstanceBootDiskInitializeParamInput

func (GetInstanceBootDiskInitializeParamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceBootDiskInitializeParam)(nil)).Elem()
}

func (i GetInstanceBootDiskInitializeParamArray) ToGetInstanceBootDiskInitializeParamArrayOutput() GetInstanceBootDiskInitializeParamArrayOutput {
	return i.ToGetInstanceBootDiskInitializeParamArrayOutputWithContext(context.Background())
}

func (i GetInstanceBootDiskInitializeParamArray) ToGetInstanceBootDiskInitializeParamArrayOutputWithContext(ctx context.Context) GetInstanceBootDiskInitializeParamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceBootDiskInitializeParamArrayOutput)
}

type GetInstanceBootDiskInitializeParamOutput struct{ *pulumi.OutputState }

func (GetInstanceBootDiskInitializeParamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceBootDiskInitializeParam)(nil)).Elem()
}

func (o GetInstanceBootDiskInitializeParamOutput) ToGetInstanceBootDiskInitializeParamOutput() GetInstanceBootDiskInitializeParamOutput {
	return o
}

func (o GetInstanceBootDiskInitializeParamOutput) ToGetInstanceBootDiskInitializeParamOutputWithContext(ctx context.Context) GetInstanceBootDiskInitializeParamOutput {
	return o
}

// The image from which this disk was initialised.
func (o GetInstanceBootDiskInitializeParamOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceBootDiskInitializeParam) string { return v.Image }).(pulumi.StringOutput)
}

// A set of key/value label pairs assigned to the instance.
func (o GetInstanceBootDiskInitializeParamOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v GetInstanceBootDiskInitializeParam) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

// The size of the image in gigabytes.
func (o GetInstanceBootDiskInitializeParamOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceBootDiskInitializeParam) int { return v.Size }).(pulumi.IntOutput)
}

// The accelerator type resource exposed to this instance. E.g. `nvidia-tesla-k80`.
func (o GetInstanceBootDiskInitializeParamOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceBootDiskInitializeParam) string { return v.Type }).(pulumi.StringOutput)
}

type GetInstanceBootDiskInitializeParamArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceBootDiskInitializeParamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceBootDiskInitializeParam)(nil)).Elem()
}

func (o GetInstanceBootDiskInitializeParamArrayOutput) ToGetInstanceBootDiskInitializeParamArrayOutput() GetInstanceBootDiskInitializeParamArrayOutput {
	return o
}

func (o GetInstanceBootDiskInitializeParamArrayOutput) ToGetInstanceBootDiskInitializeParamArrayOutputWithContext(ctx context.Context) GetInstanceBootDiskInitializeParamArrayOutput {
	return o
}

func (o GetInstanceBootDiskInitializeParamArrayOutput) Index(i pulumi.IntInput) GetInstanceBootDiskInitializeParamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceBootDiskInitializeParam {
		return vs[0].([]GetInstanceBootDiskInitializeParam)[vs[1].(int)]
	}).(GetInstanceBootDiskInitializeParamOutput)
}

type GetInstanceGroupNamedPortType struct {
	// The name of the instance group. Either `name` or `selfLink` must be provided.
	Name string `pulumi:"name"`
	Port int    `pulumi:"port"`
}

// GetInstanceGroupNamedPortTypeInput is an input type that accepts GetInstanceGroupNamedPortTypeArgs and GetInstanceGroupNamedPortTypeOutput values.
// You can construct a concrete instance of `GetInstanceGroupNamedPortTypeInput` via:
//
// 		 GetInstanceGroupNamedPortTypeArgs{...}
//
type GetInstanceGroupNamedPortTypeInput interface {
	pulumi.Input

	ToGetInstanceGroupNamedPortTypeOutput() GetInstanceGroupNamedPortTypeOutput
	ToGetInstanceGroupNamedPortTypeOutputWithContext(context.Context) GetInstanceGroupNamedPortTypeOutput
}

type GetInstanceGroupNamedPortTypeArgs struct {
	// The name of the instance group. Either `name` or `selfLink` must be provided.
	Name pulumi.StringInput `pulumi:"name"`
	Port pulumi.IntInput    `pulumi:"port"`
}

func (GetInstanceGroupNamedPortTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceGroupNamedPortType)(nil)).Elem()
}

func (i GetInstanceGroupNamedPortTypeArgs) ToGetInstanceGroupNamedPortTypeOutput() GetInstanceGroupNamedPortTypeOutput {
	return i.ToGetInstanceGroupNamedPortTypeOutputWithContext(context.Background())
}

func (i GetInstanceGroupNamedPortTypeArgs) ToGetInstanceGroupNamedPortTypeOutputWithContext(ctx context.Context) GetInstanceGroupNamedPortTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceGroupNamedPortTypeOutput)
}

// GetInstanceGroupNamedPortTypeArrayInput is an input type that accepts GetInstanceGroupNamedPortTypeArray and GetInstanceGroupNamedPortTypeArrayOutput values.
// You can construct a concrete instance of `GetInstanceGroupNamedPortTypeArrayInput` via:
//
// 		 GetInstanceGroupNamedPortTypeArray{ GetInstanceGroupNamedPortTypeArgs{...} }
//
type GetInstanceGroupNamedPortTypeArrayInput interface {
	pulumi.Input

	ToGetInstanceGroupNamedPortTypeArrayOutput() GetInstanceGroupNamedPortTypeArrayOutput
	ToGetInstanceGroupNamedPortTypeArrayOutputWithContext(context.Context) GetInstanceGroupNamedPortTypeArrayOutput
}

type GetInstanceGroupNamedPortTypeArray []GetInstanceGroupNamedPortTypeInput

func (GetInstanceGroupNamedPortTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceGroupNamedPortType)(nil)).Elem()
}

func (i GetInstanceGroupNamedPortTypeArray) ToGetInstanceGroupNamedPortTypeArrayOutput() GetInstanceGroupNamedPortTypeArrayOutput {
	return i.ToGetInstanceGroupNamedPortTypeArrayOutputWithContext(context.Background())
}

func (i GetInstanceGroupNamedPortTypeArray) ToGetInstanceGroupNamedPortTypeArrayOutputWithContext(ctx context.Context) GetInstanceGroupNamedPortTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceGroupNamedPortTypeArrayOutput)
}

type GetInstanceGroupNamedPortTypeOutput struct{ *pulumi.OutputState }

func (GetInstanceGroupNamedPortTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceGroupNamedPortType)(nil)).Elem()
}

func (o GetInstanceGroupNamedPortTypeOutput) ToGetInstanceGroupNamedPortTypeOutput() GetInstanceGroupNamedPortTypeOutput {
	return o
}

func (o GetInstanceGroupNamedPortTypeOutput) ToGetInstanceGroupNamedPortTypeOutputWithContext(ctx context.Context) GetInstanceGroupNamedPortTypeOutput {
	return o
}

// The name of the instance group. Either `name` or `selfLink` must be provided.
func (o GetInstanceGroupNamedPortTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceGroupNamedPortType) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetInstanceGroupNamedPortTypeOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceGroupNamedPortType) int { return v.Port }).(pulumi.IntOutput)
}

type GetInstanceGroupNamedPortTypeArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceGroupNamedPortTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceGroupNamedPortType)(nil)).Elem()
}

func (o GetInstanceGroupNamedPortTypeArrayOutput) ToGetInstanceGroupNamedPortTypeArrayOutput() GetInstanceGroupNamedPortTypeArrayOutput {
	return o
}

func (o GetInstanceGroupNamedPortTypeArrayOutput) ToGetInstanceGroupNamedPortTypeArrayOutputWithContext(ctx context.Context) GetInstanceGroupNamedPortTypeArrayOutput {
	return o
}

func (o GetInstanceGroupNamedPortTypeArrayOutput) Index(i pulumi.IntInput) GetInstanceGroupNamedPortTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceGroupNamedPortType {
		return vs[0].([]GetInstanceGroupNamedPortType)[vs[1].(int)]
	}).(GetInstanceGroupNamedPortTypeOutput)
}

type GetInstanceGuestAccelerator struct {
	// The number of the guest accelerator cards exposed to this instance.
	Count int `pulumi:"count"`
	// The accelerator type resource exposed to this instance. E.g. `nvidia-tesla-k80`.
	Type string `pulumi:"type"`
}

// GetInstanceGuestAcceleratorInput is an input type that accepts GetInstanceGuestAcceleratorArgs and GetInstanceGuestAcceleratorOutput values.
// You can construct a concrete instance of `GetInstanceGuestAcceleratorInput` via:
//
// 		 GetInstanceGuestAcceleratorArgs{...}
//
type GetInstanceGuestAcceleratorInput interface {
	pulumi.Input

	ToGetInstanceGuestAcceleratorOutput() GetInstanceGuestAcceleratorOutput
	ToGetInstanceGuestAcceleratorOutputWithContext(context.Context) GetInstanceGuestAcceleratorOutput
}

type GetInstanceGuestAcceleratorArgs struct {
	// The number of the guest accelerator cards exposed to this instance.
	Count pulumi.IntInput `pulumi:"count"`
	// The accelerator type resource exposed to this instance. E.g. `nvidia-tesla-k80`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetInstanceGuestAcceleratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceGuestAccelerator)(nil)).Elem()
}

func (i GetInstanceGuestAcceleratorArgs) ToGetInstanceGuestAcceleratorOutput() GetInstanceGuestAcceleratorOutput {
	return i.ToGetInstanceGuestAcceleratorOutputWithContext(context.Background())
}

func (i GetInstanceGuestAcceleratorArgs) ToGetInstanceGuestAcceleratorOutputWithContext(ctx context.Context) GetInstanceGuestAcceleratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceGuestAcceleratorOutput)
}

// GetInstanceGuestAcceleratorArrayInput is an input type that accepts GetInstanceGuestAcceleratorArray and GetInstanceGuestAcceleratorArrayOutput values.
// You can construct a concrete instance of `GetInstanceGuestAcceleratorArrayInput` via:
//
// 		 GetInstanceGuestAcceleratorArray{ GetInstanceGuestAcceleratorArgs{...} }
//
type GetInstanceGuestAcceleratorArrayInput interface {
	pulumi.Input

	ToGetInstanceGuestAcceleratorArrayOutput() GetInstanceGuestAcceleratorArrayOutput
	ToGetInstanceGuestAcceleratorArrayOutputWithContext(context.Context) GetInstanceGuestAcceleratorArrayOutput
}

type GetInstanceGuestAcceleratorArray []GetInstanceGuestAcceleratorInput

func (GetInstanceGuestAcceleratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceGuestAccelerator)(nil)).Elem()
}

func (i GetInstanceGuestAcceleratorArray) ToGetInstanceGuestAcceleratorArrayOutput() GetInstanceGuestAcceleratorArrayOutput {
	return i.ToGetInstanceGuestAcceleratorArrayOutputWithContext(context.Background())
}

func (i GetInstanceGuestAcceleratorArray) ToGetInstanceGuestAcceleratorArrayOutputWithContext(ctx context.Context) GetInstanceGuestAcceleratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceGuestAcceleratorArrayOutput)
}

type GetInstanceGuestAcceleratorOutput struct{ *pulumi.OutputState }

func (GetInstanceGuestAcceleratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceGuestAccelerator)(nil)).Elem()
}

func (o GetInstanceGuestAcceleratorOutput) ToGetInstanceGuestAcceleratorOutput() GetInstanceGuestAcceleratorOutput {
	return o
}

func (o GetInstanceGuestAcceleratorOutput) ToGetInstanceGuestAcceleratorOutputWithContext(ctx context.Context) GetInstanceGuestAcceleratorOutput {
	return o
}

// The number of the guest accelerator cards exposed to this instance.
func (o GetInstanceGuestAcceleratorOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceGuestAccelerator) int { return v.Count }).(pulumi.IntOutput)
}

// The accelerator type resource exposed to this instance. E.g. `nvidia-tesla-k80`.
func (o GetInstanceGuestAcceleratorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceGuestAccelerator) string { return v.Type }).(pulumi.StringOutput)
}

type GetInstanceGuestAcceleratorArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceGuestAcceleratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceGuestAccelerator)(nil)).Elem()
}

func (o GetInstanceGuestAcceleratorArrayOutput) ToGetInstanceGuestAcceleratorArrayOutput() GetInstanceGuestAcceleratorArrayOutput {
	return o
}

func (o GetInstanceGuestAcceleratorArrayOutput) ToGetInstanceGuestAcceleratorArrayOutputWithContext(ctx context.Context) GetInstanceGuestAcceleratorArrayOutput {
	return o
}

func (o GetInstanceGuestAcceleratorArrayOutput) Index(i pulumi.IntInput) GetInstanceGuestAcceleratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceGuestAccelerator {
		return vs[0].([]GetInstanceGuestAccelerator)[vs[1].(int)]
	}).(GetInstanceGuestAcceleratorOutput)
}

type GetInstanceNetworkInterface struct {
	// Access configurations, i.e. IPs via which this
	// instance can be accessed via the Internet. Structure documented below.
	AccessConfigs []GetInstanceNetworkInterfaceAccessConfig `pulumi:"accessConfigs"`
	// An array of alias IP ranges for this network interface. Structure documented below.
	AliasIpRanges []GetInstanceNetworkInterfaceAliasIpRange `pulumi:"aliasIpRanges"`
	// The name of the instance. One of `name` or `selfLink` must be provided.
	Name string `pulumi:"name"`
	// The name or selfLink of the network attached to this interface.
	Network string `pulumi:"network"`
	// The private IP address assigned to the instance.
	NetworkIp string `pulumi:"networkIp"`
	// The name or selfLink of the subnetwork attached to this interface.
	Subnetwork string `pulumi:"subnetwork"`
	// The project in which the subnetwork belongs.
	SubnetworkProject string `pulumi:"subnetworkProject"`
}

// GetInstanceNetworkInterfaceInput is an input type that accepts GetInstanceNetworkInterfaceArgs and GetInstanceNetworkInterfaceOutput values.
// You can construct a concrete instance of `GetInstanceNetworkInterfaceInput` via:
//
// 		 GetInstanceNetworkInterfaceArgs{...}
//
type GetInstanceNetworkInterfaceInput interface {
	pulumi.Input

	ToGetInstanceNetworkInterfaceOutput() GetInstanceNetworkInterfaceOutput
	ToGetInstanceNetworkInterfaceOutputWithContext(context.Context) GetInstanceNetworkInterfaceOutput
}

type GetInstanceNetworkInterfaceArgs struct {
	// Access configurations, i.e. IPs via which this
	// instance can be accessed via the Internet. Structure documented below.
	AccessConfigs GetInstanceNetworkInterfaceAccessConfigArrayInput `pulumi:"accessConfigs"`
	// An array of alias IP ranges for this network interface. Structure documented below.
	AliasIpRanges GetInstanceNetworkInterfaceAliasIpRangeArrayInput `pulumi:"aliasIpRanges"`
	// The name of the instance. One of `name` or `selfLink` must be provided.
	Name pulumi.StringInput `pulumi:"name"`
	// The name or selfLink of the network attached to this interface.
	Network pulumi.StringInput `pulumi:"network"`
	// The private IP address assigned to the instance.
	NetworkIp pulumi.StringInput `pulumi:"networkIp"`
	// The name or selfLink of the subnetwork attached to this interface.
	Subnetwork pulumi.StringInput `pulumi:"subnetwork"`
	// The project in which the subnetwork belongs.
	SubnetworkProject pulumi.StringInput `pulumi:"subnetworkProject"`
}

func (GetInstanceNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceNetworkInterface)(nil)).Elem()
}

func (i GetInstanceNetworkInterfaceArgs) ToGetInstanceNetworkInterfaceOutput() GetInstanceNetworkInterfaceOutput {
	return i.ToGetInstanceNetworkInterfaceOutputWithContext(context.Background())
}

func (i GetInstanceNetworkInterfaceArgs) ToGetInstanceNetworkInterfaceOutputWithContext(ctx context.Context) GetInstanceNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceNetworkInterfaceOutput)
}

// GetInstanceNetworkInterfaceArrayInput is an input type that accepts GetInstanceNetworkInterfaceArray and GetInstanceNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `GetInstanceNetworkInterfaceArrayInput` via:
//
// 		 GetInstanceNetworkInterfaceArray{ GetInstanceNetworkInterfaceArgs{...} }
//
type GetInstanceNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToGetInstanceNetworkInterfaceArrayOutput() GetInstanceNetworkInterfaceArrayOutput
	ToGetInstanceNetworkInterfaceArrayOutputWithContext(context.Context) GetInstanceNetworkInterfaceArrayOutput
}

type GetInstanceNetworkInterfaceArray []GetInstanceNetworkInterfaceInput

func (GetInstanceNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceNetworkInterface)(nil)).Elem()
}

func (i GetInstanceNetworkInterfaceArray) ToGetInstanceNetworkInterfaceArrayOutput() GetInstanceNetworkInterfaceArrayOutput {
	return i.ToGetInstanceNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i GetInstanceNetworkInterfaceArray) ToGetInstanceNetworkInterfaceArrayOutputWithContext(ctx context.Context) GetInstanceNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceNetworkInterfaceArrayOutput)
}

type GetInstanceNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (GetInstanceNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceNetworkInterface)(nil)).Elem()
}

func (o GetInstanceNetworkInterfaceOutput) ToGetInstanceNetworkInterfaceOutput() GetInstanceNetworkInterfaceOutput {
	return o
}

func (o GetInstanceNetworkInterfaceOutput) ToGetInstanceNetworkInterfaceOutputWithContext(ctx context.Context) GetInstanceNetworkInterfaceOutput {
	return o
}

// Access configurations, i.e. IPs via which this
// instance can be accessed via the Internet. Structure documented below.
func (o GetInstanceNetworkInterfaceOutput) AccessConfigs() GetInstanceNetworkInterfaceAccessConfigArrayOutput {
	return o.ApplyT(func(v GetInstanceNetworkInterface) []GetInstanceNetworkInterfaceAccessConfig { return v.AccessConfigs }).(GetInstanceNetworkInterfaceAccessConfigArrayOutput)
}

// An array of alias IP ranges for this network interface. Structure documented below.
func (o GetInstanceNetworkInterfaceOutput) AliasIpRanges() GetInstanceNetworkInterfaceAliasIpRangeArrayOutput {
	return o.ApplyT(func(v GetInstanceNetworkInterface) []GetInstanceNetworkInterfaceAliasIpRange { return v.AliasIpRanges }).(GetInstanceNetworkInterfaceAliasIpRangeArrayOutput)
}

// The name of the instance. One of `name` or `selfLink` must be provided.
func (o GetInstanceNetworkInterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetworkInterface) string { return v.Name }).(pulumi.StringOutput)
}

// The name or selfLink of the network attached to this interface.
func (o GetInstanceNetworkInterfaceOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetworkInterface) string { return v.Network }).(pulumi.StringOutput)
}

// The private IP address assigned to the instance.
func (o GetInstanceNetworkInterfaceOutput) NetworkIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetworkInterface) string { return v.NetworkIp }).(pulumi.StringOutput)
}

// The name or selfLink of the subnetwork attached to this interface.
func (o GetInstanceNetworkInterfaceOutput) Subnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetworkInterface) string { return v.Subnetwork }).(pulumi.StringOutput)
}

// The project in which the subnetwork belongs.
func (o GetInstanceNetworkInterfaceOutput) SubnetworkProject() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetworkInterface) string { return v.SubnetworkProject }).(pulumi.StringOutput)
}

type GetInstanceNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceNetworkInterface)(nil)).Elem()
}

func (o GetInstanceNetworkInterfaceArrayOutput) ToGetInstanceNetworkInterfaceArrayOutput() GetInstanceNetworkInterfaceArrayOutput {
	return o
}

func (o GetInstanceNetworkInterfaceArrayOutput) ToGetInstanceNetworkInterfaceArrayOutputWithContext(ctx context.Context) GetInstanceNetworkInterfaceArrayOutput {
	return o
}

func (o GetInstanceNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) GetInstanceNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceNetworkInterface {
		return vs[0].([]GetInstanceNetworkInterface)[vs[1].(int)]
	}).(GetInstanceNetworkInterfaceOutput)
}

type GetInstanceNetworkInterfaceAccessConfig struct {
	// The IP address that is be 1:1 mapped to the instance's
	// network ip.
	NatIp string `pulumi:"natIp"`
	// The [networking tier][network-tier] used for configuring this instance. One of `PREMIUM` or `STANDARD`.
	NetworkTier string `pulumi:"networkTier"`
	// The DNS domain name for the public PTR record.
	PublicPtrDomainName string `pulumi:"publicPtrDomainName"`
}

// GetInstanceNetworkInterfaceAccessConfigInput is an input type that accepts GetInstanceNetworkInterfaceAccessConfigArgs and GetInstanceNetworkInterfaceAccessConfigOutput values.
// You can construct a concrete instance of `GetInstanceNetworkInterfaceAccessConfigInput` via:
//
// 		 GetInstanceNetworkInterfaceAccessConfigArgs{...}
//
type GetInstanceNetworkInterfaceAccessConfigInput interface {
	pulumi.Input

	ToGetInstanceNetworkInterfaceAccessConfigOutput() GetInstanceNetworkInterfaceAccessConfigOutput
	ToGetInstanceNetworkInterfaceAccessConfigOutputWithContext(context.Context) GetInstanceNetworkInterfaceAccessConfigOutput
}

type GetInstanceNetworkInterfaceAccessConfigArgs struct {
	// The IP address that is be 1:1 mapped to the instance's
	// network ip.
	NatIp pulumi.StringInput `pulumi:"natIp"`
	// The [networking tier][network-tier] used for configuring this instance. One of `PREMIUM` or `STANDARD`.
	NetworkTier pulumi.StringInput `pulumi:"networkTier"`
	// The DNS domain name for the public PTR record.
	PublicPtrDomainName pulumi.StringInput `pulumi:"publicPtrDomainName"`
}

func (GetInstanceNetworkInterfaceAccessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceNetworkInterfaceAccessConfig)(nil)).Elem()
}

func (i GetInstanceNetworkInterfaceAccessConfigArgs) ToGetInstanceNetworkInterfaceAccessConfigOutput() GetInstanceNetworkInterfaceAccessConfigOutput {
	return i.ToGetInstanceNetworkInterfaceAccessConfigOutputWithContext(context.Background())
}

func (i GetInstanceNetworkInterfaceAccessConfigArgs) ToGetInstanceNetworkInterfaceAccessConfigOutputWithContext(ctx context.Context) GetInstanceNetworkInterfaceAccessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceNetworkInterfaceAccessConfigOutput)
}

// GetInstanceNetworkInterfaceAccessConfigArrayInput is an input type that accepts GetInstanceNetworkInterfaceAccessConfigArray and GetInstanceNetworkInterfaceAccessConfigArrayOutput values.
// You can construct a concrete instance of `GetInstanceNetworkInterfaceAccessConfigArrayInput` via:
//
// 		 GetInstanceNetworkInterfaceAccessConfigArray{ GetInstanceNetworkInterfaceAccessConfigArgs{...} }
//
type GetInstanceNetworkInterfaceAccessConfigArrayInput interface {
	pulumi.Input

	ToGetInstanceNetworkInterfaceAccessConfigArrayOutput() GetInstanceNetworkInterfaceAccessConfigArrayOutput
	ToGetInstanceNetworkInterfaceAccessConfigArrayOutputWithContext(context.Context) GetInstanceNetworkInterfaceAccessConfigArrayOutput
}

type GetInstanceNetworkInterfaceAccessConfigArray []GetInstanceNetworkInterfaceAccessConfigInput

func (GetInstanceNetworkInterfaceAccessConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceNetworkInterfaceAccessConfig)(nil)).Elem()
}

func (i GetInstanceNetworkInterfaceAccessConfigArray) ToGetInstanceNetworkInterfaceAccessConfigArrayOutput() GetInstanceNetworkInterfaceAccessConfigArrayOutput {
	return i.ToGetInstanceNetworkInterfaceAccessConfigArrayOutputWithContext(context.Background())
}

func (i GetInstanceNetworkInterfaceAccessConfigArray) ToGetInstanceNetworkInterfaceAccessConfigArrayOutputWithContext(ctx context.Context) GetInstanceNetworkInterfaceAccessConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceNetworkInterfaceAccessConfigArrayOutput)
}

type GetInstanceNetworkInterfaceAccessConfigOutput struct{ *pulumi.OutputState }

func (GetInstanceNetworkInterfaceAccessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceNetworkInterfaceAccessConfig)(nil)).Elem()
}

func (o GetInstanceNetworkInterfaceAccessConfigOutput) ToGetInstanceNetworkInterfaceAccessConfigOutput() GetInstanceNetworkInterfaceAccessConfigOutput {
	return o
}

func (o GetInstanceNetworkInterfaceAccessConfigOutput) ToGetInstanceNetworkInterfaceAccessConfigOutputWithContext(ctx context.Context) GetInstanceNetworkInterfaceAccessConfigOutput {
	return o
}

// The IP address that is be 1:1 mapped to the instance's
// network ip.
func (o GetInstanceNetworkInterfaceAccessConfigOutput) NatIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetworkInterfaceAccessConfig) string { return v.NatIp }).(pulumi.StringOutput)
}

// The [networking tier][network-tier] used for configuring this instance. One of `PREMIUM` or `STANDARD`.
func (o GetInstanceNetworkInterfaceAccessConfigOutput) NetworkTier() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetworkInterfaceAccessConfig) string { return v.NetworkTier }).(pulumi.StringOutput)
}

// The DNS domain name for the public PTR record.
func (o GetInstanceNetworkInterfaceAccessConfigOutput) PublicPtrDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetworkInterfaceAccessConfig) string { return v.PublicPtrDomainName }).(pulumi.StringOutput)
}

type GetInstanceNetworkInterfaceAccessConfigArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceNetworkInterfaceAccessConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceNetworkInterfaceAccessConfig)(nil)).Elem()
}

func (o GetInstanceNetworkInterfaceAccessConfigArrayOutput) ToGetInstanceNetworkInterfaceAccessConfigArrayOutput() GetInstanceNetworkInterfaceAccessConfigArrayOutput {
	return o
}

func (o GetInstanceNetworkInterfaceAccessConfigArrayOutput) ToGetInstanceNetworkInterfaceAccessConfigArrayOutputWithContext(ctx context.Context) GetInstanceNetworkInterfaceAccessConfigArrayOutput {
	return o
}

func (o GetInstanceNetworkInterfaceAccessConfigArrayOutput) Index(i pulumi.IntInput) GetInstanceNetworkInterfaceAccessConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceNetworkInterfaceAccessConfig {
		return vs[0].([]GetInstanceNetworkInterfaceAccessConfig)[vs[1].(int)]
	}).(GetInstanceNetworkInterfaceAccessConfigOutput)
}

type GetInstanceNetworkInterfaceAliasIpRange struct {
	// The IP CIDR range represented by this alias IP range.
	IpCidrRange string `pulumi:"ipCidrRange"`
	// The subnetwork secondary range name specifying
	// the secondary range from which to allocate the IP CIDR range for this alias IP
	// range.
	SubnetworkRangeName string `pulumi:"subnetworkRangeName"`
}

// GetInstanceNetworkInterfaceAliasIpRangeInput is an input type that accepts GetInstanceNetworkInterfaceAliasIpRangeArgs and GetInstanceNetworkInterfaceAliasIpRangeOutput values.
// You can construct a concrete instance of `GetInstanceNetworkInterfaceAliasIpRangeInput` via:
//
// 		 GetInstanceNetworkInterfaceAliasIpRangeArgs{...}
//
type GetInstanceNetworkInterfaceAliasIpRangeInput interface {
	pulumi.Input

	ToGetInstanceNetworkInterfaceAliasIpRangeOutput() GetInstanceNetworkInterfaceAliasIpRangeOutput
	ToGetInstanceNetworkInterfaceAliasIpRangeOutputWithContext(context.Context) GetInstanceNetworkInterfaceAliasIpRangeOutput
}

type GetInstanceNetworkInterfaceAliasIpRangeArgs struct {
	// The IP CIDR range represented by this alias IP range.
	IpCidrRange pulumi.StringInput `pulumi:"ipCidrRange"`
	// The subnetwork secondary range name specifying
	// the secondary range from which to allocate the IP CIDR range for this alias IP
	// range.
	SubnetworkRangeName pulumi.StringInput `pulumi:"subnetworkRangeName"`
}

func (GetInstanceNetworkInterfaceAliasIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceNetworkInterfaceAliasIpRange)(nil)).Elem()
}

func (i GetInstanceNetworkInterfaceAliasIpRangeArgs) ToGetInstanceNetworkInterfaceAliasIpRangeOutput() GetInstanceNetworkInterfaceAliasIpRangeOutput {
	return i.ToGetInstanceNetworkInterfaceAliasIpRangeOutputWithContext(context.Background())
}

func (i GetInstanceNetworkInterfaceAliasIpRangeArgs) ToGetInstanceNetworkInterfaceAliasIpRangeOutputWithContext(ctx context.Context) GetInstanceNetworkInterfaceAliasIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceNetworkInterfaceAliasIpRangeOutput)
}

// GetInstanceNetworkInterfaceAliasIpRangeArrayInput is an input type that accepts GetInstanceNetworkInterfaceAliasIpRangeArray and GetInstanceNetworkInterfaceAliasIpRangeArrayOutput values.
// You can construct a concrete instance of `GetInstanceNetworkInterfaceAliasIpRangeArrayInput` via:
//
// 		 GetInstanceNetworkInterfaceAliasIpRangeArray{ GetInstanceNetworkInterfaceAliasIpRangeArgs{...} }
//
type GetInstanceNetworkInterfaceAliasIpRangeArrayInput interface {
	pulumi.Input

	ToGetInstanceNetworkInterfaceAliasIpRangeArrayOutput() GetInstanceNetworkInterfaceAliasIpRangeArrayOutput
	ToGetInstanceNetworkInterfaceAliasIpRangeArrayOutputWithContext(context.Context) GetInstanceNetworkInterfaceAliasIpRangeArrayOutput
}

type GetInstanceNetworkInterfaceAliasIpRangeArray []GetInstanceNetworkInterfaceAliasIpRangeInput

func (GetInstanceNetworkInterfaceAliasIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceNetworkInterfaceAliasIpRange)(nil)).Elem()
}

func (i GetInstanceNetworkInterfaceAliasIpRangeArray) ToGetInstanceNetworkInterfaceAliasIpRangeArrayOutput() GetInstanceNetworkInterfaceAliasIpRangeArrayOutput {
	return i.ToGetInstanceNetworkInterfaceAliasIpRangeArrayOutputWithContext(context.Background())
}

func (i GetInstanceNetworkInterfaceAliasIpRangeArray) ToGetInstanceNetworkInterfaceAliasIpRangeArrayOutputWithContext(ctx context.Context) GetInstanceNetworkInterfaceAliasIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceNetworkInterfaceAliasIpRangeArrayOutput)
}

type GetInstanceNetworkInterfaceAliasIpRangeOutput struct{ *pulumi.OutputState }

func (GetInstanceNetworkInterfaceAliasIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceNetworkInterfaceAliasIpRange)(nil)).Elem()
}

func (o GetInstanceNetworkInterfaceAliasIpRangeOutput) ToGetInstanceNetworkInterfaceAliasIpRangeOutput() GetInstanceNetworkInterfaceAliasIpRangeOutput {
	return o
}

func (o GetInstanceNetworkInterfaceAliasIpRangeOutput) ToGetInstanceNetworkInterfaceAliasIpRangeOutputWithContext(ctx context.Context) GetInstanceNetworkInterfaceAliasIpRangeOutput {
	return o
}

// The IP CIDR range represented by this alias IP range.
func (o GetInstanceNetworkInterfaceAliasIpRangeOutput) IpCidrRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetworkInterfaceAliasIpRange) string { return v.IpCidrRange }).(pulumi.StringOutput)
}

// The subnetwork secondary range name specifying
// the secondary range from which to allocate the IP CIDR range for this alias IP
// range.
func (o GetInstanceNetworkInterfaceAliasIpRangeOutput) SubnetworkRangeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetworkInterfaceAliasIpRange) string { return v.SubnetworkRangeName }).(pulumi.StringOutput)
}

type GetInstanceNetworkInterfaceAliasIpRangeArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceNetworkInterfaceAliasIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceNetworkInterfaceAliasIpRange)(nil)).Elem()
}

func (o GetInstanceNetworkInterfaceAliasIpRangeArrayOutput) ToGetInstanceNetworkInterfaceAliasIpRangeArrayOutput() GetInstanceNetworkInterfaceAliasIpRangeArrayOutput {
	return o
}

func (o GetInstanceNetworkInterfaceAliasIpRangeArrayOutput) ToGetInstanceNetworkInterfaceAliasIpRangeArrayOutputWithContext(ctx context.Context) GetInstanceNetworkInterfaceAliasIpRangeArrayOutput {
	return o
}

func (o GetInstanceNetworkInterfaceAliasIpRangeArrayOutput) Index(i pulumi.IntInput) GetInstanceNetworkInterfaceAliasIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceNetworkInterfaceAliasIpRange {
		return vs[0].([]GetInstanceNetworkInterfaceAliasIpRange)[vs[1].(int)]
	}).(GetInstanceNetworkInterfaceAliasIpRangeOutput)
}

type GetInstanceScheduling struct {
	// Specifies if the instance should be
	// restarted if it was terminated by Compute Engine (not a user).
	AutomaticRestart bool                                `pulumi:"automaticRestart"`
	NodeAffinities   []GetInstanceSchedulingNodeAffinity `pulumi:"nodeAffinities"`
	// Describes maintenance behavior for the
	// instance. One of `MIGRATE` or `TERMINATE`, for more info, read
	// [here](https://cloud.google.com/compute/docs/instances/setting-instance-scheduling-options)
	OnHostMaintenance string `pulumi:"onHostMaintenance"`
	// Whether the instance is preemptible.
	Preemptible bool `pulumi:"preemptible"`
}

// GetInstanceSchedulingInput is an input type that accepts GetInstanceSchedulingArgs and GetInstanceSchedulingOutput values.
// You can construct a concrete instance of `GetInstanceSchedulingInput` via:
//
// 		 GetInstanceSchedulingArgs{...}
//
type GetInstanceSchedulingInput interface {
	pulumi.Input

	ToGetInstanceSchedulingOutput() GetInstanceSchedulingOutput
	ToGetInstanceSchedulingOutputWithContext(context.Context) GetInstanceSchedulingOutput
}

type GetInstanceSchedulingArgs struct {
	// Specifies if the instance should be
	// restarted if it was terminated by Compute Engine (not a user).
	AutomaticRestart pulumi.BoolInput                            `pulumi:"automaticRestart"`
	NodeAffinities   GetInstanceSchedulingNodeAffinityArrayInput `pulumi:"nodeAffinities"`
	// Describes maintenance behavior for the
	// instance. One of `MIGRATE` or `TERMINATE`, for more info, read
	// [here](https://cloud.google.com/compute/docs/instances/setting-instance-scheduling-options)
	OnHostMaintenance pulumi.StringInput `pulumi:"onHostMaintenance"`
	// Whether the instance is preemptible.
	Preemptible pulumi.BoolInput `pulumi:"preemptible"`
}

func (GetInstanceSchedulingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceScheduling)(nil)).Elem()
}

func (i GetInstanceSchedulingArgs) ToGetInstanceSchedulingOutput() GetInstanceSchedulingOutput {
	return i.ToGetInstanceSchedulingOutputWithContext(context.Background())
}

func (i GetInstanceSchedulingArgs) ToGetInstanceSchedulingOutputWithContext(ctx context.Context) GetInstanceSchedulingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceSchedulingOutput)
}

// GetInstanceSchedulingArrayInput is an input type that accepts GetInstanceSchedulingArray and GetInstanceSchedulingArrayOutput values.
// You can construct a concrete instance of `GetInstanceSchedulingArrayInput` via:
//
// 		 GetInstanceSchedulingArray{ GetInstanceSchedulingArgs{...} }
//
type GetInstanceSchedulingArrayInput interface {
	pulumi.Input

	ToGetInstanceSchedulingArrayOutput() GetInstanceSchedulingArrayOutput
	ToGetInstanceSchedulingArrayOutputWithContext(context.Context) GetInstanceSchedulingArrayOutput
}

type GetInstanceSchedulingArray []GetInstanceSchedulingInput

func (GetInstanceSchedulingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceScheduling)(nil)).Elem()
}

func (i GetInstanceSchedulingArray) ToGetInstanceSchedulingArrayOutput() GetInstanceSchedulingArrayOutput {
	return i.ToGetInstanceSchedulingArrayOutputWithContext(context.Background())
}

func (i GetInstanceSchedulingArray) ToGetInstanceSchedulingArrayOutputWithContext(ctx context.Context) GetInstanceSchedulingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceSchedulingArrayOutput)
}

type GetInstanceSchedulingOutput struct{ *pulumi.OutputState }

func (GetInstanceSchedulingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceScheduling)(nil)).Elem()
}

func (o GetInstanceSchedulingOutput) ToGetInstanceSchedulingOutput() GetInstanceSchedulingOutput {
	return o
}

func (o GetInstanceSchedulingOutput) ToGetInstanceSchedulingOutputWithContext(ctx context.Context) GetInstanceSchedulingOutput {
	return o
}

// Specifies if the instance should be
// restarted if it was terminated by Compute Engine (not a user).
func (o GetInstanceSchedulingOutput) AutomaticRestart() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceScheduling) bool { return v.AutomaticRestart }).(pulumi.BoolOutput)
}

func (o GetInstanceSchedulingOutput) NodeAffinities() GetInstanceSchedulingNodeAffinityArrayOutput {
	return o.ApplyT(func(v GetInstanceScheduling) []GetInstanceSchedulingNodeAffinity { return v.NodeAffinities }).(GetInstanceSchedulingNodeAffinityArrayOutput)
}

// Describes maintenance behavior for the
// instance. One of `MIGRATE` or `TERMINATE`, for more info, read
// [here](https://cloud.google.com/compute/docs/instances/setting-instance-scheduling-options)
func (o GetInstanceSchedulingOutput) OnHostMaintenance() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceScheduling) string { return v.OnHostMaintenance }).(pulumi.StringOutput)
}

// Whether the instance is preemptible.
func (o GetInstanceSchedulingOutput) Preemptible() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceScheduling) bool { return v.Preemptible }).(pulumi.BoolOutput)
}

type GetInstanceSchedulingArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceSchedulingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceScheduling)(nil)).Elem()
}

func (o GetInstanceSchedulingArrayOutput) ToGetInstanceSchedulingArrayOutput() GetInstanceSchedulingArrayOutput {
	return o
}

func (o GetInstanceSchedulingArrayOutput) ToGetInstanceSchedulingArrayOutputWithContext(ctx context.Context) GetInstanceSchedulingArrayOutput {
	return o
}

func (o GetInstanceSchedulingArrayOutput) Index(i pulumi.IntInput) GetInstanceSchedulingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceScheduling {
		return vs[0].([]GetInstanceScheduling)[vs[1].(int)]
	}).(GetInstanceSchedulingOutput)
}

type GetInstanceSchedulingNodeAffinity struct {
	Key      string   `pulumi:"key"`
	Operator string   `pulumi:"operator"`
	Values   []string `pulumi:"values"`
}

// GetInstanceSchedulingNodeAffinityInput is an input type that accepts GetInstanceSchedulingNodeAffinityArgs and GetInstanceSchedulingNodeAffinityOutput values.
// You can construct a concrete instance of `GetInstanceSchedulingNodeAffinityInput` via:
//
// 		 GetInstanceSchedulingNodeAffinityArgs{...}
//
type GetInstanceSchedulingNodeAffinityInput interface {
	pulumi.Input

	ToGetInstanceSchedulingNodeAffinityOutput() GetInstanceSchedulingNodeAffinityOutput
	ToGetInstanceSchedulingNodeAffinityOutputWithContext(context.Context) GetInstanceSchedulingNodeAffinityOutput
}

type GetInstanceSchedulingNodeAffinityArgs struct {
	Key      pulumi.StringInput      `pulumi:"key"`
	Operator pulumi.StringInput      `pulumi:"operator"`
	Values   pulumi.StringArrayInput `pulumi:"values"`
}

func (GetInstanceSchedulingNodeAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceSchedulingNodeAffinity)(nil)).Elem()
}

func (i GetInstanceSchedulingNodeAffinityArgs) ToGetInstanceSchedulingNodeAffinityOutput() GetInstanceSchedulingNodeAffinityOutput {
	return i.ToGetInstanceSchedulingNodeAffinityOutputWithContext(context.Background())
}

func (i GetInstanceSchedulingNodeAffinityArgs) ToGetInstanceSchedulingNodeAffinityOutputWithContext(ctx context.Context) GetInstanceSchedulingNodeAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceSchedulingNodeAffinityOutput)
}

// GetInstanceSchedulingNodeAffinityArrayInput is an input type that accepts GetInstanceSchedulingNodeAffinityArray and GetInstanceSchedulingNodeAffinityArrayOutput values.
// You can construct a concrete instance of `GetInstanceSchedulingNodeAffinityArrayInput` via:
//
// 		 GetInstanceSchedulingNodeAffinityArray{ GetInstanceSchedulingNodeAffinityArgs{...} }
//
type GetInstanceSchedulingNodeAffinityArrayInput interface {
	pulumi.Input

	ToGetInstanceSchedulingNodeAffinityArrayOutput() GetInstanceSchedulingNodeAffinityArrayOutput
	ToGetInstanceSchedulingNodeAffinityArrayOutputWithContext(context.Context) GetInstanceSchedulingNodeAffinityArrayOutput
}

type GetInstanceSchedulingNodeAffinityArray []GetInstanceSchedulingNodeAffinityInput

func (GetInstanceSchedulingNodeAffinityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceSchedulingNodeAffinity)(nil)).Elem()
}

func (i GetInstanceSchedulingNodeAffinityArray) ToGetInstanceSchedulingNodeAffinityArrayOutput() GetInstanceSchedulingNodeAffinityArrayOutput {
	return i.ToGetInstanceSchedulingNodeAffinityArrayOutputWithContext(context.Background())
}

func (i GetInstanceSchedulingNodeAffinityArray) ToGetInstanceSchedulingNodeAffinityArrayOutputWithContext(ctx context.Context) GetInstanceSchedulingNodeAffinityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceSchedulingNodeAffinityArrayOutput)
}

type GetInstanceSchedulingNodeAffinityOutput struct{ *pulumi.OutputState }

func (GetInstanceSchedulingNodeAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceSchedulingNodeAffinity)(nil)).Elem()
}

func (o GetInstanceSchedulingNodeAffinityOutput) ToGetInstanceSchedulingNodeAffinityOutput() GetInstanceSchedulingNodeAffinityOutput {
	return o
}

func (o GetInstanceSchedulingNodeAffinityOutput) ToGetInstanceSchedulingNodeAffinityOutputWithContext(ctx context.Context) GetInstanceSchedulingNodeAffinityOutput {
	return o
}

func (o GetInstanceSchedulingNodeAffinityOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSchedulingNodeAffinity) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetInstanceSchedulingNodeAffinityOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSchedulingNodeAffinity) string { return v.Operator }).(pulumi.StringOutput)
}

func (o GetInstanceSchedulingNodeAffinityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceSchedulingNodeAffinity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetInstanceSchedulingNodeAffinityArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceSchedulingNodeAffinityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceSchedulingNodeAffinity)(nil)).Elem()
}

func (o GetInstanceSchedulingNodeAffinityArrayOutput) ToGetInstanceSchedulingNodeAffinityArrayOutput() GetInstanceSchedulingNodeAffinityArrayOutput {
	return o
}

func (o GetInstanceSchedulingNodeAffinityArrayOutput) ToGetInstanceSchedulingNodeAffinityArrayOutputWithContext(ctx context.Context) GetInstanceSchedulingNodeAffinityArrayOutput {
	return o
}

func (o GetInstanceSchedulingNodeAffinityArrayOutput) Index(i pulumi.IntInput) GetInstanceSchedulingNodeAffinityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceSchedulingNodeAffinity {
		return vs[0].([]GetInstanceSchedulingNodeAffinity)[vs[1].(int)]
	}).(GetInstanceSchedulingNodeAffinityOutput)
}

type GetInstanceScratchDisk struct {
	// The disk interface used for attaching this disk. One of `SCSI` or `NVME`.
	Interface string `pulumi:"interface"`
}

// GetInstanceScratchDiskInput is an input type that accepts GetInstanceScratchDiskArgs and GetInstanceScratchDiskOutput values.
// You can construct a concrete instance of `GetInstanceScratchDiskInput` via:
//
// 		 GetInstanceScratchDiskArgs{...}
//
type GetInstanceScratchDiskInput interface {
	pulumi.Input

	ToGetInstanceScratchDiskOutput() GetInstanceScratchDiskOutput
	ToGetInstanceScratchDiskOutputWithContext(context.Context) GetInstanceScratchDiskOutput
}

type GetInstanceScratchDiskArgs struct {
	// The disk interface used for attaching this disk. One of `SCSI` or `NVME`.
	Interface pulumi.StringInput `pulumi:"interface"`
}

func (GetInstanceScratchDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceScratchDisk)(nil)).Elem()
}

func (i GetInstanceScratchDiskArgs) ToGetInstanceScratchDiskOutput() GetInstanceScratchDiskOutput {
	return i.ToGetInstanceScratchDiskOutputWithContext(context.Background())
}

func (i GetInstanceScratchDiskArgs) ToGetInstanceScratchDiskOutputWithContext(ctx context.Context) GetInstanceScratchDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceScratchDiskOutput)
}

// GetInstanceScratchDiskArrayInput is an input type that accepts GetInstanceScratchDiskArray and GetInstanceScratchDiskArrayOutput values.
// You can construct a concrete instance of `GetInstanceScratchDiskArrayInput` via:
//
// 		 GetInstanceScratchDiskArray{ GetInstanceScratchDiskArgs{...} }
//
type GetInstanceScratchDiskArrayInput interface {
	pulumi.Input

	ToGetInstanceScratchDiskArrayOutput() GetInstanceScratchDiskArrayOutput
	ToGetInstanceScratchDiskArrayOutputWithContext(context.Context) GetInstanceScratchDiskArrayOutput
}

type GetInstanceScratchDiskArray []GetInstanceScratchDiskInput

func (GetInstanceScratchDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceScratchDisk)(nil)).Elem()
}

func (i GetInstanceScratchDiskArray) ToGetInstanceScratchDiskArrayOutput() GetInstanceScratchDiskArrayOutput {
	return i.ToGetInstanceScratchDiskArrayOutputWithContext(context.Background())
}

func (i GetInstanceScratchDiskArray) ToGetInstanceScratchDiskArrayOutputWithContext(ctx context.Context) GetInstanceScratchDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceScratchDiskArrayOutput)
}

type GetInstanceScratchDiskOutput struct{ *pulumi.OutputState }

func (GetInstanceScratchDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceScratchDisk)(nil)).Elem()
}

func (o GetInstanceScratchDiskOutput) ToGetInstanceScratchDiskOutput() GetInstanceScratchDiskOutput {
	return o
}

func (o GetInstanceScratchDiskOutput) ToGetInstanceScratchDiskOutputWithContext(ctx context.Context) GetInstanceScratchDiskOutput {
	return o
}

// The disk interface used for attaching this disk. One of `SCSI` or `NVME`.
func (o GetInstanceScratchDiskOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceScratchDisk) string { return v.Interface }).(pulumi.StringOutput)
}

type GetInstanceScratchDiskArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceScratchDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceScratchDisk)(nil)).Elem()
}

func (o GetInstanceScratchDiskArrayOutput) ToGetInstanceScratchDiskArrayOutput() GetInstanceScratchDiskArrayOutput {
	return o
}

func (o GetInstanceScratchDiskArrayOutput) ToGetInstanceScratchDiskArrayOutputWithContext(ctx context.Context) GetInstanceScratchDiskArrayOutput {
	return o
}

func (o GetInstanceScratchDiskArrayOutput) Index(i pulumi.IntInput) GetInstanceScratchDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceScratchDisk {
		return vs[0].([]GetInstanceScratchDisk)[vs[1].(int)]
	}).(GetInstanceScratchDiskOutput)
}

type GetInstanceServiceAccount struct {
	// The service account e-mail address.
	Email string `pulumi:"email"`
	// A list of service scopes.
	Scopes []string `pulumi:"scopes"`
}

// GetInstanceServiceAccountInput is an input type that accepts GetInstanceServiceAccountArgs and GetInstanceServiceAccountOutput values.
// You can construct a concrete instance of `GetInstanceServiceAccountInput` via:
//
// 		 GetInstanceServiceAccountArgs{...}
//
type GetInstanceServiceAccountInput interface {
	pulumi.Input

	ToGetInstanceServiceAccountOutput() GetInstanceServiceAccountOutput
	ToGetInstanceServiceAccountOutputWithContext(context.Context) GetInstanceServiceAccountOutput
}

type GetInstanceServiceAccountArgs struct {
	// The service account e-mail address.
	Email pulumi.StringInput `pulumi:"email"`
	// A list of service scopes.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (GetInstanceServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceServiceAccount)(nil)).Elem()
}

func (i GetInstanceServiceAccountArgs) ToGetInstanceServiceAccountOutput() GetInstanceServiceAccountOutput {
	return i.ToGetInstanceServiceAccountOutputWithContext(context.Background())
}

func (i GetInstanceServiceAccountArgs) ToGetInstanceServiceAccountOutputWithContext(ctx context.Context) GetInstanceServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceServiceAccountOutput)
}

// GetInstanceServiceAccountArrayInput is an input type that accepts GetInstanceServiceAccountArray and GetInstanceServiceAccountArrayOutput values.
// You can construct a concrete instance of `GetInstanceServiceAccountArrayInput` via:
//
// 		 GetInstanceServiceAccountArray{ GetInstanceServiceAccountArgs{...} }
//
type GetInstanceServiceAccountArrayInput interface {
	pulumi.Input

	ToGetInstanceServiceAccountArrayOutput() GetInstanceServiceAccountArrayOutput
	ToGetInstanceServiceAccountArrayOutputWithContext(context.Context) GetInstanceServiceAccountArrayOutput
}

type GetInstanceServiceAccountArray []GetInstanceServiceAccountInput

func (GetInstanceServiceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceServiceAccount)(nil)).Elem()
}

func (i GetInstanceServiceAccountArray) ToGetInstanceServiceAccountArrayOutput() GetInstanceServiceAccountArrayOutput {
	return i.ToGetInstanceServiceAccountArrayOutputWithContext(context.Background())
}

func (i GetInstanceServiceAccountArray) ToGetInstanceServiceAccountArrayOutputWithContext(ctx context.Context) GetInstanceServiceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceServiceAccountArrayOutput)
}

type GetInstanceServiceAccountOutput struct{ *pulumi.OutputState }

func (GetInstanceServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceServiceAccount)(nil)).Elem()
}

func (o GetInstanceServiceAccountOutput) ToGetInstanceServiceAccountOutput() GetInstanceServiceAccountOutput {
	return o
}

func (o GetInstanceServiceAccountOutput) ToGetInstanceServiceAccountOutputWithContext(ctx context.Context) GetInstanceServiceAccountOutput {
	return o
}

// The service account e-mail address.
func (o GetInstanceServiceAccountOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceServiceAccount) string { return v.Email }).(pulumi.StringOutput)
}

// A list of service scopes.
func (o GetInstanceServiceAccountOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceServiceAccount) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type GetInstanceServiceAccountArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceServiceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceServiceAccount)(nil)).Elem()
}

func (o GetInstanceServiceAccountArrayOutput) ToGetInstanceServiceAccountArrayOutput() GetInstanceServiceAccountArrayOutput {
	return o
}

func (o GetInstanceServiceAccountArrayOutput) ToGetInstanceServiceAccountArrayOutputWithContext(ctx context.Context) GetInstanceServiceAccountArrayOutput {
	return o
}

func (o GetInstanceServiceAccountArrayOutput) Index(i pulumi.IntInput) GetInstanceServiceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceServiceAccount {
		return vs[0].([]GetInstanceServiceAccount)[vs[1].(int)]
	}).(GetInstanceServiceAccountOutput)
}

type GetInstanceShieldedInstanceConfig struct {
	EnableIntegrityMonitoring bool `pulumi:"enableIntegrityMonitoring"`
	EnableSecureBoot          bool `pulumi:"enableSecureBoot"`
	EnableVtpm                bool `pulumi:"enableVtpm"`
}

// GetInstanceShieldedInstanceConfigInput is an input type that accepts GetInstanceShieldedInstanceConfigArgs and GetInstanceShieldedInstanceConfigOutput values.
// You can construct a concrete instance of `GetInstanceShieldedInstanceConfigInput` via:
//
// 		 GetInstanceShieldedInstanceConfigArgs{...}
//
type GetInstanceShieldedInstanceConfigInput interface {
	pulumi.Input

	ToGetInstanceShieldedInstanceConfigOutput() GetInstanceShieldedInstanceConfigOutput
	ToGetInstanceShieldedInstanceConfigOutputWithContext(context.Context) GetInstanceShieldedInstanceConfigOutput
}

type GetInstanceShieldedInstanceConfigArgs struct {
	EnableIntegrityMonitoring pulumi.BoolInput `pulumi:"enableIntegrityMonitoring"`
	EnableSecureBoot          pulumi.BoolInput `pulumi:"enableSecureBoot"`
	EnableVtpm                pulumi.BoolInput `pulumi:"enableVtpm"`
}

func (GetInstanceShieldedInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceShieldedInstanceConfig)(nil)).Elem()
}

func (i GetInstanceShieldedInstanceConfigArgs) ToGetInstanceShieldedInstanceConfigOutput() GetInstanceShieldedInstanceConfigOutput {
	return i.ToGetInstanceShieldedInstanceConfigOutputWithContext(context.Background())
}

func (i GetInstanceShieldedInstanceConfigArgs) ToGetInstanceShieldedInstanceConfigOutputWithContext(ctx context.Context) GetInstanceShieldedInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceShieldedInstanceConfigOutput)
}

// GetInstanceShieldedInstanceConfigArrayInput is an input type that accepts GetInstanceShieldedInstanceConfigArray and GetInstanceShieldedInstanceConfigArrayOutput values.
// You can construct a concrete instance of `GetInstanceShieldedInstanceConfigArrayInput` via:
//
// 		 GetInstanceShieldedInstanceConfigArray{ GetInstanceShieldedInstanceConfigArgs{...} }
//
type GetInstanceShieldedInstanceConfigArrayInput interface {
	pulumi.Input

	ToGetInstanceShieldedInstanceConfigArrayOutput() GetInstanceShieldedInstanceConfigArrayOutput
	ToGetInstanceShieldedInstanceConfigArrayOutputWithContext(context.Context) GetInstanceShieldedInstanceConfigArrayOutput
}

type GetInstanceShieldedInstanceConfigArray []GetInstanceShieldedInstanceConfigInput

func (GetInstanceShieldedInstanceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceShieldedInstanceConfig)(nil)).Elem()
}

func (i GetInstanceShieldedInstanceConfigArray) ToGetInstanceShieldedInstanceConfigArrayOutput() GetInstanceShieldedInstanceConfigArrayOutput {
	return i.ToGetInstanceShieldedInstanceConfigArrayOutputWithContext(context.Background())
}

func (i GetInstanceShieldedInstanceConfigArray) ToGetInstanceShieldedInstanceConfigArrayOutputWithContext(ctx context.Context) GetInstanceShieldedInstanceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceShieldedInstanceConfigArrayOutput)
}

type GetInstanceShieldedInstanceConfigOutput struct{ *pulumi.OutputState }

func (GetInstanceShieldedInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceShieldedInstanceConfig)(nil)).Elem()
}

func (o GetInstanceShieldedInstanceConfigOutput) ToGetInstanceShieldedInstanceConfigOutput() GetInstanceShieldedInstanceConfigOutput {
	return o
}

func (o GetInstanceShieldedInstanceConfigOutput) ToGetInstanceShieldedInstanceConfigOutputWithContext(ctx context.Context) GetInstanceShieldedInstanceConfigOutput {
	return o
}

func (o GetInstanceShieldedInstanceConfigOutput) EnableIntegrityMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceShieldedInstanceConfig) bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolOutput)
}

func (o GetInstanceShieldedInstanceConfigOutput) EnableSecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceShieldedInstanceConfig) bool { return v.EnableSecureBoot }).(pulumi.BoolOutput)
}

func (o GetInstanceShieldedInstanceConfigOutput) EnableVtpm() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceShieldedInstanceConfig) bool { return v.EnableVtpm }).(pulumi.BoolOutput)
}

type GetInstanceShieldedInstanceConfigArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceShieldedInstanceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceShieldedInstanceConfig)(nil)).Elem()
}

func (o GetInstanceShieldedInstanceConfigArrayOutput) ToGetInstanceShieldedInstanceConfigArrayOutput() GetInstanceShieldedInstanceConfigArrayOutput {
	return o
}

func (o GetInstanceShieldedInstanceConfigArrayOutput) ToGetInstanceShieldedInstanceConfigArrayOutputWithContext(ctx context.Context) GetInstanceShieldedInstanceConfigArrayOutput {
	return o
}

func (o GetInstanceShieldedInstanceConfigArrayOutput) Index(i pulumi.IntInput) GetInstanceShieldedInstanceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceShieldedInstanceConfig {
		return vs[0].([]GetInstanceShieldedInstanceConfig)[vs[1].(int)]
	}).(GetInstanceShieldedInstanceConfigOutput)
}

type GetRegionInstanceGroupInstance struct {
	// URL to the instance.
	Instance string `pulumi:"instance"`
	// List of named ports in the group, as a list of resources, each containing:
	NamedPorts []GetRegionInstanceGroupInstanceNamedPort `pulumi:"namedPorts"`
	// String description of current state of the instance.
	Status string `pulumi:"status"`
}

// GetRegionInstanceGroupInstanceInput is an input type that accepts GetRegionInstanceGroupInstanceArgs and GetRegionInstanceGroupInstanceOutput values.
// You can construct a concrete instance of `GetRegionInstanceGroupInstanceInput` via:
//
// 		 GetRegionInstanceGroupInstanceArgs{...}
//
type GetRegionInstanceGroupInstanceInput interface {
	pulumi.Input

	ToGetRegionInstanceGroupInstanceOutput() GetRegionInstanceGroupInstanceOutput
	ToGetRegionInstanceGroupInstanceOutputWithContext(context.Context) GetRegionInstanceGroupInstanceOutput
}

type GetRegionInstanceGroupInstanceArgs struct {
	// URL to the instance.
	Instance pulumi.StringInput `pulumi:"instance"`
	// List of named ports in the group, as a list of resources, each containing:
	NamedPorts GetRegionInstanceGroupInstanceNamedPortArrayInput `pulumi:"namedPorts"`
	// String description of current state of the instance.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetRegionInstanceGroupInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionInstanceGroupInstance)(nil)).Elem()
}

func (i GetRegionInstanceGroupInstanceArgs) ToGetRegionInstanceGroupInstanceOutput() GetRegionInstanceGroupInstanceOutput {
	return i.ToGetRegionInstanceGroupInstanceOutputWithContext(context.Background())
}

func (i GetRegionInstanceGroupInstanceArgs) ToGetRegionInstanceGroupInstanceOutputWithContext(ctx context.Context) GetRegionInstanceGroupInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionInstanceGroupInstanceOutput)
}

// GetRegionInstanceGroupInstanceArrayInput is an input type that accepts GetRegionInstanceGroupInstanceArray and GetRegionInstanceGroupInstanceArrayOutput values.
// You can construct a concrete instance of `GetRegionInstanceGroupInstanceArrayInput` via:
//
// 		 GetRegionInstanceGroupInstanceArray{ GetRegionInstanceGroupInstanceArgs{...} }
//
type GetRegionInstanceGroupInstanceArrayInput interface {
	pulumi.Input

	ToGetRegionInstanceGroupInstanceArrayOutput() GetRegionInstanceGroupInstanceArrayOutput
	ToGetRegionInstanceGroupInstanceArrayOutputWithContext(context.Context) GetRegionInstanceGroupInstanceArrayOutput
}

type GetRegionInstanceGroupInstanceArray []GetRegionInstanceGroupInstanceInput

func (GetRegionInstanceGroupInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionInstanceGroupInstance)(nil)).Elem()
}

func (i GetRegionInstanceGroupInstanceArray) ToGetRegionInstanceGroupInstanceArrayOutput() GetRegionInstanceGroupInstanceArrayOutput {
	return i.ToGetRegionInstanceGroupInstanceArrayOutputWithContext(context.Background())
}

func (i GetRegionInstanceGroupInstanceArray) ToGetRegionInstanceGroupInstanceArrayOutputWithContext(ctx context.Context) GetRegionInstanceGroupInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionInstanceGroupInstanceArrayOutput)
}

type GetRegionInstanceGroupInstanceOutput struct{ *pulumi.OutputState }

func (GetRegionInstanceGroupInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionInstanceGroupInstance)(nil)).Elem()
}

func (o GetRegionInstanceGroupInstanceOutput) ToGetRegionInstanceGroupInstanceOutput() GetRegionInstanceGroupInstanceOutput {
	return o
}

func (o GetRegionInstanceGroupInstanceOutput) ToGetRegionInstanceGroupInstanceOutputWithContext(ctx context.Context) GetRegionInstanceGroupInstanceOutput {
	return o
}

// URL to the instance.
func (o GetRegionInstanceGroupInstanceOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionInstanceGroupInstance) string { return v.Instance }).(pulumi.StringOutput)
}

// List of named ports in the group, as a list of resources, each containing:
func (o GetRegionInstanceGroupInstanceOutput) NamedPorts() GetRegionInstanceGroupInstanceNamedPortArrayOutput {
	return o.ApplyT(func(v GetRegionInstanceGroupInstance) []GetRegionInstanceGroupInstanceNamedPort { return v.NamedPorts }).(GetRegionInstanceGroupInstanceNamedPortArrayOutput)
}

// String description of current state of the instance.
func (o GetRegionInstanceGroupInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionInstanceGroupInstance) string { return v.Status }).(pulumi.StringOutput)
}

type GetRegionInstanceGroupInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetRegionInstanceGroupInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionInstanceGroupInstance)(nil)).Elem()
}

func (o GetRegionInstanceGroupInstanceArrayOutput) ToGetRegionInstanceGroupInstanceArrayOutput() GetRegionInstanceGroupInstanceArrayOutput {
	return o
}

func (o GetRegionInstanceGroupInstanceArrayOutput) ToGetRegionInstanceGroupInstanceArrayOutputWithContext(ctx context.Context) GetRegionInstanceGroupInstanceArrayOutput {
	return o
}

func (o GetRegionInstanceGroupInstanceArrayOutput) Index(i pulumi.IntInput) GetRegionInstanceGroupInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionInstanceGroupInstance {
		return vs[0].([]GetRegionInstanceGroupInstance)[vs[1].(int)]
	}).(GetRegionInstanceGroupInstanceOutput)
}

type GetRegionInstanceGroupInstanceNamedPort struct {
	// The name of the instance group.  One of `name` or `selfLink` must be provided.
	Name string `pulumi:"name"`
	// Integer port number
	Port int `pulumi:"port"`
}

// GetRegionInstanceGroupInstanceNamedPortInput is an input type that accepts GetRegionInstanceGroupInstanceNamedPortArgs and GetRegionInstanceGroupInstanceNamedPortOutput values.
// You can construct a concrete instance of `GetRegionInstanceGroupInstanceNamedPortInput` via:
//
// 		 GetRegionInstanceGroupInstanceNamedPortArgs{...}
//
type GetRegionInstanceGroupInstanceNamedPortInput interface {
	pulumi.Input

	ToGetRegionInstanceGroupInstanceNamedPortOutput() GetRegionInstanceGroupInstanceNamedPortOutput
	ToGetRegionInstanceGroupInstanceNamedPortOutputWithContext(context.Context) GetRegionInstanceGroupInstanceNamedPortOutput
}

type GetRegionInstanceGroupInstanceNamedPortArgs struct {
	// The name of the instance group.  One of `name` or `selfLink` must be provided.
	Name pulumi.StringInput `pulumi:"name"`
	// Integer port number
	Port pulumi.IntInput `pulumi:"port"`
}

func (GetRegionInstanceGroupInstanceNamedPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionInstanceGroupInstanceNamedPort)(nil)).Elem()
}

func (i GetRegionInstanceGroupInstanceNamedPortArgs) ToGetRegionInstanceGroupInstanceNamedPortOutput() GetRegionInstanceGroupInstanceNamedPortOutput {
	return i.ToGetRegionInstanceGroupInstanceNamedPortOutputWithContext(context.Background())
}

func (i GetRegionInstanceGroupInstanceNamedPortArgs) ToGetRegionInstanceGroupInstanceNamedPortOutputWithContext(ctx context.Context) GetRegionInstanceGroupInstanceNamedPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionInstanceGroupInstanceNamedPortOutput)
}

// GetRegionInstanceGroupInstanceNamedPortArrayInput is an input type that accepts GetRegionInstanceGroupInstanceNamedPortArray and GetRegionInstanceGroupInstanceNamedPortArrayOutput values.
// You can construct a concrete instance of `GetRegionInstanceGroupInstanceNamedPortArrayInput` via:
//
// 		 GetRegionInstanceGroupInstanceNamedPortArray{ GetRegionInstanceGroupInstanceNamedPortArgs{...} }
//
type GetRegionInstanceGroupInstanceNamedPortArrayInput interface {
	pulumi.Input

	ToGetRegionInstanceGroupInstanceNamedPortArrayOutput() GetRegionInstanceGroupInstanceNamedPortArrayOutput
	ToGetRegionInstanceGroupInstanceNamedPortArrayOutputWithContext(context.Context) GetRegionInstanceGroupInstanceNamedPortArrayOutput
}

type GetRegionInstanceGroupInstanceNamedPortArray []GetRegionInstanceGroupInstanceNamedPortInput

func (GetRegionInstanceGroupInstanceNamedPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionInstanceGroupInstanceNamedPort)(nil)).Elem()
}

func (i GetRegionInstanceGroupInstanceNamedPortArray) ToGetRegionInstanceGroupInstanceNamedPortArrayOutput() GetRegionInstanceGroupInstanceNamedPortArrayOutput {
	return i.ToGetRegionInstanceGroupInstanceNamedPortArrayOutputWithContext(context.Background())
}

func (i GetRegionInstanceGroupInstanceNamedPortArray) ToGetRegionInstanceGroupInstanceNamedPortArrayOutputWithContext(ctx context.Context) GetRegionInstanceGroupInstanceNamedPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionInstanceGroupInstanceNamedPortArrayOutput)
}

type GetRegionInstanceGroupInstanceNamedPortOutput struct{ *pulumi.OutputState }

func (GetRegionInstanceGroupInstanceNamedPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionInstanceGroupInstanceNamedPort)(nil)).Elem()
}

func (o GetRegionInstanceGroupInstanceNamedPortOutput) ToGetRegionInstanceGroupInstanceNamedPortOutput() GetRegionInstanceGroupInstanceNamedPortOutput {
	return o
}

func (o GetRegionInstanceGroupInstanceNamedPortOutput) ToGetRegionInstanceGroupInstanceNamedPortOutputWithContext(ctx context.Context) GetRegionInstanceGroupInstanceNamedPortOutput {
	return o
}

// The name of the instance group.  One of `name` or `selfLink` must be provided.
func (o GetRegionInstanceGroupInstanceNamedPortOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionInstanceGroupInstanceNamedPort) string { return v.Name }).(pulumi.StringOutput)
}

// Integer port number
func (o GetRegionInstanceGroupInstanceNamedPortOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetRegionInstanceGroupInstanceNamedPort) int { return v.Port }).(pulumi.IntOutput)
}

type GetRegionInstanceGroupInstanceNamedPortArrayOutput struct{ *pulumi.OutputState }

func (GetRegionInstanceGroupInstanceNamedPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionInstanceGroupInstanceNamedPort)(nil)).Elem()
}

func (o GetRegionInstanceGroupInstanceNamedPortArrayOutput) ToGetRegionInstanceGroupInstanceNamedPortArrayOutput() GetRegionInstanceGroupInstanceNamedPortArrayOutput {
	return o
}

func (o GetRegionInstanceGroupInstanceNamedPortArrayOutput) ToGetRegionInstanceGroupInstanceNamedPortArrayOutputWithContext(ctx context.Context) GetRegionInstanceGroupInstanceNamedPortArrayOutput {
	return o
}

func (o GetRegionInstanceGroupInstanceNamedPortArrayOutput) Index(i pulumi.IntInput) GetRegionInstanceGroupInstanceNamedPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionInstanceGroupInstanceNamedPort {
		return vs[0].([]GetRegionInstanceGroupInstanceNamedPort)[vs[1].(int)]
	}).(GetRegionInstanceGroupInstanceNamedPortOutput)
}

type GetRouterBgp struct {
	AdvertiseMode      string                          `pulumi:"advertiseMode"`
	AdvertisedGroups   []string                        `pulumi:"advertisedGroups"`
	AdvertisedIpRanges []GetRouterBgpAdvertisedIpRange `pulumi:"advertisedIpRanges"`
	Asn                int                             `pulumi:"asn"`
}

// GetRouterBgpInput is an input type that accepts GetRouterBgpArgs and GetRouterBgpOutput values.
// You can construct a concrete instance of `GetRouterBgpInput` via:
//
// 		 GetRouterBgpArgs{...}
//
type GetRouterBgpInput interface {
	pulumi.Input

	ToGetRouterBgpOutput() GetRouterBgpOutput
	ToGetRouterBgpOutputWithContext(context.Context) GetRouterBgpOutput
}

type GetRouterBgpArgs struct {
	AdvertiseMode      pulumi.StringInput                      `pulumi:"advertiseMode"`
	AdvertisedGroups   pulumi.StringArrayInput                 `pulumi:"advertisedGroups"`
	AdvertisedIpRanges GetRouterBgpAdvertisedIpRangeArrayInput `pulumi:"advertisedIpRanges"`
	Asn                pulumi.IntInput                         `pulumi:"asn"`
}

func (GetRouterBgpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouterBgp)(nil)).Elem()
}

func (i GetRouterBgpArgs) ToGetRouterBgpOutput() GetRouterBgpOutput {
	return i.ToGetRouterBgpOutputWithContext(context.Background())
}

func (i GetRouterBgpArgs) ToGetRouterBgpOutputWithContext(ctx context.Context) GetRouterBgpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouterBgpOutput)
}

// GetRouterBgpArrayInput is an input type that accepts GetRouterBgpArray and GetRouterBgpArrayOutput values.
// You can construct a concrete instance of `GetRouterBgpArrayInput` via:
//
// 		 GetRouterBgpArray{ GetRouterBgpArgs{...} }
//
type GetRouterBgpArrayInput interface {
	pulumi.Input

	ToGetRouterBgpArrayOutput() GetRouterBgpArrayOutput
	ToGetRouterBgpArrayOutputWithContext(context.Context) GetRouterBgpArrayOutput
}

type GetRouterBgpArray []GetRouterBgpInput

func (GetRouterBgpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouterBgp)(nil)).Elem()
}

func (i GetRouterBgpArray) ToGetRouterBgpArrayOutput() GetRouterBgpArrayOutput {
	return i.ToGetRouterBgpArrayOutputWithContext(context.Background())
}

func (i GetRouterBgpArray) ToGetRouterBgpArrayOutputWithContext(ctx context.Context) GetRouterBgpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouterBgpArrayOutput)
}

type GetRouterBgpOutput struct{ *pulumi.OutputState }

func (GetRouterBgpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouterBgp)(nil)).Elem()
}

func (o GetRouterBgpOutput) ToGetRouterBgpOutput() GetRouterBgpOutput {
	return o
}

func (o GetRouterBgpOutput) ToGetRouterBgpOutputWithContext(ctx context.Context) GetRouterBgpOutput {
	return o
}

func (o GetRouterBgpOutput) AdvertiseMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterBgp) string { return v.AdvertiseMode }).(pulumi.StringOutput)
}

func (o GetRouterBgpOutput) AdvertisedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouterBgp) []string { return v.AdvertisedGroups }).(pulumi.StringArrayOutput)
}

func (o GetRouterBgpOutput) AdvertisedIpRanges() GetRouterBgpAdvertisedIpRangeArrayOutput {
	return o.ApplyT(func(v GetRouterBgp) []GetRouterBgpAdvertisedIpRange { return v.AdvertisedIpRanges }).(GetRouterBgpAdvertisedIpRangeArrayOutput)
}

func (o GetRouterBgpOutput) Asn() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouterBgp) int { return v.Asn }).(pulumi.IntOutput)
}

type GetRouterBgpArrayOutput struct{ *pulumi.OutputState }

func (GetRouterBgpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouterBgp)(nil)).Elem()
}

func (o GetRouterBgpArrayOutput) ToGetRouterBgpArrayOutput() GetRouterBgpArrayOutput {
	return o
}

func (o GetRouterBgpArrayOutput) ToGetRouterBgpArrayOutputWithContext(ctx context.Context) GetRouterBgpArrayOutput {
	return o
}

func (o GetRouterBgpArrayOutput) Index(i pulumi.IntInput) GetRouterBgpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouterBgp {
		return vs[0].([]GetRouterBgp)[vs[1].(int)]
	}).(GetRouterBgpOutput)
}

type GetRouterBgpAdvertisedIpRange struct {
	Description string `pulumi:"description"`
	Range       string `pulumi:"range"`
}

// GetRouterBgpAdvertisedIpRangeInput is an input type that accepts GetRouterBgpAdvertisedIpRangeArgs and GetRouterBgpAdvertisedIpRangeOutput values.
// You can construct a concrete instance of `GetRouterBgpAdvertisedIpRangeInput` via:
//
// 		 GetRouterBgpAdvertisedIpRangeArgs{...}
//
type GetRouterBgpAdvertisedIpRangeInput interface {
	pulumi.Input

	ToGetRouterBgpAdvertisedIpRangeOutput() GetRouterBgpAdvertisedIpRangeOutput
	ToGetRouterBgpAdvertisedIpRangeOutputWithContext(context.Context) GetRouterBgpAdvertisedIpRangeOutput
}

type GetRouterBgpAdvertisedIpRangeArgs struct {
	Description pulumi.StringInput `pulumi:"description"`
	Range       pulumi.StringInput `pulumi:"range"`
}

func (GetRouterBgpAdvertisedIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouterBgpAdvertisedIpRange)(nil)).Elem()
}

func (i GetRouterBgpAdvertisedIpRangeArgs) ToGetRouterBgpAdvertisedIpRangeOutput() GetRouterBgpAdvertisedIpRangeOutput {
	return i.ToGetRouterBgpAdvertisedIpRangeOutputWithContext(context.Background())
}

func (i GetRouterBgpAdvertisedIpRangeArgs) ToGetRouterBgpAdvertisedIpRangeOutputWithContext(ctx context.Context) GetRouterBgpAdvertisedIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouterBgpAdvertisedIpRangeOutput)
}

// GetRouterBgpAdvertisedIpRangeArrayInput is an input type that accepts GetRouterBgpAdvertisedIpRangeArray and GetRouterBgpAdvertisedIpRangeArrayOutput values.
// You can construct a concrete instance of `GetRouterBgpAdvertisedIpRangeArrayInput` via:
//
// 		 GetRouterBgpAdvertisedIpRangeArray{ GetRouterBgpAdvertisedIpRangeArgs{...} }
//
type GetRouterBgpAdvertisedIpRangeArrayInput interface {
	pulumi.Input

	ToGetRouterBgpAdvertisedIpRangeArrayOutput() GetRouterBgpAdvertisedIpRangeArrayOutput
	ToGetRouterBgpAdvertisedIpRangeArrayOutputWithContext(context.Context) GetRouterBgpAdvertisedIpRangeArrayOutput
}

type GetRouterBgpAdvertisedIpRangeArray []GetRouterBgpAdvertisedIpRangeInput

func (GetRouterBgpAdvertisedIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouterBgpAdvertisedIpRange)(nil)).Elem()
}

func (i GetRouterBgpAdvertisedIpRangeArray) ToGetRouterBgpAdvertisedIpRangeArrayOutput() GetRouterBgpAdvertisedIpRangeArrayOutput {
	return i.ToGetRouterBgpAdvertisedIpRangeArrayOutputWithContext(context.Background())
}

func (i GetRouterBgpAdvertisedIpRangeArray) ToGetRouterBgpAdvertisedIpRangeArrayOutputWithContext(ctx context.Context) GetRouterBgpAdvertisedIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouterBgpAdvertisedIpRangeArrayOutput)
}

type GetRouterBgpAdvertisedIpRangeOutput struct{ *pulumi.OutputState }

func (GetRouterBgpAdvertisedIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouterBgpAdvertisedIpRange)(nil)).Elem()
}

func (o GetRouterBgpAdvertisedIpRangeOutput) ToGetRouterBgpAdvertisedIpRangeOutput() GetRouterBgpAdvertisedIpRangeOutput {
	return o
}

func (o GetRouterBgpAdvertisedIpRangeOutput) ToGetRouterBgpAdvertisedIpRangeOutputWithContext(ctx context.Context) GetRouterBgpAdvertisedIpRangeOutput {
	return o
}

func (o GetRouterBgpAdvertisedIpRangeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterBgpAdvertisedIpRange) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetRouterBgpAdvertisedIpRangeOutput) Range() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouterBgpAdvertisedIpRange) string { return v.Range }).(pulumi.StringOutput)
}

type GetRouterBgpAdvertisedIpRangeArrayOutput struct{ *pulumi.OutputState }

func (GetRouterBgpAdvertisedIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouterBgpAdvertisedIpRange)(nil)).Elem()
}

func (o GetRouterBgpAdvertisedIpRangeArrayOutput) ToGetRouterBgpAdvertisedIpRangeArrayOutput() GetRouterBgpAdvertisedIpRangeArrayOutput {
	return o
}

func (o GetRouterBgpAdvertisedIpRangeArrayOutput) ToGetRouterBgpAdvertisedIpRangeArrayOutputWithContext(ctx context.Context) GetRouterBgpAdvertisedIpRangeArrayOutput {
	return o
}

func (o GetRouterBgpAdvertisedIpRangeArrayOutput) Index(i pulumi.IntInput) GetRouterBgpAdvertisedIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouterBgpAdvertisedIpRange {
		return vs[0].([]GetRouterBgpAdvertisedIpRange)[vs[1].(int)]
	}).(GetRouterBgpAdvertisedIpRangeOutput)
}

type GetSubnetworkSecondaryIpRange struct {
	// The range of IP addresses belonging to this subnetwork
	// secondary range.
	IpCidrRange string `pulumi:"ipCidrRange"`
	// The name associated with this subnetwork secondary range, used
	// when adding an alias IP range to a VM instance.
	RangeName string `pulumi:"rangeName"`
}

// GetSubnetworkSecondaryIpRangeInput is an input type that accepts GetSubnetworkSecondaryIpRangeArgs and GetSubnetworkSecondaryIpRangeOutput values.
// You can construct a concrete instance of `GetSubnetworkSecondaryIpRangeInput` via:
//
// 		 GetSubnetworkSecondaryIpRangeArgs{...}
//
type GetSubnetworkSecondaryIpRangeInput interface {
	pulumi.Input

	ToGetSubnetworkSecondaryIpRangeOutput() GetSubnetworkSecondaryIpRangeOutput
	ToGetSubnetworkSecondaryIpRangeOutputWithContext(context.Context) GetSubnetworkSecondaryIpRangeOutput
}

type GetSubnetworkSecondaryIpRangeArgs struct {
	// The range of IP addresses belonging to this subnetwork
	// secondary range.
	IpCidrRange pulumi.StringInput `pulumi:"ipCidrRange"`
	// The name associated with this subnetwork secondary range, used
	// when adding an alias IP range to a VM instance.
	RangeName pulumi.StringInput `pulumi:"rangeName"`
}

func (GetSubnetworkSecondaryIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubnetworkSecondaryIpRange)(nil)).Elem()
}

func (i GetSubnetworkSecondaryIpRangeArgs) ToGetSubnetworkSecondaryIpRangeOutput() GetSubnetworkSecondaryIpRangeOutput {
	return i.ToGetSubnetworkSecondaryIpRangeOutputWithContext(context.Background())
}

func (i GetSubnetworkSecondaryIpRangeArgs) ToGetSubnetworkSecondaryIpRangeOutputWithContext(ctx context.Context) GetSubnetworkSecondaryIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubnetworkSecondaryIpRangeOutput)
}

// GetSubnetworkSecondaryIpRangeArrayInput is an input type that accepts GetSubnetworkSecondaryIpRangeArray and GetSubnetworkSecondaryIpRangeArrayOutput values.
// You can construct a concrete instance of `GetSubnetworkSecondaryIpRangeArrayInput` via:
//
// 		 GetSubnetworkSecondaryIpRangeArray{ GetSubnetworkSecondaryIpRangeArgs{...} }
//
type GetSubnetworkSecondaryIpRangeArrayInput interface {
	pulumi.Input

	ToGetSubnetworkSecondaryIpRangeArrayOutput() GetSubnetworkSecondaryIpRangeArrayOutput
	ToGetSubnetworkSecondaryIpRangeArrayOutputWithContext(context.Context) GetSubnetworkSecondaryIpRangeArrayOutput
}

type GetSubnetworkSecondaryIpRangeArray []GetSubnetworkSecondaryIpRangeInput

func (GetSubnetworkSecondaryIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubnetworkSecondaryIpRange)(nil)).Elem()
}

func (i GetSubnetworkSecondaryIpRangeArray) ToGetSubnetworkSecondaryIpRangeArrayOutput() GetSubnetworkSecondaryIpRangeArrayOutput {
	return i.ToGetSubnetworkSecondaryIpRangeArrayOutputWithContext(context.Background())
}

func (i GetSubnetworkSecondaryIpRangeArray) ToGetSubnetworkSecondaryIpRangeArrayOutputWithContext(ctx context.Context) GetSubnetworkSecondaryIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubnetworkSecondaryIpRangeArrayOutput)
}

type GetSubnetworkSecondaryIpRangeOutput struct{ *pulumi.OutputState }

func (GetSubnetworkSecondaryIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubnetworkSecondaryIpRange)(nil)).Elem()
}

func (o GetSubnetworkSecondaryIpRangeOutput) ToGetSubnetworkSecondaryIpRangeOutput() GetSubnetworkSecondaryIpRangeOutput {
	return o
}

func (o GetSubnetworkSecondaryIpRangeOutput) ToGetSubnetworkSecondaryIpRangeOutputWithContext(ctx context.Context) GetSubnetworkSecondaryIpRangeOutput {
	return o
}

// The range of IP addresses belonging to this subnetwork
// secondary range.
func (o GetSubnetworkSecondaryIpRangeOutput) IpCidrRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetworkSecondaryIpRange) string { return v.IpCidrRange }).(pulumi.StringOutput)
}

// The name associated with this subnetwork secondary range, used
// when adding an alias IP range to a VM instance.
func (o GetSubnetworkSecondaryIpRangeOutput) RangeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetworkSecondaryIpRange) string { return v.RangeName }).(pulumi.StringOutput)
}

type GetSubnetworkSecondaryIpRangeArrayOutput struct{ *pulumi.OutputState }

func (GetSubnetworkSecondaryIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubnetworkSecondaryIpRange)(nil)).Elem()
}

func (o GetSubnetworkSecondaryIpRangeArrayOutput) ToGetSubnetworkSecondaryIpRangeArrayOutput() GetSubnetworkSecondaryIpRangeArrayOutput {
	return o
}

func (o GetSubnetworkSecondaryIpRangeArrayOutput) ToGetSubnetworkSecondaryIpRangeArrayOutputWithContext(ctx context.Context) GetSubnetworkSecondaryIpRangeArrayOutput {
	return o
}

func (o GetSubnetworkSecondaryIpRangeArrayOutput) Index(i pulumi.IntInput) GetSubnetworkSecondaryIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubnetworkSecondaryIpRange {
		return vs[0].([]GetSubnetworkSecondaryIpRange)[vs[1].(int)]
	}).(GetSubnetworkSecondaryIpRangeOutput)
}

func init() {
	pulumi.RegisterOutputType(AutoscalarAutoscalingPolicyOutput{})
	pulumi.RegisterOutputType(AutoscalarAutoscalingPolicyPtrOutput{})
	pulumi.RegisterOutputType(AutoscalarAutoscalingPolicyCpuUtilizationOutput{})
	pulumi.RegisterOutputType(AutoscalarAutoscalingPolicyCpuUtilizationPtrOutput{})
	pulumi.RegisterOutputType(AutoscalarAutoscalingPolicyLoadBalancingUtilizationOutput{})
	pulumi.RegisterOutputType(AutoscalarAutoscalingPolicyLoadBalancingUtilizationPtrOutput{})
	pulumi.RegisterOutputType(AutoscalarAutoscalingPolicyMetricOutput{})
	pulumi.RegisterOutputType(AutoscalarAutoscalingPolicyMetricArrayOutput{})
	pulumi.RegisterOutputType(AutoscalerAutoscalingPolicyOutput{})
	pulumi.RegisterOutputType(AutoscalerAutoscalingPolicyPtrOutput{})
	pulumi.RegisterOutputType(AutoscalerAutoscalingPolicyCpuUtilizationOutput{})
	pulumi.RegisterOutputType(AutoscalerAutoscalingPolicyCpuUtilizationPtrOutput{})
	pulumi.RegisterOutputType(AutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput{})
	pulumi.RegisterOutputType(AutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput{})
	pulumi.RegisterOutputType(AutoscalerAutoscalingPolicyMetricOutput{})
	pulumi.RegisterOutputType(AutoscalerAutoscalingPolicyMetricArrayOutput{})
	pulumi.RegisterOutputType(BackendBucketCdnPolicyOutput{})
	pulumi.RegisterOutputType(BackendBucketCdnPolicyPtrOutput{})
	pulumi.RegisterOutputType(BackendServiceBackendOutput{})
	pulumi.RegisterOutputType(BackendServiceBackendArrayOutput{})
	pulumi.RegisterOutputType(BackendServiceCdnPolicyOutput{})
	pulumi.RegisterOutputType(BackendServiceCdnPolicyPtrOutput{})
	pulumi.RegisterOutputType(BackendServiceCdnPolicyCacheKeyPolicyOutput{})
	pulumi.RegisterOutputType(BackendServiceCdnPolicyCacheKeyPolicyPtrOutput{})
	pulumi.RegisterOutputType(BackendServiceCircuitBreakersOutput{})
	pulumi.RegisterOutputType(BackendServiceCircuitBreakersPtrOutput{})
	pulumi.RegisterOutputType(BackendServiceCircuitBreakersConnectTimeoutOutput{})
	pulumi.RegisterOutputType(BackendServiceCircuitBreakersConnectTimeoutPtrOutput{})
	pulumi.RegisterOutputType(BackendServiceConsistentHashOutput{})
	pulumi.RegisterOutputType(BackendServiceConsistentHashPtrOutput{})
	pulumi.RegisterOutputType(BackendServiceConsistentHashHttpCookieOutput{})
	pulumi.RegisterOutputType(BackendServiceConsistentHashHttpCookiePtrOutput{})
	pulumi.RegisterOutputType(BackendServiceConsistentHashHttpCookieTtlOutput{})
	pulumi.RegisterOutputType(BackendServiceConsistentHashHttpCookieTtlPtrOutput{})
	pulumi.RegisterOutputType(BackendServiceIapOutput{})
	pulumi.RegisterOutputType(BackendServiceIapPtrOutput{})
	pulumi.RegisterOutputType(BackendServiceLogConfigOutput{})
	pulumi.RegisterOutputType(BackendServiceLogConfigPtrOutput{})
	pulumi.RegisterOutputType(BackendServiceOutlierDetectionOutput{})
	pulumi.RegisterOutputType(BackendServiceOutlierDetectionPtrOutput{})
	pulumi.RegisterOutputType(BackendServiceOutlierDetectionBaseEjectionTimeOutput{})
	pulumi.RegisterOutputType(BackendServiceOutlierDetectionBaseEjectionTimePtrOutput{})
	pulumi.RegisterOutputType(BackendServiceOutlierDetectionIntervalOutput{})
	pulumi.RegisterOutputType(BackendServiceOutlierDetectionIntervalPtrOutput{})
	pulumi.RegisterOutputType(DiskDiskEncryptionKeyOutput{})
	pulumi.RegisterOutputType(DiskDiskEncryptionKeyPtrOutput{})
	pulumi.RegisterOutputType(DiskSourceImageEncryptionKeyOutput{})
	pulumi.RegisterOutputType(DiskSourceImageEncryptionKeyPtrOutput{})
	pulumi.RegisterOutputType(DiskSourceSnapshotEncryptionKeyOutput{})
	pulumi.RegisterOutputType(DiskSourceSnapshotEncryptionKeyPtrOutput{})
	pulumi.RegisterOutputType(ExternalVpnGatewayInterfaceOutput{})
	pulumi.RegisterOutputType(ExternalVpnGatewayInterfaceArrayOutput{})
	pulumi.RegisterOutputType(FirewallAllowOutput{})
	pulumi.RegisterOutputType(FirewallAllowArrayOutput{})
	pulumi.RegisterOutputType(FirewallDenyOutput{})
	pulumi.RegisterOutputType(FirewallDenyArrayOutput{})
	pulumi.RegisterOutputType(GlobalForwardingRuleMetadataFilterOutput{})
	pulumi.RegisterOutputType(GlobalForwardingRuleMetadataFilterArrayOutput{})
	pulumi.RegisterOutputType(GlobalForwardingRuleMetadataFilterFilterLabelOutput{})
	pulumi.RegisterOutputType(GlobalForwardingRuleMetadataFilterFilterLabelArrayOutput{})
	pulumi.RegisterOutputType(HaVpnGatewayVpnInterfaceOutput{})
	pulumi.RegisterOutputType(HaVpnGatewayVpnInterfaceArrayOutput{})
	pulumi.RegisterOutputType(HealthCheckHttp2HealthCheckOutput{})
	pulumi.RegisterOutputType(HealthCheckHttp2HealthCheckPtrOutput{})
	pulumi.RegisterOutputType(HealthCheckHttpHealthCheckOutput{})
	pulumi.RegisterOutputType(HealthCheckHttpHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(HealthCheckHttpsHealthCheckOutput{})
	pulumi.RegisterOutputType(HealthCheckHttpsHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(HealthCheckLogConfigOutput{})
	pulumi.RegisterOutputType(HealthCheckLogConfigPtrOutput{})
	pulumi.RegisterOutputType(HealthCheckSslHealthCheckOutput{})
	pulumi.RegisterOutputType(HealthCheckSslHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(HealthCheckTcpHealthCheckOutput{})
	pulumi.RegisterOutputType(HealthCheckTcpHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(ImageGuestOsFeatureOutput{})
	pulumi.RegisterOutputType(ImageGuestOsFeatureArrayOutput{})
	pulumi.RegisterOutputType(ImageRawDiskOutput{})
	pulumi.RegisterOutputType(ImageRawDiskPtrOutput{})
	pulumi.RegisterOutputType(InstanceAttachedDiskOutput{})
	pulumi.RegisterOutputType(InstanceAttachedDiskArrayOutput{})
	pulumi.RegisterOutputType(InstanceBootDiskOutput{})
	pulumi.RegisterOutputType(InstanceBootDiskPtrOutput{})
	pulumi.RegisterOutputType(InstanceBootDiskInitializeParamsOutput{})
	pulumi.RegisterOutputType(InstanceBootDiskInitializeParamsPtrOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateAttachedDiskOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateAttachedDiskArrayOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateBootDiskOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateBootDiskPtrOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateBootDiskInitializeParamsOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateBootDiskInitializeParamsPtrOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateGuestAcceleratorOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateGuestAcceleratorArrayOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateNetworkInterfaceAccessConfigOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateNetworkInterfaceAccessConfigArrayOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateNetworkInterfaceAliasIpRangeOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateNetworkInterfaceAliasIpRangeArrayOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateSchedulingOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateSchedulingPtrOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateSchedulingNodeAffinityOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateSchedulingNodeAffinityArrayOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateScratchDiskOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateScratchDiskArrayOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateServiceAccountOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateServiceAccountPtrOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateShieldedInstanceConfigOutput{})
	pulumi.RegisterOutputType(InstanceFromTemplateShieldedInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerAutoHealingPoliciesOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerAutoHealingPoliciesPtrOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerNamedPortOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerNamedPortArrayOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerUpdatePolicyOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerUpdatePolicyPtrOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerVersionOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerVersionArrayOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerVersionTargetSizeOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerVersionTargetSizePtrOutput{})
	pulumi.RegisterOutputType(InstanceGroupNamedPortTypeOutput{})
	pulumi.RegisterOutputType(InstanceGroupNamedPortTypeArrayOutput{})
	pulumi.RegisterOutputType(InstanceGuestAcceleratorOutput{})
	pulumi.RegisterOutputType(InstanceGuestAcceleratorArrayOutput{})
	pulumi.RegisterOutputType(InstanceIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(InstanceIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(InstanceIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(InstanceIAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(InstanceNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(InstanceNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(InstanceNetworkInterfaceAccessConfigOutput{})
	pulumi.RegisterOutputType(InstanceNetworkInterfaceAccessConfigArrayOutput{})
	pulumi.RegisterOutputType(InstanceNetworkInterfaceAliasIpRangeOutput{})
	pulumi.RegisterOutputType(InstanceNetworkInterfaceAliasIpRangeArrayOutput{})
	pulumi.RegisterOutputType(InstanceSchedulingOutput{})
	pulumi.RegisterOutputType(InstanceSchedulingPtrOutput{})
	pulumi.RegisterOutputType(InstanceSchedulingNodeAffinityOutput{})
	pulumi.RegisterOutputType(InstanceSchedulingNodeAffinityArrayOutput{})
	pulumi.RegisterOutputType(InstanceScratchDiskOutput{})
	pulumi.RegisterOutputType(InstanceScratchDiskArrayOutput{})
	pulumi.RegisterOutputType(InstanceServiceAccountOutput{})
	pulumi.RegisterOutputType(InstanceServiceAccountPtrOutput{})
	pulumi.RegisterOutputType(InstanceShieldedInstanceConfigOutput{})
	pulumi.RegisterOutputType(InstanceShieldedInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(InstanceTemplateDiskOutput{})
	pulumi.RegisterOutputType(InstanceTemplateDiskArrayOutput{})
	pulumi.RegisterOutputType(InstanceTemplateDiskDiskEncryptionKeyOutput{})
	pulumi.RegisterOutputType(InstanceTemplateDiskDiskEncryptionKeyPtrOutput{})
	pulumi.RegisterOutputType(InstanceTemplateGuestAcceleratorOutput{})
	pulumi.RegisterOutputType(InstanceTemplateGuestAcceleratorArrayOutput{})
	pulumi.RegisterOutputType(InstanceTemplateNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(InstanceTemplateNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(InstanceTemplateNetworkInterfaceAccessConfigOutput{})
	pulumi.RegisterOutputType(InstanceTemplateNetworkInterfaceAccessConfigArrayOutput{})
	pulumi.RegisterOutputType(InstanceTemplateNetworkInterfaceAliasIpRangeOutput{})
	pulumi.RegisterOutputType(InstanceTemplateNetworkInterfaceAliasIpRangeArrayOutput{})
	pulumi.RegisterOutputType(InstanceTemplateSchedulingOutput{})
	pulumi.RegisterOutputType(InstanceTemplateSchedulingPtrOutput{})
	pulumi.RegisterOutputType(InstanceTemplateSchedulingNodeAffinityOutput{})
	pulumi.RegisterOutputType(InstanceTemplateSchedulingNodeAffinityArrayOutput{})
	pulumi.RegisterOutputType(InstanceTemplateServiceAccountOutput{})
	pulumi.RegisterOutputType(InstanceTemplateServiceAccountPtrOutput{})
	pulumi.RegisterOutputType(InstanceTemplateShieldedInstanceConfigOutput{})
	pulumi.RegisterOutputType(InstanceTemplateShieldedInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(InterconnectAttachmentPrivateInterconnectInfoOutput{})
	pulumi.RegisterOutputType(InterconnectAttachmentPrivateInterconnectInfoPtrOutput{})
	pulumi.RegisterOutputType(ManagedSslCertificateManagedOutput{})
	pulumi.RegisterOutputType(ManagedSslCertificateManagedPtrOutput{})
	pulumi.RegisterOutputType(MangedSslCertificateManagedOutput{})
	pulumi.RegisterOutputType(MangedSslCertificateManagedPtrOutput{})
	pulumi.RegisterOutputType(NodeGroupAutoscalingPolicyOutput{})
	pulumi.RegisterOutputType(NodeGroupAutoscalingPolicyPtrOutput{})
	pulumi.RegisterOutputType(NodeTemplateNodeTypeFlexibilityOutput{})
	pulumi.RegisterOutputType(NodeTemplateNodeTypeFlexibilityPtrOutput{})
	pulumi.RegisterOutputType(NodeTemplateServerBindingOutput{})
	pulumi.RegisterOutputType(NodeTemplateServerBindingPtrOutput{})
	pulumi.RegisterOutputType(PacketMirroringCollectorIlbOutput{})
	pulumi.RegisterOutputType(PacketMirroringCollectorIlbPtrOutput{})
	pulumi.RegisterOutputType(PacketMirroringFilterOutput{})
	pulumi.RegisterOutputType(PacketMirroringFilterPtrOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourcesOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourcesPtrOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourcesInstanceOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourcesInstanceArrayOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourcesSubnetworkOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourcesSubnetworkArrayOutput{})
	pulumi.RegisterOutputType(PacketMirroringNetworkOutput{})
	pulumi.RegisterOutputType(PacketMirroringNetworkPtrOutput{})
	pulumi.RegisterOutputType(RegionAutoscalerAutoscalingPolicyOutput{})
	pulumi.RegisterOutputType(RegionAutoscalerAutoscalingPolicyPtrOutput{})
	pulumi.RegisterOutputType(RegionAutoscalerAutoscalingPolicyCpuUtilizationOutput{})
	pulumi.RegisterOutputType(RegionAutoscalerAutoscalingPolicyCpuUtilizationPtrOutput{})
	pulumi.RegisterOutputType(RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationOutput{})
	pulumi.RegisterOutputType(RegionAutoscalerAutoscalingPolicyLoadBalancingUtilizationPtrOutput{})
	pulumi.RegisterOutputType(RegionAutoscalerAutoscalingPolicyMetricOutput{})
	pulumi.RegisterOutputType(RegionAutoscalerAutoscalingPolicyMetricArrayOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceBackendOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceBackendArrayOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceCircuitBreakersOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceCircuitBreakersPtrOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceCircuitBreakersConnectTimeoutOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceCircuitBreakersConnectTimeoutPtrOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceConsistentHashOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceConsistentHashPtrOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceConsistentHashHttpCookieOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceConsistentHashHttpCookiePtrOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceConsistentHashHttpCookieTtlOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceConsistentHashHttpCookieTtlPtrOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceFailoverPolicyOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceFailoverPolicyPtrOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceLogConfigOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceLogConfigPtrOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceOutlierDetectionOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceOutlierDetectionPtrOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceOutlierDetectionBaseEjectionTimeOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceOutlierDetectionBaseEjectionTimePtrOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceOutlierDetectionIntervalOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceOutlierDetectionIntervalPtrOutput{})
	pulumi.RegisterOutputType(RegionDiskDiskEncryptionKeyOutput{})
	pulumi.RegisterOutputType(RegionDiskDiskEncryptionKeyPtrOutput{})
	pulumi.RegisterOutputType(RegionDiskSourceSnapshotEncryptionKeyOutput{})
	pulumi.RegisterOutputType(RegionDiskSourceSnapshotEncryptionKeyPtrOutput{})
	pulumi.RegisterOutputType(RegionHealthCheckHttp2HealthCheckOutput{})
	pulumi.RegisterOutputType(RegionHealthCheckHttp2HealthCheckPtrOutput{})
	pulumi.RegisterOutputType(RegionHealthCheckHttpHealthCheckOutput{})
	pulumi.RegisterOutputType(RegionHealthCheckHttpHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(RegionHealthCheckHttpsHealthCheckOutput{})
	pulumi.RegisterOutputType(RegionHealthCheckHttpsHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(RegionHealthCheckLogConfigOutput{})
	pulumi.RegisterOutputType(RegionHealthCheckLogConfigPtrOutput{})
	pulumi.RegisterOutputType(RegionHealthCheckSslHealthCheckOutput{})
	pulumi.RegisterOutputType(RegionHealthCheckSslHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(RegionHealthCheckTcpHealthCheckOutput{})
	pulumi.RegisterOutputType(RegionHealthCheckTcpHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(RegionInstanceGroupManagerAutoHealingPoliciesOutput{})
	pulumi.RegisterOutputType(RegionInstanceGroupManagerAutoHealingPoliciesPtrOutput{})
	pulumi.RegisterOutputType(RegionInstanceGroupManagerNamedPortOutput{})
	pulumi.RegisterOutputType(RegionInstanceGroupManagerNamedPortArrayOutput{})
	pulumi.RegisterOutputType(RegionInstanceGroupManagerUpdatePolicyOutput{})
	pulumi.RegisterOutputType(RegionInstanceGroupManagerUpdatePolicyPtrOutput{})
	pulumi.RegisterOutputType(RegionInstanceGroupManagerVersionOutput{})
	pulumi.RegisterOutputType(RegionInstanceGroupManagerVersionArrayOutput{})
	pulumi.RegisterOutputType(RegionInstanceGroupManagerVersionTargetSizeOutput{})
	pulumi.RegisterOutputType(RegionInstanceGroupManagerVersionTargetSizePtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapHostRuleOutput{})
	pulumi.RegisterOutputType(RegionUrlMapHostRuleArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionTimeoutPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleUrlRedirectOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherPathRuleUrlRedirectPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleHeaderActionOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleHeaderActionPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleMatchRuleOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleMatchRuleArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleUrlRedirectOutput{})
	pulumi.RegisterOutputType(RegionUrlMapPathMatcherRouteRuleUrlRedirectPtrOutput{})
	pulumi.RegisterOutputType(RegionUrlMapTestOutput{})
	pulumi.RegisterOutputType(RegionUrlMapTestArrayOutput{})
	pulumi.RegisterOutputType(ReservationSpecificReservationOutput{})
	pulumi.RegisterOutputType(ReservationSpecificReservationPtrOutput{})
	pulumi.RegisterOutputType(ReservationSpecificReservationInstancePropertiesOutput{})
	pulumi.RegisterOutputType(ReservationSpecificReservationInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ReservationSpecificReservationInstancePropertiesGuestAcceleratorOutput{})
	pulumi.RegisterOutputType(ReservationSpecificReservationInstancePropertiesGuestAcceleratorArrayOutput{})
	pulumi.RegisterOutputType(ReservationSpecificReservationInstancePropertiesLocalSsdOutput{})
	pulumi.RegisterOutputType(ReservationSpecificReservationInstancePropertiesLocalSsdArrayOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyPtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyScheduleOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicySchedulePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyScheduleDailyScheduleOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyScheduleDailySchedulePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyScheduleHourlySchedulePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyScheduleWeeklySchedulePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeekArrayOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput{})
	pulumi.RegisterOutputType(RouterBgpOutput{})
	pulumi.RegisterOutputType(RouterBgpPtrOutput{})
	pulumi.RegisterOutputType(RouterBgpAdvertisedIpRangeOutput{})
	pulumi.RegisterOutputType(RouterBgpAdvertisedIpRangeArrayOutput{})
	pulumi.RegisterOutputType(RouterNatLogConfigOutput{})
	pulumi.RegisterOutputType(RouterNatLogConfigPtrOutput{})
	pulumi.RegisterOutputType(RouterNatSubnetworkOutput{})
	pulumi.RegisterOutputType(RouterNatSubnetworkArrayOutput{})
	pulumi.RegisterOutputType(RouterPeerAdvertisedIpRangeOutput{})
	pulumi.RegisterOutputType(RouterPeerAdvertisedIpRangeArrayOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleMatchOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleMatchConfigOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleMatchConfigPtrOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleMatchExprOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleMatchExprPtrOutput{})
	pulumi.RegisterOutputType(SecurityScanConfigAuthenticationOutput{})
	pulumi.RegisterOutputType(SecurityScanConfigAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(SecurityScanConfigAuthenticationCustomAccountOutput{})
	pulumi.RegisterOutputType(SecurityScanConfigAuthenticationCustomAccountPtrOutput{})
	pulumi.RegisterOutputType(SecurityScanConfigAuthenticationGoogleAccountOutput{})
	pulumi.RegisterOutputType(SecurityScanConfigAuthenticationGoogleAccountPtrOutput{})
	pulumi.RegisterOutputType(SecurityScanConfigScheduleOutput{})
	pulumi.RegisterOutputType(SecurityScanConfigSchedulePtrOutput{})
	pulumi.RegisterOutputType(SnapshotSnapshotEncryptionKeyOutput{})
	pulumi.RegisterOutputType(SnapshotSnapshotEncryptionKeyPtrOutput{})
	pulumi.RegisterOutputType(SnapshotSourceDiskEncryptionKeyOutput{})
	pulumi.RegisterOutputType(SnapshotSourceDiskEncryptionKeyPtrOutput{})
	pulumi.RegisterOutputType(SubnetworkIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(SubnetworkIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(SubnetworkIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(SubnetworkIAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(SubnetworkLogConfigOutput{})
	pulumi.RegisterOutputType(SubnetworkLogConfigPtrOutput{})
	pulumi.RegisterOutputType(SubnetworkSecondaryIpRangeOutput{})
	pulumi.RegisterOutputType(SubnetworkSecondaryIpRangeArrayOutput{})
	pulumi.RegisterOutputType(URLMapHeaderActionOutput{})
	pulumi.RegisterOutputType(URLMapHeaderActionPtrOutput{})
	pulumi.RegisterOutputType(URLMapHeaderActionRequestHeadersToAddOutput{})
	pulumi.RegisterOutputType(URLMapHeaderActionRequestHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(URLMapHeaderActionResponseHeadersToAddOutput{})
	pulumi.RegisterOutputType(URLMapHeaderActionResponseHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(URLMapHostRuleOutput{})
	pulumi.RegisterOutputType(URLMapHostRuleArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherHeaderActionOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherHeaderActionPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherHeaderActionRequestHeadersToAddOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherHeaderActionRequestHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherHeaderActionResponseHeadersToAddOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherHeaderActionResponseHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionCorsPolicyOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionCorsPolicyPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionRequestMirrorPolicyPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionRetryPolicyOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionTimeoutOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionTimeoutPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionUrlRewriteOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionUrlRewritePtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleUrlRedirectOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherPathRuleUrlRedirectPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleHeaderActionOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleHeaderActionPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleMatchRuleOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleMatchRuleArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleMatchRuleHeaderMatchRangeMatchPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleMatchRuleMetadataFilterOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleMatchRuleMetadataFilterArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionCorsPolicyOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionCorsPolicyPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyAbortPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionFaultInjectionPolicyDelayFixedDelayPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionRequestMirrorPolicyPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionRetryPolicyOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionRetryPolicyPerTryTimeoutPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionTimeoutOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionTimeoutPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionUrlRewriteOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionUrlRewritePtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionPtrOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArrayOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleUrlRedirectOutput{})
	pulumi.RegisterOutputType(URLMapPathMatcherRouteRuleUrlRedirectPtrOutput{})
	pulumi.RegisterOutputType(URLMapTestOutput{})
	pulumi.RegisterOutputType(URLMapTestArrayOutput{})
	pulumi.RegisterOutputType(GetBackendBucketCdnPolicyOutput{})
	pulumi.RegisterOutputType(GetBackendBucketCdnPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetBackendServiceBackendOutput{})
	pulumi.RegisterOutputType(GetBackendServiceBackendArrayOutput{})
	pulumi.RegisterOutputType(GetBackendServiceCdnPolicyOutput{})
	pulumi.RegisterOutputType(GetBackendServiceCdnPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetBackendServiceCdnPolicyCacheKeyPolicyOutput{})
	pulumi.RegisterOutputType(GetBackendServiceCdnPolicyCacheKeyPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetBackendServiceCircuitBreakerOutput{})
	pulumi.RegisterOutputType(GetBackendServiceCircuitBreakerArrayOutput{})
	pulumi.RegisterOutputType(GetBackendServiceCircuitBreakerConnectTimeoutOutput{})
	pulumi.RegisterOutputType(GetBackendServiceCircuitBreakerConnectTimeoutArrayOutput{})
	pulumi.RegisterOutputType(GetBackendServiceConsistentHashOutput{})
	pulumi.RegisterOutputType(GetBackendServiceConsistentHashArrayOutput{})
	pulumi.RegisterOutputType(GetBackendServiceConsistentHashHttpCookyOutput{})
	pulumi.RegisterOutputType(GetBackendServiceConsistentHashHttpCookyArrayOutput{})
	pulumi.RegisterOutputType(GetBackendServiceConsistentHashHttpCookyTtlOutput{})
	pulumi.RegisterOutputType(GetBackendServiceConsistentHashHttpCookyTtlArrayOutput{})
	pulumi.RegisterOutputType(GetBackendServiceIapOutput{})
	pulumi.RegisterOutputType(GetBackendServiceIapArrayOutput{})
	pulumi.RegisterOutputType(GetBackendServiceLogConfigOutput{})
	pulumi.RegisterOutputType(GetBackendServiceLogConfigArrayOutput{})
	pulumi.RegisterOutputType(GetBackendServiceOutlierDetectionOutput{})
	pulumi.RegisterOutputType(GetBackendServiceOutlierDetectionArrayOutput{})
	pulumi.RegisterOutputType(GetBackendServiceOutlierDetectionBaseEjectionTimeOutput{})
	pulumi.RegisterOutputType(GetBackendServiceOutlierDetectionBaseEjectionTimeArrayOutput{})
	pulumi.RegisterOutputType(GetBackendServiceOutlierDetectionIntervalOutput{})
	pulumi.RegisterOutputType(GetBackendServiceOutlierDetectionIntervalArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceAttachedDiskOutput{})
	pulumi.RegisterOutputType(GetInstanceAttachedDiskArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceBootDiskOutput{})
	pulumi.RegisterOutputType(GetInstanceBootDiskArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceBootDiskInitializeParamOutput{})
	pulumi.RegisterOutputType(GetInstanceBootDiskInitializeParamArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceGroupNamedPortTypeOutput{})
	pulumi.RegisterOutputType(GetInstanceGroupNamedPortTypeArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceGuestAcceleratorOutput{})
	pulumi.RegisterOutputType(GetInstanceGuestAcceleratorArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(GetInstanceNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceNetworkInterfaceAccessConfigOutput{})
	pulumi.RegisterOutputType(GetInstanceNetworkInterfaceAccessConfigArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceNetworkInterfaceAliasIpRangeOutput{})
	pulumi.RegisterOutputType(GetInstanceNetworkInterfaceAliasIpRangeArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceSchedulingOutput{})
	pulumi.RegisterOutputType(GetInstanceSchedulingArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceSchedulingNodeAffinityOutput{})
	pulumi.RegisterOutputType(GetInstanceSchedulingNodeAffinityArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceScratchDiskOutput{})
	pulumi.RegisterOutputType(GetInstanceScratchDiskArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceServiceAccountOutput{})
	pulumi.RegisterOutputType(GetInstanceServiceAccountArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceShieldedInstanceConfigOutput{})
	pulumi.RegisterOutputType(GetInstanceShieldedInstanceConfigArrayOutput{})
	pulumi.RegisterOutputType(GetRegionInstanceGroupInstanceOutput{})
	pulumi.RegisterOutputType(GetRegionInstanceGroupInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetRegionInstanceGroupInstanceNamedPortOutput{})
	pulumi.RegisterOutputType(GetRegionInstanceGroupInstanceNamedPortArrayOutput{})
	pulumi.RegisterOutputType(GetRouterBgpOutput{})
	pulumi.RegisterOutputType(GetRouterBgpArrayOutput{})
	pulumi.RegisterOutputType(GetRouterBgpAdvertisedIpRangeOutput{})
	pulumi.RegisterOutputType(GetRouterBgpAdvertisedIpRangeArrayOutput{})
	pulumi.RegisterOutputType(GetSubnetworkSecondaryIpRangeOutput{})
	pulumi.RegisterOutputType(GetSubnetworkSecondaryIpRangeArrayOutput{})
}
