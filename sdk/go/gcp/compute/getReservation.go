// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"errors"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides access to available Google Compute Reservation Resources for a given project.
// See more about [Reservations of Compute Engine resources](https://cloud.google.com/compute/docs/instances/reservations-overview) in the upstream docs.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.LookupReservation(ctx, &compute.LookupReservationArgs{
//				Name: "gce-reservation",
//				Zone: "us-central1-a",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupReservation(ctx *pulumi.Context, args *LookupReservationArgs, opts ...pulumi.InvokeOption) (*LookupReservationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	invokeOpts, optsErr := pulumi.NewInvokeOptions(opts...)
	if optsErr != nil {
		return &LookupReservationResult{}, optsErr
	}
	if len(invokeOpts.DependsOn) > 0 {
		return &LookupReservationResult{}, errors.New("DependsOn is not supported for direct form invoke LookupReservation, use LookupReservationOutput instead")
	}
	if len(invokeOpts.DependsOnInputs) > 0 {
		return &LookupReservationResult{}, errors.New("DependsOnInputs is not supported for direct form invoke LookupReservation, use LookupReservationOutput instead")
	}
	var rv LookupReservationResult
	err := ctx.Invoke("gcp:compute/getReservation:getReservation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReservation.
type LookupReservationArgs struct {
	// The name of the Compute Reservation.
	Name string `pulumi:"name"`
	// Project from which to list the Compute Reservation. Defaults to project declared in the provider.
	Project *string `pulumi:"project"`
	// Zone where the Compute Reservation resides.
	Zone string `pulumi:"zone"`
}

// A collection of values returned by getReservation.
type LookupReservationResult struct {
	Commitment        string `pulumi:"commitment"`
	CreationTimestamp string `pulumi:"creationTimestamp"`
	Description       string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id                          string                              `pulumi:"id"`
	Name                        string                              `pulumi:"name"`
	Project                     *string                             `pulumi:"project"`
	SelfLink                    string                              `pulumi:"selfLink"`
	ShareSettings               []GetReservationShareSetting        `pulumi:"shareSettings"`
	SpecificReservationRequired bool                                `pulumi:"specificReservationRequired"`
	SpecificReservations        []GetReservationSpecificReservation `pulumi:"specificReservations"`
	Status                      string                              `pulumi:"status"`
	Zone                        string                              `pulumi:"zone"`
}

func LookupReservationOutput(ctx *pulumi.Context, args LookupReservationOutputArgs, opts ...pulumi.InvokeOption) LookupReservationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupReservationResultOutput, error) {
			args := v.(LookupReservationArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupReservationResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("gcp:compute/getReservation:getReservation", args, &rv, "", opts...)
			if err != nil {
				return LookupReservationResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupReservationResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(LookupReservationResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupReservationResultOutput), nil
			}
			return output, nil
		}).(LookupReservationResultOutput)
}

// A collection of arguments for invoking getReservation.
type LookupReservationOutputArgs struct {
	// The name of the Compute Reservation.
	Name pulumi.StringInput `pulumi:"name"`
	// Project from which to list the Compute Reservation. Defaults to project declared in the provider.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Zone where the Compute Reservation resides.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (LookupReservationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReservationArgs)(nil)).Elem()
}

// A collection of values returned by getReservation.
type LookupReservationResultOutput struct{ *pulumi.OutputState }

func (LookupReservationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReservationResult)(nil)).Elem()
}

func (o LookupReservationResultOutput) ToLookupReservationResultOutput() LookupReservationResultOutput {
	return o
}

func (o LookupReservationResultOutput) ToLookupReservationResultOutputWithContext(ctx context.Context) LookupReservationResultOutput {
	return o
}

func (o LookupReservationResultOutput) Commitment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservationResult) string { return v.Commitment }).(pulumi.StringOutput)
}

func (o LookupReservationResultOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservationResult) string { return v.CreationTimestamp }).(pulumi.StringOutput)
}

func (o LookupReservationResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservationResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupReservationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservationResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupReservationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservationResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupReservationResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupReservationResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o LookupReservationResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservationResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

func (o LookupReservationResultOutput) ShareSettings() GetReservationShareSettingArrayOutput {
	return o.ApplyT(func(v LookupReservationResult) []GetReservationShareSetting { return v.ShareSettings }).(GetReservationShareSettingArrayOutput)
}

func (o LookupReservationResultOutput) SpecificReservationRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupReservationResult) bool { return v.SpecificReservationRequired }).(pulumi.BoolOutput)
}

func (o LookupReservationResultOutput) SpecificReservations() GetReservationSpecificReservationArrayOutput {
	return o.ApplyT(func(v LookupReservationResult) []GetReservationSpecificReservation { return v.SpecificReservations }).(GetReservationSpecificReservationArrayOutput)
}

func (o LookupReservationResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservationResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupReservationResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservationResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupReservationResultOutput{})
}
