// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-gcp/sdk/v2/go/gcp"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "gcp:compute/address:Address":
		r, err = NewAddress(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/attachedDisk:AttachedDisk":
		r, err = NewAttachedDisk(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/autoscalar:Autoscalar":
		r, err = NewAutoscalar(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/autoscaler:Autoscaler":
		r, err = NewAutoscaler(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/backendBucket:BackendBucket":
		r, err = NewBackendBucket(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/backendBucketSignedUrlKey:BackendBucketSignedUrlKey":
		r, err = NewBackendBucketSignedUrlKey(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/backendService:BackendService":
		r, err = NewBackendService(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/backendServiceSignedUrlKey:BackendServiceSignedUrlKey":
		r, err = NewBackendServiceSignedUrlKey(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/disk:Disk":
		r, err = NewDisk(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/diskIamBinding:DiskIamBinding":
		r, err = NewDiskIamBinding(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/diskIamMember:DiskIamMember":
		r, err = NewDiskIamMember(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/diskIamPolicy:DiskIamPolicy":
		r, err = NewDiskIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/diskResourcePolicyAttachment:DiskResourcePolicyAttachment":
		r, err = NewDiskResourcePolicyAttachment(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/externalVpnGateway:ExternalVpnGateway":
		r, err = NewExternalVpnGateway(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/firewall:Firewall":
		r, err = NewFirewall(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/forwardingRule:ForwardingRule":
		r, err = NewForwardingRule(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/globalAddress:GlobalAddress":
		r, err = NewGlobalAddress(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/globalForwardingRule:GlobalForwardingRule":
		r, err = NewGlobalForwardingRule(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/globalNetworkEndpoint:GlobalNetworkEndpoint":
		r, err = NewGlobalNetworkEndpoint(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/globalNetworkEndpointGroup:GlobalNetworkEndpointGroup":
		r, err = NewGlobalNetworkEndpointGroup(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/haVpnGateway:HaVpnGateway":
		r, err = NewHaVpnGateway(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/healthCheck:HealthCheck":
		r, err = NewHealthCheck(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/httpHealthCheck:HttpHealthCheck":
		r, err = NewHttpHealthCheck(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/httpsHealthCheck:HttpsHealthCheck":
		r, err = NewHttpsHealthCheck(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/image:Image":
		r, err = NewImage(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/imageIamBinding:ImageIamBinding":
		r, err = NewImageIamBinding(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/imageIamMember:ImageIamMember":
		r, err = NewImageIamMember(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/imageIamPolicy:ImageIamPolicy":
		r, err = NewImageIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/instance:Instance":
		r, err = NewInstance(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/instanceFromMachineImage:InstanceFromMachineImage":
		r, err = NewInstanceFromMachineImage(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/instanceFromTemplate:InstanceFromTemplate":
		r, err = NewInstanceFromTemplate(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/instanceGroup:InstanceGroup":
		r, err = NewInstanceGroup(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/instanceGroupManager:InstanceGroupManager":
		r, err = NewInstanceGroupManager(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/instanceGroupNamedPort:InstanceGroupNamedPort":
		r, err = NewInstanceGroupNamedPort(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/instanceIAMBinding:InstanceIAMBinding":
		r, err = NewInstanceIAMBinding(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/instanceIAMMember:InstanceIAMMember":
		r, err = NewInstanceIAMMember(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/instanceIAMPolicy:InstanceIAMPolicy":
		r, err = NewInstanceIAMPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/instanceTemplate:InstanceTemplate":
		r, err = NewInstanceTemplate(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/interconnectAttachment:InterconnectAttachment":
		r, err = NewInterconnectAttachment(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/machineImage:MachineImage":
		r, err = NewMachineImage(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/machineImageIamBinding:MachineImageIamBinding":
		r, err = NewMachineImageIamBinding(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/machineImageIamMember:MachineImageIamMember":
		r, err = NewMachineImageIamMember(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/machineImageIamPolicy:MachineImageIamPolicy":
		r, err = NewMachineImageIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/managedSslCertificate:ManagedSslCertificate":
		r, err = NewManagedSslCertificate(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/mangedSslCertificate:MangedSslCertificate":
		r, err = NewMangedSslCertificate(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/network:Network":
		r, err = NewNetwork(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/networkEndpoint:NetworkEndpoint":
		r, err = NewNetworkEndpoint(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/networkEndpointGroup:NetworkEndpointGroup":
		r, err = NewNetworkEndpointGroup(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/networkPeering:NetworkPeering":
		r, err = NewNetworkPeering(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/networkPeeringRoutesConfig:NetworkPeeringRoutesConfig":
		r, err = NewNetworkPeeringRoutesConfig(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/nodeGroup:NodeGroup":
		r, err = NewNodeGroup(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/nodeTemplate:NodeTemplate":
		r, err = NewNodeTemplate(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/organizationSecurityPolicy:OrganizationSecurityPolicy":
		r, err = NewOrganizationSecurityPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/organizationSecurityPolicyAssociation:OrganizationSecurityPolicyAssociation":
		r, err = NewOrganizationSecurityPolicyAssociation(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/organizationSecurityPolicyRule:OrganizationSecurityPolicyRule":
		r, err = NewOrganizationSecurityPolicyRule(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/packetMirroring:PacketMirroring":
		r, err = NewPacketMirroring(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/perInstanceConfig:PerInstanceConfig":
		r, err = NewPerInstanceConfig(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/projectDefaultNetworkTier:ProjectDefaultNetworkTier":
		r, err = NewProjectDefaultNetworkTier(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/projectMetadata:ProjectMetadata":
		r, err = NewProjectMetadata(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/projectMetadataItem:ProjectMetadataItem":
		r, err = NewProjectMetadataItem(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/regionAutoscaler:RegionAutoscaler":
		r, err = NewRegionAutoscaler(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/regionBackendService:RegionBackendService":
		r, err = NewRegionBackendService(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/regionDisk:RegionDisk":
		r, err = NewRegionDisk(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/regionDiskIamBinding:RegionDiskIamBinding":
		r, err = NewRegionDiskIamBinding(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/regionDiskIamMember:RegionDiskIamMember":
		r, err = NewRegionDiskIamMember(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/regionDiskIamPolicy:RegionDiskIamPolicy":
		r, err = NewRegionDiskIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/regionDiskResourcePolicyAttachment:RegionDiskResourcePolicyAttachment":
		r, err = NewRegionDiskResourcePolicyAttachment(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/regionHealthCheck:RegionHealthCheck":
		r, err = NewRegionHealthCheck(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/regionInstanceGroupManager:RegionInstanceGroupManager":
		r, err = NewRegionInstanceGroupManager(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/regionNetworkEndpointGroup:RegionNetworkEndpointGroup":
		r, err = NewRegionNetworkEndpointGroup(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/regionPerInstanceConfig:RegionPerInstanceConfig":
		r, err = NewRegionPerInstanceConfig(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/regionSslCertificate:RegionSslCertificate":
		r, err = NewRegionSslCertificate(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/regionTargetHttpProxy:RegionTargetHttpProxy":
		r, err = NewRegionTargetHttpProxy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy":
		r, err = NewRegionTargetHttpsProxy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/regionUrlMap:RegionUrlMap":
		r, err = NewRegionUrlMap(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/reservation:Reservation":
		r, err = NewReservation(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/resourcePolicy:ResourcePolicy":
		r, err = NewResourcePolicy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/route:Route":
		r, err = NewRoute(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/router:Router":
		r, err = NewRouter(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/routerInterface:RouterInterface":
		r, err = NewRouterInterface(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/routerNat:RouterNat":
		r, err = NewRouterNat(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/routerPeer:RouterPeer":
		r, err = NewRouterPeer(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/sSLCertificate:SSLCertificate":
		r, err = NewSSLCertificate(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/sSLPolicy:SSLPolicy":
		r, err = NewSSLPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/securityPolicy:SecurityPolicy":
		r, err = NewSecurityPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/securityScanConfig:SecurityScanConfig":
		r, err = NewSecurityScanConfig(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/sharedVPCHostProject:SharedVPCHostProject":
		r, err = NewSharedVPCHostProject(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/sharedVPCServiceProject:SharedVPCServiceProject":
		r, err = NewSharedVPCServiceProject(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/snapshot:Snapshot":
		r, err = NewSnapshot(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/subnetwork:Subnetwork":
		r, err = NewSubnetwork(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/subnetworkIAMBinding:SubnetworkIAMBinding":
		r, err = NewSubnetworkIAMBinding(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/subnetworkIAMMember:SubnetworkIAMMember":
		r, err = NewSubnetworkIAMMember(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/subnetworkIAMPolicy:SubnetworkIAMPolicy":
		r, err = NewSubnetworkIAMPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/targetGrpcProxy:TargetGrpcProxy":
		r, err = NewTargetGrpcProxy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/targetHttpProxy:TargetHttpProxy":
		r, err = NewTargetHttpProxy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/targetHttpsProxy:TargetHttpsProxy":
		r, err = NewTargetHttpsProxy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/targetInstance:TargetInstance":
		r, err = NewTargetInstance(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/targetPool:TargetPool":
		r, err = NewTargetPool(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/targetSSLProxy:TargetSSLProxy":
		r, err = NewTargetSSLProxy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/targetTCPProxy:TargetTCPProxy":
		r, err = NewTargetTCPProxy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/uRLMap:URLMap":
		r, err = NewURLMap(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/vPNGateway:VPNGateway":
		r, err = NewVPNGateway(ctx, name, nil, pulumi.URN_(urn))
	case "gcp:compute/vPNTunnel:VPNTunnel":
		r, err = NewVPNTunnel(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

func init() {
	version, err := gcp.PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/address",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/attachedDisk",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/autoscalar",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/autoscaler",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/backendBucket",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/backendBucketSignedUrlKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/backendService",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/backendServiceSignedUrlKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/disk",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/diskIamBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/diskIamMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/diskIamPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/diskResourcePolicyAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/externalVpnGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/firewall",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/forwardingRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/globalAddress",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/globalForwardingRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/globalNetworkEndpoint",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/globalNetworkEndpointGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/haVpnGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/healthCheck",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/httpHealthCheck",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/httpsHealthCheck",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/image",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/imageIamBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/imageIamMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/imageIamPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/instance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/instanceFromMachineImage",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/instanceFromTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/instanceGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/instanceGroupManager",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/instanceGroupNamedPort",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/instanceIAMBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/instanceIAMMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/instanceIAMPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/instanceTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/interconnectAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/machineImage",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/machineImageIamBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/machineImageIamMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/machineImageIamPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/managedSslCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/mangedSslCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/network",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/networkEndpoint",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/networkEndpointGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/networkPeering",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/networkPeeringRoutesConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/nodeGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/nodeTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/organizationSecurityPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/organizationSecurityPolicyAssociation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/organizationSecurityPolicyRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/packetMirroring",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/perInstanceConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/projectDefaultNetworkTier",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/projectMetadata",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/projectMetadataItem",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/regionAutoscaler",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/regionBackendService",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/regionDisk",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/regionDiskIamBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/regionDiskIamMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/regionDiskIamPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/regionDiskResourcePolicyAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/regionHealthCheck",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/regionInstanceGroupManager",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/regionNetworkEndpointGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/regionPerInstanceConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/regionSslCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/regionTargetHttpProxy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/regionTargetHttpsProxy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/regionUrlMap",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/reservation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/resourcePolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/route",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/router",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/routerInterface",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/routerNat",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/routerPeer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/sSLCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/sSLPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/securityPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/securityScanConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/sharedVPCHostProject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/sharedVPCServiceProject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/snapshot",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/subnetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/subnetworkIAMBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/subnetworkIAMMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/subnetworkIAMPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/targetGrpcProxy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/targetHttpProxy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/targetHttpsProxy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/targetInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/targetPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/targetSSLProxy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/targetTCPProxy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/uRLMap",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/vPNGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"gcp",
		"compute/vPNTunnel",
		&module{version},
	)
}
