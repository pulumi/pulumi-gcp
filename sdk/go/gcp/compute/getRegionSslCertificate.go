// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get info about a Region Google Compute SSL Certificate from its name.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myCert, err := compute.LookupRegionSslCertificate(ctx, &compute.LookupRegionSslCertificateArgs{
//				Name: "my-cert",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("certificate", myCert.Certificate)
//			ctx.Export("certificateId", myCert.CertificateId)
//			ctx.Export("selfLink", myCert.SelfLink)
//			return nil
//		})
//	}
//
// ```
func LookupRegionSslCertificate(ctx *pulumi.Context, args *LookupRegionSslCertificateArgs, opts ...pulumi.InvokeOption) (*LookupRegionSslCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRegionSslCertificateResult
	err := ctx.Invoke("gcp:compute/getRegionSslCertificate:getRegionSslCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegionSslCertificate.
type LookupRegionSslCertificateArgs struct {
	// The name of the certificate.
	//
	// ***
	Name string `pulumi:"name"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region in which the resource belongs. If it
	// is not provided, the provider region is used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getRegionSslCertificate.
type LookupRegionSslCertificateResult struct {
	Certificate       string `pulumi:"certificate"`
	CertificateId     int    `pulumi:"certificateId"`
	CreationTimestamp string `pulumi:"creationTimestamp"`
	Description       string `pulumi:"description"`
	ExpireTime        string `pulumi:"expireTime"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	Name       string  `pulumi:"name"`
	NamePrefix string  `pulumi:"namePrefix"`
	PrivateKey string  `pulumi:"privateKey"`
	Project    *string `pulumi:"project"`
	Region     *string `pulumi:"region"`
	SelfLink   string  `pulumi:"selfLink"`
}

func LookupRegionSslCertificateOutput(ctx *pulumi.Context, args LookupRegionSslCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupRegionSslCertificateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRegionSslCertificateResult, error) {
			args := v.(LookupRegionSslCertificateArgs)
			r, err := LookupRegionSslCertificate(ctx, &args, opts...)
			var s LookupRegionSslCertificateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRegionSslCertificateResultOutput)
}

// A collection of arguments for invoking getRegionSslCertificate.
type LookupRegionSslCertificateOutputArgs struct {
	// The name of the certificate.
	//
	// ***
	Name pulumi.StringInput `pulumi:"name"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The region in which the resource belongs. If it
	// is not provided, the provider region is used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupRegionSslCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegionSslCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getRegionSslCertificate.
type LookupRegionSslCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupRegionSslCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegionSslCertificateResult)(nil)).Elem()
}

func (o LookupRegionSslCertificateResultOutput) ToLookupRegionSslCertificateResultOutput() LookupRegionSslCertificateResultOutput {
	return o
}

func (o LookupRegionSslCertificateResultOutput) ToLookupRegionSslCertificateResultOutputWithContext(ctx context.Context) LookupRegionSslCertificateResultOutput {
	return o
}

func (o LookupRegionSslCertificateResultOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionSslCertificateResult) string { return v.Certificate }).(pulumi.StringOutput)
}

func (o LookupRegionSslCertificateResultOutput) CertificateId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRegionSslCertificateResult) int { return v.CertificateId }).(pulumi.IntOutput)
}

func (o LookupRegionSslCertificateResultOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionSslCertificateResult) string { return v.CreationTimestamp }).(pulumi.StringOutput)
}

func (o LookupRegionSslCertificateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionSslCertificateResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupRegionSslCertificateResultOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionSslCertificateResult) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRegionSslCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionSslCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRegionSslCertificateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionSslCertificateResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupRegionSslCertificateResultOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionSslCertificateResult) string { return v.NamePrefix }).(pulumi.StringOutput)
}

func (o LookupRegionSslCertificateResultOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionSslCertificateResult) string { return v.PrivateKey }).(pulumi.StringOutput)
}

func (o LookupRegionSslCertificateResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRegionSslCertificateResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o LookupRegionSslCertificateResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRegionSslCertificateResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o LookupRegionSslCertificateResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionSslCertificateResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegionSslCertificateResultOutput{})
}
