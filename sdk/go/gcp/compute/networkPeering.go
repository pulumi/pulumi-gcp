// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a network peering within GCE. For more information see
// [the official documentation](https://cloud.google.com/compute/docs/vpc/vpc-peering)
// and
// [API](https://cloud.google.com/compute/docs/reference/latest/networks).
// 
// ~> **Note:** Both network must create a peering with each other for the peering to be functional.
// 
// ~> **Note:** Subnets IP ranges across peered VPC networks cannot overlap.
type NetworkPeering struct {
	s *pulumi.ResourceState
}

// NewNetworkPeering registers a new resource with the given unique name, arguments, and options.
func NewNetworkPeering(ctx *pulumi.Context,
	name string, args *NetworkPeeringArgs, opts ...pulumi.ResourceOpt) (*NetworkPeering, error) {
	if args == nil || args.Network == nil {
		return nil, errors.New("missing required argument 'Network'")
	}
	if args == nil || args.PeerNetwork == nil {
		return nil, errors.New("missing required argument 'PeerNetwork'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["autoCreateRoutes"] = nil
		inputs["name"] = nil
		inputs["network"] = nil
		inputs["peerNetwork"] = nil
	} else {
		inputs["autoCreateRoutes"] = args.AutoCreateRoutes
		inputs["name"] = args.Name
		inputs["network"] = args.Network
		inputs["peerNetwork"] = args.PeerNetwork
	}
	inputs["state"] = nil
	inputs["stateDetails"] = nil
	s, err := ctx.RegisterResource("gcp:compute/networkPeering:NetworkPeering", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NetworkPeering{s: s}, nil
}

// GetNetworkPeering gets an existing NetworkPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkPeering(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NetworkPeeringState, opts ...pulumi.ResourceOpt) (*NetworkPeering, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["autoCreateRoutes"] = state.AutoCreateRoutes
		inputs["name"] = state.Name
		inputs["network"] = state.Network
		inputs["peerNetwork"] = state.PeerNetwork
		inputs["state"] = state.State
		inputs["stateDetails"] = state.StateDetails
	}
	s, err := ctx.ReadResource("gcp:compute/networkPeering:NetworkPeering", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NetworkPeering{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NetworkPeering) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NetworkPeering) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// If set to `true`, the routes between the two networks will
// be created and managed automatically. Defaults to `true`.
func (r *NetworkPeering) AutoCreateRoutes() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["autoCreateRoutes"])
}

// Name of the peering.
func (r *NetworkPeering) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Resource link of the network to add a peering to.
func (r *NetworkPeering) Network() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["network"])
}

// Resource link of the peer network.
func (r *NetworkPeering) PeerNetwork() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["peerNetwork"])
}

// State for the peering.
func (r *NetworkPeering) State() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["state"])
}

// Details about the current state of the peering.
func (r *NetworkPeering) StateDetails() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["stateDetails"])
}

// Input properties used for looking up and filtering NetworkPeering resources.
type NetworkPeeringState struct {
	// If set to `true`, the routes between the two networks will
	// be created and managed automatically. Defaults to `true`.
	AutoCreateRoutes interface{}
	// Name of the peering.
	Name interface{}
	// Resource link of the network to add a peering to.
	Network interface{}
	// Resource link of the peer network.
	PeerNetwork interface{}
	// State for the peering.
	State interface{}
	// Details about the current state of the peering.
	StateDetails interface{}
}

// The set of arguments for constructing a NetworkPeering resource.
type NetworkPeeringArgs struct {
	// If set to `true`, the routes between the two networks will
	// be created and managed automatically. Defaults to `true`.
	AutoCreateRoutes interface{}
	// Name of the peering.
	Name interface{}
	// Resource link of the network to add a peering to.
	Network interface{}
	// Resource link of the peer network.
	PeerNetwork interface{}
}
