// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A set of network endpoints belonging to a network endpoint group (NEG). A
// single network endpoint represents a IP address and port combination that is
// part of a specific network endpoint group  (NEG). NEGs are zonal collections
// of these endpoints for GCP resources within a single subnet. **NOTE**:
// Network endpoints cannot be created outside of a network endpoint group.
//
// This resource is authoritative for a single NEG. Any endpoints not specified
// by this resource will be deleted when the resource configuration is applied.
//
// To get more information about NetworkEndpoints, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/networkEndpointGroups)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/load-balancing/docs/negs/)
//
// ## Example Usage
// ### Network Endpoints
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myImage, err := compute.LookupImage(ctx, &compute.LookupImageArgs{
//				Family:  pulumi.StringRef("debian-11"),
//				Project: pulumi.StringRef("debian-cloud"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := compute.NewNetwork(ctx, "defaultNetwork", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSubnetwork, err := compute.NewSubnetwork(ctx, "defaultSubnetwork", &compute.SubnetworkArgs{
//				IpCidrRange: pulumi.String("10.0.0.1/16"),
//				Region:      pulumi.String("us-central1"),
//				Network:     defaultNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewInstance(ctx, "endpoint-instance1", &compute.InstanceArgs{
//				MachineType: pulumi.String("e2-medium"),
//				BootDisk: &compute.InstanceBootDiskArgs{
//					InitializeParams: &compute.InstanceBootDiskInitializeParamsArgs{
//						Image: *pulumi.String(myImage.SelfLink),
//					},
//				},
//				NetworkInterfaces: compute.InstanceNetworkInterfaceArray{
//					&compute.InstanceNetworkInterfaceArgs{
//						Subnetwork: defaultSubnetwork.ID(),
//						AccessConfigs: compute.InstanceNetworkInterfaceAccessConfigArray{
//							nil,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewInstance(ctx, "endpoint-instance2", &compute.InstanceArgs{
//				MachineType: pulumi.String("e2-medium"),
//				BootDisk: &compute.InstanceBootDiskArgs{
//					InitializeParams: &compute.InstanceBootDiskInitializeParamsArgs{
//						Image: *pulumi.String(myImage.SelfLink),
//					},
//				},
//				NetworkInterfaces: compute.InstanceNetworkInterfaceArray{
//					&compute.InstanceNetworkInterfaceArgs{
//						Subnetwork: defaultSubnetwork.ID(),
//						AccessConfigs: compute.InstanceNetworkInterfaceAccessConfigArray{
//							nil,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewNetworkEndpointList(ctx, "default-endpoints", &compute.NetworkEndpointListArgs{
//				NetworkEndpointGroup: pulumi.Any(google_compute_network_endpoint_group.Neg.Name),
//				NetworkEndpoints: compute.NetworkEndpointListNetworkEndpointArray{
//					&compute.NetworkEndpointListNetworkEndpointArgs{
//						Instance: endpoint_instance1.Name,
//						Port:     pulumi.Any(google_compute_network_endpoint_group.Neg.Default_port),
//						IpAddress: endpoint_instance1.NetworkInterfaces.ApplyT(func(networkInterfaces []compute.InstanceNetworkInterface) (*string, error) {
//							return &networkInterfaces[0].NetworkIp, nil
//						}).(pulumi.StringPtrOutput),
//					},
//					&compute.NetworkEndpointListNetworkEndpointArgs{
//						Instance: endpoint_instance2.Name,
//						Port:     pulumi.Any(google_compute_network_endpoint_group.Neg.Default_port),
//						IpAddress: endpoint_instance2.NetworkInterfaces.ApplyT(func(networkInterfaces []compute.InstanceNetworkInterface) (*string, error) {
//							return &networkInterfaces[0].NetworkIp, nil
//						}).(pulumi.StringPtrOutput),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewNetworkEndpointGroup(ctx, "group", &compute.NetworkEndpointGroupArgs{
//				Network:     defaultNetwork.ID(),
//				Subnetwork:  defaultSubnetwork.ID(),
//				DefaultPort: pulumi.Int(90),
//				Zone:        pulumi.String("us-central1-a"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # NetworkEndpoints can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:compute/networkEndpointList:NetworkEndpointList default projects/{{project}}/zones/{{zone}}/networkEndpointGroups/{{network_endpoint_group}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/networkEndpointList:NetworkEndpointList default {{project}}/{{zone}}/{{network_endpoint_group}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/networkEndpointList:NetworkEndpointList default {{zone}}/{{network_endpoint_group}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/networkEndpointList:NetworkEndpointList default {{network_endpoint_group}}
//
// ```
type NetworkEndpointList struct {
	pulumi.CustomResourceState

	// The network endpoint group these endpoints are part of.
	//
	// ***
	NetworkEndpointGroup pulumi.StringOutput `pulumi:"networkEndpointGroup"`
	// The network endpoints to be added to the enclosing network endpoint group
	// (NEG). Each endpoint specifies an IP address and port, along with
	// additional information depending on the NEG type.
	// Structure is documented below.
	NetworkEndpoints NetworkEndpointListNetworkEndpointArrayOutput `pulumi:"networkEndpoints"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Zone where the containing network endpoint group is located.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewNetworkEndpointList registers a new resource with the given unique name, arguments, and options.
func NewNetworkEndpointList(ctx *pulumi.Context,
	name string, args *NetworkEndpointListArgs, opts ...pulumi.ResourceOption) (*NetworkEndpointList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkEndpointGroup == nil {
		return nil, errors.New("invalid value for required argument 'NetworkEndpointGroup'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkEndpointList
	err := ctx.RegisterResource("gcp:compute/networkEndpointList:NetworkEndpointList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkEndpointList gets an existing NetworkEndpointList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkEndpointList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkEndpointListState, opts ...pulumi.ResourceOption) (*NetworkEndpointList, error) {
	var resource NetworkEndpointList
	err := ctx.ReadResource("gcp:compute/networkEndpointList:NetworkEndpointList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkEndpointList resources.
type networkEndpointListState struct {
	// The network endpoint group these endpoints are part of.
	//
	// ***
	NetworkEndpointGroup *string `pulumi:"networkEndpointGroup"`
	// The network endpoints to be added to the enclosing network endpoint group
	// (NEG). Each endpoint specifies an IP address and port, along with
	// additional information depending on the NEG type.
	// Structure is documented below.
	NetworkEndpoints []NetworkEndpointListNetworkEndpoint `pulumi:"networkEndpoints"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Zone where the containing network endpoint group is located.
	Zone *string `pulumi:"zone"`
}

type NetworkEndpointListState struct {
	// The network endpoint group these endpoints are part of.
	//
	// ***
	NetworkEndpointGroup pulumi.StringPtrInput
	// The network endpoints to be added to the enclosing network endpoint group
	// (NEG). Each endpoint specifies an IP address and port, along with
	// additional information depending on the NEG type.
	// Structure is documented below.
	NetworkEndpoints NetworkEndpointListNetworkEndpointArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Zone where the containing network endpoint group is located.
	Zone pulumi.StringPtrInput
}

func (NetworkEndpointListState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkEndpointListState)(nil)).Elem()
}

type networkEndpointListArgs struct {
	// The network endpoint group these endpoints are part of.
	//
	// ***
	NetworkEndpointGroup string `pulumi:"networkEndpointGroup"`
	// The network endpoints to be added to the enclosing network endpoint group
	// (NEG). Each endpoint specifies an IP address and port, along with
	// additional information depending on the NEG type.
	// Structure is documented below.
	NetworkEndpoints []NetworkEndpointListNetworkEndpoint `pulumi:"networkEndpoints"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Zone where the containing network endpoint group is located.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a NetworkEndpointList resource.
type NetworkEndpointListArgs struct {
	// The network endpoint group these endpoints are part of.
	//
	// ***
	NetworkEndpointGroup pulumi.StringInput
	// The network endpoints to be added to the enclosing network endpoint group
	// (NEG). Each endpoint specifies an IP address and port, along with
	// additional information depending on the NEG type.
	// Structure is documented below.
	NetworkEndpoints NetworkEndpointListNetworkEndpointArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Zone where the containing network endpoint group is located.
	Zone pulumi.StringPtrInput
}

func (NetworkEndpointListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkEndpointListArgs)(nil)).Elem()
}

type NetworkEndpointListInput interface {
	pulumi.Input

	ToNetworkEndpointListOutput() NetworkEndpointListOutput
	ToNetworkEndpointListOutputWithContext(ctx context.Context) NetworkEndpointListOutput
}

func (*NetworkEndpointList) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkEndpointList)(nil)).Elem()
}

func (i *NetworkEndpointList) ToNetworkEndpointListOutput() NetworkEndpointListOutput {
	return i.ToNetworkEndpointListOutputWithContext(context.Background())
}

func (i *NetworkEndpointList) ToNetworkEndpointListOutputWithContext(ctx context.Context) NetworkEndpointListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointListOutput)
}

// NetworkEndpointListArrayInput is an input type that accepts NetworkEndpointListArray and NetworkEndpointListArrayOutput values.
// You can construct a concrete instance of `NetworkEndpointListArrayInput` via:
//
//	NetworkEndpointListArray{ NetworkEndpointListArgs{...} }
type NetworkEndpointListArrayInput interface {
	pulumi.Input

	ToNetworkEndpointListArrayOutput() NetworkEndpointListArrayOutput
	ToNetworkEndpointListArrayOutputWithContext(context.Context) NetworkEndpointListArrayOutput
}

type NetworkEndpointListArray []NetworkEndpointListInput

func (NetworkEndpointListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkEndpointList)(nil)).Elem()
}

func (i NetworkEndpointListArray) ToNetworkEndpointListArrayOutput() NetworkEndpointListArrayOutput {
	return i.ToNetworkEndpointListArrayOutputWithContext(context.Background())
}

func (i NetworkEndpointListArray) ToNetworkEndpointListArrayOutputWithContext(ctx context.Context) NetworkEndpointListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointListArrayOutput)
}

// NetworkEndpointListMapInput is an input type that accepts NetworkEndpointListMap and NetworkEndpointListMapOutput values.
// You can construct a concrete instance of `NetworkEndpointListMapInput` via:
//
//	NetworkEndpointListMap{ "key": NetworkEndpointListArgs{...} }
type NetworkEndpointListMapInput interface {
	pulumi.Input

	ToNetworkEndpointListMapOutput() NetworkEndpointListMapOutput
	ToNetworkEndpointListMapOutputWithContext(context.Context) NetworkEndpointListMapOutput
}

type NetworkEndpointListMap map[string]NetworkEndpointListInput

func (NetworkEndpointListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkEndpointList)(nil)).Elem()
}

func (i NetworkEndpointListMap) ToNetworkEndpointListMapOutput() NetworkEndpointListMapOutput {
	return i.ToNetworkEndpointListMapOutputWithContext(context.Background())
}

func (i NetworkEndpointListMap) ToNetworkEndpointListMapOutputWithContext(ctx context.Context) NetworkEndpointListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointListMapOutput)
}

type NetworkEndpointListOutput struct{ *pulumi.OutputState }

func (NetworkEndpointListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkEndpointList)(nil)).Elem()
}

func (o NetworkEndpointListOutput) ToNetworkEndpointListOutput() NetworkEndpointListOutput {
	return o
}

func (o NetworkEndpointListOutput) ToNetworkEndpointListOutputWithContext(ctx context.Context) NetworkEndpointListOutput {
	return o
}

// The network endpoint group these endpoints are part of.
//
// ***
func (o NetworkEndpointListOutput) NetworkEndpointGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkEndpointList) pulumi.StringOutput { return v.NetworkEndpointGroup }).(pulumi.StringOutput)
}

// The network endpoints to be added to the enclosing network endpoint group
// (NEG). Each endpoint specifies an IP address and port, along with
// additional information depending on the NEG type.
// Structure is documented below.
func (o NetworkEndpointListOutput) NetworkEndpoints() NetworkEndpointListNetworkEndpointArrayOutput {
	return o.ApplyT(func(v *NetworkEndpointList) NetworkEndpointListNetworkEndpointArrayOutput { return v.NetworkEndpoints }).(NetworkEndpointListNetworkEndpointArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o NetworkEndpointListOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkEndpointList) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Zone where the containing network endpoint group is located.
func (o NetworkEndpointListOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkEndpointList) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type NetworkEndpointListArrayOutput struct{ *pulumi.OutputState }

func (NetworkEndpointListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkEndpointList)(nil)).Elem()
}

func (o NetworkEndpointListArrayOutput) ToNetworkEndpointListArrayOutput() NetworkEndpointListArrayOutput {
	return o
}

func (o NetworkEndpointListArrayOutput) ToNetworkEndpointListArrayOutputWithContext(ctx context.Context) NetworkEndpointListArrayOutput {
	return o
}

func (o NetworkEndpointListArrayOutput) Index(i pulumi.IntInput) NetworkEndpointListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkEndpointList {
		return vs[0].([]*NetworkEndpointList)[vs[1].(int)]
	}).(NetworkEndpointListOutput)
}

type NetworkEndpointListMapOutput struct{ *pulumi.OutputState }

func (NetworkEndpointListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkEndpointList)(nil)).Elem()
}

func (o NetworkEndpointListMapOutput) ToNetworkEndpointListMapOutput() NetworkEndpointListMapOutput {
	return o
}

func (o NetworkEndpointListMapOutput) ToNetworkEndpointListMapOutputWithContext(ctx context.Context) NetworkEndpointListMapOutput {
	return o
}

func (o NetworkEndpointListMapOutput) MapIndex(k pulumi.StringInput) NetworkEndpointListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkEndpointList {
		return vs[0].(map[string]*NetworkEndpointList)[vs[1].(string)]
	}).(NetworkEndpointListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkEndpointListInput)(nil)).Elem(), &NetworkEndpointList{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkEndpointListArrayInput)(nil)).Elem(), NetworkEndpointListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkEndpointListMapInput)(nil)).Elem(), NetworkEndpointListMap{})
	pulumi.RegisterOutputType(NetworkEndpointListOutput{})
	pulumi.RegisterOutputType(NetworkEndpointListArrayOutput{})
	pulumi.RegisterOutputType(NetworkEndpointListMapOutput{})
}
