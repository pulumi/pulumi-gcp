// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RegionBackendServiceIamBinding struct {
	pulumi.CustomResourceState

	Condition RegionBackendServiceIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag      pulumi.StringOutput                              `pulumi:"etag"`
	Members   pulumi.StringArrayOutput                         `pulumi:"members"`
	Name      pulumi.StringOutput                              `pulumi:"name"`
	Project   pulumi.StringOutput                              `pulumi:"project"`
	Region    pulumi.StringOutput                              `pulumi:"region"`
	Role      pulumi.StringOutput                              `pulumi:"role"`
}

// NewRegionBackendServiceIamBinding registers a new resource with the given unique name, arguments, and options.
func NewRegionBackendServiceIamBinding(ctx *pulumi.Context,
	name string, args *RegionBackendServiceIamBindingArgs, opts ...pulumi.ResourceOption) (*RegionBackendServiceIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource RegionBackendServiceIamBinding
	err := ctx.RegisterResource("gcp:compute/regionBackendServiceIamBinding:RegionBackendServiceIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionBackendServiceIamBinding gets an existing RegionBackendServiceIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionBackendServiceIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionBackendServiceIamBindingState, opts ...pulumi.ResourceOption) (*RegionBackendServiceIamBinding, error) {
	var resource RegionBackendServiceIamBinding
	err := ctx.ReadResource("gcp:compute/regionBackendServiceIamBinding:RegionBackendServiceIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionBackendServiceIamBinding resources.
type regionBackendServiceIamBindingState struct {
	Condition *RegionBackendServiceIamBindingCondition `pulumi:"condition"`
	Etag      *string                                  `pulumi:"etag"`
	Members   []string                                 `pulumi:"members"`
	Name      *string                                  `pulumi:"name"`
	Project   *string                                  `pulumi:"project"`
	Region    *string                                  `pulumi:"region"`
	Role      *string                                  `pulumi:"role"`
}

type RegionBackendServiceIamBindingState struct {
	Condition RegionBackendServiceIamBindingConditionPtrInput
	Etag      pulumi.StringPtrInput
	Members   pulumi.StringArrayInput
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	Region    pulumi.StringPtrInput
	Role      pulumi.StringPtrInput
}

func (RegionBackendServiceIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionBackendServiceIamBindingState)(nil)).Elem()
}

type regionBackendServiceIamBindingArgs struct {
	Condition *RegionBackendServiceIamBindingCondition `pulumi:"condition"`
	Members   []string                                 `pulumi:"members"`
	Name      *string                                  `pulumi:"name"`
	Project   *string                                  `pulumi:"project"`
	Region    *string                                  `pulumi:"region"`
	Role      string                                   `pulumi:"role"`
}

// The set of arguments for constructing a RegionBackendServiceIamBinding resource.
type RegionBackendServiceIamBindingArgs struct {
	Condition RegionBackendServiceIamBindingConditionPtrInput
	Members   pulumi.StringArrayInput
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	Region    pulumi.StringPtrInput
	Role      pulumi.StringInput
}

func (RegionBackendServiceIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionBackendServiceIamBindingArgs)(nil)).Elem()
}

type RegionBackendServiceIamBindingInput interface {
	pulumi.Input

	ToRegionBackendServiceIamBindingOutput() RegionBackendServiceIamBindingOutput
	ToRegionBackendServiceIamBindingOutputWithContext(ctx context.Context) RegionBackendServiceIamBindingOutput
}

func (*RegionBackendServiceIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceIamBinding)(nil)).Elem()
}

func (i *RegionBackendServiceIamBinding) ToRegionBackendServiceIamBindingOutput() RegionBackendServiceIamBindingOutput {
	return i.ToRegionBackendServiceIamBindingOutputWithContext(context.Background())
}

func (i *RegionBackendServiceIamBinding) ToRegionBackendServiceIamBindingOutputWithContext(ctx context.Context) RegionBackendServiceIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceIamBindingOutput)
}

// RegionBackendServiceIamBindingArrayInput is an input type that accepts RegionBackendServiceIamBindingArray and RegionBackendServiceIamBindingArrayOutput values.
// You can construct a concrete instance of `RegionBackendServiceIamBindingArrayInput` via:
//
//          RegionBackendServiceIamBindingArray{ RegionBackendServiceIamBindingArgs{...} }
type RegionBackendServiceIamBindingArrayInput interface {
	pulumi.Input

	ToRegionBackendServiceIamBindingArrayOutput() RegionBackendServiceIamBindingArrayOutput
	ToRegionBackendServiceIamBindingArrayOutputWithContext(context.Context) RegionBackendServiceIamBindingArrayOutput
}

type RegionBackendServiceIamBindingArray []RegionBackendServiceIamBindingInput

func (RegionBackendServiceIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionBackendServiceIamBinding)(nil)).Elem()
}

func (i RegionBackendServiceIamBindingArray) ToRegionBackendServiceIamBindingArrayOutput() RegionBackendServiceIamBindingArrayOutput {
	return i.ToRegionBackendServiceIamBindingArrayOutputWithContext(context.Background())
}

func (i RegionBackendServiceIamBindingArray) ToRegionBackendServiceIamBindingArrayOutputWithContext(ctx context.Context) RegionBackendServiceIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceIamBindingArrayOutput)
}

// RegionBackendServiceIamBindingMapInput is an input type that accepts RegionBackendServiceIamBindingMap and RegionBackendServiceIamBindingMapOutput values.
// You can construct a concrete instance of `RegionBackendServiceIamBindingMapInput` via:
//
//          RegionBackendServiceIamBindingMap{ "key": RegionBackendServiceIamBindingArgs{...} }
type RegionBackendServiceIamBindingMapInput interface {
	pulumi.Input

	ToRegionBackendServiceIamBindingMapOutput() RegionBackendServiceIamBindingMapOutput
	ToRegionBackendServiceIamBindingMapOutputWithContext(context.Context) RegionBackendServiceIamBindingMapOutput
}

type RegionBackendServiceIamBindingMap map[string]RegionBackendServiceIamBindingInput

func (RegionBackendServiceIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionBackendServiceIamBinding)(nil)).Elem()
}

func (i RegionBackendServiceIamBindingMap) ToRegionBackendServiceIamBindingMapOutput() RegionBackendServiceIamBindingMapOutput {
	return i.ToRegionBackendServiceIamBindingMapOutputWithContext(context.Background())
}

func (i RegionBackendServiceIamBindingMap) ToRegionBackendServiceIamBindingMapOutputWithContext(ctx context.Context) RegionBackendServiceIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceIamBindingMapOutput)
}

type RegionBackendServiceIamBindingOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceIamBinding)(nil)).Elem()
}

func (o RegionBackendServiceIamBindingOutput) ToRegionBackendServiceIamBindingOutput() RegionBackendServiceIamBindingOutput {
	return o
}

func (o RegionBackendServiceIamBindingOutput) ToRegionBackendServiceIamBindingOutputWithContext(ctx context.Context) RegionBackendServiceIamBindingOutput {
	return o
}

type RegionBackendServiceIamBindingArrayOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionBackendServiceIamBinding)(nil)).Elem()
}

func (o RegionBackendServiceIamBindingArrayOutput) ToRegionBackendServiceIamBindingArrayOutput() RegionBackendServiceIamBindingArrayOutput {
	return o
}

func (o RegionBackendServiceIamBindingArrayOutput) ToRegionBackendServiceIamBindingArrayOutputWithContext(ctx context.Context) RegionBackendServiceIamBindingArrayOutput {
	return o
}

func (o RegionBackendServiceIamBindingArrayOutput) Index(i pulumi.IntInput) RegionBackendServiceIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionBackendServiceIamBinding {
		return vs[0].([]*RegionBackendServiceIamBinding)[vs[1].(int)]
	}).(RegionBackendServiceIamBindingOutput)
}

type RegionBackendServiceIamBindingMapOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionBackendServiceIamBinding)(nil)).Elem()
}

func (o RegionBackendServiceIamBindingMapOutput) ToRegionBackendServiceIamBindingMapOutput() RegionBackendServiceIamBindingMapOutput {
	return o
}

func (o RegionBackendServiceIamBindingMapOutput) ToRegionBackendServiceIamBindingMapOutputWithContext(ctx context.Context) RegionBackendServiceIamBindingMapOutput {
	return o
}

func (o RegionBackendServiceIamBindingMapOutput) MapIndex(k pulumi.StringInput) RegionBackendServiceIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionBackendServiceIamBinding {
		return vs[0].(map[string]*RegionBackendServiceIamBinding)[vs[1].(string)]
	}).(RegionBackendServiceIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceIamBindingInput)(nil)).Elem(), &RegionBackendServiceIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceIamBindingArrayInput)(nil)).Elem(), RegionBackendServiceIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceIamBindingMapInput)(nil)).Elem(), RegionBackendServiceIamBindingMap{})
	pulumi.RegisterOutputType(RegionBackendServiceIamBindingOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceIamBindingArrayOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceIamBindingMapOutput{})
}
