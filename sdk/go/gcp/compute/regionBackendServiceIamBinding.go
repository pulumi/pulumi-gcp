// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/regions/{{region}}/backendServices/{{name}} * {{project}}/{{region}}/{{name}} * {{region}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Compute Engine regionbackendservice IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:compute/regionBackendServiceIamBinding:RegionBackendServiceIamBinding editor "projects/{{project}}/regions/{{region}}/backendServices/{{region_backend_service}} roles/compute.admin user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:compute/regionBackendServiceIamBinding:RegionBackendServiceIamBinding editor "projects/{{project}}/regions/{{region}}/backendServices/{{region_backend_service}} roles/compute.admin"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:compute/regionBackendServiceIamBinding:RegionBackendServiceIamBinding editor projects/{{project}}/regions/{{region}}/backendServices/{{region_backend_service}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type RegionBackendServiceIamBinding struct {
	pulumi.CustomResourceState

	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition RegionBackendServiceIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringOutput      `pulumi:"etag"`
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// The role that should be applied. Only one
	// `compute.RegionBackendServiceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewRegionBackendServiceIamBinding registers a new resource with the given unique name, arguments, and options.
func NewRegionBackendServiceIamBinding(ctx *pulumi.Context,
	name string, args *RegionBackendServiceIamBindingArgs, opts ...pulumi.ResourceOption) (*RegionBackendServiceIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionBackendServiceIamBinding
	err := ctx.RegisterResource("gcp:compute/regionBackendServiceIamBinding:RegionBackendServiceIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionBackendServiceIamBinding gets an existing RegionBackendServiceIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionBackendServiceIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionBackendServiceIamBindingState, opts ...pulumi.ResourceOption) (*RegionBackendServiceIamBinding, error) {
	var resource RegionBackendServiceIamBinding
	err := ctx.ReadResource("gcp:compute/regionBackendServiceIamBinding:RegionBackendServiceIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionBackendServiceIamBinding resources.
type regionBackendServiceIamBindingState struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *RegionBackendServiceIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag    *string  `pulumi:"etag"`
	Members []string `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `compute.RegionBackendServiceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type RegionBackendServiceIamBindingState struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition RegionBackendServiceIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringPtrInput
	Members pulumi.StringArrayInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `compute.RegionBackendServiceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (RegionBackendServiceIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionBackendServiceIamBindingState)(nil)).Elem()
}

type regionBackendServiceIamBindingArgs struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *RegionBackendServiceIamBindingCondition `pulumi:"condition"`
	Members   []string                                 `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
	// The role that should be applied. Only one
	// `compute.RegionBackendServiceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a RegionBackendServiceIamBinding resource.
type RegionBackendServiceIamBindingArgs struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition RegionBackendServiceIamBindingConditionPtrInput
	Members   pulumi.StringArrayInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `compute.RegionBackendServiceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (RegionBackendServiceIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionBackendServiceIamBindingArgs)(nil)).Elem()
}

type RegionBackendServiceIamBindingInput interface {
	pulumi.Input

	ToRegionBackendServiceIamBindingOutput() RegionBackendServiceIamBindingOutput
	ToRegionBackendServiceIamBindingOutputWithContext(ctx context.Context) RegionBackendServiceIamBindingOutput
}

func (*RegionBackendServiceIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceIamBinding)(nil)).Elem()
}

func (i *RegionBackendServiceIamBinding) ToRegionBackendServiceIamBindingOutput() RegionBackendServiceIamBindingOutput {
	return i.ToRegionBackendServiceIamBindingOutputWithContext(context.Background())
}

func (i *RegionBackendServiceIamBinding) ToRegionBackendServiceIamBindingOutputWithContext(ctx context.Context) RegionBackendServiceIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceIamBindingOutput)
}

// RegionBackendServiceIamBindingArrayInput is an input type that accepts RegionBackendServiceIamBindingArray and RegionBackendServiceIamBindingArrayOutput values.
// You can construct a concrete instance of `RegionBackendServiceIamBindingArrayInput` via:
//
//	RegionBackendServiceIamBindingArray{ RegionBackendServiceIamBindingArgs{...} }
type RegionBackendServiceIamBindingArrayInput interface {
	pulumi.Input

	ToRegionBackendServiceIamBindingArrayOutput() RegionBackendServiceIamBindingArrayOutput
	ToRegionBackendServiceIamBindingArrayOutputWithContext(context.Context) RegionBackendServiceIamBindingArrayOutput
}

type RegionBackendServiceIamBindingArray []RegionBackendServiceIamBindingInput

func (RegionBackendServiceIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionBackendServiceIamBinding)(nil)).Elem()
}

func (i RegionBackendServiceIamBindingArray) ToRegionBackendServiceIamBindingArrayOutput() RegionBackendServiceIamBindingArrayOutput {
	return i.ToRegionBackendServiceIamBindingArrayOutputWithContext(context.Background())
}

func (i RegionBackendServiceIamBindingArray) ToRegionBackendServiceIamBindingArrayOutputWithContext(ctx context.Context) RegionBackendServiceIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceIamBindingArrayOutput)
}

// RegionBackendServiceIamBindingMapInput is an input type that accepts RegionBackendServiceIamBindingMap and RegionBackendServiceIamBindingMapOutput values.
// You can construct a concrete instance of `RegionBackendServiceIamBindingMapInput` via:
//
//	RegionBackendServiceIamBindingMap{ "key": RegionBackendServiceIamBindingArgs{...} }
type RegionBackendServiceIamBindingMapInput interface {
	pulumi.Input

	ToRegionBackendServiceIamBindingMapOutput() RegionBackendServiceIamBindingMapOutput
	ToRegionBackendServiceIamBindingMapOutputWithContext(context.Context) RegionBackendServiceIamBindingMapOutput
}

type RegionBackendServiceIamBindingMap map[string]RegionBackendServiceIamBindingInput

func (RegionBackendServiceIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionBackendServiceIamBinding)(nil)).Elem()
}

func (i RegionBackendServiceIamBindingMap) ToRegionBackendServiceIamBindingMapOutput() RegionBackendServiceIamBindingMapOutput {
	return i.ToRegionBackendServiceIamBindingMapOutputWithContext(context.Background())
}

func (i RegionBackendServiceIamBindingMap) ToRegionBackendServiceIamBindingMapOutputWithContext(ctx context.Context) RegionBackendServiceIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceIamBindingMapOutput)
}

type RegionBackendServiceIamBindingOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceIamBinding)(nil)).Elem()
}

func (o RegionBackendServiceIamBindingOutput) ToRegionBackendServiceIamBindingOutput() RegionBackendServiceIamBindingOutput {
	return o
}

func (o RegionBackendServiceIamBindingOutput) ToRegionBackendServiceIamBindingOutputWithContext(ctx context.Context) RegionBackendServiceIamBindingOutput {
	return o
}

// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
// Structure is documented below.
func (o RegionBackendServiceIamBindingOutput) Condition() RegionBackendServiceIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *RegionBackendServiceIamBinding) RegionBackendServiceIamBindingConditionPtrOutput {
		return v.Condition
	}).(RegionBackendServiceIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o RegionBackendServiceIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendServiceIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o RegionBackendServiceIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionBackendServiceIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o RegionBackendServiceIamBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendServiceIamBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o RegionBackendServiceIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendServiceIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The Region in which the created backend service should reside.
// If it is not provided, the provider region is used.
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
// region is specified, it is taken from the provider configuration.
func (o RegionBackendServiceIamBindingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendServiceIamBinding) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `compute.RegionBackendServiceIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o RegionBackendServiceIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendServiceIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type RegionBackendServiceIamBindingArrayOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionBackendServiceIamBinding)(nil)).Elem()
}

func (o RegionBackendServiceIamBindingArrayOutput) ToRegionBackendServiceIamBindingArrayOutput() RegionBackendServiceIamBindingArrayOutput {
	return o
}

func (o RegionBackendServiceIamBindingArrayOutput) ToRegionBackendServiceIamBindingArrayOutputWithContext(ctx context.Context) RegionBackendServiceIamBindingArrayOutput {
	return o
}

func (o RegionBackendServiceIamBindingArrayOutput) Index(i pulumi.IntInput) RegionBackendServiceIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionBackendServiceIamBinding {
		return vs[0].([]*RegionBackendServiceIamBinding)[vs[1].(int)]
	}).(RegionBackendServiceIamBindingOutput)
}

type RegionBackendServiceIamBindingMapOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionBackendServiceIamBinding)(nil)).Elem()
}

func (o RegionBackendServiceIamBindingMapOutput) ToRegionBackendServiceIamBindingMapOutput() RegionBackendServiceIamBindingMapOutput {
	return o
}

func (o RegionBackendServiceIamBindingMapOutput) ToRegionBackendServiceIamBindingMapOutputWithContext(ctx context.Context) RegionBackendServiceIamBindingMapOutput {
	return o
}

func (o RegionBackendServiceIamBindingMapOutput) MapIndex(k pulumi.StringInput) RegionBackendServiceIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionBackendServiceIamBinding {
		return vs[0].(map[string]*RegionBackendServiceIamBinding)[vs[1].(string)]
	}).(RegionBackendServiceIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceIamBindingInput)(nil)).Elem(), &RegionBackendServiceIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceIamBindingArrayInput)(nil)).Elem(), RegionBackendServiceIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceIamBindingMapInput)(nil)).Elem(), RegionBackendServiceIamBindingMap{})
	pulumi.RegisterOutputType(RegionBackendServiceIamBindingOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceIamBindingArrayOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceIamBindingMapOutput{})
}
