// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Starts and stops asynchronous persistent disk replication. For more information
// see [the official documentation](https://cloud.google.com/compute/docs/disks/async-pd/about)
// and the [API](https://cloud.google.com/compute/docs/reference/rest/v1/disks).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewDisk(ctx, "primary-disk", &compute.DiskArgs{
//				Type:                   pulumi.String("pd-ssd"),
//				Zone:                   pulumi.String("europe-west4-a"),
//				PhysicalBlockSizeBytes: pulumi.Int(4096),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewDisk(ctx, "secondary-disk", &compute.DiskArgs{
//				Type: pulumi.String("pd-ssd"),
//				Zone: pulumi.String("europe-west3-a"),
//				AsyncPrimaryDisk: &compute.DiskAsyncPrimaryDiskArgs{
//					Disk: primary_disk.ID(),
//				},
//				PhysicalBlockSizeBytes: pulumi.Int(4096),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewDiskAsyncReplication(ctx, "replication", &compute.DiskAsyncReplicationArgs{
//				PrimaryDisk: primary_disk.ID(),
//				SecondaryDisk: &compute.DiskAsyncReplicationSecondaryDiskArgs{
//					Disk: secondary_disk.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DiskAsyncReplication struct {
	pulumi.CustomResourceState

	// The primary disk (source of replication).
	PrimaryDisk pulumi.StringOutput `pulumi:"primaryDisk"`
	// The secondary disk (target of replication). You can specify only one value. Structure is documented below.
	//
	// The `secondaryDisk` block includes:
	SecondaryDisk DiskAsyncReplicationSecondaryDiskOutput `pulumi:"secondaryDisk"`
}

// NewDiskAsyncReplication registers a new resource with the given unique name, arguments, and options.
func NewDiskAsyncReplication(ctx *pulumi.Context,
	name string, args *DiskAsyncReplicationArgs, opts ...pulumi.ResourceOption) (*DiskAsyncReplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrimaryDisk == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryDisk'")
	}
	if args.SecondaryDisk == nil {
		return nil, errors.New("invalid value for required argument 'SecondaryDisk'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DiskAsyncReplication
	err := ctx.RegisterResource("gcp:compute/diskAsyncReplication:DiskAsyncReplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiskAsyncReplication gets an existing DiskAsyncReplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiskAsyncReplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiskAsyncReplicationState, opts ...pulumi.ResourceOption) (*DiskAsyncReplication, error) {
	var resource DiskAsyncReplication
	err := ctx.ReadResource("gcp:compute/diskAsyncReplication:DiskAsyncReplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiskAsyncReplication resources.
type diskAsyncReplicationState struct {
	// The primary disk (source of replication).
	PrimaryDisk *string `pulumi:"primaryDisk"`
	// The secondary disk (target of replication). You can specify only one value. Structure is documented below.
	//
	// The `secondaryDisk` block includes:
	SecondaryDisk *DiskAsyncReplicationSecondaryDisk `pulumi:"secondaryDisk"`
}

type DiskAsyncReplicationState struct {
	// The primary disk (source of replication).
	PrimaryDisk pulumi.StringPtrInput
	// The secondary disk (target of replication). You can specify only one value. Structure is documented below.
	//
	// The `secondaryDisk` block includes:
	SecondaryDisk DiskAsyncReplicationSecondaryDiskPtrInput
}

func (DiskAsyncReplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*diskAsyncReplicationState)(nil)).Elem()
}

type diskAsyncReplicationArgs struct {
	// The primary disk (source of replication).
	PrimaryDisk string `pulumi:"primaryDisk"`
	// The secondary disk (target of replication). You can specify only one value. Structure is documented below.
	//
	// The `secondaryDisk` block includes:
	SecondaryDisk DiskAsyncReplicationSecondaryDisk `pulumi:"secondaryDisk"`
}

// The set of arguments for constructing a DiskAsyncReplication resource.
type DiskAsyncReplicationArgs struct {
	// The primary disk (source of replication).
	PrimaryDisk pulumi.StringInput
	// The secondary disk (target of replication). You can specify only one value. Structure is documented below.
	//
	// The `secondaryDisk` block includes:
	SecondaryDisk DiskAsyncReplicationSecondaryDiskInput
}

func (DiskAsyncReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diskAsyncReplicationArgs)(nil)).Elem()
}

type DiskAsyncReplicationInput interface {
	pulumi.Input

	ToDiskAsyncReplicationOutput() DiskAsyncReplicationOutput
	ToDiskAsyncReplicationOutputWithContext(ctx context.Context) DiskAsyncReplicationOutput
}

func (*DiskAsyncReplication) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskAsyncReplication)(nil)).Elem()
}

func (i *DiskAsyncReplication) ToDiskAsyncReplicationOutput() DiskAsyncReplicationOutput {
	return i.ToDiskAsyncReplicationOutputWithContext(context.Background())
}

func (i *DiskAsyncReplication) ToDiskAsyncReplicationOutputWithContext(ctx context.Context) DiskAsyncReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAsyncReplicationOutput)
}

// DiskAsyncReplicationArrayInput is an input type that accepts DiskAsyncReplicationArray and DiskAsyncReplicationArrayOutput values.
// You can construct a concrete instance of `DiskAsyncReplicationArrayInput` via:
//
//	DiskAsyncReplicationArray{ DiskAsyncReplicationArgs{...} }
type DiskAsyncReplicationArrayInput interface {
	pulumi.Input

	ToDiskAsyncReplicationArrayOutput() DiskAsyncReplicationArrayOutput
	ToDiskAsyncReplicationArrayOutputWithContext(context.Context) DiskAsyncReplicationArrayOutput
}

type DiskAsyncReplicationArray []DiskAsyncReplicationInput

func (DiskAsyncReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiskAsyncReplication)(nil)).Elem()
}

func (i DiskAsyncReplicationArray) ToDiskAsyncReplicationArrayOutput() DiskAsyncReplicationArrayOutput {
	return i.ToDiskAsyncReplicationArrayOutputWithContext(context.Background())
}

func (i DiskAsyncReplicationArray) ToDiskAsyncReplicationArrayOutputWithContext(ctx context.Context) DiskAsyncReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAsyncReplicationArrayOutput)
}

// DiskAsyncReplicationMapInput is an input type that accepts DiskAsyncReplicationMap and DiskAsyncReplicationMapOutput values.
// You can construct a concrete instance of `DiskAsyncReplicationMapInput` via:
//
//	DiskAsyncReplicationMap{ "key": DiskAsyncReplicationArgs{...} }
type DiskAsyncReplicationMapInput interface {
	pulumi.Input

	ToDiskAsyncReplicationMapOutput() DiskAsyncReplicationMapOutput
	ToDiskAsyncReplicationMapOutputWithContext(context.Context) DiskAsyncReplicationMapOutput
}

type DiskAsyncReplicationMap map[string]DiskAsyncReplicationInput

func (DiskAsyncReplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiskAsyncReplication)(nil)).Elem()
}

func (i DiskAsyncReplicationMap) ToDiskAsyncReplicationMapOutput() DiskAsyncReplicationMapOutput {
	return i.ToDiskAsyncReplicationMapOutputWithContext(context.Background())
}

func (i DiskAsyncReplicationMap) ToDiskAsyncReplicationMapOutputWithContext(ctx context.Context) DiskAsyncReplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAsyncReplicationMapOutput)
}

type DiskAsyncReplicationOutput struct{ *pulumi.OutputState }

func (DiskAsyncReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskAsyncReplication)(nil)).Elem()
}

func (o DiskAsyncReplicationOutput) ToDiskAsyncReplicationOutput() DiskAsyncReplicationOutput {
	return o
}

func (o DiskAsyncReplicationOutput) ToDiskAsyncReplicationOutputWithContext(ctx context.Context) DiskAsyncReplicationOutput {
	return o
}

// The primary disk (source of replication).
func (o DiskAsyncReplicationOutput) PrimaryDisk() pulumi.StringOutput {
	return o.ApplyT(func(v *DiskAsyncReplication) pulumi.StringOutput { return v.PrimaryDisk }).(pulumi.StringOutput)
}

// The secondary disk (target of replication). You can specify only one value. Structure is documented below.
//
// The `secondaryDisk` block includes:
func (o DiskAsyncReplicationOutput) SecondaryDisk() DiskAsyncReplicationSecondaryDiskOutput {
	return o.ApplyT(func(v *DiskAsyncReplication) DiskAsyncReplicationSecondaryDiskOutput { return v.SecondaryDisk }).(DiskAsyncReplicationSecondaryDiskOutput)
}

type DiskAsyncReplicationArrayOutput struct{ *pulumi.OutputState }

func (DiskAsyncReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiskAsyncReplication)(nil)).Elem()
}

func (o DiskAsyncReplicationArrayOutput) ToDiskAsyncReplicationArrayOutput() DiskAsyncReplicationArrayOutput {
	return o
}

func (o DiskAsyncReplicationArrayOutput) ToDiskAsyncReplicationArrayOutputWithContext(ctx context.Context) DiskAsyncReplicationArrayOutput {
	return o
}

func (o DiskAsyncReplicationArrayOutput) Index(i pulumi.IntInput) DiskAsyncReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DiskAsyncReplication {
		return vs[0].([]*DiskAsyncReplication)[vs[1].(int)]
	}).(DiskAsyncReplicationOutput)
}

type DiskAsyncReplicationMapOutput struct{ *pulumi.OutputState }

func (DiskAsyncReplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiskAsyncReplication)(nil)).Elem()
}

func (o DiskAsyncReplicationMapOutput) ToDiskAsyncReplicationMapOutput() DiskAsyncReplicationMapOutput {
	return o
}

func (o DiskAsyncReplicationMapOutput) ToDiskAsyncReplicationMapOutputWithContext(ctx context.Context) DiskAsyncReplicationMapOutput {
	return o
}

func (o DiskAsyncReplicationMapOutput) MapIndex(k pulumi.StringInput) DiskAsyncReplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DiskAsyncReplication {
		return vs[0].(map[string]*DiskAsyncReplication)[vs[1].(string)]
	}).(DiskAsyncReplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiskAsyncReplicationInput)(nil)).Elem(), &DiskAsyncReplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskAsyncReplicationArrayInput)(nil)).Elem(), DiskAsyncReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskAsyncReplicationMapInput)(nil)).Elem(), DiskAsyncReplicationMap{})
	pulumi.RegisterOutputType(DiskAsyncReplicationOutput{})
	pulumi.RegisterOutputType(DiskAsyncReplicationArrayOutput{})
	pulumi.RegisterOutputType(DiskAsyncReplicationMapOutput{})
}
