// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Compute Engine InstantSnapshot. Each of these resources serves a different use case:
//
// * `compute.InstantSnapshotIamPolicy`: Authoritative. Sets the IAM policy for the instantsnapshot and replaces any existing policy already attached.
// * `compute.InstantSnapshotIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the instantsnapshot are preserved.
// * `compute.InstantSnapshotIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the instantsnapshot are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `compute.InstantSnapshotIamPolicy`: Retrieves the IAM policy for the instantsnapshot
//
// > **Note:** `compute.InstantSnapshotIamPolicy` **cannot** be used in conjunction with `compute.InstantSnapshotIamBinding` and `compute.InstantSnapshotIamMember` or they will fight over what your policy should be.
//
// > **Note:** `compute.InstantSnapshotIamBinding` resources **can be** used in conjunction with `compute.InstantSnapshotIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## compute.InstantSnapshotIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/compute.storageAdmin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewInstantSnapshotIamPolicy(ctx, "policy", &compute.InstantSnapshotIamPolicyArgs{
//				Project:    pulumi.Any(_default.Project),
//				Zone:       pulumi.Any(_default.Zone),
//				Name:       pulumi.Any(_default.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/compute.storageAdmin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewInstantSnapshotIamPolicy(ctx, "policy", &compute.InstantSnapshotIamPolicyArgs{
//				Project:    pulumi.Any(_default.Project),
//				Zone:       pulumi.Any(_default.Zone),
//				Name:       pulumi.Any(_default.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## compute.InstantSnapshotIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewInstantSnapshotIamBinding(ctx, "binding", &compute.InstantSnapshotIamBindingArgs{
//				Project: pulumi.Any(_default.Project),
//				Zone:    pulumi.Any(_default.Zone),
//				Name:    pulumi.Any(_default.Name),
//				Role:    pulumi.String("roles/compute.storageAdmin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewInstantSnapshotIamBinding(ctx, "binding", &compute.InstantSnapshotIamBindingArgs{
//				Project: pulumi.Any(_default.Project),
//				Zone:    pulumi.Any(_default.Zone),
//				Name:    pulumi.Any(_default.Name),
//				Role:    pulumi.String("roles/compute.storageAdmin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &compute.InstantSnapshotIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## compute.InstantSnapshotIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewInstantSnapshotIamMember(ctx, "member", &compute.InstantSnapshotIamMemberArgs{
//				Project: pulumi.Any(_default.Project),
//				Zone:    pulumi.Any(_default.Zone),
//				Name:    pulumi.Any(_default.Name),
//				Role:    pulumi.String("roles/compute.storageAdmin"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewInstantSnapshotIamMember(ctx, "member", &compute.InstantSnapshotIamMemberArgs{
//				Project: pulumi.Any(_default.Project),
//				Zone:    pulumi.Any(_default.Zone),
//				Name:    pulumi.Any(_default.Name),
//				Role:    pulumi.String("roles/compute.storageAdmin"),
//				Member:  pulumi.String("user:jane@example.com"),
//				Condition: &compute.InstantSnapshotIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Compute Engine InstantSnapshot
//
// Three different resources help you manage your IAM policy for Compute Engine InstantSnapshot. Each of these resources serves a different use case:
//
// * `compute.InstantSnapshotIamPolicy`: Authoritative. Sets the IAM policy for the instantsnapshot and replaces any existing policy already attached.
// * `compute.InstantSnapshotIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the instantsnapshot are preserved.
// * `compute.InstantSnapshotIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the instantsnapshot are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `compute.InstantSnapshotIamPolicy`: Retrieves the IAM policy for the instantsnapshot
//
// > **Note:** `compute.InstantSnapshotIamPolicy` **cannot** be used in conjunction with `compute.InstantSnapshotIamBinding` and `compute.InstantSnapshotIamMember` or they will fight over what your policy should be.
//
// > **Note:** `compute.InstantSnapshotIamBinding` resources **can be** used in conjunction with `compute.InstantSnapshotIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## compute.InstantSnapshotIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/compute.storageAdmin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewInstantSnapshotIamPolicy(ctx, "policy", &compute.InstantSnapshotIamPolicyArgs{
//				Project:    pulumi.Any(_default.Project),
//				Zone:       pulumi.Any(_default.Zone),
//				Name:       pulumi.Any(_default.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/compute.storageAdmin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewInstantSnapshotIamPolicy(ctx, "policy", &compute.InstantSnapshotIamPolicyArgs{
//				Project:    pulumi.Any(_default.Project),
//				Zone:       pulumi.Any(_default.Zone),
//				Name:       pulumi.Any(_default.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## compute.InstantSnapshotIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewInstantSnapshotIamBinding(ctx, "binding", &compute.InstantSnapshotIamBindingArgs{
//				Project: pulumi.Any(_default.Project),
//				Zone:    pulumi.Any(_default.Zone),
//				Name:    pulumi.Any(_default.Name),
//				Role:    pulumi.String("roles/compute.storageAdmin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewInstantSnapshotIamBinding(ctx, "binding", &compute.InstantSnapshotIamBindingArgs{
//				Project: pulumi.Any(_default.Project),
//				Zone:    pulumi.Any(_default.Zone),
//				Name:    pulumi.Any(_default.Name),
//				Role:    pulumi.String("roles/compute.storageAdmin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &compute.InstantSnapshotIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## compute.InstantSnapshotIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewInstantSnapshotIamMember(ctx, "member", &compute.InstantSnapshotIamMemberArgs{
//				Project: pulumi.Any(_default.Project),
//				Zone:    pulumi.Any(_default.Zone),
//				Name:    pulumi.Any(_default.Name),
//				Role:    pulumi.String("roles/compute.storageAdmin"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewInstantSnapshotIamMember(ctx, "member", &compute.InstantSnapshotIamMemberArgs{
//				Project: pulumi.Any(_default.Project),
//				Zone:    pulumi.Any(_default.Zone),
//				Name:    pulumi.Any(_default.Name),
//				Role:    pulumi.String("roles/compute.storageAdmin"),
//				Member:  pulumi.String("user:jane@example.com"),
//				Condition: &compute.InstantSnapshotIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/zones/{{zone}}/instantSnapshots/{{name}}
//
// * {{project}}/{{zone}}/{{name}}
//
// * {{zone}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Compute Engine instantsnapshot IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:compute/instantSnapshotIamMember:InstantSnapshotIamMember editor "projects/{{project}}/zones/{{zone}}/instantSnapshots/{{instant_snapshot}} roles/compute.storageAdmin user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:compute/instantSnapshotIamMember:InstantSnapshotIamMember editor "projects/{{project}}/zones/{{zone}}/instantSnapshots/{{instant_snapshot}} roles/compute.storageAdmin"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:compute/instantSnapshotIamMember:InstantSnapshotIamMember editor projects/{{project}}/zones/{{zone}}/instantSnapshots/{{instant_snapshot}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type InstantSnapshotIamMember struct {
	pulumi.CustomResourceState

	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition InstantSnapshotIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringOutput `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `compute.InstantSnapshotIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
	// A reference to the zone where the disk is located. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewInstantSnapshotIamMember registers a new resource with the given unique name, arguments, and options.
func NewInstantSnapshotIamMember(ctx *pulumi.Context,
	name string, args *InstantSnapshotIamMemberArgs, opts ...pulumi.ResourceOption) (*InstantSnapshotIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstantSnapshotIamMember
	err := ctx.RegisterResource("gcp:compute/instantSnapshotIamMember:InstantSnapshotIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstantSnapshotIamMember gets an existing InstantSnapshotIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstantSnapshotIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstantSnapshotIamMemberState, opts ...pulumi.ResourceOption) (*InstantSnapshotIamMember, error) {
	var resource InstantSnapshotIamMember
	err := ctx.ReadResource("gcp:compute/instantSnapshotIamMember:InstantSnapshotIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstantSnapshotIamMember resources.
type instantSnapshotIamMemberState struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *InstantSnapshotIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member *string `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `compute.InstantSnapshotIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
	// A reference to the zone where the disk is located. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone *string `pulumi:"zone"`
}

type InstantSnapshotIamMemberState struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition InstantSnapshotIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `compute.InstantSnapshotIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
	// A reference to the zone where the disk is located. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone pulumi.StringPtrInput
}

func (InstantSnapshotIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*instantSnapshotIamMemberState)(nil)).Elem()
}

type instantSnapshotIamMemberArgs struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *InstantSnapshotIamMemberCondition `pulumi:"condition"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member string `pulumi:"member"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `compute.InstantSnapshotIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
	// A reference to the zone where the disk is located. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a InstantSnapshotIamMember resource.
type InstantSnapshotIamMemberArgs struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition InstantSnapshotIamMemberConditionPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Member pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `compute.InstantSnapshotIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
	// A reference to the zone where the disk is located. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone pulumi.StringPtrInput
}

func (InstantSnapshotIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instantSnapshotIamMemberArgs)(nil)).Elem()
}

type InstantSnapshotIamMemberInput interface {
	pulumi.Input

	ToInstantSnapshotIamMemberOutput() InstantSnapshotIamMemberOutput
	ToInstantSnapshotIamMemberOutputWithContext(ctx context.Context) InstantSnapshotIamMemberOutput
}

func (*InstantSnapshotIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**InstantSnapshotIamMember)(nil)).Elem()
}

func (i *InstantSnapshotIamMember) ToInstantSnapshotIamMemberOutput() InstantSnapshotIamMemberOutput {
	return i.ToInstantSnapshotIamMemberOutputWithContext(context.Background())
}

func (i *InstantSnapshotIamMember) ToInstantSnapshotIamMemberOutputWithContext(ctx context.Context) InstantSnapshotIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstantSnapshotIamMemberOutput)
}

// InstantSnapshotIamMemberArrayInput is an input type that accepts InstantSnapshotIamMemberArray and InstantSnapshotIamMemberArrayOutput values.
// You can construct a concrete instance of `InstantSnapshotIamMemberArrayInput` via:
//
//	InstantSnapshotIamMemberArray{ InstantSnapshotIamMemberArgs{...} }
type InstantSnapshotIamMemberArrayInput interface {
	pulumi.Input

	ToInstantSnapshotIamMemberArrayOutput() InstantSnapshotIamMemberArrayOutput
	ToInstantSnapshotIamMemberArrayOutputWithContext(context.Context) InstantSnapshotIamMemberArrayOutput
}

type InstantSnapshotIamMemberArray []InstantSnapshotIamMemberInput

func (InstantSnapshotIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstantSnapshotIamMember)(nil)).Elem()
}

func (i InstantSnapshotIamMemberArray) ToInstantSnapshotIamMemberArrayOutput() InstantSnapshotIamMemberArrayOutput {
	return i.ToInstantSnapshotIamMemberArrayOutputWithContext(context.Background())
}

func (i InstantSnapshotIamMemberArray) ToInstantSnapshotIamMemberArrayOutputWithContext(ctx context.Context) InstantSnapshotIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstantSnapshotIamMemberArrayOutput)
}

// InstantSnapshotIamMemberMapInput is an input type that accepts InstantSnapshotIamMemberMap and InstantSnapshotIamMemberMapOutput values.
// You can construct a concrete instance of `InstantSnapshotIamMemberMapInput` via:
//
//	InstantSnapshotIamMemberMap{ "key": InstantSnapshotIamMemberArgs{...} }
type InstantSnapshotIamMemberMapInput interface {
	pulumi.Input

	ToInstantSnapshotIamMemberMapOutput() InstantSnapshotIamMemberMapOutput
	ToInstantSnapshotIamMemberMapOutputWithContext(context.Context) InstantSnapshotIamMemberMapOutput
}

type InstantSnapshotIamMemberMap map[string]InstantSnapshotIamMemberInput

func (InstantSnapshotIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstantSnapshotIamMember)(nil)).Elem()
}

func (i InstantSnapshotIamMemberMap) ToInstantSnapshotIamMemberMapOutput() InstantSnapshotIamMemberMapOutput {
	return i.ToInstantSnapshotIamMemberMapOutputWithContext(context.Background())
}

func (i InstantSnapshotIamMemberMap) ToInstantSnapshotIamMemberMapOutputWithContext(ctx context.Context) InstantSnapshotIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstantSnapshotIamMemberMapOutput)
}

type InstantSnapshotIamMemberOutput struct{ *pulumi.OutputState }

func (InstantSnapshotIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstantSnapshotIamMember)(nil)).Elem()
}

func (o InstantSnapshotIamMemberOutput) ToInstantSnapshotIamMemberOutput() InstantSnapshotIamMemberOutput {
	return o
}

func (o InstantSnapshotIamMemberOutput) ToInstantSnapshotIamMemberOutputWithContext(ctx context.Context) InstantSnapshotIamMemberOutput {
	return o
}

// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
// Structure is documented below.
func (o InstantSnapshotIamMemberOutput) Condition() InstantSnapshotIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *InstantSnapshotIamMember) InstantSnapshotIamMemberConditionPtrOutput { return v.Condition }).(InstantSnapshotIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o InstantSnapshotIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *InstantSnapshotIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o InstantSnapshotIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *InstantSnapshotIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o InstantSnapshotIamMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InstantSnapshotIamMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o InstantSnapshotIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *InstantSnapshotIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `compute.InstantSnapshotIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o InstantSnapshotIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *InstantSnapshotIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// A reference to the zone where the disk is located. Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
// zone is specified, it is taken from the provider configuration.
func (o InstantSnapshotIamMemberOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *InstantSnapshotIamMember) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type InstantSnapshotIamMemberArrayOutput struct{ *pulumi.OutputState }

func (InstantSnapshotIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstantSnapshotIamMember)(nil)).Elem()
}

func (o InstantSnapshotIamMemberArrayOutput) ToInstantSnapshotIamMemberArrayOutput() InstantSnapshotIamMemberArrayOutput {
	return o
}

func (o InstantSnapshotIamMemberArrayOutput) ToInstantSnapshotIamMemberArrayOutputWithContext(ctx context.Context) InstantSnapshotIamMemberArrayOutput {
	return o
}

func (o InstantSnapshotIamMemberArrayOutput) Index(i pulumi.IntInput) InstantSnapshotIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstantSnapshotIamMember {
		return vs[0].([]*InstantSnapshotIamMember)[vs[1].(int)]
	}).(InstantSnapshotIamMemberOutput)
}

type InstantSnapshotIamMemberMapOutput struct{ *pulumi.OutputState }

func (InstantSnapshotIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstantSnapshotIamMember)(nil)).Elem()
}

func (o InstantSnapshotIamMemberMapOutput) ToInstantSnapshotIamMemberMapOutput() InstantSnapshotIamMemberMapOutput {
	return o
}

func (o InstantSnapshotIamMemberMapOutput) ToInstantSnapshotIamMemberMapOutputWithContext(ctx context.Context) InstantSnapshotIamMemberMapOutput {
	return o
}

func (o InstantSnapshotIamMemberMapOutput) MapIndex(k pulumi.StringInput) InstantSnapshotIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstantSnapshotIamMember {
		return vs[0].(map[string]*InstantSnapshotIamMember)[vs[1].(string)]
	}).(InstantSnapshotIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstantSnapshotIamMemberInput)(nil)).Elem(), &InstantSnapshotIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstantSnapshotIamMemberArrayInput)(nil)).Elem(), InstantSnapshotIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstantSnapshotIamMemberMapInput)(nil)).Elem(), InstantSnapshotIamMemberMap{})
	pulumi.RegisterOutputType(InstantSnapshotIamMemberOutput{})
	pulumi.RegisterOutputType(InstantSnapshotIamMemberArrayOutput{})
	pulumi.RegisterOutputType(InstantSnapshotIamMemberMapOutput{})
}
