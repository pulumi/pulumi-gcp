// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a packet mirroring rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (mirror or do_not_mirror).
//
// To get more information about NetworkFirewallPolicyPacketMirroringRule, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/networkFirewallPolicies/addPacketMirroringRule)
//
// ## Example Usage
//
// ### Compute Network Firewall Policy Packet Mirroring Rule
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/tags"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_default, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
//				Name:                  pulumi.String("fw-network"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			basicNetworkFirewallPolicy, err := compute.NewNetworkFirewallPolicy(ctx, "basic_network_firewall_policy", &compute.NetworkFirewallPolicyArgs{
//				Name:        pulumi.String("fw-policy"),
//				Description: pulumi.String("Sample global network firewall policy"),
//				Project:     pulumi.String("my-project-name"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultMirroringDeploymentGroup, err := networksecurity.NewMirroringDeploymentGroup(ctx, "default", &networksecurity.MirroringDeploymentGroupArgs{
//				MirroringDeploymentGroupId: pulumi.String("deployment-group"),
//				Location:                   pulumi.String("global"),
//				Network:                    _default.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultMirroringEndpointGroup, err := networksecurity.NewMirroringEndpointGroup(ctx, "default", &networksecurity.MirroringEndpointGroupArgs{
//				MirroringEndpointGroupId: pulumi.String("endpoint-group"),
//				Location:                 pulumi.String("global"),
//				MirroringDeploymentGroup: defaultMirroringDeploymentGroup.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			defaultSecurityProfile, err := networksecurity.NewSecurityProfile(ctx, "default", &networksecurity.SecurityProfileArgs{
//				Name:        pulumi.String("sec-profile"),
//				Parent:      pulumi.String("organizations/123456789"),
//				Description: pulumi.String("my description"),
//				Type:        pulumi.String("CUSTOM_MIRRORING"),
//				CustomMirroringProfile: &networksecurity.SecurityProfileCustomMirroringProfileArgs{
//					MirroringEndpointGroup: defaultMirroringEndpointGroup.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			securityProfileGroup1, err := networksecurity.NewSecurityProfileGroup(ctx, "security_profile_group_1", &networksecurity.SecurityProfileGroupArgs{
//				Name:                   pulumi.String("sec-profile-group"),
//				Parent:                 pulumi.String("organizations/123456789"),
//				Description:            pulumi.String("my description"),
//				CustomMirroringProfile: defaultSecurityProfile.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			secureTagKey1, err := tags.NewTagKey(ctx, "secure_tag_key_1", &tags.TagKeyArgs{
//				Description: pulumi.String("Test tag key description"),
//				Parent:      pulumi.String("organizations/123456789"),
//				Purpose:     pulumi.String("GCE_FIREWALL"),
//				ShortName:   pulumi.String("tag-key"),
//				PurposeData: pulumi.StringMap{
//					"network": _default.Name.ApplyT(func(name string) (string, error) {
//						return fmt.Sprintf("my-project-name/%v", name), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			secureTagValue1, err := tags.NewTagValue(ctx, "secure_tag_value_1", &tags.TagValueArgs{
//				Description: pulumi.String("Test tag value description."),
//				Parent:      secureTagKey1.ID(),
//				ShortName:   pulumi.String("tag-value"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewNetworkFirewallPolicyPacketMirroringRule(ctx, "primary", &compute.NetworkFirewallPolicyPacketMirroringRuleArgs{
//				Action:         pulumi.String("mirror"),
//				Description:    pulumi.String("This is a simple packet mirroring rule description"),
//				Direction:      pulumi.String("INGRESS"),
//				Disabled:       pulumi.Bool(false),
//				FirewallPolicy: basicNetworkFirewallPolicy.Name,
//				Priority:       pulumi.Int(1000),
//				RuleName:       pulumi.String("test-rule"),
//				Match: &compute.NetworkFirewallPolicyPacketMirroringRuleMatchArgs{
//					SrcIpRanges: pulumi.StringArray{
//						pulumi.String("10.100.0.1/32"),
//					},
//					Layer4Configs: compute.NetworkFirewallPolicyPacketMirroringRuleMatchLayer4ConfigArray{
//						&compute.NetworkFirewallPolicyPacketMirroringRuleMatchLayer4ConfigArgs{
//							IpProtocol: pulumi.String("all"),
//						},
//					},
//				},
//				SecurityProfileGroup: securityProfileGroup1.ID().ApplyT(func(id string) (string, error) {
//					return fmt.Sprintf("//networksecurity.googleapis.com/%v", id), nil
//				}).(pulumi.StringOutput),
//				TargetSecureTags: compute.NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagArray{
//					&compute.NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagArgs{
//						Name: secureTagValue1.Name.ApplyT(func(name string) (string, error) {
//							return fmt.Sprintf("tagValues/%v", name), nil
//						}).(pulumi.StringOutput),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// NetworkFirewallPolicyPacketMirroringRule can be imported using any of these accepted formats:
//
// * `projects/{{project}}/global/firewallPolicies/{{firewall_policy}}/packetMirroringRules/{{priority}}`
//
// * `{{project}}/{{firewall_policy}}/{{priority}}`
//
// * `{{firewall_policy}}/{{priority}}`
//
// When using the `pulumi import` command, NetworkFirewallPolicyPacketMirroringRule can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule default projects/{{project}}/global/firewallPolicies/{{firewall_policy}}/packetMirroringRules/{{priority}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule default {{project}}/{{firewall_policy}}/{{priority}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule default {{firewall_policy}}/{{priority}}
// ```
type NetworkFirewallPolicyPacketMirroringRule struct {
	pulumi.CustomResourceState

	// The Action to perform when the client connection triggers the rule. Valid actions are "mirror", "doNotMirror", "gotoNext".
	Action pulumi.StringOutput `pulumi:"action"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description for this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The direction in which this rule applies.
	// Possible values are: `INGRESS`, `EGRESS`.
	Direction pulumi.StringOutput `pulumi:"direction"`
	// Denotes whether the firewall policy rule is disabled.
	// When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
	// If this is unspecified, the firewall policy rule will be enabled.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// The firewall policy of the resource.
	FirewallPolicy pulumi.StringOutput `pulumi:"firewallPolicy"`
	// Type of the resource. Always `compute#packetMirroringRule` for firewall policy packet mirroring rules
	Kind pulumi.StringOutput `pulumi:"kind"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	// Structure is documented below.
	Match NetworkFirewallPolicyPacketMirroringRuleMatchOutput `pulumi:"match"`
	// An integer indicating the priority of a rule in the list.
	// The priority must be a positive value between 0 and 2147483647.
	// Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// An optional name for the rule. This field is not a unique identifier and can be updated.
	RuleName pulumi.StringPtrOutput `pulumi:"ruleName"`
	// Calculation of the complexity of a single firewall policy rule.
	RuleTupleCount pulumi.IntOutput `pulumi:"ruleTupleCount"`
	// A fully-qualified URL of a SecurityProfile resource instance.
	// Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
	// Must be specified if action = 'mirror' and cannot be specified for other actions.
	SecurityProfileGroup pulumi.StringPtrOutput `pulumi:"securityProfileGroup"`
	// A list of secure tags that controls which instances the firewall rule applies to.
	// If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
	// targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
	// Structure is documented below.
	TargetSecureTags NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagArrayOutput `pulumi:"targetSecureTags"`
	// Boolean flag indicating if the traffic should be TLS decrypted.
	// Can be set only if action = 'mirror' and cannot be set for other actions.
	TlsInspect pulumi.BoolPtrOutput `pulumi:"tlsInspect"`
}

// NewNetworkFirewallPolicyPacketMirroringRule registers a new resource with the given unique name, arguments, and options.
func NewNetworkFirewallPolicyPacketMirroringRule(ctx *pulumi.Context,
	name string, args *NetworkFirewallPolicyPacketMirroringRuleArgs, opts ...pulumi.ResourceOption) (*NetworkFirewallPolicyPacketMirroringRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Direction == nil {
		return nil, errors.New("invalid value for required argument 'Direction'")
	}
	if args.FirewallPolicy == nil {
		return nil, errors.New("invalid value for required argument 'FirewallPolicy'")
	}
	if args.Match == nil {
		return nil, errors.New("invalid value for required argument 'Match'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkFirewallPolicyPacketMirroringRule
	err := ctx.RegisterResource("gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkFirewallPolicyPacketMirroringRule gets an existing NetworkFirewallPolicyPacketMirroringRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkFirewallPolicyPacketMirroringRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkFirewallPolicyPacketMirroringRuleState, opts ...pulumi.ResourceOption) (*NetworkFirewallPolicyPacketMirroringRule, error) {
	var resource NetworkFirewallPolicyPacketMirroringRule
	err := ctx.ReadResource("gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkFirewallPolicyPacketMirroringRule resources.
type networkFirewallPolicyPacketMirroringRuleState struct {
	// The Action to perform when the client connection triggers the rule. Valid actions are "mirror", "doNotMirror", "gotoNext".
	Action *string `pulumi:"action"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description for this resource.
	Description *string `pulumi:"description"`
	// The direction in which this rule applies.
	// Possible values are: `INGRESS`, `EGRESS`.
	Direction *string `pulumi:"direction"`
	// Denotes whether the firewall policy rule is disabled.
	// When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
	// If this is unspecified, the firewall policy rule will be enabled.
	Disabled *bool `pulumi:"disabled"`
	// The firewall policy of the resource.
	FirewallPolicy *string `pulumi:"firewallPolicy"`
	// Type of the resource. Always `compute#packetMirroringRule` for firewall policy packet mirroring rules
	Kind *string `pulumi:"kind"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	// Structure is documented below.
	Match *NetworkFirewallPolicyPacketMirroringRuleMatch `pulumi:"match"`
	// An integer indicating the priority of a rule in the list.
	// The priority must be a positive value between 0 and 2147483647.
	// Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
	Priority *int `pulumi:"priority"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// An optional name for the rule. This field is not a unique identifier and can be updated.
	RuleName *string `pulumi:"ruleName"`
	// Calculation of the complexity of a single firewall policy rule.
	RuleTupleCount *int `pulumi:"ruleTupleCount"`
	// A fully-qualified URL of a SecurityProfile resource instance.
	// Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
	// Must be specified if action = 'mirror' and cannot be specified for other actions.
	SecurityProfileGroup *string `pulumi:"securityProfileGroup"`
	// A list of secure tags that controls which instances the firewall rule applies to.
	// If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
	// targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
	// Structure is documented below.
	TargetSecureTags []NetworkFirewallPolicyPacketMirroringRuleTargetSecureTag `pulumi:"targetSecureTags"`
	// Boolean flag indicating if the traffic should be TLS decrypted.
	// Can be set only if action = 'mirror' and cannot be set for other actions.
	TlsInspect *bool `pulumi:"tlsInspect"`
}

type NetworkFirewallPolicyPacketMirroringRuleState struct {
	// The Action to perform when the client connection triggers the rule. Valid actions are "mirror", "doNotMirror", "gotoNext".
	Action pulumi.StringPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description for this resource.
	Description pulumi.StringPtrInput
	// The direction in which this rule applies.
	// Possible values are: `INGRESS`, `EGRESS`.
	Direction pulumi.StringPtrInput
	// Denotes whether the firewall policy rule is disabled.
	// When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
	// If this is unspecified, the firewall policy rule will be enabled.
	Disabled pulumi.BoolPtrInput
	// The firewall policy of the resource.
	FirewallPolicy pulumi.StringPtrInput
	// Type of the resource. Always `compute#packetMirroringRule` for firewall policy packet mirroring rules
	Kind pulumi.StringPtrInput
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	// Structure is documented below.
	Match NetworkFirewallPolicyPacketMirroringRuleMatchPtrInput
	// An integer indicating the priority of a rule in the list.
	// The priority must be a positive value between 0 and 2147483647.
	// Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
	Priority pulumi.IntPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// An optional name for the rule. This field is not a unique identifier and can be updated.
	RuleName pulumi.StringPtrInput
	// Calculation of the complexity of a single firewall policy rule.
	RuleTupleCount pulumi.IntPtrInput
	// A fully-qualified URL of a SecurityProfile resource instance.
	// Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
	// Must be specified if action = 'mirror' and cannot be specified for other actions.
	SecurityProfileGroup pulumi.StringPtrInput
	// A list of secure tags that controls which instances the firewall rule applies to.
	// If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
	// targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
	// Structure is documented below.
	TargetSecureTags NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagArrayInput
	// Boolean flag indicating if the traffic should be TLS decrypted.
	// Can be set only if action = 'mirror' and cannot be set for other actions.
	TlsInspect pulumi.BoolPtrInput
}

func (NetworkFirewallPolicyPacketMirroringRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkFirewallPolicyPacketMirroringRuleState)(nil)).Elem()
}

type networkFirewallPolicyPacketMirroringRuleArgs struct {
	// The Action to perform when the client connection triggers the rule. Valid actions are "mirror", "doNotMirror", "gotoNext".
	Action string `pulumi:"action"`
	// An optional description for this resource.
	Description *string `pulumi:"description"`
	// The direction in which this rule applies.
	// Possible values are: `INGRESS`, `EGRESS`.
	Direction string `pulumi:"direction"`
	// Denotes whether the firewall policy rule is disabled.
	// When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
	// If this is unspecified, the firewall policy rule will be enabled.
	Disabled *bool `pulumi:"disabled"`
	// The firewall policy of the resource.
	FirewallPolicy string `pulumi:"firewallPolicy"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	// Structure is documented below.
	Match NetworkFirewallPolicyPacketMirroringRuleMatch `pulumi:"match"`
	// An integer indicating the priority of a rule in the list.
	// The priority must be a positive value between 0 and 2147483647.
	// Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
	Priority int `pulumi:"priority"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// An optional name for the rule. This field is not a unique identifier and can be updated.
	RuleName *string `pulumi:"ruleName"`
	// A fully-qualified URL of a SecurityProfile resource instance.
	// Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
	// Must be specified if action = 'mirror' and cannot be specified for other actions.
	SecurityProfileGroup *string `pulumi:"securityProfileGroup"`
	// A list of secure tags that controls which instances the firewall rule applies to.
	// If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
	// targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
	// Structure is documented below.
	TargetSecureTags []NetworkFirewallPolicyPacketMirroringRuleTargetSecureTag `pulumi:"targetSecureTags"`
	// Boolean flag indicating if the traffic should be TLS decrypted.
	// Can be set only if action = 'mirror' and cannot be set for other actions.
	TlsInspect *bool `pulumi:"tlsInspect"`
}

// The set of arguments for constructing a NetworkFirewallPolicyPacketMirroringRule resource.
type NetworkFirewallPolicyPacketMirroringRuleArgs struct {
	// The Action to perform when the client connection triggers the rule. Valid actions are "mirror", "doNotMirror", "gotoNext".
	Action pulumi.StringInput
	// An optional description for this resource.
	Description pulumi.StringPtrInput
	// The direction in which this rule applies.
	// Possible values are: `INGRESS`, `EGRESS`.
	Direction pulumi.StringInput
	// Denotes whether the firewall policy rule is disabled.
	// When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
	// If this is unspecified, the firewall policy rule will be enabled.
	Disabled pulumi.BoolPtrInput
	// The firewall policy of the resource.
	FirewallPolicy pulumi.StringInput
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	// Structure is documented below.
	Match NetworkFirewallPolicyPacketMirroringRuleMatchInput
	// An integer indicating the priority of a rule in the list.
	// The priority must be a positive value between 0 and 2147483647.
	// Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
	Priority pulumi.IntInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// An optional name for the rule. This field is not a unique identifier and can be updated.
	RuleName pulumi.StringPtrInput
	// A fully-qualified URL of a SecurityProfile resource instance.
	// Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
	// Must be specified if action = 'mirror' and cannot be specified for other actions.
	SecurityProfileGroup pulumi.StringPtrInput
	// A list of secure tags that controls which instances the firewall rule applies to.
	// If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
	// targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
	// Structure is documented below.
	TargetSecureTags NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagArrayInput
	// Boolean flag indicating if the traffic should be TLS decrypted.
	// Can be set only if action = 'mirror' and cannot be set for other actions.
	TlsInspect pulumi.BoolPtrInput
}

func (NetworkFirewallPolicyPacketMirroringRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkFirewallPolicyPacketMirroringRuleArgs)(nil)).Elem()
}

type NetworkFirewallPolicyPacketMirroringRuleInput interface {
	pulumi.Input

	ToNetworkFirewallPolicyPacketMirroringRuleOutput() NetworkFirewallPolicyPacketMirroringRuleOutput
	ToNetworkFirewallPolicyPacketMirroringRuleOutputWithContext(ctx context.Context) NetworkFirewallPolicyPacketMirroringRuleOutput
}

func (*NetworkFirewallPolicyPacketMirroringRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkFirewallPolicyPacketMirroringRule)(nil)).Elem()
}

func (i *NetworkFirewallPolicyPacketMirroringRule) ToNetworkFirewallPolicyPacketMirroringRuleOutput() NetworkFirewallPolicyPacketMirroringRuleOutput {
	return i.ToNetworkFirewallPolicyPacketMirroringRuleOutputWithContext(context.Background())
}

func (i *NetworkFirewallPolicyPacketMirroringRule) ToNetworkFirewallPolicyPacketMirroringRuleOutputWithContext(ctx context.Context) NetworkFirewallPolicyPacketMirroringRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkFirewallPolicyPacketMirroringRuleOutput)
}

// NetworkFirewallPolicyPacketMirroringRuleArrayInput is an input type that accepts NetworkFirewallPolicyPacketMirroringRuleArray and NetworkFirewallPolicyPacketMirroringRuleArrayOutput values.
// You can construct a concrete instance of `NetworkFirewallPolicyPacketMirroringRuleArrayInput` via:
//
//	NetworkFirewallPolicyPacketMirroringRuleArray{ NetworkFirewallPolicyPacketMirroringRuleArgs{...} }
type NetworkFirewallPolicyPacketMirroringRuleArrayInput interface {
	pulumi.Input

	ToNetworkFirewallPolicyPacketMirroringRuleArrayOutput() NetworkFirewallPolicyPacketMirroringRuleArrayOutput
	ToNetworkFirewallPolicyPacketMirroringRuleArrayOutputWithContext(context.Context) NetworkFirewallPolicyPacketMirroringRuleArrayOutput
}

type NetworkFirewallPolicyPacketMirroringRuleArray []NetworkFirewallPolicyPacketMirroringRuleInput

func (NetworkFirewallPolicyPacketMirroringRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkFirewallPolicyPacketMirroringRule)(nil)).Elem()
}

func (i NetworkFirewallPolicyPacketMirroringRuleArray) ToNetworkFirewallPolicyPacketMirroringRuleArrayOutput() NetworkFirewallPolicyPacketMirroringRuleArrayOutput {
	return i.ToNetworkFirewallPolicyPacketMirroringRuleArrayOutputWithContext(context.Background())
}

func (i NetworkFirewallPolicyPacketMirroringRuleArray) ToNetworkFirewallPolicyPacketMirroringRuleArrayOutputWithContext(ctx context.Context) NetworkFirewallPolicyPacketMirroringRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkFirewallPolicyPacketMirroringRuleArrayOutput)
}

// NetworkFirewallPolicyPacketMirroringRuleMapInput is an input type that accepts NetworkFirewallPolicyPacketMirroringRuleMap and NetworkFirewallPolicyPacketMirroringRuleMapOutput values.
// You can construct a concrete instance of `NetworkFirewallPolicyPacketMirroringRuleMapInput` via:
//
//	NetworkFirewallPolicyPacketMirroringRuleMap{ "key": NetworkFirewallPolicyPacketMirroringRuleArgs{...} }
type NetworkFirewallPolicyPacketMirroringRuleMapInput interface {
	pulumi.Input

	ToNetworkFirewallPolicyPacketMirroringRuleMapOutput() NetworkFirewallPolicyPacketMirroringRuleMapOutput
	ToNetworkFirewallPolicyPacketMirroringRuleMapOutputWithContext(context.Context) NetworkFirewallPolicyPacketMirroringRuleMapOutput
}

type NetworkFirewallPolicyPacketMirroringRuleMap map[string]NetworkFirewallPolicyPacketMirroringRuleInput

func (NetworkFirewallPolicyPacketMirroringRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkFirewallPolicyPacketMirroringRule)(nil)).Elem()
}

func (i NetworkFirewallPolicyPacketMirroringRuleMap) ToNetworkFirewallPolicyPacketMirroringRuleMapOutput() NetworkFirewallPolicyPacketMirroringRuleMapOutput {
	return i.ToNetworkFirewallPolicyPacketMirroringRuleMapOutputWithContext(context.Background())
}

func (i NetworkFirewallPolicyPacketMirroringRuleMap) ToNetworkFirewallPolicyPacketMirroringRuleMapOutputWithContext(ctx context.Context) NetworkFirewallPolicyPacketMirroringRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkFirewallPolicyPacketMirroringRuleMapOutput)
}

type NetworkFirewallPolicyPacketMirroringRuleOutput struct{ *pulumi.OutputState }

func (NetworkFirewallPolicyPacketMirroringRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkFirewallPolicyPacketMirroringRule)(nil)).Elem()
}

func (o NetworkFirewallPolicyPacketMirroringRuleOutput) ToNetworkFirewallPolicyPacketMirroringRuleOutput() NetworkFirewallPolicyPacketMirroringRuleOutput {
	return o
}

func (o NetworkFirewallPolicyPacketMirroringRuleOutput) ToNetworkFirewallPolicyPacketMirroringRuleOutputWithContext(ctx context.Context) NetworkFirewallPolicyPacketMirroringRuleOutput {
	return o
}

// The Action to perform when the client connection triggers the rule. Valid actions are "mirror", "doNotMirror", "gotoNext".
func (o NetworkFirewallPolicyPacketMirroringRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyPacketMirroringRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Creation timestamp in RFC3339 text format.
func (o NetworkFirewallPolicyPacketMirroringRuleOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyPacketMirroringRule) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description for this resource.
func (o NetworkFirewallPolicyPacketMirroringRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyPacketMirroringRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The direction in which this rule applies.
// Possible values are: `INGRESS`, `EGRESS`.
func (o NetworkFirewallPolicyPacketMirroringRuleOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyPacketMirroringRule) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

// Denotes whether the firewall policy rule is disabled.
// When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
// If this is unspecified, the firewall policy rule will be enabled.
func (o NetworkFirewallPolicyPacketMirroringRuleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyPacketMirroringRule) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The firewall policy of the resource.
func (o NetworkFirewallPolicyPacketMirroringRuleOutput) FirewallPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyPacketMirroringRule) pulumi.StringOutput { return v.FirewallPolicy }).(pulumi.StringOutput)
}

// Type of the resource. Always `compute#packetMirroringRule` for firewall policy packet mirroring rules
func (o NetworkFirewallPolicyPacketMirroringRuleOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyPacketMirroringRule) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
// Structure is documented below.
func (o NetworkFirewallPolicyPacketMirroringRuleOutput) Match() NetworkFirewallPolicyPacketMirroringRuleMatchOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyPacketMirroringRule) NetworkFirewallPolicyPacketMirroringRuleMatchOutput {
		return v.Match
	}).(NetworkFirewallPolicyPacketMirroringRuleMatchOutput)
}

// An integer indicating the priority of a rule in the list.
// The priority must be a positive value between 0 and 2147483647.
// Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
func (o NetworkFirewallPolicyPacketMirroringRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyPacketMirroringRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o NetworkFirewallPolicyPacketMirroringRuleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyPacketMirroringRule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// An optional name for the rule. This field is not a unique identifier and can be updated.
func (o NetworkFirewallPolicyPacketMirroringRuleOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyPacketMirroringRule) pulumi.StringPtrOutput { return v.RuleName }).(pulumi.StringPtrOutput)
}

// Calculation of the complexity of a single firewall policy rule.
func (o NetworkFirewallPolicyPacketMirroringRuleOutput) RuleTupleCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyPacketMirroringRule) pulumi.IntOutput { return v.RuleTupleCount }).(pulumi.IntOutput)
}

// A fully-qualified URL of a SecurityProfile resource instance.
// Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
// Must be specified if action = 'mirror' and cannot be specified for other actions.
func (o NetworkFirewallPolicyPacketMirroringRuleOutput) SecurityProfileGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyPacketMirroringRule) pulumi.StringPtrOutput {
		return v.SecurityProfileGroup
	}).(pulumi.StringPtrOutput)
}

// A list of secure tags that controls which instances the firewall rule applies to.
// If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
// targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
// Structure is documented below.
func (o NetworkFirewallPolicyPacketMirroringRuleOutput) TargetSecureTags() NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagArrayOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyPacketMirroringRule) NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagArrayOutput {
		return v.TargetSecureTags
	}).(NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagArrayOutput)
}

// Boolean flag indicating if the traffic should be TLS decrypted.
// Can be set only if action = 'mirror' and cannot be set for other actions.
func (o NetworkFirewallPolicyPacketMirroringRuleOutput) TlsInspect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyPacketMirroringRule) pulumi.BoolPtrOutput { return v.TlsInspect }).(pulumi.BoolPtrOutput)
}

type NetworkFirewallPolicyPacketMirroringRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworkFirewallPolicyPacketMirroringRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkFirewallPolicyPacketMirroringRule)(nil)).Elem()
}

func (o NetworkFirewallPolicyPacketMirroringRuleArrayOutput) ToNetworkFirewallPolicyPacketMirroringRuleArrayOutput() NetworkFirewallPolicyPacketMirroringRuleArrayOutput {
	return o
}

func (o NetworkFirewallPolicyPacketMirroringRuleArrayOutput) ToNetworkFirewallPolicyPacketMirroringRuleArrayOutputWithContext(ctx context.Context) NetworkFirewallPolicyPacketMirroringRuleArrayOutput {
	return o
}

func (o NetworkFirewallPolicyPacketMirroringRuleArrayOutput) Index(i pulumi.IntInput) NetworkFirewallPolicyPacketMirroringRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkFirewallPolicyPacketMirroringRule {
		return vs[0].([]*NetworkFirewallPolicyPacketMirroringRule)[vs[1].(int)]
	}).(NetworkFirewallPolicyPacketMirroringRuleOutput)
}

type NetworkFirewallPolicyPacketMirroringRuleMapOutput struct{ *pulumi.OutputState }

func (NetworkFirewallPolicyPacketMirroringRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkFirewallPolicyPacketMirroringRule)(nil)).Elem()
}

func (o NetworkFirewallPolicyPacketMirroringRuleMapOutput) ToNetworkFirewallPolicyPacketMirroringRuleMapOutput() NetworkFirewallPolicyPacketMirroringRuleMapOutput {
	return o
}

func (o NetworkFirewallPolicyPacketMirroringRuleMapOutput) ToNetworkFirewallPolicyPacketMirroringRuleMapOutputWithContext(ctx context.Context) NetworkFirewallPolicyPacketMirroringRuleMapOutput {
	return o
}

func (o NetworkFirewallPolicyPacketMirroringRuleMapOutput) MapIndex(k pulumi.StringInput) NetworkFirewallPolicyPacketMirroringRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkFirewallPolicyPacketMirroringRule {
		return vs[0].(map[string]*NetworkFirewallPolicyPacketMirroringRule)[vs[1].(string)]
	}).(NetworkFirewallPolicyPacketMirroringRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkFirewallPolicyPacketMirroringRuleInput)(nil)).Elem(), &NetworkFirewallPolicyPacketMirroringRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkFirewallPolicyPacketMirroringRuleArrayInput)(nil)).Elem(), NetworkFirewallPolicyPacketMirroringRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkFirewallPolicyPacketMirroringRuleMapInput)(nil)).Elem(), NetworkFirewallPolicyPacketMirroringRuleMap{})
	pulumi.RegisterOutputType(NetworkFirewallPolicyPacketMirroringRuleOutput{})
	pulumi.RegisterOutputType(NetworkFirewallPolicyPacketMirroringRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkFirewallPolicyPacketMirroringRuleMapOutput{})
}
