// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Google Compute Persistent disks.
//
// [the official documentation](https://cloud.google.com/compute/docs/disks) and its [API](https://cloud.google.com/compute/docs/reference/latest/disks).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		persistent_boot_disk, err := compute.LookupDisk(ctx, &compute.LookupDiskArgs{
// 			Name:    "persistent-boot-disk",
// 			Project: pulumi.StringRef("example"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewInstance(ctx, "default", &compute.InstanceArgs{
// 			BootDisk: &compute.InstanceBootDiskArgs{
// 				Source:     pulumi.String(persistent_boot_disk.SelfLink),
// 				AutoDelete: pulumi.Bool(false),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupDisk(ctx *pulumi.Context, args *LookupDiskArgs, opts ...pulumi.InvokeOption) (*LookupDiskResult, error) {
	var rv LookupDiskResult
	err := ctx.Invoke("gcp:compute/getDisk:getDisk", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDisk.
type LookupDiskArgs struct {
	// The name of a specific disk.
	Name string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A reference to the zone where the disk resides.
	Zone *string `pulumi:"zone"`
}

// A collection of values returned by getDisk.
type LookupDiskResult struct {
	CreationTimestamp  string                     `pulumi:"creationTimestamp"`
	Description        string                     `pulumi:"description"`
	DiskEncryptionKeys []GetDiskDiskEncryptionKey `pulumi:"diskEncryptionKeys"`
	// The provider-assigned unique ID for this managed resource.
	Id               string `pulumi:"id"`
	Image            string `pulumi:"image"`
	Interface        string `pulumi:"interface"`
	LabelFingerprint string `pulumi:"labelFingerprint"`
	// A map of labels applied to this disk.
	Labels                 map[string]string `pulumi:"labels"`
	LastAttachTimestamp    string            `pulumi:"lastAttachTimestamp"`
	LastDetachTimestamp    string            `pulumi:"lastDetachTimestamp"`
	MultiWriter            bool              `pulumi:"multiWriter"`
	Name                   string            `pulumi:"name"`
	PhysicalBlockSizeBytes int               `pulumi:"physicalBlockSizeBytes"`
	Project                *string           `pulumi:"project"`
	ProvisionedIops        int               `pulumi:"provisionedIops"`
	ResourcePolicies       []string          `pulumi:"resourcePolicies"`
	// The URI of the created resource.
	SelfLink                     string                               `pulumi:"selfLink"`
	Size                         int                                  `pulumi:"size"`
	Snapshot                     string                               `pulumi:"snapshot"`
	SourceImageEncryptionKeys    []GetDiskSourceImageEncryptionKey    `pulumi:"sourceImageEncryptionKeys"`
	SourceImageId                string                               `pulumi:"sourceImageId"`
	SourceSnapshotEncryptionKeys []GetDiskSourceSnapshotEncryptionKey `pulumi:"sourceSnapshotEncryptionKeys"`
	SourceSnapshotId             string                               `pulumi:"sourceSnapshotId"`
	Type                         string                               `pulumi:"type"`
	Users                        []string                             `pulumi:"users"`
	Zone                         *string                              `pulumi:"zone"`
}

func LookupDiskOutput(ctx *pulumi.Context, args LookupDiskOutputArgs, opts ...pulumi.InvokeOption) LookupDiskResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDiskResult, error) {
			args := v.(LookupDiskArgs)
			r, err := LookupDisk(ctx, &args, opts...)
			var s LookupDiskResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDiskResultOutput)
}

// A collection of arguments for invoking getDisk.
type LookupDiskOutputArgs struct {
	// The name of a specific disk.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// A reference to the zone where the disk resides.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (LookupDiskOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDiskArgs)(nil)).Elem()
}

// A collection of values returned by getDisk.
type LookupDiskResultOutput struct{ *pulumi.OutputState }

func (LookupDiskResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDiskResult)(nil)).Elem()
}

func (o LookupDiskResultOutput) ToLookupDiskResultOutput() LookupDiskResultOutput {
	return o
}

func (o LookupDiskResultOutput) ToLookupDiskResultOutputWithContext(ctx context.Context) LookupDiskResultOutput {
	return o
}

func (o LookupDiskResultOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiskResult) string { return v.CreationTimestamp }).(pulumi.StringOutput)
}

func (o LookupDiskResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiskResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupDiskResultOutput) DiskEncryptionKeys() GetDiskDiskEncryptionKeyArrayOutput {
	return o.ApplyT(func(v LookupDiskResult) []GetDiskDiskEncryptionKey { return v.DiskEncryptionKeys }).(GetDiskDiskEncryptionKeyArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDiskResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiskResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDiskResultOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiskResult) string { return v.Image }).(pulumi.StringOutput)
}

func (o LookupDiskResultOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiskResult) string { return v.Interface }).(pulumi.StringOutput)
}

func (o LookupDiskResultOutput) LabelFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiskResult) string { return v.LabelFingerprint }).(pulumi.StringOutput)
}

// A map of labels applied to this disk.
func (o LookupDiskResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDiskResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupDiskResultOutput) LastAttachTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiskResult) string { return v.LastAttachTimestamp }).(pulumi.StringOutput)
}

func (o LookupDiskResultOutput) LastDetachTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiskResult) string { return v.LastDetachTimestamp }).(pulumi.StringOutput)
}

func (o LookupDiskResultOutput) MultiWriter() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDiskResult) bool { return v.MultiWriter }).(pulumi.BoolOutput)
}

func (o LookupDiskResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiskResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDiskResultOutput) PhysicalBlockSizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDiskResult) int { return v.PhysicalBlockSizeBytes }).(pulumi.IntOutput)
}

func (o LookupDiskResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDiskResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o LookupDiskResultOutput) ProvisionedIops() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDiskResult) int { return v.ProvisionedIops }).(pulumi.IntOutput)
}

func (o LookupDiskResultOutput) ResourcePolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDiskResult) []string { return v.ResourcePolicies }).(pulumi.StringArrayOutput)
}

// The URI of the created resource.
func (o LookupDiskResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiskResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

func (o LookupDiskResultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDiskResult) int { return v.Size }).(pulumi.IntOutput)
}

func (o LookupDiskResultOutput) Snapshot() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiskResult) string { return v.Snapshot }).(pulumi.StringOutput)
}

func (o LookupDiskResultOutput) SourceImageEncryptionKeys() GetDiskSourceImageEncryptionKeyArrayOutput {
	return o.ApplyT(func(v LookupDiskResult) []GetDiskSourceImageEncryptionKey { return v.SourceImageEncryptionKeys }).(GetDiskSourceImageEncryptionKeyArrayOutput)
}

func (o LookupDiskResultOutput) SourceImageId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiskResult) string { return v.SourceImageId }).(pulumi.StringOutput)
}

func (o LookupDiskResultOutput) SourceSnapshotEncryptionKeys() GetDiskSourceSnapshotEncryptionKeyArrayOutput {
	return o.ApplyT(func(v LookupDiskResult) []GetDiskSourceSnapshotEncryptionKey { return v.SourceSnapshotEncryptionKeys }).(GetDiskSourceSnapshotEncryptionKeyArrayOutput)
}

func (o LookupDiskResultOutput) SourceSnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiskResult) string { return v.SourceSnapshotId }).(pulumi.StringOutput)
}

func (o LookupDiskResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiskResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupDiskResultOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDiskResult) []string { return v.Users }).(pulumi.StringArrayOutput)
}

func (o LookupDiskResultOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDiskResult) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDiskResultOutput{})
}
