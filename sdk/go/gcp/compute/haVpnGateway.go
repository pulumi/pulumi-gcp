// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a VPN gateway running in GCP. This virtual device is managed
// by Google, but used only by you. This type of VPN Gateway allows for the creation
// of VPN solutions with higher availability than classic Target VPN Gateways.
//
// To get more information about HaVpnGateway, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/vpnGateways)
// * How-to Guides
//   - [Choosing a VPN](https://cloud.google.com/vpn/docs/how-to/choosing-a-vpn)
//   - [Cloud VPN Overview](https://cloud.google.com/vpn/docs/concepts/overview)
//
// ## Example Usage
// ### Ha Vpn Gateway Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			network1, err := compute.NewNetwork(ctx, "network1", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewHaVpnGateway(ctx, "haGateway1", &compute.HaVpnGatewayArgs{
//				Region:  pulumi.String("us-central1"),
//				Network: network1.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Ha Vpn Gateway Ipv6
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			network1, err := compute.NewNetwork(ctx, "network1", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewHaVpnGateway(ctx, "haGateway1", &compute.HaVpnGatewayArgs{
//				Region:    pulumi.String("us-central1"),
//				Network:   network1.ID(),
//				StackType: pulumi.String("IPV4_IPV6"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Compute Ha Vpn Gateway Encrypted Interconnect
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			address1, err := compute.NewAddress(ctx, "address1", &compute.AddressArgs{
//				AddressType:  pulumi.String("INTERNAL"),
//				Purpose:      pulumi.String("IPSEC_INTERCONNECT"),
//				Address:      pulumi.String("192.168.1.0"),
//				PrefixLength: pulumi.Int(29),
//				Network:      network.SelfLink,
//			})
//			if err != nil {
//				return err
//			}
//			router, err := compute.NewRouter(ctx, "router", &compute.RouterArgs{
//				Network:                     network.Name,
//				EncryptedInterconnectRouter: pulumi.Bool(true),
//				Bgp: &compute.RouterBgpArgs{
//					Asn: pulumi.Int(16550),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			attachment1, err := compute.NewInterconnectAttachment(ctx, "attachment1", &compute.InterconnectAttachmentArgs{
//				EdgeAvailabilityDomain: pulumi.String("AVAILABILITY_DOMAIN_1"),
//				Type:                   pulumi.String("PARTNER"),
//				Router:                 router.ID(),
//				Encryption:             pulumi.String("IPSEC"),
//				IpsecInternalAddresses: pulumi.StringArray{
//					address1.SelfLink,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			address2, err := compute.NewAddress(ctx, "address2", &compute.AddressArgs{
//				AddressType:  pulumi.String("INTERNAL"),
//				Purpose:      pulumi.String("IPSEC_INTERCONNECT"),
//				Address:      pulumi.String("192.168.2.0"),
//				PrefixLength: pulumi.Int(29),
//				Network:      network.SelfLink,
//			})
//			if err != nil {
//				return err
//			}
//			attachment2, err := compute.NewInterconnectAttachment(ctx, "attachment2", &compute.InterconnectAttachmentArgs{
//				EdgeAvailabilityDomain: pulumi.String("AVAILABILITY_DOMAIN_2"),
//				Type:                   pulumi.String("PARTNER"),
//				Router:                 router.ID(),
//				Encryption:             pulumi.String("IPSEC"),
//				IpsecInternalAddresses: pulumi.StringArray{
//					address2.SelfLink,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewHaVpnGateway(ctx, "vpn-gateway", &compute.HaVpnGatewayArgs{
//				Network: network.ID(),
//				VpnInterfaces: compute.HaVpnGatewayVpnInterfaceArray{
//					&compute.HaVpnGatewayVpnInterfaceArgs{
//						Id:                     pulumi.Int(0),
//						InterconnectAttachment: attachment1.SelfLink,
//					},
//					&compute.HaVpnGatewayVpnInterfaceArgs{
//						Id:                     pulumi.Int(1),
//						InterconnectAttachment: attachment2.SelfLink,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # HaVpnGateway can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:compute/haVpnGateway:HaVpnGateway default projects/{{project}}/regions/{{region}}/vpnGateways/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/haVpnGateway:HaVpnGateway default {{project}}/{{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/haVpnGateway:HaVpnGateway default {{region}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/haVpnGateway:HaVpnGateway default {{name}}
//
// ```
type HaVpnGateway struct {
	pulumi.CustomResourceState

	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression `a-z?` which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// The network this VPN gateway is accepting traffic for.
	//
	// ***
	Network pulumi.StringOutput `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region this gateway should sit in.
	Region pulumi.StringOutput `pulumi:"region"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The stack type for this VPN gateway to identify the IP protocols that are enabled.
	// If not specified, IPV4_ONLY will be used.
	// Default value is `IPV4_ONLY`.
	// Possible values are: `IPV4_ONLY`, `IPV4_IPV6`.
	StackType pulumi.StringPtrOutput `pulumi:"stackType"`
	// A list of interfaces on this VPN gateway.
	// Structure is documented below.
	VpnInterfaces HaVpnGatewayVpnInterfaceArrayOutput `pulumi:"vpnInterfaces"`
}

// NewHaVpnGateway registers a new resource with the given unique name, arguments, and options.
func NewHaVpnGateway(ctx *pulumi.Context,
	name string, args *HaVpnGatewayArgs, opts ...pulumi.ResourceOption) (*HaVpnGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HaVpnGateway
	err := ctx.RegisterResource("gcp:compute/haVpnGateway:HaVpnGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHaVpnGateway gets an existing HaVpnGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHaVpnGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HaVpnGatewayState, opts ...pulumi.ResourceOption) (*HaVpnGateway, error) {
	var resource HaVpnGateway
	err := ctx.ReadResource("gcp:compute/haVpnGateway:HaVpnGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HaVpnGateway resources.
type haVpnGatewayState struct {
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression `a-z?` which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The network this VPN gateway is accepting traffic for.
	//
	// ***
	Network *string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region this gateway should sit in.
	Region *string `pulumi:"region"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
	// The stack type for this VPN gateway to identify the IP protocols that are enabled.
	// If not specified, IPV4_ONLY will be used.
	// Default value is `IPV4_ONLY`.
	// Possible values are: `IPV4_ONLY`, `IPV4_IPV6`.
	StackType *string `pulumi:"stackType"`
	// A list of interfaces on this VPN gateway.
	// Structure is documented below.
	VpnInterfaces []HaVpnGatewayVpnInterface `pulumi:"vpnInterfaces"`
}

type HaVpnGatewayState struct {
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression `a-z?` which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The network this VPN gateway is accepting traffic for.
	//
	// ***
	Network pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region this gateway should sit in.
	Region pulumi.StringPtrInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
	// The stack type for this VPN gateway to identify the IP protocols that are enabled.
	// If not specified, IPV4_ONLY will be used.
	// Default value is `IPV4_ONLY`.
	// Possible values are: `IPV4_ONLY`, `IPV4_IPV6`.
	StackType pulumi.StringPtrInput
	// A list of interfaces on this VPN gateway.
	// Structure is documented below.
	VpnInterfaces HaVpnGatewayVpnInterfaceArrayInput
}

func (HaVpnGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*haVpnGatewayState)(nil)).Elem()
}

type haVpnGatewayArgs struct {
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression `a-z?` which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The network this VPN gateway is accepting traffic for.
	//
	// ***
	Network string `pulumi:"network"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The region this gateway should sit in.
	Region *string `pulumi:"region"`
	// The stack type for this VPN gateway to identify the IP protocols that are enabled.
	// If not specified, IPV4_ONLY will be used.
	// Default value is `IPV4_ONLY`.
	// Possible values are: `IPV4_ONLY`, `IPV4_IPV6`.
	StackType *string `pulumi:"stackType"`
	// A list of interfaces on this VPN gateway.
	// Structure is documented below.
	VpnInterfaces []HaVpnGatewayVpnInterface `pulumi:"vpnInterfaces"`
}

// The set of arguments for constructing a HaVpnGateway resource.
type HaVpnGatewayArgs struct {
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression `a-z?` which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The network this VPN gateway is accepting traffic for.
	//
	// ***
	Network pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The region this gateway should sit in.
	Region pulumi.StringPtrInput
	// The stack type for this VPN gateway to identify the IP protocols that are enabled.
	// If not specified, IPV4_ONLY will be used.
	// Default value is `IPV4_ONLY`.
	// Possible values are: `IPV4_ONLY`, `IPV4_IPV6`.
	StackType pulumi.StringPtrInput
	// A list of interfaces on this VPN gateway.
	// Structure is documented below.
	VpnInterfaces HaVpnGatewayVpnInterfaceArrayInput
}

func (HaVpnGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*haVpnGatewayArgs)(nil)).Elem()
}

type HaVpnGatewayInput interface {
	pulumi.Input

	ToHaVpnGatewayOutput() HaVpnGatewayOutput
	ToHaVpnGatewayOutputWithContext(ctx context.Context) HaVpnGatewayOutput
}

func (*HaVpnGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**HaVpnGateway)(nil)).Elem()
}

func (i *HaVpnGateway) ToHaVpnGatewayOutput() HaVpnGatewayOutput {
	return i.ToHaVpnGatewayOutputWithContext(context.Background())
}

func (i *HaVpnGateway) ToHaVpnGatewayOutputWithContext(ctx context.Context) HaVpnGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaVpnGatewayOutput)
}

// HaVpnGatewayArrayInput is an input type that accepts HaVpnGatewayArray and HaVpnGatewayArrayOutput values.
// You can construct a concrete instance of `HaVpnGatewayArrayInput` via:
//
//	HaVpnGatewayArray{ HaVpnGatewayArgs{...} }
type HaVpnGatewayArrayInput interface {
	pulumi.Input

	ToHaVpnGatewayArrayOutput() HaVpnGatewayArrayOutput
	ToHaVpnGatewayArrayOutputWithContext(context.Context) HaVpnGatewayArrayOutput
}

type HaVpnGatewayArray []HaVpnGatewayInput

func (HaVpnGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HaVpnGateway)(nil)).Elem()
}

func (i HaVpnGatewayArray) ToHaVpnGatewayArrayOutput() HaVpnGatewayArrayOutput {
	return i.ToHaVpnGatewayArrayOutputWithContext(context.Background())
}

func (i HaVpnGatewayArray) ToHaVpnGatewayArrayOutputWithContext(ctx context.Context) HaVpnGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaVpnGatewayArrayOutput)
}

// HaVpnGatewayMapInput is an input type that accepts HaVpnGatewayMap and HaVpnGatewayMapOutput values.
// You can construct a concrete instance of `HaVpnGatewayMapInput` via:
//
//	HaVpnGatewayMap{ "key": HaVpnGatewayArgs{...} }
type HaVpnGatewayMapInput interface {
	pulumi.Input

	ToHaVpnGatewayMapOutput() HaVpnGatewayMapOutput
	ToHaVpnGatewayMapOutputWithContext(context.Context) HaVpnGatewayMapOutput
}

type HaVpnGatewayMap map[string]HaVpnGatewayInput

func (HaVpnGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HaVpnGateway)(nil)).Elem()
}

func (i HaVpnGatewayMap) ToHaVpnGatewayMapOutput() HaVpnGatewayMapOutput {
	return i.ToHaVpnGatewayMapOutputWithContext(context.Background())
}

func (i HaVpnGatewayMap) ToHaVpnGatewayMapOutputWithContext(ctx context.Context) HaVpnGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaVpnGatewayMapOutput)
}

type HaVpnGatewayOutput struct{ *pulumi.OutputState }

func (HaVpnGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HaVpnGateway)(nil)).Elem()
}

func (o HaVpnGatewayOutput) ToHaVpnGatewayOutput() HaVpnGatewayOutput {
	return o
}

func (o HaVpnGatewayOutput) ToHaVpnGatewayOutputWithContext(ctx context.Context) HaVpnGatewayOutput {
	return o
}

// An optional description of this resource.
func (o HaVpnGatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HaVpnGateway) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the resource. Provided by the client when the resource is
// created. The name must be 1-63 characters long, and comply with
// RFC1035.  Specifically, the name must be 1-63 characters long and
// match the regular expression `a-z?` which means
// the first character must be a lowercase letter, and all following
// characters must be a dash, lowercase letter, or digit, except the last
// character, which cannot be a dash.
func (o HaVpnGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVpnGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The network this VPN gateway is accepting traffic for.
//
// ***
func (o HaVpnGatewayOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVpnGateway) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o HaVpnGatewayOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVpnGateway) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region this gateway should sit in.
func (o HaVpnGatewayOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVpnGateway) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The URI of the created resource.
func (o HaVpnGatewayOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVpnGateway) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// The stack type for this VPN gateway to identify the IP protocols that are enabled.
// If not specified, IPV4_ONLY will be used.
// Default value is `IPV4_ONLY`.
// Possible values are: `IPV4_ONLY`, `IPV4_IPV6`.
func (o HaVpnGatewayOutput) StackType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HaVpnGateway) pulumi.StringPtrOutput { return v.StackType }).(pulumi.StringPtrOutput)
}

// A list of interfaces on this VPN gateway.
// Structure is documented below.
func (o HaVpnGatewayOutput) VpnInterfaces() HaVpnGatewayVpnInterfaceArrayOutput {
	return o.ApplyT(func(v *HaVpnGateway) HaVpnGatewayVpnInterfaceArrayOutput { return v.VpnInterfaces }).(HaVpnGatewayVpnInterfaceArrayOutput)
}

type HaVpnGatewayArrayOutput struct{ *pulumi.OutputState }

func (HaVpnGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HaVpnGateway)(nil)).Elem()
}

func (o HaVpnGatewayArrayOutput) ToHaVpnGatewayArrayOutput() HaVpnGatewayArrayOutput {
	return o
}

func (o HaVpnGatewayArrayOutput) ToHaVpnGatewayArrayOutputWithContext(ctx context.Context) HaVpnGatewayArrayOutput {
	return o
}

func (o HaVpnGatewayArrayOutput) Index(i pulumi.IntInput) HaVpnGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HaVpnGateway {
		return vs[0].([]*HaVpnGateway)[vs[1].(int)]
	}).(HaVpnGatewayOutput)
}

type HaVpnGatewayMapOutput struct{ *pulumi.OutputState }

func (HaVpnGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HaVpnGateway)(nil)).Elem()
}

func (o HaVpnGatewayMapOutput) ToHaVpnGatewayMapOutput() HaVpnGatewayMapOutput {
	return o
}

func (o HaVpnGatewayMapOutput) ToHaVpnGatewayMapOutputWithContext(ctx context.Context) HaVpnGatewayMapOutput {
	return o
}

func (o HaVpnGatewayMapOutput) MapIndex(k pulumi.StringInput) HaVpnGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HaVpnGateway {
		return vs[0].(map[string]*HaVpnGateway)[vs[1].(string)]
	}).(HaVpnGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HaVpnGatewayInput)(nil)).Elem(), &HaVpnGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*HaVpnGatewayArrayInput)(nil)).Elem(), HaVpnGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HaVpnGatewayMapInput)(nil)).Elem(), HaVpnGatewayMap{})
	pulumi.RegisterOutputType(HaVpnGatewayOutput{})
	pulumi.RegisterOutputType(HaVpnGatewayArrayOutput{})
	pulumi.RegisterOutputType(HaVpnGatewayMapOutput{})
}
