// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The WireGroup resource represents a group of redundant wires between interconnects in two different metros. Each WireGroup belongs to a CrossSiteNetwork. A wire group defines endpoints and the wires which exist between them.
//
// To get more information about WireGroup, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/wireGroups)
// * How-to Guides
//   - [Create a WireGroup](https://cloud.google.com/network-connectivity/docs/interconnect/how-to/cross-site/modify-network#add-wire-group)
//
// ## Example Usage
//
// ### Compute Wire Group Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			example_cross_site_network, err := compute.NewCrossSiteNetwork(ctx, "example-cross-site-network", &compute.CrossSiteNetworkArgs{
//				Name:        pulumi.String("test-cross-site-network"),
//				Description: pulumi.String("Example cross site network"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewWireGroup(ctx, "example-test-wire-group", &compute.WireGroupArgs{
//				Name:             pulumi.String("test-wire-group"),
//				Description:      pulumi.String("Example Wire Group"),
//				CrossSiteNetwork: pulumi.String("test-cross-site-network"),
//				WireProperties: &compute.WireGroupWirePropertiesArgs{
//					BandwidthUnmetered:  pulumi.Int(10),
//					FaultResponse:       pulumi.String("NONE"),
//					BandwidthAllocation: pulumi.String("ALLOCATE_PER_WIRE"),
//				},
//				WireGroupProperties: &compute.WireGroupWireGroupPropertiesArgs{
//					Type: pulumi.String("WIRE"),
//				},
//				AdminEnabled: pulumi.Bool(true),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				example_cross_site_network,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// WireGroup can be imported using any of these accepted formats:
//
// * `projects/{{project}}/global/crossSiteNetworks/{{cross_site_network}}/wireGroups/{{name}}`
//
// * `{{project}}/{{cross_site_network}}/{{name}}`
//
// * `{{cross_site_network}}/{{name}}`
//
// When using the `pulumi import` command, WireGroup can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:compute/wireGroup:WireGroup default projects/{{project}}/global/crossSiteNetworks/{{cross_site_network}}/wireGroups/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/wireGroup:WireGroup default {{project}}/{{cross_site_network}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/wireGroup:WireGroup default {{cross_site_network}}/{{name}}
// ```
type WireGroup struct {
	pulumi.CustomResourceState

	// Indicates whether the wire group is administratively enabled.
	AdminEnabled pulumi.BoolPtrOutput `pulumi:"adminEnabled"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// Required cross site network to which wire group belongs.
	CrossSiteNetwork pulumi.StringOutput `pulumi:"crossSiteNetwork"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Endpoints grouped by location, each mapping to interconnect configurations.
	// Structure is documented below.
	Endpoints WireGroupEndpointArrayOutput `pulumi:"endpoints"`
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Topology details for the wire group configuration.
	// Structure is documented below.
	Topologies WireGroupTopologyArrayOutput `pulumi:"topologies"`
	// Properties specific to the wire group.
	// Structure is documented below.
	WireGroupProperties WireGroupWireGroupPropertiesPtrOutput `pulumi:"wireGroupProperties"`
	// Default properties for wires within the group.
	// Structure is documented below.
	WireProperties WireGroupWirePropertiesPtrOutput `pulumi:"wireProperties"`
	// The single/redundant wire(s) managed by the wire group.
	// Structure is documented below.
	Wires WireGroupWireArrayOutput `pulumi:"wires"`
}

// NewWireGroup registers a new resource with the given unique name, arguments, and options.
func NewWireGroup(ctx *pulumi.Context,
	name string, args *WireGroupArgs, opts ...pulumi.ResourceOption) (*WireGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CrossSiteNetwork == nil {
		return nil, errors.New("invalid value for required argument 'CrossSiteNetwork'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WireGroup
	err := ctx.RegisterResource("gcp:compute/wireGroup:WireGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWireGroup gets an existing WireGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWireGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WireGroupState, opts ...pulumi.ResourceOption) (*WireGroup, error) {
	var resource WireGroup
	err := ctx.ReadResource("gcp:compute/wireGroup:WireGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WireGroup resources.
type wireGroupState struct {
	// Indicates whether the wire group is administratively enabled.
	AdminEnabled *bool `pulumi:"adminEnabled"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// Required cross site network to which wire group belongs.
	CrossSiteNetwork *string `pulumi:"crossSiteNetwork"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// Endpoints grouped by location, each mapping to interconnect configurations.
	// Structure is documented below.
	Endpoints []WireGroupEndpoint `pulumi:"endpoints"`
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Topology details for the wire group configuration.
	// Structure is documented below.
	Topologies []WireGroupTopology `pulumi:"topologies"`
	// Properties specific to the wire group.
	// Structure is documented below.
	WireGroupProperties *WireGroupWireGroupProperties `pulumi:"wireGroupProperties"`
	// Default properties for wires within the group.
	// Structure is documented below.
	WireProperties *WireGroupWireProperties `pulumi:"wireProperties"`
	// The single/redundant wire(s) managed by the wire group.
	// Structure is documented below.
	Wires []WireGroupWire `pulumi:"wires"`
}

type WireGroupState struct {
	// Indicates whether the wire group is administratively enabled.
	AdminEnabled pulumi.BoolPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// Required cross site network to which wire group belongs.
	CrossSiteNetwork pulumi.StringPtrInput
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// Endpoints grouped by location, each mapping to interconnect configurations.
	// Structure is documented below.
	Endpoints WireGroupEndpointArrayInput
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Topology details for the wire group configuration.
	// Structure is documented below.
	Topologies WireGroupTopologyArrayInput
	// Properties specific to the wire group.
	// Structure is documented below.
	WireGroupProperties WireGroupWireGroupPropertiesPtrInput
	// Default properties for wires within the group.
	// Structure is documented below.
	WireProperties WireGroupWirePropertiesPtrInput
	// The single/redundant wire(s) managed by the wire group.
	// Structure is documented below.
	Wires WireGroupWireArrayInput
}

func (WireGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*wireGroupState)(nil)).Elem()
}

type wireGroupArgs struct {
	// Indicates whether the wire group is administratively enabled.
	AdminEnabled *bool `pulumi:"adminEnabled"`
	// Required cross site network to which wire group belongs.
	CrossSiteNetwork string `pulumi:"crossSiteNetwork"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// Endpoints grouped by location, each mapping to interconnect configurations.
	// Structure is documented below.
	Endpoints []WireGroupEndpoint `pulumi:"endpoints"`
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Properties specific to the wire group.
	// Structure is documented below.
	WireGroupProperties *WireGroupWireGroupProperties `pulumi:"wireGroupProperties"`
	// Default properties for wires within the group.
	// Structure is documented below.
	WireProperties *WireGroupWireProperties `pulumi:"wireProperties"`
}

// The set of arguments for constructing a WireGroup resource.
type WireGroupArgs struct {
	// Indicates whether the wire group is administratively enabled.
	AdminEnabled pulumi.BoolPtrInput
	// Required cross site network to which wire group belongs.
	CrossSiteNetwork pulumi.StringInput
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// Endpoints grouped by location, each mapping to interconnect configurations.
	// Structure is documented below.
	Endpoints WireGroupEndpointArrayInput
	// Name of the resource. Provided by the client when the resource is created. The name must be
	// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression `a-z?` which means the first
	// character must be a lowercase letter, and all following characters must be a dash,
	// lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Properties specific to the wire group.
	// Structure is documented below.
	WireGroupProperties WireGroupWireGroupPropertiesPtrInput
	// Default properties for wires within the group.
	// Structure is documented below.
	WireProperties WireGroupWirePropertiesPtrInput
}

func (WireGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wireGroupArgs)(nil)).Elem()
}

type WireGroupInput interface {
	pulumi.Input

	ToWireGroupOutput() WireGroupOutput
	ToWireGroupOutputWithContext(ctx context.Context) WireGroupOutput
}

func (*WireGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**WireGroup)(nil)).Elem()
}

func (i *WireGroup) ToWireGroupOutput() WireGroupOutput {
	return i.ToWireGroupOutputWithContext(context.Background())
}

func (i *WireGroup) ToWireGroupOutputWithContext(ctx context.Context) WireGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireGroupOutput)
}

// WireGroupArrayInput is an input type that accepts WireGroupArray and WireGroupArrayOutput values.
// You can construct a concrete instance of `WireGroupArrayInput` via:
//
//	WireGroupArray{ WireGroupArgs{...} }
type WireGroupArrayInput interface {
	pulumi.Input

	ToWireGroupArrayOutput() WireGroupArrayOutput
	ToWireGroupArrayOutputWithContext(context.Context) WireGroupArrayOutput
}

type WireGroupArray []WireGroupInput

func (WireGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WireGroup)(nil)).Elem()
}

func (i WireGroupArray) ToWireGroupArrayOutput() WireGroupArrayOutput {
	return i.ToWireGroupArrayOutputWithContext(context.Background())
}

func (i WireGroupArray) ToWireGroupArrayOutputWithContext(ctx context.Context) WireGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireGroupArrayOutput)
}

// WireGroupMapInput is an input type that accepts WireGroupMap and WireGroupMapOutput values.
// You can construct a concrete instance of `WireGroupMapInput` via:
//
//	WireGroupMap{ "key": WireGroupArgs{...} }
type WireGroupMapInput interface {
	pulumi.Input

	ToWireGroupMapOutput() WireGroupMapOutput
	ToWireGroupMapOutputWithContext(context.Context) WireGroupMapOutput
}

type WireGroupMap map[string]WireGroupInput

func (WireGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WireGroup)(nil)).Elem()
}

func (i WireGroupMap) ToWireGroupMapOutput() WireGroupMapOutput {
	return i.ToWireGroupMapOutputWithContext(context.Background())
}

func (i WireGroupMap) ToWireGroupMapOutputWithContext(ctx context.Context) WireGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireGroupMapOutput)
}

type WireGroupOutput struct{ *pulumi.OutputState }

func (WireGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WireGroup)(nil)).Elem()
}

func (o WireGroupOutput) ToWireGroupOutput() WireGroupOutput {
	return o
}

func (o WireGroupOutput) ToWireGroupOutputWithContext(ctx context.Context) WireGroupOutput {
	return o
}

// Indicates whether the wire group is administratively enabled.
func (o WireGroupOutput) AdminEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WireGroup) pulumi.BoolPtrOutput { return v.AdminEnabled }).(pulumi.BoolPtrOutput)
}

// Creation timestamp in RFC3339 text format.
func (o WireGroupOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *WireGroup) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// Required cross site network to which wire group belongs.
func (o WireGroupOutput) CrossSiteNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *WireGroup) pulumi.StringOutput { return v.CrossSiteNetwork }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o WireGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WireGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Endpoints grouped by location, each mapping to interconnect configurations.
// Structure is documented below.
func (o WireGroupOutput) Endpoints() WireGroupEndpointArrayOutput {
	return o.ApplyT(func(v *WireGroup) WireGroupEndpointArrayOutput { return v.Endpoints }).(WireGroupEndpointArrayOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be
// 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
// long and match the regular expression `a-z?` which means the first
// character must be a lowercase letter, and all following characters must be a dash,
// lowercase letter, or digit, except the last character, which cannot be a dash.
func (o WireGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WireGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o WireGroupOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WireGroup) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Topology details for the wire group configuration.
// Structure is documented below.
func (o WireGroupOutput) Topologies() WireGroupTopologyArrayOutput {
	return o.ApplyT(func(v *WireGroup) WireGroupTopologyArrayOutput { return v.Topologies }).(WireGroupTopologyArrayOutput)
}

// Properties specific to the wire group.
// Structure is documented below.
func (o WireGroupOutput) WireGroupProperties() WireGroupWireGroupPropertiesPtrOutput {
	return o.ApplyT(func(v *WireGroup) WireGroupWireGroupPropertiesPtrOutput { return v.WireGroupProperties }).(WireGroupWireGroupPropertiesPtrOutput)
}

// Default properties for wires within the group.
// Structure is documented below.
func (o WireGroupOutput) WireProperties() WireGroupWirePropertiesPtrOutput {
	return o.ApplyT(func(v *WireGroup) WireGroupWirePropertiesPtrOutput { return v.WireProperties }).(WireGroupWirePropertiesPtrOutput)
}

// The single/redundant wire(s) managed by the wire group.
// Structure is documented below.
func (o WireGroupOutput) Wires() WireGroupWireArrayOutput {
	return o.ApplyT(func(v *WireGroup) WireGroupWireArrayOutput { return v.Wires }).(WireGroupWireArrayOutput)
}

type WireGroupArrayOutput struct{ *pulumi.OutputState }

func (WireGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WireGroup)(nil)).Elem()
}

func (o WireGroupArrayOutput) ToWireGroupArrayOutput() WireGroupArrayOutput {
	return o
}

func (o WireGroupArrayOutput) ToWireGroupArrayOutputWithContext(ctx context.Context) WireGroupArrayOutput {
	return o
}

func (o WireGroupArrayOutput) Index(i pulumi.IntInput) WireGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WireGroup {
		return vs[0].([]*WireGroup)[vs[1].(int)]
	}).(WireGroupOutput)
}

type WireGroupMapOutput struct{ *pulumi.OutputState }

func (WireGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WireGroup)(nil)).Elem()
}

func (o WireGroupMapOutput) ToWireGroupMapOutput() WireGroupMapOutput {
	return o
}

func (o WireGroupMapOutput) ToWireGroupMapOutputWithContext(ctx context.Context) WireGroupMapOutput {
	return o
}

func (o WireGroupMapOutput) MapIndex(k pulumi.StringInput) WireGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WireGroup {
		return vs[0].(map[string]*WireGroup)[vs[1].(string)]
	}).(WireGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WireGroupInput)(nil)).Elem(), &WireGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*WireGroupArrayInput)(nil)).Elem(), WireGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WireGroupMapInput)(nil)).Elem(), WireGroupMap{})
	pulumi.RegisterOutputType(WireGroupOutput{})
	pulumi.RegisterOutputType(WireGroupArrayOutput{})
	pulumi.RegisterOutputType(WireGroupMapOutput{})
}
