// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the serial port output from a Compute Instance. For more information see
// the official [API](https://cloud.google.com/compute/docs/instances/viewing-serial-port-output) documentation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			serial, err := compute.GetInstanceSerialPort(ctx, &compute.GetInstanceSerialPortArgs{
//				Instance: "my-instance",
//				Zone:     pulumi.StringRef("us-central1-a"),
//				Port:     1,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("serialOut", serial.Contents)
//			return nil
//		})
//	}
//
// ```
//
// Using the serial port output to generate a windows password, derived from the [official guide](https://cloud.google.com/compute/docs/instances/windows/automate-pw-generation):
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"email":    "example.user@example.com",
//				"expireOn": "2020-04-14T01:37:19Z",
//				"exponent": "AQAB",
//				"modulus":  "wgsquN4IBNPqIUnu+h/5Za1kujb2YRhX1vCQVQAkBwnWigcCqOBVfRa5JoZfx6KIvEXjWqa77jPvlsxM4WPqnDIM2qiK36up3SKkYwFjff6F2ni/ry8vrwXCX3sGZ1hbIHlK0O012HpA3ISeEswVZmX2X67naOvJXfY5v0hGPWqCADao+xVxrmxsZD4IWnKl1UaZzI5lhAzr8fw6utHwx1EZ/MSgsEki6tujcZfN+GUDRnmJGQSnPTXmsf7Q4DKreTZk49cuyB3prV91S0x3DYjCUpSXrkVy1Ha5XicGD/q+ystuFsJnrrhbNXJbpSjM6sjo/aduAkZJl4FmOt0R7Q==",
//				"userName": "example-user",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			windows, err := compute.NewInstance(ctx, "windows", &compute.InstanceArgs{
//				MachineType: pulumi.String("e2-medium"),
//				Zone:        pulumi.String("us-central1-a"),
//				BootDisk: &compute.InstanceBootDiskArgs{
//					InitializeParams: &compute.InstanceBootDiskInitializeParamsArgs{
//						Image: pulumi.String("windows-cloud/windows-2019"),
//					},
//				},
//				NetworkInterfaces: compute.InstanceNetworkInterfaceArray{
//					&compute.InstanceNetworkInterfaceArgs{
//						Network: pulumi.String("default"),
//						AccessConfigs: compute.InstanceNetworkInterfaceAccessConfigArray{
//							nil,
//						},
//					},
//				},
//				Metadata: pulumi.StringMap{
//					"serial-port-logging-enable": pulumi.String("TRUE"),
//					"windows-keys":               pulumi.String(json0),
//				},
//				ServiceAccount: &compute.InstanceServiceAccountArgs{
//					Scopes: pulumi.StringArray{
//						pulumi.String("userinfo-email"),
//						pulumi.String("compute-ro"),
//						pulumi.String("storage-ro"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			serial := pulumi.All(windows.Name, windows.Zone).ApplyT(func(_args []interface{}) (compute.GetInstanceSerialPortResult, error) {
//				name := _args[0].(string)
//				zone := _args[1].(string)
//				return compute.GetInstanceSerialPortOutput(ctx, compute.GetInstanceSerialPortOutputArgs{
//					Instance: name,
//					Zone:     zone,
//					Port:     4,
//				}, nil), nil
//			}).(compute.GetInstanceSerialPortResultOutput)
//			ctx.Export("serialOut", serial.ApplyT(func(serial compute.GetInstanceSerialPortResult) (*string, error) {
//				return &serial.Contents, nil
//			}).(pulumi.StringPtrOutput))
//			return nil
//		})
//	}
//
// ```
func GetInstanceSerialPort(ctx *pulumi.Context, args *GetInstanceSerialPortArgs, opts ...pulumi.InvokeOption) (*GetInstanceSerialPortResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetInstanceSerialPortResult
	err := ctx.Invoke("gcp:compute/getInstanceSerialPort:getInstanceSerialPort", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstanceSerialPort.
type GetInstanceSerialPortArgs struct {
	// The name of the Compute Instance to read output from.
	Instance string `pulumi:"instance"`
	// The number of the serial port to read output from. Possible values are 1-4.
	//
	// ***
	Port int `pulumi:"port"`
	// The project in which the Compute Instance exists. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The zone in which the Compute Instance exists.
	// If it is not provided, the provider zone is used.
	Zone *string `pulumi:"zone"`
}

// A collection of values returned by getInstanceSerialPort.
type GetInstanceSerialPortResult struct {
	// The output of the serial port. Serial port output is available only when the VM instance is running, and logs are limited to the most recent 1 MB of output per port.
	Contents string `pulumi:"contents"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Instance string `pulumi:"instance"`
	Port     int    `pulumi:"port"`
	Project  string `pulumi:"project"`
	Zone     string `pulumi:"zone"`
}

func GetInstanceSerialPortOutput(ctx *pulumi.Context, args GetInstanceSerialPortOutputArgs, opts ...pulumi.InvokeOption) GetInstanceSerialPortResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetInstanceSerialPortResult, error) {
			args := v.(GetInstanceSerialPortArgs)
			r, err := GetInstanceSerialPort(ctx, &args, opts...)
			var s GetInstanceSerialPortResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetInstanceSerialPortResultOutput)
}

// A collection of arguments for invoking getInstanceSerialPort.
type GetInstanceSerialPortOutputArgs struct {
	// The name of the Compute Instance to read output from.
	Instance pulumi.StringInput `pulumi:"instance"`
	// The number of the serial port to read output from. Possible values are 1-4.
	//
	// ***
	Port pulumi.IntInput `pulumi:"port"`
	// The project in which the Compute Instance exists. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The zone in which the Compute Instance exists.
	// If it is not provided, the provider zone is used.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (GetInstanceSerialPortOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceSerialPortArgs)(nil)).Elem()
}

// A collection of values returned by getInstanceSerialPort.
type GetInstanceSerialPortResultOutput struct{ *pulumi.OutputState }

func (GetInstanceSerialPortResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceSerialPortResult)(nil)).Elem()
}

func (o GetInstanceSerialPortResultOutput) ToGetInstanceSerialPortResultOutput() GetInstanceSerialPortResultOutput {
	return o
}

func (o GetInstanceSerialPortResultOutput) ToGetInstanceSerialPortResultOutputWithContext(ctx context.Context) GetInstanceSerialPortResultOutput {
	return o
}

// The output of the serial port. Serial port output is available only when the VM instance is running, and logs are limited to the most recent 1 MB of output per port.
func (o GetInstanceSerialPortResultOutput) Contents() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSerialPortResult) string { return v.Contents }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetInstanceSerialPortResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSerialPortResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetInstanceSerialPortResultOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSerialPortResult) string { return v.Instance }).(pulumi.StringOutput)
}

func (o GetInstanceSerialPortResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceSerialPortResult) int { return v.Port }).(pulumi.IntOutput)
}

func (o GetInstanceSerialPortResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSerialPortResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o GetInstanceSerialPortResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSerialPortResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetInstanceSerialPortResultOutput{})
}
