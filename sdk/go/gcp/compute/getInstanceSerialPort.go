// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the serial port output from a Compute Instance. For more information see
// the official [API](https://cloud.google.com/compute/docs/instances/viewing-serial-port-output) documentation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "us-central1-a"
// 		serial, err := compute.GetInstanceSerialPort(ctx, &compute.GetInstanceSerialPortArgs{
// 			Instance: "my-instance",
// 			Zone:     &opt0,
// 			Port:     1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("serialOut", serial.Contents)
// 		return nil
// 	})
// }
// ```
//
// Using the serial port output to generate a windows password, derived from the [official guide](https://cloud.google.com/compute/docs/instances/windows/automate-pw-generation):
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"email":    "example.user@example.com",
// 			"expireOn": "2020-04-14T01:37:19Z",
// 			"exponent": "AQAB",
// 			"modulus":  "wgsquN4IBNPqIUnu+h/5Za1kujb2YRhX1vCQVQAkBwnWigcCqOBVfRa5JoZfx6KIvEXjWqa77jPvlsxM4WPqnDIM2qiK36up3SKkYwFjff6F2ni/ry8vrwXCX3sGZ1hbIHlK0O012HpA3ISeEswVZmX2X67naOvJXfY5v0hGPWqCADao+xVxrmxsZD4IWnKl1UaZzI5lhAzr8fw6utHwx1EZ/MSgsEki6tujcZfN+GUDRnmJGQSnPTXmsf7Q4DKreTZk49cuyB3prV91S0x3DYjCUpSXrkVy1Ha5XicGD/q+ystuFsJnrrhbNXJbpSjM6sjo/aduAkZJl4FmOt0R7Q==",
// 			"userName": "example-user",
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		windows, err := compute.NewInstance(ctx, "windows", &compute.InstanceArgs{
// 			MachineType: pulumi.String("e2-medium"),
// 			Zone:        pulumi.String("us-central1-a"),
// 			BootDisk: &compute.InstanceBootDiskArgs{
// 				InitializeParams: &compute.InstanceBootDiskInitializeParamsArgs{
// 					Image: pulumi.String("windows-cloud/windows-2019"),
// 				},
// 			},
// 			NetworkInterfaces: compute.InstanceNetworkInterfaceArray{
// 				&compute.InstanceNetworkInterfaceArgs{
// 					Network: pulumi.String("default"),
// 					AccessConfigs: compute.InstanceNetworkInterfaceAccessConfigArray{
// 						nil,
// 					},
// 				},
// 			},
// 			Metadata: pulumi.StringMap{
// 				"serial-port-logging-enable": pulumi.String("TRUE"),
// 				"windows-keys":               pulumi.String(json0),
// 			},
// 			ServiceAccount: &compute.InstanceServiceAccountArgs{
// 				Scopes: pulumi.StringArray{
// 					pulumi.String("userinfo-email"),
// 					pulumi.String("compute-ro"),
// 					pulumi.String("storage-ro"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("serialOut", serial.ApplyT(func(serial compute.GetInstanceSerialPortResult) (string, error) {
// 			return serial.Contents, nil
// 		}).(pulumi.StringOutput))
// 		return nil
// 	})
// }
// ```
func GetInstanceSerialPort(ctx *pulumi.Context, args *GetInstanceSerialPortArgs, opts ...pulumi.InvokeOption) (*GetInstanceSerialPortResult, error) {
	var rv GetInstanceSerialPortResult
	err := ctx.Invoke("gcp:compute/getInstanceSerialPort:getInstanceSerialPort", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstanceSerialPort.
type GetInstanceSerialPortArgs struct {
	// The name of the Compute Instance to read output from.
	Instance string `pulumi:"instance"`
	// The number of the serial port to read output from. Possible values are 1-4.
	Port int `pulumi:"port"`
	// The project in which the Compute Instance exists. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The zone in which the Compute Instance exists.
	// If it is not provided, the provider zone is used.
	Zone *string `pulumi:"zone"`
}

// A collection of values returned by getInstanceSerialPort.
type GetInstanceSerialPortResult struct {
	// The output of the serial port. Serial port output is available only when the VM instance is running, and logs are limited to the most recent 1 MB of output per port.
	Contents string `pulumi:"contents"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Instance string `pulumi:"instance"`
	Port     int    `pulumi:"port"`
	Project  string `pulumi:"project"`
	Zone     string `pulumi:"zone"`
}
