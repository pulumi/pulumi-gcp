// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents an Autoscaler resource.
//
// Autoscalers allow you to automatically scale virtual machine instances in
// managed instance groups according to an autoscaling policy that you
// define.
//
// To get more information about RegionAutoscaler, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/regionAutoscalers)
// * How-to Guides
//     * [Autoscaling Groups of Instances](https://cloud.google.com/compute/docs/autoscaler/)
//
// ## Example Usage
// ### Region Autoscaler Basic
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "debian-9"
// 		opt1 := "debian-cloud"
// 		debian9, err := compute.LookupImage(ctx, &compute.LookupImageArgs{
// 			Family:  &opt0,
// 			Project: &opt1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		foobarInstanceTemplate, err := compute.NewInstanceTemplate(ctx, "foobarInstanceTemplate", &compute.InstanceTemplateArgs{
// 			MachineType:  pulumi.String("e2-medium"),
// 			CanIpForward: pulumi.Bool(false),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("foo"),
// 				pulumi.String("bar"),
// 			},
// 			Disks: compute.InstanceTemplateDiskArray{
// 				&compute.InstanceTemplateDiskArgs{
// 					SourceImage: pulumi.String(debian9.Id),
// 				},
// 			},
// 			NetworkInterfaces: compute.InstanceTemplateNetworkInterfaceArray{
// 				&compute.InstanceTemplateNetworkInterfaceArgs{
// 					Network: pulumi.String("default"),
// 				},
// 			},
// 			Metadata: pulumi.AnyMap{
// 				"foo": pulumi.Any("bar"),
// 			},
// 			ServiceAccount: &compute.InstanceTemplateServiceAccountArgs{
// 				Scopes: pulumi.StringArray{
// 					pulumi.String("userinfo-email"),
// 					pulumi.String("compute-ro"),
// 					pulumi.String("storage-ro"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		foobarTargetPool, err := compute.NewTargetPool(ctx, "foobarTargetPool", nil)
// 		if err != nil {
// 			return err
// 		}
// 		foobarRegionInstanceGroupManager, err := compute.NewRegionInstanceGroupManager(ctx, "foobarRegionInstanceGroupManager", &compute.RegionInstanceGroupManagerArgs{
// 			Region: pulumi.String("us-central1"),
// 			Versions: compute.RegionInstanceGroupManagerVersionArray{
// 				&compute.RegionInstanceGroupManagerVersionArgs{
// 					InstanceTemplate: foobarInstanceTemplate.ID(),
// 					Name:             pulumi.String("primary"),
// 				},
// 			},
// 			TargetPools: pulumi.StringArray{
// 				foobarTargetPool.ID(),
// 			},
// 			BaseInstanceName: pulumi.String("foobar"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewRegionAutoscaler(ctx, "foobarRegionAutoscaler", &compute.RegionAutoscalerArgs{
// 			Region: pulumi.String("us-central1"),
// 			Target: foobarRegionInstanceGroupManager.ID(),
// 			AutoscalingPolicy: &compute.RegionAutoscalerAutoscalingPolicyArgs{
// 				MaxReplicas:    pulumi.Int(5),
// 				MinReplicas:    pulumi.Int(1),
// 				CooldownPeriod: pulumi.Int(60),
// 				CpuUtilization: &compute.RegionAutoscalerAutoscalingPolicyCpuUtilizationArgs{
// 					Target: pulumi.Float64(0.5),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// RegionAutoscaler can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:compute/regionAutoscaler:RegionAutoscaler default projects/{{project}}/regions/{{region}}/autoscalers/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:compute/regionAutoscaler:RegionAutoscaler default {{project}}/{{region}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:compute/regionAutoscaler:RegionAutoscaler default {{region}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:compute/regionAutoscaler:RegionAutoscaler default {{name}}
// ```
type RegionAutoscaler struct {
	pulumi.CustomResourceState

	// The configuration parameters for the autoscaling algorithm. You can
	// define one or more of the policies for an autoscaler: cpuUtilization,
	// customMetricUtilizations, and loadBalancingUtilization.
	// If none of these are specified, the default will be to autoscale based
	// on cpuUtilization to 0.6 or 60%.
	// Structure is documented below.
	AutoscalingPolicy RegionAutoscalerAutoscalingPolicyOutput `pulumi:"autoscalingPolicy"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The identifier for this object. Format specified above.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// URL of the region where the instance group resides.
	Region pulumi.StringOutput `pulumi:"region"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target pulumi.StringOutput `pulumi:"target"`
}

// NewRegionAutoscaler registers a new resource with the given unique name, arguments, and options.
func NewRegionAutoscaler(ctx *pulumi.Context,
	name string, args *RegionAutoscalerArgs, opts ...pulumi.ResourceOption) (*RegionAutoscaler, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoscalingPolicy == nil {
		return nil, errors.New("invalid value for required argument 'AutoscalingPolicy'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	var resource RegionAutoscaler
	err := ctx.RegisterResource("gcp:compute/regionAutoscaler:RegionAutoscaler", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionAutoscaler gets an existing RegionAutoscaler resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionAutoscaler(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionAutoscalerState, opts ...pulumi.ResourceOption) (*RegionAutoscaler, error) {
	var resource RegionAutoscaler
	err := ctx.ReadResource("gcp:compute/regionAutoscaler:RegionAutoscaler", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionAutoscaler resources.
type regionAutoscalerState struct {
	// The configuration parameters for the autoscaling algorithm. You can
	// define one or more of the policies for an autoscaler: cpuUtilization,
	// customMetricUtilizations, and loadBalancingUtilization.
	// If none of these are specified, the default will be to autoscale based
	// on cpuUtilization to 0.6 or 60%.
	// Structure is documented below.
	AutoscalingPolicy *RegionAutoscalerAutoscalingPolicy `pulumi:"autoscalingPolicy"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// The identifier for this object. Format specified above.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// URL of the region where the instance group resides.
	Region *string `pulumi:"region"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target *string `pulumi:"target"`
}

type RegionAutoscalerState struct {
	// The configuration parameters for the autoscaling algorithm. You can
	// define one or more of the policies for an autoscaler: cpuUtilization,
	// customMetricUtilizations, and loadBalancingUtilization.
	// If none of these are specified, the default will be to autoscale based
	// on cpuUtilization to 0.6 or 60%.
	// Structure is documented below.
	AutoscalingPolicy RegionAutoscalerAutoscalingPolicyPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// The identifier for this object. Format specified above.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// URL of the region where the instance group resides.
	Region pulumi.StringPtrInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target pulumi.StringPtrInput
}

func (RegionAutoscalerState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionAutoscalerState)(nil)).Elem()
}

type regionAutoscalerArgs struct {
	// The configuration parameters for the autoscaling algorithm. You can
	// define one or more of the policies for an autoscaler: cpuUtilization,
	// customMetricUtilizations, and loadBalancingUtilization.
	// If none of these are specified, the default will be to autoscale based
	// on cpuUtilization to 0.6 or 60%.
	// Structure is documented below.
	AutoscalingPolicy RegionAutoscalerAutoscalingPolicy `pulumi:"autoscalingPolicy"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// The identifier for this object. Format specified above.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// URL of the region where the instance group resides.
	Region *string `pulumi:"region"`
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target string `pulumi:"target"`
}

// The set of arguments for constructing a RegionAutoscaler resource.
type RegionAutoscalerArgs struct {
	// The configuration parameters for the autoscaling algorithm. You can
	// define one or more of the policies for an autoscaler: cpuUtilization,
	// customMetricUtilizations, and loadBalancingUtilization.
	// If none of these are specified, the default will be to autoscale based
	// on cpuUtilization to 0.6 or 60%.
	// Structure is documented below.
	AutoscalingPolicy RegionAutoscalerAutoscalingPolicyInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// The identifier for this object. Format specified above.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// URL of the region where the instance group resides.
	Region pulumi.StringPtrInput
	// Fraction of backend capacity utilization (set in HTTP(s) load
	// balancing configuration) that autoscaler should maintain. Must
	// be a positive float value. If not defined, the default is 0.8.
	Target pulumi.StringInput
}

func (RegionAutoscalerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionAutoscalerArgs)(nil)).Elem()
}

type RegionAutoscalerInput interface {
	pulumi.Input

	ToRegionAutoscalerOutput() RegionAutoscalerOutput
	ToRegionAutoscalerOutputWithContext(ctx context.Context) RegionAutoscalerOutput
}

func (*RegionAutoscaler) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionAutoscaler)(nil))
}

func (i *RegionAutoscaler) ToRegionAutoscalerOutput() RegionAutoscalerOutput {
	return i.ToRegionAutoscalerOutputWithContext(context.Background())
}

func (i *RegionAutoscaler) ToRegionAutoscalerOutputWithContext(ctx context.Context) RegionAutoscalerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionAutoscalerOutput)
}

func (i *RegionAutoscaler) ToRegionAutoscalerPtrOutput() RegionAutoscalerPtrOutput {
	return i.ToRegionAutoscalerPtrOutputWithContext(context.Background())
}

func (i *RegionAutoscaler) ToRegionAutoscalerPtrOutputWithContext(ctx context.Context) RegionAutoscalerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionAutoscalerPtrOutput)
}

type RegionAutoscalerPtrInput interface {
	pulumi.Input

	ToRegionAutoscalerPtrOutput() RegionAutoscalerPtrOutput
	ToRegionAutoscalerPtrOutputWithContext(ctx context.Context) RegionAutoscalerPtrOutput
}

type regionAutoscalerPtrType RegionAutoscalerArgs

func (*regionAutoscalerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionAutoscaler)(nil))
}

func (i *regionAutoscalerPtrType) ToRegionAutoscalerPtrOutput() RegionAutoscalerPtrOutput {
	return i.ToRegionAutoscalerPtrOutputWithContext(context.Background())
}

func (i *regionAutoscalerPtrType) ToRegionAutoscalerPtrOutputWithContext(ctx context.Context) RegionAutoscalerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionAutoscalerPtrOutput)
}

// RegionAutoscalerArrayInput is an input type that accepts RegionAutoscalerArray and RegionAutoscalerArrayOutput values.
// You can construct a concrete instance of `RegionAutoscalerArrayInput` via:
//
//          RegionAutoscalerArray{ RegionAutoscalerArgs{...} }
type RegionAutoscalerArrayInput interface {
	pulumi.Input

	ToRegionAutoscalerArrayOutput() RegionAutoscalerArrayOutput
	ToRegionAutoscalerArrayOutputWithContext(context.Context) RegionAutoscalerArrayOutput
}

type RegionAutoscalerArray []RegionAutoscalerInput

func (RegionAutoscalerArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*RegionAutoscaler)(nil))
}

func (i RegionAutoscalerArray) ToRegionAutoscalerArrayOutput() RegionAutoscalerArrayOutput {
	return i.ToRegionAutoscalerArrayOutputWithContext(context.Background())
}

func (i RegionAutoscalerArray) ToRegionAutoscalerArrayOutputWithContext(ctx context.Context) RegionAutoscalerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionAutoscalerArrayOutput)
}

// RegionAutoscalerMapInput is an input type that accepts RegionAutoscalerMap and RegionAutoscalerMapOutput values.
// You can construct a concrete instance of `RegionAutoscalerMapInput` via:
//
//          RegionAutoscalerMap{ "key": RegionAutoscalerArgs{...} }
type RegionAutoscalerMapInput interface {
	pulumi.Input

	ToRegionAutoscalerMapOutput() RegionAutoscalerMapOutput
	ToRegionAutoscalerMapOutputWithContext(context.Context) RegionAutoscalerMapOutput
}

type RegionAutoscalerMap map[string]RegionAutoscalerInput

func (RegionAutoscalerMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*RegionAutoscaler)(nil))
}

func (i RegionAutoscalerMap) ToRegionAutoscalerMapOutput() RegionAutoscalerMapOutput {
	return i.ToRegionAutoscalerMapOutputWithContext(context.Background())
}

func (i RegionAutoscalerMap) ToRegionAutoscalerMapOutputWithContext(ctx context.Context) RegionAutoscalerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionAutoscalerMapOutput)
}

type RegionAutoscalerOutput struct {
	*pulumi.OutputState
}

func (RegionAutoscalerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionAutoscaler)(nil))
}

func (o RegionAutoscalerOutput) ToRegionAutoscalerOutput() RegionAutoscalerOutput {
	return o
}

func (o RegionAutoscalerOutput) ToRegionAutoscalerOutputWithContext(ctx context.Context) RegionAutoscalerOutput {
	return o
}

func (o RegionAutoscalerOutput) ToRegionAutoscalerPtrOutput() RegionAutoscalerPtrOutput {
	return o.ToRegionAutoscalerPtrOutputWithContext(context.Background())
}

func (o RegionAutoscalerOutput) ToRegionAutoscalerPtrOutputWithContext(ctx context.Context) RegionAutoscalerPtrOutput {
	return o.ApplyT(func(v RegionAutoscaler) *RegionAutoscaler {
		return &v
	}).(RegionAutoscalerPtrOutput)
}

type RegionAutoscalerPtrOutput struct {
	*pulumi.OutputState
}

func (RegionAutoscalerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionAutoscaler)(nil))
}

func (o RegionAutoscalerPtrOutput) ToRegionAutoscalerPtrOutput() RegionAutoscalerPtrOutput {
	return o
}

func (o RegionAutoscalerPtrOutput) ToRegionAutoscalerPtrOutputWithContext(ctx context.Context) RegionAutoscalerPtrOutput {
	return o
}

type RegionAutoscalerArrayOutput struct{ *pulumi.OutputState }

func (RegionAutoscalerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionAutoscaler)(nil))
}

func (o RegionAutoscalerArrayOutput) ToRegionAutoscalerArrayOutput() RegionAutoscalerArrayOutput {
	return o
}

func (o RegionAutoscalerArrayOutput) ToRegionAutoscalerArrayOutputWithContext(ctx context.Context) RegionAutoscalerArrayOutput {
	return o
}

func (o RegionAutoscalerArrayOutput) Index(i pulumi.IntInput) RegionAutoscalerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionAutoscaler {
		return vs[0].([]RegionAutoscaler)[vs[1].(int)]
	}).(RegionAutoscalerOutput)
}

type RegionAutoscalerMapOutput struct{ *pulumi.OutputState }

func (RegionAutoscalerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RegionAutoscaler)(nil))
}

func (o RegionAutoscalerMapOutput) ToRegionAutoscalerMapOutput() RegionAutoscalerMapOutput {
	return o
}

func (o RegionAutoscalerMapOutput) ToRegionAutoscalerMapOutputWithContext(ctx context.Context) RegionAutoscalerMapOutput {
	return o
}

func (o RegionAutoscalerMapOutput) MapIndex(k pulumi.StringInput) RegionAutoscalerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) RegionAutoscaler {
		return vs[0].(map[string]RegionAutoscaler)[vs[1].(string)]
	}).(RegionAutoscalerOutput)
}

func init() {
	pulumi.RegisterOutputType(RegionAutoscalerOutput{})
	pulumi.RegisterOutputType(RegionAutoscalerPtrOutput{})
	pulumi.RegisterOutputType(RegionAutoscalerArrayOutput{})
	pulumi.RegisterOutputType(RegionAutoscalerMapOutput{})
}
