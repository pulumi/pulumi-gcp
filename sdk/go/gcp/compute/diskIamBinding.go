// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Three different resources help you manage your IAM policy for Compute Engine Disk. Each of these resources serves a different use case:
//
// * `compute.DiskIamPolicy`: Authoritative. Sets the IAM policy for the disk and replaces any existing policy already attached.
// * `compute.DiskIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the disk are preserved.
// * `compute.DiskIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the disk are preserved.
//
// > **Note:** `compute.DiskIamPolicy` **cannot** be used in conjunction with `compute.DiskIamBinding` and `compute.DiskIamMember` or they will fight over what your policy should be.
//
// > **Note:** `compute.DiskIamBinding` resources **can be** used in conjunction with `compute.DiskIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_compute\_disk\_iam\_policy
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/compute"
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/organizations"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
// 			Bindings: []organizations.GetIAMPolicyBinding{
// 				organizations.GetIAMPolicyBinding{
// 					Role: "roles/viewer",
// 					Members: []string{
// 						"user:jane@example.com",
// 					},
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewDiskIamPolicy(ctx, "policy", &compute.DiskIamPolicyArgs{
// 			Project:    pulumi.Any(google_compute_disk.Default.Project),
// 			Zone:       pulumi.Any(google_compute_disk.Default.Zone),
// 			PolicyData: pulumi.String(admin.PolicyData),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## google\_compute\_disk\_iam\_binding
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewDiskIamBinding(ctx, "binding", &compute.DiskIamBindingArgs{
// 			Project: pulumi.Any(google_compute_disk.Default.Project),
// 			Zone:    pulumi.Any(google_compute_disk.Default.Zone),
// 			Role:    pulumi.String("roles/viewer"),
// 			Members: pulumi.StringArray{
// 				pulumi.String("user:jane@example.com"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## google\_compute\_disk\_iam\_member
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewDiskIamMember(ctx, "member", &compute.DiskIamMemberArgs{
// 			Project: pulumi.Any(google_compute_disk.Default.Project),
// 			Zone:    pulumi.Any(google_compute_disk.Default.Zone),
// 			Role:    pulumi.String("roles/viewer"),
// 			Member:  pulumi.String("user:jane@example.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/zones/{{zone}}/disks/{{name}} * {{project}}/{{zone}}/{{name}} * {{zone}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Compute Engine disk IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//  $ pulumi import gcp:compute/diskIamBinding:DiskIamBinding editor "projects/{{project}}/zones/{{zone}}/disks/{{disk}} roles/viewer user:jane@example.com"
// ```
//
//  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//  $ pulumi import gcp:compute/diskIamBinding:DiskIamBinding editor "projects/{{project}}/zones/{{zone}}/disks/{{disk}} roles/viewer"
// ```
//
//  IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//  $ pulumi import gcp:compute/diskIamBinding:DiskIamBinding editor projects/{{project}}/zones/{{zone}}/disks/{{disk}}
// ```
//
//  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type DiskIamBinding struct {
	pulumi.CustomResourceState

	Condition DiskIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringOutput      `pulumi:"etag"`
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `compute.DiskIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
	// A reference to the zone where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDiskIamBinding registers a new resource with the given unique name, arguments, and options.
func NewDiskIamBinding(ctx *pulumi.Context,
	name string, args *DiskIamBindingArgs, opts ...pulumi.ResourceOption) (*DiskIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource DiskIamBinding
	err := ctx.RegisterResource("gcp:compute/diskIamBinding:DiskIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiskIamBinding gets an existing DiskIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiskIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiskIamBindingState, opts ...pulumi.ResourceOption) (*DiskIamBinding, error) {
	var resource DiskIamBinding
	err := ctx.ReadResource("gcp:compute/diskIamBinding:DiskIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiskIamBinding resources.
type diskIamBindingState struct {
	Condition *DiskIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag    *string  `pulumi:"etag"`
	Members []string `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `compute.DiskIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
	// A reference to the zone where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone *string `pulumi:"zone"`
}

type DiskIamBindingState struct {
	Condition DiskIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag    pulumi.StringPtrInput
	Members pulumi.StringArrayInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `compute.DiskIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
	// A reference to the zone where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone pulumi.StringPtrInput
}

func (DiskIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*diskIamBindingState)(nil)).Elem()
}

type diskIamBindingArgs struct {
	Condition *DiskIamBindingCondition `pulumi:"condition"`
	Members   []string                 `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `compute.DiskIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
	// A reference to the zone where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a DiskIamBinding resource.
type DiskIamBindingArgs struct {
	Condition DiskIamBindingConditionPtrInput
	Members   pulumi.StringArrayInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `compute.DiskIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
	// A reference to the zone where the disk resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone pulumi.StringPtrInput
}

func (DiskIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diskIamBindingArgs)(nil)).Elem()
}

type DiskIamBindingInput interface {
	pulumi.Input

	ToDiskIamBindingOutput() DiskIamBindingOutput
	ToDiskIamBindingOutputWithContext(ctx context.Context) DiskIamBindingOutput
}

func (*DiskIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskIamBinding)(nil))
}

func (i *DiskIamBinding) ToDiskIamBindingOutput() DiskIamBindingOutput {
	return i.ToDiskIamBindingOutputWithContext(context.Background())
}

func (i *DiskIamBinding) ToDiskIamBindingOutputWithContext(ctx context.Context) DiskIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskIamBindingOutput)
}

func (i *DiskIamBinding) ToDiskIamBindingPtrOutput() DiskIamBindingPtrOutput {
	return i.ToDiskIamBindingPtrOutputWithContext(context.Background())
}

func (i *DiskIamBinding) ToDiskIamBindingPtrOutputWithContext(ctx context.Context) DiskIamBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskIamBindingPtrOutput)
}

type DiskIamBindingPtrInput interface {
	pulumi.Input

	ToDiskIamBindingPtrOutput() DiskIamBindingPtrOutput
	ToDiskIamBindingPtrOutputWithContext(ctx context.Context) DiskIamBindingPtrOutput
}

type diskIamBindingPtrType DiskIamBindingArgs

func (*diskIamBindingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskIamBinding)(nil))
}

func (i *diskIamBindingPtrType) ToDiskIamBindingPtrOutput() DiskIamBindingPtrOutput {
	return i.ToDiskIamBindingPtrOutputWithContext(context.Background())
}

func (i *diskIamBindingPtrType) ToDiskIamBindingPtrOutputWithContext(ctx context.Context) DiskIamBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskIamBindingPtrOutput)
}

// DiskIamBindingArrayInput is an input type that accepts DiskIamBindingArray and DiskIamBindingArrayOutput values.
// You can construct a concrete instance of `DiskIamBindingArrayInput` via:
//
//          DiskIamBindingArray{ DiskIamBindingArgs{...} }
type DiskIamBindingArrayInput interface {
	pulumi.Input

	ToDiskIamBindingArrayOutput() DiskIamBindingArrayOutput
	ToDiskIamBindingArrayOutputWithContext(context.Context) DiskIamBindingArrayOutput
}

type DiskIamBindingArray []DiskIamBindingInput

func (DiskIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*DiskIamBinding)(nil))
}

func (i DiskIamBindingArray) ToDiskIamBindingArrayOutput() DiskIamBindingArrayOutput {
	return i.ToDiskIamBindingArrayOutputWithContext(context.Background())
}

func (i DiskIamBindingArray) ToDiskIamBindingArrayOutputWithContext(ctx context.Context) DiskIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskIamBindingArrayOutput)
}

// DiskIamBindingMapInput is an input type that accepts DiskIamBindingMap and DiskIamBindingMapOutput values.
// You can construct a concrete instance of `DiskIamBindingMapInput` via:
//
//          DiskIamBindingMap{ "key": DiskIamBindingArgs{...} }
type DiskIamBindingMapInput interface {
	pulumi.Input

	ToDiskIamBindingMapOutput() DiskIamBindingMapOutput
	ToDiskIamBindingMapOutputWithContext(context.Context) DiskIamBindingMapOutput
}

type DiskIamBindingMap map[string]DiskIamBindingInput

func (DiskIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*DiskIamBinding)(nil))
}

func (i DiskIamBindingMap) ToDiskIamBindingMapOutput() DiskIamBindingMapOutput {
	return i.ToDiskIamBindingMapOutputWithContext(context.Background())
}

func (i DiskIamBindingMap) ToDiskIamBindingMapOutputWithContext(ctx context.Context) DiskIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskIamBindingMapOutput)
}

type DiskIamBindingOutput struct {
	*pulumi.OutputState
}

func (DiskIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskIamBinding)(nil))
}

func (o DiskIamBindingOutput) ToDiskIamBindingOutput() DiskIamBindingOutput {
	return o
}

func (o DiskIamBindingOutput) ToDiskIamBindingOutputWithContext(ctx context.Context) DiskIamBindingOutput {
	return o
}

func (o DiskIamBindingOutput) ToDiskIamBindingPtrOutput() DiskIamBindingPtrOutput {
	return o.ToDiskIamBindingPtrOutputWithContext(context.Background())
}

func (o DiskIamBindingOutput) ToDiskIamBindingPtrOutputWithContext(ctx context.Context) DiskIamBindingPtrOutput {
	return o.ApplyT(func(v DiskIamBinding) *DiskIamBinding {
		return &v
	}).(DiskIamBindingPtrOutput)
}

type DiskIamBindingPtrOutput struct {
	*pulumi.OutputState
}

func (DiskIamBindingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskIamBinding)(nil))
}

func (o DiskIamBindingPtrOutput) ToDiskIamBindingPtrOutput() DiskIamBindingPtrOutput {
	return o
}

func (o DiskIamBindingPtrOutput) ToDiskIamBindingPtrOutputWithContext(ctx context.Context) DiskIamBindingPtrOutput {
	return o
}

type DiskIamBindingArrayOutput struct{ *pulumi.OutputState }

func (DiskIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskIamBinding)(nil))
}

func (o DiskIamBindingArrayOutput) ToDiskIamBindingArrayOutput() DiskIamBindingArrayOutput {
	return o
}

func (o DiskIamBindingArrayOutput) ToDiskIamBindingArrayOutputWithContext(ctx context.Context) DiskIamBindingArrayOutput {
	return o
}

func (o DiskIamBindingArrayOutput) Index(i pulumi.IntInput) DiskIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskIamBinding {
		return vs[0].([]DiskIamBinding)[vs[1].(int)]
	}).(DiskIamBindingOutput)
}

type DiskIamBindingMapOutput struct{ *pulumi.OutputState }

func (DiskIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DiskIamBinding)(nil))
}

func (o DiskIamBindingMapOutput) ToDiskIamBindingMapOutput() DiskIamBindingMapOutput {
	return o
}

func (o DiskIamBindingMapOutput) ToDiskIamBindingMapOutputWithContext(ctx context.Context) DiskIamBindingMapOutput {
	return o
}

func (o DiskIamBindingMapOutput) MapIndex(k pulumi.StringInput) DiskIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DiskIamBinding {
		return vs[0].(map[string]DiskIamBinding)[vs[1].(string)]
	}).(DiskIamBindingOutput)
}

func init() {
	pulumi.RegisterOutputType(DiskIamBindingOutput{})
	pulumi.RegisterOutputType(DiskIamBindingPtrOutput{})
	pulumi.RegisterOutputType(DiskIamBindingArrayOutput{})
	pulumi.RegisterOutputType(DiskIamBindingMapOutput{})
}
