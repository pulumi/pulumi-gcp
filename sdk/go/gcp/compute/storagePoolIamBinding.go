// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Compute Engine StoragePool. Each of these resources serves a different use case:
//
// * `compute.StoragePoolIamPolicy`: Authoritative. Sets the IAM policy for the storagepool and replaces any existing policy already attached.
// * `compute.StoragePoolIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the storagepool are preserved.
// * `compute.StoragePoolIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the storagepool are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `compute.StoragePoolIamPolicy`: Retrieves the IAM policy for the storagepool
//
// > **Note:** `compute.StoragePoolIamPolicy` **cannot** be used in conjunction with `compute.StoragePoolIamBinding` and `compute.StoragePoolIamMember` or they will fight over what your policy should be.
//
// > **Note:** `compute.StoragePoolIamBinding` resources **can be** used in conjunction with `compute.StoragePoolIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## compute.StoragePoolIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/compute.viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewStoragePoolIamPolicy(ctx, "policy", &compute.StoragePoolIamPolicyArgs{
//				Project:    pulumi.Any(test_storage_pool_basic.Project),
//				Zone:       pulumi.Any(test_storage_pool_basic.Zone),
//				Name:       pulumi.Any(test_storage_pool_basic.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/compute.viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewStoragePoolIamPolicy(ctx, "policy", &compute.StoragePoolIamPolicyArgs{
//				Project:    pulumi.Any(test_storage_pool_basic.Project),
//				Zone:       pulumi.Any(test_storage_pool_basic.Zone),
//				Name:       pulumi.Any(test_storage_pool_basic.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## compute.StoragePoolIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewStoragePoolIamBinding(ctx, "binding", &compute.StoragePoolIamBindingArgs{
//				Project: pulumi.Any(test_storage_pool_basic.Project),
//				Zone:    pulumi.Any(test_storage_pool_basic.Zone),
//				Name:    pulumi.Any(test_storage_pool_basic.Name),
//				Role:    pulumi.String("roles/compute.viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewStoragePoolIamBinding(ctx, "binding", &compute.StoragePoolIamBindingArgs{
//				Project: pulumi.Any(test_storage_pool_basic.Project),
//				Zone:    pulumi.Any(test_storage_pool_basic.Zone),
//				Name:    pulumi.Any(test_storage_pool_basic.Name),
//				Role:    pulumi.String("roles/compute.viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &compute.StoragePoolIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## compute.StoragePoolIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewStoragePoolIamMember(ctx, "member", &compute.StoragePoolIamMemberArgs{
//				Project: pulumi.Any(test_storage_pool_basic.Project),
//				Zone:    pulumi.Any(test_storage_pool_basic.Zone),
//				Name:    pulumi.Any(test_storage_pool_basic.Name),
//				Role:    pulumi.String("roles/compute.viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewStoragePoolIamMember(ctx, "member", &compute.StoragePoolIamMemberArgs{
//				Project: pulumi.Any(test_storage_pool_basic.Project),
//				Zone:    pulumi.Any(test_storage_pool_basic.Zone),
//				Name:    pulumi.Any(test_storage_pool_basic.Name),
//				Role:    pulumi.String("roles/compute.viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//				Condition: &compute.StoragePoolIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Compute Engine StoragePool
// Three different resources help you manage your IAM policy for Compute Engine StoragePool. Each of these resources serves a different use case:
//
// * `compute.StoragePoolIamPolicy`: Authoritative. Sets the IAM policy for the storagepool and replaces any existing policy already attached.
// * `compute.StoragePoolIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the storagepool are preserved.
// * `compute.StoragePoolIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the storagepool are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `compute.StoragePoolIamPolicy`: Retrieves the IAM policy for the storagepool
//
// > **Note:** `compute.StoragePoolIamPolicy` **cannot** be used in conjunction with `compute.StoragePoolIamBinding` and `compute.StoragePoolIamMember` or they will fight over what your policy should be.
//
// > **Note:** `compute.StoragePoolIamBinding` resources **can be** used in conjunction with `compute.StoragePoolIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## compute.StoragePoolIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/compute.viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewStoragePoolIamPolicy(ctx, "policy", &compute.StoragePoolIamPolicyArgs{
//				Project:    pulumi.Any(test_storage_pool_basic.Project),
//				Zone:       pulumi.Any(test_storage_pool_basic.Zone),
//				Name:       pulumi.Any(test_storage_pool_basic.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/compute.viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewStoragePoolIamPolicy(ctx, "policy", &compute.StoragePoolIamPolicyArgs{
//				Project:    pulumi.Any(test_storage_pool_basic.Project),
//				Zone:       pulumi.Any(test_storage_pool_basic.Zone),
//				Name:       pulumi.Any(test_storage_pool_basic.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## compute.StoragePoolIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewStoragePoolIamBinding(ctx, "binding", &compute.StoragePoolIamBindingArgs{
//				Project: pulumi.Any(test_storage_pool_basic.Project),
//				Zone:    pulumi.Any(test_storage_pool_basic.Zone),
//				Name:    pulumi.Any(test_storage_pool_basic.Name),
//				Role:    pulumi.String("roles/compute.viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewStoragePoolIamBinding(ctx, "binding", &compute.StoragePoolIamBindingArgs{
//				Project: pulumi.Any(test_storage_pool_basic.Project),
//				Zone:    pulumi.Any(test_storage_pool_basic.Zone),
//				Name:    pulumi.Any(test_storage_pool_basic.Name),
//				Role:    pulumi.String("roles/compute.viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &compute.StoragePoolIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## compute.StoragePoolIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewStoragePoolIamMember(ctx, "member", &compute.StoragePoolIamMemberArgs{
//				Project: pulumi.Any(test_storage_pool_basic.Project),
//				Zone:    pulumi.Any(test_storage_pool_basic.Zone),
//				Name:    pulumi.Any(test_storage_pool_basic.Name),
//				Role:    pulumi.String("roles/compute.viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewStoragePoolIamMember(ctx, "member", &compute.StoragePoolIamMemberArgs{
//				Project: pulumi.Any(test_storage_pool_basic.Project),
//				Zone:    pulumi.Any(test_storage_pool_basic.Zone),
//				Name:    pulumi.Any(test_storage_pool_basic.Name),
//				Role:    pulumi.String("roles/compute.viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//				Condition: &compute.StoragePoolIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/zones/{{zone}}/storagePools/{{name}}
//
// * {{project}}/{{zone}}/{{name}}
//
// * {{zone}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Compute Engine storagepool IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:compute/storagePoolIamBinding:StoragePoolIamBinding editor "projects/{{project}}/zones/{{zone}}/storagePools/{{storage_pool}} roles/compute.viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:compute/storagePoolIamBinding:StoragePoolIamBinding editor "projects/{{project}}/zones/{{zone}}/storagePools/{{storage_pool}} roles/compute.viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:compute/storagePoolIamBinding:StoragePoolIamBinding editor projects/{{project}}/zones/{{zone}}/storagePools/{{storage_pool}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type StoragePoolIamBinding struct {
	pulumi.CustomResourceState

	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition StoragePoolIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `compute.StoragePoolIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
	// A reference to the zone where the storage pool resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewStoragePoolIamBinding registers a new resource with the given unique name, arguments, and options.
func NewStoragePoolIamBinding(ctx *pulumi.Context,
	name string, args *StoragePoolIamBindingArgs, opts ...pulumi.ResourceOption) (*StoragePoolIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StoragePoolIamBinding
	err := ctx.RegisterResource("gcp:compute/storagePoolIamBinding:StoragePoolIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStoragePoolIamBinding gets an existing StoragePoolIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStoragePoolIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StoragePoolIamBindingState, opts ...pulumi.ResourceOption) (*StoragePoolIamBinding, error) {
	var resource StoragePoolIamBinding
	err := ctx.ReadResource("gcp:compute/storagePoolIamBinding:StoragePoolIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StoragePoolIamBinding resources.
type storagePoolIamBindingState struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *StoragePoolIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `compute.StoragePoolIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
	// A reference to the zone where the storage pool resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone *string `pulumi:"zone"`
}

type StoragePoolIamBindingState struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition StoragePoolIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `compute.StoragePoolIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
	// A reference to the zone where the storage pool resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone pulumi.StringPtrInput
}

func (StoragePoolIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*storagePoolIamBindingState)(nil)).Elem()
}

type storagePoolIamBindingArgs struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *StoragePoolIamBindingCondition `pulumi:"condition"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `compute.StoragePoolIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
	// A reference to the zone where the storage pool resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a StoragePoolIamBinding resource.
type StoragePoolIamBindingArgs struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition StoragePoolIamBindingConditionPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `compute.StoragePoolIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
	// A reference to the zone where the storage pool resides. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
	// zone is specified, it is taken from the provider configuration.
	Zone pulumi.StringPtrInput
}

func (StoragePoolIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storagePoolIamBindingArgs)(nil)).Elem()
}

type StoragePoolIamBindingInput interface {
	pulumi.Input

	ToStoragePoolIamBindingOutput() StoragePoolIamBindingOutput
	ToStoragePoolIamBindingOutputWithContext(ctx context.Context) StoragePoolIamBindingOutput
}

func (*StoragePoolIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**StoragePoolIamBinding)(nil)).Elem()
}

func (i *StoragePoolIamBinding) ToStoragePoolIamBindingOutput() StoragePoolIamBindingOutput {
	return i.ToStoragePoolIamBindingOutputWithContext(context.Background())
}

func (i *StoragePoolIamBinding) ToStoragePoolIamBindingOutputWithContext(ctx context.Context) StoragePoolIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoragePoolIamBindingOutput)
}

// StoragePoolIamBindingArrayInput is an input type that accepts StoragePoolIamBindingArray and StoragePoolIamBindingArrayOutput values.
// You can construct a concrete instance of `StoragePoolIamBindingArrayInput` via:
//
//	StoragePoolIamBindingArray{ StoragePoolIamBindingArgs{...} }
type StoragePoolIamBindingArrayInput interface {
	pulumi.Input

	ToStoragePoolIamBindingArrayOutput() StoragePoolIamBindingArrayOutput
	ToStoragePoolIamBindingArrayOutputWithContext(context.Context) StoragePoolIamBindingArrayOutput
}

type StoragePoolIamBindingArray []StoragePoolIamBindingInput

func (StoragePoolIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StoragePoolIamBinding)(nil)).Elem()
}

func (i StoragePoolIamBindingArray) ToStoragePoolIamBindingArrayOutput() StoragePoolIamBindingArrayOutput {
	return i.ToStoragePoolIamBindingArrayOutputWithContext(context.Background())
}

func (i StoragePoolIamBindingArray) ToStoragePoolIamBindingArrayOutputWithContext(ctx context.Context) StoragePoolIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoragePoolIamBindingArrayOutput)
}

// StoragePoolIamBindingMapInput is an input type that accepts StoragePoolIamBindingMap and StoragePoolIamBindingMapOutput values.
// You can construct a concrete instance of `StoragePoolIamBindingMapInput` via:
//
//	StoragePoolIamBindingMap{ "key": StoragePoolIamBindingArgs{...} }
type StoragePoolIamBindingMapInput interface {
	pulumi.Input

	ToStoragePoolIamBindingMapOutput() StoragePoolIamBindingMapOutput
	ToStoragePoolIamBindingMapOutputWithContext(context.Context) StoragePoolIamBindingMapOutput
}

type StoragePoolIamBindingMap map[string]StoragePoolIamBindingInput

func (StoragePoolIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StoragePoolIamBinding)(nil)).Elem()
}

func (i StoragePoolIamBindingMap) ToStoragePoolIamBindingMapOutput() StoragePoolIamBindingMapOutput {
	return i.ToStoragePoolIamBindingMapOutputWithContext(context.Background())
}

func (i StoragePoolIamBindingMap) ToStoragePoolIamBindingMapOutputWithContext(ctx context.Context) StoragePoolIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoragePoolIamBindingMapOutput)
}

type StoragePoolIamBindingOutput struct{ *pulumi.OutputState }

func (StoragePoolIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StoragePoolIamBinding)(nil)).Elem()
}

func (o StoragePoolIamBindingOutput) ToStoragePoolIamBindingOutput() StoragePoolIamBindingOutput {
	return o
}

func (o StoragePoolIamBindingOutput) ToStoragePoolIamBindingOutputWithContext(ctx context.Context) StoragePoolIamBindingOutput {
	return o
}

// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
// Structure is documented below.
func (o StoragePoolIamBindingOutput) Condition() StoragePoolIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *StoragePoolIamBinding) StoragePoolIamBindingConditionPtrOutput { return v.Condition }).(StoragePoolIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o StoragePoolIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *StoragePoolIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o StoragePoolIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StoragePoolIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o StoragePoolIamBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StoragePoolIamBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o StoragePoolIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *StoragePoolIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `compute.StoragePoolIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o StoragePoolIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *StoragePoolIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// A reference to the zone where the storage pool resides. Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no zone is provided in the parent identifier and no
// zone is specified, it is taken from the provider configuration.
func (o StoragePoolIamBindingOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *StoragePoolIamBinding) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type StoragePoolIamBindingArrayOutput struct{ *pulumi.OutputState }

func (StoragePoolIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StoragePoolIamBinding)(nil)).Elem()
}

func (o StoragePoolIamBindingArrayOutput) ToStoragePoolIamBindingArrayOutput() StoragePoolIamBindingArrayOutput {
	return o
}

func (o StoragePoolIamBindingArrayOutput) ToStoragePoolIamBindingArrayOutputWithContext(ctx context.Context) StoragePoolIamBindingArrayOutput {
	return o
}

func (o StoragePoolIamBindingArrayOutput) Index(i pulumi.IntInput) StoragePoolIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StoragePoolIamBinding {
		return vs[0].([]*StoragePoolIamBinding)[vs[1].(int)]
	}).(StoragePoolIamBindingOutput)
}

type StoragePoolIamBindingMapOutput struct{ *pulumi.OutputState }

func (StoragePoolIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StoragePoolIamBinding)(nil)).Elem()
}

func (o StoragePoolIamBindingMapOutput) ToStoragePoolIamBindingMapOutput() StoragePoolIamBindingMapOutput {
	return o
}

func (o StoragePoolIamBindingMapOutput) ToStoragePoolIamBindingMapOutputWithContext(ctx context.Context) StoragePoolIamBindingMapOutput {
	return o
}

func (o StoragePoolIamBindingMapOutput) MapIndex(k pulumi.StringInput) StoragePoolIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StoragePoolIamBinding {
		return vs[0].(map[string]*StoragePoolIamBinding)[vs[1].(string)]
	}).(StoragePoolIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StoragePoolIamBindingInput)(nil)).Elem(), &StoragePoolIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoragePoolIamBindingArrayInput)(nil)).Elem(), StoragePoolIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoragePoolIamBindingMapInput)(nil)).Elem(), StoragePoolIamBindingMap{})
	pulumi.RegisterOutputType(StoragePoolIamBindingOutput{})
	pulumi.RegisterOutputType(StoragePoolIamBindingArrayOutput{})
	pulumi.RegisterOutputType(StoragePoolIamBindingMapOutput{})
}
