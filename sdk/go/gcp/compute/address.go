// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a static IP address resource for Google Compute Engine. For more information see
// the official documentation for
// [external](https://cloud.google.com/compute/docs/instances-and-network) and
// [internal](https://cloud.google.com/compute/docs/ip-addresses/reserve-static-internal-ip-address)
// static IP reservations, as well as the
// [API](https://cloud.google.com/compute/docs/reference/beta/addresses/insert).
// 
type Address struct {
	s *pulumi.ResourceState
}

// NewAddress registers a new resource with the given unique name, arguments, and options.
func NewAddress(ctx *pulumi.Context,
	name string, args *AddressArgs, opts ...pulumi.ResourceOpt) (*Address, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["address"] = nil
		inputs["addressType"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["region"] = nil
		inputs["subnetwork"] = nil
	} else {
		inputs["address"] = args.Address
		inputs["addressType"] = args.AddressType
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["region"] = args.Region
		inputs["subnetwork"] = args.Subnetwork
	}
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/address:Address", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Address{s: s}, nil
}

// GetAddress gets an existing Address resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAddress(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AddressState, opts ...pulumi.ResourceOpt) (*Address, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["address"] = state.Address
		inputs["addressType"] = state.AddressType
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["region"] = state.Region
		inputs["selfLink"] = state.SelfLink
		inputs["subnetwork"] = state.Subnetwork
	}
	s, err := ctx.ReadResource("gcp:compute/address:Address", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Address{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Address) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Address) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The IP address to reserve. An address may only be
// specified for INTERNAL address types. The IP address must be inside the
// specified subnetwork, if any.
func (r *Address) Address() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["address"])
}

// The Address Type that should be configured.
// Specify INTERNAL to reserve an internal static IP address EXTERNAL to
// specify an external static IP address. Defaults to EXTERNAL if omitted.
func (r *Address) AddressType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["addressType"])
}

// A unique name for the resource, required by GCE.
// Changing this forces a new resource to be created.
func (r *Address) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (r *Address) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The Region in which the created address should reside.
// If it is not provided, the provider region is used.
func (r *Address) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The URI of the created resource.
func (r *Address) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// The self link URI of the subnetwork in which to
// create the address. A subnetwork may only be specified for INTERNAL
// address types.
func (r *Address) Subnetwork() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subnetwork"])
}

// Input properties used for looking up and filtering Address resources.
type AddressState struct {
	// The IP address to reserve. An address may only be
	// specified for INTERNAL address types. The IP address must be inside the
	// specified subnetwork, if any.
	Address interface{}
	// The Address Type that should be configured.
	// Specify INTERNAL to reserve an internal static IP address EXTERNAL to
	// specify an external static IP address. Defaults to EXTERNAL if omitted.
	AddressType interface{}
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// The Region in which the created address should reside.
	// If it is not provided, the provider region is used.
	Region interface{}
	// The URI of the created resource.
	SelfLink interface{}
	// The self link URI of the subnetwork in which to
	// create the address. A subnetwork may only be specified for INTERNAL
	// address types.
	Subnetwork interface{}
}

// The set of arguments for constructing a Address resource.
type AddressArgs struct {
	// The IP address to reserve. An address may only be
	// specified for INTERNAL address types. The IP address must be inside the
	// specified subnetwork, if any.
	Address interface{}
	// The Address Type that should be configured.
	// Specify INTERNAL to reserve an internal static IP address EXTERNAL to
	// specify an external static IP address. Defaults to EXTERNAL if omitted.
	AddressType interface{}
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// The Region in which the created address should reside.
	// If it is not provided, the provider region is used.
	Region interface{}
	// The self link URI of the subnetwork in which to
	// create the address. A subnetwork may only be specified for INTERNAL
	// address types.
	Subnetwork interface{}
}
