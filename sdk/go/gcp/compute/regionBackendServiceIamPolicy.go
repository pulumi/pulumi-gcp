// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RegionBackendServiceIamPolicy struct {
	pulumi.CustomResourceState

	Etag       pulumi.StringOutput `pulumi:"etag"`
	Name       pulumi.StringOutput `pulumi:"name"`
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	Project    pulumi.StringOutput `pulumi:"project"`
	Region     pulumi.StringOutput `pulumi:"region"`
}

// NewRegionBackendServiceIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewRegionBackendServiceIamPolicy(ctx *pulumi.Context,
	name string, args *RegionBackendServiceIamPolicyArgs, opts ...pulumi.ResourceOption) (*RegionBackendServiceIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	var resource RegionBackendServiceIamPolicy
	err := ctx.RegisterResource("gcp:compute/regionBackendServiceIamPolicy:RegionBackendServiceIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionBackendServiceIamPolicy gets an existing RegionBackendServiceIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionBackendServiceIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionBackendServiceIamPolicyState, opts ...pulumi.ResourceOption) (*RegionBackendServiceIamPolicy, error) {
	var resource RegionBackendServiceIamPolicy
	err := ctx.ReadResource("gcp:compute/regionBackendServiceIamPolicy:RegionBackendServiceIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionBackendServiceIamPolicy resources.
type regionBackendServiceIamPolicyState struct {
	Etag       *string `pulumi:"etag"`
	Name       *string `pulumi:"name"`
	PolicyData *string `pulumi:"policyData"`
	Project    *string `pulumi:"project"`
	Region     *string `pulumi:"region"`
}

type RegionBackendServiceIamPolicyState struct {
	Etag       pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	PolicyData pulumi.StringPtrInput
	Project    pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
}

func (RegionBackendServiceIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionBackendServiceIamPolicyState)(nil)).Elem()
}

type regionBackendServiceIamPolicyArgs struct {
	Name       *string `pulumi:"name"`
	PolicyData string  `pulumi:"policyData"`
	Project    *string `pulumi:"project"`
	Region     *string `pulumi:"region"`
}

// The set of arguments for constructing a RegionBackendServiceIamPolicy resource.
type RegionBackendServiceIamPolicyArgs struct {
	Name       pulumi.StringPtrInput
	PolicyData pulumi.StringInput
	Project    pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
}

func (RegionBackendServiceIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionBackendServiceIamPolicyArgs)(nil)).Elem()
}

type RegionBackendServiceIamPolicyInput interface {
	pulumi.Input

	ToRegionBackendServiceIamPolicyOutput() RegionBackendServiceIamPolicyOutput
	ToRegionBackendServiceIamPolicyOutputWithContext(ctx context.Context) RegionBackendServiceIamPolicyOutput
}

func (*RegionBackendServiceIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceIamPolicy)(nil)).Elem()
}

func (i *RegionBackendServiceIamPolicy) ToRegionBackendServiceIamPolicyOutput() RegionBackendServiceIamPolicyOutput {
	return i.ToRegionBackendServiceIamPolicyOutputWithContext(context.Background())
}

func (i *RegionBackendServiceIamPolicy) ToRegionBackendServiceIamPolicyOutputWithContext(ctx context.Context) RegionBackendServiceIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceIamPolicyOutput)
}

// RegionBackendServiceIamPolicyArrayInput is an input type that accepts RegionBackendServiceIamPolicyArray and RegionBackendServiceIamPolicyArrayOutput values.
// You can construct a concrete instance of `RegionBackendServiceIamPolicyArrayInput` via:
//
//          RegionBackendServiceIamPolicyArray{ RegionBackendServiceIamPolicyArgs{...} }
type RegionBackendServiceIamPolicyArrayInput interface {
	pulumi.Input

	ToRegionBackendServiceIamPolicyArrayOutput() RegionBackendServiceIamPolicyArrayOutput
	ToRegionBackendServiceIamPolicyArrayOutputWithContext(context.Context) RegionBackendServiceIamPolicyArrayOutput
}

type RegionBackendServiceIamPolicyArray []RegionBackendServiceIamPolicyInput

func (RegionBackendServiceIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionBackendServiceIamPolicy)(nil)).Elem()
}

func (i RegionBackendServiceIamPolicyArray) ToRegionBackendServiceIamPolicyArrayOutput() RegionBackendServiceIamPolicyArrayOutput {
	return i.ToRegionBackendServiceIamPolicyArrayOutputWithContext(context.Background())
}

func (i RegionBackendServiceIamPolicyArray) ToRegionBackendServiceIamPolicyArrayOutputWithContext(ctx context.Context) RegionBackendServiceIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceIamPolicyArrayOutput)
}

// RegionBackendServiceIamPolicyMapInput is an input type that accepts RegionBackendServiceIamPolicyMap and RegionBackendServiceIamPolicyMapOutput values.
// You can construct a concrete instance of `RegionBackendServiceIamPolicyMapInput` via:
//
//          RegionBackendServiceIamPolicyMap{ "key": RegionBackendServiceIamPolicyArgs{...} }
type RegionBackendServiceIamPolicyMapInput interface {
	pulumi.Input

	ToRegionBackendServiceIamPolicyMapOutput() RegionBackendServiceIamPolicyMapOutput
	ToRegionBackendServiceIamPolicyMapOutputWithContext(context.Context) RegionBackendServiceIamPolicyMapOutput
}

type RegionBackendServiceIamPolicyMap map[string]RegionBackendServiceIamPolicyInput

func (RegionBackendServiceIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionBackendServiceIamPolicy)(nil)).Elem()
}

func (i RegionBackendServiceIamPolicyMap) ToRegionBackendServiceIamPolicyMapOutput() RegionBackendServiceIamPolicyMapOutput {
	return i.ToRegionBackendServiceIamPolicyMapOutputWithContext(context.Background())
}

func (i RegionBackendServiceIamPolicyMap) ToRegionBackendServiceIamPolicyMapOutputWithContext(ctx context.Context) RegionBackendServiceIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceIamPolicyMapOutput)
}

type RegionBackendServiceIamPolicyOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceIamPolicy)(nil)).Elem()
}

func (o RegionBackendServiceIamPolicyOutput) ToRegionBackendServiceIamPolicyOutput() RegionBackendServiceIamPolicyOutput {
	return o
}

func (o RegionBackendServiceIamPolicyOutput) ToRegionBackendServiceIamPolicyOutputWithContext(ctx context.Context) RegionBackendServiceIamPolicyOutput {
	return o
}

type RegionBackendServiceIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionBackendServiceIamPolicy)(nil)).Elem()
}

func (o RegionBackendServiceIamPolicyArrayOutput) ToRegionBackendServiceIamPolicyArrayOutput() RegionBackendServiceIamPolicyArrayOutput {
	return o
}

func (o RegionBackendServiceIamPolicyArrayOutput) ToRegionBackendServiceIamPolicyArrayOutputWithContext(ctx context.Context) RegionBackendServiceIamPolicyArrayOutput {
	return o
}

func (o RegionBackendServiceIamPolicyArrayOutput) Index(i pulumi.IntInput) RegionBackendServiceIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionBackendServiceIamPolicy {
		return vs[0].([]*RegionBackendServiceIamPolicy)[vs[1].(int)]
	}).(RegionBackendServiceIamPolicyOutput)
}

type RegionBackendServiceIamPolicyMapOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionBackendServiceIamPolicy)(nil)).Elem()
}

func (o RegionBackendServiceIamPolicyMapOutput) ToRegionBackendServiceIamPolicyMapOutput() RegionBackendServiceIamPolicyMapOutput {
	return o
}

func (o RegionBackendServiceIamPolicyMapOutput) ToRegionBackendServiceIamPolicyMapOutputWithContext(ctx context.Context) RegionBackendServiceIamPolicyMapOutput {
	return o
}

func (o RegionBackendServiceIamPolicyMapOutput) MapIndex(k pulumi.StringInput) RegionBackendServiceIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionBackendServiceIamPolicy {
		return vs[0].(map[string]*RegionBackendServiceIamPolicy)[vs[1].(string)]
	}).(RegionBackendServiceIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceIamPolicyInput)(nil)).Elem(), &RegionBackendServiceIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceIamPolicyArrayInput)(nil)).Elem(), RegionBackendServiceIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceIamPolicyMapInput)(nil)).Elem(), RegionBackendServiceIamPolicyMap{})
	pulumi.RegisterOutputType(RegionBackendServiceIamPolicyOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceIamPolicyMapOutput{})
}
