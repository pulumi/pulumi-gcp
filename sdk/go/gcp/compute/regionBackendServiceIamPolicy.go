// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Compute Engine RegionBackendService. Each of these resources serves a different use case:
//
// * `compute.RegionBackendServiceIamPolicy`: Authoritative. Sets the IAM policy for the regionbackendservice and replaces any existing policy already attached.
// * `compute.RegionBackendServiceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the regionbackendservice are preserved.
// * `compute.RegionBackendServiceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the regionbackendservice are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `compute.RegionBackendServiceIamPolicy`: Retrieves the IAM policy for the regionbackendservice
//
// > **Note:** `compute.RegionBackendServiceIamPolicy` **cannot** be used in conjunction with `compute.RegionBackendServiceIamBinding` and `compute.RegionBackendServiceIamMember` or they will fight over what your policy should be.
//
// > **Note:** `compute.RegionBackendServiceIamBinding` resources **can be** used in conjunction with `compute.RegionBackendServiceIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## compute.RegionBackendServiceIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/compute.admin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRegionBackendServiceIamPolicy(ctx, "policy", &compute.RegionBackendServiceIamPolicyArgs{
//				Project:    pulumi.Any(_default.Project),
//				Region:     pulumi.Any(_default.Region),
//				Name:       pulumi.Any(_default.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/compute.admin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRegionBackendServiceIamPolicy(ctx, "policy", &compute.RegionBackendServiceIamPolicyArgs{
//				Project:    pulumi.Any(_default.Project),
//				Region:     pulumi.Any(_default.Region),
//				Name:       pulumi.Any(_default.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## compute.RegionBackendServiceIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionBackendServiceIamBinding(ctx, "binding", &compute.RegionBackendServiceIamBindingArgs{
//				Project: pulumi.Any(_default.Project),
//				Region:  pulumi.Any(_default.Region),
//				Name:    pulumi.Any(_default.Name),
//				Role:    pulumi.String("roles/compute.admin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionBackendServiceIamBinding(ctx, "binding", &compute.RegionBackendServiceIamBindingArgs{
//				Project: pulumi.Any(_default.Project),
//				Region:  pulumi.Any(_default.Region),
//				Name:    pulumi.Any(_default.Name),
//				Role:    pulumi.String("roles/compute.admin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &compute.RegionBackendServiceIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## compute.RegionBackendServiceIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionBackendServiceIamMember(ctx, "member", &compute.RegionBackendServiceIamMemberArgs{
//				Project: pulumi.Any(_default.Project),
//				Region:  pulumi.Any(_default.Region),
//				Name:    pulumi.Any(_default.Name),
//				Role:    pulumi.String("roles/compute.admin"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionBackendServiceIamMember(ctx, "member", &compute.RegionBackendServiceIamMemberArgs{
//				Project: pulumi.Any(_default.Project),
//				Region:  pulumi.Any(_default.Region),
//				Name:    pulumi.Any(_default.Name),
//				Role:    pulumi.String("roles/compute.admin"),
//				Member:  pulumi.String("user:jane@example.com"),
//				Condition: &compute.RegionBackendServiceIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Compute Engine RegionBackendService
//
// Three different resources help you manage your IAM policy for Compute Engine RegionBackendService. Each of these resources serves a different use case:
//
// * `compute.RegionBackendServiceIamPolicy`: Authoritative. Sets the IAM policy for the regionbackendservice and replaces any existing policy already attached.
// * `compute.RegionBackendServiceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the regionbackendservice are preserved.
// * `compute.RegionBackendServiceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the regionbackendservice are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `compute.RegionBackendServiceIamPolicy`: Retrieves the IAM policy for the regionbackendservice
//
// > **Note:** `compute.RegionBackendServiceIamPolicy` **cannot** be used in conjunction with `compute.RegionBackendServiceIamBinding` and `compute.RegionBackendServiceIamMember` or they will fight over what your policy should be.
//
// > **Note:** `compute.RegionBackendServiceIamBinding` resources **can be** used in conjunction with `compute.RegionBackendServiceIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## compute.RegionBackendServiceIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/compute.admin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRegionBackendServiceIamPolicy(ctx, "policy", &compute.RegionBackendServiceIamPolicyArgs{
//				Project:    pulumi.Any(_default.Project),
//				Region:     pulumi.Any(_default.Region),
//				Name:       pulumi.Any(_default.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/compute.admin",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRegionBackendServiceIamPolicy(ctx, "policy", &compute.RegionBackendServiceIamPolicyArgs{
//				Project:    pulumi.Any(_default.Project),
//				Region:     pulumi.Any(_default.Region),
//				Name:       pulumi.Any(_default.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## compute.RegionBackendServiceIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionBackendServiceIamBinding(ctx, "binding", &compute.RegionBackendServiceIamBindingArgs{
//				Project: pulumi.Any(_default.Project),
//				Region:  pulumi.Any(_default.Region),
//				Name:    pulumi.Any(_default.Name),
//				Role:    pulumi.String("roles/compute.admin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionBackendServiceIamBinding(ctx, "binding", &compute.RegionBackendServiceIamBindingArgs{
//				Project: pulumi.Any(_default.Project),
//				Region:  pulumi.Any(_default.Region),
//				Name:    pulumi.Any(_default.Name),
//				Role:    pulumi.String("roles/compute.admin"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &compute.RegionBackendServiceIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## compute.RegionBackendServiceIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionBackendServiceIamMember(ctx, "member", &compute.RegionBackendServiceIamMemberArgs{
//				Project: pulumi.Any(_default.Project),
//				Region:  pulumi.Any(_default.Region),
//				Name:    pulumi.Any(_default.Name),
//				Role:    pulumi.String("roles/compute.admin"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewRegionBackendServiceIamMember(ctx, "member", &compute.RegionBackendServiceIamMemberArgs{
//				Project: pulumi.Any(_default.Project),
//				Region:  pulumi.Any(_default.Region),
//				Name:    pulumi.Any(_default.Name),
//				Role:    pulumi.String("roles/compute.admin"),
//				Member:  pulumi.String("user:jane@example.com"),
//				Condition: &compute.RegionBackendServiceIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/regions/{{region}}/backendServices/{{name}}
//
// * {{project}}/{{region}}/{{name}}
//
// * {{region}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Compute Engine regionbackendservice IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:compute/regionBackendServiceIamPolicy:RegionBackendServiceIamPolicy editor "projects/{{project}}/regions/{{region}}/backendServices/{{region_backend_service}} roles/compute.admin user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:compute/regionBackendServiceIamPolicy:RegionBackendServiceIamPolicy editor "projects/{{project}}/regions/{{region}}/backendServices/{{region_backend_service}} roles/compute.admin"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:compute/regionBackendServiceIamPolicy:RegionBackendServiceIamPolicy editor projects/{{project}}/regions/{{region}}/backendServices/{{region_backend_service}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type RegionBackendServiceIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewRegionBackendServiceIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewRegionBackendServiceIamPolicy(ctx *pulumi.Context,
	name string, args *RegionBackendServiceIamPolicyArgs, opts ...pulumi.ResourceOption) (*RegionBackendServiceIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionBackendServiceIamPolicy
	err := ctx.RegisterResource("gcp:compute/regionBackendServiceIamPolicy:RegionBackendServiceIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionBackendServiceIamPolicy gets an existing RegionBackendServiceIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionBackendServiceIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionBackendServiceIamPolicyState, opts ...pulumi.ResourceOption) (*RegionBackendServiceIamPolicy, error) {
	var resource RegionBackendServiceIamPolicy
	err := ctx.ReadResource("gcp:compute/regionBackendServiceIamPolicy:RegionBackendServiceIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionBackendServiceIamPolicy resources.
type regionBackendServiceIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
}

type RegionBackendServiceIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
}

func (RegionBackendServiceIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionBackendServiceIamPolicyState)(nil)).Elem()
}

type regionBackendServiceIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a RegionBackendServiceIamPolicy resource.
type RegionBackendServiceIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region pulumi.StringPtrInput
}

func (RegionBackendServiceIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionBackendServiceIamPolicyArgs)(nil)).Elem()
}

type RegionBackendServiceIamPolicyInput interface {
	pulumi.Input

	ToRegionBackendServiceIamPolicyOutput() RegionBackendServiceIamPolicyOutput
	ToRegionBackendServiceIamPolicyOutputWithContext(ctx context.Context) RegionBackendServiceIamPolicyOutput
}

func (*RegionBackendServiceIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceIamPolicy)(nil)).Elem()
}

func (i *RegionBackendServiceIamPolicy) ToRegionBackendServiceIamPolicyOutput() RegionBackendServiceIamPolicyOutput {
	return i.ToRegionBackendServiceIamPolicyOutputWithContext(context.Background())
}

func (i *RegionBackendServiceIamPolicy) ToRegionBackendServiceIamPolicyOutputWithContext(ctx context.Context) RegionBackendServiceIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceIamPolicyOutput)
}

// RegionBackendServiceIamPolicyArrayInput is an input type that accepts RegionBackendServiceIamPolicyArray and RegionBackendServiceIamPolicyArrayOutput values.
// You can construct a concrete instance of `RegionBackendServiceIamPolicyArrayInput` via:
//
//	RegionBackendServiceIamPolicyArray{ RegionBackendServiceIamPolicyArgs{...} }
type RegionBackendServiceIamPolicyArrayInput interface {
	pulumi.Input

	ToRegionBackendServiceIamPolicyArrayOutput() RegionBackendServiceIamPolicyArrayOutput
	ToRegionBackendServiceIamPolicyArrayOutputWithContext(context.Context) RegionBackendServiceIamPolicyArrayOutput
}

type RegionBackendServiceIamPolicyArray []RegionBackendServiceIamPolicyInput

func (RegionBackendServiceIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionBackendServiceIamPolicy)(nil)).Elem()
}

func (i RegionBackendServiceIamPolicyArray) ToRegionBackendServiceIamPolicyArrayOutput() RegionBackendServiceIamPolicyArrayOutput {
	return i.ToRegionBackendServiceIamPolicyArrayOutputWithContext(context.Background())
}

func (i RegionBackendServiceIamPolicyArray) ToRegionBackendServiceIamPolicyArrayOutputWithContext(ctx context.Context) RegionBackendServiceIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceIamPolicyArrayOutput)
}

// RegionBackendServiceIamPolicyMapInput is an input type that accepts RegionBackendServiceIamPolicyMap and RegionBackendServiceIamPolicyMapOutput values.
// You can construct a concrete instance of `RegionBackendServiceIamPolicyMapInput` via:
//
//	RegionBackendServiceIamPolicyMap{ "key": RegionBackendServiceIamPolicyArgs{...} }
type RegionBackendServiceIamPolicyMapInput interface {
	pulumi.Input

	ToRegionBackendServiceIamPolicyMapOutput() RegionBackendServiceIamPolicyMapOutput
	ToRegionBackendServiceIamPolicyMapOutputWithContext(context.Context) RegionBackendServiceIamPolicyMapOutput
}

type RegionBackendServiceIamPolicyMap map[string]RegionBackendServiceIamPolicyInput

func (RegionBackendServiceIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionBackendServiceIamPolicy)(nil)).Elem()
}

func (i RegionBackendServiceIamPolicyMap) ToRegionBackendServiceIamPolicyMapOutput() RegionBackendServiceIamPolicyMapOutput {
	return i.ToRegionBackendServiceIamPolicyMapOutputWithContext(context.Background())
}

func (i RegionBackendServiceIamPolicyMap) ToRegionBackendServiceIamPolicyMapOutputWithContext(ctx context.Context) RegionBackendServiceIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceIamPolicyMapOutput)
}

type RegionBackendServiceIamPolicyOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceIamPolicy)(nil)).Elem()
}

func (o RegionBackendServiceIamPolicyOutput) ToRegionBackendServiceIamPolicyOutput() RegionBackendServiceIamPolicyOutput {
	return o
}

func (o RegionBackendServiceIamPolicyOutput) ToRegionBackendServiceIamPolicyOutputWithContext(ctx context.Context) RegionBackendServiceIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o RegionBackendServiceIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendServiceIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o RegionBackendServiceIamPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendServiceIamPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o RegionBackendServiceIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendServiceIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o RegionBackendServiceIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendServiceIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The Region in which the created backend service should reside.
// If it is not provided, the provider region is used.
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
// region is specified, it is taken from the provider configuration.
func (o RegionBackendServiceIamPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendServiceIamPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type RegionBackendServiceIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionBackendServiceIamPolicy)(nil)).Elem()
}

func (o RegionBackendServiceIamPolicyArrayOutput) ToRegionBackendServiceIamPolicyArrayOutput() RegionBackendServiceIamPolicyArrayOutput {
	return o
}

func (o RegionBackendServiceIamPolicyArrayOutput) ToRegionBackendServiceIamPolicyArrayOutputWithContext(ctx context.Context) RegionBackendServiceIamPolicyArrayOutput {
	return o
}

func (o RegionBackendServiceIamPolicyArrayOutput) Index(i pulumi.IntInput) RegionBackendServiceIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionBackendServiceIamPolicy {
		return vs[0].([]*RegionBackendServiceIamPolicy)[vs[1].(int)]
	}).(RegionBackendServiceIamPolicyOutput)
}

type RegionBackendServiceIamPolicyMapOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionBackendServiceIamPolicy)(nil)).Elem()
}

func (o RegionBackendServiceIamPolicyMapOutput) ToRegionBackendServiceIamPolicyMapOutput() RegionBackendServiceIamPolicyMapOutput {
	return o
}

func (o RegionBackendServiceIamPolicyMapOutput) ToRegionBackendServiceIamPolicyMapOutputWithContext(ctx context.Context) RegionBackendServiceIamPolicyMapOutput {
	return o
}

func (o RegionBackendServiceIamPolicyMapOutput) MapIndex(k pulumi.StringInput) RegionBackendServiceIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionBackendServiceIamPolicy {
		return vs[0].(map[string]*RegionBackendServiceIamPolicy)[vs[1].(string)]
	}).(RegionBackendServiceIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceIamPolicyInput)(nil)).Elem(), &RegionBackendServiceIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceIamPolicyArrayInput)(nil)).Elem(), RegionBackendServiceIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceIamPolicyMapInput)(nil)).Elem(), RegionBackendServiceIamPolicyMap{})
	pulumi.RegisterOutputType(RegionBackendServiceIamPolicyOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceIamPolicyMapOutput{})
}
