// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RegionBackendServiceIamMember struct {
	pulumi.CustomResourceState

	Condition RegionBackendServiceIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag      pulumi.StringOutput                             `pulumi:"etag"`
	Member    pulumi.StringOutput                             `pulumi:"member"`
	Name      pulumi.StringOutput                             `pulumi:"name"`
	Project   pulumi.StringOutput                             `pulumi:"project"`
	Region    pulumi.StringOutput                             `pulumi:"region"`
	Role      pulumi.StringOutput                             `pulumi:"role"`
}

// NewRegionBackendServiceIamMember registers a new resource with the given unique name, arguments, and options.
func NewRegionBackendServiceIamMember(ctx *pulumi.Context,
	name string, args *RegionBackendServiceIamMemberArgs, opts ...pulumi.ResourceOption) (*RegionBackendServiceIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource RegionBackendServiceIamMember
	err := ctx.RegisterResource("gcp:compute/regionBackendServiceIamMember:RegionBackendServiceIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionBackendServiceIamMember gets an existing RegionBackendServiceIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionBackendServiceIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionBackendServiceIamMemberState, opts ...pulumi.ResourceOption) (*RegionBackendServiceIamMember, error) {
	var resource RegionBackendServiceIamMember
	err := ctx.ReadResource("gcp:compute/regionBackendServiceIamMember:RegionBackendServiceIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionBackendServiceIamMember resources.
type regionBackendServiceIamMemberState struct {
	Condition *RegionBackendServiceIamMemberCondition `pulumi:"condition"`
	Etag      *string                                 `pulumi:"etag"`
	Member    *string                                 `pulumi:"member"`
	Name      *string                                 `pulumi:"name"`
	Project   *string                                 `pulumi:"project"`
	Region    *string                                 `pulumi:"region"`
	Role      *string                                 `pulumi:"role"`
}

type RegionBackendServiceIamMemberState struct {
	Condition RegionBackendServiceIamMemberConditionPtrInput
	Etag      pulumi.StringPtrInput
	Member    pulumi.StringPtrInput
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	Region    pulumi.StringPtrInput
	Role      pulumi.StringPtrInput
}

func (RegionBackendServiceIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionBackendServiceIamMemberState)(nil)).Elem()
}

type regionBackendServiceIamMemberArgs struct {
	Condition *RegionBackendServiceIamMemberCondition `pulumi:"condition"`
	Member    string                                  `pulumi:"member"`
	Name      *string                                 `pulumi:"name"`
	Project   *string                                 `pulumi:"project"`
	Region    *string                                 `pulumi:"region"`
	Role      string                                  `pulumi:"role"`
}

// The set of arguments for constructing a RegionBackendServiceIamMember resource.
type RegionBackendServiceIamMemberArgs struct {
	Condition RegionBackendServiceIamMemberConditionPtrInput
	Member    pulumi.StringInput
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	Region    pulumi.StringPtrInput
	Role      pulumi.StringInput
}

func (RegionBackendServiceIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionBackendServiceIamMemberArgs)(nil)).Elem()
}

type RegionBackendServiceIamMemberInput interface {
	pulumi.Input

	ToRegionBackendServiceIamMemberOutput() RegionBackendServiceIamMemberOutput
	ToRegionBackendServiceIamMemberOutputWithContext(ctx context.Context) RegionBackendServiceIamMemberOutput
}

func (*RegionBackendServiceIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceIamMember)(nil)).Elem()
}

func (i *RegionBackendServiceIamMember) ToRegionBackendServiceIamMemberOutput() RegionBackendServiceIamMemberOutput {
	return i.ToRegionBackendServiceIamMemberOutputWithContext(context.Background())
}

func (i *RegionBackendServiceIamMember) ToRegionBackendServiceIamMemberOutputWithContext(ctx context.Context) RegionBackendServiceIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceIamMemberOutput)
}

// RegionBackendServiceIamMemberArrayInput is an input type that accepts RegionBackendServiceIamMemberArray and RegionBackendServiceIamMemberArrayOutput values.
// You can construct a concrete instance of `RegionBackendServiceIamMemberArrayInput` via:
//
//          RegionBackendServiceIamMemberArray{ RegionBackendServiceIamMemberArgs{...} }
type RegionBackendServiceIamMemberArrayInput interface {
	pulumi.Input

	ToRegionBackendServiceIamMemberArrayOutput() RegionBackendServiceIamMemberArrayOutput
	ToRegionBackendServiceIamMemberArrayOutputWithContext(context.Context) RegionBackendServiceIamMemberArrayOutput
}

type RegionBackendServiceIamMemberArray []RegionBackendServiceIamMemberInput

func (RegionBackendServiceIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionBackendServiceIamMember)(nil)).Elem()
}

func (i RegionBackendServiceIamMemberArray) ToRegionBackendServiceIamMemberArrayOutput() RegionBackendServiceIamMemberArrayOutput {
	return i.ToRegionBackendServiceIamMemberArrayOutputWithContext(context.Background())
}

func (i RegionBackendServiceIamMemberArray) ToRegionBackendServiceIamMemberArrayOutputWithContext(ctx context.Context) RegionBackendServiceIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceIamMemberArrayOutput)
}

// RegionBackendServiceIamMemberMapInput is an input type that accepts RegionBackendServiceIamMemberMap and RegionBackendServiceIamMemberMapOutput values.
// You can construct a concrete instance of `RegionBackendServiceIamMemberMapInput` via:
//
//          RegionBackendServiceIamMemberMap{ "key": RegionBackendServiceIamMemberArgs{...} }
type RegionBackendServiceIamMemberMapInput interface {
	pulumi.Input

	ToRegionBackendServiceIamMemberMapOutput() RegionBackendServiceIamMemberMapOutput
	ToRegionBackendServiceIamMemberMapOutputWithContext(context.Context) RegionBackendServiceIamMemberMapOutput
}

type RegionBackendServiceIamMemberMap map[string]RegionBackendServiceIamMemberInput

func (RegionBackendServiceIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionBackendServiceIamMember)(nil)).Elem()
}

func (i RegionBackendServiceIamMemberMap) ToRegionBackendServiceIamMemberMapOutput() RegionBackendServiceIamMemberMapOutput {
	return i.ToRegionBackendServiceIamMemberMapOutputWithContext(context.Background())
}

func (i RegionBackendServiceIamMemberMap) ToRegionBackendServiceIamMemberMapOutputWithContext(ctx context.Context) RegionBackendServiceIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceIamMemberMapOutput)
}

type RegionBackendServiceIamMemberOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendServiceIamMember)(nil)).Elem()
}

func (o RegionBackendServiceIamMemberOutput) ToRegionBackendServiceIamMemberOutput() RegionBackendServiceIamMemberOutput {
	return o
}

func (o RegionBackendServiceIamMemberOutput) ToRegionBackendServiceIamMemberOutputWithContext(ctx context.Context) RegionBackendServiceIamMemberOutput {
	return o
}

type RegionBackendServiceIamMemberArrayOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionBackendServiceIamMember)(nil)).Elem()
}

func (o RegionBackendServiceIamMemberArrayOutput) ToRegionBackendServiceIamMemberArrayOutput() RegionBackendServiceIamMemberArrayOutput {
	return o
}

func (o RegionBackendServiceIamMemberArrayOutput) ToRegionBackendServiceIamMemberArrayOutputWithContext(ctx context.Context) RegionBackendServiceIamMemberArrayOutput {
	return o
}

func (o RegionBackendServiceIamMemberArrayOutput) Index(i pulumi.IntInput) RegionBackendServiceIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionBackendServiceIamMember {
		return vs[0].([]*RegionBackendServiceIamMember)[vs[1].(int)]
	}).(RegionBackendServiceIamMemberOutput)
}

type RegionBackendServiceIamMemberMapOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionBackendServiceIamMember)(nil)).Elem()
}

func (o RegionBackendServiceIamMemberMapOutput) ToRegionBackendServiceIamMemberMapOutput() RegionBackendServiceIamMemberMapOutput {
	return o
}

func (o RegionBackendServiceIamMemberMapOutput) ToRegionBackendServiceIamMemberMapOutputWithContext(ctx context.Context) RegionBackendServiceIamMemberMapOutput {
	return o
}

func (o RegionBackendServiceIamMemberMapOutput) MapIndex(k pulumi.StringInput) RegionBackendServiceIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionBackendServiceIamMember {
		return vs[0].(map[string]*RegionBackendServiceIamMember)[vs[1].(string)]
	}).(RegionBackendServiceIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceIamMemberInput)(nil)).Elem(), &RegionBackendServiceIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceIamMemberArrayInput)(nil)).Elem(), RegionBackendServiceIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceIamMemberMapInput)(nil)).Elem(), RegionBackendServiceIamMemberMap{})
	pulumi.RegisterOutputType(RegionBackendServiceIamMemberOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceIamMemberArrayOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceIamMemberMapOutput{})
}
