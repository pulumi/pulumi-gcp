// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides access to available Google Compute machine types in a zone for a given project.
// See more about [machine type availability](https://cloud.google.com/compute/docs/regions-zones#available) in the upstream docs.
//
// To get more information about machine types, see:
//
// * [API Documentation](https://cloud.google.com/compute/docs/reference/rest/v1/machineTypes/list)
// * [Comparison Guide](https://cloud.google.com/compute/docs/machine-resource)
//
// ## Example Usage
// ### Property-Based Availability
//
// Create a VM instance template for each machine type with 16GB of memory and 8 CPUs available in the provided zone.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func notImplemented(message string) pulumi.AnyOutput {
//		panic(message)
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.GetMachineTypes(ctx, &compute.GetMachineTypesArgs{
//				Filter: pulumi.StringRef("memoryMb = 16384 AND guestCpus = 8"),
//				Zone:   pulumi.StringRef(zone),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var exampleInstanceTemplate []*compute.InstanceTemplate
//			for index := 0; index < notImplemented("toset(data.google_compute_machine_types.example.machine_types[*].name)"); index++ {
//				key0 := index
//				val0 := index
//				__res, err := compute.NewInstanceTemplate(ctx, fmt.Sprintf("example-%v", key0), &compute.InstanceTemplateArgs{
//					MachineType: pulumi.Any(val0),
//					Disks: compute.InstanceTemplateDiskArray{
//						&compute.InstanceTemplateDiskArgs{
//							SourceImage: pulumi.String("debian-cloud/debian-11"),
//							AutoDelete:  pulumi.Bool(true),
//							Boot:        pulumi.Bool(true),
//						},
//					},
//				})
//				if err != nil {
//					return err
//				}
//				exampleInstanceTemplate = append(exampleInstanceTemplate, __res)
//			}
//			return nil
//		})
//	}
//
// ```
// ### Machine Family Preference
//
// Create an instance template, preferring `c3` machine family if available in the provided zone, otherwise falling back to `c2` and finally `n2`.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func notImplemented(message string) pulumi.AnyOutput {
//		panic(message)
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.GetMachineTypes(ctx, &compute.GetMachineTypesArgs{
//				Filter: pulumi.StringRef("memoryMb = 16384 AND guestCpus = 4"),
//				Zone:   pulumi.StringRef(zone),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewInstanceTemplate(ctx, "example", &compute.InstanceTemplateArgs{
//				MachineType: notImplemented("coalescelist(\n[formtindata.google_compute_machine_types.example.machine_types:mt.nameifstartswith(mt.name,\"c3-\")],\n[formtindata.google_compute_machine_types.example.machine_types:mt.nameifstartswith(mt.name,\"c2-\")],\n[formtindata.google_compute_machine_types.example.machine_types:mt.nameifstartswith(mt.name,\"n2-\")],\n)")[0],
//				Disks: compute.InstanceTemplateDiskArray{
//					&compute.InstanceTemplateDiskArgs{
//						SourceImage: pulumi.String("debian-cloud/debian-11"),
//						AutoDelete:  pulumi.Bool(true),
//						Boot:        pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetMachineTypes(ctx *pulumi.Context, args *GetMachineTypesArgs, opts ...pulumi.InvokeOption) (*GetMachineTypesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMachineTypesResult
	err := ctx.Invoke("gcp:compute/getMachineTypes:getMachineTypes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMachineTypes.
type GetMachineTypesArgs struct {
	// A filter expression that filters machine types listed in the response.
	Filter *string `pulumi:"filter"`
	// Project from which to list available zones. Defaults to project declared in the provider.
	Project *string `pulumi:"project"`
	// Zone from which to list machine types.
	Zone *string `pulumi:"zone"`
}

// A collection of values returned by getMachineTypes.
type GetMachineTypesResult struct {
	Filter *string `pulumi:"filter"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of machine types matching the provided filter. Structure is documented below.
	MachineTypes []GetMachineTypesMachineType `pulumi:"machineTypes"`
	Project      string                       `pulumi:"project"`
	Zone         string                       `pulumi:"zone"`
}

func GetMachineTypesOutput(ctx *pulumi.Context, args GetMachineTypesOutputArgs, opts ...pulumi.InvokeOption) GetMachineTypesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetMachineTypesResult, error) {
			args := v.(GetMachineTypesArgs)
			r, err := GetMachineTypes(ctx, &args, opts...)
			var s GetMachineTypesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetMachineTypesResultOutput)
}

// A collection of arguments for invoking getMachineTypes.
type GetMachineTypesOutputArgs struct {
	// A filter expression that filters machine types listed in the response.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// Project from which to list available zones. Defaults to project declared in the provider.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Zone from which to list machine types.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (GetMachineTypesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMachineTypesArgs)(nil)).Elem()
}

// A collection of values returned by getMachineTypes.
type GetMachineTypesResultOutput struct{ *pulumi.OutputState }

func (GetMachineTypesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMachineTypesResult)(nil)).Elem()
}

func (o GetMachineTypesResultOutput) ToGetMachineTypesResultOutput() GetMachineTypesResultOutput {
	return o
}

func (o GetMachineTypesResultOutput) ToGetMachineTypesResultOutputWithContext(ctx context.Context) GetMachineTypesResultOutput {
	return o
}

func (o GetMachineTypesResultOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMachineTypesResult) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetMachineTypesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMachineTypesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of machine types matching the provided filter. Structure is documented below.
func (o GetMachineTypesResultOutput) MachineTypes() GetMachineTypesMachineTypeArrayOutput {
	return o.ApplyT(func(v GetMachineTypesResult) []GetMachineTypesMachineType { return v.MachineTypes }).(GetMachineTypesMachineTypeArrayOutput)
}

func (o GetMachineTypesResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetMachineTypesResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o GetMachineTypesResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetMachineTypesResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMachineTypesResultOutput{})
}
