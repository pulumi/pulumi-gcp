// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a firewall resource within GCE. For more information see
// [the official documentation](https://cloud.google.com/compute/docs/vpc/firewalls)
// and
// [API](https://cloud.google.com/compute/docs/reference/latest/firewalls).
type Firewall struct {
	s *pulumi.ResourceState
}

// NewFirewall registers a new resource with the given unique name, arguments, and options.
func NewFirewall(ctx *pulumi.Context,
	name string, args *FirewallArgs, opts ...pulumi.ResourceOpt) (*Firewall, error) {
	if args == nil || args.Network == nil {
		return nil, errors.New("missing required argument 'Network'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allows"] = nil
		inputs["denies"] = nil
		inputs["description"] = nil
		inputs["destinationRanges"] = nil
		inputs["direction"] = nil
		inputs["disabled"] = nil
		inputs["name"] = nil
		inputs["network"] = nil
		inputs["priority"] = nil
		inputs["project"] = nil
		inputs["sourceRanges"] = nil
		inputs["sourceServiceAccounts"] = nil
		inputs["sourceTags"] = nil
		inputs["targetServiceAccounts"] = nil
		inputs["targetTags"] = nil
	} else {
		inputs["allows"] = args.Allows
		inputs["denies"] = args.Denies
		inputs["description"] = args.Description
		inputs["destinationRanges"] = args.DestinationRanges
		inputs["direction"] = args.Direction
		inputs["disabled"] = args.Disabled
		inputs["name"] = args.Name
		inputs["network"] = args.Network
		inputs["priority"] = args.Priority
		inputs["project"] = args.Project
		inputs["sourceRanges"] = args.SourceRanges
		inputs["sourceServiceAccounts"] = args.SourceServiceAccounts
		inputs["sourceTags"] = args.SourceTags
		inputs["targetServiceAccounts"] = args.TargetServiceAccounts
		inputs["targetTags"] = args.TargetTags
	}
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/firewall:Firewall", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Firewall{s: s}, nil
}

// GetFirewall gets an existing Firewall resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewall(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FirewallState, opts ...pulumi.ResourceOpt) (*Firewall, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allows"] = state.Allows
		inputs["denies"] = state.Denies
		inputs["description"] = state.Description
		inputs["destinationRanges"] = state.DestinationRanges
		inputs["direction"] = state.Direction
		inputs["disabled"] = state.Disabled
		inputs["name"] = state.Name
		inputs["network"] = state.Network
		inputs["priority"] = state.Priority
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
		inputs["sourceRanges"] = state.SourceRanges
		inputs["sourceServiceAccounts"] = state.SourceServiceAccounts
		inputs["sourceTags"] = state.SourceTags
		inputs["targetServiceAccounts"] = state.TargetServiceAccounts
		inputs["targetTags"] = state.TargetTags
	}
	s, err := ctx.ReadResource("gcp:compute/firewall:Firewall", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Firewall{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Firewall) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Firewall) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Can be specified multiple times for each allow
// rule. Each allow block supports fields documented below.
func (r *Firewall) Allows() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["allows"])
}

// Can be specified multiple times for each deny
// rule. Each deny block supports fields documented below. Can be specified
// instead of allow.
func (r *Firewall) Denies() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["denies"])
}

// Textual description field.
func (r *Firewall) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// A list of destination CIDR ranges that this
// firewall applies to. Can't be used for `INGRESS`.
func (r *Firewall) DestinationRanges() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["destinationRanges"])
}

// Direction of traffic to which this firewall applies;
// One of `INGRESS` or `EGRESS`. Defaults to `INGRESS`.
func (r *Firewall) Direction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["direction"])
}

// Denotes whether the firewall rule is disabled, i.e not applied to the network it is associated with.
// When set to true, the firewall rule is not enforced and the network behaves as if it did not exist.
func (r *Firewall) Disabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["disabled"])
}

// A unique name for the resource, required by GCE.
// Changing this forces a new resource to be created.
func (r *Firewall) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The name or self_link of the network to attach this firewall to.
func (r *Firewall) Network() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["network"])
}

// The priority for this firewall. Ranges from 0-65535, inclusive. Defaults to 1000. Firewall
// resources with lower priority values have higher precedence (e.g. a firewall resource with a priority value of 0
// takes effect over all other firewall rules with a non-zero priority).
func (r *Firewall) Priority() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["priority"])
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (r *Firewall) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The URI of the created resource.
func (r *Firewall) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// A list of source CIDR ranges that this
// firewall applies to. Can't be used for `EGRESS`.
func (r *Firewall) SourceRanges() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["sourceRanges"])
}

// A list of service accounts such that
// the firewall will apply only to traffic originating from an instance with a service account in this list.  Note that as of May 2018,
// this list can contain only one item, due to a change in the way that these firewall rules are handled.  Source service accounts
// cannot be used to control traffic to an instance's external IP address because service accounts are associated with an instance, not
// an IP address. `source_ranges` can be set at the same time as `source_service_accounts`. If both are set, the firewall will apply to
// traffic that has source IP address within `source_ranges` OR the source IP belongs to an instance with service account listed in
// `source_service_accounts`. The connection does not need to match both properties for the firewall to apply. `source_service_accounts`
// cannot be used at the same time as `source_tags` or `target_tags`.
func (r *Firewall) SourceServiceAccounts() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceServiceAccounts"])
}

// A list of source tags for this firewall. Can't be used for `EGRESS`.
func (r *Firewall) SourceTags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["sourceTags"])
}

// A list of service accounts indicating
// sets of instances located in the network that may make network connections as specified in `allow`. `target_service_accounts` cannot
// be used at the same time as `source_tags` or `target_tags`. If neither `target_service_accounts` nor `target_tags` are specified, the
// firewall rule applies to all instances on the specified network.  Note that as of May 2018, this list can contain only one item, due
// to a change in the way that these firewall rules are handled.
func (r *Firewall) TargetServiceAccounts() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["targetServiceAccounts"])
}

// A list of target tags for this firewall.
func (r *Firewall) TargetTags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["targetTags"])
}

// Input properties used for looking up and filtering Firewall resources.
type FirewallState struct {
	// Can be specified multiple times for each allow
	// rule. Each allow block supports fields documented below.
	Allows interface{}
	// Can be specified multiple times for each deny
	// rule. Each deny block supports fields documented below. Can be specified
	// instead of allow.
	Denies interface{}
	// Textual description field.
	Description interface{}
	// A list of destination CIDR ranges that this
	// firewall applies to. Can't be used for `INGRESS`.
	DestinationRanges interface{}
	// Direction of traffic to which this firewall applies;
	// One of `INGRESS` or `EGRESS`. Defaults to `INGRESS`.
	Direction interface{}
	// Denotes whether the firewall rule is disabled, i.e not applied to the network it is associated with.
	// When set to true, the firewall rule is not enforced and the network behaves as if it did not exist.
	Disabled interface{}
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name interface{}
	// The name or self_link of the network to attach this firewall to.
	Network interface{}
	// The priority for this firewall. Ranges from 0-65535, inclusive. Defaults to 1000. Firewall
	// resources with lower priority values have higher precedence (e.g. a firewall resource with a priority value of 0
	// takes effect over all other firewall rules with a non-zero priority).
	Priority interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// The URI of the created resource.
	SelfLink interface{}
	// A list of source CIDR ranges that this
	// firewall applies to. Can't be used for `EGRESS`.
	SourceRanges interface{}
	// A list of service accounts such that
	// the firewall will apply only to traffic originating from an instance with a service account in this list.  Note that as of May 2018,
	// this list can contain only one item, due to a change in the way that these firewall rules are handled.  Source service accounts
	// cannot be used to control traffic to an instance's external IP address because service accounts are associated with an instance, not
	// an IP address. `source_ranges` can be set at the same time as `source_service_accounts`. If both are set, the firewall will apply to
	// traffic that has source IP address within `source_ranges` OR the source IP belongs to an instance with service account listed in
	// `source_service_accounts`. The connection does not need to match both properties for the firewall to apply. `source_service_accounts`
	// cannot be used at the same time as `source_tags` or `target_tags`.
	SourceServiceAccounts interface{}
	// A list of source tags for this firewall. Can't be used for `EGRESS`.
	SourceTags interface{}
	// A list of service accounts indicating
	// sets of instances located in the network that may make network connections as specified in `allow`. `target_service_accounts` cannot
	// be used at the same time as `source_tags` or `target_tags`. If neither `target_service_accounts` nor `target_tags` are specified, the
	// firewall rule applies to all instances on the specified network.  Note that as of May 2018, this list can contain only one item, due
	// to a change in the way that these firewall rules are handled.
	TargetServiceAccounts interface{}
	// A list of target tags for this firewall.
	TargetTags interface{}
}

// The set of arguments for constructing a Firewall resource.
type FirewallArgs struct {
	// Can be specified multiple times for each allow
	// rule. Each allow block supports fields documented below.
	Allows interface{}
	// Can be specified multiple times for each deny
	// rule. Each deny block supports fields documented below. Can be specified
	// instead of allow.
	Denies interface{}
	// Textual description field.
	Description interface{}
	// A list of destination CIDR ranges that this
	// firewall applies to. Can't be used for `INGRESS`.
	DestinationRanges interface{}
	// Direction of traffic to which this firewall applies;
	// One of `INGRESS` or `EGRESS`. Defaults to `INGRESS`.
	Direction interface{}
	// Denotes whether the firewall rule is disabled, i.e not applied to the network it is associated with.
	// When set to true, the firewall rule is not enforced and the network behaves as if it did not exist.
	Disabled interface{}
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name interface{}
	// The name or self_link of the network to attach this firewall to.
	Network interface{}
	// The priority for this firewall. Ranges from 0-65535, inclusive. Defaults to 1000. Firewall
	// resources with lower priority values have higher precedence (e.g. a firewall resource with a priority value of 0
	// takes effect over all other firewall rules with a non-zero priority).
	Priority interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// A list of source CIDR ranges that this
	// firewall applies to. Can't be used for `EGRESS`.
	SourceRanges interface{}
	// A list of service accounts such that
	// the firewall will apply only to traffic originating from an instance with a service account in this list.  Note that as of May 2018,
	// this list can contain only one item, due to a change in the way that these firewall rules are handled.  Source service accounts
	// cannot be used to control traffic to an instance's external IP address because service accounts are associated with an instance, not
	// an IP address. `source_ranges` can be set at the same time as `source_service_accounts`. If both are set, the firewall will apply to
	// traffic that has source IP address within `source_ranges` OR the source IP belongs to an instance with service account listed in
	// `source_service_accounts`. The connection does not need to match both properties for the firewall to apply. `source_service_accounts`
	// cannot be used at the same time as `source_tags` or `target_tags`.
	SourceServiceAccounts interface{}
	// A list of source tags for this firewall. Can't be used for `EGRESS`.
	SourceTags interface{}
	// A list of service accounts indicating
	// sets of instances located in the network that may make network connections as specified in `allow`. `target_service_accounts` cannot
	// be used at the same time as `source_tags` or `target_tags`. If neither `target_service_accounts` nor `target_tags` are specified, the
	// firewall rule applies to all instances on the specified network.  Note that as of May 2018, this list can contain only one item, due
	// to a change in the way that these firewall rules are handled.
	TargetServiceAccounts interface{}
	// A list of target tags for this firewall.
	TargetTags interface{}
}
