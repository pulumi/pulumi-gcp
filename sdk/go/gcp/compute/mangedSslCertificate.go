// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Deprecated: gcp.compute.MangedSslCertificate has been deprecated in favor of gcp.compute.ManagedSslCertificate
type MangedSslCertificate struct {
	pulumi.CustomResourceState

	// The unique identifier for the resource.
	CertificateId pulumi.IntOutput `pulumi:"certificateId"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Expire time of the certificate.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// Properties relevant to a managed certificate. These will be used if the certificate is managed (as indicated by a value
	// of 'MANAGED' in 'type').
	Managed MangedSslCertificateManagedPtrOutput `pulumi:"managed"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. These are in the same
	// namespace as the managed SSL certificates.
	Name     pulumi.StringOutput `pulumi:"name"`
	Project  pulumi.StringOutput `pulumi:"project"`
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Domains associated with the certificate via Subject Alternative Name.
	SubjectAlternativeNames pulumi.StringArrayOutput `pulumi:"subjectAlternativeNames"`
	// Enum field whose value is always 'MANAGED' - used to signal to the API which type this is. Default value: "MANAGED"
	// Possible values: ["MANAGED"]
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewMangedSslCertificate registers a new resource with the given unique name, arguments, and options.
func NewMangedSslCertificate(ctx *pulumi.Context,
	name string, args *MangedSslCertificateArgs, opts ...pulumi.ResourceOption) (*MangedSslCertificate, error) {
	if args == nil {
		args = &MangedSslCertificateArgs{}
	}

	var resource MangedSslCertificate
	err := ctx.RegisterResource("gcp:compute/mangedSslCertificate:MangedSslCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMangedSslCertificate gets an existing MangedSslCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMangedSslCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MangedSslCertificateState, opts ...pulumi.ResourceOption) (*MangedSslCertificate, error) {
	var resource MangedSslCertificate
	err := ctx.ReadResource("gcp:compute/mangedSslCertificate:MangedSslCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MangedSslCertificate resources.
type mangedSslCertificateState struct {
	// The unique identifier for the resource.
	CertificateId *int `pulumi:"certificateId"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Expire time of the certificate.
	ExpireTime *string `pulumi:"expireTime"`
	// Properties relevant to a managed certificate. These will be used if the certificate is managed (as indicated by a value
	// of 'MANAGED' in 'type').
	Managed *MangedSslCertificateManaged `pulumi:"managed"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. These are in the same
	// namespace as the managed SSL certificates.
	Name     *string `pulumi:"name"`
	Project  *string `pulumi:"project"`
	SelfLink *string `pulumi:"selfLink"`
	// Domains associated with the certificate via Subject Alternative Name.
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
	// Enum field whose value is always 'MANAGED' - used to signal to the API which type this is. Default value: "MANAGED"
	// Possible values: ["MANAGED"]
	Type *string `pulumi:"type"`
}

type MangedSslCertificateState struct {
	// The unique identifier for the resource.
	CertificateId pulumi.IntPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Expire time of the certificate.
	ExpireTime pulumi.StringPtrInput
	// Properties relevant to a managed certificate. These will be used if the certificate is managed (as indicated by a value
	// of 'MANAGED' in 'type').
	Managed MangedSslCertificateManagedPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. These are in the same
	// namespace as the managed SSL certificates.
	Name     pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	SelfLink pulumi.StringPtrInput
	// Domains associated with the certificate via Subject Alternative Name.
	SubjectAlternativeNames pulumi.StringArrayInput
	// Enum field whose value is always 'MANAGED' - used to signal to the API which type this is. Default value: "MANAGED"
	// Possible values: ["MANAGED"]
	Type pulumi.StringPtrInput
}

func (MangedSslCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*mangedSslCertificateState)(nil)).Elem()
}

type mangedSslCertificateArgs struct {
	// The unique identifier for the resource.
	CertificateId *int `pulumi:"certificateId"`
	// An optional description of this resource.
	Description *string `pulumi:"description"`
	// Properties relevant to a managed certificate. These will be used if the certificate is managed (as indicated by a value
	// of 'MANAGED' in 'type').
	Managed *MangedSslCertificateManaged `pulumi:"managed"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. These are in the same
	// namespace as the managed SSL certificates.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Enum field whose value is always 'MANAGED' - used to signal to the API which type this is. Default value: "MANAGED"
	// Possible values: ["MANAGED"]
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a MangedSslCertificate resource.
type MangedSslCertificateArgs struct {
	// The unique identifier for the resource.
	CertificateId pulumi.IntPtrInput
	// An optional description of this resource.
	Description pulumi.StringPtrInput
	// Properties relevant to a managed certificate. These will be used if the certificate is managed (as indicated by a value
	// of 'MANAGED' in 'type').
	Managed MangedSslCertificateManagedPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. These are in the same
	// namespace as the managed SSL certificates.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Enum field whose value is always 'MANAGED' - used to signal to the API which type this is. Default value: "MANAGED"
	// Possible values: ["MANAGED"]
	Type pulumi.StringPtrInput
}

func (MangedSslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mangedSslCertificateArgs)(nil)).Elem()
}

type MangedSslCertificateInput interface {
	pulumi.Input

	ToMangedSslCertificateOutput() MangedSslCertificateOutput
	ToMangedSslCertificateOutputWithContext(ctx context.Context) MangedSslCertificateOutput
}

func (*MangedSslCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((*MangedSslCertificate)(nil))
}

func (i *MangedSslCertificate) ToMangedSslCertificateOutput() MangedSslCertificateOutput {
	return i.ToMangedSslCertificateOutputWithContext(context.Background())
}

func (i *MangedSslCertificate) ToMangedSslCertificateOutputWithContext(ctx context.Context) MangedSslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MangedSslCertificateOutput)
}

func (i *MangedSslCertificate) ToMangedSslCertificatePtrOutput() MangedSslCertificatePtrOutput {
	return i.ToMangedSslCertificatePtrOutputWithContext(context.Background())
}

func (i *MangedSslCertificate) ToMangedSslCertificatePtrOutputWithContext(ctx context.Context) MangedSslCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MangedSslCertificatePtrOutput)
}

type MangedSslCertificatePtrInput interface {
	pulumi.Input

	ToMangedSslCertificatePtrOutput() MangedSslCertificatePtrOutput
	ToMangedSslCertificatePtrOutputWithContext(ctx context.Context) MangedSslCertificatePtrOutput
}

type mangedSslCertificatePtrType MangedSslCertificateArgs

func (*mangedSslCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MangedSslCertificate)(nil))
}

func (i *mangedSslCertificatePtrType) ToMangedSslCertificatePtrOutput() MangedSslCertificatePtrOutput {
	return i.ToMangedSslCertificatePtrOutputWithContext(context.Background())
}

func (i *mangedSslCertificatePtrType) ToMangedSslCertificatePtrOutputWithContext(ctx context.Context) MangedSslCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MangedSslCertificatePtrOutput)
}

// MangedSslCertificateArrayInput is an input type that accepts MangedSslCertificateArray and MangedSslCertificateArrayOutput values.
// You can construct a concrete instance of `MangedSslCertificateArrayInput` via:
//
//          MangedSslCertificateArray{ MangedSslCertificateArgs{...} }
type MangedSslCertificateArrayInput interface {
	pulumi.Input

	ToMangedSslCertificateArrayOutput() MangedSslCertificateArrayOutput
	ToMangedSslCertificateArrayOutputWithContext(context.Context) MangedSslCertificateArrayOutput
}

type MangedSslCertificateArray []MangedSslCertificateInput

func (MangedSslCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*MangedSslCertificate)(nil))
}

func (i MangedSslCertificateArray) ToMangedSslCertificateArrayOutput() MangedSslCertificateArrayOutput {
	return i.ToMangedSslCertificateArrayOutputWithContext(context.Background())
}

func (i MangedSslCertificateArray) ToMangedSslCertificateArrayOutputWithContext(ctx context.Context) MangedSslCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MangedSslCertificateArrayOutput)
}

// MangedSslCertificateMapInput is an input type that accepts MangedSslCertificateMap and MangedSslCertificateMapOutput values.
// You can construct a concrete instance of `MangedSslCertificateMapInput` via:
//
//          MangedSslCertificateMap{ "key": MangedSslCertificateArgs{...} }
type MangedSslCertificateMapInput interface {
	pulumi.Input

	ToMangedSslCertificateMapOutput() MangedSslCertificateMapOutput
	ToMangedSslCertificateMapOutputWithContext(context.Context) MangedSslCertificateMapOutput
}

type MangedSslCertificateMap map[string]MangedSslCertificateInput

func (MangedSslCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*MangedSslCertificate)(nil))
}

func (i MangedSslCertificateMap) ToMangedSslCertificateMapOutput() MangedSslCertificateMapOutput {
	return i.ToMangedSslCertificateMapOutputWithContext(context.Background())
}

func (i MangedSslCertificateMap) ToMangedSslCertificateMapOutputWithContext(ctx context.Context) MangedSslCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MangedSslCertificateMapOutput)
}

type MangedSslCertificateOutput struct {
	*pulumi.OutputState
}

func (MangedSslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MangedSslCertificate)(nil))
}

func (o MangedSslCertificateOutput) ToMangedSslCertificateOutput() MangedSslCertificateOutput {
	return o
}

func (o MangedSslCertificateOutput) ToMangedSslCertificateOutputWithContext(ctx context.Context) MangedSslCertificateOutput {
	return o
}

func (o MangedSslCertificateOutput) ToMangedSslCertificatePtrOutput() MangedSslCertificatePtrOutput {
	return o.ToMangedSslCertificatePtrOutputWithContext(context.Background())
}

func (o MangedSslCertificateOutput) ToMangedSslCertificatePtrOutputWithContext(ctx context.Context) MangedSslCertificatePtrOutput {
	return o.ApplyT(func(v MangedSslCertificate) *MangedSslCertificate {
		return &v
	}).(MangedSslCertificatePtrOutput)
}

type MangedSslCertificatePtrOutput struct {
	*pulumi.OutputState
}

func (MangedSslCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MangedSslCertificate)(nil))
}

func (o MangedSslCertificatePtrOutput) ToMangedSslCertificatePtrOutput() MangedSslCertificatePtrOutput {
	return o
}

func (o MangedSslCertificatePtrOutput) ToMangedSslCertificatePtrOutputWithContext(ctx context.Context) MangedSslCertificatePtrOutput {
	return o
}

type MangedSslCertificateArrayOutput struct{ *pulumi.OutputState }

func (MangedSslCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MangedSslCertificate)(nil))
}

func (o MangedSslCertificateArrayOutput) ToMangedSslCertificateArrayOutput() MangedSslCertificateArrayOutput {
	return o
}

func (o MangedSslCertificateArrayOutput) ToMangedSslCertificateArrayOutputWithContext(ctx context.Context) MangedSslCertificateArrayOutput {
	return o
}

func (o MangedSslCertificateArrayOutput) Index(i pulumi.IntInput) MangedSslCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MangedSslCertificate {
		return vs[0].([]MangedSslCertificate)[vs[1].(int)]
	}).(MangedSslCertificateOutput)
}

type MangedSslCertificateMapOutput struct{ *pulumi.OutputState }

func (MangedSslCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MangedSslCertificate)(nil))
}

func (o MangedSslCertificateMapOutput) ToMangedSslCertificateMapOutput() MangedSslCertificateMapOutput {
	return o
}

func (o MangedSslCertificateMapOutput) ToMangedSslCertificateMapOutputWithContext(ctx context.Context) MangedSslCertificateMapOutput {
	return o
}

func (o MangedSslCertificateMapOutput) MapIndex(k pulumi.StringInput) MangedSslCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MangedSslCertificate {
		return vs[0].(map[string]MangedSslCertificate)[vs[1].(string)]
	}).(MangedSslCertificateOutput)
}

func init() {
	pulumi.RegisterOutputType(MangedSslCertificateOutput{})
	pulumi.RegisterOutputType(MangedSslCertificatePtrOutput{})
	pulumi.RegisterOutputType(MangedSslCertificateArrayOutput{})
	pulumi.RegisterOutputType(MangedSslCertificateMapOutput{})
}
