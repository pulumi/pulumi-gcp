// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Preview Feature Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewPreviewFeature(ctx, "gce_preview_feature", &compute.PreviewFeatureArgs{
//				Name:             pulumi.String("alpha-api-access"),
//				ActivationStatus: pulumi.String("DISABLED"),
//				RolloutOperation: &compute.PreviewFeatureRolloutOperationArgs{
//					RolloutInput: &compute.PreviewFeatureRolloutOperationRolloutInputArgs{
//						PredefinedRolloutPlan: pulumi.String("ROLLOUT_PLAN_FAST_ROLLOUT"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PreviewFeature can be imported using any of these accepted formats:
//
// * `projects/{{project}}/global/previewFeatures/{{name}}`
//
// * `{{project}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, PreviewFeature can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:compute/previewFeature:PreviewFeature default projects/{{project}}/global/previewFeatures/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/previewFeature:PreviewFeature default {{project}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/previewFeature:PreviewFeature default {{name}}
// ```
type PreviewFeature struct {
	pulumi.CustomResourceState

	// The activation status of the preview feature.
	// Possible values are: `ENABLED`, `DISABLED`.
	ActivationStatus pulumi.StringOutput `pulumi:"activationStatus"`
	// The name of the preview feature.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The rollout operation of the feature.
	// Structure is documented below.
	RolloutOperation PreviewFeatureRolloutOperationPtrOutput `pulumi:"rolloutOperation"`
}

// NewPreviewFeature registers a new resource with the given unique name, arguments, and options.
func NewPreviewFeature(ctx *pulumi.Context,
	name string, args *PreviewFeatureArgs, opts ...pulumi.ResourceOption) (*PreviewFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActivationStatus == nil {
		return nil, errors.New("invalid value for required argument 'ActivationStatus'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PreviewFeature
	err := ctx.RegisterResource("gcp:compute/previewFeature:PreviewFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPreviewFeature gets an existing PreviewFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPreviewFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PreviewFeatureState, opts ...pulumi.ResourceOption) (*PreviewFeature, error) {
	var resource PreviewFeature
	err := ctx.ReadResource("gcp:compute/previewFeature:PreviewFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PreviewFeature resources.
type previewFeatureState struct {
	// The activation status of the preview feature.
	// Possible values are: `ENABLED`, `DISABLED`.
	ActivationStatus *string `pulumi:"activationStatus"`
	// The name of the preview feature.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The rollout operation of the feature.
	// Structure is documented below.
	RolloutOperation *PreviewFeatureRolloutOperation `pulumi:"rolloutOperation"`
}

type PreviewFeatureState struct {
	// The activation status of the preview feature.
	// Possible values are: `ENABLED`, `DISABLED`.
	ActivationStatus pulumi.StringPtrInput
	// The name of the preview feature.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The rollout operation of the feature.
	// Structure is documented below.
	RolloutOperation PreviewFeatureRolloutOperationPtrInput
}

func (PreviewFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*previewFeatureState)(nil)).Elem()
}

type previewFeatureArgs struct {
	// The activation status of the preview feature.
	// Possible values are: `ENABLED`, `DISABLED`.
	ActivationStatus string `pulumi:"activationStatus"`
	// The name of the preview feature.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The rollout operation of the feature.
	// Structure is documented below.
	RolloutOperation *PreviewFeatureRolloutOperation `pulumi:"rolloutOperation"`
}

// The set of arguments for constructing a PreviewFeature resource.
type PreviewFeatureArgs struct {
	// The activation status of the preview feature.
	// Possible values are: `ENABLED`, `DISABLED`.
	ActivationStatus pulumi.StringInput
	// The name of the preview feature.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The rollout operation of the feature.
	// Structure is documented below.
	RolloutOperation PreviewFeatureRolloutOperationPtrInput
}

func (PreviewFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*previewFeatureArgs)(nil)).Elem()
}

type PreviewFeatureInput interface {
	pulumi.Input

	ToPreviewFeatureOutput() PreviewFeatureOutput
	ToPreviewFeatureOutputWithContext(ctx context.Context) PreviewFeatureOutput
}

func (*PreviewFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**PreviewFeature)(nil)).Elem()
}

func (i *PreviewFeature) ToPreviewFeatureOutput() PreviewFeatureOutput {
	return i.ToPreviewFeatureOutputWithContext(context.Background())
}

func (i *PreviewFeature) ToPreviewFeatureOutputWithContext(ctx context.Context) PreviewFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreviewFeatureOutput)
}

// PreviewFeatureArrayInput is an input type that accepts PreviewFeatureArray and PreviewFeatureArrayOutput values.
// You can construct a concrete instance of `PreviewFeatureArrayInput` via:
//
//	PreviewFeatureArray{ PreviewFeatureArgs{...} }
type PreviewFeatureArrayInput interface {
	pulumi.Input

	ToPreviewFeatureArrayOutput() PreviewFeatureArrayOutput
	ToPreviewFeatureArrayOutputWithContext(context.Context) PreviewFeatureArrayOutput
}

type PreviewFeatureArray []PreviewFeatureInput

func (PreviewFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreviewFeature)(nil)).Elem()
}

func (i PreviewFeatureArray) ToPreviewFeatureArrayOutput() PreviewFeatureArrayOutput {
	return i.ToPreviewFeatureArrayOutputWithContext(context.Background())
}

func (i PreviewFeatureArray) ToPreviewFeatureArrayOutputWithContext(ctx context.Context) PreviewFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreviewFeatureArrayOutput)
}

// PreviewFeatureMapInput is an input type that accepts PreviewFeatureMap and PreviewFeatureMapOutput values.
// You can construct a concrete instance of `PreviewFeatureMapInput` via:
//
//	PreviewFeatureMap{ "key": PreviewFeatureArgs{...} }
type PreviewFeatureMapInput interface {
	pulumi.Input

	ToPreviewFeatureMapOutput() PreviewFeatureMapOutput
	ToPreviewFeatureMapOutputWithContext(context.Context) PreviewFeatureMapOutput
}

type PreviewFeatureMap map[string]PreviewFeatureInput

func (PreviewFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreviewFeature)(nil)).Elem()
}

func (i PreviewFeatureMap) ToPreviewFeatureMapOutput() PreviewFeatureMapOutput {
	return i.ToPreviewFeatureMapOutputWithContext(context.Background())
}

func (i PreviewFeatureMap) ToPreviewFeatureMapOutputWithContext(ctx context.Context) PreviewFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreviewFeatureMapOutput)
}

type PreviewFeatureOutput struct{ *pulumi.OutputState }

func (PreviewFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreviewFeature)(nil)).Elem()
}

func (o PreviewFeatureOutput) ToPreviewFeatureOutput() PreviewFeatureOutput {
	return o
}

func (o PreviewFeatureOutput) ToPreviewFeatureOutputWithContext(ctx context.Context) PreviewFeatureOutput {
	return o
}

// The activation status of the preview feature.
// Possible values are: `ENABLED`, `DISABLED`.
func (o PreviewFeatureOutput) ActivationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *PreviewFeature) pulumi.StringOutput { return v.ActivationStatus }).(pulumi.StringOutput)
}

// The name of the preview feature.
func (o PreviewFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PreviewFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o PreviewFeatureOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PreviewFeature) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The rollout operation of the feature.
// Structure is documented below.
func (o PreviewFeatureOutput) RolloutOperation() PreviewFeatureRolloutOperationPtrOutput {
	return o.ApplyT(func(v *PreviewFeature) PreviewFeatureRolloutOperationPtrOutput { return v.RolloutOperation }).(PreviewFeatureRolloutOperationPtrOutput)
}

type PreviewFeatureArrayOutput struct{ *pulumi.OutputState }

func (PreviewFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreviewFeature)(nil)).Elem()
}

func (o PreviewFeatureArrayOutput) ToPreviewFeatureArrayOutput() PreviewFeatureArrayOutput {
	return o
}

func (o PreviewFeatureArrayOutput) ToPreviewFeatureArrayOutputWithContext(ctx context.Context) PreviewFeatureArrayOutput {
	return o
}

func (o PreviewFeatureArrayOutput) Index(i pulumi.IntInput) PreviewFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PreviewFeature {
		return vs[0].([]*PreviewFeature)[vs[1].(int)]
	}).(PreviewFeatureOutput)
}

type PreviewFeatureMapOutput struct{ *pulumi.OutputState }

func (PreviewFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreviewFeature)(nil)).Elem()
}

func (o PreviewFeatureMapOutput) ToPreviewFeatureMapOutput() PreviewFeatureMapOutput {
	return o
}

func (o PreviewFeatureMapOutput) ToPreviewFeatureMapOutputWithContext(ctx context.Context) PreviewFeatureMapOutput {
	return o
}

func (o PreviewFeatureMapOutput) MapIndex(k pulumi.StringInput) PreviewFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PreviewFeature {
		return vs[0].(map[string]*PreviewFeature)[vs[1].(string)]
	}).(PreviewFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PreviewFeatureInput)(nil)).Elem(), &PreviewFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreviewFeatureArrayInput)(nil)).Elem(), PreviewFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreviewFeatureMapInput)(nil)).Elem(), PreviewFeatureMap{})
	pulumi.RegisterOutputType(PreviewFeatureOutput{})
	pulumi.RegisterOutputType(PreviewFeatureArrayOutput{})
	pulumi.RegisterOutputType(PreviewFeatureMapOutput{})
}
