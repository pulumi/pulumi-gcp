// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
//
// To get more information about RegionNetworkFirewallPolicyRule, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/regionNetworkFirewallPolicies/addRule)
//
// ## Example Usage
//
// ### Region Network Firewall Policy Rule
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			basicRegionalNetworksecurityAddressGroup, err := networksecurity.NewAddressGroup(ctx, "basic_regional_networksecurity_address_group", &networksecurity.AddressGroupArgs{
//				Name:        pulumi.String("address-group"),
//				Parent:      pulumi.String("projects/my-project-name"),
//				Description: pulumi.String("Sample regional networksecurity_address_group"),
//				Location:    pulumi.String("us-west1"),
//				Items: pulumi.StringArray{
//					pulumi.String("208.80.154.224/32"),
//				},
//				Type:     pulumi.String("IPV4"),
//				Capacity: pulumi.Int(100),
//			})
//			if err != nil {
//				return err
//			}
//			basicRegionalNetworkFirewallPolicy, err := compute.NewRegionNetworkFirewallPolicy(ctx, "basic_regional_network_firewall_policy", &compute.RegionNetworkFirewallPolicyArgs{
//				Name:        pulumi.String("fw-policy"),
//				Description: pulumi.String("Sample regional network firewall policy"),
//				Project:     pulumi.String("my-project-name"),
//				Region:      pulumi.String("us-west1"),
//			})
//			if err != nil {
//				return err
//			}
//			basicNetwork, err := compute.NewNetwork(ctx, "basic_network", &compute.NetworkArgs{
//				Name: pulumi.String("network"),
//			})
//			if err != nil {
//				return err
//			}
//			basicKey, err := tags.NewTagKey(ctx, "basic_key", &tags.TagKeyArgs{
//				Description: pulumi.String("For keyname resources."),
//				Parent:      pulumi.String("organizations/123456789"),
//				Purpose:     pulumi.String("GCE_FIREWALL"),
//				ShortName:   pulumi.String("tag-key"),
//				PurposeData: pulumi.StringMap{
//					"network": basicNetwork.Name.ApplyT(func(name string) (string, error) {
//						return fmt.Sprintf("my-project-name/%v", name), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			basicValue, err := tags.NewTagValue(ctx, "basic_value", &tags.TagValueArgs{
//				Description: pulumi.String("For valuename resources."),
//				Parent:      basicKey.ID(),
//				ShortName:   pulumi.String("tag-value"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRegionNetworkFirewallPolicyRule(ctx, "primary", &compute.RegionNetworkFirewallPolicyRuleArgs{
//				Action:         pulumi.String("allow"),
//				Description:    pulumi.String("This is a simple rule description"),
//				Direction:      pulumi.String("INGRESS"),
//				Disabled:       pulumi.Bool(false),
//				EnableLogging:  pulumi.Bool(true),
//				FirewallPolicy: basicRegionalNetworkFirewallPolicy.Name,
//				Priority:       pulumi.Int(1000),
//				Region:         pulumi.String("us-west1"),
//				RuleName:       pulumi.String("test-rule"),
//				TargetServiceAccounts: pulumi.StringArray{
//					pulumi.String("my@service-account.com"),
//				},
//				Match: &compute.RegionNetworkFirewallPolicyRuleMatchArgs{
//					SrcAddressGroups: pulumi.StringArray{
//						basicRegionalNetworksecurityAddressGroup.ID(),
//					},
//					SrcIpRanges: pulumi.StringArray{
//						pulumi.String("10.100.0.1/32"),
//					},
//					SrcFqdns: pulumi.StringArray{
//						pulumi.String("example.com"),
//					},
//					SrcRegionCodes: pulumi.StringArray{
//						pulumi.String("US"),
//					},
//					SrcThreatIntelligences: pulumi.StringArray{
//						pulumi.String("iplist-known-malicious-ips"),
//					},
//					Layer4Configs: compute.RegionNetworkFirewallPolicyRuleMatchLayer4ConfigArray{
//						&compute.RegionNetworkFirewallPolicyRuleMatchLayer4ConfigArgs{
//							IpProtocol: pulumi.String("all"),
//						},
//					},
//					SrcSecureTags: compute.RegionNetworkFirewallPolicyRuleMatchSrcSecureTagArray{
//						&compute.RegionNetworkFirewallPolicyRuleMatchSrcSecureTagArgs{
//							Name: basicValue.ID(),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Network Firewall Policy Rule Network Scope Egress
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			basicRegionalNetworkFirewallPolicy, err := compute.NewRegionNetworkFirewallPolicy(ctx, "basic_regional_network_firewall_policy", &compute.RegionNetworkFirewallPolicyArgs{
//				Name:        pulumi.String("fw-policy"),
//				Description: pulumi.String("Sample regional network firewall policy"),
//				Project:     pulumi.String("my-project-name"),
//				Region:      pulumi.String("us-west1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRegionNetworkFirewallPolicyRule(ctx, "primary", &compute.RegionNetworkFirewallPolicyRuleArgs{
//				Action:         pulumi.String("allow"),
//				Description:    pulumi.String("This is a simple rule description"),
//				Direction:      pulumi.String("EGRESS"),
//				Disabled:       pulumi.Bool(false),
//				EnableLogging:  pulumi.Bool(true),
//				FirewallPolicy: basicRegionalNetworkFirewallPolicy.Name,
//				Priority:       pulumi.Int(1000),
//				Region:         pulumi.String("us-west1"),
//				RuleName:       pulumi.String("test-rule"),
//				Match: &compute.RegionNetworkFirewallPolicyRuleMatchArgs{
//					DestIpRanges: pulumi.StringArray{
//						pulumi.String("10.100.0.1/32"),
//					},
//					DestNetworkScope: pulumi.String("INTERNET"),
//					Layer4Configs: compute.RegionNetworkFirewallPolicyRuleMatchLayer4ConfigArray{
//						&compute.RegionNetworkFirewallPolicyRuleMatchLayer4ConfigArgs{
//							IpProtocol: pulumi.String("all"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Region Network Firewall Policy Rule Network Scope Ingress
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			basicRegionalNetworkFirewallPolicy, err := compute.NewRegionNetworkFirewallPolicy(ctx, "basic_regional_network_firewall_policy", &compute.RegionNetworkFirewallPolicyArgs{
//				Name:        pulumi.String("fw-policy"),
//				Description: pulumi.String("Sample regional network firewall policy"),
//				Project:     pulumi.String("my-project-name"),
//				Region:      pulumi.String("us-west1"),
//			})
//			if err != nil {
//				return err
//			}
//			network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
//				Name: pulumi.String("network"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRegionNetworkFirewallPolicyRule(ctx, "primary", &compute.RegionNetworkFirewallPolicyRuleArgs{
//				Action:         pulumi.String("allow"),
//				Description:    pulumi.String("This is a simple rule description"),
//				Direction:      pulumi.String("INGRESS"),
//				Disabled:       pulumi.Bool(false),
//				EnableLogging:  pulumi.Bool(true),
//				FirewallPolicy: basicRegionalNetworkFirewallPolicy.Name,
//				Priority:       pulumi.Int(1000),
//				Region:         pulumi.String("us-west1"),
//				RuleName:       pulumi.String("test-rule"),
//				Match: &compute.RegionNetworkFirewallPolicyRuleMatchArgs{
//					SrcIpRanges: pulumi.StringArray{
//						pulumi.String("10.100.0.1/32"),
//					},
//					SrcNetworkScope: pulumi.String("VPC_NETWORKS"),
//					SrcNetworks: pulumi.StringArray{
//						network.ID(),
//					},
//					Layer4Configs: compute.RegionNetworkFirewallPolicyRuleMatchLayer4ConfigArray{
//						&compute.RegionNetworkFirewallPolicyRuleMatchLayer4ConfigArgs{
//							IpProtocol: pulumi.String("all"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RegionNetworkFirewallPolicyRule can be imported using any of these accepted formats:
//
// * `projects/{{project}}/regions/{{region}}/firewallPolicies/{{firewall_policy}}/{{priority}}`
//
// * `{{project}}/{{region}}/{{firewall_policy}}/{{priority}}`
//
// * `{{region}}/{{firewall_policy}}/{{priority}}`
//
// * `{{firewall_policy}}/{{priority}}`
//
// When using the `pulumi import` command, RegionNetworkFirewallPolicyRule can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:compute/regionNetworkFirewallPolicyRule:RegionNetworkFirewallPolicyRule default projects/{{project}}/regions/{{region}}/firewallPolicies/{{firewall_policy}}/{{priority}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/regionNetworkFirewallPolicyRule:RegionNetworkFirewallPolicyRule default {{project}}/{{region}}/{{firewall_policy}}/{{priority}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/regionNetworkFirewallPolicyRule:RegionNetworkFirewallPolicyRule default {{region}}/{{firewall_policy}}/{{priority}}
// ```
//
// ```sh
// $ pulumi import gcp:compute/regionNetworkFirewallPolicyRule:RegionNetworkFirewallPolicyRule default {{firewall_policy}}/{{priority}}
// ```
type RegionNetworkFirewallPolicyRule struct {
	pulumi.CustomResourceState

	// The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny", "gotoNext" and "applySecurityProfileGroup".
	Action pulumi.StringOutput `pulumi:"action"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description for this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The direction in which this rule applies.
	// Possible values are: `INGRESS`, `EGRESS`.
	Direction pulumi.StringOutput `pulumi:"direction"`
	// Denotes whether the firewall policy rule is disabled.
	// When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
	// If this is unspecified, the firewall policy rule will be enabled.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// Denotes whether to enable logging for a particular rule.
	// If logging is enabled, logs will be exported to the configured export destination in Stackdriver.
	// Logs may be exported to BigQuery or Pub/Sub.
	// Note: you cannot enable logging on "gotoNext" rules.
	EnableLogging pulumi.BoolPtrOutput `pulumi:"enableLogging"`
	// The firewall policy of the resource.
	FirewallPolicy pulumi.StringOutput `pulumi:"firewallPolicy"`
	// Type of the resource. Always `compute#firewallPolicyRule` for firewall policy rules
	Kind pulumi.StringOutput `pulumi:"kind"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	// Structure is documented below.
	Match RegionNetworkFirewallPolicyRuleMatchOutput `pulumi:"match"`
	// An integer indicating the priority of a rule in the list.
	// The priority must be a positive value between 0 and 2147483647.
	// Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The location of this resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// An optional name for the rule. This field is not a unique identifier and can be updated.
	RuleName pulumi.StringPtrOutput `pulumi:"ruleName"`
	// Calculation of the complexity of a single firewall policy rule.
	RuleTupleCount pulumi.IntOutput `pulumi:"ruleTupleCount"`
	// A fully-qualified URL of a SecurityProfile resource instance.
	// Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
	// Must be specified if action = 'apply_security_profile_group' and cannot be specified for other actions.
	// Security Profile Group and Firewall Policy Rule must be in the same scope.
	SecurityProfileGroup pulumi.StringPtrOutput `pulumi:"securityProfileGroup"`
	// A list of secure tags that controls which instances the firewall rule applies to.
	// If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
	// targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
	// Structure is documented below.
	TargetSecureTags RegionNetworkFirewallPolicyRuleTargetSecureTagArrayOutput `pulumi:"targetSecureTags"`
	// A list of service accounts indicating the sets of instances that are applied with this rule.
	TargetServiceAccounts pulumi.StringArrayOutput `pulumi:"targetServiceAccounts"`
	// Boolean flag indicating if the traffic should be TLS decrypted.
	// Can be set only if action = 'apply_security_profile_group' and cannot be set for other actions.
	TlsInspect pulumi.BoolPtrOutput `pulumi:"tlsInspect"`
}

// NewRegionNetworkFirewallPolicyRule registers a new resource with the given unique name, arguments, and options.
func NewRegionNetworkFirewallPolicyRule(ctx *pulumi.Context,
	name string, args *RegionNetworkFirewallPolicyRuleArgs, opts ...pulumi.ResourceOption) (*RegionNetworkFirewallPolicyRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Direction == nil {
		return nil, errors.New("invalid value for required argument 'Direction'")
	}
	if args.FirewallPolicy == nil {
		return nil, errors.New("invalid value for required argument 'FirewallPolicy'")
	}
	if args.Match == nil {
		return nil, errors.New("invalid value for required argument 'Match'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionNetworkFirewallPolicyRule
	err := ctx.RegisterResource("gcp:compute/regionNetworkFirewallPolicyRule:RegionNetworkFirewallPolicyRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionNetworkFirewallPolicyRule gets an existing RegionNetworkFirewallPolicyRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionNetworkFirewallPolicyRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionNetworkFirewallPolicyRuleState, opts ...pulumi.ResourceOption) (*RegionNetworkFirewallPolicyRule, error) {
	var resource RegionNetworkFirewallPolicyRule
	err := ctx.ReadResource("gcp:compute/regionNetworkFirewallPolicyRule:RegionNetworkFirewallPolicyRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionNetworkFirewallPolicyRule resources.
type regionNetworkFirewallPolicyRuleState struct {
	// The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny", "gotoNext" and "applySecurityProfileGroup".
	Action *string `pulumi:"action"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description for this resource.
	Description *string `pulumi:"description"`
	// The direction in which this rule applies.
	// Possible values are: `INGRESS`, `EGRESS`.
	Direction *string `pulumi:"direction"`
	// Denotes whether the firewall policy rule is disabled.
	// When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
	// If this is unspecified, the firewall policy rule will be enabled.
	Disabled *bool `pulumi:"disabled"`
	// Denotes whether to enable logging for a particular rule.
	// If logging is enabled, logs will be exported to the configured export destination in Stackdriver.
	// Logs may be exported to BigQuery or Pub/Sub.
	// Note: you cannot enable logging on "gotoNext" rules.
	EnableLogging *bool `pulumi:"enableLogging"`
	// The firewall policy of the resource.
	FirewallPolicy *string `pulumi:"firewallPolicy"`
	// Type of the resource. Always `compute#firewallPolicyRule` for firewall policy rules
	Kind *string `pulumi:"kind"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	// Structure is documented below.
	Match *RegionNetworkFirewallPolicyRuleMatch `pulumi:"match"`
	// An integer indicating the priority of a rule in the list.
	// The priority must be a positive value between 0 and 2147483647.
	// Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
	Priority *int `pulumi:"priority"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The location of this resource.
	Region *string `pulumi:"region"`
	// An optional name for the rule. This field is not a unique identifier and can be updated.
	RuleName *string `pulumi:"ruleName"`
	// Calculation of the complexity of a single firewall policy rule.
	RuleTupleCount *int `pulumi:"ruleTupleCount"`
	// A fully-qualified URL of a SecurityProfile resource instance.
	// Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
	// Must be specified if action = 'apply_security_profile_group' and cannot be specified for other actions.
	// Security Profile Group and Firewall Policy Rule must be in the same scope.
	SecurityProfileGroup *string `pulumi:"securityProfileGroup"`
	// A list of secure tags that controls which instances the firewall rule applies to.
	// If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
	// targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
	// Structure is documented below.
	TargetSecureTags []RegionNetworkFirewallPolicyRuleTargetSecureTag `pulumi:"targetSecureTags"`
	// A list of service accounts indicating the sets of instances that are applied with this rule.
	TargetServiceAccounts []string `pulumi:"targetServiceAccounts"`
	// Boolean flag indicating if the traffic should be TLS decrypted.
	// Can be set only if action = 'apply_security_profile_group' and cannot be set for other actions.
	TlsInspect *bool `pulumi:"tlsInspect"`
}

type RegionNetworkFirewallPolicyRuleState struct {
	// The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny", "gotoNext" and "applySecurityProfileGroup".
	Action pulumi.StringPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description for this resource.
	Description pulumi.StringPtrInput
	// The direction in which this rule applies.
	// Possible values are: `INGRESS`, `EGRESS`.
	Direction pulumi.StringPtrInput
	// Denotes whether the firewall policy rule is disabled.
	// When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
	// If this is unspecified, the firewall policy rule will be enabled.
	Disabled pulumi.BoolPtrInput
	// Denotes whether to enable logging for a particular rule.
	// If logging is enabled, logs will be exported to the configured export destination in Stackdriver.
	// Logs may be exported to BigQuery or Pub/Sub.
	// Note: you cannot enable logging on "gotoNext" rules.
	EnableLogging pulumi.BoolPtrInput
	// The firewall policy of the resource.
	FirewallPolicy pulumi.StringPtrInput
	// Type of the resource. Always `compute#firewallPolicyRule` for firewall policy rules
	Kind pulumi.StringPtrInput
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	// Structure is documented below.
	Match RegionNetworkFirewallPolicyRuleMatchPtrInput
	// An integer indicating the priority of a rule in the list.
	// The priority must be a positive value between 0 and 2147483647.
	// Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
	Priority pulumi.IntPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The location of this resource.
	Region pulumi.StringPtrInput
	// An optional name for the rule. This field is not a unique identifier and can be updated.
	RuleName pulumi.StringPtrInput
	// Calculation of the complexity of a single firewall policy rule.
	RuleTupleCount pulumi.IntPtrInput
	// A fully-qualified URL of a SecurityProfile resource instance.
	// Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
	// Must be specified if action = 'apply_security_profile_group' and cannot be specified for other actions.
	// Security Profile Group and Firewall Policy Rule must be in the same scope.
	SecurityProfileGroup pulumi.StringPtrInput
	// A list of secure tags that controls which instances the firewall rule applies to.
	// If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
	// targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
	// Structure is documented below.
	TargetSecureTags RegionNetworkFirewallPolicyRuleTargetSecureTagArrayInput
	// A list of service accounts indicating the sets of instances that are applied with this rule.
	TargetServiceAccounts pulumi.StringArrayInput
	// Boolean flag indicating if the traffic should be TLS decrypted.
	// Can be set only if action = 'apply_security_profile_group' and cannot be set for other actions.
	TlsInspect pulumi.BoolPtrInput
}

func (RegionNetworkFirewallPolicyRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionNetworkFirewallPolicyRuleState)(nil)).Elem()
}

type regionNetworkFirewallPolicyRuleArgs struct {
	// The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny", "gotoNext" and "applySecurityProfileGroup".
	Action string `pulumi:"action"`
	// An optional description for this resource.
	Description *string `pulumi:"description"`
	// The direction in which this rule applies.
	// Possible values are: `INGRESS`, `EGRESS`.
	Direction string `pulumi:"direction"`
	// Denotes whether the firewall policy rule is disabled.
	// When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
	// If this is unspecified, the firewall policy rule will be enabled.
	Disabled *bool `pulumi:"disabled"`
	// Denotes whether to enable logging for a particular rule.
	// If logging is enabled, logs will be exported to the configured export destination in Stackdriver.
	// Logs may be exported to BigQuery or Pub/Sub.
	// Note: you cannot enable logging on "gotoNext" rules.
	EnableLogging *bool `pulumi:"enableLogging"`
	// The firewall policy of the resource.
	FirewallPolicy string `pulumi:"firewallPolicy"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	// Structure is documented below.
	Match RegionNetworkFirewallPolicyRuleMatch `pulumi:"match"`
	// An integer indicating the priority of a rule in the list.
	// The priority must be a positive value between 0 and 2147483647.
	// Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
	Priority int `pulumi:"priority"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The location of this resource.
	Region *string `pulumi:"region"`
	// An optional name for the rule. This field is not a unique identifier and can be updated.
	RuleName *string `pulumi:"ruleName"`
	// A fully-qualified URL of a SecurityProfile resource instance.
	// Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
	// Must be specified if action = 'apply_security_profile_group' and cannot be specified for other actions.
	// Security Profile Group and Firewall Policy Rule must be in the same scope.
	SecurityProfileGroup *string `pulumi:"securityProfileGroup"`
	// A list of secure tags that controls which instances the firewall rule applies to.
	// If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
	// targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
	// Structure is documented below.
	TargetSecureTags []RegionNetworkFirewallPolicyRuleTargetSecureTag `pulumi:"targetSecureTags"`
	// A list of service accounts indicating the sets of instances that are applied with this rule.
	TargetServiceAccounts []string `pulumi:"targetServiceAccounts"`
	// Boolean flag indicating if the traffic should be TLS decrypted.
	// Can be set only if action = 'apply_security_profile_group' and cannot be set for other actions.
	TlsInspect *bool `pulumi:"tlsInspect"`
}

// The set of arguments for constructing a RegionNetworkFirewallPolicyRule resource.
type RegionNetworkFirewallPolicyRuleArgs struct {
	// The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny", "gotoNext" and "applySecurityProfileGroup".
	Action pulumi.StringInput
	// An optional description for this resource.
	Description pulumi.StringPtrInput
	// The direction in which this rule applies.
	// Possible values are: `INGRESS`, `EGRESS`.
	Direction pulumi.StringInput
	// Denotes whether the firewall policy rule is disabled.
	// When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
	// If this is unspecified, the firewall policy rule will be enabled.
	Disabled pulumi.BoolPtrInput
	// Denotes whether to enable logging for a particular rule.
	// If logging is enabled, logs will be exported to the configured export destination in Stackdriver.
	// Logs may be exported to BigQuery or Pub/Sub.
	// Note: you cannot enable logging on "gotoNext" rules.
	EnableLogging pulumi.BoolPtrInput
	// The firewall policy of the resource.
	FirewallPolicy pulumi.StringInput
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	// Structure is documented below.
	Match RegionNetworkFirewallPolicyRuleMatchInput
	// An integer indicating the priority of a rule in the list.
	// The priority must be a positive value between 0 and 2147483647.
	// Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
	Priority pulumi.IntInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The location of this resource.
	Region pulumi.StringPtrInput
	// An optional name for the rule. This field is not a unique identifier and can be updated.
	RuleName pulumi.StringPtrInput
	// A fully-qualified URL of a SecurityProfile resource instance.
	// Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
	// Must be specified if action = 'apply_security_profile_group' and cannot be specified for other actions.
	// Security Profile Group and Firewall Policy Rule must be in the same scope.
	SecurityProfileGroup pulumi.StringPtrInput
	// A list of secure tags that controls which instances the firewall rule applies to.
	// If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
	// targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
	// Structure is documented below.
	TargetSecureTags RegionNetworkFirewallPolicyRuleTargetSecureTagArrayInput
	// A list of service accounts indicating the sets of instances that are applied with this rule.
	TargetServiceAccounts pulumi.StringArrayInput
	// Boolean flag indicating if the traffic should be TLS decrypted.
	// Can be set only if action = 'apply_security_profile_group' and cannot be set for other actions.
	TlsInspect pulumi.BoolPtrInput
}

func (RegionNetworkFirewallPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionNetworkFirewallPolicyRuleArgs)(nil)).Elem()
}

type RegionNetworkFirewallPolicyRuleInput interface {
	pulumi.Input

	ToRegionNetworkFirewallPolicyRuleOutput() RegionNetworkFirewallPolicyRuleOutput
	ToRegionNetworkFirewallPolicyRuleOutputWithContext(ctx context.Context) RegionNetworkFirewallPolicyRuleOutput
}

func (*RegionNetworkFirewallPolicyRule) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionNetworkFirewallPolicyRule)(nil)).Elem()
}

func (i *RegionNetworkFirewallPolicyRule) ToRegionNetworkFirewallPolicyRuleOutput() RegionNetworkFirewallPolicyRuleOutput {
	return i.ToRegionNetworkFirewallPolicyRuleOutputWithContext(context.Background())
}

func (i *RegionNetworkFirewallPolicyRule) ToRegionNetworkFirewallPolicyRuleOutputWithContext(ctx context.Context) RegionNetworkFirewallPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionNetworkFirewallPolicyRuleOutput)
}

// RegionNetworkFirewallPolicyRuleArrayInput is an input type that accepts RegionNetworkFirewallPolicyRuleArray and RegionNetworkFirewallPolicyRuleArrayOutput values.
// You can construct a concrete instance of `RegionNetworkFirewallPolicyRuleArrayInput` via:
//
//	RegionNetworkFirewallPolicyRuleArray{ RegionNetworkFirewallPolicyRuleArgs{...} }
type RegionNetworkFirewallPolicyRuleArrayInput interface {
	pulumi.Input

	ToRegionNetworkFirewallPolicyRuleArrayOutput() RegionNetworkFirewallPolicyRuleArrayOutput
	ToRegionNetworkFirewallPolicyRuleArrayOutputWithContext(context.Context) RegionNetworkFirewallPolicyRuleArrayOutput
}

type RegionNetworkFirewallPolicyRuleArray []RegionNetworkFirewallPolicyRuleInput

func (RegionNetworkFirewallPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionNetworkFirewallPolicyRule)(nil)).Elem()
}

func (i RegionNetworkFirewallPolicyRuleArray) ToRegionNetworkFirewallPolicyRuleArrayOutput() RegionNetworkFirewallPolicyRuleArrayOutput {
	return i.ToRegionNetworkFirewallPolicyRuleArrayOutputWithContext(context.Background())
}

func (i RegionNetworkFirewallPolicyRuleArray) ToRegionNetworkFirewallPolicyRuleArrayOutputWithContext(ctx context.Context) RegionNetworkFirewallPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionNetworkFirewallPolicyRuleArrayOutput)
}

// RegionNetworkFirewallPolicyRuleMapInput is an input type that accepts RegionNetworkFirewallPolicyRuleMap and RegionNetworkFirewallPolicyRuleMapOutput values.
// You can construct a concrete instance of `RegionNetworkFirewallPolicyRuleMapInput` via:
//
//	RegionNetworkFirewallPolicyRuleMap{ "key": RegionNetworkFirewallPolicyRuleArgs{...} }
type RegionNetworkFirewallPolicyRuleMapInput interface {
	pulumi.Input

	ToRegionNetworkFirewallPolicyRuleMapOutput() RegionNetworkFirewallPolicyRuleMapOutput
	ToRegionNetworkFirewallPolicyRuleMapOutputWithContext(context.Context) RegionNetworkFirewallPolicyRuleMapOutput
}

type RegionNetworkFirewallPolicyRuleMap map[string]RegionNetworkFirewallPolicyRuleInput

func (RegionNetworkFirewallPolicyRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionNetworkFirewallPolicyRule)(nil)).Elem()
}

func (i RegionNetworkFirewallPolicyRuleMap) ToRegionNetworkFirewallPolicyRuleMapOutput() RegionNetworkFirewallPolicyRuleMapOutput {
	return i.ToRegionNetworkFirewallPolicyRuleMapOutputWithContext(context.Background())
}

func (i RegionNetworkFirewallPolicyRuleMap) ToRegionNetworkFirewallPolicyRuleMapOutputWithContext(ctx context.Context) RegionNetworkFirewallPolicyRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionNetworkFirewallPolicyRuleMapOutput)
}

type RegionNetworkFirewallPolicyRuleOutput struct{ *pulumi.OutputState }

func (RegionNetworkFirewallPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionNetworkFirewallPolicyRule)(nil)).Elem()
}

func (o RegionNetworkFirewallPolicyRuleOutput) ToRegionNetworkFirewallPolicyRuleOutput() RegionNetworkFirewallPolicyRuleOutput {
	return o
}

func (o RegionNetworkFirewallPolicyRuleOutput) ToRegionNetworkFirewallPolicyRuleOutputWithContext(ctx context.Context) RegionNetworkFirewallPolicyRuleOutput {
	return o
}

// The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny", "gotoNext" and "applySecurityProfileGroup".
func (o RegionNetworkFirewallPolicyRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Creation timestamp in RFC3339 text format.
func (o RegionNetworkFirewallPolicyRuleOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description for this resource.
func (o RegionNetworkFirewallPolicyRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The direction in which this rule applies.
// Possible values are: `INGRESS`, `EGRESS`.
func (o RegionNetworkFirewallPolicyRuleOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

// Denotes whether the firewall policy rule is disabled.
// When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist.
// If this is unspecified, the firewall policy rule will be enabled.
func (o RegionNetworkFirewallPolicyRuleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Denotes whether to enable logging for a particular rule.
// If logging is enabled, logs will be exported to the configured export destination in Stackdriver.
// Logs may be exported to BigQuery or Pub/Sub.
// Note: you cannot enable logging on "gotoNext" rules.
func (o RegionNetworkFirewallPolicyRuleOutput) EnableLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) pulumi.BoolPtrOutput { return v.EnableLogging }).(pulumi.BoolPtrOutput)
}

// The firewall policy of the resource.
func (o RegionNetworkFirewallPolicyRuleOutput) FirewallPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) pulumi.StringOutput { return v.FirewallPolicy }).(pulumi.StringOutput)
}

// Type of the resource. Always `compute#firewallPolicyRule` for firewall policy rules
func (o RegionNetworkFirewallPolicyRuleOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
// Structure is documented below.
func (o RegionNetworkFirewallPolicyRuleOutput) Match() RegionNetworkFirewallPolicyRuleMatchOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) RegionNetworkFirewallPolicyRuleMatchOutput { return v.Match }).(RegionNetworkFirewallPolicyRuleMatchOutput)
}

// An integer indicating the priority of a rule in the list.
// The priority must be a positive value between 0 and 2147483647.
// Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
func (o RegionNetworkFirewallPolicyRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RegionNetworkFirewallPolicyRuleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The location of this resource.
func (o RegionNetworkFirewallPolicyRuleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// An optional name for the rule. This field is not a unique identifier and can be updated.
func (o RegionNetworkFirewallPolicyRuleOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) pulumi.StringPtrOutput { return v.RuleName }).(pulumi.StringPtrOutput)
}

// Calculation of the complexity of a single firewall policy rule.
func (o RegionNetworkFirewallPolicyRuleOutput) RuleTupleCount() pulumi.IntOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) pulumi.IntOutput { return v.RuleTupleCount }).(pulumi.IntOutput)
}

// A fully-qualified URL of a SecurityProfile resource instance.
// Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
// Must be specified if action = 'apply_security_profile_group' and cannot be specified for other actions.
// Security Profile Group and Firewall Policy Rule must be in the same scope.
func (o RegionNetworkFirewallPolicyRuleOutput) SecurityProfileGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) pulumi.StringPtrOutput { return v.SecurityProfileGroup }).(pulumi.StringPtrOutput)
}

// A list of secure tags that controls which instances the firewall rule applies to.
// If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored.
// targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
// Structure is documented below.
func (o RegionNetworkFirewallPolicyRuleOutput) TargetSecureTags() RegionNetworkFirewallPolicyRuleTargetSecureTagArrayOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) RegionNetworkFirewallPolicyRuleTargetSecureTagArrayOutput {
		return v.TargetSecureTags
	}).(RegionNetworkFirewallPolicyRuleTargetSecureTagArrayOutput)
}

// A list of service accounts indicating the sets of instances that are applied with this rule.
func (o RegionNetworkFirewallPolicyRuleOutput) TargetServiceAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) pulumi.StringArrayOutput { return v.TargetServiceAccounts }).(pulumi.StringArrayOutput)
}

// Boolean flag indicating if the traffic should be TLS decrypted.
// Can be set only if action = 'apply_security_profile_group' and cannot be set for other actions.
func (o RegionNetworkFirewallPolicyRuleOutput) TlsInspect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionNetworkFirewallPolicyRule) pulumi.BoolPtrOutput { return v.TlsInspect }).(pulumi.BoolPtrOutput)
}

type RegionNetworkFirewallPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (RegionNetworkFirewallPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionNetworkFirewallPolicyRule)(nil)).Elem()
}

func (o RegionNetworkFirewallPolicyRuleArrayOutput) ToRegionNetworkFirewallPolicyRuleArrayOutput() RegionNetworkFirewallPolicyRuleArrayOutput {
	return o
}

func (o RegionNetworkFirewallPolicyRuleArrayOutput) ToRegionNetworkFirewallPolicyRuleArrayOutputWithContext(ctx context.Context) RegionNetworkFirewallPolicyRuleArrayOutput {
	return o
}

func (o RegionNetworkFirewallPolicyRuleArrayOutput) Index(i pulumi.IntInput) RegionNetworkFirewallPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionNetworkFirewallPolicyRule {
		return vs[0].([]*RegionNetworkFirewallPolicyRule)[vs[1].(int)]
	}).(RegionNetworkFirewallPolicyRuleOutput)
}

type RegionNetworkFirewallPolicyRuleMapOutput struct{ *pulumi.OutputState }

func (RegionNetworkFirewallPolicyRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionNetworkFirewallPolicyRule)(nil)).Elem()
}

func (o RegionNetworkFirewallPolicyRuleMapOutput) ToRegionNetworkFirewallPolicyRuleMapOutput() RegionNetworkFirewallPolicyRuleMapOutput {
	return o
}

func (o RegionNetworkFirewallPolicyRuleMapOutput) ToRegionNetworkFirewallPolicyRuleMapOutputWithContext(ctx context.Context) RegionNetworkFirewallPolicyRuleMapOutput {
	return o
}

func (o RegionNetworkFirewallPolicyRuleMapOutput) MapIndex(k pulumi.StringInput) RegionNetworkFirewallPolicyRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionNetworkFirewallPolicyRule {
		return vs[0].(map[string]*RegionNetworkFirewallPolicyRule)[vs[1].(string)]
	}).(RegionNetworkFirewallPolicyRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionNetworkFirewallPolicyRuleInput)(nil)).Elem(), &RegionNetworkFirewallPolicyRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionNetworkFirewallPolicyRuleArrayInput)(nil)).Elem(), RegionNetworkFirewallPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionNetworkFirewallPolicyRuleMapInput)(nil)).Elem(), RegionNetworkFirewallPolicyRuleMap{})
	pulumi.RegisterOutputType(RegionNetworkFirewallPolicyRuleOutput{})
	pulumi.RegisterOutputType(RegionNetworkFirewallPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(RegionNetworkFirewallPolicyRuleMapOutput{})
}
