// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Updates your project's snapshot settings and sets a new default storage location for snapshots.
//
// To get more information about SnapshotSettings, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/snapshotSettings)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/compute/docs/disks/snapshot-settings#snapshot_settings_how_to_update)
//
// ## Example Usage
//
// ### Snapshot Settings Specific Locations
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewSnapshotSettings(ctx, "tf-test-snapshot-settings", &compute.SnapshotSettingsArgs{
//				StorageLocation: &compute.SnapshotSettingsStorageLocationArgs{
//					Policy: pulumi.String("SPECIFIC_LOCATIONS"),
//					Locations: compute.SnapshotSettingsStorageLocationLocationArray{
//						&compute.SnapshotSettingsStorageLocationLocationArgs{
//							Name:     pulumi.String("us-central1"),
//							Location: pulumi.String("us-central1"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SnapshotSettings can be imported using any of these accepted formats:
//
// * `projects/{{project}}/global/snapshotSettings/`
//
// * `{{project}}`
//
// When using the `pulumi import` command, SnapshotSettings can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:compute/snapshotSettings:SnapshotSettings default projects/{{project}}/global/snapshotSettings/
// ```
//
// ```sh
// $ pulumi import gcp:compute/snapshotSettings:SnapshotSettings default {{project}}
// ```
type SnapshotSettings struct {
	pulumi.CustomResourceState

	Project pulumi.StringOutput `pulumi:"project"`
	// Policy of which storage location is going to be resolved, and additional data
	// that particularizes how the policy is going to be carried out
	// Structure is documented below.
	StorageLocation SnapshotSettingsStorageLocationOutput `pulumi:"storageLocation"`
}

// NewSnapshotSettings registers a new resource with the given unique name, arguments, and options.
func NewSnapshotSettings(ctx *pulumi.Context,
	name string, args *SnapshotSettingsArgs, opts ...pulumi.ResourceOption) (*SnapshotSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StorageLocation == nil {
		return nil, errors.New("invalid value for required argument 'StorageLocation'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnapshotSettings
	err := ctx.RegisterResource("gcp:compute/snapshotSettings:SnapshotSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotSettings gets an existing SnapshotSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotSettingsState, opts ...pulumi.ResourceOption) (*SnapshotSettings, error) {
	var resource SnapshotSettings
	err := ctx.ReadResource("gcp:compute/snapshotSettings:SnapshotSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotSettings resources.
type snapshotSettingsState struct {
	Project *string `pulumi:"project"`
	// Policy of which storage location is going to be resolved, and additional data
	// that particularizes how the policy is going to be carried out
	// Structure is documented below.
	StorageLocation *SnapshotSettingsStorageLocation `pulumi:"storageLocation"`
}

type SnapshotSettingsState struct {
	Project pulumi.StringPtrInput
	// Policy of which storage location is going to be resolved, and additional data
	// that particularizes how the policy is going to be carried out
	// Structure is documented below.
	StorageLocation SnapshotSettingsStorageLocationPtrInput
}

func (SnapshotSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotSettingsState)(nil)).Elem()
}

type snapshotSettingsArgs struct {
	Project *string `pulumi:"project"`
	// Policy of which storage location is going to be resolved, and additional data
	// that particularizes how the policy is going to be carried out
	// Structure is documented below.
	StorageLocation SnapshotSettingsStorageLocation `pulumi:"storageLocation"`
}

// The set of arguments for constructing a SnapshotSettings resource.
type SnapshotSettingsArgs struct {
	Project pulumi.StringPtrInput
	// Policy of which storage location is going to be resolved, and additional data
	// that particularizes how the policy is going to be carried out
	// Structure is documented below.
	StorageLocation SnapshotSettingsStorageLocationInput
}

func (SnapshotSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotSettingsArgs)(nil)).Elem()
}

type SnapshotSettingsInput interface {
	pulumi.Input

	ToSnapshotSettingsOutput() SnapshotSettingsOutput
	ToSnapshotSettingsOutputWithContext(ctx context.Context) SnapshotSettingsOutput
}

func (*SnapshotSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSettings)(nil)).Elem()
}

func (i *SnapshotSettings) ToSnapshotSettingsOutput() SnapshotSettingsOutput {
	return i.ToSnapshotSettingsOutputWithContext(context.Background())
}

func (i *SnapshotSettings) ToSnapshotSettingsOutputWithContext(ctx context.Context) SnapshotSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSettingsOutput)
}

// SnapshotSettingsArrayInput is an input type that accepts SnapshotSettingsArray and SnapshotSettingsArrayOutput values.
// You can construct a concrete instance of `SnapshotSettingsArrayInput` via:
//
//	SnapshotSettingsArray{ SnapshotSettingsArgs{...} }
type SnapshotSettingsArrayInput interface {
	pulumi.Input

	ToSnapshotSettingsArrayOutput() SnapshotSettingsArrayOutput
	ToSnapshotSettingsArrayOutputWithContext(context.Context) SnapshotSettingsArrayOutput
}

type SnapshotSettingsArray []SnapshotSettingsInput

func (SnapshotSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotSettings)(nil)).Elem()
}

func (i SnapshotSettingsArray) ToSnapshotSettingsArrayOutput() SnapshotSettingsArrayOutput {
	return i.ToSnapshotSettingsArrayOutputWithContext(context.Background())
}

func (i SnapshotSettingsArray) ToSnapshotSettingsArrayOutputWithContext(ctx context.Context) SnapshotSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSettingsArrayOutput)
}

// SnapshotSettingsMapInput is an input type that accepts SnapshotSettingsMap and SnapshotSettingsMapOutput values.
// You can construct a concrete instance of `SnapshotSettingsMapInput` via:
//
//	SnapshotSettingsMap{ "key": SnapshotSettingsArgs{...} }
type SnapshotSettingsMapInput interface {
	pulumi.Input

	ToSnapshotSettingsMapOutput() SnapshotSettingsMapOutput
	ToSnapshotSettingsMapOutputWithContext(context.Context) SnapshotSettingsMapOutput
}

type SnapshotSettingsMap map[string]SnapshotSettingsInput

func (SnapshotSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotSettings)(nil)).Elem()
}

func (i SnapshotSettingsMap) ToSnapshotSettingsMapOutput() SnapshotSettingsMapOutput {
	return i.ToSnapshotSettingsMapOutputWithContext(context.Background())
}

func (i SnapshotSettingsMap) ToSnapshotSettingsMapOutputWithContext(ctx context.Context) SnapshotSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSettingsMapOutput)
}

type SnapshotSettingsOutput struct{ *pulumi.OutputState }

func (SnapshotSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSettings)(nil)).Elem()
}

func (o SnapshotSettingsOutput) ToSnapshotSettingsOutput() SnapshotSettingsOutput {
	return o
}

func (o SnapshotSettingsOutput) ToSnapshotSettingsOutputWithContext(ctx context.Context) SnapshotSettingsOutput {
	return o
}

func (o SnapshotSettingsOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotSettings) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Policy of which storage location is going to be resolved, and additional data
// that particularizes how the policy is going to be carried out
// Structure is documented below.
func (o SnapshotSettingsOutput) StorageLocation() SnapshotSettingsStorageLocationOutput {
	return o.ApplyT(func(v *SnapshotSettings) SnapshotSettingsStorageLocationOutput { return v.StorageLocation }).(SnapshotSettingsStorageLocationOutput)
}

type SnapshotSettingsArrayOutput struct{ *pulumi.OutputState }

func (SnapshotSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotSettings)(nil)).Elem()
}

func (o SnapshotSettingsArrayOutput) ToSnapshotSettingsArrayOutput() SnapshotSettingsArrayOutput {
	return o
}

func (o SnapshotSettingsArrayOutput) ToSnapshotSettingsArrayOutputWithContext(ctx context.Context) SnapshotSettingsArrayOutput {
	return o
}

func (o SnapshotSettingsArrayOutput) Index(i pulumi.IntInput) SnapshotSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnapshotSettings {
		return vs[0].([]*SnapshotSettings)[vs[1].(int)]
	}).(SnapshotSettingsOutput)
}

type SnapshotSettingsMapOutput struct{ *pulumi.OutputState }

func (SnapshotSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotSettings)(nil)).Elem()
}

func (o SnapshotSettingsMapOutput) ToSnapshotSettingsMapOutput() SnapshotSettingsMapOutput {
	return o
}

func (o SnapshotSettingsMapOutput) ToSnapshotSettingsMapOutputWithContext(ctx context.Context) SnapshotSettingsMapOutput {
	return o
}

func (o SnapshotSettingsMapOutput) MapIndex(k pulumi.StringInput) SnapshotSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnapshotSettings {
		return vs[0].(map[string]*SnapshotSettings)[vs[1].(string)]
	}).(SnapshotSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotSettingsInput)(nil)).Elem(), &SnapshotSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotSettingsArrayInput)(nil)).Elem(), SnapshotSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotSettingsMapInput)(nil)).Elem(), SnapshotSettingsMap{})
	pulumi.RegisterOutputType(SnapshotSettingsOutput{})
	pulumi.RegisterOutputType(SnapshotSettingsArrayOutput{})
	pulumi.RegisterOutputType(SnapshotSettingsMapOutput{})
}
