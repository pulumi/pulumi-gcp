// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/global/images/{{name}} * {{project}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Compute Engine image IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//  $ pulumi import gcp:compute/imageIamPolicy:ImageIamPolicy editor "projects/{{project}}/global/images/{{image}} roles/compute.imageUser user:jane@example.com"
// ```
//
//  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//  $ pulumi import gcp:compute/imageIamPolicy:ImageIamPolicy editor "projects/{{project}}/global/images/{{image}} roles/compute.imageUser"
// ```
//
//  IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//  $ pulumi import gcp:compute/imageIamPolicy:ImageIamPolicy editor projects/{{project}}/global/images/{{image}}
// ```
//
//  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ImageIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Image pulumi.StringOutput `pulumi:"image"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewImageIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewImageIamPolicy(ctx *pulumi.Context,
	name string, args *ImageIamPolicyArgs, opts ...pulumi.ResourceOption) (*ImageIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Image == nil {
		return nil, errors.New("invalid value for required argument 'Image'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	var resource ImageIamPolicy
	err := ctx.RegisterResource("gcp:compute/imageIamPolicy:ImageIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageIamPolicy gets an existing ImageIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageIamPolicyState, opts ...pulumi.ResourceOption) (*ImageIamPolicy, error) {
	var resource ImageIamPolicy
	err := ctx.ReadResource("gcp:compute/imageIamPolicy:ImageIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageIamPolicy resources.
type imageIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Used to find the parent resource to bind the IAM policy to
	Image *string `pulumi:"image"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

type ImageIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Image pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ImageIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageIamPolicyState)(nil)).Elem()
}

type imageIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Image string `pulumi:"image"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a ImageIamPolicy resource.
type ImageIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	Image pulumi.StringInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ImageIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageIamPolicyArgs)(nil)).Elem()
}

type ImageIamPolicyInput interface {
	pulumi.Input

	ToImageIamPolicyOutput() ImageIamPolicyOutput
	ToImageIamPolicyOutputWithContext(ctx context.Context) ImageIamPolicyOutput
}

func (*ImageIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageIamPolicy)(nil))
}

func (i *ImageIamPolicy) ToImageIamPolicyOutput() ImageIamPolicyOutput {
	return i.ToImageIamPolicyOutputWithContext(context.Background())
}

func (i *ImageIamPolicy) ToImageIamPolicyOutputWithContext(ctx context.Context) ImageIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageIamPolicyOutput)
}

func (i *ImageIamPolicy) ToImageIamPolicyPtrOutput() ImageIamPolicyPtrOutput {
	return i.ToImageIamPolicyPtrOutputWithContext(context.Background())
}

func (i *ImageIamPolicy) ToImageIamPolicyPtrOutputWithContext(ctx context.Context) ImageIamPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageIamPolicyPtrOutput)
}

type ImageIamPolicyPtrInput interface {
	pulumi.Input

	ToImageIamPolicyPtrOutput() ImageIamPolicyPtrOutput
	ToImageIamPolicyPtrOutputWithContext(ctx context.Context) ImageIamPolicyPtrOutput
}

type imageIamPolicyPtrType ImageIamPolicyArgs

func (*imageIamPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageIamPolicy)(nil))
}

func (i *imageIamPolicyPtrType) ToImageIamPolicyPtrOutput() ImageIamPolicyPtrOutput {
	return i.ToImageIamPolicyPtrOutputWithContext(context.Background())
}

func (i *imageIamPolicyPtrType) ToImageIamPolicyPtrOutputWithContext(ctx context.Context) ImageIamPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageIamPolicyPtrOutput)
}

// ImageIamPolicyArrayInput is an input type that accepts ImageIamPolicyArray and ImageIamPolicyArrayOutput values.
// You can construct a concrete instance of `ImageIamPolicyArrayInput` via:
//
//          ImageIamPolicyArray{ ImageIamPolicyArgs{...} }
type ImageIamPolicyArrayInput interface {
	pulumi.Input

	ToImageIamPolicyArrayOutput() ImageIamPolicyArrayOutput
	ToImageIamPolicyArrayOutputWithContext(context.Context) ImageIamPolicyArrayOutput
}

type ImageIamPolicyArray []ImageIamPolicyInput

func (ImageIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ImageIamPolicy)(nil))
}

func (i ImageIamPolicyArray) ToImageIamPolicyArrayOutput() ImageIamPolicyArrayOutput {
	return i.ToImageIamPolicyArrayOutputWithContext(context.Background())
}

func (i ImageIamPolicyArray) ToImageIamPolicyArrayOutputWithContext(ctx context.Context) ImageIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageIamPolicyArrayOutput)
}

// ImageIamPolicyMapInput is an input type that accepts ImageIamPolicyMap and ImageIamPolicyMapOutput values.
// You can construct a concrete instance of `ImageIamPolicyMapInput` via:
//
//          ImageIamPolicyMap{ "key": ImageIamPolicyArgs{...} }
type ImageIamPolicyMapInput interface {
	pulumi.Input

	ToImageIamPolicyMapOutput() ImageIamPolicyMapOutput
	ToImageIamPolicyMapOutputWithContext(context.Context) ImageIamPolicyMapOutput
}

type ImageIamPolicyMap map[string]ImageIamPolicyInput

func (ImageIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ImageIamPolicy)(nil))
}

func (i ImageIamPolicyMap) ToImageIamPolicyMapOutput() ImageIamPolicyMapOutput {
	return i.ToImageIamPolicyMapOutputWithContext(context.Background())
}

func (i ImageIamPolicyMap) ToImageIamPolicyMapOutputWithContext(ctx context.Context) ImageIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageIamPolicyMapOutput)
}

type ImageIamPolicyOutput struct {
	*pulumi.OutputState
}

func (ImageIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageIamPolicy)(nil))
}

func (o ImageIamPolicyOutput) ToImageIamPolicyOutput() ImageIamPolicyOutput {
	return o
}

func (o ImageIamPolicyOutput) ToImageIamPolicyOutputWithContext(ctx context.Context) ImageIamPolicyOutput {
	return o
}

func (o ImageIamPolicyOutput) ToImageIamPolicyPtrOutput() ImageIamPolicyPtrOutput {
	return o.ToImageIamPolicyPtrOutputWithContext(context.Background())
}

func (o ImageIamPolicyOutput) ToImageIamPolicyPtrOutputWithContext(ctx context.Context) ImageIamPolicyPtrOutput {
	return o.ApplyT(func(v ImageIamPolicy) *ImageIamPolicy {
		return &v
	}).(ImageIamPolicyPtrOutput)
}

type ImageIamPolicyPtrOutput struct {
	*pulumi.OutputState
}

func (ImageIamPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageIamPolicy)(nil))
}

func (o ImageIamPolicyPtrOutput) ToImageIamPolicyPtrOutput() ImageIamPolicyPtrOutput {
	return o
}

func (o ImageIamPolicyPtrOutput) ToImageIamPolicyPtrOutputWithContext(ctx context.Context) ImageIamPolicyPtrOutput {
	return o
}

type ImageIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (ImageIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageIamPolicy)(nil))
}

func (o ImageIamPolicyArrayOutput) ToImageIamPolicyArrayOutput() ImageIamPolicyArrayOutput {
	return o
}

func (o ImageIamPolicyArrayOutput) ToImageIamPolicyArrayOutputWithContext(ctx context.Context) ImageIamPolicyArrayOutput {
	return o
}

func (o ImageIamPolicyArrayOutput) Index(i pulumi.IntInput) ImageIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageIamPolicy {
		return vs[0].([]ImageIamPolicy)[vs[1].(int)]
	}).(ImageIamPolicyOutput)
}

type ImageIamPolicyMapOutput struct{ *pulumi.OutputState }

func (ImageIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ImageIamPolicy)(nil))
}

func (o ImageIamPolicyMapOutput) ToImageIamPolicyMapOutput() ImageIamPolicyMapOutput {
	return o
}

func (o ImageIamPolicyMapOutput) ToImageIamPolicyMapOutputWithContext(ctx context.Context) ImageIamPolicyMapOutput {
	return o
}

func (o ImageIamPolicyMapOutput) MapIndex(k pulumi.StringInput) ImageIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ImageIamPolicy {
		return vs[0].(map[string]ImageIamPolicy)[vs[1].(string)]
	}).(ImageIamPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(ImageIamPolicyOutput{})
	pulumi.RegisterOutputType(ImageIamPolicyPtrOutput{})
	pulumi.RegisterOutputType(ImageIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(ImageIamPolicyMapOutput{})
}
