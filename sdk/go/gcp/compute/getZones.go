// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides access to available Google Compute zones in a region for a given project.
// See more about [regions and zones](https://cloud.google.com/compute/docs/regions-zones/regions-zones) in the upstream docs.
// 
// ```
// data "google_compute_zones" "available" {}
// 
// resource "google_compute_instance_group_manager" "foo" {
//   count = "${length(data.google_compute_zones.available.names)}"
// 
//   name               = "terraform-test-${count.index}"
//   instance_template  = "${google_compute_instance_template.foobar.self_link}"
//   base_instance_name = "foobar-${count.index}"
//   zone               = "${data.google_compute_zones.available.names[count.index]}"
//   target_size        = 1
// }
// ```
func LookupZones(ctx *pulumi.Context, args *GetZonesArgs) (*GetZonesResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["project"] = args.Project
		inputs["region"] = args.Region
		inputs["status"] = args.Status
	}
	outputs, err := ctx.Invoke("gcp:compute/getZones:getZones", inputs)
	if err != nil {
		return nil, err
	}
	return &GetZonesResult{
		Names: outputs["names"],
	}
		Project: outputs["project"],
	}
	}, nil
}

// A collection of arguments for invoking getZones.
type GetZonesArgs struct {
	// Project from which to list available zones. Defaults to project declared in the provider.
	Project interface{}
	// Region from which to list available zones. Defaults to region declared in the provider.
	Region interface{}
	// Allows to filter list of zones based on their current status. Status can be either `UP` or `DOWN`.
	// Defaults to no filtering (all available zones - both `UP` and `DOWN`).
	Status interface{}
}

// A collection of values returned by getZones.
type GetZonesResult struct {
	// A list of zones available in the given region
	Names interface{}
	Project interface{}
}
