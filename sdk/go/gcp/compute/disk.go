// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a new persistent disk within GCE, based on another disk. For more information see
// [the official documentation](https://cloud.google.com/compute/docs/disks/add-persistent-disk)
// and
// [API](https://cloud.google.com/compute/docs/reference/latest/disks).
// 
// ~> **Note:** All arguments including the disk encryption key will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](/docs/state/sensitive-data.html).
type Disk struct {
	s *pulumi.ResourceState
}

// NewDisk registers a new resource with the given unique name, arguments, and options.
func NewDisk(ctx *pulumi.Context,
	name string, args *DiskArgs, opts ...pulumi.ResourceOpt) (*Disk, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["diskEncryptionKeyRaw"] = nil
		inputs["image"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["size"] = nil
		inputs["snapshot"] = nil
		inputs["type"] = nil
		inputs["zone"] = nil
	} else {
		inputs["diskEncryptionKeyRaw"] = args.DiskEncryptionKeyRaw
		inputs["image"] = args.Image
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["size"] = args.Size
		inputs["snapshot"] = args.Snapshot
		inputs["type"] = args.Type
		inputs["zone"] = args.Zone
	}
	inputs["diskEncryptionKeySha256"] = nil
	inputs["labelFingerprint"] = nil
	inputs["selfLink"] = nil
	inputs["users"] = nil
	s, err := ctx.RegisterResource("gcp:compute/disk:Disk", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Disk{s: s}, nil
}

// GetDisk gets an existing Disk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDisk(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DiskState, opts ...pulumi.ResourceOpt) (*Disk, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["diskEncryptionKeyRaw"] = state.DiskEncryptionKeyRaw
		inputs["diskEncryptionKeySha256"] = state.DiskEncryptionKeySha256
		inputs["image"] = state.Image
		inputs["labelFingerprint"] = state.LabelFingerprint
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
		inputs["size"] = state.Size
		inputs["snapshot"] = state.Snapshot
		inputs["type"] = state.Type
		inputs["users"] = state.Users
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("gcp:compute/disk:Disk", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Disk{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Disk) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Disk) ID() *pulumi.IDOutput {
	return r.s.ID
}

// A 256-bit [customer-supplied encryption key]
// (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
// encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
// to encrypt this disk.
func (r *Disk) DiskEncryptionKeyRaw() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["diskEncryptionKeyRaw"])
}

// The [RFC 4648 base64]
// (https://tools.ietf.org/html/rfc4648#section-4) encoded SHA-256 hash of the
// [customer-supplied encryption key](https://cloud.google.com/compute/docs/disks/customer-supplied-encryption)
// that protects this resource.
func (r *Disk) DiskEncryptionKeySha256() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["diskEncryptionKeySha256"])
}

// The image from which to initialize this disk. This can be
// one of: the image's `self_link`, `projects/{project}/global/images/{image}`,
// `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
// `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
// `{project}/{image}`, `{family}`, or `{image}`. If referred by family, the
// images names must include the family name. If they don't, use the
// [google_compute_image data source](/docs/providers/google/d/datasource_compute_image.html).
// For instance, the image `centos-6-v20180104` includes its family name `centos-6`.
// These images can be referred by family name here.
func (r *Disk) Image() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["image"])
}

// The fingerprint of the assigned labels.
func (r *Disk) LabelFingerprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["labelFingerprint"])
}

// A set of key/value label pairs to assign to the image.
func (r *Disk) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

// A unique name for the resource, required by GCE.
// Changing this forces a new resource to be created.
func (r *Disk) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (r *Disk) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The URI of the created resource.
func (r *Disk) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// The size of the image in gigabytes. If not specified, it
// will inherit the size of its base image.
func (r *Disk) Size() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["size"])
}

// Name of snapshot from which to initialize this disk.
func (r *Disk) Snapshot() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["snapshot"])
}

// The GCE disk type.
func (r *Disk) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// The Users of the created resource.
func (r *Disk) Users() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["users"])
}

// The zone where this disk will be available.
func (r *Disk) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering Disk resources.
type DiskState struct {
	// A 256-bit [customer-supplied encryption key]
	// (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
	// encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
	// to encrypt this disk.
	DiskEncryptionKeyRaw interface{}
	// The [RFC 4648 base64]
	// (https://tools.ietf.org/html/rfc4648#section-4) encoded SHA-256 hash of the
	// [customer-supplied encryption key](https://cloud.google.com/compute/docs/disks/customer-supplied-encryption)
	// that protects this resource.
	DiskEncryptionKeySha256 interface{}
	// The image from which to initialize this disk. This can be
	// one of: the image's `self_link`, `projects/{project}/global/images/{image}`,
	// `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
	// `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
	// `{project}/{image}`, `{family}`, or `{image}`. If referred by family, the
	// images names must include the family name. If they don't, use the
	// [google_compute_image data source](/docs/providers/google/d/datasource_compute_image.html).
	// For instance, the image `centos-6-v20180104` includes its family name `centos-6`.
	// These images can be referred by family name here.
	Image interface{}
	// The fingerprint of the assigned labels.
	LabelFingerprint interface{}
	// A set of key/value label pairs to assign to the image.
	Labels interface{}
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// The URI of the created resource.
	SelfLink interface{}
	// The size of the image in gigabytes. If not specified, it
	// will inherit the size of its base image.
	Size interface{}
	// Name of snapshot from which to initialize this disk.
	Snapshot interface{}
	// The GCE disk type.
	Type interface{}
	// The Users of the created resource.
	Users interface{}
	// The zone where this disk will be available.
	Zone interface{}
}

// The set of arguments for constructing a Disk resource.
type DiskArgs struct {
	// A 256-bit [customer-supplied encryption key]
	// (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
	// encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
	// to encrypt this disk.
	DiskEncryptionKeyRaw interface{}
	// The image from which to initialize this disk. This can be
	// one of: the image's `self_link`, `projects/{project}/global/images/{image}`,
	// `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
	// `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
	// `{project}/{image}`, `{family}`, or `{image}`. If referred by family, the
	// images names must include the family name. If they don't, use the
	// [google_compute_image data source](/docs/providers/google/d/datasource_compute_image.html).
	// For instance, the image `centos-6-v20180104` includes its family name `centos-6`.
	// These images can be referred by family name here.
	Image interface{}
	// A set of key/value label pairs to assign to the image.
	Labels interface{}
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// The size of the image in gigabytes. If not specified, it
	// will inherit the size of its base image.
	Size interface{}
	// Name of snapshot from which to initialize this disk.
	Snapshot interface{}
	// The GCE disk type.
	Type interface{}
	// The zone where this disk will be available.
	Zone interface{}
}
