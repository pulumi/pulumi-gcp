// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Persistent disks are durable storage devices that function similarly to
// the physical disks in a desktop or a server. Compute Engine manages the
// hardware behind these devices to ensure data redundancy and optimize
// performance for you. Persistent disks are available as either standard
// hard disk drives (HDD) or solid-state drives (SSD).
// 
// Persistent disks are located independently from your virtual machine
// instances, so you can detach or move persistent disks to keep your data
// even after you delete your instances. Persistent disk performance scales
// automatically with size, so you can resize your existing persistent disks
// or add more persistent disks to an instance to meet your performance and
// storage space requirements.
// 
// Add a persistent disk to your instance when you need reliable and
// affordable storage with consistent performance characteristics.
// 
// 
// To get more information about Disk, see:
// 
// * [API documentation](https://cloud.google.com/compute/docs/reference/v1/disks)
// * How-to Guides
//     * [Adding a persistent disk](https://cloud.google.com/compute/docs/disks/add-persistent-disk)
// 
// > **Warning:** All arguments including the disk encryption key will be stored in the raw
// state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
// 
// <div class = "oics-button" style="float: right; margin: 0 0 -15px">
//   <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=disk_basic&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
//     <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
//   </a>
// </div>
type Disk struct {
	s *pulumi.ResourceState
}

// NewDisk registers a new resource with the given unique name, arguments, and options.
func NewDisk(ctx *pulumi.Context,
	name string, args *DiskArgs, opts ...pulumi.ResourceOpt) (*Disk, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["diskEncryptionKey"] = nil
		inputs["image"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["physicalBlockSizeBytes"] = nil
		inputs["project"] = nil
		inputs["size"] = nil
		inputs["snapshot"] = nil
		inputs["sourceImageEncryptionKey"] = nil
		inputs["sourceSnapshotEncryptionKey"] = nil
		inputs["type"] = nil
		inputs["zone"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["diskEncryptionKey"] = args.DiskEncryptionKey
		inputs["image"] = args.Image
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["physicalBlockSizeBytes"] = args.PhysicalBlockSizeBytes
		inputs["project"] = args.Project
		inputs["size"] = args.Size
		inputs["snapshot"] = args.Snapshot
		inputs["sourceImageEncryptionKey"] = args.SourceImageEncryptionKey
		inputs["sourceSnapshotEncryptionKey"] = args.SourceSnapshotEncryptionKey
		inputs["type"] = args.Type
		inputs["zone"] = args.Zone
	}
	inputs["creationTimestamp"] = nil
	inputs["labelFingerprint"] = nil
	inputs["lastAttachTimestamp"] = nil
	inputs["lastDetachTimestamp"] = nil
	inputs["selfLink"] = nil
	inputs["sourceImageId"] = nil
	inputs["sourceSnapshotId"] = nil
	inputs["users"] = nil
	s, err := ctx.RegisterResource("gcp:compute/disk:Disk", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Disk{s: s}, nil
}

// GetDisk gets an existing Disk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDisk(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DiskState, opts ...pulumi.ResourceOpt) (*Disk, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["creationTimestamp"] = state.CreationTimestamp
		inputs["description"] = state.Description
		inputs["diskEncryptionKey"] = state.DiskEncryptionKey
		inputs["image"] = state.Image
		inputs["labelFingerprint"] = state.LabelFingerprint
		inputs["labels"] = state.Labels
		inputs["lastAttachTimestamp"] = state.LastAttachTimestamp
		inputs["lastDetachTimestamp"] = state.LastDetachTimestamp
		inputs["name"] = state.Name
		inputs["physicalBlockSizeBytes"] = state.PhysicalBlockSizeBytes
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
		inputs["size"] = state.Size
		inputs["snapshot"] = state.Snapshot
		inputs["sourceImageEncryptionKey"] = state.SourceImageEncryptionKey
		inputs["sourceImageId"] = state.SourceImageId
		inputs["sourceSnapshotEncryptionKey"] = state.SourceSnapshotEncryptionKey
		inputs["sourceSnapshotId"] = state.SourceSnapshotId
		inputs["type"] = state.Type
		inputs["users"] = state.Users
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("gcp:compute/disk:Disk", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Disk{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Disk) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Disk) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Disk) CreationTimestamp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["creationTimestamp"])
}

func (r *Disk) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *Disk) DiskEncryptionKey() *pulumi.Output {
	return r.s.State["diskEncryptionKey"]
}

func (r *Disk) Image() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["image"])
}

func (r *Disk) LabelFingerprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["labelFingerprint"])
}

func (r *Disk) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

func (r *Disk) LastAttachTimestamp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["lastAttachTimestamp"])
}

func (r *Disk) LastDetachTimestamp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["lastDetachTimestamp"])
}

func (r *Disk) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Disk) PhysicalBlockSizeBytes() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["physicalBlockSizeBytes"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Disk) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The URI of the created resource.
func (r *Disk) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

func (r *Disk) Size() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["size"])
}

func (r *Disk) Snapshot() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["snapshot"])
}

func (r *Disk) SourceImageEncryptionKey() *pulumi.Output {
	return r.s.State["sourceImageEncryptionKey"]
}

func (r *Disk) SourceImageId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceImageId"])
}

func (r *Disk) SourceSnapshotEncryptionKey() *pulumi.Output {
	return r.s.State["sourceSnapshotEncryptionKey"]
}

func (r *Disk) SourceSnapshotId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceSnapshotId"])
}

func (r *Disk) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

func (r *Disk) Users() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["users"])
}

func (r *Disk) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering Disk resources.
type DiskState struct {
	CreationTimestamp interface{}
	Description interface{}
	DiskEncryptionKey interface{}
	Image interface{}
	LabelFingerprint interface{}
	Labels interface{}
	LastAttachTimestamp interface{}
	LastDetachTimestamp interface{}
	Name interface{}
	PhysicalBlockSizeBytes interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The URI of the created resource.
	SelfLink interface{}
	Size interface{}
	Snapshot interface{}
	SourceImageEncryptionKey interface{}
	SourceImageId interface{}
	SourceSnapshotEncryptionKey interface{}
	SourceSnapshotId interface{}
	Type interface{}
	Users interface{}
	Zone interface{}
}

// The set of arguments for constructing a Disk resource.
type DiskArgs struct {
	Description interface{}
	DiskEncryptionKey interface{}
	Image interface{}
	Labels interface{}
	Name interface{}
	PhysicalBlockSizeBytes interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	Size interface{}
	Snapshot interface{}
	SourceImageEncryptionKey interface{}
	SourceSnapshotEncryptionKey interface{}
	Type interface{}
	Zone interface{}
}
