// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Compute NetworkFirewallPolicyRule resource
//
// ## Example Usage
// ### Global
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/networksecurity"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/tags"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			basicGlobalNetworksecurityAddressGroup, err := networksecurity.NewAddressGroup(ctx, "basicGlobalNetworksecurityAddressGroup", &networksecurity.AddressGroupArgs{
//				Parent:      pulumi.String("projects/my-project-name"),
//				Description: pulumi.String("Sample global networksecurity_address_group"),
//				Location:    pulumi.String("global"),
//				Items: pulumi.StringArray{
//					pulumi.String("208.80.154.224/32"),
//				},
//				Type:     pulumi.String("IPV4"),
//				Capacity: pulumi.Int(100),
//			})
//			if err != nil {
//				return err
//			}
//			basicNetworkFirewallPolicy, err := compute.NewNetworkFirewallPolicy(ctx, "basicNetworkFirewallPolicy", &compute.NetworkFirewallPolicyArgs{
//				Description: pulumi.String("Sample global network firewall policy"),
//				Project:     pulumi.String("my-project-name"),
//			})
//			if err != nil {
//				return err
//			}
//			basicNetwork, err := compute.NewNetwork(ctx, "basicNetwork", nil)
//			if err != nil {
//				return err
//			}
//			basicKey, err := tags.NewTagKey(ctx, "basicKey", &tags.TagKeyArgs{
//				Description: pulumi.String("For keyname resources."),
//				Parent:      pulumi.String("organizations/123456789"),
//				Purpose:     pulumi.String("GCE_FIREWALL"),
//				ShortName:   pulumi.String("tagkey"),
//				PurposeData: pulumi.StringMap{
//					"network": basicNetwork.Name.ApplyT(func(name string) (string, error) {
//						return fmt.Sprintf("my-project-name/%v", name), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			basicValue, err := tags.NewTagValue(ctx, "basicValue", &tags.TagValueArgs{
//				Description: pulumi.String("For valuename resources."),
//				Parent: basicKey.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("tagKeys/%v", name), nil
//				}).(pulumi.StringOutput),
//				ShortName: pulumi.String("tagvalue"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewNetworkFirewallPolicyRule(ctx, "primary", &compute.NetworkFirewallPolicyRuleArgs{
//				Action:         pulumi.String("allow"),
//				Description:    pulumi.String("This is a simple rule description"),
//				Direction:      pulumi.String("INGRESS"),
//				Disabled:       pulumi.Bool(false),
//				EnableLogging:  pulumi.Bool(true),
//				FirewallPolicy: basicNetworkFirewallPolicy.Name,
//				Priority:       pulumi.Int(1000),
//				RuleName:       pulumi.String("test-rule"),
//				TargetServiceAccounts: pulumi.StringArray{
//					pulumi.String("my@service-account.com"),
//				},
//				Match: &compute.NetworkFirewallPolicyRuleMatchArgs{
//					SrcIpRanges: pulumi.StringArray{
//						pulumi.String("10.100.0.1/32"),
//					},
//					SrcFqdns: pulumi.StringArray{
//						pulumi.String("google.com"),
//					},
//					SrcRegionCodes: pulumi.StringArray{
//						pulumi.String("US"),
//					},
//					SrcThreatIntelligences: pulumi.StringArray{
//						pulumi.String("iplist-known-malicious-ips"),
//					},
//					SrcSecureTags: compute.NetworkFirewallPolicyRuleMatchSrcSecureTagArray{
//						&compute.NetworkFirewallPolicyRuleMatchSrcSecureTagArgs{
//							Name: basicValue.Name.ApplyT(func(name string) (string, error) {
//								return fmt.Sprintf("tagValues/%v", name), nil
//							}).(pulumi.StringOutput),
//						},
//					},
//					Layer4Configs: compute.NetworkFirewallPolicyRuleMatchLayer4ConfigArray{
//						&compute.NetworkFirewallPolicyRuleMatchLayer4ConfigArgs{
//							IpProtocol: pulumi.String("all"),
//						},
//					},
//					SrcAddressGroups: pulumi.StringArray{
//						basicGlobalNetworksecurityAddressGroup.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # NetworkFirewallPolicyRule can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:compute/networkFirewallPolicyRule:NetworkFirewallPolicyRule default projects/{{project}}/global/firewallPolicies/{{firewall_policy}}/rules/{{priority}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/networkFirewallPolicyRule:NetworkFirewallPolicyRule default {{project}}/{{firewall_policy}}/{{priority}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:compute/networkFirewallPolicyRule:NetworkFirewallPolicyRule default {{firewall_policy}}/{{priority}}
//
// ```
type NetworkFirewallPolicyRule struct {
	pulumi.CustomResourceState

	// The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny" and "gotoNext".
	Action pulumi.StringOutput `pulumi:"action"`
	// An optional description for this resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The direction in which this rule applies. Possible values: INGRESS, EGRESS
	Direction pulumi.StringOutput `pulumi:"direction"`
	// Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "gotoNext" rules.
	EnableLogging pulumi.BoolPtrOutput `pulumi:"enableLogging"`
	// The firewall policy of the resource.
	FirewallPolicy pulumi.StringOutput `pulumi:"firewallPolicy"`
	// Type of the resource. Always `compute#firewallPolicyRule` for firewall policy rules
	Kind pulumi.StringOutput `pulumi:"kind"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	Match NetworkFirewallPolicyRuleMatchOutput `pulumi:"match"`
	// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// The project for the resource
	Project pulumi.StringOutput `pulumi:"project"`
	// An optional name for the rule. This field is not a unique identifier and can be updated.
	RuleName pulumi.StringPtrOutput `pulumi:"ruleName"`
	// Calculation of the complexity of a single firewall policy rule.
	RuleTupleCount pulumi.IntOutput `pulumi:"ruleTupleCount"`
	// A list of secure tags that controls which instances the firewall rule applies to. If <code>targetSecureTag</code> are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored. <code>targetSecureTag</code> may not be set at the same time as <code>targetServiceAccounts</code>. If neither <code>targetServiceAccounts</code> nor <code>targetSecureTag</code> are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
	TargetSecureTags NetworkFirewallPolicyRuleTargetSecureTagArrayOutput `pulumi:"targetSecureTags"`
	// A list of service accounts indicating the sets of instances that are applied with this rule.
	TargetServiceAccounts pulumi.StringArrayOutput `pulumi:"targetServiceAccounts"`
}

// NewNetworkFirewallPolicyRule registers a new resource with the given unique name, arguments, and options.
func NewNetworkFirewallPolicyRule(ctx *pulumi.Context,
	name string, args *NetworkFirewallPolicyRuleArgs, opts ...pulumi.ResourceOption) (*NetworkFirewallPolicyRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Direction == nil {
		return nil, errors.New("invalid value for required argument 'Direction'")
	}
	if args.FirewallPolicy == nil {
		return nil, errors.New("invalid value for required argument 'FirewallPolicy'")
	}
	if args.Match == nil {
		return nil, errors.New("invalid value for required argument 'Match'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkFirewallPolicyRule
	err := ctx.RegisterResource("gcp:compute/networkFirewallPolicyRule:NetworkFirewallPolicyRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkFirewallPolicyRule gets an existing NetworkFirewallPolicyRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkFirewallPolicyRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkFirewallPolicyRuleState, opts ...pulumi.ResourceOption) (*NetworkFirewallPolicyRule, error) {
	var resource NetworkFirewallPolicyRule
	err := ctx.ReadResource("gcp:compute/networkFirewallPolicyRule:NetworkFirewallPolicyRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkFirewallPolicyRule resources.
type networkFirewallPolicyRuleState struct {
	// The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny" and "gotoNext".
	Action *string `pulumi:"action"`
	// An optional description for this resource.
	Description *string `pulumi:"description"`
	// The direction in which this rule applies. Possible values: INGRESS, EGRESS
	Direction *string `pulumi:"direction"`
	// Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
	Disabled *bool `pulumi:"disabled"`
	// Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "gotoNext" rules.
	EnableLogging *bool `pulumi:"enableLogging"`
	// The firewall policy of the resource.
	FirewallPolicy *string `pulumi:"firewallPolicy"`
	// Type of the resource. Always `compute#firewallPolicyRule` for firewall policy rules
	Kind *string `pulumi:"kind"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	Match *NetworkFirewallPolicyRuleMatch `pulumi:"match"`
	// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
	Priority *int `pulumi:"priority"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// An optional name for the rule. This field is not a unique identifier and can be updated.
	RuleName *string `pulumi:"ruleName"`
	// Calculation of the complexity of a single firewall policy rule.
	RuleTupleCount *int `pulumi:"ruleTupleCount"`
	// A list of secure tags that controls which instances the firewall rule applies to. If <code>targetSecureTag</code> are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored. <code>targetSecureTag</code> may not be set at the same time as <code>targetServiceAccounts</code>. If neither <code>targetServiceAccounts</code> nor <code>targetSecureTag</code> are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
	TargetSecureTags []NetworkFirewallPolicyRuleTargetSecureTag `pulumi:"targetSecureTags"`
	// A list of service accounts indicating the sets of instances that are applied with this rule.
	TargetServiceAccounts []string `pulumi:"targetServiceAccounts"`
}

type NetworkFirewallPolicyRuleState struct {
	// The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny" and "gotoNext".
	Action pulumi.StringPtrInput
	// An optional description for this resource.
	Description pulumi.StringPtrInput
	// The direction in which this rule applies. Possible values: INGRESS, EGRESS
	Direction pulumi.StringPtrInput
	// Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
	Disabled pulumi.BoolPtrInput
	// Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "gotoNext" rules.
	EnableLogging pulumi.BoolPtrInput
	// The firewall policy of the resource.
	FirewallPolicy pulumi.StringPtrInput
	// Type of the resource. Always `compute#firewallPolicyRule` for firewall policy rules
	Kind pulumi.StringPtrInput
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	Match NetworkFirewallPolicyRuleMatchPtrInput
	// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
	Priority pulumi.IntPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// An optional name for the rule. This field is not a unique identifier and can be updated.
	RuleName pulumi.StringPtrInput
	// Calculation of the complexity of a single firewall policy rule.
	RuleTupleCount pulumi.IntPtrInput
	// A list of secure tags that controls which instances the firewall rule applies to. If <code>targetSecureTag</code> are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored. <code>targetSecureTag</code> may not be set at the same time as <code>targetServiceAccounts</code>. If neither <code>targetServiceAccounts</code> nor <code>targetSecureTag</code> are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
	TargetSecureTags NetworkFirewallPolicyRuleTargetSecureTagArrayInput
	// A list of service accounts indicating the sets of instances that are applied with this rule.
	TargetServiceAccounts pulumi.StringArrayInput
}

func (NetworkFirewallPolicyRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkFirewallPolicyRuleState)(nil)).Elem()
}

type networkFirewallPolicyRuleArgs struct {
	// The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny" and "gotoNext".
	Action string `pulumi:"action"`
	// An optional description for this resource.
	Description *string `pulumi:"description"`
	// The direction in which this rule applies. Possible values: INGRESS, EGRESS
	Direction string `pulumi:"direction"`
	// Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
	Disabled *bool `pulumi:"disabled"`
	// Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "gotoNext" rules.
	EnableLogging *bool `pulumi:"enableLogging"`
	// The firewall policy of the resource.
	FirewallPolicy string `pulumi:"firewallPolicy"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	Match NetworkFirewallPolicyRuleMatch `pulumi:"match"`
	// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
	Priority int `pulumi:"priority"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// An optional name for the rule. This field is not a unique identifier and can be updated.
	RuleName *string `pulumi:"ruleName"`
	// A list of secure tags that controls which instances the firewall rule applies to. If <code>targetSecureTag</code> are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored. <code>targetSecureTag</code> may not be set at the same time as <code>targetServiceAccounts</code>. If neither <code>targetServiceAccounts</code> nor <code>targetSecureTag</code> are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
	TargetSecureTags []NetworkFirewallPolicyRuleTargetSecureTag `pulumi:"targetSecureTags"`
	// A list of service accounts indicating the sets of instances that are applied with this rule.
	TargetServiceAccounts []string `pulumi:"targetServiceAccounts"`
}

// The set of arguments for constructing a NetworkFirewallPolicyRule resource.
type NetworkFirewallPolicyRuleArgs struct {
	// The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny" and "gotoNext".
	Action pulumi.StringInput
	// An optional description for this resource.
	Description pulumi.StringPtrInput
	// The direction in which this rule applies. Possible values: INGRESS, EGRESS
	Direction pulumi.StringInput
	// Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
	Disabled pulumi.BoolPtrInput
	// Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "gotoNext" rules.
	EnableLogging pulumi.BoolPtrInput
	// The firewall policy of the resource.
	FirewallPolicy pulumi.StringInput
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	Match NetworkFirewallPolicyRuleMatchInput
	// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
	Priority pulumi.IntInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// An optional name for the rule. This field is not a unique identifier and can be updated.
	RuleName pulumi.StringPtrInput
	// A list of secure tags that controls which instances the firewall rule applies to. If <code>targetSecureTag</code> are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored. <code>targetSecureTag</code> may not be set at the same time as <code>targetServiceAccounts</code>. If neither <code>targetServiceAccounts</code> nor <code>targetSecureTag</code> are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
	TargetSecureTags NetworkFirewallPolicyRuleTargetSecureTagArrayInput
	// A list of service accounts indicating the sets of instances that are applied with this rule.
	TargetServiceAccounts pulumi.StringArrayInput
}

func (NetworkFirewallPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkFirewallPolicyRuleArgs)(nil)).Elem()
}

type NetworkFirewallPolicyRuleInput interface {
	pulumi.Input

	ToNetworkFirewallPolicyRuleOutput() NetworkFirewallPolicyRuleOutput
	ToNetworkFirewallPolicyRuleOutputWithContext(ctx context.Context) NetworkFirewallPolicyRuleOutput
}

func (*NetworkFirewallPolicyRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkFirewallPolicyRule)(nil)).Elem()
}

func (i *NetworkFirewallPolicyRule) ToNetworkFirewallPolicyRuleOutput() NetworkFirewallPolicyRuleOutput {
	return i.ToNetworkFirewallPolicyRuleOutputWithContext(context.Background())
}

func (i *NetworkFirewallPolicyRule) ToNetworkFirewallPolicyRuleOutputWithContext(ctx context.Context) NetworkFirewallPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkFirewallPolicyRuleOutput)
}

// NetworkFirewallPolicyRuleArrayInput is an input type that accepts NetworkFirewallPolicyRuleArray and NetworkFirewallPolicyRuleArrayOutput values.
// You can construct a concrete instance of `NetworkFirewallPolicyRuleArrayInput` via:
//
//	NetworkFirewallPolicyRuleArray{ NetworkFirewallPolicyRuleArgs{...} }
type NetworkFirewallPolicyRuleArrayInput interface {
	pulumi.Input

	ToNetworkFirewallPolicyRuleArrayOutput() NetworkFirewallPolicyRuleArrayOutput
	ToNetworkFirewallPolicyRuleArrayOutputWithContext(context.Context) NetworkFirewallPolicyRuleArrayOutput
}

type NetworkFirewallPolicyRuleArray []NetworkFirewallPolicyRuleInput

func (NetworkFirewallPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkFirewallPolicyRule)(nil)).Elem()
}

func (i NetworkFirewallPolicyRuleArray) ToNetworkFirewallPolicyRuleArrayOutput() NetworkFirewallPolicyRuleArrayOutput {
	return i.ToNetworkFirewallPolicyRuleArrayOutputWithContext(context.Background())
}

func (i NetworkFirewallPolicyRuleArray) ToNetworkFirewallPolicyRuleArrayOutputWithContext(ctx context.Context) NetworkFirewallPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkFirewallPolicyRuleArrayOutput)
}

// NetworkFirewallPolicyRuleMapInput is an input type that accepts NetworkFirewallPolicyRuleMap and NetworkFirewallPolicyRuleMapOutput values.
// You can construct a concrete instance of `NetworkFirewallPolicyRuleMapInput` via:
//
//	NetworkFirewallPolicyRuleMap{ "key": NetworkFirewallPolicyRuleArgs{...} }
type NetworkFirewallPolicyRuleMapInput interface {
	pulumi.Input

	ToNetworkFirewallPolicyRuleMapOutput() NetworkFirewallPolicyRuleMapOutput
	ToNetworkFirewallPolicyRuleMapOutputWithContext(context.Context) NetworkFirewallPolicyRuleMapOutput
}

type NetworkFirewallPolicyRuleMap map[string]NetworkFirewallPolicyRuleInput

func (NetworkFirewallPolicyRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkFirewallPolicyRule)(nil)).Elem()
}

func (i NetworkFirewallPolicyRuleMap) ToNetworkFirewallPolicyRuleMapOutput() NetworkFirewallPolicyRuleMapOutput {
	return i.ToNetworkFirewallPolicyRuleMapOutputWithContext(context.Background())
}

func (i NetworkFirewallPolicyRuleMap) ToNetworkFirewallPolicyRuleMapOutputWithContext(ctx context.Context) NetworkFirewallPolicyRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkFirewallPolicyRuleMapOutput)
}

type NetworkFirewallPolicyRuleOutput struct{ *pulumi.OutputState }

func (NetworkFirewallPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkFirewallPolicyRule)(nil)).Elem()
}

func (o NetworkFirewallPolicyRuleOutput) ToNetworkFirewallPolicyRuleOutput() NetworkFirewallPolicyRuleOutput {
	return o
}

func (o NetworkFirewallPolicyRuleOutput) ToNetworkFirewallPolicyRuleOutputWithContext(ctx context.Context) NetworkFirewallPolicyRuleOutput {
	return o
}

// The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny" and "gotoNext".
func (o NetworkFirewallPolicyRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// An optional description for this resource.
func (o NetworkFirewallPolicyRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The direction in which this rule applies. Possible values: INGRESS, EGRESS
func (o NetworkFirewallPolicyRuleOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyRule) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

// Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
func (o NetworkFirewallPolicyRuleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyRule) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "gotoNext" rules.
func (o NetworkFirewallPolicyRuleOutput) EnableLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyRule) pulumi.BoolPtrOutput { return v.EnableLogging }).(pulumi.BoolPtrOutput)
}

// The firewall policy of the resource.
func (o NetworkFirewallPolicyRuleOutput) FirewallPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyRule) pulumi.StringOutput { return v.FirewallPolicy }).(pulumi.StringOutput)
}

// Type of the resource. Always `compute#firewallPolicyRule` for firewall policy rules
func (o NetworkFirewallPolicyRuleOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyRule) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
func (o NetworkFirewallPolicyRuleOutput) Match() NetworkFirewallPolicyRuleMatchOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyRule) NetworkFirewallPolicyRuleMatchOutput { return v.Match }).(NetworkFirewallPolicyRuleMatchOutput)
}

// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
func (o NetworkFirewallPolicyRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// The project for the resource
func (o NetworkFirewallPolicyRuleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyRule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// An optional name for the rule. This field is not a unique identifier and can be updated.
func (o NetworkFirewallPolicyRuleOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyRule) pulumi.StringPtrOutput { return v.RuleName }).(pulumi.StringPtrOutput)
}

// Calculation of the complexity of a single firewall policy rule.
func (o NetworkFirewallPolicyRuleOutput) RuleTupleCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyRule) pulumi.IntOutput { return v.RuleTupleCount }).(pulumi.IntOutput)
}

// A list of secure tags that controls which instances the firewall rule applies to. If <code>targetSecureTag</code> are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the targetSecureTag are in INEFFECTIVE state, then this rule will be ignored. <code>targetSecureTag</code> may not be set at the same time as <code>targetServiceAccounts</code>. If neither <code>targetServiceAccounts</code> nor <code>targetSecureTag</code> are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
func (o NetworkFirewallPolicyRuleOutput) TargetSecureTags() NetworkFirewallPolicyRuleTargetSecureTagArrayOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyRule) NetworkFirewallPolicyRuleTargetSecureTagArrayOutput {
		return v.TargetSecureTags
	}).(NetworkFirewallPolicyRuleTargetSecureTagArrayOutput)
}

// A list of service accounts indicating the sets of instances that are applied with this rule.
func (o NetworkFirewallPolicyRuleOutput) TargetServiceAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyRule) pulumi.StringArrayOutput { return v.TargetServiceAccounts }).(pulumi.StringArrayOutput)
}

type NetworkFirewallPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworkFirewallPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkFirewallPolicyRule)(nil)).Elem()
}

func (o NetworkFirewallPolicyRuleArrayOutput) ToNetworkFirewallPolicyRuleArrayOutput() NetworkFirewallPolicyRuleArrayOutput {
	return o
}

func (o NetworkFirewallPolicyRuleArrayOutput) ToNetworkFirewallPolicyRuleArrayOutputWithContext(ctx context.Context) NetworkFirewallPolicyRuleArrayOutput {
	return o
}

func (o NetworkFirewallPolicyRuleArrayOutput) Index(i pulumi.IntInput) NetworkFirewallPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkFirewallPolicyRule {
		return vs[0].([]*NetworkFirewallPolicyRule)[vs[1].(int)]
	}).(NetworkFirewallPolicyRuleOutput)
}

type NetworkFirewallPolicyRuleMapOutput struct{ *pulumi.OutputState }

func (NetworkFirewallPolicyRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkFirewallPolicyRule)(nil)).Elem()
}

func (o NetworkFirewallPolicyRuleMapOutput) ToNetworkFirewallPolicyRuleMapOutput() NetworkFirewallPolicyRuleMapOutput {
	return o
}

func (o NetworkFirewallPolicyRuleMapOutput) ToNetworkFirewallPolicyRuleMapOutputWithContext(ctx context.Context) NetworkFirewallPolicyRuleMapOutput {
	return o
}

func (o NetworkFirewallPolicyRuleMapOutput) MapIndex(k pulumi.StringInput) NetworkFirewallPolicyRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkFirewallPolicyRule {
		return vs[0].(map[string]*NetworkFirewallPolicyRule)[vs[1].(string)]
	}).(NetworkFirewallPolicyRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkFirewallPolicyRuleInput)(nil)).Elem(), &NetworkFirewallPolicyRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkFirewallPolicyRuleArrayInput)(nil)).Elem(), NetworkFirewallPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkFirewallPolicyRuleMapInput)(nil)).Elem(), NetworkFirewallPolicyRuleMap{})
	pulumi.RegisterOutputType(NetworkFirewallPolicyRuleOutput{})
	pulumi.RegisterOutputType(NetworkFirewallPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkFirewallPolicyRuleMapOutput{})
}
