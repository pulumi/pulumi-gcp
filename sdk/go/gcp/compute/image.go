// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a bootable VM image resource for Google Compute Engine from an existing
// tarball. For more information see [the official documentation](https://cloud.google.com/compute/docs/images) and
// [API](https://cloud.google.com/compute/docs/reference/latest/images).
// 
type Image struct {
	s *pulumi.ResourceState
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOpt) (*Image, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["createTimeout"] = nil
		inputs["description"] = nil
		inputs["family"] = nil
		inputs["labels"] = nil
		inputs["licenses"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["rawDisk"] = nil
		inputs["sourceDisk"] = nil
	} else {
		inputs["createTimeout"] = args.CreateTimeout
		inputs["description"] = args.Description
		inputs["family"] = args.Family
		inputs["labels"] = args.Labels
		inputs["licenses"] = args.Licenses
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["rawDisk"] = args.RawDisk
		inputs["sourceDisk"] = args.SourceDisk
	}
	inputs["labelFingerprint"] = nil
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/image:Image", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Image{s: s}, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ImageState, opts ...pulumi.ResourceOpt) (*Image, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["createTimeout"] = state.CreateTimeout
		inputs["description"] = state.Description
		inputs["family"] = state.Family
		inputs["labelFingerprint"] = state.LabelFingerprint
		inputs["labels"] = state.Labels
		inputs["licenses"] = state.Licenses
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["rawDisk"] = state.RawDisk
		inputs["selfLink"] = state.SelfLink
		inputs["sourceDisk"] = state.SourceDisk
	}
	s, err := ctx.ReadResource("gcp:compute/image:Image", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Image{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Image) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Image) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Configurable timeout in minutes for creating images. Default is 4 minutes.
func (r *Image) CreateTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["createTimeout"])
}

// The description of the image to be created
func (r *Image) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The name of the image family to which this image belongs.
func (r *Image) Family() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["family"])
}

// The fingerprint of the assigned labels.
func (r *Image) LabelFingerprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["labelFingerprint"])
}

// A set of key/value label pairs to assign to the image.
func (r *Image) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

// A list of license URIs to apply to this image. Changing this
// forces a new resource to be created.
func (r *Image) Licenses() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["licenses"])
}

// A unique name for the resource, required by GCE.
// Changing this forces a new resource to be created.
func (r *Image) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (r *Image) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The raw disk that will be used as the source of the image.
// Changing this forces a new resource to be created. Structure is documented
// below.
func (r *Image) RawDisk() *pulumi.Output {
	return r.s.State["rawDisk"]
}

// The URI of the created resource.
func (r *Image) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// The URL of a disk that will be used as the source of the
// image. Changing this forces a new resource to be created.
func (r *Image) SourceDisk() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceDisk"])
}

// Input properties used for looking up and filtering Image resources.
type ImageState struct {
	// Configurable timeout in minutes for creating images. Default is 4 minutes.
	CreateTimeout interface{}
	// The description of the image to be created
	Description interface{}
	// The name of the image family to which this image belongs.
	Family interface{}
	// The fingerprint of the assigned labels.
	LabelFingerprint interface{}
	// A set of key/value label pairs to assign to the image.
	Labels interface{}
	// A list of license URIs to apply to this image. Changing this
	// forces a new resource to be created.
	Licenses interface{}
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// The raw disk that will be used as the source of the image.
	// Changing this forces a new resource to be created. Structure is documented
	// below.
	RawDisk interface{}
	// The URI of the created resource.
	SelfLink interface{}
	// The URL of a disk that will be used as the source of the
	// image. Changing this forces a new resource to be created.
	SourceDisk interface{}
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// Configurable timeout in minutes for creating images. Default is 4 minutes.
	CreateTimeout interface{}
	// The description of the image to be created
	Description interface{}
	// The name of the image family to which this image belongs.
	Family interface{}
	// A set of key/value label pairs to assign to the image.
	Labels interface{}
	// A list of license URIs to apply to this image. Changing this
	// forces a new resource to be created.
	Licenses interface{}
	// A unique name for the resource, required by GCE.
	// Changing this forces a new resource to be created.
	Name interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// The raw disk that will be used as the source of the image.
	// Changing this forces a new resource to be created. Structure is documented
	// below.
	RawDisk interface{}
	// The URL of a disk that will be used as the source of the
	// image. Changing this forces a new resource to be created.
	SourceDisk interface{}
}
