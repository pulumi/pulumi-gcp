// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Backend buckets allow you to use Google Cloud Storage buckets with HTTP(S)
// load balancing.
// 
// An HTTP(S) load balancer can direct traffic to specified URLs to a
// backend bucket rather than a backend service. It can send requests for
// static content to a Cloud Storage bucket and requests for dynamic content
// a virtual machine instance.
// 
// 
// To get more information about BackendBucket, see:
// 
// * [API documentation](https://cloud.google.com/compute/docs/reference/v1/backendBuckets)
// * How-to Guides
//     * [Using a Cloud Storage bucket as a load balancer backend](https://cloud.google.com/compute/docs/load-balancing/http/backend-bucket)
type BackendBucket struct {
	s *pulumi.ResourceState
}

// NewBackendBucket registers a new resource with the given unique name, arguments, and options.
func NewBackendBucket(ctx *pulumi.Context,
	name string, args *BackendBucketArgs, opts ...pulumi.ResourceOpt) (*BackendBucket, error) {
	if args == nil || args.BucketName == nil {
		return nil, errors.New("missing required argument 'BucketName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["bucketName"] = nil
		inputs["cdnPolicy"] = nil
		inputs["description"] = nil
		inputs["enableCdn"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
	} else {
		inputs["bucketName"] = args.BucketName
		inputs["cdnPolicy"] = args.CdnPolicy
		inputs["description"] = args.Description
		inputs["enableCdn"] = args.EnableCdn
		inputs["name"] = args.Name
		inputs["project"] = args.Project
	}
	inputs["creationTimestamp"] = nil
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/backendBucket:BackendBucket", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BackendBucket{s: s}, nil
}

// GetBackendBucket gets an existing BackendBucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendBucket(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BackendBucketState, opts ...pulumi.ResourceOpt) (*BackendBucket, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["bucketName"] = state.BucketName
		inputs["cdnPolicy"] = state.CdnPolicy
		inputs["creationTimestamp"] = state.CreationTimestamp
		inputs["description"] = state.Description
		inputs["enableCdn"] = state.EnableCdn
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
	}
	s, err := ctx.ReadResource("gcp:compute/backendBucket:BackendBucket", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BackendBucket{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *BackendBucket) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *BackendBucket) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *BackendBucket) BucketName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["bucketName"])
}

func (r *BackendBucket) CdnPolicy() *pulumi.Output {
	return r.s.State["cdnPolicy"]
}

func (r *BackendBucket) CreationTimestamp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["creationTimestamp"])
}

func (r *BackendBucket) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *BackendBucket) EnableCdn() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableCdn"])
}

func (r *BackendBucket) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *BackendBucket) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The URI of the created resource.
func (r *BackendBucket) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// Input properties used for looking up and filtering BackendBucket resources.
type BackendBucketState struct {
	BucketName interface{}
	CdnPolicy interface{}
	CreationTimestamp interface{}
	Description interface{}
	EnableCdn interface{}
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The URI of the created resource.
	SelfLink interface{}
}

// The set of arguments for constructing a BackendBucket resource.
type BackendBucketArgs struct {
	BucketName interface{}
	CdnPolicy interface{}
	Description interface{}
	EnableCdn interface{}
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
}
