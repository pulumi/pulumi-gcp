// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Backend Service defines a group of virtual machines that will serve
// traffic for load balancing. This resource is a global backend service,
// appropriate for external load balancing or self-managed internal load balancing.
// For managed internal load balancing, use a regional backend service instead.
//
// Currently self-managed internal load balancing is only available in beta.
//
// To get more information about BackendService, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/v1/backendServices)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/compute/docs/load-balancing/http/backend-service)
//
// ## Example Usage
// ### Backend Service Basic
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		defaultHttpHealthCheck, err := compute.NewHttpHealthCheck(ctx, "defaultHttpHealthCheck", &compute.HttpHealthCheckArgs{
// 			RequestPath:      pulumi.String("/"),
// 			CheckIntervalSec: pulumi.Int(1),
// 			TimeoutSec:       pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewBackendService(ctx, "defaultBackendService", &compute.BackendServiceArgs{
// 			HealthChecks: pulumi.String{
// 				defaultHttpHealthCheck.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Backend Service Cache Simple
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		defaultHttpHealthCheck, err := compute.NewHttpHealthCheck(ctx, "defaultHttpHealthCheck", &compute.HttpHealthCheckArgs{
// 			RequestPath:      pulumi.String("/"),
// 			CheckIntervalSec: pulumi.Int(1),
// 			TimeoutSec:       pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewBackendService(ctx, "defaultBackendService", &compute.BackendServiceArgs{
// 			HealthChecks: pulumi.String{
// 				defaultHttpHealthCheck.ID(),
// 			},
// 			EnableCdn: pulumi.Bool(true),
// 			CdnPolicy: &compute.BackendServiceCdnPolicyArgs{
// 				SignedUrlCacheMaxAgeSec: pulumi.Int(7200),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Backend Service Cache
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		defaultHttpHealthCheck, err := compute.NewHttpHealthCheck(ctx, "defaultHttpHealthCheck", &compute.HttpHealthCheckArgs{
// 			RequestPath:      pulumi.String("/"),
// 			CheckIntervalSec: pulumi.Int(1),
// 			TimeoutSec:       pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewBackendService(ctx, "defaultBackendService", &compute.BackendServiceArgs{
// 			HealthChecks: pulumi.String{
// 				defaultHttpHealthCheck.ID(),
// 			},
// 			EnableCdn: pulumi.Bool(true),
// 			CdnPolicy: &compute.BackendServiceCdnPolicyArgs{
// 				CacheMode:               pulumi.String("CACHE_ALL_STATIC"),
// 				DefaultTtl:              pulumi.Int(3600),
// 				ClientTtl:               pulumi.Int(7200),
// 				MaxTtl:                  pulumi.Int(10800),
// 				NegativeCaching:         pulumi.Bool(true),
// 				SignedUrlCacheMaxAgeSec: pulumi.Int(7200),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Backend Service Traffic Director Round Robin
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		healthCheck, err := compute.NewHealthCheck(ctx, "healthCheck", &compute.HealthCheckArgs{
// 			HttpHealthCheck: &compute.HealthCheckHttpHealthCheckArgs{
// 				Port: pulumi.Int(80),
// 			},
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewBackendService(ctx, "default", &compute.BackendServiceArgs{
// 			HealthChecks: pulumi.String{
// 				healthCheck.ID(),
// 			},
// 			LoadBalancingScheme: pulumi.String("INTERNAL_SELF_MANAGED"),
// 			LocalityLbPolicy:    pulumi.String("ROUND_ROBIN"),
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Backend Service Traffic Director Ring Hash
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		healthCheck, err := compute.NewHealthCheck(ctx, "healthCheck", &compute.HealthCheckArgs{
// 			HttpHealthCheck: &compute.HealthCheckHttpHealthCheckArgs{
// 				Port: pulumi.Int(80),
// 			},
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewBackendService(ctx, "default", &compute.BackendServiceArgs{
// 			HealthChecks: pulumi.String{
// 				healthCheck.ID(),
// 			},
// 			LoadBalancingScheme: pulumi.String("INTERNAL_SELF_MANAGED"),
// 			LocalityLbPolicy:    pulumi.String("RING_HASH"),
// 			SessionAffinity:     pulumi.String("HTTP_COOKIE"),
// 			CircuitBreakers: &compute.BackendServiceCircuitBreakersArgs{
// 				MaxConnections: pulumi.Int(10),
// 			},
// 			ConsistentHash: &compute.BackendServiceConsistentHashArgs{
// 				HttpCookie: &compute.BackendServiceConsistentHashHttpCookieArgs{
// 					Ttl: &compute.BackendServiceConsistentHashHttpCookieTtlArgs{
// 						Seconds: pulumi.Int(11),
// 						Nanos:   pulumi.Int(1111),
// 					},
// 					Name: pulumi.String("mycookie"),
// 				},
// 			},
// 			OutlierDetection: &compute.BackendServiceOutlierDetectionArgs{
// 				ConsecutiveErrors: pulumi.Int(2),
// 			},
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Backend Service Network Endpoint
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		externalProxy, err := compute.NewGlobalNetworkEndpointGroup(ctx, "externalProxy", &compute.GlobalNetworkEndpointGroupArgs{
// 			NetworkEndpointType: pulumi.String("INTERNET_FQDN_PORT"),
// 			DefaultPort:         pulumi.Int(443),
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		proxy, err := compute.NewGlobalNetworkEndpoint(ctx, "proxy", &compute.GlobalNetworkEndpointArgs{
// 			GlobalNetworkEndpointGroup: externalProxy.ID(),
// 			Fqdn:                       pulumi.String("test.example.com"),
// 			Port:                       externalProxy.DefaultPort,
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewBackendService(ctx, "default", &compute.BackendServiceArgs{
// 			EnableCdn:                    pulumi.Bool(true),
// 			TimeoutSec:                   pulumi.Int(10),
// 			ConnectionDrainingTimeoutSec: pulumi.Int(10),
// 			CustomRequestHeaders: pulumi.StringArray{
// 				proxy.Fqdn.ApplyT(func(fqdn string) (string, error) {
// 					return fmt.Sprintf("%v%v", "host: ", fqdn), nil
// 				}).(pulumi.StringOutput),
// 			},
// 			CustomResponseHeaders: pulumi.StringArray{
// 				pulumi.String("X-Cache-Hit: {cdn_cache_status}"),
// 			},
// 			Backends: compute.BackendServiceBackendArray{
// 				&compute.BackendServiceBackendArgs{
// 					Group: externalProxy.ID(),
// 				},
// 			},
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Backend Service External Managed
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		defaultHealthCheck, err := compute.NewHealthCheck(ctx, "defaultHealthCheck", &compute.HealthCheckArgs{
// 			HttpHealthCheck: &compute.HealthCheckHttpHealthCheckArgs{
// 				Port: pulumi.Int(80),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewBackendService(ctx, "defaultBackendService", &compute.BackendServiceArgs{
// 			HealthChecks: pulumi.String{
// 				defaultHealthCheck.ID(),
// 			},
// 			LoadBalancingScheme: pulumi.String("EXTERNAL_MANAGED"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// BackendService can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:compute/backendService:BackendService default projects/{{project}}/global/backendServices/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:compute/backendService:BackendService default {{project}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:compute/backendService:BackendService default {{name}}
// ```
type BackendService struct {
	pulumi.CustomResourceState

	// Lifetime of cookies in seconds if sessionAffinity is
	// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
	// only until the end of the browser session (or equivalent). The
	// maximum allowed value for TTL is one day.
	// When the load balancing scheme is INTERNAL, this field is not used.
	AffinityCookieTtlSec pulumi.IntPtrOutput `pulumi:"affinityCookieTtlSec"`
	// The set of backends that serve this BackendService.
	// Structure is documented below.
	Backends BackendServiceBackendArrayOutput `pulumi:"backends"`
	// Cloud CDN configuration for this BackendService.
	// Structure is documented below.
	CdnPolicy BackendServiceCdnPolicyOutput `pulumi:"cdnPolicy"`
	// Settings controlling the volume of connections to a backend service. This field
	// is applicable only when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	CircuitBreakers BackendServiceCircuitBreakersPtrOutput `pulumi:"circuitBreakers"`
	// Time for which instance will be drained (not accept new
	// connections, but still work to finish started).
	ConnectionDrainingTimeoutSec pulumi.IntPtrOutput `pulumi:"connectionDrainingTimeoutSec"`
	// Consistent Hash-based load balancing can be used to provide soft session
	// affinity based on HTTP headers, cookies or other properties. This load balancing
	// policy is applicable only for HTTP connections. The affinity to a particular
	// destination host will be lost when one or more hosts are added/removed from the
	// destination service. This field specifies parameters that control consistent
	// hashing. This field only applies if the loadBalancingScheme is set to
	// INTERNAL_SELF_MANAGED. This field is only applicable when localityLbPolicy is
	// set to MAGLEV or RING_HASH.
	// Structure is documented below.
	ConsistentHash BackendServiceConsistentHashPtrOutput `pulumi:"consistentHash"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// Headers that the HTTP/S load balancer should add to proxied
	// requests.
	CustomRequestHeaders pulumi.StringArrayOutput `pulumi:"customRequestHeaders"`
	// Headers that the HTTP/S load balancer should add to proxied
	// responses.
	CustomResponseHeaders pulumi.StringArrayOutput `pulumi:"customResponseHeaders"`
	// An optional description of this resource.
	// Provide this property when you create the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// If true, enable Cloud CDN for this BackendService.
	EnableCdn pulumi.BoolPtrOutput `pulumi:"enableCdn"`
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
	// for health checking this BackendService. Currently at most one health
	// check can be specified.
	// A health check must be specified unless the backend service uses an internet
	// or serverless NEG as a backend.
	// For internal load balancing, a URL to a HealthCheck resource must be specified instead.
	HealthChecks pulumi.StringPtrOutput `pulumi:"healthChecks"`
	// Settings for enabling Cloud Identity Aware Proxy
	// Structure is documented below.
	Iap BackendServiceIapPtrOutput `pulumi:"iap"`
	// Indicates whether the backend service will be used with internal or
	// external load balancing. A backend service created for one type of
	// load balancing cannot be used with the other. For more information, refer to
	// [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
	// Default value is `EXTERNAL`.
	// Possible values are `EXTERNAL`, `INTERNAL_SELF_MANAGED`, and `EXTERNAL_MANAGED`.
	LoadBalancingScheme pulumi.StringPtrOutput `pulumi:"loadBalancingScheme"`
	// The load balancing algorithm used within the scope of the locality.
	// The possible values are:
	// * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
	//   is selected in round robin order.
	// * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
	//   hosts and picks the host which has fewer active requests.
	// * `RING_HASH`: The ring/modulo hash load balancer implements consistent
	//   hashing to backends. The algorithm has the property that the
	//   addition/removal of a host from a set of N hosts only affects
	//   1/N of the requests.
	// * `RANDOM`: The load balancer selects a random healthy host.
	// * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
	//   connection metadata, i.e., connections are opened
	//   to the same address as the destination address of
	//   the incoming connection before the connection
	//   was redirected to the load balancer.
	// * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
	//   Maglev is not as stable as ring hash but has faster table lookup
	//   build times and host selection times. For more information about
	//   Maglev, refer to https://ai.google/research/pubs/pub44824
	LocalityLbPolicy pulumi.StringPtrOutput `pulumi:"localityLbPolicy"`
	// This field denotes the logging options for the load balancer traffic served by this backend service.
	// If logging is enabled, logs will be exported to Stackdriver.
	// Structure is documented below.
	LogConfig BackendServiceLogConfigOutput `pulumi:"logConfig"`
	// Name of the cookie.
	Name pulumi.StringOutput `pulumi:"name"`
	// Settings controlling eviction of unhealthy hosts from the load balancing pool.
	// This field is applicable only when the loadBalancingScheme is set
	// to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	OutlierDetection BackendServiceOutlierDetectionPtrOutput `pulumi:"outlierDetection"`
	// Name of backend port. The same name should appear in the instance
	// groups referenced by this service. Required when the load balancing
	// scheme is EXTERNAL.
	PortName pulumi.StringOutput `pulumi:"portName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The protocol this BackendService uses to communicate with backends.
	// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
	// types and may result in errors if used with the GA API.
	// Possible values are `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, and `GRPC`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The security policy associated with this backend service.
	SecurityPolicy pulumi.StringPtrOutput `pulumi:"securityPolicy"`
	// The security settings that apply to this backend service. This field is applicable to either
	// a regional backend service with the serviceProtocol set to HTTP, HTTPS, or HTTP2, and
	// loadBalancingScheme set to INTERNAL_MANAGED; or a global backend service with the
	// loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	SecuritySettings BackendServiceSecuritySettingsPtrOutput `pulumi:"securitySettings"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Type of session affinity to use. The default is NONE. Session affinity is
	// not applicable if the protocol is UDP.
	// Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, and `HTTP_COOKIE`.
	SessionAffinity pulumi.StringOutput `pulumi:"sessionAffinity"`
	// How many seconds to wait for the backend before considering it a
	// failed request. Default is 30 seconds. Valid range is [1, 86400].
	TimeoutSec pulumi.IntOutput `pulumi:"timeoutSec"`
}

// NewBackendService registers a new resource with the given unique name, arguments, and options.
func NewBackendService(ctx *pulumi.Context,
	name string, args *BackendServiceArgs, opts ...pulumi.ResourceOption) (*BackendService, error) {
	if args == nil {
		args = &BackendServiceArgs{}
	}

	var resource BackendService
	err := ctx.RegisterResource("gcp:compute/backendService:BackendService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendService gets an existing BackendService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendServiceState, opts ...pulumi.ResourceOption) (*BackendService, error) {
	var resource BackendService
	err := ctx.ReadResource("gcp:compute/backendService:BackendService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendService resources.
type backendServiceState struct {
	// Lifetime of cookies in seconds if sessionAffinity is
	// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
	// only until the end of the browser session (or equivalent). The
	// maximum allowed value for TTL is one day.
	// When the load balancing scheme is INTERNAL, this field is not used.
	AffinityCookieTtlSec *int `pulumi:"affinityCookieTtlSec"`
	// The set of backends that serve this BackendService.
	// Structure is documented below.
	Backends []BackendServiceBackend `pulumi:"backends"`
	// Cloud CDN configuration for this BackendService.
	// Structure is documented below.
	CdnPolicy *BackendServiceCdnPolicy `pulumi:"cdnPolicy"`
	// Settings controlling the volume of connections to a backend service. This field
	// is applicable only when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	CircuitBreakers *BackendServiceCircuitBreakers `pulumi:"circuitBreakers"`
	// Time for which instance will be drained (not accept new
	// connections, but still work to finish started).
	ConnectionDrainingTimeoutSec *int `pulumi:"connectionDrainingTimeoutSec"`
	// Consistent Hash-based load balancing can be used to provide soft session
	// affinity based on HTTP headers, cookies or other properties. This load balancing
	// policy is applicable only for HTTP connections. The affinity to a particular
	// destination host will be lost when one or more hosts are added/removed from the
	// destination service. This field specifies parameters that control consistent
	// hashing. This field only applies if the loadBalancingScheme is set to
	// INTERNAL_SELF_MANAGED. This field is only applicable when localityLbPolicy is
	// set to MAGLEV or RING_HASH.
	// Structure is documented below.
	ConsistentHash *BackendServiceConsistentHash `pulumi:"consistentHash"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// Headers that the HTTP/S load balancer should add to proxied
	// requests.
	CustomRequestHeaders []string `pulumi:"customRequestHeaders"`
	// Headers that the HTTP/S load balancer should add to proxied
	// responses.
	CustomResponseHeaders []string `pulumi:"customResponseHeaders"`
	// An optional description of this resource.
	// Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// If true, enable Cloud CDN for this BackendService.
	EnableCdn *bool `pulumi:"enableCdn"`
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
	Fingerprint *string `pulumi:"fingerprint"`
	// The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
	// for health checking this BackendService. Currently at most one health
	// check can be specified.
	// A health check must be specified unless the backend service uses an internet
	// or serverless NEG as a backend.
	// For internal load balancing, a URL to a HealthCheck resource must be specified instead.
	HealthChecks *string `pulumi:"healthChecks"`
	// Settings for enabling Cloud Identity Aware Proxy
	// Structure is documented below.
	Iap *BackendServiceIap `pulumi:"iap"`
	// Indicates whether the backend service will be used with internal or
	// external load balancing. A backend service created for one type of
	// load balancing cannot be used with the other. For more information, refer to
	// [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
	// Default value is `EXTERNAL`.
	// Possible values are `EXTERNAL`, `INTERNAL_SELF_MANAGED`, and `EXTERNAL_MANAGED`.
	LoadBalancingScheme *string `pulumi:"loadBalancingScheme"`
	// The load balancing algorithm used within the scope of the locality.
	// The possible values are:
	// * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
	//   is selected in round robin order.
	// * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
	//   hosts and picks the host which has fewer active requests.
	// * `RING_HASH`: The ring/modulo hash load balancer implements consistent
	//   hashing to backends. The algorithm has the property that the
	//   addition/removal of a host from a set of N hosts only affects
	//   1/N of the requests.
	// * `RANDOM`: The load balancer selects a random healthy host.
	// * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
	//   connection metadata, i.e., connections are opened
	//   to the same address as the destination address of
	//   the incoming connection before the connection
	//   was redirected to the load balancer.
	// * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
	//   Maglev is not as stable as ring hash but has faster table lookup
	//   build times and host selection times. For more information about
	//   Maglev, refer to https://ai.google/research/pubs/pub44824
	LocalityLbPolicy *string `pulumi:"localityLbPolicy"`
	// This field denotes the logging options for the load balancer traffic served by this backend service.
	// If logging is enabled, logs will be exported to Stackdriver.
	// Structure is documented below.
	LogConfig *BackendServiceLogConfig `pulumi:"logConfig"`
	// Name of the cookie.
	Name *string `pulumi:"name"`
	// Settings controlling eviction of unhealthy hosts from the load balancing pool.
	// This field is applicable only when the loadBalancingScheme is set
	// to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	OutlierDetection *BackendServiceOutlierDetection `pulumi:"outlierDetection"`
	// Name of backend port. The same name should appear in the instance
	// groups referenced by this service. Required when the load balancing
	// scheme is EXTERNAL.
	PortName *string `pulumi:"portName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The protocol this BackendService uses to communicate with backends.
	// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
	// types and may result in errors if used with the GA API.
	// Possible values are `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, and `GRPC`.
	Protocol *string `pulumi:"protocol"`
	// The security policy associated with this backend service.
	SecurityPolicy *string `pulumi:"securityPolicy"`
	// The security settings that apply to this backend service. This field is applicable to either
	// a regional backend service with the serviceProtocol set to HTTP, HTTPS, or HTTP2, and
	// loadBalancingScheme set to INTERNAL_MANAGED; or a global backend service with the
	// loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	SecuritySettings *BackendServiceSecuritySettings `pulumi:"securitySettings"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
	// Type of session affinity to use. The default is NONE. Session affinity is
	// not applicable if the protocol is UDP.
	// Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, and `HTTP_COOKIE`.
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// How many seconds to wait for the backend before considering it a
	// failed request. Default is 30 seconds. Valid range is [1, 86400].
	TimeoutSec *int `pulumi:"timeoutSec"`
}

type BackendServiceState struct {
	// Lifetime of cookies in seconds if sessionAffinity is
	// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
	// only until the end of the browser session (or equivalent). The
	// maximum allowed value for TTL is one day.
	// When the load balancing scheme is INTERNAL, this field is not used.
	AffinityCookieTtlSec pulumi.IntPtrInput
	// The set of backends that serve this BackendService.
	// Structure is documented below.
	Backends BackendServiceBackendArrayInput
	// Cloud CDN configuration for this BackendService.
	// Structure is documented below.
	CdnPolicy BackendServiceCdnPolicyPtrInput
	// Settings controlling the volume of connections to a backend service. This field
	// is applicable only when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	CircuitBreakers BackendServiceCircuitBreakersPtrInput
	// Time for which instance will be drained (not accept new
	// connections, but still work to finish started).
	ConnectionDrainingTimeoutSec pulumi.IntPtrInput
	// Consistent Hash-based load balancing can be used to provide soft session
	// affinity based on HTTP headers, cookies or other properties. This load balancing
	// policy is applicable only for HTTP connections. The affinity to a particular
	// destination host will be lost when one or more hosts are added/removed from the
	// destination service. This field specifies parameters that control consistent
	// hashing. This field only applies if the loadBalancingScheme is set to
	// INTERNAL_SELF_MANAGED. This field is only applicable when localityLbPolicy is
	// set to MAGLEV or RING_HASH.
	// Structure is documented below.
	ConsistentHash BackendServiceConsistentHashPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// Headers that the HTTP/S load balancer should add to proxied
	// requests.
	CustomRequestHeaders pulumi.StringArrayInput
	// Headers that the HTTP/S load balancer should add to proxied
	// responses.
	CustomResponseHeaders pulumi.StringArrayInput
	// An optional description of this resource.
	// Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// If true, enable Cloud CDN for this BackendService.
	EnableCdn pulumi.BoolPtrInput
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
	Fingerprint pulumi.StringPtrInput
	// The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
	// for health checking this BackendService. Currently at most one health
	// check can be specified.
	// A health check must be specified unless the backend service uses an internet
	// or serverless NEG as a backend.
	// For internal load balancing, a URL to a HealthCheck resource must be specified instead.
	HealthChecks pulumi.StringPtrInput
	// Settings for enabling Cloud Identity Aware Proxy
	// Structure is documented below.
	Iap BackendServiceIapPtrInput
	// Indicates whether the backend service will be used with internal or
	// external load balancing. A backend service created for one type of
	// load balancing cannot be used with the other. For more information, refer to
	// [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
	// Default value is `EXTERNAL`.
	// Possible values are `EXTERNAL`, `INTERNAL_SELF_MANAGED`, and `EXTERNAL_MANAGED`.
	LoadBalancingScheme pulumi.StringPtrInput
	// The load balancing algorithm used within the scope of the locality.
	// The possible values are:
	// * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
	//   is selected in round robin order.
	// * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
	//   hosts and picks the host which has fewer active requests.
	// * `RING_HASH`: The ring/modulo hash load balancer implements consistent
	//   hashing to backends. The algorithm has the property that the
	//   addition/removal of a host from a set of N hosts only affects
	//   1/N of the requests.
	// * `RANDOM`: The load balancer selects a random healthy host.
	// * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
	//   connection metadata, i.e., connections are opened
	//   to the same address as the destination address of
	//   the incoming connection before the connection
	//   was redirected to the load balancer.
	// * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
	//   Maglev is not as stable as ring hash but has faster table lookup
	//   build times and host selection times. For more information about
	//   Maglev, refer to https://ai.google/research/pubs/pub44824
	LocalityLbPolicy pulumi.StringPtrInput
	// This field denotes the logging options for the load balancer traffic served by this backend service.
	// If logging is enabled, logs will be exported to Stackdriver.
	// Structure is documented below.
	LogConfig BackendServiceLogConfigPtrInput
	// Name of the cookie.
	Name pulumi.StringPtrInput
	// Settings controlling eviction of unhealthy hosts from the load balancing pool.
	// This field is applicable only when the loadBalancingScheme is set
	// to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	OutlierDetection BackendServiceOutlierDetectionPtrInput
	// Name of backend port. The same name should appear in the instance
	// groups referenced by this service. Required when the load balancing
	// scheme is EXTERNAL.
	PortName pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The protocol this BackendService uses to communicate with backends.
	// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
	// types and may result in errors if used with the GA API.
	// Possible values are `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, and `GRPC`.
	Protocol pulumi.StringPtrInput
	// The security policy associated with this backend service.
	SecurityPolicy pulumi.StringPtrInput
	// The security settings that apply to this backend service. This field is applicable to either
	// a regional backend service with the serviceProtocol set to HTTP, HTTPS, or HTTP2, and
	// loadBalancingScheme set to INTERNAL_MANAGED; or a global backend service with the
	// loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	SecuritySettings BackendServiceSecuritySettingsPtrInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
	// Type of session affinity to use. The default is NONE. Session affinity is
	// not applicable if the protocol is UDP.
	// Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, and `HTTP_COOKIE`.
	SessionAffinity pulumi.StringPtrInput
	// How many seconds to wait for the backend before considering it a
	// failed request. Default is 30 seconds. Valid range is [1, 86400].
	TimeoutSec pulumi.IntPtrInput
}

func (BackendServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendServiceState)(nil)).Elem()
}

type backendServiceArgs struct {
	// Lifetime of cookies in seconds if sessionAffinity is
	// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
	// only until the end of the browser session (or equivalent). The
	// maximum allowed value for TTL is one day.
	// When the load balancing scheme is INTERNAL, this field is not used.
	AffinityCookieTtlSec *int `pulumi:"affinityCookieTtlSec"`
	// The set of backends that serve this BackendService.
	// Structure is documented below.
	Backends []BackendServiceBackend `pulumi:"backends"`
	// Cloud CDN configuration for this BackendService.
	// Structure is documented below.
	CdnPolicy *BackendServiceCdnPolicy `pulumi:"cdnPolicy"`
	// Settings controlling the volume of connections to a backend service. This field
	// is applicable only when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	CircuitBreakers *BackendServiceCircuitBreakers `pulumi:"circuitBreakers"`
	// Time for which instance will be drained (not accept new
	// connections, but still work to finish started).
	ConnectionDrainingTimeoutSec *int `pulumi:"connectionDrainingTimeoutSec"`
	// Consistent Hash-based load balancing can be used to provide soft session
	// affinity based on HTTP headers, cookies or other properties. This load balancing
	// policy is applicable only for HTTP connections. The affinity to a particular
	// destination host will be lost when one or more hosts are added/removed from the
	// destination service. This field specifies parameters that control consistent
	// hashing. This field only applies if the loadBalancingScheme is set to
	// INTERNAL_SELF_MANAGED. This field is only applicable when localityLbPolicy is
	// set to MAGLEV or RING_HASH.
	// Structure is documented below.
	ConsistentHash *BackendServiceConsistentHash `pulumi:"consistentHash"`
	// Headers that the HTTP/S load balancer should add to proxied
	// requests.
	CustomRequestHeaders []string `pulumi:"customRequestHeaders"`
	// Headers that the HTTP/S load balancer should add to proxied
	// responses.
	CustomResponseHeaders []string `pulumi:"customResponseHeaders"`
	// An optional description of this resource.
	// Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// If true, enable Cloud CDN for this BackendService.
	EnableCdn *bool `pulumi:"enableCdn"`
	// The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
	// for health checking this BackendService. Currently at most one health
	// check can be specified.
	// A health check must be specified unless the backend service uses an internet
	// or serverless NEG as a backend.
	// For internal load balancing, a URL to a HealthCheck resource must be specified instead.
	HealthChecks *string `pulumi:"healthChecks"`
	// Settings for enabling Cloud Identity Aware Proxy
	// Structure is documented below.
	Iap *BackendServiceIap `pulumi:"iap"`
	// Indicates whether the backend service will be used with internal or
	// external load balancing. A backend service created for one type of
	// load balancing cannot be used with the other. For more information, refer to
	// [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
	// Default value is `EXTERNAL`.
	// Possible values are `EXTERNAL`, `INTERNAL_SELF_MANAGED`, and `EXTERNAL_MANAGED`.
	LoadBalancingScheme *string `pulumi:"loadBalancingScheme"`
	// The load balancing algorithm used within the scope of the locality.
	// The possible values are:
	// * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
	//   is selected in round robin order.
	// * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
	//   hosts and picks the host which has fewer active requests.
	// * `RING_HASH`: The ring/modulo hash load balancer implements consistent
	//   hashing to backends. The algorithm has the property that the
	//   addition/removal of a host from a set of N hosts only affects
	//   1/N of the requests.
	// * `RANDOM`: The load balancer selects a random healthy host.
	// * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
	//   connection metadata, i.e., connections are opened
	//   to the same address as the destination address of
	//   the incoming connection before the connection
	//   was redirected to the load balancer.
	// * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
	//   Maglev is not as stable as ring hash but has faster table lookup
	//   build times and host selection times. For more information about
	//   Maglev, refer to https://ai.google/research/pubs/pub44824
	LocalityLbPolicy *string `pulumi:"localityLbPolicy"`
	// This field denotes the logging options for the load balancer traffic served by this backend service.
	// If logging is enabled, logs will be exported to Stackdriver.
	// Structure is documented below.
	LogConfig *BackendServiceLogConfig `pulumi:"logConfig"`
	// Name of the cookie.
	Name *string `pulumi:"name"`
	// Settings controlling eviction of unhealthy hosts from the load balancing pool.
	// This field is applicable only when the loadBalancingScheme is set
	// to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	OutlierDetection *BackendServiceOutlierDetection `pulumi:"outlierDetection"`
	// Name of backend port. The same name should appear in the instance
	// groups referenced by this service. Required when the load balancing
	// scheme is EXTERNAL.
	PortName *string `pulumi:"portName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The protocol this BackendService uses to communicate with backends.
	// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
	// types and may result in errors if used with the GA API.
	// Possible values are `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, and `GRPC`.
	Protocol *string `pulumi:"protocol"`
	// The security policy associated with this backend service.
	SecurityPolicy *string `pulumi:"securityPolicy"`
	// The security settings that apply to this backend service. This field is applicable to either
	// a regional backend service with the serviceProtocol set to HTTP, HTTPS, or HTTP2, and
	// loadBalancingScheme set to INTERNAL_MANAGED; or a global backend service with the
	// loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	SecuritySettings *BackendServiceSecuritySettings `pulumi:"securitySettings"`
	// Type of session affinity to use. The default is NONE. Session affinity is
	// not applicable if the protocol is UDP.
	// Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, and `HTTP_COOKIE`.
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// How many seconds to wait for the backend before considering it a
	// failed request. Default is 30 seconds. Valid range is [1, 86400].
	TimeoutSec *int `pulumi:"timeoutSec"`
}

// The set of arguments for constructing a BackendService resource.
type BackendServiceArgs struct {
	// Lifetime of cookies in seconds if sessionAffinity is
	// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
	// only until the end of the browser session (or equivalent). The
	// maximum allowed value for TTL is one day.
	// When the load balancing scheme is INTERNAL, this field is not used.
	AffinityCookieTtlSec pulumi.IntPtrInput
	// The set of backends that serve this BackendService.
	// Structure is documented below.
	Backends BackendServiceBackendArrayInput
	// Cloud CDN configuration for this BackendService.
	// Structure is documented below.
	CdnPolicy BackendServiceCdnPolicyPtrInput
	// Settings controlling the volume of connections to a backend service. This field
	// is applicable only when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	CircuitBreakers BackendServiceCircuitBreakersPtrInput
	// Time for which instance will be drained (not accept new
	// connections, but still work to finish started).
	ConnectionDrainingTimeoutSec pulumi.IntPtrInput
	// Consistent Hash-based load balancing can be used to provide soft session
	// affinity based on HTTP headers, cookies or other properties. This load balancing
	// policy is applicable only for HTTP connections. The affinity to a particular
	// destination host will be lost when one or more hosts are added/removed from the
	// destination service. This field specifies parameters that control consistent
	// hashing. This field only applies if the loadBalancingScheme is set to
	// INTERNAL_SELF_MANAGED. This field is only applicable when localityLbPolicy is
	// set to MAGLEV or RING_HASH.
	// Structure is documented below.
	ConsistentHash BackendServiceConsistentHashPtrInput
	// Headers that the HTTP/S load balancer should add to proxied
	// requests.
	CustomRequestHeaders pulumi.StringArrayInput
	// Headers that the HTTP/S load balancer should add to proxied
	// responses.
	CustomResponseHeaders pulumi.StringArrayInput
	// An optional description of this resource.
	// Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// If true, enable Cloud CDN for this BackendService.
	EnableCdn pulumi.BoolPtrInput
	// The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
	// for health checking this BackendService. Currently at most one health
	// check can be specified.
	// A health check must be specified unless the backend service uses an internet
	// or serverless NEG as a backend.
	// For internal load balancing, a URL to a HealthCheck resource must be specified instead.
	HealthChecks pulumi.StringPtrInput
	// Settings for enabling Cloud Identity Aware Proxy
	// Structure is documented below.
	Iap BackendServiceIapPtrInput
	// Indicates whether the backend service will be used with internal or
	// external load balancing. A backend service created for one type of
	// load balancing cannot be used with the other. For more information, refer to
	// [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
	// Default value is `EXTERNAL`.
	// Possible values are `EXTERNAL`, `INTERNAL_SELF_MANAGED`, and `EXTERNAL_MANAGED`.
	LoadBalancingScheme pulumi.StringPtrInput
	// The load balancing algorithm used within the scope of the locality.
	// The possible values are:
	// * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
	//   is selected in round robin order.
	// * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
	//   hosts and picks the host which has fewer active requests.
	// * `RING_HASH`: The ring/modulo hash load balancer implements consistent
	//   hashing to backends. The algorithm has the property that the
	//   addition/removal of a host from a set of N hosts only affects
	//   1/N of the requests.
	// * `RANDOM`: The load balancer selects a random healthy host.
	// * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
	//   connection metadata, i.e., connections are opened
	//   to the same address as the destination address of
	//   the incoming connection before the connection
	//   was redirected to the load balancer.
	// * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
	//   Maglev is not as stable as ring hash but has faster table lookup
	//   build times and host selection times. For more information about
	//   Maglev, refer to https://ai.google/research/pubs/pub44824
	LocalityLbPolicy pulumi.StringPtrInput
	// This field denotes the logging options for the load balancer traffic served by this backend service.
	// If logging is enabled, logs will be exported to Stackdriver.
	// Structure is documented below.
	LogConfig BackendServiceLogConfigPtrInput
	// Name of the cookie.
	Name pulumi.StringPtrInput
	// Settings controlling eviction of unhealthy hosts from the load balancing pool.
	// This field is applicable only when the loadBalancingScheme is set
	// to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	OutlierDetection BackendServiceOutlierDetectionPtrInput
	// Name of backend port. The same name should appear in the instance
	// groups referenced by this service. Required when the load balancing
	// scheme is EXTERNAL.
	PortName pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The protocol this BackendService uses to communicate with backends.
	// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
	// types and may result in errors if used with the GA API.
	// Possible values are `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, and `GRPC`.
	Protocol pulumi.StringPtrInput
	// The security policy associated with this backend service.
	SecurityPolicy pulumi.StringPtrInput
	// The security settings that apply to this backend service. This field is applicable to either
	// a regional backend service with the serviceProtocol set to HTTP, HTTPS, or HTTP2, and
	// loadBalancingScheme set to INTERNAL_MANAGED; or a global backend service with the
	// loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	SecuritySettings BackendServiceSecuritySettingsPtrInput
	// Type of session affinity to use. The default is NONE. Session affinity is
	// not applicable if the protocol is UDP.
	// Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, and `HTTP_COOKIE`.
	SessionAffinity pulumi.StringPtrInput
	// How many seconds to wait for the backend before considering it a
	// failed request. Default is 30 seconds. Valid range is [1, 86400].
	TimeoutSec pulumi.IntPtrInput
}

func (BackendServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendServiceArgs)(nil)).Elem()
}

type BackendServiceInput interface {
	pulumi.Input

	ToBackendServiceOutput() BackendServiceOutput
	ToBackendServiceOutputWithContext(ctx context.Context) BackendServiceOutput
}

func (*BackendService) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendService)(nil)).Elem()
}

func (i *BackendService) ToBackendServiceOutput() BackendServiceOutput {
	return i.ToBackendServiceOutputWithContext(context.Background())
}

func (i *BackendService) ToBackendServiceOutputWithContext(ctx context.Context) BackendServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceOutput)
}

// BackendServiceArrayInput is an input type that accepts BackendServiceArray and BackendServiceArrayOutput values.
// You can construct a concrete instance of `BackendServiceArrayInput` via:
//
//          BackendServiceArray{ BackendServiceArgs{...} }
type BackendServiceArrayInput interface {
	pulumi.Input

	ToBackendServiceArrayOutput() BackendServiceArrayOutput
	ToBackendServiceArrayOutputWithContext(context.Context) BackendServiceArrayOutput
}

type BackendServiceArray []BackendServiceInput

func (BackendServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendService)(nil)).Elem()
}

func (i BackendServiceArray) ToBackendServiceArrayOutput() BackendServiceArrayOutput {
	return i.ToBackendServiceArrayOutputWithContext(context.Background())
}

func (i BackendServiceArray) ToBackendServiceArrayOutputWithContext(ctx context.Context) BackendServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceArrayOutput)
}

// BackendServiceMapInput is an input type that accepts BackendServiceMap and BackendServiceMapOutput values.
// You can construct a concrete instance of `BackendServiceMapInput` via:
//
//          BackendServiceMap{ "key": BackendServiceArgs{...} }
type BackendServiceMapInput interface {
	pulumi.Input

	ToBackendServiceMapOutput() BackendServiceMapOutput
	ToBackendServiceMapOutputWithContext(context.Context) BackendServiceMapOutput
}

type BackendServiceMap map[string]BackendServiceInput

func (BackendServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendService)(nil)).Elem()
}

func (i BackendServiceMap) ToBackendServiceMapOutput() BackendServiceMapOutput {
	return i.ToBackendServiceMapOutputWithContext(context.Background())
}

func (i BackendServiceMap) ToBackendServiceMapOutputWithContext(ctx context.Context) BackendServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceMapOutput)
}

type BackendServiceOutput struct{ *pulumi.OutputState }

func (BackendServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendService)(nil)).Elem()
}

func (o BackendServiceOutput) ToBackendServiceOutput() BackendServiceOutput {
	return o
}

func (o BackendServiceOutput) ToBackendServiceOutputWithContext(ctx context.Context) BackendServiceOutput {
	return o
}

// Lifetime of cookies in seconds if sessionAffinity is
// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
// only until the end of the browser session (or equivalent). The
// maximum allowed value for TTL is one day.
// When the load balancing scheme is INTERNAL, this field is not used.
func (o BackendServiceOutput) AffinityCookieTtlSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendService) pulumi.IntPtrOutput { return v.AffinityCookieTtlSec }).(pulumi.IntPtrOutput)
}

// The set of backends that serve this BackendService.
// Structure is documented below.
func (o BackendServiceOutput) Backends() BackendServiceBackendArrayOutput {
	return o.ApplyT(func(v *BackendService) BackendServiceBackendArrayOutput { return v.Backends }).(BackendServiceBackendArrayOutput)
}

// Cloud CDN configuration for this BackendService.
// Structure is documented below.
func (o BackendServiceOutput) CdnPolicy() BackendServiceCdnPolicyOutput {
	return o.ApplyT(func(v *BackendService) BackendServiceCdnPolicyOutput { return v.CdnPolicy }).(BackendServiceCdnPolicyOutput)
}

// Settings controlling the volume of connections to a backend service. This field
// is applicable only when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
// Structure is documented below.
func (o BackendServiceOutput) CircuitBreakers() BackendServiceCircuitBreakersPtrOutput {
	return o.ApplyT(func(v *BackendService) BackendServiceCircuitBreakersPtrOutput { return v.CircuitBreakers }).(BackendServiceCircuitBreakersPtrOutput)
}

// Time for which instance will be drained (not accept new
// connections, but still work to finish started).
func (o BackendServiceOutput) ConnectionDrainingTimeoutSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendService) pulumi.IntPtrOutput { return v.ConnectionDrainingTimeoutSec }).(pulumi.IntPtrOutput)
}

// Consistent Hash-based load balancing can be used to provide soft session
// affinity based on HTTP headers, cookies or other properties. This load balancing
// policy is applicable only for HTTP connections. The affinity to a particular
// destination host will be lost when one or more hosts are added/removed from the
// destination service. This field specifies parameters that control consistent
// hashing. This field only applies if the loadBalancingScheme is set to
// INTERNAL_SELF_MANAGED. This field is only applicable when localityLbPolicy is
// set to MAGLEV or RING_HASH.
// Structure is documented below.
func (o BackendServiceOutput) ConsistentHash() BackendServiceConsistentHashPtrOutput {
	return o.ApplyT(func(v *BackendService) BackendServiceConsistentHashPtrOutput { return v.ConsistentHash }).(BackendServiceConsistentHashPtrOutput)
}

// Creation timestamp in RFC3339 text format.
func (o BackendServiceOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendService) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// Headers that the HTTP/S load balancer should add to proxied
// requests.
func (o BackendServiceOutput) CustomRequestHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendService) pulumi.StringArrayOutput { return v.CustomRequestHeaders }).(pulumi.StringArrayOutput)
}

// Headers that the HTTP/S load balancer should add to proxied
// responses.
func (o BackendServiceOutput) CustomResponseHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendService) pulumi.StringArrayOutput { return v.CustomResponseHeaders }).(pulumi.StringArrayOutput)
}

// An optional description of this resource.
// Provide this property when you create the resource.
func (o BackendServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendService) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// If true, enable Cloud CDN for this BackendService.
func (o BackendServiceOutput) EnableCdn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendService) pulumi.BoolPtrOutput { return v.EnableCdn }).(pulumi.BoolPtrOutput)
}

// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
func (o BackendServiceOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendService) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
// for health checking this BackendService. Currently at most one health
// check can be specified.
// A health check must be specified unless the backend service uses an internet
// or serverless NEG as a backend.
// For internal load balancing, a URL to a HealthCheck resource must be specified instead.
func (o BackendServiceOutput) HealthChecks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendService) pulumi.StringPtrOutput { return v.HealthChecks }).(pulumi.StringPtrOutput)
}

// Settings for enabling Cloud Identity Aware Proxy
// Structure is documented below.
func (o BackendServiceOutput) Iap() BackendServiceIapPtrOutput {
	return o.ApplyT(func(v *BackendService) BackendServiceIapPtrOutput { return v.Iap }).(BackendServiceIapPtrOutput)
}

// Indicates whether the backend service will be used with internal or
// external load balancing. A backend service created for one type of
// load balancing cannot be used with the other. For more information, refer to
// [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
// Default value is `EXTERNAL`.
// Possible values are `EXTERNAL`, `INTERNAL_SELF_MANAGED`, and `EXTERNAL_MANAGED`.
func (o BackendServiceOutput) LoadBalancingScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendService) pulumi.StringPtrOutput { return v.LoadBalancingScheme }).(pulumi.StringPtrOutput)
}

// The load balancing algorithm used within the scope of the locality.
// The possible values are:
// * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
//   is selected in round robin order.
// * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
//   hosts and picks the host which has fewer active requests.
// * `RING_HASH`: The ring/modulo hash load balancer implements consistent
//   hashing to backends. The algorithm has the property that the
//   addition/removal of a host from a set of N hosts only affects
//   1/N of the requests.
// * `RANDOM`: The load balancer selects a random healthy host.
// * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
//   connection metadata, i.e., connections are opened
//   to the same address as the destination address of
//   the incoming connection before the connection
//   was redirected to the load balancer.
// * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
//   Maglev is not as stable as ring hash but has faster table lookup
//   build times and host selection times. For more information about
//   Maglev, refer to https://ai.google/research/pubs/pub44824
func (o BackendServiceOutput) LocalityLbPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendService) pulumi.StringPtrOutput { return v.LocalityLbPolicy }).(pulumi.StringPtrOutput)
}

// This field denotes the logging options for the load balancer traffic served by this backend service.
// If logging is enabled, logs will be exported to Stackdriver.
// Structure is documented below.
func (o BackendServiceOutput) LogConfig() BackendServiceLogConfigOutput {
	return o.ApplyT(func(v *BackendService) BackendServiceLogConfigOutput { return v.LogConfig }).(BackendServiceLogConfigOutput)
}

// Name of the cookie.
func (o BackendServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Settings controlling eviction of unhealthy hosts from the load balancing pool.
// This field is applicable only when the loadBalancingScheme is set
// to INTERNAL_SELF_MANAGED.
// Structure is documented below.
func (o BackendServiceOutput) OutlierDetection() BackendServiceOutlierDetectionPtrOutput {
	return o.ApplyT(func(v *BackendService) BackendServiceOutlierDetectionPtrOutput { return v.OutlierDetection }).(BackendServiceOutlierDetectionPtrOutput)
}

// Name of backend port. The same name should appear in the instance
// groups referenced by this service. Required when the load balancing
// scheme is EXTERNAL.
func (o BackendServiceOutput) PortName() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendService) pulumi.StringOutput { return v.PortName }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o BackendServiceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendService) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The protocol this BackendService uses to communicate with backends.
// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
// types and may result in errors if used with the GA API.
// Possible values are `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, and `GRPC`.
func (o BackendServiceOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendService) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The security policy associated with this backend service.
func (o BackendServiceOutput) SecurityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendService) pulumi.StringPtrOutput { return v.SecurityPolicy }).(pulumi.StringPtrOutput)
}

// The security settings that apply to this backend service. This field is applicable to either
// a regional backend service with the serviceProtocol set to HTTP, HTTPS, or HTTP2, and
// loadBalancingScheme set to INTERNAL_MANAGED; or a global backend service with the
// loadBalancingScheme set to INTERNAL_SELF_MANAGED.
// Structure is documented below.
func (o BackendServiceOutput) SecuritySettings() BackendServiceSecuritySettingsPtrOutput {
	return o.ApplyT(func(v *BackendService) BackendServiceSecuritySettingsPtrOutput { return v.SecuritySettings }).(BackendServiceSecuritySettingsPtrOutput)
}

// The URI of the created resource.
func (o BackendServiceOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendService) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Type of session affinity to use. The default is NONE. Session affinity is
// not applicable if the protocol is UDP.
// Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, and `HTTP_COOKIE`.
func (o BackendServiceOutput) SessionAffinity() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendService) pulumi.StringOutput { return v.SessionAffinity }).(pulumi.StringOutput)
}

// How many seconds to wait for the backend before considering it a
// failed request. Default is 30 seconds. Valid range is [1, 86400].
func (o BackendServiceOutput) TimeoutSec() pulumi.IntOutput {
	return o.ApplyT(func(v *BackendService) pulumi.IntOutput { return v.TimeoutSec }).(pulumi.IntOutput)
}

type BackendServiceArrayOutput struct{ *pulumi.OutputState }

func (BackendServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendService)(nil)).Elem()
}

func (o BackendServiceArrayOutput) ToBackendServiceArrayOutput() BackendServiceArrayOutput {
	return o
}

func (o BackendServiceArrayOutput) ToBackendServiceArrayOutputWithContext(ctx context.Context) BackendServiceArrayOutput {
	return o
}

func (o BackendServiceArrayOutput) Index(i pulumi.IntInput) BackendServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackendService {
		return vs[0].([]*BackendService)[vs[1].(int)]
	}).(BackendServiceOutput)
}

type BackendServiceMapOutput struct{ *pulumi.OutputState }

func (BackendServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendService)(nil)).Elem()
}

func (o BackendServiceMapOutput) ToBackendServiceMapOutput() BackendServiceMapOutput {
	return o
}

func (o BackendServiceMapOutput) ToBackendServiceMapOutputWithContext(ctx context.Context) BackendServiceMapOutput {
	return o
}

func (o BackendServiceMapOutput) MapIndex(k pulumi.StringInput) BackendServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackendService {
		return vs[0].(map[string]*BackendService)[vs[1].(string)]
	}).(BackendServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendServiceInput)(nil)).Elem(), &BackendService{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendServiceArrayInput)(nil)).Elem(), BackendServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendServiceMapInput)(nil)).Elem(), BackendServiceMap{})
	pulumi.RegisterOutputType(BackendServiceOutput{})
	pulumi.RegisterOutputType(BackendServiceArrayOutput{})
	pulumi.RegisterOutputType(BackendServiceMapOutput{})
}
