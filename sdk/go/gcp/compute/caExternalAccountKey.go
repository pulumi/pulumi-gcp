// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A representation of an ExternalAccountKey used for external account binding within ACME.
//
// To get more information about ExternalAccountKey, see:
//
// * [API documentation](https://cloud.google.com/certificate-manager/docs/reference/public-ca/rest/v1/projects.locations.externalAccountKeys/create)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/certificate-manager/docs/public-ca)
//   - [Request EAB key ID and HMAC](https://cloud.google.com/certificate-manager/docs/public-ca-tutorial#request-key-hmac)
//   - [Request Certificate Using Public CA](https://cloud.google.com/certificate-manager/docs/public-ca-tutorial)
//
// > **Warning:** This resource is create-only and could not be read from the API.
// On delete, the resource would be removed from the state.
// You must use an EAB secret within 7 days of obtaining it.
// The EAB secret is invalidated if you don't use it within 7 days.
// The ACME account registered by using an EAB secret has no expiration.
//
// > **Warning:** All arguments including the following potentially sensitive
// values will be stored in the raw state as plain text: `keyId`, `b64MacKey`.
// Read more about sensitive data in state.
//
// ## Example Usage
// ### Public Ca External Account Key
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewCaExternalAccountKey(ctx, "prod", &compute.CaExternalAccountKeyArgs{
//				Project: pulumi.String("my-project-name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource does not support import.
type CaExternalAccountKey struct {
	pulumi.CustomResourceState

	// Base64-URL-encoded HS256 key. It is generated by the PublicCertificateAuthorityService
	// when the ExternalAccountKey is created.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	B64MacKey pulumi.StringOutput `pulumi:"b64MacKey"`
	// It is generated by the PublicCertificateAuthorityService when the ExternalAccountKey is created.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// Location for the externalAccountKey. Currently only `global` is supported.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Resource name. projects/{project}/locations/{location}/externalAccountKeys/{keyId}.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewCaExternalAccountKey registers a new resource with the given unique name, arguments, and options.
func NewCaExternalAccountKey(ctx *pulumi.Context,
	name string, args *CaExternalAccountKeyArgs, opts ...pulumi.ResourceOption) (*CaExternalAccountKey, error) {
	if args == nil {
		args = &CaExternalAccountKeyArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"b64MacKey",
		"keyId",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CaExternalAccountKey
	err := ctx.RegisterResource("gcp:compute/caExternalAccountKey:CaExternalAccountKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCaExternalAccountKey gets an existing CaExternalAccountKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCaExternalAccountKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CaExternalAccountKeyState, opts ...pulumi.ResourceOption) (*CaExternalAccountKey, error) {
	var resource CaExternalAccountKey
	err := ctx.ReadResource("gcp:compute/caExternalAccountKey:CaExternalAccountKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CaExternalAccountKey resources.
type caExternalAccountKeyState struct {
	// Base64-URL-encoded HS256 key. It is generated by the PublicCertificateAuthorityService
	// when the ExternalAccountKey is created.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	B64MacKey *string `pulumi:"b64MacKey"`
	// It is generated by the PublicCertificateAuthorityService when the ExternalAccountKey is created.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	KeyId *string `pulumi:"keyId"`
	// Location for the externalAccountKey. Currently only `global` is supported.
	Location *string `pulumi:"location"`
	// Resource name. projects/{project}/locations/{location}/externalAccountKeys/{keyId}.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

type CaExternalAccountKeyState struct {
	// Base64-URL-encoded HS256 key. It is generated by the PublicCertificateAuthorityService
	// when the ExternalAccountKey is created.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	B64MacKey pulumi.StringPtrInput
	// It is generated by the PublicCertificateAuthorityService when the ExternalAccountKey is created.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	KeyId pulumi.StringPtrInput
	// Location for the externalAccountKey. Currently only `global` is supported.
	Location pulumi.StringPtrInput
	// Resource name. projects/{project}/locations/{location}/externalAccountKeys/{keyId}.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (CaExternalAccountKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*caExternalAccountKeyState)(nil)).Elem()
}

type caExternalAccountKeyArgs struct {
	// Location for the externalAccountKey. Currently only `global` is supported.
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a CaExternalAccountKey resource.
type CaExternalAccountKeyArgs struct {
	// Location for the externalAccountKey. Currently only `global` is supported.
	Location pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (CaExternalAccountKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*caExternalAccountKeyArgs)(nil)).Elem()
}

type CaExternalAccountKeyInput interface {
	pulumi.Input

	ToCaExternalAccountKeyOutput() CaExternalAccountKeyOutput
	ToCaExternalAccountKeyOutputWithContext(ctx context.Context) CaExternalAccountKeyOutput
}

func (*CaExternalAccountKey) ElementType() reflect.Type {
	return reflect.TypeOf((**CaExternalAccountKey)(nil)).Elem()
}

func (i *CaExternalAccountKey) ToCaExternalAccountKeyOutput() CaExternalAccountKeyOutput {
	return i.ToCaExternalAccountKeyOutputWithContext(context.Background())
}

func (i *CaExternalAccountKey) ToCaExternalAccountKeyOutputWithContext(ctx context.Context) CaExternalAccountKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaExternalAccountKeyOutput)
}

// CaExternalAccountKeyArrayInput is an input type that accepts CaExternalAccountKeyArray and CaExternalAccountKeyArrayOutput values.
// You can construct a concrete instance of `CaExternalAccountKeyArrayInput` via:
//
//	CaExternalAccountKeyArray{ CaExternalAccountKeyArgs{...} }
type CaExternalAccountKeyArrayInput interface {
	pulumi.Input

	ToCaExternalAccountKeyArrayOutput() CaExternalAccountKeyArrayOutput
	ToCaExternalAccountKeyArrayOutputWithContext(context.Context) CaExternalAccountKeyArrayOutput
}

type CaExternalAccountKeyArray []CaExternalAccountKeyInput

func (CaExternalAccountKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CaExternalAccountKey)(nil)).Elem()
}

func (i CaExternalAccountKeyArray) ToCaExternalAccountKeyArrayOutput() CaExternalAccountKeyArrayOutput {
	return i.ToCaExternalAccountKeyArrayOutputWithContext(context.Background())
}

func (i CaExternalAccountKeyArray) ToCaExternalAccountKeyArrayOutputWithContext(ctx context.Context) CaExternalAccountKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaExternalAccountKeyArrayOutput)
}

// CaExternalAccountKeyMapInput is an input type that accepts CaExternalAccountKeyMap and CaExternalAccountKeyMapOutput values.
// You can construct a concrete instance of `CaExternalAccountKeyMapInput` via:
//
//	CaExternalAccountKeyMap{ "key": CaExternalAccountKeyArgs{...} }
type CaExternalAccountKeyMapInput interface {
	pulumi.Input

	ToCaExternalAccountKeyMapOutput() CaExternalAccountKeyMapOutput
	ToCaExternalAccountKeyMapOutputWithContext(context.Context) CaExternalAccountKeyMapOutput
}

type CaExternalAccountKeyMap map[string]CaExternalAccountKeyInput

func (CaExternalAccountKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CaExternalAccountKey)(nil)).Elem()
}

func (i CaExternalAccountKeyMap) ToCaExternalAccountKeyMapOutput() CaExternalAccountKeyMapOutput {
	return i.ToCaExternalAccountKeyMapOutputWithContext(context.Background())
}

func (i CaExternalAccountKeyMap) ToCaExternalAccountKeyMapOutputWithContext(ctx context.Context) CaExternalAccountKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaExternalAccountKeyMapOutput)
}

type CaExternalAccountKeyOutput struct{ *pulumi.OutputState }

func (CaExternalAccountKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CaExternalAccountKey)(nil)).Elem()
}

func (o CaExternalAccountKeyOutput) ToCaExternalAccountKeyOutput() CaExternalAccountKeyOutput {
	return o
}

func (o CaExternalAccountKeyOutput) ToCaExternalAccountKeyOutputWithContext(ctx context.Context) CaExternalAccountKeyOutput {
	return o
}

// Base64-URL-encoded HS256 key. It is generated by the PublicCertificateAuthorityService
// when the ExternalAccountKey is created.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o CaExternalAccountKeyOutput) B64MacKey() pulumi.StringOutput {
	return o.ApplyT(func(v *CaExternalAccountKey) pulumi.StringOutput { return v.B64MacKey }).(pulumi.StringOutput)
}

// It is generated by the PublicCertificateAuthorityService when the ExternalAccountKey is created.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o CaExternalAccountKeyOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *CaExternalAccountKey) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

// Location for the externalAccountKey. Currently only `global` is supported.
func (o CaExternalAccountKeyOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaExternalAccountKey) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Resource name. projects/{project}/locations/{location}/externalAccountKeys/{keyId}.
func (o CaExternalAccountKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CaExternalAccountKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o CaExternalAccountKeyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CaExternalAccountKey) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type CaExternalAccountKeyArrayOutput struct{ *pulumi.OutputState }

func (CaExternalAccountKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CaExternalAccountKey)(nil)).Elem()
}

func (o CaExternalAccountKeyArrayOutput) ToCaExternalAccountKeyArrayOutput() CaExternalAccountKeyArrayOutput {
	return o
}

func (o CaExternalAccountKeyArrayOutput) ToCaExternalAccountKeyArrayOutputWithContext(ctx context.Context) CaExternalAccountKeyArrayOutput {
	return o
}

func (o CaExternalAccountKeyArrayOutput) Index(i pulumi.IntInput) CaExternalAccountKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CaExternalAccountKey {
		return vs[0].([]*CaExternalAccountKey)[vs[1].(int)]
	}).(CaExternalAccountKeyOutput)
}

type CaExternalAccountKeyMapOutput struct{ *pulumi.OutputState }

func (CaExternalAccountKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CaExternalAccountKey)(nil)).Elem()
}

func (o CaExternalAccountKeyMapOutput) ToCaExternalAccountKeyMapOutput() CaExternalAccountKeyMapOutput {
	return o
}

func (o CaExternalAccountKeyMapOutput) ToCaExternalAccountKeyMapOutputWithContext(ctx context.Context) CaExternalAccountKeyMapOutput {
	return o
}

func (o CaExternalAccountKeyMapOutput) MapIndex(k pulumi.StringInput) CaExternalAccountKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CaExternalAccountKey {
		return vs[0].(map[string]*CaExternalAccountKey)[vs[1].(string)]
	}).(CaExternalAccountKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CaExternalAccountKeyInput)(nil)).Elem(), &CaExternalAccountKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaExternalAccountKeyArrayInput)(nil)).Elem(), CaExternalAccountKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaExternalAccountKeyMapInput)(nil)).Elem(), CaExternalAccountKeyMap{})
	pulumi.RegisterOutputType(CaExternalAccountKeyOutput{})
	pulumi.RegisterOutputType(CaExternalAccountKeyArrayOutput{})
	pulumi.RegisterOutputType(CaExternalAccountKeyMapOutput{})
}
