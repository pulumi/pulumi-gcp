// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates an SSL certificate resource necessary for HTTPS load balancing in GCE.
// For more information see
// [the official documentation](https://cloud.google.com/compute/docs/load-balancing/http/ssl-certificates) and
// [API](https://cloud.google.com/compute/docs/reference/latest/sslCertificates).
// 
type SSLCertificate struct {
	s *pulumi.ResourceState
}

// NewSSLCertificate registers a new resource with the given unique name, arguments, and options.
func NewSSLCertificate(ctx *pulumi.Context,
	name string, args *SSLCertificateArgs, opts ...pulumi.ResourceOpt) (*SSLCertificate, error) {
	if args == nil || args.Certificate == nil {
		return nil, errors.New("missing required argument 'Certificate'")
	}
	if args == nil || args.PrivateKey == nil {
		return nil, errors.New("missing required argument 'PrivateKey'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["certificate"] = nil
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["namePrefix"] = nil
		inputs["privateKey"] = nil
		inputs["project"] = nil
	} else {
		inputs["certificate"] = args.Certificate
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["namePrefix"] = args.NamePrefix
		inputs["privateKey"] = args.PrivateKey
		inputs["project"] = args.Project
	}
	inputs["certificateId"] = nil
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/sSLCertificate:SSLCertificate", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SSLCertificate{s: s}, nil
}

// GetSSLCertificate gets an existing SSLCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSSLCertificate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SSLCertificateState, opts ...pulumi.ResourceOpt) (*SSLCertificate, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["certificate"] = state.Certificate
		inputs["certificateId"] = state.CertificateId
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["namePrefix"] = state.NamePrefix
		inputs["privateKey"] = state.PrivateKey
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
	}
	s, err := ctx.ReadResource("gcp:compute/sSLCertificate:SSLCertificate", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SSLCertificate{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SSLCertificate) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SSLCertificate) ID() *pulumi.IDOutput {
	return r.s.ID
}

// A local certificate file in PEM format. The chain
// may be at most 5 certs long, and must include at least one intermediate
// cert. Changing this forces a new resource to be created.
func (r *SSLCertificate) Certificate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["certificate"])
}

// A unique ID for the certificate, assigned by GCE.
func (r *SSLCertificate) CertificateId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["certificateId"])
}

// An optional description of this resource.
// Changing this forces a new resource to be created.
func (r *SSLCertificate) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// A unique name for the SSL certificate. If you leave
// this blank, Terraform will auto-generate a unique name.
func (r *SSLCertificate) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Creates a unique name beginning with the specified
// prefix. Conflicts with `name`.
func (r *SSLCertificate) NamePrefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["namePrefix"])
}

// Write only private key in PEM format.
// Changing this forces a new resource to be created.
func (r *SSLCertificate) PrivateKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["privateKey"])
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (r *SSLCertificate) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The URI of the created resource.
func (r *SSLCertificate) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// Input properties used for looking up and filtering SSLCertificate resources.
type SSLCertificateState struct {
	// A local certificate file in PEM format. The chain
	// may be at most 5 certs long, and must include at least one intermediate
	// cert. Changing this forces a new resource to be created.
	Certificate interface{}
	// A unique ID for the certificate, assigned by GCE.
	CertificateId interface{}
	// An optional description of this resource.
	// Changing this forces a new resource to be created.
	Description interface{}
	// A unique name for the SSL certificate. If you leave
	// this blank, Terraform will auto-generate a unique name.
	Name interface{}
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix interface{}
	// Write only private key in PEM format.
	// Changing this forces a new resource to be created.
	PrivateKey interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// The URI of the created resource.
	SelfLink interface{}
}

// The set of arguments for constructing a SSLCertificate resource.
type SSLCertificateArgs struct {
	// A local certificate file in PEM format. The chain
	// may be at most 5 certs long, and must include at least one intermediate
	// cert. Changing this forces a new resource to be created.
	Certificate interface{}
	// An optional description of this resource.
	// Changing this forces a new resource to be created.
	Description interface{}
	// A unique name for the SSL certificate. If you leave
	// this blank, Terraform will auto-generate a unique name.
	Name interface{}
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix interface{}
	// Write only private key in PEM format.
	// Changing this forces a new resource to be created.
	PrivateKey interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
}
