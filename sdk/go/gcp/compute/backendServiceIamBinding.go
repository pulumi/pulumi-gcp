// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BackendServiceIamBinding struct {
	pulumi.CustomResourceState

	Condition BackendServiceIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag      pulumi.StringOutput                        `pulumi:"etag"`
	Members   pulumi.StringArrayOutput                   `pulumi:"members"`
	Name      pulumi.StringOutput                        `pulumi:"name"`
	Project   pulumi.StringOutput                        `pulumi:"project"`
	Role      pulumi.StringOutput                        `pulumi:"role"`
}

// NewBackendServiceIamBinding registers a new resource with the given unique name, arguments, and options.
func NewBackendServiceIamBinding(ctx *pulumi.Context,
	name string, args *BackendServiceIamBindingArgs, opts ...pulumi.ResourceOption) (*BackendServiceIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource BackendServiceIamBinding
	err := ctx.RegisterResource("gcp:compute/backendServiceIamBinding:BackendServiceIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendServiceIamBinding gets an existing BackendServiceIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendServiceIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendServiceIamBindingState, opts ...pulumi.ResourceOption) (*BackendServiceIamBinding, error) {
	var resource BackendServiceIamBinding
	err := ctx.ReadResource("gcp:compute/backendServiceIamBinding:BackendServiceIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendServiceIamBinding resources.
type backendServiceIamBindingState struct {
	Condition *BackendServiceIamBindingCondition `pulumi:"condition"`
	Etag      *string                            `pulumi:"etag"`
	Members   []string                           `pulumi:"members"`
	Name      *string                            `pulumi:"name"`
	Project   *string                            `pulumi:"project"`
	Role      *string                            `pulumi:"role"`
}

type BackendServiceIamBindingState struct {
	Condition BackendServiceIamBindingConditionPtrInput
	Etag      pulumi.StringPtrInput
	Members   pulumi.StringArrayInput
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringPtrInput
}

func (BackendServiceIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendServiceIamBindingState)(nil)).Elem()
}

type backendServiceIamBindingArgs struct {
	Condition *BackendServiceIamBindingCondition `pulumi:"condition"`
	Members   []string                           `pulumi:"members"`
	Name      *string                            `pulumi:"name"`
	Project   *string                            `pulumi:"project"`
	Role      string                             `pulumi:"role"`
}

// The set of arguments for constructing a BackendServiceIamBinding resource.
type BackendServiceIamBindingArgs struct {
	Condition BackendServiceIamBindingConditionPtrInput
	Members   pulumi.StringArrayInput
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	Role      pulumi.StringInput
}

func (BackendServiceIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendServiceIamBindingArgs)(nil)).Elem()
}

type BackendServiceIamBindingInput interface {
	pulumi.Input

	ToBackendServiceIamBindingOutput() BackendServiceIamBindingOutput
	ToBackendServiceIamBindingOutputWithContext(ctx context.Context) BackendServiceIamBindingOutput
}

func (*BackendServiceIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceIamBinding)(nil)).Elem()
}

func (i *BackendServiceIamBinding) ToBackendServiceIamBindingOutput() BackendServiceIamBindingOutput {
	return i.ToBackendServiceIamBindingOutputWithContext(context.Background())
}

func (i *BackendServiceIamBinding) ToBackendServiceIamBindingOutputWithContext(ctx context.Context) BackendServiceIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIamBindingOutput)
}

// BackendServiceIamBindingArrayInput is an input type that accepts BackendServiceIamBindingArray and BackendServiceIamBindingArrayOutput values.
// You can construct a concrete instance of `BackendServiceIamBindingArrayInput` via:
//
//          BackendServiceIamBindingArray{ BackendServiceIamBindingArgs{...} }
type BackendServiceIamBindingArrayInput interface {
	pulumi.Input

	ToBackendServiceIamBindingArrayOutput() BackendServiceIamBindingArrayOutput
	ToBackendServiceIamBindingArrayOutputWithContext(context.Context) BackendServiceIamBindingArrayOutput
}

type BackendServiceIamBindingArray []BackendServiceIamBindingInput

func (BackendServiceIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendServiceIamBinding)(nil)).Elem()
}

func (i BackendServiceIamBindingArray) ToBackendServiceIamBindingArrayOutput() BackendServiceIamBindingArrayOutput {
	return i.ToBackendServiceIamBindingArrayOutputWithContext(context.Background())
}

func (i BackendServiceIamBindingArray) ToBackendServiceIamBindingArrayOutputWithContext(ctx context.Context) BackendServiceIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIamBindingArrayOutput)
}

// BackendServiceIamBindingMapInput is an input type that accepts BackendServiceIamBindingMap and BackendServiceIamBindingMapOutput values.
// You can construct a concrete instance of `BackendServiceIamBindingMapInput` via:
//
//          BackendServiceIamBindingMap{ "key": BackendServiceIamBindingArgs{...} }
type BackendServiceIamBindingMapInput interface {
	pulumi.Input

	ToBackendServiceIamBindingMapOutput() BackendServiceIamBindingMapOutput
	ToBackendServiceIamBindingMapOutputWithContext(context.Context) BackendServiceIamBindingMapOutput
}

type BackendServiceIamBindingMap map[string]BackendServiceIamBindingInput

func (BackendServiceIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendServiceIamBinding)(nil)).Elem()
}

func (i BackendServiceIamBindingMap) ToBackendServiceIamBindingMapOutput() BackendServiceIamBindingMapOutput {
	return i.ToBackendServiceIamBindingMapOutputWithContext(context.Background())
}

func (i BackendServiceIamBindingMap) ToBackendServiceIamBindingMapOutputWithContext(ctx context.Context) BackendServiceIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIamBindingMapOutput)
}

type BackendServiceIamBindingOutput struct{ *pulumi.OutputState }

func (BackendServiceIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceIamBinding)(nil)).Elem()
}

func (o BackendServiceIamBindingOutput) ToBackendServiceIamBindingOutput() BackendServiceIamBindingOutput {
	return o
}

func (o BackendServiceIamBindingOutput) ToBackendServiceIamBindingOutputWithContext(ctx context.Context) BackendServiceIamBindingOutput {
	return o
}

type BackendServiceIamBindingArrayOutput struct{ *pulumi.OutputState }

func (BackendServiceIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendServiceIamBinding)(nil)).Elem()
}

func (o BackendServiceIamBindingArrayOutput) ToBackendServiceIamBindingArrayOutput() BackendServiceIamBindingArrayOutput {
	return o
}

func (o BackendServiceIamBindingArrayOutput) ToBackendServiceIamBindingArrayOutputWithContext(ctx context.Context) BackendServiceIamBindingArrayOutput {
	return o
}

func (o BackendServiceIamBindingArrayOutput) Index(i pulumi.IntInput) BackendServiceIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackendServiceIamBinding {
		return vs[0].([]*BackendServiceIamBinding)[vs[1].(int)]
	}).(BackendServiceIamBindingOutput)
}

type BackendServiceIamBindingMapOutput struct{ *pulumi.OutputState }

func (BackendServiceIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendServiceIamBinding)(nil)).Elem()
}

func (o BackendServiceIamBindingMapOutput) ToBackendServiceIamBindingMapOutput() BackendServiceIamBindingMapOutput {
	return o
}

func (o BackendServiceIamBindingMapOutput) ToBackendServiceIamBindingMapOutputWithContext(ctx context.Context) BackendServiceIamBindingMapOutput {
	return o
}

func (o BackendServiceIamBindingMapOutput) MapIndex(k pulumi.StringInput) BackendServiceIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackendServiceIamBinding {
		return vs[0].(map[string]*BackendServiceIamBinding)[vs[1].(string)]
	}).(BackendServiceIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendServiceIamBindingInput)(nil)).Elem(), &BackendServiceIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendServiceIamBindingArrayInput)(nil)).Elem(), BackendServiceIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendServiceIamBindingMapInput)(nil)).Elem(), BackendServiceIamBindingMap{})
	pulumi.RegisterOutputType(BackendServiceIamBindingOutput{})
	pulumi.RegisterOutputType(BackendServiceIamBindingArrayOutput{})
	pulumi.RegisterOutputType(BackendServiceIamBindingMapOutput{})
}
