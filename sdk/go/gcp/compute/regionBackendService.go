// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Region Backend Service Basic
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		defaultHealthCheck, err := compute.NewHealthCheck(ctx, "defaultHealthCheck", &compute.HealthCheckArgs{
// 			CheckIntervalSec: pulumi.Int(1),
// 			TimeoutSec:       pulumi.Int(1),
// 			TcpHealthCheck: &compute.HealthCheckTcpHealthCheckArgs{
// 				Port: pulumi.Int(80),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewRegionBackendService(ctx, "defaultRegionBackendService", &compute.RegionBackendServiceArgs{
// 			Region: pulumi.String("us-central1"),
// 			HealthChecks: pulumi.String{
// 				defaultHealthCheck.ID(),
// 			},
// 			ConnectionDrainingTimeoutSec: pulumi.Int(10),
// 			SessionAffinity:              pulumi.String("CLIENT_IP"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Region Backend Service Cache
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		defaultRegionHealthCheck, err := compute.NewRegionHealthCheck(ctx, "defaultRegionHealthCheck", &compute.RegionHealthCheckArgs{
// 			Region: pulumi.String("us-central1"),
// 			HttpHealthCheck: &compute.RegionHealthCheckHttpHealthCheckArgs{
// 				Port: pulumi.Int(80),
// 			},
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewRegionBackendService(ctx, "defaultRegionBackendService", &compute.RegionBackendServiceArgs{
// 			Region: pulumi.String("us-central1"),
// 			HealthChecks: pulumi.String{
// 				defaultRegionHealthCheck.ID(),
// 			},
// 			EnableCdn: pulumi.Bool(true),
// 			CdnPolicy: &compute.RegionBackendServiceCdnPolicyArgs{
// 				CacheMode:               pulumi.String("CACHE_ALL_STATIC"),
// 				DefaultTtl:              pulumi.Int(3600),
// 				ClientTtl:               pulumi.Int(7200),
// 				MaxTtl:                  pulumi.Int(10800),
// 				NegativeCaching:         pulumi.Bool(true),
// 				SignedUrlCacheMaxAgeSec: pulumi.Int(7200),
// 			},
// 			LoadBalancingScheme: pulumi.String("EXTERNAL"),
// 			Protocol:            pulumi.String("HTTP"),
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Region Backend Service Ilb Round Robin
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		healthCheck, err := compute.NewHealthCheck(ctx, "healthCheck", &compute.HealthCheckArgs{
// 			HttpHealthCheck: &compute.HealthCheckHttpHealthCheckArgs{
// 				Port: pulumi.Int(80),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewRegionBackendService(ctx, "default", &compute.RegionBackendServiceArgs{
// 			Region: pulumi.String("us-central1"),
// 			HealthChecks: pulumi.String{
// 				healthCheck.ID(),
// 			},
// 			Protocol:            pulumi.String("HTTP"),
// 			LoadBalancingScheme: pulumi.String("INTERNAL_MANAGED"),
// 			LocalityLbPolicy:    pulumi.String("ROUND_ROBIN"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Region Backend Service External
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		healthCheck, err := compute.NewRegionHealthCheck(ctx, "healthCheck", &compute.RegionHealthCheckArgs{
// 			Region: pulumi.String("us-central1"),
// 			TcpHealthCheck: &compute.RegionHealthCheckTcpHealthCheckArgs{
// 				Port: pulumi.Int(80),
// 			},
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewRegionBackendService(ctx, "default", &compute.RegionBackendServiceArgs{
// 			Region: pulumi.String("us-central1"),
// 			HealthChecks: pulumi.String{
// 				healthCheck.ID(),
// 			},
// 			Protocol:            pulumi.String("TCP"),
// 			LoadBalancingScheme: pulumi.String("EXTERNAL"),
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Region Backend Service Ilb Ring Hash
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		healthCheck, err := compute.NewHealthCheck(ctx, "healthCheck", &compute.HealthCheckArgs{
// 			HttpHealthCheck: &compute.HealthCheckHttpHealthCheckArgs{
// 				Port: pulumi.Int(80),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewRegionBackendService(ctx, "default", &compute.RegionBackendServiceArgs{
// 			Region: pulumi.String("us-central1"),
// 			HealthChecks: pulumi.String{
// 				healthCheck.ID(),
// 			},
// 			LoadBalancingScheme: pulumi.String("INTERNAL_MANAGED"),
// 			LocalityLbPolicy:    pulumi.String("RING_HASH"),
// 			SessionAffinity:     pulumi.String("HTTP_COOKIE"),
// 			Protocol:            pulumi.String("HTTP"),
// 			CircuitBreakers: &compute.RegionBackendServiceCircuitBreakersArgs{
// 				MaxConnections: pulumi.Int(10),
// 			},
// 			ConsistentHash: &compute.RegionBackendServiceConsistentHashArgs{
// 				HttpCookie: &compute.RegionBackendServiceConsistentHashHttpCookieArgs{
// 					Ttl: &compute.RegionBackendServiceConsistentHashHttpCookieTtlArgs{
// 						Seconds: pulumi.Int(11),
// 						Nanos:   pulumi.Int(1111),
// 					},
// 					Name: pulumi.String("mycookie"),
// 				},
// 			},
// 			OutlierDetection: &compute.RegionBackendServiceOutlierDetectionArgs{
// 				ConsecutiveErrors: pulumi.Int(2),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Region Backend Service Balancing Mode
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		debianImage, err := compute.LookupImage(ctx, &compute.LookupImageArgs{
// 			Family:  pulumi.StringRef("debian-9"),
// 			Project: pulumi.StringRef("debian-cloud"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		defaultNetwork, err := compute.NewNetwork(ctx, "defaultNetwork", &compute.NetworkArgs{
// 			AutoCreateSubnetworks: pulumi.Bool(false),
// 			RoutingMode:           pulumi.String("REGIONAL"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		defaultSubnetwork, err := compute.NewSubnetwork(ctx, "defaultSubnetwork", &compute.SubnetworkArgs{
// 			IpCidrRange: pulumi.String("10.1.2.0/24"),
// 			Region:      pulumi.String("us-central1"),
// 			Network:     defaultNetwork.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		instanceTemplate, err := compute.NewInstanceTemplate(ctx, "instanceTemplate", &compute.InstanceTemplateArgs{
// 			MachineType: pulumi.String("e2-medium"),
// 			NetworkInterfaces: compute.InstanceTemplateNetworkInterfaceArray{
// 				&compute.InstanceTemplateNetworkInterfaceArgs{
// 					Network:    defaultNetwork.ID(),
// 					Subnetwork: defaultSubnetwork.ID(),
// 				},
// 			},
// 			Disks: compute.InstanceTemplateDiskArray{
// 				&compute.InstanceTemplateDiskArgs{
// 					SourceImage: pulumi.String(debianImage.SelfLink),
// 					AutoDelete:  pulumi.Bool(true),
// 					Boot:        pulumi.Bool(true),
// 				},
// 			},
// 			Tags: pulumi.StringArray{
// 				pulumi.String("allow-ssh"),
// 				pulumi.String("load-balanced-backend"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		rigm, err := compute.NewRegionInstanceGroupManager(ctx, "rigm", &compute.RegionInstanceGroupManagerArgs{
// 			Region: pulumi.String("us-central1"),
// 			Versions: compute.RegionInstanceGroupManagerVersionArray{
// 				&compute.RegionInstanceGroupManagerVersionArgs{
// 					InstanceTemplate: instanceTemplate.ID(),
// 					Name:             pulumi.String("primary"),
// 				},
// 			},
// 			BaseInstanceName: pulumi.String("internal-glb"),
// 			TargetSize:       pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		defaultRegionHealthCheck, err := compute.NewRegionHealthCheck(ctx, "defaultRegionHealthCheck", &compute.RegionHealthCheckArgs{
// 			Region: pulumi.String("us-central1"),
// 			HttpHealthCheck: &compute.RegionHealthCheckHttpHealthCheckArgs{
// 				PortSpecification: pulumi.String("USE_SERVING_PORT"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewRegionBackendService(ctx, "defaultRegionBackendService", &compute.RegionBackendServiceArgs{
// 			LoadBalancingScheme: pulumi.String("INTERNAL_MANAGED"),
// 			Backends: compute.RegionBackendServiceBackendArray{
// 				&compute.RegionBackendServiceBackendArgs{
// 					Group:          rigm.InstanceGroup,
// 					BalancingMode:  pulumi.String("UTILIZATION"),
// 					CapacityScaler: pulumi.Float64(1),
// 				},
// 			},
// 			Region:     pulumi.String("us-central1"),
// 			Protocol:   pulumi.String("HTTP"),
// 			TimeoutSec: pulumi.Int(10),
// 			HealthChecks: pulumi.String{
// 				defaultRegionHealthCheck.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Region Backend Service Connection Tracking
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		healthCheck, err := compute.NewRegionHealthCheck(ctx, "healthCheck", &compute.RegionHealthCheckArgs{
// 			Region: pulumi.String("us-central1"),
// 			TcpHealthCheck: &compute.RegionHealthCheckTcpHealthCheckArgs{
// 				Port: pulumi.Int(22),
// 			},
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewRegionBackendService(ctx, "default", &compute.RegionBackendServiceArgs{
// 			Region: pulumi.String("us-central1"),
// 			HealthChecks: pulumi.String{
// 				healthCheck.ID(),
// 			},
// 			ConnectionDrainingTimeoutSec: pulumi.Int(10),
// 			SessionAffinity:              pulumi.String("CLIENT_IP"),
// 			Protocol:                     pulumi.String("TCP"),
// 			LoadBalancingScheme:          pulumi.String("EXTERNAL"),
// 			ConnectionTrackingPolicy: &compute.RegionBackendServiceConnectionTrackingPolicyArgs{
// 				TrackingMode:                             pulumi.String("PER_SESSION"),
// 				ConnectionPersistenceOnUnhealthyBackends: pulumi.String("NEVER_PERSIST"),
// 				IdleTimeoutSec:                           pulumi.Int(60),
// 			},
// 		}, pulumi.Provider(google_beta))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// RegionBackendService can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:compute/regionBackendService:RegionBackendService default projects/{{project}}/regions/{{region}}/backendServices/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:compute/regionBackendService:RegionBackendService default {{project}}/{{region}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:compute/regionBackendService:RegionBackendService default {{region}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:compute/regionBackendService:RegionBackendService default {{name}}
// ```
type RegionBackendService struct {
	pulumi.CustomResourceState

	// Lifetime of cookies in seconds if sessionAffinity is
	// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
	// only until the end of the browser session (or equivalent). The
	// maximum allowed value for TTL is one day.
	// When the load balancing scheme is INTERNAL, this field is not used.
	AffinityCookieTtlSec pulumi.IntPtrOutput `pulumi:"affinityCookieTtlSec"`
	// The set of backends that serve this RegionBackendService.
	// Structure is documented below.
	Backends RegionBackendServiceBackendArrayOutput `pulumi:"backends"`
	// Cloud CDN configuration for this BackendService.
	// Structure is documented below.
	CdnPolicy RegionBackendServiceCdnPolicyOutput `pulumi:"cdnPolicy"`
	// Settings controlling the volume of connections to a backend service. This field
	// is applicable only when the `loadBalancingScheme` is set to INTERNAL_MANAGED
	// and the `protocol` is set to HTTP, HTTPS, or HTTP2.
	// Structure is documented below.
	CircuitBreakers RegionBackendServiceCircuitBreakersPtrOutput `pulumi:"circuitBreakers"`
	// Time for which instance will be drained (not accept new
	// connections, but still work to finish started).
	ConnectionDrainingTimeoutSec pulumi.IntPtrOutput `pulumi:"connectionDrainingTimeoutSec"`
	// Connection Tracking configuration for this BackendService.
	// This is available only for Layer 4 Internal Load Balancing and
	// Network Load Balancing.
	// Structure is documented below.
	ConnectionTrackingPolicy RegionBackendServiceConnectionTrackingPolicyPtrOutput `pulumi:"connectionTrackingPolicy"`
	// Consistent Hash-based load balancing can be used to provide soft session
	// affinity based on HTTP headers, cookies or other properties. This load balancing
	// policy is applicable only for HTTP connections. The affinity to a particular
	// destination host will be lost when one or more hosts are added/removed from the
	// destination service. This field specifies parameters that control consistent
	// hashing.
	// This field only applies when all of the following are true -
	ConsistentHash RegionBackendServiceConsistentHashPtrOutput `pulumi:"consistentHash"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	// Provide this property when you create the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// If true, enable Cloud CDN for this RegionBackendService.
	EnableCdn pulumi.BoolPtrOutput `pulumi:"enableCdn"`
	// Policy for failovers.
	// Structure is documented below.
	FailoverPolicy RegionBackendServiceFailoverPolicyPtrOutput `pulumi:"failoverPolicy"`
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// The set of URLs to HealthCheck resources for health checking
	// this RegionBackendService. Currently at most one health
	// check can be specified.
	// A health check must be specified unless the backend service uses an internet
	// or serverless NEG as a backend.
	HealthChecks pulumi.StringPtrOutput `pulumi:"healthChecks"`
	// Settings for enabling Cloud Identity Aware Proxy
	// Structure is documented below.
	Iap RegionBackendServiceIapPtrOutput `pulumi:"iap"`
	// Indicates what kind of load balancing this regional backend service
	// will be used for. A backend service created for one type of load
	// balancing cannot be used with the other(s). For more information, refer to
	// [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
	// Default value is `INTERNAL`.
	// Possible values are `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, and `INTERNAL_MANAGED`.
	LoadBalancingScheme pulumi.StringPtrOutput `pulumi:"loadBalancingScheme"`
	// The load balancing algorithm used within the scope of the locality.
	// The possible values are:
	// * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
	//   is selected in round robin order.
	// * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
	//   hosts and picks the host which has fewer active requests.
	// * `RING_HASH`: The ring/modulo hash load balancer implements consistent
	//   hashing to backends. The algorithm has the property that the
	//   addition/removal of a host from a set of N hosts only affects
	//   1/N of the requests.
	// * `RANDOM`: The load balancer selects a random healthy host.
	// * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
	//   connection metadata, i.e., connections are opened
	//   to the same address as the destination address of
	//   the incoming connection before the connection
	//   was redirected to the load balancer.
	// * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
	//   Maglev is not as stable as ring hash but has faster table lookup
	//   build times and host selection times. For more information about
	//   Maglev, refer to https://ai.google/research/pubs/pub44824
	LocalityLbPolicy pulumi.StringPtrOutput `pulumi:"localityLbPolicy"`
	// This field denotes the logging options for the load balancer traffic served by this backend service.
	// If logging is enabled, logs will be exported to Stackdriver.
	// Structure is documented below.
	LogConfig RegionBackendServiceLogConfigOutput `pulumi:"logConfig"`
	// Name of the cookie.
	Name pulumi.StringOutput `pulumi:"name"`
	// The URL of the network to which this backend service belongs.
	// This field can only be specified when the load balancing scheme is set to INTERNAL.
	Network pulumi.StringPtrOutput `pulumi:"network"`
	// Settings controlling eviction of unhealthy hosts from the load balancing pool.
	// This field is applicable only when the `loadBalancingScheme` is set
	// to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.
	// Structure is documented below.
	OutlierDetection RegionBackendServiceOutlierDetectionPtrOutput `pulumi:"outlierDetection"`
	// A named port on a backend instance group representing the port for
	// communication to the backend VMs in that group. Required when the
	// loadBalancingScheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
	// and the backends are instance groups. The named port must be defined on each
	// backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
	// default of "http" if not given.
	// Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
	PortName pulumi.StringOutput `pulumi:"portName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The protocol this RegionBackendService uses to communicate with backends.
	// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
	// types and may result in errors if used with the GA API.
	// Possible values are `HTTP`, `HTTPS`, `HTTP2`, `SSL`, `TCP`, `UDP`, `GRPC`, and `UNSPECIFIED`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Type of session affinity to use. The default is NONE. Session affinity is
	// not applicable if the protocol is UDP.
	// Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, and `CLIENT_IP_NO_DESTINATION`.
	SessionAffinity pulumi.StringOutput `pulumi:"sessionAffinity"`
	// Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing
	// and Internal HTTP(S) load balancing.
	Subsetting RegionBackendServiceSubsettingPtrOutput `pulumi:"subsetting"`
	// How many seconds to wait for the backend before considering it a
	// failed request. Default is 30 seconds. Valid range is [1, 86400].
	TimeoutSec pulumi.IntOutput `pulumi:"timeoutSec"`
}

// NewRegionBackendService registers a new resource with the given unique name, arguments, and options.
func NewRegionBackendService(ctx *pulumi.Context,
	name string, args *RegionBackendServiceArgs, opts ...pulumi.ResourceOption) (*RegionBackendService, error) {
	if args == nil {
		args = &RegionBackendServiceArgs{}
	}

	var resource RegionBackendService
	err := ctx.RegisterResource("gcp:compute/regionBackendService:RegionBackendService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionBackendService gets an existing RegionBackendService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionBackendService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionBackendServiceState, opts ...pulumi.ResourceOption) (*RegionBackendService, error) {
	var resource RegionBackendService
	err := ctx.ReadResource("gcp:compute/regionBackendService:RegionBackendService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionBackendService resources.
type regionBackendServiceState struct {
	// Lifetime of cookies in seconds if sessionAffinity is
	// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
	// only until the end of the browser session (or equivalent). The
	// maximum allowed value for TTL is one day.
	// When the load balancing scheme is INTERNAL, this field is not used.
	AffinityCookieTtlSec *int `pulumi:"affinityCookieTtlSec"`
	// The set of backends that serve this RegionBackendService.
	// Structure is documented below.
	Backends []RegionBackendServiceBackend `pulumi:"backends"`
	// Cloud CDN configuration for this BackendService.
	// Structure is documented below.
	CdnPolicy *RegionBackendServiceCdnPolicy `pulumi:"cdnPolicy"`
	// Settings controlling the volume of connections to a backend service. This field
	// is applicable only when the `loadBalancingScheme` is set to INTERNAL_MANAGED
	// and the `protocol` is set to HTTP, HTTPS, or HTTP2.
	// Structure is documented below.
	CircuitBreakers *RegionBackendServiceCircuitBreakers `pulumi:"circuitBreakers"`
	// Time for which instance will be drained (not accept new
	// connections, but still work to finish started).
	ConnectionDrainingTimeoutSec *int `pulumi:"connectionDrainingTimeoutSec"`
	// Connection Tracking configuration for this BackendService.
	// This is available only for Layer 4 Internal Load Balancing and
	// Network Load Balancing.
	// Structure is documented below.
	ConnectionTrackingPolicy *RegionBackendServiceConnectionTrackingPolicy `pulumi:"connectionTrackingPolicy"`
	// Consistent Hash-based load balancing can be used to provide soft session
	// affinity based on HTTP headers, cookies or other properties. This load balancing
	// policy is applicable only for HTTP connections. The affinity to a particular
	// destination host will be lost when one or more hosts are added/removed from the
	// destination service. This field specifies parameters that control consistent
	// hashing.
	// This field only applies when all of the following are true -
	ConsistentHash *RegionBackendServiceConsistentHash `pulumi:"consistentHash"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource.
	// Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// If true, enable Cloud CDN for this RegionBackendService.
	EnableCdn *bool `pulumi:"enableCdn"`
	// Policy for failovers.
	// Structure is documented below.
	FailoverPolicy *RegionBackendServiceFailoverPolicy `pulumi:"failoverPolicy"`
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
	Fingerprint *string `pulumi:"fingerprint"`
	// The set of URLs to HealthCheck resources for health checking
	// this RegionBackendService. Currently at most one health
	// check can be specified.
	// A health check must be specified unless the backend service uses an internet
	// or serverless NEG as a backend.
	HealthChecks *string `pulumi:"healthChecks"`
	// Settings for enabling Cloud Identity Aware Proxy
	// Structure is documented below.
	Iap *RegionBackendServiceIap `pulumi:"iap"`
	// Indicates what kind of load balancing this regional backend service
	// will be used for. A backend service created for one type of load
	// balancing cannot be used with the other(s). For more information, refer to
	// [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
	// Default value is `INTERNAL`.
	// Possible values are `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, and `INTERNAL_MANAGED`.
	LoadBalancingScheme *string `pulumi:"loadBalancingScheme"`
	// The load balancing algorithm used within the scope of the locality.
	// The possible values are:
	// * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
	//   is selected in round robin order.
	// * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
	//   hosts and picks the host which has fewer active requests.
	// * `RING_HASH`: The ring/modulo hash load balancer implements consistent
	//   hashing to backends. The algorithm has the property that the
	//   addition/removal of a host from a set of N hosts only affects
	//   1/N of the requests.
	// * `RANDOM`: The load balancer selects a random healthy host.
	// * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
	//   connection metadata, i.e., connections are opened
	//   to the same address as the destination address of
	//   the incoming connection before the connection
	//   was redirected to the load balancer.
	// * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
	//   Maglev is not as stable as ring hash but has faster table lookup
	//   build times and host selection times. For more information about
	//   Maglev, refer to https://ai.google/research/pubs/pub44824
	LocalityLbPolicy *string `pulumi:"localityLbPolicy"`
	// This field denotes the logging options for the load balancer traffic served by this backend service.
	// If logging is enabled, logs will be exported to Stackdriver.
	// Structure is documented below.
	LogConfig *RegionBackendServiceLogConfig `pulumi:"logConfig"`
	// Name of the cookie.
	Name *string `pulumi:"name"`
	// The URL of the network to which this backend service belongs.
	// This field can only be specified when the load balancing scheme is set to INTERNAL.
	Network *string `pulumi:"network"`
	// Settings controlling eviction of unhealthy hosts from the load balancing pool.
	// This field is applicable only when the `loadBalancingScheme` is set
	// to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.
	// Structure is documented below.
	OutlierDetection *RegionBackendServiceOutlierDetection `pulumi:"outlierDetection"`
	// A named port on a backend instance group representing the port for
	// communication to the backend VMs in that group. Required when the
	// loadBalancingScheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
	// and the backends are instance groups. The named port must be defined on each
	// backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
	// default of "http" if not given.
	// Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
	PortName *string `pulumi:"portName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The protocol this RegionBackendService uses to communicate with backends.
	// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
	// types and may result in errors if used with the GA API.
	// Possible values are `HTTP`, `HTTPS`, `HTTP2`, `SSL`, `TCP`, `UDP`, `GRPC`, and `UNSPECIFIED`.
	Protocol *string `pulumi:"protocol"`
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	Region *string `pulumi:"region"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
	// Type of session affinity to use. The default is NONE. Session affinity is
	// not applicable if the protocol is UDP.
	// Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, and `CLIENT_IP_NO_DESTINATION`.
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing
	// and Internal HTTP(S) load balancing.
	Subsetting *RegionBackendServiceSubsetting `pulumi:"subsetting"`
	// How many seconds to wait for the backend before considering it a
	// failed request. Default is 30 seconds. Valid range is [1, 86400].
	TimeoutSec *int `pulumi:"timeoutSec"`
}

type RegionBackendServiceState struct {
	// Lifetime of cookies in seconds if sessionAffinity is
	// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
	// only until the end of the browser session (or equivalent). The
	// maximum allowed value for TTL is one day.
	// When the load balancing scheme is INTERNAL, this field is not used.
	AffinityCookieTtlSec pulumi.IntPtrInput
	// The set of backends that serve this RegionBackendService.
	// Structure is documented below.
	Backends RegionBackendServiceBackendArrayInput
	// Cloud CDN configuration for this BackendService.
	// Structure is documented below.
	CdnPolicy RegionBackendServiceCdnPolicyPtrInput
	// Settings controlling the volume of connections to a backend service. This field
	// is applicable only when the `loadBalancingScheme` is set to INTERNAL_MANAGED
	// and the `protocol` is set to HTTP, HTTPS, or HTTP2.
	// Structure is documented below.
	CircuitBreakers RegionBackendServiceCircuitBreakersPtrInput
	// Time for which instance will be drained (not accept new
	// connections, but still work to finish started).
	ConnectionDrainingTimeoutSec pulumi.IntPtrInput
	// Connection Tracking configuration for this BackendService.
	// This is available only for Layer 4 Internal Load Balancing and
	// Network Load Balancing.
	// Structure is documented below.
	ConnectionTrackingPolicy RegionBackendServiceConnectionTrackingPolicyPtrInput
	// Consistent Hash-based load balancing can be used to provide soft session
	// affinity based on HTTP headers, cookies or other properties. This load balancing
	// policy is applicable only for HTTP connections. The affinity to a particular
	// destination host will be lost when one or more hosts are added/removed from the
	// destination service. This field specifies parameters that control consistent
	// hashing.
	// This field only applies when all of the following are true -
	ConsistentHash RegionBackendServiceConsistentHashPtrInput
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource.
	// Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// If true, enable Cloud CDN for this RegionBackendService.
	EnableCdn pulumi.BoolPtrInput
	// Policy for failovers.
	// Structure is documented below.
	FailoverPolicy RegionBackendServiceFailoverPolicyPtrInput
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
	Fingerprint pulumi.StringPtrInput
	// The set of URLs to HealthCheck resources for health checking
	// this RegionBackendService. Currently at most one health
	// check can be specified.
	// A health check must be specified unless the backend service uses an internet
	// or serverless NEG as a backend.
	HealthChecks pulumi.StringPtrInput
	// Settings for enabling Cloud Identity Aware Proxy
	// Structure is documented below.
	Iap RegionBackendServiceIapPtrInput
	// Indicates what kind of load balancing this regional backend service
	// will be used for. A backend service created for one type of load
	// balancing cannot be used with the other(s). For more information, refer to
	// [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
	// Default value is `INTERNAL`.
	// Possible values are `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, and `INTERNAL_MANAGED`.
	LoadBalancingScheme pulumi.StringPtrInput
	// The load balancing algorithm used within the scope of the locality.
	// The possible values are:
	// * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
	//   is selected in round robin order.
	// * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
	//   hosts and picks the host which has fewer active requests.
	// * `RING_HASH`: The ring/modulo hash load balancer implements consistent
	//   hashing to backends. The algorithm has the property that the
	//   addition/removal of a host from a set of N hosts only affects
	//   1/N of the requests.
	// * `RANDOM`: The load balancer selects a random healthy host.
	// * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
	//   connection metadata, i.e., connections are opened
	//   to the same address as the destination address of
	//   the incoming connection before the connection
	//   was redirected to the load balancer.
	// * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
	//   Maglev is not as stable as ring hash but has faster table lookup
	//   build times and host selection times. For more information about
	//   Maglev, refer to https://ai.google/research/pubs/pub44824
	LocalityLbPolicy pulumi.StringPtrInput
	// This field denotes the logging options for the load balancer traffic served by this backend service.
	// If logging is enabled, logs will be exported to Stackdriver.
	// Structure is documented below.
	LogConfig RegionBackendServiceLogConfigPtrInput
	// Name of the cookie.
	Name pulumi.StringPtrInput
	// The URL of the network to which this backend service belongs.
	// This field can only be specified when the load balancing scheme is set to INTERNAL.
	Network pulumi.StringPtrInput
	// Settings controlling eviction of unhealthy hosts from the load balancing pool.
	// This field is applicable only when the `loadBalancingScheme` is set
	// to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.
	// Structure is documented below.
	OutlierDetection RegionBackendServiceOutlierDetectionPtrInput
	// A named port on a backend instance group representing the port for
	// communication to the backend VMs in that group. Required when the
	// loadBalancingScheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
	// and the backends are instance groups. The named port must be defined on each
	// backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
	// default of "http" if not given.
	// Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
	PortName pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The protocol this RegionBackendService uses to communicate with backends.
	// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
	// types and may result in errors if used with the GA API.
	// Possible values are `HTTP`, `HTTPS`, `HTTP2`, `SSL`, `TCP`, `UDP`, `GRPC`, and `UNSPECIFIED`.
	Protocol pulumi.StringPtrInput
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	Region pulumi.StringPtrInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
	// Type of session affinity to use. The default is NONE. Session affinity is
	// not applicable if the protocol is UDP.
	// Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, and `CLIENT_IP_NO_DESTINATION`.
	SessionAffinity pulumi.StringPtrInput
	// Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing
	// and Internal HTTP(S) load balancing.
	Subsetting RegionBackendServiceSubsettingPtrInput
	// How many seconds to wait for the backend before considering it a
	// failed request. Default is 30 seconds. Valid range is [1, 86400].
	TimeoutSec pulumi.IntPtrInput
}

func (RegionBackendServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionBackendServiceState)(nil)).Elem()
}

type regionBackendServiceArgs struct {
	// Lifetime of cookies in seconds if sessionAffinity is
	// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
	// only until the end of the browser session (or equivalent). The
	// maximum allowed value for TTL is one day.
	// When the load balancing scheme is INTERNAL, this field is not used.
	AffinityCookieTtlSec *int `pulumi:"affinityCookieTtlSec"`
	// The set of backends that serve this RegionBackendService.
	// Structure is documented below.
	Backends []RegionBackendServiceBackend `pulumi:"backends"`
	// Cloud CDN configuration for this BackendService.
	// Structure is documented below.
	CdnPolicy *RegionBackendServiceCdnPolicy `pulumi:"cdnPolicy"`
	// Settings controlling the volume of connections to a backend service. This field
	// is applicable only when the `loadBalancingScheme` is set to INTERNAL_MANAGED
	// and the `protocol` is set to HTTP, HTTPS, or HTTP2.
	// Structure is documented below.
	CircuitBreakers *RegionBackendServiceCircuitBreakers `pulumi:"circuitBreakers"`
	// Time for which instance will be drained (not accept new
	// connections, but still work to finish started).
	ConnectionDrainingTimeoutSec *int `pulumi:"connectionDrainingTimeoutSec"`
	// Connection Tracking configuration for this BackendService.
	// This is available only for Layer 4 Internal Load Balancing and
	// Network Load Balancing.
	// Structure is documented below.
	ConnectionTrackingPolicy *RegionBackendServiceConnectionTrackingPolicy `pulumi:"connectionTrackingPolicy"`
	// Consistent Hash-based load balancing can be used to provide soft session
	// affinity based on HTTP headers, cookies or other properties. This load balancing
	// policy is applicable only for HTTP connections. The affinity to a particular
	// destination host will be lost when one or more hosts are added/removed from the
	// destination service. This field specifies parameters that control consistent
	// hashing.
	// This field only applies when all of the following are true -
	ConsistentHash *RegionBackendServiceConsistentHash `pulumi:"consistentHash"`
	// An optional description of this resource.
	// Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// If true, enable Cloud CDN for this RegionBackendService.
	EnableCdn *bool `pulumi:"enableCdn"`
	// Policy for failovers.
	// Structure is documented below.
	FailoverPolicy *RegionBackendServiceFailoverPolicy `pulumi:"failoverPolicy"`
	// The set of URLs to HealthCheck resources for health checking
	// this RegionBackendService. Currently at most one health
	// check can be specified.
	// A health check must be specified unless the backend service uses an internet
	// or serverless NEG as a backend.
	HealthChecks *string `pulumi:"healthChecks"`
	// Settings for enabling Cloud Identity Aware Proxy
	// Structure is documented below.
	Iap *RegionBackendServiceIap `pulumi:"iap"`
	// Indicates what kind of load balancing this regional backend service
	// will be used for. A backend service created for one type of load
	// balancing cannot be used with the other(s). For more information, refer to
	// [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
	// Default value is `INTERNAL`.
	// Possible values are `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, and `INTERNAL_MANAGED`.
	LoadBalancingScheme *string `pulumi:"loadBalancingScheme"`
	// The load balancing algorithm used within the scope of the locality.
	// The possible values are:
	// * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
	//   is selected in round robin order.
	// * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
	//   hosts and picks the host which has fewer active requests.
	// * `RING_HASH`: The ring/modulo hash load balancer implements consistent
	//   hashing to backends. The algorithm has the property that the
	//   addition/removal of a host from a set of N hosts only affects
	//   1/N of the requests.
	// * `RANDOM`: The load balancer selects a random healthy host.
	// * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
	//   connection metadata, i.e., connections are opened
	//   to the same address as the destination address of
	//   the incoming connection before the connection
	//   was redirected to the load balancer.
	// * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
	//   Maglev is not as stable as ring hash but has faster table lookup
	//   build times and host selection times. For more information about
	//   Maglev, refer to https://ai.google/research/pubs/pub44824
	LocalityLbPolicy *string `pulumi:"localityLbPolicy"`
	// This field denotes the logging options for the load balancer traffic served by this backend service.
	// If logging is enabled, logs will be exported to Stackdriver.
	// Structure is documented below.
	LogConfig *RegionBackendServiceLogConfig `pulumi:"logConfig"`
	// Name of the cookie.
	Name *string `pulumi:"name"`
	// The URL of the network to which this backend service belongs.
	// This field can only be specified when the load balancing scheme is set to INTERNAL.
	Network *string `pulumi:"network"`
	// Settings controlling eviction of unhealthy hosts from the load balancing pool.
	// This field is applicable only when the `loadBalancingScheme` is set
	// to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.
	// Structure is documented below.
	OutlierDetection *RegionBackendServiceOutlierDetection `pulumi:"outlierDetection"`
	// A named port on a backend instance group representing the port for
	// communication to the backend VMs in that group. Required when the
	// loadBalancingScheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
	// and the backends are instance groups. The named port must be defined on each
	// backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
	// default of "http" if not given.
	// Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
	PortName *string `pulumi:"portName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The protocol this RegionBackendService uses to communicate with backends.
	// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
	// types and may result in errors if used with the GA API.
	// Possible values are `HTTP`, `HTTPS`, `HTTP2`, `SSL`, `TCP`, `UDP`, `GRPC`, and `UNSPECIFIED`.
	Protocol *string `pulumi:"protocol"`
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	Region *string `pulumi:"region"`
	// Type of session affinity to use. The default is NONE. Session affinity is
	// not applicable if the protocol is UDP.
	// Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, and `CLIENT_IP_NO_DESTINATION`.
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing
	// and Internal HTTP(S) load balancing.
	Subsetting *RegionBackendServiceSubsetting `pulumi:"subsetting"`
	// How many seconds to wait for the backend before considering it a
	// failed request. Default is 30 seconds. Valid range is [1, 86400].
	TimeoutSec *int `pulumi:"timeoutSec"`
}

// The set of arguments for constructing a RegionBackendService resource.
type RegionBackendServiceArgs struct {
	// Lifetime of cookies in seconds if sessionAffinity is
	// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
	// only until the end of the browser session (or equivalent). The
	// maximum allowed value for TTL is one day.
	// When the load balancing scheme is INTERNAL, this field is not used.
	AffinityCookieTtlSec pulumi.IntPtrInput
	// The set of backends that serve this RegionBackendService.
	// Structure is documented below.
	Backends RegionBackendServiceBackendArrayInput
	// Cloud CDN configuration for this BackendService.
	// Structure is documented below.
	CdnPolicy RegionBackendServiceCdnPolicyPtrInput
	// Settings controlling the volume of connections to a backend service. This field
	// is applicable only when the `loadBalancingScheme` is set to INTERNAL_MANAGED
	// and the `protocol` is set to HTTP, HTTPS, or HTTP2.
	// Structure is documented below.
	CircuitBreakers RegionBackendServiceCircuitBreakersPtrInput
	// Time for which instance will be drained (not accept new
	// connections, but still work to finish started).
	ConnectionDrainingTimeoutSec pulumi.IntPtrInput
	// Connection Tracking configuration for this BackendService.
	// This is available only for Layer 4 Internal Load Balancing and
	// Network Load Balancing.
	// Structure is documented below.
	ConnectionTrackingPolicy RegionBackendServiceConnectionTrackingPolicyPtrInput
	// Consistent Hash-based load balancing can be used to provide soft session
	// affinity based on HTTP headers, cookies or other properties. This load balancing
	// policy is applicable only for HTTP connections. The affinity to a particular
	// destination host will be lost when one or more hosts are added/removed from the
	// destination service. This field specifies parameters that control consistent
	// hashing.
	// This field only applies when all of the following are true -
	ConsistentHash RegionBackendServiceConsistentHashPtrInput
	// An optional description of this resource.
	// Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// If true, enable Cloud CDN for this RegionBackendService.
	EnableCdn pulumi.BoolPtrInput
	// Policy for failovers.
	// Structure is documented below.
	FailoverPolicy RegionBackendServiceFailoverPolicyPtrInput
	// The set of URLs to HealthCheck resources for health checking
	// this RegionBackendService. Currently at most one health
	// check can be specified.
	// A health check must be specified unless the backend service uses an internet
	// or serverless NEG as a backend.
	HealthChecks pulumi.StringPtrInput
	// Settings for enabling Cloud Identity Aware Proxy
	// Structure is documented below.
	Iap RegionBackendServiceIapPtrInput
	// Indicates what kind of load balancing this regional backend service
	// will be used for. A backend service created for one type of load
	// balancing cannot be used with the other(s). For more information, refer to
	// [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
	// Default value is `INTERNAL`.
	// Possible values are `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, and `INTERNAL_MANAGED`.
	LoadBalancingScheme pulumi.StringPtrInput
	// The load balancing algorithm used within the scope of the locality.
	// The possible values are:
	// * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
	//   is selected in round robin order.
	// * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
	//   hosts and picks the host which has fewer active requests.
	// * `RING_HASH`: The ring/modulo hash load balancer implements consistent
	//   hashing to backends. The algorithm has the property that the
	//   addition/removal of a host from a set of N hosts only affects
	//   1/N of the requests.
	// * `RANDOM`: The load balancer selects a random healthy host.
	// * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
	//   connection metadata, i.e., connections are opened
	//   to the same address as the destination address of
	//   the incoming connection before the connection
	//   was redirected to the load balancer.
	// * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
	//   Maglev is not as stable as ring hash but has faster table lookup
	//   build times and host selection times. For more information about
	//   Maglev, refer to https://ai.google/research/pubs/pub44824
	LocalityLbPolicy pulumi.StringPtrInput
	// This field denotes the logging options for the load balancer traffic served by this backend service.
	// If logging is enabled, logs will be exported to Stackdriver.
	// Structure is documented below.
	LogConfig RegionBackendServiceLogConfigPtrInput
	// Name of the cookie.
	Name pulumi.StringPtrInput
	// The URL of the network to which this backend service belongs.
	// This field can only be specified when the load balancing scheme is set to INTERNAL.
	Network pulumi.StringPtrInput
	// Settings controlling eviction of unhealthy hosts from the load balancing pool.
	// This field is applicable only when the `loadBalancingScheme` is set
	// to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.
	// Structure is documented below.
	OutlierDetection RegionBackendServiceOutlierDetectionPtrInput
	// A named port on a backend instance group representing the port for
	// communication to the backend VMs in that group. Required when the
	// loadBalancingScheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
	// and the backends are instance groups. The named port must be defined on each
	// backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
	// default of "http" if not given.
	// Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
	PortName pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The protocol this RegionBackendService uses to communicate with backends.
	// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
	// types and may result in errors if used with the GA API.
	// Possible values are `HTTP`, `HTTPS`, `HTTP2`, `SSL`, `TCP`, `UDP`, `GRPC`, and `UNSPECIFIED`.
	Protocol pulumi.StringPtrInput
	// The Region in which the created backend service should reside.
	// If it is not provided, the provider region is used.
	Region pulumi.StringPtrInput
	// Type of session affinity to use. The default is NONE. Session affinity is
	// not applicable if the protocol is UDP.
	// Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, and `CLIENT_IP_NO_DESTINATION`.
	SessionAffinity pulumi.StringPtrInput
	// Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing
	// and Internal HTTP(S) load balancing.
	Subsetting RegionBackendServiceSubsettingPtrInput
	// How many seconds to wait for the backend before considering it a
	// failed request. Default is 30 seconds. Valid range is [1, 86400].
	TimeoutSec pulumi.IntPtrInput
}

func (RegionBackendServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionBackendServiceArgs)(nil)).Elem()
}

type RegionBackendServiceInput interface {
	pulumi.Input

	ToRegionBackendServiceOutput() RegionBackendServiceOutput
	ToRegionBackendServiceOutputWithContext(ctx context.Context) RegionBackendServiceOutput
}

func (*RegionBackendService) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendService)(nil)).Elem()
}

func (i *RegionBackendService) ToRegionBackendServiceOutput() RegionBackendServiceOutput {
	return i.ToRegionBackendServiceOutputWithContext(context.Background())
}

func (i *RegionBackendService) ToRegionBackendServiceOutputWithContext(ctx context.Context) RegionBackendServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceOutput)
}

// RegionBackendServiceArrayInput is an input type that accepts RegionBackendServiceArray and RegionBackendServiceArrayOutput values.
// You can construct a concrete instance of `RegionBackendServiceArrayInput` via:
//
//          RegionBackendServiceArray{ RegionBackendServiceArgs{...} }
type RegionBackendServiceArrayInput interface {
	pulumi.Input

	ToRegionBackendServiceArrayOutput() RegionBackendServiceArrayOutput
	ToRegionBackendServiceArrayOutputWithContext(context.Context) RegionBackendServiceArrayOutput
}

type RegionBackendServiceArray []RegionBackendServiceInput

func (RegionBackendServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionBackendService)(nil)).Elem()
}

func (i RegionBackendServiceArray) ToRegionBackendServiceArrayOutput() RegionBackendServiceArrayOutput {
	return i.ToRegionBackendServiceArrayOutputWithContext(context.Background())
}

func (i RegionBackendServiceArray) ToRegionBackendServiceArrayOutputWithContext(ctx context.Context) RegionBackendServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceArrayOutput)
}

// RegionBackendServiceMapInput is an input type that accepts RegionBackendServiceMap and RegionBackendServiceMapOutput values.
// You can construct a concrete instance of `RegionBackendServiceMapInput` via:
//
//          RegionBackendServiceMap{ "key": RegionBackendServiceArgs{...} }
type RegionBackendServiceMapInput interface {
	pulumi.Input

	ToRegionBackendServiceMapOutput() RegionBackendServiceMapOutput
	ToRegionBackendServiceMapOutputWithContext(context.Context) RegionBackendServiceMapOutput
}

type RegionBackendServiceMap map[string]RegionBackendServiceInput

func (RegionBackendServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionBackendService)(nil)).Elem()
}

func (i RegionBackendServiceMap) ToRegionBackendServiceMapOutput() RegionBackendServiceMapOutput {
	return i.ToRegionBackendServiceMapOutputWithContext(context.Background())
}

func (i RegionBackendServiceMap) ToRegionBackendServiceMapOutputWithContext(ctx context.Context) RegionBackendServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionBackendServiceMapOutput)
}

type RegionBackendServiceOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionBackendService)(nil)).Elem()
}

func (o RegionBackendServiceOutput) ToRegionBackendServiceOutput() RegionBackendServiceOutput {
	return o
}

func (o RegionBackendServiceOutput) ToRegionBackendServiceOutputWithContext(ctx context.Context) RegionBackendServiceOutput {
	return o
}

// Lifetime of cookies in seconds if sessionAffinity is
// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
// only until the end of the browser session (or equivalent). The
// maximum allowed value for TTL is one day.
// When the load balancing scheme is INTERNAL, this field is not used.
func (o RegionBackendServiceOutput) AffinityCookieTtlSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.IntPtrOutput { return v.AffinityCookieTtlSec }).(pulumi.IntPtrOutput)
}

// The set of backends that serve this RegionBackendService.
// Structure is documented below.
func (o RegionBackendServiceOutput) Backends() RegionBackendServiceBackendArrayOutput {
	return o.ApplyT(func(v *RegionBackendService) RegionBackendServiceBackendArrayOutput { return v.Backends }).(RegionBackendServiceBackendArrayOutput)
}

// Cloud CDN configuration for this BackendService.
// Structure is documented below.
func (o RegionBackendServiceOutput) CdnPolicy() RegionBackendServiceCdnPolicyOutput {
	return o.ApplyT(func(v *RegionBackendService) RegionBackendServiceCdnPolicyOutput { return v.CdnPolicy }).(RegionBackendServiceCdnPolicyOutput)
}

// Settings controlling the volume of connections to a backend service. This field
// is applicable only when the `loadBalancingScheme` is set to INTERNAL_MANAGED
// and the `protocol` is set to HTTP, HTTPS, or HTTP2.
// Structure is documented below.
func (o RegionBackendServiceOutput) CircuitBreakers() RegionBackendServiceCircuitBreakersPtrOutput {
	return o.ApplyT(func(v *RegionBackendService) RegionBackendServiceCircuitBreakersPtrOutput { return v.CircuitBreakers }).(RegionBackendServiceCircuitBreakersPtrOutput)
}

// Time for which instance will be drained (not accept new
// connections, but still work to finish started).
func (o RegionBackendServiceOutput) ConnectionDrainingTimeoutSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.IntPtrOutput { return v.ConnectionDrainingTimeoutSec }).(pulumi.IntPtrOutput)
}

// Connection Tracking configuration for this BackendService.
// This is available only for Layer 4 Internal Load Balancing and
// Network Load Balancing.
// Structure is documented below.
func (o RegionBackendServiceOutput) ConnectionTrackingPolicy() RegionBackendServiceConnectionTrackingPolicyPtrOutput {
	return o.ApplyT(func(v *RegionBackendService) RegionBackendServiceConnectionTrackingPolicyPtrOutput {
		return v.ConnectionTrackingPolicy
	}).(RegionBackendServiceConnectionTrackingPolicyPtrOutput)
}

// Consistent Hash-based load balancing can be used to provide soft session
// affinity based on HTTP headers, cookies or other properties. This load balancing
// policy is applicable only for HTTP connections. The affinity to a particular
// destination host will be lost when one or more hosts are added/removed from the
// destination service. This field specifies parameters that control consistent
// hashing.
// This field only applies when all of the following are true -
func (o RegionBackendServiceOutput) ConsistentHash() RegionBackendServiceConsistentHashPtrOutput {
	return o.ApplyT(func(v *RegionBackendService) RegionBackendServiceConsistentHashPtrOutput { return v.ConsistentHash }).(RegionBackendServiceConsistentHashPtrOutput)
}

// Creation timestamp in RFC3339 text format.
func (o RegionBackendServiceOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource.
// Provide this property when you create the resource.
func (o RegionBackendServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// If true, enable Cloud CDN for this RegionBackendService.
func (o RegionBackendServiceOutput) EnableCdn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.BoolPtrOutput { return v.EnableCdn }).(pulumi.BoolPtrOutput)
}

// Policy for failovers.
// Structure is documented below.
func (o RegionBackendServiceOutput) FailoverPolicy() RegionBackendServiceFailoverPolicyPtrOutput {
	return o.ApplyT(func(v *RegionBackendService) RegionBackendServiceFailoverPolicyPtrOutput { return v.FailoverPolicy }).(RegionBackendServiceFailoverPolicyPtrOutput)
}

// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
func (o RegionBackendServiceOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// The set of URLs to HealthCheck resources for health checking
// this RegionBackendService. Currently at most one health
// check can be specified.
// A health check must be specified unless the backend service uses an internet
// or serverless NEG as a backend.
func (o RegionBackendServiceOutput) HealthChecks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.StringPtrOutput { return v.HealthChecks }).(pulumi.StringPtrOutput)
}

// Settings for enabling Cloud Identity Aware Proxy
// Structure is documented below.
func (o RegionBackendServiceOutput) Iap() RegionBackendServiceIapPtrOutput {
	return o.ApplyT(func(v *RegionBackendService) RegionBackendServiceIapPtrOutput { return v.Iap }).(RegionBackendServiceIapPtrOutput)
}

// Indicates what kind of load balancing this regional backend service
// will be used for. A backend service created for one type of load
// balancing cannot be used with the other(s). For more information, refer to
// [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
// Default value is `INTERNAL`.
// Possible values are `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, and `INTERNAL_MANAGED`.
func (o RegionBackendServiceOutput) LoadBalancingScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.StringPtrOutput { return v.LoadBalancingScheme }).(pulumi.StringPtrOutput)
}

// The load balancing algorithm used within the scope of the locality.
// The possible values are:
// * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
//   is selected in round robin order.
// * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
//   hosts and picks the host which has fewer active requests.
// * `RING_HASH`: The ring/modulo hash load balancer implements consistent
//   hashing to backends. The algorithm has the property that the
//   addition/removal of a host from a set of N hosts only affects
//   1/N of the requests.
// * `RANDOM`: The load balancer selects a random healthy host.
// * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
//   connection metadata, i.e., connections are opened
//   to the same address as the destination address of
//   the incoming connection before the connection
//   was redirected to the load balancer.
// * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
//   Maglev is not as stable as ring hash but has faster table lookup
//   build times and host selection times. For more information about
//   Maglev, refer to https://ai.google/research/pubs/pub44824
func (o RegionBackendServiceOutput) LocalityLbPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.StringPtrOutput { return v.LocalityLbPolicy }).(pulumi.StringPtrOutput)
}

// This field denotes the logging options for the load balancer traffic served by this backend service.
// If logging is enabled, logs will be exported to Stackdriver.
// Structure is documented below.
func (o RegionBackendServiceOutput) LogConfig() RegionBackendServiceLogConfigOutput {
	return o.ApplyT(func(v *RegionBackendService) RegionBackendServiceLogConfigOutput { return v.LogConfig }).(RegionBackendServiceLogConfigOutput)
}

// Name of the cookie.
func (o RegionBackendServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The URL of the network to which this backend service belongs.
// This field can only be specified when the load balancing scheme is set to INTERNAL.
func (o RegionBackendServiceOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.StringPtrOutput { return v.Network }).(pulumi.StringPtrOutput)
}

// Settings controlling eviction of unhealthy hosts from the load balancing pool.
// This field is applicable only when the `loadBalancingScheme` is set
// to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, or HTTP2.
// Structure is documented below.
func (o RegionBackendServiceOutput) OutlierDetection() RegionBackendServiceOutlierDetectionPtrOutput {
	return o.ApplyT(func(v *RegionBackendService) RegionBackendServiceOutlierDetectionPtrOutput { return v.OutlierDetection }).(RegionBackendServiceOutlierDetectionPtrOutput)
}

// A named port on a backend instance group representing the port for
// communication to the backend VMs in that group. Required when the
// loadBalancingScheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
// and the backends are instance groups. The named port must be defined on each
// backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
// default of "http" if not given.
// Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
func (o RegionBackendServiceOutput) PortName() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.StringOutput { return v.PortName }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RegionBackendServiceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The protocol this RegionBackendService uses to communicate with backends.
// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
// types and may result in errors if used with the GA API.
// Possible values are `HTTP`, `HTTPS`, `HTTP2`, `SSL`, `TCP`, `UDP`, `GRPC`, and `UNSPECIFIED`.
func (o RegionBackendServiceOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The Region in which the created backend service should reside.
// If it is not provided, the provider region is used.
func (o RegionBackendServiceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The URI of the created resource.
func (o RegionBackendServiceOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Type of session affinity to use. The default is NONE. Session affinity is
// not applicable if the protocol is UDP.
// Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, and `CLIENT_IP_NO_DESTINATION`.
func (o RegionBackendServiceOutput) SessionAffinity() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.StringOutput { return v.SessionAffinity }).(pulumi.StringOutput)
}

// Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing
// and Internal HTTP(S) load balancing.
func (o RegionBackendServiceOutput) Subsetting() RegionBackendServiceSubsettingPtrOutput {
	return o.ApplyT(func(v *RegionBackendService) RegionBackendServiceSubsettingPtrOutput { return v.Subsetting }).(RegionBackendServiceSubsettingPtrOutput)
}

// How many seconds to wait for the backend before considering it a
// failed request. Default is 30 seconds. Valid range is [1, 86400].
func (o RegionBackendServiceOutput) TimeoutSec() pulumi.IntOutput {
	return o.ApplyT(func(v *RegionBackendService) pulumi.IntOutput { return v.TimeoutSec }).(pulumi.IntOutput)
}

type RegionBackendServiceArrayOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionBackendService)(nil)).Elem()
}

func (o RegionBackendServiceArrayOutput) ToRegionBackendServiceArrayOutput() RegionBackendServiceArrayOutput {
	return o
}

func (o RegionBackendServiceArrayOutput) ToRegionBackendServiceArrayOutputWithContext(ctx context.Context) RegionBackendServiceArrayOutput {
	return o
}

func (o RegionBackendServiceArrayOutput) Index(i pulumi.IntInput) RegionBackendServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionBackendService {
		return vs[0].([]*RegionBackendService)[vs[1].(int)]
	}).(RegionBackendServiceOutput)
}

type RegionBackendServiceMapOutput struct{ *pulumi.OutputState }

func (RegionBackendServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionBackendService)(nil)).Elem()
}

func (o RegionBackendServiceMapOutput) ToRegionBackendServiceMapOutput() RegionBackendServiceMapOutput {
	return o
}

func (o RegionBackendServiceMapOutput) ToRegionBackendServiceMapOutputWithContext(ctx context.Context) RegionBackendServiceMapOutput {
	return o
}

func (o RegionBackendServiceMapOutput) MapIndex(k pulumi.StringInput) RegionBackendServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionBackendService {
		return vs[0].(map[string]*RegionBackendService)[vs[1].(string)]
	}).(RegionBackendServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceInput)(nil)).Elem(), &RegionBackendService{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceArrayInput)(nil)).Elem(), RegionBackendServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionBackendServiceMapInput)(nil)).Elem(), RegionBackendServiceMap{})
	pulumi.RegisterOutputType(RegionBackendServiceOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceArrayOutput{})
	pulumi.RegisterOutputType(RegionBackendServiceMapOutput{})
}
