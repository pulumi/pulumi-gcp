// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Secret Manager RegionalSecret. Each of these resources serves a different use case:
//
// * `secretmanager.RegionalSecretIamPolicy`: Authoritative. Sets the IAM policy for the regionalsecret and replaces any existing policy already attached.
// * `secretmanager.RegionalSecretIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the regionalsecret are preserved.
// * `secretmanager.RegionalSecretIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the regionalsecret are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `secretmanager.RegionalSecretIamPolicy`: Retrieves the IAM policy for the regionalsecret
//
// > **Note:** `secretmanager.RegionalSecretIamPolicy` **cannot** be used in conjunction with `secretmanager.RegionalSecretIamBinding` and `secretmanager.RegionalSecretIamMember` or they will fight over what your policy should be.
//
// > **Note:** `secretmanager.RegionalSecretIamBinding` resources **can be** used in conjunction with `secretmanager.RegionalSecretIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## secretmanager.RegionalSecretIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/secretmanager.secretAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
//				Project:    pulumi.Any(regional_secret_basic.Project),
//				Location:   pulumi.Any(regional_secret_basic.Location),
//				SecretId:   pulumi.Any(regional_secret_basic.SecretId),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/secretmanager.secretAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
//				Project:    pulumi.Any(regional_secret_basic.Project),
//				Location:   pulumi.Any(regional_secret_basic.Location),
//				SecretId:   pulumi.Any(regional_secret_basic.SecretId),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## secretmanager.RegionalSecretIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
//				Project:  pulumi.Any(regional_secret_basic.Project),
//				Location: pulumi.Any(regional_secret_basic.Location),
//				SecretId: pulumi.Any(regional_secret_basic.SecretId),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
//				Project:  pulumi.Any(regional_secret_basic.Project),
//				Location: pulumi.Any(regional_secret_basic.Location),
//				SecretId: pulumi.Any(regional_secret_basic.SecretId),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &secretmanager.RegionalSecretIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## secretmanager.RegionalSecretIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
//				Project:  pulumi.Any(regional_secret_basic.Project),
//				Location: pulumi.Any(regional_secret_basic.Location),
//				SecretId: pulumi.Any(regional_secret_basic.SecretId),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
//				Project:  pulumi.Any(regional_secret_basic.Project),
//				Location: pulumi.Any(regional_secret_basic.Location),
//				SecretId: pulumi.Any(regional_secret_basic.SecretId),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.String("user:jane@example.com"),
//				Condition: &secretmanager.RegionalSecretIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Secret Manager RegionalSecret
// Three different resources help you manage your IAM policy for Secret Manager RegionalSecret. Each of these resources serves a different use case:
//
// * `secretmanager.RegionalSecretIamPolicy`: Authoritative. Sets the IAM policy for the regionalsecret and replaces any existing policy already attached.
// * `secretmanager.RegionalSecretIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the regionalsecret are preserved.
// * `secretmanager.RegionalSecretIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the regionalsecret are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `secretmanager.RegionalSecretIamPolicy`: Retrieves the IAM policy for the regionalsecret
//
// > **Note:** `secretmanager.RegionalSecretIamPolicy` **cannot** be used in conjunction with `secretmanager.RegionalSecretIamBinding` and `secretmanager.RegionalSecretIamMember` or they will fight over what your policy should be.
//
// > **Note:** `secretmanager.RegionalSecretIamBinding` resources **can be** used in conjunction with `secretmanager.RegionalSecretIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## secretmanager.RegionalSecretIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/secretmanager.secretAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
//				Project:    pulumi.Any(regional_secret_basic.Project),
//				Location:   pulumi.Any(regional_secret_basic.Location),
//				SecretId:   pulumi.Any(regional_secret_basic.SecretId),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/secretmanager.secretAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
//				Project:    pulumi.Any(regional_secret_basic.Project),
//				Location:   pulumi.Any(regional_secret_basic.Location),
//				SecretId:   pulumi.Any(regional_secret_basic.SecretId),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## secretmanager.RegionalSecretIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
//				Project:  pulumi.Any(regional_secret_basic.Project),
//				Location: pulumi.Any(regional_secret_basic.Location),
//				SecretId: pulumi.Any(regional_secret_basic.SecretId),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
//				Project:  pulumi.Any(regional_secret_basic.Project),
//				Location: pulumi.Any(regional_secret_basic.Location),
//				SecretId: pulumi.Any(regional_secret_basic.SecretId),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &secretmanager.RegionalSecretIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## secretmanager.RegionalSecretIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
//				Project:  pulumi.Any(regional_secret_basic.Project),
//				Location: pulumi.Any(regional_secret_basic.Location),
//				SecretId: pulumi.Any(regional_secret_basic.SecretId),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
//				Project:  pulumi.Any(regional_secret_basic.Project),
//				Location: pulumi.Any(regional_secret_basic.Location),
//				SecretId: pulumi.Any(regional_secret_basic.SecretId),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.String("user:jane@example.com"),
//				Condition: &secretmanager.RegionalSecretIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}
//
// * {{project}}/{{location}}/{{secret_id}}
//
// * {{location}}/{{secret_id}}
//
// * {{secret_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Secret Manager regionalsecret IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:secretmanager/regionalSecretIamBinding:RegionalSecretIamBinding editor "projects/{{project}}/locations/{{location}}/secrets/{{secret_id}} roles/secretmanager.secretAccessor user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:secretmanager/regionalSecretIamBinding:RegionalSecretIamBinding editor "projects/{{project}}/locations/{{location}}/secrets/{{secret_id}} roles/secretmanager.secretAccessor"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:secretmanager/regionalSecretIamBinding:RegionalSecretIamBinding editor projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type RegionalSecretIamBinding struct {
	pulumi.CustomResourceState

	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition RegionalSecretIamBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location of the regional secret. eg us-central1
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `secretmanager.RegionalSecretIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role     pulumi.StringOutput `pulumi:"role"`
	SecretId pulumi.StringOutput `pulumi:"secretId"`
}

// NewRegionalSecretIamBinding registers a new resource with the given unique name, arguments, and options.
func NewRegionalSecretIamBinding(ctx *pulumi.Context,
	name string, args *RegionalSecretIamBindingArgs, opts ...pulumi.ResourceOption) (*RegionalSecretIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.SecretId == nil {
		return nil, errors.New("invalid value for required argument 'SecretId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionalSecretIamBinding
	err := ctx.RegisterResource("gcp:secretmanager/regionalSecretIamBinding:RegionalSecretIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionalSecretIamBinding gets an existing RegionalSecretIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionalSecretIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionalSecretIamBindingState, opts ...pulumi.ResourceOption) (*RegionalSecretIamBinding, error) {
	var resource RegionalSecretIamBinding
	err := ctx.ReadResource("gcp:secretmanager/regionalSecretIamBinding:RegionalSecretIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionalSecretIamBinding resources.
type regionalSecretIamBindingState struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *RegionalSecretIamBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location of the regional secret. eg us-central1
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `secretmanager.RegionalSecretIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role     *string `pulumi:"role"`
	SecretId *string `pulumi:"secretId"`
}

type RegionalSecretIamBindingState struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition RegionalSecretIamBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location of the regional secret. eg us-central1
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `secretmanager.RegionalSecretIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role     pulumi.StringPtrInput
	SecretId pulumi.StringPtrInput
}

func (RegionalSecretIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionalSecretIamBindingState)(nil)).Elem()
}

type regionalSecretIamBindingArgs struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition *RegionalSecretIamBindingCondition `pulumi:"condition"`
	// The location of the regional secret. eg us-central1
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `secretmanager.RegionalSecretIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role     string `pulumi:"role"`
	SecretId string `pulumi:"secretId"`
}

// The set of arguments for constructing a RegionalSecretIamBinding resource.
type RegionalSecretIamBindingArgs struct {
	// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
	// Structure is documented below.
	Condition RegionalSecretIamBindingConditionPtrInput
	// The location of the regional secret. eg us-central1
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `secretmanager.RegionalSecretIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role     pulumi.StringInput
	SecretId pulumi.StringInput
}

func (RegionalSecretIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionalSecretIamBindingArgs)(nil)).Elem()
}

type RegionalSecretIamBindingInput interface {
	pulumi.Input

	ToRegionalSecretIamBindingOutput() RegionalSecretIamBindingOutput
	ToRegionalSecretIamBindingOutputWithContext(ctx context.Context) RegionalSecretIamBindingOutput
}

func (*RegionalSecretIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionalSecretIamBinding)(nil)).Elem()
}

func (i *RegionalSecretIamBinding) ToRegionalSecretIamBindingOutput() RegionalSecretIamBindingOutput {
	return i.ToRegionalSecretIamBindingOutputWithContext(context.Background())
}

func (i *RegionalSecretIamBinding) ToRegionalSecretIamBindingOutputWithContext(ctx context.Context) RegionalSecretIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalSecretIamBindingOutput)
}

// RegionalSecretIamBindingArrayInput is an input type that accepts RegionalSecretIamBindingArray and RegionalSecretIamBindingArrayOutput values.
// You can construct a concrete instance of `RegionalSecretIamBindingArrayInput` via:
//
//	RegionalSecretIamBindingArray{ RegionalSecretIamBindingArgs{...} }
type RegionalSecretIamBindingArrayInput interface {
	pulumi.Input

	ToRegionalSecretIamBindingArrayOutput() RegionalSecretIamBindingArrayOutput
	ToRegionalSecretIamBindingArrayOutputWithContext(context.Context) RegionalSecretIamBindingArrayOutput
}

type RegionalSecretIamBindingArray []RegionalSecretIamBindingInput

func (RegionalSecretIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionalSecretIamBinding)(nil)).Elem()
}

func (i RegionalSecretIamBindingArray) ToRegionalSecretIamBindingArrayOutput() RegionalSecretIamBindingArrayOutput {
	return i.ToRegionalSecretIamBindingArrayOutputWithContext(context.Background())
}

func (i RegionalSecretIamBindingArray) ToRegionalSecretIamBindingArrayOutputWithContext(ctx context.Context) RegionalSecretIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalSecretIamBindingArrayOutput)
}

// RegionalSecretIamBindingMapInput is an input type that accepts RegionalSecretIamBindingMap and RegionalSecretIamBindingMapOutput values.
// You can construct a concrete instance of `RegionalSecretIamBindingMapInput` via:
//
//	RegionalSecretIamBindingMap{ "key": RegionalSecretIamBindingArgs{...} }
type RegionalSecretIamBindingMapInput interface {
	pulumi.Input

	ToRegionalSecretIamBindingMapOutput() RegionalSecretIamBindingMapOutput
	ToRegionalSecretIamBindingMapOutputWithContext(context.Context) RegionalSecretIamBindingMapOutput
}

type RegionalSecretIamBindingMap map[string]RegionalSecretIamBindingInput

func (RegionalSecretIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionalSecretIamBinding)(nil)).Elem()
}

func (i RegionalSecretIamBindingMap) ToRegionalSecretIamBindingMapOutput() RegionalSecretIamBindingMapOutput {
	return i.ToRegionalSecretIamBindingMapOutputWithContext(context.Background())
}

func (i RegionalSecretIamBindingMap) ToRegionalSecretIamBindingMapOutputWithContext(ctx context.Context) RegionalSecretIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalSecretIamBindingMapOutput)
}

type RegionalSecretIamBindingOutput struct{ *pulumi.OutputState }

func (RegionalSecretIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionalSecretIamBinding)(nil)).Elem()
}

func (o RegionalSecretIamBindingOutput) ToRegionalSecretIamBindingOutput() RegionalSecretIamBindingOutput {
	return o
}

func (o RegionalSecretIamBindingOutput) ToRegionalSecretIamBindingOutputWithContext(ctx context.Context) RegionalSecretIamBindingOutput {
	return o
}

// An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
// Structure is documented below.
func (o RegionalSecretIamBindingOutput) Condition() RegionalSecretIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *RegionalSecretIamBinding) RegionalSecretIamBindingConditionPtrOutput { return v.Condition }).(RegionalSecretIamBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o RegionalSecretIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location of the regional secret. eg us-central1
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o RegionalSecretIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o RegionalSecretIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionalSecretIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o RegionalSecretIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `secretmanager.RegionalSecretIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o RegionalSecretIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o RegionalSecretIamBindingOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretIamBinding) pulumi.StringOutput { return v.SecretId }).(pulumi.StringOutput)
}

type RegionalSecretIamBindingArrayOutput struct{ *pulumi.OutputState }

func (RegionalSecretIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionalSecretIamBinding)(nil)).Elem()
}

func (o RegionalSecretIamBindingArrayOutput) ToRegionalSecretIamBindingArrayOutput() RegionalSecretIamBindingArrayOutput {
	return o
}

func (o RegionalSecretIamBindingArrayOutput) ToRegionalSecretIamBindingArrayOutputWithContext(ctx context.Context) RegionalSecretIamBindingArrayOutput {
	return o
}

func (o RegionalSecretIamBindingArrayOutput) Index(i pulumi.IntInput) RegionalSecretIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionalSecretIamBinding {
		return vs[0].([]*RegionalSecretIamBinding)[vs[1].(int)]
	}).(RegionalSecretIamBindingOutput)
}

type RegionalSecretIamBindingMapOutput struct{ *pulumi.OutputState }

func (RegionalSecretIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionalSecretIamBinding)(nil)).Elem()
}

func (o RegionalSecretIamBindingMapOutput) ToRegionalSecretIamBindingMapOutput() RegionalSecretIamBindingMapOutput {
	return o
}

func (o RegionalSecretIamBindingMapOutput) ToRegionalSecretIamBindingMapOutputWithContext(ctx context.Context) RegionalSecretIamBindingMapOutput {
	return o
}

func (o RegionalSecretIamBindingMapOutput) MapIndex(k pulumi.StringInput) RegionalSecretIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionalSecretIamBinding {
		return vs[0].(map[string]*RegionalSecretIamBinding)[vs[1].(string)]
	}).(RegionalSecretIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalSecretIamBindingInput)(nil)).Elem(), &RegionalSecretIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalSecretIamBindingArrayInput)(nil)).Elem(), RegionalSecretIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalSecretIamBindingMapInput)(nil)).Elem(), RegionalSecretIamBindingMap{})
	pulumi.RegisterOutputType(RegionalSecretIamBindingOutput{})
	pulumi.RegisterOutputType(RegionalSecretIamBindingArrayOutput{})
	pulumi.RegisterOutputType(RegionalSecretIamBindingMapOutput{})
}
