// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Secret Manager RegionalSecret. Each of these resources serves a different use case:
//
// * `secretmanager.RegionalSecretIamPolicy`: Authoritative. Sets the IAM policy for the regionalsecret and replaces any existing policy already attached.
// * `secretmanager.RegionalSecretIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the regionalsecret are preserved.
// * `secretmanager.RegionalSecretIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the regionalsecret are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `secretmanager.RegionalSecretIamPolicy`: Retrieves the IAM policy for the regionalsecret
//
// > **Note:** `secretmanager.RegionalSecretIamPolicy` **cannot** be used in conjunction with `secretmanager.RegionalSecretIamBinding` and `secretmanager.RegionalSecretIamMember` or they will fight over what your policy should be.
//
// > **Note:** `secretmanager.RegionalSecretIamBinding` resources **can be** used in conjunction with `secretmanager.RegionalSecretIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## secretmanager.RegionalSecretIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/secretmanager.secretAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
//				Project:    pulumi.Any(regional_secret_basic.Project),
//				Location:   pulumi.Any(regional_secret_basic.Location),
//				SecretId:   pulumi.Any(regional_secret_basic.SecretId),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/secretmanager.secretAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
//				Project:    pulumi.Any(regional_secret_basic.Project),
//				Location:   pulumi.Any(regional_secret_basic.Location),
//				SecretId:   pulumi.Any(regional_secret_basic.SecretId),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## secretmanager.RegionalSecretIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
//				Project:  pulumi.Any(regional_secret_basic.Project),
//				Location: pulumi.Any(regional_secret_basic.Location),
//				SecretId: pulumi.Any(regional_secret_basic.SecretId),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
//				Project:  pulumi.Any(regional_secret_basic.Project),
//				Location: pulumi.Any(regional_secret_basic.Location),
//				SecretId: pulumi.Any(regional_secret_basic.SecretId),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &secretmanager.RegionalSecretIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## secretmanager.RegionalSecretIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
//				Project:  pulumi.Any(regional_secret_basic.Project),
//				Location: pulumi.Any(regional_secret_basic.Location),
//				SecretId: pulumi.Any(regional_secret_basic.SecretId),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
//				Project:  pulumi.Any(regional_secret_basic.Project),
//				Location: pulumi.Any(regional_secret_basic.Location),
//				SecretId: pulumi.Any(regional_secret_basic.SecretId),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.String("user:jane@example.com"),
//				Condition: &secretmanager.RegionalSecretIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Secret Manager RegionalSecret
// Three different resources help you manage your IAM policy for Secret Manager RegionalSecret. Each of these resources serves a different use case:
//
// * `secretmanager.RegionalSecretIamPolicy`: Authoritative. Sets the IAM policy for the regionalsecret and replaces any existing policy already attached.
// * `secretmanager.RegionalSecretIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the regionalsecret are preserved.
// * `secretmanager.RegionalSecretIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the regionalsecret are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `secretmanager.RegionalSecretIamPolicy`: Retrieves the IAM policy for the regionalsecret
//
// > **Note:** `secretmanager.RegionalSecretIamPolicy` **cannot** be used in conjunction with `secretmanager.RegionalSecretIamBinding` and `secretmanager.RegionalSecretIamMember` or they will fight over what your policy should be.
//
// > **Note:** `secretmanager.RegionalSecretIamBinding` resources **can be** used in conjunction with `secretmanager.RegionalSecretIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## secretmanager.RegionalSecretIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/secretmanager.secretAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
//				Project:    pulumi.Any(regional_secret_basic.Project),
//				Location:   pulumi.Any(regional_secret_basic.Location),
//				SecretId:   pulumi.Any(regional_secret_basic.SecretId),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/secretmanager.secretAccessor",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
//				Project:    pulumi.Any(regional_secret_basic.Project),
//				Location:   pulumi.Any(regional_secret_basic.Location),
//				SecretId:   pulumi.Any(regional_secret_basic.SecretId),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## secretmanager.RegionalSecretIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
//				Project:  pulumi.Any(regional_secret_basic.Project),
//				Location: pulumi.Any(regional_secret_basic.Location),
//				SecretId: pulumi.Any(regional_secret_basic.SecretId),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
//				Project:  pulumi.Any(regional_secret_basic.Project),
//				Location: pulumi.Any(regional_secret_basic.Location),
//				SecretId: pulumi.Any(regional_secret_basic.SecretId),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &secretmanager.RegionalSecretIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## secretmanager.RegionalSecretIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
//				Project:  pulumi.Any(regional_secret_basic.Project),
//				Location: pulumi.Any(regional_secret_basic.Location),
//				SecretId: pulumi.Any(regional_secret_basic.SecretId),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
//				Project:  pulumi.Any(regional_secret_basic.Project),
//				Location: pulumi.Any(regional_secret_basic.Location),
//				SecretId: pulumi.Any(regional_secret_basic.SecretId),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.String("user:jane@example.com"),
//				Condition: &secretmanager.RegionalSecretIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}
//
// * {{project}}/{{location}}/{{secret_id}}
//
// * {{location}}/{{secret_id}}
//
// * {{secret_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Secret Manager regionalsecret IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:secretmanager/regionalSecretIamPolicy:RegionalSecretIamPolicy editor "projects/{{project}}/locations/{{location}}/secrets/{{secret_id}} roles/secretmanager.secretAccessor user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:secretmanager/regionalSecretIamPolicy:RegionalSecretIamPolicy editor "projects/{{project}}/locations/{{location}}/secrets/{{secret_id}} roles/secretmanager.secretAccessor"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:secretmanager/regionalSecretIamPolicy:RegionalSecretIamPolicy editor projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type RegionalSecretIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location of the regional secret. eg us-central1
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project  pulumi.StringOutput `pulumi:"project"`
	SecretId pulumi.StringOutput `pulumi:"secretId"`
}

// NewRegionalSecretIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewRegionalSecretIamPolicy(ctx *pulumi.Context,
	name string, args *RegionalSecretIamPolicyArgs, opts ...pulumi.ResourceOption) (*RegionalSecretIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.SecretId == nil {
		return nil, errors.New("invalid value for required argument 'SecretId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionalSecretIamPolicy
	err := ctx.RegisterResource("gcp:secretmanager/regionalSecretIamPolicy:RegionalSecretIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionalSecretIamPolicy gets an existing RegionalSecretIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionalSecretIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionalSecretIamPolicyState, opts ...pulumi.ResourceOption) (*RegionalSecretIamPolicy, error) {
	var resource RegionalSecretIamPolicy
	err := ctx.ReadResource("gcp:secretmanager/regionalSecretIamPolicy:RegionalSecretIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionalSecretIamPolicy resources.
type regionalSecretIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location of the regional secret. eg us-central1
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project  *string `pulumi:"project"`
	SecretId *string `pulumi:"secretId"`
}

type RegionalSecretIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location of the regional secret. eg us-central1
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project  pulumi.StringPtrInput
	SecretId pulumi.StringPtrInput
}

func (RegionalSecretIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionalSecretIamPolicyState)(nil)).Elem()
}

type regionalSecretIamPolicyArgs struct {
	// The location of the regional secret. eg us-central1
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project  *string `pulumi:"project"`
	SecretId string  `pulumi:"secretId"`
}

// The set of arguments for constructing a RegionalSecretIamPolicy resource.
type RegionalSecretIamPolicyArgs struct {
	// The location of the regional secret. eg us-central1
	// Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project  pulumi.StringPtrInput
	SecretId pulumi.StringInput
}

func (RegionalSecretIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionalSecretIamPolicyArgs)(nil)).Elem()
}

type RegionalSecretIamPolicyInput interface {
	pulumi.Input

	ToRegionalSecretIamPolicyOutput() RegionalSecretIamPolicyOutput
	ToRegionalSecretIamPolicyOutputWithContext(ctx context.Context) RegionalSecretIamPolicyOutput
}

func (*RegionalSecretIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionalSecretIamPolicy)(nil)).Elem()
}

func (i *RegionalSecretIamPolicy) ToRegionalSecretIamPolicyOutput() RegionalSecretIamPolicyOutput {
	return i.ToRegionalSecretIamPolicyOutputWithContext(context.Background())
}

func (i *RegionalSecretIamPolicy) ToRegionalSecretIamPolicyOutputWithContext(ctx context.Context) RegionalSecretIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalSecretIamPolicyOutput)
}

// RegionalSecretIamPolicyArrayInput is an input type that accepts RegionalSecretIamPolicyArray and RegionalSecretIamPolicyArrayOutput values.
// You can construct a concrete instance of `RegionalSecretIamPolicyArrayInput` via:
//
//	RegionalSecretIamPolicyArray{ RegionalSecretIamPolicyArgs{...} }
type RegionalSecretIamPolicyArrayInput interface {
	pulumi.Input

	ToRegionalSecretIamPolicyArrayOutput() RegionalSecretIamPolicyArrayOutput
	ToRegionalSecretIamPolicyArrayOutputWithContext(context.Context) RegionalSecretIamPolicyArrayOutput
}

type RegionalSecretIamPolicyArray []RegionalSecretIamPolicyInput

func (RegionalSecretIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionalSecretIamPolicy)(nil)).Elem()
}

func (i RegionalSecretIamPolicyArray) ToRegionalSecretIamPolicyArrayOutput() RegionalSecretIamPolicyArrayOutput {
	return i.ToRegionalSecretIamPolicyArrayOutputWithContext(context.Background())
}

func (i RegionalSecretIamPolicyArray) ToRegionalSecretIamPolicyArrayOutputWithContext(ctx context.Context) RegionalSecretIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalSecretIamPolicyArrayOutput)
}

// RegionalSecretIamPolicyMapInput is an input type that accepts RegionalSecretIamPolicyMap and RegionalSecretIamPolicyMapOutput values.
// You can construct a concrete instance of `RegionalSecretIamPolicyMapInput` via:
//
//	RegionalSecretIamPolicyMap{ "key": RegionalSecretIamPolicyArgs{...} }
type RegionalSecretIamPolicyMapInput interface {
	pulumi.Input

	ToRegionalSecretIamPolicyMapOutput() RegionalSecretIamPolicyMapOutput
	ToRegionalSecretIamPolicyMapOutputWithContext(context.Context) RegionalSecretIamPolicyMapOutput
}

type RegionalSecretIamPolicyMap map[string]RegionalSecretIamPolicyInput

func (RegionalSecretIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionalSecretIamPolicy)(nil)).Elem()
}

func (i RegionalSecretIamPolicyMap) ToRegionalSecretIamPolicyMapOutput() RegionalSecretIamPolicyMapOutput {
	return i.ToRegionalSecretIamPolicyMapOutputWithContext(context.Background())
}

func (i RegionalSecretIamPolicyMap) ToRegionalSecretIamPolicyMapOutputWithContext(ctx context.Context) RegionalSecretIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalSecretIamPolicyMapOutput)
}

type RegionalSecretIamPolicyOutput struct{ *pulumi.OutputState }

func (RegionalSecretIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionalSecretIamPolicy)(nil)).Elem()
}

func (o RegionalSecretIamPolicyOutput) ToRegionalSecretIamPolicyOutput() RegionalSecretIamPolicyOutput {
	return o
}

func (o RegionalSecretIamPolicyOutput) ToRegionalSecretIamPolicyOutputWithContext(ctx context.Context) RegionalSecretIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o RegionalSecretIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location of the regional secret. eg us-central1
// Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o RegionalSecretIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o RegionalSecretIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o RegionalSecretIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o RegionalSecretIamPolicyOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretIamPolicy) pulumi.StringOutput { return v.SecretId }).(pulumi.StringOutput)
}

type RegionalSecretIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (RegionalSecretIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionalSecretIamPolicy)(nil)).Elem()
}

func (o RegionalSecretIamPolicyArrayOutput) ToRegionalSecretIamPolicyArrayOutput() RegionalSecretIamPolicyArrayOutput {
	return o
}

func (o RegionalSecretIamPolicyArrayOutput) ToRegionalSecretIamPolicyArrayOutputWithContext(ctx context.Context) RegionalSecretIamPolicyArrayOutput {
	return o
}

func (o RegionalSecretIamPolicyArrayOutput) Index(i pulumi.IntInput) RegionalSecretIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionalSecretIamPolicy {
		return vs[0].([]*RegionalSecretIamPolicy)[vs[1].(int)]
	}).(RegionalSecretIamPolicyOutput)
}

type RegionalSecretIamPolicyMapOutput struct{ *pulumi.OutputState }

func (RegionalSecretIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionalSecretIamPolicy)(nil)).Elem()
}

func (o RegionalSecretIamPolicyMapOutput) ToRegionalSecretIamPolicyMapOutput() RegionalSecretIamPolicyMapOutput {
	return o
}

func (o RegionalSecretIamPolicyMapOutput) ToRegionalSecretIamPolicyMapOutputWithContext(ctx context.Context) RegionalSecretIamPolicyMapOutput {
	return o
}

func (o RegionalSecretIamPolicyMapOutput) MapIndex(k pulumi.StringInput) RegionalSecretIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionalSecretIamPolicy {
		return vs[0].(map[string]*RegionalSecretIamPolicy)[vs[1].(string)]
	}).(RegionalSecretIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalSecretIamPolicyInput)(nil)).Elem(), &RegionalSecretIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalSecretIamPolicyArrayInput)(nil)).Elem(), RegionalSecretIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalSecretIamPolicyMapInput)(nil)).Elem(), RegionalSecretIamPolicyMap{})
	pulumi.RegisterOutputType(RegionalSecretIamPolicyOutput{})
	pulumi.RegisterOutputType(RegionalSecretIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(RegionalSecretIamPolicyMapOutput{})
}
