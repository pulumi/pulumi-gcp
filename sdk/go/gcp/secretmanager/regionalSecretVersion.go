// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A regional secret version resource.
//
// To get more information about RegionalSecretVersion, see:
//
// * [API documentation](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.locations.secrets.versions)
// * How-to Guides
//   - [Create and deploy a Regional Secret Version](https://cloud.google.com/secret-manager/regional-secrets/add-secret-version-rs)
//
// ## Example Usage
//
// ### Regional Secret Version Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			secret_basic, err := secretmanager.NewRegionalSecret(ctx, "secret-basic", &secretmanager.RegionalSecretArgs{
//				SecretId: pulumi.String("secret-version"),
//				Location: pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewRegionalSecretVersion(ctx, "regional_secret_version_basic", &secretmanager.RegionalSecretVersionArgs{
//				Secret:     secret_basic.ID(),
//				SecretData: pulumi.String("secret-data"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Regional Secret Version With Base64 Data
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			secret_basic, err := secretmanager.NewRegionalSecret(ctx, "secret-basic", &secretmanager.RegionalSecretArgs{
//				SecretId: pulumi.String("secret-version"),
//				Location: pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFilebase64, err := std.Filebase64(ctx, &std.Filebase64Args{
//				Input: "secret-data.pfx",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewRegionalSecretVersion(ctx, "regional_secret_version_base64", &secretmanager.RegionalSecretVersionArgs{
//				Secret:             secret_basic.ID(),
//				SecretData:         pulumi.String(invokeFilebase64.Result),
//				IsSecretDataBase64: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Regional Secret Version Disabled
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			secret_basic, err := secretmanager.NewRegionalSecret(ctx, "secret-basic", &secretmanager.RegionalSecretArgs{
//				SecretId: pulumi.String("secret-version"),
//				Location: pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewRegionalSecretVersion(ctx, "regional_secret_version_disabled", &secretmanager.RegionalSecretVersionArgs{
//				Secret:     secret_basic.ID(),
//				SecretData: pulumi.String("secret-data"),
//				Enabled:    pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Regional Secret Version Deletion Policy Abandon
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			secret_basic, err := secretmanager.NewRegionalSecret(ctx, "secret-basic", &secretmanager.RegionalSecretArgs{
//				SecretId: pulumi.String("secret-version"),
//				Location: pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewRegionalSecretVersion(ctx, "regional_secret_version_deletion_policy", &secretmanager.RegionalSecretVersionArgs{
//				Secret:         secret_basic.ID(),
//				SecretData:     pulumi.String("secret-data"),
//				DeletionPolicy: pulumi.String("ABANDON"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Regional Secret Version Deletion Policy Disable
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			secret_basic, err := secretmanager.NewRegionalSecret(ctx, "secret-basic", &secretmanager.RegionalSecretArgs{
//				SecretId: pulumi.String("secret-version"),
//				Location: pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewRegionalSecretVersion(ctx, "regional_secret_version_deletion_policy", &secretmanager.RegionalSecretVersionArgs{
//				Secret:         secret_basic.ID(),
//				SecretData:     pulumi.String("secret-data"),
//				DeletionPolicy: pulumi.String("DISABLE"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RegionalSecretVersion can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}`
//
// When using the `pulumi import` command, RegionalSecretVersion can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:secretmanager/regionalSecretVersion:RegionalSecretVersion default projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}
// ```
type RegionalSecretVersion struct {
	pulumi.CustomResourceState

	// The time at which the regional secret version was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The customer-managed encryption configuration of the regional secret.
	// Structure is documented below.
	CustomerManagedEncryptions RegionalSecretVersionCustomerManagedEncryptionArrayOutput `pulumi:"customerManagedEncryptions"`
	// The deletion policy for the regional secret version. Setting `ABANDON` allows the resource
	// to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
	// disabled rather than deleted. Default is `DELETE`. Possible values are:
	// * DELETE
	// * DISABLE
	// * ABANDON
	DeletionPolicy pulumi.StringPtrOutput `pulumi:"deletionPolicy"`
	// The time at which the regional secret version was destroyed. Only present if state is DESTROYED.
	DestroyTime pulumi.StringOutput `pulumi:"destroyTime"`
	// The current state of the regional secret version.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// If set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.
	IsSecretDataBase64 pulumi.BoolPtrOutput `pulumi:"isSecretDataBase64"`
	// Location of Secret Manager regional secret resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the regional secret version. Format:
	// `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}`
	Name pulumi.StringOutput `pulumi:"name"`
	// Secret Manager regional secret resource.
	//
	// ***
	Secret pulumi.StringOutput `pulumi:"secret"`
	// The secret data. Must be no larger than 64KiB.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	SecretData pulumi.StringOutput `pulumi:"secretData"`
	// The version of the Regional Secret.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewRegionalSecretVersion registers a new resource with the given unique name, arguments, and options.
func NewRegionalSecretVersion(ctx *pulumi.Context,
	name string, args *RegionalSecretVersionArgs, opts ...pulumi.ResourceOption) (*RegionalSecretVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Secret == nil {
		return nil, errors.New("invalid value for required argument 'Secret'")
	}
	if args.SecretData == nil {
		return nil, errors.New("invalid value for required argument 'SecretData'")
	}
	if args.SecretData != nil {
		args.SecretData = pulumi.ToSecret(args.SecretData).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secretData",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionalSecretVersion
	err := ctx.RegisterResource("gcp:secretmanager/regionalSecretVersion:RegionalSecretVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionalSecretVersion gets an existing RegionalSecretVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionalSecretVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionalSecretVersionState, opts ...pulumi.ResourceOption) (*RegionalSecretVersion, error) {
	var resource RegionalSecretVersion
	err := ctx.ReadResource("gcp:secretmanager/regionalSecretVersion:RegionalSecretVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionalSecretVersion resources.
type regionalSecretVersionState struct {
	// The time at which the regional secret version was created.
	CreateTime *string `pulumi:"createTime"`
	// The customer-managed encryption configuration of the regional secret.
	// Structure is documented below.
	CustomerManagedEncryptions []RegionalSecretVersionCustomerManagedEncryption `pulumi:"customerManagedEncryptions"`
	// The deletion policy for the regional secret version. Setting `ABANDON` allows the resource
	// to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
	// disabled rather than deleted. Default is `DELETE`. Possible values are:
	// * DELETE
	// * DISABLE
	// * ABANDON
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// The time at which the regional secret version was destroyed. Only present if state is DESTROYED.
	DestroyTime *string `pulumi:"destroyTime"`
	// The current state of the regional secret version.
	Enabled *bool `pulumi:"enabled"`
	// If set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.
	IsSecretDataBase64 *bool `pulumi:"isSecretDataBase64"`
	// Location of Secret Manager regional secret resource.
	Location *string `pulumi:"location"`
	// The resource name of the regional secret version. Format:
	// `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}`
	Name *string `pulumi:"name"`
	// Secret Manager regional secret resource.
	//
	// ***
	Secret *string `pulumi:"secret"`
	// The secret data. Must be no larger than 64KiB.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	SecretData *string `pulumi:"secretData"`
	// The version of the Regional Secret.
	Version *string `pulumi:"version"`
}

type RegionalSecretVersionState struct {
	// The time at which the regional secret version was created.
	CreateTime pulumi.StringPtrInput
	// The customer-managed encryption configuration of the regional secret.
	// Structure is documented below.
	CustomerManagedEncryptions RegionalSecretVersionCustomerManagedEncryptionArrayInput
	// The deletion policy for the regional secret version. Setting `ABANDON` allows the resource
	// to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
	// disabled rather than deleted. Default is `DELETE`. Possible values are:
	// * DELETE
	// * DISABLE
	// * ABANDON
	DeletionPolicy pulumi.StringPtrInput
	// The time at which the regional secret version was destroyed. Only present if state is DESTROYED.
	DestroyTime pulumi.StringPtrInput
	// The current state of the regional secret version.
	Enabled pulumi.BoolPtrInput
	// If set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.
	IsSecretDataBase64 pulumi.BoolPtrInput
	// Location of Secret Manager regional secret resource.
	Location pulumi.StringPtrInput
	// The resource name of the regional secret version. Format:
	// `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}`
	Name pulumi.StringPtrInput
	// Secret Manager regional secret resource.
	//
	// ***
	Secret pulumi.StringPtrInput
	// The secret data. Must be no larger than 64KiB.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	SecretData pulumi.StringPtrInput
	// The version of the Regional Secret.
	Version pulumi.StringPtrInput
}

func (RegionalSecretVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionalSecretVersionState)(nil)).Elem()
}

type regionalSecretVersionArgs struct {
	// The deletion policy for the regional secret version. Setting `ABANDON` allows the resource
	// to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
	// disabled rather than deleted. Default is `DELETE`. Possible values are:
	// * DELETE
	// * DISABLE
	// * ABANDON
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// The current state of the regional secret version.
	Enabled *bool `pulumi:"enabled"`
	// If set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.
	IsSecretDataBase64 *bool `pulumi:"isSecretDataBase64"`
	// Secret Manager regional secret resource.
	//
	// ***
	Secret string `pulumi:"secret"`
	// The secret data. Must be no larger than 64KiB.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	SecretData string `pulumi:"secretData"`
}

// The set of arguments for constructing a RegionalSecretVersion resource.
type RegionalSecretVersionArgs struct {
	// The deletion policy for the regional secret version. Setting `ABANDON` allows the resource
	// to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
	// disabled rather than deleted. Default is `DELETE`. Possible values are:
	// * DELETE
	// * DISABLE
	// * ABANDON
	DeletionPolicy pulumi.StringPtrInput
	// The current state of the regional secret version.
	Enabled pulumi.BoolPtrInput
	// If set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.
	IsSecretDataBase64 pulumi.BoolPtrInput
	// Secret Manager regional secret resource.
	//
	// ***
	Secret pulumi.StringInput
	// The secret data. Must be no larger than 64KiB.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	SecretData pulumi.StringInput
}

func (RegionalSecretVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionalSecretVersionArgs)(nil)).Elem()
}

type RegionalSecretVersionInput interface {
	pulumi.Input

	ToRegionalSecretVersionOutput() RegionalSecretVersionOutput
	ToRegionalSecretVersionOutputWithContext(ctx context.Context) RegionalSecretVersionOutput
}

func (*RegionalSecretVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionalSecretVersion)(nil)).Elem()
}

func (i *RegionalSecretVersion) ToRegionalSecretVersionOutput() RegionalSecretVersionOutput {
	return i.ToRegionalSecretVersionOutputWithContext(context.Background())
}

func (i *RegionalSecretVersion) ToRegionalSecretVersionOutputWithContext(ctx context.Context) RegionalSecretVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalSecretVersionOutput)
}

// RegionalSecretVersionArrayInput is an input type that accepts RegionalSecretVersionArray and RegionalSecretVersionArrayOutput values.
// You can construct a concrete instance of `RegionalSecretVersionArrayInput` via:
//
//	RegionalSecretVersionArray{ RegionalSecretVersionArgs{...} }
type RegionalSecretVersionArrayInput interface {
	pulumi.Input

	ToRegionalSecretVersionArrayOutput() RegionalSecretVersionArrayOutput
	ToRegionalSecretVersionArrayOutputWithContext(context.Context) RegionalSecretVersionArrayOutput
}

type RegionalSecretVersionArray []RegionalSecretVersionInput

func (RegionalSecretVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionalSecretVersion)(nil)).Elem()
}

func (i RegionalSecretVersionArray) ToRegionalSecretVersionArrayOutput() RegionalSecretVersionArrayOutput {
	return i.ToRegionalSecretVersionArrayOutputWithContext(context.Background())
}

func (i RegionalSecretVersionArray) ToRegionalSecretVersionArrayOutputWithContext(ctx context.Context) RegionalSecretVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalSecretVersionArrayOutput)
}

// RegionalSecretVersionMapInput is an input type that accepts RegionalSecretVersionMap and RegionalSecretVersionMapOutput values.
// You can construct a concrete instance of `RegionalSecretVersionMapInput` via:
//
//	RegionalSecretVersionMap{ "key": RegionalSecretVersionArgs{...} }
type RegionalSecretVersionMapInput interface {
	pulumi.Input

	ToRegionalSecretVersionMapOutput() RegionalSecretVersionMapOutput
	ToRegionalSecretVersionMapOutputWithContext(context.Context) RegionalSecretVersionMapOutput
}

type RegionalSecretVersionMap map[string]RegionalSecretVersionInput

func (RegionalSecretVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionalSecretVersion)(nil)).Elem()
}

func (i RegionalSecretVersionMap) ToRegionalSecretVersionMapOutput() RegionalSecretVersionMapOutput {
	return i.ToRegionalSecretVersionMapOutputWithContext(context.Background())
}

func (i RegionalSecretVersionMap) ToRegionalSecretVersionMapOutputWithContext(ctx context.Context) RegionalSecretVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalSecretVersionMapOutput)
}

type RegionalSecretVersionOutput struct{ *pulumi.OutputState }

func (RegionalSecretVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionalSecretVersion)(nil)).Elem()
}

func (o RegionalSecretVersionOutput) ToRegionalSecretVersionOutput() RegionalSecretVersionOutput {
	return o
}

func (o RegionalSecretVersionOutput) ToRegionalSecretVersionOutputWithContext(ctx context.Context) RegionalSecretVersionOutput {
	return o
}

// The time at which the regional secret version was created.
func (o RegionalSecretVersionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretVersion) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The customer-managed encryption configuration of the regional secret.
// Structure is documented below.
func (o RegionalSecretVersionOutput) CustomerManagedEncryptions() RegionalSecretVersionCustomerManagedEncryptionArrayOutput {
	return o.ApplyT(func(v *RegionalSecretVersion) RegionalSecretVersionCustomerManagedEncryptionArrayOutput {
		return v.CustomerManagedEncryptions
	}).(RegionalSecretVersionCustomerManagedEncryptionArrayOutput)
}

// The deletion policy for the regional secret version. Setting `ABANDON` allows the resource
// to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
// disabled rather than deleted. Default is `DELETE`. Possible values are:
// * DELETE
// * DISABLE
// * ABANDON
func (o RegionalSecretVersionOutput) DeletionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionalSecretVersion) pulumi.StringPtrOutput { return v.DeletionPolicy }).(pulumi.StringPtrOutput)
}

// The time at which the regional secret version was destroyed. Only present if state is DESTROYED.
func (o RegionalSecretVersionOutput) DestroyTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretVersion) pulumi.StringOutput { return v.DestroyTime }).(pulumi.StringOutput)
}

// The current state of the regional secret version.
func (o RegionalSecretVersionOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionalSecretVersion) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// If set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.
func (o RegionalSecretVersionOutput) IsSecretDataBase64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegionalSecretVersion) pulumi.BoolPtrOutput { return v.IsSecretDataBase64 }).(pulumi.BoolPtrOutput)
}

// Location of Secret Manager regional secret resource.
func (o RegionalSecretVersionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretVersion) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the regional secret version. Format:
// `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}`
func (o RegionalSecretVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretVersion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Secret Manager regional secret resource.
//
// ***
func (o RegionalSecretVersionOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretVersion) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

// The secret data. Must be no larger than 64KiB.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o RegionalSecretVersionOutput) SecretData() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretVersion) pulumi.StringOutput { return v.SecretData }).(pulumi.StringOutput)
}

// The version of the Regional Secret.
func (o RegionalSecretVersionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecretVersion) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type RegionalSecretVersionArrayOutput struct{ *pulumi.OutputState }

func (RegionalSecretVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionalSecretVersion)(nil)).Elem()
}

func (o RegionalSecretVersionArrayOutput) ToRegionalSecretVersionArrayOutput() RegionalSecretVersionArrayOutput {
	return o
}

func (o RegionalSecretVersionArrayOutput) ToRegionalSecretVersionArrayOutputWithContext(ctx context.Context) RegionalSecretVersionArrayOutput {
	return o
}

func (o RegionalSecretVersionArrayOutput) Index(i pulumi.IntInput) RegionalSecretVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionalSecretVersion {
		return vs[0].([]*RegionalSecretVersion)[vs[1].(int)]
	}).(RegionalSecretVersionOutput)
}

type RegionalSecretVersionMapOutput struct{ *pulumi.OutputState }

func (RegionalSecretVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionalSecretVersion)(nil)).Elem()
}

func (o RegionalSecretVersionMapOutput) ToRegionalSecretVersionMapOutput() RegionalSecretVersionMapOutput {
	return o
}

func (o RegionalSecretVersionMapOutput) ToRegionalSecretVersionMapOutputWithContext(ctx context.Context) RegionalSecretVersionMapOutput {
	return o
}

func (o RegionalSecretVersionMapOutput) MapIndex(k pulumi.StringInput) RegionalSecretVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionalSecretVersion {
		return vs[0].(map[string]*RegionalSecretVersion)[vs[1].(string)]
	}).(RegionalSecretVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalSecretVersionInput)(nil)).Elem(), &RegionalSecretVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalSecretVersionArrayInput)(nil)).Elem(), RegionalSecretVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalSecretVersionMapInput)(nil)).Elem(), RegionalSecretVersionMap{})
	pulumi.RegisterOutputType(RegionalSecretVersionOutput{})
	pulumi.RegisterOutputType(RegionalSecretVersionArrayOutput{})
	pulumi.RegisterOutputType(RegionalSecretVersionMapOutput{})
}
