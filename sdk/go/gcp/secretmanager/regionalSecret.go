// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Regional Secret is a logical secret whose value and versions can be created and accessed within a region only.
//
// To get more information about RegionalSecret, see:
//
// * [API documentation](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.locations.secrets)
// * How-to Guides
//   - [Create and deploy a Regional Secret](https://cloud.google.com/secret-manager/regional-secrets/create-regional-secret)
//
// ## Example Usage
//
// ### Regional Secret Config Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecret(ctx, "regional-secret-basic", &secretmanager.RegionalSecretArgs{
//				SecretId: pulumi.String("tf-reg-secret"),
//				Location: pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("my-label"),
//				},
//				Annotations: pulumi.StringMap{
//					"key1": pulumi.String("value1"),
//					"key2": pulumi.String("value2"),
//					"key3": pulumi.String("value3"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Regional Secret With Cmek
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			kms_secret_binding, err := kms.NewCryptoKeyIAMMember(ctx, "kms-secret-binding", &kms.CryptoKeyIAMMemberArgs{
//				CryptoKeyId: pulumi.String("kms-key"),
//				Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
//				Member:      pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-secretmanager.iam.gserviceaccount.com", project.Number),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewRegionalSecret(ctx, "regional-secret-with-cmek", &secretmanager.RegionalSecretArgs{
//				SecretId: pulumi.String("tf-reg-secret"),
//				Location: pulumi.String("us-central1"),
//				CustomerManagedEncryption: &secretmanager.RegionalSecretCustomerManagedEncryptionArgs{
//					KmsKeyName: pulumi.String("kms-key"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				kms_secret_binding,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Regional Secret With Rotation
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			topic, err := pubsub.NewTopic(ctx, "topic", &pubsub.TopicArgs{
//				Name: pulumi.String("tf-topic"),
//			})
//			if err != nil {
//				return err
//			}
//			secretsManagerAccess, err := pubsub.NewTopicIAMMember(ctx, "secrets_manager_access", &pubsub.TopicIAMMemberArgs{
//				Topic:  topic.Name,
//				Role:   pulumi.String("roles/pubsub.publisher"),
//				Member: pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-secretmanager.iam.gserviceaccount.com", project.Number),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewRegionalSecret(ctx, "regional-secret-with-rotation", &secretmanager.RegionalSecretArgs{
//				SecretId: pulumi.String("tf-reg-secret"),
//				Location: pulumi.String("us-central1"),
//				Topics: secretmanager.RegionalSecretTopicArray{
//					&secretmanager.RegionalSecretTopicArgs{
//						Name: topic.ID(),
//					},
//				},
//				Rotation: &secretmanager.RegionalSecretRotationArgs{
//					RotationPeriod:   pulumi.String("3600s"),
//					NextRotationTime: pulumi.String("2045-11-30T00:00:00Z"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				secretsManagerAccess,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Regional Secret With Ttl
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecret(ctx, "regional-secret-with-ttl", &secretmanager.RegionalSecretArgs{
//				SecretId: pulumi.String("tf-reg-secret"),
//				Location: pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("my-label"),
//				},
//				Annotations: pulumi.StringMap{
//					"key1": pulumi.String("value1"),
//					"key2": pulumi.String("value2"),
//					"key3": pulumi.String("value3"),
//				},
//				Ttl: pulumi.String("36000s"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Regional Secret With Expire Time
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecret(ctx, "regional-secret-with-expire-time", &secretmanager.RegionalSecretArgs{
//				SecretId: pulumi.String("tf-reg-secret"),
//				Location: pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("my-label"),
//				},
//				Annotations: pulumi.StringMap{
//					"key1": pulumi.String("value1"),
//					"key2": pulumi.String("value2"),
//					"key3": pulumi.String("value3"),
//				},
//				ExpireTime: pulumi.String("2055-11-30T00:00:00Z"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Regional Secret With Version Destroy Ttl
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewRegionalSecret(ctx, "regional-secret-with-version-destroy-ttl", &secretmanager.RegionalSecretArgs{
//				SecretId: pulumi.String("tf-reg-secret"),
//				Location: pulumi.String("us-central1"),
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("my-label"),
//				},
//				Annotations: pulumi.StringMap{
//					"key1": pulumi.String("value1"),
//					"key2": pulumi.String("value2"),
//					"key3": pulumi.String("value3"),
//				},
//				VersionDestroyTtl: pulumi.String("86400s"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RegionalSecret can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}`
//
// * `{{project}}/{{location}}/{{secret_id}}`
//
// * `{{location}}/{{secret_id}}`
//
// When using the `pulumi import` command, RegionalSecret can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:secretmanager/regionalSecret:RegionalSecret default projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}
// ```
//
// ```sh
// $ pulumi import gcp:secretmanager/regionalSecret:RegionalSecret default {{project}}/{{location}}/{{secret_id}}
// ```
//
// ```sh
// $ pulumi import gcp:secretmanager/regionalSecret:RegionalSecret default {{location}}/{{secret_id}}
// ```
type RegionalSecret struct {
	pulumi.CustomResourceState

	// Custom metadata about the regional secret.
	// Annotations are distinct from various forms of labels. Annotations exist to allow
	// client tools to store their own state information without requiring a database.
	// Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of
	// maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and
	// may have dashes (-), underscores (_), dots (.), and alphanumerics in between these
	// symbols.
	// The total size of annotation keys and values must be less than 16KiB.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// The time at which the regional secret was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The customer-managed encryption configuration of the regional secret.
	// Structure is documented below.
	CustomerManagedEncryption RegionalSecretCustomerManagedEncryptionPtrOutput `pulumi:"customerManagedEncryption"`
	EffectiveAnnotations      pulumi.StringMapOutput                           `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Timestamp in UTC when the regional secret is scheduled to expire. This is always provided on
	// output, regardless of what was sent on input. A timestamp in RFC3339 UTC "Zulu" format, with
	// nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z". Only one of `expireTime` or `ttl` can be provided.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// The labels assigned to this regional secret.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be assigned to a given resource.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the regional secret. eg us-central1
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the regional secret. Format:
	// `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}`
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The rotation time and period for a regional secret. At `nextRotationTime`, Secret Manager
	// will send a Pub/Sub notification to the topics configured on the Secret. `topics` must be
	// set to configure rotation.
	// Structure is documented below.
	Rotation RegionalSecretRotationPtrOutput `pulumi:"rotation"`
	// This must be unique within the project.
	//
	// ***
	SecretId pulumi.StringOutput `pulumi:"secretId"`
	// A list of up to 10 Pub/Sub topics to which messages are published when control plane
	// operations are called on the regional secret or its versions.
	// Structure is documented below.
	Topics RegionalSecretTopicArrayOutput `pulumi:"topics"`
	// The TTL for the regional secret. A duration in seconds with up to nine fractional digits,
	// terminated by 's'. Example: "3.5s". Only one of `ttl` or `expireTime` can be provided.
	Ttl pulumi.StringPtrOutput `pulumi:"ttl"`
	// Mapping from version alias to version name.
	// A version alias is a string with a maximum length of 63 characters and can contain
	// uppercase and lowercase letters, numerals, and the hyphen (-) and underscore ('_')
	// characters. An alias string must start with a letter and cannot be the string
	// 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given secret.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	VersionAliases pulumi.StringMapOutput `pulumi:"versionAliases"`
	// Secret Version TTL after destruction request.
	// This is a part of the delayed delete feature on Secret Version.
	// For secret with versionDestroyTtl>0, version destruction doesn't happen immediately
	// on calling destroy instead the version goes to a disabled state and
	// the actual destruction happens after this TTL expires. It must be atleast 24h.
	VersionDestroyTtl pulumi.StringPtrOutput `pulumi:"versionDestroyTtl"`
}

// NewRegionalSecret registers a new resource with the given unique name, arguments, and options.
func NewRegionalSecret(ctx *pulumi.Context,
	name string, args *RegionalSecretArgs, opts ...pulumi.ResourceOption) (*RegionalSecret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.SecretId == nil {
		return nil, errors.New("invalid value for required argument 'SecretId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionalSecret
	err := ctx.RegisterResource("gcp:secretmanager/regionalSecret:RegionalSecret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionalSecret gets an existing RegionalSecret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionalSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionalSecretState, opts ...pulumi.ResourceOption) (*RegionalSecret, error) {
	var resource RegionalSecret
	err := ctx.ReadResource("gcp:secretmanager/regionalSecret:RegionalSecret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionalSecret resources.
type regionalSecretState struct {
	// Custom metadata about the regional secret.
	// Annotations are distinct from various forms of labels. Annotations exist to allow
	// client tools to store their own state information without requiring a database.
	// Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of
	// maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and
	// may have dashes (-), underscores (_), dots (.), and alphanumerics in between these
	// symbols.
	// The total size of annotation keys and values must be less than 16KiB.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The time at which the regional secret was created.
	CreateTime *string `pulumi:"createTime"`
	// The customer-managed encryption configuration of the regional secret.
	// Structure is documented below.
	CustomerManagedEncryption *RegionalSecretCustomerManagedEncryption `pulumi:"customerManagedEncryption"`
	EffectiveAnnotations      map[string]string                        `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Timestamp in UTC when the regional secret is scheduled to expire. This is always provided on
	// output, regardless of what was sent on input. A timestamp in RFC3339 UTC "Zulu" format, with
	// nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z". Only one of `expireTime` or `ttl` can be provided.
	ExpireTime *string `pulumi:"expireTime"`
	// The labels assigned to this regional secret.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be assigned to a given resource.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the regional secret. eg us-central1
	Location *string `pulumi:"location"`
	// The resource name of the regional secret. Format:
	// `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}`
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The rotation time and period for a regional secret. At `nextRotationTime`, Secret Manager
	// will send a Pub/Sub notification to the topics configured on the Secret. `topics` must be
	// set to configure rotation.
	// Structure is documented below.
	Rotation *RegionalSecretRotation `pulumi:"rotation"`
	// This must be unique within the project.
	//
	// ***
	SecretId *string `pulumi:"secretId"`
	// A list of up to 10 Pub/Sub topics to which messages are published when control plane
	// operations are called on the regional secret or its versions.
	// Structure is documented below.
	Topics []RegionalSecretTopic `pulumi:"topics"`
	// The TTL for the regional secret. A duration in seconds with up to nine fractional digits,
	// terminated by 's'. Example: "3.5s". Only one of `ttl` or `expireTime` can be provided.
	Ttl *string `pulumi:"ttl"`
	// Mapping from version alias to version name.
	// A version alias is a string with a maximum length of 63 characters and can contain
	// uppercase and lowercase letters, numerals, and the hyphen (-) and underscore ('_')
	// characters. An alias string must start with a letter and cannot be the string
	// 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given secret.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	VersionAliases map[string]string `pulumi:"versionAliases"`
	// Secret Version TTL after destruction request.
	// This is a part of the delayed delete feature on Secret Version.
	// For secret with versionDestroyTtl>0, version destruction doesn't happen immediately
	// on calling destroy instead the version goes to a disabled state and
	// the actual destruction happens after this TTL expires. It must be atleast 24h.
	VersionDestroyTtl *string `pulumi:"versionDestroyTtl"`
}

type RegionalSecretState struct {
	// Custom metadata about the regional secret.
	// Annotations are distinct from various forms of labels. Annotations exist to allow
	// client tools to store their own state information without requiring a database.
	// Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of
	// maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and
	// may have dashes (-), underscores (_), dots (.), and alphanumerics in between these
	// symbols.
	// The total size of annotation keys and values must be less than 16KiB.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The time at which the regional secret was created.
	CreateTime pulumi.StringPtrInput
	// The customer-managed encryption configuration of the regional secret.
	// Structure is documented below.
	CustomerManagedEncryption RegionalSecretCustomerManagedEncryptionPtrInput
	EffectiveAnnotations      pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Timestamp in UTC when the regional secret is scheduled to expire. This is always provided on
	// output, regardless of what was sent on input. A timestamp in RFC3339 UTC "Zulu" format, with
	// nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z". Only one of `expireTime` or `ttl` can be provided.
	ExpireTime pulumi.StringPtrInput
	// The labels assigned to this regional secret.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be assigned to a given resource.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the regional secret. eg us-central1
	Location pulumi.StringPtrInput
	// The resource name of the regional secret. Format:
	// `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}`
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The rotation time and period for a regional secret. At `nextRotationTime`, Secret Manager
	// will send a Pub/Sub notification to the topics configured on the Secret. `topics` must be
	// set to configure rotation.
	// Structure is documented below.
	Rotation RegionalSecretRotationPtrInput
	// This must be unique within the project.
	//
	// ***
	SecretId pulumi.StringPtrInput
	// A list of up to 10 Pub/Sub topics to which messages are published when control plane
	// operations are called on the regional secret or its versions.
	// Structure is documented below.
	Topics RegionalSecretTopicArrayInput
	// The TTL for the regional secret. A duration in seconds with up to nine fractional digits,
	// terminated by 's'. Example: "3.5s". Only one of `ttl` or `expireTime` can be provided.
	Ttl pulumi.StringPtrInput
	// Mapping from version alias to version name.
	// A version alias is a string with a maximum length of 63 characters and can contain
	// uppercase and lowercase letters, numerals, and the hyphen (-) and underscore ('_')
	// characters. An alias string must start with a letter and cannot be the string
	// 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given secret.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	VersionAliases pulumi.StringMapInput
	// Secret Version TTL after destruction request.
	// This is a part of the delayed delete feature on Secret Version.
	// For secret with versionDestroyTtl>0, version destruction doesn't happen immediately
	// on calling destroy instead the version goes to a disabled state and
	// the actual destruction happens after this TTL expires. It must be atleast 24h.
	VersionDestroyTtl pulumi.StringPtrInput
}

func (RegionalSecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionalSecretState)(nil)).Elem()
}

type regionalSecretArgs struct {
	// Custom metadata about the regional secret.
	// Annotations are distinct from various forms of labels. Annotations exist to allow
	// client tools to store their own state information without requiring a database.
	// Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of
	// maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and
	// may have dashes (-), underscores (_), dots (.), and alphanumerics in between these
	// symbols.
	// The total size of annotation keys and values must be less than 16KiB.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The customer-managed encryption configuration of the regional secret.
	// Structure is documented below.
	CustomerManagedEncryption *RegionalSecretCustomerManagedEncryption `pulumi:"customerManagedEncryption"`
	// Timestamp in UTC when the regional secret is scheduled to expire. This is always provided on
	// output, regardless of what was sent on input. A timestamp in RFC3339 UTC "Zulu" format, with
	// nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z". Only one of `expireTime` or `ttl` can be provided.
	ExpireTime *string `pulumi:"expireTime"`
	// The labels assigned to this regional secret.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be assigned to a given resource.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the regional secret. eg us-central1
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The rotation time and period for a regional secret. At `nextRotationTime`, Secret Manager
	// will send a Pub/Sub notification to the topics configured on the Secret. `topics` must be
	// set to configure rotation.
	// Structure is documented below.
	Rotation *RegionalSecretRotation `pulumi:"rotation"`
	// This must be unique within the project.
	//
	// ***
	SecretId string `pulumi:"secretId"`
	// A list of up to 10 Pub/Sub topics to which messages are published when control plane
	// operations are called on the regional secret or its versions.
	// Structure is documented below.
	Topics []RegionalSecretTopic `pulumi:"topics"`
	// The TTL for the regional secret. A duration in seconds with up to nine fractional digits,
	// terminated by 's'. Example: "3.5s". Only one of `ttl` or `expireTime` can be provided.
	Ttl *string `pulumi:"ttl"`
	// Mapping from version alias to version name.
	// A version alias is a string with a maximum length of 63 characters and can contain
	// uppercase and lowercase letters, numerals, and the hyphen (-) and underscore ('_')
	// characters. An alias string must start with a letter and cannot be the string
	// 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given secret.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	VersionAliases map[string]string `pulumi:"versionAliases"`
	// Secret Version TTL after destruction request.
	// This is a part of the delayed delete feature on Secret Version.
	// For secret with versionDestroyTtl>0, version destruction doesn't happen immediately
	// on calling destroy instead the version goes to a disabled state and
	// the actual destruction happens after this TTL expires. It must be atleast 24h.
	VersionDestroyTtl *string `pulumi:"versionDestroyTtl"`
}

// The set of arguments for constructing a RegionalSecret resource.
type RegionalSecretArgs struct {
	// Custom metadata about the regional secret.
	// Annotations are distinct from various forms of labels. Annotations exist to allow
	// client tools to store their own state information without requiring a database.
	// Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of
	// maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and
	// may have dashes (-), underscores (_), dots (.), and alphanumerics in between these
	// symbols.
	// The total size of annotation keys and values must be less than 16KiB.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The customer-managed encryption configuration of the regional secret.
	// Structure is documented below.
	CustomerManagedEncryption RegionalSecretCustomerManagedEncryptionPtrInput
	// Timestamp in UTC when the regional secret is scheduled to expire. This is always provided on
	// output, regardless of what was sent on input. A timestamp in RFC3339 UTC "Zulu" format, with
	// nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z". Only one of `expireTime` or `ttl` can be provided.
	ExpireTime pulumi.StringPtrInput
	// The labels assigned to this regional secret.
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
	// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	// No more than 64 labels can be assigned to a given resource.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the regional secret. eg us-central1
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The rotation time and period for a regional secret. At `nextRotationTime`, Secret Manager
	// will send a Pub/Sub notification to the topics configured on the Secret. `topics` must be
	// set to configure rotation.
	// Structure is documented below.
	Rotation RegionalSecretRotationPtrInput
	// This must be unique within the project.
	//
	// ***
	SecretId pulumi.StringInput
	// A list of up to 10 Pub/Sub topics to which messages are published when control plane
	// operations are called on the regional secret or its versions.
	// Structure is documented below.
	Topics RegionalSecretTopicArrayInput
	// The TTL for the regional secret. A duration in seconds with up to nine fractional digits,
	// terminated by 's'. Example: "3.5s". Only one of `ttl` or `expireTime` can be provided.
	Ttl pulumi.StringPtrInput
	// Mapping from version alias to version name.
	// A version alias is a string with a maximum length of 63 characters and can contain
	// uppercase and lowercase letters, numerals, and the hyphen (-) and underscore ('_')
	// characters. An alias string must start with a letter and cannot be the string
	// 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given secret.
	// An object containing a list of "key": value pairs. Example:
	// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	VersionAliases pulumi.StringMapInput
	// Secret Version TTL after destruction request.
	// This is a part of the delayed delete feature on Secret Version.
	// For secret with versionDestroyTtl>0, version destruction doesn't happen immediately
	// on calling destroy instead the version goes to a disabled state and
	// the actual destruction happens after this TTL expires. It must be atleast 24h.
	VersionDestroyTtl pulumi.StringPtrInput
}

func (RegionalSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionalSecretArgs)(nil)).Elem()
}

type RegionalSecretInput interface {
	pulumi.Input

	ToRegionalSecretOutput() RegionalSecretOutput
	ToRegionalSecretOutputWithContext(ctx context.Context) RegionalSecretOutput
}

func (*RegionalSecret) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionalSecret)(nil)).Elem()
}

func (i *RegionalSecret) ToRegionalSecretOutput() RegionalSecretOutput {
	return i.ToRegionalSecretOutputWithContext(context.Background())
}

func (i *RegionalSecret) ToRegionalSecretOutputWithContext(ctx context.Context) RegionalSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalSecretOutput)
}

// RegionalSecretArrayInput is an input type that accepts RegionalSecretArray and RegionalSecretArrayOutput values.
// You can construct a concrete instance of `RegionalSecretArrayInput` via:
//
//	RegionalSecretArray{ RegionalSecretArgs{...} }
type RegionalSecretArrayInput interface {
	pulumi.Input

	ToRegionalSecretArrayOutput() RegionalSecretArrayOutput
	ToRegionalSecretArrayOutputWithContext(context.Context) RegionalSecretArrayOutput
}

type RegionalSecretArray []RegionalSecretInput

func (RegionalSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionalSecret)(nil)).Elem()
}

func (i RegionalSecretArray) ToRegionalSecretArrayOutput() RegionalSecretArrayOutput {
	return i.ToRegionalSecretArrayOutputWithContext(context.Background())
}

func (i RegionalSecretArray) ToRegionalSecretArrayOutputWithContext(ctx context.Context) RegionalSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalSecretArrayOutput)
}

// RegionalSecretMapInput is an input type that accepts RegionalSecretMap and RegionalSecretMapOutput values.
// You can construct a concrete instance of `RegionalSecretMapInput` via:
//
//	RegionalSecretMap{ "key": RegionalSecretArgs{...} }
type RegionalSecretMapInput interface {
	pulumi.Input

	ToRegionalSecretMapOutput() RegionalSecretMapOutput
	ToRegionalSecretMapOutputWithContext(context.Context) RegionalSecretMapOutput
}

type RegionalSecretMap map[string]RegionalSecretInput

func (RegionalSecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionalSecret)(nil)).Elem()
}

func (i RegionalSecretMap) ToRegionalSecretMapOutput() RegionalSecretMapOutput {
	return i.ToRegionalSecretMapOutputWithContext(context.Background())
}

func (i RegionalSecretMap) ToRegionalSecretMapOutputWithContext(ctx context.Context) RegionalSecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalSecretMapOutput)
}

type RegionalSecretOutput struct{ *pulumi.OutputState }

func (RegionalSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionalSecret)(nil)).Elem()
}

func (o RegionalSecretOutput) ToRegionalSecretOutput() RegionalSecretOutput {
	return o
}

func (o RegionalSecretOutput) ToRegionalSecretOutputWithContext(ctx context.Context) RegionalSecretOutput {
	return o
}

// Custom metadata about the regional secret.
// Annotations are distinct from various forms of labels. Annotations exist to allow
// client tools to store their own state information without requiring a database.
// Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of
// maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and
// may have dashes (-), underscores (_), dots (.), and alphanumerics in between these
// symbols.
// The total size of annotation keys and values must be less than 16KiB.
// An object containing a list of "key": value pairs. Example:
// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
//
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o RegionalSecretOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RegionalSecret) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// The time at which the regional secret was created.
func (o RegionalSecretOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecret) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The customer-managed encryption configuration of the regional secret.
// Structure is documented below.
func (o RegionalSecretOutput) CustomerManagedEncryption() RegionalSecretCustomerManagedEncryptionPtrOutput {
	return o.ApplyT(func(v *RegionalSecret) RegionalSecretCustomerManagedEncryptionPtrOutput {
		return v.CustomerManagedEncryption
	}).(RegionalSecretCustomerManagedEncryptionPtrOutput)
}

func (o RegionalSecretOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RegionalSecret) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o RegionalSecretOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RegionalSecret) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Timestamp in UTC when the regional secret is scheduled to expire. This is always provided on
// output, regardless of what was sent on input. A timestamp in RFC3339 UTC "Zulu" format, with
// nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
// "2014-10-02T15:01:23.045123456Z". Only one of `expireTime` or `ttl` can be provided.
func (o RegionalSecretOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecret) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

// The labels assigned to this regional secret.
// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
// Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
// and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
// No more than 64 labels can be assigned to a given resource.
// An object containing a list of "key": value pairs. Example:
// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o RegionalSecretOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RegionalSecret) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the regional secret. eg us-central1
func (o RegionalSecretOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecret) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the regional secret. Format:
// `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}`
func (o RegionalSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecret) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RegionalSecretOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecret) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o RegionalSecretOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RegionalSecret) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The rotation time and period for a regional secret. At `nextRotationTime`, Secret Manager
// will send a Pub/Sub notification to the topics configured on the Secret. `topics` must be
// set to configure rotation.
// Structure is documented below.
func (o RegionalSecretOutput) Rotation() RegionalSecretRotationPtrOutput {
	return o.ApplyT(func(v *RegionalSecret) RegionalSecretRotationPtrOutput { return v.Rotation }).(RegionalSecretRotationPtrOutput)
}

// This must be unique within the project.
//
// ***
func (o RegionalSecretOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalSecret) pulumi.StringOutput { return v.SecretId }).(pulumi.StringOutput)
}

// A list of up to 10 Pub/Sub topics to which messages are published when control plane
// operations are called on the regional secret or its versions.
// Structure is documented below.
func (o RegionalSecretOutput) Topics() RegionalSecretTopicArrayOutput {
	return o.ApplyT(func(v *RegionalSecret) RegionalSecretTopicArrayOutput { return v.Topics }).(RegionalSecretTopicArrayOutput)
}

// The TTL for the regional secret. A duration in seconds with up to nine fractional digits,
// terminated by 's'. Example: "3.5s". Only one of `ttl` or `expireTime` can be provided.
func (o RegionalSecretOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionalSecret) pulumi.StringPtrOutput { return v.Ttl }).(pulumi.StringPtrOutput)
}

// Mapping from version alias to version name.
// A version alias is a string with a maximum length of 63 characters and can contain
// uppercase and lowercase letters, numerals, and the hyphen (-) and underscore ('_')
// characters. An alias string must start with a letter and cannot be the string
// 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given secret.
// An object containing a list of "key": value pairs. Example:
// { "name": "wrench", "mass": "1.3kg", "count": "3" }.
func (o RegionalSecretOutput) VersionAliases() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RegionalSecret) pulumi.StringMapOutput { return v.VersionAliases }).(pulumi.StringMapOutput)
}

// Secret Version TTL after destruction request.
// This is a part of the delayed delete feature on Secret Version.
// For secret with versionDestroyTtl>0, version destruction doesn't happen immediately
// on calling destroy instead the version goes to a disabled state and
// the actual destruction happens after this TTL expires. It must be atleast 24h.
func (o RegionalSecretOutput) VersionDestroyTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionalSecret) pulumi.StringPtrOutput { return v.VersionDestroyTtl }).(pulumi.StringPtrOutput)
}

type RegionalSecretArrayOutput struct{ *pulumi.OutputState }

func (RegionalSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionalSecret)(nil)).Elem()
}

func (o RegionalSecretArrayOutput) ToRegionalSecretArrayOutput() RegionalSecretArrayOutput {
	return o
}

func (o RegionalSecretArrayOutput) ToRegionalSecretArrayOutputWithContext(ctx context.Context) RegionalSecretArrayOutput {
	return o
}

func (o RegionalSecretArrayOutput) Index(i pulumi.IntInput) RegionalSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionalSecret {
		return vs[0].([]*RegionalSecret)[vs[1].(int)]
	}).(RegionalSecretOutput)
}

type RegionalSecretMapOutput struct{ *pulumi.OutputState }

func (RegionalSecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionalSecret)(nil)).Elem()
}

func (o RegionalSecretMapOutput) ToRegionalSecretMapOutput() RegionalSecretMapOutput {
	return o
}

func (o RegionalSecretMapOutput) ToRegionalSecretMapOutputWithContext(ctx context.Context) RegionalSecretMapOutput {
	return o
}

func (o RegionalSecretMapOutput) MapIndex(k pulumi.StringInput) RegionalSecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionalSecret {
		return vs[0].(map[string]*RegionalSecret)[vs[1].(string)]
	}).(RegionalSecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalSecretInput)(nil)).Elem(), &RegionalSecret{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalSecretArrayInput)(nil)).Elem(), RegionalSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalSecretMapInput)(nil)).Elem(), RegionalSecretMap{})
	pulumi.RegisterOutputType(RegionalSecretOutput{})
	pulumi.RegisterOutputType(RegionalSecretArrayOutput{})
	pulumi.RegisterOutputType(RegionalSecretMapOutput{})
}
