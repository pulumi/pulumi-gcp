// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the value from a Secret Manager regional secret version. This is similar to the secretmanager.RegionalSecretVersion datasource, but it only requires the [Secret Manager Secret Accessor](https://cloud.google.com/secret-manager/docs/access-control#secretmanager.secretAccessor) role. For more information see the [official documentation](https://cloud.google.com/secret-manager/docs/regional-secrets-overview) and [API](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.locations.secrets.versions/access).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.GetRegionalSecretVersionAccess(ctx, &secretmanager.GetRegionalSecretVersionAccessArgs{
//				Secret:   "my-secret",
//				Location: pulumi.StringRef("us-central1"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRegionalSecretVersionAccess(ctx *pulumi.Context, args *GetRegionalSecretVersionAccessArgs, opts ...pulumi.InvokeOption) (*GetRegionalSecretVersionAccessResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRegionalSecretVersionAccessResult
	err := ctx.Invoke("gcp:secretmanager/getRegionalSecretVersionAccess:getRegionalSecretVersionAccess", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegionalSecretVersionAccess.
type GetRegionalSecretVersionAccessArgs struct {
	// If set to 'true', the secret data is
	// expected to be base64-encoded string.
	IsSecretDataBase64 *bool `pulumi:"isSecretDataBase64"`
	// Location of Secret Manager regional secret resource.
	// It must be provided when the `secret` field provided consists of only the name of the regional secret.
	Location *string `pulumi:"location"`
	// The project to get the secret version for. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The regional secret to get the secret version for.
	// This can be either the reference of the regional secret as in `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}` or only the name of the regional secret as in `{{secret_id}}`. If only the name of the regional secret is provided, the location must also be provided.
	Secret string `pulumi:"secret"`
	// The version of the regional secret to get. If it
	// is not provided, the latest version is retrieved.
	Version *string `pulumi:"version"`
}

// A collection of values returned by getRegionalSecretVersionAccess.
type GetRegionalSecretVersionAccessResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id                 string `pulumi:"id"`
	IsSecretDataBase64 *bool  `pulumi:"isSecretDataBase64"`
	Location           string `pulumi:"location"`
	// The resource name of the regional SecretVersion. Format:
	// `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}`
	Name    string `pulumi:"name"`
	Project string `pulumi:"project"`
	Secret  string `pulumi:"secret"`
	// The secret data. No larger than 64KiB.
	SecretData string `pulumi:"secretData"`
	Version    string `pulumi:"version"`
}

func GetRegionalSecretVersionAccessOutput(ctx *pulumi.Context, args GetRegionalSecretVersionAccessOutputArgs, opts ...pulumi.InvokeOption) GetRegionalSecretVersionAccessResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetRegionalSecretVersionAccessResultOutput, error) {
			args := v.(GetRegionalSecretVersionAccessArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:secretmanager/getRegionalSecretVersionAccess:getRegionalSecretVersionAccess", args, GetRegionalSecretVersionAccessResultOutput{}, options).(GetRegionalSecretVersionAccessResultOutput), nil
		}).(GetRegionalSecretVersionAccessResultOutput)
}

// A collection of arguments for invoking getRegionalSecretVersionAccess.
type GetRegionalSecretVersionAccessOutputArgs struct {
	// If set to 'true', the secret data is
	// expected to be base64-encoded string.
	IsSecretDataBase64 pulumi.BoolPtrInput `pulumi:"isSecretDataBase64"`
	// Location of Secret Manager regional secret resource.
	// It must be provided when the `secret` field provided consists of only the name of the regional secret.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The project to get the secret version for. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The regional secret to get the secret version for.
	// This can be either the reference of the regional secret as in `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}` or only the name of the regional secret as in `{{secret_id}}`. If only the name of the regional secret is provided, the location must also be provided.
	Secret pulumi.StringInput `pulumi:"secret"`
	// The version of the regional secret to get. If it
	// is not provided, the latest version is retrieved.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (GetRegionalSecretVersionAccessOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionalSecretVersionAccessArgs)(nil)).Elem()
}

// A collection of values returned by getRegionalSecretVersionAccess.
type GetRegionalSecretVersionAccessResultOutput struct{ *pulumi.OutputState }

func (GetRegionalSecretVersionAccessResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionalSecretVersionAccessResult)(nil)).Elem()
}

func (o GetRegionalSecretVersionAccessResultOutput) ToGetRegionalSecretVersionAccessResultOutput() GetRegionalSecretVersionAccessResultOutput {
	return o
}

func (o GetRegionalSecretVersionAccessResultOutput) ToGetRegionalSecretVersionAccessResultOutputWithContext(ctx context.Context) GetRegionalSecretVersionAccessResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetRegionalSecretVersionAccessResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionalSecretVersionAccessResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRegionalSecretVersionAccessResultOutput) IsSecretDataBase64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetRegionalSecretVersionAccessResult) *bool { return v.IsSecretDataBase64 }).(pulumi.BoolPtrOutput)
}

func (o GetRegionalSecretVersionAccessResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionalSecretVersionAccessResult) string { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the regional SecretVersion. Format:
// `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}`
func (o GetRegionalSecretVersionAccessResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionalSecretVersionAccessResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetRegionalSecretVersionAccessResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionalSecretVersionAccessResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o GetRegionalSecretVersionAccessResultOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionalSecretVersionAccessResult) string { return v.Secret }).(pulumi.StringOutput)
}

// The secret data. No larger than 64KiB.
func (o GetRegionalSecretVersionAccessResultOutput) SecretData() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionalSecretVersionAccessResult) string { return v.SecretData }).(pulumi.StringOutput)
}

func (o GetRegionalSecretVersionAccessResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionalSecretVersionAccessResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRegionalSecretVersionAccessResultOutput{})
}
