// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package beyondcorp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for BeyondCorp Application. Each of these resources serves a different use case:
//
// * `beyondcorp.ApplicationIamPolicy`: Authoritative. Sets the IAM policy for the application and replaces any existing policy already attached.
// * `beyondcorp.ApplicationIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the application are preserved.
// * `beyondcorp.ApplicationIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the application are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `beyondcorp.ApplicationIamPolicy`: Retrieves the IAM policy for the application
//
// > **Note:** `beyondcorp.ApplicationIamPolicy` **cannot** be used in conjunction with `beyondcorp.ApplicationIamBinding` and `beyondcorp.ApplicationIamMember` or they will fight over what your policy should be.
//
// > **Note:** `beyondcorp.ApplicationIamBinding` resources **can be** used in conjunction with `beyondcorp.ApplicationIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## beyondcorp.ApplicationIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/beyondcorp"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/beyondcorp.securityGatewayUser",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = beyondcorp.NewApplicationIamPolicy(ctx, "policy", &beyondcorp.ApplicationIamPolicyArgs{
//				Project:            pulumi.Any(example.Project),
//				SecurityGatewaysId: pulumi.Any(example.SecurityGatewaysId),
//				ApplicationId:      pulumi.Any(example.ApplicationId),
//				PolicyData:         pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/beyondcorp"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/beyondcorp.securityGatewayUser",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = beyondcorp.NewApplicationIamPolicy(ctx, "policy", &beyondcorp.ApplicationIamPolicyArgs{
//				Project:            pulumi.Any(example.Project),
//				SecurityGatewaysId: pulumi.Any(example.SecurityGatewaysId),
//				ApplicationId:      pulumi.Any(example.ApplicationId),
//				PolicyData:         pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## beyondcorp.ApplicationIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/beyondcorp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := beyondcorp.NewApplicationIamBinding(ctx, "binding", &beyondcorp.ApplicationIamBindingArgs{
//				Project:            pulumi.Any(example.Project),
//				SecurityGatewaysId: pulumi.Any(example.SecurityGatewaysId),
//				ApplicationId:      pulumi.Any(example.ApplicationId),
//				Role:               pulumi.String("roles/beyondcorp.securityGatewayUser"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/beyondcorp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := beyondcorp.NewApplicationIamBinding(ctx, "binding", &beyondcorp.ApplicationIamBindingArgs{
//				Project:            pulumi.Any(example.Project),
//				SecurityGatewaysId: pulumi.Any(example.SecurityGatewaysId),
//				ApplicationId:      pulumi.Any(example.ApplicationId),
//				Role:               pulumi.String("roles/beyondcorp.securityGatewayUser"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &beyondcorp.ApplicationIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## beyondcorp.ApplicationIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/beyondcorp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := beyondcorp.NewApplicationIamMember(ctx, "member", &beyondcorp.ApplicationIamMemberArgs{
//				Project:            pulumi.Any(example.Project),
//				SecurityGatewaysId: pulumi.Any(example.SecurityGatewaysId),
//				ApplicationId:      pulumi.Any(example.ApplicationId),
//				Role:               pulumi.String("roles/beyondcorp.securityGatewayUser"),
//				Member:             pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/beyondcorp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := beyondcorp.NewApplicationIamMember(ctx, "member", &beyondcorp.ApplicationIamMemberArgs{
//				Project:            pulumi.Any(example.Project),
//				SecurityGatewaysId: pulumi.Any(example.SecurityGatewaysId),
//				ApplicationId:      pulumi.Any(example.ApplicationId),
//				Role:               pulumi.String("roles/beyondcorp.securityGatewayUser"),
//				Member:             pulumi.String("user:jane@example.com"),
//				Condition: &beyondcorp.ApplicationIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for BeyondCorp Application
// Three different resources help you manage your IAM policy for BeyondCorp Application. Each of these resources serves a different use case:
//
// * `beyondcorp.ApplicationIamPolicy`: Authoritative. Sets the IAM policy for the application and replaces any existing policy already attached.
// * `beyondcorp.ApplicationIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the application are preserved.
// * `beyondcorp.ApplicationIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the application are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `beyondcorp.ApplicationIamPolicy`: Retrieves the IAM policy for the application
//
// > **Note:** `beyondcorp.ApplicationIamPolicy` **cannot** be used in conjunction with `beyondcorp.ApplicationIamBinding` and `beyondcorp.ApplicationIamMember` or they will fight over what your policy should be.
//
// > **Note:** `beyondcorp.ApplicationIamBinding` resources **can be** used in conjunction with `beyondcorp.ApplicationIamMember` resources **only if** they do not grant privilege to the same role.
//
// > **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.
//
// ## beyondcorp.ApplicationIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/beyondcorp"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/beyondcorp.securityGatewayUser",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = beyondcorp.NewApplicationIamPolicy(ctx, "policy", &beyondcorp.ApplicationIamPolicyArgs{
//				Project:            pulumi.Any(example.Project),
//				SecurityGatewaysId: pulumi.Any(example.SecurityGatewaysId),
//				ApplicationId:      pulumi.Any(example.ApplicationId),
//				PolicyData:         pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/beyondcorp"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/beyondcorp.securityGatewayUser",
//						Members: []string{
//							"user:jane@example.com",
//						},
//						Condition: {
//							Title:       "expires_after_2019_12_31",
//							Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
//							Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = beyondcorp.NewApplicationIamPolicy(ctx, "policy", &beyondcorp.ApplicationIamPolicyArgs{
//				Project:            pulumi.Any(example.Project),
//				SecurityGatewaysId: pulumi.Any(example.SecurityGatewaysId),
//				ApplicationId:      pulumi.Any(example.ApplicationId),
//				PolicyData:         pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## beyondcorp.ApplicationIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/beyondcorp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := beyondcorp.NewApplicationIamBinding(ctx, "binding", &beyondcorp.ApplicationIamBindingArgs{
//				Project:            pulumi.Any(example.Project),
//				SecurityGatewaysId: pulumi.Any(example.SecurityGatewaysId),
//				ApplicationId:      pulumi.Any(example.ApplicationId),
//				Role:               pulumi.String("roles/beyondcorp.securityGatewayUser"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/beyondcorp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := beyondcorp.NewApplicationIamBinding(ctx, "binding", &beyondcorp.ApplicationIamBindingArgs{
//				Project:            pulumi.Any(example.Project),
//				SecurityGatewaysId: pulumi.Any(example.SecurityGatewaysId),
//				ApplicationId:      pulumi.Any(example.ApplicationId),
//				Role:               pulumi.String("roles/beyondcorp.securityGatewayUser"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//				Condition: &beyondcorp.ApplicationIamBindingConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## beyondcorp.ApplicationIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/beyondcorp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := beyondcorp.NewApplicationIamMember(ctx, "member", &beyondcorp.ApplicationIamMemberArgs{
//				Project:            pulumi.Any(example.Project),
//				SecurityGatewaysId: pulumi.Any(example.SecurityGatewaysId),
//				ApplicationId:      pulumi.Any(example.ApplicationId),
//				Role:               pulumi.String("roles/beyondcorp.securityGatewayUser"),
//				Member:             pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With IAM Conditions:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/beyondcorp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := beyondcorp.NewApplicationIamMember(ctx, "member", &beyondcorp.ApplicationIamMemberArgs{
//				Project:            pulumi.Any(example.Project),
//				SecurityGatewaysId: pulumi.Any(example.SecurityGatewaysId),
//				ApplicationId:      pulumi.Any(example.ApplicationId),
//				Role:               pulumi.String("roles/beyondcorp.securityGatewayUser"),
//				Member:             pulumi.String("user:jane@example.com"),
//				Condition: &beyondcorp.ApplicationIamMemberConditionArgs{
//					Title:       pulumi.String("expires_after_2019_12_31"),
//					Description: pulumi.String("Expiring at midnight of 2019-12-31"),
//					Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/global/securityGateways/{{security_gateways_id}}/applications/{{application_id}}
//
// * {{project}}/{{security_gateways_id}}/{{application_id}}
//
// * {{security_gateways_id}}/{{application_id}}
//
// * {{application_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// BeyondCorp application IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:beyondcorp/applicationIamPolicy:ApplicationIamPolicy editor "projects/{{project}}/locations/global/securityGateways/{{security_gateways_id}}/applications/{{application_id}} roles/beyondcorp.securityGatewayUser user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:beyondcorp/applicationIamPolicy:ApplicationIamPolicy editor "projects/{{project}}/locations/global/securityGateways/{{security_gateways_id}}/applications/{{application_id}} roles/beyondcorp.securityGatewayUser"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:beyondcorp/applicationIamPolicy:ApplicationIamPolicy editor projects/{{project}}/locations/global/securityGateways/{{security_gateways_id}}/applications/{{application_id}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ApplicationIamPolicy struct {
	pulumi.CustomResourceState

	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project            pulumi.StringOutput `pulumi:"project"`
	SecurityGatewaysId pulumi.StringOutput `pulumi:"securityGatewaysId"`
}

// NewApplicationIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewApplicationIamPolicy(ctx *pulumi.Context,
	name string, args *ApplicationIamPolicyArgs, opts ...pulumi.ResourceOption) (*ApplicationIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.SecurityGatewaysId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGatewaysId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationIamPolicy
	err := ctx.RegisterResource("gcp:beyondcorp/applicationIamPolicy:ApplicationIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationIamPolicy gets an existing ApplicationIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationIamPolicyState, opts ...pulumi.ResourceOption) (*ApplicationIamPolicy, error) {
	var resource ApplicationIamPolicy
	err := ctx.ReadResource("gcp:beyondcorp/applicationIamPolicy:ApplicationIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationIamPolicy resources.
type applicationIamPolicyState struct {
	ApplicationId *string `pulumi:"applicationId"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project            *string `pulumi:"project"`
	SecurityGatewaysId *string `pulumi:"securityGatewaysId"`
}

type ApplicationIamPolicyState struct {
	ApplicationId pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project            pulumi.StringPtrInput
	SecurityGatewaysId pulumi.StringPtrInput
}

func (ApplicationIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationIamPolicyState)(nil)).Elem()
}

type applicationIamPolicyArgs struct {
	ApplicationId string `pulumi:"applicationId"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project            *string `pulumi:"project"`
	SecurityGatewaysId string  `pulumi:"securityGatewaysId"`
}

// The set of arguments for constructing a ApplicationIamPolicy resource.
type ApplicationIamPolicyArgs struct {
	ApplicationId pulumi.StringInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project            pulumi.StringPtrInput
	SecurityGatewaysId pulumi.StringInput
}

func (ApplicationIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationIamPolicyArgs)(nil)).Elem()
}

type ApplicationIamPolicyInput interface {
	pulumi.Input

	ToApplicationIamPolicyOutput() ApplicationIamPolicyOutput
	ToApplicationIamPolicyOutputWithContext(ctx context.Context) ApplicationIamPolicyOutput
}

func (*ApplicationIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationIamPolicy)(nil)).Elem()
}

func (i *ApplicationIamPolicy) ToApplicationIamPolicyOutput() ApplicationIamPolicyOutput {
	return i.ToApplicationIamPolicyOutputWithContext(context.Background())
}

func (i *ApplicationIamPolicy) ToApplicationIamPolicyOutputWithContext(ctx context.Context) ApplicationIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationIamPolicyOutput)
}

// ApplicationIamPolicyArrayInput is an input type that accepts ApplicationIamPolicyArray and ApplicationIamPolicyArrayOutput values.
// You can construct a concrete instance of `ApplicationIamPolicyArrayInput` via:
//
//	ApplicationIamPolicyArray{ ApplicationIamPolicyArgs{...} }
type ApplicationIamPolicyArrayInput interface {
	pulumi.Input

	ToApplicationIamPolicyArrayOutput() ApplicationIamPolicyArrayOutput
	ToApplicationIamPolicyArrayOutputWithContext(context.Context) ApplicationIamPolicyArrayOutput
}

type ApplicationIamPolicyArray []ApplicationIamPolicyInput

func (ApplicationIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationIamPolicy)(nil)).Elem()
}

func (i ApplicationIamPolicyArray) ToApplicationIamPolicyArrayOutput() ApplicationIamPolicyArrayOutput {
	return i.ToApplicationIamPolicyArrayOutputWithContext(context.Background())
}

func (i ApplicationIamPolicyArray) ToApplicationIamPolicyArrayOutputWithContext(ctx context.Context) ApplicationIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationIamPolicyArrayOutput)
}

// ApplicationIamPolicyMapInput is an input type that accepts ApplicationIamPolicyMap and ApplicationIamPolicyMapOutput values.
// You can construct a concrete instance of `ApplicationIamPolicyMapInput` via:
//
//	ApplicationIamPolicyMap{ "key": ApplicationIamPolicyArgs{...} }
type ApplicationIamPolicyMapInput interface {
	pulumi.Input

	ToApplicationIamPolicyMapOutput() ApplicationIamPolicyMapOutput
	ToApplicationIamPolicyMapOutputWithContext(context.Context) ApplicationIamPolicyMapOutput
}

type ApplicationIamPolicyMap map[string]ApplicationIamPolicyInput

func (ApplicationIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationIamPolicy)(nil)).Elem()
}

func (i ApplicationIamPolicyMap) ToApplicationIamPolicyMapOutput() ApplicationIamPolicyMapOutput {
	return i.ToApplicationIamPolicyMapOutputWithContext(context.Background())
}

func (i ApplicationIamPolicyMap) ToApplicationIamPolicyMapOutputWithContext(ctx context.Context) ApplicationIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationIamPolicyMapOutput)
}

type ApplicationIamPolicyOutput struct{ *pulumi.OutputState }

func (ApplicationIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationIamPolicy)(nil)).Elem()
}

func (o ApplicationIamPolicyOutput) ToApplicationIamPolicyOutput() ApplicationIamPolicyOutput {
	return o
}

func (o ApplicationIamPolicyOutput) ToApplicationIamPolicyOutputWithContext(ctx context.Context) ApplicationIamPolicyOutput {
	return o
}

func (o ApplicationIamPolicyOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationIamPolicy) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o ApplicationIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o ApplicationIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o ApplicationIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ApplicationIamPolicyOutput) SecurityGatewaysId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationIamPolicy) pulumi.StringOutput { return v.SecurityGatewaysId }).(pulumi.StringOutput)
}

type ApplicationIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (ApplicationIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationIamPolicy)(nil)).Elem()
}

func (o ApplicationIamPolicyArrayOutput) ToApplicationIamPolicyArrayOutput() ApplicationIamPolicyArrayOutput {
	return o
}

func (o ApplicationIamPolicyArrayOutput) ToApplicationIamPolicyArrayOutputWithContext(ctx context.Context) ApplicationIamPolicyArrayOutput {
	return o
}

func (o ApplicationIamPolicyArrayOutput) Index(i pulumi.IntInput) ApplicationIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationIamPolicy {
		return vs[0].([]*ApplicationIamPolicy)[vs[1].(int)]
	}).(ApplicationIamPolicyOutput)
}

type ApplicationIamPolicyMapOutput struct{ *pulumi.OutputState }

func (ApplicationIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationIamPolicy)(nil)).Elem()
}

func (o ApplicationIamPolicyMapOutput) ToApplicationIamPolicyMapOutput() ApplicationIamPolicyMapOutput {
	return o
}

func (o ApplicationIamPolicyMapOutput) ToApplicationIamPolicyMapOutputWithContext(ctx context.Context) ApplicationIamPolicyMapOutput {
	return o
}

func (o ApplicationIamPolicyMapOutput) MapIndex(k pulumi.StringInput) ApplicationIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationIamPolicy {
		return vs[0].(map[string]*ApplicationIamPolicy)[vs[1].(string)]
	}).(ApplicationIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationIamPolicyInput)(nil)).Elem(), &ApplicationIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationIamPolicyArrayInput)(nil)).Elem(), ApplicationIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationIamPolicyMapInput)(nil)).Elem(), ApplicationIamPolicyMap{})
	pulumi.RegisterOutputType(ApplicationIamPolicyOutput{})
	pulumi.RegisterOutputType(ApplicationIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(ApplicationIamPolicyMapOutput{})
}
