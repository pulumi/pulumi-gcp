// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package beyondcorp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **Warning:** `beyondcorp.Application` is deprecated. Use `beyondcorp.SecurityGatewayApplication` instead.
//
// Specifies application endpoint(s) to protect behind a Security Gateway.
//
// ## Example Usage
//
// ### Beyondcorp Application Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/beyondcorp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := beyondcorp.NewSecurityGateway(ctx, "default", &beyondcorp.SecurityGatewayArgs{
//				SecurityGatewayId: pulumi.String("default"),
//				DisplayName:       pulumi.String("My Security Gateway resource"),
//				Hubs: beyondcorp.SecurityGatewayHubArray{
//					&beyondcorp.SecurityGatewayHubArgs{
//						Region: pulumi.String("us-central1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = beyondcorp.NewApplication(ctx, "example", &beyondcorp.ApplicationArgs{
//				SecurityGatewaysId: _default.SecurityGatewayId,
//				ApplicationId:      pulumi.String("google"),
//				EndpointMatchers: beyondcorp.ApplicationEndpointMatcherArray{
//					&beyondcorp.ApplicationEndpointMatcherArgs{
//						Hostname: pulumi.String("google.com"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Beyondcorp Application Vpc
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/beyondcorp"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_default, err := beyondcorp.NewSecurityGateway(ctx, "default", &beyondcorp.SecurityGatewayArgs{
//				SecurityGatewayId: pulumi.String("default"),
//				DisplayName:       pulumi.String("My Security Gateway resource"),
//				Hubs: beyondcorp.SecurityGatewayHubArray{
//					&beyondcorp.SecurityGatewayHubArgs{
//						Region: pulumi.String("us-central1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = beyondcorp.NewApplication(ctx, "example", &beyondcorp.ApplicationArgs{
//				SecurityGatewaysId: _default.SecurityGatewayId,
//				ApplicationId:      pulumi.String("my-vm-service"),
//				EndpointMatchers: beyondcorp.ApplicationEndpointMatcherArray{
//					&beyondcorp.ApplicationEndpointMatcherArgs{
//						Hostname: pulumi.String("my-vm-service.com"),
//					},
//				},
//				Upstreams: beyondcorp.ApplicationUpstreamArray{
//					&beyondcorp.ApplicationUpstreamArgs{
//						EgressPolicy: &beyondcorp.ApplicationUpstreamEgressPolicyArgs{
//							Regions: pulumi.StringArray{
//								pulumi.String("us-central1"),
//							},
//						},
//						Network: &beyondcorp.ApplicationUpstreamNetworkArgs{
//							Name: pulumi.Sprintf("projects/%v/global/networks/default", project.ProjectId),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Application can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/global/securityGateways/{{security_gateways_id}}/applications/{{application_id}}`
//
// * `{{project}}/{{security_gateways_id}}/{{application_id}}`
//
// * `{{security_gateways_id}}/{{application_id}}`
//
// When using the `pulumi import` command, Application can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:beyondcorp/application:Application default projects/{{project}}/locations/global/securityGateways/{{security_gateways_id}}/applications/{{application_id}}
// ```
//
// ```sh
// $ pulumi import gcp:beyondcorp/application:Application default {{project}}/{{security_gateways_id}}/{{application_id}}
// ```
//
// ```sh
// $ pulumi import gcp:beyondcorp/application:Application default {{security_gateways_id}}/{{application_id}}
// ```
type Application struct {
	pulumi.CustomResourceState

	// Optional. User-settable Application resource ID.
	// * Must start with a letter.
	// * Must contain between 4-63 characters from `/a-z-/`.
	// * Must end with a number or letter.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Output only. Timestamp when the resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. An arbitrary user-provided name for the Application resource. Cannot exceed 64 characters.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Required. Endpoint matchers associated with an application.
	// A combination of hostname and ports as endpoint matcher is used to match
	// the application.
	// Match conditions for OR logic.
	// An array of match conditions to allow for multiple matching criteria.
	// The rule is considered a match if one the conditions are met.
	// The conditions can be one of the following combination
	// (Hostname), (Hostname & Ports)
	// EXAMPLES:
	// Hostname - ("*.abc.com"), ("xyz.abc.com")
	// Hostname and Ports - ("abc.com" and "22"), ("abc.com" and "22,33") etc
	// Structure is documented below.
	EndpointMatchers ApplicationEndpointMatcherArrayOutput `pulumi:"endpointMatchers"`
	// Identifier. Name of the resource.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Part of `parent`. See documentation of `projectsId`.
	SecurityGatewaysId pulumi.StringOutput `pulumi:"securityGatewaysId"`
	// Output only. Timestamp when the resource was last modified.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Optional. List of which upstream resource(s) to forward traffic to.
	Upstreams ApplicationUpstreamArrayOutput `pulumi:"upstreams"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.EndpointMatchers == nil {
		return nil, errors.New("invalid value for required argument 'EndpointMatchers'")
	}
	if args.SecurityGatewaysId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGatewaysId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("gcp:beyondcorp/application:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("gcp:beyondcorp/application:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
	// Optional. User-settable Application resource ID.
	// * Must start with a letter.
	// * Must contain between 4-63 characters from `/a-z-/`.
	// * Must end with a number or letter.
	ApplicationId *string `pulumi:"applicationId"`
	// Output only. Timestamp when the resource was created.
	CreateTime *string `pulumi:"createTime"`
	// Optional. An arbitrary user-provided name for the Application resource. Cannot exceed 64 characters.
	DisplayName *string `pulumi:"displayName"`
	// Required. Endpoint matchers associated with an application.
	// A combination of hostname and ports as endpoint matcher is used to match
	// the application.
	// Match conditions for OR logic.
	// An array of match conditions to allow for multiple matching criteria.
	// The rule is considered a match if one the conditions are met.
	// The conditions can be one of the following combination
	// (Hostname), (Hostname & Ports)
	// EXAMPLES:
	// Hostname - ("*.abc.com"), ("xyz.abc.com")
	// Hostname and Ports - ("abc.com" and "22"), ("abc.com" and "22,33") etc
	// Structure is documented below.
	EndpointMatchers []ApplicationEndpointMatcher `pulumi:"endpointMatchers"`
	// Identifier. Name of the resource.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Part of `parent`. See documentation of `projectsId`.
	SecurityGatewaysId *string `pulumi:"securityGatewaysId"`
	// Output only. Timestamp when the resource was last modified.
	UpdateTime *string `pulumi:"updateTime"`
	// Optional. List of which upstream resource(s) to forward traffic to.
	Upstreams []ApplicationUpstream `pulumi:"upstreams"`
}

type ApplicationState struct {
	// Optional. User-settable Application resource ID.
	// * Must start with a letter.
	// * Must contain between 4-63 characters from `/a-z-/`.
	// * Must end with a number or letter.
	ApplicationId pulumi.StringPtrInput
	// Output only. Timestamp when the resource was created.
	CreateTime pulumi.StringPtrInput
	// Optional. An arbitrary user-provided name for the Application resource. Cannot exceed 64 characters.
	DisplayName pulumi.StringPtrInput
	// Required. Endpoint matchers associated with an application.
	// A combination of hostname and ports as endpoint matcher is used to match
	// the application.
	// Match conditions for OR logic.
	// An array of match conditions to allow for multiple matching criteria.
	// The rule is considered a match if one the conditions are met.
	// The conditions can be one of the following combination
	// (Hostname), (Hostname & Ports)
	// EXAMPLES:
	// Hostname - ("*.abc.com"), ("xyz.abc.com")
	// Hostname and Ports - ("abc.com" and "22"), ("abc.com" and "22,33") etc
	// Structure is documented below.
	EndpointMatchers ApplicationEndpointMatcherArrayInput
	// Identifier. Name of the resource.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Part of `parent`. See documentation of `projectsId`.
	SecurityGatewaysId pulumi.StringPtrInput
	// Output only. Timestamp when the resource was last modified.
	UpdateTime pulumi.StringPtrInput
	// Optional. List of which upstream resource(s) to forward traffic to.
	Upstreams ApplicationUpstreamArrayInput
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// Optional. User-settable Application resource ID.
	// * Must start with a letter.
	// * Must contain between 4-63 characters from `/a-z-/`.
	// * Must end with a number or letter.
	ApplicationId string `pulumi:"applicationId"`
	// Optional. An arbitrary user-provided name for the Application resource. Cannot exceed 64 characters.
	DisplayName *string `pulumi:"displayName"`
	// Required. Endpoint matchers associated with an application.
	// A combination of hostname and ports as endpoint matcher is used to match
	// the application.
	// Match conditions for OR logic.
	// An array of match conditions to allow for multiple matching criteria.
	// The rule is considered a match if one the conditions are met.
	// The conditions can be one of the following combination
	// (Hostname), (Hostname & Ports)
	// EXAMPLES:
	// Hostname - ("*.abc.com"), ("xyz.abc.com")
	// Hostname and Ports - ("abc.com" and "22"), ("abc.com" and "22,33") etc
	// Structure is documented below.
	EndpointMatchers []ApplicationEndpointMatcher `pulumi:"endpointMatchers"`
	Project          *string                      `pulumi:"project"`
	// Part of `parent`. See documentation of `projectsId`.
	SecurityGatewaysId string `pulumi:"securityGatewaysId"`
	// Optional. List of which upstream resource(s) to forward traffic to.
	Upstreams []ApplicationUpstream `pulumi:"upstreams"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// Optional. User-settable Application resource ID.
	// * Must start with a letter.
	// * Must contain between 4-63 characters from `/a-z-/`.
	// * Must end with a number or letter.
	ApplicationId pulumi.StringInput
	// Optional. An arbitrary user-provided name for the Application resource. Cannot exceed 64 characters.
	DisplayName pulumi.StringPtrInput
	// Required. Endpoint matchers associated with an application.
	// A combination of hostname and ports as endpoint matcher is used to match
	// the application.
	// Match conditions for OR logic.
	// An array of match conditions to allow for multiple matching criteria.
	// The rule is considered a match if one the conditions are met.
	// The conditions can be one of the following combination
	// (Hostname), (Hostname & Ports)
	// EXAMPLES:
	// Hostname - ("*.abc.com"), ("xyz.abc.com")
	// Hostname and Ports - ("abc.com" and "22"), ("abc.com" and "22,33") etc
	// Structure is documented below.
	EndpointMatchers ApplicationEndpointMatcherArrayInput
	Project          pulumi.StringPtrInput
	// Part of `parent`. See documentation of `projectsId`.
	SecurityGatewaysId pulumi.StringInput
	// Optional. List of which upstream resource(s) to forward traffic to.
	Upstreams ApplicationUpstreamArrayInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

// ApplicationArrayInput is an input type that accepts ApplicationArray and ApplicationArrayOutput values.
// You can construct a concrete instance of `ApplicationArrayInput` via:
//
//	ApplicationArray{ ApplicationArgs{...} }
type ApplicationArrayInput interface {
	pulumi.Input

	ToApplicationArrayOutput() ApplicationArrayOutput
	ToApplicationArrayOutputWithContext(context.Context) ApplicationArrayOutput
}

type ApplicationArray []ApplicationInput

func (ApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (i ApplicationArray) ToApplicationArrayOutput() ApplicationArrayOutput {
	return i.ToApplicationArrayOutputWithContext(context.Background())
}

func (i ApplicationArray) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationArrayOutput)
}

// ApplicationMapInput is an input type that accepts ApplicationMap and ApplicationMapOutput values.
// You can construct a concrete instance of `ApplicationMapInput` via:
//
//	ApplicationMap{ "key": ApplicationArgs{...} }
type ApplicationMapInput interface {
	pulumi.Input

	ToApplicationMapOutput() ApplicationMapOutput
	ToApplicationMapOutputWithContext(context.Context) ApplicationMapOutput
}

type ApplicationMap map[string]ApplicationInput

func (ApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (i ApplicationMap) ToApplicationMapOutput() ApplicationMapOutput {
	return i.ToApplicationMapOutputWithContext(context.Background())
}

func (i ApplicationMap) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMapOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// Optional. User-settable Application resource ID.
// * Must start with a letter.
// * Must contain between 4-63 characters from `/a-z-/`.
// * Must end with a number or letter.
func (o ApplicationOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Output only. Timestamp when the resource was created.
func (o ApplicationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. An arbitrary user-provided name for the Application resource. Cannot exceed 64 characters.
func (o ApplicationOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Required. Endpoint matchers associated with an application.
// A combination of hostname and ports as endpoint matcher is used to match
// the application.
// Match conditions for OR logic.
// An array of match conditions to allow for multiple matching criteria.
// The rule is considered a match if one the conditions are met.
// The conditions can be one of the following combination
// (Hostname), (Hostname & Ports)
// EXAMPLES:
// Hostname - ("*.abc.com"), ("xyz.abc.com")
// Hostname and Ports - ("abc.com" and "22"), ("abc.com" and "22,33") etc
// Structure is documented below.
func (o ApplicationOutput) EndpointMatchers() ApplicationEndpointMatcherArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationEndpointMatcherArrayOutput { return v.EndpointMatchers }).(ApplicationEndpointMatcherArrayOutput)
}

// Identifier. Name of the resource.
func (o ApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Part of `parent`. See documentation of `projectsId`.
func (o ApplicationOutput) SecurityGatewaysId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.SecurityGatewaysId }).(pulumi.StringOutput)
}

// Output only. Timestamp when the resource was last modified.
func (o ApplicationOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Optional. List of which upstream resource(s) to forward traffic to.
func (o ApplicationOutput) Upstreams() ApplicationUpstreamArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationUpstreamArrayOutput { return v.Upstreams }).(ApplicationUpstreamArrayOutput)
}

type ApplicationArrayOutput struct{ *pulumi.OutputState }

func (ApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (o ApplicationArrayOutput) ToApplicationArrayOutput() ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) Index(i pulumi.IntInput) ApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Application {
		return vs[0].([]*Application)[vs[1].(int)]
	}).(ApplicationOutput)
}

type ApplicationMapOutput struct{ *pulumi.OutputState }

func (ApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (o ApplicationMapOutput) ToApplicationMapOutput() ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) MapIndex(k pulumi.StringInput) ApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Application {
		return vs[0].(map[string]*Application)[vs[1].(string)]
	}).(ApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationArrayInput)(nil)).Elem(), ApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMapInput)(nil)).Elem(), ApplicationMap{})
	pulumi.RegisterOutputType(ApplicationOutput{})
	pulumi.RegisterOutputType(ApplicationArrayOutput{})
	pulumi.RegisterOutputType(ApplicationMapOutput{})
}
