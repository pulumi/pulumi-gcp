// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudrunv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// WorkerPool acts as a top-level container that manages a set of configurations and revision templates which implement a pull-based workload. WorkerPool exists to provide a singular abstraction which can be access controlled, reasoned about, and which encapsulates software lifecycle decisions such as rollout policy and team resource ownership.
//
// To get more information about WorkerPool, see:
//
// * [API documentation](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.workerPools)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/run/docs/)
//
// ## Example Usage
//
// ### Cloudrunv2 Worker Pool Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudrunv2.NewWorkerPool(ctx, "default", &cloudrunv2.WorkerPoolArgs{
//				Name:               pulumi.String("cloudrun-worker-pool"),
//				Location:           pulumi.String("us-central1"),
//				DeletionProtection: pulumi.Bool(false),
//				LaunchStage:        pulumi.String("BETA"),
//				Template: &cloudrunv2.WorkerPoolTemplateArgs{
//					Containers: cloudrunv2.WorkerPoolTemplateContainerArray{
//						&cloudrunv2.WorkerPoolTemplateContainerArgs{
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/worker-pool"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Cloudrunv2 Worker Pool Limits
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudrunv2.NewWorkerPool(ctx, "default", &cloudrunv2.WorkerPoolArgs{
//				Name:               pulumi.String("cloudrun-worker-pool"),
//				Location:           pulumi.String("us-central1"),
//				DeletionProtection: pulumi.Bool(false),
//				LaunchStage:        pulumi.String("BETA"),
//				Template: &cloudrunv2.WorkerPoolTemplateArgs{
//					Containers: cloudrunv2.WorkerPoolTemplateContainerArray{
//						&cloudrunv2.WorkerPoolTemplateContainerArgs{
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/worker-pool"),
//							Resources: &cloudrunv2.WorkerPoolTemplateContainerResourcesArgs{
//								Limits: pulumi.StringMap{
//									"cpu":    pulumi.String("2"),
//									"memory": pulumi.String("1024Mi"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Cloudrunv2 Worker Pool Sql
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/sql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			secret, err := secretmanager.NewSecret(ctx, "secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("secret-1"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: &secretmanager.SecretReplicationAutoArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			secret_version_data, err := secretmanager.NewSecretVersion(ctx, "secret-version-data", &secretmanager.SecretVersionArgs{
//				Secret:     secret.Name,
//				SecretData: pulumi.String("secret-data"),
//			})
//			if err != nil {
//				return err
//			}
//			instance, err := sql.NewDatabaseInstance(ctx, "instance", &sql.DatabaseInstanceArgs{
//				Name:            pulumi.String("cloudrun-sql"),
//				Region:          pulumi.String("us-central1"),
//				DatabaseVersion: pulumi.String("MYSQL_5_7"),
//				Settings: &sql.DatabaseInstanceSettingsArgs{
//					Tier: pulumi.String("db-f1-micro"),
//				},
//				DeletionProtection: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudrunv2.NewWorkerPool(ctx, "default", &cloudrunv2.WorkerPoolArgs{
//				Name:               pulumi.String("cloudrun-worker-pool"),
//				Location:           pulumi.String("us-central1"),
//				DeletionProtection: pulumi.Bool(false),
//				LaunchStage:        pulumi.String("BETA"),
//				Template: &cloudrunv2.WorkerPoolTemplateArgs{
//					Volumes: cloudrunv2.WorkerPoolTemplateVolumeArray{
//						&cloudrunv2.WorkerPoolTemplateVolumeArgs{
//							Name: pulumi.String("cloudsql"),
//							CloudSqlInstance: &cloudrunv2.WorkerPoolTemplateVolumeCloudSqlInstanceArgs{
//								Instances: pulumi.StringArray{
//									instance.ConnectionName,
//								},
//							},
//						},
//					},
//					Containers: cloudrunv2.WorkerPoolTemplateContainerArray{
//						&cloudrunv2.WorkerPoolTemplateContainerArgs{
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/worker-pool"),
//							Envs: cloudrunv2.WorkerPoolTemplateContainerEnvArray{
//								&cloudrunv2.WorkerPoolTemplateContainerEnvArgs{
//									Name:  pulumi.String("FOO"),
//									Value: pulumi.String("bar"),
//								},
//								&cloudrunv2.WorkerPoolTemplateContainerEnvArgs{
//									Name: pulumi.String("SECRET_ENV_VAR"),
//									ValueSource: &cloudrunv2.WorkerPoolTemplateContainerEnvValueSourceArgs{
//										SecretKeyRef: &cloudrunv2.WorkerPoolTemplateContainerEnvValueSourceSecretKeyRefArgs{
//											Secret:  secret.SecretId,
//											Version: pulumi.String("1"),
//										},
//									},
//								},
//							},
//							VolumeMounts: cloudrunv2.WorkerPoolTemplateContainerVolumeMountArray{
//								&cloudrunv2.WorkerPoolTemplateContainerVolumeMountArgs{
//									Name:      pulumi.String("cloudsql"),
//									MountPath: pulumi.String("/cloudsql"),
//								},
//							},
//						},
//					},
//				},
//				InstanceSplits: cloudrunv2.WorkerPoolInstanceSplitArray{
//					&cloudrunv2.WorkerPoolInstanceSplitArgs{
//						Type:    pulumi.String("INSTANCE_SPLIT_ALLOCATION_TYPE_LATEST"),
//						Percent: pulumi.Int(100),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				secret_version_data,
//			}))
//			if err != nil {
//				return err
//			}
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretIamMember(ctx, "secret-access", &secretmanager.SecretIamMemberArgs{
//				SecretId: secret.ID(),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.Sprintf("serviceAccount:%v-compute@developer.gserviceaccount.com", project.Number),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				secret,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Cloudrunv2 Worker Pool Directvpc
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudrunv2.NewWorkerPool(ctx, "default", &cloudrunv2.WorkerPoolArgs{
//				Name:               pulumi.String("cloudrun-worker-pool"),
//				Location:           pulumi.String("us-central1"),
//				DeletionProtection: pulumi.Bool(false),
//				LaunchStage:        pulumi.String("BETA"),
//				Template: &cloudrunv2.WorkerPoolTemplateArgs{
//					Containers: cloudrunv2.WorkerPoolTemplateContainerArray{
//						&cloudrunv2.WorkerPoolTemplateContainerArgs{
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/worker-pool"),
//						},
//					},
//					VpcAccess: &cloudrunv2.WorkerPoolTemplateVpcAccessArgs{
//						NetworkInterfaces: cloudrunv2.WorkerPoolTemplateVpcAccessNetworkInterfaceArray{
//							&cloudrunv2.WorkerPoolTemplateVpcAccessNetworkInterfaceArgs{
//								Network:    pulumi.String("default"),
//								Subnetwork: pulumi.String("default"),
//								Tags: pulumi.StringArray{
//									pulumi.String("tag1"),
//									pulumi.String("tag2"),
//									pulumi.String("tag3"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Cloudrunv2 Worker Pool Gpu
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudrunv2.NewWorkerPool(ctx, "default", &cloudrunv2.WorkerPoolArgs{
//				Name:               pulumi.String("cloudrun-worker-pool"),
//				Location:           pulumi.String("us-central1"),
//				DeletionProtection: pulumi.Bool(false),
//				LaunchStage:        pulumi.String("BETA"),
//				Template: &cloudrunv2.WorkerPoolTemplateArgs{
//					Containers: cloudrunv2.WorkerPoolTemplateContainerArray{
//						&cloudrunv2.WorkerPoolTemplateContainerArgs{
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/worker-pool"),
//							Resources: &cloudrunv2.WorkerPoolTemplateContainerResourcesArgs{
//								Limits: pulumi.StringMap{
//									"cpu":            pulumi.String("4"),
//									"memory":         pulumi.String("16Gi"),
//									"nvidia.com/gpu": pulumi.String("1"),
//								},
//							},
//						},
//					},
//					NodeSelector: &cloudrunv2.WorkerPoolTemplateNodeSelectorArgs{
//						Accelerator: pulumi.String("nvidia-l4"),
//					},
//					GpuZonalRedundancyDisabled: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Cloudrunv2 Worker Pool Secret
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			secret, err := secretmanager.NewSecret(ctx, "secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("secret-1"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: &secretmanager.SecretReplicationAutoArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			secret_version_data, err := secretmanager.NewSecretVersion(ctx, "secret-version-data", &secretmanager.SecretVersionArgs{
//				Secret:     secret.Name,
//				SecretData: pulumi.String("secret-data"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudrunv2.NewWorkerPool(ctx, "default", &cloudrunv2.WorkerPoolArgs{
//				Name:               pulumi.String("cloudrun-worker-pool"),
//				Location:           pulumi.String("us-central1"),
//				DeletionProtection: pulumi.Bool(false),
//				LaunchStage:        pulumi.String("BETA"),
//				Template: &cloudrunv2.WorkerPoolTemplateArgs{
//					Volumes: cloudrunv2.WorkerPoolTemplateVolumeArray{
//						&cloudrunv2.WorkerPoolTemplateVolumeArgs{
//							Name: pulumi.String("a-volume"),
//							Secret: &cloudrunv2.WorkerPoolTemplateVolumeSecretArgs{
//								Secret:      secret.SecretId,
//								DefaultMode: pulumi.Int(292),
//								Items: cloudrunv2.WorkerPoolTemplateVolumeSecretItemArray{
//									&cloudrunv2.WorkerPoolTemplateVolumeSecretItemArgs{
//										Version: pulumi.String("1"),
//										Path:    pulumi.String("my-secret"),
//										Mode:    pulumi.Int(444),
//									},
//								},
//							},
//						},
//					},
//					Containers: cloudrunv2.WorkerPoolTemplateContainerArray{
//						&cloudrunv2.WorkerPoolTemplateContainerArgs{
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/worker-pool"),
//							VolumeMounts: cloudrunv2.WorkerPoolTemplateContainerVolumeMountArray{
//								&cloudrunv2.WorkerPoolTemplateContainerVolumeMountArgs{
//									Name:      pulumi.String("a-volume"),
//									MountPath: pulumi.String("/secrets"),
//								},
//							},
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				secret_version_data,
//			}))
//			if err != nil {
//				return err
//			}
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretIamMember(ctx, "secret-access", &secretmanager.SecretIamMemberArgs{
//				SecretId: secret.ID(),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.Sprintf("serviceAccount:%v-compute@developer.gserviceaccount.com", project.Number),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				secret,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Cloudrunv2 Worker Pool Multicontainer
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudrunv2.NewWorkerPool(ctx, "default", &cloudrunv2.WorkerPoolArgs{
//				Name:               pulumi.String("cloudrun-worker-pool"),
//				Location:           pulumi.String("us-central1"),
//				DeletionProtection: pulumi.Bool(false),
//				LaunchStage:        pulumi.String("BETA"),
//				Template: &cloudrunv2.WorkerPoolTemplateArgs{
//					Containers: cloudrunv2.WorkerPoolTemplateContainerArray{
//						&cloudrunv2.WorkerPoolTemplateContainerArgs{
//							Name:  pulumi.String("hello-1"),
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/worker-pool"),
//							VolumeMounts: cloudrunv2.WorkerPoolTemplateContainerVolumeMountArray{
//								&cloudrunv2.WorkerPoolTemplateContainerVolumeMountArgs{
//									Name:      pulumi.String("empty-dir-volume"),
//									MountPath: pulumi.String("/mnt"),
//								},
//							},
//						},
//						&cloudrunv2.WorkerPoolTemplateContainerArgs{
//							Name:  pulumi.String("hello-2"),
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/worker-pool"),
//						},
//					},
//					Volumes: cloudrunv2.WorkerPoolTemplateVolumeArray{
//						&cloudrunv2.WorkerPoolTemplateVolumeArgs{
//							Name: pulumi.String("empty-dir-volume"),
//							EmptyDir: &cloudrunv2.WorkerPoolTemplateVolumeEmptyDirArgs{
//								Medium:    pulumi.String("MEMORY"),
//								SizeLimit: pulumi.String("256Mi"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Cloudrunv2 Worker Pool Mount Gcs
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultBucket, err := storage.NewBucket(ctx, "default", &storage.BucketArgs{
//				Name:                     pulumi.String("cloudrun-worker-pool"),
//				Location:                 pulumi.String("US"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudrunv2.NewWorkerPool(ctx, "default", &cloudrunv2.WorkerPoolArgs{
//				Name:               pulumi.String("cloudrun-worker-pool"),
//				Location:           pulumi.String("us-central1"),
//				DeletionProtection: pulumi.Bool(false),
//				LaunchStage:        pulumi.String("BETA"),
//				Template: &cloudrunv2.WorkerPoolTemplateArgs{
//					Containers: cloudrunv2.WorkerPoolTemplateContainerArray{
//						&cloudrunv2.WorkerPoolTemplateContainerArgs{
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/worker-pool"),
//							VolumeMounts: cloudrunv2.WorkerPoolTemplateContainerVolumeMountArray{
//								&cloudrunv2.WorkerPoolTemplateContainerVolumeMountArgs{
//									Name:      pulumi.String("bucket"),
//									MountPath: pulumi.String("/var/www"),
//								},
//							},
//						},
//					},
//					Volumes: cloudrunv2.WorkerPoolTemplateVolumeArray{
//						&cloudrunv2.WorkerPoolTemplateVolumeArgs{
//							Name: pulumi.String("bucket"),
//							Gcs: &cloudrunv2.WorkerPoolTemplateVolumeGcsArgs{
//								Bucket:   defaultBucket.Name,
//								ReadOnly: pulumi.Bool(false),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Cloudrunv2 Worker Pool Mount Nfs
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/filestore"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultInstance, err := filestore.NewInstance(ctx, "default", &filestore.InstanceArgs{
//				Name:     pulumi.String("cloudrun-worker-pool"),
//				Location: pulumi.String("us-central1-b"),
//				Tier:     pulumi.String("BASIC_HDD"),
//				FileShares: &filestore.InstanceFileSharesArgs{
//					CapacityGb: pulumi.Int(1024),
//					Name:       pulumi.String("share1"),
//				},
//				Networks: filestore.InstanceNetworkArray{
//					&filestore.InstanceNetworkArgs{
//						Network: pulumi.String("default"),
//						Modes: pulumi.StringArray{
//							pulumi.String("MODE_IPV4"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudrunv2.NewWorkerPool(ctx, "default", &cloudrunv2.WorkerPoolArgs{
//				Name:               pulumi.String("cloudrun-worker-pool"),
//				Location:           pulumi.String("us-central1"),
//				DeletionProtection: pulumi.Bool(false),
//				LaunchStage:        pulumi.String("BETA"),
//				Template: &cloudrunv2.WorkerPoolTemplateArgs{
//					Containers: cloudrunv2.WorkerPoolTemplateContainerArray{
//						&cloudrunv2.WorkerPoolTemplateContainerArgs{
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/worker-pool:latest"),
//							VolumeMounts: cloudrunv2.WorkerPoolTemplateContainerVolumeMountArray{
//								&cloudrunv2.WorkerPoolTemplateContainerVolumeMountArgs{
//									Name:      pulumi.String("nfs"),
//									MountPath: pulumi.String("/mnt/nfs/filestore"),
//								},
//							},
//						},
//					},
//					VpcAccess: &cloudrunv2.WorkerPoolTemplateVpcAccessArgs{
//						NetworkInterfaces: cloudrunv2.WorkerPoolTemplateVpcAccessNetworkInterfaceArray{
//							&cloudrunv2.WorkerPoolTemplateVpcAccessNetworkInterfaceArgs{
//								Network:    pulumi.String("default"),
//								Subnetwork: pulumi.String("default"),
//							},
//						},
//					},
//					Volumes: cloudrunv2.WorkerPoolTemplateVolumeArray{
//						&cloudrunv2.WorkerPoolTemplateVolumeArgs{
//							Name: pulumi.String("nfs"),
//							Nfs: &cloudrunv2.WorkerPoolTemplateVolumeNfsArgs{
//								Server: defaultInstance.Networks.ApplyT(func(networks []filestore.InstanceNetwork) (*string, error) {
//									return &networks[0].IpAddresses[0], nil
//								}).(pulumi.StringPtrOutput),
//								Path:     pulumi.String("/share1"),
//								ReadOnly: pulumi.Bool(false),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Cloudrunv2 Worker Pool Custom Audiences
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudrunv2.NewWorkerPool(ctx, "default", &cloudrunv2.WorkerPoolArgs{
//				Name:               pulumi.String("cloudrun-worker-pool"),
//				Location:           pulumi.String("us-central1"),
//				DeletionProtection: pulumi.Bool(false),
//				LaunchStage:        pulumi.String("BETA"),
//				CustomAudiences: pulumi.StringArray{
//					pulumi.String("aud1"),
//				},
//				Template: &cloudrunv2.WorkerPoolTemplateArgs{
//					Containers: cloudrunv2.WorkerPoolTemplateContainerArray{
//						&cloudrunv2.WorkerPoolTemplateContainerArgs{
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/worker-pool"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Cloudrunv2 Worker Pool Startup Liveness Probe
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			customTest, err := compute.NewNetwork(ctx, "custom_test", &compute.NetworkArgs{
//				Name:                  pulumi.String("wp-net"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			customTestSubnetwork, err := compute.NewSubnetwork(ctx, "custom_test", &compute.SubnetworkArgs{
//				Name:        pulumi.String("wp-subnet"),
//				IpCidrRange: pulumi.String("10.2.0.0/28"),
//				Region:      pulumi.String("us-central1"),
//				Network:     customTest.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudrunv2.NewWorkerPool(ctx, "default", &cloudrunv2.WorkerPoolArgs{
//				Name:               pulumi.String("cloudrun-worker-pool"),
//				Location:           pulumi.String("us-central1"),
//				LaunchStage:        pulumi.String("BETA"),
//				DeletionProtection: pulumi.Bool(false),
//				Template: &cloudrunv2.WorkerPoolTemplateArgs{
//					Annotations: pulumi.StringMap{},
//					Labels:      pulumi.StringMap{},
//					Containers: cloudrunv2.WorkerPoolTemplateContainerArray{
//						&cloudrunv2.WorkerPoolTemplateContainerArgs{
//							Image:    pulumi.String("us-docker.pkg.dev/cloudrun/container/hello"),
//							Commands: pulumi.StringArray{},
//							Args:     pulumi.StringArray{},
//							StartupProbe: &cloudrunv2.WorkerPoolTemplateContainerStartupProbeArgs{
//								InitialDelaySeconds: pulumi.Int(0),
//								TimeoutSeconds:      pulumi.Int(1),
//								PeriodSeconds:       pulumi.Int(3),
//								FailureThreshold:    pulumi.Int(3),
//								TcpSocket: &cloudrunv2.WorkerPoolTemplateContainerStartupProbeTcpSocketArgs{
//									Port: pulumi.Int(8080),
//								},
//							},
//							LivenessProbe: &cloudrunv2.WorkerPoolTemplateContainerLivenessProbeArgs{
//								InitialDelaySeconds: pulumi.Int(0),
//								TimeoutSeconds:      pulumi.Int(1),
//								PeriodSeconds:       pulumi.Int(10),
//								FailureThreshold:    pulumi.Int(3),
//								HttpGet: &cloudrunv2.WorkerPoolTemplateContainerLivenessProbeHttpGetArgs{
//									Path: pulumi.String("/"),
//									Port: pulumi.Int(8080),
//								},
//							},
//						},
//					},
//					VpcAccess: &cloudrunv2.WorkerPoolTemplateVpcAccessArgs{
//						NetworkInterfaces: cloudrunv2.WorkerPoolTemplateVpcAccessNetworkInterfaceArray{
//							&cloudrunv2.WorkerPoolTemplateVpcAccessNetworkInterfaceArgs{
//								Network:    customTest.ID(),
//								Subnetwork: customTestSubnetwork.ID(),
//								Tags:       pulumi.StringArray{},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// WorkerPool can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/workerPools/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, WorkerPool can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:cloudrunv2/workerPool:WorkerPool default projects/{{project}}/locations/{{location}}/workerPools/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:cloudrunv2/workerPool:WorkerPool default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:cloudrunv2/workerPool:WorkerPool default {{location}}/{{name}}
// ```
type WorkerPool struct {
	pulumi.CustomResourceState

	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected in new resources.
	// All system annotations in v1 now have a corresponding field in v2 WorkerPool.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	BinaryAuthorization WorkerPoolBinaryAuthorizationPtrOutput `pulumi:"binaryAuthorization"`
	// Arbitrary identifier for the API client.
	Client pulumi.StringPtrOutput `pulumi:"client"`
	// Arbitrary version identifier for the API client.
	ClientVersion pulumi.StringPtrOutput `pulumi:"clientVersion"`
	// The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the WorkerPool does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	Conditions WorkerPoolConditionArrayOutput `pulumi:"conditions"`
	// The creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Email address of the authenticated creator.
	Creator pulumi.StringOutput `pulumi:"creator"`
	// One or more custom audiences that you want this worker pool to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests.
	// For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences.
	CustomAudiences pulumi.StringArrayOutput `pulumi:"customAudiences"`
	// The deletion time.
	DeleteTime         pulumi.StringOutput  `pulumi:"deleteTime"`
	DeletionProtection pulumi.BoolPtrOutput `pulumi:"deletionProtection"`
	// User-provided description of the WorkerPool. This field currently has a 512-character limit.
	Description          pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// For a deleted resource, the time after which it will be permanently deleted.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
	Generation pulumi.StringOutput `pulumi:"generation"`
	// Detailed status information for corresponding instance splits. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	InstanceSplitStatuses WorkerPoolInstanceSplitStatusArrayOutput `pulumi:"instanceSplitStatuses"`
	// Specifies how to distribute instances over a collection of Revisions belonging to the WorkerPool. If instance split is empty or not provided, defaults to 100% instances assigned to the latest Ready Revision.
	// Structure is documented below.
	InstanceSplits WorkerPoolInstanceSplitArrayOutput `pulumi:"instanceSplits"`
	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component,
	// environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 WorkerPool.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Email address of the last authenticated modifier.
	LastModifier pulumi.StringOutput `pulumi:"lastModifier"`
	// Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	LatestCreatedRevision pulumi.StringOutput `pulumi:"latestCreatedRevision"`
	// Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	LatestReadyRevision pulumi.StringOutput `pulumi:"latestReadyRevision"`
	// The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA.
	// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
	// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
	// Possible values are: `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, `DEPRECATED`.
	LaunchStage pulumi.StringOutput `pulumi:"launchStage"`
	// The location of the cloud run worker pool
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of the WorkerPool.
	Name pulumi.StringOutput `pulumi:"name"`
	// The generation of this WorkerPool currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
	ObservedGeneration pulumi.StringOutput `pulumi:"observedGeneration"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Returns true if the WorkerPool is currently being acted upon by the system to bring it into the desired state.
	// When a new WorkerPool is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the WorkerPool to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the WorkerPool, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
	// If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
	// If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created WorkerPools. Additional information on the failure can be found in terminalCondition and conditions.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// Scaling settings that apply to the worker pool.
	// Structure is documented below.
	Scaling WorkerPoolScalingOutput `pulumi:"scaling"`
	// The template used to create revisions for this WorkerPool.
	// Structure is documented below.
	Template WorkerPoolTemplateOutput `pulumi:"template"`
	// The Condition of this WorkerPool, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	TerminalConditions WorkerPoolTerminalConditionArrayOutput `pulumi:"terminalConditions"`
	// Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The last-modified time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewWorkerPool registers a new resource with the given unique name, arguments, and options.
func NewWorkerPool(ctx *pulumi.Context,
	name string, args *WorkerPoolArgs, opts ...pulumi.ResourceOption) (*WorkerPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Template == nil {
		return nil, errors.New("invalid value for required argument 'Template'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkerPool
	err := ctx.RegisterResource("gcp:cloudrunv2/workerPool:WorkerPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkerPool gets an existing WorkerPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkerPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkerPoolState, opts ...pulumi.ResourceOption) (*WorkerPool, error) {
	var resource WorkerPool
	err := ctx.ReadResource("gcp:cloudrunv2/workerPool:WorkerPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkerPool resources.
type workerPoolState struct {
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected in new resources.
	// All system annotations in v1 now have a corresponding field in v2 WorkerPool.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	BinaryAuthorization *WorkerPoolBinaryAuthorization `pulumi:"binaryAuthorization"`
	// Arbitrary identifier for the API client.
	Client *string `pulumi:"client"`
	// Arbitrary version identifier for the API client.
	ClientVersion *string `pulumi:"clientVersion"`
	// The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the WorkerPool does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	Conditions []WorkerPoolCondition `pulumi:"conditions"`
	// The creation time.
	CreateTime *string `pulumi:"createTime"`
	// Email address of the authenticated creator.
	Creator *string `pulumi:"creator"`
	// One or more custom audiences that you want this worker pool to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests.
	// For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences.
	CustomAudiences []string `pulumi:"customAudiences"`
	// The deletion time.
	DeleteTime         *string `pulumi:"deleteTime"`
	DeletionProtection *bool   `pulumi:"deletionProtection"`
	// User-provided description of the WorkerPool. This field currently has a 512-character limit.
	Description          *string           `pulumi:"description"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
	Etag *string `pulumi:"etag"`
	// For a deleted resource, the time after which it will be permanently deleted.
	ExpireTime *string `pulumi:"expireTime"`
	// A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
	Generation *string `pulumi:"generation"`
	// Detailed status information for corresponding instance splits. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	InstanceSplitStatuses []WorkerPoolInstanceSplitStatus `pulumi:"instanceSplitStatuses"`
	// Specifies how to distribute instances over a collection of Revisions belonging to the WorkerPool. If instance split is empty or not provided, defaults to 100% instances assigned to the latest Ready Revision.
	// Structure is documented below.
	InstanceSplits []WorkerPoolInstanceSplit `pulumi:"instanceSplits"`
	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component,
	// environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 WorkerPool.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Email address of the last authenticated modifier.
	LastModifier *string `pulumi:"lastModifier"`
	// Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	LatestCreatedRevision *string `pulumi:"latestCreatedRevision"`
	// Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	LatestReadyRevision *string `pulumi:"latestReadyRevision"`
	// The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA.
	// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
	// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
	// Possible values are: `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, `DEPRECATED`.
	LaunchStage *string `pulumi:"launchStage"`
	// The location of the cloud run worker pool
	Location *string `pulumi:"location"`
	// Name of the WorkerPool.
	Name *string `pulumi:"name"`
	// The generation of this WorkerPool currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
	ObservedGeneration *string `pulumi:"observedGeneration"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Returns true if the WorkerPool is currently being acted upon by the system to bring it into the desired state.
	// When a new WorkerPool is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the WorkerPool to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the WorkerPool, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
	// If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
	// If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created WorkerPools. Additional information on the failure can be found in terminalCondition and conditions.
	Reconciling *bool `pulumi:"reconciling"`
	// Scaling settings that apply to the worker pool.
	// Structure is documented below.
	Scaling *WorkerPoolScaling `pulumi:"scaling"`
	// The template used to create revisions for this WorkerPool.
	// Structure is documented below.
	Template *WorkerPoolTemplate `pulumi:"template"`
	// The Condition of this WorkerPool, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	TerminalConditions []WorkerPoolTerminalCondition `pulumi:"terminalConditions"`
	// Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
	Uid *string `pulumi:"uid"`
	// The last-modified time.
	UpdateTime *string `pulumi:"updateTime"`
}

type WorkerPoolState struct {
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected in new resources.
	// All system annotations in v1 now have a corresponding field in v2 WorkerPool.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	BinaryAuthorization WorkerPoolBinaryAuthorizationPtrInput
	// Arbitrary identifier for the API client.
	Client pulumi.StringPtrInput
	// Arbitrary version identifier for the API client.
	ClientVersion pulumi.StringPtrInput
	// The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the WorkerPool does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	Conditions WorkerPoolConditionArrayInput
	// The creation time.
	CreateTime pulumi.StringPtrInput
	// Email address of the authenticated creator.
	Creator pulumi.StringPtrInput
	// One or more custom audiences that you want this worker pool to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests.
	// For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences.
	CustomAudiences pulumi.StringArrayInput
	// The deletion time.
	DeleteTime         pulumi.StringPtrInput
	DeletionProtection pulumi.BoolPtrInput
	// User-provided description of the WorkerPool. This field currently has a 512-character limit.
	Description          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
	Etag pulumi.StringPtrInput
	// For a deleted resource, the time after which it will be permanently deleted.
	ExpireTime pulumi.StringPtrInput
	// A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
	Generation pulumi.StringPtrInput
	// Detailed status information for corresponding instance splits. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	InstanceSplitStatuses WorkerPoolInstanceSplitStatusArrayInput
	// Specifies how to distribute instances over a collection of Revisions belonging to the WorkerPool. If instance split is empty or not provided, defaults to 100% instances assigned to the latest Ready Revision.
	// Structure is documented below.
	InstanceSplits WorkerPoolInstanceSplitArrayInput
	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component,
	// environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 WorkerPool.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Email address of the last authenticated modifier.
	LastModifier pulumi.StringPtrInput
	// Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	LatestCreatedRevision pulumi.StringPtrInput
	// Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	LatestReadyRevision pulumi.StringPtrInput
	// The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA.
	// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
	// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
	// Possible values are: `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, `DEPRECATED`.
	LaunchStage pulumi.StringPtrInput
	// The location of the cloud run worker pool
	Location pulumi.StringPtrInput
	// Name of the WorkerPool.
	Name pulumi.StringPtrInput
	// The generation of this WorkerPool currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
	ObservedGeneration pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Returns true if the WorkerPool is currently being acted upon by the system to bring it into the desired state.
	// When a new WorkerPool is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the WorkerPool to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the WorkerPool, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
	// If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
	// If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created WorkerPools. Additional information on the failure can be found in terminalCondition and conditions.
	Reconciling pulumi.BoolPtrInput
	// Scaling settings that apply to the worker pool.
	// Structure is documented below.
	Scaling WorkerPoolScalingPtrInput
	// The template used to create revisions for this WorkerPool.
	// Structure is documented below.
	Template WorkerPoolTemplatePtrInput
	// The Condition of this WorkerPool, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	TerminalConditions WorkerPoolTerminalConditionArrayInput
	// Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
	Uid pulumi.StringPtrInput
	// The last-modified time.
	UpdateTime pulumi.StringPtrInput
}

func (WorkerPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*workerPoolState)(nil)).Elem()
}

type workerPoolArgs struct {
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected in new resources.
	// All system annotations in v1 now have a corresponding field in v2 WorkerPool.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	BinaryAuthorization *WorkerPoolBinaryAuthorization `pulumi:"binaryAuthorization"`
	// Arbitrary identifier for the API client.
	Client *string `pulumi:"client"`
	// Arbitrary version identifier for the API client.
	ClientVersion *string `pulumi:"clientVersion"`
	// One or more custom audiences that you want this worker pool to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests.
	// For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences.
	CustomAudiences    []string `pulumi:"customAudiences"`
	DeletionProtection *bool    `pulumi:"deletionProtection"`
	// User-provided description of the WorkerPool. This field currently has a 512-character limit.
	Description *string `pulumi:"description"`
	// Specifies how to distribute instances over a collection of Revisions belonging to the WorkerPool. If instance split is empty or not provided, defaults to 100% instances assigned to the latest Ready Revision.
	// Structure is documented below.
	InstanceSplits []WorkerPoolInstanceSplit `pulumi:"instanceSplits"`
	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component,
	// environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 WorkerPool.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA.
	// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
	// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
	// Possible values are: `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, `DEPRECATED`.
	LaunchStage *string `pulumi:"launchStage"`
	// The location of the cloud run worker pool
	Location string `pulumi:"location"`
	// Name of the WorkerPool.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Scaling settings that apply to the worker pool.
	// Structure is documented below.
	Scaling *WorkerPoolScaling `pulumi:"scaling"`
	// The template used to create revisions for this WorkerPool.
	// Structure is documented below.
	Template WorkerPoolTemplate `pulumi:"template"`
}

// The set of arguments for constructing a WorkerPool resource.
type WorkerPoolArgs struct {
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected in new resources.
	// All system annotations in v1 now have a corresponding field in v2 WorkerPool.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	BinaryAuthorization WorkerPoolBinaryAuthorizationPtrInput
	// Arbitrary identifier for the API client.
	Client pulumi.StringPtrInput
	// Arbitrary version identifier for the API client.
	ClientVersion pulumi.StringPtrInput
	// One or more custom audiences that you want this worker pool to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests.
	// For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences.
	CustomAudiences    pulumi.StringArrayInput
	DeletionProtection pulumi.BoolPtrInput
	// User-provided description of the WorkerPool. This field currently has a 512-character limit.
	Description pulumi.StringPtrInput
	// Specifies how to distribute instances over a collection of Revisions belonging to the WorkerPool. If instance split is empty or not provided, defaults to 100% instances assigned to the latest Ready Revision.
	// Structure is documented below.
	InstanceSplits WorkerPoolInstanceSplitArrayInput
	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component,
	// environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 WorkerPool.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA.
	// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
	// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
	// Possible values are: `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, `DEPRECATED`.
	LaunchStage pulumi.StringPtrInput
	// The location of the cloud run worker pool
	Location pulumi.StringInput
	// Name of the WorkerPool.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Scaling settings that apply to the worker pool.
	// Structure is documented below.
	Scaling WorkerPoolScalingPtrInput
	// The template used to create revisions for this WorkerPool.
	// Structure is documented below.
	Template WorkerPoolTemplateInput
}

func (WorkerPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workerPoolArgs)(nil)).Elem()
}

type WorkerPoolInput interface {
	pulumi.Input

	ToWorkerPoolOutput() WorkerPoolOutput
	ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput
}

func (*WorkerPool) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerPool)(nil)).Elem()
}

func (i *WorkerPool) ToWorkerPoolOutput() WorkerPoolOutput {
	return i.ToWorkerPoolOutputWithContext(context.Background())
}

func (i *WorkerPool) ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolOutput)
}

// WorkerPoolArrayInput is an input type that accepts WorkerPoolArray and WorkerPoolArrayOutput values.
// You can construct a concrete instance of `WorkerPoolArrayInput` via:
//
//	WorkerPoolArray{ WorkerPoolArgs{...} }
type WorkerPoolArrayInput interface {
	pulumi.Input

	ToWorkerPoolArrayOutput() WorkerPoolArrayOutput
	ToWorkerPoolArrayOutputWithContext(context.Context) WorkerPoolArrayOutput
}

type WorkerPoolArray []WorkerPoolInput

func (WorkerPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkerPool)(nil)).Elem()
}

func (i WorkerPoolArray) ToWorkerPoolArrayOutput() WorkerPoolArrayOutput {
	return i.ToWorkerPoolArrayOutputWithContext(context.Background())
}

func (i WorkerPoolArray) ToWorkerPoolArrayOutputWithContext(ctx context.Context) WorkerPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolArrayOutput)
}

// WorkerPoolMapInput is an input type that accepts WorkerPoolMap and WorkerPoolMapOutput values.
// You can construct a concrete instance of `WorkerPoolMapInput` via:
//
//	WorkerPoolMap{ "key": WorkerPoolArgs{...} }
type WorkerPoolMapInput interface {
	pulumi.Input

	ToWorkerPoolMapOutput() WorkerPoolMapOutput
	ToWorkerPoolMapOutputWithContext(context.Context) WorkerPoolMapOutput
}

type WorkerPoolMap map[string]WorkerPoolInput

func (WorkerPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkerPool)(nil)).Elem()
}

func (i WorkerPoolMap) ToWorkerPoolMapOutput() WorkerPoolMapOutput {
	return i.ToWorkerPoolMapOutputWithContext(context.Background())
}

func (i WorkerPoolMap) ToWorkerPoolMapOutputWithContext(ctx context.Context) WorkerPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolMapOutput)
}

type WorkerPoolOutput struct{ *pulumi.OutputState }

func (WorkerPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerPool)(nil)).Elem()
}

func (o WorkerPoolOutput) ToWorkerPoolOutput() WorkerPoolOutput {
	return o
}

func (o WorkerPoolOutput) ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput {
	return o
}

// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
// Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected in new resources.
// All system annotations in v1 now have a corresponding field in v2 WorkerPool.
// This field follows Kubernetes annotations' namespacing, limits, and rules.
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o WorkerPoolOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Settings for the Binary Authorization feature.
// Structure is documented below.
func (o WorkerPoolOutput) BinaryAuthorization() WorkerPoolBinaryAuthorizationPtrOutput {
	return o.ApplyT(func(v *WorkerPool) WorkerPoolBinaryAuthorizationPtrOutput { return v.BinaryAuthorization }).(WorkerPoolBinaryAuthorizationPtrOutput)
}

// Arbitrary identifier for the API client.
func (o WorkerPoolOutput) Client() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringPtrOutput { return v.Client }).(pulumi.StringPtrOutput)
}

// Arbitrary version identifier for the API client.
func (o WorkerPoolOutput) ClientVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringPtrOutput { return v.ClientVersion }).(pulumi.StringPtrOutput)
}

// The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the WorkerPool does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
// Structure is documented below.
func (o WorkerPoolOutput) Conditions() WorkerPoolConditionArrayOutput {
	return o.ApplyT(func(v *WorkerPool) WorkerPoolConditionArrayOutput { return v.Conditions }).(WorkerPoolConditionArrayOutput)
}

// The creation time.
func (o WorkerPoolOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Email address of the authenticated creator.
func (o WorkerPoolOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.Creator }).(pulumi.StringOutput)
}

// One or more custom audiences that you want this worker pool to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests.
// For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences.
func (o WorkerPoolOutput) CustomAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringArrayOutput { return v.CustomAudiences }).(pulumi.StringArrayOutput)
}

// The deletion time.
func (o WorkerPoolOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

func (o WorkerPoolOutput) DeletionProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.BoolPtrOutput { return v.DeletionProtection }).(pulumi.BoolPtrOutput)
}

// User-provided description of the WorkerPool. This field currently has a 512-character limit.
func (o WorkerPoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o WorkerPoolOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o WorkerPoolOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
func (o WorkerPoolOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// For a deleted resource, the time after which it will be permanently deleted.
func (o WorkerPoolOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

// A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
func (o WorkerPoolOutput) Generation() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.Generation }).(pulumi.StringOutput)
}

// Detailed status information for corresponding instance splits. See comments in reconciling for additional information on reconciliation process in Cloud Run.
// Structure is documented below.
func (o WorkerPoolOutput) InstanceSplitStatuses() WorkerPoolInstanceSplitStatusArrayOutput {
	return o.ApplyT(func(v *WorkerPool) WorkerPoolInstanceSplitStatusArrayOutput { return v.InstanceSplitStatuses }).(WorkerPoolInstanceSplitStatusArrayOutput)
}

// Specifies how to distribute instances over a collection of Revisions belonging to the WorkerPool. If instance split is empty or not provided, defaults to 100% instances assigned to the latest Ready Revision.
// Structure is documented below.
func (o WorkerPoolOutput) InstanceSplits() WorkerPoolInstanceSplitArrayOutput {
	return o.ApplyT(func(v *WorkerPool) WorkerPoolInstanceSplitArrayOutput { return v.InstanceSplits }).(WorkerPoolInstanceSplitArrayOutput)
}

// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component,
// environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
// Cloud Run API v2 does not support labels with  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected.
// All system labels in v1 now have a corresponding field in v2 WorkerPool.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o WorkerPoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Email address of the last authenticated modifier.
func (o WorkerPoolOutput) LastModifier() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.LastModifier }).(pulumi.StringOutput)
}

// Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
func (o WorkerPoolOutput) LatestCreatedRevision() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.LatestCreatedRevision }).(pulumi.StringOutput)
}

// Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
func (o WorkerPoolOutput) LatestReadyRevision() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.LatestReadyRevision }).(pulumi.StringOutput)
}

// The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA.
// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
// Possible values are: `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, `DEPRECATED`.
func (o WorkerPoolOutput) LaunchStage() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.LaunchStage }).(pulumi.StringOutput)
}

// The location of the cloud run worker pool
func (o WorkerPoolOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of the WorkerPool.
func (o WorkerPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The generation of this WorkerPool currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
func (o WorkerPoolOutput) ObservedGeneration() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.ObservedGeneration }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o WorkerPoolOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o WorkerPoolOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Returns true if the WorkerPool is currently being acted upon by the system to bring it into the desired state.
// When a new WorkerPool is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the WorkerPool to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the WorkerPool, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
// If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
// If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created WorkerPools. Additional information on the failure can be found in terminalCondition and conditions.
func (o WorkerPoolOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// Scaling settings that apply to the worker pool.
// Structure is documented below.
func (o WorkerPoolOutput) Scaling() WorkerPoolScalingOutput {
	return o.ApplyT(func(v *WorkerPool) WorkerPoolScalingOutput { return v.Scaling }).(WorkerPoolScalingOutput)
}

// The template used to create revisions for this WorkerPool.
// Structure is documented below.
func (o WorkerPoolOutput) Template() WorkerPoolTemplateOutput {
	return o.ApplyT(func(v *WorkerPool) WorkerPoolTemplateOutput { return v.Template }).(WorkerPoolTemplateOutput)
}

// The Condition of this WorkerPool, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
// Structure is documented below.
func (o WorkerPoolOutput) TerminalConditions() WorkerPoolTerminalConditionArrayOutput {
	return o.ApplyT(func(v *WorkerPool) WorkerPoolTerminalConditionArrayOutput { return v.TerminalConditions }).(WorkerPoolTerminalConditionArrayOutput)
}

// Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
func (o WorkerPoolOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The last-modified time.
func (o WorkerPoolOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPool) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type WorkerPoolArrayOutput struct{ *pulumi.OutputState }

func (WorkerPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkerPool)(nil)).Elem()
}

func (o WorkerPoolArrayOutput) ToWorkerPoolArrayOutput() WorkerPoolArrayOutput {
	return o
}

func (o WorkerPoolArrayOutput) ToWorkerPoolArrayOutputWithContext(ctx context.Context) WorkerPoolArrayOutput {
	return o
}

func (o WorkerPoolArrayOutput) Index(i pulumi.IntInput) WorkerPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkerPool {
		return vs[0].([]*WorkerPool)[vs[1].(int)]
	}).(WorkerPoolOutput)
}

type WorkerPoolMapOutput struct{ *pulumi.OutputState }

func (WorkerPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkerPool)(nil)).Elem()
}

func (o WorkerPoolMapOutput) ToWorkerPoolMapOutput() WorkerPoolMapOutput {
	return o
}

func (o WorkerPoolMapOutput) ToWorkerPoolMapOutputWithContext(ctx context.Context) WorkerPoolMapOutput {
	return o
}

func (o WorkerPoolMapOutput) MapIndex(k pulumi.StringInput) WorkerPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkerPool {
		return vs[0].(map[string]*WorkerPool)[vs[1].(string)]
	}).(WorkerPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPoolInput)(nil)).Elem(), &WorkerPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPoolArrayInput)(nil)).Elem(), WorkerPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPoolMapInput)(nil)).Elem(), WorkerPoolMap{})
	pulumi.RegisterOutputType(WorkerPoolOutput{})
	pulumi.RegisterOutputType(WorkerPoolArrayOutput{})
	pulumi.RegisterOutputType(WorkerPoolMapOutput{})
}
