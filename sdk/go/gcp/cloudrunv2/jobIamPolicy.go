// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudrunv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Three different resources help you manage your IAM policy for Cloud Run (v2 API) Job. Each of these resources serves a different use case:
//
// * `cloudrunv2.JobIamPolicy`: Authoritative. Sets the IAM policy for the job and replaces any existing policy already attached.
// * `cloudrunv2.JobIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the job are preserved.
// * `cloudrunv2.JobIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the job are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `cloudrunv2.JobIamPolicy`: Retrieves the IAM policy for the job
//
// > **Note:** `cloudrunv2.JobIamPolicy` **cannot** be used in conjunction with `cloudrunv2.JobIamBinding` and `cloudrunv2.JobIamMember` or they will fight over what your policy should be.
//
// > **Note:** `cloudrunv2.JobIamBinding` resources **can be** used in conjunction with `cloudrunv2.JobIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/jobs/{{name}} * {{project}}/{{location}}/{{name}} * {{location}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Cloud Run (v2 API) job IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:cloudrunv2/jobIamPolicy:JobIamPolicy editor "projects/{{project}}/locations/{{location}}/jobs/{{job}} roles/viewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:cloudrunv2/jobIamPolicy:JobIamPolicy editor "projects/{{project}}/locations/{{location}}/jobs/{{job}} roles/viewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:cloudrunv2/jobIamPolicy:JobIamPolicy editor projects/{{project}}/locations/{{location}}/jobs/{{job}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type JobIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location of the cloud run job Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringOutput `pulumi:"location"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewJobIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewJobIamPolicy(ctx *pulumi.Context,
	name string, args *JobIamPolicyArgs, opts ...pulumi.ResourceOption) (*JobIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource JobIamPolicy
	err := ctx.RegisterResource("gcp:cloudrunv2/jobIamPolicy:JobIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobIamPolicy gets an existing JobIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobIamPolicyState, opts ...pulumi.ResourceOption) (*JobIamPolicy, error) {
	var resource JobIamPolicy
	err := ctx.ReadResource("gcp:cloudrunv2/jobIamPolicy:JobIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JobIamPolicy resources.
type jobIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location of the cloud run job Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
}

type JobIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location of the cloud run job Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
}

func (JobIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobIamPolicyState)(nil)).Elem()
}

type jobIamPolicyArgs struct {
	// The location of the cloud run job Used to find the parent resource to bind the IAM policy to
	Location *string `pulumi:"location"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a JobIamPolicy resource.
type JobIamPolicyArgs struct {
	// The location of the cloud run job Used to find the parent resource to bind the IAM policy to
	Location pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
}

func (JobIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobIamPolicyArgs)(nil)).Elem()
}

type JobIamPolicyInput interface {
	pulumi.Input

	ToJobIamPolicyOutput() JobIamPolicyOutput
	ToJobIamPolicyOutputWithContext(ctx context.Context) JobIamPolicyOutput
}

func (*JobIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**JobIamPolicy)(nil)).Elem()
}

func (i *JobIamPolicy) ToJobIamPolicyOutput() JobIamPolicyOutput {
	return i.ToJobIamPolicyOutputWithContext(context.Background())
}

func (i *JobIamPolicy) ToJobIamPolicyOutputWithContext(ctx context.Context) JobIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIamPolicyOutput)
}

func (i *JobIamPolicy) ToOutput(ctx context.Context) pulumix.Output[*JobIamPolicy] {
	return pulumix.Output[*JobIamPolicy]{
		OutputState: i.ToJobIamPolicyOutputWithContext(ctx).OutputState,
	}
}

// JobIamPolicyArrayInput is an input type that accepts JobIamPolicyArray and JobIamPolicyArrayOutput values.
// You can construct a concrete instance of `JobIamPolicyArrayInput` via:
//
//	JobIamPolicyArray{ JobIamPolicyArgs{...} }
type JobIamPolicyArrayInput interface {
	pulumi.Input

	ToJobIamPolicyArrayOutput() JobIamPolicyArrayOutput
	ToJobIamPolicyArrayOutputWithContext(context.Context) JobIamPolicyArrayOutput
}

type JobIamPolicyArray []JobIamPolicyInput

func (JobIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobIamPolicy)(nil)).Elem()
}

func (i JobIamPolicyArray) ToJobIamPolicyArrayOutput() JobIamPolicyArrayOutput {
	return i.ToJobIamPolicyArrayOutputWithContext(context.Background())
}

func (i JobIamPolicyArray) ToJobIamPolicyArrayOutputWithContext(ctx context.Context) JobIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIamPolicyArrayOutput)
}

func (i JobIamPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]*JobIamPolicy] {
	return pulumix.Output[[]*JobIamPolicy]{
		OutputState: i.ToJobIamPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

// JobIamPolicyMapInput is an input type that accepts JobIamPolicyMap and JobIamPolicyMapOutput values.
// You can construct a concrete instance of `JobIamPolicyMapInput` via:
//
//	JobIamPolicyMap{ "key": JobIamPolicyArgs{...} }
type JobIamPolicyMapInput interface {
	pulumi.Input

	ToJobIamPolicyMapOutput() JobIamPolicyMapOutput
	ToJobIamPolicyMapOutputWithContext(context.Context) JobIamPolicyMapOutput
}

type JobIamPolicyMap map[string]JobIamPolicyInput

func (JobIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobIamPolicy)(nil)).Elem()
}

func (i JobIamPolicyMap) ToJobIamPolicyMapOutput() JobIamPolicyMapOutput {
	return i.ToJobIamPolicyMapOutputWithContext(context.Background())
}

func (i JobIamPolicyMap) ToJobIamPolicyMapOutputWithContext(ctx context.Context) JobIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIamPolicyMapOutput)
}

func (i JobIamPolicyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*JobIamPolicy] {
	return pulumix.Output[map[string]*JobIamPolicy]{
		OutputState: i.ToJobIamPolicyMapOutputWithContext(ctx).OutputState,
	}
}

type JobIamPolicyOutput struct{ *pulumi.OutputState }

func (JobIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobIamPolicy)(nil)).Elem()
}

func (o JobIamPolicyOutput) ToJobIamPolicyOutput() JobIamPolicyOutput {
	return o
}

func (o JobIamPolicyOutput) ToJobIamPolicyOutputWithContext(ctx context.Context) JobIamPolicyOutput {
	return o
}

func (o JobIamPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*JobIamPolicy] {
	return pulumix.Output[*JobIamPolicy]{
		OutputState: o.OutputState,
	}
}

// (Computed) The etag of the IAM policy.
func (o JobIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location of the cloud run job Used to find the parent resource to bind the IAM policy to
func (o JobIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o JobIamPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIamPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o JobIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o JobIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *JobIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type JobIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (JobIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobIamPolicy)(nil)).Elem()
}

func (o JobIamPolicyArrayOutput) ToJobIamPolicyArrayOutput() JobIamPolicyArrayOutput {
	return o
}

func (o JobIamPolicyArrayOutput) ToJobIamPolicyArrayOutputWithContext(ctx context.Context) JobIamPolicyArrayOutput {
	return o
}

func (o JobIamPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*JobIamPolicy] {
	return pulumix.Output[[]*JobIamPolicy]{
		OutputState: o.OutputState,
	}
}

func (o JobIamPolicyArrayOutput) Index(i pulumi.IntInput) JobIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JobIamPolicy {
		return vs[0].([]*JobIamPolicy)[vs[1].(int)]
	}).(JobIamPolicyOutput)
}

type JobIamPolicyMapOutput struct{ *pulumi.OutputState }

func (JobIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobIamPolicy)(nil)).Elem()
}

func (o JobIamPolicyMapOutput) ToJobIamPolicyMapOutput() JobIamPolicyMapOutput {
	return o
}

func (o JobIamPolicyMapOutput) ToJobIamPolicyMapOutputWithContext(ctx context.Context) JobIamPolicyMapOutput {
	return o
}

func (o JobIamPolicyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*JobIamPolicy] {
	return pulumix.Output[map[string]*JobIamPolicy]{
		OutputState: o.OutputState,
	}
}

func (o JobIamPolicyMapOutput) MapIndex(k pulumi.StringInput) JobIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JobIamPolicy {
		return vs[0].(map[string]*JobIamPolicy)[vs[1].(string)]
	}).(JobIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobIamPolicyInput)(nil)).Elem(), &JobIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobIamPolicyArrayInput)(nil)).Elem(), JobIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobIamPolicyMapInput)(nil)).Elem(), JobIamPolicyMap{})
	pulumi.RegisterOutputType(JobIamPolicyOutput{})
	pulumi.RegisterOutputType(JobIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(JobIamPolicyMapOutput{})
}
