// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudrunv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Cloud Run (v2 API) WorkerPool. Each of these resources serves a different use case:
//
// * `cloudrunv2.WorkerPoolIamPolicy`: Authoritative. Sets the IAM policy for the workerpool and replaces any existing policy already attached.
// * `cloudrunv2.WorkerPoolIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the workerpool are preserved.
// * `cloudrunv2.WorkerPoolIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the workerpool are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `cloudrunv2.WorkerPoolIamPolicy`: Retrieves the IAM policy for the workerpool
//
// > **Note:** `cloudrunv2.WorkerPoolIamPolicy` **cannot** be used in conjunction with `cloudrunv2.WorkerPoolIamBinding` and `cloudrunv2.WorkerPoolIamMember` or they will fight over what your policy should be.
//
// > **Note:** `cloudrunv2.WorkerPoolIamBinding` resources **can be** used in conjunction with `cloudrunv2.WorkerPoolIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## cloudrunv2.WorkerPoolIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = cloudrunv2.NewWorkerPoolIamPolicy(ctx, "policy", &cloudrunv2.WorkerPoolIamPolicyArgs{
//				Project:    pulumi.Any(_default.Project),
//				Location:   pulumi.Any(_default.Location),
//				Name:       pulumi.Any(_default.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## cloudrunv2.WorkerPoolIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudrunv2.NewWorkerPoolIamBinding(ctx, "binding", &cloudrunv2.WorkerPoolIamBindingArgs{
//				Project:  pulumi.Any(_default.Project),
//				Location: pulumi.Any(_default.Location),
//				Name:     pulumi.Any(_default.Name),
//				Role:     pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## cloudrunv2.WorkerPoolIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudrunv2.NewWorkerPoolIamMember(ctx, "member", &cloudrunv2.WorkerPoolIamMemberArgs{
//				Project:  pulumi.Any(_default.Project),
//				Location: pulumi.Any(_default.Location),
//				Name:     pulumi.Any(_default.Name),
//				Role:     pulumi.String("roles/viewer"),
//				Member:   pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for Cloud Run (v2 API) WorkerPool
// Three different resources help you manage your IAM policy for Cloud Run (v2 API) WorkerPool. Each of these resources serves a different use case:
//
// * `cloudrunv2.WorkerPoolIamPolicy`: Authoritative. Sets the IAM policy for the workerpool and replaces any existing policy already attached.
// * `cloudrunv2.WorkerPoolIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the workerpool are preserved.
// * `cloudrunv2.WorkerPoolIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the workerpool are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `cloudrunv2.WorkerPoolIamPolicy`: Retrieves the IAM policy for the workerpool
//
// > **Note:** `cloudrunv2.WorkerPoolIamPolicy` **cannot** be used in conjunction with `cloudrunv2.WorkerPoolIamBinding` and `cloudrunv2.WorkerPoolIamMember` or they will fight over what your policy should be.
//
// > **Note:** `cloudrunv2.WorkerPoolIamBinding` resources **can be** used in conjunction with `cloudrunv2.WorkerPoolIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## cloudrunv2.WorkerPoolIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = cloudrunv2.NewWorkerPoolIamPolicy(ctx, "policy", &cloudrunv2.WorkerPoolIamPolicyArgs{
//				Project:    pulumi.Any(_default.Project),
//				Location:   pulumi.Any(_default.Location),
//				Name:       pulumi.Any(_default.Name),
//				PolicyData: pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## cloudrunv2.WorkerPoolIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudrunv2.NewWorkerPoolIamBinding(ctx, "binding", &cloudrunv2.WorkerPoolIamBindingArgs{
//				Project:  pulumi.Any(_default.Project),
//				Location: pulumi.Any(_default.Location),
//				Name:     pulumi.Any(_default.Name),
//				Role:     pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## cloudrunv2.WorkerPoolIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudrunv2.NewWorkerPoolIamMember(ctx, "member", &cloudrunv2.WorkerPoolIamMemberArgs{
//				Project:  pulumi.Any(_default.Project),
//				Location: pulumi.Any(_default.Location),
//				Name:     pulumi.Any(_default.Name),
//				Role:     pulumi.String("roles/viewer"),
//				Member:   pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/workerPools/{{name}}
//
// * {{project}}/{{location}}/{{name}}
//
// * {{location}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Cloud Run (v2 API) workerpool IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:cloudrunv2/workerPoolIamPolicy:WorkerPoolIamPolicy editor "projects/{{project}}/locations/{{location}}/workerPools/{{worker_pool}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:cloudrunv2/workerPoolIamPolicy:WorkerPoolIamPolicy editor "projects/{{project}}/locations/{{location}}/workerPools/{{worker_pool}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:cloudrunv2/workerPoolIamPolicy:WorkerPoolIamPolicy editor projects/{{project}}/locations/{{location}}/workerPools/{{worker_pool}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type WorkerPoolIamPolicy struct {
	pulumi.CustomResourceState

	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location of the cloud run worker pool Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewWorkerPoolIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewWorkerPoolIamPolicy(ctx *pulumi.Context,
	name string, args *WorkerPoolIamPolicyArgs, opts ...pulumi.ResourceOption) (*WorkerPoolIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkerPoolIamPolicy
	err := ctx.RegisterResource("gcp:cloudrunv2/workerPoolIamPolicy:WorkerPoolIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkerPoolIamPolicy gets an existing WorkerPoolIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkerPoolIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkerPoolIamPolicyState, opts ...pulumi.ResourceOption) (*WorkerPoolIamPolicy, error) {
	var resource WorkerPoolIamPolicy
	err := ctx.ReadResource("gcp:cloudrunv2/workerPoolIamPolicy:WorkerPoolIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkerPoolIamPolicy resources.
type workerPoolIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// The location of the cloud run worker pool Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

type WorkerPoolIamPolicyState struct {
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// The location of the cloud run worker pool Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (WorkerPoolIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*workerPoolIamPolicyState)(nil)).Elem()
}

type workerPoolIamPolicyArgs struct {
	// The location of the cloud run worker pool Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a WorkerPoolIamPolicy resource.
type WorkerPoolIamPolicyArgs struct {
	// The location of the cloud run worker pool Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (WorkerPoolIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workerPoolIamPolicyArgs)(nil)).Elem()
}

type WorkerPoolIamPolicyInput interface {
	pulumi.Input

	ToWorkerPoolIamPolicyOutput() WorkerPoolIamPolicyOutput
	ToWorkerPoolIamPolicyOutputWithContext(ctx context.Context) WorkerPoolIamPolicyOutput
}

func (*WorkerPoolIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerPoolIamPolicy)(nil)).Elem()
}

func (i *WorkerPoolIamPolicy) ToWorkerPoolIamPolicyOutput() WorkerPoolIamPolicyOutput {
	return i.ToWorkerPoolIamPolicyOutputWithContext(context.Background())
}

func (i *WorkerPoolIamPolicy) ToWorkerPoolIamPolicyOutputWithContext(ctx context.Context) WorkerPoolIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolIamPolicyOutput)
}

// WorkerPoolIamPolicyArrayInput is an input type that accepts WorkerPoolIamPolicyArray and WorkerPoolIamPolicyArrayOutput values.
// You can construct a concrete instance of `WorkerPoolIamPolicyArrayInput` via:
//
//	WorkerPoolIamPolicyArray{ WorkerPoolIamPolicyArgs{...} }
type WorkerPoolIamPolicyArrayInput interface {
	pulumi.Input

	ToWorkerPoolIamPolicyArrayOutput() WorkerPoolIamPolicyArrayOutput
	ToWorkerPoolIamPolicyArrayOutputWithContext(context.Context) WorkerPoolIamPolicyArrayOutput
}

type WorkerPoolIamPolicyArray []WorkerPoolIamPolicyInput

func (WorkerPoolIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkerPoolIamPolicy)(nil)).Elem()
}

func (i WorkerPoolIamPolicyArray) ToWorkerPoolIamPolicyArrayOutput() WorkerPoolIamPolicyArrayOutput {
	return i.ToWorkerPoolIamPolicyArrayOutputWithContext(context.Background())
}

func (i WorkerPoolIamPolicyArray) ToWorkerPoolIamPolicyArrayOutputWithContext(ctx context.Context) WorkerPoolIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolIamPolicyArrayOutput)
}

// WorkerPoolIamPolicyMapInput is an input type that accepts WorkerPoolIamPolicyMap and WorkerPoolIamPolicyMapOutput values.
// You can construct a concrete instance of `WorkerPoolIamPolicyMapInput` via:
//
//	WorkerPoolIamPolicyMap{ "key": WorkerPoolIamPolicyArgs{...} }
type WorkerPoolIamPolicyMapInput interface {
	pulumi.Input

	ToWorkerPoolIamPolicyMapOutput() WorkerPoolIamPolicyMapOutput
	ToWorkerPoolIamPolicyMapOutputWithContext(context.Context) WorkerPoolIamPolicyMapOutput
}

type WorkerPoolIamPolicyMap map[string]WorkerPoolIamPolicyInput

func (WorkerPoolIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkerPoolIamPolicy)(nil)).Elem()
}

func (i WorkerPoolIamPolicyMap) ToWorkerPoolIamPolicyMapOutput() WorkerPoolIamPolicyMapOutput {
	return i.ToWorkerPoolIamPolicyMapOutputWithContext(context.Background())
}

func (i WorkerPoolIamPolicyMap) ToWorkerPoolIamPolicyMapOutputWithContext(ctx context.Context) WorkerPoolIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolIamPolicyMapOutput)
}

type WorkerPoolIamPolicyOutput struct{ *pulumi.OutputState }

func (WorkerPoolIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerPoolIamPolicy)(nil)).Elem()
}

func (o WorkerPoolIamPolicyOutput) ToWorkerPoolIamPolicyOutput() WorkerPoolIamPolicyOutput {
	return o
}

func (o WorkerPoolIamPolicyOutput) ToWorkerPoolIamPolicyOutputWithContext(ctx context.Context) WorkerPoolIamPolicyOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o WorkerPoolIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPoolIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location of the cloud run worker pool Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o WorkerPoolIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPoolIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o WorkerPoolIamPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPoolIamPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o WorkerPoolIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPoolIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o WorkerPoolIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerPoolIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type WorkerPoolIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (WorkerPoolIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkerPoolIamPolicy)(nil)).Elem()
}

func (o WorkerPoolIamPolicyArrayOutput) ToWorkerPoolIamPolicyArrayOutput() WorkerPoolIamPolicyArrayOutput {
	return o
}

func (o WorkerPoolIamPolicyArrayOutput) ToWorkerPoolIamPolicyArrayOutputWithContext(ctx context.Context) WorkerPoolIamPolicyArrayOutput {
	return o
}

func (o WorkerPoolIamPolicyArrayOutput) Index(i pulumi.IntInput) WorkerPoolIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkerPoolIamPolicy {
		return vs[0].([]*WorkerPoolIamPolicy)[vs[1].(int)]
	}).(WorkerPoolIamPolicyOutput)
}

type WorkerPoolIamPolicyMapOutput struct{ *pulumi.OutputState }

func (WorkerPoolIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkerPoolIamPolicy)(nil)).Elem()
}

func (o WorkerPoolIamPolicyMapOutput) ToWorkerPoolIamPolicyMapOutput() WorkerPoolIamPolicyMapOutput {
	return o
}

func (o WorkerPoolIamPolicyMapOutput) ToWorkerPoolIamPolicyMapOutputWithContext(ctx context.Context) WorkerPoolIamPolicyMapOutput {
	return o
}

func (o WorkerPoolIamPolicyMapOutput) MapIndex(k pulumi.StringInput) WorkerPoolIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkerPoolIamPolicy {
		return vs[0].(map[string]*WorkerPoolIamPolicy)[vs[1].(string)]
	}).(WorkerPoolIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPoolIamPolicyInput)(nil)).Elem(), &WorkerPoolIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPoolIamPolicyArrayInput)(nil)).Elem(), WorkerPoolIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPoolIamPolicyMapInput)(nil)).Elem(), WorkerPoolIamPolicyMap{})
	pulumi.RegisterOutputType(WorkerPoolIamPolicyOutput{})
	pulumi.RegisterOutputType(WorkerPoolIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(WorkerPoolIamPolicyMapOutput{})
}
