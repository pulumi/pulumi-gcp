// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudrunv2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Service acts as a top-level container that manages a set of configurations and revision templates which implement a network service. Service exists to provide a singular abstraction which can be access controlled, reasoned about, and which encapsulates software lifecycle decisions such as rollout policy and team resource ownership.
//
// To get more information about Service, see:
//
// * [API documentation](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/run/docs/)
//
// ## Example Usage
// ### Cloudrunv2 Service Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudrunv2.NewService(ctx, "default", &cloudrunv2.ServiceArgs{
//				Ingress:  pulumi.String("INGRESS_TRAFFIC_ALL"),
//				Location: pulumi.String("us-central1"),
//				Template: &cloudrunv2.ServiceTemplateArgs{
//					Containers: cloudrunv2.ServiceTemplateContainerArray{
//						&cloudrunv2.ServiceTemplateContainerArgs{
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/hello"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Cloudrunv2 Service Sql
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/sql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			secret, err := secretmanager.NewSecret(ctx, "secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("secret-1"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Automatic: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretVersion(ctx, "secret-version-data", &secretmanager.SecretVersionArgs{
//				Secret:     secret.Name,
//				SecretData: pulumi.String("secret-data"),
//			})
//			if err != nil {
//				return err
//			}
//			instance, err := sql.NewDatabaseInstance(ctx, "instance", &sql.DatabaseInstanceArgs{
//				Region:          pulumi.String("us-central1"),
//				DatabaseVersion: pulumi.String("MYSQL_5_7"),
//				Settings: &sql.DatabaseInstanceSettingsArgs{
//					Tier: pulumi.String("db-f1-micro"),
//				},
//				DeletionProtection: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudrunv2.NewService(ctx, "default", &cloudrunv2.ServiceArgs{
//				Location: pulumi.String("us-central1"),
//				Ingress:  pulumi.String("INGRESS_TRAFFIC_ALL"),
//				Template: &cloudrunv2.ServiceTemplateArgs{
//					Scaling: &cloudrunv2.ServiceTemplateScalingArgs{
//						MaxInstanceCount: pulumi.Int(2),
//					},
//					Volumes: cloudrunv2.ServiceTemplateVolumeArray{
//						&cloudrunv2.ServiceTemplateVolumeArgs{
//							Name: pulumi.String("cloudsql"),
//							CloudSqlInstance: &cloudrunv2.ServiceTemplateVolumeCloudSqlInstanceArgs{
//								Instances: pulumi.StringArray{
//									instance.ConnectionName,
//								},
//							},
//						},
//					},
//					Containers: cloudrunv2.ServiceTemplateContainerArray{
//						&cloudrunv2.ServiceTemplateContainerArgs{
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/hello"),
//							Envs: cloudrunv2.ServiceTemplateContainerEnvArray{
//								&cloudrunv2.ServiceTemplateContainerEnvArgs{
//									Name:  pulumi.String("FOO"),
//									Value: pulumi.String("bar"),
//								},
//								&cloudrunv2.ServiceTemplateContainerEnvArgs{
//									Name: pulumi.String("SECRET_ENV_VAR"),
//									ValueSource: &cloudrunv2.ServiceTemplateContainerEnvValueSourceArgs{
//										SecretKeyRef: &cloudrunv2.ServiceTemplateContainerEnvValueSourceSecretKeyRefArgs{
//											Secret:  secret.SecretId,
//											Version: pulumi.String("1"),
//										},
//									},
//								},
//							},
//							VolumeMounts: cloudrunv2.ServiceTemplateContainerVolumeMountArray{
//								&cloudrunv2.ServiceTemplateContainerVolumeMountArgs{
//									Name:      pulumi.String("cloudsql"),
//									MountPath: pulumi.String("/cloudsql"),
//								},
//							},
//						},
//					},
//				},
//				Traffics: cloudrunv2.ServiceTrafficArray{
//					&cloudrunv2.ServiceTrafficArgs{
//						Type:    pulumi.String("TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST"),
//						Percent: pulumi.Int(100),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				secret_version_data,
//			}))
//			if err != nil {
//				return err
//			}
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretIamMember(ctx, "secret-access", &secretmanager.SecretIamMemberArgs{
//				SecretId: secret.ID(),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.String(fmt.Sprintf("serviceAccount:%v-compute@developer.gserviceaccount.com", project.Number)),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				secret,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Cloudrunv2 Service Vpcaccess
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/vpcaccess"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			customTestNetwork, err := compute.NewNetwork(ctx, "customTestNetwork", &compute.NetworkArgs{
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			customTestSubnetwork, err := compute.NewSubnetwork(ctx, "customTestSubnetwork", &compute.SubnetworkArgs{
//				IpCidrRange: pulumi.String("10.2.0.0/28"),
//				Region:      pulumi.String("us-central1"),
//				Network:     customTestNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			connector, err := vpcaccess.NewConnector(ctx, "connector", &vpcaccess.ConnectorArgs{
//				Subnet: &vpcaccess.ConnectorSubnetArgs{
//					Name: customTestSubnetwork.Name,
//				},
//				MachineType:  pulumi.String("e2-standard-4"),
//				MinInstances: pulumi.Int(2),
//				MaxInstances: pulumi.Int(3),
//				Region:       pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudrunv2.NewService(ctx, "default", &cloudrunv2.ServiceArgs{
//				Location: pulumi.String("us-central1"),
//				Template: &cloudrunv2.ServiceTemplateArgs{
//					Containers: cloudrunv2.ServiceTemplateContainerArray{
//						&cloudrunv2.ServiceTemplateContainerArgs{
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/hello"),
//						},
//					},
//					VpcAccess: &cloudrunv2.ServiceTemplateVpcAccessArgs{
//						Connector: connector.ID(),
//						Egress:    pulumi.String("ALL_TRAFFIC"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Cloudrunv2 Service Probes
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudrunv2.NewService(ctx, "default", &cloudrunv2.ServiceArgs{
//				Location: pulumi.String("us-central1"),
//				Template: &cloudrunv2.ServiceTemplateArgs{
//					Containers: cloudrunv2.ServiceTemplateContainerArray{
//						&cloudrunv2.ServiceTemplateContainerArgs{
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/hello"),
//							LivenessProbe: &cloudrunv2.ServiceTemplateContainerLivenessProbeArgs{
//								HttpGet: &cloudrunv2.ServiceTemplateContainerLivenessProbeHttpGetArgs{
//									Path: pulumi.String("/"),
//								},
//							},
//							StartupProbe: &cloudrunv2.ServiceTemplateContainerStartupProbeArgs{
//								FailureThreshold:    pulumi.Int(1),
//								InitialDelaySeconds: pulumi.Int(0),
//								PeriodSeconds:       pulumi.Int(3),
//								TcpSocket: &cloudrunv2.ServiceTemplateContainerStartupProbeTcpSocketArgs{
//									Port: pulumi.Int(8080),
//								},
//								TimeoutSeconds: pulumi.Int(1),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Cloudrunv2 Service Secret
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			secret, err := secretmanager.NewSecret(ctx, "secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("secret-1"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Automatic: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretVersion(ctx, "secret-version-data", &secretmanager.SecretVersionArgs{
//				Secret:     secret.Name,
//				SecretData: pulumi.String("secret-data"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudrunv2.NewService(ctx, "default", &cloudrunv2.ServiceArgs{
//				Location: pulumi.String("us-central1"),
//				Ingress:  pulumi.String("INGRESS_TRAFFIC_ALL"),
//				Template: &cloudrunv2.ServiceTemplateArgs{
//					Volumes: cloudrunv2.ServiceTemplateVolumeArray{
//						&cloudrunv2.ServiceTemplateVolumeArgs{
//							Name: pulumi.String("a-volume"),
//							Secret: &cloudrunv2.ServiceTemplateVolumeSecretArgs{
//								Secret:      secret.SecretId,
//								DefaultMode: pulumi.Int(292),
//								Items: cloudrunv2.ServiceTemplateVolumeSecretItemArray{
//									&cloudrunv2.ServiceTemplateVolumeSecretItemArgs{
//										Version: pulumi.String("1"),
//										Path:    pulumi.String("my-secret"),
//										Mode:    pulumi.Int(256),
//									},
//								},
//							},
//						},
//					},
//					Containers: cloudrunv2.ServiceTemplateContainerArray{
//						&cloudrunv2.ServiceTemplateContainerArgs{
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/hello"),
//							VolumeMounts: cloudrunv2.ServiceTemplateContainerVolumeMountArray{
//								&cloudrunv2.ServiceTemplateContainerVolumeMountArgs{
//									Name:      pulumi.String("a-volume"),
//									MountPath: pulumi.String("/secrets"),
//								},
//							},
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				secret_version_data,
//			}))
//			if err != nil {
//				return err
//			}
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretIamMember(ctx, "secret-access", &secretmanager.SecretIamMemberArgs{
//				SecretId: secret.ID(),
//				Role:     pulumi.String("roles/secretmanager.secretAccessor"),
//				Member:   pulumi.String(fmt.Sprintf("serviceAccount:%v-compute@developer.gserviceaccount.com", project.Number)),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				secret,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Service can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:cloudrunv2/service:Service default projects/{{project}}/locations/{{location}}/services/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:cloudrunv2/service:Service default {{project}}/{{location}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:cloudrunv2/service:Service default {{location}}/{{name}}
//
// ```
type Service struct {
	pulumi.CustomResourceState

	// KRM-style annotations for the resource.
	// (Optional)
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using 'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows Kubernetes annotations' namespacing, limits, and rules. More info: https://kubernetes.io/docs/user-guide/annotations
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	BinaryAuthorization ServiceBinaryAuthorizationPtrOutput `pulumi:"binaryAuthorization"`
	// Arbitrary identifier for the API client.
	Client pulumi.StringPtrOutput `pulumi:"client"`
	// Arbitrary version identifier for the API client.
	ClientVersion pulumi.StringPtrOutput `pulumi:"clientVersion"`
	// The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	Conditions ServiceConditionArrayOutput `pulumi:"conditions"`
	// User-provided description of the Service. This field currently has a 512-character limit.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
	Generation pulumi.StringOutput `pulumi:"generation"`
	// Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
	// Possible values are `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, and `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
	Ingress pulumi.StringOutput `pulumi:"ingress"`
	// KRM-style labels for the resource.
	// (Optional)
	// Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	LatestCreatedRevision pulumi.StringOutput `pulumi:"latestCreatedRevision"`
	// Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	LatestReadyRevision pulumi.StringOutput `pulumi:"latestReadyRevision"`
	// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA. If no value is specified, GA is assumed.
	// Possible values are `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
	LaunchStage pulumi.StringOutput `pulumi:"launchStage"`
	// The location of the cloud run service
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Name of the Service.
	Name pulumi.StringOutput `pulumi:"name"`
	// The generation of this Service currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
	ObservedGeneration pulumi.StringOutput `pulumi:"observedGeneration"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Returns true if the Service is currently being acted upon by the system to bring it into the desired state.
	// When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
	// If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
	// If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in terminalCondition and conditions.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// The template used to create revisions for this Service.
	// Structure is documented below.
	Template ServiceTemplateOutput `pulumi:"template"`
	// The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	TerminalConditions ServiceTerminalConditionArrayOutput `pulumi:"terminalConditions"`
	// Detailed status information for corresponding traffic targets. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	TrafficStatuses ServiceTrafficStatusArrayOutput `pulumi:"trafficStatuses"`
	// Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
	// Structure is documented below.
	Traffics ServiceTrafficArrayOutput `pulumi:"traffics"`
	// Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Displays the target URI.
	Uri pulumi.StringOutput `pulumi:"uri"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Template == nil {
		return nil, errors.New("invalid value for required argument 'Template'")
	}
	var resource Service
	err := ctx.RegisterResource("gcp:cloudrunv2/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("gcp:cloudrunv2/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// KRM-style annotations for the resource.
	// (Optional)
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using 'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows Kubernetes annotations' namespacing, limits, and rules. More info: https://kubernetes.io/docs/user-guide/annotations
	Annotations map[string]string `pulumi:"annotations"`
	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	BinaryAuthorization *ServiceBinaryAuthorization `pulumi:"binaryAuthorization"`
	// Arbitrary identifier for the API client.
	Client *string `pulumi:"client"`
	// Arbitrary version identifier for the API client.
	ClientVersion *string `pulumi:"clientVersion"`
	// The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	Conditions []ServiceCondition `pulumi:"conditions"`
	// User-provided description of the Service. This field currently has a 512-character limit.
	Description *string `pulumi:"description"`
	// A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
	Etag *string `pulumi:"etag"`
	// A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
	Generation *string `pulumi:"generation"`
	// Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
	// Possible values are `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, and `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
	Ingress *string `pulumi:"ingress"`
	// KRM-style labels for the resource.
	// (Optional)
	// Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
	Labels map[string]string `pulumi:"labels"`
	// Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	LatestCreatedRevision *string `pulumi:"latestCreatedRevision"`
	// Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	LatestReadyRevision *string `pulumi:"latestReadyRevision"`
	// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA. If no value is specified, GA is assumed.
	// Possible values are `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
	LaunchStage *string `pulumi:"launchStage"`
	// The location of the cloud run service
	Location *string `pulumi:"location"`
	// Name of the Service.
	Name *string `pulumi:"name"`
	// The generation of this Service currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
	ObservedGeneration *string `pulumi:"observedGeneration"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Returns true if the Service is currently being acted upon by the system to bring it into the desired state.
	// When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
	// If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
	// If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in terminalCondition and conditions.
	Reconciling *bool `pulumi:"reconciling"`
	// The template used to create revisions for this Service.
	// Structure is documented below.
	Template *ServiceTemplate `pulumi:"template"`
	// The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	TerminalConditions []ServiceTerminalCondition `pulumi:"terminalConditions"`
	// Detailed status information for corresponding traffic targets. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	TrafficStatuses []ServiceTrafficStatus `pulumi:"trafficStatuses"`
	// Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
	// Structure is documented below.
	Traffics []ServiceTraffic `pulumi:"traffics"`
	// Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
	Uid *string `pulumi:"uid"`
	// Displays the target URI.
	Uri *string `pulumi:"uri"`
}

type ServiceState struct {
	// KRM-style annotations for the resource.
	// (Optional)
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using 'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows Kubernetes annotations' namespacing, limits, and rules. More info: https://kubernetes.io/docs/user-guide/annotations
	Annotations pulumi.StringMapInput
	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	BinaryAuthorization ServiceBinaryAuthorizationPtrInput
	// Arbitrary identifier for the API client.
	Client pulumi.StringPtrInput
	// Arbitrary version identifier for the API client.
	ClientVersion pulumi.StringPtrInput
	// The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	Conditions ServiceConditionArrayInput
	// User-provided description of the Service. This field currently has a 512-character limit.
	Description pulumi.StringPtrInput
	// A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
	Etag pulumi.StringPtrInput
	// A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
	Generation pulumi.StringPtrInput
	// Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
	// Possible values are `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, and `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
	Ingress pulumi.StringPtrInput
	// KRM-style labels for the resource.
	// (Optional)
	// Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
	Labels pulumi.StringMapInput
	// Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	LatestCreatedRevision pulumi.StringPtrInput
	// Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	LatestReadyRevision pulumi.StringPtrInput
	// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA. If no value is specified, GA is assumed.
	// Possible values are `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
	LaunchStage pulumi.StringPtrInput
	// The location of the cloud run service
	Location pulumi.StringPtrInput
	// Name of the Service.
	Name pulumi.StringPtrInput
	// The generation of this Service currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
	ObservedGeneration pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Returns true if the Service is currently being acted upon by the system to bring it into the desired state.
	// When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
	// If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
	// If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in terminalCondition and conditions.
	Reconciling pulumi.BoolPtrInput
	// The template used to create revisions for this Service.
	// Structure is documented below.
	Template ServiceTemplatePtrInput
	// The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	TerminalConditions ServiceTerminalConditionArrayInput
	// Detailed status information for corresponding traffic targets. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	TrafficStatuses ServiceTrafficStatusArrayInput
	// Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
	// Structure is documented below.
	Traffics ServiceTrafficArrayInput
	// Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
	Uid pulumi.StringPtrInput
	// Displays the target URI.
	Uri pulumi.StringPtrInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// KRM-style annotations for the resource.
	// (Optional)
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using 'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows Kubernetes annotations' namespacing, limits, and rules. More info: https://kubernetes.io/docs/user-guide/annotations
	Annotations map[string]string `pulumi:"annotations"`
	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	BinaryAuthorization *ServiceBinaryAuthorization `pulumi:"binaryAuthorization"`
	// Arbitrary identifier for the API client.
	Client *string `pulumi:"client"`
	// Arbitrary version identifier for the API client.
	ClientVersion *string `pulumi:"clientVersion"`
	// User-provided description of the Service. This field currently has a 512-character limit.
	Description *string `pulumi:"description"`
	// Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
	// Possible values are `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, and `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
	Ingress *string `pulumi:"ingress"`
	// KRM-style labels for the resource.
	// (Optional)
	// Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
	Labels map[string]string `pulumi:"labels"`
	// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA. If no value is specified, GA is assumed.
	// Possible values are `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
	LaunchStage *string `pulumi:"launchStage"`
	// The location of the cloud run service
	Location *string `pulumi:"location"`
	// Name of the Service.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The template used to create revisions for this Service.
	// Structure is documented below.
	Template ServiceTemplate `pulumi:"template"`
	// Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
	// Structure is documented below.
	Traffics []ServiceTraffic `pulumi:"traffics"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// KRM-style annotations for the resource.
	// (Optional)
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using 'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows Kubernetes annotations' namespacing, limits, and rules. More info: https://kubernetes.io/docs/user-guide/annotations
	Annotations pulumi.StringMapInput
	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	BinaryAuthorization ServiceBinaryAuthorizationPtrInput
	// Arbitrary identifier for the API client.
	Client pulumi.StringPtrInput
	// Arbitrary version identifier for the API client.
	ClientVersion pulumi.StringPtrInput
	// User-provided description of the Service. This field currently has a 512-character limit.
	Description pulumi.StringPtrInput
	// Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
	// Possible values are `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, and `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
	Ingress pulumi.StringPtrInput
	// KRM-style labels for the resource.
	// (Optional)
	// Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
	Labels pulumi.StringMapInput
	// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA. If no value is specified, GA is assumed.
	// Possible values are `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
	LaunchStage pulumi.StringPtrInput
	// The location of the cloud run service
	Location pulumi.StringPtrInput
	// Name of the Service.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The template used to create revisions for this Service.
	// Structure is documented below.
	Template ServiceTemplateInput
	// Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
	// Structure is documented below.
	Traffics ServiceTrafficArrayInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//	ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//	ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

// KRM-style annotations for the resource.
// (Optional)
// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using 'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows Kubernetes annotations' namespacing, limits, and rules. More info: https://kubernetes.io/docs/user-guide/annotations
func (o ServiceOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Service) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Settings for the Binary Authorization feature.
// Structure is documented below.
func (o ServiceOutput) BinaryAuthorization() ServiceBinaryAuthorizationPtrOutput {
	return o.ApplyT(func(v *Service) ServiceBinaryAuthorizationPtrOutput { return v.BinaryAuthorization }).(ServiceBinaryAuthorizationPtrOutput)
}

// Arbitrary identifier for the API client.
func (o ServiceOutput) Client() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Client }).(pulumi.StringPtrOutput)
}

// Arbitrary version identifier for the API client.
func (o ServiceOutput) ClientVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.ClientVersion }).(pulumi.StringPtrOutput)
}

// The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
// Structure is documented below.
func (o ServiceOutput) Conditions() ServiceConditionArrayOutput {
	return o.ApplyT(func(v *Service) ServiceConditionArrayOutput { return v.Conditions }).(ServiceConditionArrayOutput)
}

// User-provided description of the Service. This field currently has a 512-character limit.
func (o ServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
func (o ServiceOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
func (o ServiceOutput) Generation() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Generation }).(pulumi.StringOutput)
}

// Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
// Possible values are `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, and `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
func (o ServiceOutput) Ingress() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Ingress }).(pulumi.StringOutput)
}

// KRM-style labels for the resource.
// (Optional)
// Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
func (o ServiceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Service) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
func (o ServiceOutput) LatestCreatedRevision() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.LatestCreatedRevision }).(pulumi.StringOutput)
}

// Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
func (o ServiceOutput) LatestReadyRevision() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.LatestReadyRevision }).(pulumi.StringOutput)
}

// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA. If no value is specified, GA is assumed.
// Possible values are `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
func (o ServiceOutput) LaunchStage() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.LaunchStage }).(pulumi.StringOutput)
}

// The location of the cloud run service
func (o ServiceOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of the Service.
func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The generation of this Service currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
func (o ServiceOutput) ObservedGeneration() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ObservedGeneration }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ServiceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Returns true if the Service is currently being acted upon by the system to bring it into the desired state.
// When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
// If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
// If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in terminalCondition and conditions.
func (o ServiceOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// The template used to create revisions for this Service.
// Structure is documented below.
func (o ServiceOutput) Template() ServiceTemplateOutput {
	return o.ApplyT(func(v *Service) ServiceTemplateOutput { return v.Template }).(ServiceTemplateOutput)
}

// The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
// Structure is documented below.
func (o ServiceOutput) TerminalConditions() ServiceTerminalConditionArrayOutput {
	return o.ApplyT(func(v *Service) ServiceTerminalConditionArrayOutput { return v.TerminalConditions }).(ServiceTerminalConditionArrayOutput)
}

// Detailed status information for corresponding traffic targets. See comments in reconciling for additional information on reconciliation process in Cloud Run.
// Structure is documented below.
func (o ServiceOutput) TrafficStatuses() ServiceTrafficStatusArrayOutput {
	return o.ApplyT(func(v *Service) ServiceTrafficStatusArrayOutput { return v.TrafficStatuses }).(ServiceTrafficStatusArrayOutput)
}

// Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
// Structure is documented below.
func (o ServiceOutput) Traffics() ServiceTrafficArrayOutput {
	return o.ApplyT(func(v *Service) ServiceTrafficArrayOutput { return v.Traffics }).(ServiceTrafficArrayOutput)
}

// Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
func (o ServiceOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Displays the target URI.
func (o ServiceOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
