// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alloydb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A database user in an AlloyDB cluster.
//
// To get more information about User, see:
//
// * [API documentation](https://cloud.google.com/alloydb/docs/reference/rest/v1/projects.locations.clusters.users/create)
// * How-to Guides
//   - [AlloyDB](https://cloud.google.com/alloydb/docs/)
//
// ## Example Usage
//
// ### Alloydb User Builtin
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/alloydb"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultCluster, err := alloydb.NewCluster(ctx, "default", &alloydb.ClusterArgs{
//				ClusterId: pulumi.String("alloydb-cluster"),
//				Location:  pulumi.String("us-central1"),
//				NetworkConfig: &alloydb.ClusterNetworkConfigArgs{
//					Network: pulumi.Any(defaultGoogleComputeNetwork.Id),
//				},
//				InitialUser: &alloydb.ClusterInitialUserArgs{
//					Password: pulumi.String("cluster_secret"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
//				Name: pulumi.String("alloydb-network"),
//			})
//			if err != nil {
//				return err
//			}
//			privateIpAlloc, err := compute.NewGlobalAddress(ctx, "private_ip_alloc", &compute.GlobalAddressArgs{
//				Name:         pulumi.String("alloydb-cluster"),
//				AddressType:  pulumi.String("INTERNAL"),
//				Purpose:      pulumi.String("VPC_PEERING"),
//				PrefixLength: pulumi.Int(16),
//				Network:      defaultNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			vpcConnection, err := servicenetworking.NewConnection(ctx, "vpc_connection", &servicenetworking.ConnectionArgs{
//				Network: defaultNetwork.ID(),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					privateIpAlloc.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = alloydb.NewInstance(ctx, "default", &alloydb.InstanceArgs{
//				Cluster:      defaultCluster.Name,
//				InstanceId:   pulumi.String("alloydb-instance"),
//				InstanceType: pulumi.String("PRIMARY"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				vpcConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = alloydb.NewUser(ctx, "user1", &alloydb.UserArgs{
//				Cluster:  defaultCluster.Name,
//				UserId:   pulumi.String("user1"),
//				UserType: pulumi.String("ALLOYDB_BUILT_IN"),
//				Password: pulumi.String("user_secret"),
//				DatabaseRoles: pulumi.StringArray{
//					pulumi.String("alloydbsuperuser"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				_default,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Alloydb User Iam
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/alloydb"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultNetwork, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
//				Name: pulumi.String("alloydb-network"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultCluster, err := alloydb.NewCluster(ctx, "default", &alloydb.ClusterArgs{
//				ClusterId: pulumi.String("alloydb-cluster"),
//				Location:  pulumi.String("us-central1"),
//				NetworkConfig: &alloydb.ClusterNetworkConfigArgs{
//					Network: defaultNetwork.ID(),
//				},
//				InitialUser: &alloydb.ClusterInitialUserArgs{
//					Password: pulumi.String("cluster_secret"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			privateIpAlloc, err := compute.NewGlobalAddress(ctx, "private_ip_alloc", &compute.GlobalAddressArgs{
//				Name:         pulumi.String("alloydb-cluster"),
//				AddressType:  pulumi.String("INTERNAL"),
//				Purpose:      pulumi.String("VPC_PEERING"),
//				PrefixLength: pulumi.Int(16),
//				Network:      defaultNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			vpcConnection, err := servicenetworking.NewConnection(ctx, "vpc_connection", &servicenetworking.ConnectionArgs{
//				Network: defaultNetwork.ID(),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					privateIpAlloc.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = alloydb.NewInstance(ctx, "default", &alloydb.InstanceArgs{
//				Cluster:      defaultCluster.Name,
//				InstanceId:   pulumi.String("alloydb-instance"),
//				InstanceType: pulumi.String("PRIMARY"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				vpcConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = alloydb.NewUser(ctx, "user2", &alloydb.UserArgs{
//				Cluster:  defaultCluster.Name,
//				UserId:   pulumi.String("user2@foo.com"),
//				UserType: pulumi.String("ALLOYDB_IAM_USER"),
//				DatabaseRoles: pulumi.StringArray{
//					pulumi.String("alloydbiamuser"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				_default,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// User can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/users/{{user_id}}`
//
// * `{{project}}/{{location}}/{{cluster}}/{{user_id}}`
//
// * `{{location}}/{{cluster}}/{{user_id}}`
//
// When using the `pulumi import` command, User can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:alloydb/user:User default projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/users/{{user_id}}
// ```
//
// ```sh
// $ pulumi import gcp:alloydb/user:User default {{project}}/{{location}}/{{cluster}}/{{user_id}}
// ```
//
// ```sh
// $ pulumi import gcp:alloydb/user:User default {{location}}/{{cluster}}/{{user_id}}
// ```
type User struct {
	pulumi.CustomResourceState

	// Identifies the alloydb cluster. Must be in the format
	// 'projects/{project}/locations/{location}/clusters/{cluster_id}'
	Cluster pulumi.StringOutput `pulumi:"cluster"`
	// List of database roles this database user has.
	DatabaseRoles pulumi.StringArrayOutput `pulumi:"databaseRoles"`
	// Name of the resource in the form of projects/{project}/locations/{location}/clusters/{cluster}/users/{user}.
	Name pulumi.StringOutput `pulumi:"name"`
	// Password for this database user.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The database role name of the user.
	UserId pulumi.StringOutput `pulumi:"userId"`
	// The type of this user.
	// Possible values are: `ALLOYDB_BUILT_IN`, `ALLOYDB_IAM_USER`.
	//
	// ***
	UserType pulumi.StringOutput `pulumi:"userType"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	if args.UserType == nil {
		return nil, errors.New("invalid value for required argument 'UserType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("gcp:alloydb/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("gcp:alloydb/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// Identifies the alloydb cluster. Must be in the format
	// 'projects/{project}/locations/{location}/clusters/{cluster_id}'
	Cluster *string `pulumi:"cluster"`
	// List of database roles this database user has.
	DatabaseRoles []string `pulumi:"databaseRoles"`
	// Name of the resource in the form of projects/{project}/locations/{location}/clusters/{cluster}/users/{user}.
	Name *string `pulumi:"name"`
	// Password for this database user.
	Password *string `pulumi:"password"`
	// The database role name of the user.
	UserId *string `pulumi:"userId"`
	// The type of this user.
	// Possible values are: `ALLOYDB_BUILT_IN`, `ALLOYDB_IAM_USER`.
	//
	// ***
	UserType *string `pulumi:"userType"`
}

type UserState struct {
	// Identifies the alloydb cluster. Must be in the format
	// 'projects/{project}/locations/{location}/clusters/{cluster_id}'
	Cluster pulumi.StringPtrInput
	// List of database roles this database user has.
	DatabaseRoles pulumi.StringArrayInput
	// Name of the resource in the form of projects/{project}/locations/{location}/clusters/{cluster}/users/{user}.
	Name pulumi.StringPtrInput
	// Password for this database user.
	Password pulumi.StringPtrInput
	// The database role name of the user.
	UserId pulumi.StringPtrInput
	// The type of this user.
	// Possible values are: `ALLOYDB_BUILT_IN`, `ALLOYDB_IAM_USER`.
	//
	// ***
	UserType pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// Identifies the alloydb cluster. Must be in the format
	// 'projects/{project}/locations/{location}/clusters/{cluster_id}'
	Cluster string `pulumi:"cluster"`
	// List of database roles this database user has.
	DatabaseRoles []string `pulumi:"databaseRoles"`
	// Password for this database user.
	Password *string `pulumi:"password"`
	// The database role name of the user.
	UserId string `pulumi:"userId"`
	// The type of this user.
	// Possible values are: `ALLOYDB_BUILT_IN`, `ALLOYDB_IAM_USER`.
	//
	// ***
	UserType string `pulumi:"userType"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Identifies the alloydb cluster. Must be in the format
	// 'projects/{project}/locations/{location}/clusters/{cluster_id}'
	Cluster pulumi.StringInput
	// List of database roles this database user has.
	DatabaseRoles pulumi.StringArrayInput
	// Password for this database user.
	Password pulumi.StringPtrInput
	// The database role name of the user.
	UserId pulumi.StringInput
	// The type of this user.
	// Possible values are: `ALLOYDB_BUILT_IN`, `ALLOYDB_IAM_USER`.
	//
	// ***
	UserType pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// Identifies the alloydb cluster. Must be in the format
// 'projects/{project}/locations/{location}/clusters/{cluster_id}'
func (o UserOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Cluster }).(pulumi.StringOutput)
}

// List of database roles this database user has.
func (o UserOutput) DatabaseRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *User) pulumi.StringArrayOutput { return v.DatabaseRoles }).(pulumi.StringArrayOutput)
}

// Name of the resource in the form of projects/{project}/locations/{location}/clusters/{cluster}/users/{user}.
func (o UserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Password for this database user.
func (o UserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The database role name of the user.
func (o UserOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

// The type of this user.
// Possible values are: `ALLOYDB_BUILT_IN`, `ALLOYDB_IAM_USER`.
//
// ***
func (o UserOutput) UserType() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.UserType }).(pulumi.StringOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
