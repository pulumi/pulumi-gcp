// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alloydb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Alloydb Backup Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/alloydb"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultNetwork, err := compute.LookupNetwork(ctx, &compute.LookupNetworkArgs{
//				Name: "alloydb-network",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			defaultCluster, err := alloydb.NewCluster(ctx, "defaultCluster", &alloydb.ClusterArgs{
//				ClusterId: pulumi.String("alloydb-cluster"),
//				Location:  pulumi.String("us-central1"),
//				Network:   *pulumi.String(defaultNetwork.Id),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			privateIpAlloc, err := compute.NewGlobalAddress(ctx, "privateIpAlloc", &compute.GlobalAddressArgs{
//				AddressType:  pulumi.String("INTERNAL"),
//				Purpose:      pulumi.String("VPC_PEERING"),
//				PrefixLength: pulumi.Int(16),
//				Network:      *pulumi.String(defaultNetwork.Id),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			vpcConnection, err := servicenetworking.NewConnection(ctx, "vpcConnection", &servicenetworking.ConnectionArgs{
//				Network: *pulumi.String(defaultNetwork.Id),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					privateIpAlloc.Name,
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultInstance, err := alloydb.NewInstance(ctx, "defaultInstance", &alloydb.InstanceArgs{
//				Cluster:      defaultCluster.Name,
//				InstanceId:   pulumi.String("alloydb-instance"),
//				InstanceType: pulumi.String("PRIMARY"),
//			}, pulumi.Provider(google_beta), pulumi.DependsOn([]pulumi.Resource{
//				vpcConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = alloydb.NewBackup(ctx, "defaultBackup", &alloydb.BackupArgs{
//				Location:    pulumi.String("us-central1"),
//				BackupId:    pulumi.String("alloydb-backup"),
//				ClusterName: defaultCluster.Name,
//				Description: pulumi.String("example description"),
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("key"),
//				},
//			}, pulumi.Provider(google_beta), pulumi.DependsOn([]pulumi.Resource{
//				defaultInstance,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Backup can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:alloydb/backup:Backup default projects/{{project}}/locations/{{location}}/backups/{{backup_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:alloydb/backup:Backup default {{project}}/{{location}}/{{backup_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:alloydb/backup:Backup default {{location}}/{{backup_id}}
//
// ```
type Backup struct {
	pulumi.CustomResourceState

	// The ID of the alloydb backup.
	BackupId pulumi.StringOutput `pulumi:"backupId"`
	// The full resource name of the backup source cluster (e.g., projects/{project}/locations/{location}/clusters/{clusterId}).
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// Time the Backup was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User-provided description of the backup.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A hash of the resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// User-defined labels for the alloydb backup.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location where the alloydb backup should reside.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Output only. The name of the backup resource with the format: * projects/{project}/locations/{region}/backups/{backupId}
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// If true, indicates that the service is actively updating the resource. This can happen due to user-triggered updates or system actions like failover or maintenance.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// The current state of the backup.
	State pulumi.StringOutput `pulumi:"state"`
	// Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time the Backup was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewBackup registers a new resource with the given unique name, arguments, and options.
func NewBackup(ctx *pulumi.Context,
	name string, args *BackupArgs, opts ...pulumi.ResourceOption) (*Backup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupId == nil {
		return nil, errors.New("invalid value for required argument 'BackupId'")
	}
	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	var resource Backup
	err := ctx.RegisterResource("gcp:alloydb/backup:Backup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackup gets an existing Backup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupState, opts ...pulumi.ResourceOption) (*Backup, error) {
	var resource Backup
	err := ctx.ReadResource("gcp:alloydb/backup:Backup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Backup resources.
type backupState struct {
	// The ID of the alloydb backup.
	BackupId *string `pulumi:"backupId"`
	// The full resource name of the backup source cluster (e.g., projects/{project}/locations/{location}/clusters/{clusterId}).
	ClusterName *string `pulumi:"clusterName"`
	// Time the Backup was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// User-provided description of the backup.
	Description *string `pulumi:"description"`
	// A hash of the resource.
	Etag *string `pulumi:"etag"`
	// User-defined labels for the alloydb backup.
	Labels map[string]string `pulumi:"labels"`
	// The location where the alloydb backup should reside.
	Location *string `pulumi:"location"`
	// Output only. The name of the backup resource with the format: * projects/{project}/locations/{region}/backups/{backupId}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// If true, indicates that the service is actively updating the resource. This can happen due to user-triggered updates or system actions like failover or maintenance.
	Reconciling *bool `pulumi:"reconciling"`
	// The current state of the backup.
	State *string `pulumi:"state"`
	// Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
	Uid *string `pulumi:"uid"`
	// Time the Backup was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type BackupState struct {
	// The ID of the alloydb backup.
	BackupId pulumi.StringPtrInput
	// The full resource name of the backup source cluster (e.g., projects/{project}/locations/{location}/clusters/{clusterId}).
	ClusterName pulumi.StringPtrInput
	// Time the Backup was created in UTC.
	CreateTime pulumi.StringPtrInput
	// User-provided description of the backup.
	Description pulumi.StringPtrInput
	// A hash of the resource.
	Etag pulumi.StringPtrInput
	// User-defined labels for the alloydb backup.
	Labels pulumi.StringMapInput
	// The location where the alloydb backup should reside.
	Location pulumi.StringPtrInput
	// Output only. The name of the backup resource with the format: * projects/{project}/locations/{region}/backups/{backupId}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// If true, indicates that the service is actively updating the resource. This can happen due to user-triggered updates or system actions like failover or maintenance.
	Reconciling pulumi.BoolPtrInput
	// The current state of the backup.
	State pulumi.StringPtrInput
	// Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
	Uid pulumi.StringPtrInput
	// Time the Backup was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (BackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupState)(nil)).Elem()
}

type backupArgs struct {
	// The ID of the alloydb backup.
	BackupId string `pulumi:"backupId"`
	// The full resource name of the backup source cluster (e.g., projects/{project}/locations/{location}/clusters/{clusterId}).
	ClusterName string `pulumi:"clusterName"`
	// User-provided description of the backup.
	Description *string `pulumi:"description"`
	// User-defined labels for the alloydb backup.
	Labels map[string]string `pulumi:"labels"`
	// The location where the alloydb backup should reside.
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Backup resource.
type BackupArgs struct {
	// The ID of the alloydb backup.
	BackupId pulumi.StringInput
	// The full resource name of the backup source cluster (e.g., projects/{project}/locations/{location}/clusters/{clusterId}).
	ClusterName pulumi.StringInput
	// User-provided description of the backup.
	Description pulumi.StringPtrInput
	// User-defined labels for the alloydb backup.
	Labels pulumi.StringMapInput
	// The location where the alloydb backup should reside.
	Location pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (BackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupArgs)(nil)).Elem()
}

type BackupInput interface {
	pulumi.Input

	ToBackupOutput() BackupOutput
	ToBackupOutputWithContext(ctx context.Context) BackupOutput
}

func (*Backup) ElementType() reflect.Type {
	return reflect.TypeOf((**Backup)(nil)).Elem()
}

func (i *Backup) ToBackupOutput() BackupOutput {
	return i.ToBackupOutputWithContext(context.Background())
}

func (i *Backup) ToBackupOutputWithContext(ctx context.Context) BackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupOutput)
}

// BackupArrayInput is an input type that accepts BackupArray and BackupArrayOutput values.
// You can construct a concrete instance of `BackupArrayInput` via:
//
//	BackupArray{ BackupArgs{...} }
type BackupArrayInput interface {
	pulumi.Input

	ToBackupArrayOutput() BackupArrayOutput
	ToBackupArrayOutputWithContext(context.Context) BackupArrayOutput
}

type BackupArray []BackupInput

func (BackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Backup)(nil)).Elem()
}

func (i BackupArray) ToBackupArrayOutput() BackupArrayOutput {
	return i.ToBackupArrayOutputWithContext(context.Background())
}

func (i BackupArray) ToBackupArrayOutputWithContext(ctx context.Context) BackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupArrayOutput)
}

// BackupMapInput is an input type that accepts BackupMap and BackupMapOutput values.
// You can construct a concrete instance of `BackupMapInput` via:
//
//	BackupMap{ "key": BackupArgs{...} }
type BackupMapInput interface {
	pulumi.Input

	ToBackupMapOutput() BackupMapOutput
	ToBackupMapOutputWithContext(context.Context) BackupMapOutput
}

type BackupMap map[string]BackupInput

func (BackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Backup)(nil)).Elem()
}

func (i BackupMap) ToBackupMapOutput() BackupMapOutput {
	return i.ToBackupMapOutputWithContext(context.Background())
}

func (i BackupMap) ToBackupMapOutputWithContext(ctx context.Context) BackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupMapOutput)
}

type BackupOutput struct{ *pulumi.OutputState }

func (BackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Backup)(nil)).Elem()
}

func (o BackupOutput) ToBackupOutput() BackupOutput {
	return o
}

func (o BackupOutput) ToBackupOutputWithContext(ctx context.Context) BackupOutput {
	return o
}

// The ID of the alloydb backup.
func (o BackupOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.BackupId }).(pulumi.StringOutput)
}

// The full resource name of the backup source cluster (e.g., projects/{project}/locations/{location}/clusters/{clusterId}).
func (o BackupOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// Time the Backup was created in UTC.
func (o BackupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// User-provided description of the backup.
func (o BackupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A hash of the resource.
func (o BackupOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// User-defined labels for the alloydb backup.
func (o BackupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location where the alloydb backup should reside.
func (o BackupOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Output only. The name of the backup resource with the format: * projects/{project}/locations/{region}/backups/{backupId}
func (o BackupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o BackupOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// If true, indicates that the service is actively updating the resource. This can happen due to user-triggered updates or system actions like failover or maintenance.
func (o BackupOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *Backup) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// The current state of the backup.
func (o BackupOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
func (o BackupOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time the Backup was updated in UTC.
func (o BackupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type BackupArrayOutput struct{ *pulumi.OutputState }

func (BackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Backup)(nil)).Elem()
}

func (o BackupArrayOutput) ToBackupArrayOutput() BackupArrayOutput {
	return o
}

func (o BackupArrayOutput) ToBackupArrayOutputWithContext(ctx context.Context) BackupArrayOutput {
	return o
}

func (o BackupArrayOutput) Index(i pulumi.IntInput) BackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Backup {
		return vs[0].([]*Backup)[vs[1].(int)]
	}).(BackupOutput)
}

type BackupMapOutput struct{ *pulumi.OutputState }

func (BackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Backup)(nil)).Elem()
}

func (o BackupMapOutput) ToBackupMapOutput() BackupMapOutput {
	return o
}

func (o BackupMapOutput) ToBackupMapOutputWithContext(ctx context.Context) BackupMapOutput {
	return o
}

func (o BackupMapOutput) MapIndex(k pulumi.StringInput) BackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Backup {
		return vs[0].(map[string]*Backup)[vs[1].(string)]
	}).(BackupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupInput)(nil)).Elem(), &Backup{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupArrayInput)(nil)).Elem(), BackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupMapInput)(nil)).Elem(), BackupMap{})
	pulumi.RegisterOutputType(BackupOutput{})
	pulumi.RegisterOutputType(BackupArrayOutput{})
	pulumi.RegisterOutputType(BackupMapOutput{})
}
