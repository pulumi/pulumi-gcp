// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alloydb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Alloydb Instance Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/alloydb"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/servicenetworking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := organizations.LookupProject(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			defaultNetwork, err := compute.NewNetwork(ctx, "defaultNetwork", nil, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultCluster, err := alloydb.NewCluster(ctx, "defaultCluster", &alloydb.ClusterArgs{
//				ClusterId: pulumi.String("alloydb-cluster"),
//				Location:  pulumi.String("us-central1"),
//				Network: defaultNetwork.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("projects/%v/global/networks/%v", project.Number, name), nil
//				}).(pulumi.StringOutput),
//				InitialUser: &alloydb.ClusterInitialUserArgs{
//					Password: pulumi.String("alloydb-cluster"),
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			privateIpAlloc, err := compute.NewGlobalAddress(ctx, "privateIpAlloc", &compute.GlobalAddressArgs{
//				AddressType:  pulumi.String("INTERNAL"),
//				Purpose:      pulumi.String("VPC_PEERING"),
//				PrefixLength: pulumi.Int(16),
//				Network:      defaultNetwork.ID(),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			vpcConnection, err := servicenetworking.NewConnection(ctx, "vpcConnection", &servicenetworking.ConnectionArgs{
//				Network: defaultNetwork.ID(),
//				Service: pulumi.String("servicenetworking.googleapis.com"),
//				ReservedPeeringRanges: pulumi.StringArray{
//					privateIpAlloc.Name,
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = alloydb.NewInstance(ctx, "defaultInstance", &alloydb.InstanceArgs{
//				Cluster:      defaultCluster.Name,
//				InstanceId:   pulumi.String("alloydb-instance"),
//				InstanceType: pulumi.String("PRIMARY"),
//				MachineConfig: &alloydb.InstanceMachineConfigArgs{
//					CpuCount: pulumi.Int(2),
//				},
//			}, pulumi.Provider(google_beta), pulumi.DependsOn([]pulumi.Resource{
//				vpcConnection,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Instance can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:alloydb/instance:Instance default {{cluster}}/instances/{{instance_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:alloydb/instance:Instance default {{cluster}}/{{instance_id}}
//
// ```
type Instance struct {
	pulumi.CustomResourceState

	// Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Availability type of an Instance. Defaults to REGIONAL for both primary and read instances. Note that primary and read instances can have different availability types.
	// Possible values are `AVAILABILITY_TYPE_UNSPECIFIED`, `ZONAL`, and `REGIONAL`.
	AvailabilityType pulumi.StringOutput `pulumi:"availabilityType"`
	// Identifies the alloydb cluster. Must be in the format
	// 'projects/{project}/locations/{location}/clusters/{cluster_id}'
	Cluster pulumi.StringOutput `pulumi:"cluster"`
	// Time the Instance was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary.
	DatabaseFlags pulumi.StringMapOutput `pulumi:"databaseFlags"`
	// User-settable and human-readable display name for the Instance.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
	GceZone pulumi.StringPtrOutput `pulumi:"gceZone"`
	// The ID of the alloydb instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The type of the instance.
	// Possible values are `PRIMARY` and `READ_POOL`.
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// The IP address for the Instance. This is the connection endpoint for an end-user application.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// User-defined labels for the alloydb instance.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Configurations for the machines that host the underlying database engine.
	// Structure is documented below.
	MachineConfig InstanceMachineConfigOutput `pulumi:"machineConfig"`
	// The name of the instance resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Read pool specific config.
	// Structure is documented below.
	ReadPoolConfig InstanceReadPoolConfigPtrOutput `pulumi:"readPoolConfig"`
	// Set to true if the current state of Instance does not match the user's intended state, and the service is actively
	// updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover
	// or maintenance.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// The current state of the alloydb instance.
	State pulumi.StringOutput `pulumi:"state"`
	// The system-generated UID of the resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time the Instance was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	var resource Instance
	err := ctx.RegisterResource("gcp:alloydb/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("gcp:alloydb/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels.
	Annotations map[string]string `pulumi:"annotations"`
	// Availability type of an Instance. Defaults to REGIONAL for both primary and read instances. Note that primary and read instances can have different availability types.
	// Possible values are `AVAILABILITY_TYPE_UNSPECIFIED`, `ZONAL`, and `REGIONAL`.
	AvailabilityType *string `pulumi:"availabilityType"`
	// Identifies the alloydb cluster. Must be in the format
	// 'projects/{project}/locations/{location}/clusters/{cluster_id}'
	Cluster *string `pulumi:"cluster"`
	// Time the Instance was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary.
	DatabaseFlags map[string]string `pulumi:"databaseFlags"`
	// User-settable and human-readable display name for the Instance.
	DisplayName *string `pulumi:"displayName"`
	// The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
	GceZone *string `pulumi:"gceZone"`
	// The ID of the alloydb instance.
	InstanceId *string `pulumi:"instanceId"`
	// The type of the instance.
	// Possible values are `PRIMARY` and `READ_POOL`.
	InstanceType *string `pulumi:"instanceType"`
	// The IP address for the Instance. This is the connection endpoint for an end-user application.
	IpAddress *string `pulumi:"ipAddress"`
	// User-defined labels for the alloydb instance.
	Labels map[string]string `pulumi:"labels"`
	// Configurations for the machines that host the underlying database engine.
	// Structure is documented below.
	MachineConfig *InstanceMachineConfig `pulumi:"machineConfig"`
	// The name of the instance resource.
	Name *string `pulumi:"name"`
	// Read pool specific config.
	// Structure is documented below.
	ReadPoolConfig *InstanceReadPoolConfig `pulumi:"readPoolConfig"`
	// Set to true if the current state of Instance does not match the user's intended state, and the service is actively
	// updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover
	// or maintenance.
	Reconciling *bool `pulumi:"reconciling"`
	// The current state of the alloydb instance.
	State *string `pulumi:"state"`
	// The system-generated UID of the resource.
	Uid *string `pulumi:"uid"`
	// Time the Instance was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type InstanceState struct {
	// Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels.
	Annotations pulumi.StringMapInput
	// Availability type of an Instance. Defaults to REGIONAL for both primary and read instances. Note that primary and read instances can have different availability types.
	// Possible values are `AVAILABILITY_TYPE_UNSPECIFIED`, `ZONAL`, and `REGIONAL`.
	AvailabilityType pulumi.StringPtrInput
	// Identifies the alloydb cluster. Must be in the format
	// 'projects/{project}/locations/{location}/clusters/{cluster_id}'
	Cluster pulumi.StringPtrInput
	// Time the Instance was created in UTC.
	CreateTime pulumi.StringPtrInput
	// Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary.
	DatabaseFlags pulumi.StringMapInput
	// User-settable and human-readable display name for the Instance.
	DisplayName pulumi.StringPtrInput
	// The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
	GceZone pulumi.StringPtrInput
	// The ID of the alloydb instance.
	InstanceId pulumi.StringPtrInput
	// The type of the instance.
	// Possible values are `PRIMARY` and `READ_POOL`.
	InstanceType pulumi.StringPtrInput
	// The IP address for the Instance. This is the connection endpoint for an end-user application.
	IpAddress pulumi.StringPtrInput
	// User-defined labels for the alloydb instance.
	Labels pulumi.StringMapInput
	// Configurations for the machines that host the underlying database engine.
	// Structure is documented below.
	MachineConfig InstanceMachineConfigPtrInput
	// The name of the instance resource.
	Name pulumi.StringPtrInput
	// Read pool specific config.
	// Structure is documented below.
	ReadPoolConfig InstanceReadPoolConfigPtrInput
	// Set to true if the current state of Instance does not match the user's intended state, and the service is actively
	// updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover
	// or maintenance.
	Reconciling pulumi.BoolPtrInput
	// The current state of the alloydb instance.
	State pulumi.StringPtrInput
	// The system-generated UID of the resource.
	Uid pulumi.StringPtrInput
	// Time the Instance was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels.
	Annotations map[string]string `pulumi:"annotations"`
	// Availability type of an Instance. Defaults to REGIONAL for both primary and read instances. Note that primary and read instances can have different availability types.
	// Possible values are `AVAILABILITY_TYPE_UNSPECIFIED`, `ZONAL`, and `REGIONAL`.
	AvailabilityType *string `pulumi:"availabilityType"`
	// Identifies the alloydb cluster. Must be in the format
	// 'projects/{project}/locations/{location}/clusters/{cluster_id}'
	Cluster string `pulumi:"cluster"`
	// Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary.
	DatabaseFlags map[string]string `pulumi:"databaseFlags"`
	// User-settable and human-readable display name for the Instance.
	DisplayName *string `pulumi:"displayName"`
	// The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
	GceZone *string `pulumi:"gceZone"`
	// The ID of the alloydb instance.
	InstanceId string `pulumi:"instanceId"`
	// The type of the instance.
	// Possible values are `PRIMARY` and `READ_POOL`.
	InstanceType string `pulumi:"instanceType"`
	// User-defined labels for the alloydb instance.
	Labels map[string]string `pulumi:"labels"`
	// Configurations for the machines that host the underlying database engine.
	// Structure is documented below.
	MachineConfig *InstanceMachineConfig `pulumi:"machineConfig"`
	// Read pool specific config.
	// Structure is documented below.
	ReadPoolConfig *InstanceReadPoolConfig `pulumi:"readPoolConfig"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels.
	Annotations pulumi.StringMapInput
	// Availability type of an Instance. Defaults to REGIONAL for both primary and read instances. Note that primary and read instances can have different availability types.
	// Possible values are `AVAILABILITY_TYPE_UNSPECIFIED`, `ZONAL`, and `REGIONAL`.
	AvailabilityType pulumi.StringPtrInput
	// Identifies the alloydb cluster. Must be in the format
	// 'projects/{project}/locations/{location}/clusters/{cluster_id}'
	Cluster pulumi.StringInput
	// Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary.
	DatabaseFlags pulumi.StringMapInput
	// User-settable and human-readable display name for the Instance.
	DisplayName pulumi.StringPtrInput
	// The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
	GceZone pulumi.StringPtrInput
	// The ID of the alloydb instance.
	InstanceId pulumi.StringInput
	// The type of the instance.
	// Possible values are `PRIMARY` and `READ_POOL`.
	InstanceType pulumi.StringInput
	// User-defined labels for the alloydb instance.
	Labels pulumi.StringMapInput
	// Configurations for the machines that host the underlying database engine.
	// Structure is documented below.
	MachineConfig InstanceMachineConfigPtrInput
	// Read pool specific config.
	// Structure is documented below.
	ReadPoolConfig InstanceReadPoolConfigPtrInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels.
func (o InstanceOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Availability type of an Instance. Defaults to REGIONAL for both primary and read instances. Note that primary and read instances can have different availability types.
// Possible values are `AVAILABILITY_TYPE_UNSPECIFIED`, `ZONAL`, and `REGIONAL`.
func (o InstanceOutput) AvailabilityType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.AvailabilityType }).(pulumi.StringOutput)
}

// Identifies the alloydb cluster. Must be in the format
// 'projects/{project}/locations/{location}/clusters/{cluster_id}'
func (o InstanceOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Cluster }).(pulumi.StringOutput)
}

// Time the Instance was created in UTC.
func (o InstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary.
func (o InstanceOutput) DatabaseFlags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.DatabaseFlags }).(pulumi.StringMapOutput)
}

// User-settable and human-readable display name for the Instance.
func (o InstanceOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
func (o InstanceOutput) GceZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.GceZone }).(pulumi.StringPtrOutput)
}

// The ID of the alloydb instance.
func (o InstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The type of the instance.
// Possible values are `PRIMARY` and `READ_POOL`.
func (o InstanceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// The IP address for the Instance. This is the connection endpoint for an end-user application.
func (o InstanceOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// User-defined labels for the alloydb instance.
func (o InstanceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Configurations for the machines that host the underlying database engine.
// Structure is documented below.
func (o InstanceOutput) MachineConfig() InstanceMachineConfigOutput {
	return o.ApplyT(func(v *Instance) InstanceMachineConfigOutput { return v.MachineConfig }).(InstanceMachineConfigOutput)
}

// The name of the instance resource.
func (o InstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Read pool specific config.
// Structure is documented below.
func (o InstanceOutput) ReadPoolConfig() InstanceReadPoolConfigPtrOutput {
	return o.ApplyT(func(v *Instance) InstanceReadPoolConfigPtrOutput { return v.ReadPoolConfig }).(InstanceReadPoolConfigPtrOutput)
}

// Set to true if the current state of Instance does not match the user's intended state, and the service is actively
// updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover
// or maintenance.
func (o InstanceOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// The current state of the alloydb instance.
func (o InstanceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The system-generated UID of the resource.
func (o InstanceOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time the Instance was updated in UTC.
func (o InstanceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
