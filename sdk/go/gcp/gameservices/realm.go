// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gameservices

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Realm resource.
//
// To get more information about Realm, see:
//
// * [API documentation](https://cloud.google.com/game-servers/docs/reference/rest/v1beta/projects.locations.realms)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/game-servers/docs)
//
// ## Example Usage
// ### Game Service Realm Basic
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/gameservices"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := gameservices.NewRealm(ctx, "default", &gameservices.RealmArgs{
// 			Description: pulumi.String("one of the nine"),
// 			Location:    pulumi.String("global"),
// 			RealmId:     pulumi.String("tf-test-realm"),
// 			TimeZone:    pulumi.String("EST"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Realm can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:gameservices/realm:Realm default projects/{{project}}/locations/{{location}}/realms/{{realm_id}}
// ```
//
// ```sh
//  $ pulumi import gcp:gameservices/realm:Realm default {{project}}/{{location}}/{{realm_id}}
// ```
//
// ```sh
//  $ pulumi import gcp:gameservices/realm:Realm default {{location}}/{{realm_id}}
// ```
type Realm struct {
	pulumi.CustomResourceState

	// Human readable description of the realm.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ETag of the resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The labels associated with this realm. Each label is a key-value pair.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Location of the Realm.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The resource id of the realm, of the form: 'projects/{project_id}/locations/{location}/realms/{realm_id}'. For example,
	// 'projects/my-project/locations/{location}/realms/my-realm'.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// GCP region of the Realm.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
	// Required. Time zone where all realm-specific policies are evaluated. The value of
	// this field must be from the IANA time zone database:
	// https://www.iana.org/time-zones.
	TimeZone pulumi.StringOutput `pulumi:"timeZone"`
}

// NewRealm registers a new resource with the given unique name, arguments, and options.
func NewRealm(ctx *pulumi.Context,
	name string, args *RealmArgs, opts ...pulumi.ResourceOption) (*Realm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	if args.TimeZone == nil {
		return nil, errors.New("invalid value for required argument 'TimeZone'")
	}
	var resource Realm
	err := ctx.RegisterResource("gcp:gameservices/realm:Realm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRealm gets an existing Realm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRealm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RealmState, opts ...pulumi.ResourceOption) (*Realm, error) {
	var resource Realm
	err := ctx.ReadResource("gcp:gameservices/realm:Realm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Realm resources.
type realmState struct {
	// Human readable description of the realm.
	Description *string `pulumi:"description"`
	// ETag of the resource.
	Etag *string `pulumi:"etag"`
	// The labels associated with this realm. Each label is a key-value pair.
	Labels map[string]string `pulumi:"labels"`
	// Location of the Realm.
	Location *string `pulumi:"location"`
	// The resource id of the realm, of the form: 'projects/{project_id}/locations/{location}/realms/{realm_id}'. For example,
	// 'projects/my-project/locations/{location}/realms/my-realm'.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// GCP region of the Realm.
	RealmId *string `pulumi:"realmId"`
	// Required. Time zone where all realm-specific policies are evaluated. The value of
	// this field must be from the IANA time zone database:
	// https://www.iana.org/time-zones.
	TimeZone *string `pulumi:"timeZone"`
}

type RealmState struct {
	// Human readable description of the realm.
	Description pulumi.StringPtrInput
	// ETag of the resource.
	Etag pulumi.StringPtrInput
	// The labels associated with this realm. Each label is a key-value pair.
	Labels pulumi.StringMapInput
	// Location of the Realm.
	Location pulumi.StringPtrInput
	// The resource id of the realm, of the form: 'projects/{project_id}/locations/{location}/realms/{realm_id}'. For example,
	// 'projects/my-project/locations/{location}/realms/my-realm'.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// GCP region of the Realm.
	RealmId pulumi.StringPtrInput
	// Required. Time zone where all realm-specific policies are evaluated. The value of
	// this field must be from the IANA time zone database:
	// https://www.iana.org/time-zones.
	TimeZone pulumi.StringPtrInput
}

func (RealmState) ElementType() reflect.Type {
	return reflect.TypeOf((*realmState)(nil)).Elem()
}

type realmArgs struct {
	// Human readable description of the realm.
	Description *string `pulumi:"description"`
	// The labels associated with this realm. Each label is a key-value pair.
	Labels map[string]string `pulumi:"labels"`
	// Location of the Realm.
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// GCP region of the Realm.
	RealmId string `pulumi:"realmId"`
	// Required. Time zone where all realm-specific policies are evaluated. The value of
	// this field must be from the IANA time zone database:
	// https://www.iana.org/time-zones.
	TimeZone string `pulumi:"timeZone"`
}

// The set of arguments for constructing a Realm resource.
type RealmArgs struct {
	// Human readable description of the realm.
	Description pulumi.StringPtrInput
	// The labels associated with this realm. Each label is a key-value pair.
	Labels pulumi.StringMapInput
	// Location of the Realm.
	Location pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// GCP region of the Realm.
	RealmId pulumi.StringInput
	// Required. Time zone where all realm-specific policies are evaluated. The value of
	// this field must be from the IANA time zone database:
	// https://www.iana.org/time-zones.
	TimeZone pulumi.StringInput
}

func (RealmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*realmArgs)(nil)).Elem()
}

type RealmInput interface {
	pulumi.Input

	ToRealmOutput() RealmOutput
	ToRealmOutputWithContext(ctx context.Context) RealmOutput
}

func (*Realm) ElementType() reflect.Type {
	return reflect.TypeOf((**Realm)(nil)).Elem()
}

func (i *Realm) ToRealmOutput() RealmOutput {
	return i.ToRealmOutputWithContext(context.Background())
}

func (i *Realm) ToRealmOutputWithContext(ctx context.Context) RealmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmOutput)
}

// RealmArrayInput is an input type that accepts RealmArray and RealmArrayOutput values.
// You can construct a concrete instance of `RealmArrayInput` via:
//
//          RealmArray{ RealmArgs{...} }
type RealmArrayInput interface {
	pulumi.Input

	ToRealmArrayOutput() RealmArrayOutput
	ToRealmArrayOutputWithContext(context.Context) RealmArrayOutput
}

type RealmArray []RealmInput

func (RealmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Realm)(nil)).Elem()
}

func (i RealmArray) ToRealmArrayOutput() RealmArrayOutput {
	return i.ToRealmArrayOutputWithContext(context.Background())
}

func (i RealmArray) ToRealmArrayOutputWithContext(ctx context.Context) RealmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmArrayOutput)
}

// RealmMapInput is an input type that accepts RealmMap and RealmMapOutput values.
// You can construct a concrete instance of `RealmMapInput` via:
//
//          RealmMap{ "key": RealmArgs{...} }
type RealmMapInput interface {
	pulumi.Input

	ToRealmMapOutput() RealmMapOutput
	ToRealmMapOutputWithContext(context.Context) RealmMapOutput
}

type RealmMap map[string]RealmInput

func (RealmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Realm)(nil)).Elem()
}

func (i RealmMap) ToRealmMapOutput() RealmMapOutput {
	return i.ToRealmMapOutputWithContext(context.Background())
}

func (i RealmMap) ToRealmMapOutputWithContext(ctx context.Context) RealmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmMapOutput)
}

type RealmOutput struct{ *pulumi.OutputState }

func (RealmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Realm)(nil)).Elem()
}

func (o RealmOutput) ToRealmOutput() RealmOutput {
	return o
}

func (o RealmOutput) ToRealmOutputWithContext(ctx context.Context) RealmOutput {
	return o
}

// Human readable description of the realm.
func (o RealmOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// ETag of the resource.
func (o RealmOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The labels associated with this realm. Each label is a key-value pair.
func (o RealmOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Location of the Realm.
func (o RealmOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource id of the realm, of the form: 'projects/{project_id}/locations/{location}/realms/{realm_id}'. For example,
// 'projects/my-project/locations/{location}/realms/my-realm'.
func (o RealmOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RealmOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// GCP region of the Realm.
func (o RealmOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

// Required. Time zone where all realm-specific policies are evaluated. The value of
// this field must be from the IANA time zone database:
// https://www.iana.org/time-zones.
func (o RealmOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

type RealmArrayOutput struct{ *pulumi.OutputState }

func (RealmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Realm)(nil)).Elem()
}

func (o RealmArrayOutput) ToRealmArrayOutput() RealmArrayOutput {
	return o
}

func (o RealmArrayOutput) ToRealmArrayOutputWithContext(ctx context.Context) RealmArrayOutput {
	return o
}

func (o RealmArrayOutput) Index(i pulumi.IntInput) RealmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Realm {
		return vs[0].([]*Realm)[vs[1].(int)]
	}).(RealmOutput)
}

type RealmMapOutput struct{ *pulumi.OutputState }

func (RealmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Realm)(nil)).Elem()
}

func (o RealmMapOutput) ToRealmMapOutput() RealmMapOutput {
	return o
}

func (o RealmMapOutput) ToRealmMapOutputWithContext(ctx context.Context) RealmMapOutput {
	return o
}

func (o RealmMapOutput) MapIndex(k pulumi.StringInput) RealmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Realm {
		return vs[0].(map[string]*Realm)[vs[1].(string)]
	}).(RealmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RealmInput)(nil)).Elem(), &Realm{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmArrayInput)(nil)).Elem(), RealmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmMapInput)(nil)).Elem(), RealmMap{})
	pulumi.RegisterOutputType(RealmOutput{})
	pulumi.RegisterOutputType(RealmArrayOutput{})
	pulumi.RegisterOutputType(RealmMapOutput{})
}
