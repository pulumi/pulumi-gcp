// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gameservices

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This represents the rollout state. This is part of the game server
// deployment.
//
// To get more information about GameServerDeploymentRollout, see:
//
// * [API documentation](https://cloud.google.com/game-servers/docs/reference/rest/v1beta/GameServerDeploymentRollout)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/game-servers/docs)
//
// ## Example Usage
// ### Game Service Deployment Rollout Basic
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/gameservices"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		defaultGameServerDeployment, err := gameservices.NewGameServerDeployment(ctx, "defaultGameServerDeployment", &gameservices.GameServerDeploymentArgs{
// 			DeploymentId: pulumi.String("tf-test-deployment"),
// 			Description:  pulumi.String("a deployment description"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"replicas":   1,
// 			"scheduling": "Packed",
// 			"template": map[string]interface{}{
// 				"metadata": map[string]interface{}{
// 					"name": "tf-test-game-server-template",
// 				},
// 				"spec": map[string]interface{}{
// 					"ports": []map[string]interface{}{
// 						map[string]interface{}{
// 							"name":          "default",
// 							"portPolicy":    "Dynamic",
// 							"containerPort": 7654,
// 							"protocol":      "UDP",
// 						},
// 					},
// 					"template": map[string]interface{}{
// 						"spec": map[string]interface{}{
// 							"containers": []map[string]interface{}{
// 								map[string]interface{}{
// 									"name":  "simple-udp-server",
// 									"image": "gcr.io/agones-images/udp-server:0.14",
// 								},
// 							},
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		defaultGameServerConfig, err := gameservices.NewGameServerConfig(ctx, "defaultGameServerConfig", &gameservices.GameServerConfigArgs{
// 			ConfigId:     pulumi.String("tf-test-config"),
// 			DeploymentId: defaultGameServerDeployment.DeploymentId,
// 			Description:  pulumi.String("a config description"),
// 			FleetConfigs: gameservices.GameServerConfigFleetConfigArray{
// 				&gameservices.GameServerConfigFleetConfigArgs{
// 					Name:      pulumi.String("some-non-guid"),
// 					FleetSpec: pulumi.String(json0),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = gameservices.NewGameServerDeploymentRollout(ctx, "defaultGameServerDeploymentRollout", &gameservices.GameServerDeploymentRolloutArgs{
// 			DeploymentId:            defaultGameServerDeployment.DeploymentId,
// 			DefaultGameServerConfig: defaultGameServerConfig.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// GameServerDeploymentRollout can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout default projects/{{project}}/locations/global/gameServerDeployments/{{deployment_id}}/rollout
// ```
//
// ```sh
//  $ pulumi import gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout default {{project}}/{{deployment_id}}
// ```
//
// ```sh
//  $ pulumi import gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout default {{deployment_id}}
// ```
type GameServerDeploymentRollout struct {
	pulumi.CustomResourceState

	// This field points to the game server config that is
	// applied by default to all realms and clusters. For example,
	// `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
	DefaultGameServerConfig pulumi.StringOutput `pulumi:"defaultGameServerConfig"`
	// The deployment to rollout the new config to. Only 1 rollout must be associated with each deployment.
	DeploymentId pulumi.StringOutput `pulumi:"deploymentId"`
	// The gameServerConfigOverrides contains the per game server config
	// overrides. The overrides are processed in the order they are listed. As
	// soon as a match is found for a cluster, the rest of the list is not
	// processed.
	// Structure is documented below.
	GameServerConfigOverrides GameServerDeploymentRolloutGameServerConfigOverrideArrayOutput `pulumi:"gameServerConfigOverrides"`
	// The resource id of the game server deployment eg:
	// 'projects/my-project/locations/global/gameServerDeployments/my-deployment/rollout'.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewGameServerDeploymentRollout registers a new resource with the given unique name, arguments, and options.
func NewGameServerDeploymentRollout(ctx *pulumi.Context,
	name string, args *GameServerDeploymentRolloutArgs, opts ...pulumi.ResourceOption) (*GameServerDeploymentRollout, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultGameServerConfig == nil {
		return nil, errors.New("invalid value for required argument 'DefaultGameServerConfig'")
	}
	if args.DeploymentId == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentId'")
	}
	var resource GameServerDeploymentRollout
	err := ctx.RegisterResource("gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGameServerDeploymentRollout gets an existing GameServerDeploymentRollout resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGameServerDeploymentRollout(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GameServerDeploymentRolloutState, opts ...pulumi.ResourceOption) (*GameServerDeploymentRollout, error) {
	var resource GameServerDeploymentRollout
	err := ctx.ReadResource("gcp:gameservices/gameServerDeploymentRollout:GameServerDeploymentRollout", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GameServerDeploymentRollout resources.
type gameServerDeploymentRolloutState struct {
	// This field points to the game server config that is
	// applied by default to all realms and clusters. For example,
	// `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
	DefaultGameServerConfig *string `pulumi:"defaultGameServerConfig"`
	// The deployment to rollout the new config to. Only 1 rollout must be associated with each deployment.
	DeploymentId *string `pulumi:"deploymentId"`
	// The gameServerConfigOverrides contains the per game server config
	// overrides. The overrides are processed in the order they are listed. As
	// soon as a match is found for a cluster, the rest of the list is not
	// processed.
	// Structure is documented below.
	GameServerConfigOverrides []GameServerDeploymentRolloutGameServerConfigOverride `pulumi:"gameServerConfigOverrides"`
	// The resource id of the game server deployment eg:
	// 'projects/my-project/locations/global/gameServerDeployments/my-deployment/rollout'.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

type GameServerDeploymentRolloutState struct {
	// This field points to the game server config that is
	// applied by default to all realms and clusters. For example,
	// `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
	DefaultGameServerConfig pulumi.StringPtrInput
	// The deployment to rollout the new config to. Only 1 rollout must be associated with each deployment.
	DeploymentId pulumi.StringPtrInput
	// The gameServerConfigOverrides contains the per game server config
	// overrides. The overrides are processed in the order they are listed. As
	// soon as a match is found for a cluster, the rest of the list is not
	// processed.
	// Structure is documented below.
	GameServerConfigOverrides GameServerDeploymentRolloutGameServerConfigOverrideArrayInput
	// The resource id of the game server deployment eg:
	// 'projects/my-project/locations/global/gameServerDeployments/my-deployment/rollout'.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (GameServerDeploymentRolloutState) ElementType() reflect.Type {
	return reflect.TypeOf((*gameServerDeploymentRolloutState)(nil)).Elem()
}

type gameServerDeploymentRolloutArgs struct {
	// This field points to the game server config that is
	// applied by default to all realms and clusters. For example,
	// `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
	DefaultGameServerConfig string `pulumi:"defaultGameServerConfig"`
	// The deployment to rollout the new config to. Only 1 rollout must be associated with each deployment.
	DeploymentId string `pulumi:"deploymentId"`
	// The gameServerConfigOverrides contains the per game server config
	// overrides. The overrides are processed in the order they are listed. As
	// soon as a match is found for a cluster, the rest of the list is not
	// processed.
	// Structure is documented below.
	GameServerConfigOverrides []GameServerDeploymentRolloutGameServerConfigOverride `pulumi:"gameServerConfigOverrides"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a GameServerDeploymentRollout resource.
type GameServerDeploymentRolloutArgs struct {
	// This field points to the game server config that is
	// applied by default to all realms and clusters. For example,
	// `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
	DefaultGameServerConfig pulumi.StringInput
	// The deployment to rollout the new config to. Only 1 rollout must be associated with each deployment.
	DeploymentId pulumi.StringInput
	// The gameServerConfigOverrides contains the per game server config
	// overrides. The overrides are processed in the order they are listed. As
	// soon as a match is found for a cluster, the rest of the list is not
	// processed.
	// Structure is documented below.
	GameServerConfigOverrides GameServerDeploymentRolloutGameServerConfigOverrideArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (GameServerDeploymentRolloutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gameServerDeploymentRolloutArgs)(nil)).Elem()
}

type GameServerDeploymentRolloutInput interface {
	pulumi.Input

	ToGameServerDeploymentRolloutOutput() GameServerDeploymentRolloutOutput
	ToGameServerDeploymentRolloutOutputWithContext(ctx context.Context) GameServerDeploymentRolloutOutput
}

func (*GameServerDeploymentRollout) ElementType() reflect.Type {
	return reflect.TypeOf((*GameServerDeploymentRollout)(nil))
}

func (i *GameServerDeploymentRollout) ToGameServerDeploymentRolloutOutput() GameServerDeploymentRolloutOutput {
	return i.ToGameServerDeploymentRolloutOutputWithContext(context.Background())
}

func (i *GameServerDeploymentRollout) ToGameServerDeploymentRolloutOutputWithContext(ctx context.Context) GameServerDeploymentRolloutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GameServerDeploymentRolloutOutput)
}

func (i *GameServerDeploymentRollout) ToGameServerDeploymentRolloutPtrOutput() GameServerDeploymentRolloutPtrOutput {
	return i.ToGameServerDeploymentRolloutPtrOutputWithContext(context.Background())
}

func (i *GameServerDeploymentRollout) ToGameServerDeploymentRolloutPtrOutputWithContext(ctx context.Context) GameServerDeploymentRolloutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GameServerDeploymentRolloutPtrOutput)
}

type GameServerDeploymentRolloutPtrInput interface {
	pulumi.Input

	ToGameServerDeploymentRolloutPtrOutput() GameServerDeploymentRolloutPtrOutput
	ToGameServerDeploymentRolloutPtrOutputWithContext(ctx context.Context) GameServerDeploymentRolloutPtrOutput
}

type gameServerDeploymentRolloutPtrType GameServerDeploymentRolloutArgs

func (*gameServerDeploymentRolloutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GameServerDeploymentRollout)(nil))
}

func (i *gameServerDeploymentRolloutPtrType) ToGameServerDeploymentRolloutPtrOutput() GameServerDeploymentRolloutPtrOutput {
	return i.ToGameServerDeploymentRolloutPtrOutputWithContext(context.Background())
}

func (i *gameServerDeploymentRolloutPtrType) ToGameServerDeploymentRolloutPtrOutputWithContext(ctx context.Context) GameServerDeploymentRolloutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GameServerDeploymentRolloutPtrOutput)
}

// GameServerDeploymentRolloutArrayInput is an input type that accepts GameServerDeploymentRolloutArray and GameServerDeploymentRolloutArrayOutput values.
// You can construct a concrete instance of `GameServerDeploymentRolloutArrayInput` via:
//
//          GameServerDeploymentRolloutArray{ GameServerDeploymentRolloutArgs{...} }
type GameServerDeploymentRolloutArrayInput interface {
	pulumi.Input

	ToGameServerDeploymentRolloutArrayOutput() GameServerDeploymentRolloutArrayOutput
	ToGameServerDeploymentRolloutArrayOutputWithContext(context.Context) GameServerDeploymentRolloutArrayOutput
}

type GameServerDeploymentRolloutArray []GameServerDeploymentRolloutInput

func (GameServerDeploymentRolloutArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*GameServerDeploymentRollout)(nil))
}

func (i GameServerDeploymentRolloutArray) ToGameServerDeploymentRolloutArrayOutput() GameServerDeploymentRolloutArrayOutput {
	return i.ToGameServerDeploymentRolloutArrayOutputWithContext(context.Background())
}

func (i GameServerDeploymentRolloutArray) ToGameServerDeploymentRolloutArrayOutputWithContext(ctx context.Context) GameServerDeploymentRolloutArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GameServerDeploymentRolloutArrayOutput)
}

// GameServerDeploymentRolloutMapInput is an input type that accepts GameServerDeploymentRolloutMap and GameServerDeploymentRolloutMapOutput values.
// You can construct a concrete instance of `GameServerDeploymentRolloutMapInput` via:
//
//          GameServerDeploymentRolloutMap{ "key": GameServerDeploymentRolloutArgs{...} }
type GameServerDeploymentRolloutMapInput interface {
	pulumi.Input

	ToGameServerDeploymentRolloutMapOutput() GameServerDeploymentRolloutMapOutput
	ToGameServerDeploymentRolloutMapOutputWithContext(context.Context) GameServerDeploymentRolloutMapOutput
}

type GameServerDeploymentRolloutMap map[string]GameServerDeploymentRolloutInput

func (GameServerDeploymentRolloutMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*GameServerDeploymentRollout)(nil))
}

func (i GameServerDeploymentRolloutMap) ToGameServerDeploymentRolloutMapOutput() GameServerDeploymentRolloutMapOutput {
	return i.ToGameServerDeploymentRolloutMapOutputWithContext(context.Background())
}

func (i GameServerDeploymentRolloutMap) ToGameServerDeploymentRolloutMapOutputWithContext(ctx context.Context) GameServerDeploymentRolloutMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GameServerDeploymentRolloutMapOutput)
}

type GameServerDeploymentRolloutOutput struct {
	*pulumi.OutputState
}

func (GameServerDeploymentRolloutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GameServerDeploymentRollout)(nil))
}

func (o GameServerDeploymentRolloutOutput) ToGameServerDeploymentRolloutOutput() GameServerDeploymentRolloutOutput {
	return o
}

func (o GameServerDeploymentRolloutOutput) ToGameServerDeploymentRolloutOutputWithContext(ctx context.Context) GameServerDeploymentRolloutOutput {
	return o
}

func (o GameServerDeploymentRolloutOutput) ToGameServerDeploymentRolloutPtrOutput() GameServerDeploymentRolloutPtrOutput {
	return o.ToGameServerDeploymentRolloutPtrOutputWithContext(context.Background())
}

func (o GameServerDeploymentRolloutOutput) ToGameServerDeploymentRolloutPtrOutputWithContext(ctx context.Context) GameServerDeploymentRolloutPtrOutput {
	return o.ApplyT(func(v GameServerDeploymentRollout) *GameServerDeploymentRollout {
		return &v
	}).(GameServerDeploymentRolloutPtrOutput)
}

type GameServerDeploymentRolloutPtrOutput struct {
	*pulumi.OutputState
}

func (GameServerDeploymentRolloutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GameServerDeploymentRollout)(nil))
}

func (o GameServerDeploymentRolloutPtrOutput) ToGameServerDeploymentRolloutPtrOutput() GameServerDeploymentRolloutPtrOutput {
	return o
}

func (o GameServerDeploymentRolloutPtrOutput) ToGameServerDeploymentRolloutPtrOutputWithContext(ctx context.Context) GameServerDeploymentRolloutPtrOutput {
	return o
}

type GameServerDeploymentRolloutArrayOutput struct{ *pulumi.OutputState }

func (GameServerDeploymentRolloutArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GameServerDeploymentRollout)(nil))
}

func (o GameServerDeploymentRolloutArrayOutput) ToGameServerDeploymentRolloutArrayOutput() GameServerDeploymentRolloutArrayOutput {
	return o
}

func (o GameServerDeploymentRolloutArrayOutput) ToGameServerDeploymentRolloutArrayOutputWithContext(ctx context.Context) GameServerDeploymentRolloutArrayOutput {
	return o
}

func (o GameServerDeploymentRolloutArrayOutput) Index(i pulumi.IntInput) GameServerDeploymentRolloutOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GameServerDeploymentRollout {
		return vs[0].([]GameServerDeploymentRollout)[vs[1].(int)]
	}).(GameServerDeploymentRolloutOutput)
}

type GameServerDeploymentRolloutMapOutput struct{ *pulumi.OutputState }

func (GameServerDeploymentRolloutMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GameServerDeploymentRollout)(nil))
}

func (o GameServerDeploymentRolloutMapOutput) ToGameServerDeploymentRolloutMapOutput() GameServerDeploymentRolloutMapOutput {
	return o
}

func (o GameServerDeploymentRolloutMapOutput) ToGameServerDeploymentRolloutMapOutputWithContext(ctx context.Context) GameServerDeploymentRolloutMapOutput {
	return o
}

func (o GameServerDeploymentRolloutMapOutput) MapIndex(k pulumi.StringInput) GameServerDeploymentRolloutOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GameServerDeploymentRollout {
		return vs[0].(map[string]GameServerDeploymentRollout)[vs[1].(string)]
	}).(GameServerDeploymentRolloutOutput)
}

func init() {
	pulumi.RegisterOutputType(GameServerDeploymentRolloutOutput{})
	pulumi.RegisterOutputType(GameServerDeploymentRolloutPtrOutput{})
	pulumi.RegisterOutputType(GameServerDeploymentRolloutArrayOutput{})
	pulumi.RegisterOutputType(GameServerDeploymentRolloutMapOutput{})
}
