// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package activedirectory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Active Directory Domain Trust Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/activedirectory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := activedirectory.NewDomainTrust(ctx, "ad-domain-trust", &activedirectory.DomainTrustArgs{
//				Domain: pulumi.String("test-managed-ad.com"),
//				TargetDnsIpAddresses: pulumi.StringArray{
//					pulumi.String("10.1.0.100"),
//				},
//				TargetDomainName:     pulumi.String("example-gcp.com"),
//				TrustDirection:       pulumi.String("OUTBOUND"),
//				TrustHandshakeSecret: pulumi.String("Testing1!"),
//				TrustType:            pulumi.String("FOREST"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # DomainTrust can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:activedirectory/domainTrust:DomainTrust default projects/{{project}}/locations/global/domains/{{domain}}/{{target_domain_name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:activedirectory/domainTrust:DomainTrust default {{project}}/{{domain}}/{{target_domain_name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:activedirectory/domainTrust:DomainTrust default {{domain}}/{{target_domain_name}}
//
// ```
type DomainTrust struct {
	pulumi.CustomResourceState

	// The fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions,
	// https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
	SelectiveAuthentication pulumi.BoolPtrOutput `pulumi:"selectiveAuthentication"`
	// The target DNS server IP addresses which can resolve the remote domain involved in the trust.
	TargetDnsIpAddresses pulumi.StringArrayOutput `pulumi:"targetDnsIpAddresses"`
	// The fully qualified target domain name which will be in trust with the current domain.
	TargetDomainName pulumi.StringOutput `pulumi:"targetDomainName"`
	// The trust direction, which decides if the current domain is trusted, trusting, or both.
	// Possible values are `INBOUND`, `OUTBOUND`, and `BIDIRECTIONAL`.
	TrustDirection pulumi.StringOutput `pulumi:"trustDirection"`
	// The trust secret used for the handshake with the target domain. This will not be stored.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	TrustHandshakeSecret pulumi.StringOutput `pulumi:"trustHandshakeSecret"`
	// The type of trust represented by the trust resource.
	// Possible values are `FOREST` and `EXTERNAL`.
	TrustType pulumi.StringOutput `pulumi:"trustType"`
}

// NewDomainTrust registers a new resource with the given unique name, arguments, and options.
func NewDomainTrust(ctx *pulumi.Context,
	name string, args *DomainTrustArgs, opts ...pulumi.ResourceOption) (*DomainTrust, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.TargetDnsIpAddresses == nil {
		return nil, errors.New("invalid value for required argument 'TargetDnsIpAddresses'")
	}
	if args.TargetDomainName == nil {
		return nil, errors.New("invalid value for required argument 'TargetDomainName'")
	}
	if args.TrustDirection == nil {
		return nil, errors.New("invalid value for required argument 'TrustDirection'")
	}
	if args.TrustHandshakeSecret == nil {
		return nil, errors.New("invalid value for required argument 'TrustHandshakeSecret'")
	}
	if args.TrustType == nil {
		return nil, errors.New("invalid value for required argument 'TrustType'")
	}
	if args.TrustHandshakeSecret != nil {
		args.TrustHandshakeSecret = pulumi.ToSecret(args.TrustHandshakeSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"trustHandshakeSecret",
	})
	opts = append(opts, secrets)
	var resource DomainTrust
	err := ctx.RegisterResource("gcp:activedirectory/domainTrust:DomainTrust", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainTrust gets an existing DomainTrust resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainTrust(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainTrustState, opts ...pulumi.ResourceOption) (*DomainTrust, error) {
	var resource DomainTrust
	err := ctx.ReadResource("gcp:activedirectory/domainTrust:DomainTrust", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainTrust resources.
type domainTrustState struct {
	// The fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions,
	// https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.
	Domain *string `pulumi:"domain"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
	SelectiveAuthentication *bool `pulumi:"selectiveAuthentication"`
	// The target DNS server IP addresses which can resolve the remote domain involved in the trust.
	TargetDnsIpAddresses []string `pulumi:"targetDnsIpAddresses"`
	// The fully qualified target domain name which will be in trust with the current domain.
	TargetDomainName *string `pulumi:"targetDomainName"`
	// The trust direction, which decides if the current domain is trusted, trusting, or both.
	// Possible values are `INBOUND`, `OUTBOUND`, and `BIDIRECTIONAL`.
	TrustDirection *string `pulumi:"trustDirection"`
	// The trust secret used for the handshake with the target domain. This will not be stored.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	TrustHandshakeSecret *string `pulumi:"trustHandshakeSecret"`
	// The type of trust represented by the trust resource.
	// Possible values are `FOREST` and `EXTERNAL`.
	TrustType *string `pulumi:"trustType"`
}

type DomainTrustState struct {
	// The fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions,
	// https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.
	Domain pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
	SelectiveAuthentication pulumi.BoolPtrInput
	// The target DNS server IP addresses which can resolve the remote domain involved in the trust.
	TargetDnsIpAddresses pulumi.StringArrayInput
	// The fully qualified target domain name which will be in trust with the current domain.
	TargetDomainName pulumi.StringPtrInput
	// The trust direction, which decides if the current domain is trusted, trusting, or both.
	// Possible values are `INBOUND`, `OUTBOUND`, and `BIDIRECTIONAL`.
	TrustDirection pulumi.StringPtrInput
	// The trust secret used for the handshake with the target domain. This will not be stored.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	TrustHandshakeSecret pulumi.StringPtrInput
	// The type of trust represented by the trust resource.
	// Possible values are `FOREST` and `EXTERNAL`.
	TrustType pulumi.StringPtrInput
}

func (DomainTrustState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainTrustState)(nil)).Elem()
}

type domainTrustArgs struct {
	// The fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions,
	// https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.
	Domain string `pulumi:"domain"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
	SelectiveAuthentication *bool `pulumi:"selectiveAuthentication"`
	// The target DNS server IP addresses which can resolve the remote domain involved in the trust.
	TargetDnsIpAddresses []string `pulumi:"targetDnsIpAddresses"`
	// The fully qualified target domain name which will be in trust with the current domain.
	TargetDomainName string `pulumi:"targetDomainName"`
	// The trust direction, which decides if the current domain is trusted, trusting, or both.
	// Possible values are `INBOUND`, `OUTBOUND`, and `BIDIRECTIONAL`.
	TrustDirection string `pulumi:"trustDirection"`
	// The trust secret used for the handshake with the target domain. This will not be stored.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	TrustHandshakeSecret string `pulumi:"trustHandshakeSecret"`
	// The type of trust represented by the trust resource.
	// Possible values are `FOREST` and `EXTERNAL`.
	TrustType string `pulumi:"trustType"`
}

// The set of arguments for constructing a DomainTrust resource.
type DomainTrustArgs struct {
	// The fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions,
	// https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.
	Domain pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
	SelectiveAuthentication pulumi.BoolPtrInput
	// The target DNS server IP addresses which can resolve the remote domain involved in the trust.
	TargetDnsIpAddresses pulumi.StringArrayInput
	// The fully qualified target domain name which will be in trust with the current domain.
	TargetDomainName pulumi.StringInput
	// The trust direction, which decides if the current domain is trusted, trusting, or both.
	// Possible values are `INBOUND`, `OUTBOUND`, and `BIDIRECTIONAL`.
	TrustDirection pulumi.StringInput
	// The trust secret used for the handshake with the target domain. This will not be stored.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	TrustHandshakeSecret pulumi.StringInput
	// The type of trust represented by the trust resource.
	// Possible values are `FOREST` and `EXTERNAL`.
	TrustType pulumi.StringInput
}

func (DomainTrustArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainTrustArgs)(nil)).Elem()
}

type DomainTrustInput interface {
	pulumi.Input

	ToDomainTrustOutput() DomainTrustOutput
	ToDomainTrustOutputWithContext(ctx context.Context) DomainTrustOutput
}

func (*DomainTrust) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainTrust)(nil)).Elem()
}

func (i *DomainTrust) ToDomainTrustOutput() DomainTrustOutput {
	return i.ToDomainTrustOutputWithContext(context.Background())
}

func (i *DomainTrust) ToDomainTrustOutputWithContext(ctx context.Context) DomainTrustOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTrustOutput)
}

// DomainTrustArrayInput is an input type that accepts DomainTrustArray and DomainTrustArrayOutput values.
// You can construct a concrete instance of `DomainTrustArrayInput` via:
//
//	DomainTrustArray{ DomainTrustArgs{...} }
type DomainTrustArrayInput interface {
	pulumi.Input

	ToDomainTrustArrayOutput() DomainTrustArrayOutput
	ToDomainTrustArrayOutputWithContext(context.Context) DomainTrustArrayOutput
}

type DomainTrustArray []DomainTrustInput

func (DomainTrustArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainTrust)(nil)).Elem()
}

func (i DomainTrustArray) ToDomainTrustArrayOutput() DomainTrustArrayOutput {
	return i.ToDomainTrustArrayOutputWithContext(context.Background())
}

func (i DomainTrustArray) ToDomainTrustArrayOutputWithContext(ctx context.Context) DomainTrustArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTrustArrayOutput)
}

// DomainTrustMapInput is an input type that accepts DomainTrustMap and DomainTrustMapOutput values.
// You can construct a concrete instance of `DomainTrustMapInput` via:
//
//	DomainTrustMap{ "key": DomainTrustArgs{...} }
type DomainTrustMapInput interface {
	pulumi.Input

	ToDomainTrustMapOutput() DomainTrustMapOutput
	ToDomainTrustMapOutputWithContext(context.Context) DomainTrustMapOutput
}

type DomainTrustMap map[string]DomainTrustInput

func (DomainTrustMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainTrust)(nil)).Elem()
}

func (i DomainTrustMap) ToDomainTrustMapOutput() DomainTrustMapOutput {
	return i.ToDomainTrustMapOutputWithContext(context.Background())
}

func (i DomainTrustMap) ToDomainTrustMapOutputWithContext(ctx context.Context) DomainTrustMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTrustMapOutput)
}

type DomainTrustOutput struct{ *pulumi.OutputState }

func (DomainTrustOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainTrust)(nil)).Elem()
}

func (o DomainTrustOutput) ToDomainTrustOutput() DomainTrustOutput {
	return o
}

func (o DomainTrustOutput) ToDomainTrustOutputWithContext(ctx context.Context) DomainTrustOutput {
	return o
}

// The fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions,
// https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.
func (o DomainTrustOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainTrust) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o DomainTrustOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainTrust) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
func (o DomainTrustOutput) SelectiveAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainTrust) pulumi.BoolPtrOutput { return v.SelectiveAuthentication }).(pulumi.BoolPtrOutput)
}

// The target DNS server IP addresses which can resolve the remote domain involved in the trust.
func (o DomainTrustOutput) TargetDnsIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainTrust) pulumi.StringArrayOutput { return v.TargetDnsIpAddresses }).(pulumi.StringArrayOutput)
}

// The fully qualified target domain name which will be in trust with the current domain.
func (o DomainTrustOutput) TargetDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainTrust) pulumi.StringOutput { return v.TargetDomainName }).(pulumi.StringOutput)
}

// The trust direction, which decides if the current domain is trusted, trusting, or both.
// Possible values are `INBOUND`, `OUTBOUND`, and `BIDIRECTIONAL`.
func (o DomainTrustOutput) TrustDirection() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainTrust) pulumi.StringOutput { return v.TrustDirection }).(pulumi.StringOutput)
}

// The trust secret used for the handshake with the target domain. This will not be stored.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o DomainTrustOutput) TrustHandshakeSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainTrust) pulumi.StringOutput { return v.TrustHandshakeSecret }).(pulumi.StringOutput)
}

// The type of trust represented by the trust resource.
// Possible values are `FOREST` and `EXTERNAL`.
func (o DomainTrustOutput) TrustType() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainTrust) pulumi.StringOutput { return v.TrustType }).(pulumi.StringOutput)
}

type DomainTrustArrayOutput struct{ *pulumi.OutputState }

func (DomainTrustArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainTrust)(nil)).Elem()
}

func (o DomainTrustArrayOutput) ToDomainTrustArrayOutput() DomainTrustArrayOutput {
	return o
}

func (o DomainTrustArrayOutput) ToDomainTrustArrayOutputWithContext(ctx context.Context) DomainTrustArrayOutput {
	return o
}

func (o DomainTrustArrayOutput) Index(i pulumi.IntInput) DomainTrustOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainTrust {
		return vs[0].([]*DomainTrust)[vs[1].(int)]
	}).(DomainTrustOutput)
}

type DomainTrustMapOutput struct{ *pulumi.OutputState }

func (DomainTrustMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainTrust)(nil)).Elem()
}

func (o DomainTrustMapOutput) ToDomainTrustMapOutput() DomainTrustMapOutput {
	return o
}

func (o DomainTrustMapOutput) ToDomainTrustMapOutputWithContext(ctx context.Context) DomainTrustMapOutput {
	return o
}

func (o DomainTrustMapOutput) MapIndex(k pulumi.StringInput) DomainTrustOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainTrust {
		return vs[0].(map[string]*DomainTrust)[vs[1].(string)]
	}).(DomainTrustOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainTrustInput)(nil)).Elem(), &DomainTrust{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainTrustArrayInput)(nil)).Elem(), DomainTrustArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainTrustMapInput)(nil)).Elem(), DomainTrustMap{})
	pulumi.RegisterOutputType(DomainTrustOutput{})
	pulumi.RegisterOutputType(DomainTrustArrayOutput{})
	pulumi.RegisterOutputType(DomainTrustMapOutput{})
}
