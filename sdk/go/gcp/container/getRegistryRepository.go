// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package container

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source fetches the project name, and provides the appropriate URLs to use for container registry for this project.
//
// The URLs are computed entirely offline - as long as the project exists, they will be valid, but this data source does not contact Google Container Registry (GCR) at any point.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v5/go/gcp/container"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		foo, err := container.GetRegistryRepository(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("gcrLocation", foo.RepositoryUrl)
// 		return nil
// 	})
// }
// ```
func GetRegistryRepository(ctx *pulumi.Context, args *GetRegistryRepositoryArgs, opts ...pulumi.InvokeOption) (*GetRegistryRepositoryResult, error) {
	var rv GetRegistryRepositoryResult
	err := ctx.Invoke("gcp:container/getRegistryRepository:getRegistryRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegistryRepository.
type GetRegistryRepositoryArgs struct {
	Project *string `pulumi:"project"`
	Region  *string `pulumi:"region"`
}

// A collection of values returned by getRegistryRepository.
type GetRegistryRepositoryResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id            string  `pulumi:"id"`
	Project       string  `pulumi:"project"`
	Region        *string `pulumi:"region"`
	RepositoryUrl string  `pulumi:"repositoryUrl"`
}

func GetRegistryRepositoryOutput(ctx *pulumi.Context, args GetRegistryRepositoryOutputArgs, opts ...pulumi.InvokeOption) GetRegistryRepositoryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRegistryRepositoryResult, error) {
			args := v.(GetRegistryRepositoryArgs)
			r, err := GetRegistryRepository(ctx, &args, opts...)
			return *r, err
		}).(GetRegistryRepositoryResultOutput)
}

// A collection of arguments for invoking getRegistryRepository.
type GetRegistryRepositoryOutputArgs struct {
	Project pulumi.StringPtrInput `pulumi:"project"`
	Region  pulumi.StringPtrInput `pulumi:"region"`
}

func (GetRegistryRepositoryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryRepositoryArgs)(nil)).Elem()
}

// A collection of values returned by getRegistryRepository.
type GetRegistryRepositoryResultOutput struct{ *pulumi.OutputState }

func (GetRegistryRepositoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryRepositoryResult)(nil)).Elem()
}

func (o GetRegistryRepositoryResultOutput) ToGetRegistryRepositoryResultOutput() GetRegistryRepositoryResultOutput {
	return o
}

func (o GetRegistryRepositoryResultOutput) ToGetRegistryRepositoryResultOutputWithContext(ctx context.Context) GetRegistryRepositoryResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetRegistryRepositoryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistryRepositoryResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRegistryRepositoryResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistryRepositoryResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o GetRegistryRepositoryResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRegistryRepositoryResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o GetRegistryRepositoryResultOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistryRepositoryResult) string { return v.RepositoryUrl }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRegistryRepositoryResultOutput{})
}
