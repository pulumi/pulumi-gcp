// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package container

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides access to available Kubernetes versions in a location for a given project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/container"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := container.GetAzureVersions(ctx, &container.GetAzureVersionsArgs{
//				Location: pulumi.StringRef("us-west1"),
//				Project:  pulumi.StringRef("my-project"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("firstAvailableVersion", versions.ValidVersions[0])
//			return nil
//		})
//	}
//
// ```
func GetAzureVersions(ctx *pulumi.Context, args *GetAzureVersionsArgs, opts ...pulumi.InvokeOption) (*GetAzureVersionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAzureVersionsResult
	err := ctx.Invoke("gcp:container/getAzureVersions:getAzureVersions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAzureVersions.
type GetAzureVersionsArgs struct {
	// The location to list versions for.
	Location *string `pulumi:"location"`
	// ID of the project to list available cluster versions for. Should match the project the cluster will be deployed to.
	// Defaults to the project that the provider is authenticated with.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getAzureVersions.
type GetAzureVersionsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id       string  `pulumi:"id"`
	Location *string `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// A list of Azure regions that are available for use with this project and GCP location.
	SupportedRegions []string `pulumi:"supportedRegions"`
	// A list of versions available for use with this project and location.
	ValidVersions []string `pulumi:"validVersions"`
}

func GetAzureVersionsOutput(ctx *pulumi.Context, args GetAzureVersionsOutputArgs, opts ...pulumi.InvokeOption) GetAzureVersionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAzureVersionsResult, error) {
			args := v.(GetAzureVersionsArgs)
			r, err := GetAzureVersions(ctx, &args, opts...)
			var s GetAzureVersionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAzureVersionsResultOutput)
}

// A collection of arguments for invoking getAzureVersions.
type GetAzureVersionsOutputArgs struct {
	// The location to list versions for.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// ID of the project to list available cluster versions for. Should match the project the cluster will be deployed to.
	// Defaults to the project that the provider is authenticated with.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (GetAzureVersionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAzureVersionsArgs)(nil)).Elem()
}

// A collection of values returned by getAzureVersions.
type GetAzureVersionsResultOutput struct{ *pulumi.OutputState }

func (GetAzureVersionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAzureVersionsResult)(nil)).Elem()
}

func (o GetAzureVersionsResultOutput) ToGetAzureVersionsResultOutput() GetAzureVersionsResultOutput {
	return o
}

func (o GetAzureVersionsResultOutput) ToGetAzureVersionsResultOutputWithContext(ctx context.Context) GetAzureVersionsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetAzureVersionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAzureVersionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAzureVersionsResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAzureVersionsResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o GetAzureVersionsResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAzureVersionsResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// A list of Azure regions that are available for use with this project and GCP location.
func (o GetAzureVersionsResultOutput) SupportedRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAzureVersionsResult) []string { return v.SupportedRegions }).(pulumi.StringArrayOutput)
}

// A list of versions available for use with this project and location.
func (o GetAzureVersionsResultOutput) ValidVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAzureVersionsResult) []string { return v.ValidVersions }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAzureVersionsResultOutput{})
}
