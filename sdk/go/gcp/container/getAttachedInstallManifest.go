// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package container

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides access to available platform versions in a location for a given project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/container"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			manifest, err := container.GetAttachedInstallManifest(ctx, &container.GetAttachedInstallManifestArgs{
//				Location:        "us-west1",
//				Project:         "my-project",
//				ClusterId:       "test-cluster-1",
//				PlatformVersion: "1.25.0-gke.1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("installManifest", manifest)
//			return nil
//		})
//	}
//
// ```
func GetAttachedInstallManifest(ctx *pulumi.Context, args *GetAttachedInstallManifestArgs, opts ...pulumi.InvokeOption) (*GetAttachedInstallManifestResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAttachedInstallManifestResult
	err := ctx.Invoke("gcp:container/getAttachedInstallManifest:getAttachedInstallManifest", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAttachedInstallManifest.
type GetAttachedInstallManifestArgs struct {
	// The name that will be used when creating the attached cluster resource.
	ClusterId string `pulumi:"clusterId"`
	// The location to list versions for.
	Location string `pulumi:"location"`
	// The platform version for the cluster. A list of valid values can be retrieved using the `container.getAttachedVersions` data source.
	PlatformVersion string `pulumi:"platformVersion"`
	// ID of the project to list available platform versions for. Should match the project the cluster will be deployed to.
	// Defaults to the project that the provider is authenticated with.
	Project string `pulumi:"project"`
}

// A collection of values returned by getAttachedInstallManifest.
type GetAttachedInstallManifestResult struct {
	ClusterId string `pulumi:"clusterId"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Location string `pulumi:"location"`
	// A string with the YAML manifest that needs to be applied to the cluster.
	Manifest        string `pulumi:"manifest"`
	PlatformVersion string `pulumi:"platformVersion"`
	Project         string `pulumi:"project"`
}

func GetAttachedInstallManifestOutput(ctx *pulumi.Context, args GetAttachedInstallManifestOutputArgs, opts ...pulumi.InvokeOption) GetAttachedInstallManifestResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAttachedInstallManifestResult, error) {
			args := v.(GetAttachedInstallManifestArgs)
			r, err := GetAttachedInstallManifest(ctx, &args, opts...)
			var s GetAttachedInstallManifestResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAttachedInstallManifestResultOutput)
}

// A collection of arguments for invoking getAttachedInstallManifest.
type GetAttachedInstallManifestOutputArgs struct {
	// The name that will be used when creating the attached cluster resource.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The location to list versions for.
	Location pulumi.StringInput `pulumi:"location"`
	// The platform version for the cluster. A list of valid values can be retrieved using the `container.getAttachedVersions` data source.
	PlatformVersion pulumi.StringInput `pulumi:"platformVersion"`
	// ID of the project to list available platform versions for. Should match the project the cluster will be deployed to.
	// Defaults to the project that the provider is authenticated with.
	Project pulumi.StringInput `pulumi:"project"`
}

func (GetAttachedInstallManifestOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAttachedInstallManifestArgs)(nil)).Elem()
}

// A collection of values returned by getAttachedInstallManifest.
type GetAttachedInstallManifestResultOutput struct{ *pulumi.OutputState }

func (GetAttachedInstallManifestResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAttachedInstallManifestResult)(nil)).Elem()
}

func (o GetAttachedInstallManifestResultOutput) ToGetAttachedInstallManifestResultOutput() GetAttachedInstallManifestResultOutput {
	return o
}

func (o GetAttachedInstallManifestResultOutput) ToGetAttachedInstallManifestResultOutputWithContext(ctx context.Context) GetAttachedInstallManifestResultOutput {
	return o
}

func (o GetAttachedInstallManifestResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAttachedInstallManifestResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAttachedInstallManifestResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAttachedInstallManifestResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAttachedInstallManifestResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetAttachedInstallManifestResult) string { return v.Location }).(pulumi.StringOutput)
}

// A string with the YAML manifest that needs to be applied to the cluster.
func (o GetAttachedInstallManifestResultOutput) Manifest() pulumi.StringOutput {
	return o.ApplyT(func(v GetAttachedInstallManifestResult) string { return v.Manifest }).(pulumi.StringOutput)
}

func (o GetAttachedInstallManifestResultOutput) PlatformVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetAttachedInstallManifestResult) string { return v.PlatformVersion }).(pulumi.StringOutput)
}

func (o GetAttachedInstallManifestResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetAttachedInstallManifestResult) string { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAttachedInstallManifestResultOutput{})
}
