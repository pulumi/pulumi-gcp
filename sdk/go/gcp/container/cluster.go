// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package container

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a Google Kubernetes Engine (GKE) cluster. For more information see
// [the official documentation](https://cloud.google.com/container-engine/docs/clusters)
// and
// [API](https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters).
// 
// ~> **Note:** All arguments including the username and password will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
type Cluster struct {
	s *pulumi.ResourceState
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["additionalZones"] = nil
		inputs["addonsConfig"] = nil
		inputs["clusterIpv4Cidr"] = nil
		inputs["description"] = nil
		inputs["enableKubernetesAlpha"] = nil
		inputs["enableLegacyAbac"] = nil
		inputs["initialNodeCount"] = nil
		inputs["ipAllocationPolicy"] = nil
		inputs["loggingService"] = nil
		inputs["maintenancePolicy"] = nil
		inputs["masterAuth"] = nil
		inputs["masterAuthorizedNetworksConfig"] = nil
		inputs["masterIpv4CidrBlock"] = nil
		inputs["minMasterVersion"] = nil
		inputs["monitoringService"] = nil
		inputs["name"] = nil
		inputs["network"] = nil
		inputs["networkPolicy"] = nil
		inputs["nodeConfig"] = nil
		inputs["nodePools"] = nil
		inputs["nodeVersion"] = nil
		inputs["podSecurityPolicyConfig"] = nil
		inputs["privateCluster"] = nil
		inputs["project"] = nil
		inputs["region"] = nil
		inputs["removeDefaultNodePool"] = nil
		inputs["resourceLabels"] = nil
		inputs["subnetwork"] = nil
		inputs["zone"] = nil
	} else {
		inputs["additionalZones"] = args.AdditionalZones
		inputs["addonsConfig"] = args.AddonsConfig
		inputs["clusterIpv4Cidr"] = args.ClusterIpv4Cidr
		inputs["description"] = args.Description
		inputs["enableKubernetesAlpha"] = args.EnableKubernetesAlpha
		inputs["enableLegacyAbac"] = args.EnableLegacyAbac
		inputs["initialNodeCount"] = args.InitialNodeCount
		inputs["ipAllocationPolicy"] = args.IpAllocationPolicy
		inputs["loggingService"] = args.LoggingService
		inputs["maintenancePolicy"] = args.MaintenancePolicy
		inputs["masterAuth"] = args.MasterAuth
		inputs["masterAuthorizedNetworksConfig"] = args.MasterAuthorizedNetworksConfig
		inputs["masterIpv4CidrBlock"] = args.MasterIpv4CidrBlock
		inputs["minMasterVersion"] = args.MinMasterVersion
		inputs["monitoringService"] = args.MonitoringService
		inputs["name"] = args.Name
		inputs["network"] = args.Network
		inputs["networkPolicy"] = args.NetworkPolicy
		inputs["nodeConfig"] = args.NodeConfig
		inputs["nodePools"] = args.NodePools
		inputs["nodeVersion"] = args.NodeVersion
		inputs["podSecurityPolicyConfig"] = args.PodSecurityPolicyConfig
		inputs["privateCluster"] = args.PrivateCluster
		inputs["project"] = args.Project
		inputs["region"] = args.Region
		inputs["removeDefaultNodePool"] = args.RemoveDefaultNodePool
		inputs["resourceLabels"] = args.ResourceLabels
		inputs["subnetwork"] = args.Subnetwork
		inputs["zone"] = args.Zone
	}
	inputs["endpoint"] = nil
	inputs["instanceGroupUrls"] = nil
	inputs["masterVersion"] = nil
	s, err := ctx.RegisterResource("gcp:container/cluster:Cluster", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Cluster{s: s}, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClusterState, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["additionalZones"] = state.AdditionalZones
		inputs["addonsConfig"] = state.AddonsConfig
		inputs["clusterIpv4Cidr"] = state.ClusterIpv4Cidr
		inputs["description"] = state.Description
		inputs["enableKubernetesAlpha"] = state.EnableKubernetesAlpha
		inputs["enableLegacyAbac"] = state.EnableLegacyAbac
		inputs["endpoint"] = state.Endpoint
		inputs["initialNodeCount"] = state.InitialNodeCount
		inputs["instanceGroupUrls"] = state.InstanceGroupUrls
		inputs["ipAllocationPolicy"] = state.IpAllocationPolicy
		inputs["loggingService"] = state.LoggingService
		inputs["maintenancePolicy"] = state.MaintenancePolicy
		inputs["masterAuth"] = state.MasterAuth
		inputs["masterAuthorizedNetworksConfig"] = state.MasterAuthorizedNetworksConfig
		inputs["masterIpv4CidrBlock"] = state.MasterIpv4CidrBlock
		inputs["masterVersion"] = state.MasterVersion
		inputs["minMasterVersion"] = state.MinMasterVersion
		inputs["monitoringService"] = state.MonitoringService
		inputs["name"] = state.Name
		inputs["network"] = state.Network
		inputs["networkPolicy"] = state.NetworkPolicy
		inputs["nodeConfig"] = state.NodeConfig
		inputs["nodePools"] = state.NodePools
		inputs["nodeVersion"] = state.NodeVersion
		inputs["podSecurityPolicyConfig"] = state.PodSecurityPolicyConfig
		inputs["privateCluster"] = state.PrivateCluster
		inputs["project"] = state.Project
		inputs["region"] = state.Region
		inputs["removeDefaultNodePool"] = state.RemoveDefaultNodePool
		inputs["resourceLabels"] = state.ResourceLabels
		inputs["subnetwork"] = state.Subnetwork
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("gcp:container/cluster:Cluster", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Cluster{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Cluster) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Cluster) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The list of additional Google Compute Engine
// locations in which the cluster's nodes should be located. If additional zones are
// configured, the number of nodes specified in `initial_node_count` is created in
// all specified zones.
func (r *Cluster) AdditionalZones() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["additionalZones"])
}

// The configuration for addons supported by GKE.
// Structure is documented below.
func (r *Cluster) AddonsConfig() *pulumi.Output {
	return r.s.State["addonsConfig"]
}

// The IP address range of the kubernetes pods in
// this cluster. Default is an automatically assigned CIDR.
func (r *Cluster) ClusterIpv4Cidr() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["clusterIpv4Cidr"])
}

// Description of the cluster.
func (r *Cluster) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Whether to enable Kubernetes Alpha features for
// this cluster. Note that when this option is enabled, the cluster cannot be upgraded
// and will be automatically deleted after 30 days.
func (r *Cluster) EnableKubernetesAlpha() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableKubernetesAlpha"])
}

// Whether the ABAC authorizer is enabled for this cluster.
// When enabled, identities in the system, including service accounts, nodes, and controllers,
// will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
// Defaults to `false`
func (r *Cluster) EnableLegacyAbac() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableLegacyAbac"])
}

// The IP address of this cluster's Kubernetes master.
func (r *Cluster) Endpoint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["endpoint"])
}

// The number of nodes to create in this
// cluster (not including the Kubernetes master). Must be set if `node_pool` is not set.
func (r *Cluster) InitialNodeCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["initialNodeCount"])
}

// List of instance group URLs which have been assigned
// to the cluster.
func (r *Cluster) InstanceGroupUrls() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["instanceGroupUrls"])
}

// Configuration for cluster IP allocation. As of now, only pre-allocated subnetworks (custom type with secondary ranges) are supported.
// This will activate IP aliases. See the [official documentation](https://cloud.google.com/kubernetes-engine/docs/how-to/ip-aliases)
// Structure is documented below.
func (r *Cluster) IpAllocationPolicy() *pulumi.Output {
	return r.s.State["ipAllocationPolicy"]
}

// The logging service that the cluster should
// write logs to. Available options include `logging.googleapis.com`,
// `logging.googleapis.com/kubernetes` (beta), and `none`. Defaults to `logging.googleapis.com`
func (r *Cluster) LoggingService() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loggingService"])
}

// The maintenance policy to use for the cluster. Structure is
// documented below.
func (r *Cluster) MaintenancePolicy() *pulumi.Output {
	return r.s.State["maintenancePolicy"]
}

// The authentication information for accessing the
// Kubernetes master. Structure is documented below.
func (r *Cluster) MasterAuth() *pulumi.Output {
	return r.s.State["masterAuth"]
}

// The desired configuration options
// for master authorized networks. Omit the nested `cidr_blocks` attribute to disallow
// external access (except the cluster node IPs, which GKE automatically whitelists).
func (r *Cluster) MasterAuthorizedNetworksConfig() *pulumi.Output {
	return r.s.State["masterAuthorizedNetworksConfig"]
}

// ) Specifies a private
// [RFC1918](https://tools.ietf.org/html/rfc1918) block for the master's VPC. The master range must not overlap with any subnet in your cluster's VPC.
// The master and your cluster use VPC peering. Must be specified in CIDR notation and must be `/28` subnet.
func (r *Cluster) MasterIpv4CidrBlock() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["masterIpv4CidrBlock"])
}

// The current version of the master in the cluster. This may
// be different than the `min_master_version` set in the config if the master
// has been updated by GKE.
func (r *Cluster) MasterVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["masterVersion"])
}

// The minimum version of the master. GKE
// will auto-update the master to new versions, so this does not guarantee the
// current master version--use the read-only `master_version` field to obtain that.
// If unset, the cluster's version will be set by GKE to the version of the most recent
// official release (which is not necessarily the latest version).
func (r *Cluster) MinMasterVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["minMasterVersion"])
}

// The monitoring service that the cluster
// should write metrics to.
// Automatically send metrics from pods in the cluster to the Google Cloud Monitoring API.
// VM metrics will be collected by Google Compute Engine regardless of this setting
// Available options include
// `monitoring.googleapis.com`, `monitoring.googleapis.com/kubernetes` (beta) and `none`.
// Defaults to `monitoring.googleapis.com`
func (r *Cluster) MonitoringService() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["monitoringService"])
}

// The name of the cluster, unique within the project and
// zone.
func (r *Cluster) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The name or self_link of the Google Compute Engine
// network to which the cluster is connected. For Shared VPC, set this to the self link of the
// shared network.
func (r *Cluster) Network() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["network"])
}

// Configuration options for the
// [NetworkPolicy](https://kubernetes.io/docs/concepts/services-networking/networkpolicies/)
// feature. Structure is documented below.
func (r *Cluster) NetworkPolicy() *pulumi.Output {
	return r.s.State["networkPolicy"]
}

// Parameters used in creating the cluster's nodes.
// Structure is documented below.
func (r *Cluster) NodeConfig() *pulumi.Output {
	return r.s.State["nodeConfig"]
}

// List of node pools associated with this cluster.
// See google_container_node_pool for schema.
func (r *Cluster) NodePools() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["nodePools"])
}

// The Kubernetes version on the nodes. Must either be unset
// or set to the same value as `min_master_version` on create. Defaults to the default
// version set by GKE which is not necessarily the latest version.
func (r *Cluster) NodeVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nodeVersion"])
}

// ) Configuration for the
// [PodSecurityPolicy](https://cloud.google.com/kubernetes-engine/docs/how-to/pod-security-policies) feature.
// Structure is documented below.
func (r *Cluster) PodSecurityPolicyConfig() *pulumi.Output {
	return r.s.State["podSecurityPolicyConfig"]
}

// ) If true, a
// [private cluster](https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters) will be created, meaning
// nodes do not get public IP addresses. It is mandatory to specify `master_ipv4_cidr_block` and
// `ip_allocation_policy` with this option.
func (r *Cluster) PrivateCluster() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["privateCluster"])
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (r *Cluster) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *Cluster) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// If true, deletes the default node pool upon cluster creation.
func (r *Cluster) RemoveDefaultNodePool() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["removeDefaultNodePool"])
}

// The GCE resource labels (a map of key/value pairs) to be applied to the cluster.
func (r *Cluster) ResourceLabels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["resourceLabels"])
}

// The name or self_link of the Google Compute Engine subnetwork in
// which the cluster's instances are launched.
func (r *Cluster) Subnetwork() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subnetwork"])
}

// The zone that the master and the number of nodes specified
// in `initial_node_count` should be created in. Only one of `zone` and `region`
// may be set. If neither zone nor region are set, the provider zone is used.
func (r *Cluster) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering Cluster resources.
type ClusterState struct {
	// The list of additional Google Compute Engine
	// locations in which the cluster's nodes should be located. If additional zones are
	// configured, the number of nodes specified in `initial_node_count` is created in
	// all specified zones.
	AdditionalZones interface{}
	// The configuration for addons supported by GKE.
	// Structure is documented below.
	AddonsConfig interface{}
	// The IP address range of the kubernetes pods in
	// this cluster. Default is an automatically assigned CIDR.
	ClusterIpv4Cidr interface{}
	// Description of the cluster.
	Description interface{}
	// Whether to enable Kubernetes Alpha features for
	// this cluster. Note that when this option is enabled, the cluster cannot be upgraded
	// and will be automatically deleted after 30 days.
	EnableKubernetesAlpha interface{}
	// Whether the ABAC authorizer is enabled for this cluster.
	// When enabled, identities in the system, including service accounts, nodes, and controllers,
	// will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
	// Defaults to `false`
	EnableLegacyAbac interface{}
	// The IP address of this cluster's Kubernetes master.
	Endpoint interface{}
	// The number of nodes to create in this
	// cluster (not including the Kubernetes master). Must be set if `node_pool` is not set.
	InitialNodeCount interface{}
	// List of instance group URLs which have been assigned
	// to the cluster.
	InstanceGroupUrls interface{}
	// Configuration for cluster IP allocation. As of now, only pre-allocated subnetworks (custom type with secondary ranges) are supported.
	// This will activate IP aliases. See the [official documentation](https://cloud.google.com/kubernetes-engine/docs/how-to/ip-aliases)
	// Structure is documented below.
	IpAllocationPolicy interface{}
	// The logging service that the cluster should
	// write logs to. Available options include `logging.googleapis.com`,
	// `logging.googleapis.com/kubernetes` (beta), and `none`. Defaults to `logging.googleapis.com`
	LoggingService interface{}
	// The maintenance policy to use for the cluster. Structure is
	// documented below.
	MaintenancePolicy interface{}
	// The authentication information for accessing the
	// Kubernetes master. Structure is documented below.
	MasterAuth interface{}
	// The desired configuration options
	// for master authorized networks. Omit the nested `cidr_blocks` attribute to disallow
	// external access (except the cluster node IPs, which GKE automatically whitelists).
	MasterAuthorizedNetworksConfig interface{}
	// ) Specifies a private
	// [RFC1918](https://tools.ietf.org/html/rfc1918) block for the master's VPC. The master range must not overlap with any subnet in your cluster's VPC.
	// The master and your cluster use VPC peering. Must be specified in CIDR notation and must be `/28` subnet.
	MasterIpv4CidrBlock interface{}
	// The current version of the master in the cluster. This may
	// be different than the `min_master_version` set in the config if the master
	// has been updated by GKE.
	MasterVersion interface{}
	// The minimum version of the master. GKE
	// will auto-update the master to new versions, so this does not guarantee the
	// current master version--use the read-only `master_version` field to obtain that.
	// If unset, the cluster's version will be set by GKE to the version of the most recent
	// official release (which is not necessarily the latest version).
	MinMasterVersion interface{}
	// The monitoring service that the cluster
	// should write metrics to.
	// Automatically send metrics from pods in the cluster to the Google Cloud Monitoring API.
	// VM metrics will be collected by Google Compute Engine regardless of this setting
	// Available options include
	// `monitoring.googleapis.com`, `monitoring.googleapis.com/kubernetes` (beta) and `none`.
	// Defaults to `monitoring.googleapis.com`
	MonitoringService interface{}
	// The name of the cluster, unique within the project and
	// zone.
	Name interface{}
	// The name or self_link of the Google Compute Engine
	// network to which the cluster is connected. For Shared VPC, set this to the self link of the
	// shared network.
	Network interface{}
	// Configuration options for the
	// [NetworkPolicy](https://kubernetes.io/docs/concepts/services-networking/networkpolicies/)
	// feature. Structure is documented below.
	NetworkPolicy interface{}
	// Parameters used in creating the cluster's nodes.
	// Structure is documented below.
	NodeConfig interface{}
	// List of node pools associated with this cluster.
	// See google_container_node_pool for schema.
	NodePools interface{}
	// The Kubernetes version on the nodes. Must either be unset
	// or set to the same value as `min_master_version` on create. Defaults to the default
	// version set by GKE which is not necessarily the latest version.
	NodeVersion interface{}
	// ) Configuration for the
	// [PodSecurityPolicy](https://cloud.google.com/kubernetes-engine/docs/how-to/pod-security-policies) feature.
	// Structure is documented below.
	PodSecurityPolicyConfig interface{}
	// ) If true, a
	// [private cluster](https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters) will be created, meaning
	// nodes do not get public IP addresses. It is mandatory to specify `master_ipv4_cidr_block` and
	// `ip_allocation_policy` with this option.
	PrivateCluster interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	Region interface{}
	// If true, deletes the default node pool upon cluster creation.
	RemoveDefaultNodePool interface{}
	// The GCE resource labels (a map of key/value pairs) to be applied to the cluster.
	ResourceLabels interface{}
	// The name or self_link of the Google Compute Engine subnetwork in
	// which the cluster's instances are launched.
	Subnetwork interface{}
	// The zone that the master and the number of nodes specified
	// in `initial_node_count` should be created in. Only one of `zone` and `region`
	// may be set. If neither zone nor region are set, the provider zone is used.
	Zone interface{}
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The list of additional Google Compute Engine
	// locations in which the cluster's nodes should be located. If additional zones are
	// configured, the number of nodes specified in `initial_node_count` is created in
	// all specified zones.
	AdditionalZones interface{}
	// The configuration for addons supported by GKE.
	// Structure is documented below.
	AddonsConfig interface{}
	// The IP address range of the kubernetes pods in
	// this cluster. Default is an automatically assigned CIDR.
	ClusterIpv4Cidr interface{}
	// Description of the cluster.
	Description interface{}
	// Whether to enable Kubernetes Alpha features for
	// this cluster. Note that when this option is enabled, the cluster cannot be upgraded
	// and will be automatically deleted after 30 days.
	EnableKubernetesAlpha interface{}
	// Whether the ABAC authorizer is enabled for this cluster.
	// When enabled, identities in the system, including service accounts, nodes, and controllers,
	// will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
	// Defaults to `false`
	EnableLegacyAbac interface{}
	// The number of nodes to create in this
	// cluster (not including the Kubernetes master). Must be set if `node_pool` is not set.
	InitialNodeCount interface{}
	// Configuration for cluster IP allocation. As of now, only pre-allocated subnetworks (custom type with secondary ranges) are supported.
	// This will activate IP aliases. See the [official documentation](https://cloud.google.com/kubernetes-engine/docs/how-to/ip-aliases)
	// Structure is documented below.
	IpAllocationPolicy interface{}
	// The logging service that the cluster should
	// write logs to. Available options include `logging.googleapis.com`,
	// `logging.googleapis.com/kubernetes` (beta), and `none`. Defaults to `logging.googleapis.com`
	LoggingService interface{}
	// The maintenance policy to use for the cluster. Structure is
	// documented below.
	MaintenancePolicy interface{}
	// The authentication information for accessing the
	// Kubernetes master. Structure is documented below.
	MasterAuth interface{}
	// The desired configuration options
	// for master authorized networks. Omit the nested `cidr_blocks` attribute to disallow
	// external access (except the cluster node IPs, which GKE automatically whitelists).
	MasterAuthorizedNetworksConfig interface{}
	// ) Specifies a private
	// [RFC1918](https://tools.ietf.org/html/rfc1918) block for the master's VPC. The master range must not overlap with any subnet in your cluster's VPC.
	// The master and your cluster use VPC peering. Must be specified in CIDR notation and must be `/28` subnet.
	MasterIpv4CidrBlock interface{}
	// The minimum version of the master. GKE
	// will auto-update the master to new versions, so this does not guarantee the
	// current master version--use the read-only `master_version` field to obtain that.
	// If unset, the cluster's version will be set by GKE to the version of the most recent
	// official release (which is not necessarily the latest version).
	MinMasterVersion interface{}
	// The monitoring service that the cluster
	// should write metrics to.
	// Automatically send metrics from pods in the cluster to the Google Cloud Monitoring API.
	// VM metrics will be collected by Google Compute Engine regardless of this setting
	// Available options include
	// `monitoring.googleapis.com`, `monitoring.googleapis.com/kubernetes` (beta) and `none`.
	// Defaults to `monitoring.googleapis.com`
	MonitoringService interface{}
	// The name of the cluster, unique within the project and
	// zone.
	Name interface{}
	// The name or self_link of the Google Compute Engine
	// network to which the cluster is connected. For Shared VPC, set this to the self link of the
	// shared network.
	Network interface{}
	// Configuration options for the
	// [NetworkPolicy](https://kubernetes.io/docs/concepts/services-networking/networkpolicies/)
	// feature. Structure is documented below.
	NetworkPolicy interface{}
	// Parameters used in creating the cluster's nodes.
	// Structure is documented below.
	NodeConfig interface{}
	// List of node pools associated with this cluster.
	// See google_container_node_pool for schema.
	NodePools interface{}
	// The Kubernetes version on the nodes. Must either be unset
	// or set to the same value as `min_master_version` on create. Defaults to the default
	// version set by GKE which is not necessarily the latest version.
	NodeVersion interface{}
	// ) Configuration for the
	// [PodSecurityPolicy](https://cloud.google.com/kubernetes-engine/docs/how-to/pod-security-policies) feature.
	// Structure is documented below.
	PodSecurityPolicyConfig interface{}
	// ) If true, a
	// [private cluster](https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters) will be created, meaning
	// nodes do not get public IP addresses. It is mandatory to specify `master_ipv4_cidr_block` and
	// `ip_allocation_policy` with this option.
	PrivateCluster interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	Region interface{}
	// If true, deletes the default node pool upon cluster creation.
	RemoveDefaultNodePool interface{}
	// The GCE resource labels (a map of key/value pairs) to be applied to the cluster.
	ResourceLabels interface{}
	// The name or self_link of the Google Compute Engine subnetwork in
	// which the cluster's instances are launched.
	Subnetwork interface{}
	// The zone that the master and the number of nodes specified
	// in `initial_node_count` should be created in. Only one of `zone` and `region`
	// may be set. If neither zone nor region are set, the provider zone is used.
	Zone interface{}
}
