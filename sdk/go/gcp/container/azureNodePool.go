// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package container

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Anthos node pool running on Azure.
//
// For more information, see:
// * [Multicloud overview](https://cloud.google.com/anthos/clusters/docs/multi-cloud)
// ## Example Usage
// ### Basic_azure_node_pool
// A basic example of a containerazure azure node pool
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/container"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "my-project-name"
// 		opt1 := "us-west1"
// 		versions, err := container.GetAzureVersions(ctx, &container.GetAzureVersionsArgs{
// 			Project:  &opt0,
// 			Location: &opt1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		basic, err := container.NewAzureClient(ctx, "basic", &container.AzureClientArgs{
// 			ApplicationId: pulumi.String("12345678-1234-1234-1234-123456789111"),
// 			Location:      pulumi.String("us-west1"),
// 			TenantId:      pulumi.String("12345678-1234-1234-1234-123456789111"),
// 			Project:       pulumi.String("my-project-name"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		primaryAzureCluster, err := container.NewAzureCluster(ctx, "primaryAzureCluster", &container.AzureClusterArgs{
// 			Authorization: &container.AzureClusterAuthorizationArgs{
// 				AdminUsers: container.AzureClusterAuthorizationAdminUserArray{
// 					&container.AzureClusterAuthorizationAdminUserArgs{
// 						Username: pulumi.String("mmv2@google.com"),
// 					},
// 				},
// 			},
// 			AzureRegion: pulumi.String("westus2"),
// 			Client: basic.Name.ApplyT(func(name string) (string, error) {
// 				return fmt.Sprintf("%v%v", "projects/my-project-number/locations/us-west1/azureClients/", name), nil
// 			}).(pulumi.StringOutput),
// 			ControlPlane: &container.AzureClusterControlPlaneArgs{
// 				SshConfig: &container.AzureClusterControlPlaneSshConfigArgs{
// 					AuthorizedKey: pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC8yaayO6lnb2v+SedxUMa2c8vtIEzCzBjM3EJJsv8Vm9zUDWR7dXWKoNGARUb2mNGXASvI6mFIDXTIlkQ0poDEPpMaXR0g2cb5xT8jAAJq7fqXL3+0rcJhY/uigQ+MrT6s+ub0BFVbsmGHNrMQttXX9gtmwkeAEvj3mra9e5pkNf90qlKnZz6U0SVArxVsLx07vHPHDIYrl0OPG4zUREF52igbBPiNrHJFDQJT/4YlDMJmo/QT/A1D6n9ocemvZSzhRx15/Arjowhr+VVKSbaxzPtEfY0oIg2SrqJnnr/l3Du5qIefwh5VmCZe4xopPUaDDoOIEFriZ88sB+3zz8ib8sk8zJJQCgeP78tQvXCgS+4e5W3TUg9mxjB6KjXTyHIVhDZqhqde0OI3Fy1UuVzRUwnBaLjBnAwP5EoFQGRmDYk/rEYe7HTmovLeEBUDQocBQKT4Ripm/xJkkWY7B07K/tfo56dGUCkvyIVXKBInCh+dLK7gZapnd4UWkY0xBYcwo1geMLRq58iFTLA2j/JmpmHXp7m0l7jJii7d44uD3tTIFYThn7NlOnvhLim/YcBK07GMGIN7XwrrKZKmxXaspw6KBWVhzuw1UPxctxshYEaMLfFg/bwOw8HvMPr9VtrElpSB7oiOh91PDIPdPBgHCi7N2QgQ5l/ZDBHieSpNrQ== thomasrodgers"),
// 				},
// 				SubnetId: pulumi.String("/subscriptions/12345678-1234-1234-1234-123456789111/resourceGroups/my--dev-byo/providers/Microsoft.Network/virtualNetworks/my--dev-vnet/subnets/default"),
// 				Version:  pulumi.String(versions.ValidVersions[0]),
// 			},
// 			Fleet: &container.AzureClusterFleetArgs{
// 				Project: pulumi.String("my-project-number"),
// 			},
// 			Location: pulumi.String("us-west1"),
// 			Networking: &container.AzureClusterNetworkingArgs{
// 				PodAddressCidrBlocks: pulumi.StringArray{
// 					pulumi.String("10.200.0.0/16"),
// 				},
// 				ServiceAddressCidrBlocks: pulumi.StringArray{
// 					pulumi.String("10.32.0.0/24"),
// 				},
// 				VirtualNetworkId: pulumi.String("/subscriptions/12345678-1234-1234-1234-123456789111/resourceGroups/my--dev-byo/providers/Microsoft.Network/virtualNetworks/my--dev-vnet"),
// 			},
// 			ResourceGroupId: pulumi.String("/subscriptions/12345678-1234-1234-1234-123456789111/resourceGroups/my--dev-cluster"),
// 			Project:         pulumi.String("my-project-name"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = container.NewAzureNodePool(ctx, "primaryAzureNodePool", &container.AzureNodePoolArgs{
// 			Autoscaling: &container.AzureNodePoolAutoscalingArgs{
// 				MaxNodeCount: pulumi.Int(3),
// 				MinNodeCount: pulumi.Int(2),
// 			},
// 			Cluster: primaryAzureCluster.Name,
// 			Config: &container.AzureNodePoolConfigArgs{
// 				SshConfig: &container.AzureNodePoolConfigSshConfigArgs{
// 					AuthorizedKey: pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC8yaayO6lnb2v+SedxUMa2c8vtIEzCzBjM3EJJsv8Vm9zUDWR7dXWKoNGARUb2mNGXASvI6mFIDXTIlkQ0poDEPpMaXR0g2cb5xT8jAAJq7fqXL3+0rcJhY/uigQ+MrT6s+ub0BFVbsmGHNrMQttXX9gtmwkeAEvj3mra9e5pkNf90qlKnZz6U0SVArxVsLx07vHPHDIYrl0OPG4zUREF52igbBPiNrHJFDQJT/4YlDMJmo/QT/A1D6n9ocemvZSzhRx15/Arjowhr+VVKSbaxzPtEfY0oIg2SrqJnnr/l3Du5qIefwh5VmCZe4xopPUaDDoOIEFriZ88sB+3zz8ib8sk8zJJQCgeP78tQvXCgS+4e5W3TUg9mxjB6KjXTyHIVhDZqhqde0OI3Fy1UuVzRUwnBaLjBnAwP5EoFQGRmDYk/rEYe7HTmovLeEBUDQocBQKT4Ripm/xJkkWY7B07K/tfo56dGUCkvyIVXKBInCh+dLK7gZapnd4UWkY0xBYcwo1geMLRq58iFTLA2j/JmpmHXp7m0l7jJii7d44uD3tTIFYThn7NlOnvhLim/YcBK07GMGIN7XwrrKZKmxXaspw6KBWVhzuw1UPxctxshYEaMLfFg/bwOw8HvMPr9VtrElpSB7oiOh91PDIPdPBgHCi7N2QgQ5l/ZDBHieSpNrQ== thomasrodgers"),
// 				},
// 				RootVolume: &container.AzureNodePoolConfigRootVolumeArgs{
// 					SizeGib: pulumi.Int(32),
// 				},
// 				Tags: pulumi.StringMap{
// 					"owner": pulumi.String("mmv2"),
// 				},
// 				VmSize: pulumi.String("Standard_DS2_v2"),
// 			},
// 			Location: pulumi.String("us-west1"),
// 			MaxPodsConstraint: &container.AzureNodePoolMaxPodsConstraintArgs{
// 				MaxPodsPerNode: pulumi.Int(110),
// 			},
// 			SubnetId: pulumi.String("/subscriptions/12345678-1234-1234-1234-123456789111/resourceGroups/my--dev-byo/providers/Microsoft.Network/virtualNetworks/my--dev-vnet/subnets/default"),
// 			Version:  pulumi.String(versions.ValidVersions[0]),
// 			Annotations: pulumi.StringMap{
// 				"annotation-one": pulumi.String("value-one"),
// 			},
// 			Project: pulumi.String("my-project-name"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// NodePool can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:container/azureNodePool:AzureNodePool default projects/{{project}}/locations/{{location}}/azureClusters/{{cluster}}/azureNodePools/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:container/azureNodePool:AzureNodePool default {{project}}/{{location}}/{{cluster}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:container/azureNodePool:AzureNodePool default {{location}}/{{cluster}}/{{name}}
// ```
type AzureNodePool struct {
	pulumi.CustomResourceState

	// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Required. Autoscaler configuration for this node pool.
	Autoscaling AzureNodePoolAutoscalingOutput `pulumi:"autoscaling"`
	// Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
	AzureAvailabilityZone pulumi.StringOutput `pulumi:"azureAvailabilityZone"`
	// The azureCluster for the resource
	Cluster pulumi.StringOutput `pulumi:"cluster"`
	// Required. The node configuration of the node pool.
	Config AzureNodePoolConfigOutput `pulumi:"config"`
	// Output only. The time at which this node pool was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update
	// and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location for the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// Required. The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint AzureNodePoolMaxPodsConstraintOutput `pulumi:"maxPodsConstraint"`
	// The name of this resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project for the resource
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. If set, there are currently pending changes to the node pool.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// Output only. The current state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING,
	// STOPPING, ERROR, DEGRADED
	State pulumi.StringOutput `pulumi:"state"`
	// Required. The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster configuration.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Output only. A globally unique identifier for the node pool.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. The time at which this node pool was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Required. The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewAzureNodePool registers a new resource with the given unique name, arguments, and options.
func NewAzureNodePool(ctx *pulumi.Context,
	name string, args *AzureNodePoolArgs, opts ...pulumi.ResourceOption) (*AzureNodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Autoscaling == nil {
		return nil, errors.New("invalid value for required argument 'Autoscaling'")
	}
	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MaxPodsConstraint == nil {
		return nil, errors.New("invalid value for required argument 'MaxPodsConstraint'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource AzureNodePool
	err := ctx.RegisterResource("gcp:container/azureNodePool:AzureNodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureNodePool gets an existing AzureNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureNodePoolState, opts ...pulumi.ResourceOption) (*AzureNodePool, error) {
	var resource AzureNodePool
	err := ctx.ReadResource("gcp:container/azureNodePool:AzureNodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureNodePool resources.
type azureNodePoolState struct {
	// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations map[string]string `pulumi:"annotations"`
	// Required. Autoscaler configuration for this node pool.
	Autoscaling *AzureNodePoolAutoscaling `pulumi:"autoscaling"`
	// Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
	AzureAvailabilityZone *string `pulumi:"azureAvailabilityZone"`
	// The azureCluster for the resource
	Cluster *string `pulumi:"cluster"`
	// Required. The node configuration of the node pool.
	Config *AzureNodePoolConfig `pulumi:"config"`
	// Output only. The time at which this node pool was created.
	CreateTime *string `pulumi:"createTime"`
	// Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update
	// and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// Required. The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint *AzureNodePoolMaxPodsConstraint `pulumi:"maxPodsConstraint"`
	// The name of this resource.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Output only. If set, there are currently pending changes to the node pool.
	Reconciling *bool `pulumi:"reconciling"`
	// Output only. The current state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING,
	// STOPPING, ERROR, DEGRADED
	State *string `pulumi:"state"`
	// Required. The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster configuration.
	SubnetId *string `pulumi:"subnetId"`
	// Output only. A globally unique identifier for the node pool.
	Uid *string `pulumi:"uid"`
	// Output only. The time at which this node pool was last updated.
	UpdateTime *string `pulumi:"updateTime"`
	// Required. The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
	Version *string `pulumi:"version"`
}

type AzureNodePoolState struct {
	// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations pulumi.StringMapInput
	// Required. Autoscaler configuration for this node pool.
	Autoscaling AzureNodePoolAutoscalingPtrInput
	// Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
	AzureAvailabilityZone pulumi.StringPtrInput
	// The azureCluster for the resource
	Cluster pulumi.StringPtrInput
	// Required. The node configuration of the node pool.
	Config AzureNodePoolConfigPtrInput
	// Output only. The time at which this node pool was created.
	CreateTime pulumi.StringPtrInput
	// Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update
	// and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// Required. The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint AzureNodePoolMaxPodsConstraintPtrInput
	// The name of this resource.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Output only. If set, there are currently pending changes to the node pool.
	Reconciling pulumi.BoolPtrInput
	// Output only. The current state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING,
	// STOPPING, ERROR, DEGRADED
	State pulumi.StringPtrInput
	// Required. The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster configuration.
	SubnetId pulumi.StringPtrInput
	// Output only. A globally unique identifier for the node pool.
	Uid pulumi.StringPtrInput
	// Output only. The time at which this node pool was last updated.
	UpdateTime pulumi.StringPtrInput
	// Required. The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
	Version pulumi.StringPtrInput
}

func (AzureNodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureNodePoolState)(nil)).Elem()
}

type azureNodePoolArgs struct {
	// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations map[string]string `pulumi:"annotations"`
	// Required. Autoscaler configuration for this node pool.
	Autoscaling AzureNodePoolAutoscaling `pulumi:"autoscaling"`
	// Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
	AzureAvailabilityZone *string `pulumi:"azureAvailabilityZone"`
	// The azureCluster for the resource
	Cluster string `pulumi:"cluster"`
	// Required. The node configuration of the node pool.
	Config AzureNodePoolConfig `pulumi:"config"`
	// The location for the resource
	Location string `pulumi:"location"`
	// Required. The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint AzureNodePoolMaxPodsConstraint `pulumi:"maxPodsConstraint"`
	// The name of this resource.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// Required. The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster configuration.
	SubnetId string `pulumi:"subnetId"`
	// Required. The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a AzureNodePool resource.
type AzureNodePoolArgs struct {
	// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations pulumi.StringMapInput
	// Required. Autoscaler configuration for this node pool.
	Autoscaling AzureNodePoolAutoscalingInput
	// Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
	AzureAvailabilityZone pulumi.StringPtrInput
	// The azureCluster for the resource
	Cluster pulumi.StringInput
	// Required. The node configuration of the node pool.
	Config AzureNodePoolConfigInput
	// The location for the resource
	Location pulumi.StringInput
	// Required. The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint AzureNodePoolMaxPodsConstraintInput
	// The name of this resource.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// Required. The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster configuration.
	SubnetId pulumi.StringInput
	// Required. The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
	Version pulumi.StringInput
}

func (AzureNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureNodePoolArgs)(nil)).Elem()
}

type AzureNodePoolInput interface {
	pulumi.Input

	ToAzureNodePoolOutput() AzureNodePoolOutput
	ToAzureNodePoolOutputWithContext(ctx context.Context) AzureNodePoolOutput
}

func (*AzureNodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureNodePool)(nil)).Elem()
}

func (i *AzureNodePool) ToAzureNodePoolOutput() AzureNodePoolOutput {
	return i.ToAzureNodePoolOutputWithContext(context.Background())
}

func (i *AzureNodePool) ToAzureNodePoolOutputWithContext(ctx context.Context) AzureNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureNodePoolOutput)
}

// AzureNodePoolArrayInput is an input type that accepts AzureNodePoolArray and AzureNodePoolArrayOutput values.
// You can construct a concrete instance of `AzureNodePoolArrayInput` via:
//
//          AzureNodePoolArray{ AzureNodePoolArgs{...} }
type AzureNodePoolArrayInput interface {
	pulumi.Input

	ToAzureNodePoolArrayOutput() AzureNodePoolArrayOutput
	ToAzureNodePoolArrayOutputWithContext(context.Context) AzureNodePoolArrayOutput
}

type AzureNodePoolArray []AzureNodePoolInput

func (AzureNodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureNodePool)(nil)).Elem()
}

func (i AzureNodePoolArray) ToAzureNodePoolArrayOutput() AzureNodePoolArrayOutput {
	return i.ToAzureNodePoolArrayOutputWithContext(context.Background())
}

func (i AzureNodePoolArray) ToAzureNodePoolArrayOutputWithContext(ctx context.Context) AzureNodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureNodePoolArrayOutput)
}

// AzureNodePoolMapInput is an input type that accepts AzureNodePoolMap and AzureNodePoolMapOutput values.
// You can construct a concrete instance of `AzureNodePoolMapInput` via:
//
//          AzureNodePoolMap{ "key": AzureNodePoolArgs{...} }
type AzureNodePoolMapInput interface {
	pulumi.Input

	ToAzureNodePoolMapOutput() AzureNodePoolMapOutput
	ToAzureNodePoolMapOutputWithContext(context.Context) AzureNodePoolMapOutput
}

type AzureNodePoolMap map[string]AzureNodePoolInput

func (AzureNodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureNodePool)(nil)).Elem()
}

func (i AzureNodePoolMap) ToAzureNodePoolMapOutput() AzureNodePoolMapOutput {
	return i.ToAzureNodePoolMapOutputWithContext(context.Background())
}

func (i AzureNodePoolMap) ToAzureNodePoolMapOutputWithContext(ctx context.Context) AzureNodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureNodePoolMapOutput)
}

type AzureNodePoolOutput struct{ *pulumi.OutputState }

func (AzureNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureNodePool)(nil)).Elem()
}

func (o AzureNodePoolOutput) ToAzureNodePoolOutput() AzureNodePoolOutput {
	return o
}

func (o AzureNodePoolOutput) ToAzureNodePoolOutputWithContext(ctx context.Context) AzureNodePoolOutput {
	return o
}

type AzureNodePoolArrayOutput struct{ *pulumi.OutputState }

func (AzureNodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureNodePool)(nil)).Elem()
}

func (o AzureNodePoolArrayOutput) ToAzureNodePoolArrayOutput() AzureNodePoolArrayOutput {
	return o
}

func (o AzureNodePoolArrayOutput) ToAzureNodePoolArrayOutputWithContext(ctx context.Context) AzureNodePoolArrayOutput {
	return o
}

func (o AzureNodePoolArrayOutput) Index(i pulumi.IntInput) AzureNodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureNodePool {
		return vs[0].([]*AzureNodePool)[vs[1].(int)]
	}).(AzureNodePoolOutput)
}

type AzureNodePoolMapOutput struct{ *pulumi.OutputState }

func (AzureNodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureNodePool)(nil)).Elem()
}

func (o AzureNodePoolMapOutput) ToAzureNodePoolMapOutput() AzureNodePoolMapOutput {
	return o
}

func (o AzureNodePoolMapOutput) ToAzureNodePoolMapOutputWithContext(ctx context.Context) AzureNodePoolMapOutput {
	return o
}

func (o AzureNodePoolMapOutput) MapIndex(k pulumi.StringInput) AzureNodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureNodePool {
		return vs[0].(map[string]*AzureNodePool)[vs[1].(string)]
	}).(AzureNodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureNodePoolInput)(nil)).Elem(), &AzureNodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureNodePoolArrayInput)(nil)).Elem(), AzureNodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureNodePoolMapInput)(nil)).Elem(), AzureNodePoolMap{})
	pulumi.RegisterOutputType(AzureNodePoolOutput{})
	pulumi.RegisterOutputType(AzureNodePoolArrayOutput{})
	pulumi.RegisterOutputType(AzureNodePoolMapOutput{})
}
