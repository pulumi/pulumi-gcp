// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package container

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Node Pool resource within GKE. For more information see
// [the official documentation](https://cloud.google.com/container-engine/docs/node-pools)
// and
// [API](https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.nodePools).
type NodePool struct {
	s *pulumi.ResourceState
}

// NewNodePool registers a new resource with the given unique name, arguments, and options.
func NewNodePool(ctx *pulumi.Context,
	name string, args *NodePoolArgs, opts ...pulumi.ResourceOpt) (*NodePool, error) {
	if args == nil || args.Cluster == nil {
		return nil, errors.New("missing required argument 'Cluster'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["autoscaling"] = nil
		inputs["cluster"] = nil
		inputs["initialNodeCount"] = nil
		inputs["management"] = nil
		inputs["maxPodsPerNode"] = nil
		inputs["name"] = nil
		inputs["namePrefix"] = nil
		inputs["nodeConfig"] = nil
		inputs["nodeCount"] = nil
		inputs["project"] = nil
		inputs["region"] = nil
		inputs["version"] = nil
		inputs["zone"] = nil
	} else {
		inputs["autoscaling"] = args.Autoscaling
		inputs["cluster"] = args.Cluster
		inputs["initialNodeCount"] = args.InitialNodeCount
		inputs["management"] = args.Management
		inputs["maxPodsPerNode"] = args.MaxPodsPerNode
		inputs["name"] = args.Name
		inputs["namePrefix"] = args.NamePrefix
		inputs["nodeConfig"] = args.NodeConfig
		inputs["nodeCount"] = args.NodeCount
		inputs["project"] = args.Project
		inputs["region"] = args.Region
		inputs["version"] = args.Version
		inputs["zone"] = args.Zone
	}
	inputs["instanceGroupUrls"] = nil
	s, err := ctx.RegisterResource("gcp:container/nodePool:NodePool", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NodePool{s: s}, nil
}

// GetNodePool gets an existing NodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodePool(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NodePoolState, opts ...pulumi.ResourceOpt) (*NodePool, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["autoscaling"] = state.Autoscaling
		inputs["cluster"] = state.Cluster
		inputs["initialNodeCount"] = state.InitialNodeCount
		inputs["instanceGroupUrls"] = state.InstanceGroupUrls
		inputs["management"] = state.Management
		inputs["maxPodsPerNode"] = state.MaxPodsPerNode
		inputs["name"] = state.Name
		inputs["namePrefix"] = state.NamePrefix
		inputs["nodeConfig"] = state.NodeConfig
		inputs["nodeCount"] = state.NodeCount
		inputs["project"] = state.Project
		inputs["region"] = state.Region
		inputs["version"] = state.Version
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("gcp:container/nodePool:NodePool", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NodePool{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NodePool) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NodePool) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Configuration required by cluster autoscaler to adjust
// the size of the node pool to the current cluster usage. Structure is documented below.
func (r *NodePool) Autoscaling() *pulumi.Output {
	return r.s.State["autoscaling"]
}

// The cluster to create the node pool for.  Cluster must be present in `zone` provided for zonal clusters.
func (r *NodePool) Cluster() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cluster"])
}

// The initial node count for the pool. Changing this will force
// recreation of the resource.
func (r *NodePool) InitialNodeCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["initialNodeCount"])
}

func (r *NodePool) InstanceGroupUrls() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["instanceGroupUrls"])
}

// Node management configuration, wherein auto-repair and
// auto-upgrade is configured. Structure is documented below.
func (r *NodePool) Management() *pulumi.Output {
	return r.s.State["management"]
}

// The maximum number of pods per node in this node pool.
// Note that this does not work on node pools which are "route-based" - that is, node
// pools belonging to clusters that do not have IP Aliasing enabled.
// This property is in beta, and should be used with the terraform-provider-google-beta provider.
// See [Provider Versions](https://terraform.io/docs/providers/google/provider_versions.html) for more details on beta fields.
func (r *NodePool) MaxPodsPerNode() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maxPodsPerNode"])
}

// The name of the node pool. If left blank, Terraform will
// auto-generate a unique name.
func (r *NodePool) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Creates a unique name for the node pool beginning
// with the specified prefix. Conflicts with `name`.
func (r *NodePool) NamePrefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["namePrefix"])
}

// The node configuration of the pool. See
// google_container_cluster for schema.
func (r *NodePool) NodeConfig() *pulumi.Output {
	return r.s.State["nodeConfig"]
}

// The number of nodes per instance group. This field can be used to
// update the number of nodes per instance group but should not be used alongside `autoscaling`.
func (r *NodePool) NodeCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["nodeCount"])
}

// The ID of the project in which to create the node pool. If blank,
// the provider-configured project will be used.
func (r *NodePool) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The region in which the cluster resides (for regional clusters).
// This property is in beta, and should be used with the terraform-provider-google-beta provider.
// See [Provider Versions](https://terraform.io/docs/providers/google/provider_versions.html) for more details on beta fields.
func (r *NodePool) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The Kubernetes version for the nodes in this pool. Note that if this field
// and `auto_upgrade` are both specified, they will fight each other for what the node version should
// be, so setting both is highly discouraged.
func (r *NodePool) Version() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["version"])
}

// The zone in which the cluster resides.
func (r *NodePool) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering NodePool resources.
type NodePoolState struct {
	// Configuration required by cluster autoscaler to adjust
	// the size of the node pool to the current cluster usage. Structure is documented below.
	Autoscaling interface{}
	// The cluster to create the node pool for.  Cluster must be present in `zone` provided for zonal clusters.
	Cluster interface{}
	// The initial node count for the pool. Changing this will force
	// recreation of the resource.
	InitialNodeCount interface{}
	InstanceGroupUrls interface{}
	// Node management configuration, wherein auto-repair and
	// auto-upgrade is configured. Structure is documented below.
	Management interface{}
	// The maximum number of pods per node in this node pool.
	// Note that this does not work on node pools which are "route-based" - that is, node
	// pools belonging to clusters that do not have IP Aliasing enabled.
	// This property is in beta, and should be used with the terraform-provider-google-beta provider.
	// See [Provider Versions](https://terraform.io/docs/providers/google/provider_versions.html) for more details on beta fields.
	MaxPodsPerNode interface{}
	// The name of the node pool. If left blank, Terraform will
	// auto-generate a unique name.
	Name interface{}
	// Creates a unique name for the node pool beginning
	// with the specified prefix. Conflicts with `name`.
	NamePrefix interface{}
	// The node configuration of the pool. See
	// google_container_cluster for schema.
	NodeConfig interface{}
	// The number of nodes per instance group. This field can be used to
	// update the number of nodes per instance group but should not be used alongside `autoscaling`.
	NodeCount interface{}
	// The ID of the project in which to create the node pool. If blank,
	// the provider-configured project will be used.
	Project interface{}
	// The region in which the cluster resides (for regional clusters).
	// This property is in beta, and should be used with the terraform-provider-google-beta provider.
	// See [Provider Versions](https://terraform.io/docs/providers/google/provider_versions.html) for more details on beta fields.
	Region interface{}
	// The Kubernetes version for the nodes in this pool. Note that if this field
	// and `auto_upgrade` are both specified, they will fight each other for what the node version should
	// be, so setting both is highly discouraged.
	Version interface{}
	// The zone in which the cluster resides.
	Zone interface{}
}

// The set of arguments for constructing a NodePool resource.
type NodePoolArgs struct {
	// Configuration required by cluster autoscaler to adjust
	// the size of the node pool to the current cluster usage. Structure is documented below.
	Autoscaling interface{}
	// The cluster to create the node pool for.  Cluster must be present in `zone` provided for zonal clusters.
	Cluster interface{}
	// The initial node count for the pool. Changing this will force
	// recreation of the resource.
	InitialNodeCount interface{}
	// Node management configuration, wherein auto-repair and
	// auto-upgrade is configured. Structure is documented below.
	Management interface{}
	// The maximum number of pods per node in this node pool.
	// Note that this does not work on node pools which are "route-based" - that is, node
	// pools belonging to clusters that do not have IP Aliasing enabled.
	// This property is in beta, and should be used with the terraform-provider-google-beta provider.
	// See [Provider Versions](https://terraform.io/docs/providers/google/provider_versions.html) for more details on beta fields.
	MaxPodsPerNode interface{}
	// The name of the node pool. If left blank, Terraform will
	// auto-generate a unique name.
	Name interface{}
	// Creates a unique name for the node pool beginning
	// with the specified prefix. Conflicts with `name`.
	NamePrefix interface{}
	// The node configuration of the pool. See
	// google_container_cluster for schema.
	NodeConfig interface{}
	// The number of nodes per instance group. This field can be used to
	// update the number of nodes per instance group but should not be used alongside `autoscaling`.
	NodeCount interface{}
	// The ID of the project in which to create the node pool. If blank,
	// the provider-configured project will be used.
	Project interface{}
	// The region in which the cluster resides (for regional clusters).
	// This property is in beta, and should be used with the terraform-provider-google-beta provider.
	// See [Provider Versions](https://terraform.io/docs/providers/google/provider_versions.html) for more details on beta fields.
	Region interface{}
	// The Kubernetes version for the nodes in this pool. Note that if this field
	// and `auto_upgrade` are both specified, they will fight each other for what the node version should
	// be, so setting both is highly discouraged.
	Version interface{}
	// The zone in which the cluster resides.
	Zone interface{}
}
