// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RepositoryIamBinding struct {
	pulumi.CustomResourceState

	Condition  RepositoryIamBindingConditionPtrOutput `pulumi:"condition"`
	Etag       pulumi.StringOutput                    `pulumi:"etag"`
	Members    pulumi.StringArrayOutput               `pulumi:"members"`
	Project    pulumi.StringOutput                    `pulumi:"project"`
	Region     pulumi.StringOutput                    `pulumi:"region"`
	Repository pulumi.StringOutput                    `pulumi:"repository"`
	Role       pulumi.StringOutput                    `pulumi:"role"`
}

// NewRepositoryIamBinding registers a new resource with the given unique name, arguments, and options.
func NewRepositoryIamBinding(ctx *pulumi.Context,
	name string, args *RepositoryIamBindingArgs, opts ...pulumi.ResourceOption) (*RepositoryIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RepositoryIamBinding
	err := ctx.RegisterResource("gcp:dataform/repositoryIamBinding:RepositoryIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryIamBinding gets an existing RepositoryIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryIamBindingState, opts ...pulumi.ResourceOption) (*RepositoryIamBinding, error) {
	var resource RepositoryIamBinding
	err := ctx.ReadResource("gcp:dataform/repositoryIamBinding:RepositoryIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryIamBinding resources.
type repositoryIamBindingState struct {
	Condition  *RepositoryIamBindingCondition `pulumi:"condition"`
	Etag       *string                        `pulumi:"etag"`
	Members    []string                       `pulumi:"members"`
	Project    *string                        `pulumi:"project"`
	Region     *string                        `pulumi:"region"`
	Repository *string                        `pulumi:"repository"`
	Role       *string                        `pulumi:"role"`
}

type RepositoryIamBindingState struct {
	Condition  RepositoryIamBindingConditionPtrInput
	Etag       pulumi.StringPtrInput
	Members    pulumi.StringArrayInput
	Project    pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
	Repository pulumi.StringPtrInput
	Role       pulumi.StringPtrInput
}

func (RepositoryIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryIamBindingState)(nil)).Elem()
}

type repositoryIamBindingArgs struct {
	Condition  *RepositoryIamBindingCondition `pulumi:"condition"`
	Members    []string                       `pulumi:"members"`
	Project    *string                        `pulumi:"project"`
	Region     *string                        `pulumi:"region"`
	Repository string                         `pulumi:"repository"`
	Role       string                         `pulumi:"role"`
}

// The set of arguments for constructing a RepositoryIamBinding resource.
type RepositoryIamBindingArgs struct {
	Condition  RepositoryIamBindingConditionPtrInput
	Members    pulumi.StringArrayInput
	Project    pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
	Repository pulumi.StringInput
	Role       pulumi.StringInput
}

func (RepositoryIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryIamBindingArgs)(nil)).Elem()
}

type RepositoryIamBindingInput interface {
	pulumi.Input

	ToRepositoryIamBindingOutput() RepositoryIamBindingOutput
	ToRepositoryIamBindingOutputWithContext(ctx context.Context) RepositoryIamBindingOutput
}

func (*RepositoryIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamBinding)(nil)).Elem()
}

func (i *RepositoryIamBinding) ToRepositoryIamBindingOutput() RepositoryIamBindingOutput {
	return i.ToRepositoryIamBindingOutputWithContext(context.Background())
}

func (i *RepositoryIamBinding) ToRepositoryIamBindingOutputWithContext(ctx context.Context) RepositoryIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamBindingOutput)
}

// RepositoryIamBindingArrayInput is an input type that accepts RepositoryIamBindingArray and RepositoryIamBindingArrayOutput values.
// You can construct a concrete instance of `RepositoryIamBindingArrayInput` via:
//
//	RepositoryIamBindingArray{ RepositoryIamBindingArgs{...} }
type RepositoryIamBindingArrayInput interface {
	pulumi.Input

	ToRepositoryIamBindingArrayOutput() RepositoryIamBindingArrayOutput
	ToRepositoryIamBindingArrayOutputWithContext(context.Context) RepositoryIamBindingArrayOutput
}

type RepositoryIamBindingArray []RepositoryIamBindingInput

func (RepositoryIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryIamBinding)(nil)).Elem()
}

func (i RepositoryIamBindingArray) ToRepositoryIamBindingArrayOutput() RepositoryIamBindingArrayOutput {
	return i.ToRepositoryIamBindingArrayOutputWithContext(context.Background())
}

func (i RepositoryIamBindingArray) ToRepositoryIamBindingArrayOutputWithContext(ctx context.Context) RepositoryIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamBindingArrayOutput)
}

// RepositoryIamBindingMapInput is an input type that accepts RepositoryIamBindingMap and RepositoryIamBindingMapOutput values.
// You can construct a concrete instance of `RepositoryIamBindingMapInput` via:
//
//	RepositoryIamBindingMap{ "key": RepositoryIamBindingArgs{...} }
type RepositoryIamBindingMapInput interface {
	pulumi.Input

	ToRepositoryIamBindingMapOutput() RepositoryIamBindingMapOutput
	ToRepositoryIamBindingMapOutputWithContext(context.Context) RepositoryIamBindingMapOutput
}

type RepositoryIamBindingMap map[string]RepositoryIamBindingInput

func (RepositoryIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryIamBinding)(nil)).Elem()
}

func (i RepositoryIamBindingMap) ToRepositoryIamBindingMapOutput() RepositoryIamBindingMapOutput {
	return i.ToRepositoryIamBindingMapOutputWithContext(context.Background())
}

func (i RepositoryIamBindingMap) ToRepositoryIamBindingMapOutputWithContext(ctx context.Context) RepositoryIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamBindingMapOutput)
}

type RepositoryIamBindingOutput struct{ *pulumi.OutputState }

func (RepositoryIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamBinding)(nil)).Elem()
}

func (o RepositoryIamBindingOutput) ToRepositoryIamBindingOutput() RepositoryIamBindingOutput {
	return o
}

func (o RepositoryIamBindingOutput) ToRepositoryIamBindingOutputWithContext(ctx context.Context) RepositoryIamBindingOutput {
	return o
}

func (o RepositoryIamBindingOutput) Condition() RepositoryIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *RepositoryIamBinding) RepositoryIamBindingConditionPtrOutput { return v.Condition }).(RepositoryIamBindingConditionPtrOutput)
}

func (o RepositoryIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o RepositoryIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepositoryIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o RepositoryIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o RepositoryIamBindingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryIamBinding) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o RepositoryIamBindingOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryIamBinding) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

func (o RepositoryIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type RepositoryIamBindingArrayOutput struct{ *pulumi.OutputState }

func (RepositoryIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryIamBinding)(nil)).Elem()
}

func (o RepositoryIamBindingArrayOutput) ToRepositoryIamBindingArrayOutput() RepositoryIamBindingArrayOutput {
	return o
}

func (o RepositoryIamBindingArrayOutput) ToRepositoryIamBindingArrayOutputWithContext(ctx context.Context) RepositoryIamBindingArrayOutput {
	return o
}

func (o RepositoryIamBindingArrayOutput) Index(i pulumi.IntInput) RepositoryIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryIamBinding {
		return vs[0].([]*RepositoryIamBinding)[vs[1].(int)]
	}).(RepositoryIamBindingOutput)
}

type RepositoryIamBindingMapOutput struct{ *pulumi.OutputState }

func (RepositoryIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryIamBinding)(nil)).Elem()
}

func (o RepositoryIamBindingMapOutput) ToRepositoryIamBindingMapOutput() RepositoryIamBindingMapOutput {
	return o
}

func (o RepositoryIamBindingMapOutput) ToRepositoryIamBindingMapOutputWithContext(ctx context.Context) RepositoryIamBindingMapOutput {
	return o
}

func (o RepositoryIamBindingMapOutput) MapIndex(k pulumi.StringInput) RepositoryIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryIamBinding {
		return vs[0].(map[string]*RepositoryIamBinding)[vs[1].(string)]
	}).(RepositoryIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamBindingInput)(nil)).Elem(), &RepositoryIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamBindingArrayInput)(nil)).Elem(), RepositoryIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamBindingMapInput)(nil)).Elem(), RepositoryIamBindingMap{})
	pulumi.RegisterOutputType(RepositoryIamBindingOutput{})
	pulumi.RegisterOutputType(RepositoryIamBindingArrayOutput{})
	pulumi.RegisterOutputType(RepositoryIamBindingMapOutput{})
}
