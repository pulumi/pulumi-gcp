// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type RepositoryGitRemoteSettings struct {
	// The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format projects/*/secrets/*/versions/*.
	AuthenticationTokenSecretVersion string `pulumi:"authenticationTokenSecretVersion"`
	// The Git remote's default branch name.
	DefaultBranch string `pulumi:"defaultBranch"`
	// (Output)
	// Indicates the status of the Git access token. https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories#TokenStatus
	TokenStatus *string `pulumi:"tokenStatus"`
	// The Git remote's URL.
	Url string `pulumi:"url"`
}

// RepositoryGitRemoteSettingsInput is an input type that accepts RepositoryGitRemoteSettingsArgs and RepositoryGitRemoteSettingsOutput values.
// You can construct a concrete instance of `RepositoryGitRemoteSettingsInput` via:
//
//	RepositoryGitRemoteSettingsArgs{...}
type RepositoryGitRemoteSettingsInput interface {
	pulumi.Input

	ToRepositoryGitRemoteSettingsOutput() RepositoryGitRemoteSettingsOutput
	ToRepositoryGitRemoteSettingsOutputWithContext(context.Context) RepositoryGitRemoteSettingsOutput
}

type RepositoryGitRemoteSettingsArgs struct {
	// The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format projects/*/secrets/*/versions/*.
	AuthenticationTokenSecretVersion pulumi.StringInput `pulumi:"authenticationTokenSecretVersion"`
	// The Git remote's default branch name.
	DefaultBranch pulumi.StringInput `pulumi:"defaultBranch"`
	// (Output)
	// Indicates the status of the Git access token. https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories#TokenStatus
	TokenStatus pulumi.StringPtrInput `pulumi:"tokenStatus"`
	// The Git remote's URL.
	Url pulumi.StringInput `pulumi:"url"`
}

func (RepositoryGitRemoteSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryGitRemoteSettings)(nil)).Elem()
}

func (i RepositoryGitRemoteSettingsArgs) ToRepositoryGitRemoteSettingsOutput() RepositoryGitRemoteSettingsOutput {
	return i.ToRepositoryGitRemoteSettingsOutputWithContext(context.Background())
}

func (i RepositoryGitRemoteSettingsArgs) ToRepositoryGitRemoteSettingsOutputWithContext(ctx context.Context) RepositoryGitRemoteSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGitRemoteSettingsOutput)
}

func (i RepositoryGitRemoteSettingsArgs) ToRepositoryGitRemoteSettingsPtrOutput() RepositoryGitRemoteSettingsPtrOutput {
	return i.ToRepositoryGitRemoteSettingsPtrOutputWithContext(context.Background())
}

func (i RepositoryGitRemoteSettingsArgs) ToRepositoryGitRemoteSettingsPtrOutputWithContext(ctx context.Context) RepositoryGitRemoteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGitRemoteSettingsOutput).ToRepositoryGitRemoteSettingsPtrOutputWithContext(ctx)
}

// RepositoryGitRemoteSettingsPtrInput is an input type that accepts RepositoryGitRemoteSettingsArgs, RepositoryGitRemoteSettingsPtr and RepositoryGitRemoteSettingsPtrOutput values.
// You can construct a concrete instance of `RepositoryGitRemoteSettingsPtrInput` via:
//
//	        RepositoryGitRemoteSettingsArgs{...}
//
//	or:
//
//	        nil
type RepositoryGitRemoteSettingsPtrInput interface {
	pulumi.Input

	ToRepositoryGitRemoteSettingsPtrOutput() RepositoryGitRemoteSettingsPtrOutput
	ToRepositoryGitRemoteSettingsPtrOutputWithContext(context.Context) RepositoryGitRemoteSettingsPtrOutput
}

type repositoryGitRemoteSettingsPtrType RepositoryGitRemoteSettingsArgs

func RepositoryGitRemoteSettingsPtr(v *RepositoryGitRemoteSettingsArgs) RepositoryGitRemoteSettingsPtrInput {
	return (*repositoryGitRemoteSettingsPtrType)(v)
}

func (*repositoryGitRemoteSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryGitRemoteSettings)(nil)).Elem()
}

func (i *repositoryGitRemoteSettingsPtrType) ToRepositoryGitRemoteSettingsPtrOutput() RepositoryGitRemoteSettingsPtrOutput {
	return i.ToRepositoryGitRemoteSettingsPtrOutputWithContext(context.Background())
}

func (i *repositoryGitRemoteSettingsPtrType) ToRepositoryGitRemoteSettingsPtrOutputWithContext(ctx context.Context) RepositoryGitRemoteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryGitRemoteSettingsPtrOutput)
}

type RepositoryGitRemoteSettingsOutput struct{ *pulumi.OutputState }

func (RepositoryGitRemoteSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryGitRemoteSettings)(nil)).Elem()
}

func (o RepositoryGitRemoteSettingsOutput) ToRepositoryGitRemoteSettingsOutput() RepositoryGitRemoteSettingsOutput {
	return o
}

func (o RepositoryGitRemoteSettingsOutput) ToRepositoryGitRemoteSettingsOutputWithContext(ctx context.Context) RepositoryGitRemoteSettingsOutput {
	return o
}

func (o RepositoryGitRemoteSettingsOutput) ToRepositoryGitRemoteSettingsPtrOutput() RepositoryGitRemoteSettingsPtrOutput {
	return o.ToRepositoryGitRemoteSettingsPtrOutputWithContext(context.Background())
}

func (o RepositoryGitRemoteSettingsOutput) ToRepositoryGitRemoteSettingsPtrOutputWithContext(ctx context.Context) RepositoryGitRemoteSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryGitRemoteSettings) *RepositoryGitRemoteSettings {
		return &v
	}).(RepositoryGitRemoteSettingsPtrOutput)
}

// The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format projects/*/secrets/*/versions/*.
func (o RepositoryGitRemoteSettingsOutput) AuthenticationTokenSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryGitRemoteSettings) string { return v.AuthenticationTokenSecretVersion }).(pulumi.StringOutput)
}

// The Git remote's default branch name.
func (o RepositoryGitRemoteSettingsOutput) DefaultBranch() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryGitRemoteSettings) string { return v.DefaultBranch }).(pulumi.StringOutput)
}

// (Output)
// Indicates the status of the Git access token. https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories#TokenStatus
func (o RepositoryGitRemoteSettingsOutput) TokenStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryGitRemoteSettings) *string { return v.TokenStatus }).(pulumi.StringPtrOutput)
}

// The Git remote's URL.
func (o RepositoryGitRemoteSettingsOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryGitRemoteSettings) string { return v.Url }).(pulumi.StringOutput)
}

type RepositoryGitRemoteSettingsPtrOutput struct{ *pulumi.OutputState }

func (RepositoryGitRemoteSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryGitRemoteSettings)(nil)).Elem()
}

func (o RepositoryGitRemoteSettingsPtrOutput) ToRepositoryGitRemoteSettingsPtrOutput() RepositoryGitRemoteSettingsPtrOutput {
	return o
}

func (o RepositoryGitRemoteSettingsPtrOutput) ToRepositoryGitRemoteSettingsPtrOutputWithContext(ctx context.Context) RepositoryGitRemoteSettingsPtrOutput {
	return o
}

func (o RepositoryGitRemoteSettingsPtrOutput) Elem() RepositoryGitRemoteSettingsOutput {
	return o.ApplyT(func(v *RepositoryGitRemoteSettings) RepositoryGitRemoteSettings {
		if v != nil {
			return *v
		}
		var ret RepositoryGitRemoteSettings
		return ret
	}).(RepositoryGitRemoteSettingsOutput)
}

// The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format projects/*/secrets/*/versions/*.
func (o RepositoryGitRemoteSettingsPtrOutput) AuthenticationTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryGitRemoteSettings) *string {
		if v == nil {
			return nil
		}
		return &v.AuthenticationTokenSecretVersion
	}).(pulumi.StringPtrOutput)
}

// The Git remote's default branch name.
func (o RepositoryGitRemoteSettingsPtrOutput) DefaultBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryGitRemoteSettings) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultBranch
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Indicates the status of the Git access token. https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories#TokenStatus
func (o RepositoryGitRemoteSettingsPtrOutput) TokenStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryGitRemoteSettings) *string {
		if v == nil {
			return nil
		}
		return v.TokenStatus
	}).(pulumi.StringPtrOutput)
}

// The Git remote's URL.
func (o RepositoryGitRemoteSettingsPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryGitRemoteSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type RepositoryWorkspaceCompilationOverrides struct {
	// Optional. The default database (Google Cloud project ID).
	DefaultDatabase *string `pulumi:"defaultDatabase"`
	// Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.
	SchemaSuffix *string `pulumi:"schemaSuffix"`
	// Optional. The prefix that should be prepended to all table names.
	TablePrefix *string `pulumi:"tablePrefix"`
}

// RepositoryWorkspaceCompilationOverridesInput is an input type that accepts RepositoryWorkspaceCompilationOverridesArgs and RepositoryWorkspaceCompilationOverridesOutput values.
// You can construct a concrete instance of `RepositoryWorkspaceCompilationOverridesInput` via:
//
//	RepositoryWorkspaceCompilationOverridesArgs{...}
type RepositoryWorkspaceCompilationOverridesInput interface {
	pulumi.Input

	ToRepositoryWorkspaceCompilationOverridesOutput() RepositoryWorkspaceCompilationOverridesOutput
	ToRepositoryWorkspaceCompilationOverridesOutputWithContext(context.Context) RepositoryWorkspaceCompilationOverridesOutput
}

type RepositoryWorkspaceCompilationOverridesArgs struct {
	// Optional. The default database (Google Cloud project ID).
	DefaultDatabase pulumi.StringPtrInput `pulumi:"defaultDatabase"`
	// Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.
	SchemaSuffix pulumi.StringPtrInput `pulumi:"schemaSuffix"`
	// Optional. The prefix that should be prepended to all table names.
	TablePrefix pulumi.StringPtrInput `pulumi:"tablePrefix"`
}

func (RepositoryWorkspaceCompilationOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryWorkspaceCompilationOverrides)(nil)).Elem()
}

func (i RepositoryWorkspaceCompilationOverridesArgs) ToRepositoryWorkspaceCompilationOverridesOutput() RepositoryWorkspaceCompilationOverridesOutput {
	return i.ToRepositoryWorkspaceCompilationOverridesOutputWithContext(context.Background())
}

func (i RepositoryWorkspaceCompilationOverridesArgs) ToRepositoryWorkspaceCompilationOverridesOutputWithContext(ctx context.Context) RepositoryWorkspaceCompilationOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryWorkspaceCompilationOverridesOutput)
}

func (i RepositoryWorkspaceCompilationOverridesArgs) ToRepositoryWorkspaceCompilationOverridesPtrOutput() RepositoryWorkspaceCompilationOverridesPtrOutput {
	return i.ToRepositoryWorkspaceCompilationOverridesPtrOutputWithContext(context.Background())
}

func (i RepositoryWorkspaceCompilationOverridesArgs) ToRepositoryWorkspaceCompilationOverridesPtrOutputWithContext(ctx context.Context) RepositoryWorkspaceCompilationOverridesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryWorkspaceCompilationOverridesOutput).ToRepositoryWorkspaceCompilationOverridesPtrOutputWithContext(ctx)
}

// RepositoryWorkspaceCompilationOverridesPtrInput is an input type that accepts RepositoryWorkspaceCompilationOverridesArgs, RepositoryWorkspaceCompilationOverridesPtr and RepositoryWorkspaceCompilationOverridesPtrOutput values.
// You can construct a concrete instance of `RepositoryWorkspaceCompilationOverridesPtrInput` via:
//
//	        RepositoryWorkspaceCompilationOverridesArgs{...}
//
//	or:
//
//	        nil
type RepositoryWorkspaceCompilationOverridesPtrInput interface {
	pulumi.Input

	ToRepositoryWorkspaceCompilationOverridesPtrOutput() RepositoryWorkspaceCompilationOverridesPtrOutput
	ToRepositoryWorkspaceCompilationOverridesPtrOutputWithContext(context.Context) RepositoryWorkspaceCompilationOverridesPtrOutput
}

type repositoryWorkspaceCompilationOverridesPtrType RepositoryWorkspaceCompilationOverridesArgs

func RepositoryWorkspaceCompilationOverridesPtr(v *RepositoryWorkspaceCompilationOverridesArgs) RepositoryWorkspaceCompilationOverridesPtrInput {
	return (*repositoryWorkspaceCompilationOverridesPtrType)(v)
}

func (*repositoryWorkspaceCompilationOverridesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryWorkspaceCompilationOverrides)(nil)).Elem()
}

func (i *repositoryWorkspaceCompilationOverridesPtrType) ToRepositoryWorkspaceCompilationOverridesPtrOutput() RepositoryWorkspaceCompilationOverridesPtrOutput {
	return i.ToRepositoryWorkspaceCompilationOverridesPtrOutputWithContext(context.Background())
}

func (i *repositoryWorkspaceCompilationOverridesPtrType) ToRepositoryWorkspaceCompilationOverridesPtrOutputWithContext(ctx context.Context) RepositoryWorkspaceCompilationOverridesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryWorkspaceCompilationOverridesPtrOutput)
}

type RepositoryWorkspaceCompilationOverridesOutput struct{ *pulumi.OutputState }

func (RepositoryWorkspaceCompilationOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryWorkspaceCompilationOverrides)(nil)).Elem()
}

func (o RepositoryWorkspaceCompilationOverridesOutput) ToRepositoryWorkspaceCompilationOverridesOutput() RepositoryWorkspaceCompilationOverridesOutput {
	return o
}

func (o RepositoryWorkspaceCompilationOverridesOutput) ToRepositoryWorkspaceCompilationOverridesOutputWithContext(ctx context.Context) RepositoryWorkspaceCompilationOverridesOutput {
	return o
}

func (o RepositoryWorkspaceCompilationOverridesOutput) ToRepositoryWorkspaceCompilationOverridesPtrOutput() RepositoryWorkspaceCompilationOverridesPtrOutput {
	return o.ToRepositoryWorkspaceCompilationOverridesPtrOutputWithContext(context.Background())
}

func (o RepositoryWorkspaceCompilationOverridesOutput) ToRepositoryWorkspaceCompilationOverridesPtrOutputWithContext(ctx context.Context) RepositoryWorkspaceCompilationOverridesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryWorkspaceCompilationOverrides) *RepositoryWorkspaceCompilationOverrides {
		return &v
	}).(RepositoryWorkspaceCompilationOverridesPtrOutput)
}

// Optional. The default database (Google Cloud project ID).
func (o RepositoryWorkspaceCompilationOverridesOutput) DefaultDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryWorkspaceCompilationOverrides) *string { return v.DefaultDatabase }).(pulumi.StringPtrOutput)
}

// Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.
func (o RepositoryWorkspaceCompilationOverridesOutput) SchemaSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryWorkspaceCompilationOverrides) *string { return v.SchemaSuffix }).(pulumi.StringPtrOutput)
}

// Optional. The prefix that should be prepended to all table names.
func (o RepositoryWorkspaceCompilationOverridesOutput) TablePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryWorkspaceCompilationOverrides) *string { return v.TablePrefix }).(pulumi.StringPtrOutput)
}

type RepositoryWorkspaceCompilationOverridesPtrOutput struct{ *pulumi.OutputState }

func (RepositoryWorkspaceCompilationOverridesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryWorkspaceCompilationOverrides)(nil)).Elem()
}

func (o RepositoryWorkspaceCompilationOverridesPtrOutput) ToRepositoryWorkspaceCompilationOverridesPtrOutput() RepositoryWorkspaceCompilationOverridesPtrOutput {
	return o
}

func (o RepositoryWorkspaceCompilationOverridesPtrOutput) ToRepositoryWorkspaceCompilationOverridesPtrOutputWithContext(ctx context.Context) RepositoryWorkspaceCompilationOverridesPtrOutput {
	return o
}

func (o RepositoryWorkspaceCompilationOverridesPtrOutput) Elem() RepositoryWorkspaceCompilationOverridesOutput {
	return o.ApplyT(func(v *RepositoryWorkspaceCompilationOverrides) RepositoryWorkspaceCompilationOverrides {
		if v != nil {
			return *v
		}
		var ret RepositoryWorkspaceCompilationOverrides
		return ret
	}).(RepositoryWorkspaceCompilationOverridesOutput)
}

// Optional. The default database (Google Cloud project ID).
func (o RepositoryWorkspaceCompilationOverridesPtrOutput) DefaultDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryWorkspaceCompilationOverrides) *string {
		if v == nil {
			return nil
		}
		return v.DefaultDatabase
	}).(pulumi.StringPtrOutput)
}

// Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.
func (o RepositoryWorkspaceCompilationOverridesPtrOutput) SchemaSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryWorkspaceCompilationOverrides) *string {
		if v == nil {
			return nil
		}
		return v.SchemaSuffix
	}).(pulumi.StringPtrOutput)
}

// Optional. The prefix that should be prepended to all table names.
func (o RepositoryWorkspaceCompilationOverridesPtrOutput) TablePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryWorkspaceCompilationOverrides) *string {
		if v == nil {
			return nil
		}
		return v.TablePrefix
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryGitRemoteSettingsInput)(nil)).Elem(), RepositoryGitRemoteSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryGitRemoteSettingsPtrInput)(nil)).Elem(), RepositoryGitRemoteSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryWorkspaceCompilationOverridesInput)(nil)).Elem(), RepositoryWorkspaceCompilationOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryWorkspaceCompilationOverridesPtrInput)(nil)).Elem(), RepositoryWorkspaceCompilationOverridesArgs{})
	pulumi.RegisterOutputType(RepositoryGitRemoteSettingsOutput{})
	pulumi.RegisterOutputType(RepositoryGitRemoteSettingsPtrOutput{})
	pulumi.RegisterOutputType(RepositoryWorkspaceCompilationOverridesOutput{})
	pulumi.RegisterOutputType(RepositoryWorkspaceCompilationOverridesPtrOutput{})
}
