// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RepositoryIamPolicy struct {
	pulumi.CustomResourceState

	Etag       pulumi.StringOutput `pulumi:"etag"`
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	Project    pulumi.StringOutput `pulumi:"project"`
	Region     pulumi.StringOutput `pulumi:"region"`
	Repository pulumi.StringOutput `pulumi:"repository"`
}

// NewRepositoryIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewRepositoryIamPolicy(ctx *pulumi.Context,
	name string, args *RepositoryIamPolicyArgs, opts ...pulumi.ResourceOption) (*RepositoryIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RepositoryIamPolicy
	err := ctx.RegisterResource("gcp:dataform/repositoryIamPolicy:RepositoryIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryIamPolicy gets an existing RepositoryIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryIamPolicyState, opts ...pulumi.ResourceOption) (*RepositoryIamPolicy, error) {
	var resource RepositoryIamPolicy
	err := ctx.ReadResource("gcp:dataform/repositoryIamPolicy:RepositoryIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryIamPolicy resources.
type repositoryIamPolicyState struct {
	Etag       *string `pulumi:"etag"`
	PolicyData *string `pulumi:"policyData"`
	Project    *string `pulumi:"project"`
	Region     *string `pulumi:"region"`
	Repository *string `pulumi:"repository"`
}

type RepositoryIamPolicyState struct {
	Etag       pulumi.StringPtrInput
	PolicyData pulumi.StringPtrInput
	Project    pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
	Repository pulumi.StringPtrInput
}

func (RepositoryIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryIamPolicyState)(nil)).Elem()
}

type repositoryIamPolicyArgs struct {
	PolicyData string  `pulumi:"policyData"`
	Project    *string `pulumi:"project"`
	Region     *string `pulumi:"region"`
	Repository string  `pulumi:"repository"`
}

// The set of arguments for constructing a RepositoryIamPolicy resource.
type RepositoryIamPolicyArgs struct {
	PolicyData pulumi.StringInput
	Project    pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
	Repository pulumi.StringInput
}

func (RepositoryIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryIamPolicyArgs)(nil)).Elem()
}

type RepositoryIamPolicyInput interface {
	pulumi.Input

	ToRepositoryIamPolicyOutput() RepositoryIamPolicyOutput
	ToRepositoryIamPolicyOutputWithContext(ctx context.Context) RepositoryIamPolicyOutput
}

func (*RepositoryIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamPolicy)(nil)).Elem()
}

func (i *RepositoryIamPolicy) ToRepositoryIamPolicyOutput() RepositoryIamPolicyOutput {
	return i.ToRepositoryIamPolicyOutputWithContext(context.Background())
}

func (i *RepositoryIamPolicy) ToRepositoryIamPolicyOutputWithContext(ctx context.Context) RepositoryIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamPolicyOutput)
}

// RepositoryIamPolicyArrayInput is an input type that accepts RepositoryIamPolicyArray and RepositoryIamPolicyArrayOutput values.
// You can construct a concrete instance of `RepositoryIamPolicyArrayInput` via:
//
//	RepositoryIamPolicyArray{ RepositoryIamPolicyArgs{...} }
type RepositoryIamPolicyArrayInput interface {
	pulumi.Input

	ToRepositoryIamPolicyArrayOutput() RepositoryIamPolicyArrayOutput
	ToRepositoryIamPolicyArrayOutputWithContext(context.Context) RepositoryIamPolicyArrayOutput
}

type RepositoryIamPolicyArray []RepositoryIamPolicyInput

func (RepositoryIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryIamPolicy)(nil)).Elem()
}

func (i RepositoryIamPolicyArray) ToRepositoryIamPolicyArrayOutput() RepositoryIamPolicyArrayOutput {
	return i.ToRepositoryIamPolicyArrayOutputWithContext(context.Background())
}

func (i RepositoryIamPolicyArray) ToRepositoryIamPolicyArrayOutputWithContext(ctx context.Context) RepositoryIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamPolicyArrayOutput)
}

// RepositoryIamPolicyMapInput is an input type that accepts RepositoryIamPolicyMap and RepositoryIamPolicyMapOutput values.
// You can construct a concrete instance of `RepositoryIamPolicyMapInput` via:
//
//	RepositoryIamPolicyMap{ "key": RepositoryIamPolicyArgs{...} }
type RepositoryIamPolicyMapInput interface {
	pulumi.Input

	ToRepositoryIamPolicyMapOutput() RepositoryIamPolicyMapOutput
	ToRepositoryIamPolicyMapOutputWithContext(context.Context) RepositoryIamPolicyMapOutput
}

type RepositoryIamPolicyMap map[string]RepositoryIamPolicyInput

func (RepositoryIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryIamPolicy)(nil)).Elem()
}

func (i RepositoryIamPolicyMap) ToRepositoryIamPolicyMapOutput() RepositoryIamPolicyMapOutput {
	return i.ToRepositoryIamPolicyMapOutputWithContext(context.Background())
}

func (i RepositoryIamPolicyMap) ToRepositoryIamPolicyMapOutputWithContext(ctx context.Context) RepositoryIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamPolicyMapOutput)
}

type RepositoryIamPolicyOutput struct{ *pulumi.OutputState }

func (RepositoryIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamPolicy)(nil)).Elem()
}

func (o RepositoryIamPolicyOutput) ToRepositoryIamPolicyOutput() RepositoryIamPolicyOutput {
	return o
}

func (o RepositoryIamPolicyOutput) ToRepositoryIamPolicyOutputWithContext(ctx context.Context) RepositoryIamPolicyOutput {
	return o
}

func (o RepositoryIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o RepositoryIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

func (o RepositoryIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o RepositoryIamPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryIamPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o RepositoryIamPolicyOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryIamPolicy) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

type RepositoryIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (RepositoryIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryIamPolicy)(nil)).Elem()
}

func (o RepositoryIamPolicyArrayOutput) ToRepositoryIamPolicyArrayOutput() RepositoryIamPolicyArrayOutput {
	return o
}

func (o RepositoryIamPolicyArrayOutput) ToRepositoryIamPolicyArrayOutputWithContext(ctx context.Context) RepositoryIamPolicyArrayOutput {
	return o
}

func (o RepositoryIamPolicyArrayOutput) Index(i pulumi.IntInput) RepositoryIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryIamPolicy {
		return vs[0].([]*RepositoryIamPolicy)[vs[1].(int)]
	}).(RepositoryIamPolicyOutput)
}

type RepositoryIamPolicyMapOutput struct{ *pulumi.OutputState }

func (RepositoryIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryIamPolicy)(nil)).Elem()
}

func (o RepositoryIamPolicyMapOutput) ToRepositoryIamPolicyMapOutput() RepositoryIamPolicyMapOutput {
	return o
}

func (o RepositoryIamPolicyMapOutput) ToRepositoryIamPolicyMapOutputWithContext(ctx context.Context) RepositoryIamPolicyMapOutput {
	return o
}

func (o RepositoryIamPolicyMapOutput) MapIndex(k pulumi.StringInput) RepositoryIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryIamPolicy {
		return vs[0].(map[string]*RepositoryIamPolicy)[vs[1].(string)]
	}).(RepositoryIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamPolicyInput)(nil)).Elem(), &RepositoryIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamPolicyArrayInput)(nil)).Elem(), RepositoryIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamPolicyMapInput)(nil)).Elem(), RepositoryIamPolicyMap{})
	pulumi.RegisterOutputType(RepositoryIamPolicyOutput{})
	pulumi.RegisterOutputType(RepositoryIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(RepositoryIamPolicyMapOutput{})
}
