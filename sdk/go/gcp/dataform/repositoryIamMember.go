// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RepositoryIamMember struct {
	pulumi.CustomResourceState

	Condition  RepositoryIamMemberConditionPtrOutput `pulumi:"condition"`
	Etag       pulumi.StringOutput                   `pulumi:"etag"`
	Member     pulumi.StringOutput                   `pulumi:"member"`
	Project    pulumi.StringOutput                   `pulumi:"project"`
	Region     pulumi.StringOutput                   `pulumi:"region"`
	Repository pulumi.StringOutput                   `pulumi:"repository"`
	Role       pulumi.StringOutput                   `pulumi:"role"`
}

// NewRepositoryIamMember registers a new resource with the given unique name, arguments, and options.
func NewRepositoryIamMember(ctx *pulumi.Context,
	name string, args *RepositoryIamMemberArgs, opts ...pulumi.ResourceOption) (*RepositoryIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RepositoryIamMember
	err := ctx.RegisterResource("gcp:dataform/repositoryIamMember:RepositoryIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryIamMember gets an existing RepositoryIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryIamMemberState, opts ...pulumi.ResourceOption) (*RepositoryIamMember, error) {
	var resource RepositoryIamMember
	err := ctx.ReadResource("gcp:dataform/repositoryIamMember:RepositoryIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryIamMember resources.
type repositoryIamMemberState struct {
	Condition  *RepositoryIamMemberCondition `pulumi:"condition"`
	Etag       *string                       `pulumi:"etag"`
	Member     *string                       `pulumi:"member"`
	Project    *string                       `pulumi:"project"`
	Region     *string                       `pulumi:"region"`
	Repository *string                       `pulumi:"repository"`
	Role       *string                       `pulumi:"role"`
}

type RepositoryIamMemberState struct {
	Condition  RepositoryIamMemberConditionPtrInput
	Etag       pulumi.StringPtrInput
	Member     pulumi.StringPtrInput
	Project    pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
	Repository pulumi.StringPtrInput
	Role       pulumi.StringPtrInput
}

func (RepositoryIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryIamMemberState)(nil)).Elem()
}

type repositoryIamMemberArgs struct {
	Condition  *RepositoryIamMemberCondition `pulumi:"condition"`
	Member     string                        `pulumi:"member"`
	Project    *string                       `pulumi:"project"`
	Region     *string                       `pulumi:"region"`
	Repository string                        `pulumi:"repository"`
	Role       string                        `pulumi:"role"`
}

// The set of arguments for constructing a RepositoryIamMember resource.
type RepositoryIamMemberArgs struct {
	Condition  RepositoryIamMemberConditionPtrInput
	Member     pulumi.StringInput
	Project    pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
	Repository pulumi.StringInput
	Role       pulumi.StringInput
}

func (RepositoryIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryIamMemberArgs)(nil)).Elem()
}

type RepositoryIamMemberInput interface {
	pulumi.Input

	ToRepositoryIamMemberOutput() RepositoryIamMemberOutput
	ToRepositoryIamMemberOutputWithContext(ctx context.Context) RepositoryIamMemberOutput
}

func (*RepositoryIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamMember)(nil)).Elem()
}

func (i *RepositoryIamMember) ToRepositoryIamMemberOutput() RepositoryIamMemberOutput {
	return i.ToRepositoryIamMemberOutputWithContext(context.Background())
}

func (i *RepositoryIamMember) ToRepositoryIamMemberOutputWithContext(ctx context.Context) RepositoryIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamMemberOutput)
}

// RepositoryIamMemberArrayInput is an input type that accepts RepositoryIamMemberArray and RepositoryIamMemberArrayOutput values.
// You can construct a concrete instance of `RepositoryIamMemberArrayInput` via:
//
//	RepositoryIamMemberArray{ RepositoryIamMemberArgs{...} }
type RepositoryIamMemberArrayInput interface {
	pulumi.Input

	ToRepositoryIamMemberArrayOutput() RepositoryIamMemberArrayOutput
	ToRepositoryIamMemberArrayOutputWithContext(context.Context) RepositoryIamMemberArrayOutput
}

type RepositoryIamMemberArray []RepositoryIamMemberInput

func (RepositoryIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryIamMember)(nil)).Elem()
}

func (i RepositoryIamMemberArray) ToRepositoryIamMemberArrayOutput() RepositoryIamMemberArrayOutput {
	return i.ToRepositoryIamMemberArrayOutputWithContext(context.Background())
}

func (i RepositoryIamMemberArray) ToRepositoryIamMemberArrayOutputWithContext(ctx context.Context) RepositoryIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamMemberArrayOutput)
}

// RepositoryIamMemberMapInput is an input type that accepts RepositoryIamMemberMap and RepositoryIamMemberMapOutput values.
// You can construct a concrete instance of `RepositoryIamMemberMapInput` via:
//
//	RepositoryIamMemberMap{ "key": RepositoryIamMemberArgs{...} }
type RepositoryIamMemberMapInput interface {
	pulumi.Input

	ToRepositoryIamMemberMapOutput() RepositoryIamMemberMapOutput
	ToRepositoryIamMemberMapOutputWithContext(context.Context) RepositoryIamMemberMapOutput
}

type RepositoryIamMemberMap map[string]RepositoryIamMemberInput

func (RepositoryIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryIamMember)(nil)).Elem()
}

func (i RepositoryIamMemberMap) ToRepositoryIamMemberMapOutput() RepositoryIamMemberMapOutput {
	return i.ToRepositoryIamMemberMapOutputWithContext(context.Background())
}

func (i RepositoryIamMemberMap) ToRepositoryIamMemberMapOutputWithContext(ctx context.Context) RepositoryIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryIamMemberMapOutput)
}

type RepositoryIamMemberOutput struct{ *pulumi.OutputState }

func (RepositoryIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryIamMember)(nil)).Elem()
}

func (o RepositoryIamMemberOutput) ToRepositoryIamMemberOutput() RepositoryIamMemberOutput {
	return o
}

func (o RepositoryIamMemberOutput) ToRepositoryIamMemberOutputWithContext(ctx context.Context) RepositoryIamMemberOutput {
	return o
}

func (o RepositoryIamMemberOutput) Condition() RepositoryIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *RepositoryIamMember) RepositoryIamMemberConditionPtrOutput { return v.Condition }).(RepositoryIamMemberConditionPtrOutput)
}

func (o RepositoryIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o RepositoryIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

func (o RepositoryIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o RepositoryIamMemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryIamMember) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o RepositoryIamMemberOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryIamMember) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

func (o RepositoryIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type RepositoryIamMemberArrayOutput struct{ *pulumi.OutputState }

func (RepositoryIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryIamMember)(nil)).Elem()
}

func (o RepositoryIamMemberArrayOutput) ToRepositoryIamMemberArrayOutput() RepositoryIamMemberArrayOutput {
	return o
}

func (o RepositoryIamMemberArrayOutput) ToRepositoryIamMemberArrayOutputWithContext(ctx context.Context) RepositoryIamMemberArrayOutput {
	return o
}

func (o RepositoryIamMemberArrayOutput) Index(i pulumi.IntInput) RepositoryIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryIamMember {
		return vs[0].([]*RepositoryIamMember)[vs[1].(int)]
	}).(RepositoryIamMemberOutput)
}

type RepositoryIamMemberMapOutput struct{ *pulumi.OutputState }

func (RepositoryIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryIamMember)(nil)).Elem()
}

func (o RepositoryIamMemberMapOutput) ToRepositoryIamMemberMapOutput() RepositoryIamMemberMapOutput {
	return o
}

func (o RepositoryIamMemberMapOutput) ToRepositoryIamMemberMapOutputWithContext(ctx context.Context) RepositoryIamMemberMapOutput {
	return o
}

func (o RepositoryIamMemberMapOutput) MapIndex(k pulumi.StringInput) RepositoryIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryIamMember {
		return vs[0].(map[string]*RepositoryIamMember)[vs[1].(string)]
	}).(RepositoryIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamMemberInput)(nil)).Elem(), &RepositoryIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamMemberArrayInput)(nil)).Elem(), RepositoryIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryIamMemberMapInput)(nil)).Elem(), RepositoryIamMemberMap{})
	pulumi.RegisterOutputType(RepositoryIamMemberOutput{})
	pulumi.RegisterOutputType(RepositoryIamMemberArrayOutput{})
	pulumi.RegisterOutputType(RepositoryIamMemberMapOutput{})
}
