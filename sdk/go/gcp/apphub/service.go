// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apphub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Service is a network/api interface that exposes some functionality to clients for consumption over the network. Service typically has one or more Workloads behind it. It registers identified service to the Application.
//
// ## Example Usage
//
// ### Apphub Service Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			application, err := apphub.NewApplication(ctx, "application", &apphub.ApplicationArgs{
//				Location:      pulumi.String("us-central1"),
//				ApplicationId: pulumi.String("example-application-1"),
//				Scope: &apphub.ApplicationScopeArgs{
//					Type: pulumi.String("REGIONAL"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			serviceProject, err := organizations.NewProject(ctx, "service_project", &organizations.ProjectArgs{
//				ProjectId:      pulumi.String("project-1"),
//				Name:           pulumi.String("Service Project"),
//				OrgId:          pulumi.String("123456789"),
//				BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
//				DeletionPolicy: pulumi.String("DELETE"),
//			})
//			if err != nil {
//				return err
//			}
//			// Enable Compute API
//			computeServiceProject, err := projects.NewService(ctx, "compute_service_project", &projects.ServiceArgs{
//				Project: serviceProject.ProjectId,
//				Service: pulumi.String("compute.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			wait120s, err := time.NewSleep(ctx, "wait_120s", &time.SleepArgs{
//				CreateDuration: "120s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				computeServiceProject,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = apphub.NewServiceProjectAttachment(ctx, "service_project_attachment", &apphub.ServiceProjectAttachmentArgs{
//				ServiceProjectAttachmentId: serviceProject.ProjectId,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait120s,
//			}))
//			if err != nil {
//				return err
//			}
//			// VPC network
//			ilbNetwork, err := compute.NewNetwork(ctx, "ilb_network", &compute.NetworkArgs{
//				Name:                  pulumi.String("l7-ilb-network"),
//				Project:               serviceProject.ProjectId,
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait120s,
//			}))
//			if err != nil {
//				return err
//			}
//			// backend subnet
//			ilbSubnet, err := compute.NewSubnetwork(ctx, "ilb_subnet", &compute.SubnetworkArgs{
//				Name:        pulumi.String("l7-ilb-subnet"),
//				Project:     serviceProject.ProjectId,
//				IpCidrRange: pulumi.String("10.0.1.0/24"),
//				Region:      pulumi.String("us-central1"),
//				Network:     ilbNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// health check
//			_, err = compute.NewHealthCheck(ctx, "default", &compute.HealthCheckArgs{
//				Name:             pulumi.String("l7-ilb-hc"),
//				Project:          serviceProject.ProjectId,
//				CheckIntervalSec: pulumi.Int(1),
//				TimeoutSec:       pulumi.Int(1),
//				TcpHealthCheck: &compute.HealthCheckTcpHealthCheckArgs{
//					Port: pulumi.Int(80),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait120s,
//			}))
//			if err != nil {
//				return err
//			}
//			// backend service
//			backend, err := compute.NewRegionBackendService(ctx, "backend", &compute.RegionBackendServiceArgs{
//				Name:         pulumi.String("l7-ilb-backend-subnet"),
//				Project:      serviceProject.ProjectId,
//				Region:       pulumi.String("us-central1"),
//				HealthChecks: _default.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// forwarding rule
//			forwardingRule, err := compute.NewForwardingRule(ctx, "forwarding_rule", &compute.ForwardingRuleArgs{
//				Name:                pulumi.String("l7-ilb-forwarding-rule"),
//				Project:             serviceProject.ProjectId,
//				Region:              pulumi.String("us-central1"),
//				IpVersion:           pulumi.String("IPV4"),
//				LoadBalancingScheme: pulumi.String("INTERNAL"),
//				AllPorts:            pulumi.Bool(true),
//				BackendService:      backend.ID(),
//				Network:             ilbNetwork.ID(),
//				Subnetwork:          ilbSubnet.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// discovered service block
//			catalog_service := apphub.GetDiscoveredServiceOutput(ctx, apphub.GetDiscoveredServiceOutputArgs{
//				Location: pulumi.String("us-central1"),
//				ServiceUri: forwardingRule.ID().ApplyT(func(id string) (string, error) {
//					return fmt.Sprintf("//compute.googleapis.com/%v", id), nil
//				}).(pulumi.StringOutput),
//			}, nil)
//			_, err = time.NewSleep(ctx, "wait_120s_for_resource_ingestion", &time.SleepArgs{
//				CreateDuration: "120s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				forwardingRule,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = apphub.NewService(ctx, "example", &apphub.ServiceArgs{
//				Location:      pulumi.String("us-central1"),
//				ApplicationId: application.ApplicationId,
//				ServiceId:     forwardingRule.Name,
//				DiscoveredService: pulumi.String(catalog_service.ApplyT(func(catalog_service apphub.GetDiscoveredServiceResult) (*string, error) {
//					return &catalog_service.Name, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Apphub Service Full
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			application, err := apphub.NewApplication(ctx, "application", &apphub.ApplicationArgs{
//				Location:      pulumi.String("us-central1"),
//				ApplicationId: pulumi.String("example-application-1"),
//				Scope: &apphub.ApplicationScopeArgs{
//					Type: pulumi.String("REGIONAL"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			serviceProject, err := organizations.NewProject(ctx, "service_project", &organizations.ProjectArgs{
//				ProjectId:      pulumi.String("project-1"),
//				Name:           pulumi.String("Service Project"),
//				OrgId:          pulumi.String("123456789"),
//				BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
//				DeletionPolicy: pulumi.String("DELETE"),
//			})
//			if err != nil {
//				return err
//			}
//			// Enable Compute API
//			computeServiceProject, err := projects.NewService(ctx, "compute_service_project", &projects.ServiceArgs{
//				Project: serviceProject.ProjectId,
//				Service: pulumi.String("compute.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			wait120s, err := time.NewSleep(ctx, "wait_120s", &time.SleepArgs{
//				CreateDuration: "120s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				computeServiceProject,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = apphub.NewServiceProjectAttachment(ctx, "service_project_attachment", &apphub.ServiceProjectAttachmentArgs{
//				ServiceProjectAttachmentId: serviceProject.ProjectId,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait120s,
//			}))
//			if err != nil {
//				return err
//			}
//			// VPC network
//			ilbNetwork, err := compute.NewNetwork(ctx, "ilb_network", &compute.NetworkArgs{
//				Name:                  pulumi.String("l7-ilb-network"),
//				Project:               serviceProject.ProjectId,
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait120s,
//			}))
//			if err != nil {
//				return err
//			}
//			// backend subnet
//			ilbSubnet, err := compute.NewSubnetwork(ctx, "ilb_subnet", &compute.SubnetworkArgs{
//				Name:        pulumi.String("l7-ilb-subnet"),
//				Project:     serviceProject.ProjectId,
//				IpCidrRange: pulumi.String("10.0.1.0/24"),
//				Region:      pulumi.String("us-central1"),
//				Network:     ilbNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// health check
//			_, err = compute.NewHealthCheck(ctx, "default", &compute.HealthCheckArgs{
//				Name:             pulumi.String("l7-ilb-hc"),
//				Project:          serviceProject.ProjectId,
//				CheckIntervalSec: pulumi.Int(1),
//				TimeoutSec:       pulumi.Int(1),
//				TcpHealthCheck: &compute.HealthCheckTcpHealthCheckArgs{
//					Port: pulumi.Int(80),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait120s,
//			}))
//			if err != nil {
//				return err
//			}
//			// backend service
//			backend, err := compute.NewRegionBackendService(ctx, "backend", &compute.RegionBackendServiceArgs{
//				Name:         pulumi.String("l7-ilb-backend-subnet"),
//				Project:      serviceProject.ProjectId,
//				Region:       pulumi.String("us-central1"),
//				HealthChecks: _default.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// forwarding rule
//			forwardingRule, err := compute.NewForwardingRule(ctx, "forwarding_rule", &compute.ForwardingRuleArgs{
//				Name:                pulumi.String("l7-ilb-forwarding-rule"),
//				Project:             serviceProject.ProjectId,
//				Region:              pulumi.String("us-central1"),
//				IpVersion:           pulumi.String("IPV4"),
//				LoadBalancingScheme: pulumi.String("INTERNAL"),
//				AllPorts:            pulumi.Bool(true),
//				BackendService:      backend.ID(),
//				Network:             ilbNetwork.ID(),
//				Subnetwork:          ilbSubnet.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// discovered service block
//			catalog_service := apphub.GetDiscoveredServiceOutput(ctx, apphub.GetDiscoveredServiceOutputArgs{
//				Location: pulumi.String("us-central1"),
//				ServiceUri: forwardingRule.ID().ApplyT(func(id string) (string, error) {
//					return fmt.Sprintf("//compute.googleapis.com/%v", id), nil
//				}).(pulumi.StringOutput),
//			}, nil)
//			_, err = time.NewSleep(ctx, "wait_120s_for_resource_ingestion", &time.SleepArgs{
//				CreateDuration: "120s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				forwardingRule,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = apphub.NewService(ctx, "example", &apphub.ServiceArgs{
//				Location:      pulumi.String("us-central1"),
//				ApplicationId: application.ApplicationId,
//				ServiceId:     forwardingRule.Name,
//				DiscoveredService: pulumi.String(catalog_service.ApplyT(func(catalog_service apphub.GetDiscoveredServiceResult) (*string, error) {
//					return &catalog_service.Name, nil
//				}).(pulumi.StringPtrOutput)),
//				DisplayName: pulumi.String("Example Service Full"),
//				Description: pulumi.String("Register service for testing"),
//				Attributes: &apphub.ServiceAttributesArgs{
//					Environment: &apphub.ServiceAttributesEnvironmentArgs{
//						Type: pulumi.String("STAGING"),
//					},
//					Criticality: &apphub.ServiceAttributesCriticalityArgs{
//						Type: pulumi.String("MISSION_CRITICAL"),
//					},
//					BusinessOwners: apphub.ServiceAttributesBusinessOwnerArray{
//						&apphub.ServiceAttributesBusinessOwnerArgs{
//							DisplayName: pulumi.String("Alice"),
//							Email:       pulumi.String("alice@google.com"),
//						},
//					},
//					DeveloperOwners: apphub.ServiceAttributesDeveloperOwnerArray{
//						&apphub.ServiceAttributesDeveloperOwnerArgs{
//							DisplayName: pulumi.String("Bob"),
//							Email:       pulumi.String("bob@google.com"),
//						},
//					},
//					OperatorOwners: apphub.ServiceAttributesOperatorOwnerArray{
//						&apphub.ServiceAttributesOperatorOwnerArgs{
//							DisplayName: pulumi.String("Charlie"),
//							Email:       pulumi.String("charlie@google.com"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Service can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/applications/{{application_id}}/services/{{service_id}}`
//
// * `{{project}}/{{location}}/{{application_id}}/{{service_id}}`
//
// * `{{location}}/{{application_id}}/{{service_id}}`
//
// When using the `pulumi import` command, Service can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:apphub/service:Service default projects/{{project}}/locations/{{location}}/applications/{{application_id}}/services/{{service_id}}
// ```
//
// ```sh
// $ pulumi import gcp:apphub/service:Service default {{project}}/{{location}}/{{application_id}}/{{service_id}}
// ```
//
// ```sh
// $ pulumi import gcp:apphub/service:Service default {{location}}/{{application_id}}/{{service_id}}
// ```
type Service struct {
	pulumi.CustomResourceState

	// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Consumer provided attributes.
	// Structure is documented below.
	Attributes ServiceAttributesPtrOutput `pulumi:"attributes"`
	// Output only. Create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User-defined description of a Service.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Immutable. The resource name of the original discovered service.
	DiscoveredService pulumi.StringOutput `pulumi:"discoveredService"`
	// User-defined name for the Service.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The resource name of a Service. Format:
	// "projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}"
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The Service identifier.
	//
	// ***
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// Properties of an underlying cloud resource that can comprise a Service.
	// Structure is documented below.
	ServiceProperties ServiceServicePropertyArrayOutput `pulumi:"serviceProperties"`
	// Reference to an underlying networking resource that can comprise a Service.
	// Structure is documented below.
	ServiceReferences ServiceServiceReferenceArrayOutput `pulumi:"serviceReferences"`
	// Output only. Service state. Possible values: STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
	State pulumi.StringOutput `pulumi:"state"`
	// Output only. A universally unique identifier (UUID) for the `Service` in the UUID4
	// format.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. Update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.DiscoveredService == nil {
		return nil, errors.New("invalid value for required argument 'DiscoveredService'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("gcp:apphub/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("gcp:apphub/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
	ApplicationId *string `pulumi:"applicationId"`
	// Consumer provided attributes.
	// Structure is documented below.
	Attributes *ServiceAttributes `pulumi:"attributes"`
	// Output only. Create time.
	CreateTime *string `pulumi:"createTime"`
	// User-defined description of a Service.
	Description *string `pulumi:"description"`
	// Immutable. The resource name of the original discovered service.
	DiscoveredService *string `pulumi:"discoveredService"`
	// User-defined name for the Service.
	DisplayName *string `pulumi:"displayName"`
	// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
	Location *string `pulumi:"location"`
	// Identifier. The resource name of a Service. Format:
	// "projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}"
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The Service identifier.
	//
	// ***
	ServiceId *string `pulumi:"serviceId"`
	// Properties of an underlying cloud resource that can comprise a Service.
	// Structure is documented below.
	ServiceProperties []ServiceServiceProperty `pulumi:"serviceProperties"`
	// Reference to an underlying networking resource that can comprise a Service.
	// Structure is documented below.
	ServiceReferences []ServiceServiceReference `pulumi:"serviceReferences"`
	// Output only. Service state. Possible values: STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
	State *string `pulumi:"state"`
	// Output only. A universally unique identifier (UUID) for the `Service` in the UUID4
	// format.
	Uid *string `pulumi:"uid"`
	// Output only. Update time.
	UpdateTime *string `pulumi:"updateTime"`
}

type ServiceState struct {
	// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
	ApplicationId pulumi.StringPtrInput
	// Consumer provided attributes.
	// Structure is documented below.
	Attributes ServiceAttributesPtrInput
	// Output only. Create time.
	CreateTime pulumi.StringPtrInput
	// User-defined description of a Service.
	Description pulumi.StringPtrInput
	// Immutable. The resource name of the original discovered service.
	DiscoveredService pulumi.StringPtrInput
	// User-defined name for the Service.
	DisplayName pulumi.StringPtrInput
	// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
	Location pulumi.StringPtrInput
	// Identifier. The resource name of a Service. Format:
	// "projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}"
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The Service identifier.
	//
	// ***
	ServiceId pulumi.StringPtrInput
	// Properties of an underlying cloud resource that can comprise a Service.
	// Structure is documented below.
	ServiceProperties ServiceServicePropertyArrayInput
	// Reference to an underlying networking resource that can comprise a Service.
	// Structure is documented below.
	ServiceReferences ServiceServiceReferenceArrayInput
	// Output only. Service state. Possible values: STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
	State pulumi.StringPtrInput
	// Output only. A universally unique identifier (UUID) for the `Service` in the UUID4
	// format.
	Uid pulumi.StringPtrInput
	// Output only. Update time.
	UpdateTime pulumi.StringPtrInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
	ApplicationId string `pulumi:"applicationId"`
	// Consumer provided attributes.
	// Structure is documented below.
	Attributes *ServiceAttributes `pulumi:"attributes"`
	// User-defined description of a Service.
	Description *string `pulumi:"description"`
	// Immutable. The resource name of the original discovered service.
	DiscoveredService string `pulumi:"discoveredService"`
	// User-defined name for the Service.
	DisplayName *string `pulumi:"displayName"`
	// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The Service identifier.
	//
	// ***
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
	ApplicationId pulumi.StringInput
	// Consumer provided attributes.
	// Structure is documented below.
	Attributes ServiceAttributesPtrInput
	// User-defined description of a Service.
	Description pulumi.StringPtrInput
	// Immutable. The resource name of the original discovered service.
	DiscoveredService pulumi.StringInput
	// User-defined name for the Service.
	DisplayName pulumi.StringPtrInput
	// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The Service identifier.
	//
	// ***
	ServiceId pulumi.StringInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//	ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//	ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
func (o ServiceOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Consumer provided attributes.
// Structure is documented below.
func (o ServiceOutput) Attributes() ServiceAttributesPtrOutput {
	return o.ApplyT(func(v *Service) ServiceAttributesPtrOutput { return v.Attributes }).(ServiceAttributesPtrOutput)
}

// Output only. Create time.
func (o ServiceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// User-defined description of a Service.
func (o ServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Immutable. The resource name of the original discovered service.
func (o ServiceOutput) DiscoveredService() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.DiscoveredService }).(pulumi.StringOutput)
}

// User-defined name for the Service.
func (o ServiceOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
func (o ServiceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name of a Service. Format:
// "projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}"
func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ServiceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The Service identifier.
//
// ***
func (o ServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// Properties of an underlying cloud resource that can comprise a Service.
// Structure is documented below.
func (o ServiceOutput) ServiceProperties() ServiceServicePropertyArrayOutput {
	return o.ApplyT(func(v *Service) ServiceServicePropertyArrayOutput { return v.ServiceProperties }).(ServiceServicePropertyArrayOutput)
}

// Reference to an underlying networking resource that can comprise a Service.
// Structure is documented below.
func (o ServiceOutput) ServiceReferences() ServiceServiceReferenceArrayOutput {
	return o.ApplyT(func(v *Service) ServiceServiceReferenceArrayOutput { return v.ServiceReferences }).(ServiceServiceReferenceArrayOutput)
}

// Output only. Service state. Possible values: STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
func (o ServiceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Output only. A universally unique identifier (UUID) for the `Service` in the UUID4
// format.
func (o ServiceOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Output only. Update time.
func (o ServiceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
