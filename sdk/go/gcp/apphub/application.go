// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apphub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Application is a functional grouping of Services and Workloads that helps achieve a desired end-to-end business functionality. Services and Workloads are owned by the Application.
//
// ## Example Usage
//
// ### Apphub Application Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := apphub.NewApplication(ctx, "example", &apphub.ApplicationArgs{
//				Location:      pulumi.String("us-east1"),
//				ApplicationId: pulumi.String("example-application"),
//				Scope: &apphub.ApplicationScopeArgs{
//					Type: pulumi.String("REGIONAL"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Apphub Application Global Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := apphub.NewApplication(ctx, "example", &apphub.ApplicationArgs{
//				Location:      pulumi.String("global"),
//				ApplicationId: pulumi.String("example-application"),
//				Scope: &apphub.ApplicationScopeArgs{
//					Type: pulumi.String("GLOBAL"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Apphub Application Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := apphub.NewApplication(ctx, "example2", &apphub.ApplicationArgs{
//				Location:      pulumi.String("us-east1"),
//				ApplicationId: pulumi.String("example-application"),
//				DisplayName:   pulumi.String("Application Full"),
//				Scope: &apphub.ApplicationScopeArgs{
//					Type: pulumi.String("REGIONAL"),
//				},
//				Description: pulumi.String("Application for testing"),
//				Attributes: &apphub.ApplicationAttributesArgs{
//					Environment: &apphub.ApplicationAttributesEnvironmentArgs{
//						Type: pulumi.String("STAGING"),
//					},
//					Criticality: &apphub.ApplicationAttributesCriticalityArgs{
//						Type: pulumi.String("MISSION_CRITICAL"),
//					},
//					BusinessOwners: apphub.ApplicationAttributesBusinessOwnerArray{
//						&apphub.ApplicationAttributesBusinessOwnerArgs{
//							DisplayName: pulumi.String("Alice"),
//							Email:       pulumi.String("alice@google.com"),
//						},
//					},
//					DeveloperOwners: apphub.ApplicationAttributesDeveloperOwnerArray{
//						&apphub.ApplicationAttributesDeveloperOwnerArgs{
//							DisplayName: pulumi.String("Bob"),
//							Email:       pulumi.String("bob@google.com"),
//						},
//					},
//					OperatorOwners: apphub.ApplicationAttributesOperatorOwnerArray{
//						&apphub.ApplicationAttributesOperatorOwnerArgs{
//							DisplayName: pulumi.String("Charlie"),
//							Email:       pulumi.String("charlie@google.com"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Application can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/applications/{{application_id}}`
//
// * `{{project}}/{{location}}/{{application_id}}`
//
// * `{{location}}/{{application_id}}`
//
// When using the `pulumi import` command, Application can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:apphub/application:Application default projects/{{project}}/locations/{{location}}/applications/{{application_id}}
// ```
//
// ```sh
// $ pulumi import gcp:apphub/application:Application default {{project}}/{{location}}/{{application_id}}
// ```
//
// ```sh
// $ pulumi import gcp:apphub/application:Application default {{location}}/{{application_id}}
// ```
type Application struct {
	pulumi.CustomResourceState

	// Required. The Application identifier.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Consumer provided attributes.
	Attributes ApplicationAttributesPtrOutput `pulumi:"attributes"`
	// Output only. Create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. User-defined description of an Application.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Optional. User-defined name for the Application.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Part of `parent`. See documentation of `projectsId`.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The resource name of an Application. Format:
	// "projects/{host-project-id}/locations/{location}/applications/{application-id}"
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Scope of an application.
	// Structure is documented below.
	Scope ApplicationScopeOutput `pulumi:"scope"`
	// Output only. Application state.
	// Possible values:
	// STATE_UNSPECIFIED
	// CREATING
	// ACTIVE
	// DELETING
	State pulumi.StringOutput `pulumi:"state"`
	// Output only. A universally unique identifier (in UUID4 format) for the `Application`.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. Update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("gcp:apphub/application:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("gcp:apphub/application:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
	// Required. The Application identifier.
	ApplicationId *string `pulumi:"applicationId"`
	// Consumer provided attributes.
	Attributes *ApplicationAttributes `pulumi:"attributes"`
	// Output only. Create time.
	CreateTime *string `pulumi:"createTime"`
	// Optional. User-defined description of an Application.
	Description *string `pulumi:"description"`
	// Optional. User-defined name for the Application.
	DisplayName *string `pulumi:"displayName"`
	// Part of `parent`. See documentation of `projectsId`.
	Location *string `pulumi:"location"`
	// Identifier. The resource name of an Application. Format:
	// "projects/{host-project-id}/locations/{location}/applications/{application-id}"
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Scope of an application.
	// Structure is documented below.
	Scope *ApplicationScope `pulumi:"scope"`
	// Output only. Application state.
	// Possible values:
	// STATE_UNSPECIFIED
	// CREATING
	// ACTIVE
	// DELETING
	State *string `pulumi:"state"`
	// Output only. A universally unique identifier (in UUID4 format) for the `Application`.
	Uid *string `pulumi:"uid"`
	// Output only. Update time.
	UpdateTime *string `pulumi:"updateTime"`
}

type ApplicationState struct {
	// Required. The Application identifier.
	ApplicationId pulumi.StringPtrInput
	// Consumer provided attributes.
	Attributes ApplicationAttributesPtrInput
	// Output only. Create time.
	CreateTime pulumi.StringPtrInput
	// Optional. User-defined description of an Application.
	Description pulumi.StringPtrInput
	// Optional. User-defined name for the Application.
	DisplayName pulumi.StringPtrInput
	// Part of `parent`. See documentation of `projectsId`.
	Location pulumi.StringPtrInput
	// Identifier. The resource name of an Application. Format:
	// "projects/{host-project-id}/locations/{location}/applications/{application-id}"
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Scope of an application.
	// Structure is documented below.
	Scope ApplicationScopePtrInput
	// Output only. Application state.
	// Possible values:
	// STATE_UNSPECIFIED
	// CREATING
	// ACTIVE
	// DELETING
	State pulumi.StringPtrInput
	// Output only. A universally unique identifier (in UUID4 format) for the `Application`.
	Uid pulumi.StringPtrInput
	// Output only. Update time.
	UpdateTime pulumi.StringPtrInput
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// Required. The Application identifier.
	ApplicationId string `pulumi:"applicationId"`
	// Consumer provided attributes.
	Attributes *ApplicationAttributes `pulumi:"attributes"`
	// Optional. User-defined description of an Application.
	Description *string `pulumi:"description"`
	// Optional. User-defined name for the Application.
	DisplayName *string `pulumi:"displayName"`
	// Part of `parent`. See documentation of `projectsId`.
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// Scope of an application.
	// Structure is documented below.
	Scope ApplicationScope `pulumi:"scope"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// Required. The Application identifier.
	ApplicationId pulumi.StringInput
	// Consumer provided attributes.
	Attributes ApplicationAttributesPtrInput
	// Optional. User-defined description of an Application.
	Description pulumi.StringPtrInput
	// Optional. User-defined name for the Application.
	DisplayName pulumi.StringPtrInput
	// Part of `parent`. See documentation of `projectsId`.
	Location pulumi.StringInput
	Project  pulumi.StringPtrInput
	// Scope of an application.
	// Structure is documented below.
	Scope ApplicationScopeInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

// ApplicationArrayInput is an input type that accepts ApplicationArray and ApplicationArrayOutput values.
// You can construct a concrete instance of `ApplicationArrayInput` via:
//
//	ApplicationArray{ ApplicationArgs{...} }
type ApplicationArrayInput interface {
	pulumi.Input

	ToApplicationArrayOutput() ApplicationArrayOutput
	ToApplicationArrayOutputWithContext(context.Context) ApplicationArrayOutput
}

type ApplicationArray []ApplicationInput

func (ApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (i ApplicationArray) ToApplicationArrayOutput() ApplicationArrayOutput {
	return i.ToApplicationArrayOutputWithContext(context.Background())
}

func (i ApplicationArray) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationArrayOutput)
}

// ApplicationMapInput is an input type that accepts ApplicationMap and ApplicationMapOutput values.
// You can construct a concrete instance of `ApplicationMapInput` via:
//
//	ApplicationMap{ "key": ApplicationArgs{...} }
type ApplicationMapInput interface {
	pulumi.Input

	ToApplicationMapOutput() ApplicationMapOutput
	ToApplicationMapOutputWithContext(context.Context) ApplicationMapOutput
}

type ApplicationMap map[string]ApplicationInput

func (ApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (i ApplicationMap) ToApplicationMapOutput() ApplicationMapOutput {
	return i.ToApplicationMapOutputWithContext(context.Background())
}

func (i ApplicationMap) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMapOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// Required. The Application identifier.
func (o ApplicationOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Consumer provided attributes.
func (o ApplicationOutput) Attributes() ApplicationAttributesPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationAttributesPtrOutput { return v.Attributes }).(ApplicationAttributesPtrOutput)
}

// Output only. Create time.
func (o ApplicationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. User-defined description of an Application.
func (o ApplicationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional. User-defined name for the Application.
func (o ApplicationOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Part of `parent`. See documentation of `projectsId`.
func (o ApplicationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name of an Application. Format:
// "projects/{host-project-id}/locations/{location}/applications/{application-id}"
func (o ApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Scope of an application.
// Structure is documented below.
func (o ApplicationOutput) Scope() ApplicationScopeOutput {
	return o.ApplyT(func(v *Application) ApplicationScopeOutput { return v.Scope }).(ApplicationScopeOutput)
}

// Output only. Application state.
// Possible values:
// STATE_UNSPECIFIED
// CREATING
// ACTIVE
// DELETING
func (o ApplicationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Output only. A universally unique identifier (in UUID4 format) for the `Application`.
func (o ApplicationOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Output only. Update time.
func (o ApplicationOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ApplicationArrayOutput struct{ *pulumi.OutputState }

func (ApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (o ApplicationArrayOutput) ToApplicationArrayOutput() ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) Index(i pulumi.IntInput) ApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Application {
		return vs[0].([]*Application)[vs[1].(int)]
	}).(ApplicationOutput)
}

type ApplicationMapOutput struct{ *pulumi.OutputState }

func (ApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (o ApplicationMapOutput) ToApplicationMapOutput() ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) MapIndex(k pulumi.StringInput) ApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Application {
		return vs[0].(map[string]*Application)[vs[1].(string)]
	}).(ApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationArrayInput)(nil)).Elem(), ApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMapInput)(nil)).Elem(), ApplicationMap{})
	pulumi.RegisterOutputType(ApplicationOutput{})
	pulumi.RegisterOutputType(ApplicationArrayOutput{})
	pulumi.RegisterOutputType(ApplicationMapOutput{})
}
