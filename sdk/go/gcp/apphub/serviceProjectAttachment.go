// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apphub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a Service project attachment to the Host Project.
//
// ## Example Usage
//
// ### Service Project Attachment Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			serviceProject, err := organizations.NewProject(ctx, "service_project", &organizations.ProjectArgs{
//				ProjectId:      pulumi.String("project-1"),
//				Name:           pulumi.String("Service Project"),
//				OrgId:          pulumi.String("123456789"),
//				DeletionPolicy: pulumi.String("DELETE"),
//			})
//			if err != nil {
//				return err
//			}
//			wait120s, err := time.NewSleep(ctx, "wait_120s", &time.SleepArgs{
//				CreateDuration: "120s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				serviceProject,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = apphub.NewServiceProjectAttachment(ctx, "example", &apphub.ServiceProjectAttachmentArgs{
//				ServiceProjectAttachmentId: serviceProject.ProjectId,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait120s,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Service Project Attachment Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			serviceProjectFull, err := organizations.NewProject(ctx, "service_project_full", &organizations.ProjectArgs{
//				ProjectId:      pulumi.String("project-1"),
//				Name:           pulumi.String("Service Project Full"),
//				OrgId:          pulumi.String("123456789"),
//				DeletionPolicy: pulumi.String("DELETE"),
//			})
//			if err != nil {
//				return err
//			}
//			wait120s, err := time.NewSleep(ctx, "wait_120s", &time.SleepArgs{
//				CreateDuration: "120s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				serviceProjectFull,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = apphub.NewServiceProjectAttachment(ctx, "example2", &apphub.ServiceProjectAttachmentArgs{
//				ServiceProjectAttachmentId: serviceProjectFull.ProjectId,
//				ServiceProject:             serviceProjectFull.ProjectId,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait120s,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ServiceProjectAttachment can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/global/serviceProjectAttachments/{{service_project_attachment_id}}`
//
// * `{{project}}/{{service_project_attachment_id}}`
//
// * `{{service_project_attachment_id}}`
//
// When using the `pulumi import` command, ServiceProjectAttachment can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:apphub/serviceProjectAttachment:ServiceProjectAttachment default projects/{{project}}/locations/global/serviceProjectAttachments/{{service_project_attachment_id}}
// ```
//
// ```sh
// $ pulumi import gcp:apphub/serviceProjectAttachment:ServiceProjectAttachment default {{project}}/{{service_project_attachment_id}}
// ```
//
// ```sh
// $ pulumi import gcp:apphub/serviceProjectAttachment:ServiceProjectAttachment default {{service_project_attachment_id}}
// ```
type ServiceProjectAttachment struct {
	pulumi.CustomResourceState

	// Output only. Create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// "Identifier. The resource name of a ServiceProjectAttachment. Format:\"projects/{host-project-id}/locations/global/serviceProjectAttachments/{service-project-id}.\""
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// "Immutable. Service project name in the format: \"projects/abc\"
	// or \"projects/123\". As input, project name with either project id or number
	// are accepted. As output, this field will contain project number."
	ServiceProject pulumi.StringPtrOutput `pulumi:"serviceProject"`
	// Required. The service project attachment identifier must contain the projectId of the service project specified in the service_project_attachment.service_project field. Hint: "projects/{project_id}"
	//
	// ***
	ServiceProjectAttachmentId pulumi.StringOutput `pulumi:"serviceProjectAttachmentId"`
	// ServiceProjectAttachment state.
	State pulumi.StringOutput `pulumi:"state"`
	// Output only. A globally unique identifier (in UUID4 format) for the `ServiceProjectAttachment`.
	Uid pulumi.StringOutput `pulumi:"uid"`
}

// NewServiceProjectAttachment registers a new resource with the given unique name, arguments, and options.
func NewServiceProjectAttachment(ctx *pulumi.Context,
	name string, args *ServiceProjectAttachmentArgs, opts ...pulumi.ResourceOption) (*ServiceProjectAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceProjectAttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceProjectAttachmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceProjectAttachment
	err := ctx.RegisterResource("gcp:apphub/serviceProjectAttachment:ServiceProjectAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceProjectAttachment gets an existing ServiceProjectAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceProjectAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceProjectAttachmentState, opts ...pulumi.ResourceOption) (*ServiceProjectAttachment, error) {
	var resource ServiceProjectAttachment
	err := ctx.ReadResource("gcp:apphub/serviceProjectAttachment:ServiceProjectAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceProjectAttachment resources.
type serviceProjectAttachmentState struct {
	// Output only. Create time.
	CreateTime *string `pulumi:"createTime"`
	// "Identifier. The resource name of a ServiceProjectAttachment. Format:\"projects/{host-project-id}/locations/global/serviceProjectAttachments/{service-project-id}.\""
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// "Immutable. Service project name in the format: \"projects/abc\"
	// or \"projects/123\". As input, project name with either project id or number
	// are accepted. As output, this field will contain project number."
	ServiceProject *string `pulumi:"serviceProject"`
	// Required. The service project attachment identifier must contain the projectId of the service project specified in the service_project_attachment.service_project field. Hint: "projects/{project_id}"
	//
	// ***
	ServiceProjectAttachmentId *string `pulumi:"serviceProjectAttachmentId"`
	// ServiceProjectAttachment state.
	State *string `pulumi:"state"`
	// Output only. A globally unique identifier (in UUID4 format) for the `ServiceProjectAttachment`.
	Uid *string `pulumi:"uid"`
}

type ServiceProjectAttachmentState struct {
	// Output only. Create time.
	CreateTime pulumi.StringPtrInput
	// "Identifier. The resource name of a ServiceProjectAttachment. Format:\"projects/{host-project-id}/locations/global/serviceProjectAttachments/{service-project-id}.\""
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// "Immutable. Service project name in the format: \"projects/abc\"
	// or \"projects/123\". As input, project name with either project id or number
	// are accepted. As output, this field will contain project number."
	ServiceProject pulumi.StringPtrInput
	// Required. The service project attachment identifier must contain the projectId of the service project specified in the service_project_attachment.service_project field. Hint: "projects/{project_id}"
	//
	// ***
	ServiceProjectAttachmentId pulumi.StringPtrInput
	// ServiceProjectAttachment state.
	State pulumi.StringPtrInput
	// Output only. A globally unique identifier (in UUID4 format) for the `ServiceProjectAttachment`.
	Uid pulumi.StringPtrInput
}

func (ServiceProjectAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceProjectAttachmentState)(nil)).Elem()
}

type serviceProjectAttachmentArgs struct {
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// "Immutable. Service project name in the format: \"projects/abc\"
	// or \"projects/123\". As input, project name with either project id or number
	// are accepted. As output, this field will contain project number."
	ServiceProject *string `pulumi:"serviceProject"`
	// Required. The service project attachment identifier must contain the projectId of the service project specified in the service_project_attachment.service_project field. Hint: "projects/{project_id}"
	//
	// ***
	ServiceProjectAttachmentId string `pulumi:"serviceProjectAttachmentId"`
}

// The set of arguments for constructing a ServiceProjectAttachment resource.
type ServiceProjectAttachmentArgs struct {
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// "Immutable. Service project name in the format: \"projects/abc\"
	// or \"projects/123\". As input, project name with either project id or number
	// are accepted. As output, this field will contain project number."
	ServiceProject pulumi.StringPtrInput
	// Required. The service project attachment identifier must contain the projectId of the service project specified in the service_project_attachment.service_project field. Hint: "projects/{project_id}"
	//
	// ***
	ServiceProjectAttachmentId pulumi.StringInput
}

func (ServiceProjectAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceProjectAttachmentArgs)(nil)).Elem()
}

type ServiceProjectAttachmentInput interface {
	pulumi.Input

	ToServiceProjectAttachmentOutput() ServiceProjectAttachmentOutput
	ToServiceProjectAttachmentOutputWithContext(ctx context.Context) ServiceProjectAttachmentOutput
}

func (*ServiceProjectAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceProjectAttachment)(nil)).Elem()
}

func (i *ServiceProjectAttachment) ToServiceProjectAttachmentOutput() ServiceProjectAttachmentOutput {
	return i.ToServiceProjectAttachmentOutputWithContext(context.Background())
}

func (i *ServiceProjectAttachment) ToServiceProjectAttachmentOutputWithContext(ctx context.Context) ServiceProjectAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceProjectAttachmentOutput)
}

// ServiceProjectAttachmentArrayInput is an input type that accepts ServiceProjectAttachmentArray and ServiceProjectAttachmentArrayOutput values.
// You can construct a concrete instance of `ServiceProjectAttachmentArrayInput` via:
//
//	ServiceProjectAttachmentArray{ ServiceProjectAttachmentArgs{...} }
type ServiceProjectAttachmentArrayInput interface {
	pulumi.Input

	ToServiceProjectAttachmentArrayOutput() ServiceProjectAttachmentArrayOutput
	ToServiceProjectAttachmentArrayOutputWithContext(context.Context) ServiceProjectAttachmentArrayOutput
}

type ServiceProjectAttachmentArray []ServiceProjectAttachmentInput

func (ServiceProjectAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceProjectAttachment)(nil)).Elem()
}

func (i ServiceProjectAttachmentArray) ToServiceProjectAttachmentArrayOutput() ServiceProjectAttachmentArrayOutput {
	return i.ToServiceProjectAttachmentArrayOutputWithContext(context.Background())
}

func (i ServiceProjectAttachmentArray) ToServiceProjectAttachmentArrayOutputWithContext(ctx context.Context) ServiceProjectAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceProjectAttachmentArrayOutput)
}

// ServiceProjectAttachmentMapInput is an input type that accepts ServiceProjectAttachmentMap and ServiceProjectAttachmentMapOutput values.
// You can construct a concrete instance of `ServiceProjectAttachmentMapInput` via:
//
//	ServiceProjectAttachmentMap{ "key": ServiceProjectAttachmentArgs{...} }
type ServiceProjectAttachmentMapInput interface {
	pulumi.Input

	ToServiceProjectAttachmentMapOutput() ServiceProjectAttachmentMapOutput
	ToServiceProjectAttachmentMapOutputWithContext(context.Context) ServiceProjectAttachmentMapOutput
}

type ServiceProjectAttachmentMap map[string]ServiceProjectAttachmentInput

func (ServiceProjectAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceProjectAttachment)(nil)).Elem()
}

func (i ServiceProjectAttachmentMap) ToServiceProjectAttachmentMapOutput() ServiceProjectAttachmentMapOutput {
	return i.ToServiceProjectAttachmentMapOutputWithContext(context.Background())
}

func (i ServiceProjectAttachmentMap) ToServiceProjectAttachmentMapOutputWithContext(ctx context.Context) ServiceProjectAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceProjectAttachmentMapOutput)
}

type ServiceProjectAttachmentOutput struct{ *pulumi.OutputState }

func (ServiceProjectAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceProjectAttachment)(nil)).Elem()
}

func (o ServiceProjectAttachmentOutput) ToServiceProjectAttachmentOutput() ServiceProjectAttachmentOutput {
	return o
}

func (o ServiceProjectAttachmentOutput) ToServiceProjectAttachmentOutputWithContext(ctx context.Context) ServiceProjectAttachmentOutput {
	return o
}

// Output only. Create time.
func (o ServiceProjectAttachmentOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceProjectAttachment) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// "Identifier. The resource name of a ServiceProjectAttachment. Format:\"projects/{host-project-id}/locations/global/serviceProjectAttachments/{service-project-id}.\""
func (o ServiceProjectAttachmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceProjectAttachment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ServiceProjectAttachmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceProjectAttachment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// "Immutable. Service project name in the format: \"projects/abc\"
// or \"projects/123\". As input, project name with either project id or number
// are accepted. As output, this field will contain project number."
func (o ServiceProjectAttachmentOutput) ServiceProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceProjectAttachment) pulumi.StringPtrOutput { return v.ServiceProject }).(pulumi.StringPtrOutput)
}

// Required. The service project attachment identifier must contain the projectId of the service project specified in the service_project_attachment.service_project field. Hint: "projects/{project_id}"
//
// ***
func (o ServiceProjectAttachmentOutput) ServiceProjectAttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceProjectAttachment) pulumi.StringOutput { return v.ServiceProjectAttachmentId }).(pulumi.StringOutput)
}

// ServiceProjectAttachment state.
func (o ServiceProjectAttachmentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceProjectAttachment) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Output only. A globally unique identifier (in UUID4 format) for the `ServiceProjectAttachment`.
func (o ServiceProjectAttachmentOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceProjectAttachment) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

type ServiceProjectAttachmentArrayOutput struct{ *pulumi.OutputState }

func (ServiceProjectAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceProjectAttachment)(nil)).Elem()
}

func (o ServiceProjectAttachmentArrayOutput) ToServiceProjectAttachmentArrayOutput() ServiceProjectAttachmentArrayOutput {
	return o
}

func (o ServiceProjectAttachmentArrayOutput) ToServiceProjectAttachmentArrayOutputWithContext(ctx context.Context) ServiceProjectAttachmentArrayOutput {
	return o
}

func (o ServiceProjectAttachmentArrayOutput) Index(i pulumi.IntInput) ServiceProjectAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceProjectAttachment {
		return vs[0].([]*ServiceProjectAttachment)[vs[1].(int)]
	}).(ServiceProjectAttachmentOutput)
}

type ServiceProjectAttachmentMapOutput struct{ *pulumi.OutputState }

func (ServiceProjectAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceProjectAttachment)(nil)).Elem()
}

func (o ServiceProjectAttachmentMapOutput) ToServiceProjectAttachmentMapOutput() ServiceProjectAttachmentMapOutput {
	return o
}

func (o ServiceProjectAttachmentMapOutput) ToServiceProjectAttachmentMapOutputWithContext(ctx context.Context) ServiceProjectAttachmentMapOutput {
	return o
}

func (o ServiceProjectAttachmentMapOutput) MapIndex(k pulumi.StringInput) ServiceProjectAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceProjectAttachment {
		return vs[0].(map[string]*ServiceProjectAttachment)[vs[1].(string)]
	}).(ServiceProjectAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceProjectAttachmentInput)(nil)).Elem(), &ServiceProjectAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceProjectAttachmentArrayInput)(nil)).Elem(), ServiceProjectAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceProjectAttachmentMapInput)(nil)).Elem(), ServiceProjectAttachmentMap{})
	pulumi.RegisterOutputType(ServiceProjectAttachmentOutput{})
	pulumi.RegisterOutputType(ServiceProjectAttachmentArrayOutput{})
	pulumi.RegisterOutputType(ServiceProjectAttachmentMapOutput{})
}
