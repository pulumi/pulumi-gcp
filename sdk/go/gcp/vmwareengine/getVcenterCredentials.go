// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmwareengine

import (
	"context"
	"errors"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get Vcenter credentials for a Private Cloud.
//
// To get more information about private cloud Vcenter credentials, see:
// * [API documentation](https://cloud.google.com/vmware-engine/docs/reference/rest/v1/projects.locations.privateClouds/showVcenterCredentials)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vmwareengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vmwareengine.GetVcenterCredentials(ctx, &vmwareengine.GetVcenterCredentialsArgs{
//				Parent: "projects/my-project/locations/us-west1-a/privateClouds/my-cloud",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVcenterCredentials(ctx *pulumi.Context, args *GetVcenterCredentialsArgs, opts ...pulumi.InvokeOption) (*GetVcenterCredentialsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	invokeOpts, optsErr := pulumi.NewInvokeOptions(opts...)
	if optsErr != nil {
		return &GetVcenterCredentialsResult{}, optsErr
	}
	if len(invokeOpts.DependsOn) > 0 {
		return &GetVcenterCredentialsResult{}, errors.New("DependsOn is not supported for direct form invoke GetVcenterCredentials, use GetVcenterCredentialsOutput instead")
	}
	if len(invokeOpts.DependsOnInputs) > 0 {
		return &GetVcenterCredentialsResult{}, errors.New("DependsOnInputs is not supported for direct form invoke GetVcenterCredentials, use GetVcenterCredentialsOutput instead")
	}
	var rv GetVcenterCredentialsResult
	err := ctx.Invoke("gcp:vmwareengine/getVcenterCredentials:getVcenterCredentials", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVcenterCredentials.
type GetVcenterCredentialsArgs struct {
	// The resource name of the private cloud which contains the Vcenter.
	Parent string `pulumi:"parent"`
}

// A collection of values returned by getVcenterCredentials.
type GetVcenterCredentialsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id     string `pulumi:"id"`
	Parent string `pulumi:"parent"`
	// The password of the Vcenter Credential.
	Password string `pulumi:"password"`
	// The username of the Vcenter Credential.
	Username string `pulumi:"username"`
}

func GetVcenterCredentialsOutput(ctx *pulumi.Context, args GetVcenterCredentialsOutputArgs, opts ...pulumi.InvokeOption) GetVcenterCredentialsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetVcenterCredentialsResultOutput, error) {
			args := v.(GetVcenterCredentialsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetVcenterCredentialsResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("gcp:vmwareengine/getVcenterCredentials:getVcenterCredentials", args, &rv, "", opts...)
			if err != nil {
				return GetVcenterCredentialsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetVcenterCredentialsResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(GetVcenterCredentialsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetVcenterCredentialsResultOutput), nil
			}
			return output, nil
		}).(GetVcenterCredentialsResultOutput)
}

// A collection of arguments for invoking getVcenterCredentials.
type GetVcenterCredentialsOutputArgs struct {
	// The resource name of the private cloud which contains the Vcenter.
	Parent pulumi.StringInput `pulumi:"parent"`
}

func (GetVcenterCredentialsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVcenterCredentialsArgs)(nil)).Elem()
}

// A collection of values returned by getVcenterCredentials.
type GetVcenterCredentialsResultOutput struct{ *pulumi.OutputState }

func (GetVcenterCredentialsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVcenterCredentialsResult)(nil)).Elem()
}

func (o GetVcenterCredentialsResultOutput) ToGetVcenterCredentialsResultOutput() GetVcenterCredentialsResultOutput {
	return o
}

func (o GetVcenterCredentialsResultOutput) ToGetVcenterCredentialsResultOutputWithContext(ctx context.Context) GetVcenterCredentialsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetVcenterCredentialsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVcenterCredentialsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVcenterCredentialsResultOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v GetVcenterCredentialsResult) string { return v.Parent }).(pulumi.StringOutput)
}

// The password of the Vcenter Credential.
func (o GetVcenterCredentialsResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetVcenterCredentialsResult) string { return v.Password }).(pulumi.StringOutput)
}

// The username of the Vcenter Credential.
func (o GetVcenterCredentialsResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetVcenterCredentialsResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVcenterCredentialsResultOutput{})
}
