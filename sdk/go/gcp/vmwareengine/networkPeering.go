// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmwareengine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a network peering resource. Network peerings are global resources.
//
// To get more information about NetworkPeering, see:
//
// * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/networks/addPeering)
//
// ## Example Usage
//
// ### Vmware Engine Network Peering Ven
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vmwareengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			network_peering_nw, err := vmwareengine.NewNetwork(ctx, "network-peering-nw", &vmwareengine.NetworkArgs{
//				Name:     pulumi.String("default-np-nw"),
//				Location: pulumi.String("global"),
//				Type:     pulumi.String("STANDARD"),
//			})
//			if err != nil {
//				return err
//			}
//			network_peering_peer_nw, err := vmwareengine.NewNetwork(ctx, "network-peering-peer-nw", &vmwareengine.NetworkArgs{
//				Name:     pulumi.String("peer-np-nw"),
//				Location: pulumi.String("global"),
//				Type:     pulumi.String("STANDARD"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vmwareengine.NewNetworkPeering(ctx, "vmw-engine-network-peering", &vmwareengine.NetworkPeeringArgs{
//				Name:                           pulumi.String("sample-network-peering"),
//				Description:                    pulumi.String("Sample description"),
//				VmwareEngineNetwork:            network_peering_nw.ID(),
//				PeerNetwork:                    network_peering_peer_nw.ID(),
//				PeerNetworkType:                pulumi.String("VMWARE_ENGINE_NETWORK"),
//				ExportCustomRoutes:             pulumi.Bool(false),
//				ImportCustomRoutes:             pulumi.Bool(false),
//				ExportCustomRoutesWithPublicIp: pulumi.Bool(false),
//				ImportCustomRoutesWithPublicIp: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Vmware Engine Network Peering Standard
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vmwareengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			network_peering_vpc, err := compute.NewNetwork(ctx, "network-peering-vpc", &compute.NetworkArgs{
//				Name: pulumi.String("default-vpc"),
//			})
//			if err != nil {
//				return err
//			}
//			network_peering_standard_nw, err := vmwareengine.NewNetwork(ctx, "network-peering-standard-nw", &vmwareengine.NetworkArgs{
//				Name:     pulumi.String("default-standard-nw-np"),
//				Location: pulumi.String("global"),
//				Type:     pulumi.String("STANDARD"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vmwareengine.NewNetworkPeering(ctx, "vmw-engine-network-peering", &vmwareengine.NetworkPeeringArgs{
//				Name:                pulumi.String("sample-network-peering"),
//				Description:         pulumi.String("Sample description"),
//				PeerNetwork:         network_peering_vpc.ID(),
//				PeerNetworkType:     pulumi.String("STANDARD"),
//				VmwareEngineNetwork: network_peering_standard_nw.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// NetworkPeering can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/global/networkPeerings/{{name}}`
//
// * `{{project}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, NetworkPeering can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:vmwareengine/networkPeering:NetworkPeering default projects/{{project}}/locations/global/networkPeerings/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:vmwareengine/networkPeering:NetworkPeering default {{project}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:vmwareengine/networkPeering:NetworkPeering default {{name}}
// ```
type NetworkPeering struct {
	pulumi.CustomResourceState

	// Creation time of this resource.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
	// up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User-provided description for this network peering.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// True if custom routes are exported to the peered network; false otherwise.
	ExportCustomRoutes pulumi.BoolPtrOutput `pulumi:"exportCustomRoutes"`
	// True if all subnet routes with a public IP address range are exported; false otherwise.
	ExportCustomRoutesWithPublicIp pulumi.BoolPtrOutput `pulumi:"exportCustomRoutesWithPublicIp"`
	// True if custom routes are imported from the peered network; false otherwise.
	ImportCustomRoutes pulumi.BoolPtrOutput `pulumi:"importCustomRoutes"`
	// True if custom routes are imported from the peered network; false otherwise.
	ImportCustomRoutesWithPublicIp pulumi.BoolPtrOutput `pulumi:"importCustomRoutesWithPublicIp"`
	// The ID of the Network Peering.
	Name pulumi.StringOutput `pulumi:"name"`
	// The relative resource name of the network to peer with a standard VMware Engine network.
	// The provided network can be a consumer VPC network or another standard VMware Engine network.
	PeerNetwork pulumi.StringOutput `pulumi:"peerNetwork"`
	// The type of the network to peer with the VMware Engine network.
	// Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`.
	PeerNetworkType pulumi.StringOutput `pulumi:"peerNetworkType"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// State of the network peering.
	// This field has a value of 'ACTIVE' when there's a matching configuration in the peer network.
	// New values may be added to this enum when appropriate.
	State pulumi.StringOutput `pulumi:"state"`
	// Details about the current state of the network peering.
	StateDetails pulumi.StringOutput `pulumi:"stateDetails"`
	// System-generated unique identifier for the resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Last updated time of this resource.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The relative resource name of the VMware Engine network. Specify the name in the following form:
	// projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
	// can either be a project number or a project ID.
	VmwareEngineNetwork pulumi.StringOutput `pulumi:"vmwareEngineNetwork"`
	// The canonical name of the VMware Engine network in the form:
	// projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId}
	VmwareEngineNetworkCanonical pulumi.StringOutput `pulumi:"vmwareEngineNetworkCanonical"`
}

// NewNetworkPeering registers a new resource with the given unique name, arguments, and options.
func NewNetworkPeering(ctx *pulumi.Context,
	name string, args *NetworkPeeringArgs, opts ...pulumi.ResourceOption) (*NetworkPeering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PeerNetwork == nil {
		return nil, errors.New("invalid value for required argument 'PeerNetwork'")
	}
	if args.PeerNetworkType == nil {
		return nil, errors.New("invalid value for required argument 'PeerNetworkType'")
	}
	if args.VmwareEngineNetwork == nil {
		return nil, errors.New("invalid value for required argument 'VmwareEngineNetwork'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkPeering
	err := ctx.RegisterResource("gcp:vmwareengine/networkPeering:NetworkPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkPeering gets an existing NetworkPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkPeeringState, opts ...pulumi.ResourceOption) (*NetworkPeering, error) {
	var resource NetworkPeering
	err := ctx.ReadResource("gcp:vmwareengine/networkPeering:NetworkPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkPeering resources.
type networkPeeringState struct {
	// Creation time of this resource.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
	// up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// User-provided description for this network peering.
	Description *string `pulumi:"description"`
	// True if custom routes are exported to the peered network; false otherwise.
	ExportCustomRoutes *bool `pulumi:"exportCustomRoutes"`
	// True if all subnet routes with a public IP address range are exported; false otherwise.
	ExportCustomRoutesWithPublicIp *bool `pulumi:"exportCustomRoutesWithPublicIp"`
	// True if custom routes are imported from the peered network; false otherwise.
	ImportCustomRoutes *bool `pulumi:"importCustomRoutes"`
	// True if custom routes are imported from the peered network; false otherwise.
	ImportCustomRoutesWithPublicIp *bool `pulumi:"importCustomRoutesWithPublicIp"`
	// The ID of the Network Peering.
	Name *string `pulumi:"name"`
	// The relative resource name of the network to peer with a standard VMware Engine network.
	// The provided network can be a consumer VPC network or another standard VMware Engine network.
	PeerNetwork *string `pulumi:"peerNetwork"`
	// The type of the network to peer with the VMware Engine network.
	// Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`.
	PeerNetworkType *string `pulumi:"peerNetworkType"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// State of the network peering.
	// This field has a value of 'ACTIVE' when there's a matching configuration in the peer network.
	// New values may be added to this enum when appropriate.
	State *string `pulumi:"state"`
	// Details about the current state of the network peering.
	StateDetails *string `pulumi:"stateDetails"`
	// System-generated unique identifier for the resource.
	Uid *string `pulumi:"uid"`
	// Last updated time of this resource.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
	// The relative resource name of the VMware Engine network. Specify the name in the following form:
	// projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
	// can either be a project number or a project ID.
	VmwareEngineNetwork *string `pulumi:"vmwareEngineNetwork"`
	// The canonical name of the VMware Engine network in the form:
	// projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId}
	VmwareEngineNetworkCanonical *string `pulumi:"vmwareEngineNetworkCanonical"`
}

type NetworkPeeringState struct {
	// Creation time of this resource.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
	// up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// User-provided description for this network peering.
	Description pulumi.StringPtrInput
	// True if custom routes are exported to the peered network; false otherwise.
	ExportCustomRoutes pulumi.BoolPtrInput
	// True if all subnet routes with a public IP address range are exported; false otherwise.
	ExportCustomRoutesWithPublicIp pulumi.BoolPtrInput
	// True if custom routes are imported from the peered network; false otherwise.
	ImportCustomRoutes pulumi.BoolPtrInput
	// True if custom routes are imported from the peered network; false otherwise.
	ImportCustomRoutesWithPublicIp pulumi.BoolPtrInput
	// The ID of the Network Peering.
	Name pulumi.StringPtrInput
	// The relative resource name of the network to peer with a standard VMware Engine network.
	// The provided network can be a consumer VPC network or another standard VMware Engine network.
	PeerNetwork pulumi.StringPtrInput
	// The type of the network to peer with the VMware Engine network.
	// Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`.
	PeerNetworkType pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// State of the network peering.
	// This field has a value of 'ACTIVE' when there's a matching configuration in the peer network.
	// New values may be added to this enum when appropriate.
	State pulumi.StringPtrInput
	// Details about the current state of the network peering.
	StateDetails pulumi.StringPtrInput
	// System-generated unique identifier for the resource.
	Uid pulumi.StringPtrInput
	// Last updated time of this resource.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
	// The relative resource name of the VMware Engine network. Specify the name in the following form:
	// projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
	// can either be a project number or a project ID.
	VmwareEngineNetwork pulumi.StringPtrInput
	// The canonical name of the VMware Engine network in the form:
	// projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId}
	VmwareEngineNetworkCanonical pulumi.StringPtrInput
}

func (NetworkPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkPeeringState)(nil)).Elem()
}

type networkPeeringArgs struct {
	// User-provided description for this network peering.
	Description *string `pulumi:"description"`
	// True if custom routes are exported to the peered network; false otherwise.
	ExportCustomRoutes *bool `pulumi:"exportCustomRoutes"`
	// True if all subnet routes with a public IP address range are exported; false otherwise.
	ExportCustomRoutesWithPublicIp *bool `pulumi:"exportCustomRoutesWithPublicIp"`
	// True if custom routes are imported from the peered network; false otherwise.
	ImportCustomRoutes *bool `pulumi:"importCustomRoutes"`
	// True if custom routes are imported from the peered network; false otherwise.
	ImportCustomRoutesWithPublicIp *bool `pulumi:"importCustomRoutesWithPublicIp"`
	// The ID of the Network Peering.
	Name *string `pulumi:"name"`
	// The relative resource name of the network to peer with a standard VMware Engine network.
	// The provided network can be a consumer VPC network or another standard VMware Engine network.
	PeerNetwork string `pulumi:"peerNetwork"`
	// The type of the network to peer with the VMware Engine network.
	// Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`.
	PeerNetworkType string `pulumi:"peerNetworkType"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The relative resource name of the VMware Engine network. Specify the name in the following form:
	// projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
	// can either be a project number or a project ID.
	VmwareEngineNetwork string `pulumi:"vmwareEngineNetwork"`
}

// The set of arguments for constructing a NetworkPeering resource.
type NetworkPeeringArgs struct {
	// User-provided description for this network peering.
	Description pulumi.StringPtrInput
	// True if custom routes are exported to the peered network; false otherwise.
	ExportCustomRoutes pulumi.BoolPtrInput
	// True if all subnet routes with a public IP address range are exported; false otherwise.
	ExportCustomRoutesWithPublicIp pulumi.BoolPtrInput
	// True if custom routes are imported from the peered network; false otherwise.
	ImportCustomRoutes pulumi.BoolPtrInput
	// True if custom routes are imported from the peered network; false otherwise.
	ImportCustomRoutesWithPublicIp pulumi.BoolPtrInput
	// The ID of the Network Peering.
	Name pulumi.StringPtrInput
	// The relative resource name of the network to peer with a standard VMware Engine network.
	// The provided network can be a consumer VPC network or another standard VMware Engine network.
	PeerNetwork pulumi.StringInput
	// The type of the network to peer with the VMware Engine network.
	// Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`.
	PeerNetworkType pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The relative resource name of the VMware Engine network. Specify the name in the following form:
	// projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
	// can either be a project number or a project ID.
	VmwareEngineNetwork pulumi.StringInput
}

func (NetworkPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkPeeringArgs)(nil)).Elem()
}

type NetworkPeeringInput interface {
	pulumi.Input

	ToNetworkPeeringOutput() NetworkPeeringOutput
	ToNetworkPeeringOutputWithContext(ctx context.Context) NetworkPeeringOutput
}

func (*NetworkPeering) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPeering)(nil)).Elem()
}

func (i *NetworkPeering) ToNetworkPeeringOutput() NetworkPeeringOutput {
	return i.ToNetworkPeeringOutputWithContext(context.Background())
}

func (i *NetworkPeering) ToNetworkPeeringOutputWithContext(ctx context.Context) NetworkPeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPeeringOutput)
}

// NetworkPeeringArrayInput is an input type that accepts NetworkPeeringArray and NetworkPeeringArrayOutput values.
// You can construct a concrete instance of `NetworkPeeringArrayInput` via:
//
//	NetworkPeeringArray{ NetworkPeeringArgs{...} }
type NetworkPeeringArrayInput interface {
	pulumi.Input

	ToNetworkPeeringArrayOutput() NetworkPeeringArrayOutput
	ToNetworkPeeringArrayOutputWithContext(context.Context) NetworkPeeringArrayOutput
}

type NetworkPeeringArray []NetworkPeeringInput

func (NetworkPeeringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkPeering)(nil)).Elem()
}

func (i NetworkPeeringArray) ToNetworkPeeringArrayOutput() NetworkPeeringArrayOutput {
	return i.ToNetworkPeeringArrayOutputWithContext(context.Background())
}

func (i NetworkPeeringArray) ToNetworkPeeringArrayOutputWithContext(ctx context.Context) NetworkPeeringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPeeringArrayOutput)
}

// NetworkPeeringMapInput is an input type that accepts NetworkPeeringMap and NetworkPeeringMapOutput values.
// You can construct a concrete instance of `NetworkPeeringMapInput` via:
//
//	NetworkPeeringMap{ "key": NetworkPeeringArgs{...} }
type NetworkPeeringMapInput interface {
	pulumi.Input

	ToNetworkPeeringMapOutput() NetworkPeeringMapOutput
	ToNetworkPeeringMapOutputWithContext(context.Context) NetworkPeeringMapOutput
}

type NetworkPeeringMap map[string]NetworkPeeringInput

func (NetworkPeeringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkPeering)(nil)).Elem()
}

func (i NetworkPeeringMap) ToNetworkPeeringMapOutput() NetworkPeeringMapOutput {
	return i.ToNetworkPeeringMapOutputWithContext(context.Background())
}

func (i NetworkPeeringMap) ToNetworkPeeringMapOutputWithContext(ctx context.Context) NetworkPeeringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPeeringMapOutput)
}

type NetworkPeeringOutput struct{ *pulumi.OutputState }

func (NetworkPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPeering)(nil)).Elem()
}

func (o NetworkPeeringOutput) ToNetworkPeeringOutput() NetworkPeeringOutput {
	return o
}

func (o NetworkPeeringOutput) ToNetworkPeeringOutputWithContext(ctx context.Context) NetworkPeeringOutput {
	return o
}

// Creation time of this resource.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
// up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o NetworkPeeringOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// User-provided description for this network peering.
func (o NetworkPeeringOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// True if custom routes are exported to the peered network; false otherwise.
func (o NetworkPeeringOutput) ExportCustomRoutes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.BoolPtrOutput { return v.ExportCustomRoutes }).(pulumi.BoolPtrOutput)
}

// True if all subnet routes with a public IP address range are exported; false otherwise.
func (o NetworkPeeringOutput) ExportCustomRoutesWithPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.BoolPtrOutput { return v.ExportCustomRoutesWithPublicIp }).(pulumi.BoolPtrOutput)
}

// True if custom routes are imported from the peered network; false otherwise.
func (o NetworkPeeringOutput) ImportCustomRoutes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.BoolPtrOutput { return v.ImportCustomRoutes }).(pulumi.BoolPtrOutput)
}

// True if custom routes are imported from the peered network; false otherwise.
func (o NetworkPeeringOutput) ImportCustomRoutesWithPublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.BoolPtrOutput { return v.ImportCustomRoutesWithPublicIp }).(pulumi.BoolPtrOutput)
}

// The ID of the Network Peering.
func (o NetworkPeeringOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The relative resource name of the network to peer with a standard VMware Engine network.
// The provided network can be a consumer VPC network or another standard VMware Engine network.
func (o NetworkPeeringOutput) PeerNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.PeerNetwork }).(pulumi.StringOutput)
}

// The type of the network to peer with the VMware Engine network.
// Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`.
func (o NetworkPeeringOutput) PeerNetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.PeerNetworkType }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o NetworkPeeringOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// State of the network peering.
// This field has a value of 'ACTIVE' when there's a matching configuration in the peer network.
// New values may be added to this enum when appropriate.
func (o NetworkPeeringOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Details about the current state of the network peering.
func (o NetworkPeeringOutput) StateDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.StateDetails }).(pulumi.StringOutput)
}

// System-generated unique identifier for the resource.
func (o NetworkPeeringOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Last updated time of this resource.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o NetworkPeeringOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The relative resource name of the VMware Engine network. Specify the name in the following form:
// projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
// can either be a project number or a project ID.
func (o NetworkPeeringOutput) VmwareEngineNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.VmwareEngineNetwork }).(pulumi.StringOutput)
}

// The canonical name of the VMware Engine network in the form:
// projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId}
func (o NetworkPeeringOutput) VmwareEngineNetworkCanonical() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.VmwareEngineNetworkCanonical }).(pulumi.StringOutput)
}

type NetworkPeeringArrayOutput struct{ *pulumi.OutputState }

func (NetworkPeeringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkPeering)(nil)).Elem()
}

func (o NetworkPeeringArrayOutput) ToNetworkPeeringArrayOutput() NetworkPeeringArrayOutput {
	return o
}

func (o NetworkPeeringArrayOutput) ToNetworkPeeringArrayOutputWithContext(ctx context.Context) NetworkPeeringArrayOutput {
	return o
}

func (o NetworkPeeringArrayOutput) Index(i pulumi.IntInput) NetworkPeeringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkPeering {
		return vs[0].([]*NetworkPeering)[vs[1].(int)]
	}).(NetworkPeeringOutput)
}

type NetworkPeeringMapOutput struct{ *pulumi.OutputState }

func (NetworkPeeringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkPeering)(nil)).Elem()
}

func (o NetworkPeeringMapOutput) ToNetworkPeeringMapOutput() NetworkPeeringMapOutput {
	return o
}

func (o NetworkPeeringMapOutput) ToNetworkPeeringMapOutputWithContext(ctx context.Context) NetworkPeeringMapOutput {
	return o
}

func (o NetworkPeeringMapOutput) MapIndex(k pulumi.StringInput) NetworkPeeringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkPeering {
		return vs[0].(map[string]*NetworkPeering)[vs[1].(string)]
	}).(NetworkPeeringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPeeringInput)(nil)).Elem(), &NetworkPeering{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPeeringArrayInput)(nil)).Elem(), NetworkPeeringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPeeringMapInput)(nil)).Elem(), NetworkPeeringMap{})
	pulumi.RegisterOutputType(NetworkPeeringOutput{})
	pulumi.RegisterOutputType(NetworkPeeringArrayOutput{})
	pulumi.RegisterOutputType(NetworkPeeringMapOutput{})
}
