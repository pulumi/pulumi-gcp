// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmwareengine

import (
	"context"
	"errors"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get details about a subnet. Management subnets support only read operations and should be configured through this data source. User defined subnets can be configured using the resource as well as the datasource.
//
// To get more information about private cloud subnet, see:
// * [API documentation](https://cloud.google.com/vmware-engine/docs/reference/rest/v1/projects.locations.privateClouds.subnets)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vmwareengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vmwareengine.LookupSubnet(ctx, &vmwareengine.LookupSubnetArgs{
//				Name:   "service-1",
//				Parent: "project/my-project/locations/us-west1-a/privateClouds/my-cloud",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSubnet(ctx *pulumi.Context, args *LookupSubnetArgs, opts ...pulumi.InvokeOption) (*LookupSubnetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	invokeOpts, optsErr := pulumi.NewInvokeOptions(opts...)
	if optsErr != nil {
		return &LookupSubnetResult{}, optsErr
	}
	if len(invokeOpts.DependsOn) > 0 {
		return &LookupSubnetResult{}, errors.New("DependsOn is not supported for direct form invoke LookupSubnet, use LookupSubnetOutput instead")
	}
	if len(invokeOpts.DependsOnInputs) > 0 {
		return &LookupSubnetResult{}, errors.New("DependsOnInputs is not supported for direct form invoke LookupSubnet, use LookupSubnetOutput instead")
	}
	var rv LookupSubnetResult
	err := ctx.Invoke("gcp:vmwareengine/getSubnet:getSubnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetArgs struct {
	// Name of the resource.
	// UserDefined subnets are named in the format of "service-n", where n ranges from 1 to 5.
	// Management subnets have arbitary names including "vmotion", "vsan", "system-management" etc. More details about subnet names can be found on the cloud console.
	Name string `pulumi:"name"`
	// The resource name of the private cloud that this subnet belongs.
	Parent string `pulumi:"parent"`
}

// A collection of values returned by getSubnet.
type LookupSubnetResult struct {
	CreateTime        string                      `pulumi:"createTime"`
	DhcpAddressRanges []GetSubnetDhcpAddressRange `pulumi:"dhcpAddressRanges"`
	GatewayId         string                      `pulumi:"gatewayId"`
	GatewayIp         string                      `pulumi:"gatewayIp"`
	// The provider-assigned unique ID for this managed resource.
	Id             string `pulumi:"id"`
	IpCidrRange    string `pulumi:"ipCidrRange"`
	Name           string `pulumi:"name"`
	Parent         string `pulumi:"parent"`
	StandardConfig bool   `pulumi:"standardConfig"`
	State          string `pulumi:"state"`
	Type           string `pulumi:"type"`
	Uid            string `pulumi:"uid"`
	UpdateTime     string `pulumi:"updateTime"`
	VlanId         int    `pulumi:"vlanId"`
}

func LookupSubnetOutput(ctx *pulumi.Context, args LookupSubnetOutputArgs, opts ...pulumi.InvokeOption) LookupSubnetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSubnetResultOutput, error) {
			args := v.(LookupSubnetArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupSubnetResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("gcp:vmwareengine/getSubnet:getSubnet", args, &rv, "", opts...)
			if err != nil {
				return LookupSubnetResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupSubnetResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(LookupSubnetResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupSubnetResultOutput), nil
			}
			return output, nil
		}).(LookupSubnetResultOutput)
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetOutputArgs struct {
	// Name of the resource.
	// UserDefined subnets are named in the format of "service-n", where n ranges from 1 to 5.
	// Management subnets have arbitary names including "vmotion", "vsan", "system-management" etc. More details about subnet names can be found on the cloud console.
	Name pulumi.StringInput `pulumi:"name"`
	// The resource name of the private cloud that this subnet belongs.
	Parent pulumi.StringInput `pulumi:"parent"`
}

func (LookupSubnetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetArgs)(nil)).Elem()
}

// A collection of values returned by getSubnet.
type LookupSubnetResultOutput struct{ *pulumi.OutputState }

func (LookupSubnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetResult)(nil)).Elem()
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutput() LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutputWithContext(ctx context.Context) LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) DhcpAddressRanges() GetSubnetDhcpAddressRangeArrayOutput {
	return o.ApplyT(func(v LookupSubnetResult) []GetSubnetDhcpAddressRange { return v.DhcpAddressRanges }).(GetSubnetDhcpAddressRangeArrayOutput)
}

func (o LookupSubnetResultOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.GatewayId }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.GatewayIp }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSubnetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) IpCidrRange() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.IpCidrRange }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Parent }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) StandardConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.StandardConfig }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Uid }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.VlanId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubnetResultOutput{})
}
