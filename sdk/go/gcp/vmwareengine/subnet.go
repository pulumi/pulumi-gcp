// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmwareengine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Subnet in a private cloud. A Private Cloud contains two types of subnets: `management` subnets (such as vMotion) that
// are read-only,and `userDefined`, which can also be updated. This resource should be used to read and update `userDefined`
// subnets. To read `management` subnets, please utilize the subnet data source.
//
// To get more information about Subnet, see:
//
// * [API documentation](https://cloud.google.com/vmware-engine/docs/reference/rest/v1/projects.locations.privateClouds.subnets)
//
// ## Example Usage
//
// ### Vmware Engine Subnet User Defined
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vmwareengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			subnet_nw, err := vmwareengine.NewNetwork(ctx, "subnet-nw", &vmwareengine.NetworkArgs{
//				Name:        pulumi.String("pc-nw"),
//				Location:    pulumi.String("global"),
//				Type:        pulumi.String("STANDARD"),
//				Description: pulumi.String("PC network description."),
//			})
//			if err != nil {
//				return err
//			}
//			subnet_pc, err := vmwareengine.NewPrivateCloud(ctx, "subnet-pc", &vmwareengine.PrivateCloudArgs{
//				Location:    pulumi.String("us-west1-a"),
//				Name:        pulumi.String("sample-pc"),
//				Description: pulumi.String("Sample test PC."),
//				NetworkConfig: &vmwareengine.PrivateCloudNetworkConfigArgs{
//					ManagementCidr:      pulumi.String("192.168.50.0/24"),
//					VmwareEngineNetwork: subnet_nw.ID(),
//				},
//				ManagementCluster: &vmwareengine.PrivateCloudManagementClusterArgs{
//					ClusterId: pulumi.String("sample-mgmt-cluster"),
//					NodeTypeConfigs: vmwareengine.PrivateCloudManagementClusterNodeTypeConfigArray{
//						&vmwareengine.PrivateCloudManagementClusterNodeTypeConfigArgs{
//							NodeTypeId: pulumi.String("standard-72"),
//							NodeCount:  pulumi.Int(3),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vmwareengine.NewSubnet(ctx, "vmw-engine-subnet", &vmwareengine.SubnetArgs{
//				Name:        pulumi.String("service-1"),
//				Parent:      subnet_pc.ID(),
//				IpCidrRange: pulumi.String("192.168.100.0/26"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Subnet can be imported using any of these accepted formats:
//
// * `{{parent}}/subnets/{{name}}`
//
// When using the `pulumi import` command, Subnet can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:vmwareengine/subnet:Subnet default {{parent}}/subnets/{{name}}
// ```
type Subnet struct {
	pulumi.CustomResourceState

	// Creation time of this resource.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
	// up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// DHCP address ranges.
	// Structure is documented below.
	DhcpAddressRanges SubnetDhcpAddressRangeArrayOutput `pulumi:"dhcpAddressRanges"`
	// The canonical identifier of the logical router that this subnet is attached to.
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// The IP address of the gateway of this subnet. Must fall within the IP prefix defined above.
	GatewayIp pulumi.StringOutput `pulumi:"gatewayIp"`
	// The IP address range of the subnet in CIDR format.
	IpCidrRange pulumi.StringOutput `pulumi:"ipCidrRange"`
	// The ID of the subnet. For userDefined subnets, this name should be in the format of "service-n",
	// where n ranges from 1 to 5.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource name of the private cloud to create a new subnet in.
	// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
	// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
	Parent pulumi.StringOutput `pulumi:"parent"`
	// Whether the NSX-T configuration in the backend follows the standard configuration supported by Google Cloud.
	// If false, the subnet cannot be modified through Google Cloud, only through NSX-T directly.
	StandardConfig pulumi.BoolOutput `pulumi:"standardConfig"`
	// State of the subnet.
	State pulumi.StringOutput `pulumi:"state"`
	// The type of the subnet.
	Type pulumi.StringOutput `pulumi:"type"`
	// System-generated unique identifier for the resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Last updated time of this resource.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// VLAN ID of the VLAN on which the subnet is configured.
	VlanId pulumi.IntOutput `pulumi:"vlanId"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpCidrRange == nil {
		return nil, errors.New("invalid value for required argument 'IpCidrRange'")
	}
	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subnet
	err := ctx.RegisterResource("gcp:vmwareengine/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("gcp:vmwareengine/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	// Creation time of this resource.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
	// up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// DHCP address ranges.
	// Structure is documented below.
	DhcpAddressRanges []SubnetDhcpAddressRange `pulumi:"dhcpAddressRanges"`
	// The canonical identifier of the logical router that this subnet is attached to.
	GatewayId *string `pulumi:"gatewayId"`
	// The IP address of the gateway of this subnet. Must fall within the IP prefix defined above.
	GatewayIp *string `pulumi:"gatewayIp"`
	// The IP address range of the subnet in CIDR format.
	IpCidrRange *string `pulumi:"ipCidrRange"`
	// The ID of the subnet. For userDefined subnets, this name should be in the format of "service-n",
	// where n ranges from 1 to 5.
	//
	// ***
	Name *string `pulumi:"name"`
	// The resource name of the private cloud to create a new subnet in.
	// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
	// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
	Parent *string `pulumi:"parent"`
	// Whether the NSX-T configuration in the backend follows the standard configuration supported by Google Cloud.
	// If false, the subnet cannot be modified through Google Cloud, only through NSX-T directly.
	StandardConfig *bool `pulumi:"standardConfig"`
	// State of the subnet.
	State *string `pulumi:"state"`
	// The type of the subnet.
	Type *string `pulumi:"type"`
	// System-generated unique identifier for the resource.
	Uid *string `pulumi:"uid"`
	// Last updated time of this resource.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
	// VLAN ID of the VLAN on which the subnet is configured.
	VlanId *int `pulumi:"vlanId"`
}

type SubnetState struct {
	// Creation time of this resource.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
	// up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// DHCP address ranges.
	// Structure is documented below.
	DhcpAddressRanges SubnetDhcpAddressRangeArrayInput
	// The canonical identifier of the logical router that this subnet is attached to.
	GatewayId pulumi.StringPtrInput
	// The IP address of the gateway of this subnet. Must fall within the IP prefix defined above.
	GatewayIp pulumi.StringPtrInput
	// The IP address range of the subnet in CIDR format.
	IpCidrRange pulumi.StringPtrInput
	// The ID of the subnet. For userDefined subnets, this name should be in the format of "service-n",
	// where n ranges from 1 to 5.
	//
	// ***
	Name pulumi.StringPtrInput
	// The resource name of the private cloud to create a new subnet in.
	// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
	// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
	Parent pulumi.StringPtrInput
	// Whether the NSX-T configuration in the backend follows the standard configuration supported by Google Cloud.
	// If false, the subnet cannot be modified through Google Cloud, only through NSX-T directly.
	StandardConfig pulumi.BoolPtrInput
	// State of the subnet.
	State pulumi.StringPtrInput
	// The type of the subnet.
	Type pulumi.StringPtrInput
	// System-generated unique identifier for the resource.
	Uid pulumi.StringPtrInput
	// Last updated time of this resource.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
	// VLAN ID of the VLAN on which the subnet is configured.
	VlanId pulumi.IntPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	// The IP address range of the subnet in CIDR format.
	IpCidrRange string `pulumi:"ipCidrRange"`
	// The ID of the subnet. For userDefined subnets, this name should be in the format of "service-n",
	// where n ranges from 1 to 5.
	//
	// ***
	Name *string `pulumi:"name"`
	// The resource name of the private cloud to create a new subnet in.
	// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
	// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
	Parent string `pulumi:"parent"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// The IP address range of the subnet in CIDR format.
	IpCidrRange pulumi.StringInput
	// The ID of the subnet. For userDefined subnets, this name should be in the format of "service-n",
	// where n ranges from 1 to 5.
	//
	// ***
	Name pulumi.StringPtrInput
	// The resource name of the private cloud to create a new subnet in.
	// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
	// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
	Parent pulumi.StringInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

// SubnetArrayInput is an input type that accepts SubnetArray and SubnetArrayOutput values.
// You can construct a concrete instance of `SubnetArrayInput` via:
//
//	SubnetArray{ SubnetArgs{...} }
type SubnetArrayInput interface {
	pulumi.Input

	ToSubnetArrayOutput() SubnetArrayOutput
	ToSubnetArrayOutputWithContext(context.Context) SubnetArrayOutput
}

type SubnetArray []SubnetInput

func (SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (i SubnetArray) ToSubnetArrayOutput() SubnetArrayOutput {
	return i.ToSubnetArrayOutputWithContext(context.Background())
}

func (i SubnetArray) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetArrayOutput)
}

// SubnetMapInput is an input type that accepts SubnetMap and SubnetMapOutput values.
// You can construct a concrete instance of `SubnetMapInput` via:
//
//	SubnetMap{ "key": SubnetArgs{...} }
type SubnetMapInput interface {
	pulumi.Input

	ToSubnetMapOutput() SubnetMapOutput
	ToSubnetMapOutputWithContext(context.Context) SubnetMapOutput
}

type SubnetMap map[string]SubnetInput

func (SubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (i SubnetMap) ToSubnetMapOutput() SubnetMapOutput {
	return i.ToSubnetMapOutputWithContext(context.Background())
}

func (i SubnetMap) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetMapOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

// Creation time of this resource.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
// up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o SubnetOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// DHCP address ranges.
// Structure is documented below.
func (o SubnetOutput) DhcpAddressRanges() SubnetDhcpAddressRangeArrayOutput {
	return o.ApplyT(func(v *Subnet) SubnetDhcpAddressRangeArrayOutput { return v.DhcpAddressRanges }).(SubnetDhcpAddressRangeArrayOutput)
}

// The canonical identifier of the logical router that this subnet is attached to.
func (o SubnetOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

// The IP address of the gateway of this subnet. Must fall within the IP prefix defined above.
func (o SubnetOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.GatewayIp }).(pulumi.StringOutput)
}

// The IP address range of the subnet in CIDR format.
func (o SubnetOutput) IpCidrRange() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.IpCidrRange }).(pulumi.StringOutput)
}

// The ID of the subnet. For userDefined subnets, this name should be in the format of "service-n",
// where n ranges from 1 to 5.
//
// ***
func (o SubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource name of the private cloud to create a new subnet in.
// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
func (o SubnetOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// Whether the NSX-T configuration in the backend follows the standard configuration supported by Google Cloud.
// If false, the subnet cannot be modified through Google Cloud, only through NSX-T directly.
func (o SubnetOutput) StandardConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.StandardConfig }).(pulumi.BoolOutput)
}

// State of the subnet.
func (o SubnetOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The type of the subnet.
func (o SubnetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// System-generated unique identifier for the resource.
func (o SubnetOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Last updated time of this resource.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o SubnetOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// VLAN ID of the VLAN on which the subnet is configured.
func (o SubnetOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.VlanId }).(pulumi.IntOutput)
}

type SubnetArrayOutput struct{ *pulumi.OutputState }

func (SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (o SubnetArrayOutput) ToSubnetArrayOutput() SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) Index(i pulumi.IntInput) SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].([]*Subnet)[vs[1].(int)]
	}).(SubnetOutput)
}

type SubnetMapOutput struct{ *pulumi.OutputState }

func (SubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (o SubnetMapOutput) ToSubnetMapOutput() SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) MapIndex(k pulumi.StringInput) SubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].(map[string]*Subnet)[vs[1].(string)]
	}).(SubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetArrayInput)(nil)).Elem(), SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetMapInput)(nil)).Elem(), SubnetMap{})
	pulumi.RegisterOutputType(SubnetOutput{})
	pulumi.RegisterOutputType(SubnetArrayOutput{})
	pulumi.RegisterOutputType(SubnetMapOutput{})
}
