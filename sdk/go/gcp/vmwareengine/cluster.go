// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmwareengine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
// ### Vmware Engine Cluster Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/vmwareengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vmwareengine.NewNetwork(ctx, "cluster-nw", &vmwareengine.NetworkArgs{
//				Location:    pulumi.String("us-west1"),
//				Type:        pulumi.String("LEGACY"),
//				Description: pulumi.String("PC network description."),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = vmwareengine.NewPrivateCloud(ctx, "cluster-pc", &vmwareengine.PrivateCloudArgs{
//				Location:    pulumi.String("us-west1-a"),
//				Description: pulumi.String("Sample test PC."),
//				NetworkConfig: &vmwareengine.PrivateCloudNetworkConfigArgs{
//					ManagementCidr:      pulumi.String("192.168.30.0/24"),
//					VmwareEngineNetwork: cluster_nw.ID(),
//				},
//				ManagementCluster: &vmwareengine.PrivateCloudManagementClusterArgs{
//					ClusterId: pulumi.String("sample-mgmt-cluster"),
//					NodeTypeConfigs: vmwareengine.PrivateCloudManagementClusterNodeTypeConfigArray{
//						&vmwareengine.PrivateCloudManagementClusterNodeTypeConfigArgs{
//							NodeTypeId: pulumi.String("standard-72"),
//							NodeCount:  pulumi.Int(3),
//						},
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = vmwareengine.NewCluster(ctx, "vmw-engine-ext-cluster", &vmwareengine.ClusterArgs{
//				Parent: cluster_pc.ID(),
//				NodeTypeConfigs: vmwareengine.ClusterNodeTypeConfigArray{
//					&vmwareengine.ClusterNodeTypeConfigArgs{
//						NodeTypeId: pulumi.String("standard-72"),
//						NodeCount:  pulumi.Int(3),
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Vmware Engine Cluster Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/vmwareengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vmwareengine.NewNetwork(ctx, "cluster-nw", &vmwareengine.NetworkArgs{
//				Location:    pulumi.String("us-west1"),
//				Type:        pulumi.String("LEGACY"),
//				Description: pulumi.String("PC network description."),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = vmwareengine.NewPrivateCloud(ctx, "cluster-pc", &vmwareengine.PrivateCloudArgs{
//				Location:    pulumi.String("us-west1-a"),
//				Description: pulumi.String("Sample test PC."),
//				NetworkConfig: &vmwareengine.PrivateCloudNetworkConfigArgs{
//					ManagementCidr:      pulumi.String("192.168.30.0/24"),
//					VmwareEngineNetwork: cluster_nw.ID(),
//				},
//				ManagementCluster: &vmwareengine.PrivateCloudManagementClusterArgs{
//					ClusterId: pulumi.String("sample-mgmt-cluster"),
//					NodeTypeConfigs: vmwareengine.PrivateCloudManagementClusterNodeTypeConfigArray{
//						&vmwareengine.PrivateCloudManagementClusterNodeTypeConfigArgs{
//							NodeTypeId:      pulumi.String("standard-72"),
//							NodeCount:       pulumi.Int(3),
//							CustomCoreCount: pulumi.Int(32),
//						},
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = vmwareengine.NewCluster(ctx, "vmw-ext-cluster", &vmwareengine.ClusterArgs{
//				Parent: cluster_pc.ID(),
//				NodeTypeConfigs: vmwareengine.ClusterNodeTypeConfigArray{
//					&vmwareengine.ClusterNodeTypeConfigArgs{
//						NodeTypeId:      pulumi.String("standard-72"),
//						NodeCount:       pulumi.Int(3),
//						CustomCoreCount: pulumi.Int(32),
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cluster can be imported using any of these accepted formats:
//
// ```sh
//
//	$ pulumi import gcp:vmwareengine/cluster:Cluster default {{parent}}/clusters/{{name}}
//
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// True if the cluster is a management cluster; false otherwise.
	// There can only be one management cluster in a private cloud and it has to be the first one.
	Management pulumi.BoolOutput `pulumi:"management"`
	// The ID of the Cluster.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The map of cluster node types in this cluster,
	// where the key is canonical identifier of the node type (corresponds to the NodeType).
	// Structure is documented below.
	NodeTypeConfigs ClusterNodeTypeConfigArrayOutput `pulumi:"nodeTypeConfigs"`
	// The resource name of the private cloud to create a new cluster in.
	// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
	// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
	Parent pulumi.StringOutput `pulumi:"parent"`
	// State of the Cluster.
	State pulumi.StringOutput `pulumi:"state"`
	// System-generated unique identifier for the resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("gcp:vmwareengine/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("gcp:vmwareengine/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// True if the cluster is a management cluster; false otherwise.
	// There can only be one management cluster in a private cloud and it has to be the first one.
	Management *bool `pulumi:"management"`
	// The ID of the Cluster.
	//
	// ***
	Name *string `pulumi:"name"`
	// The map of cluster node types in this cluster,
	// where the key is canonical identifier of the node type (corresponds to the NodeType).
	// Structure is documented below.
	NodeTypeConfigs []ClusterNodeTypeConfig `pulumi:"nodeTypeConfigs"`
	// The resource name of the private cloud to create a new cluster in.
	// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
	// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
	Parent *string `pulumi:"parent"`
	// State of the Cluster.
	State *string `pulumi:"state"`
	// System-generated unique identifier for the resource.
	Uid *string `pulumi:"uid"`
}

type ClusterState struct {
	// True if the cluster is a management cluster; false otherwise.
	// There can only be one management cluster in a private cloud and it has to be the first one.
	Management pulumi.BoolPtrInput
	// The ID of the Cluster.
	//
	// ***
	Name pulumi.StringPtrInput
	// The map of cluster node types in this cluster,
	// where the key is canonical identifier of the node type (corresponds to the NodeType).
	// Structure is documented below.
	NodeTypeConfigs ClusterNodeTypeConfigArrayInput
	// The resource name of the private cloud to create a new cluster in.
	// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
	// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
	Parent pulumi.StringPtrInput
	// State of the Cluster.
	State pulumi.StringPtrInput
	// System-generated unique identifier for the resource.
	Uid pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// The ID of the Cluster.
	//
	// ***
	Name *string `pulumi:"name"`
	// The map of cluster node types in this cluster,
	// where the key is canonical identifier of the node type (corresponds to the NodeType).
	// Structure is documented below.
	NodeTypeConfigs []ClusterNodeTypeConfig `pulumi:"nodeTypeConfigs"`
	// The resource name of the private cloud to create a new cluster in.
	// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
	// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
	Parent string `pulumi:"parent"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The ID of the Cluster.
	//
	// ***
	Name pulumi.StringPtrInput
	// The map of cluster node types in this cluster,
	// where the key is canonical identifier of the node type (corresponds to the NodeType).
	// Structure is documented below.
	NodeTypeConfigs ClusterNodeTypeConfigArrayInput
	// The resource name of the private cloud to create a new cluster in.
	// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
	// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
	Parent pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

func (i *Cluster) ToOutput(ctx context.Context) pulumix.Output[*Cluster] {
	return pulumix.Output[*Cluster]{
		OutputState: i.ToClusterOutputWithContext(ctx).OutputState,
	}
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

func (i ClusterArray) ToOutput(ctx context.Context) pulumix.Output[[]*Cluster] {
	return pulumix.Output[[]*Cluster]{
		OutputState: i.ToClusterArrayOutputWithContext(ctx).OutputState,
	}
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

func (i ClusterMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Cluster] {
	return pulumix.Output[map[string]*Cluster]{
		OutputState: i.ToClusterMapOutputWithContext(ctx).OutputState,
	}
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) ToOutput(ctx context.Context) pulumix.Output[*Cluster] {
	return pulumix.Output[*Cluster]{
		OutputState: o.OutputState,
	}
}

// True if the cluster is a management cluster; false otherwise.
// There can only be one management cluster in a private cloud and it has to be the first one.
func (o ClusterOutput) Management() pulumi.BoolOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolOutput { return v.Management }).(pulumi.BoolOutput)
}

// The ID of the Cluster.
//
// ***
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The map of cluster node types in this cluster,
// where the key is canonical identifier of the node type (corresponds to the NodeType).
// Structure is documented below.
func (o ClusterOutput) NodeTypeConfigs() ClusterNodeTypeConfigArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterNodeTypeConfigArrayOutput { return v.NodeTypeConfigs }).(ClusterNodeTypeConfigArrayOutput)
}

// The resource name of the private cloud to create a new cluster in.
// Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
// For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
func (o ClusterOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// State of the Cluster.
func (o ClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// System-generated unique identifier for the resource.
func (o ClusterOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Cluster] {
	return pulumix.Output[[]*Cluster]{
		OutputState: o.OutputState,
	}
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Cluster] {
	return pulumix.Output[map[string]*Cluster]{
		OutputState: o.OutputState,
	}
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
