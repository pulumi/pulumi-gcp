// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronicle

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Reference lists are user-defined lists of values which users can use in multiple Rules.
//
// To get more information about ReferenceList, see:
//
// * [API documentation](https://cloud.google.com/chronicle/docs/reference/rest/v1/projects.locations.instances.referenceLists)
// * How-to Guides
//   - [Google SecOps Guides](https://cloud.google.com/chronicle/docs/secops/secops-overview)
//
// ## Example Usage
//
// ### Chronicle Referencelist Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/chronicle"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := chronicle.NewReferenceList(ctx, "example", &chronicle.ReferenceListArgs{
//				Location:        pulumi.String("us"),
//				Instance:        pulumi.String("00000000-0000-0000-0000-000000000000"),
//				ReferenceListId: pulumi.String("reference_list_id"),
//				Description:     pulumi.String("referencelist-description"),
//				Entries: chronicle.ReferenceListEntryArray{
//					&chronicle.ReferenceListEntryArgs{
//						Value: pulumi.String("referencelist-entry-value"),
//					},
//				},
//				SyntaxType: pulumi.String("REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ReferenceList can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/instances/{{instance}}/referenceLists/{{reference_list_id}}`
//
// * `{{project}}/{{location}}/{{instance}}/{{reference_list_id}}`
//
// * `{{location}}/{{instance}}/{{reference_list_id}}`
//
// When using the `pulumi import` command, ReferenceList can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:chronicle/referenceList:ReferenceList default projects/{{project}}/locations/{{location}}/instances/{{instance}}/referenceLists/{{reference_list_id}}
// ```
//
// ```sh
// $ pulumi import gcp:chronicle/referenceList:ReferenceList default {{project}}/{{location}}/{{instance}}/{{reference_list_id}}
// ```
//
// ```sh
// $ pulumi import gcp:chronicle/referenceList:ReferenceList default {{location}}/{{instance}}/{{reference_list_id}}
// ```
type ReferenceList struct {
	pulumi.CustomResourceState

	// Required. A user-provided description of the reference list.
	Description pulumi.StringOutput `pulumi:"description"`
	// Output only. The unique display name of the reference list.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Required. The entries of the reference list.
	// When listed, they are returned in the order that was specified at creation
	// or update. The combined size of the values of the reference list may not
	// exceed 6MB.
	// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
	// Structure is documented below.
	Entries ReferenceListEntryArrayOutput `pulumi:"entries"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringOutput `pulumi:"instance"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location pulumi.StringOutput `pulumi:"location"`
	// Output only. The resource name of the reference list.
	// Format:
	// projects/{project}/locations/{location}/instances/{instance}/referenceLists/{reference_list}
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Required. The ID to use for the reference list. This is also the display name for
	// the reference list. It must satisfy the following requirements:
	// - Starts with letter.
	// - Contains only letters, numbers and underscore.
	// - Has length < 256.
	// - Must be unique.
	ReferenceListId pulumi.StringOutput `pulumi:"referenceListId"`
	// Output only. The timestamp when the reference list was last updated.
	RevisionCreateTime pulumi.StringOutput `pulumi:"revisionCreateTime"`
	// Output only. The count of self-authored rules using the reference list.
	RuleAssociationsCount pulumi.IntOutput `pulumi:"ruleAssociationsCount"`
	// Output only. The resource names for the associated self-authored Rules that use this
	// reference list.
	// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
	Rules pulumi.StringArrayOutput `pulumi:"rules"`
	// ScopeInfo specifies the scope info of the reference list.
	// Structure is documented below.
	ScopeInfos ReferenceListScopeInfoArrayOutput `pulumi:"scopeInfos"`
	// Possible values:
	// REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING
	// REFERENCE_LIST_SYNTAX_TYPE_REGEX
	// REFERENCE_LIST_SYNTAX_TYPE_CIDR
	SyntaxType pulumi.StringOutput `pulumi:"syntaxType"`
}

// NewReferenceList registers a new resource with the given unique name, arguments, and options.
func NewReferenceList(ctx *pulumi.Context,
	name string, args *ReferenceListArgs, opts ...pulumi.ResourceOption) (*ReferenceList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Entries == nil {
		return nil, errors.New("invalid value for required argument 'Entries'")
	}
	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ReferenceListId == nil {
		return nil, errors.New("invalid value for required argument 'ReferenceListId'")
	}
	if args.SyntaxType == nil {
		return nil, errors.New("invalid value for required argument 'SyntaxType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReferenceList
	err := ctx.RegisterResource("gcp:chronicle/referenceList:ReferenceList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReferenceList gets an existing ReferenceList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReferenceList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReferenceListState, opts ...pulumi.ResourceOption) (*ReferenceList, error) {
	var resource ReferenceList
	err := ctx.ReadResource("gcp:chronicle/referenceList:ReferenceList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReferenceList resources.
type referenceListState struct {
	// Required. A user-provided description of the reference list.
	Description *string `pulumi:"description"`
	// Output only. The unique display name of the reference list.
	DisplayName *string `pulumi:"displayName"`
	// Required. The entries of the reference list.
	// When listed, they are returned in the order that was specified at creation
	// or update. The combined size of the values of the reference list may not
	// exceed 6MB.
	// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
	// Structure is documented below.
	Entries []ReferenceListEntry `pulumi:"entries"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance *string `pulumi:"instance"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location *string `pulumi:"location"`
	// Output only. The resource name of the reference list.
	// Format:
	// projects/{project}/locations/{location}/instances/{instance}/referenceLists/{reference_list}
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Required. The ID to use for the reference list. This is also the display name for
	// the reference list. It must satisfy the following requirements:
	// - Starts with letter.
	// - Contains only letters, numbers and underscore.
	// - Has length < 256.
	// - Must be unique.
	ReferenceListId *string `pulumi:"referenceListId"`
	// Output only. The timestamp when the reference list was last updated.
	RevisionCreateTime *string `pulumi:"revisionCreateTime"`
	// Output only. The count of self-authored rules using the reference list.
	RuleAssociationsCount *int `pulumi:"ruleAssociationsCount"`
	// Output only. The resource names for the associated self-authored Rules that use this
	// reference list.
	// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
	Rules []string `pulumi:"rules"`
	// ScopeInfo specifies the scope info of the reference list.
	// Structure is documented below.
	ScopeInfos []ReferenceListScopeInfo `pulumi:"scopeInfos"`
	// Possible values:
	// REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING
	// REFERENCE_LIST_SYNTAX_TYPE_REGEX
	// REFERENCE_LIST_SYNTAX_TYPE_CIDR
	SyntaxType *string `pulumi:"syntaxType"`
}

type ReferenceListState struct {
	// Required. A user-provided description of the reference list.
	Description pulumi.StringPtrInput
	// Output only. The unique display name of the reference list.
	DisplayName pulumi.StringPtrInput
	// Required. The entries of the reference list.
	// When listed, they are returned in the order that was specified at creation
	// or update. The combined size of the values of the reference list may not
	// exceed 6MB.
	// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
	// Structure is documented below.
	Entries ReferenceListEntryArrayInput
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringPtrInput
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location pulumi.StringPtrInput
	// Output only. The resource name of the reference list.
	// Format:
	// projects/{project}/locations/{location}/instances/{instance}/referenceLists/{reference_list}
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Required. The ID to use for the reference list. This is also the display name for
	// the reference list. It must satisfy the following requirements:
	// - Starts with letter.
	// - Contains only letters, numbers and underscore.
	// - Has length < 256.
	// - Must be unique.
	ReferenceListId pulumi.StringPtrInput
	// Output only. The timestamp when the reference list was last updated.
	RevisionCreateTime pulumi.StringPtrInput
	// Output only. The count of self-authored rules using the reference list.
	RuleAssociationsCount pulumi.IntPtrInput
	// Output only. The resource names for the associated self-authored Rules that use this
	// reference list.
	// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
	Rules pulumi.StringArrayInput
	// ScopeInfo specifies the scope info of the reference list.
	// Structure is documented below.
	ScopeInfos ReferenceListScopeInfoArrayInput
	// Possible values:
	// REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING
	// REFERENCE_LIST_SYNTAX_TYPE_REGEX
	// REFERENCE_LIST_SYNTAX_TYPE_CIDR
	SyntaxType pulumi.StringPtrInput
}

func (ReferenceListState) ElementType() reflect.Type {
	return reflect.TypeOf((*referenceListState)(nil)).Elem()
}

type referenceListArgs struct {
	// Required. A user-provided description of the reference list.
	Description string `pulumi:"description"`
	// Required. The entries of the reference list.
	// When listed, they are returned in the order that was specified at creation
	// or update. The combined size of the values of the reference list may not
	// exceed 6MB.
	// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
	// Structure is documented below.
	Entries []ReferenceListEntry `pulumi:"entries"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance string `pulumi:"instance"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// Required. The ID to use for the reference list. This is also the display name for
	// the reference list. It must satisfy the following requirements:
	// - Starts with letter.
	// - Contains only letters, numbers and underscore.
	// - Has length < 256.
	// - Must be unique.
	ReferenceListId string `pulumi:"referenceListId"`
	// Possible values:
	// REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING
	// REFERENCE_LIST_SYNTAX_TYPE_REGEX
	// REFERENCE_LIST_SYNTAX_TYPE_CIDR
	SyntaxType string `pulumi:"syntaxType"`
}

// The set of arguments for constructing a ReferenceList resource.
type ReferenceListArgs struct {
	// Required. A user-provided description of the reference list.
	Description pulumi.StringInput
	// Required. The entries of the reference list.
	// When listed, they are returned in the order that was specified at creation
	// or update. The combined size of the values of the reference list may not
	// exceed 6MB.
	// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
	// Structure is documented below.
	Entries ReferenceListEntryArrayInput
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringInput
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location pulumi.StringInput
	Project  pulumi.StringPtrInput
	// Required. The ID to use for the reference list. This is also the display name for
	// the reference list. It must satisfy the following requirements:
	// - Starts with letter.
	// - Contains only letters, numbers and underscore.
	// - Has length < 256.
	// - Must be unique.
	ReferenceListId pulumi.StringInput
	// Possible values:
	// REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING
	// REFERENCE_LIST_SYNTAX_TYPE_REGEX
	// REFERENCE_LIST_SYNTAX_TYPE_CIDR
	SyntaxType pulumi.StringInput
}

func (ReferenceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*referenceListArgs)(nil)).Elem()
}

type ReferenceListInput interface {
	pulumi.Input

	ToReferenceListOutput() ReferenceListOutput
	ToReferenceListOutputWithContext(ctx context.Context) ReferenceListOutput
}

func (*ReferenceList) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceList)(nil)).Elem()
}

func (i *ReferenceList) ToReferenceListOutput() ReferenceListOutput {
	return i.ToReferenceListOutputWithContext(context.Background())
}

func (i *ReferenceList) ToReferenceListOutputWithContext(ctx context.Context) ReferenceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceListOutput)
}

// ReferenceListArrayInput is an input type that accepts ReferenceListArray and ReferenceListArrayOutput values.
// You can construct a concrete instance of `ReferenceListArrayInput` via:
//
//	ReferenceListArray{ ReferenceListArgs{...} }
type ReferenceListArrayInput interface {
	pulumi.Input

	ToReferenceListArrayOutput() ReferenceListArrayOutput
	ToReferenceListArrayOutputWithContext(context.Context) ReferenceListArrayOutput
}

type ReferenceListArray []ReferenceListInput

func (ReferenceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReferenceList)(nil)).Elem()
}

func (i ReferenceListArray) ToReferenceListArrayOutput() ReferenceListArrayOutput {
	return i.ToReferenceListArrayOutputWithContext(context.Background())
}

func (i ReferenceListArray) ToReferenceListArrayOutputWithContext(ctx context.Context) ReferenceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceListArrayOutput)
}

// ReferenceListMapInput is an input type that accepts ReferenceListMap and ReferenceListMapOutput values.
// You can construct a concrete instance of `ReferenceListMapInput` via:
//
//	ReferenceListMap{ "key": ReferenceListArgs{...} }
type ReferenceListMapInput interface {
	pulumi.Input

	ToReferenceListMapOutput() ReferenceListMapOutput
	ToReferenceListMapOutputWithContext(context.Context) ReferenceListMapOutput
}

type ReferenceListMap map[string]ReferenceListInput

func (ReferenceListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReferenceList)(nil)).Elem()
}

func (i ReferenceListMap) ToReferenceListMapOutput() ReferenceListMapOutput {
	return i.ToReferenceListMapOutputWithContext(context.Background())
}

func (i ReferenceListMap) ToReferenceListMapOutputWithContext(ctx context.Context) ReferenceListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceListMapOutput)
}

type ReferenceListOutput struct{ *pulumi.OutputState }

func (ReferenceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceList)(nil)).Elem()
}

func (o ReferenceListOutput) ToReferenceListOutput() ReferenceListOutput {
	return o
}

func (o ReferenceListOutput) ToReferenceListOutputWithContext(ctx context.Context) ReferenceListOutput {
	return o
}

// Required. A user-provided description of the reference list.
func (o ReferenceListOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceList) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Output only. The unique display name of the reference list.
func (o ReferenceListOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceList) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Required. The entries of the reference list.
// When listed, they are returned in the order that was specified at creation
// or update. The combined size of the values of the reference list may not
// exceed 6MB.
// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
// Structure is documented below.
func (o ReferenceListOutput) Entries() ReferenceListEntryArrayOutput {
	return o.ApplyT(func(v *ReferenceList) ReferenceListEntryArrayOutput { return v.Entries }).(ReferenceListEntryArrayOutput)
}

// The unique identifier for the Chronicle instance, which is the same as the customer ID.
func (o ReferenceListOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceList) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
func (o ReferenceListOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceList) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Output only. The resource name of the reference list.
// Format:
// projects/{project}/locations/{location}/instances/{instance}/referenceLists/{reference_list}
func (o ReferenceListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceList) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ReferenceListOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceList) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Required. The ID to use for the reference list. This is also the display name for
// the reference list. It must satisfy the following requirements:
// - Starts with letter.
// - Contains only letters, numbers and underscore.
// - Has length < 256.
// - Must be unique.
func (o ReferenceListOutput) ReferenceListId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceList) pulumi.StringOutput { return v.ReferenceListId }).(pulumi.StringOutput)
}

// Output only. The timestamp when the reference list was last updated.
func (o ReferenceListOutput) RevisionCreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceList) pulumi.StringOutput { return v.RevisionCreateTime }).(pulumi.StringOutput)
}

// Output only. The count of self-authored rules using the reference list.
func (o ReferenceListOutput) RuleAssociationsCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ReferenceList) pulumi.IntOutput { return v.RuleAssociationsCount }).(pulumi.IntOutput)
}

// Output only. The resource names for the associated self-authored Rules that use this
// reference list.
// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
func (o ReferenceListOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReferenceList) pulumi.StringArrayOutput { return v.Rules }).(pulumi.StringArrayOutput)
}

// ScopeInfo specifies the scope info of the reference list.
// Structure is documented below.
func (o ReferenceListOutput) ScopeInfos() ReferenceListScopeInfoArrayOutput {
	return o.ApplyT(func(v *ReferenceList) ReferenceListScopeInfoArrayOutput { return v.ScopeInfos }).(ReferenceListScopeInfoArrayOutput)
}

// Possible values:
// REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING
// REFERENCE_LIST_SYNTAX_TYPE_REGEX
// REFERENCE_LIST_SYNTAX_TYPE_CIDR
func (o ReferenceListOutput) SyntaxType() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceList) pulumi.StringOutput { return v.SyntaxType }).(pulumi.StringOutput)
}

type ReferenceListArrayOutput struct{ *pulumi.OutputState }

func (ReferenceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReferenceList)(nil)).Elem()
}

func (o ReferenceListArrayOutput) ToReferenceListArrayOutput() ReferenceListArrayOutput {
	return o
}

func (o ReferenceListArrayOutput) ToReferenceListArrayOutputWithContext(ctx context.Context) ReferenceListArrayOutput {
	return o
}

func (o ReferenceListArrayOutput) Index(i pulumi.IntInput) ReferenceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReferenceList {
		return vs[0].([]*ReferenceList)[vs[1].(int)]
	}).(ReferenceListOutput)
}

type ReferenceListMapOutput struct{ *pulumi.OutputState }

func (ReferenceListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReferenceList)(nil)).Elem()
}

func (o ReferenceListMapOutput) ToReferenceListMapOutput() ReferenceListMapOutput {
	return o
}

func (o ReferenceListMapOutput) ToReferenceListMapOutputWithContext(ctx context.Context) ReferenceListMapOutput {
	return o
}

func (o ReferenceListMapOutput) MapIndex(k pulumi.StringInput) ReferenceListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReferenceList {
		return vs[0].(map[string]*ReferenceList)[vs[1].(string)]
	}).(ReferenceListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceListInput)(nil)).Elem(), &ReferenceList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceListArrayInput)(nil)).Elem(), ReferenceListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceListMapInput)(nil)).Elem(), ReferenceListMap{})
	pulumi.RegisterOutputType(ReferenceListOutput{})
	pulumi.RegisterOutputType(ReferenceListArrayOutput{})
	pulumi.RegisterOutputType(ReferenceListMapOutput{})
}
