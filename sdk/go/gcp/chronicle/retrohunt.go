// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronicle

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrohunt is an execution of a Rule over a time range in the past.
//
// To get more information about Retrohunt, see:
//
// * [API documentation](https://cloud.google.com/chronicle/docs/reference/rest/v1/projects.locations.instances.rules.retrohunts)
// * How-to Guides
//   - [Google SecOps Guides](https://cloud.google.com/chronicle/docs/secops/secops-overview)
//
// ## Example Usage
//
// ## Import
//
// Retrohunt can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/instances/{{instance}}/rules/{{rule}}/retrohunts/{{retrohunt}}`
//
// * `{{project}}/{{location}}/{{instance}}/{{rule}}/{{retrohunt}}`
//
// * `{{location}}/{{instance}}/{{rule}}/{{retrohunt}}`
//
// When using the `pulumi import` command, Retrohunt can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:chronicle/retrohunt:Retrohunt default projects/{{project}}/locations/{{location}}/instances/{{instance}}/rules/{{rule}}/retrohunts/{{retrohunt}}
// ```
//
// ```sh
// $ pulumi import gcp:chronicle/retrohunt:Retrohunt default {{project}}/{{location}}/{{instance}}/{{rule}}/{{retrohunt}}
// ```
//
// ```sh
// $ pulumi import gcp:chronicle/retrohunt:Retrohunt default {{location}}/{{instance}}/{{rule}}/{{retrohunt}}
// ```
type Retrohunt struct {
	pulumi.CustomResourceState

	// The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
	RetrohuntId pulumi.StringOutput `pulumi:"RetrohuntId"`
	// Represents a time interval, encoded as a Timestamp start (inclusive) and a
	// Timestamp end (exclusive).
	// The start must be less than or equal to the end.
	// When the start equals the end, the interval is empty (matches no time).
	// When both start and end are unspecified, the interval matches any time.
	// Structure is documented below.
	ExecutionIntervals RetrohuntExecutionIntervalArrayOutput `pulumi:"executionIntervals"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringOutput `pulumi:"instance"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the retrohunt.
	// Retrohunt is the child of a rule revision. {rule} in the format below is
	// structured as {rule_id@revision_id}.
	// Format:
	// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}
	Name pulumi.StringOutput `pulumi:"name"`
	// Represents a time interval, encoded as a Timestamp start (inclusive) and a
	// Timestamp end (exclusive).
	// The start must be less than or equal to the end.
	// When the start equals the end, the interval is empty (matches no time).
	// When both start and end are unspecified, the interval matches any time.
	// Structure is documented below.
	ProcessInterval RetrohuntProcessIntervalOutput `pulumi:"processInterval"`
	// Output only. Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
	ProgressPercentage pulumi.Float64Output `pulumi:"progressPercentage"`
	Project            pulumi.StringOutput  `pulumi:"project"`
	// The Rule ID of the rule.
	Rule pulumi.StringOutput `pulumi:"rule"`
	// Output only. The state of the retrohunt.
	// Possible values:
	// RUNNING
	// DONE
	// CANCELLED
	// FAILED
	State pulumi.StringOutput `pulumi:"state"`
}

// NewRetrohunt registers a new resource with the given unique name, arguments, and options.
func NewRetrohunt(ctx *pulumi.Context,
	name string, args *RetrohuntArgs, opts ...pulumi.ResourceOption) (*Retrohunt, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ProcessInterval == nil {
		return nil, errors.New("invalid value for required argument 'ProcessInterval'")
	}
	if args.Rule == nil {
		return nil, errors.New("invalid value for required argument 'Rule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Retrohunt
	err := ctx.RegisterResource("gcp:chronicle/retrohunt:Retrohunt", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRetrohunt gets an existing Retrohunt resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRetrohunt(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RetrohuntState, opts ...pulumi.ResourceOption) (*Retrohunt, error) {
	var resource Retrohunt
	err := ctx.ReadResource("gcp:chronicle/retrohunt:Retrohunt", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Retrohunt resources.
type retrohuntState struct {
	// The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
	RetrohuntId *string `pulumi:"RetrohuntId"`
	// Represents a time interval, encoded as a Timestamp start (inclusive) and a
	// Timestamp end (exclusive).
	// The start must be less than or equal to the end.
	// When the start equals the end, the interval is empty (matches no time).
	// When both start and end are unspecified, the interval matches any time.
	// Structure is documented below.
	ExecutionIntervals []RetrohuntExecutionInterval `pulumi:"executionIntervals"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance *string `pulumi:"instance"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location *string `pulumi:"location"`
	// The resource name of the retrohunt.
	// Retrohunt is the child of a rule revision. {rule} in the format below is
	// structured as {rule_id@revision_id}.
	// Format:
	// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}
	Name *string `pulumi:"name"`
	// Represents a time interval, encoded as a Timestamp start (inclusive) and a
	// Timestamp end (exclusive).
	// The start must be less than or equal to the end.
	// When the start equals the end, the interval is empty (matches no time).
	// When both start and end are unspecified, the interval matches any time.
	// Structure is documented below.
	ProcessInterval *RetrohuntProcessInterval `pulumi:"processInterval"`
	// Output only. Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
	ProgressPercentage *float64 `pulumi:"progressPercentage"`
	Project            *string  `pulumi:"project"`
	// The Rule ID of the rule.
	Rule *string `pulumi:"rule"`
	// Output only. The state of the retrohunt.
	// Possible values:
	// RUNNING
	// DONE
	// CANCELLED
	// FAILED
	State *string `pulumi:"state"`
}

type RetrohuntState struct {
	// The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
	RetrohuntId pulumi.StringPtrInput
	// Represents a time interval, encoded as a Timestamp start (inclusive) and a
	// Timestamp end (exclusive).
	// The start must be less than or equal to the end.
	// When the start equals the end, the interval is empty (matches no time).
	// When both start and end are unspecified, the interval matches any time.
	// Structure is documented below.
	ExecutionIntervals RetrohuntExecutionIntervalArrayInput
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringPtrInput
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location pulumi.StringPtrInput
	// The resource name of the retrohunt.
	// Retrohunt is the child of a rule revision. {rule} in the format below is
	// structured as {rule_id@revision_id}.
	// Format:
	// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}
	Name pulumi.StringPtrInput
	// Represents a time interval, encoded as a Timestamp start (inclusive) and a
	// Timestamp end (exclusive).
	// The start must be less than or equal to the end.
	// When the start equals the end, the interval is empty (matches no time).
	// When both start and end are unspecified, the interval matches any time.
	// Structure is documented below.
	ProcessInterval RetrohuntProcessIntervalPtrInput
	// Output only. Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
	ProgressPercentage pulumi.Float64PtrInput
	Project            pulumi.StringPtrInput
	// The Rule ID of the rule.
	Rule pulumi.StringPtrInput
	// Output only. The state of the retrohunt.
	// Possible values:
	// RUNNING
	// DONE
	// CANCELLED
	// FAILED
	State pulumi.StringPtrInput
}

func (RetrohuntState) ElementType() reflect.Type {
	return reflect.TypeOf((*retrohuntState)(nil)).Elem()
}

type retrohuntArgs struct {
	// The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
	RetrohuntId *string `pulumi:"RetrohuntId"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance string `pulumi:"instance"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location string `pulumi:"location"`
	// Represents a time interval, encoded as a Timestamp start (inclusive) and a
	// Timestamp end (exclusive).
	// The start must be less than or equal to the end.
	// When the start equals the end, the interval is empty (matches no time).
	// When both start and end are unspecified, the interval matches any time.
	// Structure is documented below.
	ProcessInterval RetrohuntProcessInterval `pulumi:"processInterval"`
	Project         *string                  `pulumi:"project"`
	// The Rule ID of the rule.
	Rule string `pulumi:"rule"`
}

// The set of arguments for constructing a Retrohunt resource.
type RetrohuntArgs struct {
	// The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
	RetrohuntId pulumi.StringPtrInput
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringInput
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location pulumi.StringInput
	// Represents a time interval, encoded as a Timestamp start (inclusive) and a
	// Timestamp end (exclusive).
	// The start must be less than or equal to the end.
	// When the start equals the end, the interval is empty (matches no time).
	// When both start and end are unspecified, the interval matches any time.
	// Structure is documented below.
	ProcessInterval RetrohuntProcessIntervalInput
	Project         pulumi.StringPtrInput
	// The Rule ID of the rule.
	Rule pulumi.StringInput
}

func (RetrohuntArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*retrohuntArgs)(nil)).Elem()
}

type RetrohuntInput interface {
	pulumi.Input

	ToRetrohuntOutput() RetrohuntOutput
	ToRetrohuntOutputWithContext(ctx context.Context) RetrohuntOutput
}

func (*Retrohunt) ElementType() reflect.Type {
	return reflect.TypeOf((**Retrohunt)(nil)).Elem()
}

func (i *Retrohunt) ToRetrohuntOutput() RetrohuntOutput {
	return i.ToRetrohuntOutputWithContext(context.Background())
}

func (i *Retrohunt) ToRetrohuntOutputWithContext(ctx context.Context) RetrohuntOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetrohuntOutput)
}

// RetrohuntArrayInput is an input type that accepts RetrohuntArray and RetrohuntArrayOutput values.
// You can construct a concrete instance of `RetrohuntArrayInput` via:
//
//	RetrohuntArray{ RetrohuntArgs{...} }
type RetrohuntArrayInput interface {
	pulumi.Input

	ToRetrohuntArrayOutput() RetrohuntArrayOutput
	ToRetrohuntArrayOutputWithContext(context.Context) RetrohuntArrayOutput
}

type RetrohuntArray []RetrohuntInput

func (RetrohuntArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Retrohunt)(nil)).Elem()
}

func (i RetrohuntArray) ToRetrohuntArrayOutput() RetrohuntArrayOutput {
	return i.ToRetrohuntArrayOutputWithContext(context.Background())
}

func (i RetrohuntArray) ToRetrohuntArrayOutputWithContext(ctx context.Context) RetrohuntArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetrohuntArrayOutput)
}

// RetrohuntMapInput is an input type that accepts RetrohuntMap and RetrohuntMapOutput values.
// You can construct a concrete instance of `RetrohuntMapInput` via:
//
//	RetrohuntMap{ "key": RetrohuntArgs{...} }
type RetrohuntMapInput interface {
	pulumi.Input

	ToRetrohuntMapOutput() RetrohuntMapOutput
	ToRetrohuntMapOutputWithContext(context.Context) RetrohuntMapOutput
}

type RetrohuntMap map[string]RetrohuntInput

func (RetrohuntMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Retrohunt)(nil)).Elem()
}

func (i RetrohuntMap) ToRetrohuntMapOutput() RetrohuntMapOutput {
	return i.ToRetrohuntMapOutputWithContext(context.Background())
}

func (i RetrohuntMap) ToRetrohuntMapOutputWithContext(ctx context.Context) RetrohuntMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetrohuntMapOutput)
}

type RetrohuntOutput struct{ *pulumi.OutputState }

func (RetrohuntOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Retrohunt)(nil)).Elem()
}

func (o RetrohuntOutput) ToRetrohuntOutput() RetrohuntOutput {
	return o
}

func (o RetrohuntOutput) ToRetrohuntOutputWithContext(ctx context.Context) RetrohuntOutput {
	return o
}

// The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
func (o RetrohuntOutput) RetrohuntId() pulumi.StringOutput {
	return o.ApplyT(func(v *Retrohunt) pulumi.StringOutput { return v.RetrohuntId }).(pulumi.StringOutput)
}

// Represents a time interval, encoded as a Timestamp start (inclusive) and a
// Timestamp end (exclusive).
// The start must be less than or equal to the end.
// When the start equals the end, the interval is empty (matches no time).
// When both start and end are unspecified, the interval matches any time.
// Structure is documented below.
func (o RetrohuntOutput) ExecutionIntervals() RetrohuntExecutionIntervalArrayOutput {
	return o.ApplyT(func(v *Retrohunt) RetrohuntExecutionIntervalArrayOutput { return v.ExecutionIntervals }).(RetrohuntExecutionIntervalArrayOutput)
}

// The unique identifier for the Chronicle instance, which is the same as the customer ID.
func (o RetrohuntOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *Retrohunt) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
func (o RetrohuntOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Retrohunt) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the retrohunt.
// Retrohunt is the child of a rule revision. {rule} in the format below is
// structured as {rule_id@revision_id}.
// Format:
// projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}
func (o RetrohuntOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Retrohunt) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Represents a time interval, encoded as a Timestamp start (inclusive) and a
// Timestamp end (exclusive).
// The start must be less than or equal to the end.
// When the start equals the end, the interval is empty (matches no time).
// When both start and end are unspecified, the interval matches any time.
// Structure is documented below.
func (o RetrohuntOutput) ProcessInterval() RetrohuntProcessIntervalOutput {
	return o.ApplyT(func(v *Retrohunt) RetrohuntProcessIntervalOutput { return v.ProcessInterval }).(RetrohuntProcessIntervalOutput)
}

// Output only. Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
func (o RetrohuntOutput) ProgressPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v *Retrohunt) pulumi.Float64Output { return v.ProgressPercentage }).(pulumi.Float64Output)
}

func (o RetrohuntOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Retrohunt) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The Rule ID of the rule.
func (o RetrohuntOutput) Rule() pulumi.StringOutput {
	return o.ApplyT(func(v *Retrohunt) pulumi.StringOutput { return v.Rule }).(pulumi.StringOutput)
}

// Output only. The state of the retrohunt.
// Possible values:
// RUNNING
// DONE
// CANCELLED
// FAILED
func (o RetrohuntOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Retrohunt) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type RetrohuntArrayOutput struct{ *pulumi.OutputState }

func (RetrohuntArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Retrohunt)(nil)).Elem()
}

func (o RetrohuntArrayOutput) ToRetrohuntArrayOutput() RetrohuntArrayOutput {
	return o
}

func (o RetrohuntArrayOutput) ToRetrohuntArrayOutputWithContext(ctx context.Context) RetrohuntArrayOutput {
	return o
}

func (o RetrohuntArrayOutput) Index(i pulumi.IntInput) RetrohuntOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Retrohunt {
		return vs[0].([]*Retrohunt)[vs[1].(int)]
	}).(RetrohuntOutput)
}

type RetrohuntMapOutput struct{ *pulumi.OutputState }

func (RetrohuntMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Retrohunt)(nil)).Elem()
}

func (o RetrohuntMapOutput) ToRetrohuntMapOutput() RetrohuntMapOutput {
	return o
}

func (o RetrohuntMapOutput) ToRetrohuntMapOutputWithContext(ctx context.Context) RetrohuntMapOutput {
	return o
}

func (o RetrohuntMapOutput) MapIndex(k pulumi.StringInput) RetrohuntOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Retrohunt {
		return vs[0].(map[string]*Retrohunt)[vs[1].(string)]
	}).(RetrohuntOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RetrohuntInput)(nil)).Elem(), &Retrohunt{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetrohuntArrayInput)(nil)).Elem(), RetrohuntArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetrohuntMapInput)(nil)).Elem(), RetrohuntMap{})
	pulumi.RegisterOutputType(RetrohuntOutput{})
	pulumi.RegisterOutputType(RetrohuntArrayOutput{})
	pulumi.RegisterOutputType(RetrohuntMapOutput{})
}
