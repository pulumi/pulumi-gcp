// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronicle

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A DataAccessScope is a boolean expression of data access labels used to restrict access to data for users.
//
// To get more information about DataAccessScope, see:
//
// * [API documentation](https://cloud.google.com/chronicle/docs/reference/rest/v1/projects.locations.instances.dataAccessScopes)
// * How-to Guides
//   - [Introduction to data RBAC](https://cloud.google.com/chronicle/docs/onboard/onboard-datarbac)
//
// ## Example Usage
//
// ### Chronicle Dataaccessscope With Logtype
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/chronicle"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := chronicle.NewDataAccessScope(ctx, "example", &chronicle.DataAccessScopeArgs{
//				Location:          pulumi.String("us"),
//				Instance:          pulumi.String("00000000-0000-0000-0000-000000000000"),
//				DataAccessScopeId: pulumi.String("scope-id"),
//				Description:       pulumi.String("scope-description"),
//				AllowedDataAccessLabels: chronicle.DataAccessScopeAllowedDataAccessLabelArray{
//					&chronicle.DataAccessScopeAllowedDataAccessLabelArgs{
//						LogType: pulumi.String("GCP_CLOUDAUDIT"),
//					},
//					&chronicle.DataAccessScopeAllowedDataAccessLabelArgs{
//						LogType: pulumi.String("GITHUB"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Chronicle Dataaccessscope With Dataaccesslabel
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/chronicle"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := chronicle.NewDataAccessLabel(ctx, "custom_data_access_label", &chronicle.DataAccessLabelArgs{
//				Location:          pulumi.String("us"),
//				Instance:          pulumi.String("00000000-0000-0000-0000-000000000000"),
//				DataAccessLabelId: pulumi.String("label-id"),
//				UdmQuery:          pulumi.String("principal.hostname=\"google.com\""),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = chronicle.NewDataAccessScope(ctx, "example", &chronicle.DataAccessScopeArgs{
//				Location:          pulumi.String("us"),
//				Instance:          pulumi.String("00000000-0000-0000-0000-000000000000"),
//				DataAccessScopeId: pulumi.String("scope-id"),
//				Description:       pulumi.String("scope-description"),
//				AllowedDataAccessLabels: chronicle.DataAccessScopeAllowedDataAccessLabelArray{
//					&chronicle.DataAccessScopeAllowedDataAccessLabelArgs{
//						DataAccessLabel: pulumi.Any(googleChronicleDataAccessLabel.CustomDataAccessLabel.DataAccessLabelId),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Chronicle Dataaccessscope With Asset Namespace
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/chronicle"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := chronicle.NewDataAccessScope(ctx, "example", &chronicle.DataAccessScopeArgs{
//				Location:          pulumi.String("us"),
//				Instance:          pulumi.String("00000000-0000-0000-0000-000000000000"),
//				DataAccessScopeId: pulumi.String("scope-id"),
//				Description:       pulumi.String("scope-description"),
//				AllowedDataAccessLabels: chronicle.DataAccessScopeAllowedDataAccessLabelArray{
//					&chronicle.DataAccessScopeAllowedDataAccessLabelArgs{
//						AssetNamespace: pulumi.String("my-namespace"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Chronicle Dataaccessscope With Ingestion Label
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/chronicle"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := chronicle.NewDataAccessScope(ctx, "example", &chronicle.DataAccessScopeArgs{
//				Location:          pulumi.String("us"),
//				Instance:          pulumi.String("00000000-0000-0000-0000-000000000000"),
//				DataAccessScopeId: pulumi.String("scope-id"),
//				Description:       pulumi.String("scope-description"),
//				AllowedDataAccessLabels: chronicle.DataAccessScopeAllowedDataAccessLabelArray{
//					&chronicle.DataAccessScopeAllowedDataAccessLabelArgs{
//						IngestionLabel: &chronicle.DataAccessScopeAllowedDataAccessLabelIngestionLabelArgs{
//							IngestionLabelKey:   pulumi.String("ingestion_key"),
//							IngestionLabelValue: pulumi.String("ingestion_value"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Chronicle Dataaccessscope With Denied Labels
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/chronicle"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := chronicle.NewDataAccessLabel(ctx, "custom_data_access_label", &chronicle.DataAccessLabelArgs{
//				Location:          pulumi.String("us"),
//				Instance:          pulumi.String("00000000-0000-0000-0000-000000000000"),
//				DataAccessLabelId: pulumi.String("label-id"),
//				UdmQuery:          pulumi.String("principal.hostname=\"google.com\""),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = chronicle.NewDataAccessScope(ctx, "example", &chronicle.DataAccessScopeArgs{
//				Location:          pulumi.String("us"),
//				Instance:          pulumi.String("00000000-0000-0000-0000-000000000000"),
//				DataAccessScopeId: pulumi.String("scope-id"),
//				Description:       pulumi.String("scope-description"),
//				AllowAll:          pulumi.Bool(true),
//				DeniedDataAccessLabels: chronicle.DataAccessScopeDeniedDataAccessLabelArray{
//					&chronicle.DataAccessScopeDeniedDataAccessLabelArgs{
//						LogType: pulumi.String("GCP_CLOUDAUDIT"),
//					},
//					&chronicle.DataAccessScopeDeniedDataAccessLabelArgs{
//						DataAccessLabel: pulumi.Any(googleChronicleDataAccessLabel.CustomDataAccessLabel.DataAccessLabelId),
//					},
//					&chronicle.DataAccessScopeDeniedDataAccessLabelArgs{
//						IngestionLabel: &chronicle.DataAccessScopeDeniedDataAccessLabelIngestionLabelArgs{
//							IngestionLabelKey:   pulumi.String("ingestion_key"),
//							IngestionLabelValue: pulumi.String("ingestion_value"),
//						},
//					},
//					&chronicle.DataAccessScopeDeniedDataAccessLabelArgs{
//						AssetNamespace: pulumi.String("my-namespace"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DataAccessScope can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/instances/{{instance}}/dataAccessScopes/{{data_access_scope_id}}`
//
// * `{{project}}/{{location}}/{{instance}}/{{data_access_scope_id}}`
//
// * `{{location}}/{{instance}}/{{data_access_scope_id}}`
//
// When using the `pulumi import` command, DataAccessScope can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:chronicle/dataAccessScope:DataAccessScope default projects/{{project}}/locations/{{location}}/instances/{{instance}}/dataAccessScopes/{{data_access_scope_id}}
// ```
//
// ```sh
// $ pulumi import gcp:chronicle/dataAccessScope:DataAccessScope default {{project}}/{{location}}/{{instance}}/{{data_access_scope_id}}
// ```
//
// ```sh
// $ pulumi import gcp:chronicle/dataAccessScope:DataAccessScope default {{location}}/{{instance}}/{{data_access_scope_id}}
// ```
type DataAccessScope struct {
	pulumi.CustomResourceState

	// Optional. Whether or not the scope allows all labels, allowAll and
	// allowedDataAccessLabels are mutually exclusive and one of them must be
	// present. deniedDataAccessLabels can still be used along with allow_all.
	// When combined with denied_data_access_labels, access will be granted to all
	// data that doesn't have labels mentioned in denied_data_access_labels. E.g.:
	// A customer with scope with denied labels A and B and allowAll will be able
	// to see all data except data labeled with A and data labeled with B and data
	// with labels A and B.
	AllowAll pulumi.BoolPtrOutput `pulumi:"allowAll"`
	// The allowed labels for the scope. There has to be at
	// least one label allowed for the scope to be valid.
	// The logical operator for evaluation of the allowed labels is OR.
	// Either allowAll or allowedDataAccessLabels needs to be provided.
	// E.g.: A customer with scope with allowed labels A and B will be able
	// to see data with labeled with A or B or (A and B).
	// Structure is documented below.
	AllowedDataAccessLabels DataAccessScopeAllowedDataAccessLabelArrayOutput `pulumi:"allowedDataAccessLabels"`
	// Output only. The user who created the data access scope.
	Author pulumi.StringOutput `pulumi:"author"`
	// Output only. The time at which the data access scope was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Required. The user provided scope id which will become the last part of the name
	// of the scope resource.
	// Needs to be compliant with https://google.aip.dev/122
	DataAccessScopeId pulumi.StringOutput `pulumi:"dataAccessScopeId"`
	// Optional. The denied labels for the scope.
	// The logical operator for evaluation of the denied labels is AND.
	// E.g.: A customer with scope with denied labels A and B won't be able
	// to see data labeled with A and data labeled with B
	// and data with labels A and B.
	// Structure is documented below.
	DeniedDataAccessLabels DataAccessScopeDeniedDataAccessLabelArrayOutput `pulumi:"deniedDataAccessLabels"`
	// Optional. A description of the data access scope for a human reader.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Output only. The name to be used for display to customers of the data access scope.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringOutput `pulumi:"instance"`
	// Output only. The user who last updated the data access scope.
	LastEditor pulumi.StringOutput `pulumi:"lastEditor"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique full name of the data access scope. This unique identifier is generated using values provided for the URL parameters.
	// Format:
	// projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope_id}
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. The time at which the data access scope was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDataAccessScope registers a new resource with the given unique name, arguments, and options.
func NewDataAccessScope(ctx *pulumi.Context,
	name string, args *DataAccessScopeArgs, opts ...pulumi.ResourceOption) (*DataAccessScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataAccessScopeId == nil {
		return nil, errors.New("invalid value for required argument 'DataAccessScopeId'")
	}
	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataAccessScope
	err := ctx.RegisterResource("gcp:chronicle/dataAccessScope:DataAccessScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataAccessScope gets an existing DataAccessScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataAccessScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataAccessScopeState, opts ...pulumi.ResourceOption) (*DataAccessScope, error) {
	var resource DataAccessScope
	err := ctx.ReadResource("gcp:chronicle/dataAccessScope:DataAccessScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataAccessScope resources.
type dataAccessScopeState struct {
	// Optional. Whether or not the scope allows all labels, allowAll and
	// allowedDataAccessLabels are mutually exclusive and one of them must be
	// present. deniedDataAccessLabels can still be used along with allow_all.
	// When combined with denied_data_access_labels, access will be granted to all
	// data that doesn't have labels mentioned in denied_data_access_labels. E.g.:
	// A customer with scope with denied labels A and B and allowAll will be able
	// to see all data except data labeled with A and data labeled with B and data
	// with labels A and B.
	AllowAll *bool `pulumi:"allowAll"`
	// The allowed labels for the scope. There has to be at
	// least one label allowed for the scope to be valid.
	// The logical operator for evaluation of the allowed labels is OR.
	// Either allowAll or allowedDataAccessLabels needs to be provided.
	// E.g.: A customer with scope with allowed labels A and B will be able
	// to see data with labeled with A or B or (A and B).
	// Structure is documented below.
	AllowedDataAccessLabels []DataAccessScopeAllowedDataAccessLabel `pulumi:"allowedDataAccessLabels"`
	// Output only. The user who created the data access scope.
	Author *string `pulumi:"author"`
	// Output only. The time at which the data access scope was created.
	CreateTime *string `pulumi:"createTime"`
	// Required. The user provided scope id which will become the last part of the name
	// of the scope resource.
	// Needs to be compliant with https://google.aip.dev/122
	DataAccessScopeId *string `pulumi:"dataAccessScopeId"`
	// Optional. The denied labels for the scope.
	// The logical operator for evaluation of the denied labels is AND.
	// E.g.: A customer with scope with denied labels A and B won't be able
	// to see data labeled with A and data labeled with B
	// and data with labels A and B.
	// Structure is documented below.
	DeniedDataAccessLabels []DataAccessScopeDeniedDataAccessLabel `pulumi:"deniedDataAccessLabels"`
	// Optional. A description of the data access scope for a human reader.
	Description *string `pulumi:"description"`
	// Output only. The name to be used for display to customers of the data access scope.
	DisplayName *string `pulumi:"displayName"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance *string `pulumi:"instance"`
	// Output only. The user who last updated the data access scope.
	LastEditor *string `pulumi:"lastEditor"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location *string `pulumi:"location"`
	// The unique full name of the data access scope. This unique identifier is generated using values provided for the URL parameters.
	// Format:
	// projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope_id}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Output only. The time at which the data access scope was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type DataAccessScopeState struct {
	// Optional. Whether or not the scope allows all labels, allowAll and
	// allowedDataAccessLabels are mutually exclusive and one of them must be
	// present. deniedDataAccessLabels can still be used along with allow_all.
	// When combined with denied_data_access_labels, access will be granted to all
	// data that doesn't have labels mentioned in denied_data_access_labels. E.g.:
	// A customer with scope with denied labels A and B and allowAll will be able
	// to see all data except data labeled with A and data labeled with B and data
	// with labels A and B.
	AllowAll pulumi.BoolPtrInput
	// The allowed labels for the scope. There has to be at
	// least one label allowed for the scope to be valid.
	// The logical operator for evaluation of the allowed labels is OR.
	// Either allowAll or allowedDataAccessLabels needs to be provided.
	// E.g.: A customer with scope with allowed labels A and B will be able
	// to see data with labeled with A or B or (A and B).
	// Structure is documented below.
	AllowedDataAccessLabels DataAccessScopeAllowedDataAccessLabelArrayInput
	// Output only. The user who created the data access scope.
	Author pulumi.StringPtrInput
	// Output only. The time at which the data access scope was created.
	CreateTime pulumi.StringPtrInput
	// Required. The user provided scope id which will become the last part of the name
	// of the scope resource.
	// Needs to be compliant with https://google.aip.dev/122
	DataAccessScopeId pulumi.StringPtrInput
	// Optional. The denied labels for the scope.
	// The logical operator for evaluation of the denied labels is AND.
	// E.g.: A customer with scope with denied labels A and B won't be able
	// to see data labeled with A and data labeled with B
	// and data with labels A and B.
	// Structure is documented below.
	DeniedDataAccessLabels DataAccessScopeDeniedDataAccessLabelArrayInput
	// Optional. A description of the data access scope for a human reader.
	Description pulumi.StringPtrInput
	// Output only. The name to be used for display to customers of the data access scope.
	DisplayName pulumi.StringPtrInput
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringPtrInput
	// Output only. The user who last updated the data access scope.
	LastEditor pulumi.StringPtrInput
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location pulumi.StringPtrInput
	// The unique full name of the data access scope. This unique identifier is generated using values provided for the URL parameters.
	// Format:
	// projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope_id}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Output only. The time at which the data access scope was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (DataAccessScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataAccessScopeState)(nil)).Elem()
}

type dataAccessScopeArgs struct {
	// Optional. Whether or not the scope allows all labels, allowAll and
	// allowedDataAccessLabels are mutually exclusive and one of them must be
	// present. deniedDataAccessLabels can still be used along with allow_all.
	// When combined with denied_data_access_labels, access will be granted to all
	// data that doesn't have labels mentioned in denied_data_access_labels. E.g.:
	// A customer with scope with denied labels A and B and allowAll will be able
	// to see all data except data labeled with A and data labeled with B and data
	// with labels A and B.
	AllowAll *bool `pulumi:"allowAll"`
	// The allowed labels for the scope. There has to be at
	// least one label allowed for the scope to be valid.
	// The logical operator for evaluation of the allowed labels is OR.
	// Either allowAll or allowedDataAccessLabels needs to be provided.
	// E.g.: A customer with scope with allowed labels A and B will be able
	// to see data with labeled with A or B or (A and B).
	// Structure is documented below.
	AllowedDataAccessLabels []DataAccessScopeAllowedDataAccessLabel `pulumi:"allowedDataAccessLabels"`
	// Required. The user provided scope id which will become the last part of the name
	// of the scope resource.
	// Needs to be compliant with https://google.aip.dev/122
	DataAccessScopeId string `pulumi:"dataAccessScopeId"`
	// Optional. The denied labels for the scope.
	// The logical operator for evaluation of the denied labels is AND.
	// E.g.: A customer with scope with denied labels A and B won't be able
	// to see data labeled with A and data labeled with B
	// and data with labels A and B.
	// Structure is documented below.
	DeniedDataAccessLabels []DataAccessScopeDeniedDataAccessLabel `pulumi:"deniedDataAccessLabels"`
	// Optional. A description of the data access scope for a human reader.
	Description *string `pulumi:"description"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance string `pulumi:"instance"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a DataAccessScope resource.
type DataAccessScopeArgs struct {
	// Optional. Whether or not the scope allows all labels, allowAll and
	// allowedDataAccessLabels are mutually exclusive and one of them must be
	// present. deniedDataAccessLabels can still be used along with allow_all.
	// When combined with denied_data_access_labels, access will be granted to all
	// data that doesn't have labels mentioned in denied_data_access_labels. E.g.:
	// A customer with scope with denied labels A and B and allowAll will be able
	// to see all data except data labeled with A and data labeled with B and data
	// with labels A and B.
	AllowAll pulumi.BoolPtrInput
	// The allowed labels for the scope. There has to be at
	// least one label allowed for the scope to be valid.
	// The logical operator for evaluation of the allowed labels is OR.
	// Either allowAll or allowedDataAccessLabels needs to be provided.
	// E.g.: A customer with scope with allowed labels A and B will be able
	// to see data with labeled with A or B or (A and B).
	// Structure is documented below.
	AllowedDataAccessLabels DataAccessScopeAllowedDataAccessLabelArrayInput
	// Required. The user provided scope id which will become the last part of the name
	// of the scope resource.
	// Needs to be compliant with https://google.aip.dev/122
	DataAccessScopeId pulumi.StringInput
	// Optional. The denied labels for the scope.
	// The logical operator for evaluation of the denied labels is AND.
	// E.g.: A customer with scope with denied labels A and B won't be able
	// to see data labeled with A and data labeled with B
	// and data with labels A and B.
	// Structure is documented below.
	DeniedDataAccessLabels DataAccessScopeDeniedDataAccessLabelArrayInput
	// Optional. A description of the data access scope for a human reader.
	Description pulumi.StringPtrInput
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringInput
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (DataAccessScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataAccessScopeArgs)(nil)).Elem()
}

type DataAccessScopeInput interface {
	pulumi.Input

	ToDataAccessScopeOutput() DataAccessScopeOutput
	ToDataAccessScopeOutputWithContext(ctx context.Context) DataAccessScopeOutput
}

func (*DataAccessScope) ElementType() reflect.Type {
	return reflect.TypeOf((**DataAccessScope)(nil)).Elem()
}

func (i *DataAccessScope) ToDataAccessScopeOutput() DataAccessScopeOutput {
	return i.ToDataAccessScopeOutputWithContext(context.Background())
}

func (i *DataAccessScope) ToDataAccessScopeOutputWithContext(ctx context.Context) DataAccessScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataAccessScopeOutput)
}

// DataAccessScopeArrayInput is an input type that accepts DataAccessScopeArray and DataAccessScopeArrayOutput values.
// You can construct a concrete instance of `DataAccessScopeArrayInput` via:
//
//	DataAccessScopeArray{ DataAccessScopeArgs{...} }
type DataAccessScopeArrayInput interface {
	pulumi.Input

	ToDataAccessScopeArrayOutput() DataAccessScopeArrayOutput
	ToDataAccessScopeArrayOutputWithContext(context.Context) DataAccessScopeArrayOutput
}

type DataAccessScopeArray []DataAccessScopeInput

func (DataAccessScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataAccessScope)(nil)).Elem()
}

func (i DataAccessScopeArray) ToDataAccessScopeArrayOutput() DataAccessScopeArrayOutput {
	return i.ToDataAccessScopeArrayOutputWithContext(context.Background())
}

func (i DataAccessScopeArray) ToDataAccessScopeArrayOutputWithContext(ctx context.Context) DataAccessScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataAccessScopeArrayOutput)
}

// DataAccessScopeMapInput is an input type that accepts DataAccessScopeMap and DataAccessScopeMapOutput values.
// You can construct a concrete instance of `DataAccessScopeMapInput` via:
//
//	DataAccessScopeMap{ "key": DataAccessScopeArgs{...} }
type DataAccessScopeMapInput interface {
	pulumi.Input

	ToDataAccessScopeMapOutput() DataAccessScopeMapOutput
	ToDataAccessScopeMapOutputWithContext(context.Context) DataAccessScopeMapOutput
}

type DataAccessScopeMap map[string]DataAccessScopeInput

func (DataAccessScopeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataAccessScope)(nil)).Elem()
}

func (i DataAccessScopeMap) ToDataAccessScopeMapOutput() DataAccessScopeMapOutput {
	return i.ToDataAccessScopeMapOutputWithContext(context.Background())
}

func (i DataAccessScopeMap) ToDataAccessScopeMapOutputWithContext(ctx context.Context) DataAccessScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataAccessScopeMapOutput)
}

type DataAccessScopeOutput struct{ *pulumi.OutputState }

func (DataAccessScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataAccessScope)(nil)).Elem()
}

func (o DataAccessScopeOutput) ToDataAccessScopeOutput() DataAccessScopeOutput {
	return o
}

func (o DataAccessScopeOutput) ToDataAccessScopeOutputWithContext(ctx context.Context) DataAccessScopeOutput {
	return o
}

// Optional. Whether or not the scope allows all labels, allowAll and
// allowedDataAccessLabels are mutually exclusive and one of them must be
// present. deniedDataAccessLabels can still be used along with allow_all.
// When combined with denied_data_access_labels, access will be granted to all
// data that doesn't have labels mentioned in denied_data_access_labels. E.g.:
// A customer with scope with denied labels A and B and allowAll will be able
// to see all data except data labeled with A and data labeled with B and data
// with labels A and B.
func (o DataAccessScopeOutput) AllowAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataAccessScope) pulumi.BoolPtrOutput { return v.AllowAll }).(pulumi.BoolPtrOutput)
}

// The allowed labels for the scope. There has to be at
// least one label allowed for the scope to be valid.
// The logical operator for evaluation of the allowed labels is OR.
// Either allowAll or allowedDataAccessLabels needs to be provided.
// E.g.: A customer with scope with allowed labels A and B will be able
// to see data with labeled with A or B or (A and B).
// Structure is documented below.
func (o DataAccessScopeOutput) AllowedDataAccessLabels() DataAccessScopeAllowedDataAccessLabelArrayOutput {
	return o.ApplyT(func(v *DataAccessScope) DataAccessScopeAllowedDataAccessLabelArrayOutput {
		return v.AllowedDataAccessLabels
	}).(DataAccessScopeAllowedDataAccessLabelArrayOutput)
}

// Output only. The user who created the data access scope.
func (o DataAccessScopeOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessScope) pulumi.StringOutput { return v.Author }).(pulumi.StringOutput)
}

// Output only. The time at which the data access scope was created.
func (o DataAccessScopeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessScope) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Required. The user provided scope id which will become the last part of the name
// of the scope resource.
// Needs to be compliant with https://google.aip.dev/122
func (o DataAccessScopeOutput) DataAccessScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessScope) pulumi.StringOutput { return v.DataAccessScopeId }).(pulumi.StringOutput)
}

// Optional. The denied labels for the scope.
// The logical operator for evaluation of the denied labels is AND.
// E.g.: A customer with scope with denied labels A and B won't be able
// to see data labeled with A and data labeled with B
// and data with labels A and B.
// Structure is documented below.
func (o DataAccessScopeOutput) DeniedDataAccessLabels() DataAccessScopeDeniedDataAccessLabelArrayOutput {
	return o.ApplyT(func(v *DataAccessScope) DataAccessScopeDeniedDataAccessLabelArrayOutput {
		return v.DeniedDataAccessLabels
	}).(DataAccessScopeDeniedDataAccessLabelArrayOutput)
}

// Optional. A description of the data access scope for a human reader.
func (o DataAccessScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataAccessScope) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Output only. The name to be used for display to customers of the data access scope.
func (o DataAccessScopeOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessScope) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The unique identifier for the Chronicle instance, which is the same as the customer ID.
func (o DataAccessScopeOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessScope) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

// Output only. The user who last updated the data access scope.
func (o DataAccessScopeOutput) LastEditor() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessScope) pulumi.StringOutput { return v.LastEditor }).(pulumi.StringOutput)
}

// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
func (o DataAccessScopeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessScope) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique full name of the data access scope. This unique identifier is generated using values provided for the URL parameters.
// Format:
// projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope_id}
func (o DataAccessScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessScope) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o DataAccessScopeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessScope) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Output only. The time at which the data access scope was last updated.
func (o DataAccessScopeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessScope) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type DataAccessScopeArrayOutput struct{ *pulumi.OutputState }

func (DataAccessScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataAccessScope)(nil)).Elem()
}

func (o DataAccessScopeArrayOutput) ToDataAccessScopeArrayOutput() DataAccessScopeArrayOutput {
	return o
}

func (o DataAccessScopeArrayOutput) ToDataAccessScopeArrayOutputWithContext(ctx context.Context) DataAccessScopeArrayOutput {
	return o
}

func (o DataAccessScopeArrayOutput) Index(i pulumi.IntInput) DataAccessScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataAccessScope {
		return vs[0].([]*DataAccessScope)[vs[1].(int)]
	}).(DataAccessScopeOutput)
}

type DataAccessScopeMapOutput struct{ *pulumi.OutputState }

func (DataAccessScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataAccessScope)(nil)).Elem()
}

func (o DataAccessScopeMapOutput) ToDataAccessScopeMapOutput() DataAccessScopeMapOutput {
	return o
}

func (o DataAccessScopeMapOutput) ToDataAccessScopeMapOutputWithContext(ctx context.Context) DataAccessScopeMapOutput {
	return o
}

func (o DataAccessScopeMapOutput) MapIndex(k pulumi.StringInput) DataAccessScopeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataAccessScope {
		return vs[0].(map[string]*DataAccessScope)[vs[1].(string)]
	}).(DataAccessScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataAccessScopeInput)(nil)).Elem(), &DataAccessScope{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataAccessScopeArrayInput)(nil)).Elem(), DataAccessScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataAccessScopeMapInput)(nil)).Elem(), DataAccessScopeMap{})
	pulumi.RegisterOutputType(DataAccessScopeOutput{})
	pulumi.RegisterOutputType(DataAccessScopeArrayOutput{})
	pulumi.RegisterOutputType(DataAccessScopeMapOutput{})
}
