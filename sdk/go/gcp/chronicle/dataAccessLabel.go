// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chronicle

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A DataAccessLabel is a label on events to define user access to data.
//
// To get more information about DataAccessLabel, see:
//
// * [API documentation](https://cloud.google.com/chronicle/docs/reference/rest/v1/projects.locations.instances.dataAccessLabels)
// * How-to Guides
//   - [Introduction to data RBAC](https://cloud.google.com/chronicle/docs/onboard/onboard-datarbac)
//
// ## Example Usage
//
// ### Chronicle Dataaccesslabel Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/chronicle"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := chronicle.NewDataAccessLabel(ctx, "example", &chronicle.DataAccessLabelArgs{
//				Location:          pulumi.String("us"),
//				Instance:          pulumi.String("00000000-0000-0000-0000-000000000000"),
//				DataAccessLabelId: pulumi.String("label-id"),
//				UdmQuery:          pulumi.String("principal.hostname=\"google.com\""),
//				Description:       pulumi.String("label-description"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DataAccessLabel can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/instances/{{instance}}/dataAccessLabels/{{data_access_label_id}}`
//
// * `{{project}}/{{location}}/{{instance}}/{{data_access_label_id}}`
//
// * `{{location}}/{{instance}}/{{data_access_label_id}}`
//
// When using the `pulumi import` command, DataAccessLabel can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:chronicle/dataAccessLabel:DataAccessLabel default projects/{{project}}/locations/{{location}}/instances/{{instance}}/dataAccessLabels/{{data_access_label_id}}
// ```
//
// ```sh
// $ pulumi import gcp:chronicle/dataAccessLabel:DataAccessLabel default {{project}}/{{location}}/{{instance}}/{{data_access_label_id}}
// ```
//
// ```sh
// $ pulumi import gcp:chronicle/dataAccessLabel:DataAccessLabel default {{location}}/{{instance}}/{{data_access_label_id}}
// ```
type DataAccessLabel struct {
	pulumi.CustomResourceState

	// Output only. The user who created the data access label.
	Author pulumi.StringOutput `pulumi:"author"`
	// Output only. The time at which the data access label was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Required. The ID to use for the data access label, which will become the label's
	// display name and the final component of the label's resource name. The
	// maximum number of characters should be 63. Regex pattern is as per AIP:
	// https://google.aip.dev/122#resource-id-segments
	//
	// ***
	DataAccessLabelId pulumi.StringOutput `pulumi:"dataAccessLabelId"`
	// Optional. A description of the data access label for a human reader.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Output only. The short name displayed for the label as it appears on event data. This is same as data access label id.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringOutput `pulumi:"instance"`
	// Output only. The user who last updated the data access label.
	LastEditor pulumi.StringOutput `pulumi:"lastEditor"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique resource name of the data access label. This unique identifier is generated using values provided for the URL parameters.
	// Format:
	// projects/{project}/locations/{location}/instances/{instance}/dataAccessLabels/{data_access_label_id}
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// A UDM query over event data.
	UdmQuery pulumi.StringOutput `pulumi:"udmQuery"`
	// Output only. The time at which the data access label was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDataAccessLabel registers a new resource with the given unique name, arguments, and options.
func NewDataAccessLabel(ctx *pulumi.Context,
	name string, args *DataAccessLabelArgs, opts ...pulumi.ResourceOption) (*DataAccessLabel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataAccessLabelId == nil {
		return nil, errors.New("invalid value for required argument 'DataAccessLabelId'")
	}
	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.UdmQuery == nil {
		return nil, errors.New("invalid value for required argument 'UdmQuery'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataAccessLabel
	err := ctx.RegisterResource("gcp:chronicle/dataAccessLabel:DataAccessLabel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataAccessLabel gets an existing DataAccessLabel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataAccessLabel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataAccessLabelState, opts ...pulumi.ResourceOption) (*DataAccessLabel, error) {
	var resource DataAccessLabel
	err := ctx.ReadResource("gcp:chronicle/dataAccessLabel:DataAccessLabel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataAccessLabel resources.
type dataAccessLabelState struct {
	// Output only. The user who created the data access label.
	Author *string `pulumi:"author"`
	// Output only. The time at which the data access label was created.
	CreateTime *string `pulumi:"createTime"`
	// Required. The ID to use for the data access label, which will become the label's
	// display name and the final component of the label's resource name. The
	// maximum number of characters should be 63. Regex pattern is as per AIP:
	// https://google.aip.dev/122#resource-id-segments
	//
	// ***
	DataAccessLabelId *string `pulumi:"dataAccessLabelId"`
	// Optional. A description of the data access label for a human reader.
	Description *string `pulumi:"description"`
	// Output only. The short name displayed for the label as it appears on event data. This is same as data access label id.
	DisplayName *string `pulumi:"displayName"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance *string `pulumi:"instance"`
	// Output only. The user who last updated the data access label.
	LastEditor *string `pulumi:"lastEditor"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location *string `pulumi:"location"`
	// The unique resource name of the data access label. This unique identifier is generated using values provided for the URL parameters.
	// Format:
	// projects/{project}/locations/{location}/instances/{instance}/dataAccessLabels/{data_access_label_id}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A UDM query over event data.
	UdmQuery *string `pulumi:"udmQuery"`
	// Output only. The time at which the data access label was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type DataAccessLabelState struct {
	// Output only. The user who created the data access label.
	Author pulumi.StringPtrInput
	// Output only. The time at which the data access label was created.
	CreateTime pulumi.StringPtrInput
	// Required. The ID to use for the data access label, which will become the label's
	// display name and the final component of the label's resource name. The
	// maximum number of characters should be 63. Regex pattern is as per AIP:
	// https://google.aip.dev/122#resource-id-segments
	//
	// ***
	DataAccessLabelId pulumi.StringPtrInput
	// Optional. A description of the data access label for a human reader.
	Description pulumi.StringPtrInput
	// Output only. The short name displayed for the label as it appears on event data. This is same as data access label id.
	DisplayName pulumi.StringPtrInput
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringPtrInput
	// Output only. The user who last updated the data access label.
	LastEditor pulumi.StringPtrInput
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location pulumi.StringPtrInput
	// The unique resource name of the data access label. This unique identifier is generated using values provided for the URL parameters.
	// Format:
	// projects/{project}/locations/{location}/instances/{instance}/dataAccessLabels/{data_access_label_id}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// A UDM query over event data.
	UdmQuery pulumi.StringPtrInput
	// Output only. The time at which the data access label was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (DataAccessLabelState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataAccessLabelState)(nil)).Elem()
}

type dataAccessLabelArgs struct {
	// Required. The ID to use for the data access label, which will become the label's
	// display name and the final component of the label's resource name. The
	// maximum number of characters should be 63. Regex pattern is as per AIP:
	// https://google.aip.dev/122#resource-id-segments
	//
	// ***
	DataAccessLabelId string `pulumi:"dataAccessLabelId"`
	// Optional. A description of the data access label for a human reader.
	Description *string `pulumi:"description"`
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance string `pulumi:"instance"`
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A UDM query over event data.
	UdmQuery string `pulumi:"udmQuery"`
}

// The set of arguments for constructing a DataAccessLabel resource.
type DataAccessLabelArgs struct {
	// Required. The ID to use for the data access label, which will become the label's
	// display name and the final component of the label's resource name. The
	// maximum number of characters should be 63. Regex pattern is as per AIP:
	// https://google.aip.dev/122#resource-id-segments
	//
	// ***
	DataAccessLabelId pulumi.StringInput
	// Optional. A description of the data access label for a human reader.
	Description pulumi.StringPtrInput
	// The unique identifier for the Chronicle instance, which is the same as the customer ID.
	Instance pulumi.StringInput
	// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// A UDM query over event data.
	UdmQuery pulumi.StringInput
}

func (DataAccessLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataAccessLabelArgs)(nil)).Elem()
}

type DataAccessLabelInput interface {
	pulumi.Input

	ToDataAccessLabelOutput() DataAccessLabelOutput
	ToDataAccessLabelOutputWithContext(ctx context.Context) DataAccessLabelOutput
}

func (*DataAccessLabel) ElementType() reflect.Type {
	return reflect.TypeOf((**DataAccessLabel)(nil)).Elem()
}

func (i *DataAccessLabel) ToDataAccessLabelOutput() DataAccessLabelOutput {
	return i.ToDataAccessLabelOutputWithContext(context.Background())
}

func (i *DataAccessLabel) ToDataAccessLabelOutputWithContext(ctx context.Context) DataAccessLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataAccessLabelOutput)
}

// DataAccessLabelArrayInput is an input type that accepts DataAccessLabelArray and DataAccessLabelArrayOutput values.
// You can construct a concrete instance of `DataAccessLabelArrayInput` via:
//
//	DataAccessLabelArray{ DataAccessLabelArgs{...} }
type DataAccessLabelArrayInput interface {
	pulumi.Input

	ToDataAccessLabelArrayOutput() DataAccessLabelArrayOutput
	ToDataAccessLabelArrayOutputWithContext(context.Context) DataAccessLabelArrayOutput
}

type DataAccessLabelArray []DataAccessLabelInput

func (DataAccessLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataAccessLabel)(nil)).Elem()
}

func (i DataAccessLabelArray) ToDataAccessLabelArrayOutput() DataAccessLabelArrayOutput {
	return i.ToDataAccessLabelArrayOutputWithContext(context.Background())
}

func (i DataAccessLabelArray) ToDataAccessLabelArrayOutputWithContext(ctx context.Context) DataAccessLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataAccessLabelArrayOutput)
}

// DataAccessLabelMapInput is an input type that accepts DataAccessLabelMap and DataAccessLabelMapOutput values.
// You can construct a concrete instance of `DataAccessLabelMapInput` via:
//
//	DataAccessLabelMap{ "key": DataAccessLabelArgs{...} }
type DataAccessLabelMapInput interface {
	pulumi.Input

	ToDataAccessLabelMapOutput() DataAccessLabelMapOutput
	ToDataAccessLabelMapOutputWithContext(context.Context) DataAccessLabelMapOutput
}

type DataAccessLabelMap map[string]DataAccessLabelInput

func (DataAccessLabelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataAccessLabel)(nil)).Elem()
}

func (i DataAccessLabelMap) ToDataAccessLabelMapOutput() DataAccessLabelMapOutput {
	return i.ToDataAccessLabelMapOutputWithContext(context.Background())
}

func (i DataAccessLabelMap) ToDataAccessLabelMapOutputWithContext(ctx context.Context) DataAccessLabelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataAccessLabelMapOutput)
}

type DataAccessLabelOutput struct{ *pulumi.OutputState }

func (DataAccessLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataAccessLabel)(nil)).Elem()
}

func (o DataAccessLabelOutput) ToDataAccessLabelOutput() DataAccessLabelOutput {
	return o
}

func (o DataAccessLabelOutput) ToDataAccessLabelOutputWithContext(ctx context.Context) DataAccessLabelOutput {
	return o
}

// Output only. The user who created the data access label.
func (o DataAccessLabelOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessLabel) pulumi.StringOutput { return v.Author }).(pulumi.StringOutput)
}

// Output only. The time at which the data access label was created.
func (o DataAccessLabelOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessLabel) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Required. The ID to use for the data access label, which will become the label's
// display name and the final component of the label's resource name. The
// maximum number of characters should be 63. Regex pattern is as per AIP:
// https://google.aip.dev/122#resource-id-segments
//
// ***
func (o DataAccessLabelOutput) DataAccessLabelId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessLabel) pulumi.StringOutput { return v.DataAccessLabelId }).(pulumi.StringOutput)
}

// Optional. A description of the data access label for a human reader.
func (o DataAccessLabelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataAccessLabel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Output only. The short name displayed for the label as it appears on event data. This is same as data access label id.
func (o DataAccessLabelOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessLabel) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The unique identifier for the Chronicle instance, which is the same as the customer ID.
func (o DataAccessLabelOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessLabel) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

// Output only. The user who last updated the data access label.
func (o DataAccessLabelOutput) LastEditor() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessLabel) pulumi.StringOutput { return v.LastEditor }).(pulumi.StringOutput)
}

// The location of the resource. This is the geographical region where the Chronicle instance resides, such as "us" or "europe-west2".
func (o DataAccessLabelOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessLabel) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique resource name of the data access label. This unique identifier is generated using values provided for the URL parameters.
// Format:
// projects/{project}/locations/{location}/instances/{instance}/dataAccessLabels/{data_access_label_id}
func (o DataAccessLabelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessLabel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o DataAccessLabelOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessLabel) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A UDM query over event data.
func (o DataAccessLabelOutput) UdmQuery() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessLabel) pulumi.StringOutput { return v.UdmQuery }).(pulumi.StringOutput)
}

// Output only. The time at which the data access label was last updated.
func (o DataAccessLabelOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataAccessLabel) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type DataAccessLabelArrayOutput struct{ *pulumi.OutputState }

func (DataAccessLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataAccessLabel)(nil)).Elem()
}

func (o DataAccessLabelArrayOutput) ToDataAccessLabelArrayOutput() DataAccessLabelArrayOutput {
	return o
}

func (o DataAccessLabelArrayOutput) ToDataAccessLabelArrayOutputWithContext(ctx context.Context) DataAccessLabelArrayOutput {
	return o
}

func (o DataAccessLabelArrayOutput) Index(i pulumi.IntInput) DataAccessLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataAccessLabel {
		return vs[0].([]*DataAccessLabel)[vs[1].(int)]
	}).(DataAccessLabelOutput)
}

type DataAccessLabelMapOutput struct{ *pulumi.OutputState }

func (DataAccessLabelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataAccessLabel)(nil)).Elem()
}

func (o DataAccessLabelMapOutput) ToDataAccessLabelMapOutput() DataAccessLabelMapOutput {
	return o
}

func (o DataAccessLabelMapOutput) ToDataAccessLabelMapOutputWithContext(ctx context.Context) DataAccessLabelMapOutput {
	return o
}

func (o DataAccessLabelMapOutput) MapIndex(k pulumi.StringInput) DataAccessLabelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataAccessLabel {
		return vs[0].(map[string]*DataAccessLabel)[vs[1].(string)]
	}).(DataAccessLabelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataAccessLabelInput)(nil)).Elem(), &DataAccessLabel{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataAccessLabelArrayInput)(nil)).Elem(), DataAccessLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataAccessLabelMapInput)(nil)).Elem(), DataAccessLabelMap{})
	pulumi.RegisterOutputType(DataAccessLabelOutput{})
	pulumi.RegisterOutputType(DataAccessLabelArrayOutput{})
	pulumi.RegisterOutputType(DataAccessLabelMapOutput{})
}
