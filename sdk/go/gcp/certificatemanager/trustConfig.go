// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificatemanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// TrustConfig represents a resource that represents your Public Key Infrastructure (PKI) configuration in Certificate Manager for use in mutual TLS authentication scenarios.
//
// To get more information about TrustConfig, see:
//
// * [API documentation](https://cloud.google.com/certificate-manager/docs/reference/certificate-manager/rest/v1/projects.locations.trustConfigs/create)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/certificate-manager/docs)
//
// > **Warning:** All arguments including the following potentially sensitive
// values will be stored in the raw state as plain text: `trust_stores.trust_stores.trust_anchors.trust_anchors.pem_certificate`, `trust_stores.trust_stores.intermediate_cas.intermediate_cas.pem_certificate`.
// Read more about sensitive data in state.
//
// ## Example Usage
// ### Certificate Manager Trust Config
//
// ```go
// package main
//
// import (
//
//	"os"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/certificatemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := certificatemanager.NewTrustConfig(ctx, "default", &certificatemanager.TrustConfigArgs{
//				Description: pulumi.String("sample description for the trust config"),
//				Location:    pulumi.String("us-central1"),
//				TrustStores: certificatemanager.TrustConfigTrustStoreArray{
//					&certificatemanager.TrustConfigTrustStoreArgs{
//						TrustAnchors: certificatemanager.TrustConfigTrustStoreTrustAnchorArray{
//							&certificatemanager.TrustConfigTrustStoreTrustAnchorArgs{
//								PemCertificate: readFileOrPanic("test-fixtures/cert.pem"),
//							},
//						},
//						IntermediateCas: certificatemanager.TrustConfigTrustStoreIntermediateCaArray{
//							&certificatemanager.TrustConfigTrustStoreIntermediateCaArgs{
//								PemCertificate: readFileOrPanic("test-fixtures/cert.pem"),
//							},
//						},
//					},
//				},
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # TrustConfig can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:certificatemanager/trustConfig:TrustConfig default projects/{{project}}/locations/{{location}}/trustConfigs/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:certificatemanager/trustConfig:TrustConfig default {{project}}/{{location}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:certificatemanager/trustConfig:TrustConfig default {{location}}/{{name}}
//
// ```
type TrustConfig struct {
	pulumi.CustomResourceState

	// The creation timestamp of a TrustConfig.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// One or more paragraphs of text description of a trust config.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Set of label tags associated with the trust config.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The trust config location.
	//
	// ***
	Location pulumi.StringOutput `pulumi:"location"`
	// A user-defined name of the trust config. Trust config names must be unique globally.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Set of trust stores to perform validation against.
	// This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
	// Structure is documented below.
	TrustStores TrustConfigTrustStoreArrayOutput `pulumi:"trustStores"`
	// The last update timestamp of a TrustConfig.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTrustConfig registers a new resource with the given unique name, arguments, and options.
func NewTrustConfig(ctx *pulumi.Context,
	name string, args *TrustConfigArgs, opts ...pulumi.ResourceOption) (*TrustConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrustConfig
	err := ctx.RegisterResource("gcp:certificatemanager/trustConfig:TrustConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrustConfig gets an existing TrustConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrustConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrustConfigState, opts ...pulumi.ResourceOption) (*TrustConfig, error) {
	var resource TrustConfig
	err := ctx.ReadResource("gcp:certificatemanager/trustConfig:TrustConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrustConfig resources.
type trustConfigState struct {
	// The creation timestamp of a TrustConfig.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// One or more paragraphs of text description of a trust config.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Set of label tags associated with the trust config.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The trust config location.
	//
	// ***
	Location *string `pulumi:"location"`
	// A user-defined name of the trust config. Trust config names must be unique globally.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Set of trust stores to perform validation against.
	// This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
	// Structure is documented below.
	TrustStores []TrustConfigTrustStore `pulumi:"trustStores"`
	// The last update timestamp of a TrustConfig.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
}

type TrustConfigState struct {
	// The creation timestamp of a TrustConfig.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// One or more paragraphs of text description of a trust config.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Set of label tags associated with the trust config.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The trust config location.
	//
	// ***
	Location pulumi.StringPtrInput
	// A user-defined name of the trust config. Trust config names must be unique globally.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Set of trust stores to perform validation against.
	// This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
	// Structure is documented below.
	TrustStores TrustConfigTrustStoreArrayInput
	// The last update timestamp of a TrustConfig.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
}

func (TrustConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*trustConfigState)(nil)).Elem()
}

type trustConfigArgs struct {
	// One or more paragraphs of text description of a trust config.
	Description *string `pulumi:"description"`
	// Set of label tags associated with the trust config.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The trust config location.
	//
	// ***
	Location string `pulumi:"location"`
	// A user-defined name of the trust config. Trust config names must be unique globally.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Set of trust stores to perform validation against.
	// This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
	// Structure is documented below.
	TrustStores []TrustConfigTrustStore `pulumi:"trustStores"`
}

// The set of arguments for constructing a TrustConfig resource.
type TrustConfigArgs struct {
	// One or more paragraphs of text description of a trust config.
	Description pulumi.StringPtrInput
	// Set of label tags associated with the trust config.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The trust config location.
	//
	// ***
	Location pulumi.StringInput
	// A user-defined name of the trust config. Trust config names must be unique globally.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Set of trust stores to perform validation against.
	// This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
	// Structure is documented below.
	TrustStores TrustConfigTrustStoreArrayInput
}

func (TrustConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trustConfigArgs)(nil)).Elem()
}

type TrustConfigInput interface {
	pulumi.Input

	ToTrustConfigOutput() TrustConfigOutput
	ToTrustConfigOutputWithContext(ctx context.Context) TrustConfigOutput
}

func (*TrustConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustConfig)(nil)).Elem()
}

func (i *TrustConfig) ToTrustConfigOutput() TrustConfigOutput {
	return i.ToTrustConfigOutputWithContext(context.Background())
}

func (i *TrustConfig) ToTrustConfigOutputWithContext(ctx context.Context) TrustConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustConfigOutput)
}

// TrustConfigArrayInput is an input type that accepts TrustConfigArray and TrustConfigArrayOutput values.
// You can construct a concrete instance of `TrustConfigArrayInput` via:
//
//	TrustConfigArray{ TrustConfigArgs{...} }
type TrustConfigArrayInput interface {
	pulumi.Input

	ToTrustConfigArrayOutput() TrustConfigArrayOutput
	ToTrustConfigArrayOutputWithContext(context.Context) TrustConfigArrayOutput
}

type TrustConfigArray []TrustConfigInput

func (TrustConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrustConfig)(nil)).Elem()
}

func (i TrustConfigArray) ToTrustConfigArrayOutput() TrustConfigArrayOutput {
	return i.ToTrustConfigArrayOutputWithContext(context.Background())
}

func (i TrustConfigArray) ToTrustConfigArrayOutputWithContext(ctx context.Context) TrustConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustConfigArrayOutput)
}

// TrustConfigMapInput is an input type that accepts TrustConfigMap and TrustConfigMapOutput values.
// You can construct a concrete instance of `TrustConfigMapInput` via:
//
//	TrustConfigMap{ "key": TrustConfigArgs{...} }
type TrustConfigMapInput interface {
	pulumi.Input

	ToTrustConfigMapOutput() TrustConfigMapOutput
	ToTrustConfigMapOutputWithContext(context.Context) TrustConfigMapOutput
}

type TrustConfigMap map[string]TrustConfigInput

func (TrustConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrustConfig)(nil)).Elem()
}

func (i TrustConfigMap) ToTrustConfigMapOutput() TrustConfigMapOutput {
	return i.ToTrustConfigMapOutputWithContext(context.Background())
}

func (i TrustConfigMap) ToTrustConfigMapOutputWithContext(ctx context.Context) TrustConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustConfigMapOutput)
}

type TrustConfigOutput struct{ *pulumi.OutputState }

func (TrustConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustConfig)(nil)).Elem()
}

func (o TrustConfigOutput) ToTrustConfigOutput() TrustConfigOutput {
	return o
}

func (o TrustConfigOutput) ToTrustConfigOutputWithContext(ctx context.Context) TrustConfigOutput {
	return o
}

// The creation timestamp of a TrustConfig.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o TrustConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// One or more paragraphs of text description of a trust config.
func (o TrustConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o TrustConfigOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Set of label tags associated with the trust config.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o TrustConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The trust config location.
//
// ***
func (o TrustConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A user-defined name of the trust config. Trust config names must be unique globally.
func (o TrustConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o TrustConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o TrustConfigOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Set of trust stores to perform validation against.
// This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
// Structure is documented below.
func (o TrustConfigOutput) TrustStores() TrustConfigTrustStoreArrayOutput {
	return o.ApplyT(func(v *TrustConfig) TrustConfigTrustStoreArrayOutput { return v.TrustStores }).(TrustConfigTrustStoreArrayOutput)
}

// The last update timestamp of a TrustConfig.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o TrustConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type TrustConfigArrayOutput struct{ *pulumi.OutputState }

func (TrustConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrustConfig)(nil)).Elem()
}

func (o TrustConfigArrayOutput) ToTrustConfigArrayOutput() TrustConfigArrayOutput {
	return o
}

func (o TrustConfigArrayOutput) ToTrustConfigArrayOutputWithContext(ctx context.Context) TrustConfigArrayOutput {
	return o
}

func (o TrustConfigArrayOutput) Index(i pulumi.IntInput) TrustConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TrustConfig {
		return vs[0].([]*TrustConfig)[vs[1].(int)]
	}).(TrustConfigOutput)
}

type TrustConfigMapOutput struct{ *pulumi.OutputState }

func (TrustConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrustConfig)(nil)).Elem()
}

func (o TrustConfigMapOutput) ToTrustConfigMapOutput() TrustConfigMapOutput {
	return o
}

func (o TrustConfigMapOutput) ToTrustConfigMapOutputWithContext(ctx context.Context) TrustConfigMapOutput {
	return o
}

func (o TrustConfigMapOutput) MapIndex(k pulumi.StringInput) TrustConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TrustConfig {
		return vs[0].(map[string]*TrustConfig)[vs[1].(string)]
	}).(TrustConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrustConfigInput)(nil)).Elem(), &TrustConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustConfigArrayInput)(nil)).Elem(), TrustConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustConfigMapInput)(nil)).Elem(), TrustConfigMap{})
	pulumi.RegisterOutputType(TrustConfigOutput{})
	pulumi.RegisterOutputType(TrustConfigArrayOutput{})
	pulumi.RegisterOutputType(TrustConfigMapOutput{})
}
