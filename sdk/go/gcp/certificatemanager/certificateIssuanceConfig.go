// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificatemanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Certificate represents a HTTP-reachable backend for a Certificate.
//
// To get more information about CertificateIssuanceConfig, see:
//
// * [API documentation](https://cloud.google.com/certificate-manager/docs/reference/certificate-manager/rest/v1/projects.locations.certificateIssuanceConfigs)
// * How-to Guides
//   - [Manage certificate issuance configs](https://cloud.google.com/certificate-manager/docs/issuance-configs)
//
// ## Example Usage
// ### Certificate Manager Certificate Issuance Config
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificateauthority"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificatemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			pool, err := certificateauthority.NewCaPool(ctx, "pool", &certificateauthority.CaPoolArgs{
//				Location: pulumi.String("us-central1"),
//				Tier:     pulumi.String("ENTERPRISE"),
//			})
//			if err != nil {
//				return err
//			}
//			caAuthority, err := certificateauthority.NewAuthority(ctx, "caAuthority", &certificateauthority.AuthorityArgs{
//				Location:               pulumi.String("us-central1"),
//				Pool:                   pool.Name,
//				CertificateAuthorityId: pulumi.String("ca-authority"),
//				Config: &certificateauthority.AuthorityConfigArgs{
//					SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
//						Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
//							Organization: pulumi.String("HashiCorp"),
//							CommonName:   pulumi.String("my-certificate-authority"),
//						},
//						SubjectAltName: &certificateauthority.AuthorityConfigSubjectConfigSubjectAltNameArgs{
//							DnsNames: pulumi.StringArray{
//								pulumi.String("hashicorp.com"),
//							},
//						},
//					},
//					X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
//						CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
//							IsCa: pulumi.Bool(true),
//						},
//						KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
//							BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
//								CertSign: pulumi.Bool(true),
//								CrlSign:  pulumi.Bool(true),
//							},
//							ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
//								ServerAuth: pulumi.Bool(true),
//							},
//						},
//					},
//				},
//				KeySpec: &certificateauthority.AuthorityKeySpecArgs{
//					Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
//				},
//				DeletionProtection:                 pulumi.Bool(false),
//				SkipGracePeriod:                    pulumi.Bool(true),
//				IgnoreActiveCertificatesOnDeletion: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = certificatemanager.NewCertificateIssuanceConfig(ctx, "default", &certificatemanager.CertificateIssuanceConfigArgs{
//				Description: pulumi.String("sample description for the certificate issuanceConfigs"),
//				CertificateAuthorityConfig: &certificatemanager.CertificateIssuanceConfigCertificateAuthorityConfigArgs{
//					CertificateAuthorityServiceConfig: &certificatemanager.CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigArgs{
//						CaPool: pool.ID(),
//					},
//				},
//				Lifetime:                 pulumi.String("1814400s"),
//				RotationWindowPercentage: pulumi.Int(34),
//				KeyAlgorithm:             pulumi.String("ECDSA_P256"),
//				Labels: pulumi.StringMap{
//					"name":  pulumi.String("wrench"),
//					"count": pulumi.String("3"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				caAuthority,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # CertificateIssuanceConfig can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:certificatemanager/certificateIssuanceConfig:CertificateIssuanceConfig default projects/{{project}}/locations/{{location}}/certificateIssuanceConfigs/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:certificatemanager/certificateIssuanceConfig:CertificateIssuanceConfig default {{project}}/{{location}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:certificatemanager/certificateIssuanceConfig:CertificateIssuanceConfig default {{location}}/{{name}}
//
// ```
type CertificateIssuanceConfig struct {
	pulumi.CustomResourceState

	// The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
	// Structure is documented below.
	CertificateAuthorityConfig CertificateIssuanceConfigCertificateAuthorityConfigOutput `pulumi:"certificateAuthorityConfig"`
	// The creation timestamp of a CertificateIssuanceConfig. Timestamp is in RFC3339 UTC "Zulu" format,
	// accurate to nanoseconds with up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// One or more paragraphs of text description of a CertificateIssuanceConfig.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Key algorithm to use when generating the private key.
	// Possible values are: `RSA_2048`, `ECDSA_P256`.
	KeyAlgorithm pulumi.StringOutput `pulumi:"keyAlgorithm"`
	// 'Set of label tags associated with the CertificateIssuanceConfig resource.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "count": "3" }.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Lifetime of issued certificates. A duration in seconds with up to nine fractional digits, ending with 's'.
	// Example: "1814400s". Valid values are from 21 days (1814400s) to 30 days (2592000s)
	Lifetime pulumi.StringOutput `pulumi:"lifetime"`
	// The Certificate Manager location. If not specified, "global" is used.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// A user-defined name of the certificate issuance config.
	// CertificateIssuanceConfig names must be unique globally.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// It specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate.
	// Must be a number between 1-99, inclusive.
	// You must set the rotation window percentage in relation to the certificate lifetime so that certificate renewal occurs at least 7 days after
	// the certificate has been issued and at least 7 days before it expires.
	RotationWindowPercentage pulumi.IntOutput `pulumi:"rotationWindowPercentage"`
	// The last update timestamp of a CertificateIssuanceConfig. Timestamp is in RFC3339 UTC "Zulu" format,
	// accurate to nanoseconds with up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCertificateIssuanceConfig registers a new resource with the given unique name, arguments, and options.
func NewCertificateIssuanceConfig(ctx *pulumi.Context,
	name string, args *CertificateIssuanceConfigArgs, opts ...pulumi.ResourceOption) (*CertificateIssuanceConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateAuthorityConfig == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthorityConfig'")
	}
	if args.KeyAlgorithm == nil {
		return nil, errors.New("invalid value for required argument 'KeyAlgorithm'")
	}
	if args.Lifetime == nil {
		return nil, errors.New("invalid value for required argument 'Lifetime'")
	}
	if args.RotationWindowPercentage == nil {
		return nil, errors.New("invalid value for required argument 'RotationWindowPercentage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificateIssuanceConfig
	err := ctx.RegisterResource("gcp:certificatemanager/certificateIssuanceConfig:CertificateIssuanceConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateIssuanceConfig gets an existing CertificateIssuanceConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateIssuanceConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateIssuanceConfigState, opts ...pulumi.ResourceOption) (*CertificateIssuanceConfig, error) {
	var resource CertificateIssuanceConfig
	err := ctx.ReadResource("gcp:certificatemanager/certificateIssuanceConfig:CertificateIssuanceConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateIssuanceConfig resources.
type certificateIssuanceConfigState struct {
	// The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
	// Structure is documented below.
	CertificateAuthorityConfig *CertificateIssuanceConfigCertificateAuthorityConfig `pulumi:"certificateAuthorityConfig"`
	// The creation timestamp of a CertificateIssuanceConfig. Timestamp is in RFC3339 UTC "Zulu" format,
	// accurate to nanoseconds with up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// One or more paragraphs of text description of a CertificateIssuanceConfig.
	Description *string `pulumi:"description"`
	// Key algorithm to use when generating the private key.
	// Possible values are: `RSA_2048`, `ECDSA_P256`.
	KeyAlgorithm *string `pulumi:"keyAlgorithm"`
	// 'Set of label tags associated with the CertificateIssuanceConfig resource.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "count": "3" }.
	Labels map[string]string `pulumi:"labels"`
	// Lifetime of issued certificates. A duration in seconds with up to nine fractional digits, ending with 's'.
	// Example: "1814400s". Valid values are from 21 days (1814400s) to 30 days (2592000s)
	Lifetime *string `pulumi:"lifetime"`
	// The Certificate Manager location. If not specified, "global" is used.
	Location *string `pulumi:"location"`
	// A user-defined name of the certificate issuance config.
	// CertificateIssuanceConfig names must be unique globally.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// It specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate.
	// Must be a number between 1-99, inclusive.
	// You must set the rotation window percentage in relation to the certificate lifetime so that certificate renewal occurs at least 7 days after
	// the certificate has been issued and at least 7 days before it expires.
	RotationWindowPercentage *int `pulumi:"rotationWindowPercentage"`
	// The last update timestamp of a CertificateIssuanceConfig. Timestamp is in RFC3339 UTC "Zulu" format,
	// accurate to nanoseconds with up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
}

type CertificateIssuanceConfigState struct {
	// The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
	// Structure is documented below.
	CertificateAuthorityConfig CertificateIssuanceConfigCertificateAuthorityConfigPtrInput
	// The creation timestamp of a CertificateIssuanceConfig. Timestamp is in RFC3339 UTC "Zulu" format,
	// accurate to nanoseconds with up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// One or more paragraphs of text description of a CertificateIssuanceConfig.
	Description pulumi.StringPtrInput
	// Key algorithm to use when generating the private key.
	// Possible values are: `RSA_2048`, `ECDSA_P256`.
	KeyAlgorithm pulumi.StringPtrInput
	// 'Set of label tags associated with the CertificateIssuanceConfig resource.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "count": "3" }.
	Labels pulumi.StringMapInput
	// Lifetime of issued certificates. A duration in seconds with up to nine fractional digits, ending with 's'.
	// Example: "1814400s". Valid values are from 21 days (1814400s) to 30 days (2592000s)
	Lifetime pulumi.StringPtrInput
	// The Certificate Manager location. If not specified, "global" is used.
	Location pulumi.StringPtrInput
	// A user-defined name of the certificate issuance config.
	// CertificateIssuanceConfig names must be unique globally.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// It specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate.
	// Must be a number between 1-99, inclusive.
	// You must set the rotation window percentage in relation to the certificate lifetime so that certificate renewal occurs at least 7 days after
	// the certificate has been issued and at least 7 days before it expires.
	RotationWindowPercentage pulumi.IntPtrInput
	// The last update timestamp of a CertificateIssuanceConfig. Timestamp is in RFC3339 UTC "Zulu" format,
	// accurate to nanoseconds with up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
}

func (CertificateIssuanceConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateIssuanceConfigState)(nil)).Elem()
}

type certificateIssuanceConfigArgs struct {
	// The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
	// Structure is documented below.
	CertificateAuthorityConfig CertificateIssuanceConfigCertificateAuthorityConfig `pulumi:"certificateAuthorityConfig"`
	// One or more paragraphs of text description of a CertificateIssuanceConfig.
	Description *string `pulumi:"description"`
	// Key algorithm to use when generating the private key.
	// Possible values are: `RSA_2048`, `ECDSA_P256`.
	KeyAlgorithm string `pulumi:"keyAlgorithm"`
	// 'Set of label tags associated with the CertificateIssuanceConfig resource.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "count": "3" }.
	Labels map[string]string `pulumi:"labels"`
	// Lifetime of issued certificates. A duration in seconds with up to nine fractional digits, ending with 's'.
	// Example: "1814400s". Valid values are from 21 days (1814400s) to 30 days (2592000s)
	Lifetime string `pulumi:"lifetime"`
	// The Certificate Manager location. If not specified, "global" is used.
	Location *string `pulumi:"location"`
	// A user-defined name of the certificate issuance config.
	// CertificateIssuanceConfig names must be unique globally.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// It specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate.
	// Must be a number between 1-99, inclusive.
	// You must set the rotation window percentage in relation to the certificate lifetime so that certificate renewal occurs at least 7 days after
	// the certificate has been issued and at least 7 days before it expires.
	RotationWindowPercentage int `pulumi:"rotationWindowPercentage"`
}

// The set of arguments for constructing a CertificateIssuanceConfig resource.
type CertificateIssuanceConfigArgs struct {
	// The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
	// Structure is documented below.
	CertificateAuthorityConfig CertificateIssuanceConfigCertificateAuthorityConfigInput
	// One or more paragraphs of text description of a CertificateIssuanceConfig.
	Description pulumi.StringPtrInput
	// Key algorithm to use when generating the private key.
	// Possible values are: `RSA_2048`, `ECDSA_P256`.
	KeyAlgorithm pulumi.StringInput
	// 'Set of label tags associated with the CertificateIssuanceConfig resource.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "count": "3" }.
	Labels pulumi.StringMapInput
	// Lifetime of issued certificates. A duration in seconds with up to nine fractional digits, ending with 's'.
	// Example: "1814400s". Valid values are from 21 days (1814400s) to 30 days (2592000s)
	Lifetime pulumi.StringInput
	// The Certificate Manager location. If not specified, "global" is used.
	Location pulumi.StringPtrInput
	// A user-defined name of the certificate issuance config.
	// CertificateIssuanceConfig names must be unique globally.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// It specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate.
	// Must be a number between 1-99, inclusive.
	// You must set the rotation window percentage in relation to the certificate lifetime so that certificate renewal occurs at least 7 days after
	// the certificate has been issued and at least 7 days before it expires.
	RotationWindowPercentage pulumi.IntInput
}

func (CertificateIssuanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateIssuanceConfigArgs)(nil)).Elem()
}

type CertificateIssuanceConfigInput interface {
	pulumi.Input

	ToCertificateIssuanceConfigOutput() CertificateIssuanceConfigOutput
	ToCertificateIssuanceConfigOutputWithContext(ctx context.Context) CertificateIssuanceConfigOutput
}

func (*CertificateIssuanceConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateIssuanceConfig)(nil)).Elem()
}

func (i *CertificateIssuanceConfig) ToCertificateIssuanceConfigOutput() CertificateIssuanceConfigOutput {
	return i.ToCertificateIssuanceConfigOutputWithContext(context.Background())
}

func (i *CertificateIssuanceConfig) ToCertificateIssuanceConfigOutputWithContext(ctx context.Context) CertificateIssuanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIssuanceConfigOutput)
}

func (i *CertificateIssuanceConfig) ToOutput(ctx context.Context) pulumix.Output[*CertificateIssuanceConfig] {
	return pulumix.Output[*CertificateIssuanceConfig]{
		OutputState: i.ToCertificateIssuanceConfigOutputWithContext(ctx).OutputState,
	}
}

// CertificateIssuanceConfigArrayInput is an input type that accepts CertificateIssuanceConfigArray and CertificateIssuanceConfigArrayOutput values.
// You can construct a concrete instance of `CertificateIssuanceConfigArrayInput` via:
//
//	CertificateIssuanceConfigArray{ CertificateIssuanceConfigArgs{...} }
type CertificateIssuanceConfigArrayInput interface {
	pulumi.Input

	ToCertificateIssuanceConfigArrayOutput() CertificateIssuanceConfigArrayOutput
	ToCertificateIssuanceConfigArrayOutputWithContext(context.Context) CertificateIssuanceConfigArrayOutput
}

type CertificateIssuanceConfigArray []CertificateIssuanceConfigInput

func (CertificateIssuanceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateIssuanceConfig)(nil)).Elem()
}

func (i CertificateIssuanceConfigArray) ToCertificateIssuanceConfigArrayOutput() CertificateIssuanceConfigArrayOutput {
	return i.ToCertificateIssuanceConfigArrayOutputWithContext(context.Background())
}

func (i CertificateIssuanceConfigArray) ToCertificateIssuanceConfigArrayOutputWithContext(ctx context.Context) CertificateIssuanceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIssuanceConfigArrayOutput)
}

func (i CertificateIssuanceConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]*CertificateIssuanceConfig] {
	return pulumix.Output[[]*CertificateIssuanceConfig]{
		OutputState: i.ToCertificateIssuanceConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// CertificateIssuanceConfigMapInput is an input type that accepts CertificateIssuanceConfigMap and CertificateIssuanceConfigMapOutput values.
// You can construct a concrete instance of `CertificateIssuanceConfigMapInput` via:
//
//	CertificateIssuanceConfigMap{ "key": CertificateIssuanceConfigArgs{...} }
type CertificateIssuanceConfigMapInput interface {
	pulumi.Input

	ToCertificateIssuanceConfigMapOutput() CertificateIssuanceConfigMapOutput
	ToCertificateIssuanceConfigMapOutputWithContext(context.Context) CertificateIssuanceConfigMapOutput
}

type CertificateIssuanceConfigMap map[string]CertificateIssuanceConfigInput

func (CertificateIssuanceConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateIssuanceConfig)(nil)).Elem()
}

func (i CertificateIssuanceConfigMap) ToCertificateIssuanceConfigMapOutput() CertificateIssuanceConfigMapOutput {
	return i.ToCertificateIssuanceConfigMapOutputWithContext(context.Background())
}

func (i CertificateIssuanceConfigMap) ToCertificateIssuanceConfigMapOutputWithContext(ctx context.Context) CertificateIssuanceConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIssuanceConfigMapOutput)
}

func (i CertificateIssuanceConfigMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CertificateIssuanceConfig] {
	return pulumix.Output[map[string]*CertificateIssuanceConfig]{
		OutputState: i.ToCertificateIssuanceConfigMapOutputWithContext(ctx).OutputState,
	}
}

type CertificateIssuanceConfigOutput struct{ *pulumi.OutputState }

func (CertificateIssuanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateIssuanceConfig)(nil)).Elem()
}

func (o CertificateIssuanceConfigOutput) ToCertificateIssuanceConfigOutput() CertificateIssuanceConfigOutput {
	return o
}

func (o CertificateIssuanceConfigOutput) ToCertificateIssuanceConfigOutputWithContext(ctx context.Context) CertificateIssuanceConfigOutput {
	return o
}

func (o CertificateIssuanceConfigOutput) ToOutput(ctx context.Context) pulumix.Output[*CertificateIssuanceConfig] {
	return pulumix.Output[*CertificateIssuanceConfig]{
		OutputState: o.OutputState,
	}
}

// The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
// Structure is documented below.
func (o CertificateIssuanceConfigOutput) CertificateAuthorityConfig() CertificateIssuanceConfigCertificateAuthorityConfigOutput {
	return o.ApplyT(func(v *CertificateIssuanceConfig) CertificateIssuanceConfigCertificateAuthorityConfigOutput {
		return v.CertificateAuthorityConfig
	}).(CertificateIssuanceConfigCertificateAuthorityConfigOutput)
}

// The creation timestamp of a CertificateIssuanceConfig. Timestamp is in RFC3339 UTC "Zulu" format,
// accurate to nanoseconds with up to nine fractional digits.
// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o CertificateIssuanceConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateIssuanceConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// One or more paragraphs of text description of a CertificateIssuanceConfig.
func (o CertificateIssuanceConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateIssuanceConfig) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Key algorithm to use when generating the private key.
// Possible values are: `RSA_2048`, `ECDSA_P256`.
func (o CertificateIssuanceConfigOutput) KeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateIssuanceConfig) pulumi.StringOutput { return v.KeyAlgorithm }).(pulumi.StringOutput)
}

// 'Set of label tags associated with the CertificateIssuanceConfig resource.
// An object containing a list of "key": value pairs. Example: { "name": "wrench", "count": "3" }.
func (o CertificateIssuanceConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertificateIssuanceConfig) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Lifetime of issued certificates. A duration in seconds with up to nine fractional digits, ending with 's'.
// Example: "1814400s". Valid values are from 21 days (1814400s) to 30 days (2592000s)
func (o CertificateIssuanceConfigOutput) Lifetime() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateIssuanceConfig) pulumi.StringOutput { return v.Lifetime }).(pulumi.StringOutput)
}

// The Certificate Manager location. If not specified, "global" is used.
func (o CertificateIssuanceConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateIssuanceConfig) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// A user-defined name of the certificate issuance config.
// CertificateIssuanceConfig names must be unique globally.
func (o CertificateIssuanceConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateIssuanceConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o CertificateIssuanceConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateIssuanceConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// It specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate.
// Must be a number between 1-99, inclusive.
// You must set the rotation window percentage in relation to the certificate lifetime so that certificate renewal occurs at least 7 days after
// the certificate has been issued and at least 7 days before it expires.
func (o CertificateIssuanceConfigOutput) RotationWindowPercentage() pulumi.IntOutput {
	return o.ApplyT(func(v *CertificateIssuanceConfig) pulumi.IntOutput { return v.RotationWindowPercentage }).(pulumi.IntOutput)
}

// The last update timestamp of a CertificateIssuanceConfig. Timestamp is in RFC3339 UTC "Zulu" format,
// accurate to nanoseconds with up to nine fractional digits.
// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o CertificateIssuanceConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateIssuanceConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type CertificateIssuanceConfigArrayOutput struct{ *pulumi.OutputState }

func (CertificateIssuanceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateIssuanceConfig)(nil)).Elem()
}

func (o CertificateIssuanceConfigArrayOutput) ToCertificateIssuanceConfigArrayOutput() CertificateIssuanceConfigArrayOutput {
	return o
}

func (o CertificateIssuanceConfigArrayOutput) ToCertificateIssuanceConfigArrayOutputWithContext(ctx context.Context) CertificateIssuanceConfigArrayOutput {
	return o
}

func (o CertificateIssuanceConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CertificateIssuanceConfig] {
	return pulumix.Output[[]*CertificateIssuanceConfig]{
		OutputState: o.OutputState,
	}
}

func (o CertificateIssuanceConfigArrayOutput) Index(i pulumi.IntInput) CertificateIssuanceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateIssuanceConfig {
		return vs[0].([]*CertificateIssuanceConfig)[vs[1].(int)]
	}).(CertificateIssuanceConfigOutput)
}

type CertificateIssuanceConfigMapOutput struct{ *pulumi.OutputState }

func (CertificateIssuanceConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateIssuanceConfig)(nil)).Elem()
}

func (o CertificateIssuanceConfigMapOutput) ToCertificateIssuanceConfigMapOutput() CertificateIssuanceConfigMapOutput {
	return o
}

func (o CertificateIssuanceConfigMapOutput) ToCertificateIssuanceConfigMapOutputWithContext(ctx context.Context) CertificateIssuanceConfigMapOutput {
	return o
}

func (o CertificateIssuanceConfigMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CertificateIssuanceConfig] {
	return pulumix.Output[map[string]*CertificateIssuanceConfig]{
		OutputState: o.OutputState,
	}
}

func (o CertificateIssuanceConfigMapOutput) MapIndex(k pulumi.StringInput) CertificateIssuanceConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateIssuanceConfig {
		return vs[0].(map[string]*CertificateIssuanceConfig)[vs[1].(string)]
	}).(CertificateIssuanceConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateIssuanceConfigInput)(nil)).Elem(), &CertificateIssuanceConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateIssuanceConfigArrayInput)(nil)).Elem(), CertificateIssuanceConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateIssuanceConfigMapInput)(nil)).Elem(), CertificateIssuanceConfigMap{})
	pulumi.RegisterOutputType(CertificateIssuanceConfigOutput{})
	pulumi.RegisterOutputType(CertificateIssuanceConfigArrayOutput{})
	pulumi.RegisterOutputType(CertificateIssuanceConfigMapOutput{})
}
