// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificatemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// CertificateMap defines a collection of certificate configurations,
// which are usable by any associated target proxies
//
// > **Warning:** These resources require allow-listing to use, and are not openly available to all Cloud customers. Engage with your Cloud account team to discuss how to onboard.
//
// ## Example Usage
// ### Certificate Manager Certificate Map Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificatemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := certificatemanager.NewCertificateMap(ctx, "default", &certificatemanager.CertificateMapArgs{
//				Description: pulumi.String("My acceptance test certificate map"),
//				Labels: pulumi.StringMap{
//					"terraform": pulumi.String("true"),
//					"acc-test":  pulumi.String("true"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # CertificateMap can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:certificatemanager/certificateMap:CertificateMap default projects/{{project}}/locations/global/certificateMaps/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:certificatemanager/certificateMap:CertificateMap default {{project}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:certificatemanager/certificateMap:CertificateMap default {{name}}
//
// ```
type CertificateMap struct {
	pulumi.CustomResourceState

	// Creation timestamp of a Certificate Map. Timestamp is in RFC3339 UTC "Zulu" format, accurate to nanoseconds with up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A human-readable description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A list of target proxies that use this Certificate Map
	GclbTargets CertificateMapGclbTargetArrayOutput `pulumi:"gclbTargets"`
	// Set of labels associated with a Certificate Map resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// A user-defined name of the Certificate Map. Certificate Map names must be unique
	// globally and match the pattern `projects/*/locations/*/certificateMaps/*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Update timestamp of a Certificate Map. Timestamp is in RFC3339 UTC "Zulu" format, accurate to nanoseconds with up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCertificateMap registers a new resource with the given unique name, arguments, and options.
func NewCertificateMap(ctx *pulumi.Context,
	name string, args *CertificateMapArgs, opts ...pulumi.ResourceOption) (*CertificateMap, error) {
	if args == nil {
		args = &CertificateMapArgs{}
	}

	var resource CertificateMap
	err := ctx.RegisterResource("gcp:certificatemanager/certificateMap:CertificateMap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateMap gets an existing CertificateMap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateMap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateMapState, opts ...pulumi.ResourceOption) (*CertificateMap, error) {
	var resource CertificateMap
	err := ctx.ReadResource("gcp:certificatemanager/certificateMap:CertificateMap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateMap resources.
type certificateMapState struct {
	// Creation timestamp of a Certificate Map. Timestamp is in RFC3339 UTC "Zulu" format, accurate to nanoseconds with up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// A list of target proxies that use this Certificate Map
	GclbTargets []CertificateMapGclbTarget `pulumi:"gclbTargets"`
	// Set of labels associated with a Certificate Map resource.
	Labels map[string]string `pulumi:"labels"`
	// A user-defined name of the Certificate Map. Certificate Map names must be unique
	// globally and match the pattern `projects/*/locations/*/certificateMaps/*`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Update timestamp of a Certificate Map. Timestamp is in RFC3339 UTC "Zulu" format, accurate to nanoseconds with up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
}

type CertificateMapState struct {
	// Creation timestamp of a Certificate Map. Timestamp is in RFC3339 UTC "Zulu" format, accurate to nanoseconds with up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// A list of target proxies that use this Certificate Map
	GclbTargets CertificateMapGclbTargetArrayInput
	// Set of labels associated with a Certificate Map resource.
	Labels pulumi.StringMapInput
	// A user-defined name of the Certificate Map. Certificate Map names must be unique
	// globally and match the pattern `projects/*/locations/*/certificateMaps/*`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Update timestamp of a Certificate Map. Timestamp is in RFC3339 UTC "Zulu" format, accurate to nanoseconds with up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
}

func (CertificateMapState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateMapState)(nil)).Elem()
}

type certificateMapArgs struct {
	// A human-readable description of the resource.
	Description *string `pulumi:"description"`
	// Set of labels associated with a Certificate Map resource.
	Labels map[string]string `pulumi:"labels"`
	// A user-defined name of the Certificate Map. Certificate Map names must be unique
	// globally and match the pattern `projects/*/locations/*/certificateMaps/*`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a CertificateMap resource.
type CertificateMapArgs struct {
	// A human-readable description of the resource.
	Description pulumi.StringPtrInput
	// Set of labels associated with a Certificate Map resource.
	Labels pulumi.StringMapInput
	// A user-defined name of the Certificate Map. Certificate Map names must be unique
	// globally and match the pattern `projects/*/locations/*/certificateMaps/*`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (CertificateMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateMapArgs)(nil)).Elem()
}

type CertificateMapInput interface {
	pulumi.Input

	ToCertificateMapOutput() CertificateMapOutput
	ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput
}

func (*CertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateMap)(nil)).Elem()
}

func (i *CertificateMap) ToCertificateMapOutput() CertificateMapOutput {
	return i.ToCertificateMapOutputWithContext(context.Background())
}

func (i *CertificateMap) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapOutput)
}

// CertificateMapArrayInput is an input type that accepts CertificateMapArray and CertificateMapArrayOutput values.
// You can construct a concrete instance of `CertificateMapArrayInput` via:
//
//	CertificateMapArray{ CertificateMapArgs{...} }
type CertificateMapArrayInput interface {
	pulumi.Input

	ToCertificateMapArrayOutput() CertificateMapArrayOutput
	ToCertificateMapArrayOutputWithContext(context.Context) CertificateMapArrayOutput
}

type CertificateMapArray []CertificateMapInput

func (CertificateMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateMap)(nil)).Elem()
}

func (i CertificateMapArray) ToCertificateMapArrayOutput() CertificateMapArrayOutput {
	return i.ToCertificateMapArrayOutputWithContext(context.Background())
}

func (i CertificateMapArray) ToCertificateMapArrayOutputWithContext(ctx context.Context) CertificateMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapArrayOutput)
}

// CertificateMapMapInput is an input type that accepts CertificateMapMap and CertificateMapMapOutput values.
// You can construct a concrete instance of `CertificateMapMapInput` via:
//
//	CertificateMapMap{ "key": CertificateMapArgs{...} }
type CertificateMapMapInput interface {
	pulumi.Input

	ToCertificateMapMapOutput() CertificateMapMapOutput
	ToCertificateMapMapOutputWithContext(context.Context) CertificateMapMapOutput
}

type CertificateMapMap map[string]CertificateMapInput

func (CertificateMapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateMap)(nil)).Elem()
}

func (i CertificateMapMap) ToCertificateMapMapOutput() CertificateMapMapOutput {
	return i.ToCertificateMapMapOutputWithContext(context.Background())
}

func (i CertificateMapMap) ToCertificateMapMapOutputWithContext(ctx context.Context) CertificateMapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapMapOutput)
}

type CertificateMapOutput struct{ *pulumi.OutputState }

func (CertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateMap)(nil)).Elem()
}

func (o CertificateMapOutput) ToCertificateMapOutput() CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return o
}

// Creation timestamp of a Certificate Map. Timestamp is in RFC3339 UTC "Zulu" format, accurate to nanoseconds with up to
// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o CertificateMapOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMap) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A human-readable description of the resource.
func (o CertificateMapOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateMap) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of target proxies that use this Certificate Map
func (o CertificateMapOutput) GclbTargets() CertificateMapGclbTargetArrayOutput {
	return o.ApplyT(func(v *CertificateMap) CertificateMapGclbTargetArrayOutput { return v.GclbTargets }).(CertificateMapGclbTargetArrayOutput)
}

// Set of labels associated with a Certificate Map resource.
func (o CertificateMapOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertificateMap) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// A user-defined name of the Certificate Map. Certificate Map names must be unique
// globally and match the pattern `projects/*/locations/*/certificateMaps/*`.
func (o CertificateMapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o CertificateMapOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMap) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Update timestamp of a Certificate Map. Timestamp is in RFC3339 UTC "Zulu" format, accurate to nanoseconds with up to
// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o CertificateMapOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMap) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type CertificateMapArrayOutput struct{ *pulumi.OutputState }

func (CertificateMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateMap)(nil)).Elem()
}

func (o CertificateMapArrayOutput) ToCertificateMapArrayOutput() CertificateMapArrayOutput {
	return o
}

func (o CertificateMapArrayOutput) ToCertificateMapArrayOutputWithContext(ctx context.Context) CertificateMapArrayOutput {
	return o
}

func (o CertificateMapArrayOutput) Index(i pulumi.IntInput) CertificateMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateMap {
		return vs[0].([]*CertificateMap)[vs[1].(int)]
	}).(CertificateMapOutput)
}

type CertificateMapMapOutput struct{ *pulumi.OutputState }

func (CertificateMapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateMap)(nil)).Elem()
}

func (o CertificateMapMapOutput) ToCertificateMapMapOutput() CertificateMapMapOutput {
	return o
}

func (o CertificateMapMapOutput) ToCertificateMapMapOutputWithContext(ctx context.Context) CertificateMapMapOutput {
	return o
}

func (o CertificateMapMapOutput) MapIndex(k pulumi.StringInput) CertificateMapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateMap {
		return vs[0].(map[string]*CertificateMap)[vs[1].(string)]
	}).(CertificateMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapInput)(nil)).Elem(), &CertificateMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapArrayInput)(nil)).Elem(), CertificateMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapMapInput)(nil)).Elem(), CertificateMapMap{})
	pulumi.RegisterOutputType(CertificateMapOutput{})
	pulumi.RegisterOutputType(CertificateMapArrayOutput{})
	pulumi.RegisterOutputType(CertificateMapMapOutput{})
}
