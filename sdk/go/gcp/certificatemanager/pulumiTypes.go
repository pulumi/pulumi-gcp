// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificatemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CertificateManaged struct {
	// Authorizations that will be used for performing domain authorization
	DnsAuthorizations []string `pulumi:"dnsAuthorizations"`
	// The domains for which a managed SSL certificate will be generated.
	// Wildcard domains are only supported with DNS challenge resolution
	Domains []string `pulumi:"domains"`
	// -
	// State of the managed certificate resource.
	State *string `pulumi:"state"`
}

// CertificateManagedInput is an input type that accepts CertificateManagedArgs and CertificateManagedOutput values.
// You can construct a concrete instance of `CertificateManagedInput` via:
//
//          CertificateManagedArgs{...}
type CertificateManagedInput interface {
	pulumi.Input

	ToCertificateManagedOutput() CertificateManagedOutput
	ToCertificateManagedOutputWithContext(context.Context) CertificateManagedOutput
}

type CertificateManagedArgs struct {
	// Authorizations that will be used for performing domain authorization
	DnsAuthorizations pulumi.StringArrayInput `pulumi:"dnsAuthorizations"`
	// The domains for which a managed SSL certificate will be generated.
	// Wildcard domains are only supported with DNS challenge resolution
	Domains pulumi.StringArrayInput `pulumi:"domains"`
	// -
	// State of the managed certificate resource.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (CertificateManagedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateManaged)(nil)).Elem()
}

func (i CertificateManagedArgs) ToCertificateManagedOutput() CertificateManagedOutput {
	return i.ToCertificateManagedOutputWithContext(context.Background())
}

func (i CertificateManagedArgs) ToCertificateManagedOutputWithContext(ctx context.Context) CertificateManagedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateManagedOutput)
}

func (i CertificateManagedArgs) ToCertificateManagedPtrOutput() CertificateManagedPtrOutput {
	return i.ToCertificateManagedPtrOutputWithContext(context.Background())
}

func (i CertificateManagedArgs) ToCertificateManagedPtrOutputWithContext(ctx context.Context) CertificateManagedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateManagedOutput).ToCertificateManagedPtrOutputWithContext(ctx)
}

// CertificateManagedPtrInput is an input type that accepts CertificateManagedArgs, CertificateManagedPtr and CertificateManagedPtrOutput values.
// You can construct a concrete instance of `CertificateManagedPtrInput` via:
//
//          CertificateManagedArgs{...}
//
//  or:
//
//          nil
type CertificateManagedPtrInput interface {
	pulumi.Input

	ToCertificateManagedPtrOutput() CertificateManagedPtrOutput
	ToCertificateManagedPtrOutputWithContext(context.Context) CertificateManagedPtrOutput
}

type certificateManagedPtrType CertificateManagedArgs

func CertificateManagedPtr(v *CertificateManagedArgs) CertificateManagedPtrInput {
	return (*certificateManagedPtrType)(v)
}

func (*certificateManagedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateManaged)(nil)).Elem()
}

func (i *certificateManagedPtrType) ToCertificateManagedPtrOutput() CertificateManagedPtrOutput {
	return i.ToCertificateManagedPtrOutputWithContext(context.Background())
}

func (i *certificateManagedPtrType) ToCertificateManagedPtrOutputWithContext(ctx context.Context) CertificateManagedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateManagedPtrOutput)
}

type CertificateManagedOutput struct{ *pulumi.OutputState }

func (CertificateManagedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateManaged)(nil)).Elem()
}

func (o CertificateManagedOutput) ToCertificateManagedOutput() CertificateManagedOutput {
	return o
}

func (o CertificateManagedOutput) ToCertificateManagedOutputWithContext(ctx context.Context) CertificateManagedOutput {
	return o
}

func (o CertificateManagedOutput) ToCertificateManagedPtrOutput() CertificateManagedPtrOutput {
	return o.ToCertificateManagedPtrOutputWithContext(context.Background())
}

func (o CertificateManagedOutput) ToCertificateManagedPtrOutputWithContext(ctx context.Context) CertificateManagedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateManaged) *CertificateManaged {
		return &v
	}).(CertificateManagedPtrOutput)
}

// Authorizations that will be used for performing domain authorization
func (o CertificateManagedOutput) DnsAuthorizations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateManaged) []string { return v.DnsAuthorizations }).(pulumi.StringArrayOutput)
}

// The domains for which a managed SSL certificate will be generated.
// Wildcard domains are only supported with DNS challenge resolution
func (o CertificateManagedOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateManaged) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// -
// State of the managed certificate resource.
func (o CertificateManagedOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateManaged) *string { return v.State }).(pulumi.StringPtrOutput)
}

type CertificateManagedPtrOutput struct{ *pulumi.OutputState }

func (CertificateManagedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateManaged)(nil)).Elem()
}

func (o CertificateManagedPtrOutput) ToCertificateManagedPtrOutput() CertificateManagedPtrOutput {
	return o
}

func (o CertificateManagedPtrOutput) ToCertificateManagedPtrOutputWithContext(ctx context.Context) CertificateManagedPtrOutput {
	return o
}

func (o CertificateManagedPtrOutput) Elem() CertificateManagedOutput {
	return o.ApplyT(func(v *CertificateManaged) CertificateManaged {
		if v != nil {
			return *v
		}
		var ret CertificateManaged
		return ret
	}).(CertificateManagedOutput)
}

// Authorizations that will be used for performing domain authorization
func (o CertificateManagedPtrOutput) DnsAuthorizations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateManaged) []string {
		if v == nil {
			return nil
		}
		return v.DnsAuthorizations
	}).(pulumi.StringArrayOutput)
}

// The domains for which a managed SSL certificate will be generated.
// Wildcard domains are only supported with DNS challenge resolution
func (o CertificateManagedPtrOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateManaged) []string {
		if v == nil {
			return nil
		}
		return v.Domains
	}).(pulumi.StringArrayOutput)
}

// -
// State of the managed certificate resource.
func (o CertificateManagedPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateManaged) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

type CertificateMapGclbTarget struct {
	IpConfigs        []CertificateMapGclbTargetIpConfig `pulumi:"ipConfigs"`
	TargetHttpsProxy *string                            `pulumi:"targetHttpsProxy"`
	TargetSslProxy   *string                            `pulumi:"targetSslProxy"`
}

// CertificateMapGclbTargetInput is an input type that accepts CertificateMapGclbTargetArgs and CertificateMapGclbTargetOutput values.
// You can construct a concrete instance of `CertificateMapGclbTargetInput` via:
//
//          CertificateMapGclbTargetArgs{...}
type CertificateMapGclbTargetInput interface {
	pulumi.Input

	ToCertificateMapGclbTargetOutput() CertificateMapGclbTargetOutput
	ToCertificateMapGclbTargetOutputWithContext(context.Context) CertificateMapGclbTargetOutput
}

type CertificateMapGclbTargetArgs struct {
	IpConfigs        CertificateMapGclbTargetIpConfigArrayInput `pulumi:"ipConfigs"`
	TargetHttpsProxy pulumi.StringPtrInput                      `pulumi:"targetHttpsProxy"`
	TargetSslProxy   pulumi.StringPtrInput                      `pulumi:"targetSslProxy"`
}

func (CertificateMapGclbTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateMapGclbTarget)(nil)).Elem()
}

func (i CertificateMapGclbTargetArgs) ToCertificateMapGclbTargetOutput() CertificateMapGclbTargetOutput {
	return i.ToCertificateMapGclbTargetOutputWithContext(context.Background())
}

func (i CertificateMapGclbTargetArgs) ToCertificateMapGclbTargetOutputWithContext(ctx context.Context) CertificateMapGclbTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapGclbTargetOutput)
}

// CertificateMapGclbTargetArrayInput is an input type that accepts CertificateMapGclbTargetArray and CertificateMapGclbTargetArrayOutput values.
// You can construct a concrete instance of `CertificateMapGclbTargetArrayInput` via:
//
//          CertificateMapGclbTargetArray{ CertificateMapGclbTargetArgs{...} }
type CertificateMapGclbTargetArrayInput interface {
	pulumi.Input

	ToCertificateMapGclbTargetArrayOutput() CertificateMapGclbTargetArrayOutput
	ToCertificateMapGclbTargetArrayOutputWithContext(context.Context) CertificateMapGclbTargetArrayOutput
}

type CertificateMapGclbTargetArray []CertificateMapGclbTargetInput

func (CertificateMapGclbTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateMapGclbTarget)(nil)).Elem()
}

func (i CertificateMapGclbTargetArray) ToCertificateMapGclbTargetArrayOutput() CertificateMapGclbTargetArrayOutput {
	return i.ToCertificateMapGclbTargetArrayOutputWithContext(context.Background())
}

func (i CertificateMapGclbTargetArray) ToCertificateMapGclbTargetArrayOutputWithContext(ctx context.Context) CertificateMapGclbTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapGclbTargetArrayOutput)
}

type CertificateMapGclbTargetOutput struct{ *pulumi.OutputState }

func (CertificateMapGclbTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateMapGclbTarget)(nil)).Elem()
}

func (o CertificateMapGclbTargetOutput) ToCertificateMapGclbTargetOutput() CertificateMapGclbTargetOutput {
	return o
}

func (o CertificateMapGclbTargetOutput) ToCertificateMapGclbTargetOutputWithContext(ctx context.Context) CertificateMapGclbTargetOutput {
	return o
}

func (o CertificateMapGclbTargetOutput) IpConfigs() CertificateMapGclbTargetIpConfigArrayOutput {
	return o.ApplyT(func(v CertificateMapGclbTarget) []CertificateMapGclbTargetIpConfig { return v.IpConfigs }).(CertificateMapGclbTargetIpConfigArrayOutput)
}

func (o CertificateMapGclbTargetOutput) TargetHttpsProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateMapGclbTarget) *string { return v.TargetHttpsProxy }).(pulumi.StringPtrOutput)
}

func (o CertificateMapGclbTargetOutput) TargetSslProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateMapGclbTarget) *string { return v.TargetSslProxy }).(pulumi.StringPtrOutput)
}

type CertificateMapGclbTargetArrayOutput struct{ *pulumi.OutputState }

func (CertificateMapGclbTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateMapGclbTarget)(nil)).Elem()
}

func (o CertificateMapGclbTargetArrayOutput) ToCertificateMapGclbTargetArrayOutput() CertificateMapGclbTargetArrayOutput {
	return o
}

func (o CertificateMapGclbTargetArrayOutput) ToCertificateMapGclbTargetArrayOutputWithContext(ctx context.Context) CertificateMapGclbTargetArrayOutput {
	return o
}

func (o CertificateMapGclbTargetArrayOutput) Index(i pulumi.IntInput) CertificateMapGclbTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateMapGclbTarget {
		return vs[0].([]CertificateMapGclbTarget)[vs[1].(int)]
	}).(CertificateMapGclbTargetOutput)
}

type CertificateMapGclbTargetIpConfig struct {
	IpAddress *string `pulumi:"ipAddress"`
	Ports     []int   `pulumi:"ports"`
}

// CertificateMapGclbTargetIpConfigInput is an input type that accepts CertificateMapGclbTargetIpConfigArgs and CertificateMapGclbTargetIpConfigOutput values.
// You can construct a concrete instance of `CertificateMapGclbTargetIpConfigInput` via:
//
//          CertificateMapGclbTargetIpConfigArgs{...}
type CertificateMapGclbTargetIpConfigInput interface {
	pulumi.Input

	ToCertificateMapGclbTargetIpConfigOutput() CertificateMapGclbTargetIpConfigOutput
	ToCertificateMapGclbTargetIpConfigOutputWithContext(context.Context) CertificateMapGclbTargetIpConfigOutput
}

type CertificateMapGclbTargetIpConfigArgs struct {
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	Ports     pulumi.IntArrayInput  `pulumi:"ports"`
}

func (CertificateMapGclbTargetIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateMapGclbTargetIpConfig)(nil)).Elem()
}

func (i CertificateMapGclbTargetIpConfigArgs) ToCertificateMapGclbTargetIpConfigOutput() CertificateMapGclbTargetIpConfigOutput {
	return i.ToCertificateMapGclbTargetIpConfigOutputWithContext(context.Background())
}

func (i CertificateMapGclbTargetIpConfigArgs) ToCertificateMapGclbTargetIpConfigOutputWithContext(ctx context.Context) CertificateMapGclbTargetIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapGclbTargetIpConfigOutput)
}

// CertificateMapGclbTargetIpConfigArrayInput is an input type that accepts CertificateMapGclbTargetIpConfigArray and CertificateMapGclbTargetIpConfigArrayOutput values.
// You can construct a concrete instance of `CertificateMapGclbTargetIpConfigArrayInput` via:
//
//          CertificateMapGclbTargetIpConfigArray{ CertificateMapGclbTargetIpConfigArgs{...} }
type CertificateMapGclbTargetIpConfigArrayInput interface {
	pulumi.Input

	ToCertificateMapGclbTargetIpConfigArrayOutput() CertificateMapGclbTargetIpConfigArrayOutput
	ToCertificateMapGclbTargetIpConfigArrayOutputWithContext(context.Context) CertificateMapGclbTargetIpConfigArrayOutput
}

type CertificateMapGclbTargetIpConfigArray []CertificateMapGclbTargetIpConfigInput

func (CertificateMapGclbTargetIpConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateMapGclbTargetIpConfig)(nil)).Elem()
}

func (i CertificateMapGclbTargetIpConfigArray) ToCertificateMapGclbTargetIpConfigArrayOutput() CertificateMapGclbTargetIpConfigArrayOutput {
	return i.ToCertificateMapGclbTargetIpConfigArrayOutputWithContext(context.Background())
}

func (i CertificateMapGclbTargetIpConfigArray) ToCertificateMapGclbTargetIpConfigArrayOutputWithContext(ctx context.Context) CertificateMapGclbTargetIpConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapGclbTargetIpConfigArrayOutput)
}

type CertificateMapGclbTargetIpConfigOutput struct{ *pulumi.OutputState }

func (CertificateMapGclbTargetIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateMapGclbTargetIpConfig)(nil)).Elem()
}

func (o CertificateMapGclbTargetIpConfigOutput) ToCertificateMapGclbTargetIpConfigOutput() CertificateMapGclbTargetIpConfigOutput {
	return o
}

func (o CertificateMapGclbTargetIpConfigOutput) ToCertificateMapGclbTargetIpConfigOutputWithContext(ctx context.Context) CertificateMapGclbTargetIpConfigOutput {
	return o
}

func (o CertificateMapGclbTargetIpConfigOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateMapGclbTargetIpConfig) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

func (o CertificateMapGclbTargetIpConfigOutput) Ports() pulumi.IntArrayOutput {
	return o.ApplyT(func(v CertificateMapGclbTargetIpConfig) []int { return v.Ports }).(pulumi.IntArrayOutput)
}

type CertificateMapGclbTargetIpConfigArrayOutput struct{ *pulumi.OutputState }

func (CertificateMapGclbTargetIpConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateMapGclbTargetIpConfig)(nil)).Elem()
}

func (o CertificateMapGclbTargetIpConfigArrayOutput) ToCertificateMapGclbTargetIpConfigArrayOutput() CertificateMapGclbTargetIpConfigArrayOutput {
	return o
}

func (o CertificateMapGclbTargetIpConfigArrayOutput) ToCertificateMapGclbTargetIpConfigArrayOutputWithContext(ctx context.Context) CertificateMapGclbTargetIpConfigArrayOutput {
	return o
}

func (o CertificateMapGclbTargetIpConfigArrayOutput) Index(i pulumi.IntInput) CertificateMapGclbTargetIpConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateMapGclbTargetIpConfig {
		return vs[0].([]CertificateMapGclbTargetIpConfig)[vs[1].(int)]
	}).(CertificateMapGclbTargetIpConfigOutput)
}

type CertificateSelfManaged struct {
	// The certificate chain in PEM-encoded form.
	// Leaf certificate comes first, followed by intermediate ones if any.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	CertificatePem string `pulumi:"certificatePem"`
	// The private key of the leaf certificate in PEM-encoded form.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PrivateKeyPem string `pulumi:"privateKeyPem"`
}

// CertificateSelfManagedInput is an input type that accepts CertificateSelfManagedArgs and CertificateSelfManagedOutput values.
// You can construct a concrete instance of `CertificateSelfManagedInput` via:
//
//          CertificateSelfManagedArgs{...}
type CertificateSelfManagedInput interface {
	pulumi.Input

	ToCertificateSelfManagedOutput() CertificateSelfManagedOutput
	ToCertificateSelfManagedOutputWithContext(context.Context) CertificateSelfManagedOutput
}

type CertificateSelfManagedArgs struct {
	// The certificate chain in PEM-encoded form.
	// Leaf certificate comes first, followed by intermediate ones if any.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	CertificatePem pulumi.StringInput `pulumi:"certificatePem"`
	// The private key of the leaf certificate in PEM-encoded form.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PrivateKeyPem pulumi.StringInput `pulumi:"privateKeyPem"`
}

func (CertificateSelfManagedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSelfManaged)(nil)).Elem()
}

func (i CertificateSelfManagedArgs) ToCertificateSelfManagedOutput() CertificateSelfManagedOutput {
	return i.ToCertificateSelfManagedOutputWithContext(context.Background())
}

func (i CertificateSelfManagedArgs) ToCertificateSelfManagedOutputWithContext(ctx context.Context) CertificateSelfManagedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSelfManagedOutput)
}

func (i CertificateSelfManagedArgs) ToCertificateSelfManagedPtrOutput() CertificateSelfManagedPtrOutput {
	return i.ToCertificateSelfManagedPtrOutputWithContext(context.Background())
}

func (i CertificateSelfManagedArgs) ToCertificateSelfManagedPtrOutputWithContext(ctx context.Context) CertificateSelfManagedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSelfManagedOutput).ToCertificateSelfManagedPtrOutputWithContext(ctx)
}

// CertificateSelfManagedPtrInput is an input type that accepts CertificateSelfManagedArgs, CertificateSelfManagedPtr and CertificateSelfManagedPtrOutput values.
// You can construct a concrete instance of `CertificateSelfManagedPtrInput` via:
//
//          CertificateSelfManagedArgs{...}
//
//  or:
//
//          nil
type CertificateSelfManagedPtrInput interface {
	pulumi.Input

	ToCertificateSelfManagedPtrOutput() CertificateSelfManagedPtrOutput
	ToCertificateSelfManagedPtrOutputWithContext(context.Context) CertificateSelfManagedPtrOutput
}

type certificateSelfManagedPtrType CertificateSelfManagedArgs

func CertificateSelfManagedPtr(v *CertificateSelfManagedArgs) CertificateSelfManagedPtrInput {
	return (*certificateSelfManagedPtrType)(v)
}

func (*certificateSelfManagedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSelfManaged)(nil)).Elem()
}

func (i *certificateSelfManagedPtrType) ToCertificateSelfManagedPtrOutput() CertificateSelfManagedPtrOutput {
	return i.ToCertificateSelfManagedPtrOutputWithContext(context.Background())
}

func (i *certificateSelfManagedPtrType) ToCertificateSelfManagedPtrOutputWithContext(ctx context.Context) CertificateSelfManagedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSelfManagedPtrOutput)
}

type CertificateSelfManagedOutput struct{ *pulumi.OutputState }

func (CertificateSelfManagedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSelfManaged)(nil)).Elem()
}

func (o CertificateSelfManagedOutput) ToCertificateSelfManagedOutput() CertificateSelfManagedOutput {
	return o
}

func (o CertificateSelfManagedOutput) ToCertificateSelfManagedOutputWithContext(ctx context.Context) CertificateSelfManagedOutput {
	return o
}

func (o CertificateSelfManagedOutput) ToCertificateSelfManagedPtrOutput() CertificateSelfManagedPtrOutput {
	return o.ToCertificateSelfManagedPtrOutputWithContext(context.Background())
}

func (o CertificateSelfManagedOutput) ToCertificateSelfManagedPtrOutputWithContext(ctx context.Context) CertificateSelfManagedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateSelfManaged) *CertificateSelfManaged {
		return &v
	}).(CertificateSelfManagedPtrOutput)
}

// The certificate chain in PEM-encoded form.
// Leaf certificate comes first, followed by intermediate ones if any.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o CertificateSelfManagedOutput) CertificatePem() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateSelfManaged) string { return v.CertificatePem }).(pulumi.StringOutput)
}

// The private key of the leaf certificate in PEM-encoded form.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o CertificateSelfManagedOutput) PrivateKeyPem() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateSelfManaged) string { return v.PrivateKeyPem }).(pulumi.StringOutput)
}

type CertificateSelfManagedPtrOutput struct{ *pulumi.OutputState }

func (CertificateSelfManagedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSelfManaged)(nil)).Elem()
}

func (o CertificateSelfManagedPtrOutput) ToCertificateSelfManagedPtrOutput() CertificateSelfManagedPtrOutput {
	return o
}

func (o CertificateSelfManagedPtrOutput) ToCertificateSelfManagedPtrOutputWithContext(ctx context.Context) CertificateSelfManagedPtrOutput {
	return o
}

func (o CertificateSelfManagedPtrOutput) Elem() CertificateSelfManagedOutput {
	return o.ApplyT(func(v *CertificateSelfManaged) CertificateSelfManaged {
		if v != nil {
			return *v
		}
		var ret CertificateSelfManaged
		return ret
	}).(CertificateSelfManagedOutput)
}

// The certificate chain in PEM-encoded form.
// Leaf certificate comes first, followed by intermediate ones if any.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o CertificateSelfManagedPtrOutput) CertificatePem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateSelfManaged) *string {
		if v == nil {
			return nil
		}
		return &v.CertificatePem
	}).(pulumi.StringPtrOutput)
}

// The private key of the leaf certificate in PEM-encoded form.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o CertificateSelfManagedPtrOutput) PrivateKeyPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateSelfManaged) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateKeyPem
	}).(pulumi.StringPtrOutput)
}

type DnsAuthorizationDnsResourceRecord struct {
	Data *string `pulumi:"data"`
	// Name of the resource; provided by the client when the resource is created.
	// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
	// and all following characters must be a dash, underscore, letter or digit.
	Name *string `pulumi:"name"`
	Type *string `pulumi:"type"`
}

// DnsAuthorizationDnsResourceRecordInput is an input type that accepts DnsAuthorizationDnsResourceRecordArgs and DnsAuthorizationDnsResourceRecordOutput values.
// You can construct a concrete instance of `DnsAuthorizationDnsResourceRecordInput` via:
//
//          DnsAuthorizationDnsResourceRecordArgs{...}
type DnsAuthorizationDnsResourceRecordInput interface {
	pulumi.Input

	ToDnsAuthorizationDnsResourceRecordOutput() DnsAuthorizationDnsResourceRecordOutput
	ToDnsAuthorizationDnsResourceRecordOutputWithContext(context.Context) DnsAuthorizationDnsResourceRecordOutput
}

type DnsAuthorizationDnsResourceRecordArgs struct {
	Data pulumi.StringPtrInput `pulumi:"data"`
	// Name of the resource; provided by the client when the resource is created.
	// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
	// and all following characters must be a dash, underscore, letter or digit.
	Name pulumi.StringPtrInput `pulumi:"name"`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DnsAuthorizationDnsResourceRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsAuthorizationDnsResourceRecord)(nil)).Elem()
}

func (i DnsAuthorizationDnsResourceRecordArgs) ToDnsAuthorizationDnsResourceRecordOutput() DnsAuthorizationDnsResourceRecordOutput {
	return i.ToDnsAuthorizationDnsResourceRecordOutputWithContext(context.Background())
}

func (i DnsAuthorizationDnsResourceRecordArgs) ToDnsAuthorizationDnsResourceRecordOutputWithContext(ctx context.Context) DnsAuthorizationDnsResourceRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsAuthorizationDnsResourceRecordOutput)
}

// DnsAuthorizationDnsResourceRecordArrayInput is an input type that accepts DnsAuthorizationDnsResourceRecordArray and DnsAuthorizationDnsResourceRecordArrayOutput values.
// You can construct a concrete instance of `DnsAuthorizationDnsResourceRecordArrayInput` via:
//
//          DnsAuthorizationDnsResourceRecordArray{ DnsAuthorizationDnsResourceRecordArgs{...} }
type DnsAuthorizationDnsResourceRecordArrayInput interface {
	pulumi.Input

	ToDnsAuthorizationDnsResourceRecordArrayOutput() DnsAuthorizationDnsResourceRecordArrayOutput
	ToDnsAuthorizationDnsResourceRecordArrayOutputWithContext(context.Context) DnsAuthorizationDnsResourceRecordArrayOutput
}

type DnsAuthorizationDnsResourceRecordArray []DnsAuthorizationDnsResourceRecordInput

func (DnsAuthorizationDnsResourceRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsAuthorizationDnsResourceRecord)(nil)).Elem()
}

func (i DnsAuthorizationDnsResourceRecordArray) ToDnsAuthorizationDnsResourceRecordArrayOutput() DnsAuthorizationDnsResourceRecordArrayOutput {
	return i.ToDnsAuthorizationDnsResourceRecordArrayOutputWithContext(context.Background())
}

func (i DnsAuthorizationDnsResourceRecordArray) ToDnsAuthorizationDnsResourceRecordArrayOutputWithContext(ctx context.Context) DnsAuthorizationDnsResourceRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsAuthorizationDnsResourceRecordArrayOutput)
}

type DnsAuthorizationDnsResourceRecordOutput struct{ *pulumi.OutputState }

func (DnsAuthorizationDnsResourceRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsAuthorizationDnsResourceRecord)(nil)).Elem()
}

func (o DnsAuthorizationDnsResourceRecordOutput) ToDnsAuthorizationDnsResourceRecordOutput() DnsAuthorizationDnsResourceRecordOutput {
	return o
}

func (o DnsAuthorizationDnsResourceRecordOutput) ToDnsAuthorizationDnsResourceRecordOutputWithContext(ctx context.Context) DnsAuthorizationDnsResourceRecordOutput {
	return o
}

func (o DnsAuthorizationDnsResourceRecordOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsAuthorizationDnsResourceRecord) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// Name of the resource; provided by the client when the resource is created.
// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
// and all following characters must be a dash, underscore, letter or digit.
func (o DnsAuthorizationDnsResourceRecordOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsAuthorizationDnsResourceRecord) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o DnsAuthorizationDnsResourceRecordOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsAuthorizationDnsResourceRecord) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DnsAuthorizationDnsResourceRecordArrayOutput struct{ *pulumi.OutputState }

func (DnsAuthorizationDnsResourceRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsAuthorizationDnsResourceRecord)(nil)).Elem()
}

func (o DnsAuthorizationDnsResourceRecordArrayOutput) ToDnsAuthorizationDnsResourceRecordArrayOutput() DnsAuthorizationDnsResourceRecordArrayOutput {
	return o
}

func (o DnsAuthorizationDnsResourceRecordArrayOutput) ToDnsAuthorizationDnsResourceRecordArrayOutputWithContext(ctx context.Context) DnsAuthorizationDnsResourceRecordArrayOutput {
	return o
}

func (o DnsAuthorizationDnsResourceRecordArrayOutput) Index(i pulumi.IntInput) DnsAuthorizationDnsResourceRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsAuthorizationDnsResourceRecord {
		return vs[0].([]DnsAuthorizationDnsResourceRecord)[vs[1].(int)]
	}).(DnsAuthorizationDnsResourceRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateManagedInput)(nil)).Elem(), CertificateManagedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateManagedPtrInput)(nil)).Elem(), CertificateManagedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapGclbTargetInput)(nil)).Elem(), CertificateMapGclbTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapGclbTargetArrayInput)(nil)).Elem(), CertificateMapGclbTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapGclbTargetIpConfigInput)(nil)).Elem(), CertificateMapGclbTargetIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapGclbTargetIpConfigArrayInput)(nil)).Elem(), CertificateMapGclbTargetIpConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSelfManagedInput)(nil)).Elem(), CertificateSelfManagedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSelfManagedPtrInput)(nil)).Elem(), CertificateSelfManagedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsAuthorizationDnsResourceRecordInput)(nil)).Elem(), DnsAuthorizationDnsResourceRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsAuthorizationDnsResourceRecordArrayInput)(nil)).Elem(), DnsAuthorizationDnsResourceRecordArray{})
	pulumi.RegisterOutputType(CertificateManagedOutput{})
	pulumi.RegisterOutputType(CertificateManagedPtrOutput{})
	pulumi.RegisterOutputType(CertificateMapGclbTargetOutput{})
	pulumi.RegisterOutputType(CertificateMapGclbTargetArrayOutput{})
	pulumi.RegisterOutputType(CertificateMapGclbTargetIpConfigOutput{})
	pulumi.RegisterOutputType(CertificateMapGclbTargetIpConfigArrayOutput{})
	pulumi.RegisterOutputType(CertificateSelfManagedOutput{})
	pulumi.RegisterOutputType(CertificateSelfManagedPtrOutput{})
	pulumi.RegisterOutputType(DnsAuthorizationDnsResourceRecordOutput{})
	pulumi.RegisterOutputType(DnsAuthorizationDnsResourceRecordArrayOutput{})
}
