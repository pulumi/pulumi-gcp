// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificatemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CertificateIssuanceConfigCertificateAuthorityConfig struct {
	// Defines a CertificateAuthorityServiceConfig.
	// Structure is documented below.
	CertificateAuthorityServiceConfig *CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig `pulumi:"certificateAuthorityServiceConfig"`
}

// CertificateIssuanceConfigCertificateAuthorityConfigInput is an input type that accepts CertificateIssuanceConfigCertificateAuthorityConfigArgs and CertificateIssuanceConfigCertificateAuthorityConfigOutput values.
// You can construct a concrete instance of `CertificateIssuanceConfigCertificateAuthorityConfigInput` via:
//
//	CertificateIssuanceConfigCertificateAuthorityConfigArgs{...}
type CertificateIssuanceConfigCertificateAuthorityConfigInput interface {
	pulumi.Input

	ToCertificateIssuanceConfigCertificateAuthorityConfigOutput() CertificateIssuanceConfigCertificateAuthorityConfigOutput
	ToCertificateIssuanceConfigCertificateAuthorityConfigOutputWithContext(context.Context) CertificateIssuanceConfigCertificateAuthorityConfigOutput
}

type CertificateIssuanceConfigCertificateAuthorityConfigArgs struct {
	// Defines a CertificateAuthorityServiceConfig.
	// Structure is documented below.
	CertificateAuthorityServiceConfig CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrInput `pulumi:"certificateAuthorityServiceConfig"`
}

func (CertificateIssuanceConfigCertificateAuthorityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateIssuanceConfigCertificateAuthorityConfig)(nil)).Elem()
}

func (i CertificateIssuanceConfigCertificateAuthorityConfigArgs) ToCertificateIssuanceConfigCertificateAuthorityConfigOutput() CertificateIssuanceConfigCertificateAuthorityConfigOutput {
	return i.ToCertificateIssuanceConfigCertificateAuthorityConfigOutputWithContext(context.Background())
}

func (i CertificateIssuanceConfigCertificateAuthorityConfigArgs) ToCertificateIssuanceConfigCertificateAuthorityConfigOutputWithContext(ctx context.Context) CertificateIssuanceConfigCertificateAuthorityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIssuanceConfigCertificateAuthorityConfigOutput)
}

func (i CertificateIssuanceConfigCertificateAuthorityConfigArgs) ToCertificateIssuanceConfigCertificateAuthorityConfigPtrOutput() CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput {
	return i.ToCertificateIssuanceConfigCertificateAuthorityConfigPtrOutputWithContext(context.Background())
}

func (i CertificateIssuanceConfigCertificateAuthorityConfigArgs) ToCertificateIssuanceConfigCertificateAuthorityConfigPtrOutputWithContext(ctx context.Context) CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIssuanceConfigCertificateAuthorityConfigOutput).ToCertificateIssuanceConfigCertificateAuthorityConfigPtrOutputWithContext(ctx)
}

// CertificateIssuanceConfigCertificateAuthorityConfigPtrInput is an input type that accepts CertificateIssuanceConfigCertificateAuthorityConfigArgs, CertificateIssuanceConfigCertificateAuthorityConfigPtr and CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput values.
// You can construct a concrete instance of `CertificateIssuanceConfigCertificateAuthorityConfigPtrInput` via:
//
//	        CertificateIssuanceConfigCertificateAuthorityConfigArgs{...}
//
//	or:
//
//	        nil
type CertificateIssuanceConfigCertificateAuthorityConfigPtrInput interface {
	pulumi.Input

	ToCertificateIssuanceConfigCertificateAuthorityConfigPtrOutput() CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput
	ToCertificateIssuanceConfigCertificateAuthorityConfigPtrOutputWithContext(context.Context) CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput
}

type certificateIssuanceConfigCertificateAuthorityConfigPtrType CertificateIssuanceConfigCertificateAuthorityConfigArgs

func CertificateIssuanceConfigCertificateAuthorityConfigPtr(v *CertificateIssuanceConfigCertificateAuthorityConfigArgs) CertificateIssuanceConfigCertificateAuthorityConfigPtrInput {
	return (*certificateIssuanceConfigCertificateAuthorityConfigPtrType)(v)
}

func (*certificateIssuanceConfigCertificateAuthorityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateIssuanceConfigCertificateAuthorityConfig)(nil)).Elem()
}

func (i *certificateIssuanceConfigCertificateAuthorityConfigPtrType) ToCertificateIssuanceConfigCertificateAuthorityConfigPtrOutput() CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput {
	return i.ToCertificateIssuanceConfigCertificateAuthorityConfigPtrOutputWithContext(context.Background())
}

func (i *certificateIssuanceConfigCertificateAuthorityConfigPtrType) ToCertificateIssuanceConfigCertificateAuthorityConfigPtrOutputWithContext(ctx context.Context) CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput)
}

type CertificateIssuanceConfigCertificateAuthorityConfigOutput struct{ *pulumi.OutputState }

func (CertificateIssuanceConfigCertificateAuthorityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateIssuanceConfigCertificateAuthorityConfig)(nil)).Elem()
}

func (o CertificateIssuanceConfigCertificateAuthorityConfigOutput) ToCertificateIssuanceConfigCertificateAuthorityConfigOutput() CertificateIssuanceConfigCertificateAuthorityConfigOutput {
	return o
}

func (o CertificateIssuanceConfigCertificateAuthorityConfigOutput) ToCertificateIssuanceConfigCertificateAuthorityConfigOutputWithContext(ctx context.Context) CertificateIssuanceConfigCertificateAuthorityConfigOutput {
	return o
}

func (o CertificateIssuanceConfigCertificateAuthorityConfigOutput) ToCertificateIssuanceConfigCertificateAuthorityConfigPtrOutput() CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput {
	return o.ToCertificateIssuanceConfigCertificateAuthorityConfigPtrOutputWithContext(context.Background())
}

func (o CertificateIssuanceConfigCertificateAuthorityConfigOutput) ToCertificateIssuanceConfigCertificateAuthorityConfigPtrOutputWithContext(ctx context.Context) CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateIssuanceConfigCertificateAuthorityConfig) *CertificateIssuanceConfigCertificateAuthorityConfig {
		return &v
	}).(CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput)
}

// Defines a CertificateAuthorityServiceConfig.
// Structure is documented below.
func (o CertificateIssuanceConfigCertificateAuthorityConfigOutput) CertificateAuthorityServiceConfig() CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput {
	return o.ApplyT(func(v CertificateIssuanceConfigCertificateAuthorityConfig) *CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig {
		return v.CertificateAuthorityServiceConfig
	}).(CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput)
}

type CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput struct{ *pulumi.OutputState }

func (CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateIssuanceConfigCertificateAuthorityConfig)(nil)).Elem()
}

func (o CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput) ToCertificateIssuanceConfigCertificateAuthorityConfigPtrOutput() CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput {
	return o
}

func (o CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput) ToCertificateIssuanceConfigCertificateAuthorityConfigPtrOutputWithContext(ctx context.Context) CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput {
	return o
}

func (o CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput) Elem() CertificateIssuanceConfigCertificateAuthorityConfigOutput {
	return o.ApplyT(func(v *CertificateIssuanceConfigCertificateAuthorityConfig) CertificateIssuanceConfigCertificateAuthorityConfig {
		if v != nil {
			return *v
		}
		var ret CertificateIssuanceConfigCertificateAuthorityConfig
		return ret
	}).(CertificateIssuanceConfigCertificateAuthorityConfigOutput)
}

// Defines a CertificateAuthorityServiceConfig.
// Structure is documented below.
func (o CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput) CertificateAuthorityServiceConfig() CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput {
	return o.ApplyT(func(v *CertificateIssuanceConfigCertificateAuthorityConfig) *CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig {
		if v == nil {
			return nil
		}
		return v.CertificateAuthorityServiceConfig
	}).(CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput)
}

type CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig struct {
	// A CA pool resource used to issue a certificate.
	// The CA pool string has a relative resource path following the form
	// "projects/{project}/locations/{location}/caPools/{caPool}".
	CaPool string `pulumi:"caPool"`
}

// CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigInput is an input type that accepts CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigArgs and CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput values.
// You can construct a concrete instance of `CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigInput` via:
//
//	CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigArgs{...}
type CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigInput interface {
	pulumi.Input

	ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput() CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput
	ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutputWithContext(context.Context) CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput
}

type CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigArgs struct {
	// A CA pool resource used to issue a certificate.
	// The CA pool string has a relative resource path following the form
	// "projects/{project}/locations/{location}/caPools/{caPool}".
	CaPool pulumi.StringInput `pulumi:"caPool"`
}

func (CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig)(nil)).Elem()
}

func (i CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigArgs) ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput() CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput {
	return i.ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutputWithContext(context.Background())
}

func (i CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigArgs) ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutputWithContext(ctx context.Context) CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput)
}

func (i CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigArgs) ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput() CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput {
	return i.ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutputWithContext(context.Background())
}

func (i CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigArgs) ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutputWithContext(ctx context.Context) CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput).ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutputWithContext(ctx)
}

// CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrInput is an input type that accepts CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigArgs, CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtr and CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput values.
// You can construct a concrete instance of `CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrInput` via:
//
//	        CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigArgs{...}
//
//	or:
//
//	        nil
type CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrInput interface {
	pulumi.Input

	ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput() CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput
	ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutputWithContext(context.Context) CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput
}

type certificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrType CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigArgs

func CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtr(v *CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigArgs) CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrInput {
	return (*certificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrType)(v)
}

func (*certificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig)(nil)).Elem()
}

func (i *certificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrType) ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput() CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput {
	return i.ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutputWithContext(context.Background())
}

func (i *certificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrType) ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutputWithContext(ctx context.Context) CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput)
}

type CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput struct{ *pulumi.OutputState }

func (CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig)(nil)).Elem()
}

func (o CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput) ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput() CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput {
	return o
}

func (o CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput) ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutputWithContext(ctx context.Context) CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput {
	return o
}

func (o CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput) ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput() CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput {
	return o.ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutputWithContext(context.Background())
}

func (o CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput) ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutputWithContext(ctx context.Context) CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig) *CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig {
		return &v
	}).(CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput)
}

// A CA pool resource used to issue a certificate.
// The CA pool string has a relative resource path following the form
// "projects/{project}/locations/{location}/caPools/{caPool}".
func (o CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput) CaPool() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig) string {
		return v.CaPool
	}).(pulumi.StringOutput)
}

type CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput struct{ *pulumi.OutputState }

func (CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig)(nil)).Elem()
}

func (o CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput) ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput() CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput {
	return o
}

func (o CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput) ToCertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutputWithContext(ctx context.Context) CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput {
	return o
}

func (o CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput) Elem() CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput {
	return o.ApplyT(func(v *CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig) CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig {
		if v != nil {
			return *v
		}
		var ret CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig
		return ret
	}).(CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput)
}

// A CA pool resource used to issue a certificate.
// The CA pool string has a relative resource path following the form
// "projects/{project}/locations/{location}/caPools/{caPool}".
func (o CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput) CaPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfig) *string {
		if v == nil {
			return nil
		}
		return &v.CaPool
	}).(pulumi.StringPtrOutput)
}

type CertificateManaged struct {
	// (Output)
	// Detailed state of the latest authorization attempt for each domain
	// specified for this Managed Certificate.
	// Structure is documented below.
	//
	// <a name="nestedManagedProvisioningIssue"></a>The `provisioningIssue` block contains:
	AuthorizationAttemptInfos []CertificateManagedAuthorizationAttemptInfo `pulumi:"authorizationAttemptInfos"`
	// Authorizations that will be used for performing domain authorization. Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
	DnsAuthorizations []string `pulumi:"dnsAuthorizations"`
	// The domains for which a managed SSL certificate will be generated.
	// Wildcard domains are only supported with DNS challenge resolution
	Domains []string `pulumi:"domains"`
	// The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format projects/*/locations/*/certificateIssuanceConfigs/*.
	// If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
	// Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
	IssuanceConfig *string `pulumi:"issuanceConfig"`
	// (Output)
	// Information about issues with provisioning this Managed Certificate.
	// Structure is documented below.
	ProvisioningIssues []CertificateManagedProvisioningIssue `pulumi:"provisioningIssues"`
	// (Output)
	// State of the domain for managed certificate issuance.
	State *string `pulumi:"state"`
}

// CertificateManagedInput is an input type that accepts CertificateManagedArgs and CertificateManagedOutput values.
// You can construct a concrete instance of `CertificateManagedInput` via:
//
//	CertificateManagedArgs{...}
type CertificateManagedInput interface {
	pulumi.Input

	ToCertificateManagedOutput() CertificateManagedOutput
	ToCertificateManagedOutputWithContext(context.Context) CertificateManagedOutput
}

type CertificateManagedArgs struct {
	// (Output)
	// Detailed state of the latest authorization attempt for each domain
	// specified for this Managed Certificate.
	// Structure is documented below.
	//
	// <a name="nestedManagedProvisioningIssue"></a>The `provisioningIssue` block contains:
	AuthorizationAttemptInfos CertificateManagedAuthorizationAttemptInfoArrayInput `pulumi:"authorizationAttemptInfos"`
	// Authorizations that will be used for performing domain authorization. Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
	DnsAuthorizations pulumi.StringArrayInput `pulumi:"dnsAuthorizations"`
	// The domains for which a managed SSL certificate will be generated.
	// Wildcard domains are only supported with DNS challenge resolution
	Domains pulumi.StringArrayInput `pulumi:"domains"`
	// The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format projects/*/locations/*/certificateIssuanceConfigs/*.
	// If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
	// Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
	IssuanceConfig pulumi.StringPtrInput `pulumi:"issuanceConfig"`
	// (Output)
	// Information about issues with provisioning this Managed Certificate.
	// Structure is documented below.
	ProvisioningIssues CertificateManagedProvisioningIssueArrayInput `pulumi:"provisioningIssues"`
	// (Output)
	// State of the domain for managed certificate issuance.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (CertificateManagedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateManaged)(nil)).Elem()
}

func (i CertificateManagedArgs) ToCertificateManagedOutput() CertificateManagedOutput {
	return i.ToCertificateManagedOutputWithContext(context.Background())
}

func (i CertificateManagedArgs) ToCertificateManagedOutputWithContext(ctx context.Context) CertificateManagedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateManagedOutput)
}

func (i CertificateManagedArgs) ToCertificateManagedPtrOutput() CertificateManagedPtrOutput {
	return i.ToCertificateManagedPtrOutputWithContext(context.Background())
}

func (i CertificateManagedArgs) ToCertificateManagedPtrOutputWithContext(ctx context.Context) CertificateManagedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateManagedOutput).ToCertificateManagedPtrOutputWithContext(ctx)
}

// CertificateManagedPtrInput is an input type that accepts CertificateManagedArgs, CertificateManagedPtr and CertificateManagedPtrOutput values.
// You can construct a concrete instance of `CertificateManagedPtrInput` via:
//
//	        CertificateManagedArgs{...}
//
//	or:
//
//	        nil
type CertificateManagedPtrInput interface {
	pulumi.Input

	ToCertificateManagedPtrOutput() CertificateManagedPtrOutput
	ToCertificateManagedPtrOutputWithContext(context.Context) CertificateManagedPtrOutput
}

type certificateManagedPtrType CertificateManagedArgs

func CertificateManagedPtr(v *CertificateManagedArgs) CertificateManagedPtrInput {
	return (*certificateManagedPtrType)(v)
}

func (*certificateManagedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateManaged)(nil)).Elem()
}

func (i *certificateManagedPtrType) ToCertificateManagedPtrOutput() CertificateManagedPtrOutput {
	return i.ToCertificateManagedPtrOutputWithContext(context.Background())
}

func (i *certificateManagedPtrType) ToCertificateManagedPtrOutputWithContext(ctx context.Context) CertificateManagedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateManagedPtrOutput)
}

type CertificateManagedOutput struct{ *pulumi.OutputState }

func (CertificateManagedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateManaged)(nil)).Elem()
}

func (o CertificateManagedOutput) ToCertificateManagedOutput() CertificateManagedOutput {
	return o
}

func (o CertificateManagedOutput) ToCertificateManagedOutputWithContext(ctx context.Context) CertificateManagedOutput {
	return o
}

func (o CertificateManagedOutput) ToCertificateManagedPtrOutput() CertificateManagedPtrOutput {
	return o.ToCertificateManagedPtrOutputWithContext(context.Background())
}

func (o CertificateManagedOutput) ToCertificateManagedPtrOutputWithContext(ctx context.Context) CertificateManagedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateManaged) *CertificateManaged {
		return &v
	}).(CertificateManagedPtrOutput)
}

// (Output)
// Detailed state of the latest authorization attempt for each domain
// specified for this Managed Certificate.
// Structure is documented below.
//
// <a name="nestedManagedProvisioningIssue"></a>The `provisioningIssue` block contains:
func (o CertificateManagedOutput) AuthorizationAttemptInfos() CertificateManagedAuthorizationAttemptInfoArrayOutput {
	return o.ApplyT(func(v CertificateManaged) []CertificateManagedAuthorizationAttemptInfo {
		return v.AuthorizationAttemptInfos
	}).(CertificateManagedAuthorizationAttemptInfoArrayOutput)
}

// Authorizations that will be used for performing domain authorization. Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
func (o CertificateManagedOutput) DnsAuthorizations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateManaged) []string { return v.DnsAuthorizations }).(pulumi.StringArrayOutput)
}

// The domains for which a managed SSL certificate will be generated.
// Wildcard domains are only supported with DNS challenge resolution
func (o CertificateManagedOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateManaged) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format projects/*/locations/*/certificateIssuanceConfigs/*.
// If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
// Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
func (o CertificateManagedOutput) IssuanceConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateManaged) *string { return v.IssuanceConfig }).(pulumi.StringPtrOutput)
}

// (Output)
// Information about issues with provisioning this Managed Certificate.
// Structure is documented below.
func (o CertificateManagedOutput) ProvisioningIssues() CertificateManagedProvisioningIssueArrayOutput {
	return o.ApplyT(func(v CertificateManaged) []CertificateManagedProvisioningIssue { return v.ProvisioningIssues }).(CertificateManagedProvisioningIssueArrayOutput)
}

// (Output)
// State of the domain for managed certificate issuance.
func (o CertificateManagedOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateManaged) *string { return v.State }).(pulumi.StringPtrOutput)
}

type CertificateManagedPtrOutput struct{ *pulumi.OutputState }

func (CertificateManagedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateManaged)(nil)).Elem()
}

func (o CertificateManagedPtrOutput) ToCertificateManagedPtrOutput() CertificateManagedPtrOutput {
	return o
}

func (o CertificateManagedPtrOutput) ToCertificateManagedPtrOutputWithContext(ctx context.Context) CertificateManagedPtrOutput {
	return o
}

func (o CertificateManagedPtrOutput) Elem() CertificateManagedOutput {
	return o.ApplyT(func(v *CertificateManaged) CertificateManaged {
		if v != nil {
			return *v
		}
		var ret CertificateManaged
		return ret
	}).(CertificateManagedOutput)
}

// (Output)
// Detailed state of the latest authorization attempt for each domain
// specified for this Managed Certificate.
// Structure is documented below.
//
// <a name="nestedManagedProvisioningIssue"></a>The `provisioningIssue` block contains:
func (o CertificateManagedPtrOutput) AuthorizationAttemptInfos() CertificateManagedAuthorizationAttemptInfoArrayOutput {
	return o.ApplyT(func(v *CertificateManaged) []CertificateManagedAuthorizationAttemptInfo {
		if v == nil {
			return nil
		}
		return v.AuthorizationAttemptInfos
	}).(CertificateManagedAuthorizationAttemptInfoArrayOutput)
}

// Authorizations that will be used for performing domain authorization. Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
func (o CertificateManagedPtrOutput) DnsAuthorizations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateManaged) []string {
		if v == nil {
			return nil
		}
		return v.DnsAuthorizations
	}).(pulumi.StringArrayOutput)
}

// The domains for which a managed SSL certificate will be generated.
// Wildcard domains are only supported with DNS challenge resolution
func (o CertificateManagedPtrOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateManaged) []string {
		if v == nil {
			return nil
		}
		return v.Domains
	}).(pulumi.StringArrayOutput)
}

// The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format projects/*/locations/*/certificateIssuanceConfigs/*.
// If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
// Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
func (o CertificateManagedPtrOutput) IssuanceConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateManaged) *string {
		if v == nil {
			return nil
		}
		return v.IssuanceConfig
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Information about issues with provisioning this Managed Certificate.
// Structure is documented below.
func (o CertificateManagedPtrOutput) ProvisioningIssues() CertificateManagedProvisioningIssueArrayOutput {
	return o.ApplyT(func(v *CertificateManaged) []CertificateManagedProvisioningIssue {
		if v == nil {
			return nil
		}
		return v.ProvisioningIssues
	}).(CertificateManagedProvisioningIssueArrayOutput)
}

// (Output)
// State of the domain for managed certificate issuance.
func (o CertificateManagedPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateManaged) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

type CertificateManagedAuthorizationAttemptInfo struct {
	// Human readable explanation for reaching the state. Provided to help
	// address the configuration issues.
	// Not guaranteed to be stable. For programmatic access use 'failure_reason' field.
	Details *string `pulumi:"details"`
	// Domain name of the authorization attempt.
	Domain *string `pulumi:"domain"`
	// Reason for failure of the authorization attempt for the domain.
	FailureReason *string `pulumi:"failureReason"`
	// State of the domain for managed certificate issuance.
	State *string `pulumi:"state"`
}

// CertificateManagedAuthorizationAttemptInfoInput is an input type that accepts CertificateManagedAuthorizationAttemptInfoArgs and CertificateManagedAuthorizationAttemptInfoOutput values.
// You can construct a concrete instance of `CertificateManagedAuthorizationAttemptInfoInput` via:
//
//	CertificateManagedAuthorizationAttemptInfoArgs{...}
type CertificateManagedAuthorizationAttemptInfoInput interface {
	pulumi.Input

	ToCertificateManagedAuthorizationAttemptInfoOutput() CertificateManagedAuthorizationAttemptInfoOutput
	ToCertificateManagedAuthorizationAttemptInfoOutputWithContext(context.Context) CertificateManagedAuthorizationAttemptInfoOutput
}

type CertificateManagedAuthorizationAttemptInfoArgs struct {
	// Human readable explanation for reaching the state. Provided to help
	// address the configuration issues.
	// Not guaranteed to be stable. For programmatic access use 'failure_reason' field.
	Details pulumi.StringPtrInput `pulumi:"details"`
	// Domain name of the authorization attempt.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Reason for failure of the authorization attempt for the domain.
	FailureReason pulumi.StringPtrInput `pulumi:"failureReason"`
	// State of the domain for managed certificate issuance.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (CertificateManagedAuthorizationAttemptInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateManagedAuthorizationAttemptInfo)(nil)).Elem()
}

func (i CertificateManagedAuthorizationAttemptInfoArgs) ToCertificateManagedAuthorizationAttemptInfoOutput() CertificateManagedAuthorizationAttemptInfoOutput {
	return i.ToCertificateManagedAuthorizationAttemptInfoOutputWithContext(context.Background())
}

func (i CertificateManagedAuthorizationAttemptInfoArgs) ToCertificateManagedAuthorizationAttemptInfoOutputWithContext(ctx context.Context) CertificateManagedAuthorizationAttemptInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateManagedAuthorizationAttemptInfoOutput)
}

// CertificateManagedAuthorizationAttemptInfoArrayInput is an input type that accepts CertificateManagedAuthorizationAttemptInfoArray and CertificateManagedAuthorizationAttemptInfoArrayOutput values.
// You can construct a concrete instance of `CertificateManagedAuthorizationAttemptInfoArrayInput` via:
//
//	CertificateManagedAuthorizationAttemptInfoArray{ CertificateManagedAuthorizationAttemptInfoArgs{...} }
type CertificateManagedAuthorizationAttemptInfoArrayInput interface {
	pulumi.Input

	ToCertificateManagedAuthorizationAttemptInfoArrayOutput() CertificateManagedAuthorizationAttemptInfoArrayOutput
	ToCertificateManagedAuthorizationAttemptInfoArrayOutputWithContext(context.Context) CertificateManagedAuthorizationAttemptInfoArrayOutput
}

type CertificateManagedAuthorizationAttemptInfoArray []CertificateManagedAuthorizationAttemptInfoInput

func (CertificateManagedAuthorizationAttemptInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateManagedAuthorizationAttemptInfo)(nil)).Elem()
}

func (i CertificateManagedAuthorizationAttemptInfoArray) ToCertificateManagedAuthorizationAttemptInfoArrayOutput() CertificateManagedAuthorizationAttemptInfoArrayOutput {
	return i.ToCertificateManagedAuthorizationAttemptInfoArrayOutputWithContext(context.Background())
}

func (i CertificateManagedAuthorizationAttemptInfoArray) ToCertificateManagedAuthorizationAttemptInfoArrayOutputWithContext(ctx context.Context) CertificateManagedAuthorizationAttemptInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateManagedAuthorizationAttemptInfoArrayOutput)
}

type CertificateManagedAuthorizationAttemptInfoOutput struct{ *pulumi.OutputState }

func (CertificateManagedAuthorizationAttemptInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateManagedAuthorizationAttemptInfo)(nil)).Elem()
}

func (o CertificateManagedAuthorizationAttemptInfoOutput) ToCertificateManagedAuthorizationAttemptInfoOutput() CertificateManagedAuthorizationAttemptInfoOutput {
	return o
}

func (o CertificateManagedAuthorizationAttemptInfoOutput) ToCertificateManagedAuthorizationAttemptInfoOutputWithContext(ctx context.Context) CertificateManagedAuthorizationAttemptInfoOutput {
	return o
}

// Human readable explanation for reaching the state. Provided to help
// address the configuration issues.
// Not guaranteed to be stable. For programmatic access use 'failure_reason' field.
func (o CertificateManagedAuthorizationAttemptInfoOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateManagedAuthorizationAttemptInfo) *string { return v.Details }).(pulumi.StringPtrOutput)
}

// Domain name of the authorization attempt.
func (o CertificateManagedAuthorizationAttemptInfoOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateManagedAuthorizationAttemptInfo) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// Reason for failure of the authorization attempt for the domain.
func (o CertificateManagedAuthorizationAttemptInfoOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateManagedAuthorizationAttemptInfo) *string { return v.FailureReason }).(pulumi.StringPtrOutput)
}

// State of the domain for managed certificate issuance.
func (o CertificateManagedAuthorizationAttemptInfoOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateManagedAuthorizationAttemptInfo) *string { return v.State }).(pulumi.StringPtrOutput)
}

type CertificateManagedAuthorizationAttemptInfoArrayOutput struct{ *pulumi.OutputState }

func (CertificateManagedAuthorizationAttemptInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateManagedAuthorizationAttemptInfo)(nil)).Elem()
}

func (o CertificateManagedAuthorizationAttemptInfoArrayOutput) ToCertificateManagedAuthorizationAttemptInfoArrayOutput() CertificateManagedAuthorizationAttemptInfoArrayOutput {
	return o
}

func (o CertificateManagedAuthorizationAttemptInfoArrayOutput) ToCertificateManagedAuthorizationAttemptInfoArrayOutputWithContext(ctx context.Context) CertificateManagedAuthorizationAttemptInfoArrayOutput {
	return o
}

func (o CertificateManagedAuthorizationAttemptInfoArrayOutput) Index(i pulumi.IntInput) CertificateManagedAuthorizationAttemptInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateManagedAuthorizationAttemptInfo {
		return vs[0].([]CertificateManagedAuthorizationAttemptInfo)[vs[1].(int)]
	}).(CertificateManagedAuthorizationAttemptInfoOutput)
}

type CertificateManagedProvisioningIssue struct {
	// Human readable explanation about the issue. Provided to help address
	// the configuration issues.
	// Not guaranteed to be stable. For programmatic access use 'reason' field.
	Details *string `pulumi:"details"`
	// Reason for provisioning failures.
	Reason *string `pulumi:"reason"`
}

// CertificateManagedProvisioningIssueInput is an input type that accepts CertificateManagedProvisioningIssueArgs and CertificateManagedProvisioningIssueOutput values.
// You can construct a concrete instance of `CertificateManagedProvisioningIssueInput` via:
//
//	CertificateManagedProvisioningIssueArgs{...}
type CertificateManagedProvisioningIssueInput interface {
	pulumi.Input

	ToCertificateManagedProvisioningIssueOutput() CertificateManagedProvisioningIssueOutput
	ToCertificateManagedProvisioningIssueOutputWithContext(context.Context) CertificateManagedProvisioningIssueOutput
}

type CertificateManagedProvisioningIssueArgs struct {
	// Human readable explanation about the issue. Provided to help address
	// the configuration issues.
	// Not guaranteed to be stable. For programmatic access use 'reason' field.
	Details pulumi.StringPtrInput `pulumi:"details"`
	// Reason for provisioning failures.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (CertificateManagedProvisioningIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateManagedProvisioningIssue)(nil)).Elem()
}

func (i CertificateManagedProvisioningIssueArgs) ToCertificateManagedProvisioningIssueOutput() CertificateManagedProvisioningIssueOutput {
	return i.ToCertificateManagedProvisioningIssueOutputWithContext(context.Background())
}

func (i CertificateManagedProvisioningIssueArgs) ToCertificateManagedProvisioningIssueOutputWithContext(ctx context.Context) CertificateManagedProvisioningIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateManagedProvisioningIssueOutput)
}

// CertificateManagedProvisioningIssueArrayInput is an input type that accepts CertificateManagedProvisioningIssueArray and CertificateManagedProvisioningIssueArrayOutput values.
// You can construct a concrete instance of `CertificateManagedProvisioningIssueArrayInput` via:
//
//	CertificateManagedProvisioningIssueArray{ CertificateManagedProvisioningIssueArgs{...} }
type CertificateManagedProvisioningIssueArrayInput interface {
	pulumi.Input

	ToCertificateManagedProvisioningIssueArrayOutput() CertificateManagedProvisioningIssueArrayOutput
	ToCertificateManagedProvisioningIssueArrayOutputWithContext(context.Context) CertificateManagedProvisioningIssueArrayOutput
}

type CertificateManagedProvisioningIssueArray []CertificateManagedProvisioningIssueInput

func (CertificateManagedProvisioningIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateManagedProvisioningIssue)(nil)).Elem()
}

func (i CertificateManagedProvisioningIssueArray) ToCertificateManagedProvisioningIssueArrayOutput() CertificateManagedProvisioningIssueArrayOutput {
	return i.ToCertificateManagedProvisioningIssueArrayOutputWithContext(context.Background())
}

func (i CertificateManagedProvisioningIssueArray) ToCertificateManagedProvisioningIssueArrayOutputWithContext(ctx context.Context) CertificateManagedProvisioningIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateManagedProvisioningIssueArrayOutput)
}

type CertificateManagedProvisioningIssueOutput struct{ *pulumi.OutputState }

func (CertificateManagedProvisioningIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateManagedProvisioningIssue)(nil)).Elem()
}

func (o CertificateManagedProvisioningIssueOutput) ToCertificateManagedProvisioningIssueOutput() CertificateManagedProvisioningIssueOutput {
	return o
}

func (o CertificateManagedProvisioningIssueOutput) ToCertificateManagedProvisioningIssueOutputWithContext(ctx context.Context) CertificateManagedProvisioningIssueOutput {
	return o
}

// Human readable explanation about the issue. Provided to help address
// the configuration issues.
// Not guaranteed to be stable. For programmatic access use 'reason' field.
func (o CertificateManagedProvisioningIssueOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateManagedProvisioningIssue) *string { return v.Details }).(pulumi.StringPtrOutput)
}

// Reason for provisioning failures.
func (o CertificateManagedProvisioningIssueOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateManagedProvisioningIssue) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type CertificateManagedProvisioningIssueArrayOutput struct{ *pulumi.OutputState }

func (CertificateManagedProvisioningIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateManagedProvisioningIssue)(nil)).Elem()
}

func (o CertificateManagedProvisioningIssueArrayOutput) ToCertificateManagedProvisioningIssueArrayOutput() CertificateManagedProvisioningIssueArrayOutput {
	return o
}

func (o CertificateManagedProvisioningIssueArrayOutput) ToCertificateManagedProvisioningIssueArrayOutputWithContext(ctx context.Context) CertificateManagedProvisioningIssueArrayOutput {
	return o
}

func (o CertificateManagedProvisioningIssueArrayOutput) Index(i pulumi.IntInput) CertificateManagedProvisioningIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateManagedProvisioningIssue {
		return vs[0].([]CertificateManagedProvisioningIssue)[vs[1].(int)]
	}).(CertificateManagedProvisioningIssueOutput)
}

type CertificateMapGclbTarget struct {
	// An IP configuration where this Certificate Map is serving
	// Structure is documented below.
	IpConfigs []CertificateMapGclbTargetIpConfig `pulumi:"ipConfigs"`
	// Proxy name must be in the format projects/*/locations/*/targetHttpsProxies/*.
	// This field is part of a union field `targetProxy`: Only one of `targetHttpsProxy` or
	// `targetSslProxy` may be set.
	TargetHttpsProxy *string `pulumi:"targetHttpsProxy"`
	// Proxy name must be in the format projects/*/locations/*/targetSslProxies/*.
	// This field is part of a union field `targetProxy`: Only one of `targetHttpsProxy` or
	// `targetSslProxy` may be set.
	TargetSslProxy *string `pulumi:"targetSslProxy"`
}

// CertificateMapGclbTargetInput is an input type that accepts CertificateMapGclbTargetArgs and CertificateMapGclbTargetOutput values.
// You can construct a concrete instance of `CertificateMapGclbTargetInput` via:
//
//	CertificateMapGclbTargetArgs{...}
type CertificateMapGclbTargetInput interface {
	pulumi.Input

	ToCertificateMapGclbTargetOutput() CertificateMapGclbTargetOutput
	ToCertificateMapGclbTargetOutputWithContext(context.Context) CertificateMapGclbTargetOutput
}

type CertificateMapGclbTargetArgs struct {
	// An IP configuration where this Certificate Map is serving
	// Structure is documented below.
	IpConfigs CertificateMapGclbTargetIpConfigArrayInput `pulumi:"ipConfigs"`
	// Proxy name must be in the format projects/*/locations/*/targetHttpsProxies/*.
	// This field is part of a union field `targetProxy`: Only one of `targetHttpsProxy` or
	// `targetSslProxy` may be set.
	TargetHttpsProxy pulumi.StringPtrInput `pulumi:"targetHttpsProxy"`
	// Proxy name must be in the format projects/*/locations/*/targetSslProxies/*.
	// This field is part of a union field `targetProxy`: Only one of `targetHttpsProxy` or
	// `targetSslProxy` may be set.
	TargetSslProxy pulumi.StringPtrInput `pulumi:"targetSslProxy"`
}

func (CertificateMapGclbTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateMapGclbTarget)(nil)).Elem()
}

func (i CertificateMapGclbTargetArgs) ToCertificateMapGclbTargetOutput() CertificateMapGclbTargetOutput {
	return i.ToCertificateMapGclbTargetOutputWithContext(context.Background())
}

func (i CertificateMapGclbTargetArgs) ToCertificateMapGclbTargetOutputWithContext(ctx context.Context) CertificateMapGclbTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapGclbTargetOutput)
}

// CertificateMapGclbTargetArrayInput is an input type that accepts CertificateMapGclbTargetArray and CertificateMapGclbTargetArrayOutput values.
// You can construct a concrete instance of `CertificateMapGclbTargetArrayInput` via:
//
//	CertificateMapGclbTargetArray{ CertificateMapGclbTargetArgs{...} }
type CertificateMapGclbTargetArrayInput interface {
	pulumi.Input

	ToCertificateMapGclbTargetArrayOutput() CertificateMapGclbTargetArrayOutput
	ToCertificateMapGclbTargetArrayOutputWithContext(context.Context) CertificateMapGclbTargetArrayOutput
}

type CertificateMapGclbTargetArray []CertificateMapGclbTargetInput

func (CertificateMapGclbTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateMapGclbTarget)(nil)).Elem()
}

func (i CertificateMapGclbTargetArray) ToCertificateMapGclbTargetArrayOutput() CertificateMapGclbTargetArrayOutput {
	return i.ToCertificateMapGclbTargetArrayOutputWithContext(context.Background())
}

func (i CertificateMapGclbTargetArray) ToCertificateMapGclbTargetArrayOutputWithContext(ctx context.Context) CertificateMapGclbTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapGclbTargetArrayOutput)
}

type CertificateMapGclbTargetOutput struct{ *pulumi.OutputState }

func (CertificateMapGclbTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateMapGclbTarget)(nil)).Elem()
}

func (o CertificateMapGclbTargetOutput) ToCertificateMapGclbTargetOutput() CertificateMapGclbTargetOutput {
	return o
}

func (o CertificateMapGclbTargetOutput) ToCertificateMapGclbTargetOutputWithContext(ctx context.Context) CertificateMapGclbTargetOutput {
	return o
}

// An IP configuration where this Certificate Map is serving
// Structure is documented below.
func (o CertificateMapGclbTargetOutput) IpConfigs() CertificateMapGclbTargetIpConfigArrayOutput {
	return o.ApplyT(func(v CertificateMapGclbTarget) []CertificateMapGclbTargetIpConfig { return v.IpConfigs }).(CertificateMapGclbTargetIpConfigArrayOutput)
}

// Proxy name must be in the format projects/*/locations/*/targetHttpsProxies/*.
// This field is part of a union field `targetProxy`: Only one of `targetHttpsProxy` or
// `targetSslProxy` may be set.
func (o CertificateMapGclbTargetOutput) TargetHttpsProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateMapGclbTarget) *string { return v.TargetHttpsProxy }).(pulumi.StringPtrOutput)
}

// Proxy name must be in the format projects/*/locations/*/targetSslProxies/*.
// This field is part of a union field `targetProxy`: Only one of `targetHttpsProxy` or
// `targetSslProxy` may be set.
func (o CertificateMapGclbTargetOutput) TargetSslProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateMapGclbTarget) *string { return v.TargetSslProxy }).(pulumi.StringPtrOutput)
}

type CertificateMapGclbTargetArrayOutput struct{ *pulumi.OutputState }

func (CertificateMapGclbTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateMapGclbTarget)(nil)).Elem()
}

func (o CertificateMapGclbTargetArrayOutput) ToCertificateMapGclbTargetArrayOutput() CertificateMapGclbTargetArrayOutput {
	return o
}

func (o CertificateMapGclbTargetArrayOutput) ToCertificateMapGclbTargetArrayOutputWithContext(ctx context.Context) CertificateMapGclbTargetArrayOutput {
	return o
}

func (o CertificateMapGclbTargetArrayOutput) Index(i pulumi.IntInput) CertificateMapGclbTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateMapGclbTarget {
		return vs[0].([]CertificateMapGclbTarget)[vs[1].(int)]
	}).(CertificateMapGclbTargetOutput)
}

type CertificateMapGclbTargetIpConfig struct {
	// An external IP address
	IpAddress *string `pulumi:"ipAddress"`
	// A list of ports
	Ports []int `pulumi:"ports"`
}

// CertificateMapGclbTargetIpConfigInput is an input type that accepts CertificateMapGclbTargetIpConfigArgs and CertificateMapGclbTargetIpConfigOutput values.
// You can construct a concrete instance of `CertificateMapGclbTargetIpConfigInput` via:
//
//	CertificateMapGclbTargetIpConfigArgs{...}
type CertificateMapGclbTargetIpConfigInput interface {
	pulumi.Input

	ToCertificateMapGclbTargetIpConfigOutput() CertificateMapGclbTargetIpConfigOutput
	ToCertificateMapGclbTargetIpConfigOutputWithContext(context.Context) CertificateMapGclbTargetIpConfigOutput
}

type CertificateMapGclbTargetIpConfigArgs struct {
	// An external IP address
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// A list of ports
	Ports pulumi.IntArrayInput `pulumi:"ports"`
}

func (CertificateMapGclbTargetIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateMapGclbTargetIpConfig)(nil)).Elem()
}

func (i CertificateMapGclbTargetIpConfigArgs) ToCertificateMapGclbTargetIpConfigOutput() CertificateMapGclbTargetIpConfigOutput {
	return i.ToCertificateMapGclbTargetIpConfigOutputWithContext(context.Background())
}

func (i CertificateMapGclbTargetIpConfigArgs) ToCertificateMapGclbTargetIpConfigOutputWithContext(ctx context.Context) CertificateMapGclbTargetIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapGclbTargetIpConfigOutput)
}

// CertificateMapGclbTargetIpConfigArrayInput is an input type that accepts CertificateMapGclbTargetIpConfigArray and CertificateMapGclbTargetIpConfigArrayOutput values.
// You can construct a concrete instance of `CertificateMapGclbTargetIpConfigArrayInput` via:
//
//	CertificateMapGclbTargetIpConfigArray{ CertificateMapGclbTargetIpConfigArgs{...} }
type CertificateMapGclbTargetIpConfigArrayInput interface {
	pulumi.Input

	ToCertificateMapGclbTargetIpConfigArrayOutput() CertificateMapGclbTargetIpConfigArrayOutput
	ToCertificateMapGclbTargetIpConfigArrayOutputWithContext(context.Context) CertificateMapGclbTargetIpConfigArrayOutput
}

type CertificateMapGclbTargetIpConfigArray []CertificateMapGclbTargetIpConfigInput

func (CertificateMapGclbTargetIpConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateMapGclbTargetIpConfig)(nil)).Elem()
}

func (i CertificateMapGclbTargetIpConfigArray) ToCertificateMapGclbTargetIpConfigArrayOutput() CertificateMapGclbTargetIpConfigArrayOutput {
	return i.ToCertificateMapGclbTargetIpConfigArrayOutputWithContext(context.Background())
}

func (i CertificateMapGclbTargetIpConfigArray) ToCertificateMapGclbTargetIpConfigArrayOutputWithContext(ctx context.Context) CertificateMapGclbTargetIpConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapGclbTargetIpConfigArrayOutput)
}

type CertificateMapGclbTargetIpConfigOutput struct{ *pulumi.OutputState }

func (CertificateMapGclbTargetIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateMapGclbTargetIpConfig)(nil)).Elem()
}

func (o CertificateMapGclbTargetIpConfigOutput) ToCertificateMapGclbTargetIpConfigOutput() CertificateMapGclbTargetIpConfigOutput {
	return o
}

func (o CertificateMapGclbTargetIpConfigOutput) ToCertificateMapGclbTargetIpConfigOutputWithContext(ctx context.Context) CertificateMapGclbTargetIpConfigOutput {
	return o
}

// An external IP address
func (o CertificateMapGclbTargetIpConfigOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateMapGclbTargetIpConfig) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// A list of ports
func (o CertificateMapGclbTargetIpConfigOutput) Ports() pulumi.IntArrayOutput {
	return o.ApplyT(func(v CertificateMapGclbTargetIpConfig) []int { return v.Ports }).(pulumi.IntArrayOutput)
}

type CertificateMapGclbTargetIpConfigArrayOutput struct{ *pulumi.OutputState }

func (CertificateMapGclbTargetIpConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateMapGclbTargetIpConfig)(nil)).Elem()
}

func (o CertificateMapGclbTargetIpConfigArrayOutput) ToCertificateMapGclbTargetIpConfigArrayOutput() CertificateMapGclbTargetIpConfigArrayOutput {
	return o
}

func (o CertificateMapGclbTargetIpConfigArrayOutput) ToCertificateMapGclbTargetIpConfigArrayOutputWithContext(ctx context.Context) CertificateMapGclbTargetIpConfigArrayOutput {
	return o
}

func (o CertificateMapGclbTargetIpConfigArrayOutput) Index(i pulumi.IntInput) CertificateMapGclbTargetIpConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateMapGclbTargetIpConfig {
		return vs[0].([]CertificateMapGclbTargetIpConfig)[vs[1].(int)]
	}).(CertificateMapGclbTargetIpConfigOutput)
}

type CertificateSelfManaged struct {
	// (Optional, Deprecated)
	// The certificate chain in PEM-encoded form.
	// Leaf certificate comes first, followed by intermediate ones if any.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	//
	// > **Warning:** `certificatePem` is deprecated and will be removed in a future major release. Use `pemCertificate` instead.
	//
	// Deprecated: `certificatePem` is deprecated and will be removed in a future major release. Use `pemCertificate` instead.
	CertificatePem *string `pulumi:"certificatePem"`
	// The certificate chain in PEM-encoded form.
	// Leaf certificate comes first, followed by intermediate ones if any.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PemCertificate *string `pulumi:"pemCertificate"`
	// The private key of the leaf certificate in PEM-encoded form.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PemPrivateKey *string `pulumi:"pemPrivateKey"`
	// (Optional, Deprecated)
	// The private key of the leaf certificate in PEM-encoded form.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	//
	// > **Warning:** `privateKeyPem` is deprecated and will be removed in a future major release. Use `pemPrivateKey` instead.
	//
	// Deprecated: `privateKeyPem` is deprecated and will be removed in a future major release. Use `pemPrivateKey` instead.
	PrivateKeyPem *string `pulumi:"privateKeyPem"`
}

// CertificateSelfManagedInput is an input type that accepts CertificateSelfManagedArgs and CertificateSelfManagedOutput values.
// You can construct a concrete instance of `CertificateSelfManagedInput` via:
//
//	CertificateSelfManagedArgs{...}
type CertificateSelfManagedInput interface {
	pulumi.Input

	ToCertificateSelfManagedOutput() CertificateSelfManagedOutput
	ToCertificateSelfManagedOutputWithContext(context.Context) CertificateSelfManagedOutput
}

type CertificateSelfManagedArgs struct {
	// (Optional, Deprecated)
	// The certificate chain in PEM-encoded form.
	// Leaf certificate comes first, followed by intermediate ones if any.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	//
	// > **Warning:** `certificatePem` is deprecated and will be removed in a future major release. Use `pemCertificate` instead.
	//
	// Deprecated: `certificatePem` is deprecated and will be removed in a future major release. Use `pemCertificate` instead.
	CertificatePem pulumi.StringPtrInput `pulumi:"certificatePem"`
	// The certificate chain in PEM-encoded form.
	// Leaf certificate comes first, followed by intermediate ones if any.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PemCertificate pulumi.StringPtrInput `pulumi:"pemCertificate"`
	// The private key of the leaf certificate in PEM-encoded form.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PemPrivateKey pulumi.StringPtrInput `pulumi:"pemPrivateKey"`
	// (Optional, Deprecated)
	// The private key of the leaf certificate in PEM-encoded form.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	//
	// > **Warning:** `privateKeyPem` is deprecated and will be removed in a future major release. Use `pemPrivateKey` instead.
	//
	// Deprecated: `privateKeyPem` is deprecated and will be removed in a future major release. Use `pemPrivateKey` instead.
	PrivateKeyPem pulumi.StringPtrInput `pulumi:"privateKeyPem"`
}

func (CertificateSelfManagedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSelfManaged)(nil)).Elem()
}

func (i CertificateSelfManagedArgs) ToCertificateSelfManagedOutput() CertificateSelfManagedOutput {
	return i.ToCertificateSelfManagedOutputWithContext(context.Background())
}

func (i CertificateSelfManagedArgs) ToCertificateSelfManagedOutputWithContext(ctx context.Context) CertificateSelfManagedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSelfManagedOutput)
}

func (i CertificateSelfManagedArgs) ToCertificateSelfManagedPtrOutput() CertificateSelfManagedPtrOutput {
	return i.ToCertificateSelfManagedPtrOutputWithContext(context.Background())
}

func (i CertificateSelfManagedArgs) ToCertificateSelfManagedPtrOutputWithContext(ctx context.Context) CertificateSelfManagedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSelfManagedOutput).ToCertificateSelfManagedPtrOutputWithContext(ctx)
}

// CertificateSelfManagedPtrInput is an input type that accepts CertificateSelfManagedArgs, CertificateSelfManagedPtr and CertificateSelfManagedPtrOutput values.
// You can construct a concrete instance of `CertificateSelfManagedPtrInput` via:
//
//	        CertificateSelfManagedArgs{...}
//
//	or:
//
//	        nil
type CertificateSelfManagedPtrInput interface {
	pulumi.Input

	ToCertificateSelfManagedPtrOutput() CertificateSelfManagedPtrOutput
	ToCertificateSelfManagedPtrOutputWithContext(context.Context) CertificateSelfManagedPtrOutput
}

type certificateSelfManagedPtrType CertificateSelfManagedArgs

func CertificateSelfManagedPtr(v *CertificateSelfManagedArgs) CertificateSelfManagedPtrInput {
	return (*certificateSelfManagedPtrType)(v)
}

func (*certificateSelfManagedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSelfManaged)(nil)).Elem()
}

func (i *certificateSelfManagedPtrType) ToCertificateSelfManagedPtrOutput() CertificateSelfManagedPtrOutput {
	return i.ToCertificateSelfManagedPtrOutputWithContext(context.Background())
}

func (i *certificateSelfManagedPtrType) ToCertificateSelfManagedPtrOutputWithContext(ctx context.Context) CertificateSelfManagedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateSelfManagedPtrOutput)
}

type CertificateSelfManagedOutput struct{ *pulumi.OutputState }

func (CertificateSelfManagedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSelfManaged)(nil)).Elem()
}

func (o CertificateSelfManagedOutput) ToCertificateSelfManagedOutput() CertificateSelfManagedOutput {
	return o
}

func (o CertificateSelfManagedOutput) ToCertificateSelfManagedOutputWithContext(ctx context.Context) CertificateSelfManagedOutput {
	return o
}

func (o CertificateSelfManagedOutput) ToCertificateSelfManagedPtrOutput() CertificateSelfManagedPtrOutput {
	return o.ToCertificateSelfManagedPtrOutputWithContext(context.Background())
}

func (o CertificateSelfManagedOutput) ToCertificateSelfManagedPtrOutputWithContext(ctx context.Context) CertificateSelfManagedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateSelfManaged) *CertificateSelfManaged {
		return &v
	}).(CertificateSelfManagedPtrOutput)
}

// (Optional, Deprecated)
// The certificate chain in PEM-encoded form.
// Leaf certificate comes first, followed by intermediate ones if any.
// **Note**: This property is sensitive and will not be displayed in the plan.
//
// > **Warning:** `certificatePem` is deprecated and will be removed in a future major release. Use `pemCertificate` instead.
//
// Deprecated: `certificatePem` is deprecated and will be removed in a future major release. Use `pemCertificate` instead.
func (o CertificateSelfManagedOutput) CertificatePem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSelfManaged) *string { return v.CertificatePem }).(pulumi.StringPtrOutput)
}

// The certificate chain in PEM-encoded form.
// Leaf certificate comes first, followed by intermediate ones if any.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o CertificateSelfManagedOutput) PemCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSelfManaged) *string { return v.PemCertificate }).(pulumi.StringPtrOutput)
}

// The private key of the leaf certificate in PEM-encoded form.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o CertificateSelfManagedOutput) PemPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSelfManaged) *string { return v.PemPrivateKey }).(pulumi.StringPtrOutput)
}

// (Optional, Deprecated)
// The private key of the leaf certificate in PEM-encoded form.
// **Note**: This property is sensitive and will not be displayed in the plan.
//
// > **Warning:** `privateKeyPem` is deprecated and will be removed in a future major release. Use `pemPrivateKey` instead.
//
// Deprecated: `privateKeyPem` is deprecated and will be removed in a future major release. Use `pemPrivateKey` instead.
func (o CertificateSelfManagedOutput) PrivateKeyPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateSelfManaged) *string { return v.PrivateKeyPem }).(pulumi.StringPtrOutput)
}

type CertificateSelfManagedPtrOutput struct{ *pulumi.OutputState }

func (CertificateSelfManagedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSelfManaged)(nil)).Elem()
}

func (o CertificateSelfManagedPtrOutput) ToCertificateSelfManagedPtrOutput() CertificateSelfManagedPtrOutput {
	return o
}

func (o CertificateSelfManagedPtrOutput) ToCertificateSelfManagedPtrOutputWithContext(ctx context.Context) CertificateSelfManagedPtrOutput {
	return o
}

func (o CertificateSelfManagedPtrOutput) Elem() CertificateSelfManagedOutput {
	return o.ApplyT(func(v *CertificateSelfManaged) CertificateSelfManaged {
		if v != nil {
			return *v
		}
		var ret CertificateSelfManaged
		return ret
	}).(CertificateSelfManagedOutput)
}

// (Optional, Deprecated)
// The certificate chain in PEM-encoded form.
// Leaf certificate comes first, followed by intermediate ones if any.
// **Note**: This property is sensitive and will not be displayed in the plan.
//
// > **Warning:** `certificatePem` is deprecated and will be removed in a future major release. Use `pemCertificate` instead.
//
// Deprecated: `certificatePem` is deprecated and will be removed in a future major release. Use `pemCertificate` instead.
func (o CertificateSelfManagedPtrOutput) CertificatePem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateSelfManaged) *string {
		if v == nil {
			return nil
		}
		return v.CertificatePem
	}).(pulumi.StringPtrOutput)
}

// The certificate chain in PEM-encoded form.
// Leaf certificate comes first, followed by intermediate ones if any.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o CertificateSelfManagedPtrOutput) PemCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateSelfManaged) *string {
		if v == nil {
			return nil
		}
		return v.PemCertificate
	}).(pulumi.StringPtrOutput)
}

// The private key of the leaf certificate in PEM-encoded form.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o CertificateSelfManagedPtrOutput) PemPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateSelfManaged) *string {
		if v == nil {
			return nil
		}
		return v.PemPrivateKey
	}).(pulumi.StringPtrOutput)
}

// (Optional, Deprecated)
// The private key of the leaf certificate in PEM-encoded form.
// **Note**: This property is sensitive and will not be displayed in the plan.
//
// > **Warning:** `privateKeyPem` is deprecated and will be removed in a future major release. Use `pemPrivateKey` instead.
//
// Deprecated: `privateKeyPem` is deprecated and will be removed in a future major release. Use `pemPrivateKey` instead.
func (o CertificateSelfManagedPtrOutput) PrivateKeyPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateSelfManaged) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKeyPem
	}).(pulumi.StringPtrOutput)
}

type DnsAuthorizationDnsResourceRecord struct {
	// (Output)
	// Data of the DNS Resource Record.
	Data *string `pulumi:"data"`
	// Name of the resource; provided by the client when the resource is created.
	// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
	// and all following characters must be a dash, underscore, letter or digit.
	Name *string `pulumi:"name"`
	// type of DNS authorization. If unset during the resource creation, FIXED_RECORD will
	// be used for global resources, and PER_PROJECT_RECORD will be used for other locations.
	// FIXED_RECORD DNS authorization uses DNS-01 validation method
	// PER_PROJECT_RECORD DNS authorization allows for independent management
	// of Google-managed certificates with DNS authorization across multiple
	// projects.
	// Possible values are: `FIXED_RECORD`, `PER_PROJECT_RECORD`.
	Type *string `pulumi:"type"`
}

// DnsAuthorizationDnsResourceRecordInput is an input type that accepts DnsAuthorizationDnsResourceRecordArgs and DnsAuthorizationDnsResourceRecordOutput values.
// You can construct a concrete instance of `DnsAuthorizationDnsResourceRecordInput` via:
//
//	DnsAuthorizationDnsResourceRecordArgs{...}
type DnsAuthorizationDnsResourceRecordInput interface {
	pulumi.Input

	ToDnsAuthorizationDnsResourceRecordOutput() DnsAuthorizationDnsResourceRecordOutput
	ToDnsAuthorizationDnsResourceRecordOutputWithContext(context.Context) DnsAuthorizationDnsResourceRecordOutput
}

type DnsAuthorizationDnsResourceRecordArgs struct {
	// (Output)
	// Data of the DNS Resource Record.
	Data pulumi.StringPtrInput `pulumi:"data"`
	// Name of the resource; provided by the client when the resource is created.
	// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
	// and all following characters must be a dash, underscore, letter or digit.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// type of DNS authorization. If unset during the resource creation, FIXED_RECORD will
	// be used for global resources, and PER_PROJECT_RECORD will be used for other locations.
	// FIXED_RECORD DNS authorization uses DNS-01 validation method
	// PER_PROJECT_RECORD DNS authorization allows for independent management
	// of Google-managed certificates with DNS authorization across multiple
	// projects.
	// Possible values are: `FIXED_RECORD`, `PER_PROJECT_RECORD`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DnsAuthorizationDnsResourceRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsAuthorizationDnsResourceRecord)(nil)).Elem()
}

func (i DnsAuthorizationDnsResourceRecordArgs) ToDnsAuthorizationDnsResourceRecordOutput() DnsAuthorizationDnsResourceRecordOutput {
	return i.ToDnsAuthorizationDnsResourceRecordOutputWithContext(context.Background())
}

func (i DnsAuthorizationDnsResourceRecordArgs) ToDnsAuthorizationDnsResourceRecordOutputWithContext(ctx context.Context) DnsAuthorizationDnsResourceRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsAuthorizationDnsResourceRecordOutput)
}

// DnsAuthorizationDnsResourceRecordArrayInput is an input type that accepts DnsAuthorizationDnsResourceRecordArray and DnsAuthorizationDnsResourceRecordArrayOutput values.
// You can construct a concrete instance of `DnsAuthorizationDnsResourceRecordArrayInput` via:
//
//	DnsAuthorizationDnsResourceRecordArray{ DnsAuthorizationDnsResourceRecordArgs{...} }
type DnsAuthorizationDnsResourceRecordArrayInput interface {
	pulumi.Input

	ToDnsAuthorizationDnsResourceRecordArrayOutput() DnsAuthorizationDnsResourceRecordArrayOutput
	ToDnsAuthorizationDnsResourceRecordArrayOutputWithContext(context.Context) DnsAuthorizationDnsResourceRecordArrayOutput
}

type DnsAuthorizationDnsResourceRecordArray []DnsAuthorizationDnsResourceRecordInput

func (DnsAuthorizationDnsResourceRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsAuthorizationDnsResourceRecord)(nil)).Elem()
}

func (i DnsAuthorizationDnsResourceRecordArray) ToDnsAuthorizationDnsResourceRecordArrayOutput() DnsAuthorizationDnsResourceRecordArrayOutput {
	return i.ToDnsAuthorizationDnsResourceRecordArrayOutputWithContext(context.Background())
}

func (i DnsAuthorizationDnsResourceRecordArray) ToDnsAuthorizationDnsResourceRecordArrayOutputWithContext(ctx context.Context) DnsAuthorizationDnsResourceRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsAuthorizationDnsResourceRecordArrayOutput)
}

type DnsAuthorizationDnsResourceRecordOutput struct{ *pulumi.OutputState }

func (DnsAuthorizationDnsResourceRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsAuthorizationDnsResourceRecord)(nil)).Elem()
}

func (o DnsAuthorizationDnsResourceRecordOutput) ToDnsAuthorizationDnsResourceRecordOutput() DnsAuthorizationDnsResourceRecordOutput {
	return o
}

func (o DnsAuthorizationDnsResourceRecordOutput) ToDnsAuthorizationDnsResourceRecordOutputWithContext(ctx context.Context) DnsAuthorizationDnsResourceRecordOutput {
	return o
}

// (Output)
// Data of the DNS Resource Record.
func (o DnsAuthorizationDnsResourceRecordOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsAuthorizationDnsResourceRecord) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// Name of the resource; provided by the client when the resource is created.
// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
// and all following characters must be a dash, underscore, letter or digit.
func (o DnsAuthorizationDnsResourceRecordOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsAuthorizationDnsResourceRecord) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// type of DNS authorization. If unset during the resource creation, FIXED_RECORD will
// be used for global resources, and PER_PROJECT_RECORD will be used for other locations.
// FIXED_RECORD DNS authorization uses DNS-01 validation method
// PER_PROJECT_RECORD DNS authorization allows for independent management
// of Google-managed certificates with DNS authorization across multiple
// projects.
// Possible values are: `FIXED_RECORD`, `PER_PROJECT_RECORD`.
func (o DnsAuthorizationDnsResourceRecordOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsAuthorizationDnsResourceRecord) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DnsAuthorizationDnsResourceRecordArrayOutput struct{ *pulumi.OutputState }

func (DnsAuthorizationDnsResourceRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsAuthorizationDnsResourceRecord)(nil)).Elem()
}

func (o DnsAuthorizationDnsResourceRecordArrayOutput) ToDnsAuthorizationDnsResourceRecordArrayOutput() DnsAuthorizationDnsResourceRecordArrayOutput {
	return o
}

func (o DnsAuthorizationDnsResourceRecordArrayOutput) ToDnsAuthorizationDnsResourceRecordArrayOutputWithContext(ctx context.Context) DnsAuthorizationDnsResourceRecordArrayOutput {
	return o
}

func (o DnsAuthorizationDnsResourceRecordArrayOutput) Index(i pulumi.IntInput) DnsAuthorizationDnsResourceRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsAuthorizationDnsResourceRecord {
		return vs[0].([]DnsAuthorizationDnsResourceRecord)[vs[1].(int)]
	}).(DnsAuthorizationDnsResourceRecordOutput)
}

type TrustConfigAllowlistedCertificate struct {
	// PEM certificate that is allowlisted. The certificate can be up to 5k bytes, and must be a parseable X.509 certificate.
	PemCertificate string `pulumi:"pemCertificate"`
}

// TrustConfigAllowlistedCertificateInput is an input type that accepts TrustConfigAllowlistedCertificateArgs and TrustConfigAllowlistedCertificateOutput values.
// You can construct a concrete instance of `TrustConfigAllowlistedCertificateInput` via:
//
//	TrustConfigAllowlistedCertificateArgs{...}
type TrustConfigAllowlistedCertificateInput interface {
	pulumi.Input

	ToTrustConfigAllowlistedCertificateOutput() TrustConfigAllowlistedCertificateOutput
	ToTrustConfigAllowlistedCertificateOutputWithContext(context.Context) TrustConfigAllowlistedCertificateOutput
}

type TrustConfigAllowlistedCertificateArgs struct {
	// PEM certificate that is allowlisted. The certificate can be up to 5k bytes, and must be a parseable X.509 certificate.
	PemCertificate pulumi.StringInput `pulumi:"pemCertificate"`
}

func (TrustConfigAllowlistedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustConfigAllowlistedCertificate)(nil)).Elem()
}

func (i TrustConfigAllowlistedCertificateArgs) ToTrustConfigAllowlistedCertificateOutput() TrustConfigAllowlistedCertificateOutput {
	return i.ToTrustConfigAllowlistedCertificateOutputWithContext(context.Background())
}

func (i TrustConfigAllowlistedCertificateArgs) ToTrustConfigAllowlistedCertificateOutputWithContext(ctx context.Context) TrustConfigAllowlistedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustConfigAllowlistedCertificateOutput)
}

// TrustConfigAllowlistedCertificateArrayInput is an input type that accepts TrustConfigAllowlistedCertificateArray and TrustConfigAllowlistedCertificateArrayOutput values.
// You can construct a concrete instance of `TrustConfigAllowlistedCertificateArrayInput` via:
//
//	TrustConfigAllowlistedCertificateArray{ TrustConfigAllowlistedCertificateArgs{...} }
type TrustConfigAllowlistedCertificateArrayInput interface {
	pulumi.Input

	ToTrustConfigAllowlistedCertificateArrayOutput() TrustConfigAllowlistedCertificateArrayOutput
	ToTrustConfigAllowlistedCertificateArrayOutputWithContext(context.Context) TrustConfigAllowlistedCertificateArrayOutput
}

type TrustConfigAllowlistedCertificateArray []TrustConfigAllowlistedCertificateInput

func (TrustConfigAllowlistedCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrustConfigAllowlistedCertificate)(nil)).Elem()
}

func (i TrustConfigAllowlistedCertificateArray) ToTrustConfigAllowlistedCertificateArrayOutput() TrustConfigAllowlistedCertificateArrayOutput {
	return i.ToTrustConfigAllowlistedCertificateArrayOutputWithContext(context.Background())
}

func (i TrustConfigAllowlistedCertificateArray) ToTrustConfigAllowlistedCertificateArrayOutputWithContext(ctx context.Context) TrustConfigAllowlistedCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustConfigAllowlistedCertificateArrayOutput)
}

type TrustConfigAllowlistedCertificateOutput struct{ *pulumi.OutputState }

func (TrustConfigAllowlistedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustConfigAllowlistedCertificate)(nil)).Elem()
}

func (o TrustConfigAllowlistedCertificateOutput) ToTrustConfigAllowlistedCertificateOutput() TrustConfigAllowlistedCertificateOutput {
	return o
}

func (o TrustConfigAllowlistedCertificateOutput) ToTrustConfigAllowlistedCertificateOutputWithContext(ctx context.Context) TrustConfigAllowlistedCertificateOutput {
	return o
}

// PEM certificate that is allowlisted. The certificate can be up to 5k bytes, and must be a parseable X.509 certificate.
func (o TrustConfigAllowlistedCertificateOutput) PemCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v TrustConfigAllowlistedCertificate) string { return v.PemCertificate }).(pulumi.StringOutput)
}

type TrustConfigAllowlistedCertificateArrayOutput struct{ *pulumi.OutputState }

func (TrustConfigAllowlistedCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrustConfigAllowlistedCertificate)(nil)).Elem()
}

func (o TrustConfigAllowlistedCertificateArrayOutput) ToTrustConfigAllowlistedCertificateArrayOutput() TrustConfigAllowlistedCertificateArrayOutput {
	return o
}

func (o TrustConfigAllowlistedCertificateArrayOutput) ToTrustConfigAllowlistedCertificateArrayOutputWithContext(ctx context.Context) TrustConfigAllowlistedCertificateArrayOutput {
	return o
}

func (o TrustConfigAllowlistedCertificateArrayOutput) Index(i pulumi.IntInput) TrustConfigAllowlistedCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrustConfigAllowlistedCertificate {
		return vs[0].([]TrustConfigAllowlistedCertificate)[vs[1].(int)]
	}).(TrustConfigAllowlistedCertificateOutput)
}

type TrustConfigTrustStore struct {
	// Set of intermediate CA certificates used for the path building phase of chain validation.
	// The field is currently not supported if trust config is used for the workload certificate feature.
	// Structure is documented below.
	IntermediateCas []TrustConfigTrustStoreIntermediateCa `pulumi:"intermediateCas"`
	// List of Trust Anchors to be used while performing validation against a given TrustStore.
	// Structure is documented below.
	TrustAnchors []TrustConfigTrustStoreTrustAnchor `pulumi:"trustAnchors"`
}

// TrustConfigTrustStoreInput is an input type that accepts TrustConfigTrustStoreArgs and TrustConfigTrustStoreOutput values.
// You can construct a concrete instance of `TrustConfigTrustStoreInput` via:
//
//	TrustConfigTrustStoreArgs{...}
type TrustConfigTrustStoreInput interface {
	pulumi.Input

	ToTrustConfigTrustStoreOutput() TrustConfigTrustStoreOutput
	ToTrustConfigTrustStoreOutputWithContext(context.Context) TrustConfigTrustStoreOutput
}

type TrustConfigTrustStoreArgs struct {
	// Set of intermediate CA certificates used for the path building phase of chain validation.
	// The field is currently not supported if trust config is used for the workload certificate feature.
	// Structure is documented below.
	IntermediateCas TrustConfigTrustStoreIntermediateCaArrayInput `pulumi:"intermediateCas"`
	// List of Trust Anchors to be used while performing validation against a given TrustStore.
	// Structure is documented below.
	TrustAnchors TrustConfigTrustStoreTrustAnchorArrayInput `pulumi:"trustAnchors"`
}

func (TrustConfigTrustStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustConfigTrustStore)(nil)).Elem()
}

func (i TrustConfigTrustStoreArgs) ToTrustConfigTrustStoreOutput() TrustConfigTrustStoreOutput {
	return i.ToTrustConfigTrustStoreOutputWithContext(context.Background())
}

func (i TrustConfigTrustStoreArgs) ToTrustConfigTrustStoreOutputWithContext(ctx context.Context) TrustConfigTrustStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustConfigTrustStoreOutput)
}

// TrustConfigTrustStoreArrayInput is an input type that accepts TrustConfigTrustStoreArray and TrustConfigTrustStoreArrayOutput values.
// You can construct a concrete instance of `TrustConfigTrustStoreArrayInput` via:
//
//	TrustConfigTrustStoreArray{ TrustConfigTrustStoreArgs{...} }
type TrustConfigTrustStoreArrayInput interface {
	pulumi.Input

	ToTrustConfigTrustStoreArrayOutput() TrustConfigTrustStoreArrayOutput
	ToTrustConfigTrustStoreArrayOutputWithContext(context.Context) TrustConfigTrustStoreArrayOutput
}

type TrustConfigTrustStoreArray []TrustConfigTrustStoreInput

func (TrustConfigTrustStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrustConfigTrustStore)(nil)).Elem()
}

func (i TrustConfigTrustStoreArray) ToTrustConfigTrustStoreArrayOutput() TrustConfigTrustStoreArrayOutput {
	return i.ToTrustConfigTrustStoreArrayOutputWithContext(context.Background())
}

func (i TrustConfigTrustStoreArray) ToTrustConfigTrustStoreArrayOutputWithContext(ctx context.Context) TrustConfigTrustStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustConfigTrustStoreArrayOutput)
}

type TrustConfigTrustStoreOutput struct{ *pulumi.OutputState }

func (TrustConfigTrustStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustConfigTrustStore)(nil)).Elem()
}

func (o TrustConfigTrustStoreOutput) ToTrustConfigTrustStoreOutput() TrustConfigTrustStoreOutput {
	return o
}

func (o TrustConfigTrustStoreOutput) ToTrustConfigTrustStoreOutputWithContext(ctx context.Context) TrustConfigTrustStoreOutput {
	return o
}

// Set of intermediate CA certificates used for the path building phase of chain validation.
// The field is currently not supported if trust config is used for the workload certificate feature.
// Structure is documented below.
func (o TrustConfigTrustStoreOutput) IntermediateCas() TrustConfigTrustStoreIntermediateCaArrayOutput {
	return o.ApplyT(func(v TrustConfigTrustStore) []TrustConfigTrustStoreIntermediateCa { return v.IntermediateCas }).(TrustConfigTrustStoreIntermediateCaArrayOutput)
}

// List of Trust Anchors to be used while performing validation against a given TrustStore.
// Structure is documented below.
func (o TrustConfigTrustStoreOutput) TrustAnchors() TrustConfigTrustStoreTrustAnchorArrayOutput {
	return o.ApplyT(func(v TrustConfigTrustStore) []TrustConfigTrustStoreTrustAnchor { return v.TrustAnchors }).(TrustConfigTrustStoreTrustAnchorArrayOutput)
}

type TrustConfigTrustStoreArrayOutput struct{ *pulumi.OutputState }

func (TrustConfigTrustStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrustConfigTrustStore)(nil)).Elem()
}

func (o TrustConfigTrustStoreArrayOutput) ToTrustConfigTrustStoreArrayOutput() TrustConfigTrustStoreArrayOutput {
	return o
}

func (o TrustConfigTrustStoreArrayOutput) ToTrustConfigTrustStoreArrayOutputWithContext(ctx context.Context) TrustConfigTrustStoreArrayOutput {
	return o
}

func (o TrustConfigTrustStoreArrayOutput) Index(i pulumi.IntInput) TrustConfigTrustStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrustConfigTrustStore {
		return vs[0].([]TrustConfigTrustStore)[vs[1].(int)]
	}).(TrustConfigTrustStoreOutput)
}

type TrustConfigTrustStoreIntermediateCa struct {
	// PEM intermediate certificate used for building up paths for validation.
	// Each certificate provided in PEM format may occupy up to 5kB.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PemCertificate *string `pulumi:"pemCertificate"`
}

// TrustConfigTrustStoreIntermediateCaInput is an input type that accepts TrustConfigTrustStoreIntermediateCaArgs and TrustConfigTrustStoreIntermediateCaOutput values.
// You can construct a concrete instance of `TrustConfigTrustStoreIntermediateCaInput` via:
//
//	TrustConfigTrustStoreIntermediateCaArgs{...}
type TrustConfigTrustStoreIntermediateCaInput interface {
	pulumi.Input

	ToTrustConfigTrustStoreIntermediateCaOutput() TrustConfigTrustStoreIntermediateCaOutput
	ToTrustConfigTrustStoreIntermediateCaOutputWithContext(context.Context) TrustConfigTrustStoreIntermediateCaOutput
}

type TrustConfigTrustStoreIntermediateCaArgs struct {
	// PEM intermediate certificate used for building up paths for validation.
	// Each certificate provided in PEM format may occupy up to 5kB.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PemCertificate pulumi.StringPtrInput `pulumi:"pemCertificate"`
}

func (TrustConfigTrustStoreIntermediateCaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustConfigTrustStoreIntermediateCa)(nil)).Elem()
}

func (i TrustConfigTrustStoreIntermediateCaArgs) ToTrustConfigTrustStoreIntermediateCaOutput() TrustConfigTrustStoreIntermediateCaOutput {
	return i.ToTrustConfigTrustStoreIntermediateCaOutputWithContext(context.Background())
}

func (i TrustConfigTrustStoreIntermediateCaArgs) ToTrustConfigTrustStoreIntermediateCaOutputWithContext(ctx context.Context) TrustConfigTrustStoreIntermediateCaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustConfigTrustStoreIntermediateCaOutput)
}

// TrustConfigTrustStoreIntermediateCaArrayInput is an input type that accepts TrustConfigTrustStoreIntermediateCaArray and TrustConfigTrustStoreIntermediateCaArrayOutput values.
// You can construct a concrete instance of `TrustConfigTrustStoreIntermediateCaArrayInput` via:
//
//	TrustConfigTrustStoreIntermediateCaArray{ TrustConfigTrustStoreIntermediateCaArgs{...} }
type TrustConfigTrustStoreIntermediateCaArrayInput interface {
	pulumi.Input

	ToTrustConfigTrustStoreIntermediateCaArrayOutput() TrustConfigTrustStoreIntermediateCaArrayOutput
	ToTrustConfigTrustStoreIntermediateCaArrayOutputWithContext(context.Context) TrustConfigTrustStoreIntermediateCaArrayOutput
}

type TrustConfigTrustStoreIntermediateCaArray []TrustConfigTrustStoreIntermediateCaInput

func (TrustConfigTrustStoreIntermediateCaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrustConfigTrustStoreIntermediateCa)(nil)).Elem()
}

func (i TrustConfigTrustStoreIntermediateCaArray) ToTrustConfigTrustStoreIntermediateCaArrayOutput() TrustConfigTrustStoreIntermediateCaArrayOutput {
	return i.ToTrustConfigTrustStoreIntermediateCaArrayOutputWithContext(context.Background())
}

func (i TrustConfigTrustStoreIntermediateCaArray) ToTrustConfigTrustStoreIntermediateCaArrayOutputWithContext(ctx context.Context) TrustConfigTrustStoreIntermediateCaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustConfigTrustStoreIntermediateCaArrayOutput)
}

type TrustConfigTrustStoreIntermediateCaOutput struct{ *pulumi.OutputState }

func (TrustConfigTrustStoreIntermediateCaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustConfigTrustStoreIntermediateCa)(nil)).Elem()
}

func (o TrustConfigTrustStoreIntermediateCaOutput) ToTrustConfigTrustStoreIntermediateCaOutput() TrustConfigTrustStoreIntermediateCaOutput {
	return o
}

func (o TrustConfigTrustStoreIntermediateCaOutput) ToTrustConfigTrustStoreIntermediateCaOutputWithContext(ctx context.Context) TrustConfigTrustStoreIntermediateCaOutput {
	return o
}

// PEM intermediate certificate used for building up paths for validation.
// Each certificate provided in PEM format may occupy up to 5kB.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o TrustConfigTrustStoreIntermediateCaOutput) PemCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrustConfigTrustStoreIntermediateCa) *string { return v.PemCertificate }).(pulumi.StringPtrOutput)
}

type TrustConfigTrustStoreIntermediateCaArrayOutput struct{ *pulumi.OutputState }

func (TrustConfigTrustStoreIntermediateCaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrustConfigTrustStoreIntermediateCa)(nil)).Elem()
}

func (o TrustConfigTrustStoreIntermediateCaArrayOutput) ToTrustConfigTrustStoreIntermediateCaArrayOutput() TrustConfigTrustStoreIntermediateCaArrayOutput {
	return o
}

func (o TrustConfigTrustStoreIntermediateCaArrayOutput) ToTrustConfigTrustStoreIntermediateCaArrayOutputWithContext(ctx context.Context) TrustConfigTrustStoreIntermediateCaArrayOutput {
	return o
}

func (o TrustConfigTrustStoreIntermediateCaArrayOutput) Index(i pulumi.IntInput) TrustConfigTrustStoreIntermediateCaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrustConfigTrustStoreIntermediateCa {
		return vs[0].([]TrustConfigTrustStoreIntermediateCa)[vs[1].(int)]
	}).(TrustConfigTrustStoreIntermediateCaOutput)
}

type TrustConfigTrustStoreTrustAnchor struct {
	// PEM root certificate of the PKI used for validation.
	// Each certificate provided in PEM format may occupy up to 5kB.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PemCertificate *string `pulumi:"pemCertificate"`
}

// TrustConfigTrustStoreTrustAnchorInput is an input type that accepts TrustConfigTrustStoreTrustAnchorArgs and TrustConfigTrustStoreTrustAnchorOutput values.
// You can construct a concrete instance of `TrustConfigTrustStoreTrustAnchorInput` via:
//
//	TrustConfigTrustStoreTrustAnchorArgs{...}
type TrustConfigTrustStoreTrustAnchorInput interface {
	pulumi.Input

	ToTrustConfigTrustStoreTrustAnchorOutput() TrustConfigTrustStoreTrustAnchorOutput
	ToTrustConfigTrustStoreTrustAnchorOutputWithContext(context.Context) TrustConfigTrustStoreTrustAnchorOutput
}

type TrustConfigTrustStoreTrustAnchorArgs struct {
	// PEM root certificate of the PKI used for validation.
	// Each certificate provided in PEM format may occupy up to 5kB.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PemCertificate pulumi.StringPtrInput `pulumi:"pemCertificate"`
}

func (TrustConfigTrustStoreTrustAnchorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustConfigTrustStoreTrustAnchor)(nil)).Elem()
}

func (i TrustConfigTrustStoreTrustAnchorArgs) ToTrustConfigTrustStoreTrustAnchorOutput() TrustConfigTrustStoreTrustAnchorOutput {
	return i.ToTrustConfigTrustStoreTrustAnchorOutputWithContext(context.Background())
}

func (i TrustConfigTrustStoreTrustAnchorArgs) ToTrustConfigTrustStoreTrustAnchorOutputWithContext(ctx context.Context) TrustConfigTrustStoreTrustAnchorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustConfigTrustStoreTrustAnchorOutput)
}

// TrustConfigTrustStoreTrustAnchorArrayInput is an input type that accepts TrustConfigTrustStoreTrustAnchorArray and TrustConfigTrustStoreTrustAnchorArrayOutput values.
// You can construct a concrete instance of `TrustConfigTrustStoreTrustAnchorArrayInput` via:
//
//	TrustConfigTrustStoreTrustAnchorArray{ TrustConfigTrustStoreTrustAnchorArgs{...} }
type TrustConfigTrustStoreTrustAnchorArrayInput interface {
	pulumi.Input

	ToTrustConfigTrustStoreTrustAnchorArrayOutput() TrustConfigTrustStoreTrustAnchorArrayOutput
	ToTrustConfigTrustStoreTrustAnchorArrayOutputWithContext(context.Context) TrustConfigTrustStoreTrustAnchorArrayOutput
}

type TrustConfigTrustStoreTrustAnchorArray []TrustConfigTrustStoreTrustAnchorInput

func (TrustConfigTrustStoreTrustAnchorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrustConfigTrustStoreTrustAnchor)(nil)).Elem()
}

func (i TrustConfigTrustStoreTrustAnchorArray) ToTrustConfigTrustStoreTrustAnchorArrayOutput() TrustConfigTrustStoreTrustAnchorArrayOutput {
	return i.ToTrustConfigTrustStoreTrustAnchorArrayOutputWithContext(context.Background())
}

func (i TrustConfigTrustStoreTrustAnchorArray) ToTrustConfigTrustStoreTrustAnchorArrayOutputWithContext(ctx context.Context) TrustConfigTrustStoreTrustAnchorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustConfigTrustStoreTrustAnchorArrayOutput)
}

type TrustConfigTrustStoreTrustAnchorOutput struct{ *pulumi.OutputState }

func (TrustConfigTrustStoreTrustAnchorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustConfigTrustStoreTrustAnchor)(nil)).Elem()
}

func (o TrustConfigTrustStoreTrustAnchorOutput) ToTrustConfigTrustStoreTrustAnchorOutput() TrustConfigTrustStoreTrustAnchorOutput {
	return o
}

func (o TrustConfigTrustStoreTrustAnchorOutput) ToTrustConfigTrustStoreTrustAnchorOutputWithContext(ctx context.Context) TrustConfigTrustStoreTrustAnchorOutput {
	return o
}

// PEM root certificate of the PKI used for validation.
// Each certificate provided in PEM format may occupy up to 5kB.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o TrustConfigTrustStoreTrustAnchorOutput) PemCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrustConfigTrustStoreTrustAnchor) *string { return v.PemCertificate }).(pulumi.StringPtrOutput)
}

type TrustConfigTrustStoreTrustAnchorArrayOutput struct{ *pulumi.OutputState }

func (TrustConfigTrustStoreTrustAnchorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrustConfigTrustStoreTrustAnchor)(nil)).Elem()
}

func (o TrustConfigTrustStoreTrustAnchorArrayOutput) ToTrustConfigTrustStoreTrustAnchorArrayOutput() TrustConfigTrustStoreTrustAnchorArrayOutput {
	return o
}

func (o TrustConfigTrustStoreTrustAnchorArrayOutput) ToTrustConfigTrustStoreTrustAnchorArrayOutputWithContext(ctx context.Context) TrustConfigTrustStoreTrustAnchorArrayOutput {
	return o
}

func (o TrustConfigTrustStoreTrustAnchorArrayOutput) Index(i pulumi.IntInput) TrustConfigTrustStoreTrustAnchorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrustConfigTrustStoreTrustAnchor {
		return vs[0].([]TrustConfigTrustStoreTrustAnchor)[vs[1].(int)]
	}).(TrustConfigTrustStoreTrustAnchorOutput)
}

type GetCertificateMapGclbTarget struct {
	// An IP configuration where this Certificate Map is serving
	IpConfigs []GetCertificateMapGclbTargetIpConfig `pulumi:"ipConfigs"`
	// Proxy name must be in the format projects/*/locations/*/targetHttpsProxies/*.
	// This field is part of a union field 'target_proxy': Only one of 'targetHttpsProxy' or
	// 'targetSslProxy' may be set.
	TargetHttpsProxy string `pulumi:"targetHttpsProxy"`
	// Proxy name must be in the format projects/*/locations/*/targetSslProxies/*.
	// This field is part of a union field 'target_proxy': Only one of 'targetHttpsProxy' or
	// 'targetSslProxy' may be set.
	TargetSslProxy string `pulumi:"targetSslProxy"`
}

// GetCertificateMapGclbTargetInput is an input type that accepts GetCertificateMapGclbTargetArgs and GetCertificateMapGclbTargetOutput values.
// You can construct a concrete instance of `GetCertificateMapGclbTargetInput` via:
//
//	GetCertificateMapGclbTargetArgs{...}
type GetCertificateMapGclbTargetInput interface {
	pulumi.Input

	ToGetCertificateMapGclbTargetOutput() GetCertificateMapGclbTargetOutput
	ToGetCertificateMapGclbTargetOutputWithContext(context.Context) GetCertificateMapGclbTargetOutput
}

type GetCertificateMapGclbTargetArgs struct {
	// An IP configuration where this Certificate Map is serving
	IpConfigs GetCertificateMapGclbTargetIpConfigArrayInput `pulumi:"ipConfigs"`
	// Proxy name must be in the format projects/*/locations/*/targetHttpsProxies/*.
	// This field is part of a union field 'target_proxy': Only one of 'targetHttpsProxy' or
	// 'targetSslProxy' may be set.
	TargetHttpsProxy pulumi.StringInput `pulumi:"targetHttpsProxy"`
	// Proxy name must be in the format projects/*/locations/*/targetSslProxies/*.
	// This field is part of a union field 'target_proxy': Only one of 'targetHttpsProxy' or
	// 'targetSslProxy' may be set.
	TargetSslProxy pulumi.StringInput `pulumi:"targetSslProxy"`
}

func (GetCertificateMapGclbTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateMapGclbTarget)(nil)).Elem()
}

func (i GetCertificateMapGclbTargetArgs) ToGetCertificateMapGclbTargetOutput() GetCertificateMapGclbTargetOutput {
	return i.ToGetCertificateMapGclbTargetOutputWithContext(context.Background())
}

func (i GetCertificateMapGclbTargetArgs) ToGetCertificateMapGclbTargetOutputWithContext(ctx context.Context) GetCertificateMapGclbTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateMapGclbTargetOutput)
}

// GetCertificateMapGclbTargetArrayInput is an input type that accepts GetCertificateMapGclbTargetArray and GetCertificateMapGclbTargetArrayOutput values.
// You can construct a concrete instance of `GetCertificateMapGclbTargetArrayInput` via:
//
//	GetCertificateMapGclbTargetArray{ GetCertificateMapGclbTargetArgs{...} }
type GetCertificateMapGclbTargetArrayInput interface {
	pulumi.Input

	ToGetCertificateMapGclbTargetArrayOutput() GetCertificateMapGclbTargetArrayOutput
	ToGetCertificateMapGclbTargetArrayOutputWithContext(context.Context) GetCertificateMapGclbTargetArrayOutput
}

type GetCertificateMapGclbTargetArray []GetCertificateMapGclbTargetInput

func (GetCertificateMapGclbTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateMapGclbTarget)(nil)).Elem()
}

func (i GetCertificateMapGclbTargetArray) ToGetCertificateMapGclbTargetArrayOutput() GetCertificateMapGclbTargetArrayOutput {
	return i.ToGetCertificateMapGclbTargetArrayOutputWithContext(context.Background())
}

func (i GetCertificateMapGclbTargetArray) ToGetCertificateMapGclbTargetArrayOutputWithContext(ctx context.Context) GetCertificateMapGclbTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateMapGclbTargetArrayOutput)
}

type GetCertificateMapGclbTargetOutput struct{ *pulumi.OutputState }

func (GetCertificateMapGclbTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateMapGclbTarget)(nil)).Elem()
}

func (o GetCertificateMapGclbTargetOutput) ToGetCertificateMapGclbTargetOutput() GetCertificateMapGclbTargetOutput {
	return o
}

func (o GetCertificateMapGclbTargetOutput) ToGetCertificateMapGclbTargetOutputWithContext(ctx context.Context) GetCertificateMapGclbTargetOutput {
	return o
}

// An IP configuration where this Certificate Map is serving
func (o GetCertificateMapGclbTargetOutput) IpConfigs() GetCertificateMapGclbTargetIpConfigArrayOutput {
	return o.ApplyT(func(v GetCertificateMapGclbTarget) []GetCertificateMapGclbTargetIpConfig { return v.IpConfigs }).(GetCertificateMapGclbTargetIpConfigArrayOutput)
}

// Proxy name must be in the format projects/*/locations/*/targetHttpsProxies/*.
// This field is part of a union field 'target_proxy': Only one of 'targetHttpsProxy' or
// 'targetSslProxy' may be set.
func (o GetCertificateMapGclbTargetOutput) TargetHttpsProxy() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateMapGclbTarget) string { return v.TargetHttpsProxy }).(pulumi.StringOutput)
}

// Proxy name must be in the format projects/*/locations/*/targetSslProxies/*.
// This field is part of a union field 'target_proxy': Only one of 'targetHttpsProxy' or
// 'targetSslProxy' may be set.
func (o GetCertificateMapGclbTargetOutput) TargetSslProxy() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateMapGclbTarget) string { return v.TargetSslProxy }).(pulumi.StringOutput)
}

type GetCertificateMapGclbTargetArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateMapGclbTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateMapGclbTarget)(nil)).Elem()
}

func (o GetCertificateMapGclbTargetArrayOutput) ToGetCertificateMapGclbTargetArrayOutput() GetCertificateMapGclbTargetArrayOutput {
	return o
}

func (o GetCertificateMapGclbTargetArrayOutput) ToGetCertificateMapGclbTargetArrayOutputWithContext(ctx context.Context) GetCertificateMapGclbTargetArrayOutput {
	return o
}

func (o GetCertificateMapGclbTargetArrayOutput) Index(i pulumi.IntInput) GetCertificateMapGclbTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateMapGclbTarget {
		return vs[0].([]GetCertificateMapGclbTarget)[vs[1].(int)]
	}).(GetCertificateMapGclbTargetOutput)
}

type GetCertificateMapGclbTargetIpConfig struct {
	// An external IP address
	IpAddress string `pulumi:"ipAddress"`
	// A list of ports
	Ports []int `pulumi:"ports"`
}

// GetCertificateMapGclbTargetIpConfigInput is an input type that accepts GetCertificateMapGclbTargetIpConfigArgs and GetCertificateMapGclbTargetIpConfigOutput values.
// You can construct a concrete instance of `GetCertificateMapGclbTargetIpConfigInput` via:
//
//	GetCertificateMapGclbTargetIpConfigArgs{...}
type GetCertificateMapGclbTargetIpConfigInput interface {
	pulumi.Input

	ToGetCertificateMapGclbTargetIpConfigOutput() GetCertificateMapGclbTargetIpConfigOutput
	ToGetCertificateMapGclbTargetIpConfigOutputWithContext(context.Context) GetCertificateMapGclbTargetIpConfigOutput
}

type GetCertificateMapGclbTargetIpConfigArgs struct {
	// An external IP address
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// A list of ports
	Ports pulumi.IntArrayInput `pulumi:"ports"`
}

func (GetCertificateMapGclbTargetIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateMapGclbTargetIpConfig)(nil)).Elem()
}

func (i GetCertificateMapGclbTargetIpConfigArgs) ToGetCertificateMapGclbTargetIpConfigOutput() GetCertificateMapGclbTargetIpConfigOutput {
	return i.ToGetCertificateMapGclbTargetIpConfigOutputWithContext(context.Background())
}

func (i GetCertificateMapGclbTargetIpConfigArgs) ToGetCertificateMapGclbTargetIpConfigOutputWithContext(ctx context.Context) GetCertificateMapGclbTargetIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateMapGclbTargetIpConfigOutput)
}

// GetCertificateMapGclbTargetIpConfigArrayInput is an input type that accepts GetCertificateMapGclbTargetIpConfigArray and GetCertificateMapGclbTargetIpConfigArrayOutput values.
// You can construct a concrete instance of `GetCertificateMapGclbTargetIpConfigArrayInput` via:
//
//	GetCertificateMapGclbTargetIpConfigArray{ GetCertificateMapGclbTargetIpConfigArgs{...} }
type GetCertificateMapGclbTargetIpConfigArrayInput interface {
	pulumi.Input

	ToGetCertificateMapGclbTargetIpConfigArrayOutput() GetCertificateMapGclbTargetIpConfigArrayOutput
	ToGetCertificateMapGclbTargetIpConfigArrayOutputWithContext(context.Context) GetCertificateMapGclbTargetIpConfigArrayOutput
}

type GetCertificateMapGclbTargetIpConfigArray []GetCertificateMapGclbTargetIpConfigInput

func (GetCertificateMapGclbTargetIpConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateMapGclbTargetIpConfig)(nil)).Elem()
}

func (i GetCertificateMapGclbTargetIpConfigArray) ToGetCertificateMapGclbTargetIpConfigArrayOutput() GetCertificateMapGclbTargetIpConfigArrayOutput {
	return i.ToGetCertificateMapGclbTargetIpConfigArrayOutputWithContext(context.Background())
}

func (i GetCertificateMapGclbTargetIpConfigArray) ToGetCertificateMapGclbTargetIpConfigArrayOutputWithContext(ctx context.Context) GetCertificateMapGclbTargetIpConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateMapGclbTargetIpConfigArrayOutput)
}

type GetCertificateMapGclbTargetIpConfigOutput struct{ *pulumi.OutputState }

func (GetCertificateMapGclbTargetIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateMapGclbTargetIpConfig)(nil)).Elem()
}

func (o GetCertificateMapGclbTargetIpConfigOutput) ToGetCertificateMapGclbTargetIpConfigOutput() GetCertificateMapGclbTargetIpConfigOutput {
	return o
}

func (o GetCertificateMapGclbTargetIpConfigOutput) ToGetCertificateMapGclbTargetIpConfigOutputWithContext(ctx context.Context) GetCertificateMapGclbTargetIpConfigOutput {
	return o
}

// An external IP address
func (o GetCertificateMapGclbTargetIpConfigOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateMapGclbTargetIpConfig) string { return v.IpAddress }).(pulumi.StringOutput)
}

// A list of ports
func (o GetCertificateMapGclbTargetIpConfigOutput) Ports() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetCertificateMapGclbTargetIpConfig) []int { return v.Ports }).(pulumi.IntArrayOutput)
}

type GetCertificateMapGclbTargetIpConfigArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateMapGclbTargetIpConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateMapGclbTargetIpConfig)(nil)).Elem()
}

func (o GetCertificateMapGclbTargetIpConfigArrayOutput) ToGetCertificateMapGclbTargetIpConfigArrayOutput() GetCertificateMapGclbTargetIpConfigArrayOutput {
	return o
}

func (o GetCertificateMapGclbTargetIpConfigArrayOutput) ToGetCertificateMapGclbTargetIpConfigArrayOutputWithContext(ctx context.Context) GetCertificateMapGclbTargetIpConfigArrayOutput {
	return o
}

func (o GetCertificateMapGclbTargetIpConfigArrayOutput) Index(i pulumi.IntInput) GetCertificateMapGclbTargetIpConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateMapGclbTargetIpConfig {
		return vs[0].([]GetCertificateMapGclbTargetIpConfig)[vs[1].(int)]
	}).(GetCertificateMapGclbTargetIpConfigOutput)
}

type GetCertificatesCertificate struct {
	// A human-readable description of the resource.
	Description     string            `pulumi:"description"`
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Set of label tags associated with the Certificate resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The Certificate Manager location. If not specified, "global" is used.
	Location string `pulumi:"location"`
	// Configuration and state of a Managed Certificate.
	// Certificate Manager provisions and renews Managed Certificates
	// automatically, for as long as it's authorized to do so.
	Manageds []GetCertificatesCertificateManaged `pulumi:"manageds"`
	// A user-defined name of the certificate. Certificate names must be unique
	// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
	// and all following characters must be a dash, underscore, letter or digit.
	Name string `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	//  and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The list of Subject Alternative Names of dnsName type defined in the certificate (see RFC 5280 4.2.1.6)
	SanDnsnames []string `pulumi:"sanDnsnames"`
	// The scope of the certificate.
	//
	// DEFAULT: Certificates with default scope are served from core Google data centers.
	// If unsure, choose this option.
	//
	// EDGE_CACHE: Certificates with scope EDGE_CACHE are special-purposed certificates, served from Edge Points of Presence.
	// See https://cloud.google.com/vpc/docs/edge-locations.
	//
	// ALL_REGIONS: Certificates with ALL_REGIONS scope are served from all GCP regions (You can only use ALL_REGIONS with global certs).
	// See https://cloud.google.com/compute/docs/regions-zones.
	//
	// CLIENT_AUTH: Certificates with CLIENT_AUTH scope are used by a load balancer (TLS client) to be presented to the backend (TLS server) when backend mTLS is configured.
	// See https://cloud.google.com/load-balancing/docs/backend-authenticated-tls-backend-mtls#client-certificate.
	Scope string `pulumi:"scope"`
}

// GetCertificatesCertificateInput is an input type that accepts GetCertificatesCertificateArgs and GetCertificatesCertificateOutput values.
// You can construct a concrete instance of `GetCertificatesCertificateInput` via:
//
//	GetCertificatesCertificateArgs{...}
type GetCertificatesCertificateInput interface {
	pulumi.Input

	ToGetCertificatesCertificateOutput() GetCertificatesCertificateOutput
	ToGetCertificatesCertificateOutputWithContext(context.Context) GetCertificatesCertificateOutput
}

type GetCertificatesCertificateArgs struct {
	// A human-readable description of the resource.
	Description     pulumi.StringInput    `pulumi:"description"`
	EffectiveLabels pulumi.StringMapInput `pulumi:"effectiveLabels"`
	// Set of label tags associated with the Certificate resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The Certificate Manager location. If not specified, "global" is used.
	Location pulumi.StringInput `pulumi:"location"`
	// Configuration and state of a Managed Certificate.
	// Certificate Manager provisions and renews Managed Certificates
	// automatically, for as long as it's authorized to do so.
	Manageds GetCertificatesCertificateManagedArrayInput `pulumi:"manageds"`
	// A user-defined name of the certificate. Certificate names must be unique
	// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
	// and all following characters must be a dash, underscore, letter or digit.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringInput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	//  and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput `pulumi:"pulumiLabels"`
	// The list of Subject Alternative Names of dnsName type defined in the certificate (see RFC 5280 4.2.1.6)
	SanDnsnames pulumi.StringArrayInput `pulumi:"sanDnsnames"`
	// The scope of the certificate.
	//
	// DEFAULT: Certificates with default scope are served from core Google data centers.
	// If unsure, choose this option.
	//
	// EDGE_CACHE: Certificates with scope EDGE_CACHE are special-purposed certificates, served from Edge Points of Presence.
	// See https://cloud.google.com/vpc/docs/edge-locations.
	//
	// ALL_REGIONS: Certificates with ALL_REGIONS scope are served from all GCP regions (You can only use ALL_REGIONS with global certs).
	// See https://cloud.google.com/compute/docs/regions-zones.
	//
	// CLIENT_AUTH: Certificates with CLIENT_AUTH scope are used by a load balancer (TLS client) to be presented to the backend (TLS server) when backend mTLS is configured.
	// See https://cloud.google.com/load-balancing/docs/backend-authenticated-tls-backend-mtls#client-certificate.
	Scope pulumi.StringInput `pulumi:"scope"`
}

func (GetCertificatesCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesCertificate)(nil)).Elem()
}

func (i GetCertificatesCertificateArgs) ToGetCertificatesCertificateOutput() GetCertificatesCertificateOutput {
	return i.ToGetCertificatesCertificateOutputWithContext(context.Background())
}

func (i GetCertificatesCertificateArgs) ToGetCertificatesCertificateOutputWithContext(ctx context.Context) GetCertificatesCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificatesCertificateOutput)
}

// GetCertificatesCertificateArrayInput is an input type that accepts GetCertificatesCertificateArray and GetCertificatesCertificateArrayOutput values.
// You can construct a concrete instance of `GetCertificatesCertificateArrayInput` via:
//
//	GetCertificatesCertificateArray{ GetCertificatesCertificateArgs{...} }
type GetCertificatesCertificateArrayInput interface {
	pulumi.Input

	ToGetCertificatesCertificateArrayOutput() GetCertificatesCertificateArrayOutput
	ToGetCertificatesCertificateArrayOutputWithContext(context.Context) GetCertificatesCertificateArrayOutput
}

type GetCertificatesCertificateArray []GetCertificatesCertificateInput

func (GetCertificatesCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificatesCertificate)(nil)).Elem()
}

func (i GetCertificatesCertificateArray) ToGetCertificatesCertificateArrayOutput() GetCertificatesCertificateArrayOutput {
	return i.ToGetCertificatesCertificateArrayOutputWithContext(context.Background())
}

func (i GetCertificatesCertificateArray) ToGetCertificatesCertificateArrayOutputWithContext(ctx context.Context) GetCertificatesCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificatesCertificateArrayOutput)
}

type GetCertificatesCertificateOutput struct{ *pulumi.OutputState }

func (GetCertificatesCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesCertificate)(nil)).Elem()
}

func (o GetCertificatesCertificateOutput) ToGetCertificatesCertificateOutput() GetCertificatesCertificateOutput {
	return o
}

func (o GetCertificatesCertificateOutput) ToGetCertificatesCertificateOutputWithContext(ctx context.Context) GetCertificatesCertificateOutput {
	return o
}

// A human-readable description of the resource.
func (o GetCertificatesCertificateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetCertificatesCertificateOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) map[string]string { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Set of label tags associated with the Certificate resource.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o GetCertificatesCertificateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The Certificate Manager location. If not specified, "global" is used.
func (o GetCertificatesCertificateOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Location }).(pulumi.StringOutput)
}

// Configuration and state of a Managed Certificate.
// Certificate Manager provisions and renews Managed Certificates
// automatically, for as long as it's authorized to do so.
func (o GetCertificatesCertificateOutput) Manageds() GetCertificatesCertificateManagedArrayOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) []GetCertificatesCertificateManaged { return v.Manageds }).(GetCertificatesCertificateManagedArrayOutput)
}

// A user-defined name of the certificate. Certificate names must be unique
// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
// and all following characters must be a dash, underscore, letter or digit.
func (o GetCertificatesCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (o GetCertificatesCertificateOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
//
//	and default labels configured on the provider.
func (o GetCertificatesCertificateOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) map[string]string { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The list of Subject Alternative Names of dnsName type defined in the certificate (see RFC 5280 4.2.1.6)
func (o GetCertificatesCertificateOutput) SanDnsnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) []string { return v.SanDnsnames }).(pulumi.StringArrayOutput)
}

// The scope of the certificate.
//
// DEFAULT: Certificates with default scope are served from core Google data centers.
// If unsure, choose this option.
//
// EDGE_CACHE: Certificates with scope EDGE_CACHE are special-purposed certificates, served from Edge Points of Presence.
// See https://cloud.google.com/vpc/docs/edge-locations.
//
// ALL_REGIONS: Certificates with ALL_REGIONS scope are served from all GCP regions (You can only use ALL_REGIONS with global certs).
// See https://cloud.google.com/compute/docs/regions-zones.
//
// CLIENT_AUTH: Certificates with CLIENT_AUTH scope are used by a load balancer (TLS client) to be presented to the backend (TLS server) when backend mTLS is configured.
// See https://cloud.google.com/load-balancing/docs/backend-authenticated-tls-backend-mtls#client-certificate.
func (o GetCertificatesCertificateOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Scope }).(pulumi.StringOutput)
}

type GetCertificatesCertificateArrayOutput struct{ *pulumi.OutputState }

func (GetCertificatesCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificatesCertificate)(nil)).Elem()
}

func (o GetCertificatesCertificateArrayOutput) ToGetCertificatesCertificateArrayOutput() GetCertificatesCertificateArrayOutput {
	return o
}

func (o GetCertificatesCertificateArrayOutput) ToGetCertificatesCertificateArrayOutputWithContext(ctx context.Context) GetCertificatesCertificateArrayOutput {
	return o
}

func (o GetCertificatesCertificateArrayOutput) Index(i pulumi.IntInput) GetCertificatesCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificatesCertificate {
		return vs[0].([]GetCertificatesCertificate)[vs[1].(int)]
	}).(GetCertificatesCertificateOutput)
}

type GetCertificatesCertificateManaged struct {
	// Detailed state of the latest authorization attempt for each domain
	// specified for this Managed Certificate.
	AuthorizationAttemptInfos []GetCertificatesCertificateManagedAuthorizationAttemptInfo `pulumi:"authorizationAttemptInfos"`
	// Authorizations that will be used for performing domain authorization. Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
	DnsAuthorizations []string `pulumi:"dnsAuthorizations"`
	// The domains for which a managed SSL certificate will be generated.
	// Wildcard domains are only supported with DNS challenge resolution
	Domains []string `pulumi:"domains"`
	// The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format projects/*/locations/*/certificateIssuanceConfigs/*.
	// If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
	// Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
	IssuanceConfig string `pulumi:"issuanceConfig"`
	// Information about issues with provisioning this Managed Certificate.
	ProvisioningIssues []GetCertificatesCertificateManagedProvisioningIssue `pulumi:"provisioningIssues"`
	// A state of this Managed Certificate.
	State string `pulumi:"state"`
}

// GetCertificatesCertificateManagedInput is an input type that accepts GetCertificatesCertificateManagedArgs and GetCertificatesCertificateManagedOutput values.
// You can construct a concrete instance of `GetCertificatesCertificateManagedInput` via:
//
//	GetCertificatesCertificateManagedArgs{...}
type GetCertificatesCertificateManagedInput interface {
	pulumi.Input

	ToGetCertificatesCertificateManagedOutput() GetCertificatesCertificateManagedOutput
	ToGetCertificatesCertificateManagedOutputWithContext(context.Context) GetCertificatesCertificateManagedOutput
}

type GetCertificatesCertificateManagedArgs struct {
	// Detailed state of the latest authorization attempt for each domain
	// specified for this Managed Certificate.
	AuthorizationAttemptInfos GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayInput `pulumi:"authorizationAttemptInfos"`
	// Authorizations that will be used for performing domain authorization. Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
	DnsAuthorizations pulumi.StringArrayInput `pulumi:"dnsAuthorizations"`
	// The domains for which a managed SSL certificate will be generated.
	// Wildcard domains are only supported with DNS challenge resolution
	Domains pulumi.StringArrayInput `pulumi:"domains"`
	// The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format projects/*/locations/*/certificateIssuanceConfigs/*.
	// If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
	// Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
	IssuanceConfig pulumi.StringInput `pulumi:"issuanceConfig"`
	// Information about issues with provisioning this Managed Certificate.
	ProvisioningIssues GetCertificatesCertificateManagedProvisioningIssueArrayInput `pulumi:"provisioningIssues"`
	// A state of this Managed Certificate.
	State pulumi.StringInput `pulumi:"state"`
}

func (GetCertificatesCertificateManagedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesCertificateManaged)(nil)).Elem()
}

func (i GetCertificatesCertificateManagedArgs) ToGetCertificatesCertificateManagedOutput() GetCertificatesCertificateManagedOutput {
	return i.ToGetCertificatesCertificateManagedOutputWithContext(context.Background())
}

func (i GetCertificatesCertificateManagedArgs) ToGetCertificatesCertificateManagedOutputWithContext(ctx context.Context) GetCertificatesCertificateManagedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificatesCertificateManagedOutput)
}

// GetCertificatesCertificateManagedArrayInput is an input type that accepts GetCertificatesCertificateManagedArray and GetCertificatesCertificateManagedArrayOutput values.
// You can construct a concrete instance of `GetCertificatesCertificateManagedArrayInput` via:
//
//	GetCertificatesCertificateManagedArray{ GetCertificatesCertificateManagedArgs{...} }
type GetCertificatesCertificateManagedArrayInput interface {
	pulumi.Input

	ToGetCertificatesCertificateManagedArrayOutput() GetCertificatesCertificateManagedArrayOutput
	ToGetCertificatesCertificateManagedArrayOutputWithContext(context.Context) GetCertificatesCertificateManagedArrayOutput
}

type GetCertificatesCertificateManagedArray []GetCertificatesCertificateManagedInput

func (GetCertificatesCertificateManagedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificatesCertificateManaged)(nil)).Elem()
}

func (i GetCertificatesCertificateManagedArray) ToGetCertificatesCertificateManagedArrayOutput() GetCertificatesCertificateManagedArrayOutput {
	return i.ToGetCertificatesCertificateManagedArrayOutputWithContext(context.Background())
}

func (i GetCertificatesCertificateManagedArray) ToGetCertificatesCertificateManagedArrayOutputWithContext(ctx context.Context) GetCertificatesCertificateManagedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificatesCertificateManagedArrayOutput)
}

type GetCertificatesCertificateManagedOutput struct{ *pulumi.OutputState }

func (GetCertificatesCertificateManagedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesCertificateManaged)(nil)).Elem()
}

func (o GetCertificatesCertificateManagedOutput) ToGetCertificatesCertificateManagedOutput() GetCertificatesCertificateManagedOutput {
	return o
}

func (o GetCertificatesCertificateManagedOutput) ToGetCertificatesCertificateManagedOutputWithContext(ctx context.Context) GetCertificatesCertificateManagedOutput {
	return o
}

// Detailed state of the latest authorization attempt for each domain
// specified for this Managed Certificate.
func (o GetCertificatesCertificateManagedOutput) AuthorizationAttemptInfos() GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput {
	return o.ApplyT(func(v GetCertificatesCertificateManaged) []GetCertificatesCertificateManagedAuthorizationAttemptInfo {
		return v.AuthorizationAttemptInfos
	}).(GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput)
}

// Authorizations that will be used for performing domain authorization. Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
func (o GetCertificatesCertificateManagedOutput) DnsAuthorizations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCertificatesCertificateManaged) []string { return v.DnsAuthorizations }).(pulumi.StringArrayOutput)
}

// The domains for which a managed SSL certificate will be generated.
// Wildcard domains are only supported with DNS challenge resolution
func (o GetCertificatesCertificateManagedOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCertificatesCertificateManaged) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format projects/*/locations/*/certificateIssuanceConfigs/*.
// If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
// Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
func (o GetCertificatesCertificateManagedOutput) IssuanceConfig() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificateManaged) string { return v.IssuanceConfig }).(pulumi.StringOutput)
}

// Information about issues with provisioning this Managed Certificate.
func (o GetCertificatesCertificateManagedOutput) ProvisioningIssues() GetCertificatesCertificateManagedProvisioningIssueArrayOutput {
	return o.ApplyT(func(v GetCertificatesCertificateManaged) []GetCertificatesCertificateManagedProvisioningIssue {
		return v.ProvisioningIssues
	}).(GetCertificatesCertificateManagedProvisioningIssueArrayOutput)
}

// A state of this Managed Certificate.
func (o GetCertificatesCertificateManagedOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificateManaged) string { return v.State }).(pulumi.StringOutput)
}

type GetCertificatesCertificateManagedArrayOutput struct{ *pulumi.OutputState }

func (GetCertificatesCertificateManagedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificatesCertificateManaged)(nil)).Elem()
}

func (o GetCertificatesCertificateManagedArrayOutput) ToGetCertificatesCertificateManagedArrayOutput() GetCertificatesCertificateManagedArrayOutput {
	return o
}

func (o GetCertificatesCertificateManagedArrayOutput) ToGetCertificatesCertificateManagedArrayOutputWithContext(ctx context.Context) GetCertificatesCertificateManagedArrayOutput {
	return o
}

func (o GetCertificatesCertificateManagedArrayOutput) Index(i pulumi.IntInput) GetCertificatesCertificateManagedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificatesCertificateManaged {
		return vs[0].([]GetCertificatesCertificateManaged)[vs[1].(int)]
	}).(GetCertificatesCertificateManagedOutput)
}

type GetCertificatesCertificateManagedAuthorizationAttemptInfo struct {
	// Human readable explanation for reaching the state. Provided to help
	// address the configuration issues.
	// Not guaranteed to be stable. For programmatic access use 'failure_reason' field.
	Details string `pulumi:"details"`
	// Domain name of the authorization attempt.
	Domain string `pulumi:"domain"`
	// Reason for failure of the authorization attempt for the domain.
	FailureReason string `pulumi:"failureReason"`
	// State of the domain for managed certificate issuance.
	State string `pulumi:"state"`
}

// GetCertificatesCertificateManagedAuthorizationAttemptInfoInput is an input type that accepts GetCertificatesCertificateManagedAuthorizationAttemptInfoArgs and GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput values.
// You can construct a concrete instance of `GetCertificatesCertificateManagedAuthorizationAttemptInfoInput` via:
//
//	GetCertificatesCertificateManagedAuthorizationAttemptInfoArgs{...}
type GetCertificatesCertificateManagedAuthorizationAttemptInfoInput interface {
	pulumi.Input

	ToGetCertificatesCertificateManagedAuthorizationAttemptInfoOutput() GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput
	ToGetCertificatesCertificateManagedAuthorizationAttemptInfoOutputWithContext(context.Context) GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput
}

type GetCertificatesCertificateManagedAuthorizationAttemptInfoArgs struct {
	// Human readable explanation for reaching the state. Provided to help
	// address the configuration issues.
	// Not guaranteed to be stable. For programmatic access use 'failure_reason' field.
	Details pulumi.StringInput `pulumi:"details"`
	// Domain name of the authorization attempt.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Reason for failure of the authorization attempt for the domain.
	FailureReason pulumi.StringInput `pulumi:"failureReason"`
	// State of the domain for managed certificate issuance.
	State pulumi.StringInput `pulumi:"state"`
}

func (GetCertificatesCertificateManagedAuthorizationAttemptInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesCertificateManagedAuthorizationAttemptInfo)(nil)).Elem()
}

func (i GetCertificatesCertificateManagedAuthorizationAttemptInfoArgs) ToGetCertificatesCertificateManagedAuthorizationAttemptInfoOutput() GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput {
	return i.ToGetCertificatesCertificateManagedAuthorizationAttemptInfoOutputWithContext(context.Background())
}

func (i GetCertificatesCertificateManagedAuthorizationAttemptInfoArgs) ToGetCertificatesCertificateManagedAuthorizationAttemptInfoOutputWithContext(ctx context.Context) GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput)
}

// GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayInput is an input type that accepts GetCertificatesCertificateManagedAuthorizationAttemptInfoArray and GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput values.
// You can construct a concrete instance of `GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayInput` via:
//
//	GetCertificatesCertificateManagedAuthorizationAttemptInfoArray{ GetCertificatesCertificateManagedAuthorizationAttemptInfoArgs{...} }
type GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayInput interface {
	pulumi.Input

	ToGetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput() GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput
	ToGetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutputWithContext(context.Context) GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput
}

type GetCertificatesCertificateManagedAuthorizationAttemptInfoArray []GetCertificatesCertificateManagedAuthorizationAttemptInfoInput

func (GetCertificatesCertificateManagedAuthorizationAttemptInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificatesCertificateManagedAuthorizationAttemptInfo)(nil)).Elem()
}

func (i GetCertificatesCertificateManagedAuthorizationAttemptInfoArray) ToGetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput() GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput {
	return i.ToGetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutputWithContext(context.Background())
}

func (i GetCertificatesCertificateManagedAuthorizationAttemptInfoArray) ToGetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutputWithContext(ctx context.Context) GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput)
}

type GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput struct{ *pulumi.OutputState }

func (GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesCertificateManagedAuthorizationAttemptInfo)(nil)).Elem()
}

func (o GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput) ToGetCertificatesCertificateManagedAuthorizationAttemptInfoOutput() GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput {
	return o
}

func (o GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput) ToGetCertificatesCertificateManagedAuthorizationAttemptInfoOutputWithContext(ctx context.Context) GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput {
	return o
}

// Human readable explanation for reaching the state. Provided to help
// address the configuration issues.
// Not guaranteed to be stable. For programmatic access use 'failure_reason' field.
func (o GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificateManagedAuthorizationAttemptInfo) string { return v.Details }).(pulumi.StringOutput)
}

// Domain name of the authorization attempt.
func (o GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificateManagedAuthorizationAttemptInfo) string { return v.Domain }).(pulumi.StringOutput)
}

// Reason for failure of the authorization attempt for the domain.
func (o GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput) FailureReason() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificateManagedAuthorizationAttemptInfo) string { return v.FailureReason }).(pulumi.StringOutput)
}

// State of the domain for managed certificate issuance.
func (o GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificateManagedAuthorizationAttemptInfo) string { return v.State }).(pulumi.StringOutput)
}

type GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput struct{ *pulumi.OutputState }

func (GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificatesCertificateManagedAuthorizationAttemptInfo)(nil)).Elem()
}

func (o GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput) ToGetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput() GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput {
	return o
}

func (o GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput) ToGetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutputWithContext(ctx context.Context) GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput {
	return o
}

func (o GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput) Index(i pulumi.IntInput) GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificatesCertificateManagedAuthorizationAttemptInfo {
		return vs[0].([]GetCertificatesCertificateManagedAuthorizationAttemptInfo)[vs[1].(int)]
	}).(GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput)
}

type GetCertificatesCertificateManagedProvisioningIssue struct {
	// Human readable explanation about the issue. Provided to help address
	// the configuration issues.
	// Not guaranteed to be stable. For programmatic access use 'reason' field.
	Details string `pulumi:"details"`
	// Reason for provisioning failures.
	Reason string `pulumi:"reason"`
}

// GetCertificatesCertificateManagedProvisioningIssueInput is an input type that accepts GetCertificatesCertificateManagedProvisioningIssueArgs and GetCertificatesCertificateManagedProvisioningIssueOutput values.
// You can construct a concrete instance of `GetCertificatesCertificateManagedProvisioningIssueInput` via:
//
//	GetCertificatesCertificateManagedProvisioningIssueArgs{...}
type GetCertificatesCertificateManagedProvisioningIssueInput interface {
	pulumi.Input

	ToGetCertificatesCertificateManagedProvisioningIssueOutput() GetCertificatesCertificateManagedProvisioningIssueOutput
	ToGetCertificatesCertificateManagedProvisioningIssueOutputWithContext(context.Context) GetCertificatesCertificateManagedProvisioningIssueOutput
}

type GetCertificatesCertificateManagedProvisioningIssueArgs struct {
	// Human readable explanation about the issue. Provided to help address
	// the configuration issues.
	// Not guaranteed to be stable. For programmatic access use 'reason' field.
	Details pulumi.StringInput `pulumi:"details"`
	// Reason for provisioning failures.
	Reason pulumi.StringInput `pulumi:"reason"`
}

func (GetCertificatesCertificateManagedProvisioningIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesCertificateManagedProvisioningIssue)(nil)).Elem()
}

func (i GetCertificatesCertificateManagedProvisioningIssueArgs) ToGetCertificatesCertificateManagedProvisioningIssueOutput() GetCertificatesCertificateManagedProvisioningIssueOutput {
	return i.ToGetCertificatesCertificateManagedProvisioningIssueOutputWithContext(context.Background())
}

func (i GetCertificatesCertificateManagedProvisioningIssueArgs) ToGetCertificatesCertificateManagedProvisioningIssueOutputWithContext(ctx context.Context) GetCertificatesCertificateManagedProvisioningIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificatesCertificateManagedProvisioningIssueOutput)
}

// GetCertificatesCertificateManagedProvisioningIssueArrayInput is an input type that accepts GetCertificatesCertificateManagedProvisioningIssueArray and GetCertificatesCertificateManagedProvisioningIssueArrayOutput values.
// You can construct a concrete instance of `GetCertificatesCertificateManagedProvisioningIssueArrayInput` via:
//
//	GetCertificatesCertificateManagedProvisioningIssueArray{ GetCertificatesCertificateManagedProvisioningIssueArgs{...} }
type GetCertificatesCertificateManagedProvisioningIssueArrayInput interface {
	pulumi.Input

	ToGetCertificatesCertificateManagedProvisioningIssueArrayOutput() GetCertificatesCertificateManagedProvisioningIssueArrayOutput
	ToGetCertificatesCertificateManagedProvisioningIssueArrayOutputWithContext(context.Context) GetCertificatesCertificateManagedProvisioningIssueArrayOutput
}

type GetCertificatesCertificateManagedProvisioningIssueArray []GetCertificatesCertificateManagedProvisioningIssueInput

func (GetCertificatesCertificateManagedProvisioningIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificatesCertificateManagedProvisioningIssue)(nil)).Elem()
}

func (i GetCertificatesCertificateManagedProvisioningIssueArray) ToGetCertificatesCertificateManagedProvisioningIssueArrayOutput() GetCertificatesCertificateManagedProvisioningIssueArrayOutput {
	return i.ToGetCertificatesCertificateManagedProvisioningIssueArrayOutputWithContext(context.Background())
}

func (i GetCertificatesCertificateManagedProvisioningIssueArray) ToGetCertificatesCertificateManagedProvisioningIssueArrayOutputWithContext(ctx context.Context) GetCertificatesCertificateManagedProvisioningIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificatesCertificateManagedProvisioningIssueArrayOutput)
}

type GetCertificatesCertificateManagedProvisioningIssueOutput struct{ *pulumi.OutputState }

func (GetCertificatesCertificateManagedProvisioningIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesCertificateManagedProvisioningIssue)(nil)).Elem()
}

func (o GetCertificatesCertificateManagedProvisioningIssueOutput) ToGetCertificatesCertificateManagedProvisioningIssueOutput() GetCertificatesCertificateManagedProvisioningIssueOutput {
	return o
}

func (o GetCertificatesCertificateManagedProvisioningIssueOutput) ToGetCertificatesCertificateManagedProvisioningIssueOutputWithContext(ctx context.Context) GetCertificatesCertificateManagedProvisioningIssueOutput {
	return o
}

// Human readable explanation about the issue. Provided to help address
// the configuration issues.
// Not guaranteed to be stable. For programmatic access use 'reason' field.
func (o GetCertificatesCertificateManagedProvisioningIssueOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificateManagedProvisioningIssue) string { return v.Details }).(pulumi.StringOutput)
}

// Reason for provisioning failures.
func (o GetCertificatesCertificateManagedProvisioningIssueOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificateManagedProvisioningIssue) string { return v.Reason }).(pulumi.StringOutput)
}

type GetCertificatesCertificateManagedProvisioningIssueArrayOutput struct{ *pulumi.OutputState }

func (GetCertificatesCertificateManagedProvisioningIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificatesCertificateManagedProvisioningIssue)(nil)).Elem()
}

func (o GetCertificatesCertificateManagedProvisioningIssueArrayOutput) ToGetCertificatesCertificateManagedProvisioningIssueArrayOutput() GetCertificatesCertificateManagedProvisioningIssueArrayOutput {
	return o
}

func (o GetCertificatesCertificateManagedProvisioningIssueArrayOutput) ToGetCertificatesCertificateManagedProvisioningIssueArrayOutputWithContext(ctx context.Context) GetCertificatesCertificateManagedProvisioningIssueArrayOutput {
	return o
}

func (o GetCertificatesCertificateManagedProvisioningIssueArrayOutput) Index(i pulumi.IntInput) GetCertificatesCertificateManagedProvisioningIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificatesCertificateManagedProvisioningIssue {
		return vs[0].([]GetCertificatesCertificateManagedProvisioningIssue)[vs[1].(int)]
	}).(GetCertificatesCertificateManagedProvisioningIssueOutput)
}

type GetDnsAuthorizationDnsResourceRecord struct {
	// Data of the DNS Resource Record.
	Data string `pulumi:"data"`
	// The name of the DNS Authorization.
	Name string `pulumi:"name"`
	// Type of the DNS Resource Record.
	Type string `pulumi:"type"`
}

// GetDnsAuthorizationDnsResourceRecordInput is an input type that accepts GetDnsAuthorizationDnsResourceRecordArgs and GetDnsAuthorizationDnsResourceRecordOutput values.
// You can construct a concrete instance of `GetDnsAuthorizationDnsResourceRecordInput` via:
//
//	GetDnsAuthorizationDnsResourceRecordArgs{...}
type GetDnsAuthorizationDnsResourceRecordInput interface {
	pulumi.Input

	ToGetDnsAuthorizationDnsResourceRecordOutput() GetDnsAuthorizationDnsResourceRecordOutput
	ToGetDnsAuthorizationDnsResourceRecordOutputWithContext(context.Context) GetDnsAuthorizationDnsResourceRecordOutput
}

type GetDnsAuthorizationDnsResourceRecordArgs struct {
	// Data of the DNS Resource Record.
	Data pulumi.StringInput `pulumi:"data"`
	// The name of the DNS Authorization.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the DNS Resource Record.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetDnsAuthorizationDnsResourceRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDnsAuthorizationDnsResourceRecord)(nil)).Elem()
}

func (i GetDnsAuthorizationDnsResourceRecordArgs) ToGetDnsAuthorizationDnsResourceRecordOutput() GetDnsAuthorizationDnsResourceRecordOutput {
	return i.ToGetDnsAuthorizationDnsResourceRecordOutputWithContext(context.Background())
}

func (i GetDnsAuthorizationDnsResourceRecordArgs) ToGetDnsAuthorizationDnsResourceRecordOutputWithContext(ctx context.Context) GetDnsAuthorizationDnsResourceRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDnsAuthorizationDnsResourceRecordOutput)
}

// GetDnsAuthorizationDnsResourceRecordArrayInput is an input type that accepts GetDnsAuthorizationDnsResourceRecordArray and GetDnsAuthorizationDnsResourceRecordArrayOutput values.
// You can construct a concrete instance of `GetDnsAuthorizationDnsResourceRecordArrayInput` via:
//
//	GetDnsAuthorizationDnsResourceRecordArray{ GetDnsAuthorizationDnsResourceRecordArgs{...} }
type GetDnsAuthorizationDnsResourceRecordArrayInput interface {
	pulumi.Input

	ToGetDnsAuthorizationDnsResourceRecordArrayOutput() GetDnsAuthorizationDnsResourceRecordArrayOutput
	ToGetDnsAuthorizationDnsResourceRecordArrayOutputWithContext(context.Context) GetDnsAuthorizationDnsResourceRecordArrayOutput
}

type GetDnsAuthorizationDnsResourceRecordArray []GetDnsAuthorizationDnsResourceRecordInput

func (GetDnsAuthorizationDnsResourceRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDnsAuthorizationDnsResourceRecord)(nil)).Elem()
}

func (i GetDnsAuthorizationDnsResourceRecordArray) ToGetDnsAuthorizationDnsResourceRecordArrayOutput() GetDnsAuthorizationDnsResourceRecordArrayOutput {
	return i.ToGetDnsAuthorizationDnsResourceRecordArrayOutputWithContext(context.Background())
}

func (i GetDnsAuthorizationDnsResourceRecordArray) ToGetDnsAuthorizationDnsResourceRecordArrayOutputWithContext(ctx context.Context) GetDnsAuthorizationDnsResourceRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDnsAuthorizationDnsResourceRecordArrayOutput)
}

type GetDnsAuthorizationDnsResourceRecordOutput struct{ *pulumi.OutputState }

func (GetDnsAuthorizationDnsResourceRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDnsAuthorizationDnsResourceRecord)(nil)).Elem()
}

func (o GetDnsAuthorizationDnsResourceRecordOutput) ToGetDnsAuthorizationDnsResourceRecordOutput() GetDnsAuthorizationDnsResourceRecordOutput {
	return o
}

func (o GetDnsAuthorizationDnsResourceRecordOutput) ToGetDnsAuthorizationDnsResourceRecordOutputWithContext(ctx context.Context) GetDnsAuthorizationDnsResourceRecordOutput {
	return o
}

// Data of the DNS Resource Record.
func (o GetDnsAuthorizationDnsResourceRecordOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v GetDnsAuthorizationDnsResourceRecord) string { return v.Data }).(pulumi.StringOutput)
}

// The name of the DNS Authorization.
func (o GetDnsAuthorizationDnsResourceRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDnsAuthorizationDnsResourceRecord) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the DNS Resource Record.
func (o GetDnsAuthorizationDnsResourceRecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDnsAuthorizationDnsResourceRecord) string { return v.Type }).(pulumi.StringOutput)
}

type GetDnsAuthorizationDnsResourceRecordArrayOutput struct{ *pulumi.OutputState }

func (GetDnsAuthorizationDnsResourceRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDnsAuthorizationDnsResourceRecord)(nil)).Elem()
}

func (o GetDnsAuthorizationDnsResourceRecordArrayOutput) ToGetDnsAuthorizationDnsResourceRecordArrayOutput() GetDnsAuthorizationDnsResourceRecordArrayOutput {
	return o
}

func (o GetDnsAuthorizationDnsResourceRecordArrayOutput) ToGetDnsAuthorizationDnsResourceRecordArrayOutputWithContext(ctx context.Context) GetDnsAuthorizationDnsResourceRecordArrayOutput {
	return o
}

func (o GetDnsAuthorizationDnsResourceRecordArrayOutput) Index(i pulumi.IntInput) GetDnsAuthorizationDnsResourceRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDnsAuthorizationDnsResourceRecord {
		return vs[0].([]GetDnsAuthorizationDnsResourceRecord)[vs[1].(int)]
	}).(GetDnsAuthorizationDnsResourceRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateIssuanceConfigCertificateAuthorityConfigInput)(nil)).Elem(), CertificateIssuanceConfigCertificateAuthorityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateIssuanceConfigCertificateAuthorityConfigPtrInput)(nil)).Elem(), CertificateIssuanceConfigCertificateAuthorityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigInput)(nil)).Elem(), CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrInput)(nil)).Elem(), CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateManagedInput)(nil)).Elem(), CertificateManagedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateManagedPtrInput)(nil)).Elem(), CertificateManagedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateManagedAuthorizationAttemptInfoInput)(nil)).Elem(), CertificateManagedAuthorizationAttemptInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateManagedAuthorizationAttemptInfoArrayInput)(nil)).Elem(), CertificateManagedAuthorizationAttemptInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateManagedProvisioningIssueInput)(nil)).Elem(), CertificateManagedProvisioningIssueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateManagedProvisioningIssueArrayInput)(nil)).Elem(), CertificateManagedProvisioningIssueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapGclbTargetInput)(nil)).Elem(), CertificateMapGclbTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapGclbTargetArrayInput)(nil)).Elem(), CertificateMapGclbTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapGclbTargetIpConfigInput)(nil)).Elem(), CertificateMapGclbTargetIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapGclbTargetIpConfigArrayInput)(nil)).Elem(), CertificateMapGclbTargetIpConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSelfManagedInput)(nil)).Elem(), CertificateSelfManagedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSelfManagedPtrInput)(nil)).Elem(), CertificateSelfManagedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsAuthorizationDnsResourceRecordInput)(nil)).Elem(), DnsAuthorizationDnsResourceRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsAuthorizationDnsResourceRecordArrayInput)(nil)).Elem(), DnsAuthorizationDnsResourceRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustConfigAllowlistedCertificateInput)(nil)).Elem(), TrustConfigAllowlistedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustConfigAllowlistedCertificateArrayInput)(nil)).Elem(), TrustConfigAllowlistedCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustConfigTrustStoreInput)(nil)).Elem(), TrustConfigTrustStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustConfigTrustStoreArrayInput)(nil)).Elem(), TrustConfigTrustStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustConfigTrustStoreIntermediateCaInput)(nil)).Elem(), TrustConfigTrustStoreIntermediateCaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustConfigTrustStoreIntermediateCaArrayInput)(nil)).Elem(), TrustConfigTrustStoreIntermediateCaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustConfigTrustStoreTrustAnchorInput)(nil)).Elem(), TrustConfigTrustStoreTrustAnchorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustConfigTrustStoreTrustAnchorArrayInput)(nil)).Elem(), TrustConfigTrustStoreTrustAnchorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateMapGclbTargetInput)(nil)).Elem(), GetCertificateMapGclbTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateMapGclbTargetArrayInput)(nil)).Elem(), GetCertificateMapGclbTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateMapGclbTargetIpConfigInput)(nil)).Elem(), GetCertificateMapGclbTargetIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateMapGclbTargetIpConfigArrayInput)(nil)).Elem(), GetCertificateMapGclbTargetIpConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificatesCertificateInput)(nil)).Elem(), GetCertificatesCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificatesCertificateArrayInput)(nil)).Elem(), GetCertificatesCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificatesCertificateManagedInput)(nil)).Elem(), GetCertificatesCertificateManagedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificatesCertificateManagedArrayInput)(nil)).Elem(), GetCertificatesCertificateManagedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificatesCertificateManagedAuthorizationAttemptInfoInput)(nil)).Elem(), GetCertificatesCertificateManagedAuthorizationAttemptInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayInput)(nil)).Elem(), GetCertificatesCertificateManagedAuthorizationAttemptInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificatesCertificateManagedProvisioningIssueInput)(nil)).Elem(), GetCertificatesCertificateManagedProvisioningIssueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificatesCertificateManagedProvisioningIssueArrayInput)(nil)).Elem(), GetCertificatesCertificateManagedProvisioningIssueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDnsAuthorizationDnsResourceRecordInput)(nil)).Elem(), GetDnsAuthorizationDnsResourceRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDnsAuthorizationDnsResourceRecordArrayInput)(nil)).Elem(), GetDnsAuthorizationDnsResourceRecordArray{})
	pulumi.RegisterOutputType(CertificateIssuanceConfigCertificateAuthorityConfigOutput{})
	pulumi.RegisterOutputType(CertificateIssuanceConfigCertificateAuthorityConfigPtrOutput{})
	pulumi.RegisterOutputType(CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigOutput{})
	pulumi.RegisterOutputType(CertificateIssuanceConfigCertificateAuthorityConfigCertificateAuthorityServiceConfigPtrOutput{})
	pulumi.RegisterOutputType(CertificateManagedOutput{})
	pulumi.RegisterOutputType(CertificateManagedPtrOutput{})
	pulumi.RegisterOutputType(CertificateManagedAuthorizationAttemptInfoOutput{})
	pulumi.RegisterOutputType(CertificateManagedAuthorizationAttemptInfoArrayOutput{})
	pulumi.RegisterOutputType(CertificateManagedProvisioningIssueOutput{})
	pulumi.RegisterOutputType(CertificateManagedProvisioningIssueArrayOutput{})
	pulumi.RegisterOutputType(CertificateMapGclbTargetOutput{})
	pulumi.RegisterOutputType(CertificateMapGclbTargetArrayOutput{})
	pulumi.RegisterOutputType(CertificateMapGclbTargetIpConfigOutput{})
	pulumi.RegisterOutputType(CertificateMapGclbTargetIpConfigArrayOutput{})
	pulumi.RegisterOutputType(CertificateSelfManagedOutput{})
	pulumi.RegisterOutputType(CertificateSelfManagedPtrOutput{})
	pulumi.RegisterOutputType(DnsAuthorizationDnsResourceRecordOutput{})
	pulumi.RegisterOutputType(DnsAuthorizationDnsResourceRecordArrayOutput{})
	pulumi.RegisterOutputType(TrustConfigAllowlistedCertificateOutput{})
	pulumi.RegisterOutputType(TrustConfigAllowlistedCertificateArrayOutput{})
	pulumi.RegisterOutputType(TrustConfigTrustStoreOutput{})
	pulumi.RegisterOutputType(TrustConfigTrustStoreArrayOutput{})
	pulumi.RegisterOutputType(TrustConfigTrustStoreIntermediateCaOutput{})
	pulumi.RegisterOutputType(TrustConfigTrustStoreIntermediateCaArrayOutput{})
	pulumi.RegisterOutputType(TrustConfigTrustStoreTrustAnchorOutput{})
	pulumi.RegisterOutputType(TrustConfigTrustStoreTrustAnchorArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateMapGclbTargetOutput{})
	pulumi.RegisterOutputType(GetCertificateMapGclbTargetArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateMapGclbTargetIpConfigOutput{})
	pulumi.RegisterOutputType(GetCertificateMapGclbTargetIpConfigArrayOutput{})
	pulumi.RegisterOutputType(GetCertificatesCertificateOutput{})
	pulumi.RegisterOutputType(GetCertificatesCertificateArrayOutput{})
	pulumi.RegisterOutputType(GetCertificatesCertificateManagedOutput{})
	pulumi.RegisterOutputType(GetCertificatesCertificateManagedArrayOutput{})
	pulumi.RegisterOutputType(GetCertificatesCertificateManagedAuthorizationAttemptInfoOutput{})
	pulumi.RegisterOutputType(GetCertificatesCertificateManagedAuthorizationAttemptInfoArrayOutput{})
	pulumi.RegisterOutputType(GetCertificatesCertificateManagedProvisioningIssueOutput{})
	pulumi.RegisterOutputType(GetCertificatesCertificateManagedProvisioningIssueArrayOutput{})
	pulumi.RegisterOutputType(GetDnsAuthorizationDnsResourceRecordOutput{})
	pulumi.RegisterOutputType(GetDnsAuthorizationDnsResourceRecordArrayOutput{})
}
