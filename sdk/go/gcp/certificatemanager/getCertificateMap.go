// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificatemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get info about a Google Certificate Manager Certificate Map resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/certificatemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := certificatemanager.GetCertificateMap(ctx, &certificatemanager.GetCertificateMapArgs{
//				Name: "cert-map",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCertificateMap(ctx *pulumi.Context, args *GetCertificateMapArgs, opts ...pulumi.InvokeOption) (*GetCertificateMapResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCertificateMapResult
	err := ctx.Invoke("gcp:certificatemanager/getCertificateMap:getCertificateMap", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificateMap.
type GetCertificateMapArgs struct {
	// The name of the certificate map.
	//
	// ***
	Name string `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getCertificateMap.
type GetCertificateMapResult struct {
	CreateTime  string                        `pulumi:"createTime"`
	Description string                        `pulumi:"description"`
	GclbTargets []GetCertificateMapGclbTarget `pulumi:"gclbTargets"`
	// The provider-assigned unique ID for this managed resource.
	Id         string            `pulumi:"id"`
	Labels     map[string]string `pulumi:"labels"`
	Name       string            `pulumi:"name"`
	Project    *string           `pulumi:"project"`
	UpdateTime string            `pulumi:"updateTime"`
}

func GetCertificateMapOutput(ctx *pulumi.Context, args GetCertificateMapOutputArgs, opts ...pulumi.InvokeOption) GetCertificateMapResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCertificateMapResult, error) {
			args := v.(GetCertificateMapArgs)
			r, err := GetCertificateMap(ctx, &args, opts...)
			var s GetCertificateMapResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCertificateMapResultOutput)
}

// A collection of arguments for invoking getCertificateMap.
type GetCertificateMapOutputArgs struct {
	// The name of the certificate map.
	//
	// ***
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (GetCertificateMapOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateMapArgs)(nil)).Elem()
}

// A collection of values returned by getCertificateMap.
type GetCertificateMapResultOutput struct{ *pulumi.OutputState }

func (GetCertificateMapResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateMapResult)(nil)).Elem()
}

func (o GetCertificateMapResultOutput) ToGetCertificateMapResultOutput() GetCertificateMapResultOutput {
	return o
}

func (o GetCertificateMapResultOutput) ToGetCertificateMapResultOutputWithContext(ctx context.Context) GetCertificateMapResultOutput {
	return o
}

func (o GetCertificateMapResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetCertificateMapResult] {
	return pulumix.Output[GetCertificateMapResult]{
		OutputState: o.OutputState,
	}
}

func (o GetCertificateMapResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateMapResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o GetCertificateMapResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateMapResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetCertificateMapResultOutput) GclbTargets() GetCertificateMapGclbTargetArrayOutput {
	return o.ApplyT(func(v GetCertificateMapResult) []GetCertificateMapGclbTarget { return v.GclbTargets }).(GetCertificateMapGclbTargetArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCertificateMapResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateMapResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCertificateMapResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCertificateMapResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o GetCertificateMapResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateMapResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetCertificateMapResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCertificateMapResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o GetCertificateMapResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateMapResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCertificateMapResultOutput{})
}
