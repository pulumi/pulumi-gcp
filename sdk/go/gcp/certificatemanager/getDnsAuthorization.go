// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificatemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about a Certificate Manager DNS Authorization. For more details, see the [API documentation](https://cloud.google.com/certificate-manager/docs/reference/certificate-manager/rest/v1/projects.locations.dnsAuthorizations).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/certificatemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := certificatemanager.LookupDnsAuthorization(ctx, &certificatemanager.LookupDnsAuthorizationArgs{
//				Name:     "my-dns-auth",
//				Location: pulumi.StringRef("global"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDnsAuthorization(ctx *pulumi.Context, args *LookupDnsAuthorizationArgs, opts ...pulumi.InvokeOption) (*LookupDnsAuthorizationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDnsAuthorizationResult
	err := ctx.Invoke("gcp:certificatemanager/getDnsAuthorization:getDnsAuthorization", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsAuthorization.
type LookupDnsAuthorizationArgs struct {
	// The name of the DNS Authorization.
	Domain string `pulumi:"domain"`
	// The Certificate Manager location. If not specified, "global" is used.
	Location *string `pulumi:"location"`
	// The name of the DNS Authorization.
	Name string `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getDnsAuthorization.
type LookupDnsAuthorizationResult struct {
	Description        string                                 `pulumi:"description"`
	DnsResourceRecords []GetDnsAuthorizationDnsResourceRecord `pulumi:"dnsResourceRecords"`
	Domain             string                                 `pulumi:"domain"`
	EffectiveLabels    map[string]string                      `pulumi:"effectiveLabels"`
	// The provider-assigned unique ID for this managed resource.
	Id           string            `pulumi:"id"`
	Labels       map[string]string `pulumi:"labels"`
	Location     *string           `pulumi:"location"`
	Name         string            `pulumi:"name"`
	Project      *string           `pulumi:"project"`
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	Type         string            `pulumi:"type"`
}

func LookupDnsAuthorizationOutput(ctx *pulumi.Context, args LookupDnsAuthorizationOutputArgs, opts ...pulumi.InvokeOption) LookupDnsAuthorizationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDnsAuthorizationResultOutput, error) {
			args := v.(LookupDnsAuthorizationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("gcp:certificatemanager/getDnsAuthorization:getDnsAuthorization", args, LookupDnsAuthorizationResultOutput{}, options).(LookupDnsAuthorizationResultOutput), nil
		}).(LookupDnsAuthorizationResultOutput)
}

// A collection of arguments for invoking getDnsAuthorization.
type LookupDnsAuthorizationOutputArgs struct {
	// The name of the DNS Authorization.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The Certificate Manager location. If not specified, "global" is used.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the DNS Authorization.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupDnsAuthorizationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsAuthorizationArgs)(nil)).Elem()
}

// A collection of values returned by getDnsAuthorization.
type LookupDnsAuthorizationResultOutput struct{ *pulumi.OutputState }

func (LookupDnsAuthorizationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsAuthorizationResult)(nil)).Elem()
}

func (o LookupDnsAuthorizationResultOutput) ToLookupDnsAuthorizationResultOutput() LookupDnsAuthorizationResultOutput {
	return o
}

func (o LookupDnsAuthorizationResultOutput) ToLookupDnsAuthorizationResultOutputWithContext(ctx context.Context) LookupDnsAuthorizationResultOutput {
	return o
}

func (o LookupDnsAuthorizationResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupDnsAuthorizationResultOutput) DnsResourceRecords() GetDnsAuthorizationDnsResourceRecordArrayOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) []GetDnsAuthorizationDnsResourceRecord {
		return v.DnsResourceRecords
	}).(GetDnsAuthorizationDnsResourceRecordArrayOutput)
}

func (o LookupDnsAuthorizationResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) string { return v.Domain }).(pulumi.StringOutput)
}

func (o LookupDnsAuthorizationResultOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) map[string]string { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDnsAuthorizationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDnsAuthorizationResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupDnsAuthorizationResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o LookupDnsAuthorizationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDnsAuthorizationResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o LookupDnsAuthorizationResultOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) map[string]string { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

func (o LookupDnsAuthorizationResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDnsAuthorizationResultOutput{})
}
