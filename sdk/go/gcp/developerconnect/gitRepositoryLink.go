// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package developerconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A git repository link to a parent connection.
//
// To get more information about GitRepositoryLink, see:
//
// * [API documentation](https://cloud.google.com/developer-connect/docs/api/reference/rest/v1/projects.locations.connections.gitRepositoryLinks)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/developer-connect/docs/overview)
//
// ## Example Usage
//
// ### Developer Connect Git Repository Link Github Doc
//
// ## Import
//
// GitRepositoryLink can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/connections/{{parent_connection}}/gitRepositoryLinks/{{git_repository_link_id}}`
//
// * `{{project}}/{{location}}/{{parent_connection}}/{{git_repository_link_id}}`
//
// * `{{location}}/{{parent_connection}}/{{git_repository_link_id}}`
//
// When using the `pulumi import` command, GitRepositoryLink can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:developerconnect/gitRepositoryLink:GitRepositoryLink default projects/{{project}}/locations/{{location}}/connections/{{parent_connection}}/gitRepositoryLinks/{{git_repository_link_id}}
// ```
//
// ```sh
// $ pulumi import gcp:developerconnect/gitRepositoryLink:GitRepositoryLink default {{project}}/{{location}}/{{parent_connection}}/{{git_repository_link_id}}
// ```
//
// ```sh
// $ pulumi import gcp:developerconnect/gitRepositoryLink:GitRepositoryLink default {{location}}/{{parent_connection}}/{{git_repository_link_id}}
// ```
type GitRepositoryLink struct {
	pulumi.CustomResourceState

	// Optional. Allows clients to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Required. Git Clone URI.
	CloneUri pulumi.StringOutput `pulumi:"cloneUri"`
	// Output only. [Output only] Create timestamp
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Output only. [Output only] Delete timestamp
	DeleteTime           pulumi.StringOutput    `pulumi:"deleteTime"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Optional. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// Required. The ID to use for the repository, which will become the final component of
	// the repository's resource name. This ID should be unique in the connection.
	// Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
	GitRepositoryLinkId pulumi.StringOutput `pulumi:"gitRepositoryLinkId"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. Resource name of the repository, in the format
	// `projects/*/locations/*/connections/*/gitRepositoryLinks/*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
	ParentConnection pulumi.StringOutput `pulumi:"parentConnection"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Output only. Set to true when the connection is being set up or updated in the
	// background.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// Output only. A system-assigned unique identifier for a the GitRepositoryLink.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. [Output only] Update timestamp
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewGitRepositoryLink registers a new resource with the given unique name, arguments, and options.
func NewGitRepositoryLink(ctx *pulumi.Context,
	name string, args *GitRepositoryLinkArgs, opts ...pulumi.ResourceOption) (*GitRepositoryLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloneUri == nil {
		return nil, errors.New("invalid value for required argument 'CloneUri'")
	}
	if args.GitRepositoryLinkId == nil {
		return nil, errors.New("invalid value for required argument 'GitRepositoryLinkId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ParentConnection == nil {
		return nil, errors.New("invalid value for required argument 'ParentConnection'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitRepositoryLink
	err := ctx.RegisterResource("gcp:developerconnect/gitRepositoryLink:GitRepositoryLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitRepositoryLink gets an existing GitRepositoryLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitRepositoryLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitRepositoryLinkState, opts ...pulumi.ResourceOption) (*GitRepositoryLink, error) {
	var resource GitRepositoryLink
	err := ctx.ReadResource("gcp:developerconnect/gitRepositoryLink:GitRepositoryLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitRepositoryLink resources.
type gitRepositoryLinkState struct {
	// Optional. Allows clients to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Required. Git Clone URI.
	CloneUri *string `pulumi:"cloneUri"`
	// Output only. [Output only] Create timestamp
	CreateTime *string `pulumi:"createTime"`
	// Output only. [Output only] Delete timestamp
	DeleteTime           *string           `pulumi:"deleteTime"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Optional. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Required. The ID to use for the repository, which will become the final component of
	// the repository's resource name. This ID should be unique in the connection.
	// Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
	GitRepositoryLinkId *string `pulumi:"gitRepositoryLinkId"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
	Location *string `pulumi:"location"`
	// Identifier. Resource name of the repository, in the format
	// `projects/*/locations/*/connections/*/gitRepositoryLinks/*`.
	Name *string `pulumi:"name"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
	ParentConnection *string `pulumi:"parentConnection"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Output only. Set to true when the connection is being set up or updated in the
	// background.
	Reconciling *bool `pulumi:"reconciling"`
	// Output only. A system-assigned unique identifier for a the GitRepositoryLink.
	Uid *string `pulumi:"uid"`
	// Output only. [Output only] Update timestamp
	UpdateTime *string `pulumi:"updateTime"`
}

type GitRepositoryLinkState struct {
	// Optional. Allows clients to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Required. Git Clone URI.
	CloneUri pulumi.StringPtrInput
	// Output only. [Output only] Create timestamp
	CreateTime pulumi.StringPtrInput
	// Output only. [Output only] Delete timestamp
	DeleteTime           pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Optional. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Required. The ID to use for the repository, which will become the final component of
	// the repository's resource name. This ID should be unique in the connection.
	// Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
	GitRepositoryLinkId pulumi.StringPtrInput
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
	Location pulumi.StringPtrInput
	// Identifier. Resource name of the repository, in the format
	// `projects/*/locations/*/connections/*/gitRepositoryLinks/*`.
	Name pulumi.StringPtrInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
	ParentConnection pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Output only. Set to true when the connection is being set up or updated in the
	// background.
	Reconciling pulumi.BoolPtrInput
	// Output only. A system-assigned unique identifier for a the GitRepositoryLink.
	Uid pulumi.StringPtrInput
	// Output only. [Output only] Update timestamp
	UpdateTime pulumi.StringPtrInput
}

func (GitRepositoryLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitRepositoryLinkState)(nil)).Elem()
}

type gitRepositoryLinkArgs struct {
	// Optional. Allows clients to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Required. Git Clone URI.
	CloneUri string `pulumi:"cloneUri"`
	// Optional. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Required. The ID to use for the repository, which will become the final component of
	// the repository's resource name. This ID should be unique in the connection.
	// Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
	GitRepositoryLinkId string `pulumi:"gitRepositoryLinkId"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
	Location string `pulumi:"location"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
	ParentConnection string `pulumi:"parentConnection"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a GitRepositoryLink resource.
type GitRepositoryLinkArgs struct {
	// Optional. Allows clients to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Required. Git Clone URI.
	CloneUri pulumi.StringInput
	// Optional. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Required. The ID to use for the repository, which will become the final component of
	// the repository's resource name. This ID should be unique in the connection.
	// Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
	GitRepositoryLinkId pulumi.StringInput
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
	Location pulumi.StringInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
	ParentConnection pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (GitRepositoryLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitRepositoryLinkArgs)(nil)).Elem()
}

type GitRepositoryLinkInput interface {
	pulumi.Input

	ToGitRepositoryLinkOutput() GitRepositoryLinkOutput
	ToGitRepositoryLinkOutputWithContext(ctx context.Context) GitRepositoryLinkOutput
}

func (*GitRepositoryLink) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryLink)(nil)).Elem()
}

func (i *GitRepositoryLink) ToGitRepositoryLinkOutput() GitRepositoryLinkOutput {
	return i.ToGitRepositoryLinkOutputWithContext(context.Background())
}

func (i *GitRepositoryLink) ToGitRepositoryLinkOutputWithContext(ctx context.Context) GitRepositoryLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryLinkOutput)
}

// GitRepositoryLinkArrayInput is an input type that accepts GitRepositoryLinkArray and GitRepositoryLinkArrayOutput values.
// You can construct a concrete instance of `GitRepositoryLinkArrayInput` via:
//
//	GitRepositoryLinkArray{ GitRepositoryLinkArgs{...} }
type GitRepositoryLinkArrayInput interface {
	pulumi.Input

	ToGitRepositoryLinkArrayOutput() GitRepositoryLinkArrayOutput
	ToGitRepositoryLinkArrayOutputWithContext(context.Context) GitRepositoryLinkArrayOutput
}

type GitRepositoryLinkArray []GitRepositoryLinkInput

func (GitRepositoryLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitRepositoryLink)(nil)).Elem()
}

func (i GitRepositoryLinkArray) ToGitRepositoryLinkArrayOutput() GitRepositoryLinkArrayOutput {
	return i.ToGitRepositoryLinkArrayOutputWithContext(context.Background())
}

func (i GitRepositoryLinkArray) ToGitRepositoryLinkArrayOutputWithContext(ctx context.Context) GitRepositoryLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryLinkArrayOutput)
}

// GitRepositoryLinkMapInput is an input type that accepts GitRepositoryLinkMap and GitRepositoryLinkMapOutput values.
// You can construct a concrete instance of `GitRepositoryLinkMapInput` via:
//
//	GitRepositoryLinkMap{ "key": GitRepositoryLinkArgs{...} }
type GitRepositoryLinkMapInput interface {
	pulumi.Input

	ToGitRepositoryLinkMapOutput() GitRepositoryLinkMapOutput
	ToGitRepositoryLinkMapOutputWithContext(context.Context) GitRepositoryLinkMapOutput
}

type GitRepositoryLinkMap map[string]GitRepositoryLinkInput

func (GitRepositoryLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitRepositoryLink)(nil)).Elem()
}

func (i GitRepositoryLinkMap) ToGitRepositoryLinkMapOutput() GitRepositoryLinkMapOutput {
	return i.ToGitRepositoryLinkMapOutputWithContext(context.Background())
}

func (i GitRepositoryLinkMap) ToGitRepositoryLinkMapOutputWithContext(ctx context.Context) GitRepositoryLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryLinkMapOutput)
}

type GitRepositoryLinkOutput struct{ *pulumi.OutputState }

func (GitRepositoryLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryLink)(nil)).Elem()
}

func (o GitRepositoryLinkOutput) ToGitRepositoryLinkOutput() GitRepositoryLinkOutput {
	return o
}

func (o GitRepositoryLinkOutput) ToGitRepositoryLinkOutputWithContext(ctx context.Context) GitRepositoryLinkOutput {
	return o
}

// Optional. Allows clients to store small amounts of arbitrary data.
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o GitRepositoryLinkOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Required. Git Clone URI.
func (o GitRepositoryLinkOutput) CloneUri() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.StringOutput { return v.CloneUri }).(pulumi.StringOutput)
}

// Output only. [Output only] Create timestamp
func (o GitRepositoryLinkOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Output only. [Output only] Delete timestamp
func (o GitRepositoryLinkOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

func (o GitRepositoryLinkOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o GitRepositoryLinkOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Optional. This checksum is computed by the server based on the value of other
// fields, and may be sent on update and delete requests to ensure the
// client has an up-to-date value before proceeding.
func (o GitRepositoryLinkOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.StringPtrOutput { return v.Etag }).(pulumi.StringPtrOutput)
}

// Required. The ID to use for the repository, which will become the final component of
// the repository's resource name. This ID should be unique in the connection.
// Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
func (o GitRepositoryLinkOutput) GitRepositoryLinkId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.StringOutput { return v.GitRepositoryLinkId }).(pulumi.StringOutput)
}

// Optional. Labels as key value pairs
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o GitRepositoryLinkOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
func (o GitRepositoryLinkOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. Resource name of the repository, in the format
// `projects/*/locations/*/connections/*/gitRepositoryLinks/*`.
func (o GitRepositoryLinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `developerconnect.googleapis.com/GitRepositoryLink`.
func (o GitRepositoryLinkOutput) ParentConnection() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.StringOutput { return v.ParentConnection }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o GitRepositoryLinkOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o GitRepositoryLinkOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Output only. Set to true when the connection is being set up or updated in the
// background.
func (o GitRepositoryLinkOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// Output only. A system-assigned unique identifier for a the GitRepositoryLink.
func (o GitRepositoryLinkOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Output only. [Output only] Update timestamp
func (o GitRepositoryLinkOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepositoryLink) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type GitRepositoryLinkArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitRepositoryLink)(nil)).Elem()
}

func (o GitRepositoryLinkArrayOutput) ToGitRepositoryLinkArrayOutput() GitRepositoryLinkArrayOutput {
	return o
}

func (o GitRepositoryLinkArrayOutput) ToGitRepositoryLinkArrayOutputWithContext(ctx context.Context) GitRepositoryLinkArrayOutput {
	return o
}

func (o GitRepositoryLinkArrayOutput) Index(i pulumi.IntInput) GitRepositoryLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitRepositoryLink {
		return vs[0].([]*GitRepositoryLink)[vs[1].(int)]
	}).(GitRepositoryLinkOutput)
}

type GitRepositoryLinkMapOutput struct{ *pulumi.OutputState }

func (GitRepositoryLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitRepositoryLink)(nil)).Elem()
}

func (o GitRepositoryLinkMapOutput) ToGitRepositoryLinkMapOutput() GitRepositoryLinkMapOutput {
	return o
}

func (o GitRepositoryLinkMapOutput) ToGitRepositoryLinkMapOutputWithContext(ctx context.Context) GitRepositoryLinkMapOutput {
	return o
}

func (o GitRepositoryLinkMapOutput) MapIndex(k pulumi.StringInput) GitRepositoryLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitRepositoryLink {
		return vs[0].(map[string]*GitRepositoryLink)[vs[1].(string)]
	}).(GitRepositoryLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryLinkInput)(nil)).Elem(), &GitRepositoryLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryLinkArrayInput)(nil)).Elem(), GitRepositoryLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryLinkMapInput)(nil)).Elem(), GitRepositoryLinkMap{})
	pulumi.RegisterOutputType(GitRepositoryLinkOutput{})
	pulumi.RegisterOutputType(GitRepositoryLinkArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryLinkMapOutput{})
}
