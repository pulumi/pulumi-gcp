// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package developerconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A connection for GitHub, GitHub Enterprise, GitLab, and GitLab Enterprise.
//
// To get more information about Connection, see:
//
// * [API documentation](https://cloud.google.com/developer-connect/docs/api/reference/rest/v1/projects.locations.connections)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/developer-connect/docs/overview)
//
// ## Example Usage
//
// ### Developer Connect Connection New
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Setup permissions. Only needed once per project
//			devconnect_p4sa, err := projects.NewServiceIdentity(ctx, "devconnect-p4sa", &projects.ServiceIdentityArgs{
//				Service: pulumi.String("developerconnect.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			devconnect_secret, err := projects.NewIAMMember(ctx, "devconnect-secret", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/secretmanager.admin"),
//				Member:  devconnect_p4sa.Member,
//			})
//			if err != nil {
//				return err
//			}
//			my_connection, err := developerconnect.NewConnection(ctx, "my-connection", &developerconnect.ConnectionArgs{
//				Location:     pulumi.String("us-central1"),
//				ConnectionId: pulumi.String("tf-test-connection-new"),
//				GithubConfig: &developerconnect.ConnectionGithubConfigArgs{
//					GithubApp: pulumi.String("FIREBASE"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				devconnect_secret,
//			}))
//			if err != nil {
//				return err
//			}
//			ctx.Export("nextSteps", my_connection.InstallationStates)
//			return nil
//		})
//	}
//
// ```
// ### Developer Connect Connection Existing Credentials
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			my_connection, err := developerconnect.NewConnection(ctx, "my-connection", &developerconnect.ConnectionArgs{
//				Location:     pulumi.String("us-central1"),
//				ConnectionId: pulumi.String("tf-test-connection-cred"),
//				GithubConfig: &developerconnect.ConnectionGithubConfigArgs{
//					GithubApp: pulumi.String("DEVELOPER_CONNECT"),
//					AuthorizerCredential: &developerconnect.ConnectionGithubConfigAuthorizerCredentialArgs{
//						OauthTokenSecretVersion: pulumi.String("projects/your-project/secrets/your-secret-id/versions/latest"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("nextSteps", my_connection.InstallationStates)
//			return nil
//		})
//	}
//
// ```
// ### Developer Connect Connection Existing Installation
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			github_token_secret, err := secretmanager.NewSecret(ctx, "github-token-secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("github-token-secret"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: &secretmanager.SecretReplicationAutoArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "my-github-token.txt",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			github_token_secret_version, err := secretmanager.NewSecretVersion(ctx, "github-token-secret-version", &secretmanager.SecretVersionArgs{
//				Secret:     github_token_secret.ID(),
//				SecretData: pulumi.String(invokeFile.Result),
//			})
//			if err != nil {
//				return err
//			}
//			devconnect_p4sa, err := projects.NewServiceIdentity(ctx, "devconnect-p4sa", &projects.ServiceIdentityArgs{
//				Service: pulumi.String("developerconnect.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			p4sa_secretAccessor := organizations.LookupIAMPolicyOutput(ctx, organizations.GetIAMPolicyOutputArgs{
//				Bindings: organizations.GetIAMPolicyBindingArray{
//					&organizations.GetIAMPolicyBindingArgs{
//						Role: pulumi.String("roles/secretmanager.secretAccessor"),
//						Members: pulumi.StringArray{
//							devconnect_p4sa.Member,
//						},
//					},
//				},
//			}, nil)
//			_, err = secretmanager.NewSecretIamPolicy(ctx, "policy", &secretmanager.SecretIamPolicyArgs{
//				SecretId: github_token_secret.SecretId,
//				PolicyData: pulumi.String(p4sa_secretAccessor.ApplyT(func(p4sa_secretAccessor organizations.GetIAMPolicyResult) (*string, error) {
//					return &p4sa_secretAccessor.PolicyData, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = developerconnect.NewConnection(ctx, "my-connection", &developerconnect.ConnectionArgs{
//				Location:     pulumi.String("us-central1"),
//				ConnectionId: pulumi.String("my-connection"),
//				GithubConfig: &developerconnect.ConnectionGithubConfigArgs{
//					GithubApp:         pulumi.String("DEVELOPER_CONNECT"),
//					AppInstallationId: pulumi.String("123123"),
//					AuthorizerCredential: &developerconnect.ConnectionGithubConfigAuthorizerCredentialArgs{
//						OauthTokenSecretVersion: github_token_secret_version.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Developer Connect Connection Github
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := developerconnect.NewConnection(ctx, "my-connection", &developerconnect.ConnectionArgs{
//				Location:     pulumi.String("us-central1"),
//				ConnectionId: pulumi.String("tf-test-connection"),
//				GithubConfig: &developerconnect.ConnectionGithubConfigArgs{
//					GithubApp: pulumi.String("DEVELOPER_CONNECT"),
//					AuthorizerCredential: &developerconnect.ConnectionGithubConfigAuthorizerCredentialArgs{
//						OauthTokenSecretVersion: pulumi.String("projects/devconnect-terraform-creds/secrets/tf-test-do-not-change-github-oauthtoken-e0b9e7/versions/1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Developer Connect Connection Github Doc
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			github_token_secret, err := secretmanager.NewSecret(ctx, "github-token-secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("github-token-secret"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: &secretmanager.SecretReplicationAutoArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "my-github-token.txt",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			github_token_secret_version, err := secretmanager.NewSecretVersion(ctx, "github-token-secret-version", &secretmanager.SecretVersionArgs{
//				Secret:     github_token_secret.ID(),
//				SecretData: pulumi.String(invokeFile.Result),
//			})
//			if err != nil {
//				return err
//			}
//			p4sa_secretAccessor, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/secretmanager.secretAccessor",
//						Members: []string{
//							"serviceAccount:service-123456789@gcp-sa-devconnect.iam.gserviceaccount.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretIamPolicy(ctx, "policy", &secretmanager.SecretIamPolicyArgs{
//				SecretId:   github_token_secret.SecretId,
//				PolicyData: pulumi.String(p4sa_secretAccessor.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = developerconnect.NewConnection(ctx, "my-connection", &developerconnect.ConnectionArgs{
//				Location:     pulumi.String("us-central1"),
//				ConnectionId: pulumi.String("my-connection"),
//				GithubConfig: &developerconnect.ConnectionGithubConfigArgs{
//					GithubApp:         pulumi.String("DEVELOPER_CONNECT"),
//					AppInstallationId: pulumi.String("123123"),
//					AuthorizerCredential: &developerconnect.ConnectionGithubConfigAuthorizerCredentialArgs{
//						OauthTokenSecretVersion: github_token_secret_version.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Developer Connect Connection Github Enterprise
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := developerconnect.NewConnection(ctx, "my-connection", &developerconnect.ConnectionArgs{
//				Location:     pulumi.String("us-central1"),
//				ConnectionId: pulumi.String("tf-test-connection"),
//				GithubEnterpriseConfig: &developerconnect.ConnectionGithubEnterpriseConfigArgs{
//					HostUri:                    pulumi.String("https://ghe.proctor-staging-test.com"),
//					AppId:                      pulumi.String("864434"),
//					PrivateKeySecretVersion:    pulumi.String("projects/devconnect-terraform-creds/secrets/tf-test-ghe-do-not-change-ghe-private-key-f522d2/versions/latest"),
//					WebhookSecretSecretVersion: pulumi.String("projects/devconnect-terraform-creds/secrets/tf-test-ghe-do-not-change-ghe-webhook-secret-3c806f/versions/latest"),
//					AppInstallationId:          pulumi.String("837537"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Developer Connect Connection Github Enterprise Doc
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			private_key_secret, err := secretmanager.NewSecret(ctx, "private-key-secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("ghe-pk-secret"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: &secretmanager.SecretReplicationAutoArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "private-key.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			private_key_secret_version, err := secretmanager.NewSecretVersion(ctx, "private-key-secret-version", &secretmanager.SecretVersionArgs{
//				Secret:     private_key_secret.ID(),
//				SecretData: pulumi.String(invokeFile.Result),
//			})
//			if err != nil {
//				return err
//			}
//			webhook_secret_secret, err := secretmanager.NewSecret(ctx, "webhook-secret-secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("ghe-token-secret"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: &secretmanager.SecretReplicationAutoArgs{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			webhook_secret_secret_version, err := secretmanager.NewSecretVersion(ctx, "webhook-secret-secret-version", &secretmanager.SecretVersionArgs{
//				Secret:     webhook_secret_secret.ID(),
//				SecretData: pulumi.String("<webhook-secret-data>"),
//			})
//			if err != nil {
//				return err
//			}
//			p4sa_secretAccessor, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/secretmanager.secretAccessor",
//						Members: []string{
//							"serviceAccount:service-123456789@gcp-sa-devconnect.iam.gserviceaccount.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			policy_pk, err := secretmanager.NewSecretIamPolicy(ctx, "policy-pk", &secretmanager.SecretIamPolicyArgs{
//				SecretId:   private_key_secret.SecretId,
//				PolicyData: pulumi.String(p4sa_secretAccessor.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			policy_whs, err := secretmanager.NewSecretIamPolicy(ctx, "policy-whs", &secretmanager.SecretIamPolicyArgs{
//				SecretId:   webhook_secret_secret.SecretId,
//				PolicyData: pulumi.String(p4sa_secretAccessor.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = developerconnect.NewConnection(ctx, "my-connection", &developerconnect.ConnectionArgs{
//				Location:     pulumi.String("us-central1"),
//				ConnectionId: pulumi.String("my-connection"),
//				GithubEnterpriseConfig: &developerconnect.ConnectionGithubEnterpriseConfigArgs{
//					HostUri:                    pulumi.String("https://ghe.com"),
//					PrivateKeySecretVersion:    private_key_secret_version.ID(),
//					WebhookSecretSecretVersion: webhook_secret_secret_version.ID(),
//					AppId:                      pulumi.String("100"),
//					AppInstallationId:          pulumi.String("123123"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				policy_pk,
//				policy_whs,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Developer Connect Connection Gitlab
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := developerconnect.NewConnection(ctx, "my-connection", &developerconnect.ConnectionArgs{
//				Location:     pulumi.String("us-central1"),
//				ConnectionId: pulumi.String("tf-test-connection"),
//				GitlabConfig: &developerconnect.ConnectionGitlabConfigArgs{
//					WebhookSecretSecretVersion: pulumi.String("projects/devconnect-terraform-creds/secrets/gitlab-webhook/versions/latest"),
//					ReadAuthorizerCredential: &developerconnect.ConnectionGitlabConfigReadAuthorizerCredentialArgs{
//						UserTokenSecretVersion: pulumi.String("projects/devconnect-terraform-creds/secrets/gitlab-read-cred/versions/latest"),
//					},
//					AuthorizerCredential: &developerconnect.ConnectionGitlabConfigAuthorizerCredentialArgs{
//						UserTokenSecretVersion: pulumi.String("projects/devconnect-terraform-creds/secrets/gitlab-auth-cred/versions/latest"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Developer Connect Connection Gitlab Enterprise
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := developerconnect.NewConnection(ctx, "my-connection", &developerconnect.ConnectionArgs{
//				Location:     pulumi.String("us-central1"),
//				ConnectionId: pulumi.String("tf-test-connection"),
//				GitlabEnterpriseConfig: &developerconnect.ConnectionGitlabEnterpriseConfigArgs{
//					HostUri:                    pulumi.String("https://gle-us-central1.gcb-test.com"),
//					WebhookSecretSecretVersion: pulumi.String("projects/devconnect-terraform-creds/secrets/gitlab-enterprise-webhook/versions/latest"),
//					ReadAuthorizerCredential: &developerconnect.ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs{
//						UserTokenSecretVersion: pulumi.String("projects/devconnect-terraform-creds/secrets/gitlab-enterprise-read-cred/versions/latest"),
//					},
//					AuthorizerCredential: &developerconnect.ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs{
//						UserTokenSecretVersion: pulumi.String("projects/devconnect-terraform-creds/secrets/gitlab-enterprise-auth-cred/versions/latest"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Developer Connect Connection Bbc
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := developerconnect.NewConnection(ctx, "my-connection", &developerconnect.ConnectionArgs{
//				Location:     pulumi.String("us-central1"),
//				ConnectionId: pulumi.String("tf-test-connection"),
//				BitbucketCloudConfig: &developerconnect.ConnectionBitbucketCloudConfigArgs{
//					Workspace:                  pulumi.String("proctor-test"),
//					WebhookSecretSecretVersion: pulumi.String("projects/devconnect-terraform-creds/secrets/bbc-webhook/versions/latest"),
//					ReadAuthorizerCredential: &developerconnect.ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs{
//						UserTokenSecretVersion: pulumi.String("projects/devconnect-terraform-creds/secrets/bbc-read-token/versions/latest"),
//					},
//					AuthorizerCredential: &developerconnect.ConnectionBitbucketCloudConfigAuthorizerCredentialArgs{
//						UserTokenSecretVersion: pulumi.String("projects/devconnect-terraform-creds/secrets/bbc-auth-token/versions/latest"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Developer Connect Connection Bbdc
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := developerconnect.NewConnection(ctx, "my-connection", &developerconnect.ConnectionArgs{
//				Location:     pulumi.String("us-central1"),
//				ConnectionId: pulumi.String("tf-test-connection"),
//				BitbucketDataCenterConfig: &developerconnect.ConnectionBitbucketDataCenterConfigArgs{
//					HostUri:                    pulumi.String("https://bitbucket-us-central.gcb-test.com"),
//					WebhookSecretSecretVersion: pulumi.String("projects/devconnect-terraform-creds/secrets/bbdc-webhook/versions/latest"),
//					ReadAuthorizerCredential: &developerconnect.ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs{
//						UserTokenSecretVersion: pulumi.String("projects/devconnect-terraform-creds/secrets/bbdc-read-token/versions/latest"),
//					},
//					AuthorizerCredential: &developerconnect.ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs{
//						UserTokenSecretVersion: pulumi.String("projects/devconnect-terraform-creds/secrets/bbdc-auth-token/versions/latest"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Import
//
// Connection can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/connections/{{connection_id}}`
//
// * `{{project}}/{{location}}/{{connection_id}}`
//
// * `{{location}}/{{connection_id}}`
//
// When using the `pulumi import` command, Connection can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:developerconnect/connection:Connection default projects/{{project}}/locations/{{location}}/connections/{{connection_id}}
// ```
//
// ```sh
// $ pulumi import gcp:developerconnect/connection:Connection default {{project}}/{{location}}/{{connection_id}}
// ```
//
// ```sh
// $ pulumi import gcp:developerconnect/connection:Connection default {{location}}/{{connection_id}}
// ```
type Connection struct {
	pulumi.CustomResourceState

	// Optional. Allows clients to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Configuration for connections to an instance of Bitbucket Cloud.
	// Structure is documented below.
	BitbucketCloudConfig ConnectionBitbucketCloudConfigPtrOutput `pulumi:"bitbucketCloudConfig"`
	// Configuration for connections to an instance of Bitbucket Data Center.
	// Structure is documented below.
	BitbucketDataCenterConfig ConnectionBitbucketDataCenterConfigPtrOutput `pulumi:"bitbucketDataCenterConfig"`
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// connectionId from the methodSignature of Create RPC
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// Output only. [Output only] Create timestamp
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The crypto key configuration. This field is used by the Customer-managed
	// encryption keys (CMEK) feature.
	// Structure is documented below.
	CryptoKeyConfig ConnectionCryptoKeyConfigPtrOutput `pulumi:"cryptoKeyConfig"`
	// Output only. [Output only] Delete timestamp
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// Optional. If disabled is set to true, functionality is disabled for this connection.
	// Repository based API methods and webhooks processing for repositories in
	// this connection will be disabled.
	Disabled             pulumi.BoolPtrOutput   `pulumi:"disabled"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Optional. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// Configuration for connections to github.com.
	// Structure is documented below.
	GithubConfig ConnectionGithubConfigPtrOutput `pulumi:"githubConfig"`
	// Configuration for connections to an instance of GitHub Enterprise.
	// Structure is documented below.
	GithubEnterpriseConfig ConnectionGithubEnterpriseConfigPtrOutput `pulumi:"githubEnterpriseConfig"`
	// Configuration for connections to gitlab.com.
	// Structure is documented below.
	GitlabConfig ConnectionGitlabConfigPtrOutput `pulumi:"gitlabConfig"`
	// Configuration for connections to an instance of GitLab Enterprise.
	// Structure is documented below.
	GitlabEnterpriseConfig ConnectionGitlabEnterpriseConfigPtrOutput `pulumi:"gitlabEnterpriseConfig"`
	// Describes stage and necessary actions to be taken by the
	// user to complete the installation. Used for GitHub and GitHub Enterprise
	// based connections.
	// Structure is documented below.
	InstallationStates ConnectionInstallationStateArrayOutput `pulumi:"installationStates"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The resource name of the connection, in the format
	// `projects/{project}/locations/{location}/connections/{connection_id}`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Output only. Set to true when the connection is being set up or updated in the
	// background.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// Output only. A system-assigned unique identifier for a the GitRepositoryLink.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. [Output only] Update timestamp
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connection
	err := ctx.RegisterResource("gcp:developerconnect/connection:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("gcp:developerconnect/connection:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
	// Optional. Allows clients to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Configuration for connections to an instance of Bitbucket Cloud.
	// Structure is documented below.
	BitbucketCloudConfig *ConnectionBitbucketCloudConfig `pulumi:"bitbucketCloudConfig"`
	// Configuration for connections to an instance of Bitbucket Data Center.
	// Structure is documented below.
	BitbucketDataCenterConfig *ConnectionBitbucketDataCenterConfig `pulumi:"bitbucketDataCenterConfig"`
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// connectionId from the methodSignature of Create RPC
	ConnectionId *string `pulumi:"connectionId"`
	// Output only. [Output only] Create timestamp
	CreateTime *string `pulumi:"createTime"`
	// The crypto key configuration. This field is used by the Customer-managed
	// encryption keys (CMEK) feature.
	// Structure is documented below.
	CryptoKeyConfig *ConnectionCryptoKeyConfig `pulumi:"cryptoKeyConfig"`
	// Output only. [Output only] Delete timestamp
	DeleteTime *string `pulumi:"deleteTime"`
	// Optional. If disabled is set to true, functionality is disabled for this connection.
	// Repository based API methods and webhooks processing for repositories in
	// this connection will be disabled.
	Disabled             *bool             `pulumi:"disabled"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Optional. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Configuration for connections to github.com.
	// Structure is documented below.
	GithubConfig *ConnectionGithubConfig `pulumi:"githubConfig"`
	// Configuration for connections to an instance of GitHub Enterprise.
	// Structure is documented below.
	GithubEnterpriseConfig *ConnectionGithubEnterpriseConfig `pulumi:"githubEnterpriseConfig"`
	// Configuration for connections to gitlab.com.
	// Structure is documented below.
	GitlabConfig *ConnectionGitlabConfig `pulumi:"gitlabConfig"`
	// Configuration for connections to an instance of GitLab Enterprise.
	// Structure is documented below.
	GitlabEnterpriseConfig *ConnectionGitlabEnterpriseConfig `pulumi:"gitlabEnterpriseConfig"`
	// Describes stage and necessary actions to be taken by the
	// user to complete the installation. Used for GitHub and GitHub Enterprise
	// based connections.
	// Structure is documented below.
	InstallationStates []ConnectionInstallationState `pulumi:"installationStates"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// Identifier. The resource name of the connection, in the format
	// `projects/{project}/locations/{location}/connections/{connection_id}`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Output only. Set to true when the connection is being set up or updated in the
	// background.
	Reconciling *bool `pulumi:"reconciling"`
	// Output only. A system-assigned unique identifier for a the GitRepositoryLink.
	Uid *string `pulumi:"uid"`
	// Output only. [Output only] Update timestamp
	UpdateTime *string `pulumi:"updateTime"`
}

type ConnectionState struct {
	// Optional. Allows clients to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Configuration for connections to an instance of Bitbucket Cloud.
	// Structure is documented below.
	BitbucketCloudConfig ConnectionBitbucketCloudConfigPtrInput
	// Configuration for connections to an instance of Bitbucket Data Center.
	// Structure is documented below.
	BitbucketDataCenterConfig ConnectionBitbucketDataCenterConfigPtrInput
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// connectionId from the methodSignature of Create RPC
	ConnectionId pulumi.StringPtrInput
	// Output only. [Output only] Create timestamp
	CreateTime pulumi.StringPtrInput
	// The crypto key configuration. This field is used by the Customer-managed
	// encryption keys (CMEK) feature.
	// Structure is documented below.
	CryptoKeyConfig ConnectionCryptoKeyConfigPtrInput
	// Output only. [Output only] Delete timestamp
	DeleteTime pulumi.StringPtrInput
	// Optional. If disabled is set to true, functionality is disabled for this connection.
	// Repository based API methods and webhooks processing for repositories in
	// this connection will be disabled.
	Disabled             pulumi.BoolPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Optional. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Configuration for connections to github.com.
	// Structure is documented below.
	GithubConfig ConnectionGithubConfigPtrInput
	// Configuration for connections to an instance of GitHub Enterprise.
	// Structure is documented below.
	GithubEnterpriseConfig ConnectionGithubEnterpriseConfigPtrInput
	// Configuration for connections to gitlab.com.
	// Structure is documented below.
	GitlabConfig ConnectionGitlabConfigPtrInput
	// Configuration for connections to an instance of GitLab Enterprise.
	// Structure is documented below.
	GitlabEnterpriseConfig ConnectionGitlabEnterpriseConfigPtrInput
	// Describes stage and necessary actions to be taken by the
	// user to complete the installation. Used for GitHub and GitHub Enterprise
	// based connections.
	// Structure is documented below.
	InstallationStates ConnectionInstallationStateArrayInput
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// Identifier. The resource name of the connection, in the format
	// `projects/{project}/locations/{location}/connections/{connection_id}`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Output only. Set to true when the connection is being set up or updated in the
	// background.
	Reconciling pulumi.BoolPtrInput
	// Output only. A system-assigned unique identifier for a the GitRepositoryLink.
	Uid pulumi.StringPtrInput
	// Output only. [Output only] Update timestamp
	UpdateTime pulumi.StringPtrInput
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// Optional. Allows clients to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Configuration for connections to an instance of Bitbucket Cloud.
	// Structure is documented below.
	BitbucketCloudConfig *ConnectionBitbucketCloudConfig `pulumi:"bitbucketCloudConfig"`
	// Configuration for connections to an instance of Bitbucket Data Center.
	// Structure is documented below.
	BitbucketDataCenterConfig *ConnectionBitbucketDataCenterConfig `pulumi:"bitbucketDataCenterConfig"`
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// connectionId from the methodSignature of Create RPC
	ConnectionId string `pulumi:"connectionId"`
	// The crypto key configuration. This field is used by the Customer-managed
	// encryption keys (CMEK) feature.
	// Structure is documented below.
	CryptoKeyConfig *ConnectionCryptoKeyConfig `pulumi:"cryptoKeyConfig"`
	// Optional. If disabled is set to true, functionality is disabled for this connection.
	// Repository based API methods and webhooks processing for repositories in
	// this connection will be disabled.
	Disabled *bool `pulumi:"disabled"`
	// Optional. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Configuration for connections to github.com.
	// Structure is documented below.
	GithubConfig *ConnectionGithubConfig `pulumi:"githubConfig"`
	// Configuration for connections to an instance of GitHub Enterprise.
	// Structure is documented below.
	GithubEnterpriseConfig *ConnectionGithubEnterpriseConfig `pulumi:"githubEnterpriseConfig"`
	// Configuration for connections to gitlab.com.
	// Structure is documented below.
	GitlabConfig *ConnectionGitlabConfig `pulumi:"gitlabConfig"`
	// Configuration for connections to an instance of GitLab Enterprise.
	// Structure is documented below.
	GitlabEnterpriseConfig *ConnectionGitlabEnterpriseConfig `pulumi:"gitlabEnterpriseConfig"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// Optional. Allows clients to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Configuration for connections to an instance of Bitbucket Cloud.
	// Structure is documented below.
	BitbucketCloudConfig ConnectionBitbucketCloudConfigPtrInput
	// Configuration for connections to an instance of Bitbucket Data Center.
	// Structure is documented below.
	BitbucketDataCenterConfig ConnectionBitbucketDataCenterConfigPtrInput
	// Required. Id of the requesting object
	// If auto-generating Id server-side, remove this field and
	// connectionId from the methodSignature of Create RPC
	ConnectionId pulumi.StringInput
	// The crypto key configuration. This field is used by the Customer-managed
	// encryption keys (CMEK) feature.
	// Structure is documented below.
	CryptoKeyConfig ConnectionCryptoKeyConfigPtrInput
	// Optional. If disabled is set to true, functionality is disabled for this connection.
	// Repository based API methods and webhooks processing for repositories in
	// this connection will be disabled.
	Disabled pulumi.BoolPtrInput
	// Optional. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Configuration for connections to github.com.
	// Structure is documented below.
	GithubConfig ConnectionGithubConfigPtrInput
	// Configuration for connections to an instance of GitHub Enterprise.
	// Structure is documented below.
	GithubEnterpriseConfig ConnectionGithubEnterpriseConfigPtrInput
	// Configuration for connections to gitlab.com.
	// Structure is documented below.
	GitlabConfig ConnectionGitlabConfigPtrInput
	// Configuration for connections to an instance of GitLab Enterprise.
	// Structure is documented below.
	GitlabEnterpriseConfig ConnectionGitlabEnterpriseConfigPtrInput
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (*Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i *Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

// ConnectionArrayInput is an input type that accepts ConnectionArray and ConnectionArrayOutput values.
// You can construct a concrete instance of `ConnectionArrayInput` via:
//
//	ConnectionArray{ ConnectionArgs{...} }
type ConnectionArrayInput interface {
	pulumi.Input

	ToConnectionArrayOutput() ConnectionArrayOutput
	ToConnectionArrayOutputWithContext(context.Context) ConnectionArrayOutput
}

type ConnectionArray []ConnectionInput

func (ConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (i ConnectionArray) ToConnectionArrayOutput() ConnectionArrayOutput {
	return i.ToConnectionArrayOutputWithContext(context.Background())
}

func (i ConnectionArray) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionArrayOutput)
}

// ConnectionMapInput is an input type that accepts ConnectionMap and ConnectionMapOutput values.
// You can construct a concrete instance of `ConnectionMapInput` via:
//
//	ConnectionMap{ "key": ConnectionArgs{...} }
type ConnectionMapInput interface {
	pulumi.Input

	ToConnectionMapOutput() ConnectionMapOutput
	ToConnectionMapOutputWithContext(context.Context) ConnectionMapOutput
}

type ConnectionMap map[string]ConnectionInput

func (ConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (i ConnectionMap) ToConnectionMapOutput() ConnectionMapOutput {
	return i.ToConnectionMapOutputWithContext(context.Background())
}

func (i ConnectionMap) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionMapOutput)
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

// Optional. Allows clients to store small amounts of arbitrary data.
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o ConnectionOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Configuration for connections to an instance of Bitbucket Cloud.
// Structure is documented below.
func (o ConnectionOutput) BitbucketCloudConfig() ConnectionBitbucketCloudConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionBitbucketCloudConfigPtrOutput { return v.BitbucketCloudConfig }).(ConnectionBitbucketCloudConfigPtrOutput)
}

// Configuration for connections to an instance of Bitbucket Data Center.
// Structure is documented below.
func (o ConnectionOutput) BitbucketDataCenterConfig() ConnectionBitbucketDataCenterConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionBitbucketDataCenterConfigPtrOutput { return v.BitbucketDataCenterConfig }).(ConnectionBitbucketDataCenterConfigPtrOutput)
}

// Required. Id of the requesting object
// If auto-generating Id server-side, remove this field and
// connectionId from the methodSignature of Create RPC
func (o ConnectionOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// Output only. [Output only] Create timestamp
func (o ConnectionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The crypto key configuration. This field is used by the Customer-managed
// encryption keys (CMEK) feature.
// Structure is documented below.
func (o ConnectionOutput) CryptoKeyConfig() ConnectionCryptoKeyConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionCryptoKeyConfigPtrOutput { return v.CryptoKeyConfig }).(ConnectionCryptoKeyConfigPtrOutput)
}

// Output only. [Output only] Delete timestamp
func (o ConnectionOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// Optional. If disabled is set to true, functionality is disabled for this connection.
// Repository based API methods and webhooks processing for repositories in
// this connection will be disabled.
func (o ConnectionOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o ConnectionOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o ConnectionOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Optional. This checksum is computed by the server based on the value of other
// fields, and may be sent on update and delete requests to ensure the
// client has an up-to-date value before proceeding.
func (o ConnectionOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.Etag }).(pulumi.StringPtrOutput)
}

// Configuration for connections to github.com.
// Structure is documented below.
func (o ConnectionOutput) GithubConfig() ConnectionGithubConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionGithubConfigPtrOutput { return v.GithubConfig }).(ConnectionGithubConfigPtrOutput)
}

// Configuration for connections to an instance of GitHub Enterprise.
// Structure is documented below.
func (o ConnectionOutput) GithubEnterpriseConfig() ConnectionGithubEnterpriseConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionGithubEnterpriseConfigPtrOutput { return v.GithubEnterpriseConfig }).(ConnectionGithubEnterpriseConfigPtrOutput)
}

// Configuration for connections to gitlab.com.
// Structure is documented below.
func (o ConnectionOutput) GitlabConfig() ConnectionGitlabConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionGitlabConfigPtrOutput { return v.GitlabConfig }).(ConnectionGitlabConfigPtrOutput)
}

// Configuration for connections to an instance of GitLab Enterprise.
// Structure is documented below.
func (o ConnectionOutput) GitlabEnterpriseConfig() ConnectionGitlabEnterpriseConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionGitlabEnterpriseConfigPtrOutput { return v.GitlabEnterpriseConfig }).(ConnectionGitlabEnterpriseConfigPtrOutput)
}

// Describes stage and necessary actions to be taken by the
// user to complete the installation. Used for GitHub and GitHub Enterprise
// based connections.
// Structure is documented below.
func (o ConnectionOutput) InstallationStates() ConnectionInstallationStateArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionInstallationStateArrayOutput { return v.InstallationStates }).(ConnectionInstallationStateArrayOutput)
}

// Optional. Labels as key value pairs
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o ConnectionOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o ConnectionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name of the connection, in the format
// `projects/{project}/locations/{location}/connections/{connection_id}`.
func (o ConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ConnectionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o ConnectionOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Output only. Set to true when the connection is being set up or updated in the
// background.
func (o ConnectionOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// Output only. A system-assigned unique identifier for a the GitRepositoryLink.
func (o ConnectionOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Output only. [Output only] Update timestamp
func (o ConnectionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ConnectionArrayOutput struct{ *pulumi.OutputState }

func (ConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (o ConnectionArrayOutput) ToConnectionArrayOutput() ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) Index(i pulumi.IntInput) ConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].([]*Connection)[vs[1].(int)]
	}).(ConnectionOutput)
}

type ConnectionMapOutput struct{ *pulumi.OutputState }

func (ConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (o ConnectionMapOutput) ToConnectionMapOutput() ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) MapIndex(k pulumi.StringInput) ConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].(map[string]*Connection)[vs[1].(string)]
	}).(ConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), &Connection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionArrayInput)(nil)).Elem(), ConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionMapInput)(nil)).Elem(), ConnectionMap{})
	pulumi.RegisterOutputType(ConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionArrayOutput{})
	pulumi.RegisterOutputType(ConnectionMapOutput{})
}
