// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package developerconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Description
//
// ## Example Usage
//
// ## Import
//
// InsightsConfig can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/insightsConfigs/{{insights_config_id}}`
//
// * `{{project}}/{{location}}/{{insights_config_id}}`
//
// * `{{location}}/{{insights_config_id}}`
//
// When using the `pulumi import` command, InsightsConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:developerconnect/insightsConfig:InsightsConfig default projects/{{project}}/locations/{{location}}/insightsConfigs/{{insights_config_id}}
// ```
//
// ```sh
// $ pulumi import gcp:developerconnect/insightsConfig:InsightsConfig default {{project}}/{{location}}/{{insights_config_id}}
// ```
//
// ```sh
// $ pulumi import gcp:developerconnect/insightsConfig:InsightsConfig default {{location}}/{{insights_config_id}}
// ```
type InsightsConfig struct {
	pulumi.CustomResourceState

	// User specified annotations. See https://google.aip.dev/148#annotations
	// for more details such as format and size limitations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// The name of the App Hub Application.
	// Format:
	// projects/{project}/locations/{location}/applications/{application}
	AppHubApplication pulumi.StringOutput `pulumi:"appHubApplication"`
	// The artifact configurations of the artifacts that are deployed.
	// Structure is documented below.
	ArtifactConfigs InsightsConfigArtifactConfigArrayOutput `pulumi:"artifactConfigs"`
	// [Output only] Create timestamp
	CreateTime           pulumi.StringOutput    `pulumi:"createTime"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Any errors that occurred while setting up the InsightsConfig.
	// Each error will be in the format: `field_name: errorMessage`, e.g.
	// GetAppHubApplication: Permission denied while getting App Hub
	// application. Please grant permissions to the P4SA.
	// Structure is documented below.
	Errors InsightsConfigErrorArrayOutput `pulumi:"errors"`
	// ID of the requesting InsightsConfig.
	InsightsConfigId pulumi.StringOutput `pulumi:"insightsConfigId"`
	// Set of labels associated with an InsightsConfig.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The name of the InsightsConfig.
	// Format:
	// projects/{project}/locations/{location}/insightsConfigs/{insightsConfig}
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Reconciling (https://google.aip.dev/128#reconciliation).
	// Set to true if the current state of InsightsConfig does not match the
	// user's intended state, and the service is actively updating the resource to
	// reconcile them. This can happen due to user-triggered updates or
	// system actions like failover or maintenance.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// The runtime configurations where the application is deployed.
	// Structure is documented below.
	RuntimeConfigs InsightsConfigRuntimeConfigArrayOutput `pulumi:"runtimeConfigs"`
	// (Output)
	// The state of the Runtime.
	// Possible values:
	// STATE_UNSPECIFIED
	// LINKED
	// UNLINKED
	State pulumi.StringOutput `pulumi:"state"`
	// [Output only] Update timestamp
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewInsightsConfig registers a new resource with the given unique name, arguments, and options.
func NewInsightsConfig(ctx *pulumi.Context,
	name string, args *InsightsConfigArgs, opts ...pulumi.ResourceOption) (*InsightsConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppHubApplication == nil {
		return nil, errors.New("invalid value for required argument 'AppHubApplication'")
	}
	if args.InsightsConfigId == nil {
		return nil, errors.New("invalid value for required argument 'InsightsConfigId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InsightsConfig
	err := ctx.RegisterResource("gcp:developerconnect/insightsConfig:InsightsConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInsightsConfig gets an existing InsightsConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInsightsConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InsightsConfigState, opts ...pulumi.ResourceOption) (*InsightsConfig, error) {
	var resource InsightsConfig
	err := ctx.ReadResource("gcp:developerconnect/insightsConfig:InsightsConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InsightsConfig resources.
type insightsConfigState struct {
	// User specified annotations. See https://google.aip.dev/148#annotations
	// for more details such as format and size limitations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The name of the App Hub Application.
	// Format:
	// projects/{project}/locations/{location}/applications/{application}
	AppHubApplication *string `pulumi:"appHubApplication"`
	// The artifact configurations of the artifacts that are deployed.
	// Structure is documented below.
	ArtifactConfigs []InsightsConfigArtifactConfig `pulumi:"artifactConfigs"`
	// [Output only] Create timestamp
	CreateTime           *string           `pulumi:"createTime"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Any errors that occurred while setting up the InsightsConfig.
	// Each error will be in the format: `field_name: errorMessage`, e.g.
	// GetAppHubApplication: Permission denied while getting App Hub
	// application. Please grant permissions to the P4SA.
	// Structure is documented below.
	Errors []InsightsConfigError `pulumi:"errors"`
	// ID of the requesting InsightsConfig.
	InsightsConfigId *string `pulumi:"insightsConfigId"`
	// Set of labels associated with an InsightsConfig.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// Identifier. The name of the InsightsConfig.
	// Format:
	// projects/{project}/locations/{location}/insightsConfigs/{insightsConfig}
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Reconciling (https://google.aip.dev/128#reconciliation).
	// Set to true if the current state of InsightsConfig does not match the
	// user's intended state, and the service is actively updating the resource to
	// reconcile them. This can happen due to user-triggered updates or
	// system actions like failover or maintenance.
	Reconciling *bool `pulumi:"reconciling"`
	// The runtime configurations where the application is deployed.
	// Structure is documented below.
	RuntimeConfigs []InsightsConfigRuntimeConfig `pulumi:"runtimeConfigs"`
	// (Output)
	// The state of the Runtime.
	// Possible values:
	// STATE_UNSPECIFIED
	// LINKED
	// UNLINKED
	State *string `pulumi:"state"`
	// [Output only] Update timestamp
	UpdateTime *string `pulumi:"updateTime"`
}

type InsightsConfigState struct {
	// User specified annotations. See https://google.aip.dev/148#annotations
	// for more details such as format and size limitations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The name of the App Hub Application.
	// Format:
	// projects/{project}/locations/{location}/applications/{application}
	AppHubApplication pulumi.StringPtrInput
	// The artifact configurations of the artifacts that are deployed.
	// Structure is documented below.
	ArtifactConfigs InsightsConfigArtifactConfigArrayInput
	// [Output only] Create timestamp
	CreateTime           pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Any errors that occurred while setting up the InsightsConfig.
	// Each error will be in the format: `field_name: errorMessage`, e.g.
	// GetAppHubApplication: Permission denied while getting App Hub
	// application. Please grant permissions to the P4SA.
	// Structure is documented below.
	Errors InsightsConfigErrorArrayInput
	// ID of the requesting InsightsConfig.
	InsightsConfigId pulumi.StringPtrInput
	// Set of labels associated with an InsightsConfig.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// Identifier. The name of the InsightsConfig.
	// Format:
	// projects/{project}/locations/{location}/insightsConfigs/{insightsConfig}
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Reconciling (https://google.aip.dev/128#reconciliation).
	// Set to true if the current state of InsightsConfig does not match the
	// user's intended state, and the service is actively updating the resource to
	// reconcile them. This can happen due to user-triggered updates or
	// system actions like failover or maintenance.
	Reconciling pulumi.BoolPtrInput
	// The runtime configurations where the application is deployed.
	// Structure is documented below.
	RuntimeConfigs InsightsConfigRuntimeConfigArrayInput
	// (Output)
	// The state of the Runtime.
	// Possible values:
	// STATE_UNSPECIFIED
	// LINKED
	// UNLINKED
	State pulumi.StringPtrInput
	// [Output only] Update timestamp
	UpdateTime pulumi.StringPtrInput
}

func (InsightsConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*insightsConfigState)(nil)).Elem()
}

type insightsConfigArgs struct {
	// User specified annotations. See https://google.aip.dev/148#annotations
	// for more details such as format and size limitations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The name of the App Hub Application.
	// Format:
	// projects/{project}/locations/{location}/applications/{application}
	AppHubApplication string `pulumi:"appHubApplication"`
	// The artifact configurations of the artifacts that are deployed.
	// Structure is documented below.
	ArtifactConfigs []InsightsConfigArtifactConfig `pulumi:"artifactConfigs"`
	// ID of the requesting InsightsConfig.
	InsightsConfigId string `pulumi:"insightsConfigId"`
	// Set of labels associated with an InsightsConfig.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a InsightsConfig resource.
type InsightsConfigArgs struct {
	// User specified annotations. See https://google.aip.dev/148#annotations
	// for more details such as format and size limitations.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The name of the App Hub Application.
	// Format:
	// projects/{project}/locations/{location}/applications/{application}
	AppHubApplication pulumi.StringInput
	// The artifact configurations of the artifacts that are deployed.
	// Structure is documented below.
	ArtifactConfigs InsightsConfigArtifactConfigArrayInput
	// ID of the requesting InsightsConfig.
	InsightsConfigId pulumi.StringInput
	// Set of labels associated with an InsightsConfig.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (InsightsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*insightsConfigArgs)(nil)).Elem()
}

type InsightsConfigInput interface {
	pulumi.Input

	ToInsightsConfigOutput() InsightsConfigOutput
	ToInsightsConfigOutputWithContext(ctx context.Context) InsightsConfigOutput
}

func (*InsightsConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**InsightsConfig)(nil)).Elem()
}

func (i *InsightsConfig) ToInsightsConfigOutput() InsightsConfigOutput {
	return i.ToInsightsConfigOutputWithContext(context.Background())
}

func (i *InsightsConfig) ToInsightsConfigOutputWithContext(ctx context.Context) InsightsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightsConfigOutput)
}

// InsightsConfigArrayInput is an input type that accepts InsightsConfigArray and InsightsConfigArrayOutput values.
// You can construct a concrete instance of `InsightsConfigArrayInput` via:
//
//	InsightsConfigArray{ InsightsConfigArgs{...} }
type InsightsConfigArrayInput interface {
	pulumi.Input

	ToInsightsConfigArrayOutput() InsightsConfigArrayOutput
	ToInsightsConfigArrayOutputWithContext(context.Context) InsightsConfigArrayOutput
}

type InsightsConfigArray []InsightsConfigInput

func (InsightsConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InsightsConfig)(nil)).Elem()
}

func (i InsightsConfigArray) ToInsightsConfigArrayOutput() InsightsConfigArrayOutput {
	return i.ToInsightsConfigArrayOutputWithContext(context.Background())
}

func (i InsightsConfigArray) ToInsightsConfigArrayOutputWithContext(ctx context.Context) InsightsConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightsConfigArrayOutput)
}

// InsightsConfigMapInput is an input type that accepts InsightsConfigMap and InsightsConfigMapOutput values.
// You can construct a concrete instance of `InsightsConfigMapInput` via:
//
//	InsightsConfigMap{ "key": InsightsConfigArgs{...} }
type InsightsConfigMapInput interface {
	pulumi.Input

	ToInsightsConfigMapOutput() InsightsConfigMapOutput
	ToInsightsConfigMapOutputWithContext(context.Context) InsightsConfigMapOutput
}

type InsightsConfigMap map[string]InsightsConfigInput

func (InsightsConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InsightsConfig)(nil)).Elem()
}

func (i InsightsConfigMap) ToInsightsConfigMapOutput() InsightsConfigMapOutput {
	return i.ToInsightsConfigMapOutputWithContext(context.Background())
}

func (i InsightsConfigMap) ToInsightsConfigMapOutputWithContext(ctx context.Context) InsightsConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightsConfigMapOutput)
}

type InsightsConfigOutput struct{ *pulumi.OutputState }

func (InsightsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InsightsConfig)(nil)).Elem()
}

func (o InsightsConfigOutput) ToInsightsConfigOutput() InsightsConfigOutput {
	return o
}

func (o InsightsConfigOutput) ToInsightsConfigOutputWithContext(ctx context.Context) InsightsConfigOutput {
	return o
}

// User specified annotations. See https://google.aip.dev/148#annotations
// for more details such as format and size limitations.
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o InsightsConfigOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InsightsConfig) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// The name of the App Hub Application.
// Format:
// projects/{project}/locations/{location}/applications/{application}
func (o InsightsConfigOutput) AppHubApplication() pulumi.StringOutput {
	return o.ApplyT(func(v *InsightsConfig) pulumi.StringOutput { return v.AppHubApplication }).(pulumi.StringOutput)
}

// The artifact configurations of the artifacts that are deployed.
// Structure is documented below.
func (o InsightsConfigOutput) ArtifactConfigs() InsightsConfigArtifactConfigArrayOutput {
	return o.ApplyT(func(v *InsightsConfig) InsightsConfigArtifactConfigArrayOutput { return v.ArtifactConfigs }).(InsightsConfigArtifactConfigArrayOutput)
}

// [Output only] Create timestamp
func (o InsightsConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *InsightsConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o InsightsConfigOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InsightsConfig) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o InsightsConfigOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InsightsConfig) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Any errors that occurred while setting up the InsightsConfig.
// Each error will be in the format: `field_name: errorMessage`, e.g.
// GetAppHubApplication: Permission denied while getting App Hub
// application. Please grant permissions to the P4SA.
// Structure is documented below.
func (o InsightsConfigOutput) Errors() InsightsConfigErrorArrayOutput {
	return o.ApplyT(func(v *InsightsConfig) InsightsConfigErrorArrayOutput { return v.Errors }).(InsightsConfigErrorArrayOutput)
}

// ID of the requesting InsightsConfig.
func (o InsightsConfigOutput) InsightsConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *InsightsConfig) pulumi.StringOutput { return v.InsightsConfigId }).(pulumi.StringOutput)
}

// Set of labels associated with an InsightsConfig.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o InsightsConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InsightsConfig) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o InsightsConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *InsightsConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The name of the InsightsConfig.
// Format:
// projects/{project}/locations/{location}/insightsConfigs/{insightsConfig}
func (o InsightsConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InsightsConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o InsightsConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *InsightsConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o InsightsConfigOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InsightsConfig) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Reconciling (https://google.aip.dev/128#reconciliation).
// Set to true if the current state of InsightsConfig does not match the
// user's intended state, and the service is actively updating the resource to
// reconcile them. This can happen due to user-triggered updates or
// system actions like failover or maintenance.
func (o InsightsConfigOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *InsightsConfig) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// The runtime configurations where the application is deployed.
// Structure is documented below.
func (o InsightsConfigOutput) RuntimeConfigs() InsightsConfigRuntimeConfigArrayOutput {
	return o.ApplyT(func(v *InsightsConfig) InsightsConfigRuntimeConfigArrayOutput { return v.RuntimeConfigs }).(InsightsConfigRuntimeConfigArrayOutput)
}

// (Output)
// The state of the Runtime.
// Possible values:
// STATE_UNSPECIFIED
// LINKED
// UNLINKED
func (o InsightsConfigOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *InsightsConfig) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// [Output only] Update timestamp
func (o InsightsConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *InsightsConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type InsightsConfigArrayOutput struct{ *pulumi.OutputState }

func (InsightsConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InsightsConfig)(nil)).Elem()
}

func (o InsightsConfigArrayOutput) ToInsightsConfigArrayOutput() InsightsConfigArrayOutput {
	return o
}

func (o InsightsConfigArrayOutput) ToInsightsConfigArrayOutputWithContext(ctx context.Context) InsightsConfigArrayOutput {
	return o
}

func (o InsightsConfigArrayOutput) Index(i pulumi.IntInput) InsightsConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InsightsConfig {
		return vs[0].([]*InsightsConfig)[vs[1].(int)]
	}).(InsightsConfigOutput)
}

type InsightsConfigMapOutput struct{ *pulumi.OutputState }

func (InsightsConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InsightsConfig)(nil)).Elem()
}

func (o InsightsConfigMapOutput) ToInsightsConfigMapOutput() InsightsConfigMapOutput {
	return o
}

func (o InsightsConfigMapOutput) ToInsightsConfigMapOutputWithContext(ctx context.Context) InsightsConfigMapOutput {
	return o
}

func (o InsightsConfigMapOutput) MapIndex(k pulumi.StringInput) InsightsConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InsightsConfig {
		return vs[0].(map[string]*InsightsConfig)[vs[1].(string)]
	}).(InsightsConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InsightsConfigInput)(nil)).Elem(), &InsightsConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*InsightsConfigArrayInput)(nil)).Elem(), InsightsConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InsightsConfigMapInput)(nil)).Elem(), InsightsConfigMap{})
	pulumi.RegisterOutputType(InsightsConfigOutput{})
	pulumi.RegisterOutputType(InsightsConfigArrayOutput{})
	pulumi.RegisterOutputType(InsightsConfigMapOutput{})
}
