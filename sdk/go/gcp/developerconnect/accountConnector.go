// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package developerconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Description
//
// ## Example Usage
//
// ### Developer Connect Account Connector Github
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := developerconnect.NewAccountConnector(ctx, "my-account-connector", &developerconnect.AccountConnectorArgs{
//				Location:           pulumi.String("us-central1"),
//				AccountConnectorId: pulumi.String("tf-test-ac"),
//				ProviderOauthConfig: &developerconnect.AccountConnectorProviderOauthConfigArgs{
//					SystemProviderId: pulumi.String("GITHUB"),
//					Scopes: pulumi.StringArray{
//						pulumi.String("repo"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Developer Connect Account Connector Gitlab
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := developerconnect.NewAccountConnector(ctx, "my-account-connector", &developerconnect.AccountConnectorArgs{
//				Location:           pulumi.String("us-central1"),
//				AccountConnectorId: pulumi.String("tf-test-ac"),
//				ProviderOauthConfig: &developerconnect.AccountConnectorProviderOauthConfigArgs{
//					SystemProviderId: pulumi.String("GITLAB"),
//					Scopes: pulumi.StringArray{
//						pulumi.String("api"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Developer Connect Account Connector Google
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := developerconnect.NewAccountConnector(ctx, "my-account-connector", &developerconnect.AccountConnectorArgs{
//				Location:           pulumi.String("us-central1"),
//				AccountConnectorId: pulumi.String("tf-test-ac"),
//				ProviderOauthConfig: &developerconnect.AccountConnectorProviderOauthConfigArgs{
//					SystemProviderId: pulumi.String("GOOGLE"),
//					Scopes: pulumi.StringArray{
//						pulumi.String("https://www.googleapis.com/auth/drive.readonly"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Developer Connect Account Connector Sentry
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := developerconnect.NewAccountConnector(ctx, "my-account-connector", &developerconnect.AccountConnectorArgs{
//				Location:           pulumi.String("us-central1"),
//				AccountConnectorId: pulumi.String("tf-test-ac"),
//				ProviderOauthConfig: &developerconnect.AccountConnectorProviderOauthConfigArgs{
//					SystemProviderId: pulumi.String("SENTRY"),
//					Scopes: pulumi.StringArray{
//						pulumi.String("org:read"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Developer Connect Account Connector Rovo
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := developerconnect.NewAccountConnector(ctx, "my-account-connector", &developerconnect.AccountConnectorArgs{
//				Location:           pulumi.String("us-central1"),
//				AccountConnectorId: pulumi.String("tf-test-ac"),
//				ProviderOauthConfig: &developerconnect.AccountConnectorProviderOauthConfigArgs{
//					SystemProviderId: pulumi.String("ROVO"),
//					Scopes: pulumi.StringArray{
//						pulumi.String("rovo"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Developer Connect Account Connector New Relic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := developerconnect.NewAccountConnector(ctx, "my-account-connector", &developerconnect.AccountConnectorArgs{
//				Location:           pulumi.String("us-central1"),
//				AccountConnectorId: pulumi.String("tf-test-ac"),
//				ProviderOauthConfig: &developerconnect.AccountConnectorProviderOauthConfigArgs{
//					SystemProviderId: pulumi.String("NEW_RELIC"),
//					Scopes:           pulumi.StringArray{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Developer Connect Account Connector Datastax
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := developerconnect.NewAccountConnector(ctx, "my-account-connector", &developerconnect.AccountConnectorArgs{
//				Location:           pulumi.String("us-central1"),
//				AccountConnectorId: pulumi.String("tf-test-ac"),
//				ProviderOauthConfig: &developerconnect.AccountConnectorProviderOauthConfigArgs{
//					SystemProviderId: pulumi.String("DATASTAX"),
//					Scopes:           pulumi.StringArray{},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AccountConnector can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/accountConnectors/{{account_connector_id}}`
//
// * `{{project}}/{{location}}/{{account_connector_id}}`
//
// * `{{location}}/{{account_connector_id}}`
//
// When using the `pulumi import` command, AccountConnector can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:developerconnect/accountConnector:AccountConnector default projects/{{project}}/locations/{{location}}/accountConnectors/{{account_connector_id}}
// ```
//
// ```sh
// $ pulumi import gcp:developerconnect/accountConnector:AccountConnector default {{project}}/{{location}}/{{account_connector_id}}
// ```
//
// ```sh
// $ pulumi import gcp:developerconnect/accountConnector:AccountConnector default {{location}}/{{account_connector_id}}
// ```
type AccountConnector struct {
	pulumi.CustomResourceState

	// Required. The ID to use for the AccountConnector, which will become the final
	// component of the AccountConnector's resource name. Its format should adhere
	// to https://google.aip.dev/122#resource-id-segments Names must be unique
	// per-project per-location.
	AccountConnectorId pulumi.StringOutput `pulumi:"accountConnectorId"`
	// Optional. Allows users to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Output only. The timestamp when the userConnection was created.
	CreateTime           pulumi.StringOutput    `pulumi:"createTime"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The resource name of the userConnection, in the format
	// `projects/{project}/locations/{location}/accountConnectors/{account_connector_id}`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Output only. Start OAuth flow by clicking on this URL.
	OauthStartUri pulumi.StringOutput `pulumi:"oauthStartUri"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// ProviderOAuthConfig is the OAuth config for a provider.
	// Structure is documented below.
	ProviderOauthConfig AccountConnectorProviderOauthConfigPtrOutput `pulumi:"providerOauthConfig"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Output only. The timestamp when the userConnection was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAccountConnector registers a new resource with the given unique name, arguments, and options.
func NewAccountConnector(ctx *pulumi.Context,
	name string, args *AccountConnectorArgs, opts ...pulumi.ResourceOption) (*AccountConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'AccountConnectorId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountConnector
	err := ctx.RegisterResource("gcp:developerconnect/accountConnector:AccountConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountConnector gets an existing AccountConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountConnectorState, opts ...pulumi.ResourceOption) (*AccountConnector, error) {
	var resource AccountConnector
	err := ctx.ReadResource("gcp:developerconnect/accountConnector:AccountConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountConnector resources.
type accountConnectorState struct {
	// Required. The ID to use for the AccountConnector, which will become the final
	// component of the AccountConnector's resource name. Its format should adhere
	// to https://google.aip.dev/122#resource-id-segments Names must be unique
	// per-project per-location.
	AccountConnectorId *string `pulumi:"accountConnectorId"`
	// Optional. Allows users to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Output only. The timestamp when the userConnection was created.
	CreateTime           *string           `pulumi:"createTime"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// Identifier. The resource name of the userConnection, in the format
	// `projects/{project}/locations/{location}/accountConnectors/{account_connector_id}`.
	Name *string `pulumi:"name"`
	// Output only. Start OAuth flow by clicking on this URL.
	OauthStartUri *string `pulumi:"oauthStartUri"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// ProviderOAuthConfig is the OAuth config for a provider.
	// Structure is documented below.
	ProviderOauthConfig *AccountConnectorProviderOauthConfig `pulumi:"providerOauthConfig"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Output only. The timestamp when the userConnection was updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type AccountConnectorState struct {
	// Required. The ID to use for the AccountConnector, which will become the final
	// component of the AccountConnector's resource name. Its format should adhere
	// to https://google.aip.dev/122#resource-id-segments Names must be unique
	// per-project per-location.
	AccountConnectorId pulumi.StringPtrInput
	// Optional. Allows users to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Output only. The timestamp when the userConnection was created.
	CreateTime           pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// Identifier. The resource name of the userConnection, in the format
	// `projects/{project}/locations/{location}/accountConnectors/{account_connector_id}`.
	Name pulumi.StringPtrInput
	// Output only. Start OAuth flow by clicking on this URL.
	OauthStartUri pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// ProviderOAuthConfig is the OAuth config for a provider.
	// Structure is documented below.
	ProviderOauthConfig AccountConnectorProviderOauthConfigPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Output only. The timestamp when the userConnection was updated.
	UpdateTime pulumi.StringPtrInput
}

func (AccountConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountConnectorState)(nil)).Elem()
}

type accountConnectorArgs struct {
	// Required. The ID to use for the AccountConnector, which will become the final
	// component of the AccountConnector's resource name. Its format should adhere
	// to https://google.aip.dev/122#resource-id-segments Names must be unique
	// per-project per-location.
	AccountConnectorId string `pulumi:"accountConnectorId"`
	// Optional. Allows users to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the resource.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// ProviderOAuthConfig is the OAuth config for a provider.
	// Structure is documented below.
	ProviderOauthConfig *AccountConnectorProviderOauthConfig `pulumi:"providerOauthConfig"`
}

// The set of arguments for constructing a AccountConnector resource.
type AccountConnectorArgs struct {
	// Required. The ID to use for the AccountConnector, which will become the final
	// component of the AccountConnector's resource name. Its format should adhere
	// to https://google.aip.dev/122#resource-id-segments Names must be unique
	// per-project per-location.
	AccountConnectorId pulumi.StringInput
	// Optional. Allows users to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Optional. Labels as key value pairs
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the resource.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// ProviderOAuthConfig is the OAuth config for a provider.
	// Structure is documented below.
	ProviderOauthConfig AccountConnectorProviderOauthConfigPtrInput
}

func (AccountConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountConnectorArgs)(nil)).Elem()
}

type AccountConnectorInput interface {
	pulumi.Input

	ToAccountConnectorOutput() AccountConnectorOutput
	ToAccountConnectorOutputWithContext(ctx context.Context) AccountConnectorOutput
}

func (*AccountConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountConnector)(nil)).Elem()
}

func (i *AccountConnector) ToAccountConnectorOutput() AccountConnectorOutput {
	return i.ToAccountConnectorOutputWithContext(context.Background())
}

func (i *AccountConnector) ToAccountConnectorOutputWithContext(ctx context.Context) AccountConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountConnectorOutput)
}

// AccountConnectorArrayInput is an input type that accepts AccountConnectorArray and AccountConnectorArrayOutput values.
// You can construct a concrete instance of `AccountConnectorArrayInput` via:
//
//	AccountConnectorArray{ AccountConnectorArgs{...} }
type AccountConnectorArrayInput interface {
	pulumi.Input

	ToAccountConnectorArrayOutput() AccountConnectorArrayOutput
	ToAccountConnectorArrayOutputWithContext(context.Context) AccountConnectorArrayOutput
}

type AccountConnectorArray []AccountConnectorInput

func (AccountConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountConnector)(nil)).Elem()
}

func (i AccountConnectorArray) ToAccountConnectorArrayOutput() AccountConnectorArrayOutput {
	return i.ToAccountConnectorArrayOutputWithContext(context.Background())
}

func (i AccountConnectorArray) ToAccountConnectorArrayOutputWithContext(ctx context.Context) AccountConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountConnectorArrayOutput)
}

// AccountConnectorMapInput is an input type that accepts AccountConnectorMap and AccountConnectorMapOutput values.
// You can construct a concrete instance of `AccountConnectorMapInput` via:
//
//	AccountConnectorMap{ "key": AccountConnectorArgs{...} }
type AccountConnectorMapInput interface {
	pulumi.Input

	ToAccountConnectorMapOutput() AccountConnectorMapOutput
	ToAccountConnectorMapOutputWithContext(context.Context) AccountConnectorMapOutput
}

type AccountConnectorMap map[string]AccountConnectorInput

func (AccountConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountConnector)(nil)).Elem()
}

func (i AccountConnectorMap) ToAccountConnectorMapOutput() AccountConnectorMapOutput {
	return i.ToAccountConnectorMapOutputWithContext(context.Background())
}

func (i AccountConnectorMap) ToAccountConnectorMapOutputWithContext(ctx context.Context) AccountConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountConnectorMapOutput)
}

type AccountConnectorOutput struct{ *pulumi.OutputState }

func (AccountConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountConnector)(nil)).Elem()
}

func (o AccountConnectorOutput) ToAccountConnectorOutput() AccountConnectorOutput {
	return o
}

func (o AccountConnectorOutput) ToAccountConnectorOutputWithContext(ctx context.Context) AccountConnectorOutput {
	return o
}

// Required. The ID to use for the AccountConnector, which will become the final
// component of the AccountConnector's resource name. Its format should adhere
// to https://google.aip.dev/122#resource-id-segments Names must be unique
// per-project per-location.
func (o AccountConnectorOutput) AccountConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountConnector) pulumi.StringOutput { return v.AccountConnectorId }).(pulumi.StringOutput)
}

// Optional. Allows users to store small amounts of arbitrary data.
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o AccountConnectorOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AccountConnector) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Output only. The timestamp when the userConnection was created.
func (o AccountConnectorOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountConnector) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o AccountConnectorOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AccountConnector) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o AccountConnectorOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AccountConnector) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Optional. Labels as key value pairs
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o AccountConnectorOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AccountConnector) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the resource.
func (o AccountConnectorOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountConnector) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name of the userConnection, in the format
// `projects/{project}/locations/{location}/accountConnectors/{account_connector_id}`.
func (o AccountConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Output only. Start OAuth flow by clicking on this URL.
func (o AccountConnectorOutput) OauthStartUri() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountConnector) pulumi.StringOutput { return v.OauthStartUri }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AccountConnectorOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountConnector) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// ProviderOAuthConfig is the OAuth config for a provider.
// Structure is documented below.
func (o AccountConnectorOutput) ProviderOauthConfig() AccountConnectorProviderOauthConfigPtrOutput {
	return o.ApplyT(func(v *AccountConnector) AccountConnectorProviderOauthConfigPtrOutput { return v.ProviderOauthConfig }).(AccountConnectorProviderOauthConfigPtrOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o AccountConnectorOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AccountConnector) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Output only. The timestamp when the userConnection was updated.
func (o AccountConnectorOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountConnector) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AccountConnectorArrayOutput struct{ *pulumi.OutputState }

func (AccountConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountConnector)(nil)).Elem()
}

func (o AccountConnectorArrayOutput) ToAccountConnectorArrayOutput() AccountConnectorArrayOutput {
	return o
}

func (o AccountConnectorArrayOutput) ToAccountConnectorArrayOutputWithContext(ctx context.Context) AccountConnectorArrayOutput {
	return o
}

func (o AccountConnectorArrayOutput) Index(i pulumi.IntInput) AccountConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountConnector {
		return vs[0].([]*AccountConnector)[vs[1].(int)]
	}).(AccountConnectorOutput)
}

type AccountConnectorMapOutput struct{ *pulumi.OutputState }

func (AccountConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountConnector)(nil)).Elem()
}

func (o AccountConnectorMapOutput) ToAccountConnectorMapOutput() AccountConnectorMapOutput {
	return o
}

func (o AccountConnectorMapOutput) ToAccountConnectorMapOutputWithContext(ctx context.Context) AccountConnectorMapOutput {
	return o
}

func (o AccountConnectorMapOutput) MapIndex(k pulumi.StringInput) AccountConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountConnector {
		return vs[0].(map[string]*AccountConnector)[vs[1].(string)]
	}).(AccountConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountConnectorInput)(nil)).Elem(), &AccountConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountConnectorArrayInput)(nil)).Elem(), AccountConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountConnectorMapInput)(nil)).Elem(), AccountConnectorMap{})
	pulumi.RegisterOutputType(AccountConnectorOutput{})
	pulumi.RegisterOutputType(AccountConnectorArrayOutput{})
	pulumi.RegisterOutputType(AccountConnectorMapOutput{})
}
