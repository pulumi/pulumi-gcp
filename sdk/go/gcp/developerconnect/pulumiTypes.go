// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package developerconnect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AccountConnectorProviderOauthConfig struct {
	// Required. User selected scopes to apply to the Oauth config
	// In the event of changing scopes, user records under AccountConnector will
	// be deleted and users will re-auth again.
	Scopes []string `pulumi:"scopes"`
	// List of providers that are owned by Developer Connect.
	// Possible values:
	// GITHUB
	// GITLAB
	// GOOGLE
	// SENTRY
	// ROVO
	// NEW_RELIC
	// DATASTAX
	SystemProviderId *string `pulumi:"systemProviderId"`
}

// AccountConnectorProviderOauthConfigInput is an input type that accepts AccountConnectorProviderOauthConfigArgs and AccountConnectorProviderOauthConfigOutput values.
// You can construct a concrete instance of `AccountConnectorProviderOauthConfigInput` via:
//
//	AccountConnectorProviderOauthConfigArgs{...}
type AccountConnectorProviderOauthConfigInput interface {
	pulumi.Input

	ToAccountConnectorProviderOauthConfigOutput() AccountConnectorProviderOauthConfigOutput
	ToAccountConnectorProviderOauthConfigOutputWithContext(context.Context) AccountConnectorProviderOauthConfigOutput
}

type AccountConnectorProviderOauthConfigArgs struct {
	// Required. User selected scopes to apply to the Oauth config
	// In the event of changing scopes, user records under AccountConnector will
	// be deleted and users will re-auth again.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// List of providers that are owned by Developer Connect.
	// Possible values:
	// GITHUB
	// GITLAB
	// GOOGLE
	// SENTRY
	// ROVO
	// NEW_RELIC
	// DATASTAX
	SystemProviderId pulumi.StringPtrInput `pulumi:"systemProviderId"`
}

func (AccountConnectorProviderOauthConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountConnectorProviderOauthConfig)(nil)).Elem()
}

func (i AccountConnectorProviderOauthConfigArgs) ToAccountConnectorProviderOauthConfigOutput() AccountConnectorProviderOauthConfigOutput {
	return i.ToAccountConnectorProviderOauthConfigOutputWithContext(context.Background())
}

func (i AccountConnectorProviderOauthConfigArgs) ToAccountConnectorProviderOauthConfigOutputWithContext(ctx context.Context) AccountConnectorProviderOauthConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountConnectorProviderOauthConfigOutput)
}

func (i AccountConnectorProviderOauthConfigArgs) ToAccountConnectorProviderOauthConfigPtrOutput() AccountConnectorProviderOauthConfigPtrOutput {
	return i.ToAccountConnectorProviderOauthConfigPtrOutputWithContext(context.Background())
}

func (i AccountConnectorProviderOauthConfigArgs) ToAccountConnectorProviderOauthConfigPtrOutputWithContext(ctx context.Context) AccountConnectorProviderOauthConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountConnectorProviderOauthConfigOutput).ToAccountConnectorProviderOauthConfigPtrOutputWithContext(ctx)
}

// AccountConnectorProviderOauthConfigPtrInput is an input type that accepts AccountConnectorProviderOauthConfigArgs, AccountConnectorProviderOauthConfigPtr and AccountConnectorProviderOauthConfigPtrOutput values.
// You can construct a concrete instance of `AccountConnectorProviderOauthConfigPtrInput` via:
//
//	        AccountConnectorProviderOauthConfigArgs{...}
//
//	or:
//
//	        nil
type AccountConnectorProviderOauthConfigPtrInput interface {
	pulumi.Input

	ToAccountConnectorProviderOauthConfigPtrOutput() AccountConnectorProviderOauthConfigPtrOutput
	ToAccountConnectorProviderOauthConfigPtrOutputWithContext(context.Context) AccountConnectorProviderOauthConfigPtrOutput
}

type accountConnectorProviderOauthConfigPtrType AccountConnectorProviderOauthConfigArgs

func AccountConnectorProviderOauthConfigPtr(v *AccountConnectorProviderOauthConfigArgs) AccountConnectorProviderOauthConfigPtrInput {
	return (*accountConnectorProviderOauthConfigPtrType)(v)
}

func (*accountConnectorProviderOauthConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountConnectorProviderOauthConfig)(nil)).Elem()
}

func (i *accountConnectorProviderOauthConfigPtrType) ToAccountConnectorProviderOauthConfigPtrOutput() AccountConnectorProviderOauthConfigPtrOutput {
	return i.ToAccountConnectorProviderOauthConfigPtrOutputWithContext(context.Background())
}

func (i *accountConnectorProviderOauthConfigPtrType) ToAccountConnectorProviderOauthConfigPtrOutputWithContext(ctx context.Context) AccountConnectorProviderOauthConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountConnectorProviderOauthConfigPtrOutput)
}

type AccountConnectorProviderOauthConfigOutput struct{ *pulumi.OutputState }

func (AccountConnectorProviderOauthConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountConnectorProviderOauthConfig)(nil)).Elem()
}

func (o AccountConnectorProviderOauthConfigOutput) ToAccountConnectorProviderOauthConfigOutput() AccountConnectorProviderOauthConfigOutput {
	return o
}

func (o AccountConnectorProviderOauthConfigOutput) ToAccountConnectorProviderOauthConfigOutputWithContext(ctx context.Context) AccountConnectorProviderOauthConfigOutput {
	return o
}

func (o AccountConnectorProviderOauthConfigOutput) ToAccountConnectorProviderOauthConfigPtrOutput() AccountConnectorProviderOauthConfigPtrOutput {
	return o.ToAccountConnectorProviderOauthConfigPtrOutputWithContext(context.Background())
}

func (o AccountConnectorProviderOauthConfigOutput) ToAccountConnectorProviderOauthConfigPtrOutputWithContext(ctx context.Context) AccountConnectorProviderOauthConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccountConnectorProviderOauthConfig) *AccountConnectorProviderOauthConfig {
		return &v
	}).(AccountConnectorProviderOauthConfigPtrOutput)
}

// Required. User selected scopes to apply to the Oauth config
// In the event of changing scopes, user records under AccountConnector will
// be deleted and users will re-auth again.
func (o AccountConnectorProviderOauthConfigOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccountConnectorProviderOauthConfig) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// List of providers that are owned by Developer Connect.
// Possible values:
// GITHUB
// GITLAB
// GOOGLE
// SENTRY
// ROVO
// NEW_RELIC
// DATASTAX
func (o AccountConnectorProviderOauthConfigOutput) SystemProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountConnectorProviderOauthConfig) *string { return v.SystemProviderId }).(pulumi.StringPtrOutput)
}

type AccountConnectorProviderOauthConfigPtrOutput struct{ *pulumi.OutputState }

func (AccountConnectorProviderOauthConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountConnectorProviderOauthConfig)(nil)).Elem()
}

func (o AccountConnectorProviderOauthConfigPtrOutput) ToAccountConnectorProviderOauthConfigPtrOutput() AccountConnectorProviderOauthConfigPtrOutput {
	return o
}

func (o AccountConnectorProviderOauthConfigPtrOutput) ToAccountConnectorProviderOauthConfigPtrOutputWithContext(ctx context.Context) AccountConnectorProviderOauthConfigPtrOutput {
	return o
}

func (o AccountConnectorProviderOauthConfigPtrOutput) Elem() AccountConnectorProviderOauthConfigOutput {
	return o.ApplyT(func(v *AccountConnectorProviderOauthConfig) AccountConnectorProviderOauthConfig {
		if v != nil {
			return *v
		}
		var ret AccountConnectorProviderOauthConfig
		return ret
	}).(AccountConnectorProviderOauthConfigOutput)
}

// Required. User selected scopes to apply to the Oauth config
// In the event of changing scopes, user records under AccountConnector will
// be deleted and users will re-auth again.
func (o AccountConnectorProviderOauthConfigPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccountConnectorProviderOauthConfig) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// List of providers that are owned by Developer Connect.
// Possible values:
// GITHUB
// GITLAB
// GOOGLE
// SENTRY
// ROVO
// NEW_RELIC
// DATASTAX
func (o AccountConnectorProviderOauthConfigPtrOutput) SystemProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountConnectorProviderOauthConfig) *string {
		if v == nil {
			return nil
		}
		return v.SystemProviderId
	}).(pulumi.StringPtrOutput)
}

type ConnectionBitbucketCloudConfig struct {
	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential ConnectionBitbucketCloudConfigAuthorizerCredential `pulumi:"authorizerCredential"`
	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	ReadAuthorizerCredential ConnectionBitbucketCloudConfigReadAuthorizerCredential `pulumi:"readAuthorizerCredential"`
	// Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
	// events, formatted as `projects/*/secrets/*/versions/*`. This is used to
	// validate and create webhooks.
	WebhookSecretSecretVersion string `pulumi:"webhookSecretSecretVersion"`
	// Required. The Bitbucket Cloud Workspace ID to be connected to Google Cloud Platform.
	Workspace string `pulumi:"workspace"`
}

// ConnectionBitbucketCloudConfigInput is an input type that accepts ConnectionBitbucketCloudConfigArgs and ConnectionBitbucketCloudConfigOutput values.
// You can construct a concrete instance of `ConnectionBitbucketCloudConfigInput` via:
//
//	ConnectionBitbucketCloudConfigArgs{...}
type ConnectionBitbucketCloudConfigInput interface {
	pulumi.Input

	ToConnectionBitbucketCloudConfigOutput() ConnectionBitbucketCloudConfigOutput
	ToConnectionBitbucketCloudConfigOutputWithContext(context.Context) ConnectionBitbucketCloudConfigOutput
}

type ConnectionBitbucketCloudConfigArgs struct {
	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential ConnectionBitbucketCloudConfigAuthorizerCredentialInput `pulumi:"authorizerCredential"`
	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	ReadAuthorizerCredential ConnectionBitbucketCloudConfigReadAuthorizerCredentialInput `pulumi:"readAuthorizerCredential"`
	// Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
	// events, formatted as `projects/*/secrets/*/versions/*`. This is used to
	// validate and create webhooks.
	WebhookSecretSecretVersion pulumi.StringInput `pulumi:"webhookSecretSecretVersion"`
	// Required. The Bitbucket Cloud Workspace ID to be connected to Google Cloud Platform.
	Workspace pulumi.StringInput `pulumi:"workspace"`
}

func (ConnectionBitbucketCloudConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionBitbucketCloudConfig)(nil)).Elem()
}

func (i ConnectionBitbucketCloudConfigArgs) ToConnectionBitbucketCloudConfigOutput() ConnectionBitbucketCloudConfigOutput {
	return i.ToConnectionBitbucketCloudConfigOutputWithContext(context.Background())
}

func (i ConnectionBitbucketCloudConfigArgs) ToConnectionBitbucketCloudConfigOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketCloudConfigOutput)
}

func (i ConnectionBitbucketCloudConfigArgs) ToConnectionBitbucketCloudConfigPtrOutput() ConnectionBitbucketCloudConfigPtrOutput {
	return i.ToConnectionBitbucketCloudConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionBitbucketCloudConfigArgs) ToConnectionBitbucketCloudConfigPtrOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketCloudConfigOutput).ToConnectionBitbucketCloudConfigPtrOutputWithContext(ctx)
}

// ConnectionBitbucketCloudConfigPtrInput is an input type that accepts ConnectionBitbucketCloudConfigArgs, ConnectionBitbucketCloudConfigPtr and ConnectionBitbucketCloudConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionBitbucketCloudConfigPtrInput` via:
//
//	        ConnectionBitbucketCloudConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionBitbucketCloudConfigPtrInput interface {
	pulumi.Input

	ToConnectionBitbucketCloudConfigPtrOutput() ConnectionBitbucketCloudConfigPtrOutput
	ToConnectionBitbucketCloudConfigPtrOutputWithContext(context.Context) ConnectionBitbucketCloudConfigPtrOutput
}

type connectionBitbucketCloudConfigPtrType ConnectionBitbucketCloudConfigArgs

func ConnectionBitbucketCloudConfigPtr(v *ConnectionBitbucketCloudConfigArgs) ConnectionBitbucketCloudConfigPtrInput {
	return (*connectionBitbucketCloudConfigPtrType)(v)
}

func (*connectionBitbucketCloudConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionBitbucketCloudConfig)(nil)).Elem()
}

func (i *connectionBitbucketCloudConfigPtrType) ToConnectionBitbucketCloudConfigPtrOutput() ConnectionBitbucketCloudConfigPtrOutput {
	return i.ToConnectionBitbucketCloudConfigPtrOutputWithContext(context.Background())
}

func (i *connectionBitbucketCloudConfigPtrType) ToConnectionBitbucketCloudConfigPtrOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketCloudConfigPtrOutput)
}

type ConnectionBitbucketCloudConfigOutput struct{ *pulumi.OutputState }

func (ConnectionBitbucketCloudConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionBitbucketCloudConfig)(nil)).Elem()
}

func (o ConnectionBitbucketCloudConfigOutput) ToConnectionBitbucketCloudConfigOutput() ConnectionBitbucketCloudConfigOutput {
	return o
}

func (o ConnectionBitbucketCloudConfigOutput) ToConnectionBitbucketCloudConfigOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigOutput {
	return o
}

func (o ConnectionBitbucketCloudConfigOutput) ToConnectionBitbucketCloudConfigPtrOutput() ConnectionBitbucketCloudConfigPtrOutput {
	return o.ToConnectionBitbucketCloudConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionBitbucketCloudConfigOutput) ToConnectionBitbucketCloudConfigPtrOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionBitbucketCloudConfig) *ConnectionBitbucketCloudConfig {
		return &v
	}).(ConnectionBitbucketCloudConfigPtrOutput)
}

// Represents a personal access token that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionBitbucketCloudConfigOutput) AuthorizerCredential() ConnectionBitbucketCloudConfigAuthorizerCredentialOutput {
	return o.ApplyT(func(v ConnectionBitbucketCloudConfig) ConnectionBitbucketCloudConfigAuthorizerCredential {
		return v.AuthorizerCredential
	}).(ConnectionBitbucketCloudConfigAuthorizerCredentialOutput)
}

// Represents a personal access token that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionBitbucketCloudConfigOutput) ReadAuthorizerCredential() ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput {
	return o.ApplyT(func(v ConnectionBitbucketCloudConfig) ConnectionBitbucketCloudConfigReadAuthorizerCredential {
		return v.ReadAuthorizerCredential
	}).(ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput)
}

// Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
// events, formatted as `projects/*/secrets/*/versions/*`. This is used to
// validate and create webhooks.
func (o ConnectionBitbucketCloudConfigOutput) WebhookSecretSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionBitbucketCloudConfig) string { return v.WebhookSecretSecretVersion }).(pulumi.StringOutput)
}

// Required. The Bitbucket Cloud Workspace ID to be connected to Google Cloud Platform.
func (o ConnectionBitbucketCloudConfigOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionBitbucketCloudConfig) string { return v.Workspace }).(pulumi.StringOutput)
}

type ConnectionBitbucketCloudConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionBitbucketCloudConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionBitbucketCloudConfig)(nil)).Elem()
}

func (o ConnectionBitbucketCloudConfigPtrOutput) ToConnectionBitbucketCloudConfigPtrOutput() ConnectionBitbucketCloudConfigPtrOutput {
	return o
}

func (o ConnectionBitbucketCloudConfigPtrOutput) ToConnectionBitbucketCloudConfigPtrOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigPtrOutput {
	return o
}

func (o ConnectionBitbucketCloudConfigPtrOutput) Elem() ConnectionBitbucketCloudConfigOutput {
	return o.ApplyT(func(v *ConnectionBitbucketCloudConfig) ConnectionBitbucketCloudConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionBitbucketCloudConfig
		return ret
	}).(ConnectionBitbucketCloudConfigOutput)
}

// Represents a personal access token that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionBitbucketCloudConfigPtrOutput) AuthorizerCredential() ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketCloudConfig) *ConnectionBitbucketCloudConfigAuthorizerCredential {
		if v == nil {
			return nil
		}
		return &v.AuthorizerCredential
	}).(ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput)
}

// Represents a personal access token that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionBitbucketCloudConfigPtrOutput) ReadAuthorizerCredential() ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketCloudConfig) *ConnectionBitbucketCloudConfigReadAuthorizerCredential {
		if v == nil {
			return nil
		}
		return &v.ReadAuthorizerCredential
	}).(ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput)
}

// Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
// events, formatted as `projects/*/secrets/*/versions/*`. This is used to
// validate and create webhooks.
func (o ConnectionBitbucketCloudConfigPtrOutput) WebhookSecretSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketCloudConfig) *string {
		if v == nil {
			return nil
		}
		return &v.WebhookSecretSecretVersion
	}).(pulumi.StringPtrOutput)
}

// Required. The Bitbucket Cloud Workspace ID to be connected to Google Cloud Platform.
func (o ConnectionBitbucketCloudConfigPtrOutput) Workspace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketCloudConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Workspace
	}).(pulumi.StringPtrOutput)
}

type ConnectionBitbucketCloudConfigAuthorizerCredential struct {
	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion string `pulumi:"userTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username *string `pulumi:"username"`
}

// ConnectionBitbucketCloudConfigAuthorizerCredentialInput is an input type that accepts ConnectionBitbucketCloudConfigAuthorizerCredentialArgs and ConnectionBitbucketCloudConfigAuthorizerCredentialOutput values.
// You can construct a concrete instance of `ConnectionBitbucketCloudConfigAuthorizerCredentialInput` via:
//
//	ConnectionBitbucketCloudConfigAuthorizerCredentialArgs{...}
type ConnectionBitbucketCloudConfigAuthorizerCredentialInput interface {
	pulumi.Input

	ToConnectionBitbucketCloudConfigAuthorizerCredentialOutput() ConnectionBitbucketCloudConfigAuthorizerCredentialOutput
	ToConnectionBitbucketCloudConfigAuthorizerCredentialOutputWithContext(context.Context) ConnectionBitbucketCloudConfigAuthorizerCredentialOutput
}

type ConnectionBitbucketCloudConfigAuthorizerCredentialArgs struct {
	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion pulumi.StringInput `pulumi:"userTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ConnectionBitbucketCloudConfigAuthorizerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionBitbucketCloudConfigAuthorizerCredential)(nil)).Elem()
}

func (i ConnectionBitbucketCloudConfigAuthorizerCredentialArgs) ToConnectionBitbucketCloudConfigAuthorizerCredentialOutput() ConnectionBitbucketCloudConfigAuthorizerCredentialOutput {
	return i.ToConnectionBitbucketCloudConfigAuthorizerCredentialOutputWithContext(context.Background())
}

func (i ConnectionBitbucketCloudConfigAuthorizerCredentialArgs) ToConnectionBitbucketCloudConfigAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigAuthorizerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketCloudConfigAuthorizerCredentialOutput)
}

func (i ConnectionBitbucketCloudConfigAuthorizerCredentialArgs) ToConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput() ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput {
	return i.ToConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i ConnectionBitbucketCloudConfigAuthorizerCredentialArgs) ToConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketCloudConfigAuthorizerCredentialOutput).ToConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutputWithContext(ctx)
}

// ConnectionBitbucketCloudConfigAuthorizerCredentialPtrInput is an input type that accepts ConnectionBitbucketCloudConfigAuthorizerCredentialArgs, ConnectionBitbucketCloudConfigAuthorizerCredentialPtr and ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput values.
// You can construct a concrete instance of `ConnectionBitbucketCloudConfigAuthorizerCredentialPtrInput` via:
//
//	        ConnectionBitbucketCloudConfigAuthorizerCredentialArgs{...}
//
//	or:
//
//	        nil
type ConnectionBitbucketCloudConfigAuthorizerCredentialPtrInput interface {
	pulumi.Input

	ToConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput() ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput
	ToConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutputWithContext(context.Context) ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput
}

type connectionBitbucketCloudConfigAuthorizerCredentialPtrType ConnectionBitbucketCloudConfigAuthorizerCredentialArgs

func ConnectionBitbucketCloudConfigAuthorizerCredentialPtr(v *ConnectionBitbucketCloudConfigAuthorizerCredentialArgs) ConnectionBitbucketCloudConfigAuthorizerCredentialPtrInput {
	return (*connectionBitbucketCloudConfigAuthorizerCredentialPtrType)(v)
}

func (*connectionBitbucketCloudConfigAuthorizerCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionBitbucketCloudConfigAuthorizerCredential)(nil)).Elem()
}

func (i *connectionBitbucketCloudConfigAuthorizerCredentialPtrType) ToConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput() ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput {
	return i.ToConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i *connectionBitbucketCloudConfigAuthorizerCredentialPtrType) ToConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput)
}

type ConnectionBitbucketCloudConfigAuthorizerCredentialOutput struct{ *pulumi.OutputState }

func (ConnectionBitbucketCloudConfigAuthorizerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionBitbucketCloudConfigAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionBitbucketCloudConfigAuthorizerCredentialOutput) ToConnectionBitbucketCloudConfigAuthorizerCredentialOutput() ConnectionBitbucketCloudConfigAuthorizerCredentialOutput {
	return o
}

func (o ConnectionBitbucketCloudConfigAuthorizerCredentialOutput) ToConnectionBitbucketCloudConfigAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigAuthorizerCredentialOutput {
	return o
}

func (o ConnectionBitbucketCloudConfigAuthorizerCredentialOutput) ToConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput() ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput {
	return o.ToConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (o ConnectionBitbucketCloudConfigAuthorizerCredentialOutput) ToConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionBitbucketCloudConfigAuthorizerCredential) *ConnectionBitbucketCloudConfigAuthorizerCredential {
		return &v
	}).(ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput)
}

// Required. A SecretManager resource containing the user token that authorizes
// the Developer Connect connection. Format:
// `projects/*/secrets/*/versions/*`.
func (o ConnectionBitbucketCloudConfigAuthorizerCredentialOutput) UserTokenSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionBitbucketCloudConfigAuthorizerCredential) string { return v.UserTokenSecretVersion }).(pulumi.StringOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionBitbucketCloudConfigAuthorizerCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionBitbucketCloudConfigAuthorizerCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput struct{ *pulumi.OutputState }

func (ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionBitbucketCloudConfigAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput) ToConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput() ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput) ToConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput) Elem() ConnectionBitbucketCloudConfigAuthorizerCredentialOutput {
	return o.ApplyT(func(v *ConnectionBitbucketCloudConfigAuthorizerCredential) ConnectionBitbucketCloudConfigAuthorizerCredential {
		if v != nil {
			return *v
		}
		var ret ConnectionBitbucketCloudConfigAuthorizerCredential
		return ret
	}).(ConnectionBitbucketCloudConfigAuthorizerCredentialOutput)
}

// Required. A SecretManager resource containing the user token that authorizes
// the Developer Connect connection. Format:
// `projects/*/secrets/*/versions/*`.
func (o ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput) UserTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketCloudConfigAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return &v.UserTokenSecretVersion
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketCloudConfigAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionBitbucketCloudConfigReadAuthorizerCredential struct {
	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion string `pulumi:"userTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username *string `pulumi:"username"`
}

// ConnectionBitbucketCloudConfigReadAuthorizerCredentialInput is an input type that accepts ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs and ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput values.
// You can construct a concrete instance of `ConnectionBitbucketCloudConfigReadAuthorizerCredentialInput` via:
//
//	ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs{...}
type ConnectionBitbucketCloudConfigReadAuthorizerCredentialInput interface {
	pulumi.Input

	ToConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput() ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput
	ToConnectionBitbucketCloudConfigReadAuthorizerCredentialOutputWithContext(context.Context) ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput
}

type ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs struct {
	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion pulumi.StringInput `pulumi:"userTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionBitbucketCloudConfigReadAuthorizerCredential)(nil)).Elem()
}

func (i ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs) ToConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput() ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput {
	return i.ToConnectionBitbucketCloudConfigReadAuthorizerCredentialOutputWithContext(context.Background())
}

func (i ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs) ToConnectionBitbucketCloudConfigReadAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput)
}

func (i ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs) ToConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput() ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput {
	return i.ToConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs) ToConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput).ToConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutputWithContext(ctx)
}

// ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrInput is an input type that accepts ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs, ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtr and ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput values.
// You can construct a concrete instance of `ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrInput` via:
//
//	        ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs{...}
//
//	or:
//
//	        nil
type ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrInput interface {
	pulumi.Input

	ToConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput() ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput
	ToConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutputWithContext(context.Context) ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput
}

type connectionBitbucketCloudConfigReadAuthorizerCredentialPtrType ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs

func ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtr(v *ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs) ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrInput {
	return (*connectionBitbucketCloudConfigReadAuthorizerCredentialPtrType)(v)
}

func (*connectionBitbucketCloudConfigReadAuthorizerCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionBitbucketCloudConfigReadAuthorizerCredential)(nil)).Elem()
}

func (i *connectionBitbucketCloudConfigReadAuthorizerCredentialPtrType) ToConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput() ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput {
	return i.ToConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i *connectionBitbucketCloudConfigReadAuthorizerCredentialPtrType) ToConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput)
}

type ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput struct{ *pulumi.OutputState }

func (ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionBitbucketCloudConfigReadAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput) ToConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput() ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput {
	return o
}

func (o ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput) ToConnectionBitbucketCloudConfigReadAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput {
	return o
}

func (o ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput) ToConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput() ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput {
	return o.ToConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (o ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput) ToConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionBitbucketCloudConfigReadAuthorizerCredential) *ConnectionBitbucketCloudConfigReadAuthorizerCredential {
		return &v
	}).(ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput)
}

// Required. A SecretManager resource containing the user token that authorizes
// the Developer Connect connection. Format:
// `projects/*/secrets/*/versions/*`.
func (o ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput) UserTokenSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionBitbucketCloudConfigReadAuthorizerCredential) string { return v.UserTokenSecretVersion }).(pulumi.StringOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionBitbucketCloudConfigReadAuthorizerCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput struct{ *pulumi.OutputState }

func (ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionBitbucketCloudConfigReadAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput) ToConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput() ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput) ToConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput) Elem() ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput {
	return o.ApplyT(func(v *ConnectionBitbucketCloudConfigReadAuthorizerCredential) ConnectionBitbucketCloudConfigReadAuthorizerCredential {
		if v != nil {
			return *v
		}
		var ret ConnectionBitbucketCloudConfigReadAuthorizerCredential
		return ret
	}).(ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput)
}

// Required. A SecretManager resource containing the user token that authorizes
// the Developer Connect connection. Format:
// `projects/*/secrets/*/versions/*`.
func (o ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput) UserTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketCloudConfigReadAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return &v.UserTokenSecretVersion
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketCloudConfigReadAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionBitbucketDataCenterConfig struct {
	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential ConnectionBitbucketDataCenterConfigAuthorizerCredential `pulumi:"authorizerCredential"`
	// Required. The URI of the Bitbucket Data Center host this connection is for.
	HostUri string `pulumi:"hostUri"`
	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	ReadAuthorizerCredential ConnectionBitbucketDataCenterConfigReadAuthorizerCredential `pulumi:"readAuthorizerCredential"`
	// (Output)
	// Output only. Version of the Bitbucket Data Center server running on the `hostUri`.
	ServerVersion *string `pulumi:"serverVersion"`
	// ServiceDirectoryConfig represents Service Directory configuration for a
	// connection.
	// Structure is documented below.
	ServiceDirectoryConfig *ConnectionBitbucketDataCenterConfigServiceDirectoryConfig `pulumi:"serviceDirectoryConfig"`
	// Optional. SSL certificate authority to trust when making requests to Bitbucket Data
	// Center.
	SslCaCertificate *string `pulumi:"sslCaCertificate"`
	// Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
	// events, formatted as `projects/*/secrets/*/versions/*`. This is used to
	// validate webhooks.
	WebhookSecretSecretVersion string `pulumi:"webhookSecretSecretVersion"`
}

// ConnectionBitbucketDataCenterConfigInput is an input type that accepts ConnectionBitbucketDataCenterConfigArgs and ConnectionBitbucketDataCenterConfigOutput values.
// You can construct a concrete instance of `ConnectionBitbucketDataCenterConfigInput` via:
//
//	ConnectionBitbucketDataCenterConfigArgs{...}
type ConnectionBitbucketDataCenterConfigInput interface {
	pulumi.Input

	ToConnectionBitbucketDataCenterConfigOutput() ConnectionBitbucketDataCenterConfigOutput
	ToConnectionBitbucketDataCenterConfigOutputWithContext(context.Context) ConnectionBitbucketDataCenterConfigOutput
}

type ConnectionBitbucketDataCenterConfigArgs struct {
	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential ConnectionBitbucketDataCenterConfigAuthorizerCredentialInput `pulumi:"authorizerCredential"`
	// Required. The URI of the Bitbucket Data Center host this connection is for.
	HostUri pulumi.StringInput `pulumi:"hostUri"`
	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	ReadAuthorizerCredential ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialInput `pulumi:"readAuthorizerCredential"`
	// (Output)
	// Output only. Version of the Bitbucket Data Center server running on the `hostUri`.
	ServerVersion pulumi.StringPtrInput `pulumi:"serverVersion"`
	// ServiceDirectoryConfig represents Service Directory configuration for a
	// connection.
	// Structure is documented below.
	ServiceDirectoryConfig ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrInput `pulumi:"serviceDirectoryConfig"`
	// Optional. SSL certificate authority to trust when making requests to Bitbucket Data
	// Center.
	SslCaCertificate pulumi.StringPtrInput `pulumi:"sslCaCertificate"`
	// Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
	// events, formatted as `projects/*/secrets/*/versions/*`. This is used to
	// validate webhooks.
	WebhookSecretSecretVersion pulumi.StringInput `pulumi:"webhookSecretSecretVersion"`
}

func (ConnectionBitbucketDataCenterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionBitbucketDataCenterConfig)(nil)).Elem()
}

func (i ConnectionBitbucketDataCenterConfigArgs) ToConnectionBitbucketDataCenterConfigOutput() ConnectionBitbucketDataCenterConfigOutput {
	return i.ToConnectionBitbucketDataCenterConfigOutputWithContext(context.Background())
}

func (i ConnectionBitbucketDataCenterConfigArgs) ToConnectionBitbucketDataCenterConfigOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketDataCenterConfigOutput)
}

func (i ConnectionBitbucketDataCenterConfigArgs) ToConnectionBitbucketDataCenterConfigPtrOutput() ConnectionBitbucketDataCenterConfigPtrOutput {
	return i.ToConnectionBitbucketDataCenterConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionBitbucketDataCenterConfigArgs) ToConnectionBitbucketDataCenterConfigPtrOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketDataCenterConfigOutput).ToConnectionBitbucketDataCenterConfigPtrOutputWithContext(ctx)
}

// ConnectionBitbucketDataCenterConfigPtrInput is an input type that accepts ConnectionBitbucketDataCenterConfigArgs, ConnectionBitbucketDataCenterConfigPtr and ConnectionBitbucketDataCenterConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionBitbucketDataCenterConfigPtrInput` via:
//
//	        ConnectionBitbucketDataCenterConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionBitbucketDataCenterConfigPtrInput interface {
	pulumi.Input

	ToConnectionBitbucketDataCenterConfigPtrOutput() ConnectionBitbucketDataCenterConfigPtrOutput
	ToConnectionBitbucketDataCenterConfigPtrOutputWithContext(context.Context) ConnectionBitbucketDataCenterConfigPtrOutput
}

type connectionBitbucketDataCenterConfigPtrType ConnectionBitbucketDataCenterConfigArgs

func ConnectionBitbucketDataCenterConfigPtr(v *ConnectionBitbucketDataCenterConfigArgs) ConnectionBitbucketDataCenterConfigPtrInput {
	return (*connectionBitbucketDataCenterConfigPtrType)(v)
}

func (*connectionBitbucketDataCenterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionBitbucketDataCenterConfig)(nil)).Elem()
}

func (i *connectionBitbucketDataCenterConfigPtrType) ToConnectionBitbucketDataCenterConfigPtrOutput() ConnectionBitbucketDataCenterConfigPtrOutput {
	return i.ToConnectionBitbucketDataCenterConfigPtrOutputWithContext(context.Background())
}

func (i *connectionBitbucketDataCenterConfigPtrType) ToConnectionBitbucketDataCenterConfigPtrOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketDataCenterConfigPtrOutput)
}

type ConnectionBitbucketDataCenterConfigOutput struct{ *pulumi.OutputState }

func (ConnectionBitbucketDataCenterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionBitbucketDataCenterConfig)(nil)).Elem()
}

func (o ConnectionBitbucketDataCenterConfigOutput) ToConnectionBitbucketDataCenterConfigOutput() ConnectionBitbucketDataCenterConfigOutput {
	return o
}

func (o ConnectionBitbucketDataCenterConfigOutput) ToConnectionBitbucketDataCenterConfigOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigOutput {
	return o
}

func (o ConnectionBitbucketDataCenterConfigOutput) ToConnectionBitbucketDataCenterConfigPtrOutput() ConnectionBitbucketDataCenterConfigPtrOutput {
	return o.ToConnectionBitbucketDataCenterConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionBitbucketDataCenterConfigOutput) ToConnectionBitbucketDataCenterConfigPtrOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionBitbucketDataCenterConfig) *ConnectionBitbucketDataCenterConfig {
		return &v
	}).(ConnectionBitbucketDataCenterConfigPtrOutput)
}

// Represents a personal access token that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionBitbucketDataCenterConfigOutput) AuthorizerCredential() ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput {
	return o.ApplyT(func(v ConnectionBitbucketDataCenterConfig) ConnectionBitbucketDataCenterConfigAuthorizerCredential {
		return v.AuthorizerCredential
	}).(ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput)
}

// Required. The URI of the Bitbucket Data Center host this connection is for.
func (o ConnectionBitbucketDataCenterConfigOutput) HostUri() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionBitbucketDataCenterConfig) string { return v.HostUri }).(pulumi.StringOutput)
}

// Represents a personal access token that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionBitbucketDataCenterConfigOutput) ReadAuthorizerCredential() ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput {
	return o.ApplyT(func(v ConnectionBitbucketDataCenterConfig) ConnectionBitbucketDataCenterConfigReadAuthorizerCredential {
		return v.ReadAuthorizerCredential
	}).(ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput)
}

// (Output)
// Output only. Version of the Bitbucket Data Center server running on the `hostUri`.
func (o ConnectionBitbucketDataCenterConfigOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionBitbucketDataCenterConfig) *string { return v.ServerVersion }).(pulumi.StringPtrOutput)
}

// ServiceDirectoryConfig represents Service Directory configuration for a
// connection.
// Structure is documented below.
func (o ConnectionBitbucketDataCenterConfigOutput) ServiceDirectoryConfig() ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v ConnectionBitbucketDataCenterConfig) *ConnectionBitbucketDataCenterConfigServiceDirectoryConfig {
		return v.ServiceDirectoryConfig
	}).(ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput)
}

// Optional. SSL certificate authority to trust when making requests to Bitbucket Data
// Center.
func (o ConnectionBitbucketDataCenterConfigOutput) SslCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionBitbucketDataCenterConfig) *string { return v.SslCaCertificate }).(pulumi.StringPtrOutput)
}

// Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
// events, formatted as `projects/*/secrets/*/versions/*`. This is used to
// validate webhooks.
func (o ConnectionBitbucketDataCenterConfigOutput) WebhookSecretSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionBitbucketDataCenterConfig) string { return v.WebhookSecretSecretVersion }).(pulumi.StringOutput)
}

type ConnectionBitbucketDataCenterConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionBitbucketDataCenterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionBitbucketDataCenterConfig)(nil)).Elem()
}

func (o ConnectionBitbucketDataCenterConfigPtrOutput) ToConnectionBitbucketDataCenterConfigPtrOutput() ConnectionBitbucketDataCenterConfigPtrOutput {
	return o
}

func (o ConnectionBitbucketDataCenterConfigPtrOutput) ToConnectionBitbucketDataCenterConfigPtrOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigPtrOutput {
	return o
}

func (o ConnectionBitbucketDataCenterConfigPtrOutput) Elem() ConnectionBitbucketDataCenterConfigOutput {
	return o.ApplyT(func(v *ConnectionBitbucketDataCenterConfig) ConnectionBitbucketDataCenterConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionBitbucketDataCenterConfig
		return ret
	}).(ConnectionBitbucketDataCenterConfigOutput)
}

// Represents a personal access token that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionBitbucketDataCenterConfigPtrOutput) AuthorizerCredential() ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketDataCenterConfig) *ConnectionBitbucketDataCenterConfigAuthorizerCredential {
		if v == nil {
			return nil
		}
		return &v.AuthorizerCredential
	}).(ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput)
}

// Required. The URI of the Bitbucket Data Center host this connection is for.
func (o ConnectionBitbucketDataCenterConfigPtrOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketDataCenterConfig) *string {
		if v == nil {
			return nil
		}
		return &v.HostUri
	}).(pulumi.StringPtrOutput)
}

// Represents a personal access token that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionBitbucketDataCenterConfigPtrOutput) ReadAuthorizerCredential() ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketDataCenterConfig) *ConnectionBitbucketDataCenterConfigReadAuthorizerCredential {
		if v == nil {
			return nil
		}
		return &v.ReadAuthorizerCredential
	}).(ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput)
}

// (Output)
// Output only. Version of the Bitbucket Data Center server running on the `hostUri`.
func (o ConnectionBitbucketDataCenterConfigPtrOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketDataCenterConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerVersion
	}).(pulumi.StringPtrOutput)
}

// ServiceDirectoryConfig represents Service Directory configuration for a
// connection.
// Structure is documented below.
func (o ConnectionBitbucketDataCenterConfigPtrOutput) ServiceDirectoryConfig() ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketDataCenterConfig) *ConnectionBitbucketDataCenterConfigServiceDirectoryConfig {
		if v == nil {
			return nil
		}
		return v.ServiceDirectoryConfig
	}).(ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput)
}

// Optional. SSL certificate authority to trust when making requests to Bitbucket Data
// Center.
func (o ConnectionBitbucketDataCenterConfigPtrOutput) SslCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketDataCenterConfig) *string {
		if v == nil {
			return nil
		}
		return v.SslCaCertificate
	}).(pulumi.StringPtrOutput)
}

// Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
// events, formatted as `projects/*/secrets/*/versions/*`. This is used to
// validate webhooks.
func (o ConnectionBitbucketDataCenterConfigPtrOutput) WebhookSecretSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketDataCenterConfig) *string {
		if v == nil {
			return nil
		}
		return &v.WebhookSecretSecretVersion
	}).(pulumi.StringPtrOutput)
}

type ConnectionBitbucketDataCenterConfigAuthorizerCredential struct {
	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion string `pulumi:"userTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username *string `pulumi:"username"`
}

// ConnectionBitbucketDataCenterConfigAuthorizerCredentialInput is an input type that accepts ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs and ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput values.
// You can construct a concrete instance of `ConnectionBitbucketDataCenterConfigAuthorizerCredentialInput` via:
//
//	ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs{...}
type ConnectionBitbucketDataCenterConfigAuthorizerCredentialInput interface {
	pulumi.Input

	ToConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput() ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput
	ToConnectionBitbucketDataCenterConfigAuthorizerCredentialOutputWithContext(context.Context) ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput
}

type ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs struct {
	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion pulumi.StringInput `pulumi:"userTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionBitbucketDataCenterConfigAuthorizerCredential)(nil)).Elem()
}

func (i ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs) ToConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput() ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput {
	return i.ToConnectionBitbucketDataCenterConfigAuthorizerCredentialOutputWithContext(context.Background())
}

func (i ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs) ToConnectionBitbucketDataCenterConfigAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput)
}

func (i ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs) ToConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput() ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput {
	return i.ToConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs) ToConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput).ToConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutputWithContext(ctx)
}

// ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrInput is an input type that accepts ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs, ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtr and ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput values.
// You can construct a concrete instance of `ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrInput` via:
//
//	        ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs{...}
//
//	or:
//
//	        nil
type ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrInput interface {
	pulumi.Input

	ToConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput() ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput
	ToConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutputWithContext(context.Context) ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput
}

type connectionBitbucketDataCenterConfigAuthorizerCredentialPtrType ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs

func ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtr(v *ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs) ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrInput {
	return (*connectionBitbucketDataCenterConfigAuthorizerCredentialPtrType)(v)
}

func (*connectionBitbucketDataCenterConfigAuthorizerCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionBitbucketDataCenterConfigAuthorizerCredential)(nil)).Elem()
}

func (i *connectionBitbucketDataCenterConfigAuthorizerCredentialPtrType) ToConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput() ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput {
	return i.ToConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i *connectionBitbucketDataCenterConfigAuthorizerCredentialPtrType) ToConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput)
}

type ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput struct{ *pulumi.OutputState }

func (ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionBitbucketDataCenterConfigAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput) ToConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput() ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput {
	return o
}

func (o ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput) ToConnectionBitbucketDataCenterConfigAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput {
	return o
}

func (o ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput) ToConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput() ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput {
	return o.ToConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (o ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput) ToConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionBitbucketDataCenterConfigAuthorizerCredential) *ConnectionBitbucketDataCenterConfigAuthorizerCredential {
		return &v
	}).(ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput)
}

// Required. A SecretManager resource containing the user token that authorizes
// the Developer Connect connection. Format:
// `projects/*/secrets/*/versions/*`.
func (o ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput) UserTokenSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionBitbucketDataCenterConfigAuthorizerCredential) string {
		return v.UserTokenSecretVersion
	}).(pulumi.StringOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionBitbucketDataCenterConfigAuthorizerCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput struct{ *pulumi.OutputState }

func (ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionBitbucketDataCenterConfigAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput) ToConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput() ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput) ToConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput) Elem() ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput {
	return o.ApplyT(func(v *ConnectionBitbucketDataCenterConfigAuthorizerCredential) ConnectionBitbucketDataCenterConfigAuthorizerCredential {
		if v != nil {
			return *v
		}
		var ret ConnectionBitbucketDataCenterConfigAuthorizerCredential
		return ret
	}).(ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput)
}

// Required. A SecretManager resource containing the user token that authorizes
// the Developer Connect connection. Format:
// `projects/*/secrets/*/versions/*`.
func (o ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput) UserTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketDataCenterConfigAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return &v.UserTokenSecretVersion
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketDataCenterConfigAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionBitbucketDataCenterConfigReadAuthorizerCredential struct {
	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion string `pulumi:"userTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username *string `pulumi:"username"`
}

// ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialInput is an input type that accepts ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs and ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput values.
// You can construct a concrete instance of `ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialInput` via:
//
//	ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs{...}
type ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialInput interface {
	pulumi.Input

	ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput() ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput
	ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutputWithContext(context.Context) ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput
}

type ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs struct {
	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion pulumi.StringInput `pulumi:"userTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionBitbucketDataCenterConfigReadAuthorizerCredential)(nil)).Elem()
}

func (i ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs) ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput() ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput {
	return i.ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutputWithContext(context.Background())
}

func (i ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs) ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput)
}

func (i ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs) ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput() ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput {
	return i.ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs) ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput).ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutputWithContext(ctx)
}

// ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrInput is an input type that accepts ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs, ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtr and ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput values.
// You can construct a concrete instance of `ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrInput` via:
//
//	        ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs{...}
//
//	or:
//
//	        nil
type ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrInput interface {
	pulumi.Input

	ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput() ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput
	ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutputWithContext(context.Context) ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput
}

type connectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrType ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs

func ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtr(v *ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs) ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrInput {
	return (*connectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrType)(v)
}

func (*connectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionBitbucketDataCenterConfigReadAuthorizerCredential)(nil)).Elem()
}

func (i *connectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrType) ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput() ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput {
	return i.ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i *connectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrType) ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput)
}

type ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput struct{ *pulumi.OutputState }

func (ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionBitbucketDataCenterConfigReadAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput) ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput() ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput {
	return o
}

func (o ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput) ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput {
	return o
}

func (o ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput) ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput() ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput {
	return o.ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (o ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput) ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionBitbucketDataCenterConfigReadAuthorizerCredential) *ConnectionBitbucketDataCenterConfigReadAuthorizerCredential {
		return &v
	}).(ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput)
}

// Required. A SecretManager resource containing the user token that authorizes
// the Developer Connect connection. Format:
// `projects/*/secrets/*/versions/*`.
func (o ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput) UserTokenSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionBitbucketDataCenterConfigReadAuthorizerCredential) string {
		return v.UserTokenSecretVersion
	}).(pulumi.StringOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionBitbucketDataCenterConfigReadAuthorizerCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput struct{ *pulumi.OutputState }

func (ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionBitbucketDataCenterConfigReadAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput) ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput() ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput) ToConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput) Elem() ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput {
	return o.ApplyT(func(v *ConnectionBitbucketDataCenterConfigReadAuthorizerCredential) ConnectionBitbucketDataCenterConfigReadAuthorizerCredential {
		if v != nil {
			return *v
		}
		var ret ConnectionBitbucketDataCenterConfigReadAuthorizerCredential
		return ret
	}).(ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput)
}

// Required. A SecretManager resource containing the user token that authorizes
// the Developer Connect connection. Format:
// `projects/*/secrets/*/versions/*`.
func (o ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput) UserTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketDataCenterConfigReadAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return &v.UserTokenSecretVersion
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketDataCenterConfigReadAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionBitbucketDataCenterConfigServiceDirectoryConfig struct {
	// Required. The Service Directory service name.
	// Format:
	// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service string `pulumi:"service"`
}

// ConnectionBitbucketDataCenterConfigServiceDirectoryConfigInput is an input type that accepts ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs and ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput values.
// You can construct a concrete instance of `ConnectionBitbucketDataCenterConfigServiceDirectoryConfigInput` via:
//
//	ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs{...}
type ConnectionBitbucketDataCenterConfigServiceDirectoryConfigInput interface {
	pulumi.Input

	ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput() ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput
	ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutputWithContext(context.Context) ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput
}

type ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs struct {
	// Required. The Service Directory service name.
	// Format:
	// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service pulumi.StringInput `pulumi:"service"`
}

func (ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionBitbucketDataCenterConfigServiceDirectoryConfig)(nil)).Elem()
}

func (i ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs) ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput() ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput {
	return i.ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutputWithContext(context.Background())
}

func (i ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs) ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput)
}

func (i ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs) ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput() ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput {
	return i.ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs) ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput).ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutputWithContext(ctx)
}

// ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrInput is an input type that accepts ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs, ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtr and ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrInput` via:
//
//	        ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrInput interface {
	pulumi.Input

	ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput() ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput
	ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutputWithContext(context.Context) ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput
}

type connectionBitbucketDataCenterConfigServiceDirectoryConfigPtrType ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs

func ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtr(v *ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs) ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrInput {
	return (*connectionBitbucketDataCenterConfigServiceDirectoryConfigPtrType)(v)
}

func (*connectionBitbucketDataCenterConfigServiceDirectoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionBitbucketDataCenterConfigServiceDirectoryConfig)(nil)).Elem()
}

func (i *connectionBitbucketDataCenterConfigServiceDirectoryConfigPtrType) ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput() ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput {
	return i.ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i *connectionBitbucketDataCenterConfigServiceDirectoryConfigPtrType) ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput)
}

type ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput struct{ *pulumi.OutputState }

func (ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionBitbucketDataCenterConfigServiceDirectoryConfig)(nil)).Elem()
}

func (o ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput) ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput() ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput {
	return o
}

func (o ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput) ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput {
	return o
}

func (o ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput) ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput() ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput {
	return o.ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput) ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionBitbucketDataCenterConfigServiceDirectoryConfig) *ConnectionBitbucketDataCenterConfigServiceDirectoryConfig {
		return &v
	}).(ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput)
}

// Required. The Service Directory service name.
// Format:
// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionBitbucketDataCenterConfigServiceDirectoryConfig) string { return v.Service }).(pulumi.StringOutput)
}

type ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionBitbucketDataCenterConfigServiceDirectoryConfig)(nil)).Elem()
}

func (o ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput) ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput() ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput {
	return o
}

func (o ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput) ToConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput {
	return o
}

func (o ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput) Elem() ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput {
	return o.ApplyT(func(v *ConnectionBitbucketDataCenterConfigServiceDirectoryConfig) ConnectionBitbucketDataCenterConfigServiceDirectoryConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionBitbucketDataCenterConfigServiceDirectoryConfig
		return ret
	}).(ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput)
}

// Required. The Service Directory service name.
// Format:
// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBitbucketDataCenterConfigServiceDirectoryConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

type ConnectionCryptoKeyConfig struct {
	// Required. The name of the key which is used to encrypt/decrypt customer data. For key
	// in Cloud KMS, the key should be in the format of
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	KeyReference string `pulumi:"keyReference"`
}

// ConnectionCryptoKeyConfigInput is an input type that accepts ConnectionCryptoKeyConfigArgs and ConnectionCryptoKeyConfigOutput values.
// You can construct a concrete instance of `ConnectionCryptoKeyConfigInput` via:
//
//	ConnectionCryptoKeyConfigArgs{...}
type ConnectionCryptoKeyConfigInput interface {
	pulumi.Input

	ToConnectionCryptoKeyConfigOutput() ConnectionCryptoKeyConfigOutput
	ToConnectionCryptoKeyConfigOutputWithContext(context.Context) ConnectionCryptoKeyConfigOutput
}

type ConnectionCryptoKeyConfigArgs struct {
	// Required. The name of the key which is used to encrypt/decrypt customer data. For key
	// in Cloud KMS, the key should be in the format of
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	KeyReference pulumi.StringInput `pulumi:"keyReference"`
}

func (ConnectionCryptoKeyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionCryptoKeyConfig)(nil)).Elem()
}

func (i ConnectionCryptoKeyConfigArgs) ToConnectionCryptoKeyConfigOutput() ConnectionCryptoKeyConfigOutput {
	return i.ToConnectionCryptoKeyConfigOutputWithContext(context.Background())
}

func (i ConnectionCryptoKeyConfigArgs) ToConnectionCryptoKeyConfigOutputWithContext(ctx context.Context) ConnectionCryptoKeyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionCryptoKeyConfigOutput)
}

func (i ConnectionCryptoKeyConfigArgs) ToConnectionCryptoKeyConfigPtrOutput() ConnectionCryptoKeyConfigPtrOutput {
	return i.ToConnectionCryptoKeyConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionCryptoKeyConfigArgs) ToConnectionCryptoKeyConfigPtrOutputWithContext(ctx context.Context) ConnectionCryptoKeyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionCryptoKeyConfigOutput).ToConnectionCryptoKeyConfigPtrOutputWithContext(ctx)
}

// ConnectionCryptoKeyConfigPtrInput is an input type that accepts ConnectionCryptoKeyConfigArgs, ConnectionCryptoKeyConfigPtr and ConnectionCryptoKeyConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionCryptoKeyConfigPtrInput` via:
//
//	        ConnectionCryptoKeyConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionCryptoKeyConfigPtrInput interface {
	pulumi.Input

	ToConnectionCryptoKeyConfigPtrOutput() ConnectionCryptoKeyConfigPtrOutput
	ToConnectionCryptoKeyConfigPtrOutputWithContext(context.Context) ConnectionCryptoKeyConfigPtrOutput
}

type connectionCryptoKeyConfigPtrType ConnectionCryptoKeyConfigArgs

func ConnectionCryptoKeyConfigPtr(v *ConnectionCryptoKeyConfigArgs) ConnectionCryptoKeyConfigPtrInput {
	return (*connectionCryptoKeyConfigPtrType)(v)
}

func (*connectionCryptoKeyConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionCryptoKeyConfig)(nil)).Elem()
}

func (i *connectionCryptoKeyConfigPtrType) ToConnectionCryptoKeyConfigPtrOutput() ConnectionCryptoKeyConfigPtrOutput {
	return i.ToConnectionCryptoKeyConfigPtrOutputWithContext(context.Background())
}

func (i *connectionCryptoKeyConfigPtrType) ToConnectionCryptoKeyConfigPtrOutputWithContext(ctx context.Context) ConnectionCryptoKeyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionCryptoKeyConfigPtrOutput)
}

type ConnectionCryptoKeyConfigOutput struct{ *pulumi.OutputState }

func (ConnectionCryptoKeyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionCryptoKeyConfig)(nil)).Elem()
}

func (o ConnectionCryptoKeyConfigOutput) ToConnectionCryptoKeyConfigOutput() ConnectionCryptoKeyConfigOutput {
	return o
}

func (o ConnectionCryptoKeyConfigOutput) ToConnectionCryptoKeyConfigOutputWithContext(ctx context.Context) ConnectionCryptoKeyConfigOutput {
	return o
}

func (o ConnectionCryptoKeyConfigOutput) ToConnectionCryptoKeyConfigPtrOutput() ConnectionCryptoKeyConfigPtrOutput {
	return o.ToConnectionCryptoKeyConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionCryptoKeyConfigOutput) ToConnectionCryptoKeyConfigPtrOutputWithContext(ctx context.Context) ConnectionCryptoKeyConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionCryptoKeyConfig) *ConnectionCryptoKeyConfig {
		return &v
	}).(ConnectionCryptoKeyConfigPtrOutput)
}

// Required. The name of the key which is used to encrypt/decrypt customer data. For key
// in Cloud KMS, the key should be in the format of
// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
func (o ConnectionCryptoKeyConfigOutput) KeyReference() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionCryptoKeyConfig) string { return v.KeyReference }).(pulumi.StringOutput)
}

type ConnectionCryptoKeyConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionCryptoKeyConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionCryptoKeyConfig)(nil)).Elem()
}

func (o ConnectionCryptoKeyConfigPtrOutput) ToConnectionCryptoKeyConfigPtrOutput() ConnectionCryptoKeyConfigPtrOutput {
	return o
}

func (o ConnectionCryptoKeyConfigPtrOutput) ToConnectionCryptoKeyConfigPtrOutputWithContext(ctx context.Context) ConnectionCryptoKeyConfigPtrOutput {
	return o
}

func (o ConnectionCryptoKeyConfigPtrOutput) Elem() ConnectionCryptoKeyConfigOutput {
	return o.ApplyT(func(v *ConnectionCryptoKeyConfig) ConnectionCryptoKeyConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionCryptoKeyConfig
		return ret
	}).(ConnectionCryptoKeyConfigOutput)
}

// Required. The name of the key which is used to encrypt/decrypt customer data. For key
// in Cloud KMS, the key should be in the format of
// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
func (o ConnectionCryptoKeyConfigPtrOutput) KeyReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionCryptoKeyConfig) *string {
		if v == nil {
			return nil
		}
		return &v.KeyReference
	}).(pulumi.StringPtrOutput)
}

type ConnectionGithubConfig struct {
	// Optional. GitHub App installation id.
	AppInstallationId *string `pulumi:"appInstallationId"`
	// Represents an OAuth token of the account that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential *ConnectionGithubConfigAuthorizerCredential `pulumi:"authorizerCredential"`
	// Required. Immutable. The GitHub Application that was installed to the GitHub user or
	// organization.
	// Possible values:
	// GIT_HUB_APP_UNSPECIFIED
	// DEVELOPER_CONNECT
	// FIREBASE
	GithubApp string `pulumi:"githubApp"`
	// (Output)
	// Output only. The URI to navigate to in order to manage the installation associated
	// with this GitHubConfig.
	InstallationUri *string `pulumi:"installationUri"`
}

// ConnectionGithubConfigInput is an input type that accepts ConnectionGithubConfigArgs and ConnectionGithubConfigOutput values.
// You can construct a concrete instance of `ConnectionGithubConfigInput` via:
//
//	ConnectionGithubConfigArgs{...}
type ConnectionGithubConfigInput interface {
	pulumi.Input

	ToConnectionGithubConfigOutput() ConnectionGithubConfigOutput
	ToConnectionGithubConfigOutputWithContext(context.Context) ConnectionGithubConfigOutput
}

type ConnectionGithubConfigArgs struct {
	// Optional. GitHub App installation id.
	AppInstallationId pulumi.StringPtrInput `pulumi:"appInstallationId"`
	// Represents an OAuth token of the account that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential ConnectionGithubConfigAuthorizerCredentialPtrInput `pulumi:"authorizerCredential"`
	// Required. Immutable. The GitHub Application that was installed to the GitHub user or
	// organization.
	// Possible values:
	// GIT_HUB_APP_UNSPECIFIED
	// DEVELOPER_CONNECT
	// FIREBASE
	GithubApp pulumi.StringInput `pulumi:"githubApp"`
	// (Output)
	// Output only. The URI to navigate to in order to manage the installation associated
	// with this GitHubConfig.
	InstallationUri pulumi.StringPtrInput `pulumi:"installationUri"`
}

func (ConnectionGithubConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubConfig)(nil)).Elem()
}

func (i ConnectionGithubConfigArgs) ToConnectionGithubConfigOutput() ConnectionGithubConfigOutput {
	return i.ToConnectionGithubConfigOutputWithContext(context.Background())
}

func (i ConnectionGithubConfigArgs) ToConnectionGithubConfigOutputWithContext(ctx context.Context) ConnectionGithubConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigOutput)
}

func (i ConnectionGithubConfigArgs) ToConnectionGithubConfigPtrOutput() ConnectionGithubConfigPtrOutput {
	return i.ToConnectionGithubConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionGithubConfigArgs) ToConnectionGithubConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigOutput).ToConnectionGithubConfigPtrOutputWithContext(ctx)
}

// ConnectionGithubConfigPtrInput is an input type that accepts ConnectionGithubConfigArgs, ConnectionGithubConfigPtr and ConnectionGithubConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionGithubConfigPtrInput` via:
//
//	        ConnectionGithubConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionGithubConfigPtrInput interface {
	pulumi.Input

	ToConnectionGithubConfigPtrOutput() ConnectionGithubConfigPtrOutput
	ToConnectionGithubConfigPtrOutputWithContext(context.Context) ConnectionGithubConfigPtrOutput
}

type connectionGithubConfigPtrType ConnectionGithubConfigArgs

func ConnectionGithubConfigPtr(v *ConnectionGithubConfigArgs) ConnectionGithubConfigPtrInput {
	return (*connectionGithubConfigPtrType)(v)
}

func (*connectionGithubConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubConfig)(nil)).Elem()
}

func (i *connectionGithubConfigPtrType) ToConnectionGithubConfigPtrOutput() ConnectionGithubConfigPtrOutput {
	return i.ToConnectionGithubConfigPtrOutputWithContext(context.Background())
}

func (i *connectionGithubConfigPtrType) ToConnectionGithubConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigPtrOutput)
}

type ConnectionGithubConfigOutput struct{ *pulumi.OutputState }

func (ConnectionGithubConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubConfig)(nil)).Elem()
}

func (o ConnectionGithubConfigOutput) ToConnectionGithubConfigOutput() ConnectionGithubConfigOutput {
	return o
}

func (o ConnectionGithubConfigOutput) ToConnectionGithubConfigOutputWithContext(ctx context.Context) ConnectionGithubConfigOutput {
	return o
}

func (o ConnectionGithubConfigOutput) ToConnectionGithubConfigPtrOutput() ConnectionGithubConfigPtrOutput {
	return o.ToConnectionGithubConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionGithubConfigOutput) ToConnectionGithubConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGithubConfig) *ConnectionGithubConfig {
		return &v
	}).(ConnectionGithubConfigPtrOutput)
}

// Optional. GitHub App installation id.
func (o ConnectionGithubConfigOutput) AppInstallationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubConfig) *string { return v.AppInstallationId }).(pulumi.StringPtrOutput)
}

// Represents an OAuth token of the account that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionGithubConfigOutput) AuthorizerCredential() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o.ApplyT(func(v ConnectionGithubConfig) *ConnectionGithubConfigAuthorizerCredential {
		return v.AuthorizerCredential
	}).(ConnectionGithubConfigAuthorizerCredentialPtrOutput)
}

// Required. Immutable. The GitHub Application that was installed to the GitHub user or
// organization.
// Possible values:
// GIT_HUB_APP_UNSPECIFIED
// DEVELOPER_CONNECT
// FIREBASE
func (o ConnectionGithubConfigOutput) GithubApp() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGithubConfig) string { return v.GithubApp }).(pulumi.StringOutput)
}

// (Output)
// Output only. The URI to navigate to in order to manage the installation associated
// with this GitHubConfig.
func (o ConnectionGithubConfigOutput) InstallationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubConfig) *string { return v.InstallationUri }).(pulumi.StringPtrOutput)
}

type ConnectionGithubConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGithubConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubConfig)(nil)).Elem()
}

func (o ConnectionGithubConfigPtrOutput) ToConnectionGithubConfigPtrOutput() ConnectionGithubConfigPtrOutput {
	return o
}

func (o ConnectionGithubConfigPtrOutput) ToConnectionGithubConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigPtrOutput {
	return o
}

func (o ConnectionGithubConfigPtrOutput) Elem() ConnectionGithubConfigOutput {
	return o.ApplyT(func(v *ConnectionGithubConfig) ConnectionGithubConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionGithubConfig
		return ret
	}).(ConnectionGithubConfigOutput)
}

// Optional. GitHub App installation id.
func (o ConnectionGithubConfigPtrOutput) AppInstallationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubConfig) *string {
		if v == nil {
			return nil
		}
		return v.AppInstallationId
	}).(pulumi.StringPtrOutput)
}

// Represents an OAuth token of the account that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionGithubConfigPtrOutput) AuthorizerCredential() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubConfig) *ConnectionGithubConfigAuthorizerCredential {
		if v == nil {
			return nil
		}
		return v.AuthorizerCredential
	}).(ConnectionGithubConfigAuthorizerCredentialPtrOutput)
}

// Required. Immutable. The GitHub Application that was installed to the GitHub user or
// organization.
// Possible values:
// GIT_HUB_APP_UNSPECIFIED
// DEVELOPER_CONNECT
// FIREBASE
func (o ConnectionGithubConfigPtrOutput) GithubApp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubConfig) *string {
		if v == nil {
			return nil
		}
		return &v.GithubApp
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The URI to navigate to in order to manage the installation associated
// with this GitHubConfig.
func (o ConnectionGithubConfigPtrOutput) InstallationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubConfig) *string {
		if v == nil {
			return nil
		}
		return v.InstallationUri
	}).(pulumi.StringPtrOutput)
}

type ConnectionGithubConfigAuthorizerCredential struct {
	// Required. A SecretManager resource containing the OAuth token that authorizes
	// the connection. Format: `projects/*/secrets/*/versions/*`.
	OauthTokenSecretVersion string `pulumi:"oauthTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username *string `pulumi:"username"`
}

// ConnectionGithubConfigAuthorizerCredentialInput is an input type that accepts ConnectionGithubConfigAuthorizerCredentialArgs and ConnectionGithubConfigAuthorizerCredentialOutput values.
// You can construct a concrete instance of `ConnectionGithubConfigAuthorizerCredentialInput` via:
//
//	ConnectionGithubConfigAuthorizerCredentialArgs{...}
type ConnectionGithubConfigAuthorizerCredentialInput interface {
	pulumi.Input

	ToConnectionGithubConfigAuthorizerCredentialOutput() ConnectionGithubConfigAuthorizerCredentialOutput
	ToConnectionGithubConfigAuthorizerCredentialOutputWithContext(context.Context) ConnectionGithubConfigAuthorizerCredentialOutput
}

type ConnectionGithubConfigAuthorizerCredentialArgs struct {
	// Required. A SecretManager resource containing the OAuth token that authorizes
	// the connection. Format: `projects/*/secrets/*/versions/*`.
	OauthTokenSecretVersion pulumi.StringInput `pulumi:"oauthTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ConnectionGithubConfigAuthorizerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubConfigAuthorizerCredential)(nil)).Elem()
}

func (i ConnectionGithubConfigAuthorizerCredentialArgs) ToConnectionGithubConfigAuthorizerCredentialOutput() ConnectionGithubConfigAuthorizerCredentialOutput {
	return i.ToConnectionGithubConfigAuthorizerCredentialOutputWithContext(context.Background())
}

func (i ConnectionGithubConfigAuthorizerCredentialArgs) ToConnectionGithubConfigAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigAuthorizerCredentialOutput)
}

func (i ConnectionGithubConfigAuthorizerCredentialArgs) ToConnectionGithubConfigAuthorizerCredentialPtrOutput() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return i.ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i ConnectionGithubConfigAuthorizerCredentialArgs) ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigAuthorizerCredentialOutput).ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(ctx)
}

// ConnectionGithubConfigAuthorizerCredentialPtrInput is an input type that accepts ConnectionGithubConfigAuthorizerCredentialArgs, ConnectionGithubConfigAuthorizerCredentialPtr and ConnectionGithubConfigAuthorizerCredentialPtrOutput values.
// You can construct a concrete instance of `ConnectionGithubConfigAuthorizerCredentialPtrInput` via:
//
//	        ConnectionGithubConfigAuthorizerCredentialArgs{...}
//
//	or:
//
//	        nil
type ConnectionGithubConfigAuthorizerCredentialPtrInput interface {
	pulumi.Input

	ToConnectionGithubConfigAuthorizerCredentialPtrOutput() ConnectionGithubConfigAuthorizerCredentialPtrOutput
	ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(context.Context) ConnectionGithubConfigAuthorizerCredentialPtrOutput
}

type connectionGithubConfigAuthorizerCredentialPtrType ConnectionGithubConfigAuthorizerCredentialArgs

func ConnectionGithubConfigAuthorizerCredentialPtr(v *ConnectionGithubConfigAuthorizerCredentialArgs) ConnectionGithubConfigAuthorizerCredentialPtrInput {
	return (*connectionGithubConfigAuthorizerCredentialPtrType)(v)
}

func (*connectionGithubConfigAuthorizerCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubConfigAuthorizerCredential)(nil)).Elem()
}

func (i *connectionGithubConfigAuthorizerCredentialPtrType) ToConnectionGithubConfigAuthorizerCredentialPtrOutput() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return i.ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i *connectionGithubConfigAuthorizerCredentialPtrType) ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigAuthorizerCredentialPtrOutput)
}

type ConnectionGithubConfigAuthorizerCredentialOutput struct{ *pulumi.OutputState }

func (ConnectionGithubConfigAuthorizerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubConfigAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGithubConfigAuthorizerCredentialOutput) ToConnectionGithubConfigAuthorizerCredentialOutput() ConnectionGithubConfigAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGithubConfigAuthorizerCredentialOutput) ToConnectionGithubConfigAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGithubConfigAuthorizerCredentialOutput) ToConnectionGithubConfigAuthorizerCredentialPtrOutput() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o.ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (o ConnectionGithubConfigAuthorizerCredentialOutput) ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGithubConfigAuthorizerCredential) *ConnectionGithubConfigAuthorizerCredential {
		return &v
	}).(ConnectionGithubConfigAuthorizerCredentialPtrOutput)
}

// Required. A SecretManager resource containing the OAuth token that authorizes
// the connection. Format: `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubConfigAuthorizerCredentialOutput) OauthTokenSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGithubConfigAuthorizerCredential) string { return v.OauthTokenSecretVersion }).(pulumi.StringOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionGithubConfigAuthorizerCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubConfigAuthorizerCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ConnectionGithubConfigAuthorizerCredentialPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGithubConfigAuthorizerCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubConfigAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGithubConfigAuthorizerCredentialPtrOutput) ToConnectionGithubConfigAuthorizerCredentialPtrOutput() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGithubConfigAuthorizerCredentialPtrOutput) ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGithubConfigAuthorizerCredentialPtrOutput) Elem() ConnectionGithubConfigAuthorizerCredentialOutput {
	return o.ApplyT(func(v *ConnectionGithubConfigAuthorizerCredential) ConnectionGithubConfigAuthorizerCredential {
		if v != nil {
			return *v
		}
		var ret ConnectionGithubConfigAuthorizerCredential
		return ret
	}).(ConnectionGithubConfigAuthorizerCredentialOutput)
}

// Required. A SecretManager resource containing the OAuth token that authorizes
// the connection. Format: `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubConfigAuthorizerCredentialPtrOutput) OauthTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubConfigAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return &v.OauthTokenSecretVersion
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionGithubConfigAuthorizerCredentialPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubConfigAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionGithubEnterpriseConfig struct {
	// Optional. ID of the GitHub App created from the manifest.
	AppId *string `pulumi:"appId"`
	// Optional. ID of the installation of the GitHub App.
	AppInstallationId *string `pulumi:"appInstallationId"`
	// (Output)
	// Output only. The URL-friendly name of the GitHub App.
	AppSlug *string `pulumi:"appSlug"`
	// Required. The URI of the GitHub Enterprise host this connection is for.
	HostUri string `pulumi:"hostUri"`
	// (Output)
	// Output only. The URI to navigate to in order to manage the installation associated
	// with this GitHubEnterpriseConfig.
	InstallationUri *string `pulumi:"installationUri"`
	// Optional. SecretManager resource containing the private key of the GitHub App,
	// formatted as `projects/*/secrets/*/versions/*`.
	PrivateKeySecretVersion *string `pulumi:"privateKeySecretVersion"`
	// (Output)
	// Output only. GitHub Enterprise version installed at the host_uri.
	ServerVersion *string `pulumi:"serverVersion"`
	// ServiceDirectoryConfig represents Service Directory configuration for a
	// connection.
	// Structure is documented below.
	ServiceDirectoryConfig *ConnectionGithubEnterpriseConfigServiceDirectoryConfig `pulumi:"serviceDirectoryConfig"`
	// Optional. SSL certificate to use for requests to GitHub Enterprise.
	SslCaCertificate *string `pulumi:"sslCaCertificate"`
	// Optional. SecretManager resource containing the webhook secret of the GitHub App,
	// formatted as `projects/*/secrets/*/versions/*`.
	WebhookSecretSecretVersion *string `pulumi:"webhookSecretSecretVersion"`
}

// ConnectionGithubEnterpriseConfigInput is an input type that accepts ConnectionGithubEnterpriseConfigArgs and ConnectionGithubEnterpriseConfigOutput values.
// You can construct a concrete instance of `ConnectionGithubEnterpriseConfigInput` via:
//
//	ConnectionGithubEnterpriseConfigArgs{...}
type ConnectionGithubEnterpriseConfigInput interface {
	pulumi.Input

	ToConnectionGithubEnterpriseConfigOutput() ConnectionGithubEnterpriseConfigOutput
	ToConnectionGithubEnterpriseConfigOutputWithContext(context.Context) ConnectionGithubEnterpriseConfigOutput
}

type ConnectionGithubEnterpriseConfigArgs struct {
	// Optional. ID of the GitHub App created from the manifest.
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// Optional. ID of the installation of the GitHub App.
	AppInstallationId pulumi.StringPtrInput `pulumi:"appInstallationId"`
	// (Output)
	// Output only. The URL-friendly name of the GitHub App.
	AppSlug pulumi.StringPtrInput `pulumi:"appSlug"`
	// Required. The URI of the GitHub Enterprise host this connection is for.
	HostUri pulumi.StringInput `pulumi:"hostUri"`
	// (Output)
	// Output only. The URI to navigate to in order to manage the installation associated
	// with this GitHubEnterpriseConfig.
	InstallationUri pulumi.StringPtrInput `pulumi:"installationUri"`
	// Optional. SecretManager resource containing the private key of the GitHub App,
	// formatted as `projects/*/secrets/*/versions/*`.
	PrivateKeySecretVersion pulumi.StringPtrInput `pulumi:"privateKeySecretVersion"`
	// (Output)
	// Output only. GitHub Enterprise version installed at the host_uri.
	ServerVersion pulumi.StringPtrInput `pulumi:"serverVersion"`
	// ServiceDirectoryConfig represents Service Directory configuration for a
	// connection.
	// Structure is documented below.
	ServiceDirectoryConfig ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput `pulumi:"serviceDirectoryConfig"`
	// Optional. SSL certificate to use for requests to GitHub Enterprise.
	SslCaCertificate pulumi.StringPtrInput `pulumi:"sslCaCertificate"`
	// Optional. SecretManager resource containing the webhook secret of the GitHub App,
	// formatted as `projects/*/secrets/*/versions/*`.
	WebhookSecretSecretVersion pulumi.StringPtrInput `pulumi:"webhookSecretSecretVersion"`
}

func (ConnectionGithubEnterpriseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubEnterpriseConfig)(nil)).Elem()
}

func (i ConnectionGithubEnterpriseConfigArgs) ToConnectionGithubEnterpriseConfigOutput() ConnectionGithubEnterpriseConfigOutput {
	return i.ToConnectionGithubEnterpriseConfigOutputWithContext(context.Background())
}

func (i ConnectionGithubEnterpriseConfigArgs) ToConnectionGithubEnterpriseConfigOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigOutput)
}

func (i ConnectionGithubEnterpriseConfigArgs) ToConnectionGithubEnterpriseConfigPtrOutput() ConnectionGithubEnterpriseConfigPtrOutput {
	return i.ToConnectionGithubEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionGithubEnterpriseConfigArgs) ToConnectionGithubEnterpriseConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigOutput).ToConnectionGithubEnterpriseConfigPtrOutputWithContext(ctx)
}

// ConnectionGithubEnterpriseConfigPtrInput is an input type that accepts ConnectionGithubEnterpriseConfigArgs, ConnectionGithubEnterpriseConfigPtr and ConnectionGithubEnterpriseConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionGithubEnterpriseConfigPtrInput` via:
//
//	        ConnectionGithubEnterpriseConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionGithubEnterpriseConfigPtrInput interface {
	pulumi.Input

	ToConnectionGithubEnterpriseConfigPtrOutput() ConnectionGithubEnterpriseConfigPtrOutput
	ToConnectionGithubEnterpriseConfigPtrOutputWithContext(context.Context) ConnectionGithubEnterpriseConfigPtrOutput
}

type connectionGithubEnterpriseConfigPtrType ConnectionGithubEnterpriseConfigArgs

func ConnectionGithubEnterpriseConfigPtr(v *ConnectionGithubEnterpriseConfigArgs) ConnectionGithubEnterpriseConfigPtrInput {
	return (*connectionGithubEnterpriseConfigPtrType)(v)
}

func (*connectionGithubEnterpriseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubEnterpriseConfig)(nil)).Elem()
}

func (i *connectionGithubEnterpriseConfigPtrType) ToConnectionGithubEnterpriseConfigPtrOutput() ConnectionGithubEnterpriseConfigPtrOutput {
	return i.ToConnectionGithubEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (i *connectionGithubEnterpriseConfigPtrType) ToConnectionGithubEnterpriseConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigPtrOutput)
}

type ConnectionGithubEnterpriseConfigOutput struct{ *pulumi.OutputState }

func (ConnectionGithubEnterpriseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubEnterpriseConfig)(nil)).Elem()
}

func (o ConnectionGithubEnterpriseConfigOutput) ToConnectionGithubEnterpriseConfigOutput() ConnectionGithubEnterpriseConfigOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigOutput) ToConnectionGithubEnterpriseConfigOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigOutput) ToConnectionGithubEnterpriseConfigPtrOutput() ConnectionGithubEnterpriseConfigPtrOutput {
	return o.ToConnectionGithubEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionGithubEnterpriseConfigOutput) ToConnectionGithubEnterpriseConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGithubEnterpriseConfig) *ConnectionGithubEnterpriseConfig {
		return &v
	}).(ConnectionGithubEnterpriseConfigPtrOutput)
}

// Optional. ID of the GitHub App created from the manifest.
func (o ConnectionGithubEnterpriseConfigOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// Optional. ID of the installation of the GitHub App.
func (o ConnectionGithubEnterpriseConfigOutput) AppInstallationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *string { return v.AppInstallationId }).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The URL-friendly name of the GitHub App.
func (o ConnectionGithubEnterpriseConfigOutput) AppSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *string { return v.AppSlug }).(pulumi.StringPtrOutput)
}

// Required. The URI of the GitHub Enterprise host this connection is for.
func (o ConnectionGithubEnterpriseConfigOutput) HostUri() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) string { return v.HostUri }).(pulumi.StringOutput)
}

// (Output)
// Output only. The URI to navigate to in order to manage the installation associated
// with this GitHubEnterpriseConfig.
func (o ConnectionGithubEnterpriseConfigOutput) InstallationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *string { return v.InstallationUri }).(pulumi.StringPtrOutput)
}

// Optional. SecretManager resource containing the private key of the GitHub App,
// formatted as `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubEnterpriseConfigOutput) PrivateKeySecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *string { return v.PrivateKeySecretVersion }).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. GitHub Enterprise version installed at the host_uri.
func (o ConnectionGithubEnterpriseConfigOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *string { return v.ServerVersion }).(pulumi.StringPtrOutput)
}

// ServiceDirectoryConfig represents Service Directory configuration for a
// connection.
// Structure is documented below.
func (o ConnectionGithubEnterpriseConfigOutput) ServiceDirectoryConfig() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *ConnectionGithubEnterpriseConfigServiceDirectoryConfig {
		return v.ServiceDirectoryConfig
	}).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput)
}

// Optional. SSL certificate to use for requests to GitHub Enterprise.
func (o ConnectionGithubEnterpriseConfigOutput) SslCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *string { return v.SslCaCertificate }).(pulumi.StringPtrOutput)
}

// Optional. SecretManager resource containing the webhook secret of the GitHub App,
// formatted as `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubEnterpriseConfigOutput) WebhookSecretSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *string { return v.WebhookSecretSecretVersion }).(pulumi.StringPtrOutput)
}

type ConnectionGithubEnterpriseConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGithubEnterpriseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubEnterpriseConfig)(nil)).Elem()
}

func (o ConnectionGithubEnterpriseConfigPtrOutput) ToConnectionGithubEnterpriseConfigPtrOutput() ConnectionGithubEnterpriseConfigPtrOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigPtrOutput) ToConnectionGithubEnterpriseConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigPtrOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigPtrOutput) Elem() ConnectionGithubEnterpriseConfigOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) ConnectionGithubEnterpriseConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionGithubEnterpriseConfig
		return ret
	}).(ConnectionGithubEnterpriseConfigOutput)
}

// Optional. ID of the GitHub App created from the manifest.
func (o ConnectionGithubEnterpriseConfigPtrOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.AppId
	}).(pulumi.StringPtrOutput)
}

// Optional. ID of the installation of the GitHub App.
func (o ConnectionGithubEnterpriseConfigPtrOutput) AppInstallationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.AppInstallationId
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The URL-friendly name of the GitHub App.
func (o ConnectionGithubEnterpriseConfigPtrOutput) AppSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.AppSlug
	}).(pulumi.StringPtrOutput)
}

// Required. The URI of the GitHub Enterprise host this connection is for.
func (o ConnectionGithubEnterpriseConfigPtrOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return &v.HostUri
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The URI to navigate to in order to manage the installation associated
// with this GitHubEnterpriseConfig.
func (o ConnectionGithubEnterpriseConfigPtrOutput) InstallationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.InstallationUri
	}).(pulumi.StringPtrOutput)
}

// Optional. SecretManager resource containing the private key of the GitHub App,
// formatted as `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubEnterpriseConfigPtrOutput) PrivateKeySecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKeySecretVersion
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. GitHub Enterprise version installed at the host_uri.
func (o ConnectionGithubEnterpriseConfigPtrOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerVersion
	}).(pulumi.StringPtrOutput)
}

// ServiceDirectoryConfig represents Service Directory configuration for a
// connection.
// Structure is documented below.
func (o ConnectionGithubEnterpriseConfigPtrOutput) ServiceDirectoryConfig() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *ConnectionGithubEnterpriseConfigServiceDirectoryConfig {
		if v == nil {
			return nil
		}
		return v.ServiceDirectoryConfig
	}).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput)
}

// Optional. SSL certificate to use for requests to GitHub Enterprise.
func (o ConnectionGithubEnterpriseConfigPtrOutput) SslCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.SslCaCertificate
	}).(pulumi.StringPtrOutput)
}

// Optional. SecretManager resource containing the webhook secret of the GitHub App,
// formatted as `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubEnterpriseConfigPtrOutput) WebhookSecretSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.WebhookSecretSecretVersion
	}).(pulumi.StringPtrOutput)
}

type ConnectionGithubEnterpriseConfigServiceDirectoryConfig struct {
	// Required. The Service Directory service name.
	// Format:
	// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service string `pulumi:"service"`
}

// ConnectionGithubEnterpriseConfigServiceDirectoryConfigInput is an input type that accepts ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs and ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput values.
// You can construct a concrete instance of `ConnectionGithubEnterpriseConfigServiceDirectoryConfigInput` via:
//
//	ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs{...}
type ConnectionGithubEnterpriseConfigServiceDirectoryConfigInput interface {
	pulumi.Input

	ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput
	ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputWithContext(context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput
}

type ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs struct {
	// Required. The Service Directory service name.
	// Format:
	// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service pulumi.StringInput `pulumi:"service"`
}

func (ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubEnterpriseConfigServiceDirectoryConfig)(nil)).Elem()
}

func (i ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput {
	return i.ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputWithContext(context.Background())
}

func (i ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput)
}

func (i ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return i.ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput).ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx)
}

// ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput is an input type that accepts ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs, ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtr and ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput` via:
//
//	        ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput interface {
	pulumi.Input

	ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput
	ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput
}

type connectionGithubEnterpriseConfigServiceDirectoryConfigPtrType ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs

func ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtr(v *ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput {
	return (*connectionGithubEnterpriseConfigServiceDirectoryConfigPtrType)(v)
}

func (*connectionGithubEnterpriseConfigServiceDirectoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubEnterpriseConfigServiceDirectoryConfig)(nil)).Elem()
}

func (i *connectionGithubEnterpriseConfigServiceDirectoryConfigPtrType) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return i.ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i *connectionGithubEnterpriseConfigServiceDirectoryConfigPtrType) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput)
}

type ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput struct{ *pulumi.OutputState }

func (ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubEnterpriseConfigServiceDirectoryConfig)(nil)).Elem()
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o.ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGithubEnterpriseConfigServiceDirectoryConfig) *ConnectionGithubEnterpriseConfigServiceDirectoryConfig {
		return &v
	}).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput)
}

// Required. The Service Directory service name.
// Format:
// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfigServiceDirectoryConfig) string { return v.Service }).(pulumi.StringOutput)
}

type ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubEnterpriseConfigServiceDirectoryConfig)(nil)).Elem()
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput) Elem() ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfigServiceDirectoryConfig) ConnectionGithubEnterpriseConfigServiceDirectoryConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionGithubEnterpriseConfigServiceDirectoryConfig
		return ret
	}).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput)
}

// Required. The Service Directory service name.
// Format:
// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfigServiceDirectoryConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

type ConnectionGitlabConfig struct {
	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential ConnectionGitlabConfigAuthorizerCredential `pulumi:"authorizerCredential"`
	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	ReadAuthorizerCredential ConnectionGitlabConfigReadAuthorizerCredential `pulumi:"readAuthorizerCredential"`
	// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
	// formatted as `projects/*/secrets/*/versions/*`. This is used to validate
	// webhooks.
	WebhookSecretSecretVersion string `pulumi:"webhookSecretSecretVersion"`
}

// ConnectionGitlabConfigInput is an input type that accepts ConnectionGitlabConfigArgs and ConnectionGitlabConfigOutput values.
// You can construct a concrete instance of `ConnectionGitlabConfigInput` via:
//
//	ConnectionGitlabConfigArgs{...}
type ConnectionGitlabConfigInput interface {
	pulumi.Input

	ToConnectionGitlabConfigOutput() ConnectionGitlabConfigOutput
	ToConnectionGitlabConfigOutputWithContext(context.Context) ConnectionGitlabConfigOutput
}

type ConnectionGitlabConfigArgs struct {
	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential ConnectionGitlabConfigAuthorizerCredentialInput `pulumi:"authorizerCredential"`
	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	ReadAuthorizerCredential ConnectionGitlabConfigReadAuthorizerCredentialInput `pulumi:"readAuthorizerCredential"`
	// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
	// formatted as `projects/*/secrets/*/versions/*`. This is used to validate
	// webhooks.
	WebhookSecretSecretVersion pulumi.StringInput `pulumi:"webhookSecretSecretVersion"`
}

func (ConnectionGitlabConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabConfig)(nil)).Elem()
}

func (i ConnectionGitlabConfigArgs) ToConnectionGitlabConfigOutput() ConnectionGitlabConfigOutput {
	return i.ToConnectionGitlabConfigOutputWithContext(context.Background())
}

func (i ConnectionGitlabConfigArgs) ToConnectionGitlabConfigOutputWithContext(ctx context.Context) ConnectionGitlabConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigOutput)
}

func (i ConnectionGitlabConfigArgs) ToConnectionGitlabConfigPtrOutput() ConnectionGitlabConfigPtrOutput {
	return i.ToConnectionGitlabConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionGitlabConfigArgs) ToConnectionGitlabConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigOutput).ToConnectionGitlabConfigPtrOutputWithContext(ctx)
}

// ConnectionGitlabConfigPtrInput is an input type that accepts ConnectionGitlabConfigArgs, ConnectionGitlabConfigPtr and ConnectionGitlabConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionGitlabConfigPtrInput` via:
//
//	        ConnectionGitlabConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionGitlabConfigPtrInput interface {
	pulumi.Input

	ToConnectionGitlabConfigPtrOutput() ConnectionGitlabConfigPtrOutput
	ToConnectionGitlabConfigPtrOutputWithContext(context.Context) ConnectionGitlabConfigPtrOutput
}

type connectionGitlabConfigPtrType ConnectionGitlabConfigArgs

func ConnectionGitlabConfigPtr(v *ConnectionGitlabConfigArgs) ConnectionGitlabConfigPtrInput {
	return (*connectionGitlabConfigPtrType)(v)
}

func (*connectionGitlabConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabConfig)(nil)).Elem()
}

func (i *connectionGitlabConfigPtrType) ToConnectionGitlabConfigPtrOutput() ConnectionGitlabConfigPtrOutput {
	return i.ToConnectionGitlabConfigPtrOutputWithContext(context.Background())
}

func (i *connectionGitlabConfigPtrType) ToConnectionGitlabConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigPtrOutput)
}

type ConnectionGitlabConfigOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabConfig)(nil)).Elem()
}

func (o ConnectionGitlabConfigOutput) ToConnectionGitlabConfigOutput() ConnectionGitlabConfigOutput {
	return o
}

func (o ConnectionGitlabConfigOutput) ToConnectionGitlabConfigOutputWithContext(ctx context.Context) ConnectionGitlabConfigOutput {
	return o
}

func (o ConnectionGitlabConfigOutput) ToConnectionGitlabConfigPtrOutput() ConnectionGitlabConfigPtrOutput {
	return o.ToConnectionGitlabConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionGitlabConfigOutput) ToConnectionGitlabConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGitlabConfig) *ConnectionGitlabConfig {
		return &v
	}).(ConnectionGitlabConfigPtrOutput)
}

// Represents a personal access token that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionGitlabConfigOutput) AuthorizerCredential() ConnectionGitlabConfigAuthorizerCredentialOutput {
	return o.ApplyT(func(v ConnectionGitlabConfig) ConnectionGitlabConfigAuthorizerCredential {
		return v.AuthorizerCredential
	}).(ConnectionGitlabConfigAuthorizerCredentialOutput)
}

// Represents a personal access token that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionGitlabConfigOutput) ReadAuthorizerCredential() ConnectionGitlabConfigReadAuthorizerCredentialOutput {
	return o.ApplyT(func(v ConnectionGitlabConfig) ConnectionGitlabConfigReadAuthorizerCredential {
		return v.ReadAuthorizerCredential
	}).(ConnectionGitlabConfigReadAuthorizerCredentialOutput)
}

// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
// formatted as `projects/*/secrets/*/versions/*`. This is used to validate
// webhooks.
func (o ConnectionGitlabConfigOutput) WebhookSecretSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGitlabConfig) string { return v.WebhookSecretSecretVersion }).(pulumi.StringOutput)
}

type ConnectionGitlabConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabConfig)(nil)).Elem()
}

func (o ConnectionGitlabConfigPtrOutput) ToConnectionGitlabConfigPtrOutput() ConnectionGitlabConfigPtrOutput {
	return o
}

func (o ConnectionGitlabConfigPtrOutput) ToConnectionGitlabConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigPtrOutput {
	return o
}

func (o ConnectionGitlabConfigPtrOutput) Elem() ConnectionGitlabConfigOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfig) ConnectionGitlabConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionGitlabConfig
		return ret
	}).(ConnectionGitlabConfigOutput)
}

// Represents a personal access token that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionGitlabConfigPtrOutput) AuthorizerCredential() ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfig) *ConnectionGitlabConfigAuthorizerCredential {
		if v == nil {
			return nil
		}
		return &v.AuthorizerCredential
	}).(ConnectionGitlabConfigAuthorizerCredentialPtrOutput)
}

// Represents a personal access token that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionGitlabConfigPtrOutput) ReadAuthorizerCredential() ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfig) *ConnectionGitlabConfigReadAuthorizerCredential {
		if v == nil {
			return nil
		}
		return &v.ReadAuthorizerCredential
	}).(ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput)
}

// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
// formatted as `projects/*/secrets/*/versions/*`. This is used to validate
// webhooks.
func (o ConnectionGitlabConfigPtrOutput) WebhookSecretSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfig) *string {
		if v == nil {
			return nil
		}
		return &v.WebhookSecretSecretVersion
	}).(pulumi.StringPtrOutput)
}

type ConnectionGitlabConfigAuthorizerCredential struct {
	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion string `pulumi:"userTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username *string `pulumi:"username"`
}

// ConnectionGitlabConfigAuthorizerCredentialInput is an input type that accepts ConnectionGitlabConfigAuthorizerCredentialArgs and ConnectionGitlabConfigAuthorizerCredentialOutput values.
// You can construct a concrete instance of `ConnectionGitlabConfigAuthorizerCredentialInput` via:
//
//	ConnectionGitlabConfigAuthorizerCredentialArgs{...}
type ConnectionGitlabConfigAuthorizerCredentialInput interface {
	pulumi.Input

	ToConnectionGitlabConfigAuthorizerCredentialOutput() ConnectionGitlabConfigAuthorizerCredentialOutput
	ToConnectionGitlabConfigAuthorizerCredentialOutputWithContext(context.Context) ConnectionGitlabConfigAuthorizerCredentialOutput
}

type ConnectionGitlabConfigAuthorizerCredentialArgs struct {
	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion pulumi.StringInput `pulumi:"userTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ConnectionGitlabConfigAuthorizerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabConfigAuthorizerCredential)(nil)).Elem()
}

func (i ConnectionGitlabConfigAuthorizerCredentialArgs) ToConnectionGitlabConfigAuthorizerCredentialOutput() ConnectionGitlabConfigAuthorizerCredentialOutput {
	return i.ToConnectionGitlabConfigAuthorizerCredentialOutputWithContext(context.Background())
}

func (i ConnectionGitlabConfigAuthorizerCredentialArgs) ToConnectionGitlabConfigAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGitlabConfigAuthorizerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigAuthorizerCredentialOutput)
}

func (i ConnectionGitlabConfigAuthorizerCredentialArgs) ToConnectionGitlabConfigAuthorizerCredentialPtrOutput() ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return i.ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i ConnectionGitlabConfigAuthorizerCredentialArgs) ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigAuthorizerCredentialOutput).ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(ctx)
}

// ConnectionGitlabConfigAuthorizerCredentialPtrInput is an input type that accepts ConnectionGitlabConfigAuthorizerCredentialArgs, ConnectionGitlabConfigAuthorizerCredentialPtr and ConnectionGitlabConfigAuthorizerCredentialPtrOutput values.
// You can construct a concrete instance of `ConnectionGitlabConfigAuthorizerCredentialPtrInput` via:
//
//	        ConnectionGitlabConfigAuthorizerCredentialArgs{...}
//
//	or:
//
//	        nil
type ConnectionGitlabConfigAuthorizerCredentialPtrInput interface {
	pulumi.Input

	ToConnectionGitlabConfigAuthorizerCredentialPtrOutput() ConnectionGitlabConfigAuthorizerCredentialPtrOutput
	ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(context.Context) ConnectionGitlabConfigAuthorizerCredentialPtrOutput
}

type connectionGitlabConfigAuthorizerCredentialPtrType ConnectionGitlabConfigAuthorizerCredentialArgs

func ConnectionGitlabConfigAuthorizerCredentialPtr(v *ConnectionGitlabConfigAuthorizerCredentialArgs) ConnectionGitlabConfigAuthorizerCredentialPtrInput {
	return (*connectionGitlabConfigAuthorizerCredentialPtrType)(v)
}

func (*connectionGitlabConfigAuthorizerCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabConfigAuthorizerCredential)(nil)).Elem()
}

func (i *connectionGitlabConfigAuthorizerCredentialPtrType) ToConnectionGitlabConfigAuthorizerCredentialPtrOutput() ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return i.ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i *connectionGitlabConfigAuthorizerCredentialPtrType) ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigAuthorizerCredentialPtrOutput)
}

type ConnectionGitlabConfigAuthorizerCredentialOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabConfigAuthorizerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabConfigAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGitlabConfigAuthorizerCredentialOutput) ToConnectionGitlabConfigAuthorizerCredentialOutput() ConnectionGitlabConfigAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGitlabConfigAuthorizerCredentialOutput) ToConnectionGitlabConfigAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGitlabConfigAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGitlabConfigAuthorizerCredentialOutput) ToConnectionGitlabConfigAuthorizerCredentialPtrOutput() ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return o.ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (o ConnectionGitlabConfigAuthorizerCredentialOutput) ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGitlabConfigAuthorizerCredential) *ConnectionGitlabConfigAuthorizerCredential {
		return &v
	}).(ConnectionGitlabConfigAuthorizerCredentialPtrOutput)
}

// Required. A SecretManager resource containing the user token that authorizes
// the Developer Connect connection. Format:
// `projects/*/secrets/*/versions/*`.
func (o ConnectionGitlabConfigAuthorizerCredentialOutput) UserTokenSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGitlabConfigAuthorizerCredential) string { return v.UserTokenSecretVersion }).(pulumi.StringOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionGitlabConfigAuthorizerCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGitlabConfigAuthorizerCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ConnectionGitlabConfigAuthorizerCredentialPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabConfigAuthorizerCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabConfigAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGitlabConfigAuthorizerCredentialPtrOutput) ToConnectionGitlabConfigAuthorizerCredentialPtrOutput() ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGitlabConfigAuthorizerCredentialPtrOutput) ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGitlabConfigAuthorizerCredentialPtrOutput) Elem() ConnectionGitlabConfigAuthorizerCredentialOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfigAuthorizerCredential) ConnectionGitlabConfigAuthorizerCredential {
		if v != nil {
			return *v
		}
		var ret ConnectionGitlabConfigAuthorizerCredential
		return ret
	}).(ConnectionGitlabConfigAuthorizerCredentialOutput)
}

// Required. A SecretManager resource containing the user token that authorizes
// the Developer Connect connection. Format:
// `projects/*/secrets/*/versions/*`.
func (o ConnectionGitlabConfigAuthorizerCredentialPtrOutput) UserTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfigAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return &v.UserTokenSecretVersion
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionGitlabConfigAuthorizerCredentialPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfigAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionGitlabConfigReadAuthorizerCredential struct {
	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion string `pulumi:"userTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username *string `pulumi:"username"`
}

// ConnectionGitlabConfigReadAuthorizerCredentialInput is an input type that accepts ConnectionGitlabConfigReadAuthorizerCredentialArgs and ConnectionGitlabConfigReadAuthorizerCredentialOutput values.
// You can construct a concrete instance of `ConnectionGitlabConfigReadAuthorizerCredentialInput` via:
//
//	ConnectionGitlabConfigReadAuthorizerCredentialArgs{...}
type ConnectionGitlabConfigReadAuthorizerCredentialInput interface {
	pulumi.Input

	ToConnectionGitlabConfigReadAuthorizerCredentialOutput() ConnectionGitlabConfigReadAuthorizerCredentialOutput
	ToConnectionGitlabConfigReadAuthorizerCredentialOutputWithContext(context.Context) ConnectionGitlabConfigReadAuthorizerCredentialOutput
}

type ConnectionGitlabConfigReadAuthorizerCredentialArgs struct {
	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion pulumi.StringInput `pulumi:"userTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ConnectionGitlabConfigReadAuthorizerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabConfigReadAuthorizerCredential)(nil)).Elem()
}

func (i ConnectionGitlabConfigReadAuthorizerCredentialArgs) ToConnectionGitlabConfigReadAuthorizerCredentialOutput() ConnectionGitlabConfigReadAuthorizerCredentialOutput {
	return i.ToConnectionGitlabConfigReadAuthorizerCredentialOutputWithContext(context.Background())
}

func (i ConnectionGitlabConfigReadAuthorizerCredentialArgs) ToConnectionGitlabConfigReadAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGitlabConfigReadAuthorizerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigReadAuthorizerCredentialOutput)
}

func (i ConnectionGitlabConfigReadAuthorizerCredentialArgs) ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutput() ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return i.ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i ConnectionGitlabConfigReadAuthorizerCredentialArgs) ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigReadAuthorizerCredentialOutput).ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(ctx)
}

// ConnectionGitlabConfigReadAuthorizerCredentialPtrInput is an input type that accepts ConnectionGitlabConfigReadAuthorizerCredentialArgs, ConnectionGitlabConfigReadAuthorizerCredentialPtr and ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput values.
// You can construct a concrete instance of `ConnectionGitlabConfigReadAuthorizerCredentialPtrInput` via:
//
//	        ConnectionGitlabConfigReadAuthorizerCredentialArgs{...}
//
//	or:
//
//	        nil
type ConnectionGitlabConfigReadAuthorizerCredentialPtrInput interface {
	pulumi.Input

	ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutput() ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput
	ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(context.Context) ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput
}

type connectionGitlabConfigReadAuthorizerCredentialPtrType ConnectionGitlabConfigReadAuthorizerCredentialArgs

func ConnectionGitlabConfigReadAuthorizerCredentialPtr(v *ConnectionGitlabConfigReadAuthorizerCredentialArgs) ConnectionGitlabConfigReadAuthorizerCredentialPtrInput {
	return (*connectionGitlabConfigReadAuthorizerCredentialPtrType)(v)
}

func (*connectionGitlabConfigReadAuthorizerCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabConfigReadAuthorizerCredential)(nil)).Elem()
}

func (i *connectionGitlabConfigReadAuthorizerCredentialPtrType) ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutput() ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return i.ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i *connectionGitlabConfigReadAuthorizerCredentialPtrType) ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput)
}

type ConnectionGitlabConfigReadAuthorizerCredentialOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabConfigReadAuthorizerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabConfigReadAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGitlabConfigReadAuthorizerCredentialOutput) ToConnectionGitlabConfigReadAuthorizerCredentialOutput() ConnectionGitlabConfigReadAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGitlabConfigReadAuthorizerCredentialOutput) ToConnectionGitlabConfigReadAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGitlabConfigReadAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGitlabConfigReadAuthorizerCredentialOutput) ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutput() ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return o.ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (o ConnectionGitlabConfigReadAuthorizerCredentialOutput) ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGitlabConfigReadAuthorizerCredential) *ConnectionGitlabConfigReadAuthorizerCredential {
		return &v
	}).(ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput)
}

// Required. A SecretManager resource containing the user token that authorizes
// the Developer Connect connection. Format:
// `projects/*/secrets/*/versions/*`.
func (o ConnectionGitlabConfigReadAuthorizerCredentialOutput) UserTokenSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGitlabConfigReadAuthorizerCredential) string { return v.UserTokenSecretVersion }).(pulumi.StringOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionGitlabConfigReadAuthorizerCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGitlabConfigReadAuthorizerCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabConfigReadAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput) ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutput() ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput) ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput) Elem() ConnectionGitlabConfigReadAuthorizerCredentialOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfigReadAuthorizerCredential) ConnectionGitlabConfigReadAuthorizerCredential {
		if v != nil {
			return *v
		}
		var ret ConnectionGitlabConfigReadAuthorizerCredential
		return ret
	}).(ConnectionGitlabConfigReadAuthorizerCredentialOutput)
}

// Required. A SecretManager resource containing the user token that authorizes
// the Developer Connect connection. Format:
// `projects/*/secrets/*/versions/*`.
func (o ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput) UserTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfigReadAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return &v.UserTokenSecretVersion
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfigReadAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionGitlabEnterpriseConfig struct {
	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential ConnectionGitlabEnterpriseConfigAuthorizerCredential `pulumi:"authorizerCredential"`
	// Required. The URI of the GitLab Enterprise host this connection is for.
	HostUri string `pulumi:"hostUri"`
	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	ReadAuthorizerCredential ConnectionGitlabEnterpriseConfigReadAuthorizerCredential `pulumi:"readAuthorizerCredential"`
	// (Output)
	// Output only. Version of the GitLab Enterprise server running on the `hostUri`.
	ServerVersion *string `pulumi:"serverVersion"`
	// ServiceDirectoryConfig represents Service Directory configuration for a
	// connection.
	// Structure is documented below.
	ServiceDirectoryConfig *ConnectionGitlabEnterpriseConfigServiceDirectoryConfig `pulumi:"serviceDirectoryConfig"`
	// Optional. SSL Certificate Authority certificate to use for requests to GitLab
	// Enterprise instance.
	SslCaCertificate *string `pulumi:"sslCaCertificate"`
	// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
	// formatted as `projects/*/secrets/*/versions/*`. This is used to validate
	// webhooks.
	WebhookSecretSecretVersion string `pulumi:"webhookSecretSecretVersion"`
}

// ConnectionGitlabEnterpriseConfigInput is an input type that accepts ConnectionGitlabEnterpriseConfigArgs and ConnectionGitlabEnterpriseConfigOutput values.
// You can construct a concrete instance of `ConnectionGitlabEnterpriseConfigInput` via:
//
//	ConnectionGitlabEnterpriseConfigArgs{...}
type ConnectionGitlabEnterpriseConfigInput interface {
	pulumi.Input

	ToConnectionGitlabEnterpriseConfigOutput() ConnectionGitlabEnterpriseConfigOutput
	ToConnectionGitlabEnterpriseConfigOutputWithContext(context.Context) ConnectionGitlabEnterpriseConfigOutput
}

type ConnectionGitlabEnterpriseConfigArgs struct {
	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential ConnectionGitlabEnterpriseConfigAuthorizerCredentialInput `pulumi:"authorizerCredential"`
	// Required. The URI of the GitLab Enterprise host this connection is for.
	HostUri pulumi.StringInput `pulumi:"hostUri"`
	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	ReadAuthorizerCredential ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialInput `pulumi:"readAuthorizerCredential"`
	// (Output)
	// Output only. Version of the GitLab Enterprise server running on the `hostUri`.
	ServerVersion pulumi.StringPtrInput `pulumi:"serverVersion"`
	// ServiceDirectoryConfig represents Service Directory configuration for a
	// connection.
	// Structure is documented below.
	ServiceDirectoryConfig ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrInput `pulumi:"serviceDirectoryConfig"`
	// Optional. SSL Certificate Authority certificate to use for requests to GitLab
	// Enterprise instance.
	SslCaCertificate pulumi.StringPtrInput `pulumi:"sslCaCertificate"`
	// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
	// formatted as `projects/*/secrets/*/versions/*`. This is used to validate
	// webhooks.
	WebhookSecretSecretVersion pulumi.StringInput `pulumi:"webhookSecretSecretVersion"`
}

func (ConnectionGitlabEnterpriseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabEnterpriseConfig)(nil)).Elem()
}

func (i ConnectionGitlabEnterpriseConfigArgs) ToConnectionGitlabEnterpriseConfigOutput() ConnectionGitlabEnterpriseConfigOutput {
	return i.ToConnectionGitlabEnterpriseConfigOutputWithContext(context.Background())
}

func (i ConnectionGitlabEnterpriseConfigArgs) ToConnectionGitlabEnterpriseConfigOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabEnterpriseConfigOutput)
}

func (i ConnectionGitlabEnterpriseConfigArgs) ToConnectionGitlabEnterpriseConfigPtrOutput() ConnectionGitlabEnterpriseConfigPtrOutput {
	return i.ToConnectionGitlabEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionGitlabEnterpriseConfigArgs) ToConnectionGitlabEnterpriseConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabEnterpriseConfigOutput).ToConnectionGitlabEnterpriseConfigPtrOutputWithContext(ctx)
}

// ConnectionGitlabEnterpriseConfigPtrInput is an input type that accepts ConnectionGitlabEnterpriseConfigArgs, ConnectionGitlabEnterpriseConfigPtr and ConnectionGitlabEnterpriseConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionGitlabEnterpriseConfigPtrInput` via:
//
//	        ConnectionGitlabEnterpriseConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionGitlabEnterpriseConfigPtrInput interface {
	pulumi.Input

	ToConnectionGitlabEnterpriseConfigPtrOutput() ConnectionGitlabEnterpriseConfigPtrOutput
	ToConnectionGitlabEnterpriseConfigPtrOutputWithContext(context.Context) ConnectionGitlabEnterpriseConfigPtrOutput
}

type connectionGitlabEnterpriseConfigPtrType ConnectionGitlabEnterpriseConfigArgs

func ConnectionGitlabEnterpriseConfigPtr(v *ConnectionGitlabEnterpriseConfigArgs) ConnectionGitlabEnterpriseConfigPtrInput {
	return (*connectionGitlabEnterpriseConfigPtrType)(v)
}

func (*connectionGitlabEnterpriseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabEnterpriseConfig)(nil)).Elem()
}

func (i *connectionGitlabEnterpriseConfigPtrType) ToConnectionGitlabEnterpriseConfigPtrOutput() ConnectionGitlabEnterpriseConfigPtrOutput {
	return i.ToConnectionGitlabEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (i *connectionGitlabEnterpriseConfigPtrType) ToConnectionGitlabEnterpriseConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabEnterpriseConfigPtrOutput)
}

type ConnectionGitlabEnterpriseConfigOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabEnterpriseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabEnterpriseConfig)(nil)).Elem()
}

func (o ConnectionGitlabEnterpriseConfigOutput) ToConnectionGitlabEnterpriseConfigOutput() ConnectionGitlabEnterpriseConfigOutput {
	return o
}

func (o ConnectionGitlabEnterpriseConfigOutput) ToConnectionGitlabEnterpriseConfigOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigOutput {
	return o
}

func (o ConnectionGitlabEnterpriseConfigOutput) ToConnectionGitlabEnterpriseConfigPtrOutput() ConnectionGitlabEnterpriseConfigPtrOutput {
	return o.ToConnectionGitlabEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionGitlabEnterpriseConfigOutput) ToConnectionGitlabEnterpriseConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGitlabEnterpriseConfig) *ConnectionGitlabEnterpriseConfig {
		return &v
	}).(ConnectionGitlabEnterpriseConfigPtrOutput)
}

// Represents a personal access token that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionGitlabEnterpriseConfigOutput) AuthorizerCredential() ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput {
	return o.ApplyT(func(v ConnectionGitlabEnterpriseConfig) ConnectionGitlabEnterpriseConfigAuthorizerCredential {
		return v.AuthorizerCredential
	}).(ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput)
}

// Required. The URI of the GitLab Enterprise host this connection is for.
func (o ConnectionGitlabEnterpriseConfigOutput) HostUri() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGitlabEnterpriseConfig) string { return v.HostUri }).(pulumi.StringOutput)
}

// Represents a personal access token that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionGitlabEnterpriseConfigOutput) ReadAuthorizerCredential() ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput {
	return o.ApplyT(func(v ConnectionGitlabEnterpriseConfig) ConnectionGitlabEnterpriseConfigReadAuthorizerCredential {
		return v.ReadAuthorizerCredential
	}).(ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput)
}

// (Output)
// Output only. Version of the GitLab Enterprise server running on the `hostUri`.
func (o ConnectionGitlabEnterpriseConfigOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGitlabEnterpriseConfig) *string { return v.ServerVersion }).(pulumi.StringPtrOutput)
}

// ServiceDirectoryConfig represents Service Directory configuration for a
// connection.
// Structure is documented below.
func (o ConnectionGitlabEnterpriseConfigOutput) ServiceDirectoryConfig() ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v ConnectionGitlabEnterpriseConfig) *ConnectionGitlabEnterpriseConfigServiceDirectoryConfig {
		return v.ServiceDirectoryConfig
	}).(ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput)
}

// Optional. SSL Certificate Authority certificate to use for requests to GitLab
// Enterprise instance.
func (o ConnectionGitlabEnterpriseConfigOutput) SslCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGitlabEnterpriseConfig) *string { return v.SslCaCertificate }).(pulumi.StringPtrOutput)
}

// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
// formatted as `projects/*/secrets/*/versions/*`. This is used to validate
// webhooks.
func (o ConnectionGitlabEnterpriseConfigOutput) WebhookSecretSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGitlabEnterpriseConfig) string { return v.WebhookSecretSecretVersion }).(pulumi.StringOutput)
}

type ConnectionGitlabEnterpriseConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabEnterpriseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabEnterpriseConfig)(nil)).Elem()
}

func (o ConnectionGitlabEnterpriseConfigPtrOutput) ToConnectionGitlabEnterpriseConfigPtrOutput() ConnectionGitlabEnterpriseConfigPtrOutput {
	return o
}

func (o ConnectionGitlabEnterpriseConfigPtrOutput) ToConnectionGitlabEnterpriseConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigPtrOutput {
	return o
}

func (o ConnectionGitlabEnterpriseConfigPtrOutput) Elem() ConnectionGitlabEnterpriseConfigOutput {
	return o.ApplyT(func(v *ConnectionGitlabEnterpriseConfig) ConnectionGitlabEnterpriseConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionGitlabEnterpriseConfig
		return ret
	}).(ConnectionGitlabEnterpriseConfigOutput)
}

// Represents a personal access token that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionGitlabEnterpriseConfigPtrOutput) AuthorizerCredential() ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabEnterpriseConfig) *ConnectionGitlabEnterpriseConfigAuthorizerCredential {
		if v == nil {
			return nil
		}
		return &v.AuthorizerCredential
	}).(ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput)
}

// Required. The URI of the GitLab Enterprise host this connection is for.
func (o ConnectionGitlabEnterpriseConfigPtrOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return &v.HostUri
	}).(pulumi.StringPtrOutput)
}

// Represents a personal access token that authorized the Connection,
// and associated metadata.
// Structure is documented below.
func (o ConnectionGitlabEnterpriseConfigPtrOutput) ReadAuthorizerCredential() ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabEnterpriseConfig) *ConnectionGitlabEnterpriseConfigReadAuthorizerCredential {
		if v == nil {
			return nil
		}
		return &v.ReadAuthorizerCredential
	}).(ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput)
}

// (Output)
// Output only. Version of the GitLab Enterprise server running on the `hostUri`.
func (o ConnectionGitlabEnterpriseConfigPtrOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerVersion
	}).(pulumi.StringPtrOutput)
}

// ServiceDirectoryConfig represents Service Directory configuration for a
// connection.
// Structure is documented below.
func (o ConnectionGitlabEnterpriseConfigPtrOutput) ServiceDirectoryConfig() ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabEnterpriseConfig) *ConnectionGitlabEnterpriseConfigServiceDirectoryConfig {
		if v == nil {
			return nil
		}
		return v.ServiceDirectoryConfig
	}).(ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput)
}

// Optional. SSL Certificate Authority certificate to use for requests to GitLab
// Enterprise instance.
func (o ConnectionGitlabEnterpriseConfigPtrOutput) SslCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.SslCaCertificate
	}).(pulumi.StringPtrOutput)
}

// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
// formatted as `projects/*/secrets/*/versions/*`. This is used to validate
// webhooks.
func (o ConnectionGitlabEnterpriseConfigPtrOutput) WebhookSecretSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return &v.WebhookSecretSecretVersion
	}).(pulumi.StringPtrOutput)
}

type ConnectionGitlabEnterpriseConfigAuthorizerCredential struct {
	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion string `pulumi:"userTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username *string `pulumi:"username"`
}

// ConnectionGitlabEnterpriseConfigAuthorizerCredentialInput is an input type that accepts ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs and ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput values.
// You can construct a concrete instance of `ConnectionGitlabEnterpriseConfigAuthorizerCredentialInput` via:
//
//	ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs{...}
type ConnectionGitlabEnterpriseConfigAuthorizerCredentialInput interface {
	pulumi.Input

	ToConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput() ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput
	ToConnectionGitlabEnterpriseConfigAuthorizerCredentialOutputWithContext(context.Context) ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput
}

type ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs struct {
	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion pulumi.StringInput `pulumi:"userTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabEnterpriseConfigAuthorizerCredential)(nil)).Elem()
}

func (i ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs) ToConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput() ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput {
	return i.ToConnectionGitlabEnterpriseConfigAuthorizerCredentialOutputWithContext(context.Background())
}

func (i ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs) ToConnectionGitlabEnterpriseConfigAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput)
}

func (i ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs) ToConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput() ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput {
	return i.ToConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs) ToConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput).ToConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutputWithContext(ctx)
}

// ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrInput is an input type that accepts ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs, ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtr and ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput values.
// You can construct a concrete instance of `ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrInput` via:
//
//	        ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs{...}
//
//	or:
//
//	        nil
type ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrInput interface {
	pulumi.Input

	ToConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput() ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput
	ToConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutputWithContext(context.Context) ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput
}

type connectionGitlabEnterpriseConfigAuthorizerCredentialPtrType ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs

func ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtr(v *ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs) ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrInput {
	return (*connectionGitlabEnterpriseConfigAuthorizerCredentialPtrType)(v)
}

func (*connectionGitlabEnterpriseConfigAuthorizerCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabEnterpriseConfigAuthorizerCredential)(nil)).Elem()
}

func (i *connectionGitlabEnterpriseConfigAuthorizerCredentialPtrType) ToConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput() ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput {
	return i.ToConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i *connectionGitlabEnterpriseConfigAuthorizerCredentialPtrType) ToConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput)
}

type ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabEnterpriseConfigAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput) ToConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput() ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput) ToConnectionGitlabEnterpriseConfigAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput) ToConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput() ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput {
	return o.ToConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (o ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput) ToConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGitlabEnterpriseConfigAuthorizerCredential) *ConnectionGitlabEnterpriseConfigAuthorizerCredential {
		return &v
	}).(ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput)
}

// Required. A SecretManager resource containing the user token that authorizes
// the Developer Connect connection. Format:
// `projects/*/secrets/*/versions/*`.
func (o ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput) UserTokenSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGitlabEnterpriseConfigAuthorizerCredential) string { return v.UserTokenSecretVersion }).(pulumi.StringOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGitlabEnterpriseConfigAuthorizerCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabEnterpriseConfigAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput) ToConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput() ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput) ToConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput) Elem() ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput {
	return o.ApplyT(func(v *ConnectionGitlabEnterpriseConfigAuthorizerCredential) ConnectionGitlabEnterpriseConfigAuthorizerCredential {
		if v != nil {
			return *v
		}
		var ret ConnectionGitlabEnterpriseConfigAuthorizerCredential
		return ret
	}).(ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput)
}

// Required. A SecretManager resource containing the user token that authorizes
// the Developer Connect connection. Format:
// `projects/*/secrets/*/versions/*`.
func (o ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput) UserTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabEnterpriseConfigAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return &v.UserTokenSecretVersion
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabEnterpriseConfigAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionGitlabEnterpriseConfigReadAuthorizerCredential struct {
	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion string `pulumi:"userTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username *string `pulumi:"username"`
}

// ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialInput is an input type that accepts ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs and ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput values.
// You can construct a concrete instance of `ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialInput` via:
//
//	ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs{...}
type ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialInput interface {
	pulumi.Input

	ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput() ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput
	ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutputWithContext(context.Context) ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput
}

type ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs struct {
	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion pulumi.StringInput `pulumi:"userTokenSecretVersion"`
	// (Output)
	// Output only. The username associated with this token.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabEnterpriseConfigReadAuthorizerCredential)(nil)).Elem()
}

func (i ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs) ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput() ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput {
	return i.ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutputWithContext(context.Background())
}

func (i ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs) ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput)
}

func (i ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs) ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput() ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput {
	return i.ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs) ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput).ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutputWithContext(ctx)
}

// ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrInput is an input type that accepts ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs, ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtr and ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput values.
// You can construct a concrete instance of `ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrInput` via:
//
//	        ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs{...}
//
//	or:
//
//	        nil
type ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrInput interface {
	pulumi.Input

	ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput() ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput
	ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutputWithContext(context.Context) ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput
}

type connectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrType ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs

func ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtr(v *ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs) ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrInput {
	return (*connectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrType)(v)
}

func (*connectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabEnterpriseConfigReadAuthorizerCredential)(nil)).Elem()
}

func (i *connectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrType) ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput() ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput {
	return i.ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i *connectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrType) ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput)
}

type ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabEnterpriseConfigReadAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput) ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput() ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput) ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput) ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput() ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput {
	return o.ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (o ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput) ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGitlabEnterpriseConfigReadAuthorizerCredential) *ConnectionGitlabEnterpriseConfigReadAuthorizerCredential {
		return &v
	}).(ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput)
}

// Required. A SecretManager resource containing the user token that authorizes
// the Developer Connect connection. Format:
// `projects/*/secrets/*/versions/*`.
func (o ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput) UserTokenSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGitlabEnterpriseConfigReadAuthorizerCredential) string {
		return v.UserTokenSecretVersion
	}).(pulumi.StringOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGitlabEnterpriseConfigReadAuthorizerCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabEnterpriseConfigReadAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput) ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput() ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput) ToConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput) Elem() ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput {
	return o.ApplyT(func(v *ConnectionGitlabEnterpriseConfigReadAuthorizerCredential) ConnectionGitlabEnterpriseConfigReadAuthorizerCredential {
		if v != nil {
			return *v
		}
		var ret ConnectionGitlabEnterpriseConfigReadAuthorizerCredential
		return ret
	}).(ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput)
}

// Required. A SecretManager resource containing the user token that authorizes
// the Developer Connect connection. Format:
// `projects/*/secrets/*/versions/*`.
func (o ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput) UserTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabEnterpriseConfigReadAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return &v.UserTokenSecretVersion
	}).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. The username associated with this token.
func (o ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabEnterpriseConfigReadAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionGitlabEnterpriseConfigServiceDirectoryConfig struct {
	// Required. The Service Directory service name.
	// Format:
	// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service string `pulumi:"service"`
}

// ConnectionGitlabEnterpriseConfigServiceDirectoryConfigInput is an input type that accepts ConnectionGitlabEnterpriseConfigServiceDirectoryConfigArgs and ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput values.
// You can construct a concrete instance of `ConnectionGitlabEnterpriseConfigServiceDirectoryConfigInput` via:
//
//	ConnectionGitlabEnterpriseConfigServiceDirectoryConfigArgs{...}
type ConnectionGitlabEnterpriseConfigServiceDirectoryConfigInput interface {
	pulumi.Input

	ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput() ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput
	ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutputWithContext(context.Context) ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput
}

type ConnectionGitlabEnterpriseConfigServiceDirectoryConfigArgs struct {
	// Required. The Service Directory service name.
	// Format:
	// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service pulumi.StringInput `pulumi:"service"`
}

func (ConnectionGitlabEnterpriseConfigServiceDirectoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabEnterpriseConfigServiceDirectoryConfig)(nil)).Elem()
}

func (i ConnectionGitlabEnterpriseConfigServiceDirectoryConfigArgs) ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput() ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput {
	return i.ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutputWithContext(context.Background())
}

func (i ConnectionGitlabEnterpriseConfigServiceDirectoryConfigArgs) ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput)
}

func (i ConnectionGitlabEnterpriseConfigServiceDirectoryConfigArgs) ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return i.ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionGitlabEnterpriseConfigServiceDirectoryConfigArgs) ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput).ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx)
}

// ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrInput is an input type that accepts ConnectionGitlabEnterpriseConfigServiceDirectoryConfigArgs, ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtr and ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrInput` via:
//
//	        ConnectionGitlabEnterpriseConfigServiceDirectoryConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrInput interface {
	pulumi.Input

	ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput
	ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(context.Context) ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput
}

type connectionGitlabEnterpriseConfigServiceDirectoryConfigPtrType ConnectionGitlabEnterpriseConfigServiceDirectoryConfigArgs

func ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtr(v *ConnectionGitlabEnterpriseConfigServiceDirectoryConfigArgs) ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrInput {
	return (*connectionGitlabEnterpriseConfigServiceDirectoryConfigPtrType)(v)
}

func (*connectionGitlabEnterpriseConfigServiceDirectoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabEnterpriseConfigServiceDirectoryConfig)(nil)).Elem()
}

func (i *connectionGitlabEnterpriseConfigServiceDirectoryConfigPtrType) ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return i.ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i *connectionGitlabEnterpriseConfigServiceDirectoryConfigPtrType) ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput)
}

type ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabEnterpriseConfigServiceDirectoryConfig)(nil)).Elem()
}

func (o ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput) ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput() ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput {
	return o
}

func (o ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput) ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput {
	return o
}

func (o ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput) ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o.ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput) ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGitlabEnterpriseConfigServiceDirectoryConfig) *ConnectionGitlabEnterpriseConfigServiceDirectoryConfig {
		return &v
	}).(ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput)
}

// Required. The Service Directory service name.
// Format:
// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGitlabEnterpriseConfigServiceDirectoryConfig) string { return v.Service }).(pulumi.StringOutput)
}

type ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabEnterpriseConfigServiceDirectoryConfig)(nil)).Elem()
}

func (o ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput) ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o
}

func (o ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput) ToConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o
}

func (o ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput) Elem() ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput {
	return o.ApplyT(func(v *ConnectionGitlabEnterpriseConfigServiceDirectoryConfig) ConnectionGitlabEnterpriseConfigServiceDirectoryConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionGitlabEnterpriseConfigServiceDirectoryConfig
		return ret
	}).(ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput)
}

// Required. The Service Directory service name.
// Format:
// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabEnterpriseConfigServiceDirectoryConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

type ConnectionInstallationState struct {
	// Output only. Link to follow for next action. Empty string if the installation is already
	// complete.
	ActionUri *string `pulumi:"actionUri"`
	// Output only. Message of what the user should do next to continue the installation.
	// Empty string if the installation is already complete.
	Message *string `pulumi:"message"`
	// (Output)
	// Output only. Current step of the installation process.
	// Possible values:
	// STAGE_UNSPECIFIED
	// PENDING_CREATE_APP
	// PENDING_USER_OAUTH
	// PENDING_INSTALL_APP
	// COMPLETE
	Stage *string `pulumi:"stage"`
}

// ConnectionInstallationStateInput is an input type that accepts ConnectionInstallationStateArgs and ConnectionInstallationStateOutput values.
// You can construct a concrete instance of `ConnectionInstallationStateInput` via:
//
//	ConnectionInstallationStateArgs{...}
type ConnectionInstallationStateInput interface {
	pulumi.Input

	ToConnectionInstallationStateOutput() ConnectionInstallationStateOutput
	ToConnectionInstallationStateOutputWithContext(context.Context) ConnectionInstallationStateOutput
}

type ConnectionInstallationStateArgs struct {
	// Output only. Link to follow for next action. Empty string if the installation is already
	// complete.
	ActionUri pulumi.StringPtrInput `pulumi:"actionUri"`
	// Output only. Message of what the user should do next to continue the installation.
	// Empty string if the installation is already complete.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (Output)
	// Output only. Current step of the installation process.
	// Possible values:
	// STAGE_UNSPECIFIED
	// PENDING_CREATE_APP
	// PENDING_USER_OAUTH
	// PENDING_INSTALL_APP
	// COMPLETE
	Stage pulumi.StringPtrInput `pulumi:"stage"`
}

func (ConnectionInstallationStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionInstallationState)(nil)).Elem()
}

func (i ConnectionInstallationStateArgs) ToConnectionInstallationStateOutput() ConnectionInstallationStateOutput {
	return i.ToConnectionInstallationStateOutputWithContext(context.Background())
}

func (i ConnectionInstallationStateArgs) ToConnectionInstallationStateOutputWithContext(ctx context.Context) ConnectionInstallationStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInstallationStateOutput)
}

// ConnectionInstallationStateArrayInput is an input type that accepts ConnectionInstallationStateArray and ConnectionInstallationStateArrayOutput values.
// You can construct a concrete instance of `ConnectionInstallationStateArrayInput` via:
//
//	ConnectionInstallationStateArray{ ConnectionInstallationStateArgs{...} }
type ConnectionInstallationStateArrayInput interface {
	pulumi.Input

	ToConnectionInstallationStateArrayOutput() ConnectionInstallationStateArrayOutput
	ToConnectionInstallationStateArrayOutputWithContext(context.Context) ConnectionInstallationStateArrayOutput
}

type ConnectionInstallationStateArray []ConnectionInstallationStateInput

func (ConnectionInstallationStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionInstallationState)(nil)).Elem()
}

func (i ConnectionInstallationStateArray) ToConnectionInstallationStateArrayOutput() ConnectionInstallationStateArrayOutput {
	return i.ToConnectionInstallationStateArrayOutputWithContext(context.Background())
}

func (i ConnectionInstallationStateArray) ToConnectionInstallationStateArrayOutputWithContext(ctx context.Context) ConnectionInstallationStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInstallationStateArrayOutput)
}

type ConnectionInstallationStateOutput struct{ *pulumi.OutputState }

func (ConnectionInstallationStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionInstallationState)(nil)).Elem()
}

func (o ConnectionInstallationStateOutput) ToConnectionInstallationStateOutput() ConnectionInstallationStateOutput {
	return o
}

func (o ConnectionInstallationStateOutput) ToConnectionInstallationStateOutputWithContext(ctx context.Context) ConnectionInstallationStateOutput {
	return o
}

// Output only. Link to follow for next action. Empty string if the installation is already
// complete.
func (o ConnectionInstallationStateOutput) ActionUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInstallationState) *string { return v.ActionUri }).(pulumi.StringPtrOutput)
}

// Output only. Message of what the user should do next to continue the installation.
// Empty string if the installation is already complete.
func (o ConnectionInstallationStateOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInstallationState) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (Output)
// Output only. Current step of the installation process.
// Possible values:
// STAGE_UNSPECIFIED
// PENDING_CREATE_APP
// PENDING_USER_OAUTH
// PENDING_INSTALL_APP
// COMPLETE
func (o ConnectionInstallationStateOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInstallationState) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

type ConnectionInstallationStateArrayOutput struct{ *pulumi.OutputState }

func (ConnectionInstallationStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionInstallationState)(nil)).Elem()
}

func (o ConnectionInstallationStateArrayOutput) ToConnectionInstallationStateArrayOutput() ConnectionInstallationStateArrayOutput {
	return o
}

func (o ConnectionInstallationStateArrayOutput) ToConnectionInstallationStateArrayOutputWithContext(ctx context.Context) ConnectionInstallationStateArrayOutput {
	return o
}

func (o ConnectionInstallationStateArrayOutput) Index(i pulumi.IntInput) ConnectionInstallationStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectionInstallationState {
		return vs[0].([]ConnectionInstallationState)[vs[1].(int)]
	}).(ConnectionInstallationStateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountConnectorProviderOauthConfigInput)(nil)).Elem(), AccountConnectorProviderOauthConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountConnectorProviderOauthConfigPtrInput)(nil)).Elem(), AccountConnectorProviderOauthConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionBitbucketCloudConfigInput)(nil)).Elem(), ConnectionBitbucketCloudConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionBitbucketCloudConfigPtrInput)(nil)).Elem(), ConnectionBitbucketCloudConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionBitbucketCloudConfigAuthorizerCredentialInput)(nil)).Elem(), ConnectionBitbucketCloudConfigAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionBitbucketCloudConfigAuthorizerCredentialPtrInput)(nil)).Elem(), ConnectionBitbucketCloudConfigAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionBitbucketCloudConfigReadAuthorizerCredentialInput)(nil)).Elem(), ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrInput)(nil)).Elem(), ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionBitbucketDataCenterConfigInput)(nil)).Elem(), ConnectionBitbucketDataCenterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionBitbucketDataCenterConfigPtrInput)(nil)).Elem(), ConnectionBitbucketDataCenterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionBitbucketDataCenterConfigAuthorizerCredentialInput)(nil)).Elem(), ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrInput)(nil)).Elem(), ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialInput)(nil)).Elem(), ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrInput)(nil)).Elem(), ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionBitbucketDataCenterConfigServiceDirectoryConfigInput)(nil)).Elem(), ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrInput)(nil)).Elem(), ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionCryptoKeyConfigInput)(nil)).Elem(), ConnectionCryptoKeyConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionCryptoKeyConfigPtrInput)(nil)).Elem(), ConnectionCryptoKeyConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubConfigInput)(nil)).Elem(), ConnectionGithubConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubConfigPtrInput)(nil)).Elem(), ConnectionGithubConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubConfigAuthorizerCredentialInput)(nil)).Elem(), ConnectionGithubConfigAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubConfigAuthorizerCredentialPtrInput)(nil)).Elem(), ConnectionGithubConfigAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubEnterpriseConfigInput)(nil)).Elem(), ConnectionGithubEnterpriseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubEnterpriseConfigPtrInput)(nil)).Elem(), ConnectionGithubEnterpriseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubEnterpriseConfigServiceDirectoryConfigInput)(nil)).Elem(), ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput)(nil)).Elem(), ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabConfigInput)(nil)).Elem(), ConnectionGitlabConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabConfigPtrInput)(nil)).Elem(), ConnectionGitlabConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabConfigAuthorizerCredentialInput)(nil)).Elem(), ConnectionGitlabConfigAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabConfigAuthorizerCredentialPtrInput)(nil)).Elem(), ConnectionGitlabConfigAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabConfigReadAuthorizerCredentialInput)(nil)).Elem(), ConnectionGitlabConfigReadAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabConfigReadAuthorizerCredentialPtrInput)(nil)).Elem(), ConnectionGitlabConfigReadAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabEnterpriseConfigInput)(nil)).Elem(), ConnectionGitlabEnterpriseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabEnterpriseConfigPtrInput)(nil)).Elem(), ConnectionGitlabEnterpriseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabEnterpriseConfigAuthorizerCredentialInput)(nil)).Elem(), ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrInput)(nil)).Elem(), ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialInput)(nil)).Elem(), ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrInput)(nil)).Elem(), ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabEnterpriseConfigServiceDirectoryConfigInput)(nil)).Elem(), ConnectionGitlabEnterpriseConfigServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrInput)(nil)).Elem(), ConnectionGitlabEnterpriseConfigServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInstallationStateInput)(nil)).Elem(), ConnectionInstallationStateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInstallationStateArrayInput)(nil)).Elem(), ConnectionInstallationStateArray{})
	pulumi.RegisterOutputType(AccountConnectorProviderOauthConfigOutput{})
	pulumi.RegisterOutputType(AccountConnectorProviderOauthConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionBitbucketCloudConfigOutput{})
	pulumi.RegisterOutputType(ConnectionBitbucketCloudConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionBitbucketCloudConfigAuthorizerCredentialOutput{})
	pulumi.RegisterOutputType(ConnectionBitbucketCloudConfigAuthorizerCredentialPtrOutput{})
	pulumi.RegisterOutputType(ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutput{})
	pulumi.RegisterOutputType(ConnectionBitbucketCloudConfigReadAuthorizerCredentialPtrOutput{})
	pulumi.RegisterOutputType(ConnectionBitbucketDataCenterConfigOutput{})
	pulumi.RegisterOutputType(ConnectionBitbucketDataCenterConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutput{})
	pulumi.RegisterOutputType(ConnectionBitbucketDataCenterConfigAuthorizerCredentialPtrOutput{})
	pulumi.RegisterOutputType(ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutput{})
	pulumi.RegisterOutputType(ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialPtrOutput{})
	pulumi.RegisterOutputType(ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutput{})
	pulumi.RegisterOutputType(ConnectionBitbucketDataCenterConfigServiceDirectoryConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionCryptoKeyConfigOutput{})
	pulumi.RegisterOutputType(ConnectionCryptoKeyConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGithubConfigOutput{})
	pulumi.RegisterOutputType(ConnectionGithubConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGithubConfigAuthorizerCredentialOutput{})
	pulumi.RegisterOutputType(ConnectionGithubConfigAuthorizerCredentialPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGithubEnterpriseConfigOutput{})
	pulumi.RegisterOutputType(ConnectionGithubEnterpriseConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput{})
	pulumi.RegisterOutputType(ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabConfigOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabConfigAuthorizerCredentialOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabConfigAuthorizerCredentialPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabConfigReadAuthorizerCredentialOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabEnterpriseConfigOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabEnterpriseConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabEnterpriseConfigAuthorizerCredentialOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabEnterpriseConfigAuthorizerCredentialPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabEnterpriseConfigServiceDirectoryConfigOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabEnterpriseConfigServiceDirectoryConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionInstallationStateOutput{})
	pulumi.RegisterOutputType(ConnectionInstallationStateArrayOutput{})
}
