// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package serviceAccount

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates and manages service account key-pairs, which allow the user to establish identity of a service account outside of GCP. For more information, see [the official documentation](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) and [API](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys).
type Key struct {
	s *pulumi.ResourceState
}

// NewKey registers a new resource with the given unique name, arguments, and options.
func NewKey(ctx *pulumi.Context,
	name string, args *KeyArgs, opts ...pulumi.ResourceOpt) (*Key, error) {
	if args == nil || args.ServiceAccountId == nil {
		return nil, errors.New("missing required argument 'ServiceAccountId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["keyAlgorithm"] = nil
		inputs["pgpKey"] = nil
		inputs["privateKeyType"] = nil
		inputs["publicKeyType"] = nil
		inputs["serviceAccountId"] = nil
	} else {
		inputs["keyAlgorithm"] = args.KeyAlgorithm
		inputs["pgpKey"] = args.PgpKey
		inputs["privateKeyType"] = args.PrivateKeyType
		inputs["publicKeyType"] = args.PublicKeyType
		inputs["serviceAccountId"] = args.ServiceAccountId
	}
	inputs["name"] = nil
	inputs["privateKey"] = nil
	inputs["privateKeyEncrypted"] = nil
	inputs["privateKeyFingerprint"] = nil
	inputs["publicKey"] = nil
	inputs["validAfter"] = nil
	inputs["validBefore"] = nil
	s, err := ctx.RegisterResource("gcp:serviceAccount/key:Key", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Key{s: s}, nil
}

// GetKey gets an existing Key resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKey(ctx *pulumi.Context,
	name string, id pulumi.ID, state *KeyState, opts ...pulumi.ResourceOpt) (*Key, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["keyAlgorithm"] = state.KeyAlgorithm
		inputs["name"] = state.Name
		inputs["pgpKey"] = state.PgpKey
		inputs["privateKey"] = state.PrivateKey
		inputs["privateKeyEncrypted"] = state.PrivateKeyEncrypted
		inputs["privateKeyFingerprint"] = state.PrivateKeyFingerprint
		inputs["privateKeyType"] = state.PrivateKeyType
		inputs["publicKey"] = state.PublicKey
		inputs["publicKeyType"] = state.PublicKeyType
		inputs["serviceAccountId"] = state.ServiceAccountId
		inputs["validAfter"] = state.ValidAfter
		inputs["validBefore"] = state.ValidBefore
	}
	s, err := ctx.ReadResource("gcp:serviceAccount/key:Key", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Key{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Key) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Key) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The algorithm used to generate the key. KEY_ALG_RSA_2048 is the default algorithm.
// Valid values are listed at
// [ServiceAccountPrivateKeyType](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountKeyAlgorithm)
// (only used on create)
func (r *Key) KeyAlgorithm() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["keyAlgorithm"])
}

// The name used for this key pair
func (r *Key) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// An optional PGP key to encrypt the resulting private
// key material. Only used when creating or importing a new key pair. May either be
// a base64-encoded public key or a `keybase:keybaseusername` string for looking up
// in Vault.
func (r *Key) PgpKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["pgpKey"])
}

// The private key in JSON format, base64 encoded. This is what you normally get as a file when creating
// service account keys through the CLI or web console. This is only populated when creating a new key, and when no
// `pgp_key` is provided.
func (r *Key) PrivateKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["privateKey"])
}

// The private key material, base 64 encoded and
// encrypted with the given `pgp_key`. This is only populated when creating a new
// key and `pgp_key` is supplied
func (r *Key) PrivateKeyEncrypted() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["privateKeyEncrypted"])
}

// The MD5 public key fingerprint for the encrypted
// private key. This is only populated when creating a new key and `pgp_key` is supplied
func (r *Key) PrivateKeyFingerprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["privateKeyFingerprint"])
}

// The output format of the private key. TYPE_GOOGLE_CREDENTIALS_FILE is the default output format.
func (r *Key) PrivateKeyType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["privateKeyType"])
}

// The public key, base64 encoded
func (r *Key) PublicKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["publicKey"])
}

// The output format of the public key requested. X509_PEM is the default output format.
func (r *Key) PublicKeyType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["publicKeyType"])
}

// The Service account id of the Key Pair. This can be a string in the format
// `{ACCOUNT}` or `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`, where `{ACCOUNT}` is the email address or
// unique id of the service account. If the `{ACCOUNT}` syntax is used, the project will be inferred from the account.
func (r *Key) ServiceAccountId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serviceAccountId"])
}

// The key can be used after this timestamp. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
func (r *Key) ValidAfter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["validAfter"])
}

// The key can be used before this timestamp.
// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
func (r *Key) ValidBefore() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["validBefore"])
}

// Input properties used for looking up and filtering Key resources.
type KeyState struct {
	// The algorithm used to generate the key. KEY_ALG_RSA_2048 is the default algorithm.
	// Valid values are listed at
	// [ServiceAccountPrivateKeyType](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountKeyAlgorithm)
	// (only used on create)
	KeyAlgorithm interface{}
	// The name used for this key pair
	Name interface{}
	// An optional PGP key to encrypt the resulting private
	// key material. Only used when creating or importing a new key pair. May either be
	// a base64-encoded public key or a `keybase:keybaseusername` string for looking up
	// in Vault.
	PgpKey interface{}
	// The private key in JSON format, base64 encoded. This is what you normally get as a file when creating
	// service account keys through the CLI or web console. This is only populated when creating a new key, and when no
	// `pgp_key` is provided.
	PrivateKey interface{}
	// The private key material, base 64 encoded and
	// encrypted with the given `pgp_key`. This is only populated when creating a new
	// key and `pgp_key` is supplied
	PrivateKeyEncrypted interface{}
	// The MD5 public key fingerprint for the encrypted
	// private key. This is only populated when creating a new key and `pgp_key` is supplied
	PrivateKeyFingerprint interface{}
	// The output format of the private key. TYPE_GOOGLE_CREDENTIALS_FILE is the default output format.
	PrivateKeyType interface{}
	// The public key, base64 encoded
	PublicKey interface{}
	// The output format of the public key requested. X509_PEM is the default output format.
	PublicKeyType interface{}
	// The Service account id of the Key Pair. This can be a string in the format
	// `{ACCOUNT}` or `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`, where `{ACCOUNT}` is the email address or
	// unique id of the service account. If the `{ACCOUNT}` syntax is used, the project will be inferred from the account.
	ServiceAccountId interface{}
	// The key can be used after this timestamp. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	ValidAfter interface{}
	// The key can be used before this timestamp.
	// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	ValidBefore interface{}
}

// The set of arguments for constructing a Key resource.
type KeyArgs struct {
	// The algorithm used to generate the key. KEY_ALG_RSA_2048 is the default algorithm.
	// Valid values are listed at
	// [ServiceAccountPrivateKeyType](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountKeyAlgorithm)
	// (only used on create)
	KeyAlgorithm interface{}
	// An optional PGP key to encrypt the resulting private
	// key material. Only used when creating or importing a new key pair. May either be
	// a base64-encoded public key or a `keybase:keybaseusername` string for looking up
	// in Vault.
	PgpKey interface{}
	// The output format of the private key. TYPE_GOOGLE_CREDENTIALS_FILE is the default output format.
	PrivateKeyType interface{}
	// The output format of the public key requested. X509_PEM is the default output format.
	PublicKeyType interface{}
	// The Service account id of the Key Pair. This can be a string in the format
	// `{ACCOUNT}` or `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`, where `{ACCOUNT}` is the email address or
	// unique id of the service account. If the `{ACCOUNT}` syntax is used, the project will be inferred from the account.
	ServiceAccountId interface{}
}
