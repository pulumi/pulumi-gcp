// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// This resource does not support import.
type DatasetAccessType struct {
	pulumi.CustomResourceState

	// If true, represents that that the iam_member in the config was translated to a different member type by the API, and is
	// stored in state as a different member type
	ApiUpdatedMember pulumi.BoolOutput `pulumi:"apiUpdatedMember"`
	// The ID of the dataset containing this table.
	DatasetId pulumi.StringOutput `pulumi:"datasetId"`
	// A domain to grant access to. Any users signed in with the
	// domain specified will be granted the specified access
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// An email address of a Google Group to grant access to.
	GroupByEmail pulumi.StringPtrOutput `pulumi:"groupByEmail"`
	// Some other type of member that appears in the IAM Policy but isn't a user,
	// group, domain, or special group. For example: `allUsers`
	IamMember pulumi.StringPtrOutput `pulumi:"iamMember"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Describes the rights granted to the user specified by the other
	// member of the access object. Basic, predefined, and custom roles are
	// supported. Predefined roles that have equivalent basic roles are
	// swapped by the API to their basic counterparts, and will show a diff
	// post-create. See
	// [official docs](https://cloud.google.com/bigquery/docs/access-control).
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// A special group to grant access to. Possible values include:
	SpecialGroup pulumi.StringPtrOutput `pulumi:"specialGroup"`
	// An email address of a user to grant access to. For example:
	// fred@example.com
	UserByEmail pulumi.StringPtrOutput `pulumi:"userByEmail"`
	// A view from a different dataset to grant access to. Queries
	// executed against that view will have read access to tables in
	// this dataset. The role field is not required when this field is
	// set. If that view is updated by any user, access to the view
	// needs to be granted again via an update operation.
	// Structure is documented below.
	View DatasetAccessViewPtrOutput `pulumi:"view"`
}

// NewDatasetAccessType registers a new resource with the given unique name, arguments, and options.
func NewDatasetAccessType(ctx *pulumi.Context,
	name string, args *DatasetAccessTypeArgs, opts ...pulumi.ResourceOption) (*DatasetAccessType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetId'")
	}
	var resource DatasetAccessType
	err := ctx.RegisterResource("gcp:bigquery/datasetAccess:DatasetAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetAccessType gets an existing DatasetAccessType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetAccessType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetAccessTypeState, opts ...pulumi.ResourceOption) (*DatasetAccessType, error) {
	var resource DatasetAccessType
	err := ctx.ReadResource("gcp:bigquery/datasetAccess:DatasetAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetAccessType resources.
type datasetAccessTypeState struct {
	// If true, represents that that the iam_member in the config was translated to a different member type by the API, and is
	// stored in state as a different member type
	ApiUpdatedMember *bool `pulumi:"apiUpdatedMember"`
	// The ID of the dataset containing this table.
	DatasetId *string `pulumi:"datasetId"`
	// A domain to grant access to. Any users signed in with the
	// domain specified will be granted the specified access
	Domain *string `pulumi:"domain"`
	// An email address of a Google Group to grant access to.
	GroupByEmail *string `pulumi:"groupByEmail"`
	// Some other type of member that appears in the IAM Policy but isn't a user,
	// group, domain, or special group. For example: `allUsers`
	IamMember *string `pulumi:"iamMember"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Describes the rights granted to the user specified by the other
	// member of the access object. Basic, predefined, and custom roles are
	// supported. Predefined roles that have equivalent basic roles are
	// swapped by the API to their basic counterparts, and will show a diff
	// post-create. See
	// [official docs](https://cloud.google.com/bigquery/docs/access-control).
	Role *string `pulumi:"role"`
	// A special group to grant access to. Possible values include:
	SpecialGroup *string `pulumi:"specialGroup"`
	// An email address of a user to grant access to. For example:
	// fred@example.com
	UserByEmail *string `pulumi:"userByEmail"`
	// A view from a different dataset to grant access to. Queries
	// executed against that view will have read access to tables in
	// this dataset. The role field is not required when this field is
	// set. If that view is updated by any user, access to the view
	// needs to be granted again via an update operation.
	// Structure is documented below.
	View *DatasetAccessView `pulumi:"view"`
}

type DatasetAccessTypeState struct {
	// If true, represents that that the iam_member in the config was translated to a different member type by the API, and is
	// stored in state as a different member type
	ApiUpdatedMember pulumi.BoolPtrInput
	// The ID of the dataset containing this table.
	DatasetId pulumi.StringPtrInput
	// A domain to grant access to. Any users signed in with the
	// domain specified will be granted the specified access
	Domain pulumi.StringPtrInput
	// An email address of a Google Group to grant access to.
	GroupByEmail pulumi.StringPtrInput
	// Some other type of member that appears in the IAM Policy but isn't a user,
	// group, domain, or special group. For example: `allUsers`
	IamMember pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Describes the rights granted to the user specified by the other
	// member of the access object. Basic, predefined, and custom roles are
	// supported. Predefined roles that have equivalent basic roles are
	// swapped by the API to their basic counterparts, and will show a diff
	// post-create. See
	// [official docs](https://cloud.google.com/bigquery/docs/access-control).
	Role pulumi.StringPtrInput
	// A special group to grant access to. Possible values include:
	SpecialGroup pulumi.StringPtrInput
	// An email address of a user to grant access to. For example:
	// fred@example.com
	UserByEmail pulumi.StringPtrInput
	// A view from a different dataset to grant access to. Queries
	// executed against that view will have read access to tables in
	// this dataset. The role field is not required when this field is
	// set. If that view is updated by any user, access to the view
	// needs to be granted again via an update operation.
	// Structure is documented below.
	View DatasetAccessViewPtrInput
}

func (DatasetAccessTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetAccessTypeState)(nil)).Elem()
}

type datasetAccessTypeArgs struct {
	// The ID of the dataset containing this table.
	DatasetId string `pulumi:"datasetId"`
	// A domain to grant access to. Any users signed in with the
	// domain specified will be granted the specified access
	Domain *string `pulumi:"domain"`
	// An email address of a Google Group to grant access to.
	GroupByEmail *string `pulumi:"groupByEmail"`
	// Some other type of member that appears in the IAM Policy but isn't a user,
	// group, domain, or special group. For example: `allUsers`
	IamMember *string `pulumi:"iamMember"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Describes the rights granted to the user specified by the other
	// member of the access object. Basic, predefined, and custom roles are
	// supported. Predefined roles that have equivalent basic roles are
	// swapped by the API to their basic counterparts, and will show a diff
	// post-create. See
	// [official docs](https://cloud.google.com/bigquery/docs/access-control).
	Role *string `pulumi:"role"`
	// A special group to grant access to. Possible values include:
	SpecialGroup *string `pulumi:"specialGroup"`
	// An email address of a user to grant access to. For example:
	// fred@example.com
	UserByEmail *string `pulumi:"userByEmail"`
	// A view from a different dataset to grant access to. Queries
	// executed against that view will have read access to tables in
	// this dataset. The role field is not required when this field is
	// set. If that view is updated by any user, access to the view
	// needs to be granted again via an update operation.
	// Structure is documented below.
	View *DatasetAccessView `pulumi:"view"`
}

// The set of arguments for constructing a DatasetAccessType resource.
type DatasetAccessTypeArgs struct {
	// The ID of the dataset containing this table.
	DatasetId pulumi.StringInput
	// A domain to grant access to. Any users signed in with the
	// domain specified will be granted the specified access
	Domain pulumi.StringPtrInput
	// An email address of a Google Group to grant access to.
	GroupByEmail pulumi.StringPtrInput
	// Some other type of member that appears in the IAM Policy but isn't a user,
	// group, domain, or special group. For example: `allUsers`
	IamMember pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Describes the rights granted to the user specified by the other
	// member of the access object. Basic, predefined, and custom roles are
	// supported. Predefined roles that have equivalent basic roles are
	// swapped by the API to their basic counterparts, and will show a diff
	// post-create. See
	// [official docs](https://cloud.google.com/bigquery/docs/access-control).
	Role pulumi.StringPtrInput
	// A special group to grant access to. Possible values include:
	SpecialGroup pulumi.StringPtrInput
	// An email address of a user to grant access to. For example:
	// fred@example.com
	UserByEmail pulumi.StringPtrInput
	// A view from a different dataset to grant access to. Queries
	// executed against that view will have read access to tables in
	// this dataset. The role field is not required when this field is
	// set. If that view is updated by any user, access to the view
	// needs to be granted again via an update operation.
	// Structure is documented below.
	View DatasetAccessViewPtrInput
}

func (DatasetAccessTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetAccessTypeArgs)(nil)).Elem()
}

type DatasetAccessTypeInput interface {
	pulumi.Input

	ToDatasetAccessTypeOutput() DatasetAccessTypeOutput
	ToDatasetAccessTypeOutputWithContext(ctx context.Context) DatasetAccessTypeOutput
}

func (*DatasetAccessType) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessType)(nil))
}

func (i *DatasetAccessType) ToDatasetAccessTypeOutput() DatasetAccessTypeOutput {
	return i.ToDatasetAccessTypeOutputWithContext(context.Background())
}

func (i *DatasetAccessType) ToDatasetAccessTypeOutputWithContext(ctx context.Context) DatasetAccessTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessTypeOutput)
}

func (i *DatasetAccessType) ToDatasetAccessTypePtrOutput() DatasetAccessTypePtrOutput {
	return i.ToDatasetAccessTypePtrOutputWithContext(context.Background())
}

func (i *DatasetAccessType) ToDatasetAccessTypePtrOutputWithContext(ctx context.Context) DatasetAccessTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessTypePtrOutput)
}

type DatasetAccessTypePtrInput interface {
	pulumi.Input

	ToDatasetAccessTypePtrOutput() DatasetAccessTypePtrOutput
	ToDatasetAccessTypePtrOutputWithContext(ctx context.Context) DatasetAccessTypePtrOutput
}

type datasetAccessTypePtrType DatasetAccessTypeArgs

func (*datasetAccessTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessType)(nil))
}

func (i *datasetAccessTypePtrType) ToDatasetAccessTypePtrOutput() DatasetAccessTypePtrOutput {
	return i.ToDatasetAccessTypePtrOutputWithContext(context.Background())
}

func (i *datasetAccessTypePtrType) ToDatasetAccessTypePtrOutputWithContext(ctx context.Context) DatasetAccessTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessTypePtrOutput)
}

// DatasetAccessTypeArrayInput is an input type that accepts DatasetAccessTypeArray and DatasetAccessTypeArrayOutput values.
// You can construct a concrete instance of `DatasetAccessTypeArrayInput` via:
//
//          DatasetAccessTypeArray{ DatasetAccessTypeArgs{...} }
type DatasetAccessTypeArrayInput interface {
	pulumi.Input

	ToDatasetAccessTypeArrayOutput() DatasetAccessTypeArrayOutput
	ToDatasetAccessTypeArrayOutputWithContext(context.Context) DatasetAccessTypeArrayOutput
}

type DatasetAccessTypeArray []DatasetAccessTypeInput

func (DatasetAccessTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasetAccessType)(nil)).Elem()
}

func (i DatasetAccessTypeArray) ToDatasetAccessTypeArrayOutput() DatasetAccessTypeArrayOutput {
	return i.ToDatasetAccessTypeArrayOutputWithContext(context.Background())
}

func (i DatasetAccessTypeArray) ToDatasetAccessTypeArrayOutputWithContext(ctx context.Context) DatasetAccessTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessTypeArrayOutput)
}

// DatasetAccessTypeMapInput is an input type that accepts DatasetAccessTypeMap and DatasetAccessTypeMapOutput values.
// You can construct a concrete instance of `DatasetAccessTypeMapInput` via:
//
//          DatasetAccessTypeMap{ "key": DatasetAccessTypeArgs{...} }
type DatasetAccessTypeMapInput interface {
	pulumi.Input

	ToDatasetAccessTypeMapOutput() DatasetAccessTypeMapOutput
	ToDatasetAccessTypeMapOutputWithContext(context.Context) DatasetAccessTypeMapOutput
}

type DatasetAccessTypeMap map[string]DatasetAccessTypeInput

func (DatasetAccessTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasetAccessType)(nil)).Elem()
}

func (i DatasetAccessTypeMap) ToDatasetAccessTypeMapOutput() DatasetAccessTypeMapOutput {
	return i.ToDatasetAccessTypeMapOutputWithContext(context.Background())
}

func (i DatasetAccessTypeMap) ToDatasetAccessTypeMapOutputWithContext(ctx context.Context) DatasetAccessTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessTypeMapOutput)
}

type DatasetAccessTypeOutput struct{ *pulumi.OutputState }

func (DatasetAccessTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessType)(nil))
}

func (o DatasetAccessTypeOutput) ToDatasetAccessTypeOutput() DatasetAccessTypeOutput {
	return o
}

func (o DatasetAccessTypeOutput) ToDatasetAccessTypeOutputWithContext(ctx context.Context) DatasetAccessTypeOutput {
	return o
}

func (o DatasetAccessTypeOutput) ToDatasetAccessTypePtrOutput() DatasetAccessTypePtrOutput {
	return o.ToDatasetAccessTypePtrOutputWithContext(context.Background())
}

func (o DatasetAccessTypeOutput) ToDatasetAccessTypePtrOutputWithContext(ctx context.Context) DatasetAccessTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetAccessType) *DatasetAccessType {
		return &v
	}).(DatasetAccessTypePtrOutput)
}

type DatasetAccessTypePtrOutput struct{ *pulumi.OutputState }

func (DatasetAccessTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessType)(nil))
}

func (o DatasetAccessTypePtrOutput) ToDatasetAccessTypePtrOutput() DatasetAccessTypePtrOutput {
	return o
}

func (o DatasetAccessTypePtrOutput) ToDatasetAccessTypePtrOutputWithContext(ctx context.Context) DatasetAccessTypePtrOutput {
	return o
}

func (o DatasetAccessTypePtrOutput) Elem() DatasetAccessTypeOutput {
	return o.ApplyT(func(v *DatasetAccessType) DatasetAccessType {
		if v != nil {
			return *v
		}
		var ret DatasetAccessType
		return ret
	}).(DatasetAccessTypeOutput)
}

type DatasetAccessTypeArrayOutput struct{ *pulumi.OutputState }

func (DatasetAccessTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessType)(nil))
}

func (o DatasetAccessTypeArrayOutput) ToDatasetAccessTypeArrayOutput() DatasetAccessTypeArrayOutput {
	return o
}

func (o DatasetAccessTypeArrayOutput) ToDatasetAccessTypeArrayOutputWithContext(ctx context.Context) DatasetAccessTypeArrayOutput {
	return o
}

func (o DatasetAccessTypeArrayOutput) Index(i pulumi.IntInput) DatasetAccessTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetAccessType {
		return vs[0].([]DatasetAccessType)[vs[1].(int)]
	}).(DatasetAccessTypeOutput)
}

type DatasetAccessTypeMapOutput struct{ *pulumi.OutputState }

func (DatasetAccessTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatasetAccessType)(nil))
}

func (o DatasetAccessTypeMapOutput) ToDatasetAccessTypeMapOutput() DatasetAccessTypeMapOutput {
	return o
}

func (o DatasetAccessTypeMapOutput) ToDatasetAccessTypeMapOutputWithContext(ctx context.Context) DatasetAccessTypeMapOutput {
	return o
}

func (o DatasetAccessTypeMapOutput) MapIndex(k pulumi.StringInput) DatasetAccessTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatasetAccessType {
		return vs[0].(map[string]DatasetAccessType)[vs[1].(string)]
	}).(DatasetAccessTypeOutput)
}

func init() {
	pulumi.RegisterOutputType(DatasetAccessTypeOutput{})
	pulumi.RegisterOutputType(DatasetAccessTypePtrOutput{})
	pulumi.RegisterOutputType(DatasetAccessTypeArrayOutput{})
	pulumi.RegisterOutputType(DatasetAccessTypeMapOutput{})
}
