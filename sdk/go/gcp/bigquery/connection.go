// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A connection allows BigQuery connections to external data sources..
//
// To get more information about Connection, see:
//
// * [API documentation](https://cloud.google.com/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/create)
// * How-to Guides
//   - [Cloud SQL federated queries](https://cloud.google.com/bigquery/docs/cloud-sql-federated-queries)
//
// > **Warning:** All arguments including the following potentially sensitive
// values will be stored in the raw state as plain text: `cloud_sql.credential.password`.
// Read more about sensitive data in state.
//
// ## Example Usage
//
// ## Import
//
// # Connection can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:bigquery/connection:Connection default projects/{{project}}/locations/{{location}}/connections/{{connection_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:bigquery/connection:Connection default {{project}}/{{location}}/{{connection_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:bigquery/connection:Connection default {{location}}/{{connection_id}}
//
// ```
type Connection struct {
	pulumi.CustomResourceState

	// Connection properties specific to Amazon Web Services.
	// Structure is documented below.
	Aws ConnectionAwsPtrOutput `pulumi:"aws"`
	// Container for connection properties specific to Azure.
	// Structure is documented below.
	Azure ConnectionAzurePtrOutput `pulumi:"azure"`
	// Container for connection properties for delegation of access to GCP resources.
	// Structure is documented below.
	CloudResource ConnectionCloudResourcePtrOutput `pulumi:"cloudResource"`
	// Connection properties specific to Cloud Spanner
	// Structure is documented below.
	CloudSpanner ConnectionCloudSpannerPtrOutput `pulumi:"cloudSpanner"`
	// Connection properties specific to the Cloud SQL.
	// Structure is documented below.
	CloudSql ConnectionCloudSqlPtrOutput `pulumi:"cloudSql"`
	// Optional connection id that should be assigned to the created connection.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// A descriptive description for the connection
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A descriptive name for the connection
	FriendlyName pulumi.StringPtrOutput `pulumi:"friendlyName"`
	// True if the connection has credential assigned.
	HasCredential pulumi.BoolOutput `pulumi:"hasCredential"`
	// The geographic location where the connection should reside.
	// Cloud SQL instance must be in the same location as the connection
	// with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
	// Examples: US, EU, asia-northeast1, us-central1, europe-west1.
	// Spanner Connections same as spanner region
	// AWS allowed regions are aws-us-east-1
	// Azure allowed regions are azure-eastus2
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The resource name of the connection in the form of:
	// "projects/{project_id}/locations/{location_id}/connections/{connectionId}"
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		args = &ConnectionArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connection
	err := ctx.RegisterResource("gcp:bigquery/connection:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("gcp:bigquery/connection:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
	// Connection properties specific to Amazon Web Services.
	// Structure is documented below.
	Aws *ConnectionAws `pulumi:"aws"`
	// Container for connection properties specific to Azure.
	// Structure is documented below.
	Azure *ConnectionAzure `pulumi:"azure"`
	// Container for connection properties for delegation of access to GCP resources.
	// Structure is documented below.
	CloudResource *ConnectionCloudResource `pulumi:"cloudResource"`
	// Connection properties specific to Cloud Spanner
	// Structure is documented below.
	CloudSpanner *ConnectionCloudSpanner `pulumi:"cloudSpanner"`
	// Connection properties specific to the Cloud SQL.
	// Structure is documented below.
	CloudSql *ConnectionCloudSql `pulumi:"cloudSql"`
	// Optional connection id that should be assigned to the created connection.
	ConnectionId *string `pulumi:"connectionId"`
	// A descriptive description for the connection
	Description *string `pulumi:"description"`
	// A descriptive name for the connection
	FriendlyName *string `pulumi:"friendlyName"`
	// True if the connection has credential assigned.
	HasCredential *bool `pulumi:"hasCredential"`
	// The geographic location where the connection should reside.
	// Cloud SQL instance must be in the same location as the connection
	// with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
	// Examples: US, EU, asia-northeast1, us-central1, europe-west1.
	// Spanner Connections same as spanner region
	// AWS allowed regions are aws-us-east-1
	// Azure allowed regions are azure-eastus2
	Location *string `pulumi:"location"`
	// The resource name of the connection in the form of:
	// "projects/{project_id}/locations/{location_id}/connections/{connectionId}"
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

type ConnectionState struct {
	// Connection properties specific to Amazon Web Services.
	// Structure is documented below.
	Aws ConnectionAwsPtrInput
	// Container for connection properties specific to Azure.
	// Structure is documented below.
	Azure ConnectionAzurePtrInput
	// Container for connection properties for delegation of access to GCP resources.
	// Structure is documented below.
	CloudResource ConnectionCloudResourcePtrInput
	// Connection properties specific to Cloud Spanner
	// Structure is documented below.
	CloudSpanner ConnectionCloudSpannerPtrInput
	// Connection properties specific to the Cloud SQL.
	// Structure is documented below.
	CloudSql ConnectionCloudSqlPtrInput
	// Optional connection id that should be assigned to the created connection.
	ConnectionId pulumi.StringPtrInput
	// A descriptive description for the connection
	Description pulumi.StringPtrInput
	// A descriptive name for the connection
	FriendlyName pulumi.StringPtrInput
	// True if the connection has credential assigned.
	HasCredential pulumi.BoolPtrInput
	// The geographic location where the connection should reside.
	// Cloud SQL instance must be in the same location as the connection
	// with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
	// Examples: US, EU, asia-northeast1, us-central1, europe-west1.
	// Spanner Connections same as spanner region
	// AWS allowed regions are aws-us-east-1
	// Azure allowed regions are azure-eastus2
	Location pulumi.StringPtrInput
	// The resource name of the connection in the form of:
	// "projects/{project_id}/locations/{location_id}/connections/{connectionId}"
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// Connection properties specific to Amazon Web Services.
	// Structure is documented below.
	Aws *ConnectionAws `pulumi:"aws"`
	// Container for connection properties specific to Azure.
	// Structure is documented below.
	Azure *ConnectionAzure `pulumi:"azure"`
	// Container for connection properties for delegation of access to GCP resources.
	// Structure is documented below.
	CloudResource *ConnectionCloudResource `pulumi:"cloudResource"`
	// Connection properties specific to Cloud Spanner
	// Structure is documented below.
	CloudSpanner *ConnectionCloudSpanner `pulumi:"cloudSpanner"`
	// Connection properties specific to the Cloud SQL.
	// Structure is documented below.
	CloudSql *ConnectionCloudSql `pulumi:"cloudSql"`
	// Optional connection id that should be assigned to the created connection.
	ConnectionId *string `pulumi:"connectionId"`
	// A descriptive description for the connection
	Description *string `pulumi:"description"`
	// A descriptive name for the connection
	FriendlyName *string `pulumi:"friendlyName"`
	// The geographic location where the connection should reside.
	// Cloud SQL instance must be in the same location as the connection
	// with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
	// Examples: US, EU, asia-northeast1, us-central1, europe-west1.
	// Spanner Connections same as spanner region
	// AWS allowed regions are aws-us-east-1
	// Azure allowed regions are azure-eastus2
	Location *string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// Connection properties specific to Amazon Web Services.
	// Structure is documented below.
	Aws ConnectionAwsPtrInput
	// Container for connection properties specific to Azure.
	// Structure is documented below.
	Azure ConnectionAzurePtrInput
	// Container for connection properties for delegation of access to GCP resources.
	// Structure is documented below.
	CloudResource ConnectionCloudResourcePtrInput
	// Connection properties specific to Cloud Spanner
	// Structure is documented below.
	CloudSpanner ConnectionCloudSpannerPtrInput
	// Connection properties specific to the Cloud SQL.
	// Structure is documented below.
	CloudSql ConnectionCloudSqlPtrInput
	// Optional connection id that should be assigned to the created connection.
	ConnectionId pulumi.StringPtrInput
	// A descriptive description for the connection
	Description pulumi.StringPtrInput
	// A descriptive name for the connection
	FriendlyName pulumi.StringPtrInput
	// The geographic location where the connection should reside.
	// Cloud SQL instance must be in the same location as the connection
	// with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
	// Examples: US, EU, asia-northeast1, us-central1, europe-west1.
	// Spanner Connections same as spanner region
	// AWS allowed regions are aws-us-east-1
	// Azure allowed regions are azure-eastus2
	Location pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (*Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i *Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

func (i *Connection) ToOutput(ctx context.Context) pulumix.Output[*Connection] {
	return pulumix.Output[*Connection]{
		OutputState: i.ToConnectionOutputWithContext(ctx).OutputState,
	}
}

// ConnectionArrayInput is an input type that accepts ConnectionArray and ConnectionArrayOutput values.
// You can construct a concrete instance of `ConnectionArrayInput` via:
//
//	ConnectionArray{ ConnectionArgs{...} }
type ConnectionArrayInput interface {
	pulumi.Input

	ToConnectionArrayOutput() ConnectionArrayOutput
	ToConnectionArrayOutputWithContext(context.Context) ConnectionArrayOutput
}

type ConnectionArray []ConnectionInput

func (ConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (i ConnectionArray) ToConnectionArrayOutput() ConnectionArrayOutput {
	return i.ToConnectionArrayOutputWithContext(context.Background())
}

func (i ConnectionArray) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionArrayOutput)
}

func (i ConnectionArray) ToOutput(ctx context.Context) pulumix.Output[[]*Connection] {
	return pulumix.Output[[]*Connection]{
		OutputState: i.ToConnectionArrayOutputWithContext(ctx).OutputState,
	}
}

// ConnectionMapInput is an input type that accepts ConnectionMap and ConnectionMapOutput values.
// You can construct a concrete instance of `ConnectionMapInput` via:
//
//	ConnectionMap{ "key": ConnectionArgs{...} }
type ConnectionMapInput interface {
	pulumi.Input

	ToConnectionMapOutput() ConnectionMapOutput
	ToConnectionMapOutputWithContext(context.Context) ConnectionMapOutput
}

type ConnectionMap map[string]ConnectionInput

func (ConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (i ConnectionMap) ToConnectionMapOutput() ConnectionMapOutput {
	return i.ToConnectionMapOutputWithContext(context.Background())
}

func (i ConnectionMap) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionMapOutput)
}

func (i ConnectionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Connection] {
	return pulumix.Output[map[string]*Connection]{
		OutputState: i.ToConnectionMapOutputWithContext(ctx).OutputState,
	}
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[*Connection] {
	return pulumix.Output[*Connection]{
		OutputState: o.OutputState,
	}
}

// Connection properties specific to Amazon Web Services.
// Structure is documented below.
func (o ConnectionOutput) Aws() ConnectionAwsPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionAwsPtrOutput { return v.Aws }).(ConnectionAwsPtrOutput)
}

// Container for connection properties specific to Azure.
// Structure is documented below.
func (o ConnectionOutput) Azure() ConnectionAzurePtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionAzurePtrOutput { return v.Azure }).(ConnectionAzurePtrOutput)
}

// Container for connection properties for delegation of access to GCP resources.
// Structure is documented below.
func (o ConnectionOutput) CloudResource() ConnectionCloudResourcePtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionCloudResourcePtrOutput { return v.CloudResource }).(ConnectionCloudResourcePtrOutput)
}

// Connection properties specific to Cloud Spanner
// Structure is documented below.
func (o ConnectionOutput) CloudSpanner() ConnectionCloudSpannerPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionCloudSpannerPtrOutput { return v.CloudSpanner }).(ConnectionCloudSpannerPtrOutput)
}

// Connection properties specific to the Cloud SQL.
// Structure is documented below.
func (o ConnectionOutput) CloudSql() ConnectionCloudSqlPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionCloudSqlPtrOutput { return v.CloudSql }).(ConnectionCloudSqlPtrOutput)
}

// Optional connection id that should be assigned to the created connection.
func (o ConnectionOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// A descriptive description for the connection
func (o ConnectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A descriptive name for the connection
func (o ConnectionOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// True if the connection has credential assigned.
func (o ConnectionOutput) HasCredential() pulumi.BoolOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolOutput { return v.HasCredential }).(pulumi.BoolOutput)
}

// The geographic location where the connection should reside.
// Cloud SQL instance must be in the same location as the connection
// with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
// Examples: US, EU, asia-northeast1, us-central1, europe-west1.
// Spanner Connections same as spanner region
// AWS allowed regions are aws-us-east-1
// Azure allowed regions are azure-eastus2
func (o ConnectionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource name of the connection in the form of:
// "projects/{project_id}/locations/{location_id}/connections/{connectionId}"
func (o ConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ConnectionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type ConnectionArrayOutput struct{ *pulumi.OutputState }

func (ConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (o ConnectionArrayOutput) ToConnectionArrayOutput() ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Connection] {
	return pulumix.Output[[]*Connection]{
		OutputState: o.OutputState,
	}
}

func (o ConnectionArrayOutput) Index(i pulumi.IntInput) ConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].([]*Connection)[vs[1].(int)]
	}).(ConnectionOutput)
}

type ConnectionMapOutput struct{ *pulumi.OutputState }

func (ConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (o ConnectionMapOutput) ToConnectionMapOutput() ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Connection] {
	return pulumix.Output[map[string]*Connection]{
		OutputState: o.OutputState,
	}
}

func (o ConnectionMapOutput) MapIndex(k pulumi.StringInput) ConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].(map[string]*Connection)[vs[1].(string)]
	}).(ConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), &Connection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionArrayInput)(nil)).Elem(), ConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionMapInput)(nil)).Elem(), ConnectionMap{})
	pulumi.RegisterOutputType(ConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionArrayOutput{})
	pulumi.RegisterOutputType(ConnectionMapOutput{})
}
