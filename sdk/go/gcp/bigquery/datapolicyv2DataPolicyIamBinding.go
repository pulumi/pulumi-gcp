// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for BigQuery Data Policy V2 DataPolicy. Each of these resources serves a different use case:
//
// * `bigquery.Datapolicyv2DataPolicyIamPolicy`: Authoritative. Sets the IAM policy for the datapolicy and replaces any existing policy already attached.
// * `bigquery.Datapolicyv2DataPolicyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the datapolicy are preserved.
// * `bigquery.Datapolicyv2DataPolicyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the datapolicy are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `bigquery.Datapolicyv2DataPolicyIamPolicy`: Retrieves the IAM policy for the datapolicy
//
// > **Note:** `bigquery.Datapolicyv2DataPolicyIamPolicy` **cannot** be used in conjunction with `bigquery.Datapolicyv2DataPolicyIamBinding` and `bigquery.Datapolicyv2DataPolicyIamMember` or they will fight over what your policy should be.
//
// > **Note:** `bigquery.Datapolicyv2DataPolicyIamBinding` resources **can be** used in conjunction with `bigquery.Datapolicyv2DataPolicyIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## bigquery.Datapolicyv2DataPolicyIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewDatapolicyv2DataPolicyIamPolicy(ctx, "policy", &bigquery.Datapolicyv2DataPolicyIamPolicyArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				PolicyData:   pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## bigquery.Datapolicyv2DataPolicyIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewDatapolicyv2DataPolicyIamBinding(ctx, "binding", &bigquery.Datapolicyv2DataPolicyIamBindingArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				Role:         pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## bigquery.Datapolicyv2DataPolicyIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewDatapolicyv2DataPolicyIamMember(ctx, "member", &bigquery.Datapolicyv2DataPolicyIamMemberArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				Role:         pulumi.String("roles/viewer"),
//				Member:       pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for BigQuery Data Policy V2 DataPolicy
//
// Three different resources help you manage your IAM policy for BigQuery Data Policy V2 DataPolicy. Each of these resources serves a different use case:
//
// * `bigquery.Datapolicyv2DataPolicyIamPolicy`: Authoritative. Sets the IAM policy for the datapolicy and replaces any existing policy already attached.
// * `bigquery.Datapolicyv2DataPolicyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the datapolicy are preserved.
// * `bigquery.Datapolicyv2DataPolicyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the datapolicy are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `bigquery.Datapolicyv2DataPolicyIamPolicy`: Retrieves the IAM policy for the datapolicy
//
// > **Note:** `bigquery.Datapolicyv2DataPolicyIamPolicy` **cannot** be used in conjunction with `bigquery.Datapolicyv2DataPolicyIamBinding` and `bigquery.Datapolicyv2DataPolicyIamMember` or they will fight over what your policy should be.
//
// > **Note:** `bigquery.Datapolicyv2DataPolicyIamBinding` resources **can be** used in conjunction with `bigquery.Datapolicyv2DataPolicyIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## bigquery.Datapolicyv2DataPolicyIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewDatapolicyv2DataPolicyIamPolicy(ctx, "policy", &bigquery.Datapolicyv2DataPolicyIamPolicyArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				PolicyData:   pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## bigquery.Datapolicyv2DataPolicyIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewDatapolicyv2DataPolicyIamBinding(ctx, "binding", &bigquery.Datapolicyv2DataPolicyIamBindingArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				Role:         pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## bigquery.Datapolicyv2DataPolicyIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewDatapolicyv2DataPolicyIamMember(ctx, "member", &bigquery.Datapolicyv2DataPolicyIamMemberArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				Role:         pulumi.String("roles/viewer"),
//				Member:       pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}}
//
// * {{project}}/{{location}}/{{data_policy_id}}
//
// * {{location}}/{{data_policy_id}}
//
// * {{data_policy_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// BigQuery Data Policy V2 datapolicy IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:bigquery/datapolicyv2DataPolicyIamBinding:Datapolicyv2DataPolicyIamBinding editor "projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:bigquery/datapolicyv2DataPolicyIamBinding:Datapolicyv2DataPolicyIamBinding editor "projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:bigquery/datapolicyv2DataPolicyIamBinding:Datapolicyv2DataPolicyIamBinding editor projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type Datapolicyv2DataPolicyIamBinding struct {
	pulumi.CustomResourceState

	Condition Datapolicyv2DataPolicyIamBindingConditionPtrOutput `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	DataPolicyId pulumi.StringOutput `pulumi:"dataPolicyId"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `bigquery.Datapolicyv2DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewDatapolicyv2DataPolicyIamBinding registers a new resource with the given unique name, arguments, and options.
func NewDatapolicyv2DataPolicyIamBinding(ctx *pulumi.Context,
	name string, args *Datapolicyv2DataPolicyIamBindingArgs, opts ...pulumi.ResourceOption) (*Datapolicyv2DataPolicyIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'DataPolicyId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Datapolicyv2DataPolicyIamBinding
	err := ctx.RegisterResource("gcp:bigquery/datapolicyv2DataPolicyIamBinding:Datapolicyv2DataPolicyIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatapolicyv2DataPolicyIamBinding gets an existing Datapolicyv2DataPolicyIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatapolicyv2DataPolicyIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Datapolicyv2DataPolicyIamBindingState, opts ...pulumi.ResourceOption) (*Datapolicyv2DataPolicyIamBinding, error) {
	var resource Datapolicyv2DataPolicyIamBinding
	err := ctx.ReadResource("gcp:bigquery/datapolicyv2DataPolicyIamBinding:Datapolicyv2DataPolicyIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Datapolicyv2DataPolicyIamBinding resources.
type datapolicyv2DataPolicyIamBindingState struct {
	Condition *Datapolicyv2DataPolicyIamBindingCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	DataPolicyId *string `pulumi:"dataPolicyId"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `bigquery.Datapolicyv2DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type Datapolicyv2DataPolicyIamBindingState struct {
	Condition Datapolicyv2DataPolicyIamBindingConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	DataPolicyId pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `bigquery.Datapolicyv2DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (Datapolicyv2DataPolicyIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*datapolicyv2DataPolicyIamBindingState)(nil)).Elem()
}

type datapolicyv2DataPolicyIamBindingArgs struct {
	Condition *Datapolicyv2DataPolicyIamBindingCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	DataPolicyId string `pulumi:"dataPolicyId"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members []string `pulumi:"members"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `bigquery.Datapolicyv2DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a Datapolicyv2DataPolicyIamBinding resource.
type Datapolicyv2DataPolicyIamBindingArgs struct {
	Condition Datapolicyv2DataPolicyIamBindingConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	DataPolicyId pulumi.StringInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Members pulumi.StringArrayInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `bigquery.Datapolicyv2DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (Datapolicyv2DataPolicyIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datapolicyv2DataPolicyIamBindingArgs)(nil)).Elem()
}

type Datapolicyv2DataPolicyIamBindingInput interface {
	pulumi.Input

	ToDatapolicyv2DataPolicyIamBindingOutput() Datapolicyv2DataPolicyIamBindingOutput
	ToDatapolicyv2DataPolicyIamBindingOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamBindingOutput
}

func (*Datapolicyv2DataPolicyIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**Datapolicyv2DataPolicyIamBinding)(nil)).Elem()
}

func (i *Datapolicyv2DataPolicyIamBinding) ToDatapolicyv2DataPolicyIamBindingOutput() Datapolicyv2DataPolicyIamBindingOutput {
	return i.ToDatapolicyv2DataPolicyIamBindingOutputWithContext(context.Background())
}

func (i *Datapolicyv2DataPolicyIamBinding) ToDatapolicyv2DataPolicyIamBindingOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Datapolicyv2DataPolicyIamBindingOutput)
}

// Datapolicyv2DataPolicyIamBindingArrayInput is an input type that accepts Datapolicyv2DataPolicyIamBindingArray and Datapolicyv2DataPolicyIamBindingArrayOutput values.
// You can construct a concrete instance of `Datapolicyv2DataPolicyIamBindingArrayInput` via:
//
//	Datapolicyv2DataPolicyIamBindingArray{ Datapolicyv2DataPolicyIamBindingArgs{...} }
type Datapolicyv2DataPolicyIamBindingArrayInput interface {
	pulumi.Input

	ToDatapolicyv2DataPolicyIamBindingArrayOutput() Datapolicyv2DataPolicyIamBindingArrayOutput
	ToDatapolicyv2DataPolicyIamBindingArrayOutputWithContext(context.Context) Datapolicyv2DataPolicyIamBindingArrayOutput
}

type Datapolicyv2DataPolicyIamBindingArray []Datapolicyv2DataPolicyIamBindingInput

func (Datapolicyv2DataPolicyIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datapolicyv2DataPolicyIamBinding)(nil)).Elem()
}

func (i Datapolicyv2DataPolicyIamBindingArray) ToDatapolicyv2DataPolicyIamBindingArrayOutput() Datapolicyv2DataPolicyIamBindingArrayOutput {
	return i.ToDatapolicyv2DataPolicyIamBindingArrayOutputWithContext(context.Background())
}

func (i Datapolicyv2DataPolicyIamBindingArray) ToDatapolicyv2DataPolicyIamBindingArrayOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Datapolicyv2DataPolicyIamBindingArrayOutput)
}

// Datapolicyv2DataPolicyIamBindingMapInput is an input type that accepts Datapolicyv2DataPolicyIamBindingMap and Datapolicyv2DataPolicyIamBindingMapOutput values.
// You can construct a concrete instance of `Datapolicyv2DataPolicyIamBindingMapInput` via:
//
//	Datapolicyv2DataPolicyIamBindingMap{ "key": Datapolicyv2DataPolicyIamBindingArgs{...} }
type Datapolicyv2DataPolicyIamBindingMapInput interface {
	pulumi.Input

	ToDatapolicyv2DataPolicyIamBindingMapOutput() Datapolicyv2DataPolicyIamBindingMapOutput
	ToDatapolicyv2DataPolicyIamBindingMapOutputWithContext(context.Context) Datapolicyv2DataPolicyIamBindingMapOutput
}

type Datapolicyv2DataPolicyIamBindingMap map[string]Datapolicyv2DataPolicyIamBindingInput

func (Datapolicyv2DataPolicyIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datapolicyv2DataPolicyIamBinding)(nil)).Elem()
}

func (i Datapolicyv2DataPolicyIamBindingMap) ToDatapolicyv2DataPolicyIamBindingMapOutput() Datapolicyv2DataPolicyIamBindingMapOutput {
	return i.ToDatapolicyv2DataPolicyIamBindingMapOutputWithContext(context.Background())
}

func (i Datapolicyv2DataPolicyIamBindingMap) ToDatapolicyv2DataPolicyIamBindingMapOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Datapolicyv2DataPolicyIamBindingMapOutput)
}

type Datapolicyv2DataPolicyIamBindingOutput struct{ *pulumi.OutputState }

func (Datapolicyv2DataPolicyIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Datapolicyv2DataPolicyIamBinding)(nil)).Elem()
}

func (o Datapolicyv2DataPolicyIamBindingOutput) ToDatapolicyv2DataPolicyIamBindingOutput() Datapolicyv2DataPolicyIamBindingOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamBindingOutput) ToDatapolicyv2DataPolicyIamBindingOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamBindingOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamBindingOutput) Condition() Datapolicyv2DataPolicyIamBindingConditionPtrOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamBinding) Datapolicyv2DataPolicyIamBindingConditionPtrOutput {
		return v.Condition
	}).(Datapolicyv2DataPolicyIamBindingConditionPtrOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o Datapolicyv2DataPolicyIamBindingOutput) DataPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamBinding) pulumi.StringOutput { return v.DataPolicyId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o Datapolicyv2DataPolicyIamBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o Datapolicyv2DataPolicyIamBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
func (o Datapolicyv2DataPolicyIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o Datapolicyv2DataPolicyIamBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `bigquery.Datapolicyv2DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o Datapolicyv2DataPolicyIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type Datapolicyv2DataPolicyIamBindingArrayOutput struct{ *pulumi.OutputState }

func (Datapolicyv2DataPolicyIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datapolicyv2DataPolicyIamBinding)(nil)).Elem()
}

func (o Datapolicyv2DataPolicyIamBindingArrayOutput) ToDatapolicyv2DataPolicyIamBindingArrayOutput() Datapolicyv2DataPolicyIamBindingArrayOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamBindingArrayOutput) ToDatapolicyv2DataPolicyIamBindingArrayOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamBindingArrayOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamBindingArrayOutput) Index(i pulumi.IntInput) Datapolicyv2DataPolicyIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Datapolicyv2DataPolicyIamBinding {
		return vs[0].([]*Datapolicyv2DataPolicyIamBinding)[vs[1].(int)]
	}).(Datapolicyv2DataPolicyIamBindingOutput)
}

type Datapolicyv2DataPolicyIamBindingMapOutput struct{ *pulumi.OutputState }

func (Datapolicyv2DataPolicyIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datapolicyv2DataPolicyIamBinding)(nil)).Elem()
}

func (o Datapolicyv2DataPolicyIamBindingMapOutput) ToDatapolicyv2DataPolicyIamBindingMapOutput() Datapolicyv2DataPolicyIamBindingMapOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamBindingMapOutput) ToDatapolicyv2DataPolicyIamBindingMapOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamBindingMapOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamBindingMapOutput) MapIndex(k pulumi.StringInput) Datapolicyv2DataPolicyIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Datapolicyv2DataPolicyIamBinding {
		return vs[0].(map[string]*Datapolicyv2DataPolicyIamBinding)[vs[1].(string)]
	}).(Datapolicyv2DataPolicyIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Datapolicyv2DataPolicyIamBindingInput)(nil)).Elem(), &Datapolicyv2DataPolicyIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*Datapolicyv2DataPolicyIamBindingArrayInput)(nil)).Elem(), Datapolicyv2DataPolicyIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Datapolicyv2DataPolicyIamBindingMapInput)(nil)).Elem(), Datapolicyv2DataPolicyIamBindingMap{})
	pulumi.RegisterOutputType(Datapolicyv2DataPolicyIamBindingOutput{})
	pulumi.RegisterOutputType(Datapolicyv2DataPolicyIamBindingArrayOutput{})
	pulumi.RegisterOutputType(Datapolicyv2DataPolicyIamBindingMapOutput{})
}
