// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Jobs are actions that BigQuery runs on your behalf to load data, export data, query data, or copy data.
// Once a BigQuery job is created, it cannot be changed or deleted.
//
// To get more information about Job, see:
//
// * [API documentation](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs)
// * How-to Guides
//   - [BigQuery Jobs Intro](https://cloud.google.com/bigquery/docs/jobs-overview)
//
// ## Example Usage
//
// ### Bigquery Job Query
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			bar, err := bigquery.NewDataset(ctx, "bar", &bigquery.DatasetArgs{
//				DatasetId:    pulumi.String("job_query_dataset"),
//				FriendlyName: pulumi.String("test"),
//				Description:  pulumi.String("This is a test description"),
//				Location:     pulumi.String("US"),
//			})
//			if err != nil {
//				return err
//			}
//			foo, err := bigquery.NewTable(ctx, "foo", &bigquery.TableArgs{
//				DeletionProtection: pulumi.Bool(false),
//				DatasetId:          bar.DatasetId,
//				TableId:            pulumi.String("job_query_table"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewJob(ctx, "job", &bigquery.JobArgs{
//				JobId: pulumi.String("job_query"),
//				Labels: pulumi.StringMap{
//					"example-label": pulumi.String("example-value"),
//				},
//				Query: &bigquery.JobQueryArgs{
//					Query: pulumi.String("SELECT state FROM [lookerdata:cdc.project_tycho_reports]"),
//					DestinationTable: &bigquery.JobQueryDestinationTableArgs{
//						ProjectId: foo.Project,
//						DatasetId: foo.DatasetId,
//						TableId:   foo.TableId,
//					},
//					AllowLargeResults: pulumi.Bool(true),
//					FlattenResults:    pulumi.Bool(true),
//					ScriptOptions: &bigquery.JobQueryScriptOptionsArgs{
//						KeyResultStatement: pulumi.String("LAST"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Bigquery Job Query Table Reference
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			bar, err := bigquery.NewDataset(ctx, "bar", &bigquery.DatasetArgs{
//				DatasetId:    pulumi.String("job_query_dataset"),
//				FriendlyName: pulumi.String("test"),
//				Description:  pulumi.String("This is a test description"),
//				Location:     pulumi.String("US"),
//			})
//			if err != nil {
//				return err
//			}
//			foo, err := bigquery.NewTable(ctx, "foo", &bigquery.TableArgs{
//				DeletionProtection: pulumi.Bool(false),
//				DatasetId:          bar.DatasetId,
//				TableId:            pulumi.String("job_query_table"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewJob(ctx, "job", &bigquery.JobArgs{
//				JobId: pulumi.String("job_query"),
//				Labels: pulumi.StringMap{
//					"example-label": pulumi.String("example-value"),
//				},
//				Query: &bigquery.JobQueryArgs{
//					Query: pulumi.String("SELECT state FROM [lookerdata:cdc.project_tycho_reports]"),
//					DestinationTable: &bigquery.JobQueryDestinationTableArgs{
//						TableId: foo.ID(),
//					},
//					DefaultDataset: &bigquery.JobQueryDefaultDatasetArgs{
//						DatasetId: bar.ID(),
//					},
//					AllowLargeResults: pulumi.Bool(true),
//					FlattenResults:    pulumi.Bool(true),
//					ScriptOptions: &bigquery.JobQueryScriptOptionsArgs{
//						KeyResultStatement: pulumi.String("LAST"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Bigquery Job Load
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			bar, err := bigquery.NewDataset(ctx, "bar", &bigquery.DatasetArgs{
//				DatasetId:    pulumi.String("job_load_dataset"),
//				FriendlyName: pulumi.String("test"),
//				Description:  pulumi.String("This is a test description"),
//				Location:     pulumi.String("US"),
//			})
//			if err != nil {
//				return err
//			}
//			foo, err := bigquery.NewTable(ctx, "foo", &bigquery.TableArgs{
//				DeletionProtection: pulumi.Bool(false),
//				DatasetId:          bar.DatasetId,
//				TableId:            pulumi.String("job_load_table"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewJob(ctx, "job", &bigquery.JobArgs{
//				JobId: pulumi.String("job_load"),
//				Labels: pulumi.StringMap{
//					"my_job": pulumi.String("load"),
//				},
//				Load: &bigquery.JobLoadArgs{
//					SourceUris: pulumi.StringArray{
//						pulumi.String("gs://cloud-samples-data/bigquery/us-states/us-states-by-date.csv"),
//					},
//					DestinationTable: &bigquery.JobLoadDestinationTableArgs{
//						ProjectId: foo.Project,
//						DatasetId: foo.DatasetId,
//						TableId:   foo.TableId,
//					},
//					SkipLeadingRows: pulumi.Int(1),
//					SchemaUpdateOptions: pulumi.StringArray{
//						pulumi.String("ALLOW_FIELD_RELAXATION"),
//						pulumi.String("ALLOW_FIELD_ADDITION"),
//					},
//					WriteDisposition: pulumi.String("WRITE_APPEND"),
//					Autodetect:       pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Bigquery Job Load Geojson
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/bigquery"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project := "my-project-name"
//			bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
//				Name:                     pulumi.String(fmt.Sprintf("%v-bq-geojson", project)),
//				Location:                 pulumi.String("US"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			object, err := storage.NewBucketObject(ctx, "object", &storage.BucketObjectArgs{
//				Name:    pulumi.String("geojson-data.jsonl"),
//				Bucket:  bucket.Name,
//				Content: pulumi.String("{\"type\":\"Feature\",\"properties\":{\"continent\":\"Europe\",\"region\":\"Scandinavia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-30.94,53.33],[33.05,53.33],[33.05,71.86],[-30.94,71.86],[-30.94,53.33]]]}}\n{\"type\":\"Feature\",\"properties\":{\"continent\":\"Africa\",\"region\":\"West Africa\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-23.91,0],[11.95,0],[11.95,18.98],[-23.91,18.98],[-23.91,0]]]}}\n"),
//			})
//			if err != nil {
//				return err
//			}
//			bar, err := bigquery.NewDataset(ctx, "bar", &bigquery.DatasetArgs{
//				DatasetId:    pulumi.String("job_load_dataset"),
//				FriendlyName: pulumi.String("test"),
//				Description:  pulumi.String("This is a test description"),
//				Location:     pulumi.String("US"),
//			})
//			if err != nil {
//				return err
//			}
//			foo, err := bigquery.NewTable(ctx, "foo", &bigquery.TableArgs{
//				DeletionProtection: pulumi.Bool(false),
//				DatasetId:          bar.DatasetId,
//				TableId:            pulumi.String("job_load_table"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewJob(ctx, "job", &bigquery.JobArgs{
//				JobId: pulumi.String("job_load"),
//				Labels: pulumi.StringMap{
//					"my_job": pulumi.String("load"),
//				},
//				Load: &bigquery.JobLoadArgs{
//					SourceUris: pulumi.StringArray{
//						pulumi.All(object.Bucket, object.Name).ApplyT(func(_args []interface{}) (string, error) {
//							bucket := _args[0].(string)
//							name := _args[1].(string)
//							return fmt.Sprintf("gs://%v/%v", bucket, name), nil
//						}).(pulumi.StringOutput),
//					},
//					DestinationTable: &bigquery.JobLoadDestinationTableArgs{
//						ProjectId: foo.Project,
//						DatasetId: foo.DatasetId,
//						TableId:   foo.TableId,
//					},
//					WriteDisposition: pulumi.String("WRITE_TRUNCATE"),
//					Autodetect:       pulumi.Bool(true),
//					SourceFormat:     pulumi.String("NEWLINE_DELIMITED_JSON"),
//					JsonExtension:    pulumi.String("GEOJSON"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Bigquery Job Load Parquet
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/bigquery"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := storage.NewBucket(ctx, "test", &storage.BucketArgs{
//				Name:                     pulumi.String("job_load_bucket"),
//				Location:                 pulumi.String("US"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			testBucketObject, err := storage.NewBucketObject(ctx, "test", &storage.BucketObjectArgs{
//				Name:   pulumi.String("job_load_bucket_object"),
//				Source: pulumi.NewFileAsset("./test-fixtures/test.parquet.gzip"),
//				Bucket: test.Name,
//			})
//			if err != nil {
//				return err
//			}
//			testDataset, err := bigquery.NewDataset(ctx, "test", &bigquery.DatasetArgs{
//				DatasetId:    pulumi.String("job_load_dataset"),
//				FriendlyName: pulumi.String("test"),
//				Description:  pulumi.String("This is a test description"),
//				Location:     pulumi.String("US"),
//			})
//			if err != nil {
//				return err
//			}
//			testTable, err := bigquery.NewTable(ctx, "test", &bigquery.TableArgs{
//				DeletionProtection: pulumi.Bool(false),
//				TableId:            pulumi.String("job_load_table"),
//				DatasetId:          testDataset.DatasetId,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewJob(ctx, "job", &bigquery.JobArgs{
//				JobId: pulumi.String("job_load"),
//				Labels: pulumi.StringMap{
//					"my_job": pulumi.String("load"),
//				},
//				Load: &bigquery.JobLoadArgs{
//					SourceUris: pulumi.StringArray{
//						pulumi.All(testBucketObject.Bucket, testBucketObject.Name).ApplyT(func(_args []interface{}) (string, error) {
//							bucket := _args[0].(string)
//							name := _args[1].(string)
//							return fmt.Sprintf("gs://%v/%v", bucket, name), nil
//						}).(pulumi.StringOutput),
//					},
//					DestinationTable: &bigquery.JobLoadDestinationTableArgs{
//						ProjectId: testTable.Project,
//						DatasetId: testTable.DatasetId,
//						TableId:   testTable.TableId,
//					},
//					SchemaUpdateOptions: pulumi.StringArray{
//						pulumi.String("ALLOW_FIELD_RELAXATION"),
//						pulumi.String("ALLOW_FIELD_ADDITION"),
//					},
//					WriteDisposition: pulumi.String("WRITE_APPEND"),
//					SourceFormat:     pulumi.String("PARQUET"),
//					Autodetect:       pulumi.Bool(true),
//					ParquetOptions: &bigquery.JobLoadParquetOptionsArgs{
//						EnumAsString:        pulumi.Bool(true),
//						EnableListInference: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Bigquery Job Copy
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/bigquery"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			count := 2
//			var sourceDataset []*bigquery.Dataset
//			for index := 0; index < count; index++ {
//				key0 := index
//				val0 := index
//				__res, err := bigquery.NewDataset(ctx, fmt.Sprintf("source-%v", key0), &bigquery.DatasetArgs{
//					DatasetId:    pulumi.String(fmt.Sprintf("job_copy_%v_dataset", val0)),
//					FriendlyName: pulumi.String("test"),
//					Description:  pulumi.String("This is a test description"),
//					Location:     pulumi.String("US"),
//				})
//				if err != nil {
//					return err
//				}
//				sourceDataset = append(sourceDataset, __res)
//			}
//			var source []*bigquery.Table
//			for index := 0; index < count; index++ {
//				key0 := index
//				val0 := index
//				__res, err := bigquery.NewTable(ctx, fmt.Sprintf("source-%v", key0), &bigquery.TableArgs{
//					DeletionProtection: pulumi.Bool(false),
//					DatasetId:          sourceDataset[val0].DatasetId,
//					TableId:            pulumi.String(fmt.Sprintf("job_copy_%v_table", val0)),
//					Schema: pulumi.String(`[
//	  {
//	    "name": "name",
//	    "type": "STRING",
//	    "mode": "NULLABLE"
//	  },
//	  {
//	    "name": "post_abbr",
//	    "type": "STRING",
//	    "mode": "NULLABLE"
//	  },
//	  {
//	    "name": "date",
//	    "type": "DATE",
//	    "mode": "NULLABLE"
//	  }
//
// ]
// `),
//
//				})
//				if err != nil {
//					return err
//				}
//				source = append(source, __res)
//			}
//			destDataset, err := bigquery.NewDataset(ctx, "dest", &bigquery.DatasetArgs{
//				DatasetId:    pulumi.String("job_copy_dest_dataset"),
//				FriendlyName: pulumi.String("test"),
//				Description:  pulumi.String("This is a test description"),
//				Location:     pulumi.String("US"),
//			})
//			if err != nil {
//				return err
//			}
//			keyRing, err := kms.NewKeyRing(ctx, "key_ring", &kms.KeyRingArgs{
//				Name:     pulumi.String("example-keyring"),
//				Location: pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			cryptoKey, err := kms.NewCryptoKey(ctx, "crypto_key", &kms.CryptoKeyArgs{
//				Name:    pulumi.String("example-key"),
//				KeyRing: keyRing.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			dest, err := bigquery.NewTable(ctx, "dest", &bigquery.TableArgs{
//				DeletionProtection: pulumi.Bool(false),
//				DatasetId:          destDataset.DatasetId,
//				TableId:            pulumi.String("job_copy_dest_table"),
//				Schema: pulumi.String(`[
//	  {
//	    "name": "name",
//	    "type": "STRING",
//	    "mode": "NULLABLE"
//	  },
//	  {
//	    "name": "post_abbr",
//	    "type": "STRING",
//	    "mode": "NULLABLE"
//	  },
//	  {
//	    "name": "date",
//	    "type": "DATE",
//	    "mode": "NULLABLE"
//	  }
//
// ]
// `),
//
//				EncryptionConfiguration: &bigquery.TableEncryptionConfigurationArgs{
//					KmsKeyName: cryptoKey.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{
//				ProjectId: pulumi.StringRef("my-project-name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMMember(ctx, "encrypt_role", &projects.IAMMemberArgs{
//				Project: pulumi.String(project.ProjectId),
//				Role:    pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
//				Member:  pulumi.String(fmt.Sprintf("serviceAccount:bq-%v@bigquery-encryption.iam.gserviceaccount.com", project.Number)),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewJob(ctx, "job", &bigquery.JobArgs{
//				JobId: pulumi.String("job_copy"),
//				Copy: &bigquery.JobCopyArgs{
//					SourceTables: bigquery.JobCopySourceTableArray{
//						&bigquery.JobCopySourceTableArgs{
//							ProjectId: source[0].Project,
//							DatasetId: source[0].DatasetId,
//							TableId:   source[0].TableId,
//						},
//						&bigquery.JobCopySourceTableArgs{
//							ProjectId: source[1].Project,
//							DatasetId: source[1].DatasetId,
//							TableId:   source[1].TableId,
//						},
//					},
//					DestinationTable: &bigquery.JobCopyDestinationTableArgs{
//						ProjectId: dest.Project,
//						DatasetId: dest.DatasetId,
//						TableId:   dest.TableId,
//					},
//					DestinationEncryptionConfiguration: &bigquery.JobCopyDestinationEncryptionConfigurationArgs{
//						KmsKeyName: cryptoKey.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Bigquery Job Extract
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/bigquery"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewDataset(ctx, "source-one", &bigquery.DatasetArgs{
//				DatasetId:    pulumi.String("job_extract_dataset"),
//				FriendlyName: pulumi.String("test"),
//				Description:  pulumi.String("This is a test description"),
//				Location:     pulumi.String("US"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewTable(ctx, "source-one", &bigquery.TableArgs{
//				DeletionProtection: pulumi.Bool(false),
//				DatasetId:          source_oneDataset.DatasetId,
//				TableId:            pulumi.String("job_extract_table"),
//				Schema: pulumi.String(`[
//	  {
//	    "name": "name",
//	    "type": "STRING",
//	    "mode": "NULLABLE"
//	  },
//	  {
//	    "name": "post_abbr",
//	    "type": "STRING",
//	    "mode": "NULLABLE"
//	  },
//	  {
//	    "name": "date",
//	    "type": "DATE",
//	    "mode": "NULLABLE"
//	  }
//
// ]
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			dest, err := storage.NewBucket(ctx, "dest", &storage.BucketArgs{
//				Name:         pulumi.String("job_extract_bucket"),
//				Location:     pulumi.String("US"),
//				ForceDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewJob(ctx, "job", &bigquery.JobArgs{
//				JobId: pulumi.String("job_extract"),
//				Extract: &bigquery.JobExtractArgs{
//					DestinationUris: pulumi.StringArray{
//						dest.Url.ApplyT(func(url string) (string, error) {
//							return fmt.Sprintf("%v/extract", url), nil
//						}).(pulumi.StringOutput),
//					},
//					SourceTable: &bigquery.JobExtractSourceTableArgs{
//						ProjectId: source_one.Project,
//						DatasetId: source_one.DatasetId,
//						TableId:   source_one.TableId,
//					},
//					DestinationFormat: pulumi.String("NEWLINE_DELIMITED_JSON"),
//					Compression:       pulumi.String("GZIP"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Job can be imported using any of these accepted formats:
//
// * `projects/{{project}}/jobs/{{job_id}}/location/{{location}}`
//
// * `projects/{{project}}/jobs/{{job_id}}`
//
// * `{{project}}/{{job_id}}/{{location}}`
//
// * `{{job_id}}/{{location}}`
//
// * `{{project}}/{{job_id}}`
//
// * `{{job_id}}`
//
// When using the `pulumi import` command, Job can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:bigquery/job:Job default projects/{{project}}/jobs/{{job_id}}/location/{{location}}
// ```
//
// ```sh
// $ pulumi import gcp:bigquery/job:Job default projects/{{project}}/jobs/{{job_id}}
// ```
//
// ```sh
// $ pulumi import gcp:bigquery/job:Job default {{project}}/{{job_id}}/{{location}}
// ```
//
// ```sh
// $ pulumi import gcp:bigquery/job:Job default {{job_id}}/{{location}}
// ```
//
// ```sh
// $ pulumi import gcp:bigquery/job:Job default {{project}}/{{job_id}}
// ```
//
// ```sh
// $ pulumi import gcp:bigquery/job:Job default {{job_id}}
// ```
type Job struct {
	pulumi.CustomResourceState

	// Copies a table.
	Copy JobCopyPtrOutput `pulumi:"copy"`
	// (Output)
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Configures an extract job.
	Extract JobExtractPtrOutput `pulumi:"extract"`
	// The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
	JobId pulumi.StringOutput `pulumi:"jobId"`
	// Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
	JobTimeoutMs pulumi.StringPtrOutput `pulumi:"jobTimeoutMs"`
	// (Output)
	// The type of the job.
	JobType pulumi.StringOutput `pulumi:"jobType"`
	// The labels associated with this job. You can use these to organize and group your jobs. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Configures a load job.
	Load JobLoadPtrOutput `pulumi:"load"`
	// Specifies where the error occurred, if present.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	Project  pulumi.StringOutput    `pulumi:"project"`
	// (Output)
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Configures a query job.
	Query JobQueryPtrOutput `pulumi:"query"`
	// The status of this job. Examine this value when polling an asynchronous job to see if the job is complete.
	// Structure is documented below.
	Statuses JobStatusArrayOutput `pulumi:"statuses"`
	// Email address of the user who ran the job.
	UserEmail pulumi.StringOutput `pulumi:"userEmail"`
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOption) (*Job, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobId == nil {
		return nil, errors.New("invalid value for required argument 'JobId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Job
	err := ctx.RegisterResource("gcp:bigquery/job:Job", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobState, opts ...pulumi.ResourceOption) (*Job, error) {
	var resource Job
	err := ctx.ReadResource("gcp:bigquery/job:Job", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Job resources.
type jobState struct {
	// Copies a table.
	Copy *JobCopy `pulumi:"copy"`
	// (Output)
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Configures an extract job.
	Extract *JobExtract `pulumi:"extract"`
	// The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
	JobId *string `pulumi:"jobId"`
	// Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
	JobTimeoutMs *string `pulumi:"jobTimeoutMs"`
	// (Output)
	// The type of the job.
	JobType *string `pulumi:"jobType"`
	// The labels associated with this job. You can use these to organize and group your jobs. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Configures a load job.
	Load *JobLoad `pulumi:"load"`
	// Specifies where the error occurred, if present.
	Location *string `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// (Output)
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Configures a query job.
	Query *JobQuery `pulumi:"query"`
	// The status of this job. Examine this value when polling an asynchronous job to see if the job is complete.
	// Structure is documented below.
	Statuses []JobStatus `pulumi:"statuses"`
	// Email address of the user who ran the job.
	UserEmail *string `pulumi:"userEmail"`
}

type JobState struct {
	// Copies a table.
	Copy JobCopyPtrInput
	// (Output)
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Configures an extract job.
	Extract JobExtractPtrInput
	// The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
	JobId pulumi.StringPtrInput
	// Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
	JobTimeoutMs pulumi.StringPtrInput
	// (Output)
	// The type of the job.
	JobType pulumi.StringPtrInput
	// The labels associated with this job. You can use these to organize and group your jobs. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Configures a load job.
	Load JobLoadPtrInput
	// Specifies where the error occurred, if present.
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	// (Output)
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Configures a query job.
	Query JobQueryPtrInput
	// The status of this job. Examine this value when polling an asynchronous job to see if the job is complete.
	// Structure is documented below.
	Statuses JobStatusArrayInput
	// Email address of the user who ran the job.
	UserEmail pulumi.StringPtrInput
}

func (JobState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobState)(nil)).Elem()
}

type jobArgs struct {
	// Copies a table.
	Copy *JobCopy `pulumi:"copy"`
	// Configures an extract job.
	Extract *JobExtract `pulumi:"extract"`
	// The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
	JobId string `pulumi:"jobId"`
	// Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
	JobTimeoutMs *string `pulumi:"jobTimeoutMs"`
	// The labels associated with this job. You can use these to organize and group your jobs. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Configures a load job.
	Load *JobLoad `pulumi:"load"`
	// Specifies where the error occurred, if present.
	Location *string `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// Configures a query job.
	Query *JobQuery `pulumi:"query"`
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	// Copies a table.
	Copy JobCopyPtrInput
	// Configures an extract job.
	Extract JobExtractPtrInput
	// The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
	JobId pulumi.StringInput
	// Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
	JobTimeoutMs pulumi.StringPtrInput
	// The labels associated with this job. You can use these to organize and group your jobs. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Configures a load job.
	Load JobLoadPtrInput
	// Specifies where the error occurred, if present.
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	// Configures a query job.
	Query JobQueryPtrInput
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobArgs)(nil)).Elem()
}

type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(ctx context.Context) JobOutput
}

func (*Job) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (i *Job) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i *Job) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

// JobArrayInput is an input type that accepts JobArray and JobArrayOutput values.
// You can construct a concrete instance of `JobArrayInput` via:
//
//	JobArray{ JobArgs{...} }
type JobArrayInput interface {
	pulumi.Input

	ToJobArrayOutput() JobArrayOutput
	ToJobArrayOutputWithContext(context.Context) JobArrayOutput
}

type JobArray []JobInput

func (JobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (i JobArray) ToJobArrayOutput() JobArrayOutput {
	return i.ToJobArrayOutputWithContext(context.Background())
}

func (i JobArray) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobArrayOutput)
}

// JobMapInput is an input type that accepts JobMap and JobMapOutput values.
// You can construct a concrete instance of `JobMapInput` via:
//
//	JobMap{ "key": JobArgs{...} }
type JobMapInput interface {
	pulumi.Input

	ToJobMapOutput() JobMapOutput
	ToJobMapOutputWithContext(context.Context) JobMapOutput
}

type JobMap map[string]JobInput

func (JobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (i JobMap) ToJobMapOutput() JobMapOutput {
	return i.ToJobMapOutputWithContext(context.Background())
}

func (i JobMap) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMapOutput)
}

type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

// Copies a table.
func (o JobOutput) Copy() JobCopyPtrOutput {
	return o.ApplyT(func(v *Job) JobCopyPtrOutput { return v.Copy }).(JobCopyPtrOutput)
}

// (Output)
// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o JobOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Job) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Configures an extract job.
func (o JobOutput) Extract() JobExtractPtrOutput {
	return o.ApplyT(func(v *Job) JobExtractPtrOutput { return v.Extract }).(JobExtractPtrOutput)
}

// The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
func (o JobOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.JobId }).(pulumi.StringOutput)
}

// Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
func (o JobOutput) JobTimeoutMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.JobTimeoutMs }).(pulumi.StringPtrOutput)
}

// (Output)
// The type of the job.
func (o JobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.JobType }).(pulumi.StringOutput)
}

// The labels associated with this job. You can use these to organize and group your jobs. **Note**: This field is
// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
// 'effective_labels' for all of the labels present on the resource.
func (o JobOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Job) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Configures a load job.
func (o JobOutput) Load() JobLoadPtrOutput {
	return o.ApplyT(func(v *Job) JobLoadPtrOutput { return v.Load }).(JobLoadPtrOutput)
}

// Specifies where the error occurred, if present.
func (o JobOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

func (o JobOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// (Output)
// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o JobOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Job) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Configures a query job.
func (o JobOutput) Query() JobQueryPtrOutput {
	return o.ApplyT(func(v *Job) JobQueryPtrOutput { return v.Query }).(JobQueryPtrOutput)
}

// The status of this job. Examine this value when polling an asynchronous job to see if the job is complete.
// Structure is documented below.
func (o JobOutput) Statuses() JobStatusArrayOutput {
	return o.ApplyT(func(v *Job) JobStatusArrayOutput { return v.Statuses }).(JobStatusArrayOutput)
}

// Email address of the user who ran the job.
func (o JobOutput) UserEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.UserEmail }).(pulumi.StringOutput)
}

type JobArrayOutput struct{ *pulumi.OutputState }

func (JobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (o JobArrayOutput) ToJobArrayOutput() JobArrayOutput {
	return o
}

func (o JobArrayOutput) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return o
}

func (o JobArrayOutput) Index(i pulumi.IntInput) JobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Job {
		return vs[0].([]*Job)[vs[1].(int)]
	}).(JobOutput)
}

type JobMapOutput struct{ *pulumi.OutputState }

func (JobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (o JobMapOutput) ToJobMapOutput() JobMapOutput {
	return o
}

func (o JobMapOutput) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return o
}

func (o JobMapOutput) MapIndex(k pulumi.StringInput) JobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Job {
		return vs[0].(map[string]*Job)[vs[1].(string)]
	}).(JobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobInput)(nil)).Elem(), &Job{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobArrayInput)(nil)).Elem(), JobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobMapInput)(nil)).Elem(), JobMap{})
	pulumi.RegisterOutputType(JobOutput{})
	pulumi.RegisterOutputType(JobArrayOutput{})
	pulumi.RegisterOutputType(JobMapOutput{})
}
