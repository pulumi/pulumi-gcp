// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A user-defined function or a stored procedure that belongs to a Dataset
//
// To get more information about Routine, see:
//
// * [API documentation](https://cloud.google.com/bigquery/docs/reference/rest/v2/routines)
// * How-to Guides
//   - [Routines Intro](https://cloud.google.com/bigquery/docs/reference/rest/v2/routines)
//
// ##
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := bigquery.NewDataset(ctx, "test", &bigquery.DatasetArgs{
//				DatasetId: pulumi.String("dataset_id"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewRoutine(ctx, "sproc", &bigquery.RoutineArgs{
//				DatasetId:      test.DatasetId,
//				RoutineId:      pulumi.String("routine_id"),
//				RoutineType:    pulumi.String("PROCEDURE"),
//				Language:       pulumi.String("SQL"),
//				DefinitionBody: pulumi.String("CREATE FUNCTION Add(x FLOAT64, y FLOAT64) RETURNS FLOAT64 AS (x + y);"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ##
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := bigquery.NewDataset(ctx, "test", &bigquery.DatasetArgs{
//				DatasetId: pulumi.String("dataset_id"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewRoutine(ctx, "sproc", &bigquery.RoutineArgs{
//				DatasetId:      test.DatasetId,
//				RoutineId:      pulumi.String("routine_id"),
//				RoutineType:    pulumi.String("SCALAR_FUNCTION"),
//				Language:       pulumi.String("JAVASCRIPT"),
//				DefinitionBody: pulumi.String("CREATE FUNCTION multiplyInputs return x*y;"),
//				Arguments: bigquery.RoutineArgumentArray{
//					&bigquery.RoutineArgumentArgs{
//						Name:     pulumi.String("x"),
//						DataType: pulumi.String("{\"typeKind\" :  \"FLOAT64\"}"),
//					},
//					&bigquery.RoutineArgumentArgs{
//						Name:     pulumi.String("y"),
//						DataType: pulumi.String("{\"typeKind\" :  \"FLOAT64\"}"),
//					},
//				},
//				ReturnType: pulumi.String("{\"typeKind\" :  \"FLOAT64\"}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ##
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := bigquery.NewDataset(ctx, "test", &bigquery.DatasetArgs{
//				DatasetId: pulumi.String("dataset_id"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"typeKind": "INT64",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"columns": []map[string]interface{}{
//					map[string]interface{}{
//						"name": "value",
//						"type": map[string]interface{}{
//							"typeKind": "INT64",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			_, err = bigquery.NewRoutine(ctx, "sproc", &bigquery.RoutineArgs{
//				DatasetId:      test.DatasetId,
//				RoutineId:      pulumi.String("routine_id"),
//				RoutineType:    pulumi.String("TABLE_VALUED_FUNCTION"),
//				Language:       pulumi.String("SQL"),
//				DefinitionBody: pulumi.String("SELECT 1 + value AS value\n"),
//				Arguments: bigquery.RoutineArgumentArray{
//					&bigquery.RoutineArgumentArgs{
//						Name:         pulumi.String("value"),
//						ArgumentKind: pulumi.String("FIXED_TYPE"),
//						DataType:     pulumi.String(json0),
//					},
//				},
//				ReturnTableType: pulumi.String(json1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ##
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := bigquery.NewDataset(ctx, "test", &bigquery.DatasetArgs{
//				DatasetId: pulumi.String("dataset_id"),
//			})
//			if err != nil {
//				return err
//			}
//			testConnection, err := bigquery.NewConnection(ctx, "test", &bigquery.ConnectionArgs{
//				ConnectionId: pulumi.String("connection_id"),
//				Location:     pulumi.String("US"),
//				Spark:        nil,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewRoutine(ctx, "pyspark", &bigquery.RoutineArgs{
//				DatasetId:   test.DatasetId,
//				RoutineId:   pulumi.String("routine_id"),
//				RoutineType: pulumi.String("PROCEDURE"),
//				Language:    pulumi.String("PYTHON"),
//				DefinitionBody: pulumi.String(`from pyspark.sql import SparkSession
//
// spark = SparkSession.builder.appName("spark-bigquery-demo").getOrCreate()
//
// # Load data from BigQuery.
//
//	words = spark.read.format("bigquery") \
//	  .option("table", "bigquery-public-data:samples.shakespeare") \
//	  .load()
//
// words.createOrReplaceTempView("words")
//
// # Perform word count.
// word_count = words.select('word', 'word_count').groupBy('word').sum('word_count').withColumnRenamed("sum(word_count)", "sum_word_count")
// word_count.show()
// word_count.printSchema()
//
// # Saving the data to BigQuery
//
//	word_count.write.format("bigquery") \
//	  .option("writeMethod", "direct") \
//	  .save("wordcount_dataset.wordcount_output")
//
// `),
//
//				SparkOptions: &bigquery.RoutineSparkOptionsArgs{
//					Connection:     testConnection.Name,
//					RuntimeVersion: pulumi.String("2.1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ##
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := bigquery.NewDataset(ctx, "test", &bigquery.DatasetArgs{
//				DatasetId: pulumi.String("dataset_id"),
//			})
//			if err != nil {
//				return err
//			}
//			testConnection, err := bigquery.NewConnection(ctx, "test", &bigquery.ConnectionArgs{
//				ConnectionId: pulumi.String("connection_id"),
//				Location:     pulumi.String("US"),
//				Spark:        nil,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewRoutine(ctx, "pyspark_mainfile", &bigquery.RoutineArgs{
//				DatasetId:      test.DatasetId,
//				RoutineId:      pulumi.String("routine_id"),
//				RoutineType:    pulumi.String("PROCEDURE"),
//				Language:       pulumi.String("PYTHON"),
//				DefinitionBody: pulumi.String(""),
//				SparkOptions: &bigquery.RoutineSparkOptionsArgs{
//					Connection:     testConnection.Name,
//					RuntimeVersion: pulumi.String("2.1"),
//					MainFileUri:    pulumi.String("gs://test-bucket/main.py"),
//					PyFileUris: pulumi.StringArray{
//						pulumi.String("gs://test-bucket/lib.py"),
//					},
//					FileUris: pulumi.StringArray{
//						pulumi.String("gs://test-bucket/distribute_in_executor.json"),
//					},
//					ArchiveUris: pulumi.StringArray{
//						pulumi.String("gs://test-bucket/distribute_in_executor.tar.gz"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ##
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := bigquery.NewDataset(ctx, "test", &bigquery.DatasetArgs{
//				DatasetId: pulumi.String("dataset_id"),
//			})
//			if err != nil {
//				return err
//			}
//			testConnection, err := bigquery.NewConnection(ctx, "test", &bigquery.ConnectionArgs{
//				ConnectionId: pulumi.String("connection_id"),
//				Location:     pulumi.String("US"),
//				Spark:        nil,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewRoutine(ctx, "spark_jar", &bigquery.RoutineArgs{
//				DatasetId:      test.DatasetId,
//				RoutineId:      pulumi.String("routine_id"),
//				RoutineType:    pulumi.String("PROCEDURE"),
//				Language:       pulumi.String("SCALA"),
//				DefinitionBody: pulumi.String(""),
//				SparkOptions: &bigquery.RoutineSparkOptionsArgs{
//					Connection:     testConnection.Name,
//					RuntimeVersion: pulumi.String("2.1"),
//					ContainerImage: pulumi.String("gcr.io/my-project-id/my-spark-image:latest"),
//					MainClass:      pulumi.String("com.google.test.jar.MainClass"),
//					JarUris: pulumi.StringArray{
//						pulumi.String("gs://test-bucket/uberjar_spark_spark3.jar"),
//					},
//					Properties: pulumi.StringMap{
//						"spark.dataproc.scaling.version":             pulumi.String("2"),
//						"spark.reducer.fetchMigratedShuffle.enabled": pulumi.String("true"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ##
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := bigquery.NewDataset(ctx, "test", &bigquery.DatasetArgs{
//				DatasetId: pulumi.String("tf_test_dataset_id_15222"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewRoutine(ctx, "custom_masking_routine", &bigquery.RoutineArgs{
//				DatasetId:          test.DatasetId,
//				RoutineId:          pulumi.String("custom_masking_routine"),
//				RoutineType:        pulumi.String("SCALAR_FUNCTION"),
//				Language:           pulumi.String("SQL"),
//				DataGovernanceType: pulumi.String("DATA_MASKING"),
//				DefinitionBody:     pulumi.String("SAFE.REGEXP_REPLACE(ssn, '[0-9]', 'X')"),
//				Arguments: bigquery.RoutineArgumentArray{
//					&bigquery.RoutineArgumentArgs{
//						Name:     pulumi.String("ssn"),
//						DataType: pulumi.String("{\"typeKind\" :  \"STRING\"}"),
//					},
//				},
//				ReturnType: pulumi.String("{\"typeKind\" :  \"STRING\"}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Example Usage
//
// ### Bigquery Routine Remote Function
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := bigquery.NewDataset(ctx, "test", &bigquery.DatasetArgs{
//				DatasetId: pulumi.String("dataset_id"),
//			})
//			if err != nil {
//				return err
//			}
//			testConnection, err := bigquery.NewConnection(ctx, "test", &bigquery.ConnectionArgs{
//				ConnectionId:  pulumi.String("connection_id"),
//				Location:      pulumi.String("US"),
//				CloudResource: nil,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewRoutine(ctx, "remote_function", &bigquery.RoutineArgs{
//				DatasetId:      test.DatasetId,
//				RoutineId:      pulumi.String("routine_id"),
//				RoutineType:    pulumi.String("SCALAR_FUNCTION"),
//				DefinitionBody: pulumi.String(""),
//				ReturnType:     pulumi.String("{\"typeKind\" :  \"STRING\"}"),
//				RemoteFunctionOptions: &bigquery.RoutineRemoteFunctionOptionsArgs{
//					Endpoint:        pulumi.String("https://us-east1-my_gcf_project.cloudfunctions.net/remote_add"),
//					Connection:      testConnection.Name,
//					MaxBatchingRows: pulumi.String("10"),
//					UserDefinedContext: pulumi.StringMap{
//						"z": pulumi.String("1.5"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Routine can be imported using any of these accepted formats:
//
// * `projects/{{project}}/datasets/{{dataset_id}}/routines/{{routine_id}}`
//
// * `{{project}}/{{dataset_id}}/{{routine_id}}`
//
// * `{{dataset_id}}/{{routine_id}}`
//
// When using the `pulumi import` command, Routine can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:bigquery/routine:Routine default projects/{{project}}/datasets/{{dataset_id}}/routines/{{routine_id}}
// ```
//
// ```sh
// $ pulumi import gcp:bigquery/routine:Routine default {{project}}/{{dataset_id}}/{{routine_id}}
// ```
//
// ```sh
// $ pulumi import gcp:bigquery/routine:Routine default {{dataset_id}}/{{routine_id}}
// ```
type Routine struct {
	pulumi.CustomResourceState

	// Input/output argument of a function or a stored procedure.
	// Structure is documented below.
	Arguments RoutineArgumentArrayOutput `pulumi:"arguments"`
	// The time when this routine was created, in milliseconds since the
	// epoch.
	CreationTime pulumi.IntOutput `pulumi:"creationTime"`
	// If set to DATA_MASKING, the function is validated and made available as a masking function. For more information, see <https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask>
	// Possible values are: `DATA_MASKING`.
	DataGovernanceType pulumi.StringPtrOutput `pulumi:"dataGovernanceType"`
	// The ID of the dataset containing this routine
	DatasetId pulumi.StringOutput `pulumi:"datasetId"`
	// The body of the routine. For functions, this is the expression in the AS clause.
	// If language=SQL, it is the substring inside (but excluding) the parentheses.
	DefinitionBody pulumi.StringOutput `pulumi:"definitionBody"`
	// The description of the routine if defined.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The determinism level of the JavaScript UDF if defined.
	// Possible values are: `DETERMINISM_LEVEL_UNSPECIFIED`, `DETERMINISTIC`, `NOT_DETERMINISTIC`.
	DeterminismLevel pulumi.StringPtrOutput `pulumi:"determinismLevel"`
	// Optional. If language = "JAVASCRIPT", this field stores the path of the
	// imported JAVASCRIPT libraries.
	ImportedLibraries pulumi.StringArrayOutput `pulumi:"importedLibraries"`
	// The language of the routine.
	// Possible values are: `SQL`, `JAVASCRIPT`, `PYTHON`, `JAVA`, `SCALA`.
	Language pulumi.StringPtrOutput `pulumi:"language"`
	// The time when this routine was modified, in milliseconds since the
	// epoch.
	LastModifiedTime pulumi.IntOutput `pulumi:"lastModifiedTime"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Remote function specific options.
	// Structure is documented below.
	RemoteFunctionOptions RoutineRemoteFunctionOptionsPtrOutput `pulumi:"remoteFunctionOptions"`
	// Optional. Can be set only if routineType = "TABLE_VALUED_FUNCTION".
	// If absent, the return table type is inferred from definitionBody at query time in each query
	// that references this routine. If present, then the columns in the evaluated table result will
	// be cast to match the column types specificed in return table type, at query time.
	ReturnTableType pulumi.StringPtrOutput `pulumi:"returnTableType"`
	// A JSON schema for the return type. Optional if language = "SQL"; required otherwise.
	// If absent, the return type is inferred from definitionBody at query time in each query
	// that references this routine. If present, then the evaluated result will be cast to
	// the specified returned type at query time. ~>**NOTE**: Because this field expects a JSON
	// string, any changes to the string will create a diff, even if the JSON itself hasn't
	// changed. If the API returns a different value for the same schema, e.g. it switche
	// d the order of values or replaced STRUCT field type with RECORD field type, we currently
	// cannot suppress the recurring diff this causes. As a workaround, we recommend using
	// the schema as returned by the API.
	ReturnType pulumi.StringPtrOutput `pulumi:"returnType"`
	// The ID of the the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	RoutineId pulumi.StringOutput `pulumi:"routineId"`
	// The type of routine.
	// Possible values are: `SCALAR_FUNCTION`, `PROCEDURE`, `TABLE_VALUED_FUNCTION`.
	RoutineType pulumi.StringOutput `pulumi:"routineType"`
	// Optional. If language is one of "PYTHON", "JAVA", "SCALA", this field stores the options for spark stored procedure.
	// Structure is documented below.
	SparkOptions RoutineSparkOptionsPtrOutput `pulumi:"sparkOptions"`
}

// NewRoutine registers a new resource with the given unique name, arguments, and options.
func NewRoutine(ctx *pulumi.Context,
	name string, args *RoutineArgs, opts ...pulumi.ResourceOption) (*Routine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetId'")
	}
	if args.DefinitionBody == nil {
		return nil, errors.New("invalid value for required argument 'DefinitionBody'")
	}
	if args.RoutineId == nil {
		return nil, errors.New("invalid value for required argument 'RoutineId'")
	}
	if args.RoutineType == nil {
		return nil, errors.New("invalid value for required argument 'RoutineType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Routine
	err := ctx.RegisterResource("gcp:bigquery/routine:Routine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutine gets an existing Routine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutineState, opts ...pulumi.ResourceOption) (*Routine, error) {
	var resource Routine
	err := ctx.ReadResource("gcp:bigquery/routine:Routine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Routine resources.
type routineState struct {
	// Input/output argument of a function or a stored procedure.
	// Structure is documented below.
	Arguments []RoutineArgument `pulumi:"arguments"`
	// The time when this routine was created, in milliseconds since the
	// epoch.
	CreationTime *int `pulumi:"creationTime"`
	// If set to DATA_MASKING, the function is validated and made available as a masking function. For more information, see <https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask>
	// Possible values are: `DATA_MASKING`.
	DataGovernanceType *string `pulumi:"dataGovernanceType"`
	// The ID of the dataset containing this routine
	DatasetId *string `pulumi:"datasetId"`
	// The body of the routine. For functions, this is the expression in the AS clause.
	// If language=SQL, it is the substring inside (but excluding) the parentheses.
	DefinitionBody *string `pulumi:"definitionBody"`
	// The description of the routine if defined.
	Description *string `pulumi:"description"`
	// The determinism level of the JavaScript UDF if defined.
	// Possible values are: `DETERMINISM_LEVEL_UNSPECIFIED`, `DETERMINISTIC`, `NOT_DETERMINISTIC`.
	DeterminismLevel *string `pulumi:"determinismLevel"`
	// Optional. If language = "JAVASCRIPT", this field stores the path of the
	// imported JAVASCRIPT libraries.
	ImportedLibraries []string `pulumi:"importedLibraries"`
	// The language of the routine.
	// Possible values are: `SQL`, `JAVASCRIPT`, `PYTHON`, `JAVA`, `SCALA`.
	Language *string `pulumi:"language"`
	// The time when this routine was modified, in milliseconds since the
	// epoch.
	LastModifiedTime *int `pulumi:"lastModifiedTime"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Remote function specific options.
	// Structure is documented below.
	RemoteFunctionOptions *RoutineRemoteFunctionOptions `pulumi:"remoteFunctionOptions"`
	// Optional. Can be set only if routineType = "TABLE_VALUED_FUNCTION".
	// If absent, the return table type is inferred from definitionBody at query time in each query
	// that references this routine. If present, then the columns in the evaluated table result will
	// be cast to match the column types specificed in return table type, at query time.
	ReturnTableType *string `pulumi:"returnTableType"`
	// A JSON schema for the return type. Optional if language = "SQL"; required otherwise.
	// If absent, the return type is inferred from definitionBody at query time in each query
	// that references this routine. If present, then the evaluated result will be cast to
	// the specified returned type at query time. ~>**NOTE**: Because this field expects a JSON
	// string, any changes to the string will create a diff, even if the JSON itself hasn't
	// changed. If the API returns a different value for the same schema, e.g. it switche
	// d the order of values or replaced STRUCT field type with RECORD field type, we currently
	// cannot suppress the recurring diff this causes. As a workaround, we recommend using
	// the schema as returned by the API.
	ReturnType *string `pulumi:"returnType"`
	// The ID of the the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	RoutineId *string `pulumi:"routineId"`
	// The type of routine.
	// Possible values are: `SCALAR_FUNCTION`, `PROCEDURE`, `TABLE_VALUED_FUNCTION`.
	RoutineType *string `pulumi:"routineType"`
	// Optional. If language is one of "PYTHON", "JAVA", "SCALA", this field stores the options for spark stored procedure.
	// Structure is documented below.
	SparkOptions *RoutineSparkOptions `pulumi:"sparkOptions"`
}

type RoutineState struct {
	// Input/output argument of a function or a stored procedure.
	// Structure is documented below.
	Arguments RoutineArgumentArrayInput
	// The time when this routine was created, in milliseconds since the
	// epoch.
	CreationTime pulumi.IntPtrInput
	// If set to DATA_MASKING, the function is validated and made available as a masking function. For more information, see <https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask>
	// Possible values are: `DATA_MASKING`.
	DataGovernanceType pulumi.StringPtrInput
	// The ID of the dataset containing this routine
	DatasetId pulumi.StringPtrInput
	// The body of the routine. For functions, this is the expression in the AS clause.
	// If language=SQL, it is the substring inside (but excluding) the parentheses.
	DefinitionBody pulumi.StringPtrInput
	// The description of the routine if defined.
	Description pulumi.StringPtrInput
	// The determinism level of the JavaScript UDF if defined.
	// Possible values are: `DETERMINISM_LEVEL_UNSPECIFIED`, `DETERMINISTIC`, `NOT_DETERMINISTIC`.
	DeterminismLevel pulumi.StringPtrInput
	// Optional. If language = "JAVASCRIPT", this field stores the path of the
	// imported JAVASCRIPT libraries.
	ImportedLibraries pulumi.StringArrayInput
	// The language of the routine.
	// Possible values are: `SQL`, `JAVASCRIPT`, `PYTHON`, `JAVA`, `SCALA`.
	Language pulumi.StringPtrInput
	// The time when this routine was modified, in milliseconds since the
	// epoch.
	LastModifiedTime pulumi.IntPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Remote function specific options.
	// Structure is documented below.
	RemoteFunctionOptions RoutineRemoteFunctionOptionsPtrInput
	// Optional. Can be set only if routineType = "TABLE_VALUED_FUNCTION".
	// If absent, the return table type is inferred from definitionBody at query time in each query
	// that references this routine. If present, then the columns in the evaluated table result will
	// be cast to match the column types specificed in return table type, at query time.
	ReturnTableType pulumi.StringPtrInput
	// A JSON schema for the return type. Optional if language = "SQL"; required otherwise.
	// If absent, the return type is inferred from definitionBody at query time in each query
	// that references this routine. If present, then the evaluated result will be cast to
	// the specified returned type at query time. ~>**NOTE**: Because this field expects a JSON
	// string, any changes to the string will create a diff, even if the JSON itself hasn't
	// changed. If the API returns a different value for the same schema, e.g. it switche
	// d the order of values or replaced STRUCT field type with RECORD field type, we currently
	// cannot suppress the recurring diff this causes. As a workaround, we recommend using
	// the schema as returned by the API.
	ReturnType pulumi.StringPtrInput
	// The ID of the the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	RoutineId pulumi.StringPtrInput
	// The type of routine.
	// Possible values are: `SCALAR_FUNCTION`, `PROCEDURE`, `TABLE_VALUED_FUNCTION`.
	RoutineType pulumi.StringPtrInput
	// Optional. If language is one of "PYTHON", "JAVA", "SCALA", this field stores the options for spark stored procedure.
	// Structure is documented below.
	SparkOptions RoutineSparkOptionsPtrInput
}

func (RoutineState) ElementType() reflect.Type {
	return reflect.TypeOf((*routineState)(nil)).Elem()
}

type routineArgs struct {
	// Input/output argument of a function or a stored procedure.
	// Structure is documented below.
	Arguments []RoutineArgument `pulumi:"arguments"`
	// If set to DATA_MASKING, the function is validated and made available as a masking function. For more information, see <https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask>
	// Possible values are: `DATA_MASKING`.
	DataGovernanceType *string `pulumi:"dataGovernanceType"`
	// The ID of the dataset containing this routine
	DatasetId string `pulumi:"datasetId"`
	// The body of the routine. For functions, this is the expression in the AS clause.
	// If language=SQL, it is the substring inside (but excluding) the parentheses.
	DefinitionBody string `pulumi:"definitionBody"`
	// The description of the routine if defined.
	Description *string `pulumi:"description"`
	// The determinism level of the JavaScript UDF if defined.
	// Possible values are: `DETERMINISM_LEVEL_UNSPECIFIED`, `DETERMINISTIC`, `NOT_DETERMINISTIC`.
	DeterminismLevel *string `pulumi:"determinismLevel"`
	// Optional. If language = "JAVASCRIPT", this field stores the path of the
	// imported JAVASCRIPT libraries.
	ImportedLibraries []string `pulumi:"importedLibraries"`
	// The language of the routine.
	// Possible values are: `SQL`, `JAVASCRIPT`, `PYTHON`, `JAVA`, `SCALA`.
	Language *string `pulumi:"language"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Remote function specific options.
	// Structure is documented below.
	RemoteFunctionOptions *RoutineRemoteFunctionOptions `pulumi:"remoteFunctionOptions"`
	// Optional. Can be set only if routineType = "TABLE_VALUED_FUNCTION".
	// If absent, the return table type is inferred from definitionBody at query time in each query
	// that references this routine. If present, then the columns in the evaluated table result will
	// be cast to match the column types specificed in return table type, at query time.
	ReturnTableType *string `pulumi:"returnTableType"`
	// A JSON schema for the return type. Optional if language = "SQL"; required otherwise.
	// If absent, the return type is inferred from definitionBody at query time in each query
	// that references this routine. If present, then the evaluated result will be cast to
	// the specified returned type at query time. ~>**NOTE**: Because this field expects a JSON
	// string, any changes to the string will create a diff, even if the JSON itself hasn't
	// changed. If the API returns a different value for the same schema, e.g. it switche
	// d the order of values or replaced STRUCT field type with RECORD field type, we currently
	// cannot suppress the recurring diff this causes. As a workaround, we recommend using
	// the schema as returned by the API.
	ReturnType *string `pulumi:"returnType"`
	// The ID of the the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	RoutineId string `pulumi:"routineId"`
	// The type of routine.
	// Possible values are: `SCALAR_FUNCTION`, `PROCEDURE`, `TABLE_VALUED_FUNCTION`.
	RoutineType string `pulumi:"routineType"`
	// Optional. If language is one of "PYTHON", "JAVA", "SCALA", this field stores the options for spark stored procedure.
	// Structure is documented below.
	SparkOptions *RoutineSparkOptions `pulumi:"sparkOptions"`
}

// The set of arguments for constructing a Routine resource.
type RoutineArgs struct {
	// Input/output argument of a function or a stored procedure.
	// Structure is documented below.
	Arguments RoutineArgumentArrayInput
	// If set to DATA_MASKING, the function is validated and made available as a masking function. For more information, see <https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask>
	// Possible values are: `DATA_MASKING`.
	DataGovernanceType pulumi.StringPtrInput
	// The ID of the dataset containing this routine
	DatasetId pulumi.StringInput
	// The body of the routine. For functions, this is the expression in the AS clause.
	// If language=SQL, it is the substring inside (but excluding) the parentheses.
	DefinitionBody pulumi.StringInput
	// The description of the routine if defined.
	Description pulumi.StringPtrInput
	// The determinism level of the JavaScript UDF if defined.
	// Possible values are: `DETERMINISM_LEVEL_UNSPECIFIED`, `DETERMINISTIC`, `NOT_DETERMINISTIC`.
	DeterminismLevel pulumi.StringPtrInput
	// Optional. If language = "JAVASCRIPT", this field stores the path of the
	// imported JAVASCRIPT libraries.
	ImportedLibraries pulumi.StringArrayInput
	// The language of the routine.
	// Possible values are: `SQL`, `JAVASCRIPT`, `PYTHON`, `JAVA`, `SCALA`.
	Language pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Remote function specific options.
	// Structure is documented below.
	RemoteFunctionOptions RoutineRemoteFunctionOptionsPtrInput
	// Optional. Can be set only if routineType = "TABLE_VALUED_FUNCTION".
	// If absent, the return table type is inferred from definitionBody at query time in each query
	// that references this routine. If present, then the columns in the evaluated table result will
	// be cast to match the column types specificed in return table type, at query time.
	ReturnTableType pulumi.StringPtrInput
	// A JSON schema for the return type. Optional if language = "SQL"; required otherwise.
	// If absent, the return type is inferred from definitionBody at query time in each query
	// that references this routine. If present, then the evaluated result will be cast to
	// the specified returned type at query time. ~>**NOTE**: Because this field expects a JSON
	// string, any changes to the string will create a diff, even if the JSON itself hasn't
	// changed. If the API returns a different value for the same schema, e.g. it switche
	// d the order of values or replaced STRUCT field type with RECORD field type, we currently
	// cannot suppress the recurring diff this causes. As a workaround, we recommend using
	// the schema as returned by the API.
	ReturnType pulumi.StringPtrInput
	// The ID of the the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	RoutineId pulumi.StringInput
	// The type of routine.
	// Possible values are: `SCALAR_FUNCTION`, `PROCEDURE`, `TABLE_VALUED_FUNCTION`.
	RoutineType pulumi.StringInput
	// Optional. If language is one of "PYTHON", "JAVA", "SCALA", this field stores the options for spark stored procedure.
	// Structure is documented below.
	SparkOptions RoutineSparkOptionsPtrInput
}

func (RoutineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routineArgs)(nil)).Elem()
}

type RoutineInput interface {
	pulumi.Input

	ToRoutineOutput() RoutineOutput
	ToRoutineOutputWithContext(ctx context.Context) RoutineOutput
}

func (*Routine) ElementType() reflect.Type {
	return reflect.TypeOf((**Routine)(nil)).Elem()
}

func (i *Routine) ToRoutineOutput() RoutineOutput {
	return i.ToRoutineOutputWithContext(context.Background())
}

func (i *Routine) ToRoutineOutputWithContext(ctx context.Context) RoutineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineOutput)
}

// RoutineArrayInput is an input type that accepts RoutineArray and RoutineArrayOutput values.
// You can construct a concrete instance of `RoutineArrayInput` via:
//
//	RoutineArray{ RoutineArgs{...} }
type RoutineArrayInput interface {
	pulumi.Input

	ToRoutineArrayOutput() RoutineArrayOutput
	ToRoutineArrayOutputWithContext(context.Context) RoutineArrayOutput
}

type RoutineArray []RoutineInput

func (RoutineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Routine)(nil)).Elem()
}

func (i RoutineArray) ToRoutineArrayOutput() RoutineArrayOutput {
	return i.ToRoutineArrayOutputWithContext(context.Background())
}

func (i RoutineArray) ToRoutineArrayOutputWithContext(ctx context.Context) RoutineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineArrayOutput)
}

// RoutineMapInput is an input type that accepts RoutineMap and RoutineMapOutput values.
// You can construct a concrete instance of `RoutineMapInput` via:
//
//	RoutineMap{ "key": RoutineArgs{...} }
type RoutineMapInput interface {
	pulumi.Input

	ToRoutineMapOutput() RoutineMapOutput
	ToRoutineMapOutputWithContext(context.Context) RoutineMapOutput
}

type RoutineMap map[string]RoutineInput

func (RoutineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Routine)(nil)).Elem()
}

func (i RoutineMap) ToRoutineMapOutput() RoutineMapOutput {
	return i.ToRoutineMapOutputWithContext(context.Background())
}

func (i RoutineMap) ToRoutineMapOutputWithContext(ctx context.Context) RoutineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineMapOutput)
}

type RoutineOutput struct{ *pulumi.OutputState }

func (RoutineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Routine)(nil)).Elem()
}

func (o RoutineOutput) ToRoutineOutput() RoutineOutput {
	return o
}

func (o RoutineOutput) ToRoutineOutputWithContext(ctx context.Context) RoutineOutput {
	return o
}

// Input/output argument of a function or a stored procedure.
// Structure is documented below.
func (o RoutineOutput) Arguments() RoutineArgumentArrayOutput {
	return o.ApplyT(func(v *Routine) RoutineArgumentArrayOutput { return v.Arguments }).(RoutineArgumentArrayOutput)
}

// The time when this routine was created, in milliseconds since the
// epoch.
func (o RoutineOutput) CreationTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Routine) pulumi.IntOutput { return v.CreationTime }).(pulumi.IntOutput)
}

// If set to DATA_MASKING, the function is validated and made available as a masking function. For more information, see <https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask>
// Possible values are: `DATA_MASKING`.
func (o RoutineOutput) DataGovernanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Routine) pulumi.StringPtrOutput { return v.DataGovernanceType }).(pulumi.StringPtrOutput)
}

// The ID of the dataset containing this routine
func (o RoutineOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Routine) pulumi.StringOutput { return v.DatasetId }).(pulumi.StringOutput)
}

// The body of the routine. For functions, this is the expression in the AS clause.
// If language=SQL, it is the substring inside (but excluding) the parentheses.
func (o RoutineOutput) DefinitionBody() pulumi.StringOutput {
	return o.ApplyT(func(v *Routine) pulumi.StringOutput { return v.DefinitionBody }).(pulumi.StringOutput)
}

// The description of the routine if defined.
func (o RoutineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Routine) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The determinism level of the JavaScript UDF if defined.
// Possible values are: `DETERMINISM_LEVEL_UNSPECIFIED`, `DETERMINISTIC`, `NOT_DETERMINISTIC`.
func (o RoutineOutput) DeterminismLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Routine) pulumi.StringPtrOutput { return v.DeterminismLevel }).(pulumi.StringPtrOutput)
}

// Optional. If language = "JAVASCRIPT", this field stores the path of the
// imported JAVASCRIPT libraries.
func (o RoutineOutput) ImportedLibraries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Routine) pulumi.StringArrayOutput { return v.ImportedLibraries }).(pulumi.StringArrayOutput)
}

// The language of the routine.
// Possible values are: `SQL`, `JAVASCRIPT`, `PYTHON`, `JAVA`, `SCALA`.
func (o RoutineOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Routine) pulumi.StringPtrOutput { return v.Language }).(pulumi.StringPtrOutput)
}

// The time when this routine was modified, in milliseconds since the
// epoch.
func (o RoutineOutput) LastModifiedTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Routine) pulumi.IntOutput { return v.LastModifiedTime }).(pulumi.IntOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o RoutineOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Routine) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Remote function specific options.
// Structure is documented below.
func (o RoutineOutput) RemoteFunctionOptions() RoutineRemoteFunctionOptionsPtrOutput {
	return o.ApplyT(func(v *Routine) RoutineRemoteFunctionOptionsPtrOutput { return v.RemoteFunctionOptions }).(RoutineRemoteFunctionOptionsPtrOutput)
}

// Optional. Can be set only if routineType = "TABLE_VALUED_FUNCTION".
// If absent, the return table type is inferred from definitionBody at query time in each query
// that references this routine. If present, then the columns in the evaluated table result will
// be cast to match the column types specificed in return table type, at query time.
func (o RoutineOutput) ReturnTableType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Routine) pulumi.StringPtrOutput { return v.ReturnTableType }).(pulumi.StringPtrOutput)
}

// A JSON schema for the return type. Optional if language = "SQL"; required otherwise.
// If absent, the return type is inferred from definitionBody at query time in each query
// that references this routine. If present, then the evaluated result will be cast to
// the specified returned type at query time. ~>**NOTE**: Because this field expects a JSON
// string, any changes to the string will create a diff, even if the JSON itself hasn't
// changed. If the API returns a different value for the same schema, e.g. it switche
// d the order of values or replaced STRUCT field type with RECORD field type, we currently
// cannot suppress the recurring diff this causes. As a workaround, we recommend using
// the schema as returned by the API.
func (o RoutineOutput) ReturnType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Routine) pulumi.StringPtrOutput { return v.ReturnType }).(pulumi.StringPtrOutput)
}

// The ID of the the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
func (o RoutineOutput) RoutineId() pulumi.StringOutput {
	return o.ApplyT(func(v *Routine) pulumi.StringOutput { return v.RoutineId }).(pulumi.StringOutput)
}

// The type of routine.
// Possible values are: `SCALAR_FUNCTION`, `PROCEDURE`, `TABLE_VALUED_FUNCTION`.
func (o RoutineOutput) RoutineType() pulumi.StringOutput {
	return o.ApplyT(func(v *Routine) pulumi.StringOutput { return v.RoutineType }).(pulumi.StringOutput)
}

// Optional. If language is one of "PYTHON", "JAVA", "SCALA", this field stores the options for spark stored procedure.
// Structure is documented below.
func (o RoutineOutput) SparkOptions() RoutineSparkOptionsPtrOutput {
	return o.ApplyT(func(v *Routine) RoutineSparkOptionsPtrOutput { return v.SparkOptions }).(RoutineSparkOptionsPtrOutput)
}

type RoutineArrayOutput struct{ *pulumi.OutputState }

func (RoutineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Routine)(nil)).Elem()
}

func (o RoutineArrayOutput) ToRoutineArrayOutput() RoutineArrayOutput {
	return o
}

func (o RoutineArrayOutput) ToRoutineArrayOutputWithContext(ctx context.Context) RoutineArrayOutput {
	return o
}

func (o RoutineArrayOutput) Index(i pulumi.IntInput) RoutineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Routine {
		return vs[0].([]*Routine)[vs[1].(int)]
	}).(RoutineOutput)
}

type RoutineMapOutput struct{ *pulumi.OutputState }

func (RoutineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Routine)(nil)).Elem()
}

func (o RoutineMapOutput) ToRoutineMapOutput() RoutineMapOutput {
	return o
}

func (o RoutineMapOutput) ToRoutineMapOutputWithContext(ctx context.Context) RoutineMapOutput {
	return o
}

func (o RoutineMapOutput) MapIndex(k pulumi.StringInput) RoutineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Routine {
		return vs[0].(map[string]*Routine)[vs[1].(string)]
	}).(RoutineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineInput)(nil)).Elem(), &Routine{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineArrayInput)(nil)).Elem(), RoutineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineMapInput)(nil)).Elem(), RoutineMap{})
	pulumi.RegisterOutputType(RoutineOutput{})
	pulumi.RegisterOutputType(RoutineArrayOutput{})
	pulumi.RegisterOutputType(RoutineMapOutput{})
}
