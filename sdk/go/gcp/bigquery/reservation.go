// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A reservation is a mechanism used to guarantee BigQuery slots to users.
//
// To get more information about Reservation, see:
//
// * [API documentation](https://cloud.google.com/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/create)
// * How-to Guides
//   - [Introduction to Reservations](https://cloud.google.com/bigquery/docs/reservations-intro)
//
// ## Example Usage
//
// ### Bigquery Reservation Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewReservation(ctx, "reservation", &bigquery.ReservationArgs{
//				Name:            pulumi.String("my-reservation"),
//				Location:        pulumi.String("us-west2"),
//				SlotCapacity:    pulumi.Int(0),
//				Edition:         pulumi.String("STANDARD"),
//				IgnoreIdleSlots: pulumi.Bool(true),
//				Concurrency:     pulumi.Int(0),
//				Autoscale: &bigquery.ReservationAutoscaleArgs{
//					MaxSlots: pulumi.Int(100),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Reservation can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/reservations/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, Reservation can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:bigquery/reservation:Reservation default projects/{{project}}/locations/{{location}}/reservations/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:bigquery/reservation:Reservation default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:bigquery/reservation:Reservation default {{location}}/{{name}}
// ```
type Reservation struct {
	pulumi.CustomResourceState

	// The configuration parameters for the auto scaling feature.
	// Structure is documented below.
	Autoscale ReservationAutoscalePtrOutput `pulumi:"autoscale"`
	// Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
	Concurrency pulumi.IntPtrOutput `pulumi:"concurrency"`
	// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
	Edition pulumi.StringOutput `pulumi:"edition"`
	// If false, any query using this reservation will use idle slots from other reservations within
	// the same admin project. If true, a query using this reservation will execute with the slot
	// capacity specified above at most.
	IgnoreIdleSlots pulumi.BoolPtrOutput `pulumi:"ignoreIdleSlots"`
	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The overall max slots for the reservation, covering slotCapacity (baseline), idle slots
	// (if ignoreIdleSlots is false) and scaled slots. If present, the reservation won't use
	// more than the specified number of slots, even if there is demand and supply (from idle
	// slots). NOTE: capping a reservation's idle slot usage is best effort and its usage may
	// exceed the maxSlots value. However, in terms of autoscale.current_slots (which accounts
	// for the additional added slots), it will never exceed the maxSlots - baseline.
	// This field must be set together with the scalingMode enum value, otherwise the request
	// will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// If the maxSlots and scalingMode are set, the autoscale or autoscale.max_slots field
	// must be unset. Otherwise the request will be rejected with error code
	// google.rpc.Code.INVALID_ARGUMENT. However, the autoscale field may still be in the
	// output. The autopscale.max_slots will always show as 0 and the autoscaler.current_slots
	// will represent the current slots from autoscaler excluding idle slots. For example,
	// if the maxSlots is 1000 and scalingMode is AUTOSCALE_ONLY, then in the output, the
	// autoscaler.max_slots will be 0 and the autoscaler.current_slots may be any value
	// between 0 and 1000.
	// If the maxSlots is 1000, scalingMode is ALL_SLOTS, the baseline is 100 and idle slots
	// usage is 200, then in the output, the autoscaler.max_slots will be 0 and the
	// autoscaler.current_slots will not be higher than 700.
	// If the maxSlots is 1000, scalingMode is IDLE_SLOTS_ONLY, then in the output, the
	// autoscaler field will be null.
	// If the maxSlots and scalingMode are set, then the ignoreIdleSlots field must be
	// aligned with the scalingMode enum value.(See details in ScalingMode comments).
	// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// Please note, the maxSlots is for user to manage the part of slots greater than the
	// baseline. Therefore, we don't allow users to set maxSlots smaller or equal to the
	// baseline as it will not be meaningful. If the field is present and
	// slotCapacity>=maxSlots, requests will be rejected with error code
	// google.rpc.Code.INVALID_ARGUMENT.
	// Please note that if maxSlots is set to 0, we will treat it as unset. Customers can set
	// maxSlots to 0 and set scalingMode to SCALING_MODE_UNSPECIFIED to disable the maxSlots
	// feature.
	MaxSlots pulumi.IntPtrOutput `pulumi:"maxSlots"`
	// The name of the reservation. This field must only contain alphanumeric characters or dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// The location where the reservation was originally created. This is set only during the
	// failover reservation's creation. All billing charges for the failover reservation will be
	// applied to this location.
	OriginalPrimaryLocation pulumi.StringOutput `pulumi:"originalPrimaryLocation"`
	// The current location of the reservation's primary replica. This field is only set for
	// reservations using the managed disaster recovery feature.
	PrimaryLocation pulumi.StringOutput `pulumi:"primaryLocation"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The Disaster Recovery(DR) replication status of the reservation. This is only available for
	// the primary replicas of DR/failover reservations and provides information about the both the
	// staleness of the secondary and the last error encountered while trying to replicate changes
	// from the primary to the secondary. If this field is blank, it means that the reservation is
	// either not a DR reservation or the reservation is a DR secondary or that any replication
	// operations on the reservation have succeeded.
	// Structure is documented below.
	ReplicationStatuses ReservationReplicationStatusArrayOutput `pulumi:"replicationStatuses"`
	// The scaling mode for the reservation. If the field is present but maxSlots is not present,
	// requests will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// Enum values:
	// `SCALING_MODE_UNSPECIFIED`: Default value of ScalingMode.
	// `AUTOSCALE_ONLY`: The reservation will scale up only using slots from autoscaling. It will
	// not use any idle slots even if there may be some available. The upper limit that autoscaling
	// can scale up to will be maxSlots - baseline. For example, if maxSlots is 1000, baseline is 200
	// and customer sets ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots
	// and no idle slots will be used. Please note, in this mode, the ignoreIdleSlots field must be
	// set to true. Otherwise the request will be rejected with error code
	// google.rpc.Code.INVALID_ARGUMENT.
	// `IDLE_SLOTS_ONLY`: The reservation will scale up using only idle slots contributed by other
	// reservations or from unassigned commitments. If no idle slots are available it will not scale
	// up further. If the idle slots which it is using are reclaimed by the contributing reservation(s)
	// it may be forced to scale down. The max idle slots the reservation can be maxSlots - baseline
	// capacity. For example, if maxSlots is 1000, baseline is 200 and customer sets ScalingMode to
	// IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other reservations, the
	// reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
	// 500 idle slots available in other reservations, the reservation will scale up to 700 slots with
	// 200 baseline and 300 idle slots. Please note, in this mode, the reservation might not be able to
	// scale up to maxSlots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
	// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT
	// `ALL_SLOTS`: The reservation will scale up using all slots available to it. It will use idle slots
	// contributed by other reservations or from unassigned commitments first. If no idle slots are
	// available it will scale up using autoscaling. For example, if maxSlots is 1000, baseline is 200
	// and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
	// reservations, the reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2.
	// if there are 500 idle slots available in other reservations, the reservation will scale up to 1000
	// slots with 200 baseline, 500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
	// available in other reservations, it will scale up to 1000 slots with 200 baseline and 800
	// autoscaling slots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
	// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// Possible values are: `SCALING_MODE_UNSPECIFIED`, `AUTOSCALE_ONLY`, `IDLE_SLOTS_ONLY`, `ALL_SLOTS`.
	ScalingMode pulumi.StringPtrOutput `pulumi:"scalingMode"`
	// The current location of the reservation's secondary replica. This field is only set for
	// reservations using the managed disaster recovery feature. Users can set this in create
	// reservation calls to create a failover reservation or in update reservation calls to convert
	// a non-failover reservation to a failover reservation(or vice versa).
	SecondaryLocation pulumi.StringPtrOutput `pulumi:"secondaryLocation"`
	// Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
	// unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
	SlotCapacity pulumi.IntOutput `pulumi:"slotCapacity"`
}

// NewReservation registers a new resource with the given unique name, arguments, and options.
func NewReservation(ctx *pulumi.Context,
	name string, args *ReservationArgs, opts ...pulumi.ResourceOption) (*Reservation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SlotCapacity == nil {
		return nil, errors.New("invalid value for required argument 'SlotCapacity'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Reservation
	err := ctx.RegisterResource("gcp:bigquery/reservation:Reservation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReservation gets an existing Reservation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReservationState, opts ...pulumi.ResourceOption) (*Reservation, error) {
	var resource Reservation
	err := ctx.ReadResource("gcp:bigquery/reservation:Reservation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Reservation resources.
type reservationState struct {
	// The configuration parameters for the auto scaling feature.
	// Structure is documented below.
	Autoscale *ReservationAutoscale `pulumi:"autoscale"`
	// Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
	Concurrency *int `pulumi:"concurrency"`
	// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
	Edition *string `pulumi:"edition"`
	// If false, any query using this reservation will use idle slots from other reservations within
	// the same admin project. If true, a query using this reservation will execute with the slot
	// capacity specified above at most.
	IgnoreIdleSlots *bool `pulumi:"ignoreIdleSlots"`
	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	Location *string `pulumi:"location"`
	// The overall max slots for the reservation, covering slotCapacity (baseline), idle slots
	// (if ignoreIdleSlots is false) and scaled slots. If present, the reservation won't use
	// more than the specified number of slots, even if there is demand and supply (from idle
	// slots). NOTE: capping a reservation's idle slot usage is best effort and its usage may
	// exceed the maxSlots value. However, in terms of autoscale.current_slots (which accounts
	// for the additional added slots), it will never exceed the maxSlots - baseline.
	// This field must be set together with the scalingMode enum value, otherwise the request
	// will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// If the maxSlots and scalingMode are set, the autoscale or autoscale.max_slots field
	// must be unset. Otherwise the request will be rejected with error code
	// google.rpc.Code.INVALID_ARGUMENT. However, the autoscale field may still be in the
	// output. The autopscale.max_slots will always show as 0 and the autoscaler.current_slots
	// will represent the current slots from autoscaler excluding idle slots. For example,
	// if the maxSlots is 1000 and scalingMode is AUTOSCALE_ONLY, then in the output, the
	// autoscaler.max_slots will be 0 and the autoscaler.current_slots may be any value
	// between 0 and 1000.
	// If the maxSlots is 1000, scalingMode is ALL_SLOTS, the baseline is 100 and idle slots
	// usage is 200, then in the output, the autoscaler.max_slots will be 0 and the
	// autoscaler.current_slots will not be higher than 700.
	// If the maxSlots is 1000, scalingMode is IDLE_SLOTS_ONLY, then in the output, the
	// autoscaler field will be null.
	// If the maxSlots and scalingMode are set, then the ignoreIdleSlots field must be
	// aligned with the scalingMode enum value.(See details in ScalingMode comments).
	// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// Please note, the maxSlots is for user to manage the part of slots greater than the
	// baseline. Therefore, we don't allow users to set maxSlots smaller or equal to the
	// baseline as it will not be meaningful. If the field is present and
	// slotCapacity>=maxSlots, requests will be rejected with error code
	// google.rpc.Code.INVALID_ARGUMENT.
	// Please note that if maxSlots is set to 0, we will treat it as unset. Customers can set
	// maxSlots to 0 and set scalingMode to SCALING_MODE_UNSPECIFIED to disable the maxSlots
	// feature.
	MaxSlots *int `pulumi:"maxSlots"`
	// The name of the reservation. This field must only contain alphanumeric characters or dash.
	Name *string `pulumi:"name"`
	// The location where the reservation was originally created. This is set only during the
	// failover reservation's creation. All billing charges for the failover reservation will be
	// applied to this location.
	OriginalPrimaryLocation *string `pulumi:"originalPrimaryLocation"`
	// The current location of the reservation's primary replica. This field is only set for
	// reservations using the managed disaster recovery feature.
	PrimaryLocation *string `pulumi:"primaryLocation"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The Disaster Recovery(DR) replication status of the reservation. This is only available for
	// the primary replicas of DR/failover reservations and provides information about the both the
	// staleness of the secondary and the last error encountered while trying to replicate changes
	// from the primary to the secondary. If this field is blank, it means that the reservation is
	// either not a DR reservation or the reservation is a DR secondary or that any replication
	// operations on the reservation have succeeded.
	// Structure is documented below.
	ReplicationStatuses []ReservationReplicationStatus `pulumi:"replicationStatuses"`
	// The scaling mode for the reservation. If the field is present but maxSlots is not present,
	// requests will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// Enum values:
	// `SCALING_MODE_UNSPECIFIED`: Default value of ScalingMode.
	// `AUTOSCALE_ONLY`: The reservation will scale up only using slots from autoscaling. It will
	// not use any idle slots even if there may be some available. The upper limit that autoscaling
	// can scale up to will be maxSlots - baseline. For example, if maxSlots is 1000, baseline is 200
	// and customer sets ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots
	// and no idle slots will be used. Please note, in this mode, the ignoreIdleSlots field must be
	// set to true. Otherwise the request will be rejected with error code
	// google.rpc.Code.INVALID_ARGUMENT.
	// `IDLE_SLOTS_ONLY`: The reservation will scale up using only idle slots contributed by other
	// reservations or from unassigned commitments. If no idle slots are available it will not scale
	// up further. If the idle slots which it is using are reclaimed by the contributing reservation(s)
	// it may be forced to scale down. The max idle slots the reservation can be maxSlots - baseline
	// capacity. For example, if maxSlots is 1000, baseline is 200 and customer sets ScalingMode to
	// IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other reservations, the
	// reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
	// 500 idle slots available in other reservations, the reservation will scale up to 700 slots with
	// 200 baseline and 300 idle slots. Please note, in this mode, the reservation might not be able to
	// scale up to maxSlots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
	// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT
	// `ALL_SLOTS`: The reservation will scale up using all slots available to it. It will use idle slots
	// contributed by other reservations or from unassigned commitments first. If no idle slots are
	// available it will scale up using autoscaling. For example, if maxSlots is 1000, baseline is 200
	// and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
	// reservations, the reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2.
	// if there are 500 idle slots available in other reservations, the reservation will scale up to 1000
	// slots with 200 baseline, 500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
	// available in other reservations, it will scale up to 1000 slots with 200 baseline and 800
	// autoscaling slots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
	// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// Possible values are: `SCALING_MODE_UNSPECIFIED`, `AUTOSCALE_ONLY`, `IDLE_SLOTS_ONLY`, `ALL_SLOTS`.
	ScalingMode *string `pulumi:"scalingMode"`
	// The current location of the reservation's secondary replica. This field is only set for
	// reservations using the managed disaster recovery feature. Users can set this in create
	// reservation calls to create a failover reservation or in update reservation calls to convert
	// a non-failover reservation to a failover reservation(or vice versa).
	SecondaryLocation *string `pulumi:"secondaryLocation"`
	// Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
	// unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
	SlotCapacity *int `pulumi:"slotCapacity"`
}

type ReservationState struct {
	// The configuration parameters for the auto scaling feature.
	// Structure is documented below.
	Autoscale ReservationAutoscalePtrInput
	// Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
	Concurrency pulumi.IntPtrInput
	// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
	Edition pulumi.StringPtrInput
	// If false, any query using this reservation will use idle slots from other reservations within
	// the same admin project. If true, a query using this reservation will execute with the slot
	// capacity specified above at most.
	IgnoreIdleSlots pulumi.BoolPtrInput
	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	Location pulumi.StringPtrInput
	// The overall max slots for the reservation, covering slotCapacity (baseline), idle slots
	// (if ignoreIdleSlots is false) and scaled slots. If present, the reservation won't use
	// more than the specified number of slots, even if there is demand and supply (from idle
	// slots). NOTE: capping a reservation's idle slot usage is best effort and its usage may
	// exceed the maxSlots value. However, in terms of autoscale.current_slots (which accounts
	// for the additional added slots), it will never exceed the maxSlots - baseline.
	// This field must be set together with the scalingMode enum value, otherwise the request
	// will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// If the maxSlots and scalingMode are set, the autoscale or autoscale.max_slots field
	// must be unset. Otherwise the request will be rejected with error code
	// google.rpc.Code.INVALID_ARGUMENT. However, the autoscale field may still be in the
	// output. The autopscale.max_slots will always show as 0 and the autoscaler.current_slots
	// will represent the current slots from autoscaler excluding idle slots. For example,
	// if the maxSlots is 1000 and scalingMode is AUTOSCALE_ONLY, then in the output, the
	// autoscaler.max_slots will be 0 and the autoscaler.current_slots may be any value
	// between 0 and 1000.
	// If the maxSlots is 1000, scalingMode is ALL_SLOTS, the baseline is 100 and idle slots
	// usage is 200, then in the output, the autoscaler.max_slots will be 0 and the
	// autoscaler.current_slots will not be higher than 700.
	// If the maxSlots is 1000, scalingMode is IDLE_SLOTS_ONLY, then in the output, the
	// autoscaler field will be null.
	// If the maxSlots and scalingMode are set, then the ignoreIdleSlots field must be
	// aligned with the scalingMode enum value.(See details in ScalingMode comments).
	// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// Please note, the maxSlots is for user to manage the part of slots greater than the
	// baseline. Therefore, we don't allow users to set maxSlots smaller or equal to the
	// baseline as it will not be meaningful. If the field is present and
	// slotCapacity>=maxSlots, requests will be rejected with error code
	// google.rpc.Code.INVALID_ARGUMENT.
	// Please note that if maxSlots is set to 0, we will treat it as unset. Customers can set
	// maxSlots to 0 and set scalingMode to SCALING_MODE_UNSPECIFIED to disable the maxSlots
	// feature.
	MaxSlots pulumi.IntPtrInput
	// The name of the reservation. This field must only contain alphanumeric characters or dash.
	Name pulumi.StringPtrInput
	// The location where the reservation was originally created. This is set only during the
	// failover reservation's creation. All billing charges for the failover reservation will be
	// applied to this location.
	OriginalPrimaryLocation pulumi.StringPtrInput
	// The current location of the reservation's primary replica. This field is only set for
	// reservations using the managed disaster recovery feature.
	PrimaryLocation pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The Disaster Recovery(DR) replication status of the reservation. This is only available for
	// the primary replicas of DR/failover reservations and provides information about the both the
	// staleness of the secondary and the last error encountered while trying to replicate changes
	// from the primary to the secondary. If this field is blank, it means that the reservation is
	// either not a DR reservation or the reservation is a DR secondary or that any replication
	// operations on the reservation have succeeded.
	// Structure is documented below.
	ReplicationStatuses ReservationReplicationStatusArrayInput
	// The scaling mode for the reservation. If the field is present but maxSlots is not present,
	// requests will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// Enum values:
	// `SCALING_MODE_UNSPECIFIED`: Default value of ScalingMode.
	// `AUTOSCALE_ONLY`: The reservation will scale up only using slots from autoscaling. It will
	// not use any idle slots even if there may be some available. The upper limit that autoscaling
	// can scale up to will be maxSlots - baseline. For example, if maxSlots is 1000, baseline is 200
	// and customer sets ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots
	// and no idle slots will be used. Please note, in this mode, the ignoreIdleSlots field must be
	// set to true. Otherwise the request will be rejected with error code
	// google.rpc.Code.INVALID_ARGUMENT.
	// `IDLE_SLOTS_ONLY`: The reservation will scale up using only idle slots contributed by other
	// reservations or from unassigned commitments. If no idle slots are available it will not scale
	// up further. If the idle slots which it is using are reclaimed by the contributing reservation(s)
	// it may be forced to scale down. The max idle slots the reservation can be maxSlots - baseline
	// capacity. For example, if maxSlots is 1000, baseline is 200 and customer sets ScalingMode to
	// IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other reservations, the
	// reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
	// 500 idle slots available in other reservations, the reservation will scale up to 700 slots with
	// 200 baseline and 300 idle slots. Please note, in this mode, the reservation might not be able to
	// scale up to maxSlots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
	// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT
	// `ALL_SLOTS`: The reservation will scale up using all slots available to it. It will use idle slots
	// contributed by other reservations or from unassigned commitments first. If no idle slots are
	// available it will scale up using autoscaling. For example, if maxSlots is 1000, baseline is 200
	// and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
	// reservations, the reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2.
	// if there are 500 idle slots available in other reservations, the reservation will scale up to 1000
	// slots with 200 baseline, 500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
	// available in other reservations, it will scale up to 1000 slots with 200 baseline and 800
	// autoscaling slots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
	// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// Possible values are: `SCALING_MODE_UNSPECIFIED`, `AUTOSCALE_ONLY`, `IDLE_SLOTS_ONLY`, `ALL_SLOTS`.
	ScalingMode pulumi.StringPtrInput
	// The current location of the reservation's secondary replica. This field is only set for
	// reservations using the managed disaster recovery feature. Users can set this in create
	// reservation calls to create a failover reservation or in update reservation calls to convert
	// a non-failover reservation to a failover reservation(or vice versa).
	SecondaryLocation pulumi.StringPtrInput
	// Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
	// unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
	SlotCapacity pulumi.IntPtrInput
}

func (ReservationState) ElementType() reflect.Type {
	return reflect.TypeOf((*reservationState)(nil)).Elem()
}

type reservationArgs struct {
	// The configuration parameters for the auto scaling feature.
	// Structure is documented below.
	Autoscale *ReservationAutoscale `pulumi:"autoscale"`
	// Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
	Concurrency *int `pulumi:"concurrency"`
	// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
	Edition *string `pulumi:"edition"`
	// If false, any query using this reservation will use idle slots from other reservations within
	// the same admin project. If true, a query using this reservation will execute with the slot
	// capacity specified above at most.
	IgnoreIdleSlots *bool `pulumi:"ignoreIdleSlots"`
	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	Location *string `pulumi:"location"`
	// The overall max slots for the reservation, covering slotCapacity (baseline), idle slots
	// (if ignoreIdleSlots is false) and scaled slots. If present, the reservation won't use
	// more than the specified number of slots, even if there is demand and supply (from idle
	// slots). NOTE: capping a reservation's idle slot usage is best effort and its usage may
	// exceed the maxSlots value. However, in terms of autoscale.current_slots (which accounts
	// for the additional added slots), it will never exceed the maxSlots - baseline.
	// This field must be set together with the scalingMode enum value, otherwise the request
	// will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// If the maxSlots and scalingMode are set, the autoscale or autoscale.max_slots field
	// must be unset. Otherwise the request will be rejected with error code
	// google.rpc.Code.INVALID_ARGUMENT. However, the autoscale field may still be in the
	// output. The autopscale.max_slots will always show as 0 and the autoscaler.current_slots
	// will represent the current slots from autoscaler excluding idle slots. For example,
	// if the maxSlots is 1000 and scalingMode is AUTOSCALE_ONLY, then in the output, the
	// autoscaler.max_slots will be 0 and the autoscaler.current_slots may be any value
	// between 0 and 1000.
	// If the maxSlots is 1000, scalingMode is ALL_SLOTS, the baseline is 100 and idle slots
	// usage is 200, then in the output, the autoscaler.max_slots will be 0 and the
	// autoscaler.current_slots will not be higher than 700.
	// If the maxSlots is 1000, scalingMode is IDLE_SLOTS_ONLY, then in the output, the
	// autoscaler field will be null.
	// If the maxSlots and scalingMode are set, then the ignoreIdleSlots field must be
	// aligned with the scalingMode enum value.(See details in ScalingMode comments).
	// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// Please note, the maxSlots is for user to manage the part of slots greater than the
	// baseline. Therefore, we don't allow users to set maxSlots smaller or equal to the
	// baseline as it will not be meaningful. If the field is present and
	// slotCapacity>=maxSlots, requests will be rejected with error code
	// google.rpc.Code.INVALID_ARGUMENT.
	// Please note that if maxSlots is set to 0, we will treat it as unset. Customers can set
	// maxSlots to 0 and set scalingMode to SCALING_MODE_UNSPECIFIED to disable the maxSlots
	// feature.
	MaxSlots *int `pulumi:"maxSlots"`
	// The name of the reservation. This field must only contain alphanumeric characters or dash.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The scaling mode for the reservation. If the field is present but maxSlots is not present,
	// requests will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// Enum values:
	// `SCALING_MODE_UNSPECIFIED`: Default value of ScalingMode.
	// `AUTOSCALE_ONLY`: The reservation will scale up only using slots from autoscaling. It will
	// not use any idle slots even if there may be some available. The upper limit that autoscaling
	// can scale up to will be maxSlots - baseline. For example, if maxSlots is 1000, baseline is 200
	// and customer sets ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots
	// and no idle slots will be used. Please note, in this mode, the ignoreIdleSlots field must be
	// set to true. Otherwise the request will be rejected with error code
	// google.rpc.Code.INVALID_ARGUMENT.
	// `IDLE_SLOTS_ONLY`: The reservation will scale up using only idle slots contributed by other
	// reservations or from unassigned commitments. If no idle slots are available it will not scale
	// up further. If the idle slots which it is using are reclaimed by the contributing reservation(s)
	// it may be forced to scale down. The max idle slots the reservation can be maxSlots - baseline
	// capacity. For example, if maxSlots is 1000, baseline is 200 and customer sets ScalingMode to
	// IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other reservations, the
	// reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
	// 500 idle slots available in other reservations, the reservation will scale up to 700 slots with
	// 200 baseline and 300 idle slots. Please note, in this mode, the reservation might not be able to
	// scale up to maxSlots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
	// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT
	// `ALL_SLOTS`: The reservation will scale up using all slots available to it. It will use idle slots
	// contributed by other reservations or from unassigned commitments first. If no idle slots are
	// available it will scale up using autoscaling. For example, if maxSlots is 1000, baseline is 200
	// and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
	// reservations, the reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2.
	// if there are 500 idle slots available in other reservations, the reservation will scale up to 1000
	// slots with 200 baseline, 500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
	// available in other reservations, it will scale up to 1000 slots with 200 baseline and 800
	// autoscaling slots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
	// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// Possible values are: `SCALING_MODE_UNSPECIFIED`, `AUTOSCALE_ONLY`, `IDLE_SLOTS_ONLY`, `ALL_SLOTS`.
	ScalingMode *string `pulumi:"scalingMode"`
	// The current location of the reservation's secondary replica. This field is only set for
	// reservations using the managed disaster recovery feature. Users can set this in create
	// reservation calls to create a failover reservation or in update reservation calls to convert
	// a non-failover reservation to a failover reservation(or vice versa).
	SecondaryLocation *string `pulumi:"secondaryLocation"`
	// Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
	// unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
	SlotCapacity int `pulumi:"slotCapacity"`
}

// The set of arguments for constructing a Reservation resource.
type ReservationArgs struct {
	// The configuration parameters for the auto scaling feature.
	// Structure is documented below.
	Autoscale ReservationAutoscalePtrInput
	// Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
	Concurrency pulumi.IntPtrInput
	// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
	Edition pulumi.StringPtrInput
	// If false, any query using this reservation will use idle slots from other reservations within
	// the same admin project. If true, a query using this reservation will execute with the slot
	// capacity specified above at most.
	IgnoreIdleSlots pulumi.BoolPtrInput
	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	Location pulumi.StringPtrInput
	// The overall max slots for the reservation, covering slotCapacity (baseline), idle slots
	// (if ignoreIdleSlots is false) and scaled slots. If present, the reservation won't use
	// more than the specified number of slots, even if there is demand and supply (from idle
	// slots). NOTE: capping a reservation's idle slot usage is best effort and its usage may
	// exceed the maxSlots value. However, in terms of autoscale.current_slots (which accounts
	// for the additional added slots), it will never exceed the maxSlots - baseline.
	// This field must be set together with the scalingMode enum value, otherwise the request
	// will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// If the maxSlots and scalingMode are set, the autoscale or autoscale.max_slots field
	// must be unset. Otherwise the request will be rejected with error code
	// google.rpc.Code.INVALID_ARGUMENT. However, the autoscale field may still be in the
	// output. The autopscale.max_slots will always show as 0 and the autoscaler.current_slots
	// will represent the current slots from autoscaler excluding idle slots. For example,
	// if the maxSlots is 1000 and scalingMode is AUTOSCALE_ONLY, then in the output, the
	// autoscaler.max_slots will be 0 and the autoscaler.current_slots may be any value
	// between 0 and 1000.
	// If the maxSlots is 1000, scalingMode is ALL_SLOTS, the baseline is 100 and idle slots
	// usage is 200, then in the output, the autoscaler.max_slots will be 0 and the
	// autoscaler.current_slots will not be higher than 700.
	// If the maxSlots is 1000, scalingMode is IDLE_SLOTS_ONLY, then in the output, the
	// autoscaler field will be null.
	// If the maxSlots and scalingMode are set, then the ignoreIdleSlots field must be
	// aligned with the scalingMode enum value.(See details in ScalingMode comments).
	// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// Please note, the maxSlots is for user to manage the part of slots greater than the
	// baseline. Therefore, we don't allow users to set maxSlots smaller or equal to the
	// baseline as it will not be meaningful. If the field is present and
	// slotCapacity>=maxSlots, requests will be rejected with error code
	// google.rpc.Code.INVALID_ARGUMENT.
	// Please note that if maxSlots is set to 0, we will treat it as unset. Customers can set
	// maxSlots to 0 and set scalingMode to SCALING_MODE_UNSPECIFIED to disable the maxSlots
	// feature.
	MaxSlots pulumi.IntPtrInput
	// The name of the reservation. This field must only contain alphanumeric characters or dash.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The scaling mode for the reservation. If the field is present but maxSlots is not present,
	// requests will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// Enum values:
	// `SCALING_MODE_UNSPECIFIED`: Default value of ScalingMode.
	// `AUTOSCALE_ONLY`: The reservation will scale up only using slots from autoscaling. It will
	// not use any idle slots even if there may be some available. The upper limit that autoscaling
	// can scale up to will be maxSlots - baseline. For example, if maxSlots is 1000, baseline is 200
	// and customer sets ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots
	// and no idle slots will be used. Please note, in this mode, the ignoreIdleSlots field must be
	// set to true. Otherwise the request will be rejected with error code
	// google.rpc.Code.INVALID_ARGUMENT.
	// `IDLE_SLOTS_ONLY`: The reservation will scale up using only idle slots contributed by other
	// reservations or from unassigned commitments. If no idle slots are available it will not scale
	// up further. If the idle slots which it is using are reclaimed by the contributing reservation(s)
	// it may be forced to scale down. The max idle slots the reservation can be maxSlots - baseline
	// capacity. For example, if maxSlots is 1000, baseline is 200 and customer sets ScalingMode to
	// IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other reservations, the
	// reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
	// 500 idle slots available in other reservations, the reservation will scale up to 700 slots with
	// 200 baseline and 300 idle slots. Please note, in this mode, the reservation might not be able to
	// scale up to maxSlots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
	// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT
	// `ALL_SLOTS`: The reservation will scale up using all slots available to it. It will use idle slots
	// contributed by other reservations or from unassigned commitments first. If no idle slots are
	// available it will scale up using autoscaling. For example, if maxSlots is 1000, baseline is 200
	// and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
	// reservations, the reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2.
	// if there are 500 idle slots available in other reservations, the reservation will scale up to 1000
	// slots with 200 baseline, 500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
	// available in other reservations, it will scale up to 1000 slots with 200 baseline and 800
	// autoscaling slots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
	// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
	// Possible values are: `SCALING_MODE_UNSPECIFIED`, `AUTOSCALE_ONLY`, `IDLE_SLOTS_ONLY`, `ALL_SLOTS`.
	ScalingMode pulumi.StringPtrInput
	// The current location of the reservation's secondary replica. This field is only set for
	// reservations using the managed disaster recovery feature. Users can set this in create
	// reservation calls to create a failover reservation or in update reservation calls to convert
	// a non-failover reservation to a failover reservation(or vice versa).
	SecondaryLocation pulumi.StringPtrInput
	// Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
	// unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
	SlotCapacity pulumi.IntInput
}

func (ReservationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reservationArgs)(nil)).Elem()
}

type ReservationInput interface {
	pulumi.Input

	ToReservationOutput() ReservationOutput
	ToReservationOutputWithContext(ctx context.Context) ReservationOutput
}

func (*Reservation) ElementType() reflect.Type {
	return reflect.TypeOf((**Reservation)(nil)).Elem()
}

func (i *Reservation) ToReservationOutput() ReservationOutput {
	return i.ToReservationOutputWithContext(context.Background())
}

func (i *Reservation) ToReservationOutputWithContext(ctx context.Context) ReservationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationOutput)
}

// ReservationArrayInput is an input type that accepts ReservationArray and ReservationArrayOutput values.
// You can construct a concrete instance of `ReservationArrayInput` via:
//
//	ReservationArray{ ReservationArgs{...} }
type ReservationArrayInput interface {
	pulumi.Input

	ToReservationArrayOutput() ReservationArrayOutput
	ToReservationArrayOutputWithContext(context.Context) ReservationArrayOutput
}

type ReservationArray []ReservationInput

func (ReservationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Reservation)(nil)).Elem()
}

func (i ReservationArray) ToReservationArrayOutput() ReservationArrayOutput {
	return i.ToReservationArrayOutputWithContext(context.Background())
}

func (i ReservationArray) ToReservationArrayOutputWithContext(ctx context.Context) ReservationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationArrayOutput)
}

// ReservationMapInput is an input type that accepts ReservationMap and ReservationMapOutput values.
// You can construct a concrete instance of `ReservationMapInput` via:
//
//	ReservationMap{ "key": ReservationArgs{...} }
type ReservationMapInput interface {
	pulumi.Input

	ToReservationMapOutput() ReservationMapOutput
	ToReservationMapOutputWithContext(context.Context) ReservationMapOutput
}

type ReservationMap map[string]ReservationInput

func (ReservationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Reservation)(nil)).Elem()
}

func (i ReservationMap) ToReservationMapOutput() ReservationMapOutput {
	return i.ToReservationMapOutputWithContext(context.Background())
}

func (i ReservationMap) ToReservationMapOutputWithContext(ctx context.Context) ReservationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationMapOutput)
}

type ReservationOutput struct{ *pulumi.OutputState }

func (ReservationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Reservation)(nil)).Elem()
}

func (o ReservationOutput) ToReservationOutput() ReservationOutput {
	return o
}

func (o ReservationOutput) ToReservationOutputWithContext(ctx context.Context) ReservationOutput {
	return o
}

// The configuration parameters for the auto scaling feature.
// Structure is documented below.
func (o ReservationOutput) Autoscale() ReservationAutoscalePtrOutput {
	return o.ApplyT(func(v *Reservation) ReservationAutoscalePtrOutput { return v.Autoscale }).(ReservationAutoscalePtrOutput)
}

// Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
func (o ReservationOutput) Concurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Reservation) pulumi.IntPtrOutput { return v.Concurrency }).(pulumi.IntPtrOutput)
}

// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
func (o ReservationOutput) Edition() pulumi.StringOutput {
	return o.ApplyT(func(v *Reservation) pulumi.StringOutput { return v.Edition }).(pulumi.StringOutput)
}

// If false, any query using this reservation will use idle slots from other reservations within
// the same admin project. If true, a query using this reservation will execute with the slot
// capacity specified above at most.
func (o ReservationOutput) IgnoreIdleSlots() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Reservation) pulumi.BoolPtrOutput { return v.IgnoreIdleSlots }).(pulumi.BoolPtrOutput)
}

// The geographic location where the transfer config should reside.
// Examples: US, EU, asia-northeast1. The default value is US.
func (o ReservationOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Reservation) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The overall max slots for the reservation, covering slotCapacity (baseline), idle slots
// (if ignoreIdleSlots is false) and scaled slots. If present, the reservation won't use
// more than the specified number of slots, even if there is demand and supply (from idle
// slots). NOTE: capping a reservation's idle slot usage is best effort and its usage may
// exceed the maxSlots value. However, in terms of autoscale.current_slots (which accounts
// for the additional added slots), it will never exceed the maxSlots - baseline.
// This field must be set together with the scalingMode enum value, otherwise the request
// will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
// If the maxSlots and scalingMode are set, the autoscale or autoscale.max_slots field
// must be unset. Otherwise the request will be rejected with error code
// google.rpc.Code.INVALID_ARGUMENT. However, the autoscale field may still be in the
// output. The autopscale.max_slots will always show as 0 and the autoscaler.current_slots
// will represent the current slots from autoscaler excluding idle slots. For example,
// if the maxSlots is 1000 and scalingMode is AUTOSCALE_ONLY, then in the output, the
// autoscaler.max_slots will be 0 and the autoscaler.current_slots may be any value
// between 0 and 1000.
// If the maxSlots is 1000, scalingMode is ALL_SLOTS, the baseline is 100 and idle slots
// usage is 200, then in the output, the autoscaler.max_slots will be 0 and the
// autoscaler.current_slots will not be higher than 700.
// If the maxSlots is 1000, scalingMode is IDLE_SLOTS_ONLY, then in the output, the
// autoscaler field will be null.
// If the maxSlots and scalingMode are set, then the ignoreIdleSlots field must be
// aligned with the scalingMode enum value.(See details in ScalingMode comments).
// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
// Please note, the maxSlots is for user to manage the part of slots greater than the
// baseline. Therefore, we don't allow users to set maxSlots smaller or equal to the
// baseline as it will not be meaningful. If the field is present and
// slotCapacity>=maxSlots, requests will be rejected with error code
// google.rpc.Code.INVALID_ARGUMENT.
// Please note that if maxSlots is set to 0, we will treat it as unset. Customers can set
// maxSlots to 0 and set scalingMode to SCALING_MODE_UNSPECIFIED to disable the maxSlots
// feature.
func (o ReservationOutput) MaxSlots() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Reservation) pulumi.IntPtrOutput { return v.MaxSlots }).(pulumi.IntPtrOutput)
}

// The name of the reservation. This field must only contain alphanumeric characters or dash.
func (o ReservationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Reservation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The location where the reservation was originally created. This is set only during the
// failover reservation's creation. All billing charges for the failover reservation will be
// applied to this location.
func (o ReservationOutput) OriginalPrimaryLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Reservation) pulumi.StringOutput { return v.OriginalPrimaryLocation }).(pulumi.StringOutput)
}

// The current location of the reservation's primary replica. This field is only set for
// reservations using the managed disaster recovery feature.
func (o ReservationOutput) PrimaryLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Reservation) pulumi.StringOutput { return v.PrimaryLocation }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ReservationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Reservation) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The Disaster Recovery(DR) replication status of the reservation. This is only available for
// the primary replicas of DR/failover reservations and provides information about the both the
// staleness of the secondary and the last error encountered while trying to replicate changes
// from the primary to the secondary. If this field is blank, it means that the reservation is
// either not a DR reservation or the reservation is a DR secondary or that any replication
// operations on the reservation have succeeded.
// Structure is documented below.
func (o ReservationOutput) ReplicationStatuses() ReservationReplicationStatusArrayOutput {
	return o.ApplyT(func(v *Reservation) ReservationReplicationStatusArrayOutput { return v.ReplicationStatuses }).(ReservationReplicationStatusArrayOutput)
}

// The scaling mode for the reservation. If the field is present but maxSlots is not present,
// requests will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
// Enum values:
// `SCALING_MODE_UNSPECIFIED`: Default value of ScalingMode.
// `AUTOSCALE_ONLY`: The reservation will scale up only using slots from autoscaling. It will
// not use any idle slots even if there may be some available. The upper limit that autoscaling
// can scale up to will be maxSlots - baseline. For example, if maxSlots is 1000, baseline is 200
// and customer sets ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots
// and no idle slots will be used. Please note, in this mode, the ignoreIdleSlots field must be
// set to true. Otherwise the request will be rejected with error code
// google.rpc.Code.INVALID_ARGUMENT.
// `IDLE_SLOTS_ONLY`: The reservation will scale up using only idle slots contributed by other
// reservations or from unassigned commitments. If no idle slots are available it will not scale
// up further. If the idle slots which it is using are reclaimed by the contributing reservation(s)
// it may be forced to scale down. The max idle slots the reservation can be maxSlots - baseline
// capacity. For example, if maxSlots is 1000, baseline is 200 and customer sets ScalingMode to
// IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other reservations, the
// reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
// 500 idle slots available in other reservations, the reservation will scale up to 700 slots with
// 200 baseline and 300 idle slots. Please note, in this mode, the reservation might not be able to
// scale up to maxSlots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT
// `ALL_SLOTS`: The reservation will scale up using all slots available to it. It will use idle slots
// contributed by other reservations or from unassigned commitments first. If no idle slots are
// available it will scale up using autoscaling. For example, if maxSlots is 1000, baseline is 200
// and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
// reservations, the reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2.
// if there are 500 idle slots available in other reservations, the reservation will scale up to 1000
// slots with 200 baseline, 500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
// available in other reservations, it will scale up to 1000 slots with 200 baseline and 800
// autoscaling slots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
// Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
// Possible values are: `SCALING_MODE_UNSPECIFIED`, `AUTOSCALE_ONLY`, `IDLE_SLOTS_ONLY`, `ALL_SLOTS`.
func (o ReservationOutput) ScalingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Reservation) pulumi.StringPtrOutput { return v.ScalingMode }).(pulumi.StringPtrOutput)
}

// The current location of the reservation's secondary replica. This field is only set for
// reservations using the managed disaster recovery feature. Users can set this in create
// reservation calls to create a failover reservation or in update reservation calls to convert
// a non-failover reservation to a failover reservation(or vice versa).
func (o ReservationOutput) SecondaryLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Reservation) pulumi.StringPtrOutput { return v.SecondaryLocation }).(pulumi.StringPtrOutput)
}

// Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
// unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
func (o ReservationOutput) SlotCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *Reservation) pulumi.IntOutput { return v.SlotCapacity }).(pulumi.IntOutput)
}

type ReservationArrayOutput struct{ *pulumi.OutputState }

func (ReservationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Reservation)(nil)).Elem()
}

func (o ReservationArrayOutput) ToReservationArrayOutput() ReservationArrayOutput {
	return o
}

func (o ReservationArrayOutput) ToReservationArrayOutputWithContext(ctx context.Context) ReservationArrayOutput {
	return o
}

func (o ReservationArrayOutput) Index(i pulumi.IntInput) ReservationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Reservation {
		return vs[0].([]*Reservation)[vs[1].(int)]
	}).(ReservationOutput)
}

type ReservationMapOutput struct{ *pulumi.OutputState }

func (ReservationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Reservation)(nil)).Elem()
}

func (o ReservationMapOutput) ToReservationMapOutput() ReservationMapOutput {
	return o
}

func (o ReservationMapOutput) ToReservationMapOutputWithContext(ctx context.Context) ReservationMapOutput {
	return o
}

func (o ReservationMapOutput) MapIndex(k pulumi.StringInput) ReservationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Reservation {
		return vs[0].(map[string]*Reservation)[vs[1].(string)]
	}).(ReservationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReservationInput)(nil)).Elem(), &Reservation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservationArrayInput)(nil)).Elem(), ReservationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservationMapInput)(nil)).Elem(), ReservationMap{})
	pulumi.RegisterOutputType(ReservationOutput{})
	pulumi.RegisterOutputType(ReservationArrayOutput{})
	pulumi.RegisterOutputType(ReservationMapOutput{})
}
