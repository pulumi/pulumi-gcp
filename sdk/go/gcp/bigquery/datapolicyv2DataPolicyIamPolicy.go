// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for BigQuery Data Policy V2 DataPolicy. Each of these resources serves a different use case:
//
// * `bigquery.Datapolicyv2DataPolicyIamPolicy`: Authoritative. Sets the IAM policy for the datapolicy and replaces any existing policy already attached.
// * `bigquery.Datapolicyv2DataPolicyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the datapolicy are preserved.
// * `bigquery.Datapolicyv2DataPolicyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the datapolicy are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `bigquery.Datapolicyv2DataPolicyIamPolicy`: Retrieves the IAM policy for the datapolicy
//
// > **Note:** `bigquery.Datapolicyv2DataPolicyIamPolicy` **cannot** be used in conjunction with `bigquery.Datapolicyv2DataPolicyIamBinding` and `bigquery.Datapolicyv2DataPolicyIamMember` or they will fight over what your policy should be.
//
// > **Note:** `bigquery.Datapolicyv2DataPolicyIamBinding` resources **can be** used in conjunction with `bigquery.Datapolicyv2DataPolicyIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## bigquery.Datapolicyv2DataPolicyIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewDatapolicyv2DataPolicyIamPolicy(ctx, "policy", &bigquery.Datapolicyv2DataPolicyIamPolicyArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				PolicyData:   pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## bigquery.Datapolicyv2DataPolicyIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewDatapolicyv2DataPolicyIamBinding(ctx, "binding", &bigquery.Datapolicyv2DataPolicyIamBindingArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				Role:         pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## bigquery.Datapolicyv2DataPolicyIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewDatapolicyv2DataPolicyIamMember(ctx, "member", &bigquery.Datapolicyv2DataPolicyIamMemberArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				Role:         pulumi.String("roles/viewer"),
//				Member:       pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for BigQuery Data Policy V2 DataPolicy
//
// Three different resources help you manage your IAM policy for BigQuery Data Policy V2 DataPolicy. Each of these resources serves a different use case:
//
// * `bigquery.Datapolicyv2DataPolicyIamPolicy`: Authoritative. Sets the IAM policy for the datapolicy and replaces any existing policy already attached.
// * `bigquery.Datapolicyv2DataPolicyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the datapolicy are preserved.
// * `bigquery.Datapolicyv2DataPolicyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the datapolicy are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `bigquery.Datapolicyv2DataPolicyIamPolicy`: Retrieves the IAM policy for the datapolicy
//
// > **Note:** `bigquery.Datapolicyv2DataPolicyIamPolicy` **cannot** be used in conjunction with `bigquery.Datapolicyv2DataPolicyIamBinding` and `bigquery.Datapolicyv2DataPolicyIamMember` or they will fight over what your policy should be.
//
// > **Note:** `bigquery.Datapolicyv2DataPolicyIamBinding` resources **can be** used in conjunction with `bigquery.Datapolicyv2DataPolicyIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## bigquery.Datapolicyv2DataPolicyIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewDatapolicyv2DataPolicyIamPolicy(ctx, "policy", &bigquery.Datapolicyv2DataPolicyIamPolicyArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				PolicyData:   pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## bigquery.Datapolicyv2DataPolicyIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewDatapolicyv2DataPolicyIamBinding(ctx, "binding", &bigquery.Datapolicyv2DataPolicyIamBindingArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				Role:         pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## bigquery.Datapolicyv2DataPolicyIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewDatapolicyv2DataPolicyIamMember(ctx, "member", &bigquery.Datapolicyv2DataPolicyIamMemberArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				Role:         pulumi.String("roles/viewer"),
//				Member:       pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}}
//
// * {{project}}/{{location}}/{{data_policy_id}}
//
// * {{location}}/{{data_policy_id}}
//
// * {{data_policy_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// BigQuery Data Policy V2 datapolicy IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:bigquery/datapolicyv2DataPolicyIamPolicy:Datapolicyv2DataPolicyIamPolicy editor "projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:bigquery/datapolicyv2DataPolicyIamPolicy:Datapolicyv2DataPolicyIamPolicy editor "projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:bigquery/datapolicyv2DataPolicyIamPolicy:Datapolicyv2DataPolicyIamPolicy editor projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type Datapolicyv2DataPolicyIamPolicy struct {
	pulumi.CustomResourceState

	// Used to find the parent resource to bind the IAM policy to
	DataPolicyId pulumi.StringOutput `pulumi:"dataPolicyId"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewDatapolicyv2DataPolicyIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewDatapolicyv2DataPolicyIamPolicy(ctx *pulumi.Context,
	name string, args *Datapolicyv2DataPolicyIamPolicyArgs, opts ...pulumi.ResourceOption) (*Datapolicyv2DataPolicyIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'DataPolicyId'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Datapolicyv2DataPolicyIamPolicy
	err := ctx.RegisterResource("gcp:bigquery/datapolicyv2DataPolicyIamPolicy:Datapolicyv2DataPolicyIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatapolicyv2DataPolicyIamPolicy gets an existing Datapolicyv2DataPolicyIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatapolicyv2DataPolicyIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Datapolicyv2DataPolicyIamPolicyState, opts ...pulumi.ResourceOption) (*Datapolicyv2DataPolicyIamPolicy, error) {
	var resource Datapolicyv2DataPolicyIamPolicy
	err := ctx.ReadResource("gcp:bigquery/datapolicyv2DataPolicyIamPolicy:Datapolicyv2DataPolicyIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Datapolicyv2DataPolicyIamPolicy resources.
type datapolicyv2DataPolicyIamPolicyState struct {
	// Used to find the parent resource to bind the IAM policy to
	DataPolicyId *string `pulumi:"dataPolicyId"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

type Datapolicyv2DataPolicyIamPolicyState struct {
	// Used to find the parent resource to bind the IAM policy to
	DataPolicyId pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (Datapolicyv2DataPolicyIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*datapolicyv2DataPolicyIamPolicyState)(nil)).Elem()
}

type datapolicyv2DataPolicyIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	DataPolicyId string `pulumi:"dataPolicyId"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Datapolicyv2DataPolicyIamPolicy resource.
type Datapolicyv2DataPolicyIamPolicyArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	DataPolicyId pulumi.StringInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// The policy data generated by
	// a `organizations.getIAMPolicy` data source.
	PolicyData pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
}

func (Datapolicyv2DataPolicyIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datapolicyv2DataPolicyIamPolicyArgs)(nil)).Elem()
}

type Datapolicyv2DataPolicyIamPolicyInput interface {
	pulumi.Input

	ToDatapolicyv2DataPolicyIamPolicyOutput() Datapolicyv2DataPolicyIamPolicyOutput
	ToDatapolicyv2DataPolicyIamPolicyOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamPolicyOutput
}

func (*Datapolicyv2DataPolicyIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**Datapolicyv2DataPolicyIamPolicy)(nil)).Elem()
}

func (i *Datapolicyv2DataPolicyIamPolicy) ToDatapolicyv2DataPolicyIamPolicyOutput() Datapolicyv2DataPolicyIamPolicyOutput {
	return i.ToDatapolicyv2DataPolicyIamPolicyOutputWithContext(context.Background())
}

func (i *Datapolicyv2DataPolicyIamPolicy) ToDatapolicyv2DataPolicyIamPolicyOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Datapolicyv2DataPolicyIamPolicyOutput)
}

// Datapolicyv2DataPolicyIamPolicyArrayInput is an input type that accepts Datapolicyv2DataPolicyIamPolicyArray and Datapolicyv2DataPolicyIamPolicyArrayOutput values.
// You can construct a concrete instance of `Datapolicyv2DataPolicyIamPolicyArrayInput` via:
//
//	Datapolicyv2DataPolicyIamPolicyArray{ Datapolicyv2DataPolicyIamPolicyArgs{...} }
type Datapolicyv2DataPolicyIamPolicyArrayInput interface {
	pulumi.Input

	ToDatapolicyv2DataPolicyIamPolicyArrayOutput() Datapolicyv2DataPolicyIamPolicyArrayOutput
	ToDatapolicyv2DataPolicyIamPolicyArrayOutputWithContext(context.Context) Datapolicyv2DataPolicyIamPolicyArrayOutput
}

type Datapolicyv2DataPolicyIamPolicyArray []Datapolicyv2DataPolicyIamPolicyInput

func (Datapolicyv2DataPolicyIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datapolicyv2DataPolicyIamPolicy)(nil)).Elem()
}

func (i Datapolicyv2DataPolicyIamPolicyArray) ToDatapolicyv2DataPolicyIamPolicyArrayOutput() Datapolicyv2DataPolicyIamPolicyArrayOutput {
	return i.ToDatapolicyv2DataPolicyIamPolicyArrayOutputWithContext(context.Background())
}

func (i Datapolicyv2DataPolicyIamPolicyArray) ToDatapolicyv2DataPolicyIamPolicyArrayOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Datapolicyv2DataPolicyIamPolicyArrayOutput)
}

// Datapolicyv2DataPolicyIamPolicyMapInput is an input type that accepts Datapolicyv2DataPolicyIamPolicyMap and Datapolicyv2DataPolicyIamPolicyMapOutput values.
// You can construct a concrete instance of `Datapolicyv2DataPolicyIamPolicyMapInput` via:
//
//	Datapolicyv2DataPolicyIamPolicyMap{ "key": Datapolicyv2DataPolicyIamPolicyArgs{...} }
type Datapolicyv2DataPolicyIamPolicyMapInput interface {
	pulumi.Input

	ToDatapolicyv2DataPolicyIamPolicyMapOutput() Datapolicyv2DataPolicyIamPolicyMapOutput
	ToDatapolicyv2DataPolicyIamPolicyMapOutputWithContext(context.Context) Datapolicyv2DataPolicyIamPolicyMapOutput
}

type Datapolicyv2DataPolicyIamPolicyMap map[string]Datapolicyv2DataPolicyIamPolicyInput

func (Datapolicyv2DataPolicyIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datapolicyv2DataPolicyIamPolicy)(nil)).Elem()
}

func (i Datapolicyv2DataPolicyIamPolicyMap) ToDatapolicyv2DataPolicyIamPolicyMapOutput() Datapolicyv2DataPolicyIamPolicyMapOutput {
	return i.ToDatapolicyv2DataPolicyIamPolicyMapOutputWithContext(context.Background())
}

func (i Datapolicyv2DataPolicyIamPolicyMap) ToDatapolicyv2DataPolicyIamPolicyMapOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Datapolicyv2DataPolicyIamPolicyMapOutput)
}

type Datapolicyv2DataPolicyIamPolicyOutput struct{ *pulumi.OutputState }

func (Datapolicyv2DataPolicyIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Datapolicyv2DataPolicyIamPolicy)(nil)).Elem()
}

func (o Datapolicyv2DataPolicyIamPolicyOutput) ToDatapolicyv2DataPolicyIamPolicyOutput() Datapolicyv2DataPolicyIamPolicyOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamPolicyOutput) ToDatapolicyv2DataPolicyIamPolicyOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamPolicyOutput {
	return o
}

// Used to find the parent resource to bind the IAM policy to
func (o Datapolicyv2DataPolicyIamPolicyOutput) DataPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamPolicy) pulumi.StringOutput { return v.DataPolicyId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o Datapolicyv2DataPolicyIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o Datapolicyv2DataPolicyIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The policy data generated by
// a `organizations.getIAMPolicy` data source.
func (o Datapolicyv2DataPolicyIamPolicyOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamPolicy) pulumi.StringOutput { return v.PolicyData }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o Datapolicyv2DataPolicyIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type Datapolicyv2DataPolicyIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (Datapolicyv2DataPolicyIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datapolicyv2DataPolicyIamPolicy)(nil)).Elem()
}

func (o Datapolicyv2DataPolicyIamPolicyArrayOutput) ToDatapolicyv2DataPolicyIamPolicyArrayOutput() Datapolicyv2DataPolicyIamPolicyArrayOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamPolicyArrayOutput) ToDatapolicyv2DataPolicyIamPolicyArrayOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamPolicyArrayOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamPolicyArrayOutput) Index(i pulumi.IntInput) Datapolicyv2DataPolicyIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Datapolicyv2DataPolicyIamPolicy {
		return vs[0].([]*Datapolicyv2DataPolicyIamPolicy)[vs[1].(int)]
	}).(Datapolicyv2DataPolicyIamPolicyOutput)
}

type Datapolicyv2DataPolicyIamPolicyMapOutput struct{ *pulumi.OutputState }

func (Datapolicyv2DataPolicyIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datapolicyv2DataPolicyIamPolicy)(nil)).Elem()
}

func (o Datapolicyv2DataPolicyIamPolicyMapOutput) ToDatapolicyv2DataPolicyIamPolicyMapOutput() Datapolicyv2DataPolicyIamPolicyMapOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamPolicyMapOutput) ToDatapolicyv2DataPolicyIamPolicyMapOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamPolicyMapOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamPolicyMapOutput) MapIndex(k pulumi.StringInput) Datapolicyv2DataPolicyIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Datapolicyv2DataPolicyIamPolicy {
		return vs[0].(map[string]*Datapolicyv2DataPolicyIamPolicy)[vs[1].(string)]
	}).(Datapolicyv2DataPolicyIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Datapolicyv2DataPolicyIamPolicyInput)(nil)).Elem(), &Datapolicyv2DataPolicyIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*Datapolicyv2DataPolicyIamPolicyArrayInput)(nil)).Elem(), Datapolicyv2DataPolicyIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Datapolicyv2DataPolicyIamPolicyMapInput)(nil)).Elem(), Datapolicyv2DataPolicyIamPolicyMap{})
	pulumi.RegisterOutputType(Datapolicyv2DataPolicyIamPolicyOutput{})
	pulumi.RegisterOutputType(Datapolicyv2DataPolicyIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(Datapolicyv2DataPolicyIamPolicyMapOutput{})
}
