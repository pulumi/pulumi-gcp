// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The BigqueryReservation Assignment resource
//
// ## Example Usage
// ### Basic
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			basic, err := bigquery.NewReservation(ctx, "basic", &bigquery.ReservationArgs{
//				Project:         pulumi.String("my-project-name"),
//				Location:        pulumi.String("us-central1"),
//				SlotCapacity:    pulumi.Int(0),
//				IgnoreIdleSlots: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewReservationAssignment(ctx, "primary", &bigquery.ReservationAssignmentArgs{
//				Assignee:    pulumi.String("projects/my-project-name"),
//				JobType:     pulumi.String("PIPELINE"),
//				Reservation: basic.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Assignment can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:bigquery/reservationAssignment:ReservationAssignment default projects/{{project}}/locations/{{location}}/reservations/{{reservation}}/assignments/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:bigquery/reservationAssignment:ReservationAssignment default {{project}}/{{location}}/{{reservation}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:bigquery/reservationAssignment:ReservationAssignment default {{location}}/{{reservation}}/{{name}}
//
// ```
type ReservationAssignment struct {
	pulumi.CustomResourceState

	// The resource which will use the reservation. E.g. projects/myproject, folders/123, organizations/456.
	Assignee pulumi.StringOutput `pulumi:"assignee"`
	// Types of job, which could be specified when using the reservation. Possible values: JOB_TYPE_UNSPECIFIED, PIPELINE, QUERY
	JobType pulumi.StringOutput `pulumi:"jobType"`
	// The location for the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// Output only. The resource name of the assignment.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project for the resource
	Project pulumi.StringOutput `pulumi:"project"`
	// The reservation for the resource
	Reservation pulumi.StringOutput `pulumi:"reservation"`
	// Assignment will remain in PENDING state if no active capacity commitment is present. It will become ACTIVE when some
	// capacity commitment becomes active. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE
	State pulumi.StringOutput `pulumi:"state"`
}

// NewReservationAssignment registers a new resource with the given unique name, arguments, and options.
func NewReservationAssignment(ctx *pulumi.Context,
	name string, args *ReservationAssignmentArgs, opts ...pulumi.ResourceOption) (*ReservationAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Assignee == nil {
		return nil, errors.New("invalid value for required argument 'Assignee'")
	}
	if args.JobType == nil {
		return nil, errors.New("invalid value for required argument 'JobType'")
	}
	if args.Reservation == nil {
		return nil, errors.New("invalid value for required argument 'Reservation'")
	}
	var resource ReservationAssignment
	err := ctx.RegisterResource("gcp:bigquery/reservationAssignment:ReservationAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReservationAssignment gets an existing ReservationAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservationAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReservationAssignmentState, opts ...pulumi.ResourceOption) (*ReservationAssignment, error) {
	var resource ReservationAssignment
	err := ctx.ReadResource("gcp:bigquery/reservationAssignment:ReservationAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReservationAssignment resources.
type reservationAssignmentState struct {
	// The resource which will use the reservation. E.g. projects/myproject, folders/123, organizations/456.
	Assignee *string `pulumi:"assignee"`
	// Types of job, which could be specified when using the reservation. Possible values: JOB_TYPE_UNSPECIFIED, PIPELINE, QUERY
	JobType *string `pulumi:"jobType"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// Output only. The resource name of the assignment.
	Name *string `pulumi:"name"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// The reservation for the resource
	Reservation *string `pulumi:"reservation"`
	// Assignment will remain in PENDING state if no active capacity commitment is present. It will become ACTIVE when some
	// capacity commitment becomes active. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE
	State *string `pulumi:"state"`
}

type ReservationAssignmentState struct {
	// The resource which will use the reservation. E.g. projects/myproject, folders/123, organizations/456.
	Assignee pulumi.StringPtrInput
	// Types of job, which could be specified when using the reservation. Possible values: JOB_TYPE_UNSPECIFIED, PIPELINE, QUERY
	JobType pulumi.StringPtrInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// Output only. The resource name of the assignment.
	Name pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// The reservation for the resource
	Reservation pulumi.StringPtrInput
	// Assignment will remain in PENDING state if no active capacity commitment is present. It will become ACTIVE when some
	// capacity commitment becomes active. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE
	State pulumi.StringPtrInput
}

func (ReservationAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*reservationAssignmentState)(nil)).Elem()
}

type reservationAssignmentArgs struct {
	// The resource which will use the reservation. E.g. projects/myproject, folders/123, organizations/456.
	Assignee string `pulumi:"assignee"`
	// Types of job, which could be specified when using the reservation. Possible values: JOB_TYPE_UNSPECIFIED, PIPELINE, QUERY
	JobType string `pulumi:"jobType"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// The project for the resource
	Project *string `pulumi:"project"`
	// The reservation for the resource
	Reservation string `pulumi:"reservation"`
}

// The set of arguments for constructing a ReservationAssignment resource.
type ReservationAssignmentArgs struct {
	// The resource which will use the reservation. E.g. projects/myproject, folders/123, organizations/456.
	Assignee pulumi.StringInput
	// Types of job, which could be specified when using the reservation. Possible values: JOB_TYPE_UNSPECIFIED, PIPELINE, QUERY
	JobType pulumi.StringInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// The project for the resource
	Project pulumi.StringPtrInput
	// The reservation for the resource
	Reservation pulumi.StringInput
}

func (ReservationAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reservationAssignmentArgs)(nil)).Elem()
}

type ReservationAssignmentInput interface {
	pulumi.Input

	ToReservationAssignmentOutput() ReservationAssignmentOutput
	ToReservationAssignmentOutputWithContext(ctx context.Context) ReservationAssignmentOutput
}

func (*ReservationAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationAssignment)(nil)).Elem()
}

func (i *ReservationAssignment) ToReservationAssignmentOutput() ReservationAssignmentOutput {
	return i.ToReservationAssignmentOutputWithContext(context.Background())
}

func (i *ReservationAssignment) ToReservationAssignmentOutputWithContext(ctx context.Context) ReservationAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAssignmentOutput)
}

// ReservationAssignmentArrayInput is an input type that accepts ReservationAssignmentArray and ReservationAssignmentArrayOutput values.
// You can construct a concrete instance of `ReservationAssignmentArrayInput` via:
//
//	ReservationAssignmentArray{ ReservationAssignmentArgs{...} }
type ReservationAssignmentArrayInput interface {
	pulumi.Input

	ToReservationAssignmentArrayOutput() ReservationAssignmentArrayOutput
	ToReservationAssignmentArrayOutputWithContext(context.Context) ReservationAssignmentArrayOutput
}

type ReservationAssignmentArray []ReservationAssignmentInput

func (ReservationAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReservationAssignment)(nil)).Elem()
}

func (i ReservationAssignmentArray) ToReservationAssignmentArrayOutput() ReservationAssignmentArrayOutput {
	return i.ToReservationAssignmentArrayOutputWithContext(context.Background())
}

func (i ReservationAssignmentArray) ToReservationAssignmentArrayOutputWithContext(ctx context.Context) ReservationAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAssignmentArrayOutput)
}

// ReservationAssignmentMapInput is an input type that accepts ReservationAssignmentMap and ReservationAssignmentMapOutput values.
// You can construct a concrete instance of `ReservationAssignmentMapInput` via:
//
//	ReservationAssignmentMap{ "key": ReservationAssignmentArgs{...} }
type ReservationAssignmentMapInput interface {
	pulumi.Input

	ToReservationAssignmentMapOutput() ReservationAssignmentMapOutput
	ToReservationAssignmentMapOutputWithContext(context.Context) ReservationAssignmentMapOutput
}

type ReservationAssignmentMap map[string]ReservationAssignmentInput

func (ReservationAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReservationAssignment)(nil)).Elem()
}

func (i ReservationAssignmentMap) ToReservationAssignmentMapOutput() ReservationAssignmentMapOutput {
	return i.ToReservationAssignmentMapOutputWithContext(context.Background())
}

func (i ReservationAssignmentMap) ToReservationAssignmentMapOutputWithContext(ctx context.Context) ReservationAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAssignmentMapOutput)
}

type ReservationAssignmentOutput struct{ *pulumi.OutputState }

func (ReservationAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationAssignment)(nil)).Elem()
}

func (o ReservationAssignmentOutput) ToReservationAssignmentOutput() ReservationAssignmentOutput {
	return o
}

func (o ReservationAssignmentOutput) ToReservationAssignmentOutputWithContext(ctx context.Context) ReservationAssignmentOutput {
	return o
}

// The resource which will use the reservation. E.g. projects/myproject, folders/123, organizations/456.
func (o ReservationAssignmentOutput) Assignee() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservationAssignment) pulumi.StringOutput { return v.Assignee }).(pulumi.StringOutput)
}

// Types of job, which could be specified when using the reservation. Possible values: JOB_TYPE_UNSPECIFIED, PIPELINE, QUERY
func (o ReservationAssignmentOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservationAssignment) pulumi.StringOutput { return v.JobType }).(pulumi.StringOutput)
}

// The location for the resource
func (o ReservationAssignmentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservationAssignment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Output only. The resource name of the assignment.
func (o ReservationAssignmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservationAssignment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project for the resource
func (o ReservationAssignmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservationAssignment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The reservation for the resource
func (o ReservationAssignmentOutput) Reservation() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservationAssignment) pulumi.StringOutput { return v.Reservation }).(pulumi.StringOutput)
}

// Assignment will remain in PENDING state if no active capacity commitment is present. It will become ACTIVE when some
// capacity commitment becomes active. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE
func (o ReservationAssignmentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservationAssignment) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type ReservationAssignmentArrayOutput struct{ *pulumi.OutputState }

func (ReservationAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReservationAssignment)(nil)).Elem()
}

func (o ReservationAssignmentArrayOutput) ToReservationAssignmentArrayOutput() ReservationAssignmentArrayOutput {
	return o
}

func (o ReservationAssignmentArrayOutput) ToReservationAssignmentArrayOutputWithContext(ctx context.Context) ReservationAssignmentArrayOutput {
	return o
}

func (o ReservationAssignmentArrayOutput) Index(i pulumi.IntInput) ReservationAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReservationAssignment {
		return vs[0].([]*ReservationAssignment)[vs[1].(int)]
	}).(ReservationAssignmentOutput)
}

type ReservationAssignmentMapOutput struct{ *pulumi.OutputState }

func (ReservationAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReservationAssignment)(nil)).Elem()
}

func (o ReservationAssignmentMapOutput) ToReservationAssignmentMapOutput() ReservationAssignmentMapOutput {
	return o
}

func (o ReservationAssignmentMapOutput) ToReservationAssignmentMapOutputWithContext(ctx context.Context) ReservationAssignmentMapOutput {
	return o
}

func (o ReservationAssignmentMapOutput) MapIndex(k pulumi.StringInput) ReservationAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReservationAssignment {
		return vs[0].(map[string]*ReservationAssignment)[vs[1].(string)]
	}).(ReservationAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReservationAssignmentInput)(nil)).Elem(), &ReservationAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservationAssignmentArrayInput)(nil)).Elem(), ReservationAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservationAssignmentMapInput)(nil)).Elem(), ReservationAssignmentMap{})
	pulumi.RegisterOutputType(ReservationAssignmentOutput{})
	pulumi.RegisterOutputType(ReservationAssignmentArrayOutput{})
	pulumi.RegisterOutputType(ReservationAssignmentMapOutput{})
}
