// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// BigQuery Data Policy
//
// To get more information about DataPolicy, see:
//
// * [API documentation](https://cloud.google.com/bigquery/docs/reference/bigquerydatapolicy/rest/v2/projects.locations.dataPolicies)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/bigquery/docs/column-data-masking-intro)
//
// ## Example Usage
//
// ### Bigquery Datapolicyv2 Datapolicy Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewDatapolicyv2DataPolicy(ctx, "basic_data_policy", &bigquery.Datapolicyv2DataPolicyArgs{
//				Location:       pulumi.String("us-central1"),
//				DataPolicyType: pulumi.String("RAW_DATA_ACCESS_POLICY"),
//				DataPolicyId:   pulumi.String("basic_data_policy"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Bigquery Datapolicyv2 Datapolicy Predefined Masking
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewDatapolicyv2DataPolicy(ctx, "predefined_masking_data_policy", &bigquery.Datapolicyv2DataPolicyArgs{
//				Location:       pulumi.String("us-central1"),
//				DataPolicyType: pulumi.String("DATA_MASKING_POLICY"),
//				DataMaskingPolicy: &bigquery.Datapolicyv2DataPolicyDataMaskingPolicyArgs{
//					PredefinedExpression: pulumi.String("SHA256"),
//				},
//				DataPolicyId: pulumi.String("predefined_masking_data_policy"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Bigquery Datapolicyv2 Datapolicy Routine
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := bigquery.NewDataset(ctx, "test", &bigquery.DatasetArgs{
//				DatasetId: pulumi.String("dataset_id"),
//				Location:  pulumi.String("us-central1"),
//			})
//			if err != nil {
//				return err
//			}
//			customMaskingRoutine, err := bigquery.NewRoutine(ctx, "custom_masking_routine", &bigquery.RoutineArgs{
//				DatasetId:          test.DatasetId,
//				RoutineId:          pulumi.String("custom_masking_routine"),
//				RoutineType:        pulumi.String("SCALAR_FUNCTION"),
//				Language:           pulumi.String("SQL"),
//				DataGovernanceType: pulumi.String("DATA_MASKING"),
//				DefinitionBody:     pulumi.String("SAFE.REGEXP_REPLACE(ssn, '[0-9]', 'X')"),
//				ReturnType:         pulumi.String("{\"typeKind\" :  \"STRING\"}"),
//				Arguments: bigquery.RoutineArgumentArray{
//					&bigquery.RoutineArgumentArgs{
//						Name:     pulumi.String("ssn"),
//						DataType: pulumi.String("{\"typeKind\" :  \"STRING\"}"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewDatapolicyv2DataPolicy(ctx, "routine_data_policy", &bigquery.Datapolicyv2DataPolicyArgs{
//				Location:       pulumi.String("us-central1"),
//				DataPolicyId:   pulumi.String("routine_data_policy"),
//				DataPolicyType: pulumi.String("DATA_MASKING_POLICY"),
//				DataMaskingPolicy: &bigquery.Datapolicyv2DataPolicyDataMaskingPolicyArgs{
//					Routine: customMaskingRoutine.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Bigquery Datapolicyv2 Datapolicy Withgrantees
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewDatapolicyv2DataPolicy(ctx, "data_policy_with_grantees", &bigquery.Datapolicyv2DataPolicyArgs{
//				Location:       pulumi.String("us-central1"),
//				DataPolicyType: pulumi.String("RAW_DATA_ACCESS_POLICY"),
//				Grantees: pulumi.StringArray{
//					pulumi.String("principal://goog/subject/jane@example.com"),
//				},
//				DataPolicyId: pulumi.String("data_policy_with_grantees"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DataPolicy can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}}`
//
// * `{{project}}/{{location}}/{{data_policy_id}}`
//
// * `{{location}}/{{data_policy_id}}`
//
// When using the `pulumi import` command, DataPolicy can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:bigquery/datapolicyv2DataPolicy:Datapolicyv2DataPolicy default projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}}
// ```
//
// ```sh
// $ pulumi import gcp:bigquery/datapolicyv2DataPolicy:Datapolicyv2DataPolicy default {{project}}/{{location}}/{{data_policy_id}}
// ```
//
// ```sh
// $ pulumi import gcp:bigquery/datapolicyv2DataPolicy:Datapolicyv2DataPolicy default {{location}}/{{data_policy_id}}
// ```
type Datapolicyv2DataPolicy struct {
	pulumi.CustomResourceState

	// The policy used to specify data masking rule.
	// Structure is documented below.
	DataMaskingPolicy Datapolicyv2DataPolicyDataMaskingPolicyPtrOutput `pulumi:"dataMaskingPolicy"`
	// User-assigned (human readable) ID of the data policy that needs to be
	// unique within a project. Used as {data_policy_id} in part of the resource
	// name.
	DataPolicyId pulumi.StringOutput `pulumi:"dataPolicyId"`
	// Type of data policy.
	// Possible values:
	// DATA_MASKING_POLICY
	// RAW_DATA_ACCESS_POLICY
	// COLUMN_LEVEL_SECURITY_POLICY
	DataPolicyType pulumi.StringOutput `pulumi:"dataPolicyType"`
	// The etag for this Data Policy.
	// This field is used for UpdateDataPolicy calls. If Data Policy exists, this
	// field is required and must match the server's etag. It will also be
	// populated in the response of GetDataPolicy, CreateDataPolicy, and
	// UpdateDataPolicy calls.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The list of IAM principals that have Fine Grained Access to the underlying
	// data goverened by this data policy.
	// Uses the [IAM V2 principal
	// syntax](https://cloud.google.com/iam/docs/principal-identifiers#v2) Only
	// supports principal types users, groups, serviceaccounts, cloudidentity.
	// This field is supported in V2 Data Policy only. In case of V1 data policies
	// (i.e. verion = 1 and policyTag is set), this field is not populated.
	Grantees pulumi.StringArrayOutput `pulumi:"grantees"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. Resource name of this data policy, in the format of
	// `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Policy tag resource name, in the format of
	// `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.
	// policyTag is supported only for V1 data policies.
	PolicyTag pulumi.StringOutput `pulumi:"policyTag"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The version of the Data Policy resource.
	// Possible values:
	// V1
	// V2
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewDatapolicyv2DataPolicy registers a new resource with the given unique name, arguments, and options.
func NewDatapolicyv2DataPolicy(ctx *pulumi.Context,
	name string, args *Datapolicyv2DataPolicyArgs, opts ...pulumi.ResourceOption) (*Datapolicyv2DataPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'DataPolicyId'")
	}
	if args.DataPolicyType == nil {
		return nil, errors.New("invalid value for required argument 'DataPolicyType'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Datapolicyv2DataPolicy
	err := ctx.RegisterResource("gcp:bigquery/datapolicyv2DataPolicy:Datapolicyv2DataPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatapolicyv2DataPolicy gets an existing Datapolicyv2DataPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatapolicyv2DataPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Datapolicyv2DataPolicyState, opts ...pulumi.ResourceOption) (*Datapolicyv2DataPolicy, error) {
	var resource Datapolicyv2DataPolicy
	err := ctx.ReadResource("gcp:bigquery/datapolicyv2DataPolicy:Datapolicyv2DataPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Datapolicyv2DataPolicy resources.
type datapolicyv2DataPolicyState struct {
	// The policy used to specify data masking rule.
	// Structure is documented below.
	DataMaskingPolicy *Datapolicyv2DataPolicyDataMaskingPolicy `pulumi:"dataMaskingPolicy"`
	// User-assigned (human readable) ID of the data policy that needs to be
	// unique within a project. Used as {data_policy_id} in part of the resource
	// name.
	DataPolicyId *string `pulumi:"dataPolicyId"`
	// Type of data policy.
	// Possible values:
	// DATA_MASKING_POLICY
	// RAW_DATA_ACCESS_POLICY
	// COLUMN_LEVEL_SECURITY_POLICY
	DataPolicyType *string `pulumi:"dataPolicyType"`
	// The etag for this Data Policy.
	// This field is used for UpdateDataPolicy calls. If Data Policy exists, this
	// field is required and must match the server's etag. It will also be
	// populated in the response of GetDataPolicy, CreateDataPolicy, and
	// UpdateDataPolicy calls.
	Etag *string `pulumi:"etag"`
	// The list of IAM principals that have Fine Grained Access to the underlying
	// data goverened by this data policy.
	// Uses the [IAM V2 principal
	// syntax](https://cloud.google.com/iam/docs/principal-identifiers#v2) Only
	// supports principal types users, groups, serviceaccounts, cloudidentity.
	// This field is supported in V2 Data Policy only. In case of V1 data policies
	// (i.e. verion = 1 and policyTag is set), this field is not populated.
	Grantees []string `pulumi:"grantees"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `pulumi:"location"`
	// Identifier. Resource name of this data policy, in the format of
	// `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
	Name *string `pulumi:"name"`
	// Policy tag resource name, in the format of
	// `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.
	// policyTag is supported only for V1 data policies.
	PolicyTag *string `pulumi:"policyTag"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The version of the Data Policy resource.
	// Possible values:
	// V1
	// V2
	Version *string `pulumi:"version"`
}

type Datapolicyv2DataPolicyState struct {
	// The policy used to specify data masking rule.
	// Structure is documented below.
	DataMaskingPolicy Datapolicyv2DataPolicyDataMaskingPolicyPtrInput
	// User-assigned (human readable) ID of the data policy that needs to be
	// unique within a project. Used as {data_policy_id} in part of the resource
	// name.
	DataPolicyId pulumi.StringPtrInput
	// Type of data policy.
	// Possible values:
	// DATA_MASKING_POLICY
	// RAW_DATA_ACCESS_POLICY
	// COLUMN_LEVEL_SECURITY_POLICY
	DataPolicyType pulumi.StringPtrInput
	// The etag for this Data Policy.
	// This field is used for UpdateDataPolicy calls. If Data Policy exists, this
	// field is required and must match the server's etag. It will also be
	// populated in the response of GetDataPolicy, CreateDataPolicy, and
	// UpdateDataPolicy calls.
	Etag pulumi.StringPtrInput
	// The list of IAM principals that have Fine Grained Access to the underlying
	// data goverened by this data policy.
	// Uses the [IAM V2 principal
	// syntax](https://cloud.google.com/iam/docs/principal-identifiers#v2) Only
	// supports principal types users, groups, serviceaccounts, cloudidentity.
	// This field is supported in V2 Data Policy only. In case of V1 data policies
	// (i.e. verion = 1 and policyTag is set), this field is not populated.
	Grantees pulumi.StringArrayInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringPtrInput
	// Identifier. Resource name of this data policy, in the format of
	// `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
	Name pulumi.StringPtrInput
	// Policy tag resource name, in the format of
	// `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.
	// policyTag is supported only for V1 data policies.
	PolicyTag pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The version of the Data Policy resource.
	// Possible values:
	// V1
	// V2
	Version pulumi.StringPtrInput
}

func (Datapolicyv2DataPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*datapolicyv2DataPolicyState)(nil)).Elem()
}

type datapolicyv2DataPolicyArgs struct {
	// The policy used to specify data masking rule.
	// Structure is documented below.
	DataMaskingPolicy *Datapolicyv2DataPolicyDataMaskingPolicy `pulumi:"dataMaskingPolicy"`
	// User-assigned (human readable) ID of the data policy that needs to be
	// unique within a project. Used as {data_policy_id} in part of the resource
	// name.
	DataPolicyId string `pulumi:"dataPolicyId"`
	// Type of data policy.
	// Possible values:
	// DATA_MASKING_POLICY
	// RAW_DATA_ACCESS_POLICY
	// COLUMN_LEVEL_SECURITY_POLICY
	DataPolicyType string `pulumi:"dataPolicyType"`
	// The etag for this Data Policy.
	// This field is used for UpdateDataPolicy calls. If Data Policy exists, this
	// field is required and must match the server's etag. It will also be
	// populated in the response of GetDataPolicy, CreateDataPolicy, and
	// UpdateDataPolicy calls.
	Etag *string `pulumi:"etag"`
	// The list of IAM principals that have Fine Grained Access to the underlying
	// data goverened by this data policy.
	// Uses the [IAM V2 principal
	// syntax](https://cloud.google.com/iam/docs/principal-identifiers#v2) Only
	// supports principal types users, groups, serviceaccounts, cloudidentity.
	// This field is supported in V2 Data Policy only. In case of V1 data policies
	// (i.e. verion = 1 and policyTag is set), this field is not populated.
	Grantees []string `pulumi:"grantees"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Datapolicyv2DataPolicy resource.
type Datapolicyv2DataPolicyArgs struct {
	// The policy used to specify data masking rule.
	// Structure is documented below.
	DataMaskingPolicy Datapolicyv2DataPolicyDataMaskingPolicyPtrInput
	// User-assigned (human readable) ID of the data policy that needs to be
	// unique within a project. Used as {data_policy_id} in part of the resource
	// name.
	DataPolicyId pulumi.StringInput
	// Type of data policy.
	// Possible values:
	// DATA_MASKING_POLICY
	// RAW_DATA_ACCESS_POLICY
	// COLUMN_LEVEL_SECURITY_POLICY
	DataPolicyType pulumi.StringInput
	// The etag for this Data Policy.
	// This field is used for UpdateDataPolicy calls. If Data Policy exists, this
	// field is required and must match the server's etag. It will also be
	// populated in the response of GetDataPolicy, CreateDataPolicy, and
	// UpdateDataPolicy calls.
	Etag pulumi.StringPtrInput
	// The list of IAM principals that have Fine Grained Access to the underlying
	// data goverened by this data policy.
	// Uses the [IAM V2 principal
	// syntax](https://cloud.google.com/iam/docs/principal-identifiers#v2) Only
	// supports principal types users, groups, serviceaccounts, cloudidentity.
	// This field is supported in V2 Data Policy only. In case of V1 data policies
	// (i.e. verion = 1 and policyTag is set), this field is not populated.
	Grantees pulumi.StringArrayInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (Datapolicyv2DataPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datapolicyv2DataPolicyArgs)(nil)).Elem()
}

type Datapolicyv2DataPolicyInput interface {
	pulumi.Input

	ToDatapolicyv2DataPolicyOutput() Datapolicyv2DataPolicyOutput
	ToDatapolicyv2DataPolicyOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyOutput
}

func (*Datapolicyv2DataPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**Datapolicyv2DataPolicy)(nil)).Elem()
}

func (i *Datapolicyv2DataPolicy) ToDatapolicyv2DataPolicyOutput() Datapolicyv2DataPolicyOutput {
	return i.ToDatapolicyv2DataPolicyOutputWithContext(context.Background())
}

func (i *Datapolicyv2DataPolicy) ToDatapolicyv2DataPolicyOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Datapolicyv2DataPolicyOutput)
}

// Datapolicyv2DataPolicyArrayInput is an input type that accepts Datapolicyv2DataPolicyArray and Datapolicyv2DataPolicyArrayOutput values.
// You can construct a concrete instance of `Datapolicyv2DataPolicyArrayInput` via:
//
//	Datapolicyv2DataPolicyArray{ Datapolicyv2DataPolicyArgs{...} }
type Datapolicyv2DataPolicyArrayInput interface {
	pulumi.Input

	ToDatapolicyv2DataPolicyArrayOutput() Datapolicyv2DataPolicyArrayOutput
	ToDatapolicyv2DataPolicyArrayOutputWithContext(context.Context) Datapolicyv2DataPolicyArrayOutput
}

type Datapolicyv2DataPolicyArray []Datapolicyv2DataPolicyInput

func (Datapolicyv2DataPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datapolicyv2DataPolicy)(nil)).Elem()
}

func (i Datapolicyv2DataPolicyArray) ToDatapolicyv2DataPolicyArrayOutput() Datapolicyv2DataPolicyArrayOutput {
	return i.ToDatapolicyv2DataPolicyArrayOutputWithContext(context.Background())
}

func (i Datapolicyv2DataPolicyArray) ToDatapolicyv2DataPolicyArrayOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Datapolicyv2DataPolicyArrayOutput)
}

// Datapolicyv2DataPolicyMapInput is an input type that accepts Datapolicyv2DataPolicyMap and Datapolicyv2DataPolicyMapOutput values.
// You can construct a concrete instance of `Datapolicyv2DataPolicyMapInput` via:
//
//	Datapolicyv2DataPolicyMap{ "key": Datapolicyv2DataPolicyArgs{...} }
type Datapolicyv2DataPolicyMapInput interface {
	pulumi.Input

	ToDatapolicyv2DataPolicyMapOutput() Datapolicyv2DataPolicyMapOutput
	ToDatapolicyv2DataPolicyMapOutputWithContext(context.Context) Datapolicyv2DataPolicyMapOutput
}

type Datapolicyv2DataPolicyMap map[string]Datapolicyv2DataPolicyInput

func (Datapolicyv2DataPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datapolicyv2DataPolicy)(nil)).Elem()
}

func (i Datapolicyv2DataPolicyMap) ToDatapolicyv2DataPolicyMapOutput() Datapolicyv2DataPolicyMapOutput {
	return i.ToDatapolicyv2DataPolicyMapOutputWithContext(context.Background())
}

func (i Datapolicyv2DataPolicyMap) ToDatapolicyv2DataPolicyMapOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Datapolicyv2DataPolicyMapOutput)
}

type Datapolicyv2DataPolicyOutput struct{ *pulumi.OutputState }

func (Datapolicyv2DataPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Datapolicyv2DataPolicy)(nil)).Elem()
}

func (o Datapolicyv2DataPolicyOutput) ToDatapolicyv2DataPolicyOutput() Datapolicyv2DataPolicyOutput {
	return o
}

func (o Datapolicyv2DataPolicyOutput) ToDatapolicyv2DataPolicyOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyOutput {
	return o
}

// The policy used to specify data masking rule.
// Structure is documented below.
func (o Datapolicyv2DataPolicyOutput) DataMaskingPolicy() Datapolicyv2DataPolicyDataMaskingPolicyPtrOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicy) Datapolicyv2DataPolicyDataMaskingPolicyPtrOutput {
		return v.DataMaskingPolicy
	}).(Datapolicyv2DataPolicyDataMaskingPolicyPtrOutput)
}

// User-assigned (human readable) ID of the data policy that needs to be
// unique within a project. Used as {data_policy_id} in part of the resource
// name.
func (o Datapolicyv2DataPolicyOutput) DataPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicy) pulumi.StringOutput { return v.DataPolicyId }).(pulumi.StringOutput)
}

// Type of data policy.
// Possible values:
// DATA_MASKING_POLICY
// RAW_DATA_ACCESS_POLICY
// COLUMN_LEVEL_SECURITY_POLICY
func (o Datapolicyv2DataPolicyOutput) DataPolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicy) pulumi.StringOutput { return v.DataPolicyType }).(pulumi.StringOutput)
}

// The etag for this Data Policy.
// This field is used for UpdateDataPolicy calls. If Data Policy exists, this
// field is required and must match the server's etag. It will also be
// populated in the response of GetDataPolicy, CreateDataPolicy, and
// UpdateDataPolicy calls.
func (o Datapolicyv2DataPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The list of IAM principals that have Fine Grained Access to the underlying
// data goverened by this data policy.
// Uses the [IAM V2 principal
// syntax](https://cloud.google.com/iam/docs/principal-identifiers#v2) Only
// supports principal types users, groups, serviceaccounts, cloudidentity.
// This field is supported in V2 Data Policy only. In case of V1 data policies
// (i.e. verion = 1 and policyTag is set), this field is not populated.
func (o Datapolicyv2DataPolicyOutput) Grantees() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicy) pulumi.StringArrayOutput { return v.Grantees }).(pulumi.StringArrayOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
func (o Datapolicyv2DataPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. Resource name of this data policy, in the format of
// `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
func (o Datapolicyv2DataPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Policy tag resource name, in the format of
// `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.
// policyTag is supported only for V1 data policies.
func (o Datapolicyv2DataPolicyOutput) PolicyTag() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicy) pulumi.StringOutput { return v.PolicyTag }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o Datapolicyv2DataPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The version of the Data Policy resource.
// Possible values:
// V1
// V2
func (o Datapolicyv2DataPolicyOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicy) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type Datapolicyv2DataPolicyArrayOutput struct{ *pulumi.OutputState }

func (Datapolicyv2DataPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datapolicyv2DataPolicy)(nil)).Elem()
}

func (o Datapolicyv2DataPolicyArrayOutput) ToDatapolicyv2DataPolicyArrayOutput() Datapolicyv2DataPolicyArrayOutput {
	return o
}

func (o Datapolicyv2DataPolicyArrayOutput) ToDatapolicyv2DataPolicyArrayOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyArrayOutput {
	return o
}

func (o Datapolicyv2DataPolicyArrayOutput) Index(i pulumi.IntInput) Datapolicyv2DataPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Datapolicyv2DataPolicy {
		return vs[0].([]*Datapolicyv2DataPolicy)[vs[1].(int)]
	}).(Datapolicyv2DataPolicyOutput)
}

type Datapolicyv2DataPolicyMapOutput struct{ *pulumi.OutputState }

func (Datapolicyv2DataPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datapolicyv2DataPolicy)(nil)).Elem()
}

func (o Datapolicyv2DataPolicyMapOutput) ToDatapolicyv2DataPolicyMapOutput() Datapolicyv2DataPolicyMapOutput {
	return o
}

func (o Datapolicyv2DataPolicyMapOutput) ToDatapolicyv2DataPolicyMapOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyMapOutput {
	return o
}

func (o Datapolicyv2DataPolicyMapOutput) MapIndex(k pulumi.StringInput) Datapolicyv2DataPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Datapolicyv2DataPolicy {
		return vs[0].(map[string]*Datapolicyv2DataPolicy)[vs[1].(string)]
	}).(Datapolicyv2DataPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Datapolicyv2DataPolicyInput)(nil)).Elem(), &Datapolicyv2DataPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*Datapolicyv2DataPolicyArrayInput)(nil)).Elem(), Datapolicyv2DataPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Datapolicyv2DataPolicyMapInput)(nil)).Elem(), Datapolicyv2DataPolicyMap{})
	pulumi.RegisterOutputType(Datapolicyv2DataPolicyOutput{})
	pulumi.RegisterOutputType(Datapolicyv2DataPolicyArrayOutput{})
	pulumi.RegisterOutputType(Datapolicyv2DataPolicyMapOutput{})
}
