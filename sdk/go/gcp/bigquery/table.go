// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a table resource in a dataset for Google BigQuery. For more information see
// [the official documentation](https://cloud.google.com/bigquery/docs/) and
// [API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables).
type Table struct {
	s *pulumi.ResourceState
}

// NewTable registers a new resource with the given unique name, arguments, and options.
func NewTable(ctx *pulumi.Context,
	name string, args *TableArgs, opts ...pulumi.ResourceOpt) (*Table, error) {
	if args == nil || args.DatasetId == nil {
		return nil, errors.New("missing required argument 'DatasetId'")
	}
	if args == nil || args.TableId == nil {
		return nil, errors.New("missing required argument 'TableId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["datasetId"] = nil
		inputs["description"] = nil
		inputs["expirationTime"] = nil
		inputs["friendlyName"] = nil
		inputs["labels"] = nil
		inputs["project"] = nil
		inputs["schema"] = nil
		inputs["tableId"] = nil
		inputs["timePartitioning"] = nil
		inputs["view"] = nil
	} else {
		inputs["datasetId"] = args.DatasetId
		inputs["description"] = args.Description
		inputs["expirationTime"] = args.ExpirationTime
		inputs["friendlyName"] = args.FriendlyName
		inputs["labels"] = args.Labels
		inputs["project"] = args.Project
		inputs["schema"] = args.Schema
		inputs["tableId"] = args.TableId
		inputs["timePartitioning"] = args.TimePartitioning
		inputs["view"] = args.View
	}
	inputs["creationTime"] = nil
	inputs["etag"] = nil
	inputs["lastModifiedTime"] = nil
	inputs["location"] = nil
	inputs["numBytes"] = nil
	inputs["numLongTermBytes"] = nil
	inputs["numRows"] = nil
	inputs["selfLink"] = nil
	inputs["type"] = nil
	s, err := ctx.RegisterResource("gcp:bigquery/table:Table", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Table{s: s}, nil
}

// GetTable gets an existing Table resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTable(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TableState, opts ...pulumi.ResourceOpt) (*Table, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["creationTime"] = state.CreationTime
		inputs["datasetId"] = state.DatasetId
		inputs["description"] = state.Description
		inputs["etag"] = state.Etag
		inputs["expirationTime"] = state.ExpirationTime
		inputs["friendlyName"] = state.FriendlyName
		inputs["labels"] = state.Labels
		inputs["lastModifiedTime"] = state.LastModifiedTime
		inputs["location"] = state.Location
		inputs["numBytes"] = state.NumBytes
		inputs["numLongTermBytes"] = state.NumLongTermBytes
		inputs["numRows"] = state.NumRows
		inputs["project"] = state.Project
		inputs["schema"] = state.Schema
		inputs["selfLink"] = state.SelfLink
		inputs["tableId"] = state.TableId
		inputs["timePartitioning"] = state.TimePartitioning
		inputs["type"] = state.Type
		inputs["view"] = state.View
	}
	s, err := ctx.ReadResource("gcp:bigquery/table:Table", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Table{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Table) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Table) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The time when this table was created, in milliseconds since the epoch.
func (r *Table) CreationTime() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["creationTime"])
}

// The dataset ID to create the table in.
// Changing this forces a new resource to be created.
func (r *Table) DatasetId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["datasetId"])
}

// The field description.
func (r *Table) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// A hash of the resource.
func (r *Table) Etag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["etag"])
}

// The time when this table expires, in
// milliseconds since the epoch. If not present, the table will persist
// indefinitely. Expired tables will be deleted and their storage
// reclaimed.
func (r *Table) ExpirationTime() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["expirationTime"])
}

// A descriptive name for the table.
func (r *Table) FriendlyName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["friendlyName"])
}

// A mapping of labels to assign to the resource.
func (r *Table) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

// The time when this table was last modified, in milliseconds since the epoch.
func (r *Table) LastModifiedTime() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["lastModifiedTime"])
}

// The geographic location where the table resides. This value is inherited from the dataset.
func (r *Table) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

// The size of this table in bytes, excluding any data in the streaming buffer.
func (r *Table) NumBytes() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["numBytes"])
}

// The number of bytes in the table that are considered "long-term storage".
func (r *Table) NumLongTermBytes() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["numLongTermBytes"])
}

// The number of rows of data in this table, excluding any data in the streaming buffer.
func (r *Table) NumRows() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["numRows"])
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (r *Table) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// A JSON schema for the table.
func (r *Table) Schema() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["schema"])
}

// The URI of the created resource.
func (r *Table) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// A unique ID for the resource.
// Changing this forces a new resource to be created.
func (r *Table) TableId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tableId"])
}

// If specified, configures time-based
// partitioning for this table. Structure is documented below.
func (r *Table) TimePartitioning() *pulumi.Output {
	return r.s.State["timePartitioning"]
}

// Describes the table type.
func (r *Table) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// If specified, configures this table as a view.
// Structure is documented below.
func (r *Table) View() *pulumi.Output {
	return r.s.State["view"]
}

// Input properties used for looking up and filtering Table resources.
type TableState struct {
	// The time when this table was created, in milliseconds since the epoch.
	CreationTime interface{}
	// The dataset ID to create the table in.
	// Changing this forces a new resource to be created.
	DatasetId interface{}
	// The field description.
	Description interface{}
	// A hash of the resource.
	Etag interface{}
	// The time when this table expires, in
	// milliseconds since the epoch. If not present, the table will persist
	// indefinitely. Expired tables will be deleted and their storage
	// reclaimed.
	ExpirationTime interface{}
	// A descriptive name for the table.
	FriendlyName interface{}
	// A mapping of labels to assign to the resource.
	Labels interface{}
	// The time when this table was last modified, in milliseconds since the epoch.
	LastModifiedTime interface{}
	// The geographic location where the table resides. This value is inherited from the dataset.
	Location interface{}
	// The size of this table in bytes, excluding any data in the streaming buffer.
	NumBytes interface{}
	// The number of bytes in the table that are considered "long-term storage".
	NumLongTermBytes interface{}
	// The number of rows of data in this table, excluding any data in the streaming buffer.
	NumRows interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// A JSON schema for the table.
	Schema interface{}
	// The URI of the created resource.
	SelfLink interface{}
	// A unique ID for the resource.
	// Changing this forces a new resource to be created.
	TableId interface{}
	// If specified, configures time-based
	// partitioning for this table. Structure is documented below.
	TimePartitioning interface{}
	// Describes the table type.
	Type interface{}
	// If specified, configures this table as a view.
	// Structure is documented below.
	View interface{}
}

// The set of arguments for constructing a Table resource.
type TableArgs struct {
	// The dataset ID to create the table in.
	// Changing this forces a new resource to be created.
	DatasetId interface{}
	// The field description.
	Description interface{}
	// The time when this table expires, in
	// milliseconds since the epoch. If not present, the table will persist
	// indefinitely. Expired tables will be deleted and their storage
	// reclaimed.
	ExpirationTime interface{}
	// A descriptive name for the table.
	FriendlyName interface{}
	// A mapping of labels to assign to the resource.
	Labels interface{}
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project interface{}
	// A JSON schema for the table.
	Schema interface{}
	// A unique ID for the resource.
	// Changing this forces a new resource to be created.
	TableId interface{}
	// If specified, configures time-based
	// partitioning for this table. Structure is documented below.
	TimePartitioning interface{}
	// If specified, configures this table as a view.
	// Structure is documented below.
	View interface{}
}
