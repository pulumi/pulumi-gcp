// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a table resource in a dataset for Google BigQuery. For more information see
// [the official documentation](https://cloud.google.com/bigquery/docs/) and
// [API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables).
//
// > **Note**: On newer versions of the provider, you must explicitly set `deletion_protection=false`
// (and run `pulumi update` to write the field to state) in order to destroy an instance.
// It is recommended to not set this field (or set it to true) until you're ready to destroy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := bigquery.NewDataset(ctx, "default", &bigquery.DatasetArgs{
//				DatasetId:                pulumi.String("foo"),
//				FriendlyName:             pulumi.String("test"),
//				Description:              pulumi.String("This is a test description"),
//				Location:                 pulumi.String("EU"),
//				DefaultTableExpirationMs: pulumi.Int(3600000),
//				Labels: pulumi.StringMap{
//					"env": pulumi.String("default"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewTable(ctx, "default", &bigquery.TableArgs{
//				DatasetId: _default.DatasetId,
//				TableId:   pulumi.String("bar"),
//				TimePartitioning: &bigquery.TableTimePartitioningArgs{
//					Type: pulumi.String("DAY"),
//				},
//				Labels: pulumi.StringMap{
//					"env": pulumi.String("default"),
//				},
//				Schema: pulumi.String(`[
//	  {
//	    "name": "permalink",
//	    "type": "STRING",
//	    "mode": "NULLABLE",
//	    "description": "The Permalink"
//	  },
//	  {
//	    "name": "state",
//	    "type": "STRING",
//	    "mode": "NULLABLE",
//	    "description": "State where the head office is located"
//	  }
//
// ]
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewTable(ctx, "sheet", &bigquery.TableArgs{
//				DatasetId: _default.DatasetId,
//				TableId:   pulumi.String("sheet"),
//				ExternalDataConfiguration: &bigquery.TableExternalDataConfigurationArgs{
//					Autodetect:   pulumi.Bool(true),
//					SourceFormat: pulumi.String("GOOGLE_SHEETS"),
//					GoogleSheetsOptions: &bigquery.TableExternalDataConfigurationGoogleSheetsOptionsArgs{
//						SkipLeadingRows: pulumi.Int(1),
//					},
//					SourceUris: pulumi.StringArray{
//						pulumi.String("https://docs.google.com/spreadsheets/d/123456789012345"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// BigQuery tables can be imported using any of these accepted formats:
//
// * `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}`
//
// * `{{project}}/{{dataset_id}}/{{table_id}}`
//
// * `{{dataset_id}}/{{table_id}}`
//
// When using the `pulumi import` command, BigQuery tables can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:bigquery/table:Table default projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}
// ```
//
// ```sh
// $ pulumi import gcp:bigquery/table:Table default {{project}}/{{dataset_id}}/{{table_id}}
// ```
//
// ```sh
// $ pulumi import gcp:bigquery/table:Table default {{dataset_id}}/{{table_id}}
// ```
type Table struct {
	pulumi.CustomResourceState

	// Specifies the configuration of a BigLake managed table. Structure is documented below
	BiglakeConfiguration TableBiglakeConfigurationPtrOutput `pulumi:"biglakeConfiguration"`
	// Specifies column names to use for data clustering.
	// Up to four top-level columns are allowed, and should be specified in
	// descending priority order.
	Clusterings pulumi.StringArrayOutput `pulumi:"clusterings"`
	// The time when this table was created, in milliseconds since the epoch.
	CreationTime pulumi.IntOutput `pulumi:"creationTime"`
	// The dataset ID to create the table in.
	// Changing this forces a new resource to be created.
	DatasetId pulumi.StringOutput `pulumi:"datasetId"`
	// Whether or not to allow the provider to destroy the instance. Unless this field is set to false
	// in state, a `=destroy` or `=update` that would delete the instance will fail.
	DeletionProtection pulumi.BoolPtrOutput `pulumi:"deletionProtection"`
	// The field description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	//
	// * <a name="schema"></a>`schema` - (Optional) A JSON schema for the table.
	//
	// ~>**NOTE:** Because this field expects a JSON string, any changes to the
	// string will create a diff, even if the JSON itself hasn't changed.
	// If the API returns a different value for the same schema, e.g. it
	// switched the order of values or replaced a field data type (`STRUCT` with
	// `RECORD`, `DECIMAL` with `NUMERIC`, etc.), we currently cannot suppress
	// the recurring diff this causes. As a workaround, we recommend using the
	// schema as returned by the API.
	//
	// ~>**NOTE:**  If you use `externalDataConfiguration`
	// documented below and do **not** set
	// `external_data_configuration.connection_id`, schemas must be specified
	// with `external_data_configuration.schema`. Otherwise, schemas must be
	// specified with this top-level field.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Specifies how the table should be encrypted.
	// If left blank, the table will be encrypted with a Google-managed key; that process
	// is transparent to the user.  Structure is documented below.
	EncryptionConfiguration TableEncryptionConfigurationPtrOutput `pulumi:"encryptionConfiguration"`
	// A hash of the resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The time when this table expires, in
	// milliseconds since the epoch. If not present, the table will persist
	// indefinitely. Expired tables will be deleted and their storage
	// reclaimed.
	ExpirationTime pulumi.IntOutput `pulumi:"expirationTime"`
	// Options defining open source
	// compatible table. Structure is documented below.
	ExternalCatalogTableOptions TableExternalCatalogTableOptionsPtrOutput `pulumi:"externalCatalogTableOptions"`
	// Describes the data format,
	// location, and other properties of a table stored outside of BigQuery.
	// By defining these properties, the data source can then be queried as
	// if it were a standard BigQuery table. Structure is documented below.
	ExternalDataConfiguration TableExternalDataConfigurationPtrOutput `pulumi:"externalDataConfiguration"`
	// A descriptive name for the table.
	FriendlyName pulumi.StringPtrOutput `pulumi:"friendlyName"`
	// A list of fields which should be ignored for each column in schema.
	// **NOTE:** Right now only `dataPolicies` field is supported. We might support others in the future.
	IgnoreSchemaChanges pulumi.StringArrayOutput `pulumi:"ignoreSchemaChanges"`
	// A mapping of labels to assign to the resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The time when this table was last modified, in milliseconds since the epoch.
	LastModifiedTime pulumi.IntOutput `pulumi:"lastModifiedTime"`
	// The geographic location where the table resides. This value is inherited from the dataset.
	Location pulumi.StringOutput `pulumi:"location"`
	// If specified, configures this table as a materialized view.
	// Structure is documented below.
	MaterializedView TableMaterializedViewPtrOutput `pulumi:"materializedView"`
	// The maximum staleness of data that could be
	// returned when the table (or stale MV) is queried. Staleness encoded as a
	// string encoding of [SQL IntervalValue
	// type](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#interval_type).
	MaxStaleness pulumi.StringOutput `pulumi:"maxStaleness"`
	// The size of this table in bytes, excluding any data in the streaming buffer.
	NumBytes pulumi.IntOutput `pulumi:"numBytes"`
	// The number of bytes in the table that are considered "long-term storage".
	NumLongTermBytes pulumi.IntOutput `pulumi:"numLongTermBytes"`
	// The number of rows of data in this table, excluding any data in the streaming buffer.
	NumRows pulumi.IntOutput `pulumi:"numRows"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// If specified, configures range-based
	// partitioning for this table. Structure is documented below.
	RangePartitioning TableRangePartitioningPtrOutput `pulumi:"rangePartitioning"`
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter pulumi.BoolPtrOutput `pulumi:"requirePartitionFilter"`
	// The tags attached to this table. Tag keys are
	// globally unique. Tag key is expected to be in the namespaced format, for
	// example "123456789012/environment" where 123456789012 is the ID of the
	// parent organization or project resource for this tag key. Tag value is
	// expected to be the short name, for example "Production". See [Tag definitions](https://cloud.google.com/iam/docs/tags-access-control#definitions)
	// for more details.
	ResourceTags pulumi.StringMapOutput `pulumi:"resourceTags"`
	// A JSON schema for the table.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Specifies metadata of the foreign data
	// type definition in field schema. Structure is documented below.
	SchemaForeignTypeInfo TableSchemaForeignTypeInfoPtrOutput `pulumi:"schemaForeignTypeInfo"`
	// The URI of the created resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Defines the primary key and foreign keys.
	// Structure is documented below.
	TableConstraints TableTableConstraintsPtrOutput `pulumi:"tableConstraints"`
	// A unique ID for the resource.
	// Changing this forces a new resource to be created.
	TableId pulumi.StringOutput `pulumi:"tableId"`
	// View sets the optional parameter "view": Specifies the view that determines which table information is returned. By
	// default, basic table information and storage statistics (STORAGE_STATS) are returned. Possible values:
	// TABLE_METADATA_VIEW_UNSPECIFIED, BASIC, STORAGE_STATS, FULL
	TableMetadataView pulumi.StringPtrOutput `pulumi:"tableMetadataView"`
	// Replication info of a table created
	// using "AS REPLICA" DDL like:
	// `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF srcMv`.
	// Structure is documented below.
	TableReplicationInfo TableTableReplicationInfoPtrOutput `pulumi:"tableReplicationInfo"`
	// If specified, configures time-based
	// partitioning for this table. Structure is documented below.
	TimePartitioning TableTimePartitioningPtrOutput `pulumi:"timePartitioning"`
	// Describes the table type.
	Type pulumi.StringOutput `pulumi:"type"`
	// If specified, configures this table as a view.
	// Structure is documented below.
	View TableViewPtrOutput `pulumi:"view"`
}

// NewTable registers a new resource with the given unique name, arguments, and options.
func NewTable(ctx *pulumi.Context,
	name string, args *TableArgs, opts ...pulumi.ResourceOption) (*Table, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetId'")
	}
	if args.TableId == nil {
		return nil, errors.New("invalid value for required argument 'TableId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Table
	err := ctx.RegisterResource("gcp:bigquery/table:Table", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTable gets an existing Table resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableState, opts ...pulumi.ResourceOption) (*Table, error) {
	var resource Table
	err := ctx.ReadResource("gcp:bigquery/table:Table", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Table resources.
type tableState struct {
	// Specifies the configuration of a BigLake managed table. Structure is documented below
	BiglakeConfiguration *TableBiglakeConfiguration `pulumi:"biglakeConfiguration"`
	// Specifies column names to use for data clustering.
	// Up to four top-level columns are allowed, and should be specified in
	// descending priority order.
	Clusterings []string `pulumi:"clusterings"`
	// The time when this table was created, in milliseconds since the epoch.
	CreationTime *int `pulumi:"creationTime"`
	// The dataset ID to create the table in.
	// Changing this forces a new resource to be created.
	DatasetId *string `pulumi:"datasetId"`
	// Whether or not to allow the provider to destroy the instance. Unless this field is set to false
	// in state, a `=destroy` or `=update` that would delete the instance will fail.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The field description.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	//
	// * <a name="schema"></a>`schema` - (Optional) A JSON schema for the table.
	//
	// ~>**NOTE:** Because this field expects a JSON string, any changes to the
	// string will create a diff, even if the JSON itself hasn't changed.
	// If the API returns a different value for the same schema, e.g. it
	// switched the order of values or replaced a field data type (`STRUCT` with
	// `RECORD`, `DECIMAL` with `NUMERIC`, etc.), we currently cannot suppress
	// the recurring diff this causes. As a workaround, we recommend using the
	// schema as returned by the API.
	//
	// ~>**NOTE:**  If you use `externalDataConfiguration`
	// documented below and do **not** set
	// `external_data_configuration.connection_id`, schemas must be specified
	// with `external_data_configuration.schema`. Otherwise, schemas must be
	// specified with this top-level field.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Specifies how the table should be encrypted.
	// If left blank, the table will be encrypted with a Google-managed key; that process
	// is transparent to the user.  Structure is documented below.
	EncryptionConfiguration *TableEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	// A hash of the resource.
	Etag *string `pulumi:"etag"`
	// The time when this table expires, in
	// milliseconds since the epoch. If not present, the table will persist
	// indefinitely. Expired tables will be deleted and their storage
	// reclaimed.
	ExpirationTime *int `pulumi:"expirationTime"`
	// Options defining open source
	// compatible table. Structure is documented below.
	ExternalCatalogTableOptions *TableExternalCatalogTableOptions `pulumi:"externalCatalogTableOptions"`
	// Describes the data format,
	// location, and other properties of a table stored outside of BigQuery.
	// By defining these properties, the data source can then be queried as
	// if it were a standard BigQuery table. Structure is documented below.
	ExternalDataConfiguration *TableExternalDataConfiguration `pulumi:"externalDataConfiguration"`
	// A descriptive name for the table.
	FriendlyName *string `pulumi:"friendlyName"`
	// A list of fields which should be ignored for each column in schema.
	// **NOTE:** Right now only `dataPolicies` field is supported. We might support others in the future.
	IgnoreSchemaChanges []string `pulumi:"ignoreSchemaChanges"`
	// A mapping of labels to assign to the resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The time when this table was last modified, in milliseconds since the epoch.
	LastModifiedTime *int `pulumi:"lastModifiedTime"`
	// The geographic location where the table resides. This value is inherited from the dataset.
	Location *string `pulumi:"location"`
	// If specified, configures this table as a materialized view.
	// Structure is documented below.
	MaterializedView *TableMaterializedView `pulumi:"materializedView"`
	// The maximum staleness of data that could be
	// returned when the table (or stale MV) is queried. Staleness encoded as a
	// string encoding of [SQL IntervalValue
	// type](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#interval_type).
	MaxStaleness *string `pulumi:"maxStaleness"`
	// The size of this table in bytes, excluding any data in the streaming buffer.
	NumBytes *int `pulumi:"numBytes"`
	// The number of bytes in the table that are considered "long-term storage".
	NumLongTermBytes *int `pulumi:"numLongTermBytes"`
	// The number of rows of data in this table, excluding any data in the streaming buffer.
	NumRows *int `pulumi:"numRows"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// If specified, configures range-based
	// partitioning for this table. Structure is documented below.
	RangePartitioning *TableRangePartitioning `pulumi:"rangePartitioning"`
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter *bool `pulumi:"requirePartitionFilter"`
	// The tags attached to this table. Tag keys are
	// globally unique. Tag key is expected to be in the namespaced format, for
	// example "123456789012/environment" where 123456789012 is the ID of the
	// parent organization or project resource for this tag key. Tag value is
	// expected to be the short name, for example "Production". See [Tag definitions](https://cloud.google.com/iam/docs/tags-access-control#definitions)
	// for more details.
	ResourceTags map[string]string `pulumi:"resourceTags"`
	// A JSON schema for the table.
	Schema *string `pulumi:"schema"`
	// Specifies metadata of the foreign data
	// type definition in field schema. Structure is documented below.
	SchemaForeignTypeInfo *TableSchemaForeignTypeInfo `pulumi:"schemaForeignTypeInfo"`
	// The URI of the created resource.
	SelfLink *string `pulumi:"selfLink"`
	// Defines the primary key and foreign keys.
	// Structure is documented below.
	TableConstraints *TableTableConstraints `pulumi:"tableConstraints"`
	// A unique ID for the resource.
	// Changing this forces a new resource to be created.
	TableId *string `pulumi:"tableId"`
	// View sets the optional parameter "view": Specifies the view that determines which table information is returned. By
	// default, basic table information and storage statistics (STORAGE_STATS) are returned. Possible values:
	// TABLE_METADATA_VIEW_UNSPECIFIED, BASIC, STORAGE_STATS, FULL
	TableMetadataView *string `pulumi:"tableMetadataView"`
	// Replication info of a table created
	// using "AS REPLICA" DDL like:
	// `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF srcMv`.
	// Structure is documented below.
	TableReplicationInfo *TableTableReplicationInfo `pulumi:"tableReplicationInfo"`
	// If specified, configures time-based
	// partitioning for this table. Structure is documented below.
	TimePartitioning *TableTimePartitioning `pulumi:"timePartitioning"`
	// Describes the table type.
	Type *string `pulumi:"type"`
	// If specified, configures this table as a view.
	// Structure is documented below.
	View *TableView `pulumi:"view"`
}

type TableState struct {
	// Specifies the configuration of a BigLake managed table. Structure is documented below
	BiglakeConfiguration TableBiglakeConfigurationPtrInput
	// Specifies column names to use for data clustering.
	// Up to four top-level columns are allowed, and should be specified in
	// descending priority order.
	Clusterings pulumi.StringArrayInput
	// The time when this table was created, in milliseconds since the epoch.
	CreationTime pulumi.IntPtrInput
	// The dataset ID to create the table in.
	// Changing this forces a new resource to be created.
	DatasetId pulumi.StringPtrInput
	// Whether or not to allow the provider to destroy the instance. Unless this field is set to false
	// in state, a `=destroy` or `=update` that would delete the instance will fail.
	DeletionProtection pulumi.BoolPtrInput
	// The field description.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	//
	// * <a name="schema"></a>`schema` - (Optional) A JSON schema for the table.
	//
	// ~>**NOTE:** Because this field expects a JSON string, any changes to the
	// string will create a diff, even if the JSON itself hasn't changed.
	// If the API returns a different value for the same schema, e.g. it
	// switched the order of values or replaced a field data type (`STRUCT` with
	// `RECORD`, `DECIMAL` with `NUMERIC`, etc.), we currently cannot suppress
	// the recurring diff this causes. As a workaround, we recommend using the
	// schema as returned by the API.
	//
	// ~>**NOTE:**  If you use `externalDataConfiguration`
	// documented below and do **not** set
	// `external_data_configuration.connection_id`, schemas must be specified
	// with `external_data_configuration.schema`. Otherwise, schemas must be
	// specified with this top-level field.
	EffectiveLabels pulumi.StringMapInput
	// Specifies how the table should be encrypted.
	// If left blank, the table will be encrypted with a Google-managed key; that process
	// is transparent to the user.  Structure is documented below.
	EncryptionConfiguration TableEncryptionConfigurationPtrInput
	// A hash of the resource.
	Etag pulumi.StringPtrInput
	// The time when this table expires, in
	// milliseconds since the epoch. If not present, the table will persist
	// indefinitely. Expired tables will be deleted and their storage
	// reclaimed.
	ExpirationTime pulumi.IntPtrInput
	// Options defining open source
	// compatible table. Structure is documented below.
	ExternalCatalogTableOptions TableExternalCatalogTableOptionsPtrInput
	// Describes the data format,
	// location, and other properties of a table stored outside of BigQuery.
	// By defining these properties, the data source can then be queried as
	// if it were a standard BigQuery table. Structure is documented below.
	ExternalDataConfiguration TableExternalDataConfigurationPtrInput
	// A descriptive name for the table.
	FriendlyName pulumi.StringPtrInput
	// A list of fields which should be ignored for each column in schema.
	// **NOTE:** Right now only `dataPolicies` field is supported. We might support others in the future.
	IgnoreSchemaChanges pulumi.StringArrayInput
	// A mapping of labels to assign to the resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The time when this table was last modified, in milliseconds since the epoch.
	LastModifiedTime pulumi.IntPtrInput
	// The geographic location where the table resides. This value is inherited from the dataset.
	Location pulumi.StringPtrInput
	// If specified, configures this table as a materialized view.
	// Structure is documented below.
	MaterializedView TableMaterializedViewPtrInput
	// The maximum staleness of data that could be
	// returned when the table (or stale MV) is queried. Staleness encoded as a
	// string encoding of [SQL IntervalValue
	// type](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#interval_type).
	MaxStaleness pulumi.StringPtrInput
	// The size of this table in bytes, excluding any data in the streaming buffer.
	NumBytes pulumi.IntPtrInput
	// The number of bytes in the table that are considered "long-term storage".
	NumLongTermBytes pulumi.IntPtrInput
	// The number of rows of data in this table, excluding any data in the streaming buffer.
	NumRows pulumi.IntPtrInput
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// If specified, configures range-based
	// partitioning for this table. Structure is documented below.
	RangePartitioning TableRangePartitioningPtrInput
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter pulumi.BoolPtrInput
	// The tags attached to this table. Tag keys are
	// globally unique. Tag key is expected to be in the namespaced format, for
	// example "123456789012/environment" where 123456789012 is the ID of the
	// parent organization or project resource for this tag key. Tag value is
	// expected to be the short name, for example "Production". See [Tag definitions](https://cloud.google.com/iam/docs/tags-access-control#definitions)
	// for more details.
	ResourceTags pulumi.StringMapInput
	// A JSON schema for the table.
	Schema pulumi.StringPtrInput
	// Specifies metadata of the foreign data
	// type definition in field schema. Structure is documented below.
	SchemaForeignTypeInfo TableSchemaForeignTypeInfoPtrInput
	// The URI of the created resource.
	SelfLink pulumi.StringPtrInput
	// Defines the primary key and foreign keys.
	// Structure is documented below.
	TableConstraints TableTableConstraintsPtrInput
	// A unique ID for the resource.
	// Changing this forces a new resource to be created.
	TableId pulumi.StringPtrInput
	// View sets the optional parameter "view": Specifies the view that determines which table information is returned. By
	// default, basic table information and storage statistics (STORAGE_STATS) are returned. Possible values:
	// TABLE_METADATA_VIEW_UNSPECIFIED, BASIC, STORAGE_STATS, FULL
	TableMetadataView pulumi.StringPtrInput
	// Replication info of a table created
	// using "AS REPLICA" DDL like:
	// `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF srcMv`.
	// Structure is documented below.
	TableReplicationInfo TableTableReplicationInfoPtrInput
	// If specified, configures time-based
	// partitioning for this table. Structure is documented below.
	TimePartitioning TableTimePartitioningPtrInput
	// Describes the table type.
	Type pulumi.StringPtrInput
	// If specified, configures this table as a view.
	// Structure is documented below.
	View TableViewPtrInput
}

func (TableState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableState)(nil)).Elem()
}

type tableArgs struct {
	// Specifies the configuration of a BigLake managed table. Structure is documented below
	BiglakeConfiguration *TableBiglakeConfiguration `pulumi:"biglakeConfiguration"`
	// Specifies column names to use for data clustering.
	// Up to four top-level columns are allowed, and should be specified in
	// descending priority order.
	Clusterings []string `pulumi:"clusterings"`
	// The dataset ID to create the table in.
	// Changing this forces a new resource to be created.
	DatasetId string `pulumi:"datasetId"`
	// Whether or not to allow the provider to destroy the instance. Unless this field is set to false
	// in state, a `=destroy` or `=update` that would delete the instance will fail.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The field description.
	Description *string `pulumi:"description"`
	// Specifies how the table should be encrypted.
	// If left blank, the table will be encrypted with a Google-managed key; that process
	// is transparent to the user.  Structure is documented below.
	EncryptionConfiguration *TableEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	// The time when this table expires, in
	// milliseconds since the epoch. If not present, the table will persist
	// indefinitely. Expired tables will be deleted and their storage
	// reclaimed.
	ExpirationTime *int `pulumi:"expirationTime"`
	// Options defining open source
	// compatible table. Structure is documented below.
	ExternalCatalogTableOptions *TableExternalCatalogTableOptions `pulumi:"externalCatalogTableOptions"`
	// Describes the data format,
	// location, and other properties of a table stored outside of BigQuery.
	// By defining these properties, the data source can then be queried as
	// if it were a standard BigQuery table. Structure is documented below.
	ExternalDataConfiguration *TableExternalDataConfiguration `pulumi:"externalDataConfiguration"`
	// A descriptive name for the table.
	FriendlyName *string `pulumi:"friendlyName"`
	// A list of fields which should be ignored for each column in schema.
	// **NOTE:** Right now only `dataPolicies` field is supported. We might support others in the future.
	IgnoreSchemaChanges []string `pulumi:"ignoreSchemaChanges"`
	// A mapping of labels to assign to the resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// If specified, configures this table as a materialized view.
	// Structure is documented below.
	MaterializedView *TableMaterializedView `pulumi:"materializedView"`
	// The maximum staleness of data that could be
	// returned when the table (or stale MV) is queried. Staleness encoded as a
	// string encoding of [SQL IntervalValue
	// type](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#interval_type).
	MaxStaleness *string `pulumi:"maxStaleness"`
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// If specified, configures range-based
	// partitioning for this table. Structure is documented below.
	RangePartitioning *TableRangePartitioning `pulumi:"rangePartitioning"`
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter *bool `pulumi:"requirePartitionFilter"`
	// The tags attached to this table. Tag keys are
	// globally unique. Tag key is expected to be in the namespaced format, for
	// example "123456789012/environment" where 123456789012 is the ID of the
	// parent organization or project resource for this tag key. Tag value is
	// expected to be the short name, for example "Production". See [Tag definitions](https://cloud.google.com/iam/docs/tags-access-control#definitions)
	// for more details.
	ResourceTags map[string]string `pulumi:"resourceTags"`
	// A JSON schema for the table.
	Schema *string `pulumi:"schema"`
	// Specifies metadata of the foreign data
	// type definition in field schema. Structure is documented below.
	SchemaForeignTypeInfo *TableSchemaForeignTypeInfo `pulumi:"schemaForeignTypeInfo"`
	// Defines the primary key and foreign keys.
	// Structure is documented below.
	TableConstraints *TableTableConstraints `pulumi:"tableConstraints"`
	// A unique ID for the resource.
	// Changing this forces a new resource to be created.
	TableId string `pulumi:"tableId"`
	// View sets the optional parameter "view": Specifies the view that determines which table information is returned. By
	// default, basic table information and storage statistics (STORAGE_STATS) are returned. Possible values:
	// TABLE_METADATA_VIEW_UNSPECIFIED, BASIC, STORAGE_STATS, FULL
	TableMetadataView *string `pulumi:"tableMetadataView"`
	// Replication info of a table created
	// using "AS REPLICA" DDL like:
	// `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF srcMv`.
	// Structure is documented below.
	TableReplicationInfo *TableTableReplicationInfo `pulumi:"tableReplicationInfo"`
	// If specified, configures time-based
	// partitioning for this table. Structure is documented below.
	TimePartitioning *TableTimePartitioning `pulumi:"timePartitioning"`
	// If specified, configures this table as a view.
	// Structure is documented below.
	View *TableView `pulumi:"view"`
}

// The set of arguments for constructing a Table resource.
type TableArgs struct {
	// Specifies the configuration of a BigLake managed table. Structure is documented below
	BiglakeConfiguration TableBiglakeConfigurationPtrInput
	// Specifies column names to use for data clustering.
	// Up to four top-level columns are allowed, and should be specified in
	// descending priority order.
	Clusterings pulumi.StringArrayInput
	// The dataset ID to create the table in.
	// Changing this forces a new resource to be created.
	DatasetId pulumi.StringInput
	// Whether or not to allow the provider to destroy the instance. Unless this field is set to false
	// in state, a `=destroy` or `=update` that would delete the instance will fail.
	DeletionProtection pulumi.BoolPtrInput
	// The field description.
	Description pulumi.StringPtrInput
	// Specifies how the table should be encrypted.
	// If left blank, the table will be encrypted with a Google-managed key; that process
	// is transparent to the user.  Structure is documented below.
	EncryptionConfiguration TableEncryptionConfigurationPtrInput
	// The time when this table expires, in
	// milliseconds since the epoch. If not present, the table will persist
	// indefinitely. Expired tables will be deleted and their storage
	// reclaimed.
	ExpirationTime pulumi.IntPtrInput
	// Options defining open source
	// compatible table. Structure is documented below.
	ExternalCatalogTableOptions TableExternalCatalogTableOptionsPtrInput
	// Describes the data format,
	// location, and other properties of a table stored outside of BigQuery.
	// By defining these properties, the data source can then be queried as
	// if it were a standard BigQuery table. Structure is documented below.
	ExternalDataConfiguration TableExternalDataConfigurationPtrInput
	// A descriptive name for the table.
	FriendlyName pulumi.StringPtrInput
	// A list of fields which should be ignored for each column in schema.
	// **NOTE:** Right now only `dataPolicies` field is supported. We might support others in the future.
	IgnoreSchemaChanges pulumi.StringArrayInput
	// A mapping of labels to assign to the resource.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// If specified, configures this table as a materialized view.
	// Structure is documented below.
	MaterializedView TableMaterializedViewPtrInput
	// The maximum staleness of data that could be
	// returned when the table (or stale MV) is queried. Staleness encoded as a
	// string encoding of [SQL IntervalValue
	// type](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#interval_type).
	MaxStaleness pulumi.StringPtrInput
	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// If specified, configures range-based
	// partitioning for this table. Structure is documented below.
	RangePartitioning TableRangePartitioningPtrInput
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter pulumi.BoolPtrInput
	// The tags attached to this table. Tag keys are
	// globally unique. Tag key is expected to be in the namespaced format, for
	// example "123456789012/environment" where 123456789012 is the ID of the
	// parent organization or project resource for this tag key. Tag value is
	// expected to be the short name, for example "Production". See [Tag definitions](https://cloud.google.com/iam/docs/tags-access-control#definitions)
	// for more details.
	ResourceTags pulumi.StringMapInput
	// A JSON schema for the table.
	Schema pulumi.StringPtrInput
	// Specifies metadata of the foreign data
	// type definition in field schema. Structure is documented below.
	SchemaForeignTypeInfo TableSchemaForeignTypeInfoPtrInput
	// Defines the primary key and foreign keys.
	// Structure is documented below.
	TableConstraints TableTableConstraintsPtrInput
	// A unique ID for the resource.
	// Changing this forces a new resource to be created.
	TableId pulumi.StringInput
	// View sets the optional parameter "view": Specifies the view that determines which table information is returned. By
	// default, basic table information and storage statistics (STORAGE_STATS) are returned. Possible values:
	// TABLE_METADATA_VIEW_UNSPECIFIED, BASIC, STORAGE_STATS, FULL
	TableMetadataView pulumi.StringPtrInput
	// Replication info of a table created
	// using "AS REPLICA" DDL like:
	// `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF srcMv`.
	// Structure is documented below.
	TableReplicationInfo TableTableReplicationInfoPtrInput
	// If specified, configures time-based
	// partitioning for this table. Structure is documented below.
	TimePartitioning TableTimePartitioningPtrInput
	// If specified, configures this table as a view.
	// Structure is documented below.
	View TableViewPtrInput
}

func (TableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableArgs)(nil)).Elem()
}

type TableInput interface {
	pulumi.Input

	ToTableOutput() TableOutput
	ToTableOutputWithContext(ctx context.Context) TableOutput
}

func (*Table) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (i *Table) ToTableOutput() TableOutput {
	return i.ToTableOutputWithContext(context.Background())
}

func (i *Table) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOutput)
}

// TableArrayInput is an input type that accepts TableArray and TableArrayOutput values.
// You can construct a concrete instance of `TableArrayInput` via:
//
//	TableArray{ TableArgs{...} }
type TableArrayInput interface {
	pulumi.Input

	ToTableArrayOutput() TableArrayOutput
	ToTableArrayOutputWithContext(context.Context) TableArrayOutput
}

type TableArray []TableInput

func (TableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Table)(nil)).Elem()
}

func (i TableArray) ToTableArrayOutput() TableArrayOutput {
	return i.ToTableArrayOutputWithContext(context.Background())
}

func (i TableArray) ToTableArrayOutputWithContext(ctx context.Context) TableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableArrayOutput)
}

// TableMapInput is an input type that accepts TableMap and TableMapOutput values.
// You can construct a concrete instance of `TableMapInput` via:
//
//	TableMap{ "key": TableArgs{...} }
type TableMapInput interface {
	pulumi.Input

	ToTableMapOutput() TableMapOutput
	ToTableMapOutputWithContext(context.Context) TableMapOutput
}

type TableMap map[string]TableInput

func (TableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Table)(nil)).Elem()
}

func (i TableMap) ToTableMapOutput() TableMapOutput {
	return i.ToTableMapOutputWithContext(context.Background())
}

func (i TableMap) ToTableMapOutputWithContext(ctx context.Context) TableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMapOutput)
}

type TableOutput struct{ *pulumi.OutputState }

func (TableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (o TableOutput) ToTableOutput() TableOutput {
	return o
}

func (o TableOutput) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return o
}

// Specifies the configuration of a BigLake managed table. Structure is documented below
func (o TableOutput) BiglakeConfiguration() TableBiglakeConfigurationPtrOutput {
	return o.ApplyT(func(v *Table) TableBiglakeConfigurationPtrOutput { return v.BiglakeConfiguration }).(TableBiglakeConfigurationPtrOutput)
}

// Specifies column names to use for data clustering.
// Up to four top-level columns are allowed, and should be specified in
// descending priority order.
func (o TableOutput) Clusterings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Table) pulumi.StringArrayOutput { return v.Clusterings }).(pulumi.StringArrayOutput)
}

// The time when this table was created, in milliseconds since the epoch.
func (o TableOutput) CreationTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Table) pulumi.IntOutput { return v.CreationTime }).(pulumi.IntOutput)
}

// The dataset ID to create the table in.
// Changing this forces a new resource to be created.
func (o TableOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.DatasetId }).(pulumi.StringOutput)
}

// Whether or not to allow the provider to destroy the instance. Unless this field is set to false
// in state, a `=destroy` or `=update` that would delete the instance will fail.
func (o TableOutput) DeletionProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Table) pulumi.BoolPtrOutput { return v.DeletionProtection }).(pulumi.BoolPtrOutput)
}

// The field description.
func (o TableOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Table) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
//
// * <a name="schema"></a>`schema` - (Optional) A JSON schema for the table.
//
// ~>**NOTE:** Because this field expects a JSON string, any changes to the
// string will create a diff, even if the JSON itself hasn't changed.
// If the API returns a different value for the same schema, e.g. it
// switched the order of values or replaced a field data type (`STRUCT` with
// `RECORD`, `DECIMAL` with `NUMERIC`, etc.), we currently cannot suppress
// the recurring diff this causes. As a workaround, we recommend using the
// schema as returned by the API.
//
// ~>**NOTE:**  If you use `externalDataConfiguration`
// documented below and do **not** set
// `external_data_configuration.connection_id`, schemas must be specified
// with `external_data_configuration.schema`. Otherwise, schemas must be
// specified with this top-level field.
func (o TableOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Table) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Specifies how the table should be encrypted.
// If left blank, the table will be encrypted with a Google-managed key; that process
// is transparent to the user.  Structure is documented below.
func (o TableOutput) EncryptionConfiguration() TableEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *Table) TableEncryptionConfigurationPtrOutput { return v.EncryptionConfiguration }).(TableEncryptionConfigurationPtrOutput)
}

// A hash of the resource.
func (o TableOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The time when this table expires, in
// milliseconds since the epoch. If not present, the table will persist
// indefinitely. Expired tables will be deleted and their storage
// reclaimed.
func (o TableOutput) ExpirationTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Table) pulumi.IntOutput { return v.ExpirationTime }).(pulumi.IntOutput)
}

// Options defining open source
// compatible table. Structure is documented below.
func (o TableOutput) ExternalCatalogTableOptions() TableExternalCatalogTableOptionsPtrOutput {
	return o.ApplyT(func(v *Table) TableExternalCatalogTableOptionsPtrOutput { return v.ExternalCatalogTableOptions }).(TableExternalCatalogTableOptionsPtrOutput)
}

// Describes the data format,
// location, and other properties of a table stored outside of BigQuery.
// By defining these properties, the data source can then be queried as
// if it were a standard BigQuery table. Structure is documented below.
func (o TableOutput) ExternalDataConfiguration() TableExternalDataConfigurationPtrOutput {
	return o.ApplyT(func(v *Table) TableExternalDataConfigurationPtrOutput { return v.ExternalDataConfiguration }).(TableExternalDataConfigurationPtrOutput)
}

// A descriptive name for the table.
func (o TableOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Table) pulumi.StringPtrOutput { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// A list of fields which should be ignored for each column in schema.
// **NOTE:** Right now only `dataPolicies` field is supported. We might support others in the future.
func (o TableOutput) IgnoreSchemaChanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Table) pulumi.StringArrayOutput { return v.IgnoreSchemaChanges }).(pulumi.StringArrayOutput)
}

// A mapping of labels to assign to the resource.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field 'effective_labels' for all of the labels present on the resource.
func (o TableOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Table) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The time when this table was last modified, in milliseconds since the epoch.
func (o TableOutput) LastModifiedTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Table) pulumi.IntOutput { return v.LastModifiedTime }).(pulumi.IntOutput)
}

// The geographic location where the table resides. This value is inherited from the dataset.
func (o TableOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// If specified, configures this table as a materialized view.
// Structure is documented below.
func (o TableOutput) MaterializedView() TableMaterializedViewPtrOutput {
	return o.ApplyT(func(v *Table) TableMaterializedViewPtrOutput { return v.MaterializedView }).(TableMaterializedViewPtrOutput)
}

// The maximum staleness of data that could be
// returned when the table (or stale MV) is queried. Staleness encoded as a
// string encoding of [SQL IntervalValue
// type](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#interval_type).
func (o TableOutput) MaxStaleness() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.MaxStaleness }).(pulumi.StringOutput)
}

// The size of this table in bytes, excluding any data in the streaming buffer.
func (o TableOutput) NumBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *Table) pulumi.IntOutput { return v.NumBytes }).(pulumi.IntOutput)
}

// The number of bytes in the table that are considered "long-term storage".
func (o TableOutput) NumLongTermBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *Table) pulumi.IntOutput { return v.NumLongTermBytes }).(pulumi.IntOutput)
}

// The number of rows of data in this table, excluding any data in the streaming buffer.
func (o TableOutput) NumRows() pulumi.IntOutput {
	return o.ApplyT(func(v *Table) pulumi.IntOutput { return v.NumRows }).(pulumi.IntOutput)
}

// The ID of the project in which the resource belongs. If it
// is not provided, the provider project is used.
func (o TableOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource and default labels configured on the provider.
func (o TableOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Table) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// If specified, configures range-based
// partitioning for this table. Structure is documented below.
func (o TableOutput) RangePartitioning() TableRangePartitioningPtrOutput {
	return o.ApplyT(func(v *Table) TableRangePartitioningPtrOutput { return v.RangePartitioning }).(TableRangePartitioningPtrOutput)
}

// If set to true, queries over this table
// require a partition filter that can be used for partition elimination to be
// specified.
func (o TableOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Table) pulumi.BoolPtrOutput { return v.RequirePartitionFilter }).(pulumi.BoolPtrOutput)
}

// The tags attached to this table. Tag keys are
// globally unique. Tag key is expected to be in the namespaced format, for
// example "123456789012/environment" where 123456789012 is the ID of the
// parent organization or project resource for this tag key. Tag value is
// expected to be the short name, for example "Production". See [Tag definitions](https://cloud.google.com/iam/docs/tags-access-control#definitions)
// for more details.
func (o TableOutput) ResourceTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Table) pulumi.StringMapOutput { return v.ResourceTags }).(pulumi.StringMapOutput)
}

// A JSON schema for the table.
func (o TableOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Specifies metadata of the foreign data
// type definition in field schema. Structure is documented below.
func (o TableOutput) SchemaForeignTypeInfo() TableSchemaForeignTypeInfoPtrOutput {
	return o.ApplyT(func(v *Table) TableSchemaForeignTypeInfoPtrOutput { return v.SchemaForeignTypeInfo }).(TableSchemaForeignTypeInfoPtrOutput)
}

// The URI of the created resource.
func (o TableOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Defines the primary key and foreign keys.
// Structure is documented below.
func (o TableOutput) TableConstraints() TableTableConstraintsPtrOutput {
	return o.ApplyT(func(v *Table) TableTableConstraintsPtrOutput { return v.TableConstraints }).(TableTableConstraintsPtrOutput)
}

// A unique ID for the resource.
// Changing this forces a new resource to be created.
func (o TableOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.TableId }).(pulumi.StringOutput)
}

// View sets the optional parameter "view": Specifies the view that determines which table information is returned. By
// default, basic table information and storage statistics (STORAGE_STATS) are returned. Possible values:
// TABLE_METADATA_VIEW_UNSPECIFIED, BASIC, STORAGE_STATS, FULL
func (o TableOutput) TableMetadataView() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Table) pulumi.StringPtrOutput { return v.TableMetadataView }).(pulumi.StringPtrOutput)
}

// Replication info of a table created
// using "AS REPLICA" DDL like:
// `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF srcMv`.
// Structure is documented below.
func (o TableOutput) TableReplicationInfo() TableTableReplicationInfoPtrOutput {
	return o.ApplyT(func(v *Table) TableTableReplicationInfoPtrOutput { return v.TableReplicationInfo }).(TableTableReplicationInfoPtrOutput)
}

// If specified, configures time-based
// partitioning for this table. Structure is documented below.
func (o TableOutput) TimePartitioning() TableTimePartitioningPtrOutput {
	return o.ApplyT(func(v *Table) TableTimePartitioningPtrOutput { return v.TimePartitioning }).(TableTimePartitioningPtrOutput)
}

// Describes the table type.
func (o TableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// If specified, configures this table as a view.
// Structure is documented below.
func (o TableOutput) View() TableViewPtrOutput {
	return o.ApplyT(func(v *Table) TableViewPtrOutput { return v.View }).(TableViewPtrOutput)
}

type TableArrayOutput struct{ *pulumi.OutputState }

func (TableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Table)(nil)).Elem()
}

func (o TableArrayOutput) ToTableArrayOutput() TableArrayOutput {
	return o
}

func (o TableArrayOutput) ToTableArrayOutputWithContext(ctx context.Context) TableArrayOutput {
	return o
}

func (o TableArrayOutput) Index(i pulumi.IntInput) TableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Table {
		return vs[0].([]*Table)[vs[1].(int)]
	}).(TableOutput)
}

type TableMapOutput struct{ *pulumi.OutputState }

func (TableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Table)(nil)).Elem()
}

func (o TableMapOutput) ToTableMapOutput() TableMapOutput {
	return o
}

func (o TableMapOutput) ToTableMapOutputWithContext(ctx context.Context) TableMapOutput {
	return o
}

func (o TableMapOutput) MapIndex(k pulumi.StringInput) TableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Table {
		return vs[0].(map[string]*Table)[vs[1].(string)]
	}).(TableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableInput)(nil)).Elem(), &Table{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableArrayInput)(nil)).Elem(), TableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableMapInput)(nil)).Elem(), TableMap{})
	pulumi.RegisterOutputType(TableOutput{})
	pulumi.RegisterOutputType(TableArrayOutput{})
	pulumi.RegisterOutputType(TableMapOutput{})
}
