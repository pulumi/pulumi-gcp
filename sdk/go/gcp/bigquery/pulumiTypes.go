// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AppProfileSingleClusterRouting struct {
	// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
	// It is unsafe to send these requests to the same table/row/column in multiple clusters.
	AllowTransactionalWrites *bool `pulumi:"allowTransactionalWrites"`
	// The cluster to which read/write requests should be routed.
	ClusterId string `pulumi:"clusterId"`
}

// AppProfileSingleClusterRoutingInput is an input type that accepts AppProfileSingleClusterRoutingArgs and AppProfileSingleClusterRoutingOutput values.
// You can construct a concrete instance of `AppProfileSingleClusterRoutingInput` via:
//
//	AppProfileSingleClusterRoutingArgs{...}
type AppProfileSingleClusterRoutingInput interface {
	pulumi.Input

	ToAppProfileSingleClusterRoutingOutput() AppProfileSingleClusterRoutingOutput
	ToAppProfileSingleClusterRoutingOutputWithContext(context.Context) AppProfileSingleClusterRoutingOutput
}

type AppProfileSingleClusterRoutingArgs struct {
	// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
	// It is unsafe to send these requests to the same table/row/column in multiple clusters.
	AllowTransactionalWrites pulumi.BoolPtrInput `pulumi:"allowTransactionalWrites"`
	// The cluster to which read/write requests should be routed.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
}

func (AppProfileSingleClusterRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProfileSingleClusterRouting)(nil)).Elem()
}

func (i AppProfileSingleClusterRoutingArgs) ToAppProfileSingleClusterRoutingOutput() AppProfileSingleClusterRoutingOutput {
	return i.ToAppProfileSingleClusterRoutingOutputWithContext(context.Background())
}

func (i AppProfileSingleClusterRoutingArgs) ToAppProfileSingleClusterRoutingOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProfileSingleClusterRoutingOutput)
}

func (i AppProfileSingleClusterRoutingArgs) ToAppProfileSingleClusterRoutingPtrOutput() AppProfileSingleClusterRoutingPtrOutput {
	return i.ToAppProfileSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (i AppProfileSingleClusterRoutingArgs) ToAppProfileSingleClusterRoutingPtrOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProfileSingleClusterRoutingOutput).ToAppProfileSingleClusterRoutingPtrOutputWithContext(ctx)
}

// AppProfileSingleClusterRoutingPtrInput is an input type that accepts AppProfileSingleClusterRoutingArgs, AppProfileSingleClusterRoutingPtr and AppProfileSingleClusterRoutingPtrOutput values.
// You can construct a concrete instance of `AppProfileSingleClusterRoutingPtrInput` via:
//
//	        AppProfileSingleClusterRoutingArgs{...}
//
//	or:
//
//	        nil
type AppProfileSingleClusterRoutingPtrInput interface {
	pulumi.Input

	ToAppProfileSingleClusterRoutingPtrOutput() AppProfileSingleClusterRoutingPtrOutput
	ToAppProfileSingleClusterRoutingPtrOutputWithContext(context.Context) AppProfileSingleClusterRoutingPtrOutput
}

type appProfileSingleClusterRoutingPtrType AppProfileSingleClusterRoutingArgs

func AppProfileSingleClusterRoutingPtr(v *AppProfileSingleClusterRoutingArgs) AppProfileSingleClusterRoutingPtrInput {
	return (*appProfileSingleClusterRoutingPtrType)(v)
}

func (*appProfileSingleClusterRoutingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProfileSingleClusterRouting)(nil)).Elem()
}

func (i *appProfileSingleClusterRoutingPtrType) ToAppProfileSingleClusterRoutingPtrOutput() AppProfileSingleClusterRoutingPtrOutput {
	return i.ToAppProfileSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (i *appProfileSingleClusterRoutingPtrType) ToAppProfileSingleClusterRoutingPtrOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProfileSingleClusterRoutingPtrOutput)
}

type AppProfileSingleClusterRoutingOutput struct{ *pulumi.OutputState }

func (AppProfileSingleClusterRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProfileSingleClusterRouting)(nil)).Elem()
}

func (o AppProfileSingleClusterRoutingOutput) ToAppProfileSingleClusterRoutingOutput() AppProfileSingleClusterRoutingOutput {
	return o
}

func (o AppProfileSingleClusterRoutingOutput) ToAppProfileSingleClusterRoutingOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingOutput {
	return o
}

func (o AppProfileSingleClusterRoutingOutput) ToAppProfileSingleClusterRoutingPtrOutput() AppProfileSingleClusterRoutingPtrOutput {
	return o.ToAppProfileSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (o AppProfileSingleClusterRoutingOutput) ToAppProfileSingleClusterRoutingPtrOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppProfileSingleClusterRouting) *AppProfileSingleClusterRouting {
		return &v
	}).(AppProfileSingleClusterRoutingPtrOutput)
}

// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
// It is unsafe to send these requests to the same table/row/column in multiple clusters.
func (o AppProfileSingleClusterRoutingOutput) AllowTransactionalWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRouting) *bool { return v.AllowTransactionalWrites }).(pulumi.BoolPtrOutput)
}

// The cluster to which read/write requests should be routed.
func (o AppProfileSingleClusterRoutingOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRouting) string { return v.ClusterId }).(pulumi.StringOutput)
}

type AppProfileSingleClusterRoutingPtrOutput struct{ *pulumi.OutputState }

func (AppProfileSingleClusterRoutingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProfileSingleClusterRouting)(nil)).Elem()
}

func (o AppProfileSingleClusterRoutingPtrOutput) ToAppProfileSingleClusterRoutingPtrOutput() AppProfileSingleClusterRoutingPtrOutput {
	return o
}

func (o AppProfileSingleClusterRoutingPtrOutput) ToAppProfileSingleClusterRoutingPtrOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingPtrOutput {
	return o
}

func (o AppProfileSingleClusterRoutingPtrOutput) Elem() AppProfileSingleClusterRoutingOutput {
	return o.ApplyT(func(v *AppProfileSingleClusterRouting) AppProfileSingleClusterRouting {
		if v != nil {
			return *v
		}
		var ret AppProfileSingleClusterRouting
		return ret
	}).(AppProfileSingleClusterRoutingOutput)
}

// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
// It is unsafe to send these requests to the same table/row/column in multiple clusters.
func (o AppProfileSingleClusterRoutingPtrOutput) AllowTransactionalWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppProfileSingleClusterRouting) *bool {
		if v == nil {
			return nil
		}
		return v.AllowTransactionalWrites
	}).(pulumi.BoolPtrOutput)
}

// The cluster to which read/write requests should be routed.
func (o AppProfileSingleClusterRoutingPtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppProfileSingleClusterRouting) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterId
	}).(pulumi.StringPtrOutput)
}

type ConnectionAws struct {
	// Authentication using Google owned service account to assume into customer's AWS IAM Role.
	// Structure is documented below.
	AccessRole ConnectionAwsAccessRole `pulumi:"accessRole"`
}

// ConnectionAwsInput is an input type that accepts ConnectionAwsArgs and ConnectionAwsOutput values.
// You can construct a concrete instance of `ConnectionAwsInput` via:
//
//	ConnectionAwsArgs{...}
type ConnectionAwsInput interface {
	pulumi.Input

	ToConnectionAwsOutput() ConnectionAwsOutput
	ToConnectionAwsOutputWithContext(context.Context) ConnectionAwsOutput
}

type ConnectionAwsArgs struct {
	// Authentication using Google owned service account to assume into customer's AWS IAM Role.
	// Structure is documented below.
	AccessRole ConnectionAwsAccessRoleInput `pulumi:"accessRole"`
}

func (ConnectionAwsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionAws)(nil)).Elem()
}

func (i ConnectionAwsArgs) ToConnectionAwsOutput() ConnectionAwsOutput {
	return i.ToConnectionAwsOutputWithContext(context.Background())
}

func (i ConnectionAwsArgs) ToConnectionAwsOutputWithContext(ctx context.Context) ConnectionAwsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionAwsOutput)
}

func (i ConnectionAwsArgs) ToConnectionAwsPtrOutput() ConnectionAwsPtrOutput {
	return i.ToConnectionAwsPtrOutputWithContext(context.Background())
}

func (i ConnectionAwsArgs) ToConnectionAwsPtrOutputWithContext(ctx context.Context) ConnectionAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionAwsOutput).ToConnectionAwsPtrOutputWithContext(ctx)
}

// ConnectionAwsPtrInput is an input type that accepts ConnectionAwsArgs, ConnectionAwsPtr and ConnectionAwsPtrOutput values.
// You can construct a concrete instance of `ConnectionAwsPtrInput` via:
//
//	        ConnectionAwsArgs{...}
//
//	or:
//
//	        nil
type ConnectionAwsPtrInput interface {
	pulumi.Input

	ToConnectionAwsPtrOutput() ConnectionAwsPtrOutput
	ToConnectionAwsPtrOutputWithContext(context.Context) ConnectionAwsPtrOutput
}

type connectionAwsPtrType ConnectionAwsArgs

func ConnectionAwsPtr(v *ConnectionAwsArgs) ConnectionAwsPtrInput {
	return (*connectionAwsPtrType)(v)
}

func (*connectionAwsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionAws)(nil)).Elem()
}

func (i *connectionAwsPtrType) ToConnectionAwsPtrOutput() ConnectionAwsPtrOutput {
	return i.ToConnectionAwsPtrOutputWithContext(context.Background())
}

func (i *connectionAwsPtrType) ToConnectionAwsPtrOutputWithContext(ctx context.Context) ConnectionAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionAwsPtrOutput)
}

type ConnectionAwsOutput struct{ *pulumi.OutputState }

func (ConnectionAwsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionAws)(nil)).Elem()
}

func (o ConnectionAwsOutput) ToConnectionAwsOutput() ConnectionAwsOutput {
	return o
}

func (o ConnectionAwsOutput) ToConnectionAwsOutputWithContext(ctx context.Context) ConnectionAwsOutput {
	return o
}

func (o ConnectionAwsOutput) ToConnectionAwsPtrOutput() ConnectionAwsPtrOutput {
	return o.ToConnectionAwsPtrOutputWithContext(context.Background())
}

func (o ConnectionAwsOutput) ToConnectionAwsPtrOutputWithContext(ctx context.Context) ConnectionAwsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionAws) *ConnectionAws {
		return &v
	}).(ConnectionAwsPtrOutput)
}

// Authentication using Google owned service account to assume into customer's AWS IAM Role.
// Structure is documented below.
func (o ConnectionAwsOutput) AccessRole() ConnectionAwsAccessRoleOutput {
	return o.ApplyT(func(v ConnectionAws) ConnectionAwsAccessRole { return v.AccessRole }).(ConnectionAwsAccessRoleOutput)
}

type ConnectionAwsPtrOutput struct{ *pulumi.OutputState }

func (ConnectionAwsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionAws)(nil)).Elem()
}

func (o ConnectionAwsPtrOutput) ToConnectionAwsPtrOutput() ConnectionAwsPtrOutput {
	return o
}

func (o ConnectionAwsPtrOutput) ToConnectionAwsPtrOutputWithContext(ctx context.Context) ConnectionAwsPtrOutput {
	return o
}

func (o ConnectionAwsPtrOutput) Elem() ConnectionAwsOutput {
	return o.ApplyT(func(v *ConnectionAws) ConnectionAws {
		if v != nil {
			return *v
		}
		var ret ConnectionAws
		return ret
	}).(ConnectionAwsOutput)
}

// Authentication using Google owned service account to assume into customer's AWS IAM Role.
// Structure is documented below.
func (o ConnectionAwsPtrOutput) AccessRole() ConnectionAwsAccessRolePtrOutput {
	return o.ApplyT(func(v *ConnectionAws) *ConnectionAwsAccessRole {
		if v == nil {
			return nil
		}
		return &v.AccessRole
	}).(ConnectionAwsAccessRolePtrOutput)
}

type ConnectionAwsAccessRole struct {
	// The user’s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
	IamRoleId string `pulumi:"iamRoleId"`
	// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's AWS IAM Role.
	Identity *string `pulumi:"identity"`
}

// ConnectionAwsAccessRoleInput is an input type that accepts ConnectionAwsAccessRoleArgs and ConnectionAwsAccessRoleOutput values.
// You can construct a concrete instance of `ConnectionAwsAccessRoleInput` via:
//
//	ConnectionAwsAccessRoleArgs{...}
type ConnectionAwsAccessRoleInput interface {
	pulumi.Input

	ToConnectionAwsAccessRoleOutput() ConnectionAwsAccessRoleOutput
	ToConnectionAwsAccessRoleOutputWithContext(context.Context) ConnectionAwsAccessRoleOutput
}

type ConnectionAwsAccessRoleArgs struct {
	// The user’s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
	IamRoleId pulumi.StringInput `pulumi:"iamRoleId"`
	// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's AWS IAM Role.
	Identity pulumi.StringPtrInput `pulumi:"identity"`
}

func (ConnectionAwsAccessRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionAwsAccessRole)(nil)).Elem()
}

func (i ConnectionAwsAccessRoleArgs) ToConnectionAwsAccessRoleOutput() ConnectionAwsAccessRoleOutput {
	return i.ToConnectionAwsAccessRoleOutputWithContext(context.Background())
}

func (i ConnectionAwsAccessRoleArgs) ToConnectionAwsAccessRoleOutputWithContext(ctx context.Context) ConnectionAwsAccessRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionAwsAccessRoleOutput)
}

func (i ConnectionAwsAccessRoleArgs) ToConnectionAwsAccessRolePtrOutput() ConnectionAwsAccessRolePtrOutput {
	return i.ToConnectionAwsAccessRolePtrOutputWithContext(context.Background())
}

func (i ConnectionAwsAccessRoleArgs) ToConnectionAwsAccessRolePtrOutputWithContext(ctx context.Context) ConnectionAwsAccessRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionAwsAccessRoleOutput).ToConnectionAwsAccessRolePtrOutputWithContext(ctx)
}

// ConnectionAwsAccessRolePtrInput is an input type that accepts ConnectionAwsAccessRoleArgs, ConnectionAwsAccessRolePtr and ConnectionAwsAccessRolePtrOutput values.
// You can construct a concrete instance of `ConnectionAwsAccessRolePtrInput` via:
//
//	        ConnectionAwsAccessRoleArgs{...}
//
//	or:
//
//	        nil
type ConnectionAwsAccessRolePtrInput interface {
	pulumi.Input

	ToConnectionAwsAccessRolePtrOutput() ConnectionAwsAccessRolePtrOutput
	ToConnectionAwsAccessRolePtrOutputWithContext(context.Context) ConnectionAwsAccessRolePtrOutput
}

type connectionAwsAccessRolePtrType ConnectionAwsAccessRoleArgs

func ConnectionAwsAccessRolePtr(v *ConnectionAwsAccessRoleArgs) ConnectionAwsAccessRolePtrInput {
	return (*connectionAwsAccessRolePtrType)(v)
}

func (*connectionAwsAccessRolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionAwsAccessRole)(nil)).Elem()
}

func (i *connectionAwsAccessRolePtrType) ToConnectionAwsAccessRolePtrOutput() ConnectionAwsAccessRolePtrOutput {
	return i.ToConnectionAwsAccessRolePtrOutputWithContext(context.Background())
}

func (i *connectionAwsAccessRolePtrType) ToConnectionAwsAccessRolePtrOutputWithContext(ctx context.Context) ConnectionAwsAccessRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionAwsAccessRolePtrOutput)
}

type ConnectionAwsAccessRoleOutput struct{ *pulumi.OutputState }

func (ConnectionAwsAccessRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionAwsAccessRole)(nil)).Elem()
}

func (o ConnectionAwsAccessRoleOutput) ToConnectionAwsAccessRoleOutput() ConnectionAwsAccessRoleOutput {
	return o
}

func (o ConnectionAwsAccessRoleOutput) ToConnectionAwsAccessRoleOutputWithContext(ctx context.Context) ConnectionAwsAccessRoleOutput {
	return o
}

func (o ConnectionAwsAccessRoleOutput) ToConnectionAwsAccessRolePtrOutput() ConnectionAwsAccessRolePtrOutput {
	return o.ToConnectionAwsAccessRolePtrOutputWithContext(context.Background())
}

func (o ConnectionAwsAccessRoleOutput) ToConnectionAwsAccessRolePtrOutputWithContext(ctx context.Context) ConnectionAwsAccessRolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionAwsAccessRole) *ConnectionAwsAccessRole {
		return &v
	}).(ConnectionAwsAccessRolePtrOutput)
}

// The user’s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
func (o ConnectionAwsAccessRoleOutput) IamRoleId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionAwsAccessRole) string { return v.IamRoleId }).(pulumi.StringOutput)
}

// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's AWS IAM Role.
func (o ConnectionAwsAccessRoleOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionAwsAccessRole) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

type ConnectionAwsAccessRolePtrOutput struct{ *pulumi.OutputState }

func (ConnectionAwsAccessRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionAwsAccessRole)(nil)).Elem()
}

func (o ConnectionAwsAccessRolePtrOutput) ToConnectionAwsAccessRolePtrOutput() ConnectionAwsAccessRolePtrOutput {
	return o
}

func (o ConnectionAwsAccessRolePtrOutput) ToConnectionAwsAccessRolePtrOutputWithContext(ctx context.Context) ConnectionAwsAccessRolePtrOutput {
	return o
}

func (o ConnectionAwsAccessRolePtrOutput) Elem() ConnectionAwsAccessRoleOutput {
	return o.ApplyT(func(v *ConnectionAwsAccessRole) ConnectionAwsAccessRole {
		if v != nil {
			return *v
		}
		var ret ConnectionAwsAccessRole
		return ret
	}).(ConnectionAwsAccessRoleOutput)
}

// The user’s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
func (o ConnectionAwsAccessRolePtrOutput) IamRoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionAwsAccessRole) *string {
		if v == nil {
			return nil
		}
		return &v.IamRoleId
	}).(pulumi.StringPtrOutput)
}

// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's AWS IAM Role.
func (o ConnectionAwsAccessRolePtrOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionAwsAccessRole) *string {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(pulumi.StringPtrOutput)
}

type ConnectionAzure struct {
	// The name of the Azure Active Directory Application.
	Application *string `pulumi:"application"`
	// The client id of the Azure Active Directory Application.
	ClientId *string `pulumi:"clientId"`
	// The id of customer's directory that host the data.
	CustomerTenantId string `pulumi:"customerTenantId"`
	// The Azure Application (client) ID where the federated credentials will be hosted.
	FederatedApplicationClientId *string `pulumi:"federatedApplicationClientId"`
	// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's Azure Active Directory Application.
	Identity *string `pulumi:"identity"`
	// The object id of the Azure Active Directory Application.
	ObjectId *string `pulumi:"objectId"`
	// The URL user will be redirected to after granting consent during connection setup.
	RedirectUri *string `pulumi:"redirectUri"`
}

// ConnectionAzureInput is an input type that accepts ConnectionAzureArgs and ConnectionAzureOutput values.
// You can construct a concrete instance of `ConnectionAzureInput` via:
//
//	ConnectionAzureArgs{...}
type ConnectionAzureInput interface {
	pulumi.Input

	ToConnectionAzureOutput() ConnectionAzureOutput
	ToConnectionAzureOutputWithContext(context.Context) ConnectionAzureOutput
}

type ConnectionAzureArgs struct {
	// The name of the Azure Active Directory Application.
	Application pulumi.StringPtrInput `pulumi:"application"`
	// The client id of the Azure Active Directory Application.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The id of customer's directory that host the data.
	CustomerTenantId pulumi.StringInput `pulumi:"customerTenantId"`
	// The Azure Application (client) ID where the federated credentials will be hosted.
	FederatedApplicationClientId pulumi.StringPtrInput `pulumi:"federatedApplicationClientId"`
	// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's Azure Active Directory Application.
	Identity pulumi.StringPtrInput `pulumi:"identity"`
	// The object id of the Azure Active Directory Application.
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
	// The URL user will be redirected to after granting consent during connection setup.
	RedirectUri pulumi.StringPtrInput `pulumi:"redirectUri"`
}

func (ConnectionAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionAzure)(nil)).Elem()
}

func (i ConnectionAzureArgs) ToConnectionAzureOutput() ConnectionAzureOutput {
	return i.ToConnectionAzureOutputWithContext(context.Background())
}

func (i ConnectionAzureArgs) ToConnectionAzureOutputWithContext(ctx context.Context) ConnectionAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionAzureOutput)
}

func (i ConnectionAzureArgs) ToConnectionAzurePtrOutput() ConnectionAzurePtrOutput {
	return i.ToConnectionAzurePtrOutputWithContext(context.Background())
}

func (i ConnectionAzureArgs) ToConnectionAzurePtrOutputWithContext(ctx context.Context) ConnectionAzurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionAzureOutput).ToConnectionAzurePtrOutputWithContext(ctx)
}

// ConnectionAzurePtrInput is an input type that accepts ConnectionAzureArgs, ConnectionAzurePtr and ConnectionAzurePtrOutput values.
// You can construct a concrete instance of `ConnectionAzurePtrInput` via:
//
//	        ConnectionAzureArgs{...}
//
//	or:
//
//	        nil
type ConnectionAzurePtrInput interface {
	pulumi.Input

	ToConnectionAzurePtrOutput() ConnectionAzurePtrOutput
	ToConnectionAzurePtrOutputWithContext(context.Context) ConnectionAzurePtrOutput
}

type connectionAzurePtrType ConnectionAzureArgs

func ConnectionAzurePtr(v *ConnectionAzureArgs) ConnectionAzurePtrInput {
	return (*connectionAzurePtrType)(v)
}

func (*connectionAzurePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionAzure)(nil)).Elem()
}

func (i *connectionAzurePtrType) ToConnectionAzurePtrOutput() ConnectionAzurePtrOutput {
	return i.ToConnectionAzurePtrOutputWithContext(context.Background())
}

func (i *connectionAzurePtrType) ToConnectionAzurePtrOutputWithContext(ctx context.Context) ConnectionAzurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionAzurePtrOutput)
}

type ConnectionAzureOutput struct{ *pulumi.OutputState }

func (ConnectionAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionAzure)(nil)).Elem()
}

func (o ConnectionAzureOutput) ToConnectionAzureOutput() ConnectionAzureOutput {
	return o
}

func (o ConnectionAzureOutput) ToConnectionAzureOutputWithContext(ctx context.Context) ConnectionAzureOutput {
	return o
}

func (o ConnectionAzureOutput) ToConnectionAzurePtrOutput() ConnectionAzurePtrOutput {
	return o.ToConnectionAzurePtrOutputWithContext(context.Background())
}

func (o ConnectionAzureOutput) ToConnectionAzurePtrOutputWithContext(ctx context.Context) ConnectionAzurePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionAzure) *ConnectionAzure {
		return &v
	}).(ConnectionAzurePtrOutput)
}

// The name of the Azure Active Directory Application.
func (o ConnectionAzureOutput) Application() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionAzure) *string { return v.Application }).(pulumi.StringPtrOutput)
}

// The client id of the Azure Active Directory Application.
func (o ConnectionAzureOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionAzure) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The id of customer's directory that host the data.
func (o ConnectionAzureOutput) CustomerTenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionAzure) string { return v.CustomerTenantId }).(pulumi.StringOutput)
}

// The Azure Application (client) ID where the federated credentials will be hosted.
func (o ConnectionAzureOutput) FederatedApplicationClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionAzure) *string { return v.FederatedApplicationClientId }).(pulumi.StringPtrOutput)
}

// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's Azure Active Directory Application.
func (o ConnectionAzureOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionAzure) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// The object id of the Azure Active Directory Application.
func (o ConnectionAzureOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionAzure) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// The URL user will be redirected to after granting consent during connection setup.
func (o ConnectionAzureOutput) RedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionAzure) *string { return v.RedirectUri }).(pulumi.StringPtrOutput)
}

type ConnectionAzurePtrOutput struct{ *pulumi.OutputState }

func (ConnectionAzurePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionAzure)(nil)).Elem()
}

func (o ConnectionAzurePtrOutput) ToConnectionAzurePtrOutput() ConnectionAzurePtrOutput {
	return o
}

func (o ConnectionAzurePtrOutput) ToConnectionAzurePtrOutputWithContext(ctx context.Context) ConnectionAzurePtrOutput {
	return o
}

func (o ConnectionAzurePtrOutput) Elem() ConnectionAzureOutput {
	return o.ApplyT(func(v *ConnectionAzure) ConnectionAzure {
		if v != nil {
			return *v
		}
		var ret ConnectionAzure
		return ret
	}).(ConnectionAzureOutput)
}

// The name of the Azure Active Directory Application.
func (o ConnectionAzurePtrOutput) Application() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionAzure) *string {
		if v == nil {
			return nil
		}
		return v.Application
	}).(pulumi.StringPtrOutput)
}

// The client id of the Azure Active Directory Application.
func (o ConnectionAzurePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionAzure) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The id of customer's directory that host the data.
func (o ConnectionAzurePtrOutput) CustomerTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionAzure) *string {
		if v == nil {
			return nil
		}
		return &v.CustomerTenantId
	}).(pulumi.StringPtrOutput)
}

// The Azure Application (client) ID where the federated credentials will be hosted.
func (o ConnectionAzurePtrOutput) FederatedApplicationClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionAzure) *string {
		if v == nil {
			return nil
		}
		return v.FederatedApplicationClientId
	}).(pulumi.StringPtrOutput)
}

// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's Azure Active Directory Application.
func (o ConnectionAzurePtrOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionAzure) *string {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(pulumi.StringPtrOutput)
}

// The object id of the Azure Active Directory Application.
func (o ConnectionAzurePtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionAzure) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// The URL user will be redirected to after granting consent during connection setup.
func (o ConnectionAzurePtrOutput) RedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionAzure) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUri
	}).(pulumi.StringPtrOutput)
}

type ConnectionCloudResource struct {
	// The account ID of the service created for the purpose of this connection.
	ServiceAccountId *string `pulumi:"serviceAccountId"`
}

// ConnectionCloudResourceInput is an input type that accepts ConnectionCloudResourceArgs and ConnectionCloudResourceOutput values.
// You can construct a concrete instance of `ConnectionCloudResourceInput` via:
//
//	ConnectionCloudResourceArgs{...}
type ConnectionCloudResourceInput interface {
	pulumi.Input

	ToConnectionCloudResourceOutput() ConnectionCloudResourceOutput
	ToConnectionCloudResourceOutputWithContext(context.Context) ConnectionCloudResourceOutput
}

type ConnectionCloudResourceArgs struct {
	// The account ID of the service created for the purpose of this connection.
	ServiceAccountId pulumi.StringPtrInput `pulumi:"serviceAccountId"`
}

func (ConnectionCloudResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionCloudResource)(nil)).Elem()
}

func (i ConnectionCloudResourceArgs) ToConnectionCloudResourceOutput() ConnectionCloudResourceOutput {
	return i.ToConnectionCloudResourceOutputWithContext(context.Background())
}

func (i ConnectionCloudResourceArgs) ToConnectionCloudResourceOutputWithContext(ctx context.Context) ConnectionCloudResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionCloudResourceOutput)
}

func (i ConnectionCloudResourceArgs) ToConnectionCloudResourcePtrOutput() ConnectionCloudResourcePtrOutput {
	return i.ToConnectionCloudResourcePtrOutputWithContext(context.Background())
}

func (i ConnectionCloudResourceArgs) ToConnectionCloudResourcePtrOutputWithContext(ctx context.Context) ConnectionCloudResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionCloudResourceOutput).ToConnectionCloudResourcePtrOutputWithContext(ctx)
}

// ConnectionCloudResourcePtrInput is an input type that accepts ConnectionCloudResourceArgs, ConnectionCloudResourcePtr and ConnectionCloudResourcePtrOutput values.
// You can construct a concrete instance of `ConnectionCloudResourcePtrInput` via:
//
//	        ConnectionCloudResourceArgs{...}
//
//	or:
//
//	        nil
type ConnectionCloudResourcePtrInput interface {
	pulumi.Input

	ToConnectionCloudResourcePtrOutput() ConnectionCloudResourcePtrOutput
	ToConnectionCloudResourcePtrOutputWithContext(context.Context) ConnectionCloudResourcePtrOutput
}

type connectionCloudResourcePtrType ConnectionCloudResourceArgs

func ConnectionCloudResourcePtr(v *ConnectionCloudResourceArgs) ConnectionCloudResourcePtrInput {
	return (*connectionCloudResourcePtrType)(v)
}

func (*connectionCloudResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionCloudResource)(nil)).Elem()
}

func (i *connectionCloudResourcePtrType) ToConnectionCloudResourcePtrOutput() ConnectionCloudResourcePtrOutput {
	return i.ToConnectionCloudResourcePtrOutputWithContext(context.Background())
}

func (i *connectionCloudResourcePtrType) ToConnectionCloudResourcePtrOutputWithContext(ctx context.Context) ConnectionCloudResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionCloudResourcePtrOutput)
}

type ConnectionCloudResourceOutput struct{ *pulumi.OutputState }

func (ConnectionCloudResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionCloudResource)(nil)).Elem()
}

func (o ConnectionCloudResourceOutput) ToConnectionCloudResourceOutput() ConnectionCloudResourceOutput {
	return o
}

func (o ConnectionCloudResourceOutput) ToConnectionCloudResourceOutputWithContext(ctx context.Context) ConnectionCloudResourceOutput {
	return o
}

func (o ConnectionCloudResourceOutput) ToConnectionCloudResourcePtrOutput() ConnectionCloudResourcePtrOutput {
	return o.ToConnectionCloudResourcePtrOutputWithContext(context.Background())
}

func (o ConnectionCloudResourceOutput) ToConnectionCloudResourcePtrOutputWithContext(ctx context.Context) ConnectionCloudResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionCloudResource) *ConnectionCloudResource {
		return &v
	}).(ConnectionCloudResourcePtrOutput)
}

// The account ID of the service created for the purpose of this connection.
func (o ConnectionCloudResourceOutput) ServiceAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionCloudResource) *string { return v.ServiceAccountId }).(pulumi.StringPtrOutput)
}

type ConnectionCloudResourcePtrOutput struct{ *pulumi.OutputState }

func (ConnectionCloudResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionCloudResource)(nil)).Elem()
}

func (o ConnectionCloudResourcePtrOutput) ToConnectionCloudResourcePtrOutput() ConnectionCloudResourcePtrOutput {
	return o
}

func (o ConnectionCloudResourcePtrOutput) ToConnectionCloudResourcePtrOutputWithContext(ctx context.Context) ConnectionCloudResourcePtrOutput {
	return o
}

func (o ConnectionCloudResourcePtrOutput) Elem() ConnectionCloudResourceOutput {
	return o.ApplyT(func(v *ConnectionCloudResource) ConnectionCloudResource {
		if v != nil {
			return *v
		}
		var ret ConnectionCloudResource
		return ret
	}).(ConnectionCloudResourceOutput)
}

// The account ID of the service created for the purpose of this connection.
func (o ConnectionCloudResourcePtrOutput) ServiceAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionCloudResource) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountId
	}).(pulumi.StringPtrOutput)
}

type ConnectionCloudSpanner struct {
	// Cloud Spanner database in the form `project/instance/database'
	Database string `pulumi:"database"`
	// If parallelism should be used when reading from Cloud Spanner
	UseParallelism *bool `pulumi:"useParallelism"`
	// If the serverless analytics service should be used to read data from Cloud Spanner. useParallelism must be set when using serverless analytics
	UseServerlessAnalytics *bool `pulumi:"useServerlessAnalytics"`
}

// ConnectionCloudSpannerInput is an input type that accepts ConnectionCloudSpannerArgs and ConnectionCloudSpannerOutput values.
// You can construct a concrete instance of `ConnectionCloudSpannerInput` via:
//
//	ConnectionCloudSpannerArgs{...}
type ConnectionCloudSpannerInput interface {
	pulumi.Input

	ToConnectionCloudSpannerOutput() ConnectionCloudSpannerOutput
	ToConnectionCloudSpannerOutputWithContext(context.Context) ConnectionCloudSpannerOutput
}

type ConnectionCloudSpannerArgs struct {
	// Cloud Spanner database in the form `project/instance/database'
	Database pulumi.StringInput `pulumi:"database"`
	// If parallelism should be used when reading from Cloud Spanner
	UseParallelism pulumi.BoolPtrInput `pulumi:"useParallelism"`
	// If the serverless analytics service should be used to read data from Cloud Spanner. useParallelism must be set when using serverless analytics
	UseServerlessAnalytics pulumi.BoolPtrInput `pulumi:"useServerlessAnalytics"`
}

func (ConnectionCloudSpannerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionCloudSpanner)(nil)).Elem()
}

func (i ConnectionCloudSpannerArgs) ToConnectionCloudSpannerOutput() ConnectionCloudSpannerOutput {
	return i.ToConnectionCloudSpannerOutputWithContext(context.Background())
}

func (i ConnectionCloudSpannerArgs) ToConnectionCloudSpannerOutputWithContext(ctx context.Context) ConnectionCloudSpannerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionCloudSpannerOutput)
}

func (i ConnectionCloudSpannerArgs) ToConnectionCloudSpannerPtrOutput() ConnectionCloudSpannerPtrOutput {
	return i.ToConnectionCloudSpannerPtrOutputWithContext(context.Background())
}

func (i ConnectionCloudSpannerArgs) ToConnectionCloudSpannerPtrOutputWithContext(ctx context.Context) ConnectionCloudSpannerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionCloudSpannerOutput).ToConnectionCloudSpannerPtrOutputWithContext(ctx)
}

// ConnectionCloudSpannerPtrInput is an input type that accepts ConnectionCloudSpannerArgs, ConnectionCloudSpannerPtr and ConnectionCloudSpannerPtrOutput values.
// You can construct a concrete instance of `ConnectionCloudSpannerPtrInput` via:
//
//	        ConnectionCloudSpannerArgs{...}
//
//	or:
//
//	        nil
type ConnectionCloudSpannerPtrInput interface {
	pulumi.Input

	ToConnectionCloudSpannerPtrOutput() ConnectionCloudSpannerPtrOutput
	ToConnectionCloudSpannerPtrOutputWithContext(context.Context) ConnectionCloudSpannerPtrOutput
}

type connectionCloudSpannerPtrType ConnectionCloudSpannerArgs

func ConnectionCloudSpannerPtr(v *ConnectionCloudSpannerArgs) ConnectionCloudSpannerPtrInput {
	return (*connectionCloudSpannerPtrType)(v)
}

func (*connectionCloudSpannerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionCloudSpanner)(nil)).Elem()
}

func (i *connectionCloudSpannerPtrType) ToConnectionCloudSpannerPtrOutput() ConnectionCloudSpannerPtrOutput {
	return i.ToConnectionCloudSpannerPtrOutputWithContext(context.Background())
}

func (i *connectionCloudSpannerPtrType) ToConnectionCloudSpannerPtrOutputWithContext(ctx context.Context) ConnectionCloudSpannerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionCloudSpannerPtrOutput)
}

type ConnectionCloudSpannerOutput struct{ *pulumi.OutputState }

func (ConnectionCloudSpannerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionCloudSpanner)(nil)).Elem()
}

func (o ConnectionCloudSpannerOutput) ToConnectionCloudSpannerOutput() ConnectionCloudSpannerOutput {
	return o
}

func (o ConnectionCloudSpannerOutput) ToConnectionCloudSpannerOutputWithContext(ctx context.Context) ConnectionCloudSpannerOutput {
	return o
}

func (o ConnectionCloudSpannerOutput) ToConnectionCloudSpannerPtrOutput() ConnectionCloudSpannerPtrOutput {
	return o.ToConnectionCloudSpannerPtrOutputWithContext(context.Background())
}

func (o ConnectionCloudSpannerOutput) ToConnectionCloudSpannerPtrOutputWithContext(ctx context.Context) ConnectionCloudSpannerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionCloudSpanner) *ConnectionCloudSpanner {
		return &v
	}).(ConnectionCloudSpannerPtrOutput)
}

// Cloud Spanner database in the form `project/instance/database'
func (o ConnectionCloudSpannerOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionCloudSpanner) string { return v.Database }).(pulumi.StringOutput)
}

// If parallelism should be used when reading from Cloud Spanner
func (o ConnectionCloudSpannerOutput) UseParallelism() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectionCloudSpanner) *bool { return v.UseParallelism }).(pulumi.BoolPtrOutput)
}

// If the serverless analytics service should be used to read data from Cloud Spanner. useParallelism must be set when using serverless analytics
func (o ConnectionCloudSpannerOutput) UseServerlessAnalytics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectionCloudSpanner) *bool { return v.UseServerlessAnalytics }).(pulumi.BoolPtrOutput)
}

type ConnectionCloudSpannerPtrOutput struct{ *pulumi.OutputState }

func (ConnectionCloudSpannerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionCloudSpanner)(nil)).Elem()
}

func (o ConnectionCloudSpannerPtrOutput) ToConnectionCloudSpannerPtrOutput() ConnectionCloudSpannerPtrOutput {
	return o
}

func (o ConnectionCloudSpannerPtrOutput) ToConnectionCloudSpannerPtrOutputWithContext(ctx context.Context) ConnectionCloudSpannerPtrOutput {
	return o
}

func (o ConnectionCloudSpannerPtrOutput) Elem() ConnectionCloudSpannerOutput {
	return o.ApplyT(func(v *ConnectionCloudSpanner) ConnectionCloudSpanner {
		if v != nil {
			return *v
		}
		var ret ConnectionCloudSpanner
		return ret
	}).(ConnectionCloudSpannerOutput)
}

// Cloud Spanner database in the form `project/instance/database'
func (o ConnectionCloudSpannerPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionCloudSpanner) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// If parallelism should be used when reading from Cloud Spanner
func (o ConnectionCloudSpannerPtrOutput) UseParallelism() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectionCloudSpanner) *bool {
		if v == nil {
			return nil
		}
		return v.UseParallelism
	}).(pulumi.BoolPtrOutput)
}

// If the serverless analytics service should be used to read data from Cloud Spanner. useParallelism must be set when using serverless analytics
func (o ConnectionCloudSpannerPtrOutput) UseServerlessAnalytics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectionCloudSpanner) *bool {
		if v == nil {
			return nil
		}
		return v.UseServerlessAnalytics
	}).(pulumi.BoolPtrOutput)
}

type ConnectionCloudSql struct {
	// Cloud SQL properties.
	// Structure is documented below.
	Credential ConnectionCloudSqlCredential `pulumi:"credential"`
	// Database name.
	Database string `pulumi:"database"`
	// Cloud SQL instance ID in the form project:location:instance.
	InstanceId string `pulumi:"instanceId"`
	// When the connection is used in the context of an operation in BigQuery, this service account will serve as the identity being used for connecting to the CloudSQL instance specified in this connection.
	ServiceAccountId *string `pulumi:"serviceAccountId"`
	// Type of the Cloud SQL database.
	// Possible values are `DATABASE_TYPE_UNSPECIFIED`, `POSTGRES`, and `MYSQL`.
	Type string `pulumi:"type"`
}

// ConnectionCloudSqlInput is an input type that accepts ConnectionCloudSqlArgs and ConnectionCloudSqlOutput values.
// You can construct a concrete instance of `ConnectionCloudSqlInput` via:
//
//	ConnectionCloudSqlArgs{...}
type ConnectionCloudSqlInput interface {
	pulumi.Input

	ToConnectionCloudSqlOutput() ConnectionCloudSqlOutput
	ToConnectionCloudSqlOutputWithContext(context.Context) ConnectionCloudSqlOutput
}

type ConnectionCloudSqlArgs struct {
	// Cloud SQL properties.
	// Structure is documented below.
	Credential ConnectionCloudSqlCredentialInput `pulumi:"credential"`
	// Database name.
	Database pulumi.StringInput `pulumi:"database"`
	// Cloud SQL instance ID in the form project:location:instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// When the connection is used in the context of an operation in BigQuery, this service account will serve as the identity being used for connecting to the CloudSQL instance specified in this connection.
	ServiceAccountId pulumi.StringPtrInput `pulumi:"serviceAccountId"`
	// Type of the Cloud SQL database.
	// Possible values are `DATABASE_TYPE_UNSPECIFIED`, `POSTGRES`, and `MYSQL`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ConnectionCloudSqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionCloudSql)(nil)).Elem()
}

func (i ConnectionCloudSqlArgs) ToConnectionCloudSqlOutput() ConnectionCloudSqlOutput {
	return i.ToConnectionCloudSqlOutputWithContext(context.Background())
}

func (i ConnectionCloudSqlArgs) ToConnectionCloudSqlOutputWithContext(ctx context.Context) ConnectionCloudSqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionCloudSqlOutput)
}

func (i ConnectionCloudSqlArgs) ToConnectionCloudSqlPtrOutput() ConnectionCloudSqlPtrOutput {
	return i.ToConnectionCloudSqlPtrOutputWithContext(context.Background())
}

func (i ConnectionCloudSqlArgs) ToConnectionCloudSqlPtrOutputWithContext(ctx context.Context) ConnectionCloudSqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionCloudSqlOutput).ToConnectionCloudSqlPtrOutputWithContext(ctx)
}

// ConnectionCloudSqlPtrInput is an input type that accepts ConnectionCloudSqlArgs, ConnectionCloudSqlPtr and ConnectionCloudSqlPtrOutput values.
// You can construct a concrete instance of `ConnectionCloudSqlPtrInput` via:
//
//	        ConnectionCloudSqlArgs{...}
//
//	or:
//
//	        nil
type ConnectionCloudSqlPtrInput interface {
	pulumi.Input

	ToConnectionCloudSqlPtrOutput() ConnectionCloudSqlPtrOutput
	ToConnectionCloudSqlPtrOutputWithContext(context.Context) ConnectionCloudSqlPtrOutput
}

type connectionCloudSqlPtrType ConnectionCloudSqlArgs

func ConnectionCloudSqlPtr(v *ConnectionCloudSqlArgs) ConnectionCloudSqlPtrInput {
	return (*connectionCloudSqlPtrType)(v)
}

func (*connectionCloudSqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionCloudSql)(nil)).Elem()
}

func (i *connectionCloudSqlPtrType) ToConnectionCloudSqlPtrOutput() ConnectionCloudSqlPtrOutput {
	return i.ToConnectionCloudSqlPtrOutputWithContext(context.Background())
}

func (i *connectionCloudSqlPtrType) ToConnectionCloudSqlPtrOutputWithContext(ctx context.Context) ConnectionCloudSqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionCloudSqlPtrOutput)
}

type ConnectionCloudSqlOutput struct{ *pulumi.OutputState }

func (ConnectionCloudSqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionCloudSql)(nil)).Elem()
}

func (o ConnectionCloudSqlOutput) ToConnectionCloudSqlOutput() ConnectionCloudSqlOutput {
	return o
}

func (o ConnectionCloudSqlOutput) ToConnectionCloudSqlOutputWithContext(ctx context.Context) ConnectionCloudSqlOutput {
	return o
}

func (o ConnectionCloudSqlOutput) ToConnectionCloudSqlPtrOutput() ConnectionCloudSqlPtrOutput {
	return o.ToConnectionCloudSqlPtrOutputWithContext(context.Background())
}

func (o ConnectionCloudSqlOutput) ToConnectionCloudSqlPtrOutputWithContext(ctx context.Context) ConnectionCloudSqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionCloudSql) *ConnectionCloudSql {
		return &v
	}).(ConnectionCloudSqlPtrOutput)
}

// Cloud SQL properties.
// Structure is documented below.
func (o ConnectionCloudSqlOutput) Credential() ConnectionCloudSqlCredentialOutput {
	return o.ApplyT(func(v ConnectionCloudSql) ConnectionCloudSqlCredential { return v.Credential }).(ConnectionCloudSqlCredentialOutput)
}

// Database name.
func (o ConnectionCloudSqlOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionCloudSql) string { return v.Database }).(pulumi.StringOutput)
}

// Cloud SQL instance ID in the form project:location:instance.
func (o ConnectionCloudSqlOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionCloudSql) string { return v.InstanceId }).(pulumi.StringOutput)
}

// When the connection is used in the context of an operation in BigQuery, this service account will serve as the identity being used for connecting to the CloudSQL instance specified in this connection.
func (o ConnectionCloudSqlOutput) ServiceAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionCloudSql) *string { return v.ServiceAccountId }).(pulumi.StringPtrOutput)
}

// Type of the Cloud SQL database.
// Possible values are `DATABASE_TYPE_UNSPECIFIED`, `POSTGRES`, and `MYSQL`.
func (o ConnectionCloudSqlOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionCloudSql) string { return v.Type }).(pulumi.StringOutput)
}

type ConnectionCloudSqlPtrOutput struct{ *pulumi.OutputState }

func (ConnectionCloudSqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionCloudSql)(nil)).Elem()
}

func (o ConnectionCloudSqlPtrOutput) ToConnectionCloudSqlPtrOutput() ConnectionCloudSqlPtrOutput {
	return o
}

func (o ConnectionCloudSqlPtrOutput) ToConnectionCloudSqlPtrOutputWithContext(ctx context.Context) ConnectionCloudSqlPtrOutput {
	return o
}

func (o ConnectionCloudSqlPtrOutput) Elem() ConnectionCloudSqlOutput {
	return o.ApplyT(func(v *ConnectionCloudSql) ConnectionCloudSql {
		if v != nil {
			return *v
		}
		var ret ConnectionCloudSql
		return ret
	}).(ConnectionCloudSqlOutput)
}

// Cloud SQL properties.
// Structure is documented below.
func (o ConnectionCloudSqlPtrOutput) Credential() ConnectionCloudSqlCredentialPtrOutput {
	return o.ApplyT(func(v *ConnectionCloudSql) *ConnectionCloudSqlCredential {
		if v == nil {
			return nil
		}
		return &v.Credential
	}).(ConnectionCloudSqlCredentialPtrOutput)
}

// Database name.
func (o ConnectionCloudSqlPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionCloudSql) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// Cloud SQL instance ID in the form project:location:instance.
func (o ConnectionCloudSqlPtrOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionCloudSql) *string {
		if v == nil {
			return nil
		}
		return &v.InstanceId
	}).(pulumi.StringPtrOutput)
}

// When the connection is used in the context of an operation in BigQuery, this service account will serve as the identity being used for connecting to the CloudSQL instance specified in this connection.
func (o ConnectionCloudSqlPtrOutput) ServiceAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionCloudSql) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountId
	}).(pulumi.StringPtrOutput)
}

// Type of the Cloud SQL database.
// Possible values are `DATABASE_TYPE_UNSPECIFIED`, `POSTGRES`, and `MYSQL`.
func (o ConnectionCloudSqlPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionCloudSql) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ConnectionCloudSqlCredential struct {
	// Password for database.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password string `pulumi:"password"`
	// Username for database.
	Username string `pulumi:"username"`
}

// ConnectionCloudSqlCredentialInput is an input type that accepts ConnectionCloudSqlCredentialArgs and ConnectionCloudSqlCredentialOutput values.
// You can construct a concrete instance of `ConnectionCloudSqlCredentialInput` via:
//
//	ConnectionCloudSqlCredentialArgs{...}
type ConnectionCloudSqlCredentialInput interface {
	pulumi.Input

	ToConnectionCloudSqlCredentialOutput() ConnectionCloudSqlCredentialOutput
	ToConnectionCloudSqlCredentialOutputWithContext(context.Context) ConnectionCloudSqlCredentialOutput
}

type ConnectionCloudSqlCredentialArgs struct {
	// Password for database.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Password pulumi.StringInput `pulumi:"password"`
	// Username for database.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ConnectionCloudSqlCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionCloudSqlCredential)(nil)).Elem()
}

func (i ConnectionCloudSqlCredentialArgs) ToConnectionCloudSqlCredentialOutput() ConnectionCloudSqlCredentialOutput {
	return i.ToConnectionCloudSqlCredentialOutputWithContext(context.Background())
}

func (i ConnectionCloudSqlCredentialArgs) ToConnectionCloudSqlCredentialOutputWithContext(ctx context.Context) ConnectionCloudSqlCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionCloudSqlCredentialOutput)
}

func (i ConnectionCloudSqlCredentialArgs) ToConnectionCloudSqlCredentialPtrOutput() ConnectionCloudSqlCredentialPtrOutput {
	return i.ToConnectionCloudSqlCredentialPtrOutputWithContext(context.Background())
}

func (i ConnectionCloudSqlCredentialArgs) ToConnectionCloudSqlCredentialPtrOutputWithContext(ctx context.Context) ConnectionCloudSqlCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionCloudSqlCredentialOutput).ToConnectionCloudSqlCredentialPtrOutputWithContext(ctx)
}

// ConnectionCloudSqlCredentialPtrInput is an input type that accepts ConnectionCloudSqlCredentialArgs, ConnectionCloudSqlCredentialPtr and ConnectionCloudSqlCredentialPtrOutput values.
// You can construct a concrete instance of `ConnectionCloudSqlCredentialPtrInput` via:
//
//	        ConnectionCloudSqlCredentialArgs{...}
//
//	or:
//
//	        nil
type ConnectionCloudSqlCredentialPtrInput interface {
	pulumi.Input

	ToConnectionCloudSqlCredentialPtrOutput() ConnectionCloudSqlCredentialPtrOutput
	ToConnectionCloudSqlCredentialPtrOutputWithContext(context.Context) ConnectionCloudSqlCredentialPtrOutput
}

type connectionCloudSqlCredentialPtrType ConnectionCloudSqlCredentialArgs

func ConnectionCloudSqlCredentialPtr(v *ConnectionCloudSqlCredentialArgs) ConnectionCloudSqlCredentialPtrInput {
	return (*connectionCloudSqlCredentialPtrType)(v)
}

func (*connectionCloudSqlCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionCloudSqlCredential)(nil)).Elem()
}

func (i *connectionCloudSqlCredentialPtrType) ToConnectionCloudSqlCredentialPtrOutput() ConnectionCloudSqlCredentialPtrOutput {
	return i.ToConnectionCloudSqlCredentialPtrOutputWithContext(context.Background())
}

func (i *connectionCloudSqlCredentialPtrType) ToConnectionCloudSqlCredentialPtrOutputWithContext(ctx context.Context) ConnectionCloudSqlCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionCloudSqlCredentialPtrOutput)
}

type ConnectionCloudSqlCredentialOutput struct{ *pulumi.OutputState }

func (ConnectionCloudSqlCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionCloudSqlCredential)(nil)).Elem()
}

func (o ConnectionCloudSqlCredentialOutput) ToConnectionCloudSqlCredentialOutput() ConnectionCloudSqlCredentialOutput {
	return o
}

func (o ConnectionCloudSqlCredentialOutput) ToConnectionCloudSqlCredentialOutputWithContext(ctx context.Context) ConnectionCloudSqlCredentialOutput {
	return o
}

func (o ConnectionCloudSqlCredentialOutput) ToConnectionCloudSqlCredentialPtrOutput() ConnectionCloudSqlCredentialPtrOutput {
	return o.ToConnectionCloudSqlCredentialPtrOutputWithContext(context.Background())
}

func (o ConnectionCloudSqlCredentialOutput) ToConnectionCloudSqlCredentialPtrOutputWithContext(ctx context.Context) ConnectionCloudSqlCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionCloudSqlCredential) *ConnectionCloudSqlCredential {
		return &v
	}).(ConnectionCloudSqlCredentialPtrOutput)
}

// Password for database.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionCloudSqlCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionCloudSqlCredential) string { return v.Password }).(pulumi.StringOutput)
}

// Username for database.
func (o ConnectionCloudSqlCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionCloudSqlCredential) string { return v.Username }).(pulumi.StringOutput)
}

type ConnectionCloudSqlCredentialPtrOutput struct{ *pulumi.OutputState }

func (ConnectionCloudSqlCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionCloudSqlCredential)(nil)).Elem()
}

func (o ConnectionCloudSqlCredentialPtrOutput) ToConnectionCloudSqlCredentialPtrOutput() ConnectionCloudSqlCredentialPtrOutput {
	return o
}

func (o ConnectionCloudSqlCredentialPtrOutput) ToConnectionCloudSqlCredentialPtrOutputWithContext(ctx context.Context) ConnectionCloudSqlCredentialPtrOutput {
	return o
}

func (o ConnectionCloudSqlCredentialPtrOutput) Elem() ConnectionCloudSqlCredentialOutput {
	return o.ApplyT(func(v *ConnectionCloudSqlCredential) ConnectionCloudSqlCredential {
		if v != nil {
			return *v
		}
		var ret ConnectionCloudSqlCredential
		return ret
	}).(ConnectionCloudSqlCredentialOutput)
}

// Password for database.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o ConnectionCloudSqlCredentialPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionCloudSqlCredential) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Username for database.
func (o ConnectionCloudSqlCredentialPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionCloudSqlCredential) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// ConnectionIamBindingConditionInput is an input type that accepts ConnectionIamBindingConditionArgs and ConnectionIamBindingConditionOutput values.
// You can construct a concrete instance of `ConnectionIamBindingConditionInput` via:
//
//	ConnectionIamBindingConditionArgs{...}
type ConnectionIamBindingConditionInput interface {
	pulumi.Input

	ToConnectionIamBindingConditionOutput() ConnectionIamBindingConditionOutput
	ToConnectionIamBindingConditionOutputWithContext(context.Context) ConnectionIamBindingConditionOutput
}

type ConnectionIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (ConnectionIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionIamBindingCondition)(nil)).Elem()
}

func (i ConnectionIamBindingConditionArgs) ToConnectionIamBindingConditionOutput() ConnectionIamBindingConditionOutput {
	return i.ToConnectionIamBindingConditionOutputWithContext(context.Background())
}

func (i ConnectionIamBindingConditionArgs) ToConnectionIamBindingConditionOutputWithContext(ctx context.Context) ConnectionIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIamBindingConditionOutput)
}

func (i ConnectionIamBindingConditionArgs) ToConnectionIamBindingConditionPtrOutput() ConnectionIamBindingConditionPtrOutput {
	return i.ToConnectionIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i ConnectionIamBindingConditionArgs) ToConnectionIamBindingConditionPtrOutputWithContext(ctx context.Context) ConnectionIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIamBindingConditionOutput).ToConnectionIamBindingConditionPtrOutputWithContext(ctx)
}

// ConnectionIamBindingConditionPtrInput is an input type that accepts ConnectionIamBindingConditionArgs, ConnectionIamBindingConditionPtr and ConnectionIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `ConnectionIamBindingConditionPtrInput` via:
//
//	        ConnectionIamBindingConditionArgs{...}
//
//	or:
//
//	        nil
type ConnectionIamBindingConditionPtrInput interface {
	pulumi.Input

	ToConnectionIamBindingConditionPtrOutput() ConnectionIamBindingConditionPtrOutput
	ToConnectionIamBindingConditionPtrOutputWithContext(context.Context) ConnectionIamBindingConditionPtrOutput
}

type connectionIamBindingConditionPtrType ConnectionIamBindingConditionArgs

func ConnectionIamBindingConditionPtr(v *ConnectionIamBindingConditionArgs) ConnectionIamBindingConditionPtrInput {
	return (*connectionIamBindingConditionPtrType)(v)
}

func (*connectionIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionIamBindingCondition)(nil)).Elem()
}

func (i *connectionIamBindingConditionPtrType) ToConnectionIamBindingConditionPtrOutput() ConnectionIamBindingConditionPtrOutput {
	return i.ToConnectionIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *connectionIamBindingConditionPtrType) ToConnectionIamBindingConditionPtrOutputWithContext(ctx context.Context) ConnectionIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIamBindingConditionPtrOutput)
}

type ConnectionIamBindingConditionOutput struct{ *pulumi.OutputState }

func (ConnectionIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionIamBindingCondition)(nil)).Elem()
}

func (o ConnectionIamBindingConditionOutput) ToConnectionIamBindingConditionOutput() ConnectionIamBindingConditionOutput {
	return o
}

func (o ConnectionIamBindingConditionOutput) ToConnectionIamBindingConditionOutputWithContext(ctx context.Context) ConnectionIamBindingConditionOutput {
	return o
}

func (o ConnectionIamBindingConditionOutput) ToConnectionIamBindingConditionPtrOutput() ConnectionIamBindingConditionPtrOutput {
	return o.ToConnectionIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o ConnectionIamBindingConditionOutput) ToConnectionIamBindingConditionPtrOutputWithContext(ctx context.Context) ConnectionIamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionIamBindingCondition) *ConnectionIamBindingCondition {
		return &v
	}).(ConnectionIamBindingConditionPtrOutput)
}

func (o ConnectionIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ConnectionIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o ConnectionIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type ConnectionIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (ConnectionIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionIamBindingCondition)(nil)).Elem()
}

func (o ConnectionIamBindingConditionPtrOutput) ToConnectionIamBindingConditionPtrOutput() ConnectionIamBindingConditionPtrOutput {
	return o
}

func (o ConnectionIamBindingConditionPtrOutput) ToConnectionIamBindingConditionPtrOutputWithContext(ctx context.Context) ConnectionIamBindingConditionPtrOutput {
	return o
}

func (o ConnectionIamBindingConditionPtrOutput) Elem() ConnectionIamBindingConditionOutput {
	return o.ApplyT(func(v *ConnectionIamBindingCondition) ConnectionIamBindingCondition {
		if v != nil {
			return *v
		}
		var ret ConnectionIamBindingCondition
		return ret
	}).(ConnectionIamBindingConditionOutput)
}

func (o ConnectionIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type ConnectionIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// ConnectionIamMemberConditionInput is an input type that accepts ConnectionIamMemberConditionArgs and ConnectionIamMemberConditionOutput values.
// You can construct a concrete instance of `ConnectionIamMemberConditionInput` via:
//
//	ConnectionIamMemberConditionArgs{...}
type ConnectionIamMemberConditionInput interface {
	pulumi.Input

	ToConnectionIamMemberConditionOutput() ConnectionIamMemberConditionOutput
	ToConnectionIamMemberConditionOutputWithContext(context.Context) ConnectionIamMemberConditionOutput
}

type ConnectionIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (ConnectionIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionIamMemberCondition)(nil)).Elem()
}

func (i ConnectionIamMemberConditionArgs) ToConnectionIamMemberConditionOutput() ConnectionIamMemberConditionOutput {
	return i.ToConnectionIamMemberConditionOutputWithContext(context.Background())
}

func (i ConnectionIamMemberConditionArgs) ToConnectionIamMemberConditionOutputWithContext(ctx context.Context) ConnectionIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIamMemberConditionOutput)
}

func (i ConnectionIamMemberConditionArgs) ToConnectionIamMemberConditionPtrOutput() ConnectionIamMemberConditionPtrOutput {
	return i.ToConnectionIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i ConnectionIamMemberConditionArgs) ToConnectionIamMemberConditionPtrOutputWithContext(ctx context.Context) ConnectionIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIamMemberConditionOutput).ToConnectionIamMemberConditionPtrOutputWithContext(ctx)
}

// ConnectionIamMemberConditionPtrInput is an input type that accepts ConnectionIamMemberConditionArgs, ConnectionIamMemberConditionPtr and ConnectionIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `ConnectionIamMemberConditionPtrInput` via:
//
//	        ConnectionIamMemberConditionArgs{...}
//
//	or:
//
//	        nil
type ConnectionIamMemberConditionPtrInput interface {
	pulumi.Input

	ToConnectionIamMemberConditionPtrOutput() ConnectionIamMemberConditionPtrOutput
	ToConnectionIamMemberConditionPtrOutputWithContext(context.Context) ConnectionIamMemberConditionPtrOutput
}

type connectionIamMemberConditionPtrType ConnectionIamMemberConditionArgs

func ConnectionIamMemberConditionPtr(v *ConnectionIamMemberConditionArgs) ConnectionIamMemberConditionPtrInput {
	return (*connectionIamMemberConditionPtrType)(v)
}

func (*connectionIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionIamMemberCondition)(nil)).Elem()
}

func (i *connectionIamMemberConditionPtrType) ToConnectionIamMemberConditionPtrOutput() ConnectionIamMemberConditionPtrOutput {
	return i.ToConnectionIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *connectionIamMemberConditionPtrType) ToConnectionIamMemberConditionPtrOutputWithContext(ctx context.Context) ConnectionIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIamMemberConditionPtrOutput)
}

type ConnectionIamMemberConditionOutput struct{ *pulumi.OutputState }

func (ConnectionIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionIamMemberCondition)(nil)).Elem()
}

func (o ConnectionIamMemberConditionOutput) ToConnectionIamMemberConditionOutput() ConnectionIamMemberConditionOutput {
	return o
}

func (o ConnectionIamMemberConditionOutput) ToConnectionIamMemberConditionOutputWithContext(ctx context.Context) ConnectionIamMemberConditionOutput {
	return o
}

func (o ConnectionIamMemberConditionOutput) ToConnectionIamMemberConditionPtrOutput() ConnectionIamMemberConditionPtrOutput {
	return o.ToConnectionIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o ConnectionIamMemberConditionOutput) ToConnectionIamMemberConditionPtrOutputWithContext(ctx context.Context) ConnectionIamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionIamMemberCondition) *ConnectionIamMemberCondition {
		return &v
	}).(ConnectionIamMemberConditionPtrOutput)
}

func (o ConnectionIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ConnectionIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o ConnectionIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type ConnectionIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (ConnectionIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionIamMemberCondition)(nil)).Elem()
}

func (o ConnectionIamMemberConditionPtrOutput) ToConnectionIamMemberConditionPtrOutput() ConnectionIamMemberConditionPtrOutput {
	return o
}

func (o ConnectionIamMemberConditionPtrOutput) ToConnectionIamMemberConditionPtrOutputWithContext(ctx context.Context) ConnectionIamMemberConditionPtrOutput {
	return o
}

func (o ConnectionIamMemberConditionPtrOutput) Elem() ConnectionIamMemberConditionOutput {
	return o.ApplyT(func(v *ConnectionIamMemberCondition) ConnectionIamMemberCondition {
		if v != nil {
			return *v
		}
		var ret ConnectionIamMemberCondition
		return ret
	}).(ConnectionIamMemberConditionOutput)
}

func (o ConnectionIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type DataTransferConfigEmailPreferences struct {
	// If true, email notifications will be sent on transfer run failures.
	EnableFailureEmail bool `pulumi:"enableFailureEmail"`
}

// DataTransferConfigEmailPreferencesInput is an input type that accepts DataTransferConfigEmailPreferencesArgs and DataTransferConfigEmailPreferencesOutput values.
// You can construct a concrete instance of `DataTransferConfigEmailPreferencesInput` via:
//
//	DataTransferConfigEmailPreferencesArgs{...}
type DataTransferConfigEmailPreferencesInput interface {
	pulumi.Input

	ToDataTransferConfigEmailPreferencesOutput() DataTransferConfigEmailPreferencesOutput
	ToDataTransferConfigEmailPreferencesOutputWithContext(context.Context) DataTransferConfigEmailPreferencesOutput
}

type DataTransferConfigEmailPreferencesArgs struct {
	// If true, email notifications will be sent on transfer run failures.
	EnableFailureEmail pulumi.BoolInput `pulumi:"enableFailureEmail"`
}

func (DataTransferConfigEmailPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataTransferConfigEmailPreferences)(nil)).Elem()
}

func (i DataTransferConfigEmailPreferencesArgs) ToDataTransferConfigEmailPreferencesOutput() DataTransferConfigEmailPreferencesOutput {
	return i.ToDataTransferConfigEmailPreferencesOutputWithContext(context.Background())
}

func (i DataTransferConfigEmailPreferencesArgs) ToDataTransferConfigEmailPreferencesOutputWithContext(ctx context.Context) DataTransferConfigEmailPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataTransferConfigEmailPreferencesOutput)
}

func (i DataTransferConfigEmailPreferencesArgs) ToDataTransferConfigEmailPreferencesPtrOutput() DataTransferConfigEmailPreferencesPtrOutput {
	return i.ToDataTransferConfigEmailPreferencesPtrOutputWithContext(context.Background())
}

func (i DataTransferConfigEmailPreferencesArgs) ToDataTransferConfigEmailPreferencesPtrOutputWithContext(ctx context.Context) DataTransferConfigEmailPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataTransferConfigEmailPreferencesOutput).ToDataTransferConfigEmailPreferencesPtrOutputWithContext(ctx)
}

// DataTransferConfigEmailPreferencesPtrInput is an input type that accepts DataTransferConfigEmailPreferencesArgs, DataTransferConfigEmailPreferencesPtr and DataTransferConfigEmailPreferencesPtrOutput values.
// You can construct a concrete instance of `DataTransferConfigEmailPreferencesPtrInput` via:
//
//	        DataTransferConfigEmailPreferencesArgs{...}
//
//	or:
//
//	        nil
type DataTransferConfigEmailPreferencesPtrInput interface {
	pulumi.Input

	ToDataTransferConfigEmailPreferencesPtrOutput() DataTransferConfigEmailPreferencesPtrOutput
	ToDataTransferConfigEmailPreferencesPtrOutputWithContext(context.Context) DataTransferConfigEmailPreferencesPtrOutput
}

type dataTransferConfigEmailPreferencesPtrType DataTransferConfigEmailPreferencesArgs

func DataTransferConfigEmailPreferencesPtr(v *DataTransferConfigEmailPreferencesArgs) DataTransferConfigEmailPreferencesPtrInput {
	return (*dataTransferConfigEmailPreferencesPtrType)(v)
}

func (*dataTransferConfigEmailPreferencesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataTransferConfigEmailPreferences)(nil)).Elem()
}

func (i *dataTransferConfigEmailPreferencesPtrType) ToDataTransferConfigEmailPreferencesPtrOutput() DataTransferConfigEmailPreferencesPtrOutput {
	return i.ToDataTransferConfigEmailPreferencesPtrOutputWithContext(context.Background())
}

func (i *dataTransferConfigEmailPreferencesPtrType) ToDataTransferConfigEmailPreferencesPtrOutputWithContext(ctx context.Context) DataTransferConfigEmailPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataTransferConfigEmailPreferencesPtrOutput)
}

type DataTransferConfigEmailPreferencesOutput struct{ *pulumi.OutputState }

func (DataTransferConfigEmailPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataTransferConfigEmailPreferences)(nil)).Elem()
}

func (o DataTransferConfigEmailPreferencesOutput) ToDataTransferConfigEmailPreferencesOutput() DataTransferConfigEmailPreferencesOutput {
	return o
}

func (o DataTransferConfigEmailPreferencesOutput) ToDataTransferConfigEmailPreferencesOutputWithContext(ctx context.Context) DataTransferConfigEmailPreferencesOutput {
	return o
}

func (o DataTransferConfigEmailPreferencesOutput) ToDataTransferConfigEmailPreferencesPtrOutput() DataTransferConfigEmailPreferencesPtrOutput {
	return o.ToDataTransferConfigEmailPreferencesPtrOutputWithContext(context.Background())
}

func (o DataTransferConfigEmailPreferencesOutput) ToDataTransferConfigEmailPreferencesPtrOutputWithContext(ctx context.Context) DataTransferConfigEmailPreferencesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataTransferConfigEmailPreferences) *DataTransferConfigEmailPreferences {
		return &v
	}).(DataTransferConfigEmailPreferencesPtrOutput)
}

// If true, email notifications will be sent on transfer run failures.
func (o DataTransferConfigEmailPreferencesOutput) EnableFailureEmail() pulumi.BoolOutput {
	return o.ApplyT(func(v DataTransferConfigEmailPreferences) bool { return v.EnableFailureEmail }).(pulumi.BoolOutput)
}

type DataTransferConfigEmailPreferencesPtrOutput struct{ *pulumi.OutputState }

func (DataTransferConfigEmailPreferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataTransferConfigEmailPreferences)(nil)).Elem()
}

func (o DataTransferConfigEmailPreferencesPtrOutput) ToDataTransferConfigEmailPreferencesPtrOutput() DataTransferConfigEmailPreferencesPtrOutput {
	return o
}

func (o DataTransferConfigEmailPreferencesPtrOutput) ToDataTransferConfigEmailPreferencesPtrOutputWithContext(ctx context.Context) DataTransferConfigEmailPreferencesPtrOutput {
	return o
}

func (o DataTransferConfigEmailPreferencesPtrOutput) Elem() DataTransferConfigEmailPreferencesOutput {
	return o.ApplyT(func(v *DataTransferConfigEmailPreferences) DataTransferConfigEmailPreferences {
		if v != nil {
			return *v
		}
		var ret DataTransferConfigEmailPreferences
		return ret
	}).(DataTransferConfigEmailPreferencesOutput)
}

// If true, email notifications will be sent on transfer run failures.
func (o DataTransferConfigEmailPreferencesPtrOutput) EnableFailureEmail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataTransferConfigEmailPreferences) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableFailureEmail
	}).(pulumi.BoolPtrOutput)
}

type DataTransferConfigScheduleOptions struct {
	// If true, automatic scheduling of data transfer runs for this
	// configuration will be disabled. The runs can be started on ad-hoc
	// basis using transferConfigs.startManualRuns API. When automatic
	// scheduling is disabled, the TransferConfig.schedule field will
	// be ignored.
	DisableAutoScheduling *bool `pulumi:"disableAutoScheduling"`
	// Defines time to stop scheduling transfer runs. A transfer run cannot be
	// scheduled at or after the end time. The end time can be changed at any
	// moment. The time when a data transfer can be triggered manually is not
	// limited by this option.
	EndTime *string `pulumi:"endTime"`
	// Specifies time to start scheduling transfer runs. The first run will be
	// scheduled at or after the start time according to a recurrence pattern
	// defined in the schedule string. The start time can be changed at any
	// moment. The time when a data transfer can be triggered manually is not
	// limited by this option.
	StartTime *string `pulumi:"startTime"`
}

// DataTransferConfigScheduleOptionsInput is an input type that accepts DataTransferConfigScheduleOptionsArgs and DataTransferConfigScheduleOptionsOutput values.
// You can construct a concrete instance of `DataTransferConfigScheduleOptionsInput` via:
//
//	DataTransferConfigScheduleOptionsArgs{...}
type DataTransferConfigScheduleOptionsInput interface {
	pulumi.Input

	ToDataTransferConfigScheduleOptionsOutput() DataTransferConfigScheduleOptionsOutput
	ToDataTransferConfigScheduleOptionsOutputWithContext(context.Context) DataTransferConfigScheduleOptionsOutput
}

type DataTransferConfigScheduleOptionsArgs struct {
	// If true, automatic scheduling of data transfer runs for this
	// configuration will be disabled. The runs can be started on ad-hoc
	// basis using transferConfigs.startManualRuns API. When automatic
	// scheduling is disabled, the TransferConfig.schedule field will
	// be ignored.
	DisableAutoScheduling pulumi.BoolPtrInput `pulumi:"disableAutoScheduling"`
	// Defines time to stop scheduling transfer runs. A transfer run cannot be
	// scheduled at or after the end time. The end time can be changed at any
	// moment. The time when a data transfer can be triggered manually is not
	// limited by this option.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies time to start scheduling transfer runs. The first run will be
	// scheduled at or after the start time according to a recurrence pattern
	// defined in the schedule string. The start time can be changed at any
	// moment. The time when a data transfer can be triggered manually is not
	// limited by this option.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (DataTransferConfigScheduleOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataTransferConfigScheduleOptions)(nil)).Elem()
}

func (i DataTransferConfigScheduleOptionsArgs) ToDataTransferConfigScheduleOptionsOutput() DataTransferConfigScheduleOptionsOutput {
	return i.ToDataTransferConfigScheduleOptionsOutputWithContext(context.Background())
}

func (i DataTransferConfigScheduleOptionsArgs) ToDataTransferConfigScheduleOptionsOutputWithContext(ctx context.Context) DataTransferConfigScheduleOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataTransferConfigScheduleOptionsOutput)
}

func (i DataTransferConfigScheduleOptionsArgs) ToDataTransferConfigScheduleOptionsPtrOutput() DataTransferConfigScheduleOptionsPtrOutput {
	return i.ToDataTransferConfigScheduleOptionsPtrOutputWithContext(context.Background())
}

func (i DataTransferConfigScheduleOptionsArgs) ToDataTransferConfigScheduleOptionsPtrOutputWithContext(ctx context.Context) DataTransferConfigScheduleOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataTransferConfigScheduleOptionsOutput).ToDataTransferConfigScheduleOptionsPtrOutputWithContext(ctx)
}

// DataTransferConfigScheduleOptionsPtrInput is an input type that accepts DataTransferConfigScheduleOptionsArgs, DataTransferConfigScheduleOptionsPtr and DataTransferConfigScheduleOptionsPtrOutput values.
// You can construct a concrete instance of `DataTransferConfigScheduleOptionsPtrInput` via:
//
//	        DataTransferConfigScheduleOptionsArgs{...}
//
//	or:
//
//	        nil
type DataTransferConfigScheduleOptionsPtrInput interface {
	pulumi.Input

	ToDataTransferConfigScheduleOptionsPtrOutput() DataTransferConfigScheduleOptionsPtrOutput
	ToDataTransferConfigScheduleOptionsPtrOutputWithContext(context.Context) DataTransferConfigScheduleOptionsPtrOutput
}

type dataTransferConfigScheduleOptionsPtrType DataTransferConfigScheduleOptionsArgs

func DataTransferConfigScheduleOptionsPtr(v *DataTransferConfigScheduleOptionsArgs) DataTransferConfigScheduleOptionsPtrInput {
	return (*dataTransferConfigScheduleOptionsPtrType)(v)
}

func (*dataTransferConfigScheduleOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataTransferConfigScheduleOptions)(nil)).Elem()
}

func (i *dataTransferConfigScheduleOptionsPtrType) ToDataTransferConfigScheduleOptionsPtrOutput() DataTransferConfigScheduleOptionsPtrOutput {
	return i.ToDataTransferConfigScheduleOptionsPtrOutputWithContext(context.Background())
}

func (i *dataTransferConfigScheduleOptionsPtrType) ToDataTransferConfigScheduleOptionsPtrOutputWithContext(ctx context.Context) DataTransferConfigScheduleOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataTransferConfigScheduleOptionsPtrOutput)
}

type DataTransferConfigScheduleOptionsOutput struct{ *pulumi.OutputState }

func (DataTransferConfigScheduleOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataTransferConfigScheduleOptions)(nil)).Elem()
}

func (o DataTransferConfigScheduleOptionsOutput) ToDataTransferConfigScheduleOptionsOutput() DataTransferConfigScheduleOptionsOutput {
	return o
}

func (o DataTransferConfigScheduleOptionsOutput) ToDataTransferConfigScheduleOptionsOutputWithContext(ctx context.Context) DataTransferConfigScheduleOptionsOutput {
	return o
}

func (o DataTransferConfigScheduleOptionsOutput) ToDataTransferConfigScheduleOptionsPtrOutput() DataTransferConfigScheduleOptionsPtrOutput {
	return o.ToDataTransferConfigScheduleOptionsPtrOutputWithContext(context.Background())
}

func (o DataTransferConfigScheduleOptionsOutput) ToDataTransferConfigScheduleOptionsPtrOutputWithContext(ctx context.Context) DataTransferConfigScheduleOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataTransferConfigScheduleOptions) *DataTransferConfigScheduleOptions {
		return &v
	}).(DataTransferConfigScheduleOptionsPtrOutput)
}

// If true, automatic scheduling of data transfer runs for this
// configuration will be disabled. The runs can be started on ad-hoc
// basis using transferConfigs.startManualRuns API. When automatic
// scheduling is disabled, the TransferConfig.schedule field will
// be ignored.
func (o DataTransferConfigScheduleOptionsOutput) DisableAutoScheduling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataTransferConfigScheduleOptions) *bool { return v.DisableAutoScheduling }).(pulumi.BoolPtrOutput)
}

// Defines time to stop scheduling transfer runs. A transfer run cannot be
// scheduled at or after the end time. The end time can be changed at any
// moment. The time when a data transfer can be triggered manually is not
// limited by this option.
func (o DataTransferConfigScheduleOptionsOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataTransferConfigScheduleOptions) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies time to start scheduling transfer runs. The first run will be
// scheduled at or after the start time according to a recurrence pattern
// defined in the schedule string. The start time can be changed at any
// moment. The time when a data transfer can be triggered manually is not
// limited by this option.
func (o DataTransferConfigScheduleOptionsOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataTransferConfigScheduleOptions) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type DataTransferConfigScheduleOptionsPtrOutput struct{ *pulumi.OutputState }

func (DataTransferConfigScheduleOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataTransferConfigScheduleOptions)(nil)).Elem()
}

func (o DataTransferConfigScheduleOptionsPtrOutput) ToDataTransferConfigScheduleOptionsPtrOutput() DataTransferConfigScheduleOptionsPtrOutput {
	return o
}

func (o DataTransferConfigScheduleOptionsPtrOutput) ToDataTransferConfigScheduleOptionsPtrOutputWithContext(ctx context.Context) DataTransferConfigScheduleOptionsPtrOutput {
	return o
}

func (o DataTransferConfigScheduleOptionsPtrOutput) Elem() DataTransferConfigScheduleOptionsOutput {
	return o.ApplyT(func(v *DataTransferConfigScheduleOptions) DataTransferConfigScheduleOptions {
		if v != nil {
			return *v
		}
		var ret DataTransferConfigScheduleOptions
		return ret
	}).(DataTransferConfigScheduleOptionsOutput)
}

// If true, automatic scheduling of data transfer runs for this
// configuration will be disabled. The runs can be started on ad-hoc
// basis using transferConfigs.startManualRuns API. When automatic
// scheduling is disabled, the TransferConfig.schedule field will
// be ignored.
func (o DataTransferConfigScheduleOptionsPtrOutput) DisableAutoScheduling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataTransferConfigScheduleOptions) *bool {
		if v == nil {
			return nil
		}
		return v.DisableAutoScheduling
	}).(pulumi.BoolPtrOutput)
}

// Defines time to stop scheduling transfer runs. A transfer run cannot be
// scheduled at or after the end time. The end time can be changed at any
// moment. The time when a data transfer can be triggered manually is not
// limited by this option.
func (o DataTransferConfigScheduleOptionsPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataTransferConfigScheduleOptions) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time to start scheduling transfer runs. The first run will be
// scheduled at or after the start time according to a recurrence pattern
// defined in the schedule string. The start time can be changed at any
// moment. The time when a data transfer can be triggered manually is not
// limited by this option.
func (o DataTransferConfigScheduleOptionsPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataTransferConfigScheduleOptions) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

type DataTransferConfigSensitiveParams struct {
	// The Secret Access Key of the AWS account transferring data from.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	SecretAccessKey string `pulumi:"secretAccessKey"`
}

// DataTransferConfigSensitiveParamsInput is an input type that accepts DataTransferConfigSensitiveParamsArgs and DataTransferConfigSensitiveParamsOutput values.
// You can construct a concrete instance of `DataTransferConfigSensitiveParamsInput` via:
//
//	DataTransferConfigSensitiveParamsArgs{...}
type DataTransferConfigSensitiveParamsInput interface {
	pulumi.Input

	ToDataTransferConfigSensitiveParamsOutput() DataTransferConfigSensitiveParamsOutput
	ToDataTransferConfigSensitiveParamsOutputWithContext(context.Context) DataTransferConfigSensitiveParamsOutput
}

type DataTransferConfigSensitiveParamsArgs struct {
	// The Secret Access Key of the AWS account transferring data from.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	SecretAccessKey pulumi.StringInput `pulumi:"secretAccessKey"`
}

func (DataTransferConfigSensitiveParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataTransferConfigSensitiveParams)(nil)).Elem()
}

func (i DataTransferConfigSensitiveParamsArgs) ToDataTransferConfigSensitiveParamsOutput() DataTransferConfigSensitiveParamsOutput {
	return i.ToDataTransferConfigSensitiveParamsOutputWithContext(context.Background())
}

func (i DataTransferConfigSensitiveParamsArgs) ToDataTransferConfigSensitiveParamsOutputWithContext(ctx context.Context) DataTransferConfigSensitiveParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataTransferConfigSensitiveParamsOutput)
}

func (i DataTransferConfigSensitiveParamsArgs) ToDataTransferConfigSensitiveParamsPtrOutput() DataTransferConfigSensitiveParamsPtrOutput {
	return i.ToDataTransferConfigSensitiveParamsPtrOutputWithContext(context.Background())
}

func (i DataTransferConfigSensitiveParamsArgs) ToDataTransferConfigSensitiveParamsPtrOutputWithContext(ctx context.Context) DataTransferConfigSensitiveParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataTransferConfigSensitiveParamsOutput).ToDataTransferConfigSensitiveParamsPtrOutputWithContext(ctx)
}

// DataTransferConfigSensitiveParamsPtrInput is an input type that accepts DataTransferConfigSensitiveParamsArgs, DataTransferConfigSensitiveParamsPtr and DataTransferConfigSensitiveParamsPtrOutput values.
// You can construct a concrete instance of `DataTransferConfigSensitiveParamsPtrInput` via:
//
//	        DataTransferConfigSensitiveParamsArgs{...}
//
//	or:
//
//	        nil
type DataTransferConfigSensitiveParamsPtrInput interface {
	pulumi.Input

	ToDataTransferConfigSensitiveParamsPtrOutput() DataTransferConfigSensitiveParamsPtrOutput
	ToDataTransferConfigSensitiveParamsPtrOutputWithContext(context.Context) DataTransferConfigSensitiveParamsPtrOutput
}

type dataTransferConfigSensitiveParamsPtrType DataTransferConfigSensitiveParamsArgs

func DataTransferConfigSensitiveParamsPtr(v *DataTransferConfigSensitiveParamsArgs) DataTransferConfigSensitiveParamsPtrInput {
	return (*dataTransferConfigSensitiveParamsPtrType)(v)
}

func (*dataTransferConfigSensitiveParamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataTransferConfigSensitiveParams)(nil)).Elem()
}

func (i *dataTransferConfigSensitiveParamsPtrType) ToDataTransferConfigSensitiveParamsPtrOutput() DataTransferConfigSensitiveParamsPtrOutput {
	return i.ToDataTransferConfigSensitiveParamsPtrOutputWithContext(context.Background())
}

func (i *dataTransferConfigSensitiveParamsPtrType) ToDataTransferConfigSensitiveParamsPtrOutputWithContext(ctx context.Context) DataTransferConfigSensitiveParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataTransferConfigSensitiveParamsPtrOutput)
}

type DataTransferConfigSensitiveParamsOutput struct{ *pulumi.OutputState }

func (DataTransferConfigSensitiveParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataTransferConfigSensitiveParams)(nil)).Elem()
}

func (o DataTransferConfigSensitiveParamsOutput) ToDataTransferConfigSensitiveParamsOutput() DataTransferConfigSensitiveParamsOutput {
	return o
}

func (o DataTransferConfigSensitiveParamsOutput) ToDataTransferConfigSensitiveParamsOutputWithContext(ctx context.Context) DataTransferConfigSensitiveParamsOutput {
	return o
}

func (o DataTransferConfigSensitiveParamsOutput) ToDataTransferConfigSensitiveParamsPtrOutput() DataTransferConfigSensitiveParamsPtrOutput {
	return o.ToDataTransferConfigSensitiveParamsPtrOutputWithContext(context.Background())
}

func (o DataTransferConfigSensitiveParamsOutput) ToDataTransferConfigSensitiveParamsPtrOutputWithContext(ctx context.Context) DataTransferConfigSensitiveParamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataTransferConfigSensitiveParams) *DataTransferConfigSensitiveParams {
		return &v
	}).(DataTransferConfigSensitiveParamsPtrOutput)
}

// The Secret Access Key of the AWS account transferring data from.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o DataTransferConfigSensitiveParamsOutput) SecretAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v DataTransferConfigSensitiveParams) string { return v.SecretAccessKey }).(pulumi.StringOutput)
}

type DataTransferConfigSensitiveParamsPtrOutput struct{ *pulumi.OutputState }

func (DataTransferConfigSensitiveParamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataTransferConfigSensitiveParams)(nil)).Elem()
}

func (o DataTransferConfigSensitiveParamsPtrOutput) ToDataTransferConfigSensitiveParamsPtrOutput() DataTransferConfigSensitiveParamsPtrOutput {
	return o
}

func (o DataTransferConfigSensitiveParamsPtrOutput) ToDataTransferConfigSensitiveParamsPtrOutputWithContext(ctx context.Context) DataTransferConfigSensitiveParamsPtrOutput {
	return o
}

func (o DataTransferConfigSensitiveParamsPtrOutput) Elem() DataTransferConfigSensitiveParamsOutput {
	return o.ApplyT(func(v *DataTransferConfigSensitiveParams) DataTransferConfigSensitiveParams {
		if v != nil {
			return *v
		}
		var ret DataTransferConfigSensitiveParams
		return ret
	}).(DataTransferConfigSensitiveParamsOutput)
}

// The Secret Access Key of the AWS account transferring data from.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o DataTransferConfigSensitiveParamsPtrOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataTransferConfigSensitiveParams) *string {
		if v == nil {
			return nil
		}
		return &v.SecretAccessKey
	}).(pulumi.StringPtrOutput)
}

type DatasetAccessType struct {
	// Grants all resources of particular types in a particular dataset read access to the current dataset.
	// Structure is documented below.
	Dataset *DatasetAccessDataset `pulumi:"dataset"`
	// A domain to grant access to. Any users signed in with the
	// domain specified will be granted the specified access
	Domain *string `pulumi:"domain"`
	// An email address of a Google Group to grant access to.
	GroupByEmail *string `pulumi:"groupByEmail"`
	// Describes the rights granted to the user specified by the other
	// member of the access object. Basic, predefined, and custom roles
	// are supported. Predefined roles that have equivalent basic roles
	// are swapped by the API to their basic counterparts. See
	// [official docs](https://cloud.google.com/bigquery/docs/access-control).
	Role *string `pulumi:"role"`
	// A routine from a different dataset to grant access to. Queries
	// executed against that routine will have read access to tables in
	// this dataset. The role field is not required when this field is
	// set. If that routine is updated by any user, access to the routine
	// needs to be granted again via an update operation.
	// Structure is documented below.
	Routine *DatasetAccessRoutine `pulumi:"routine"`
	// A special group to grant access to. Possible values include:
	SpecialGroup *string `pulumi:"specialGroup"`
	// An email address of a user to grant access to. For example:
	// fred@example.com
	UserByEmail *string `pulumi:"userByEmail"`
	// A view from a different dataset to grant access to. Queries
	// executed against that view will have read access to tables in
	// this dataset. The role field is not required when this field is
	// set. If that view is updated by any user, access to the view
	// needs to be granted again via an update operation.
	// Structure is documented below.
	View *DatasetAccessView `pulumi:"view"`
}

// DatasetAccessTypeInput is an input type that accepts DatasetAccessTypeArgs and DatasetAccessTypeOutput values.
// You can construct a concrete instance of `DatasetAccessTypeInput` via:
//
//	DatasetAccessTypeArgs{...}
type DatasetAccessTypeInput interface {
	pulumi.Input

	ToDatasetAccessTypeOutput() DatasetAccessTypeOutput
	ToDatasetAccessTypeOutputWithContext(context.Context) DatasetAccessTypeOutput
}

type DatasetAccessTypeArgs struct {
	// Grants all resources of particular types in a particular dataset read access to the current dataset.
	// Structure is documented below.
	Dataset DatasetAccessDatasetPtrInput `pulumi:"dataset"`
	// A domain to grant access to. Any users signed in with the
	// domain specified will be granted the specified access
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// An email address of a Google Group to grant access to.
	GroupByEmail pulumi.StringPtrInput `pulumi:"groupByEmail"`
	// Describes the rights granted to the user specified by the other
	// member of the access object. Basic, predefined, and custom roles
	// are supported. Predefined roles that have equivalent basic roles
	// are swapped by the API to their basic counterparts. See
	// [official docs](https://cloud.google.com/bigquery/docs/access-control).
	Role pulumi.StringPtrInput `pulumi:"role"`
	// A routine from a different dataset to grant access to. Queries
	// executed against that routine will have read access to tables in
	// this dataset. The role field is not required when this field is
	// set. If that routine is updated by any user, access to the routine
	// needs to be granted again via an update operation.
	// Structure is documented below.
	Routine DatasetAccessRoutinePtrInput `pulumi:"routine"`
	// A special group to grant access to. Possible values include:
	SpecialGroup pulumi.StringPtrInput `pulumi:"specialGroup"`
	// An email address of a user to grant access to. For example:
	// fred@example.com
	UserByEmail pulumi.StringPtrInput `pulumi:"userByEmail"`
	// A view from a different dataset to grant access to. Queries
	// executed against that view will have read access to tables in
	// this dataset. The role field is not required when this field is
	// set. If that view is updated by any user, access to the view
	// needs to be granted again via an update operation.
	// Structure is documented below.
	View DatasetAccessViewPtrInput `pulumi:"view"`
}

func (DatasetAccessTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessType)(nil)).Elem()
}

func (i DatasetAccessTypeArgs) ToDatasetAccessTypeOutput() DatasetAccessTypeOutput {
	return i.ToDatasetAccessTypeOutputWithContext(context.Background())
}

func (i DatasetAccessTypeArgs) ToDatasetAccessTypeOutputWithContext(ctx context.Context) DatasetAccessTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessTypeOutput)
}

// DatasetAccessTypeArrayInput is an input type that accepts DatasetAccessTypeArray and DatasetAccessTypeArrayOutput values.
// You can construct a concrete instance of `DatasetAccessTypeArrayInput` via:
//
//	DatasetAccessTypeArray{ DatasetAccessTypeArgs{...} }
type DatasetAccessTypeArrayInput interface {
	pulumi.Input

	ToDatasetAccessTypeArrayOutput() DatasetAccessTypeArrayOutput
	ToDatasetAccessTypeArrayOutputWithContext(context.Context) DatasetAccessTypeArrayOutput
}

type DatasetAccessTypeArray []DatasetAccessTypeInput

func (DatasetAccessTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessType)(nil)).Elem()
}

func (i DatasetAccessTypeArray) ToDatasetAccessTypeArrayOutput() DatasetAccessTypeArrayOutput {
	return i.ToDatasetAccessTypeArrayOutputWithContext(context.Background())
}

func (i DatasetAccessTypeArray) ToDatasetAccessTypeArrayOutputWithContext(ctx context.Context) DatasetAccessTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessTypeArrayOutput)
}

type DatasetAccessTypeOutput struct{ *pulumi.OutputState }

func (DatasetAccessTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessType)(nil)).Elem()
}

func (o DatasetAccessTypeOutput) ToDatasetAccessTypeOutput() DatasetAccessTypeOutput {
	return o
}

func (o DatasetAccessTypeOutput) ToDatasetAccessTypeOutputWithContext(ctx context.Context) DatasetAccessTypeOutput {
	return o
}

// Grants all resources of particular types in a particular dataset read access to the current dataset.
// Structure is documented below.
func (o DatasetAccessTypeOutput) Dataset() DatasetAccessDatasetPtrOutput {
	return o.ApplyT(func(v DatasetAccessType) *DatasetAccessDataset { return v.Dataset }).(DatasetAccessDatasetPtrOutput)
}

// A domain to grant access to. Any users signed in with the
// domain specified will be granted the specified access
func (o DatasetAccessTypeOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessType) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// An email address of a Google Group to grant access to.
func (o DatasetAccessTypeOutput) GroupByEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessType) *string { return v.GroupByEmail }).(pulumi.StringPtrOutput)
}

// Describes the rights granted to the user specified by the other
// member of the access object. Basic, predefined, and custom roles
// are supported. Predefined roles that have equivalent basic roles
// are swapped by the API to their basic counterparts. See
// [official docs](https://cloud.google.com/bigquery/docs/access-control).
func (o DatasetAccessTypeOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessType) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// A routine from a different dataset to grant access to. Queries
// executed against that routine will have read access to tables in
// this dataset. The role field is not required when this field is
// set. If that routine is updated by any user, access to the routine
// needs to be granted again via an update operation.
// Structure is documented below.
func (o DatasetAccessTypeOutput) Routine() DatasetAccessRoutinePtrOutput {
	return o.ApplyT(func(v DatasetAccessType) *DatasetAccessRoutine { return v.Routine }).(DatasetAccessRoutinePtrOutput)
}

// A special group to grant access to. Possible values include:
func (o DatasetAccessTypeOutput) SpecialGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessType) *string { return v.SpecialGroup }).(pulumi.StringPtrOutput)
}

// An email address of a user to grant access to. For example:
// fred@example.com
func (o DatasetAccessTypeOutput) UserByEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessType) *string { return v.UserByEmail }).(pulumi.StringPtrOutput)
}

// A view from a different dataset to grant access to. Queries
// executed against that view will have read access to tables in
// this dataset. The role field is not required when this field is
// set. If that view is updated by any user, access to the view
// needs to be granted again via an update operation.
// Structure is documented below.
func (o DatasetAccessTypeOutput) View() DatasetAccessViewPtrOutput {
	return o.ApplyT(func(v DatasetAccessType) *DatasetAccessView { return v.View }).(DatasetAccessViewPtrOutput)
}

type DatasetAccessTypeArrayOutput struct{ *pulumi.OutputState }

func (DatasetAccessTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessType)(nil)).Elem()
}

func (o DatasetAccessTypeArrayOutput) ToDatasetAccessTypeArrayOutput() DatasetAccessTypeArrayOutput {
	return o
}

func (o DatasetAccessTypeArrayOutput) ToDatasetAccessTypeArrayOutputWithContext(ctx context.Context) DatasetAccessTypeArrayOutput {
	return o
}

func (o DatasetAccessTypeArrayOutput) Index(i pulumi.IntInput) DatasetAccessTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetAccessType {
		return vs[0].([]DatasetAccessType)[vs[1].(int)]
	}).(DatasetAccessTypeOutput)
}

type DatasetAccessAuthorizedDataset struct {
	// The dataset this entry applies to
	// Structure is documented below.
	Dataset DatasetAccessAuthorizedDatasetDataset `pulumi:"dataset"`
	// Which resources in the dataset this entry applies to. Currently, only views are supported,
	// but additional target types may be added in the future. Possible values: VIEWS
	TargetTypes []string `pulumi:"targetTypes"`
}

// DatasetAccessAuthorizedDatasetInput is an input type that accepts DatasetAccessAuthorizedDatasetArgs and DatasetAccessAuthorizedDatasetOutput values.
// You can construct a concrete instance of `DatasetAccessAuthorizedDatasetInput` via:
//
//	DatasetAccessAuthorizedDatasetArgs{...}
type DatasetAccessAuthorizedDatasetInput interface {
	pulumi.Input

	ToDatasetAccessAuthorizedDatasetOutput() DatasetAccessAuthorizedDatasetOutput
	ToDatasetAccessAuthorizedDatasetOutputWithContext(context.Context) DatasetAccessAuthorizedDatasetOutput
}

type DatasetAccessAuthorizedDatasetArgs struct {
	// The dataset this entry applies to
	// Structure is documented below.
	Dataset DatasetAccessAuthorizedDatasetDatasetInput `pulumi:"dataset"`
	// Which resources in the dataset this entry applies to. Currently, only views are supported,
	// but additional target types may be added in the future. Possible values: VIEWS
	TargetTypes pulumi.StringArrayInput `pulumi:"targetTypes"`
}

func (DatasetAccessAuthorizedDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessAuthorizedDataset)(nil)).Elem()
}

func (i DatasetAccessAuthorizedDatasetArgs) ToDatasetAccessAuthorizedDatasetOutput() DatasetAccessAuthorizedDatasetOutput {
	return i.ToDatasetAccessAuthorizedDatasetOutputWithContext(context.Background())
}

func (i DatasetAccessAuthorizedDatasetArgs) ToDatasetAccessAuthorizedDatasetOutputWithContext(ctx context.Context) DatasetAccessAuthorizedDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessAuthorizedDatasetOutput)
}

func (i DatasetAccessAuthorizedDatasetArgs) ToDatasetAccessAuthorizedDatasetPtrOutput() DatasetAccessAuthorizedDatasetPtrOutput {
	return i.ToDatasetAccessAuthorizedDatasetPtrOutputWithContext(context.Background())
}

func (i DatasetAccessAuthorizedDatasetArgs) ToDatasetAccessAuthorizedDatasetPtrOutputWithContext(ctx context.Context) DatasetAccessAuthorizedDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessAuthorizedDatasetOutput).ToDatasetAccessAuthorizedDatasetPtrOutputWithContext(ctx)
}

// DatasetAccessAuthorizedDatasetPtrInput is an input type that accepts DatasetAccessAuthorizedDatasetArgs, DatasetAccessAuthorizedDatasetPtr and DatasetAccessAuthorizedDatasetPtrOutput values.
// You can construct a concrete instance of `DatasetAccessAuthorizedDatasetPtrInput` via:
//
//	        DatasetAccessAuthorizedDatasetArgs{...}
//
//	or:
//
//	        nil
type DatasetAccessAuthorizedDatasetPtrInput interface {
	pulumi.Input

	ToDatasetAccessAuthorizedDatasetPtrOutput() DatasetAccessAuthorizedDatasetPtrOutput
	ToDatasetAccessAuthorizedDatasetPtrOutputWithContext(context.Context) DatasetAccessAuthorizedDatasetPtrOutput
}

type datasetAccessAuthorizedDatasetPtrType DatasetAccessAuthorizedDatasetArgs

func DatasetAccessAuthorizedDatasetPtr(v *DatasetAccessAuthorizedDatasetArgs) DatasetAccessAuthorizedDatasetPtrInput {
	return (*datasetAccessAuthorizedDatasetPtrType)(v)
}

func (*datasetAccessAuthorizedDatasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessAuthorizedDataset)(nil)).Elem()
}

func (i *datasetAccessAuthorizedDatasetPtrType) ToDatasetAccessAuthorizedDatasetPtrOutput() DatasetAccessAuthorizedDatasetPtrOutput {
	return i.ToDatasetAccessAuthorizedDatasetPtrOutputWithContext(context.Background())
}

func (i *datasetAccessAuthorizedDatasetPtrType) ToDatasetAccessAuthorizedDatasetPtrOutputWithContext(ctx context.Context) DatasetAccessAuthorizedDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessAuthorizedDatasetPtrOutput)
}

type DatasetAccessAuthorizedDatasetOutput struct{ *pulumi.OutputState }

func (DatasetAccessAuthorizedDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessAuthorizedDataset)(nil)).Elem()
}

func (o DatasetAccessAuthorizedDatasetOutput) ToDatasetAccessAuthorizedDatasetOutput() DatasetAccessAuthorizedDatasetOutput {
	return o
}

func (o DatasetAccessAuthorizedDatasetOutput) ToDatasetAccessAuthorizedDatasetOutputWithContext(ctx context.Context) DatasetAccessAuthorizedDatasetOutput {
	return o
}

func (o DatasetAccessAuthorizedDatasetOutput) ToDatasetAccessAuthorizedDatasetPtrOutput() DatasetAccessAuthorizedDatasetPtrOutput {
	return o.ToDatasetAccessAuthorizedDatasetPtrOutputWithContext(context.Background())
}

func (o DatasetAccessAuthorizedDatasetOutput) ToDatasetAccessAuthorizedDatasetPtrOutputWithContext(ctx context.Context) DatasetAccessAuthorizedDatasetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetAccessAuthorizedDataset) *DatasetAccessAuthorizedDataset {
		return &v
	}).(DatasetAccessAuthorizedDatasetPtrOutput)
}

// The dataset this entry applies to
// Structure is documented below.
func (o DatasetAccessAuthorizedDatasetOutput) Dataset() DatasetAccessAuthorizedDatasetDatasetOutput {
	return o.ApplyT(func(v DatasetAccessAuthorizedDataset) DatasetAccessAuthorizedDatasetDataset { return v.Dataset }).(DatasetAccessAuthorizedDatasetDatasetOutput)
}

// Which resources in the dataset this entry applies to. Currently, only views are supported,
// but additional target types may be added in the future. Possible values: VIEWS
func (o DatasetAccessAuthorizedDatasetOutput) TargetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatasetAccessAuthorizedDataset) []string { return v.TargetTypes }).(pulumi.StringArrayOutput)
}

type DatasetAccessAuthorizedDatasetPtrOutput struct{ *pulumi.OutputState }

func (DatasetAccessAuthorizedDatasetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessAuthorizedDataset)(nil)).Elem()
}

func (o DatasetAccessAuthorizedDatasetPtrOutput) ToDatasetAccessAuthorizedDatasetPtrOutput() DatasetAccessAuthorizedDatasetPtrOutput {
	return o
}

func (o DatasetAccessAuthorizedDatasetPtrOutput) ToDatasetAccessAuthorizedDatasetPtrOutputWithContext(ctx context.Context) DatasetAccessAuthorizedDatasetPtrOutput {
	return o
}

func (o DatasetAccessAuthorizedDatasetPtrOutput) Elem() DatasetAccessAuthorizedDatasetOutput {
	return o.ApplyT(func(v *DatasetAccessAuthorizedDataset) DatasetAccessAuthorizedDataset {
		if v != nil {
			return *v
		}
		var ret DatasetAccessAuthorizedDataset
		return ret
	}).(DatasetAccessAuthorizedDatasetOutput)
}

// The dataset this entry applies to
// Structure is documented below.
func (o DatasetAccessAuthorizedDatasetPtrOutput) Dataset() DatasetAccessAuthorizedDatasetDatasetPtrOutput {
	return o.ApplyT(func(v *DatasetAccessAuthorizedDataset) *DatasetAccessAuthorizedDatasetDataset {
		if v == nil {
			return nil
		}
		return &v.Dataset
	}).(DatasetAccessAuthorizedDatasetDatasetPtrOutput)
}

// Which resources in the dataset this entry applies to. Currently, only views are supported,
// but additional target types may be added in the future. Possible values: VIEWS
func (o DatasetAccessAuthorizedDatasetPtrOutput) TargetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatasetAccessAuthorizedDataset) []string {
		if v == nil {
			return nil
		}
		return v.TargetTypes
	}).(pulumi.StringArrayOutput)
}

type DatasetAccessAuthorizedDatasetDataset struct {
	// The ID of the dataset containing this table.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId string `pulumi:"projectId"`
}

// DatasetAccessAuthorizedDatasetDatasetInput is an input type that accepts DatasetAccessAuthorizedDatasetDatasetArgs and DatasetAccessAuthorizedDatasetDatasetOutput values.
// You can construct a concrete instance of `DatasetAccessAuthorizedDatasetDatasetInput` via:
//
//	DatasetAccessAuthorizedDatasetDatasetArgs{...}
type DatasetAccessAuthorizedDatasetDatasetInput interface {
	pulumi.Input

	ToDatasetAccessAuthorizedDatasetDatasetOutput() DatasetAccessAuthorizedDatasetDatasetOutput
	ToDatasetAccessAuthorizedDatasetDatasetOutputWithContext(context.Context) DatasetAccessAuthorizedDatasetDatasetOutput
}

type DatasetAccessAuthorizedDatasetDatasetArgs struct {
	// The ID of the dataset containing this table.
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (DatasetAccessAuthorizedDatasetDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessAuthorizedDatasetDataset)(nil)).Elem()
}

func (i DatasetAccessAuthorizedDatasetDatasetArgs) ToDatasetAccessAuthorizedDatasetDatasetOutput() DatasetAccessAuthorizedDatasetDatasetOutput {
	return i.ToDatasetAccessAuthorizedDatasetDatasetOutputWithContext(context.Background())
}

func (i DatasetAccessAuthorizedDatasetDatasetArgs) ToDatasetAccessAuthorizedDatasetDatasetOutputWithContext(ctx context.Context) DatasetAccessAuthorizedDatasetDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessAuthorizedDatasetDatasetOutput)
}

func (i DatasetAccessAuthorizedDatasetDatasetArgs) ToDatasetAccessAuthorizedDatasetDatasetPtrOutput() DatasetAccessAuthorizedDatasetDatasetPtrOutput {
	return i.ToDatasetAccessAuthorizedDatasetDatasetPtrOutputWithContext(context.Background())
}

func (i DatasetAccessAuthorizedDatasetDatasetArgs) ToDatasetAccessAuthorizedDatasetDatasetPtrOutputWithContext(ctx context.Context) DatasetAccessAuthorizedDatasetDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessAuthorizedDatasetDatasetOutput).ToDatasetAccessAuthorizedDatasetDatasetPtrOutputWithContext(ctx)
}

// DatasetAccessAuthorizedDatasetDatasetPtrInput is an input type that accepts DatasetAccessAuthorizedDatasetDatasetArgs, DatasetAccessAuthorizedDatasetDatasetPtr and DatasetAccessAuthorizedDatasetDatasetPtrOutput values.
// You can construct a concrete instance of `DatasetAccessAuthorizedDatasetDatasetPtrInput` via:
//
//	        DatasetAccessAuthorizedDatasetDatasetArgs{...}
//
//	or:
//
//	        nil
type DatasetAccessAuthorizedDatasetDatasetPtrInput interface {
	pulumi.Input

	ToDatasetAccessAuthorizedDatasetDatasetPtrOutput() DatasetAccessAuthorizedDatasetDatasetPtrOutput
	ToDatasetAccessAuthorizedDatasetDatasetPtrOutputWithContext(context.Context) DatasetAccessAuthorizedDatasetDatasetPtrOutput
}

type datasetAccessAuthorizedDatasetDatasetPtrType DatasetAccessAuthorizedDatasetDatasetArgs

func DatasetAccessAuthorizedDatasetDatasetPtr(v *DatasetAccessAuthorizedDatasetDatasetArgs) DatasetAccessAuthorizedDatasetDatasetPtrInput {
	return (*datasetAccessAuthorizedDatasetDatasetPtrType)(v)
}

func (*datasetAccessAuthorizedDatasetDatasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessAuthorizedDatasetDataset)(nil)).Elem()
}

func (i *datasetAccessAuthorizedDatasetDatasetPtrType) ToDatasetAccessAuthorizedDatasetDatasetPtrOutput() DatasetAccessAuthorizedDatasetDatasetPtrOutput {
	return i.ToDatasetAccessAuthorizedDatasetDatasetPtrOutputWithContext(context.Background())
}

func (i *datasetAccessAuthorizedDatasetDatasetPtrType) ToDatasetAccessAuthorizedDatasetDatasetPtrOutputWithContext(ctx context.Context) DatasetAccessAuthorizedDatasetDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessAuthorizedDatasetDatasetPtrOutput)
}

type DatasetAccessAuthorizedDatasetDatasetOutput struct{ *pulumi.OutputState }

func (DatasetAccessAuthorizedDatasetDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessAuthorizedDatasetDataset)(nil)).Elem()
}

func (o DatasetAccessAuthorizedDatasetDatasetOutput) ToDatasetAccessAuthorizedDatasetDatasetOutput() DatasetAccessAuthorizedDatasetDatasetOutput {
	return o
}

func (o DatasetAccessAuthorizedDatasetDatasetOutput) ToDatasetAccessAuthorizedDatasetDatasetOutputWithContext(ctx context.Context) DatasetAccessAuthorizedDatasetDatasetOutput {
	return o
}

func (o DatasetAccessAuthorizedDatasetDatasetOutput) ToDatasetAccessAuthorizedDatasetDatasetPtrOutput() DatasetAccessAuthorizedDatasetDatasetPtrOutput {
	return o.ToDatasetAccessAuthorizedDatasetDatasetPtrOutputWithContext(context.Background())
}

func (o DatasetAccessAuthorizedDatasetDatasetOutput) ToDatasetAccessAuthorizedDatasetDatasetPtrOutputWithContext(ctx context.Context) DatasetAccessAuthorizedDatasetDatasetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetAccessAuthorizedDatasetDataset) *DatasetAccessAuthorizedDatasetDataset {
		return &v
	}).(DatasetAccessAuthorizedDatasetDatasetPtrOutput)
}

// The ID of the dataset containing this table.
func (o DatasetAccessAuthorizedDatasetDatasetOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessAuthorizedDatasetDataset) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the project containing this table.
func (o DatasetAccessAuthorizedDatasetDatasetOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessAuthorizedDatasetDataset) string { return v.ProjectId }).(pulumi.StringOutput)
}

type DatasetAccessAuthorizedDatasetDatasetPtrOutput struct{ *pulumi.OutputState }

func (DatasetAccessAuthorizedDatasetDatasetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessAuthorizedDatasetDataset)(nil)).Elem()
}

func (o DatasetAccessAuthorizedDatasetDatasetPtrOutput) ToDatasetAccessAuthorizedDatasetDatasetPtrOutput() DatasetAccessAuthorizedDatasetDatasetPtrOutput {
	return o
}

func (o DatasetAccessAuthorizedDatasetDatasetPtrOutput) ToDatasetAccessAuthorizedDatasetDatasetPtrOutputWithContext(ctx context.Context) DatasetAccessAuthorizedDatasetDatasetPtrOutput {
	return o
}

func (o DatasetAccessAuthorizedDatasetDatasetPtrOutput) Elem() DatasetAccessAuthorizedDatasetDatasetOutput {
	return o.ApplyT(func(v *DatasetAccessAuthorizedDatasetDataset) DatasetAccessAuthorizedDatasetDataset {
		if v != nil {
			return *v
		}
		var ret DatasetAccessAuthorizedDatasetDataset
		return ret
	}).(DatasetAccessAuthorizedDatasetDatasetOutput)
}

// The ID of the dataset containing this table.
func (o DatasetAccessAuthorizedDatasetDatasetPtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAccessAuthorizedDatasetDataset) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this table.
func (o DatasetAccessAuthorizedDatasetDatasetPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAccessAuthorizedDatasetDataset) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectId
	}).(pulumi.StringPtrOutput)
}

type DatasetAccessDataset struct {
	// The dataset this entry applies to
	// Structure is documented below.
	Dataset DatasetAccessDatasetDataset `pulumi:"dataset"`
	// Which resources in the dataset this entry applies to. Currently, only views are supported,
	// but additional target types may be added in the future. Possible values: VIEWS
	TargetTypes []string `pulumi:"targetTypes"`
}

// DatasetAccessDatasetInput is an input type that accepts DatasetAccessDatasetArgs and DatasetAccessDatasetOutput values.
// You can construct a concrete instance of `DatasetAccessDatasetInput` via:
//
//	DatasetAccessDatasetArgs{...}
type DatasetAccessDatasetInput interface {
	pulumi.Input

	ToDatasetAccessDatasetOutput() DatasetAccessDatasetOutput
	ToDatasetAccessDatasetOutputWithContext(context.Context) DatasetAccessDatasetOutput
}

type DatasetAccessDatasetArgs struct {
	// The dataset this entry applies to
	// Structure is documented below.
	Dataset DatasetAccessDatasetDatasetInput `pulumi:"dataset"`
	// Which resources in the dataset this entry applies to. Currently, only views are supported,
	// but additional target types may be added in the future. Possible values: VIEWS
	TargetTypes pulumi.StringArrayInput `pulumi:"targetTypes"`
}

func (DatasetAccessDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessDataset)(nil)).Elem()
}

func (i DatasetAccessDatasetArgs) ToDatasetAccessDatasetOutput() DatasetAccessDatasetOutput {
	return i.ToDatasetAccessDatasetOutputWithContext(context.Background())
}

func (i DatasetAccessDatasetArgs) ToDatasetAccessDatasetOutputWithContext(ctx context.Context) DatasetAccessDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessDatasetOutput)
}

func (i DatasetAccessDatasetArgs) ToDatasetAccessDatasetPtrOutput() DatasetAccessDatasetPtrOutput {
	return i.ToDatasetAccessDatasetPtrOutputWithContext(context.Background())
}

func (i DatasetAccessDatasetArgs) ToDatasetAccessDatasetPtrOutputWithContext(ctx context.Context) DatasetAccessDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessDatasetOutput).ToDatasetAccessDatasetPtrOutputWithContext(ctx)
}

// DatasetAccessDatasetPtrInput is an input type that accepts DatasetAccessDatasetArgs, DatasetAccessDatasetPtr and DatasetAccessDatasetPtrOutput values.
// You can construct a concrete instance of `DatasetAccessDatasetPtrInput` via:
//
//	        DatasetAccessDatasetArgs{...}
//
//	or:
//
//	        nil
type DatasetAccessDatasetPtrInput interface {
	pulumi.Input

	ToDatasetAccessDatasetPtrOutput() DatasetAccessDatasetPtrOutput
	ToDatasetAccessDatasetPtrOutputWithContext(context.Context) DatasetAccessDatasetPtrOutput
}

type datasetAccessDatasetPtrType DatasetAccessDatasetArgs

func DatasetAccessDatasetPtr(v *DatasetAccessDatasetArgs) DatasetAccessDatasetPtrInput {
	return (*datasetAccessDatasetPtrType)(v)
}

func (*datasetAccessDatasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessDataset)(nil)).Elem()
}

func (i *datasetAccessDatasetPtrType) ToDatasetAccessDatasetPtrOutput() DatasetAccessDatasetPtrOutput {
	return i.ToDatasetAccessDatasetPtrOutputWithContext(context.Background())
}

func (i *datasetAccessDatasetPtrType) ToDatasetAccessDatasetPtrOutputWithContext(ctx context.Context) DatasetAccessDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessDatasetPtrOutput)
}

type DatasetAccessDatasetOutput struct{ *pulumi.OutputState }

func (DatasetAccessDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessDataset)(nil)).Elem()
}

func (o DatasetAccessDatasetOutput) ToDatasetAccessDatasetOutput() DatasetAccessDatasetOutput {
	return o
}

func (o DatasetAccessDatasetOutput) ToDatasetAccessDatasetOutputWithContext(ctx context.Context) DatasetAccessDatasetOutput {
	return o
}

func (o DatasetAccessDatasetOutput) ToDatasetAccessDatasetPtrOutput() DatasetAccessDatasetPtrOutput {
	return o.ToDatasetAccessDatasetPtrOutputWithContext(context.Background())
}

func (o DatasetAccessDatasetOutput) ToDatasetAccessDatasetPtrOutputWithContext(ctx context.Context) DatasetAccessDatasetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetAccessDataset) *DatasetAccessDataset {
		return &v
	}).(DatasetAccessDatasetPtrOutput)
}

// The dataset this entry applies to
// Structure is documented below.
func (o DatasetAccessDatasetOutput) Dataset() DatasetAccessDatasetDatasetOutput {
	return o.ApplyT(func(v DatasetAccessDataset) DatasetAccessDatasetDataset { return v.Dataset }).(DatasetAccessDatasetDatasetOutput)
}

// Which resources in the dataset this entry applies to. Currently, only views are supported,
// but additional target types may be added in the future. Possible values: VIEWS
func (o DatasetAccessDatasetOutput) TargetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatasetAccessDataset) []string { return v.TargetTypes }).(pulumi.StringArrayOutput)
}

type DatasetAccessDatasetPtrOutput struct{ *pulumi.OutputState }

func (DatasetAccessDatasetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessDataset)(nil)).Elem()
}

func (o DatasetAccessDatasetPtrOutput) ToDatasetAccessDatasetPtrOutput() DatasetAccessDatasetPtrOutput {
	return o
}

func (o DatasetAccessDatasetPtrOutput) ToDatasetAccessDatasetPtrOutputWithContext(ctx context.Context) DatasetAccessDatasetPtrOutput {
	return o
}

func (o DatasetAccessDatasetPtrOutput) Elem() DatasetAccessDatasetOutput {
	return o.ApplyT(func(v *DatasetAccessDataset) DatasetAccessDataset {
		if v != nil {
			return *v
		}
		var ret DatasetAccessDataset
		return ret
	}).(DatasetAccessDatasetOutput)
}

// The dataset this entry applies to
// Structure is documented below.
func (o DatasetAccessDatasetPtrOutput) Dataset() DatasetAccessDatasetDatasetPtrOutput {
	return o.ApplyT(func(v *DatasetAccessDataset) *DatasetAccessDatasetDataset {
		if v == nil {
			return nil
		}
		return &v.Dataset
	}).(DatasetAccessDatasetDatasetPtrOutput)
}

// Which resources in the dataset this entry applies to. Currently, only views are supported,
// but additional target types may be added in the future. Possible values: VIEWS
func (o DatasetAccessDatasetPtrOutput) TargetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatasetAccessDataset) []string {
		if v == nil {
			return nil
		}
		return v.TargetTypes
	}).(pulumi.StringArrayOutput)
}

type DatasetAccessDatasetDataset struct {
	// The ID of the dataset containing this table.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId string `pulumi:"projectId"`
}

// DatasetAccessDatasetDatasetInput is an input type that accepts DatasetAccessDatasetDatasetArgs and DatasetAccessDatasetDatasetOutput values.
// You can construct a concrete instance of `DatasetAccessDatasetDatasetInput` via:
//
//	DatasetAccessDatasetDatasetArgs{...}
type DatasetAccessDatasetDatasetInput interface {
	pulumi.Input

	ToDatasetAccessDatasetDatasetOutput() DatasetAccessDatasetDatasetOutput
	ToDatasetAccessDatasetDatasetOutputWithContext(context.Context) DatasetAccessDatasetDatasetOutput
}

type DatasetAccessDatasetDatasetArgs struct {
	// The ID of the dataset containing this table.
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (DatasetAccessDatasetDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessDatasetDataset)(nil)).Elem()
}

func (i DatasetAccessDatasetDatasetArgs) ToDatasetAccessDatasetDatasetOutput() DatasetAccessDatasetDatasetOutput {
	return i.ToDatasetAccessDatasetDatasetOutputWithContext(context.Background())
}

func (i DatasetAccessDatasetDatasetArgs) ToDatasetAccessDatasetDatasetOutputWithContext(ctx context.Context) DatasetAccessDatasetDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessDatasetDatasetOutput)
}

func (i DatasetAccessDatasetDatasetArgs) ToDatasetAccessDatasetDatasetPtrOutput() DatasetAccessDatasetDatasetPtrOutput {
	return i.ToDatasetAccessDatasetDatasetPtrOutputWithContext(context.Background())
}

func (i DatasetAccessDatasetDatasetArgs) ToDatasetAccessDatasetDatasetPtrOutputWithContext(ctx context.Context) DatasetAccessDatasetDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessDatasetDatasetOutput).ToDatasetAccessDatasetDatasetPtrOutputWithContext(ctx)
}

// DatasetAccessDatasetDatasetPtrInput is an input type that accepts DatasetAccessDatasetDatasetArgs, DatasetAccessDatasetDatasetPtr and DatasetAccessDatasetDatasetPtrOutput values.
// You can construct a concrete instance of `DatasetAccessDatasetDatasetPtrInput` via:
//
//	        DatasetAccessDatasetDatasetArgs{...}
//
//	or:
//
//	        nil
type DatasetAccessDatasetDatasetPtrInput interface {
	pulumi.Input

	ToDatasetAccessDatasetDatasetPtrOutput() DatasetAccessDatasetDatasetPtrOutput
	ToDatasetAccessDatasetDatasetPtrOutputWithContext(context.Context) DatasetAccessDatasetDatasetPtrOutput
}

type datasetAccessDatasetDatasetPtrType DatasetAccessDatasetDatasetArgs

func DatasetAccessDatasetDatasetPtr(v *DatasetAccessDatasetDatasetArgs) DatasetAccessDatasetDatasetPtrInput {
	return (*datasetAccessDatasetDatasetPtrType)(v)
}

func (*datasetAccessDatasetDatasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessDatasetDataset)(nil)).Elem()
}

func (i *datasetAccessDatasetDatasetPtrType) ToDatasetAccessDatasetDatasetPtrOutput() DatasetAccessDatasetDatasetPtrOutput {
	return i.ToDatasetAccessDatasetDatasetPtrOutputWithContext(context.Background())
}

func (i *datasetAccessDatasetDatasetPtrType) ToDatasetAccessDatasetDatasetPtrOutputWithContext(ctx context.Context) DatasetAccessDatasetDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessDatasetDatasetPtrOutput)
}

type DatasetAccessDatasetDatasetOutput struct{ *pulumi.OutputState }

func (DatasetAccessDatasetDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessDatasetDataset)(nil)).Elem()
}

func (o DatasetAccessDatasetDatasetOutput) ToDatasetAccessDatasetDatasetOutput() DatasetAccessDatasetDatasetOutput {
	return o
}

func (o DatasetAccessDatasetDatasetOutput) ToDatasetAccessDatasetDatasetOutputWithContext(ctx context.Context) DatasetAccessDatasetDatasetOutput {
	return o
}

func (o DatasetAccessDatasetDatasetOutput) ToDatasetAccessDatasetDatasetPtrOutput() DatasetAccessDatasetDatasetPtrOutput {
	return o.ToDatasetAccessDatasetDatasetPtrOutputWithContext(context.Background())
}

func (o DatasetAccessDatasetDatasetOutput) ToDatasetAccessDatasetDatasetPtrOutputWithContext(ctx context.Context) DatasetAccessDatasetDatasetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetAccessDatasetDataset) *DatasetAccessDatasetDataset {
		return &v
	}).(DatasetAccessDatasetDatasetPtrOutput)
}

// The ID of the dataset containing this table.
func (o DatasetAccessDatasetDatasetOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessDatasetDataset) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the project containing this table.
func (o DatasetAccessDatasetDatasetOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessDatasetDataset) string { return v.ProjectId }).(pulumi.StringOutput)
}

type DatasetAccessDatasetDatasetPtrOutput struct{ *pulumi.OutputState }

func (DatasetAccessDatasetDatasetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessDatasetDataset)(nil)).Elem()
}

func (o DatasetAccessDatasetDatasetPtrOutput) ToDatasetAccessDatasetDatasetPtrOutput() DatasetAccessDatasetDatasetPtrOutput {
	return o
}

func (o DatasetAccessDatasetDatasetPtrOutput) ToDatasetAccessDatasetDatasetPtrOutputWithContext(ctx context.Context) DatasetAccessDatasetDatasetPtrOutput {
	return o
}

func (o DatasetAccessDatasetDatasetPtrOutput) Elem() DatasetAccessDatasetDatasetOutput {
	return o.ApplyT(func(v *DatasetAccessDatasetDataset) DatasetAccessDatasetDataset {
		if v != nil {
			return *v
		}
		var ret DatasetAccessDatasetDataset
		return ret
	}).(DatasetAccessDatasetDatasetOutput)
}

// The ID of the dataset containing this table.
func (o DatasetAccessDatasetDatasetPtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAccessDatasetDataset) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this table.
func (o DatasetAccessDatasetDatasetPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAccessDatasetDataset) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectId
	}).(pulumi.StringPtrOutput)
}

type DatasetAccessRoutine struct {
	// The ID of the dataset containing this table.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId string `pulumi:"projectId"`
	// The ID of the routine. The ID must contain only letters (a-z,
	// A-Z), numbers (0-9), or underscores (_). The maximum length
	// is 256 characters.
	RoutineId string `pulumi:"routineId"`
}

// DatasetAccessRoutineInput is an input type that accepts DatasetAccessRoutineArgs and DatasetAccessRoutineOutput values.
// You can construct a concrete instance of `DatasetAccessRoutineInput` via:
//
//	DatasetAccessRoutineArgs{...}
type DatasetAccessRoutineInput interface {
	pulumi.Input

	ToDatasetAccessRoutineOutput() DatasetAccessRoutineOutput
	ToDatasetAccessRoutineOutputWithContext(context.Context) DatasetAccessRoutineOutput
}

type DatasetAccessRoutineArgs struct {
	// The ID of the dataset containing this table.
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The ID of the routine. The ID must contain only letters (a-z,
	// A-Z), numbers (0-9), or underscores (_). The maximum length
	// is 256 characters.
	RoutineId pulumi.StringInput `pulumi:"routineId"`
}

func (DatasetAccessRoutineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessRoutine)(nil)).Elem()
}

func (i DatasetAccessRoutineArgs) ToDatasetAccessRoutineOutput() DatasetAccessRoutineOutput {
	return i.ToDatasetAccessRoutineOutputWithContext(context.Background())
}

func (i DatasetAccessRoutineArgs) ToDatasetAccessRoutineOutputWithContext(ctx context.Context) DatasetAccessRoutineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessRoutineOutput)
}

func (i DatasetAccessRoutineArgs) ToDatasetAccessRoutinePtrOutput() DatasetAccessRoutinePtrOutput {
	return i.ToDatasetAccessRoutinePtrOutputWithContext(context.Background())
}

func (i DatasetAccessRoutineArgs) ToDatasetAccessRoutinePtrOutputWithContext(ctx context.Context) DatasetAccessRoutinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessRoutineOutput).ToDatasetAccessRoutinePtrOutputWithContext(ctx)
}

// DatasetAccessRoutinePtrInput is an input type that accepts DatasetAccessRoutineArgs, DatasetAccessRoutinePtr and DatasetAccessRoutinePtrOutput values.
// You can construct a concrete instance of `DatasetAccessRoutinePtrInput` via:
//
//	        DatasetAccessRoutineArgs{...}
//
//	or:
//
//	        nil
type DatasetAccessRoutinePtrInput interface {
	pulumi.Input

	ToDatasetAccessRoutinePtrOutput() DatasetAccessRoutinePtrOutput
	ToDatasetAccessRoutinePtrOutputWithContext(context.Context) DatasetAccessRoutinePtrOutput
}

type datasetAccessRoutinePtrType DatasetAccessRoutineArgs

func DatasetAccessRoutinePtr(v *DatasetAccessRoutineArgs) DatasetAccessRoutinePtrInput {
	return (*datasetAccessRoutinePtrType)(v)
}

func (*datasetAccessRoutinePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessRoutine)(nil)).Elem()
}

func (i *datasetAccessRoutinePtrType) ToDatasetAccessRoutinePtrOutput() DatasetAccessRoutinePtrOutput {
	return i.ToDatasetAccessRoutinePtrOutputWithContext(context.Background())
}

func (i *datasetAccessRoutinePtrType) ToDatasetAccessRoutinePtrOutputWithContext(ctx context.Context) DatasetAccessRoutinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessRoutinePtrOutput)
}

type DatasetAccessRoutineOutput struct{ *pulumi.OutputState }

func (DatasetAccessRoutineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessRoutine)(nil)).Elem()
}

func (o DatasetAccessRoutineOutput) ToDatasetAccessRoutineOutput() DatasetAccessRoutineOutput {
	return o
}

func (o DatasetAccessRoutineOutput) ToDatasetAccessRoutineOutputWithContext(ctx context.Context) DatasetAccessRoutineOutput {
	return o
}

func (o DatasetAccessRoutineOutput) ToDatasetAccessRoutinePtrOutput() DatasetAccessRoutinePtrOutput {
	return o.ToDatasetAccessRoutinePtrOutputWithContext(context.Background())
}

func (o DatasetAccessRoutineOutput) ToDatasetAccessRoutinePtrOutputWithContext(ctx context.Context) DatasetAccessRoutinePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetAccessRoutine) *DatasetAccessRoutine {
		return &v
	}).(DatasetAccessRoutinePtrOutput)
}

// The ID of the dataset containing this table.
func (o DatasetAccessRoutineOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessRoutine) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the project containing this table.
func (o DatasetAccessRoutineOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessRoutine) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The ID of the routine. The ID must contain only letters (a-z,
// A-Z), numbers (0-9), or underscores (_). The maximum length
// is 256 characters.
func (o DatasetAccessRoutineOutput) RoutineId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessRoutine) string { return v.RoutineId }).(pulumi.StringOutput)
}

type DatasetAccessRoutinePtrOutput struct{ *pulumi.OutputState }

func (DatasetAccessRoutinePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessRoutine)(nil)).Elem()
}

func (o DatasetAccessRoutinePtrOutput) ToDatasetAccessRoutinePtrOutput() DatasetAccessRoutinePtrOutput {
	return o
}

func (o DatasetAccessRoutinePtrOutput) ToDatasetAccessRoutinePtrOutputWithContext(ctx context.Context) DatasetAccessRoutinePtrOutput {
	return o
}

func (o DatasetAccessRoutinePtrOutput) Elem() DatasetAccessRoutineOutput {
	return o.ApplyT(func(v *DatasetAccessRoutine) DatasetAccessRoutine {
		if v != nil {
			return *v
		}
		var ret DatasetAccessRoutine
		return ret
	}).(DatasetAccessRoutineOutput)
}

// The ID of the dataset containing this table.
func (o DatasetAccessRoutinePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAccessRoutine) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this table.
func (o DatasetAccessRoutinePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAccessRoutine) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// The ID of the routine. The ID must contain only letters (a-z,
// A-Z), numbers (0-9), or underscores (_). The maximum length
// is 256 characters.
func (o DatasetAccessRoutinePtrOutput) RoutineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAccessRoutine) *string {
		if v == nil {
			return nil
		}
		return &v.RoutineId
	}).(pulumi.StringPtrOutput)
}

type DatasetAccessView struct {
	// The ID of the dataset containing this table.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId string `pulumi:"projectId"`
	// The ID of the table. The ID must contain only letters (a-z,
	// A-Z), numbers (0-9), or underscores (_). The maximum length
	// is 1,024 characters.
	TableId string `pulumi:"tableId"`
}

// DatasetAccessViewInput is an input type that accepts DatasetAccessViewArgs and DatasetAccessViewOutput values.
// You can construct a concrete instance of `DatasetAccessViewInput` via:
//
//	DatasetAccessViewArgs{...}
type DatasetAccessViewInput interface {
	pulumi.Input

	ToDatasetAccessViewOutput() DatasetAccessViewOutput
	ToDatasetAccessViewOutputWithContext(context.Context) DatasetAccessViewOutput
}

type DatasetAccessViewArgs struct {
	// The ID of the dataset containing this table.
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The ID of the table. The ID must contain only letters (a-z,
	// A-Z), numbers (0-9), or underscores (_). The maximum length
	// is 1,024 characters.
	TableId pulumi.StringInput `pulumi:"tableId"`
}

func (DatasetAccessViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessView)(nil)).Elem()
}

func (i DatasetAccessViewArgs) ToDatasetAccessViewOutput() DatasetAccessViewOutput {
	return i.ToDatasetAccessViewOutputWithContext(context.Background())
}

func (i DatasetAccessViewArgs) ToDatasetAccessViewOutputWithContext(ctx context.Context) DatasetAccessViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessViewOutput)
}

func (i DatasetAccessViewArgs) ToDatasetAccessViewPtrOutput() DatasetAccessViewPtrOutput {
	return i.ToDatasetAccessViewPtrOutputWithContext(context.Background())
}

func (i DatasetAccessViewArgs) ToDatasetAccessViewPtrOutputWithContext(ctx context.Context) DatasetAccessViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessViewOutput).ToDatasetAccessViewPtrOutputWithContext(ctx)
}

// DatasetAccessViewPtrInput is an input type that accepts DatasetAccessViewArgs, DatasetAccessViewPtr and DatasetAccessViewPtrOutput values.
// You can construct a concrete instance of `DatasetAccessViewPtrInput` via:
//
//	        DatasetAccessViewArgs{...}
//
//	or:
//
//	        nil
type DatasetAccessViewPtrInput interface {
	pulumi.Input

	ToDatasetAccessViewPtrOutput() DatasetAccessViewPtrOutput
	ToDatasetAccessViewPtrOutputWithContext(context.Context) DatasetAccessViewPtrOutput
}

type datasetAccessViewPtrType DatasetAccessViewArgs

func DatasetAccessViewPtr(v *DatasetAccessViewArgs) DatasetAccessViewPtrInput {
	return (*datasetAccessViewPtrType)(v)
}

func (*datasetAccessViewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessView)(nil)).Elem()
}

func (i *datasetAccessViewPtrType) ToDatasetAccessViewPtrOutput() DatasetAccessViewPtrOutput {
	return i.ToDatasetAccessViewPtrOutputWithContext(context.Background())
}

func (i *datasetAccessViewPtrType) ToDatasetAccessViewPtrOutputWithContext(ctx context.Context) DatasetAccessViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessViewPtrOutput)
}

type DatasetAccessViewOutput struct{ *pulumi.OutputState }

func (DatasetAccessViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessView)(nil)).Elem()
}

func (o DatasetAccessViewOutput) ToDatasetAccessViewOutput() DatasetAccessViewOutput {
	return o
}

func (o DatasetAccessViewOutput) ToDatasetAccessViewOutputWithContext(ctx context.Context) DatasetAccessViewOutput {
	return o
}

func (o DatasetAccessViewOutput) ToDatasetAccessViewPtrOutput() DatasetAccessViewPtrOutput {
	return o.ToDatasetAccessViewPtrOutputWithContext(context.Background())
}

func (o DatasetAccessViewOutput) ToDatasetAccessViewPtrOutputWithContext(ctx context.Context) DatasetAccessViewPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetAccessView) *DatasetAccessView {
		return &v
	}).(DatasetAccessViewPtrOutput)
}

// The ID of the dataset containing this table.
func (o DatasetAccessViewOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessView) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the project containing this table.
func (o DatasetAccessViewOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessView) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The ID of the table. The ID must contain only letters (a-z,
// A-Z), numbers (0-9), or underscores (_). The maximum length
// is 1,024 characters.
func (o DatasetAccessViewOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessView) string { return v.TableId }).(pulumi.StringOutput)
}

type DatasetAccessViewPtrOutput struct{ *pulumi.OutputState }

func (DatasetAccessViewPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessView)(nil)).Elem()
}

func (o DatasetAccessViewPtrOutput) ToDatasetAccessViewPtrOutput() DatasetAccessViewPtrOutput {
	return o
}

func (o DatasetAccessViewPtrOutput) ToDatasetAccessViewPtrOutputWithContext(ctx context.Context) DatasetAccessViewPtrOutput {
	return o
}

func (o DatasetAccessViewPtrOutput) Elem() DatasetAccessViewOutput {
	return o.ApplyT(func(v *DatasetAccessView) DatasetAccessView {
		if v != nil {
			return *v
		}
		var ret DatasetAccessView
		return ret
	}).(DatasetAccessViewOutput)
}

// The ID of the dataset containing this table.
func (o DatasetAccessViewPtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAccessView) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this table.
func (o DatasetAccessViewPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAccessView) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// The ID of the table. The ID must contain only letters (a-z,
// A-Z), numbers (0-9), or underscores (_). The maximum length
// is 1,024 characters.
func (o DatasetAccessViewPtrOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAccessView) *string {
		if v == nil {
			return nil
		}
		return &v.TableId
	}).(pulumi.StringPtrOutput)
}

type DatasetDefaultEncryptionConfiguration struct {
	// Describes the Cloud KMS encryption key that will be used to protect destination
	// BigQuery table. The BigQuery Service Account associated with your project requires
	// access to this encryption key.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// DatasetDefaultEncryptionConfigurationInput is an input type that accepts DatasetDefaultEncryptionConfigurationArgs and DatasetDefaultEncryptionConfigurationOutput values.
// You can construct a concrete instance of `DatasetDefaultEncryptionConfigurationInput` via:
//
//	DatasetDefaultEncryptionConfigurationArgs{...}
type DatasetDefaultEncryptionConfigurationInput interface {
	pulumi.Input

	ToDatasetDefaultEncryptionConfigurationOutput() DatasetDefaultEncryptionConfigurationOutput
	ToDatasetDefaultEncryptionConfigurationOutputWithContext(context.Context) DatasetDefaultEncryptionConfigurationOutput
}

type DatasetDefaultEncryptionConfigurationArgs struct {
	// Describes the Cloud KMS encryption key that will be used to protect destination
	// BigQuery table. The BigQuery Service Account associated with your project requires
	// access to this encryption key.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (DatasetDefaultEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDefaultEncryptionConfiguration)(nil)).Elem()
}

func (i DatasetDefaultEncryptionConfigurationArgs) ToDatasetDefaultEncryptionConfigurationOutput() DatasetDefaultEncryptionConfigurationOutput {
	return i.ToDatasetDefaultEncryptionConfigurationOutputWithContext(context.Background())
}

func (i DatasetDefaultEncryptionConfigurationArgs) ToDatasetDefaultEncryptionConfigurationOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefaultEncryptionConfigurationOutput)
}

func (i DatasetDefaultEncryptionConfigurationArgs) ToDatasetDefaultEncryptionConfigurationPtrOutput() DatasetDefaultEncryptionConfigurationPtrOutput {
	return i.ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i DatasetDefaultEncryptionConfigurationArgs) ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefaultEncryptionConfigurationOutput).ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(ctx)
}

// DatasetDefaultEncryptionConfigurationPtrInput is an input type that accepts DatasetDefaultEncryptionConfigurationArgs, DatasetDefaultEncryptionConfigurationPtr and DatasetDefaultEncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `DatasetDefaultEncryptionConfigurationPtrInput` via:
//
//	        DatasetDefaultEncryptionConfigurationArgs{...}
//
//	or:
//
//	        nil
type DatasetDefaultEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToDatasetDefaultEncryptionConfigurationPtrOutput() DatasetDefaultEncryptionConfigurationPtrOutput
	ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(context.Context) DatasetDefaultEncryptionConfigurationPtrOutput
}

type datasetDefaultEncryptionConfigurationPtrType DatasetDefaultEncryptionConfigurationArgs

func DatasetDefaultEncryptionConfigurationPtr(v *DatasetDefaultEncryptionConfigurationArgs) DatasetDefaultEncryptionConfigurationPtrInput {
	return (*datasetDefaultEncryptionConfigurationPtrType)(v)
}

func (*datasetDefaultEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDefaultEncryptionConfiguration)(nil)).Elem()
}

func (i *datasetDefaultEncryptionConfigurationPtrType) ToDatasetDefaultEncryptionConfigurationPtrOutput() DatasetDefaultEncryptionConfigurationPtrOutput {
	return i.ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *datasetDefaultEncryptionConfigurationPtrType) ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefaultEncryptionConfigurationPtrOutput)
}

type DatasetDefaultEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (DatasetDefaultEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDefaultEncryptionConfiguration)(nil)).Elem()
}

func (o DatasetDefaultEncryptionConfigurationOutput) ToDatasetDefaultEncryptionConfigurationOutput() DatasetDefaultEncryptionConfigurationOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationOutput) ToDatasetDefaultEncryptionConfigurationOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationOutput) ToDatasetDefaultEncryptionConfigurationPtrOutput() DatasetDefaultEncryptionConfigurationPtrOutput {
	return o.ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o DatasetDefaultEncryptionConfigurationOutput) ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetDefaultEncryptionConfiguration) *DatasetDefaultEncryptionConfiguration {
		return &v
	}).(DatasetDefaultEncryptionConfigurationPtrOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect destination
// BigQuery table. The BigQuery Service Account associated with your project requires
// access to this encryption key.
func (o DatasetDefaultEncryptionConfigurationOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDefaultEncryptionConfiguration) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type DatasetDefaultEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DatasetDefaultEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDefaultEncryptionConfiguration)(nil)).Elem()
}

func (o DatasetDefaultEncryptionConfigurationPtrOutput) ToDatasetDefaultEncryptionConfigurationPtrOutput() DatasetDefaultEncryptionConfigurationPtrOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationPtrOutput) ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationPtrOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationPtrOutput) Elem() DatasetDefaultEncryptionConfigurationOutput {
	return o.ApplyT(func(v *DatasetDefaultEncryptionConfiguration) DatasetDefaultEncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret DatasetDefaultEncryptionConfiguration
		return ret
	}).(DatasetDefaultEncryptionConfigurationOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect destination
// BigQuery table. The BigQuery Service Account associated with your project requires
// access to this encryption key.
func (o DatasetDefaultEncryptionConfigurationPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDefaultEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

type DatasetIamBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// DatasetIamBindingConditionInput is an input type that accepts DatasetIamBindingConditionArgs and DatasetIamBindingConditionOutput values.
// You can construct a concrete instance of `DatasetIamBindingConditionInput` via:
//
//	DatasetIamBindingConditionArgs{...}
type DatasetIamBindingConditionInput interface {
	pulumi.Input

	ToDatasetIamBindingConditionOutput() DatasetIamBindingConditionOutput
	ToDatasetIamBindingConditionOutputWithContext(context.Context) DatasetIamBindingConditionOutput
}

type DatasetIamBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (DatasetIamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetIamBindingCondition)(nil)).Elem()
}

func (i DatasetIamBindingConditionArgs) ToDatasetIamBindingConditionOutput() DatasetIamBindingConditionOutput {
	return i.ToDatasetIamBindingConditionOutputWithContext(context.Background())
}

func (i DatasetIamBindingConditionArgs) ToDatasetIamBindingConditionOutputWithContext(ctx context.Context) DatasetIamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetIamBindingConditionOutput)
}

func (i DatasetIamBindingConditionArgs) ToDatasetIamBindingConditionPtrOutput() DatasetIamBindingConditionPtrOutput {
	return i.ToDatasetIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i DatasetIamBindingConditionArgs) ToDatasetIamBindingConditionPtrOutputWithContext(ctx context.Context) DatasetIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetIamBindingConditionOutput).ToDatasetIamBindingConditionPtrOutputWithContext(ctx)
}

// DatasetIamBindingConditionPtrInput is an input type that accepts DatasetIamBindingConditionArgs, DatasetIamBindingConditionPtr and DatasetIamBindingConditionPtrOutput values.
// You can construct a concrete instance of `DatasetIamBindingConditionPtrInput` via:
//
//	        DatasetIamBindingConditionArgs{...}
//
//	or:
//
//	        nil
type DatasetIamBindingConditionPtrInput interface {
	pulumi.Input

	ToDatasetIamBindingConditionPtrOutput() DatasetIamBindingConditionPtrOutput
	ToDatasetIamBindingConditionPtrOutputWithContext(context.Context) DatasetIamBindingConditionPtrOutput
}

type datasetIamBindingConditionPtrType DatasetIamBindingConditionArgs

func DatasetIamBindingConditionPtr(v *DatasetIamBindingConditionArgs) DatasetIamBindingConditionPtrInput {
	return (*datasetIamBindingConditionPtrType)(v)
}

func (*datasetIamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetIamBindingCondition)(nil)).Elem()
}

func (i *datasetIamBindingConditionPtrType) ToDatasetIamBindingConditionPtrOutput() DatasetIamBindingConditionPtrOutput {
	return i.ToDatasetIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *datasetIamBindingConditionPtrType) ToDatasetIamBindingConditionPtrOutputWithContext(ctx context.Context) DatasetIamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetIamBindingConditionPtrOutput)
}

type DatasetIamBindingConditionOutput struct{ *pulumi.OutputState }

func (DatasetIamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetIamBindingCondition)(nil)).Elem()
}

func (o DatasetIamBindingConditionOutput) ToDatasetIamBindingConditionOutput() DatasetIamBindingConditionOutput {
	return o
}

func (o DatasetIamBindingConditionOutput) ToDatasetIamBindingConditionOutputWithContext(ctx context.Context) DatasetIamBindingConditionOutput {
	return o
}

func (o DatasetIamBindingConditionOutput) ToDatasetIamBindingConditionPtrOutput() DatasetIamBindingConditionPtrOutput {
	return o.ToDatasetIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o DatasetIamBindingConditionOutput) ToDatasetIamBindingConditionPtrOutputWithContext(ctx context.Context) DatasetIamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetIamBindingCondition) *DatasetIamBindingCondition {
		return &v
	}).(DatasetIamBindingConditionPtrOutput)
}

func (o DatasetIamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetIamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DatasetIamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetIamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o DatasetIamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetIamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type DatasetIamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (DatasetIamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetIamBindingCondition)(nil)).Elem()
}

func (o DatasetIamBindingConditionPtrOutput) ToDatasetIamBindingConditionPtrOutput() DatasetIamBindingConditionPtrOutput {
	return o
}

func (o DatasetIamBindingConditionPtrOutput) ToDatasetIamBindingConditionPtrOutputWithContext(ctx context.Context) DatasetIamBindingConditionPtrOutput {
	return o
}

func (o DatasetIamBindingConditionPtrOutput) Elem() DatasetIamBindingConditionOutput {
	return o.ApplyT(func(v *DatasetIamBindingCondition) DatasetIamBindingCondition {
		if v != nil {
			return *v
		}
		var ret DatasetIamBindingCondition
		return ret
	}).(DatasetIamBindingConditionOutput)
}

func (o DatasetIamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o DatasetIamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o DatasetIamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetIamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type DatasetIamMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// DatasetIamMemberConditionInput is an input type that accepts DatasetIamMemberConditionArgs and DatasetIamMemberConditionOutput values.
// You can construct a concrete instance of `DatasetIamMemberConditionInput` via:
//
//	DatasetIamMemberConditionArgs{...}
type DatasetIamMemberConditionInput interface {
	pulumi.Input

	ToDatasetIamMemberConditionOutput() DatasetIamMemberConditionOutput
	ToDatasetIamMemberConditionOutputWithContext(context.Context) DatasetIamMemberConditionOutput
}

type DatasetIamMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (DatasetIamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetIamMemberCondition)(nil)).Elem()
}

func (i DatasetIamMemberConditionArgs) ToDatasetIamMemberConditionOutput() DatasetIamMemberConditionOutput {
	return i.ToDatasetIamMemberConditionOutputWithContext(context.Background())
}

func (i DatasetIamMemberConditionArgs) ToDatasetIamMemberConditionOutputWithContext(ctx context.Context) DatasetIamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetIamMemberConditionOutput)
}

func (i DatasetIamMemberConditionArgs) ToDatasetIamMemberConditionPtrOutput() DatasetIamMemberConditionPtrOutput {
	return i.ToDatasetIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i DatasetIamMemberConditionArgs) ToDatasetIamMemberConditionPtrOutputWithContext(ctx context.Context) DatasetIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetIamMemberConditionOutput).ToDatasetIamMemberConditionPtrOutputWithContext(ctx)
}

// DatasetIamMemberConditionPtrInput is an input type that accepts DatasetIamMemberConditionArgs, DatasetIamMemberConditionPtr and DatasetIamMemberConditionPtrOutput values.
// You can construct a concrete instance of `DatasetIamMemberConditionPtrInput` via:
//
//	        DatasetIamMemberConditionArgs{...}
//
//	or:
//
//	        nil
type DatasetIamMemberConditionPtrInput interface {
	pulumi.Input

	ToDatasetIamMemberConditionPtrOutput() DatasetIamMemberConditionPtrOutput
	ToDatasetIamMemberConditionPtrOutputWithContext(context.Context) DatasetIamMemberConditionPtrOutput
}

type datasetIamMemberConditionPtrType DatasetIamMemberConditionArgs

func DatasetIamMemberConditionPtr(v *DatasetIamMemberConditionArgs) DatasetIamMemberConditionPtrInput {
	return (*datasetIamMemberConditionPtrType)(v)
}

func (*datasetIamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetIamMemberCondition)(nil)).Elem()
}

func (i *datasetIamMemberConditionPtrType) ToDatasetIamMemberConditionPtrOutput() DatasetIamMemberConditionPtrOutput {
	return i.ToDatasetIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *datasetIamMemberConditionPtrType) ToDatasetIamMemberConditionPtrOutputWithContext(ctx context.Context) DatasetIamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetIamMemberConditionPtrOutput)
}

type DatasetIamMemberConditionOutput struct{ *pulumi.OutputState }

func (DatasetIamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetIamMemberCondition)(nil)).Elem()
}

func (o DatasetIamMemberConditionOutput) ToDatasetIamMemberConditionOutput() DatasetIamMemberConditionOutput {
	return o
}

func (o DatasetIamMemberConditionOutput) ToDatasetIamMemberConditionOutputWithContext(ctx context.Context) DatasetIamMemberConditionOutput {
	return o
}

func (o DatasetIamMemberConditionOutput) ToDatasetIamMemberConditionPtrOutput() DatasetIamMemberConditionPtrOutput {
	return o.ToDatasetIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o DatasetIamMemberConditionOutput) ToDatasetIamMemberConditionPtrOutputWithContext(ctx context.Context) DatasetIamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetIamMemberCondition) *DatasetIamMemberCondition {
		return &v
	}).(DatasetIamMemberConditionPtrOutput)
}

func (o DatasetIamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetIamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DatasetIamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetIamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o DatasetIamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetIamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type DatasetIamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (DatasetIamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetIamMemberCondition)(nil)).Elem()
}

func (o DatasetIamMemberConditionPtrOutput) ToDatasetIamMemberConditionPtrOutput() DatasetIamMemberConditionPtrOutput {
	return o
}

func (o DatasetIamMemberConditionPtrOutput) ToDatasetIamMemberConditionPtrOutputWithContext(ctx context.Context) DatasetIamMemberConditionPtrOutput {
	return o
}

func (o DatasetIamMemberConditionPtrOutput) Elem() DatasetIamMemberConditionOutput {
	return o.ApplyT(func(v *DatasetIamMemberCondition) DatasetIamMemberCondition {
		if v != nil {
			return *v
		}
		var ret DatasetIamMemberCondition
		return ret
	}).(DatasetIamMemberConditionOutput)
}

func (o DatasetIamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o DatasetIamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o DatasetIamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetIamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type IamBindingCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// IamBindingConditionInput is an input type that accepts IamBindingConditionArgs and IamBindingConditionOutput values.
// You can construct a concrete instance of `IamBindingConditionInput` via:
//
//	IamBindingConditionArgs{...}
type IamBindingConditionInput interface {
	pulumi.Input

	ToIamBindingConditionOutput() IamBindingConditionOutput
	ToIamBindingConditionOutputWithContext(context.Context) IamBindingConditionOutput
}

type IamBindingConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (IamBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IamBindingCondition)(nil)).Elem()
}

func (i IamBindingConditionArgs) ToIamBindingConditionOutput() IamBindingConditionOutput {
	return i.ToIamBindingConditionOutputWithContext(context.Background())
}

func (i IamBindingConditionArgs) ToIamBindingConditionOutputWithContext(ctx context.Context) IamBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamBindingConditionOutput)
}

func (i IamBindingConditionArgs) ToIamBindingConditionPtrOutput() IamBindingConditionPtrOutput {
	return i.ToIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i IamBindingConditionArgs) ToIamBindingConditionPtrOutputWithContext(ctx context.Context) IamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamBindingConditionOutput).ToIamBindingConditionPtrOutputWithContext(ctx)
}

// IamBindingConditionPtrInput is an input type that accepts IamBindingConditionArgs, IamBindingConditionPtr and IamBindingConditionPtrOutput values.
// You can construct a concrete instance of `IamBindingConditionPtrInput` via:
//
//	        IamBindingConditionArgs{...}
//
//	or:
//
//	        nil
type IamBindingConditionPtrInput interface {
	pulumi.Input

	ToIamBindingConditionPtrOutput() IamBindingConditionPtrOutput
	ToIamBindingConditionPtrOutputWithContext(context.Context) IamBindingConditionPtrOutput
}

type iamBindingConditionPtrType IamBindingConditionArgs

func IamBindingConditionPtr(v *IamBindingConditionArgs) IamBindingConditionPtrInput {
	return (*iamBindingConditionPtrType)(v)
}

func (*iamBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IamBindingCondition)(nil)).Elem()
}

func (i *iamBindingConditionPtrType) ToIamBindingConditionPtrOutput() IamBindingConditionPtrOutput {
	return i.ToIamBindingConditionPtrOutputWithContext(context.Background())
}

func (i *iamBindingConditionPtrType) ToIamBindingConditionPtrOutputWithContext(ctx context.Context) IamBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamBindingConditionPtrOutput)
}

type IamBindingConditionOutput struct{ *pulumi.OutputState }

func (IamBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IamBindingCondition)(nil)).Elem()
}

func (o IamBindingConditionOutput) ToIamBindingConditionOutput() IamBindingConditionOutput {
	return o
}

func (o IamBindingConditionOutput) ToIamBindingConditionOutputWithContext(ctx context.Context) IamBindingConditionOutput {
	return o
}

func (o IamBindingConditionOutput) ToIamBindingConditionPtrOutput() IamBindingConditionPtrOutput {
	return o.ToIamBindingConditionPtrOutputWithContext(context.Background())
}

func (o IamBindingConditionOutput) ToIamBindingConditionPtrOutputWithContext(ctx context.Context) IamBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IamBindingCondition) *IamBindingCondition {
		return &v
	}).(IamBindingConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o IamBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IamBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IamBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v IamBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IamBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v IamBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type IamBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (IamBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamBindingCondition)(nil)).Elem()
}

func (o IamBindingConditionPtrOutput) ToIamBindingConditionPtrOutput() IamBindingConditionPtrOutput {
	return o
}

func (o IamBindingConditionPtrOutput) ToIamBindingConditionPtrOutputWithContext(ctx context.Context) IamBindingConditionPtrOutput {
	return o
}

func (o IamBindingConditionPtrOutput) Elem() IamBindingConditionOutput {
	return o.ApplyT(func(v *IamBindingCondition) IamBindingCondition {
		if v != nil {
			return *v
		}
		var ret IamBindingCondition
		return ret
	}).(IamBindingConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o IamBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IamBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IamBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type IamMemberCondition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// IamMemberConditionInput is an input type that accepts IamMemberConditionArgs and IamMemberConditionOutput values.
// You can construct a concrete instance of `IamMemberConditionInput` via:
//
//	IamMemberConditionArgs{...}
type IamMemberConditionInput interface {
	pulumi.Input

	ToIamMemberConditionOutput() IamMemberConditionOutput
	ToIamMemberConditionOutputWithContext(context.Context) IamMemberConditionOutput
}

type IamMemberConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (IamMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IamMemberCondition)(nil)).Elem()
}

func (i IamMemberConditionArgs) ToIamMemberConditionOutput() IamMemberConditionOutput {
	return i.ToIamMemberConditionOutputWithContext(context.Background())
}

func (i IamMemberConditionArgs) ToIamMemberConditionOutputWithContext(ctx context.Context) IamMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamMemberConditionOutput)
}

func (i IamMemberConditionArgs) ToIamMemberConditionPtrOutput() IamMemberConditionPtrOutput {
	return i.ToIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i IamMemberConditionArgs) ToIamMemberConditionPtrOutputWithContext(ctx context.Context) IamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamMemberConditionOutput).ToIamMemberConditionPtrOutputWithContext(ctx)
}

// IamMemberConditionPtrInput is an input type that accepts IamMemberConditionArgs, IamMemberConditionPtr and IamMemberConditionPtrOutput values.
// You can construct a concrete instance of `IamMemberConditionPtrInput` via:
//
//	        IamMemberConditionArgs{...}
//
//	or:
//
//	        nil
type IamMemberConditionPtrInput interface {
	pulumi.Input

	ToIamMemberConditionPtrOutput() IamMemberConditionPtrOutput
	ToIamMemberConditionPtrOutputWithContext(context.Context) IamMemberConditionPtrOutput
}

type iamMemberConditionPtrType IamMemberConditionArgs

func IamMemberConditionPtr(v *IamMemberConditionArgs) IamMemberConditionPtrInput {
	return (*iamMemberConditionPtrType)(v)
}

func (*iamMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IamMemberCondition)(nil)).Elem()
}

func (i *iamMemberConditionPtrType) ToIamMemberConditionPtrOutput() IamMemberConditionPtrOutput {
	return i.ToIamMemberConditionPtrOutputWithContext(context.Background())
}

func (i *iamMemberConditionPtrType) ToIamMemberConditionPtrOutputWithContext(ctx context.Context) IamMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamMemberConditionPtrOutput)
}

type IamMemberConditionOutput struct{ *pulumi.OutputState }

func (IamMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IamMemberCondition)(nil)).Elem()
}

func (o IamMemberConditionOutput) ToIamMemberConditionOutput() IamMemberConditionOutput {
	return o
}

func (o IamMemberConditionOutput) ToIamMemberConditionOutputWithContext(ctx context.Context) IamMemberConditionOutput {
	return o
}

func (o IamMemberConditionOutput) ToIamMemberConditionPtrOutput() IamMemberConditionPtrOutput {
	return o.ToIamMemberConditionPtrOutputWithContext(context.Background())
}

func (o IamMemberConditionOutput) ToIamMemberConditionPtrOutputWithContext(ctx context.Context) IamMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IamMemberCondition) *IamMemberCondition {
		return &v
	}).(IamMemberConditionPtrOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o IamMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IamMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IamMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v IamMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IamMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v IamMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type IamMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (IamMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamMemberCondition)(nil)).Elem()
}

func (o IamMemberConditionPtrOutput) ToIamMemberConditionPtrOutput() IamMemberConditionPtrOutput {
	return o
}

func (o IamMemberConditionPtrOutput) ToIamMemberConditionPtrOutputWithContext(ctx context.Context) IamMemberConditionPtrOutput {
	return o
}

func (o IamMemberConditionPtrOutput) Elem() IamMemberConditionOutput {
	return o.ApplyT(func(v *IamMemberCondition) IamMemberCondition {
		if v != nil {
			return *v
		}
		var ret IamMemberCondition
		return ret
	}).(IamMemberConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o IamMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o IamMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o IamMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type JobCopy struct {
	// Specifies whether the job is allowed to create new tables. The following values are supported:
	// CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
	// CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
	// Creation, truncation and append actions occur as one atomic update upon job completion
	// Default value is `CREATE_IF_NEEDED`.
	// Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
	CreateDisposition *string `pulumi:"createDisposition"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	// Structure is documented below.
	DestinationEncryptionConfiguration *JobCopyDestinationEncryptionConfiguration `pulumi:"destinationEncryptionConfiguration"`
	// The destination table.
	// Structure is documented below.
	DestinationTable *JobCopyDestinationTable `pulumi:"destinationTable"`
	// Source tables to copy.
	// Structure is documented below.
	SourceTables []JobCopySourceTable `pulumi:"sourceTables"`
	// Specifies the action that occurs if the destination table already exists. The following values are supported:
	// WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
	// WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
	// WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
	// Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
	// Creation, truncation and append actions occur as one atomic update upon job completion.
	// Default value is `WRITE_EMPTY`.
	// Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
	WriteDisposition *string `pulumi:"writeDisposition"`
}

// JobCopyInput is an input type that accepts JobCopyArgs and JobCopyOutput values.
// You can construct a concrete instance of `JobCopyInput` via:
//
//	JobCopyArgs{...}
type JobCopyInput interface {
	pulumi.Input

	ToJobCopyOutput() JobCopyOutput
	ToJobCopyOutputWithContext(context.Context) JobCopyOutput
}

type JobCopyArgs struct {
	// Specifies whether the job is allowed to create new tables. The following values are supported:
	// CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
	// CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
	// Creation, truncation and append actions occur as one atomic update upon job completion
	// Default value is `CREATE_IF_NEEDED`.
	// Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
	CreateDisposition pulumi.StringPtrInput `pulumi:"createDisposition"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	// Structure is documented below.
	DestinationEncryptionConfiguration JobCopyDestinationEncryptionConfigurationPtrInput `pulumi:"destinationEncryptionConfiguration"`
	// The destination table.
	// Structure is documented below.
	DestinationTable JobCopyDestinationTablePtrInput `pulumi:"destinationTable"`
	// Source tables to copy.
	// Structure is documented below.
	SourceTables JobCopySourceTableArrayInput `pulumi:"sourceTables"`
	// Specifies the action that occurs if the destination table already exists. The following values are supported:
	// WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
	// WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
	// WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
	// Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
	// Creation, truncation and append actions occur as one atomic update upon job completion.
	// Default value is `WRITE_EMPTY`.
	// Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
	WriteDisposition pulumi.StringPtrInput `pulumi:"writeDisposition"`
}

func (JobCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCopy)(nil)).Elem()
}

func (i JobCopyArgs) ToJobCopyOutput() JobCopyOutput {
	return i.ToJobCopyOutputWithContext(context.Background())
}

func (i JobCopyArgs) ToJobCopyOutputWithContext(ctx context.Context) JobCopyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCopyOutput)
}

func (i JobCopyArgs) ToJobCopyPtrOutput() JobCopyPtrOutput {
	return i.ToJobCopyPtrOutputWithContext(context.Background())
}

func (i JobCopyArgs) ToJobCopyPtrOutputWithContext(ctx context.Context) JobCopyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCopyOutput).ToJobCopyPtrOutputWithContext(ctx)
}

// JobCopyPtrInput is an input type that accepts JobCopyArgs, JobCopyPtr and JobCopyPtrOutput values.
// You can construct a concrete instance of `JobCopyPtrInput` via:
//
//	        JobCopyArgs{...}
//
//	or:
//
//	        nil
type JobCopyPtrInput interface {
	pulumi.Input

	ToJobCopyPtrOutput() JobCopyPtrOutput
	ToJobCopyPtrOutputWithContext(context.Context) JobCopyPtrOutput
}

type jobCopyPtrType JobCopyArgs

func JobCopyPtr(v *JobCopyArgs) JobCopyPtrInput {
	return (*jobCopyPtrType)(v)
}

func (*jobCopyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobCopy)(nil)).Elem()
}

func (i *jobCopyPtrType) ToJobCopyPtrOutput() JobCopyPtrOutput {
	return i.ToJobCopyPtrOutputWithContext(context.Background())
}

func (i *jobCopyPtrType) ToJobCopyPtrOutputWithContext(ctx context.Context) JobCopyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCopyPtrOutput)
}

type JobCopyOutput struct{ *pulumi.OutputState }

func (JobCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCopy)(nil)).Elem()
}

func (o JobCopyOutput) ToJobCopyOutput() JobCopyOutput {
	return o
}

func (o JobCopyOutput) ToJobCopyOutputWithContext(ctx context.Context) JobCopyOutput {
	return o
}

func (o JobCopyOutput) ToJobCopyPtrOutput() JobCopyPtrOutput {
	return o.ToJobCopyPtrOutputWithContext(context.Background())
}

func (o JobCopyOutput) ToJobCopyPtrOutputWithContext(ctx context.Context) JobCopyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobCopy) *JobCopy {
		return &v
	}).(JobCopyPtrOutput)
}

// Specifies whether the job is allowed to create new tables. The following values are supported:
// CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
// CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
// Creation, truncation and append actions occur as one atomic update upon job completion
// Default value is `CREATE_IF_NEEDED`.
// Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
func (o JobCopyOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCopy) *string { return v.CreateDisposition }).(pulumi.StringPtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys)
// Structure is documented below.
func (o JobCopyOutput) DestinationEncryptionConfiguration() JobCopyDestinationEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v JobCopy) *JobCopyDestinationEncryptionConfiguration {
		return v.DestinationEncryptionConfiguration
	}).(JobCopyDestinationEncryptionConfigurationPtrOutput)
}

// The destination table.
// Structure is documented below.
func (o JobCopyOutput) DestinationTable() JobCopyDestinationTablePtrOutput {
	return o.ApplyT(func(v JobCopy) *JobCopyDestinationTable { return v.DestinationTable }).(JobCopyDestinationTablePtrOutput)
}

// Source tables to copy.
// Structure is documented below.
func (o JobCopyOutput) SourceTables() JobCopySourceTableArrayOutput {
	return o.ApplyT(func(v JobCopy) []JobCopySourceTable { return v.SourceTables }).(JobCopySourceTableArrayOutput)
}

// Specifies the action that occurs if the destination table already exists. The following values are supported:
// WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
// WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
// WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
// Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
// Creation, truncation and append actions occur as one atomic update upon job completion.
// Default value is `WRITE_EMPTY`.
// Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
func (o JobCopyOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCopy) *string { return v.WriteDisposition }).(pulumi.StringPtrOutput)
}

type JobCopyPtrOutput struct{ *pulumi.OutputState }

func (JobCopyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobCopy)(nil)).Elem()
}

func (o JobCopyPtrOutput) ToJobCopyPtrOutput() JobCopyPtrOutput {
	return o
}

func (o JobCopyPtrOutput) ToJobCopyPtrOutputWithContext(ctx context.Context) JobCopyPtrOutput {
	return o
}

func (o JobCopyPtrOutput) Elem() JobCopyOutput {
	return o.ApplyT(func(v *JobCopy) JobCopy {
		if v != nil {
			return *v
		}
		var ret JobCopy
		return ret
	}).(JobCopyOutput)
}

// Specifies whether the job is allowed to create new tables. The following values are supported:
// CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
// CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
// Creation, truncation and append actions occur as one atomic update upon job completion
// Default value is `CREATE_IF_NEEDED`.
// Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
func (o JobCopyPtrOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCopy) *string {
		if v == nil {
			return nil
		}
		return v.CreateDisposition
	}).(pulumi.StringPtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys)
// Structure is documented below.
func (o JobCopyPtrOutput) DestinationEncryptionConfiguration() JobCopyDestinationEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *JobCopy) *JobCopyDestinationEncryptionConfiguration {
		if v == nil {
			return nil
		}
		return v.DestinationEncryptionConfiguration
	}).(JobCopyDestinationEncryptionConfigurationPtrOutput)
}

// The destination table.
// Structure is documented below.
func (o JobCopyPtrOutput) DestinationTable() JobCopyDestinationTablePtrOutput {
	return o.ApplyT(func(v *JobCopy) *JobCopyDestinationTable {
		if v == nil {
			return nil
		}
		return v.DestinationTable
	}).(JobCopyDestinationTablePtrOutput)
}

// Source tables to copy.
// Structure is documented below.
func (o JobCopyPtrOutput) SourceTables() JobCopySourceTableArrayOutput {
	return o.ApplyT(func(v *JobCopy) []JobCopySourceTable {
		if v == nil {
			return nil
		}
		return v.SourceTables
	}).(JobCopySourceTableArrayOutput)
}

// Specifies the action that occurs if the destination table already exists. The following values are supported:
// WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
// WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
// WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
// Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
// Creation, truncation and append actions occur as one atomic update upon job completion.
// Default value is `WRITE_EMPTY`.
// Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
func (o JobCopyPtrOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCopy) *string {
		if v == nil {
			return nil
		}
		return v.WriteDisposition
	}).(pulumi.StringPtrOutput)
}

type JobCopyDestinationEncryptionConfiguration struct {
	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
	// The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName string `pulumi:"kmsKeyName"`
	// Describes the Cloud KMS encryption key version used to protect destination BigQuery table.
	KmsKeyVersion *string `pulumi:"kmsKeyVersion"`
}

// JobCopyDestinationEncryptionConfigurationInput is an input type that accepts JobCopyDestinationEncryptionConfigurationArgs and JobCopyDestinationEncryptionConfigurationOutput values.
// You can construct a concrete instance of `JobCopyDestinationEncryptionConfigurationInput` via:
//
//	JobCopyDestinationEncryptionConfigurationArgs{...}
type JobCopyDestinationEncryptionConfigurationInput interface {
	pulumi.Input

	ToJobCopyDestinationEncryptionConfigurationOutput() JobCopyDestinationEncryptionConfigurationOutput
	ToJobCopyDestinationEncryptionConfigurationOutputWithContext(context.Context) JobCopyDestinationEncryptionConfigurationOutput
}

type JobCopyDestinationEncryptionConfigurationArgs struct {
	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
	// The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
	// Describes the Cloud KMS encryption key version used to protect destination BigQuery table.
	KmsKeyVersion pulumi.StringPtrInput `pulumi:"kmsKeyVersion"`
}

func (JobCopyDestinationEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCopyDestinationEncryptionConfiguration)(nil)).Elem()
}

func (i JobCopyDestinationEncryptionConfigurationArgs) ToJobCopyDestinationEncryptionConfigurationOutput() JobCopyDestinationEncryptionConfigurationOutput {
	return i.ToJobCopyDestinationEncryptionConfigurationOutputWithContext(context.Background())
}

func (i JobCopyDestinationEncryptionConfigurationArgs) ToJobCopyDestinationEncryptionConfigurationOutputWithContext(ctx context.Context) JobCopyDestinationEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCopyDestinationEncryptionConfigurationOutput)
}

func (i JobCopyDestinationEncryptionConfigurationArgs) ToJobCopyDestinationEncryptionConfigurationPtrOutput() JobCopyDestinationEncryptionConfigurationPtrOutput {
	return i.ToJobCopyDestinationEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i JobCopyDestinationEncryptionConfigurationArgs) ToJobCopyDestinationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) JobCopyDestinationEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCopyDestinationEncryptionConfigurationOutput).ToJobCopyDestinationEncryptionConfigurationPtrOutputWithContext(ctx)
}

// JobCopyDestinationEncryptionConfigurationPtrInput is an input type that accepts JobCopyDestinationEncryptionConfigurationArgs, JobCopyDestinationEncryptionConfigurationPtr and JobCopyDestinationEncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `JobCopyDestinationEncryptionConfigurationPtrInput` via:
//
//	        JobCopyDestinationEncryptionConfigurationArgs{...}
//
//	or:
//
//	        nil
type JobCopyDestinationEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToJobCopyDestinationEncryptionConfigurationPtrOutput() JobCopyDestinationEncryptionConfigurationPtrOutput
	ToJobCopyDestinationEncryptionConfigurationPtrOutputWithContext(context.Context) JobCopyDestinationEncryptionConfigurationPtrOutput
}

type jobCopyDestinationEncryptionConfigurationPtrType JobCopyDestinationEncryptionConfigurationArgs

func JobCopyDestinationEncryptionConfigurationPtr(v *JobCopyDestinationEncryptionConfigurationArgs) JobCopyDestinationEncryptionConfigurationPtrInput {
	return (*jobCopyDestinationEncryptionConfigurationPtrType)(v)
}

func (*jobCopyDestinationEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobCopyDestinationEncryptionConfiguration)(nil)).Elem()
}

func (i *jobCopyDestinationEncryptionConfigurationPtrType) ToJobCopyDestinationEncryptionConfigurationPtrOutput() JobCopyDestinationEncryptionConfigurationPtrOutput {
	return i.ToJobCopyDestinationEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *jobCopyDestinationEncryptionConfigurationPtrType) ToJobCopyDestinationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) JobCopyDestinationEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCopyDestinationEncryptionConfigurationPtrOutput)
}

type JobCopyDestinationEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (JobCopyDestinationEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCopyDestinationEncryptionConfiguration)(nil)).Elem()
}

func (o JobCopyDestinationEncryptionConfigurationOutput) ToJobCopyDestinationEncryptionConfigurationOutput() JobCopyDestinationEncryptionConfigurationOutput {
	return o
}

func (o JobCopyDestinationEncryptionConfigurationOutput) ToJobCopyDestinationEncryptionConfigurationOutputWithContext(ctx context.Context) JobCopyDestinationEncryptionConfigurationOutput {
	return o
}

func (o JobCopyDestinationEncryptionConfigurationOutput) ToJobCopyDestinationEncryptionConfigurationPtrOutput() JobCopyDestinationEncryptionConfigurationPtrOutput {
	return o.ToJobCopyDestinationEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o JobCopyDestinationEncryptionConfigurationOutput) ToJobCopyDestinationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) JobCopyDestinationEncryptionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobCopyDestinationEncryptionConfiguration) *JobCopyDestinationEncryptionConfiguration {
		return &v
	}).(JobCopyDestinationEncryptionConfigurationPtrOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
// The BigQuery Service Account associated with your project requires access to this encryption key.
func (o JobCopyDestinationEncryptionConfigurationOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v JobCopyDestinationEncryptionConfiguration) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// Describes the Cloud KMS encryption key version used to protect destination BigQuery table.
func (o JobCopyDestinationEncryptionConfigurationOutput) KmsKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCopyDestinationEncryptionConfiguration) *string { return v.KmsKeyVersion }).(pulumi.StringPtrOutput)
}

type JobCopyDestinationEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (JobCopyDestinationEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobCopyDestinationEncryptionConfiguration)(nil)).Elem()
}

func (o JobCopyDestinationEncryptionConfigurationPtrOutput) ToJobCopyDestinationEncryptionConfigurationPtrOutput() JobCopyDestinationEncryptionConfigurationPtrOutput {
	return o
}

func (o JobCopyDestinationEncryptionConfigurationPtrOutput) ToJobCopyDestinationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) JobCopyDestinationEncryptionConfigurationPtrOutput {
	return o
}

func (o JobCopyDestinationEncryptionConfigurationPtrOutput) Elem() JobCopyDestinationEncryptionConfigurationOutput {
	return o.ApplyT(func(v *JobCopyDestinationEncryptionConfiguration) JobCopyDestinationEncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret JobCopyDestinationEncryptionConfiguration
		return ret
	}).(JobCopyDestinationEncryptionConfigurationOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
// The BigQuery Service Account associated with your project requires access to this encryption key.
func (o JobCopyDestinationEncryptionConfigurationPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCopyDestinationEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Describes the Cloud KMS encryption key version used to protect destination BigQuery table.
func (o JobCopyDestinationEncryptionConfigurationPtrOutput) KmsKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCopyDestinationEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyVersion
	}).(pulumi.StringPtrOutput)
}

type JobCopyDestinationTable struct {
	// The ID of the dataset containing this table.
	DatasetId *string `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId *string `pulumi:"projectId"`
	// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
	// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
	TableId string `pulumi:"tableId"`
}

// JobCopyDestinationTableInput is an input type that accepts JobCopyDestinationTableArgs and JobCopyDestinationTableOutput values.
// You can construct a concrete instance of `JobCopyDestinationTableInput` via:
//
//	JobCopyDestinationTableArgs{...}
type JobCopyDestinationTableInput interface {
	pulumi.Input

	ToJobCopyDestinationTableOutput() JobCopyDestinationTableOutput
	ToJobCopyDestinationTableOutputWithContext(context.Context) JobCopyDestinationTableOutput
}

type JobCopyDestinationTableArgs struct {
	// The ID of the dataset containing this table.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
	// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
	TableId pulumi.StringInput `pulumi:"tableId"`
}

func (JobCopyDestinationTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCopyDestinationTable)(nil)).Elem()
}

func (i JobCopyDestinationTableArgs) ToJobCopyDestinationTableOutput() JobCopyDestinationTableOutput {
	return i.ToJobCopyDestinationTableOutputWithContext(context.Background())
}

func (i JobCopyDestinationTableArgs) ToJobCopyDestinationTableOutputWithContext(ctx context.Context) JobCopyDestinationTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCopyDestinationTableOutput)
}

func (i JobCopyDestinationTableArgs) ToJobCopyDestinationTablePtrOutput() JobCopyDestinationTablePtrOutput {
	return i.ToJobCopyDestinationTablePtrOutputWithContext(context.Background())
}

func (i JobCopyDestinationTableArgs) ToJobCopyDestinationTablePtrOutputWithContext(ctx context.Context) JobCopyDestinationTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCopyDestinationTableOutput).ToJobCopyDestinationTablePtrOutputWithContext(ctx)
}

// JobCopyDestinationTablePtrInput is an input type that accepts JobCopyDestinationTableArgs, JobCopyDestinationTablePtr and JobCopyDestinationTablePtrOutput values.
// You can construct a concrete instance of `JobCopyDestinationTablePtrInput` via:
//
//	        JobCopyDestinationTableArgs{...}
//
//	or:
//
//	        nil
type JobCopyDestinationTablePtrInput interface {
	pulumi.Input

	ToJobCopyDestinationTablePtrOutput() JobCopyDestinationTablePtrOutput
	ToJobCopyDestinationTablePtrOutputWithContext(context.Context) JobCopyDestinationTablePtrOutput
}

type jobCopyDestinationTablePtrType JobCopyDestinationTableArgs

func JobCopyDestinationTablePtr(v *JobCopyDestinationTableArgs) JobCopyDestinationTablePtrInput {
	return (*jobCopyDestinationTablePtrType)(v)
}

func (*jobCopyDestinationTablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobCopyDestinationTable)(nil)).Elem()
}

func (i *jobCopyDestinationTablePtrType) ToJobCopyDestinationTablePtrOutput() JobCopyDestinationTablePtrOutput {
	return i.ToJobCopyDestinationTablePtrOutputWithContext(context.Background())
}

func (i *jobCopyDestinationTablePtrType) ToJobCopyDestinationTablePtrOutputWithContext(ctx context.Context) JobCopyDestinationTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCopyDestinationTablePtrOutput)
}

type JobCopyDestinationTableOutput struct{ *pulumi.OutputState }

func (JobCopyDestinationTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCopyDestinationTable)(nil)).Elem()
}

func (o JobCopyDestinationTableOutput) ToJobCopyDestinationTableOutput() JobCopyDestinationTableOutput {
	return o
}

func (o JobCopyDestinationTableOutput) ToJobCopyDestinationTableOutputWithContext(ctx context.Context) JobCopyDestinationTableOutput {
	return o
}

func (o JobCopyDestinationTableOutput) ToJobCopyDestinationTablePtrOutput() JobCopyDestinationTablePtrOutput {
	return o.ToJobCopyDestinationTablePtrOutputWithContext(context.Background())
}

func (o JobCopyDestinationTableOutput) ToJobCopyDestinationTablePtrOutputWithContext(ctx context.Context) JobCopyDestinationTablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobCopyDestinationTable) *JobCopyDestinationTable {
		return &v
	}).(JobCopyDestinationTablePtrOutput)
}

// The ID of the dataset containing this table.
func (o JobCopyDestinationTableOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCopyDestinationTable) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

// The ID of the project containing this table.
func (o JobCopyDestinationTableOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCopyDestinationTable) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
func (o JobCopyDestinationTableOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v JobCopyDestinationTable) string { return v.TableId }).(pulumi.StringOutput)
}

type JobCopyDestinationTablePtrOutput struct{ *pulumi.OutputState }

func (JobCopyDestinationTablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobCopyDestinationTable)(nil)).Elem()
}

func (o JobCopyDestinationTablePtrOutput) ToJobCopyDestinationTablePtrOutput() JobCopyDestinationTablePtrOutput {
	return o
}

func (o JobCopyDestinationTablePtrOutput) ToJobCopyDestinationTablePtrOutputWithContext(ctx context.Context) JobCopyDestinationTablePtrOutput {
	return o
}

func (o JobCopyDestinationTablePtrOutput) Elem() JobCopyDestinationTableOutput {
	return o.ApplyT(func(v *JobCopyDestinationTable) JobCopyDestinationTable {
		if v != nil {
			return *v
		}
		var ret JobCopyDestinationTable
		return ret
	}).(JobCopyDestinationTableOutput)
}

// The ID of the dataset containing this table.
func (o JobCopyDestinationTablePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCopyDestinationTable) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this table.
func (o JobCopyDestinationTablePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCopyDestinationTable) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
func (o JobCopyDestinationTablePtrOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCopyDestinationTable) *string {
		if v == nil {
			return nil
		}
		return &v.TableId
	}).(pulumi.StringPtrOutput)
}

type JobCopySourceTable struct {
	// The ID of the dataset containing this table.
	DatasetId *string `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId *string `pulumi:"projectId"`
	// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
	// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
	TableId string `pulumi:"tableId"`
}

// JobCopySourceTableInput is an input type that accepts JobCopySourceTableArgs and JobCopySourceTableOutput values.
// You can construct a concrete instance of `JobCopySourceTableInput` via:
//
//	JobCopySourceTableArgs{...}
type JobCopySourceTableInput interface {
	pulumi.Input

	ToJobCopySourceTableOutput() JobCopySourceTableOutput
	ToJobCopySourceTableOutputWithContext(context.Context) JobCopySourceTableOutput
}

type JobCopySourceTableArgs struct {
	// The ID of the dataset containing this table.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
	// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
	TableId pulumi.StringInput `pulumi:"tableId"`
}

func (JobCopySourceTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCopySourceTable)(nil)).Elem()
}

func (i JobCopySourceTableArgs) ToJobCopySourceTableOutput() JobCopySourceTableOutput {
	return i.ToJobCopySourceTableOutputWithContext(context.Background())
}

func (i JobCopySourceTableArgs) ToJobCopySourceTableOutputWithContext(ctx context.Context) JobCopySourceTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCopySourceTableOutput)
}

// JobCopySourceTableArrayInput is an input type that accepts JobCopySourceTableArray and JobCopySourceTableArrayOutput values.
// You can construct a concrete instance of `JobCopySourceTableArrayInput` via:
//
//	JobCopySourceTableArray{ JobCopySourceTableArgs{...} }
type JobCopySourceTableArrayInput interface {
	pulumi.Input

	ToJobCopySourceTableArrayOutput() JobCopySourceTableArrayOutput
	ToJobCopySourceTableArrayOutputWithContext(context.Context) JobCopySourceTableArrayOutput
}

type JobCopySourceTableArray []JobCopySourceTableInput

func (JobCopySourceTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobCopySourceTable)(nil)).Elem()
}

func (i JobCopySourceTableArray) ToJobCopySourceTableArrayOutput() JobCopySourceTableArrayOutput {
	return i.ToJobCopySourceTableArrayOutputWithContext(context.Background())
}

func (i JobCopySourceTableArray) ToJobCopySourceTableArrayOutputWithContext(ctx context.Context) JobCopySourceTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCopySourceTableArrayOutput)
}

type JobCopySourceTableOutput struct{ *pulumi.OutputState }

func (JobCopySourceTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCopySourceTable)(nil)).Elem()
}

func (o JobCopySourceTableOutput) ToJobCopySourceTableOutput() JobCopySourceTableOutput {
	return o
}

func (o JobCopySourceTableOutput) ToJobCopySourceTableOutputWithContext(ctx context.Context) JobCopySourceTableOutput {
	return o
}

// The ID of the dataset containing this table.
func (o JobCopySourceTableOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCopySourceTable) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

// The ID of the project containing this table.
func (o JobCopySourceTableOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCopySourceTable) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
func (o JobCopySourceTableOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v JobCopySourceTable) string { return v.TableId }).(pulumi.StringOutput)
}

type JobCopySourceTableArrayOutput struct{ *pulumi.OutputState }

func (JobCopySourceTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobCopySourceTable)(nil)).Elem()
}

func (o JobCopySourceTableArrayOutput) ToJobCopySourceTableArrayOutput() JobCopySourceTableArrayOutput {
	return o
}

func (o JobCopySourceTableArrayOutput) ToJobCopySourceTableArrayOutputWithContext(ctx context.Context) JobCopySourceTableArrayOutput {
	return o
}

func (o JobCopySourceTableArrayOutput) Index(i pulumi.IntInput) JobCopySourceTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobCopySourceTable {
		return vs[0].([]JobCopySourceTable)[vs[1].(int)]
	}).(JobCopySourceTableOutput)
}

type JobExtract struct {
	// The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE.
	// The default value is NONE. DEFLATE and SNAPPY are only supported for Avro.
	Compression *string `pulumi:"compression"`
	// The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON and AVRO for tables and SAVED_MODEL for models.
	// The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV.
	// The default value for models is SAVED_MODEL.
	DestinationFormat *string `pulumi:"destinationFormat"`
	// A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
	DestinationUris []string `pulumi:"destinationUris"`
	// When extracting data in CSV format, this defines the delimiter to use between fields in the exported data.
	// Default is ','
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Whether to print out a header row in the results. Default is true.
	PrintHeader *bool `pulumi:"printHeader"`
	// A reference to the model being exported.
	// Structure is documented below.
	SourceModel *JobExtractSourceModel `pulumi:"sourceModel"`
	// A reference to the table being exported.
	// Structure is documented below.
	SourceTable *JobExtractSourceTable `pulumi:"sourceTable"`
	// Whether to use logical types when extracting to AVRO format.
	UseAvroLogicalTypes *bool `pulumi:"useAvroLogicalTypes"`
}

// JobExtractInput is an input type that accepts JobExtractArgs and JobExtractOutput values.
// You can construct a concrete instance of `JobExtractInput` via:
//
//	JobExtractArgs{...}
type JobExtractInput interface {
	pulumi.Input

	ToJobExtractOutput() JobExtractOutput
	ToJobExtractOutputWithContext(context.Context) JobExtractOutput
}

type JobExtractArgs struct {
	// The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE.
	// The default value is NONE. DEFLATE and SNAPPY are only supported for Avro.
	Compression pulumi.StringPtrInput `pulumi:"compression"`
	// The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON and AVRO for tables and SAVED_MODEL for models.
	// The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV.
	// The default value for models is SAVED_MODEL.
	DestinationFormat pulumi.StringPtrInput `pulumi:"destinationFormat"`
	// A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
	DestinationUris pulumi.StringArrayInput `pulumi:"destinationUris"`
	// When extracting data in CSV format, this defines the delimiter to use between fields in the exported data.
	// Default is ','
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Whether to print out a header row in the results. Default is true.
	PrintHeader pulumi.BoolPtrInput `pulumi:"printHeader"`
	// A reference to the model being exported.
	// Structure is documented below.
	SourceModel JobExtractSourceModelPtrInput `pulumi:"sourceModel"`
	// A reference to the table being exported.
	// Structure is documented below.
	SourceTable JobExtractSourceTablePtrInput `pulumi:"sourceTable"`
	// Whether to use logical types when extracting to AVRO format.
	UseAvroLogicalTypes pulumi.BoolPtrInput `pulumi:"useAvroLogicalTypes"`
}

func (JobExtractArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExtract)(nil)).Elem()
}

func (i JobExtractArgs) ToJobExtractOutput() JobExtractOutput {
	return i.ToJobExtractOutputWithContext(context.Background())
}

func (i JobExtractArgs) ToJobExtractOutputWithContext(ctx context.Context) JobExtractOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExtractOutput)
}

func (i JobExtractArgs) ToJobExtractPtrOutput() JobExtractPtrOutput {
	return i.ToJobExtractPtrOutputWithContext(context.Background())
}

func (i JobExtractArgs) ToJobExtractPtrOutputWithContext(ctx context.Context) JobExtractPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExtractOutput).ToJobExtractPtrOutputWithContext(ctx)
}

// JobExtractPtrInput is an input type that accepts JobExtractArgs, JobExtractPtr and JobExtractPtrOutput values.
// You can construct a concrete instance of `JobExtractPtrInput` via:
//
//	        JobExtractArgs{...}
//
//	or:
//
//	        nil
type JobExtractPtrInput interface {
	pulumi.Input

	ToJobExtractPtrOutput() JobExtractPtrOutput
	ToJobExtractPtrOutputWithContext(context.Context) JobExtractPtrOutput
}

type jobExtractPtrType JobExtractArgs

func JobExtractPtr(v *JobExtractArgs) JobExtractPtrInput {
	return (*jobExtractPtrType)(v)
}

func (*jobExtractPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobExtract)(nil)).Elem()
}

func (i *jobExtractPtrType) ToJobExtractPtrOutput() JobExtractPtrOutput {
	return i.ToJobExtractPtrOutputWithContext(context.Background())
}

func (i *jobExtractPtrType) ToJobExtractPtrOutputWithContext(ctx context.Context) JobExtractPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExtractPtrOutput)
}

type JobExtractOutput struct{ *pulumi.OutputState }

func (JobExtractOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExtract)(nil)).Elem()
}

func (o JobExtractOutput) ToJobExtractOutput() JobExtractOutput {
	return o
}

func (o JobExtractOutput) ToJobExtractOutputWithContext(ctx context.Context) JobExtractOutput {
	return o
}

func (o JobExtractOutput) ToJobExtractPtrOutput() JobExtractPtrOutput {
	return o.ToJobExtractPtrOutputWithContext(context.Background())
}

func (o JobExtractOutput) ToJobExtractPtrOutputWithContext(ctx context.Context) JobExtractPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobExtract) *JobExtract {
		return &v
	}).(JobExtractPtrOutput)
}

// The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE.
// The default value is NONE. DEFLATE and SNAPPY are only supported for Avro.
func (o JobExtractOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobExtract) *string { return v.Compression }).(pulumi.StringPtrOutput)
}

// The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON and AVRO for tables and SAVED_MODEL for models.
// The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV.
// The default value for models is SAVED_MODEL.
func (o JobExtractOutput) DestinationFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobExtract) *string { return v.DestinationFormat }).(pulumi.StringPtrOutput)
}

// A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
func (o JobExtractOutput) DestinationUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobExtract) []string { return v.DestinationUris }).(pulumi.StringArrayOutput)
}

// When extracting data in CSV format, this defines the delimiter to use between fields in the exported data.
// Default is ','
func (o JobExtractOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobExtract) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Whether to print out a header row in the results. Default is true.
func (o JobExtractOutput) PrintHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobExtract) *bool { return v.PrintHeader }).(pulumi.BoolPtrOutput)
}

// A reference to the model being exported.
// Structure is documented below.
func (o JobExtractOutput) SourceModel() JobExtractSourceModelPtrOutput {
	return o.ApplyT(func(v JobExtract) *JobExtractSourceModel { return v.SourceModel }).(JobExtractSourceModelPtrOutput)
}

// A reference to the table being exported.
// Structure is documented below.
func (o JobExtractOutput) SourceTable() JobExtractSourceTablePtrOutput {
	return o.ApplyT(func(v JobExtract) *JobExtractSourceTable { return v.SourceTable }).(JobExtractSourceTablePtrOutput)
}

// Whether to use logical types when extracting to AVRO format.
func (o JobExtractOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobExtract) *bool { return v.UseAvroLogicalTypes }).(pulumi.BoolPtrOutput)
}

type JobExtractPtrOutput struct{ *pulumi.OutputState }

func (JobExtractPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobExtract)(nil)).Elem()
}

func (o JobExtractPtrOutput) ToJobExtractPtrOutput() JobExtractPtrOutput {
	return o
}

func (o JobExtractPtrOutput) ToJobExtractPtrOutputWithContext(ctx context.Context) JobExtractPtrOutput {
	return o
}

func (o JobExtractPtrOutput) Elem() JobExtractOutput {
	return o.ApplyT(func(v *JobExtract) JobExtract {
		if v != nil {
			return *v
		}
		var ret JobExtract
		return ret
	}).(JobExtractOutput)
}

// The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE.
// The default value is NONE. DEFLATE and SNAPPY are only supported for Avro.
func (o JobExtractPtrOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobExtract) *string {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(pulumi.StringPtrOutput)
}

// The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON and AVRO for tables and SAVED_MODEL for models.
// The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV.
// The default value for models is SAVED_MODEL.
func (o JobExtractPtrOutput) DestinationFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobExtract) *string {
		if v == nil {
			return nil
		}
		return v.DestinationFormat
	}).(pulumi.StringPtrOutput)
}

// A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
func (o JobExtractPtrOutput) DestinationUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobExtract) []string {
		if v == nil {
			return nil
		}
		return v.DestinationUris
	}).(pulumi.StringArrayOutput)
}

// When extracting data in CSV format, this defines the delimiter to use between fields in the exported data.
// Default is ','
func (o JobExtractPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobExtract) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// Whether to print out a header row in the results. Default is true.
func (o JobExtractPtrOutput) PrintHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobExtract) *bool {
		if v == nil {
			return nil
		}
		return v.PrintHeader
	}).(pulumi.BoolPtrOutput)
}

// A reference to the model being exported.
// Structure is documented below.
func (o JobExtractPtrOutput) SourceModel() JobExtractSourceModelPtrOutput {
	return o.ApplyT(func(v *JobExtract) *JobExtractSourceModel {
		if v == nil {
			return nil
		}
		return v.SourceModel
	}).(JobExtractSourceModelPtrOutput)
}

// A reference to the table being exported.
// Structure is documented below.
func (o JobExtractPtrOutput) SourceTable() JobExtractSourceTablePtrOutput {
	return o.ApplyT(func(v *JobExtract) *JobExtractSourceTable {
		if v == nil {
			return nil
		}
		return v.SourceTable
	}).(JobExtractSourceTablePtrOutput)
}

// Whether to use logical types when extracting to AVRO format.
func (o JobExtractPtrOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobExtract) *bool {
		if v == nil {
			return nil
		}
		return v.UseAvroLogicalTypes
	}).(pulumi.BoolPtrOutput)
}

type JobExtractSourceModel struct {
	// The ID of the dataset containing this model.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the model.
	ModelId string `pulumi:"modelId"`
	// The ID of the project containing this model.
	ProjectId string `pulumi:"projectId"`
}

// JobExtractSourceModelInput is an input type that accepts JobExtractSourceModelArgs and JobExtractSourceModelOutput values.
// You can construct a concrete instance of `JobExtractSourceModelInput` via:
//
//	JobExtractSourceModelArgs{...}
type JobExtractSourceModelInput interface {
	pulumi.Input

	ToJobExtractSourceModelOutput() JobExtractSourceModelOutput
	ToJobExtractSourceModelOutputWithContext(context.Context) JobExtractSourceModelOutput
}

type JobExtractSourceModelArgs struct {
	// The ID of the dataset containing this model.
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	// The ID of the model.
	ModelId pulumi.StringInput `pulumi:"modelId"`
	// The ID of the project containing this model.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (JobExtractSourceModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExtractSourceModel)(nil)).Elem()
}

func (i JobExtractSourceModelArgs) ToJobExtractSourceModelOutput() JobExtractSourceModelOutput {
	return i.ToJobExtractSourceModelOutputWithContext(context.Background())
}

func (i JobExtractSourceModelArgs) ToJobExtractSourceModelOutputWithContext(ctx context.Context) JobExtractSourceModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExtractSourceModelOutput)
}

func (i JobExtractSourceModelArgs) ToJobExtractSourceModelPtrOutput() JobExtractSourceModelPtrOutput {
	return i.ToJobExtractSourceModelPtrOutputWithContext(context.Background())
}

func (i JobExtractSourceModelArgs) ToJobExtractSourceModelPtrOutputWithContext(ctx context.Context) JobExtractSourceModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExtractSourceModelOutput).ToJobExtractSourceModelPtrOutputWithContext(ctx)
}

// JobExtractSourceModelPtrInput is an input type that accepts JobExtractSourceModelArgs, JobExtractSourceModelPtr and JobExtractSourceModelPtrOutput values.
// You can construct a concrete instance of `JobExtractSourceModelPtrInput` via:
//
//	        JobExtractSourceModelArgs{...}
//
//	or:
//
//	        nil
type JobExtractSourceModelPtrInput interface {
	pulumi.Input

	ToJobExtractSourceModelPtrOutput() JobExtractSourceModelPtrOutput
	ToJobExtractSourceModelPtrOutputWithContext(context.Context) JobExtractSourceModelPtrOutput
}

type jobExtractSourceModelPtrType JobExtractSourceModelArgs

func JobExtractSourceModelPtr(v *JobExtractSourceModelArgs) JobExtractSourceModelPtrInput {
	return (*jobExtractSourceModelPtrType)(v)
}

func (*jobExtractSourceModelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobExtractSourceModel)(nil)).Elem()
}

func (i *jobExtractSourceModelPtrType) ToJobExtractSourceModelPtrOutput() JobExtractSourceModelPtrOutput {
	return i.ToJobExtractSourceModelPtrOutputWithContext(context.Background())
}

func (i *jobExtractSourceModelPtrType) ToJobExtractSourceModelPtrOutputWithContext(ctx context.Context) JobExtractSourceModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExtractSourceModelPtrOutput)
}

type JobExtractSourceModelOutput struct{ *pulumi.OutputState }

func (JobExtractSourceModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExtractSourceModel)(nil)).Elem()
}

func (o JobExtractSourceModelOutput) ToJobExtractSourceModelOutput() JobExtractSourceModelOutput {
	return o
}

func (o JobExtractSourceModelOutput) ToJobExtractSourceModelOutputWithContext(ctx context.Context) JobExtractSourceModelOutput {
	return o
}

func (o JobExtractSourceModelOutput) ToJobExtractSourceModelPtrOutput() JobExtractSourceModelPtrOutput {
	return o.ToJobExtractSourceModelPtrOutputWithContext(context.Background())
}

func (o JobExtractSourceModelOutput) ToJobExtractSourceModelPtrOutputWithContext(ctx context.Context) JobExtractSourceModelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobExtractSourceModel) *JobExtractSourceModel {
		return &v
	}).(JobExtractSourceModelPtrOutput)
}

// The ID of the dataset containing this model.
func (o JobExtractSourceModelOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v JobExtractSourceModel) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the model.
func (o JobExtractSourceModelOutput) ModelId() pulumi.StringOutput {
	return o.ApplyT(func(v JobExtractSourceModel) string { return v.ModelId }).(pulumi.StringOutput)
}

// The ID of the project containing this model.
func (o JobExtractSourceModelOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v JobExtractSourceModel) string { return v.ProjectId }).(pulumi.StringOutput)
}

type JobExtractSourceModelPtrOutput struct{ *pulumi.OutputState }

func (JobExtractSourceModelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobExtractSourceModel)(nil)).Elem()
}

func (o JobExtractSourceModelPtrOutput) ToJobExtractSourceModelPtrOutput() JobExtractSourceModelPtrOutput {
	return o
}

func (o JobExtractSourceModelPtrOutput) ToJobExtractSourceModelPtrOutputWithContext(ctx context.Context) JobExtractSourceModelPtrOutput {
	return o
}

func (o JobExtractSourceModelPtrOutput) Elem() JobExtractSourceModelOutput {
	return o.ApplyT(func(v *JobExtractSourceModel) JobExtractSourceModel {
		if v != nil {
			return *v
		}
		var ret JobExtractSourceModel
		return ret
	}).(JobExtractSourceModelOutput)
}

// The ID of the dataset containing this model.
func (o JobExtractSourceModelPtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobExtractSourceModel) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the model.
func (o JobExtractSourceModelPtrOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobExtractSourceModel) *string {
		if v == nil {
			return nil
		}
		return &v.ModelId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this model.
func (o JobExtractSourceModelPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobExtractSourceModel) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectId
	}).(pulumi.StringPtrOutput)
}

type JobExtractSourceTable struct {
	// The ID of the dataset containing this table.
	DatasetId *string `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId *string `pulumi:"projectId"`
	// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
	// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
	TableId string `pulumi:"tableId"`
}

// JobExtractSourceTableInput is an input type that accepts JobExtractSourceTableArgs and JobExtractSourceTableOutput values.
// You can construct a concrete instance of `JobExtractSourceTableInput` via:
//
//	JobExtractSourceTableArgs{...}
type JobExtractSourceTableInput interface {
	pulumi.Input

	ToJobExtractSourceTableOutput() JobExtractSourceTableOutput
	ToJobExtractSourceTableOutputWithContext(context.Context) JobExtractSourceTableOutput
}

type JobExtractSourceTableArgs struct {
	// The ID of the dataset containing this table.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
	// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
	TableId pulumi.StringInput `pulumi:"tableId"`
}

func (JobExtractSourceTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExtractSourceTable)(nil)).Elem()
}

func (i JobExtractSourceTableArgs) ToJobExtractSourceTableOutput() JobExtractSourceTableOutput {
	return i.ToJobExtractSourceTableOutputWithContext(context.Background())
}

func (i JobExtractSourceTableArgs) ToJobExtractSourceTableOutputWithContext(ctx context.Context) JobExtractSourceTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExtractSourceTableOutput)
}

func (i JobExtractSourceTableArgs) ToJobExtractSourceTablePtrOutput() JobExtractSourceTablePtrOutput {
	return i.ToJobExtractSourceTablePtrOutputWithContext(context.Background())
}

func (i JobExtractSourceTableArgs) ToJobExtractSourceTablePtrOutputWithContext(ctx context.Context) JobExtractSourceTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExtractSourceTableOutput).ToJobExtractSourceTablePtrOutputWithContext(ctx)
}

// JobExtractSourceTablePtrInput is an input type that accepts JobExtractSourceTableArgs, JobExtractSourceTablePtr and JobExtractSourceTablePtrOutput values.
// You can construct a concrete instance of `JobExtractSourceTablePtrInput` via:
//
//	        JobExtractSourceTableArgs{...}
//
//	or:
//
//	        nil
type JobExtractSourceTablePtrInput interface {
	pulumi.Input

	ToJobExtractSourceTablePtrOutput() JobExtractSourceTablePtrOutput
	ToJobExtractSourceTablePtrOutputWithContext(context.Context) JobExtractSourceTablePtrOutput
}

type jobExtractSourceTablePtrType JobExtractSourceTableArgs

func JobExtractSourceTablePtr(v *JobExtractSourceTableArgs) JobExtractSourceTablePtrInput {
	return (*jobExtractSourceTablePtrType)(v)
}

func (*jobExtractSourceTablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobExtractSourceTable)(nil)).Elem()
}

func (i *jobExtractSourceTablePtrType) ToJobExtractSourceTablePtrOutput() JobExtractSourceTablePtrOutput {
	return i.ToJobExtractSourceTablePtrOutputWithContext(context.Background())
}

func (i *jobExtractSourceTablePtrType) ToJobExtractSourceTablePtrOutputWithContext(ctx context.Context) JobExtractSourceTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExtractSourceTablePtrOutput)
}

type JobExtractSourceTableOutput struct{ *pulumi.OutputState }

func (JobExtractSourceTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExtractSourceTable)(nil)).Elem()
}

func (o JobExtractSourceTableOutput) ToJobExtractSourceTableOutput() JobExtractSourceTableOutput {
	return o
}

func (o JobExtractSourceTableOutput) ToJobExtractSourceTableOutputWithContext(ctx context.Context) JobExtractSourceTableOutput {
	return o
}

func (o JobExtractSourceTableOutput) ToJobExtractSourceTablePtrOutput() JobExtractSourceTablePtrOutput {
	return o.ToJobExtractSourceTablePtrOutputWithContext(context.Background())
}

func (o JobExtractSourceTableOutput) ToJobExtractSourceTablePtrOutputWithContext(ctx context.Context) JobExtractSourceTablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobExtractSourceTable) *JobExtractSourceTable {
		return &v
	}).(JobExtractSourceTablePtrOutput)
}

// The ID of the dataset containing this table.
func (o JobExtractSourceTableOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobExtractSourceTable) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

// The ID of the project containing this table.
func (o JobExtractSourceTableOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobExtractSourceTable) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
func (o JobExtractSourceTableOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v JobExtractSourceTable) string { return v.TableId }).(pulumi.StringOutput)
}

type JobExtractSourceTablePtrOutput struct{ *pulumi.OutputState }

func (JobExtractSourceTablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobExtractSourceTable)(nil)).Elem()
}

func (o JobExtractSourceTablePtrOutput) ToJobExtractSourceTablePtrOutput() JobExtractSourceTablePtrOutput {
	return o
}

func (o JobExtractSourceTablePtrOutput) ToJobExtractSourceTablePtrOutputWithContext(ctx context.Context) JobExtractSourceTablePtrOutput {
	return o
}

func (o JobExtractSourceTablePtrOutput) Elem() JobExtractSourceTableOutput {
	return o.ApplyT(func(v *JobExtractSourceTable) JobExtractSourceTable {
		if v != nil {
			return *v
		}
		var ret JobExtractSourceTable
		return ret
	}).(JobExtractSourceTableOutput)
}

// The ID of the dataset containing this table.
func (o JobExtractSourceTablePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobExtractSourceTable) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this table.
func (o JobExtractSourceTablePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobExtractSourceTable) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
func (o JobExtractSourceTablePtrOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobExtractSourceTable) *string {
		if v == nil {
			return nil
		}
		return &v.TableId
	}).(pulumi.StringPtrOutput)
}

type JobLoad struct {
	// Accept rows that are missing trailing optional columns. The missing values are treated as nulls.
	// If false, records with missing trailing columns are treated as bad records, and if there are too many bad records,
	// an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
	AllowJaggedRows *bool `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file.
	// The default value is false.
	AllowQuotedNewlines *bool `pulumi:"allowQuotedNewlines"`
	// Indicates if we should automatically infer the options and schema for CSV and JSON sources.
	Autodetect *bool `pulumi:"autodetect"`
	// Specifies whether the job is allowed to create new tables. The following values are supported:
	// CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
	// CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
	// Creation, truncation and append actions occur as one atomic update upon job completion
	// Default value is `CREATE_IF_NEEDED`.
	// Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
	CreateDisposition *string `pulumi:"createDisposition"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	// Structure is documented below.
	DestinationEncryptionConfiguration *JobLoadDestinationEncryptionConfiguration `pulumi:"destinationEncryptionConfiguration"`
	// The destination table to load the data into.
	// Structure is documented below.
	DestinationTable JobLoadDestinationTable `pulumi:"destinationTable"`
	// The character encoding of the data. The supported values are UTF-8 or ISO-8859-1.
	// The default value is UTF-8. BigQuery decodes the data after the raw, binary data
	// has been split using the values of the quote and fieldDelimiter properties.
	Encoding *string `pulumi:"encoding"`
	// The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character.
	// To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts
	// the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the
	// data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator.
	// The default value is a comma (',').
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Indicates if BigQuery should allow extra values that are not represented in the table schema.
	// If true, the extra values are ignored. If false, records with extra columns are treated as bad records,
	// and if there are too many bad records, an invalid error is returned in the job result.
	// The default value is false. The sourceFormat property determines what BigQuery treats as an extra value:
	// CSV: Trailing columns
	// JSON: Named values that don't match any column names
	IgnoreUnknownValues *bool `pulumi:"ignoreUnknownValues"`
	// If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON.
	// For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited
	// GeoJSON: set to GEOJSON.
	JsonExtension *string `pulumi:"jsonExtension"`
	// The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value,
	// an invalid error is returned in the job result. The default value is 0, which requires that all records are valid.
	MaxBadRecords *int `pulumi:"maxBadRecords"`
	// Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value
	// when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an
	// empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as
	// an empty value.
	NullMarker *string `pulumi:"nullMarker"`
	// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup.
	// Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties.
	// If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
	ProjectionFields []string `pulumi:"projectionFields"`
	// The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding,
	// and then uses the first byte of the encoded string to split the data in its raw, binary state.
	// The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string.
	// If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
	Quote *string `pulumi:"quote"`
	// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or
	// supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
	// when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators.
	// For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified:
	// ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
	// ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions []string `pulumi:"schemaUpdateOptions"`
	// The number of rows at the top of a CSV file that BigQuery will skip when loading the data.
	// The default value is 0. This property is useful if you have header rows in the file that should be skipped.
	// When autodetect is on, the behavior is the following:
	// skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected,
	// the row is read as data. Otherwise data is read starting from the second row.
	// skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row.
	// skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected,
	// row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows *int `pulumi:"skipLeadingRows"`
	// The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP".
	// For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET".
	// For orc, specify "ORC". [Beta] For Bigtable, specify "BIGTABLE".
	// The default value is CSV.
	SourceFormat *string `pulumi:"sourceFormat"`
	// The fully-qualified URIs that point to your data in Google Cloud.
	// For Google Cloud Storage URIs: Each URI can contain one '\*' wildcard character
	// and it must come after the 'bucket' name. Size limits related to load jobs apply
	// to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be
	// specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table.
	// For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '\*' wildcard character is not allowed.
	SourceUris []string `pulumi:"sourceUris"`
	// Time-based partitioning specification for the destination table.
	// Structure is documented below.
	TimePartitioning *JobLoadTimePartitioning `pulumi:"timePartitioning"`
	// Specifies the action that occurs if the destination table already exists. The following values are supported:
	// WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
	// WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
	// WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
	// Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
	// Creation, truncation and append actions occur as one atomic update upon job completion.
	// Default value is `WRITE_EMPTY`.
	// Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
	WriteDisposition *string `pulumi:"writeDisposition"`
}

// JobLoadInput is an input type that accepts JobLoadArgs and JobLoadOutput values.
// You can construct a concrete instance of `JobLoadInput` via:
//
//	JobLoadArgs{...}
type JobLoadInput interface {
	pulumi.Input

	ToJobLoadOutput() JobLoadOutput
	ToJobLoadOutputWithContext(context.Context) JobLoadOutput
}

type JobLoadArgs struct {
	// Accept rows that are missing trailing optional columns. The missing values are treated as nulls.
	// If false, records with missing trailing columns are treated as bad records, and if there are too many bad records,
	// an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
	AllowJaggedRows pulumi.BoolPtrInput `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file.
	// The default value is false.
	AllowQuotedNewlines pulumi.BoolPtrInput `pulumi:"allowQuotedNewlines"`
	// Indicates if we should automatically infer the options and schema for CSV and JSON sources.
	Autodetect pulumi.BoolPtrInput `pulumi:"autodetect"`
	// Specifies whether the job is allowed to create new tables. The following values are supported:
	// CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
	// CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
	// Creation, truncation and append actions occur as one atomic update upon job completion
	// Default value is `CREATE_IF_NEEDED`.
	// Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
	CreateDisposition pulumi.StringPtrInput `pulumi:"createDisposition"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	// Structure is documented below.
	DestinationEncryptionConfiguration JobLoadDestinationEncryptionConfigurationPtrInput `pulumi:"destinationEncryptionConfiguration"`
	// The destination table to load the data into.
	// Structure is documented below.
	DestinationTable JobLoadDestinationTableInput `pulumi:"destinationTable"`
	// The character encoding of the data. The supported values are UTF-8 or ISO-8859-1.
	// The default value is UTF-8. BigQuery decodes the data after the raw, binary data
	// has been split using the values of the quote and fieldDelimiter properties.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character.
	// To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts
	// the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the
	// data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator.
	// The default value is a comma (',').
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Indicates if BigQuery should allow extra values that are not represented in the table schema.
	// If true, the extra values are ignored. If false, records with extra columns are treated as bad records,
	// and if there are too many bad records, an invalid error is returned in the job result.
	// The default value is false. The sourceFormat property determines what BigQuery treats as an extra value:
	// CSV: Trailing columns
	// JSON: Named values that don't match any column names
	IgnoreUnknownValues pulumi.BoolPtrInput `pulumi:"ignoreUnknownValues"`
	// If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON.
	// For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited
	// GeoJSON: set to GEOJSON.
	JsonExtension pulumi.StringPtrInput `pulumi:"jsonExtension"`
	// The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value,
	// an invalid error is returned in the job result. The default value is 0, which requires that all records are valid.
	MaxBadRecords pulumi.IntPtrInput `pulumi:"maxBadRecords"`
	// Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value
	// when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an
	// empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as
	// an empty value.
	NullMarker pulumi.StringPtrInput `pulumi:"nullMarker"`
	// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup.
	// Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties.
	// If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
	ProjectionFields pulumi.StringArrayInput `pulumi:"projectionFields"`
	// The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding,
	// and then uses the first byte of the encoded string to split the data in its raw, binary state.
	// The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string.
	// If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
	Quote pulumi.StringPtrInput `pulumi:"quote"`
	// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or
	// supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
	// when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators.
	// For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified:
	// ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
	// ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions pulumi.StringArrayInput `pulumi:"schemaUpdateOptions"`
	// The number of rows at the top of a CSV file that BigQuery will skip when loading the data.
	// The default value is 0. This property is useful if you have header rows in the file that should be skipped.
	// When autodetect is on, the behavior is the following:
	// skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected,
	// the row is read as data. Otherwise data is read starting from the second row.
	// skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row.
	// skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected,
	// row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows pulumi.IntPtrInput `pulumi:"skipLeadingRows"`
	// The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP".
	// For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET".
	// For orc, specify "ORC". [Beta] For Bigtable, specify "BIGTABLE".
	// The default value is CSV.
	SourceFormat pulumi.StringPtrInput `pulumi:"sourceFormat"`
	// The fully-qualified URIs that point to your data in Google Cloud.
	// For Google Cloud Storage URIs: Each URI can contain one '\*' wildcard character
	// and it must come after the 'bucket' name. Size limits related to load jobs apply
	// to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be
	// specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table.
	// For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '\*' wildcard character is not allowed.
	SourceUris pulumi.StringArrayInput `pulumi:"sourceUris"`
	// Time-based partitioning specification for the destination table.
	// Structure is documented below.
	TimePartitioning JobLoadTimePartitioningPtrInput `pulumi:"timePartitioning"`
	// Specifies the action that occurs if the destination table already exists. The following values are supported:
	// WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
	// WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
	// WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
	// Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
	// Creation, truncation and append actions occur as one atomic update upon job completion.
	// Default value is `WRITE_EMPTY`.
	// Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
	WriteDisposition pulumi.StringPtrInput `pulumi:"writeDisposition"`
}

func (JobLoadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobLoad)(nil)).Elem()
}

func (i JobLoadArgs) ToJobLoadOutput() JobLoadOutput {
	return i.ToJobLoadOutputWithContext(context.Background())
}

func (i JobLoadArgs) ToJobLoadOutputWithContext(ctx context.Context) JobLoadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobLoadOutput)
}

func (i JobLoadArgs) ToJobLoadPtrOutput() JobLoadPtrOutput {
	return i.ToJobLoadPtrOutputWithContext(context.Background())
}

func (i JobLoadArgs) ToJobLoadPtrOutputWithContext(ctx context.Context) JobLoadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobLoadOutput).ToJobLoadPtrOutputWithContext(ctx)
}

// JobLoadPtrInput is an input type that accepts JobLoadArgs, JobLoadPtr and JobLoadPtrOutput values.
// You can construct a concrete instance of `JobLoadPtrInput` via:
//
//	        JobLoadArgs{...}
//
//	or:
//
//	        nil
type JobLoadPtrInput interface {
	pulumi.Input

	ToJobLoadPtrOutput() JobLoadPtrOutput
	ToJobLoadPtrOutputWithContext(context.Context) JobLoadPtrOutput
}

type jobLoadPtrType JobLoadArgs

func JobLoadPtr(v *JobLoadArgs) JobLoadPtrInput {
	return (*jobLoadPtrType)(v)
}

func (*jobLoadPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobLoad)(nil)).Elem()
}

func (i *jobLoadPtrType) ToJobLoadPtrOutput() JobLoadPtrOutput {
	return i.ToJobLoadPtrOutputWithContext(context.Background())
}

func (i *jobLoadPtrType) ToJobLoadPtrOutputWithContext(ctx context.Context) JobLoadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobLoadPtrOutput)
}

type JobLoadOutput struct{ *pulumi.OutputState }

func (JobLoadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobLoad)(nil)).Elem()
}

func (o JobLoadOutput) ToJobLoadOutput() JobLoadOutput {
	return o
}

func (o JobLoadOutput) ToJobLoadOutputWithContext(ctx context.Context) JobLoadOutput {
	return o
}

func (o JobLoadOutput) ToJobLoadPtrOutput() JobLoadPtrOutput {
	return o.ToJobLoadPtrOutputWithContext(context.Background())
}

func (o JobLoadOutput) ToJobLoadPtrOutputWithContext(ctx context.Context) JobLoadPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobLoad) *JobLoad {
		return &v
	}).(JobLoadPtrOutput)
}

// Accept rows that are missing trailing optional columns. The missing values are treated as nulls.
// If false, records with missing trailing columns are treated as bad records, and if there are too many bad records,
// an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
func (o JobLoadOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobLoad) *bool { return v.AllowJaggedRows }).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file.
// The default value is false.
func (o JobLoadOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobLoad) *bool { return v.AllowQuotedNewlines }).(pulumi.BoolPtrOutput)
}

// Indicates if we should automatically infer the options and schema for CSV and JSON sources.
func (o JobLoadOutput) Autodetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobLoad) *bool { return v.Autodetect }).(pulumi.BoolPtrOutput)
}

// Specifies whether the job is allowed to create new tables. The following values are supported:
// CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
// CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
// Creation, truncation and append actions occur as one atomic update upon job completion
// Default value is `CREATE_IF_NEEDED`.
// Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
func (o JobLoadOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobLoad) *string { return v.CreateDisposition }).(pulumi.StringPtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys)
// Structure is documented below.
func (o JobLoadOutput) DestinationEncryptionConfiguration() JobLoadDestinationEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v JobLoad) *JobLoadDestinationEncryptionConfiguration {
		return v.DestinationEncryptionConfiguration
	}).(JobLoadDestinationEncryptionConfigurationPtrOutput)
}

// The destination table to load the data into.
// Structure is documented below.
func (o JobLoadOutput) DestinationTable() JobLoadDestinationTableOutput {
	return o.ApplyT(func(v JobLoad) JobLoadDestinationTable { return v.DestinationTable }).(JobLoadDestinationTableOutput)
}

// The character encoding of the data. The supported values are UTF-8 or ISO-8859-1.
// The default value is UTF-8. BigQuery decodes the data after the raw, binary data
// has been split using the values of the quote and fieldDelimiter properties.
func (o JobLoadOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobLoad) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character.
// To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts
// the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the
// data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator.
// The default value is a comma (',').
func (o JobLoadOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobLoad) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Indicates if BigQuery should allow extra values that are not represented in the table schema.
// If true, the extra values are ignored. If false, records with extra columns are treated as bad records,
// and if there are too many bad records, an invalid error is returned in the job result.
// The default value is false. The sourceFormat property determines what BigQuery treats as an extra value:
// CSV: Trailing columns
// JSON: Named values that don't match any column names
func (o JobLoadOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobLoad) *bool { return v.IgnoreUnknownValues }).(pulumi.BoolPtrOutput)
}

// If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON.
// For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited
// GeoJSON: set to GEOJSON.
func (o JobLoadOutput) JsonExtension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobLoad) *string { return v.JsonExtension }).(pulumi.StringPtrOutput)
}

// The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value,
// an invalid error is returned in the job result. The default value is 0, which requires that all records are valid.
func (o JobLoadOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobLoad) *int { return v.MaxBadRecords }).(pulumi.IntPtrOutput)
}

// Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value
// when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an
// empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as
// an empty value.
func (o JobLoadOutput) NullMarker() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobLoad) *string { return v.NullMarker }).(pulumi.StringPtrOutput)
}

// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup.
// Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties.
// If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
func (o JobLoadOutput) ProjectionFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobLoad) []string { return v.ProjectionFields }).(pulumi.StringArrayOutput)
}

// The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding,
// and then uses the first byte of the encoded string to split the data in its raw, binary state.
// The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string.
// If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
func (o JobLoadOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobLoad) *string { return v.Quote }).(pulumi.StringPtrOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or
// supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
// when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators.
// For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified:
// ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
// ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobLoadOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobLoad) []string { return v.SchemaUpdateOptions }).(pulumi.StringArrayOutput)
}

// The number of rows at the top of a CSV file that BigQuery will skip when loading the data.
// The default value is 0. This property is useful if you have header rows in the file that should be skipped.
// When autodetect is on, the behavior is the following:
// skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected,
// the row is read as data. Otherwise data is read starting from the second row.
// skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row.
// skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected,
// row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o JobLoadOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobLoad) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

// The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP".
// For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET".
// For orc, specify "ORC". [Beta] For Bigtable, specify "BIGTABLE".
// The default value is CSV.
func (o JobLoadOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobLoad) *string { return v.SourceFormat }).(pulumi.StringPtrOutput)
}

// The fully-qualified URIs that point to your data in Google Cloud.
// For Google Cloud Storage URIs: Each URI can contain one '\*' wildcard character
// and it must come after the 'bucket' name. Size limits related to load jobs apply
// to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be
// specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table.
// For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '\*' wildcard character is not allowed.
func (o JobLoadOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobLoad) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

// Time-based partitioning specification for the destination table.
// Structure is documented below.
func (o JobLoadOutput) TimePartitioning() JobLoadTimePartitioningPtrOutput {
	return o.ApplyT(func(v JobLoad) *JobLoadTimePartitioning { return v.TimePartitioning }).(JobLoadTimePartitioningPtrOutput)
}

// Specifies the action that occurs if the destination table already exists. The following values are supported:
// WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
// WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
// WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
// Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
// Creation, truncation and append actions occur as one atomic update upon job completion.
// Default value is `WRITE_EMPTY`.
// Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
func (o JobLoadOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobLoad) *string { return v.WriteDisposition }).(pulumi.StringPtrOutput)
}

type JobLoadPtrOutput struct{ *pulumi.OutputState }

func (JobLoadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobLoad)(nil)).Elem()
}

func (o JobLoadPtrOutput) ToJobLoadPtrOutput() JobLoadPtrOutput {
	return o
}

func (o JobLoadPtrOutput) ToJobLoadPtrOutputWithContext(ctx context.Context) JobLoadPtrOutput {
	return o
}

func (o JobLoadPtrOutput) Elem() JobLoadOutput {
	return o.ApplyT(func(v *JobLoad) JobLoad {
		if v != nil {
			return *v
		}
		var ret JobLoad
		return ret
	}).(JobLoadOutput)
}

// Accept rows that are missing trailing optional columns. The missing values are treated as nulls.
// If false, records with missing trailing columns are treated as bad records, and if there are too many bad records,
// an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
func (o JobLoadPtrOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobLoad) *bool {
		if v == nil {
			return nil
		}
		return v.AllowJaggedRows
	}).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file.
// The default value is false.
func (o JobLoadPtrOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobLoad) *bool {
		if v == nil {
			return nil
		}
		return v.AllowQuotedNewlines
	}).(pulumi.BoolPtrOutput)
}

// Indicates if we should automatically infer the options and schema for CSV and JSON sources.
func (o JobLoadPtrOutput) Autodetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobLoad) *bool {
		if v == nil {
			return nil
		}
		return v.Autodetect
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether the job is allowed to create new tables. The following values are supported:
// CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
// CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
// Creation, truncation and append actions occur as one atomic update upon job completion
// Default value is `CREATE_IF_NEEDED`.
// Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
func (o JobLoadPtrOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobLoad) *string {
		if v == nil {
			return nil
		}
		return v.CreateDisposition
	}).(pulumi.StringPtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys)
// Structure is documented below.
func (o JobLoadPtrOutput) DestinationEncryptionConfiguration() JobLoadDestinationEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *JobLoad) *JobLoadDestinationEncryptionConfiguration {
		if v == nil {
			return nil
		}
		return v.DestinationEncryptionConfiguration
	}).(JobLoadDestinationEncryptionConfigurationPtrOutput)
}

// The destination table to load the data into.
// Structure is documented below.
func (o JobLoadPtrOutput) DestinationTable() JobLoadDestinationTablePtrOutput {
	return o.ApplyT(func(v *JobLoad) *JobLoadDestinationTable {
		if v == nil {
			return nil
		}
		return &v.DestinationTable
	}).(JobLoadDestinationTablePtrOutput)
}

// The character encoding of the data. The supported values are UTF-8 or ISO-8859-1.
// The default value is UTF-8. BigQuery decodes the data after the raw, binary data
// has been split using the values of the quote and fieldDelimiter properties.
func (o JobLoadPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobLoad) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character.
// To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts
// the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the
// data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator.
// The default value is a comma (',').
func (o JobLoadPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobLoad) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// Indicates if BigQuery should allow extra values that are not represented in the table schema.
// If true, the extra values are ignored. If false, records with extra columns are treated as bad records,
// and if there are too many bad records, an invalid error is returned in the job result.
// The default value is false. The sourceFormat property determines what BigQuery treats as an extra value:
// CSV: Trailing columns
// JSON: Named values that don't match any column names
func (o JobLoadPtrOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobLoad) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreUnknownValues
	}).(pulumi.BoolPtrOutput)
}

// If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON.
// For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited
// GeoJSON: set to GEOJSON.
func (o JobLoadPtrOutput) JsonExtension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobLoad) *string {
		if v == nil {
			return nil
		}
		return v.JsonExtension
	}).(pulumi.StringPtrOutput)
}

// The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value,
// an invalid error is returned in the job result. The default value is 0, which requires that all records are valid.
func (o JobLoadPtrOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobLoad) *int {
		if v == nil {
			return nil
		}
		return v.MaxBadRecords
	}).(pulumi.IntPtrOutput)
}

// Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value
// when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an
// empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as
// an empty value.
func (o JobLoadPtrOutput) NullMarker() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobLoad) *string {
		if v == nil {
			return nil
		}
		return v.NullMarker
	}).(pulumi.StringPtrOutput)
}

// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup.
// Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties.
// If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
func (o JobLoadPtrOutput) ProjectionFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobLoad) []string {
		if v == nil {
			return nil
		}
		return v.ProjectionFields
	}).(pulumi.StringArrayOutput)
}

// The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding,
// and then uses the first byte of the encoded string to split the data in its raw, binary state.
// The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string.
// If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
func (o JobLoadPtrOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobLoad) *string {
		if v == nil {
			return nil
		}
		return v.Quote
	}).(pulumi.StringPtrOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or
// supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
// when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators.
// For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified:
// ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
// ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobLoadPtrOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobLoad) []string {
		if v == nil {
			return nil
		}
		return v.SchemaUpdateOptions
	}).(pulumi.StringArrayOutput)
}

// The number of rows at the top of a CSV file that BigQuery will skip when loading the data.
// The default value is 0. This property is useful if you have header rows in the file that should be skipped.
// When autodetect is on, the behavior is the following:
// skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected,
// the row is read as data. Otherwise data is read starting from the second row.
// skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row.
// skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected,
// row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o JobLoadPtrOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobLoad) *int {
		if v == nil {
			return nil
		}
		return v.SkipLeadingRows
	}).(pulumi.IntPtrOutput)
}

// The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP".
// For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET".
// For orc, specify "ORC". [Beta] For Bigtable, specify "BIGTABLE".
// The default value is CSV.
func (o JobLoadPtrOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobLoad) *string {
		if v == nil {
			return nil
		}
		return v.SourceFormat
	}).(pulumi.StringPtrOutput)
}

// The fully-qualified URIs that point to your data in Google Cloud.
// For Google Cloud Storage URIs: Each URI can contain one '\*' wildcard character
// and it must come after the 'bucket' name. Size limits related to load jobs apply
// to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be
// specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table.
// For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '\*' wildcard character is not allowed.
func (o JobLoadPtrOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobLoad) []string {
		if v == nil {
			return nil
		}
		return v.SourceUris
	}).(pulumi.StringArrayOutput)
}

// Time-based partitioning specification for the destination table.
// Structure is documented below.
func (o JobLoadPtrOutput) TimePartitioning() JobLoadTimePartitioningPtrOutput {
	return o.ApplyT(func(v *JobLoad) *JobLoadTimePartitioning {
		if v == nil {
			return nil
		}
		return v.TimePartitioning
	}).(JobLoadTimePartitioningPtrOutput)
}

// Specifies the action that occurs if the destination table already exists. The following values are supported:
// WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
// WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
// WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
// Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
// Creation, truncation and append actions occur as one atomic update upon job completion.
// Default value is `WRITE_EMPTY`.
// Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
func (o JobLoadPtrOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobLoad) *string {
		if v == nil {
			return nil
		}
		return v.WriteDisposition
	}).(pulumi.StringPtrOutput)
}

type JobLoadDestinationEncryptionConfiguration struct {
	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
	// The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName string `pulumi:"kmsKeyName"`
	// Describes the Cloud KMS encryption key version used to protect destination BigQuery table.
	KmsKeyVersion *string `pulumi:"kmsKeyVersion"`
}

// JobLoadDestinationEncryptionConfigurationInput is an input type that accepts JobLoadDestinationEncryptionConfigurationArgs and JobLoadDestinationEncryptionConfigurationOutput values.
// You can construct a concrete instance of `JobLoadDestinationEncryptionConfigurationInput` via:
//
//	JobLoadDestinationEncryptionConfigurationArgs{...}
type JobLoadDestinationEncryptionConfigurationInput interface {
	pulumi.Input

	ToJobLoadDestinationEncryptionConfigurationOutput() JobLoadDestinationEncryptionConfigurationOutput
	ToJobLoadDestinationEncryptionConfigurationOutputWithContext(context.Context) JobLoadDestinationEncryptionConfigurationOutput
}

type JobLoadDestinationEncryptionConfigurationArgs struct {
	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
	// The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
	// Describes the Cloud KMS encryption key version used to protect destination BigQuery table.
	KmsKeyVersion pulumi.StringPtrInput `pulumi:"kmsKeyVersion"`
}

func (JobLoadDestinationEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobLoadDestinationEncryptionConfiguration)(nil)).Elem()
}

func (i JobLoadDestinationEncryptionConfigurationArgs) ToJobLoadDestinationEncryptionConfigurationOutput() JobLoadDestinationEncryptionConfigurationOutput {
	return i.ToJobLoadDestinationEncryptionConfigurationOutputWithContext(context.Background())
}

func (i JobLoadDestinationEncryptionConfigurationArgs) ToJobLoadDestinationEncryptionConfigurationOutputWithContext(ctx context.Context) JobLoadDestinationEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobLoadDestinationEncryptionConfigurationOutput)
}

func (i JobLoadDestinationEncryptionConfigurationArgs) ToJobLoadDestinationEncryptionConfigurationPtrOutput() JobLoadDestinationEncryptionConfigurationPtrOutput {
	return i.ToJobLoadDestinationEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i JobLoadDestinationEncryptionConfigurationArgs) ToJobLoadDestinationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) JobLoadDestinationEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobLoadDestinationEncryptionConfigurationOutput).ToJobLoadDestinationEncryptionConfigurationPtrOutputWithContext(ctx)
}

// JobLoadDestinationEncryptionConfigurationPtrInput is an input type that accepts JobLoadDestinationEncryptionConfigurationArgs, JobLoadDestinationEncryptionConfigurationPtr and JobLoadDestinationEncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `JobLoadDestinationEncryptionConfigurationPtrInput` via:
//
//	        JobLoadDestinationEncryptionConfigurationArgs{...}
//
//	or:
//
//	        nil
type JobLoadDestinationEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToJobLoadDestinationEncryptionConfigurationPtrOutput() JobLoadDestinationEncryptionConfigurationPtrOutput
	ToJobLoadDestinationEncryptionConfigurationPtrOutputWithContext(context.Context) JobLoadDestinationEncryptionConfigurationPtrOutput
}

type jobLoadDestinationEncryptionConfigurationPtrType JobLoadDestinationEncryptionConfigurationArgs

func JobLoadDestinationEncryptionConfigurationPtr(v *JobLoadDestinationEncryptionConfigurationArgs) JobLoadDestinationEncryptionConfigurationPtrInput {
	return (*jobLoadDestinationEncryptionConfigurationPtrType)(v)
}

func (*jobLoadDestinationEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobLoadDestinationEncryptionConfiguration)(nil)).Elem()
}

func (i *jobLoadDestinationEncryptionConfigurationPtrType) ToJobLoadDestinationEncryptionConfigurationPtrOutput() JobLoadDestinationEncryptionConfigurationPtrOutput {
	return i.ToJobLoadDestinationEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *jobLoadDestinationEncryptionConfigurationPtrType) ToJobLoadDestinationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) JobLoadDestinationEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobLoadDestinationEncryptionConfigurationPtrOutput)
}

type JobLoadDestinationEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (JobLoadDestinationEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobLoadDestinationEncryptionConfiguration)(nil)).Elem()
}

func (o JobLoadDestinationEncryptionConfigurationOutput) ToJobLoadDestinationEncryptionConfigurationOutput() JobLoadDestinationEncryptionConfigurationOutput {
	return o
}

func (o JobLoadDestinationEncryptionConfigurationOutput) ToJobLoadDestinationEncryptionConfigurationOutputWithContext(ctx context.Context) JobLoadDestinationEncryptionConfigurationOutput {
	return o
}

func (o JobLoadDestinationEncryptionConfigurationOutput) ToJobLoadDestinationEncryptionConfigurationPtrOutput() JobLoadDestinationEncryptionConfigurationPtrOutput {
	return o.ToJobLoadDestinationEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o JobLoadDestinationEncryptionConfigurationOutput) ToJobLoadDestinationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) JobLoadDestinationEncryptionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobLoadDestinationEncryptionConfiguration) *JobLoadDestinationEncryptionConfiguration {
		return &v
	}).(JobLoadDestinationEncryptionConfigurationPtrOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
// The BigQuery Service Account associated with your project requires access to this encryption key.
func (o JobLoadDestinationEncryptionConfigurationOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v JobLoadDestinationEncryptionConfiguration) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// Describes the Cloud KMS encryption key version used to protect destination BigQuery table.
func (o JobLoadDestinationEncryptionConfigurationOutput) KmsKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobLoadDestinationEncryptionConfiguration) *string { return v.KmsKeyVersion }).(pulumi.StringPtrOutput)
}

type JobLoadDestinationEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (JobLoadDestinationEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobLoadDestinationEncryptionConfiguration)(nil)).Elem()
}

func (o JobLoadDestinationEncryptionConfigurationPtrOutput) ToJobLoadDestinationEncryptionConfigurationPtrOutput() JobLoadDestinationEncryptionConfigurationPtrOutput {
	return o
}

func (o JobLoadDestinationEncryptionConfigurationPtrOutput) ToJobLoadDestinationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) JobLoadDestinationEncryptionConfigurationPtrOutput {
	return o
}

func (o JobLoadDestinationEncryptionConfigurationPtrOutput) Elem() JobLoadDestinationEncryptionConfigurationOutput {
	return o.ApplyT(func(v *JobLoadDestinationEncryptionConfiguration) JobLoadDestinationEncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret JobLoadDestinationEncryptionConfiguration
		return ret
	}).(JobLoadDestinationEncryptionConfigurationOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
// The BigQuery Service Account associated with your project requires access to this encryption key.
func (o JobLoadDestinationEncryptionConfigurationPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobLoadDestinationEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Describes the Cloud KMS encryption key version used to protect destination BigQuery table.
func (o JobLoadDestinationEncryptionConfigurationPtrOutput) KmsKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobLoadDestinationEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyVersion
	}).(pulumi.StringPtrOutput)
}

type JobLoadDestinationTable struct {
	// The ID of the dataset containing this table.
	DatasetId *string `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId *string `pulumi:"projectId"`
	// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
	// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
	TableId string `pulumi:"tableId"`
}

// JobLoadDestinationTableInput is an input type that accepts JobLoadDestinationTableArgs and JobLoadDestinationTableOutput values.
// You can construct a concrete instance of `JobLoadDestinationTableInput` via:
//
//	JobLoadDestinationTableArgs{...}
type JobLoadDestinationTableInput interface {
	pulumi.Input

	ToJobLoadDestinationTableOutput() JobLoadDestinationTableOutput
	ToJobLoadDestinationTableOutputWithContext(context.Context) JobLoadDestinationTableOutput
}

type JobLoadDestinationTableArgs struct {
	// The ID of the dataset containing this table.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
	// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
	TableId pulumi.StringInput `pulumi:"tableId"`
}

func (JobLoadDestinationTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobLoadDestinationTable)(nil)).Elem()
}

func (i JobLoadDestinationTableArgs) ToJobLoadDestinationTableOutput() JobLoadDestinationTableOutput {
	return i.ToJobLoadDestinationTableOutputWithContext(context.Background())
}

func (i JobLoadDestinationTableArgs) ToJobLoadDestinationTableOutputWithContext(ctx context.Context) JobLoadDestinationTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobLoadDestinationTableOutput)
}

func (i JobLoadDestinationTableArgs) ToJobLoadDestinationTablePtrOutput() JobLoadDestinationTablePtrOutput {
	return i.ToJobLoadDestinationTablePtrOutputWithContext(context.Background())
}

func (i JobLoadDestinationTableArgs) ToJobLoadDestinationTablePtrOutputWithContext(ctx context.Context) JobLoadDestinationTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobLoadDestinationTableOutput).ToJobLoadDestinationTablePtrOutputWithContext(ctx)
}

// JobLoadDestinationTablePtrInput is an input type that accepts JobLoadDestinationTableArgs, JobLoadDestinationTablePtr and JobLoadDestinationTablePtrOutput values.
// You can construct a concrete instance of `JobLoadDestinationTablePtrInput` via:
//
//	        JobLoadDestinationTableArgs{...}
//
//	or:
//
//	        nil
type JobLoadDestinationTablePtrInput interface {
	pulumi.Input

	ToJobLoadDestinationTablePtrOutput() JobLoadDestinationTablePtrOutput
	ToJobLoadDestinationTablePtrOutputWithContext(context.Context) JobLoadDestinationTablePtrOutput
}

type jobLoadDestinationTablePtrType JobLoadDestinationTableArgs

func JobLoadDestinationTablePtr(v *JobLoadDestinationTableArgs) JobLoadDestinationTablePtrInput {
	return (*jobLoadDestinationTablePtrType)(v)
}

func (*jobLoadDestinationTablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobLoadDestinationTable)(nil)).Elem()
}

func (i *jobLoadDestinationTablePtrType) ToJobLoadDestinationTablePtrOutput() JobLoadDestinationTablePtrOutput {
	return i.ToJobLoadDestinationTablePtrOutputWithContext(context.Background())
}

func (i *jobLoadDestinationTablePtrType) ToJobLoadDestinationTablePtrOutputWithContext(ctx context.Context) JobLoadDestinationTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobLoadDestinationTablePtrOutput)
}

type JobLoadDestinationTableOutput struct{ *pulumi.OutputState }

func (JobLoadDestinationTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobLoadDestinationTable)(nil)).Elem()
}

func (o JobLoadDestinationTableOutput) ToJobLoadDestinationTableOutput() JobLoadDestinationTableOutput {
	return o
}

func (o JobLoadDestinationTableOutput) ToJobLoadDestinationTableOutputWithContext(ctx context.Context) JobLoadDestinationTableOutput {
	return o
}

func (o JobLoadDestinationTableOutput) ToJobLoadDestinationTablePtrOutput() JobLoadDestinationTablePtrOutput {
	return o.ToJobLoadDestinationTablePtrOutputWithContext(context.Background())
}

func (o JobLoadDestinationTableOutput) ToJobLoadDestinationTablePtrOutputWithContext(ctx context.Context) JobLoadDestinationTablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobLoadDestinationTable) *JobLoadDestinationTable {
		return &v
	}).(JobLoadDestinationTablePtrOutput)
}

// The ID of the dataset containing this table.
func (o JobLoadDestinationTableOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobLoadDestinationTable) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

// The ID of the project containing this table.
func (o JobLoadDestinationTableOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobLoadDestinationTable) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
func (o JobLoadDestinationTableOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v JobLoadDestinationTable) string { return v.TableId }).(pulumi.StringOutput)
}

type JobLoadDestinationTablePtrOutput struct{ *pulumi.OutputState }

func (JobLoadDestinationTablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobLoadDestinationTable)(nil)).Elem()
}

func (o JobLoadDestinationTablePtrOutput) ToJobLoadDestinationTablePtrOutput() JobLoadDestinationTablePtrOutput {
	return o
}

func (o JobLoadDestinationTablePtrOutput) ToJobLoadDestinationTablePtrOutputWithContext(ctx context.Context) JobLoadDestinationTablePtrOutput {
	return o
}

func (o JobLoadDestinationTablePtrOutput) Elem() JobLoadDestinationTableOutput {
	return o.ApplyT(func(v *JobLoadDestinationTable) JobLoadDestinationTable {
		if v != nil {
			return *v
		}
		var ret JobLoadDestinationTable
		return ret
	}).(JobLoadDestinationTableOutput)
}

// The ID of the dataset containing this table.
func (o JobLoadDestinationTablePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobLoadDestinationTable) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this table.
func (o JobLoadDestinationTablePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobLoadDestinationTable) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
func (o JobLoadDestinationTablePtrOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobLoadDestinationTable) *string {
		if v == nil {
			return nil
		}
		return &v.TableId
	}).(pulumi.StringPtrOutput)
}

type JobLoadTimePartitioning struct {
	// Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.
	ExpirationMs *string `pulumi:"expirationMs"`
	// If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field.
	// The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
	// A wrapper is used here because an empty string is an invalid value.
	Field *string `pulumi:"field"`
	// The only type supported is DAY, which will generate one partition per day. Providing an empty string used to cause an error,
	// but in OnePlatform the field will be treated as unset.
	Type string `pulumi:"type"`
}

// JobLoadTimePartitioningInput is an input type that accepts JobLoadTimePartitioningArgs and JobLoadTimePartitioningOutput values.
// You can construct a concrete instance of `JobLoadTimePartitioningInput` via:
//
//	JobLoadTimePartitioningArgs{...}
type JobLoadTimePartitioningInput interface {
	pulumi.Input

	ToJobLoadTimePartitioningOutput() JobLoadTimePartitioningOutput
	ToJobLoadTimePartitioningOutputWithContext(context.Context) JobLoadTimePartitioningOutput
}

type JobLoadTimePartitioningArgs struct {
	// Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.
	ExpirationMs pulumi.StringPtrInput `pulumi:"expirationMs"`
	// If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field.
	// The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
	// A wrapper is used here because an empty string is an invalid value.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// The only type supported is DAY, which will generate one partition per day. Providing an empty string used to cause an error,
	// but in OnePlatform the field will be treated as unset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JobLoadTimePartitioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobLoadTimePartitioning)(nil)).Elem()
}

func (i JobLoadTimePartitioningArgs) ToJobLoadTimePartitioningOutput() JobLoadTimePartitioningOutput {
	return i.ToJobLoadTimePartitioningOutputWithContext(context.Background())
}

func (i JobLoadTimePartitioningArgs) ToJobLoadTimePartitioningOutputWithContext(ctx context.Context) JobLoadTimePartitioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobLoadTimePartitioningOutput)
}

func (i JobLoadTimePartitioningArgs) ToJobLoadTimePartitioningPtrOutput() JobLoadTimePartitioningPtrOutput {
	return i.ToJobLoadTimePartitioningPtrOutputWithContext(context.Background())
}

func (i JobLoadTimePartitioningArgs) ToJobLoadTimePartitioningPtrOutputWithContext(ctx context.Context) JobLoadTimePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobLoadTimePartitioningOutput).ToJobLoadTimePartitioningPtrOutputWithContext(ctx)
}

// JobLoadTimePartitioningPtrInput is an input type that accepts JobLoadTimePartitioningArgs, JobLoadTimePartitioningPtr and JobLoadTimePartitioningPtrOutput values.
// You can construct a concrete instance of `JobLoadTimePartitioningPtrInput` via:
//
//	        JobLoadTimePartitioningArgs{...}
//
//	or:
//
//	        nil
type JobLoadTimePartitioningPtrInput interface {
	pulumi.Input

	ToJobLoadTimePartitioningPtrOutput() JobLoadTimePartitioningPtrOutput
	ToJobLoadTimePartitioningPtrOutputWithContext(context.Context) JobLoadTimePartitioningPtrOutput
}

type jobLoadTimePartitioningPtrType JobLoadTimePartitioningArgs

func JobLoadTimePartitioningPtr(v *JobLoadTimePartitioningArgs) JobLoadTimePartitioningPtrInput {
	return (*jobLoadTimePartitioningPtrType)(v)
}

func (*jobLoadTimePartitioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobLoadTimePartitioning)(nil)).Elem()
}

func (i *jobLoadTimePartitioningPtrType) ToJobLoadTimePartitioningPtrOutput() JobLoadTimePartitioningPtrOutput {
	return i.ToJobLoadTimePartitioningPtrOutputWithContext(context.Background())
}

func (i *jobLoadTimePartitioningPtrType) ToJobLoadTimePartitioningPtrOutputWithContext(ctx context.Context) JobLoadTimePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobLoadTimePartitioningPtrOutput)
}

type JobLoadTimePartitioningOutput struct{ *pulumi.OutputState }

func (JobLoadTimePartitioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobLoadTimePartitioning)(nil)).Elem()
}

func (o JobLoadTimePartitioningOutput) ToJobLoadTimePartitioningOutput() JobLoadTimePartitioningOutput {
	return o
}

func (o JobLoadTimePartitioningOutput) ToJobLoadTimePartitioningOutputWithContext(ctx context.Context) JobLoadTimePartitioningOutput {
	return o
}

func (o JobLoadTimePartitioningOutput) ToJobLoadTimePartitioningPtrOutput() JobLoadTimePartitioningPtrOutput {
	return o.ToJobLoadTimePartitioningPtrOutputWithContext(context.Background())
}

func (o JobLoadTimePartitioningOutput) ToJobLoadTimePartitioningPtrOutputWithContext(ctx context.Context) JobLoadTimePartitioningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobLoadTimePartitioning) *JobLoadTimePartitioning {
		return &v
	}).(JobLoadTimePartitioningPtrOutput)
}

// Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.
func (o JobLoadTimePartitioningOutput) ExpirationMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobLoadTimePartitioning) *string { return v.ExpirationMs }).(pulumi.StringPtrOutput)
}

// If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field.
// The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
// A wrapper is used here because an empty string is an invalid value.
func (o JobLoadTimePartitioningOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobLoadTimePartitioning) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// The only type supported is DAY, which will generate one partition per day. Providing an empty string used to cause an error,
// but in OnePlatform the field will be treated as unset.
func (o JobLoadTimePartitioningOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JobLoadTimePartitioning) string { return v.Type }).(pulumi.StringOutput)
}

type JobLoadTimePartitioningPtrOutput struct{ *pulumi.OutputState }

func (JobLoadTimePartitioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobLoadTimePartitioning)(nil)).Elem()
}

func (o JobLoadTimePartitioningPtrOutput) ToJobLoadTimePartitioningPtrOutput() JobLoadTimePartitioningPtrOutput {
	return o
}

func (o JobLoadTimePartitioningPtrOutput) ToJobLoadTimePartitioningPtrOutputWithContext(ctx context.Context) JobLoadTimePartitioningPtrOutput {
	return o
}

func (o JobLoadTimePartitioningPtrOutput) Elem() JobLoadTimePartitioningOutput {
	return o.ApplyT(func(v *JobLoadTimePartitioning) JobLoadTimePartitioning {
		if v != nil {
			return *v
		}
		var ret JobLoadTimePartitioning
		return ret
	}).(JobLoadTimePartitioningOutput)
}

// Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.
func (o JobLoadTimePartitioningPtrOutput) ExpirationMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobLoadTimePartitioning) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationMs
	}).(pulumi.StringPtrOutput)
}

// If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field.
// The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
// A wrapper is used here because an empty string is an invalid value.
func (o JobLoadTimePartitioningPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobLoadTimePartitioning) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

// The only type supported is DAY, which will generate one partition per day. Providing an empty string used to cause an error,
// but in OnePlatform the field will be treated as unset.
func (o JobLoadTimePartitioningPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobLoadTimePartitioning) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type JobQuery struct {
	// If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance.
	// Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed.
	// However, you must still set destinationTable when result size exceeds the allowed maximum response size.
	AllowLargeResults *bool `pulumi:"allowLargeResults"`
	// Specifies whether the job is allowed to create new tables. The following values are supported:
	// CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
	// CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
	// Creation, truncation and append actions occur as one atomic update upon job completion
	// Default value is `CREATE_IF_NEEDED`.
	// Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
	CreateDisposition *string `pulumi:"createDisposition"`
	// Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
	// Structure is documented below.
	DefaultDataset *JobQueryDefaultDataset `pulumi:"defaultDataset"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	// Structure is documented below.
	DestinationEncryptionConfiguration *JobQueryDestinationEncryptionConfiguration `pulumi:"destinationEncryptionConfiguration"`
	// Describes the table where the query results should be stored.
	// This property must be set for large results that exceed the maximum response size.
	// For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
	// Structure is documented below.
	DestinationTable *JobQueryDestinationTable `pulumi:"destinationTable"`
	// If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results.
	// allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
	FlattenResults *bool `pulumi:"flattenResults"`
	// Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge).
	// If unspecified, this will be set to your project default.
	MaximumBillingTier *int `pulumi:"maximumBillingTier"`
	// Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge).
	// If unspecified, this will be set to your project default.
	MaximumBytesBilled *string `pulumi:"maximumBytesBilled"`
	// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
	ParameterMode *string `pulumi:"parameterMode"`
	// Specifies a priority for the query.
	// Default value is `INTERACTIVE`.
	// Possible values are `INTERACTIVE` and `BATCH`.
	Priority *string `pulumi:"priority"`
	// SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
	// *NOTE*: queries containing [DML language](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language)
	// (`DELETE`, `UPDATE`, `MERGE`, `INSERT`) must specify `createDisposition = ""` and `writeDisposition = ""`.
	Query string `pulumi:"query"`
	// Allows the schema of the destination table to be updated as a side effect of the query job.
	// Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
	// when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table,
	// specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema.
	// One or more of the following values are specified:
	// ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
	// ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions []string `pulumi:"schemaUpdateOptions"`
	// Options controlling the execution of scripts.
	// Structure is documented below.
	ScriptOptions *JobQueryScriptOptions `pulumi:"scriptOptions"`
	// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true.
	// If set to false, the query will use BigQuery's standard SQL.
	UseLegacySql *bool `pulumi:"useLegacySql"`
	// Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever
	// tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified.
	// The default value is true.
	UseQueryCache *bool `pulumi:"useQueryCache"`
	// Describes user-defined function resources used in the query.
	// Structure is documented below.
	UserDefinedFunctionResources []JobQueryUserDefinedFunctionResource `pulumi:"userDefinedFunctionResources"`
	// Specifies the action that occurs if the destination table already exists. The following values are supported:
	// WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
	// WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
	// WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
	// Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
	// Creation, truncation and append actions occur as one atomic update upon job completion.
	// Default value is `WRITE_EMPTY`.
	// Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
	WriteDisposition *string `pulumi:"writeDisposition"`
}

// JobQueryInput is an input type that accepts JobQueryArgs and JobQueryOutput values.
// You can construct a concrete instance of `JobQueryInput` via:
//
//	JobQueryArgs{...}
type JobQueryInput interface {
	pulumi.Input

	ToJobQueryOutput() JobQueryOutput
	ToJobQueryOutputWithContext(context.Context) JobQueryOutput
}

type JobQueryArgs struct {
	// If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance.
	// Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed.
	// However, you must still set destinationTable when result size exceeds the allowed maximum response size.
	AllowLargeResults pulumi.BoolPtrInput `pulumi:"allowLargeResults"`
	// Specifies whether the job is allowed to create new tables. The following values are supported:
	// CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
	// CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
	// Creation, truncation and append actions occur as one atomic update upon job completion
	// Default value is `CREATE_IF_NEEDED`.
	// Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
	CreateDisposition pulumi.StringPtrInput `pulumi:"createDisposition"`
	// Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
	// Structure is documented below.
	DefaultDataset JobQueryDefaultDatasetPtrInput `pulumi:"defaultDataset"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	// Structure is documented below.
	DestinationEncryptionConfiguration JobQueryDestinationEncryptionConfigurationPtrInput `pulumi:"destinationEncryptionConfiguration"`
	// Describes the table where the query results should be stored.
	// This property must be set for large results that exceed the maximum response size.
	// For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
	// Structure is documented below.
	DestinationTable JobQueryDestinationTablePtrInput `pulumi:"destinationTable"`
	// If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results.
	// allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
	FlattenResults pulumi.BoolPtrInput `pulumi:"flattenResults"`
	// Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge).
	// If unspecified, this will be set to your project default.
	MaximumBillingTier pulumi.IntPtrInput `pulumi:"maximumBillingTier"`
	// Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge).
	// If unspecified, this will be set to your project default.
	MaximumBytesBilled pulumi.StringPtrInput `pulumi:"maximumBytesBilled"`
	// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
	ParameterMode pulumi.StringPtrInput `pulumi:"parameterMode"`
	// Specifies a priority for the query.
	// Default value is `INTERACTIVE`.
	// Possible values are `INTERACTIVE` and `BATCH`.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
	// *NOTE*: queries containing [DML language](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language)
	// (`DELETE`, `UPDATE`, `MERGE`, `INSERT`) must specify `createDisposition = ""` and `writeDisposition = ""`.
	Query pulumi.StringInput `pulumi:"query"`
	// Allows the schema of the destination table to be updated as a side effect of the query job.
	// Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
	// when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table,
	// specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema.
	// One or more of the following values are specified:
	// ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
	// ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions pulumi.StringArrayInput `pulumi:"schemaUpdateOptions"`
	// Options controlling the execution of scripts.
	// Structure is documented below.
	ScriptOptions JobQueryScriptOptionsPtrInput `pulumi:"scriptOptions"`
	// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true.
	// If set to false, the query will use BigQuery's standard SQL.
	UseLegacySql pulumi.BoolPtrInput `pulumi:"useLegacySql"`
	// Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever
	// tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified.
	// The default value is true.
	UseQueryCache pulumi.BoolPtrInput `pulumi:"useQueryCache"`
	// Describes user-defined function resources used in the query.
	// Structure is documented below.
	UserDefinedFunctionResources JobQueryUserDefinedFunctionResourceArrayInput `pulumi:"userDefinedFunctionResources"`
	// Specifies the action that occurs if the destination table already exists. The following values are supported:
	// WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
	// WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
	// WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
	// Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
	// Creation, truncation and append actions occur as one atomic update upon job completion.
	// Default value is `WRITE_EMPTY`.
	// Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
	WriteDisposition pulumi.StringPtrInput `pulumi:"writeDisposition"`
}

func (JobQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQuery)(nil)).Elem()
}

func (i JobQueryArgs) ToJobQueryOutput() JobQueryOutput {
	return i.ToJobQueryOutputWithContext(context.Background())
}

func (i JobQueryArgs) ToJobQueryOutputWithContext(ctx context.Context) JobQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryOutput)
}

func (i JobQueryArgs) ToJobQueryPtrOutput() JobQueryPtrOutput {
	return i.ToJobQueryPtrOutputWithContext(context.Background())
}

func (i JobQueryArgs) ToJobQueryPtrOutputWithContext(ctx context.Context) JobQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryOutput).ToJobQueryPtrOutputWithContext(ctx)
}

// JobQueryPtrInput is an input type that accepts JobQueryArgs, JobQueryPtr and JobQueryPtrOutput values.
// You can construct a concrete instance of `JobQueryPtrInput` via:
//
//	        JobQueryArgs{...}
//
//	or:
//
//	        nil
type JobQueryPtrInput interface {
	pulumi.Input

	ToJobQueryPtrOutput() JobQueryPtrOutput
	ToJobQueryPtrOutputWithContext(context.Context) JobQueryPtrOutput
}

type jobQueryPtrType JobQueryArgs

func JobQueryPtr(v *JobQueryArgs) JobQueryPtrInput {
	return (*jobQueryPtrType)(v)
}

func (*jobQueryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobQuery)(nil)).Elem()
}

func (i *jobQueryPtrType) ToJobQueryPtrOutput() JobQueryPtrOutput {
	return i.ToJobQueryPtrOutputWithContext(context.Background())
}

func (i *jobQueryPtrType) ToJobQueryPtrOutputWithContext(ctx context.Context) JobQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryPtrOutput)
}

type JobQueryOutput struct{ *pulumi.OutputState }

func (JobQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQuery)(nil)).Elem()
}

func (o JobQueryOutput) ToJobQueryOutput() JobQueryOutput {
	return o
}

func (o JobQueryOutput) ToJobQueryOutputWithContext(ctx context.Context) JobQueryOutput {
	return o
}

func (o JobQueryOutput) ToJobQueryPtrOutput() JobQueryPtrOutput {
	return o.ToJobQueryPtrOutputWithContext(context.Background())
}

func (o JobQueryOutput) ToJobQueryPtrOutputWithContext(ctx context.Context) JobQueryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobQuery) *JobQuery {
		return &v
	}).(JobQueryPtrOutput)
}

// If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance.
// Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed.
// However, you must still set destinationTable when result size exceeds the allowed maximum response size.
func (o JobQueryOutput) AllowLargeResults() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobQuery) *bool { return v.AllowLargeResults }).(pulumi.BoolPtrOutput)
}

// Specifies whether the job is allowed to create new tables. The following values are supported:
// CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
// CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
// Creation, truncation and append actions occur as one atomic update upon job completion
// Default value is `CREATE_IF_NEEDED`.
// Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
func (o JobQueryOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQuery) *string { return v.CreateDisposition }).(pulumi.StringPtrOutput)
}

// Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
// Structure is documented below.
func (o JobQueryOutput) DefaultDataset() JobQueryDefaultDatasetPtrOutput {
	return o.ApplyT(func(v JobQuery) *JobQueryDefaultDataset { return v.DefaultDataset }).(JobQueryDefaultDatasetPtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys)
// Structure is documented below.
func (o JobQueryOutput) DestinationEncryptionConfiguration() JobQueryDestinationEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v JobQuery) *JobQueryDestinationEncryptionConfiguration {
		return v.DestinationEncryptionConfiguration
	}).(JobQueryDestinationEncryptionConfigurationPtrOutput)
}

// Describes the table where the query results should be stored.
// This property must be set for large results that exceed the maximum response size.
// For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
// Structure is documented below.
func (o JobQueryOutput) DestinationTable() JobQueryDestinationTablePtrOutput {
	return o.ApplyT(func(v JobQuery) *JobQueryDestinationTable { return v.DestinationTable }).(JobQueryDestinationTablePtrOutput)
}

// If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results.
// allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
func (o JobQueryOutput) FlattenResults() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobQuery) *bool { return v.FlattenResults }).(pulumi.BoolPtrOutput)
}

// Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge).
// If unspecified, this will be set to your project default.
func (o JobQueryOutput) MaximumBillingTier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobQuery) *int { return v.MaximumBillingTier }).(pulumi.IntPtrOutput)
}

// Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge).
// If unspecified, this will be set to your project default.
func (o JobQueryOutput) MaximumBytesBilled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQuery) *string { return v.MaximumBytesBilled }).(pulumi.StringPtrOutput)
}

// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
func (o JobQueryOutput) ParameterMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQuery) *string { return v.ParameterMode }).(pulumi.StringPtrOutput)
}

// Specifies a priority for the query.
// Default value is `INTERACTIVE`.
// Possible values are `INTERACTIVE` and `BATCH`.
func (o JobQueryOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQuery) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
// *NOTE*: queries containing [DML language](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language)
// (`DELETE`, `UPDATE`, `MERGE`, `INSERT`) must specify `createDisposition = ""` and `writeDisposition = ""`.
func (o JobQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v JobQuery) string { return v.Query }).(pulumi.StringOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the query job.
// Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
// when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table,
// specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema.
// One or more of the following values are specified:
// ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
// ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobQueryOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobQuery) []string { return v.SchemaUpdateOptions }).(pulumi.StringArrayOutput)
}

// Options controlling the execution of scripts.
// Structure is documented below.
func (o JobQueryOutput) ScriptOptions() JobQueryScriptOptionsPtrOutput {
	return o.ApplyT(func(v JobQuery) *JobQueryScriptOptions { return v.ScriptOptions }).(JobQueryScriptOptionsPtrOutput)
}

// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true.
// If set to false, the query will use BigQuery's standard SQL.
func (o JobQueryOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobQuery) *bool { return v.UseLegacySql }).(pulumi.BoolPtrOutput)
}

// Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever
// tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified.
// The default value is true.
func (o JobQueryOutput) UseQueryCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobQuery) *bool { return v.UseQueryCache }).(pulumi.BoolPtrOutput)
}

// Describes user-defined function resources used in the query.
// Structure is documented below.
func (o JobQueryOutput) UserDefinedFunctionResources() JobQueryUserDefinedFunctionResourceArrayOutput {
	return o.ApplyT(func(v JobQuery) []JobQueryUserDefinedFunctionResource { return v.UserDefinedFunctionResources }).(JobQueryUserDefinedFunctionResourceArrayOutput)
}

// Specifies the action that occurs if the destination table already exists. The following values are supported:
// WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
// WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
// WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
// Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
// Creation, truncation and append actions occur as one atomic update upon job completion.
// Default value is `WRITE_EMPTY`.
// Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
func (o JobQueryOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQuery) *string { return v.WriteDisposition }).(pulumi.StringPtrOutput)
}

type JobQueryPtrOutput struct{ *pulumi.OutputState }

func (JobQueryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobQuery)(nil)).Elem()
}

func (o JobQueryPtrOutput) ToJobQueryPtrOutput() JobQueryPtrOutput {
	return o
}

func (o JobQueryPtrOutput) ToJobQueryPtrOutputWithContext(ctx context.Context) JobQueryPtrOutput {
	return o
}

func (o JobQueryPtrOutput) Elem() JobQueryOutput {
	return o.ApplyT(func(v *JobQuery) JobQuery {
		if v != nil {
			return *v
		}
		var ret JobQuery
		return ret
	}).(JobQueryOutput)
}

// If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance.
// Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed.
// However, you must still set destinationTable when result size exceeds the allowed maximum response size.
func (o JobQueryPtrOutput) AllowLargeResults() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobQuery) *bool {
		if v == nil {
			return nil
		}
		return v.AllowLargeResults
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether the job is allowed to create new tables. The following values are supported:
// CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
// CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
// Creation, truncation and append actions occur as one atomic update upon job completion
// Default value is `CREATE_IF_NEEDED`.
// Possible values are `CREATE_IF_NEEDED` and `CREATE_NEVER`.
func (o JobQueryPtrOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQuery) *string {
		if v == nil {
			return nil
		}
		return v.CreateDisposition
	}).(pulumi.StringPtrOutput)
}

// Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
// Structure is documented below.
func (o JobQueryPtrOutput) DefaultDataset() JobQueryDefaultDatasetPtrOutput {
	return o.ApplyT(func(v *JobQuery) *JobQueryDefaultDataset {
		if v == nil {
			return nil
		}
		return v.DefaultDataset
	}).(JobQueryDefaultDatasetPtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys)
// Structure is documented below.
func (o JobQueryPtrOutput) DestinationEncryptionConfiguration() JobQueryDestinationEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *JobQuery) *JobQueryDestinationEncryptionConfiguration {
		if v == nil {
			return nil
		}
		return v.DestinationEncryptionConfiguration
	}).(JobQueryDestinationEncryptionConfigurationPtrOutput)
}

// Describes the table where the query results should be stored.
// This property must be set for large results that exceed the maximum response size.
// For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
// Structure is documented below.
func (o JobQueryPtrOutput) DestinationTable() JobQueryDestinationTablePtrOutput {
	return o.ApplyT(func(v *JobQuery) *JobQueryDestinationTable {
		if v == nil {
			return nil
		}
		return v.DestinationTable
	}).(JobQueryDestinationTablePtrOutput)
}

// If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results.
// allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
func (o JobQueryPtrOutput) FlattenResults() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobQuery) *bool {
		if v == nil {
			return nil
		}
		return v.FlattenResults
	}).(pulumi.BoolPtrOutput)
}

// Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge).
// If unspecified, this will be set to your project default.
func (o JobQueryPtrOutput) MaximumBillingTier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobQuery) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBillingTier
	}).(pulumi.IntPtrOutput)
}

// Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge).
// If unspecified, this will be set to your project default.
func (o JobQueryPtrOutput) MaximumBytesBilled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQuery) *string {
		if v == nil {
			return nil
		}
		return v.MaximumBytesBilled
	}).(pulumi.StringPtrOutput)
}

// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
func (o JobQueryPtrOutput) ParameterMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQuery) *string {
		if v == nil {
			return nil
		}
		return v.ParameterMode
	}).(pulumi.StringPtrOutput)
}

// Specifies a priority for the query.
// Default value is `INTERACTIVE`.
// Possible values are `INTERACTIVE` and `BATCH`.
func (o JobQueryPtrOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQuery) *string {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.StringPtrOutput)
}

// SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
// *NOTE*: queries containing [DML language](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language)
// (`DELETE`, `UPDATE`, `MERGE`, `INSERT`) must specify `createDisposition = ""` and `writeDisposition = ""`.
func (o JobQueryPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQuery) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the query job.
// Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
// when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table,
// specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema.
// One or more of the following values are specified:
// ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
// ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobQueryPtrOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobQuery) []string {
		if v == nil {
			return nil
		}
		return v.SchemaUpdateOptions
	}).(pulumi.StringArrayOutput)
}

// Options controlling the execution of scripts.
// Structure is documented below.
func (o JobQueryPtrOutput) ScriptOptions() JobQueryScriptOptionsPtrOutput {
	return o.ApplyT(func(v *JobQuery) *JobQueryScriptOptions {
		if v == nil {
			return nil
		}
		return v.ScriptOptions
	}).(JobQueryScriptOptionsPtrOutput)
}

// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true.
// If set to false, the query will use BigQuery's standard SQL.
func (o JobQueryPtrOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobQuery) *bool {
		if v == nil {
			return nil
		}
		return v.UseLegacySql
	}).(pulumi.BoolPtrOutput)
}

// Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever
// tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified.
// The default value is true.
func (o JobQueryPtrOutput) UseQueryCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobQuery) *bool {
		if v == nil {
			return nil
		}
		return v.UseQueryCache
	}).(pulumi.BoolPtrOutput)
}

// Describes user-defined function resources used in the query.
// Structure is documented below.
func (o JobQueryPtrOutput) UserDefinedFunctionResources() JobQueryUserDefinedFunctionResourceArrayOutput {
	return o.ApplyT(func(v *JobQuery) []JobQueryUserDefinedFunctionResource {
		if v == nil {
			return nil
		}
		return v.UserDefinedFunctionResources
	}).(JobQueryUserDefinedFunctionResourceArrayOutput)
}

// Specifies the action that occurs if the destination table already exists. The following values are supported:
// WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
// WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
// WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
// Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
// Creation, truncation and append actions occur as one atomic update upon job completion.
// Default value is `WRITE_EMPTY`.
// Possible values are `WRITE_TRUNCATE`, `WRITE_APPEND`, and `WRITE_EMPTY`.
func (o JobQueryPtrOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQuery) *string {
		if v == nil {
			return nil
		}
		return v.WriteDisposition
	}).(pulumi.StringPtrOutput)
}

type JobQueryDefaultDataset struct {
	// The dataset. Can be specified `{{dataset_id}}` if `projectId` is also set,
	// or of the form `projects/{{project}}/datasets/{{dataset_id}}` if not.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId *string `pulumi:"projectId"`
}

// JobQueryDefaultDatasetInput is an input type that accepts JobQueryDefaultDatasetArgs and JobQueryDefaultDatasetOutput values.
// You can construct a concrete instance of `JobQueryDefaultDatasetInput` via:
//
//	JobQueryDefaultDatasetArgs{...}
type JobQueryDefaultDatasetInput interface {
	pulumi.Input

	ToJobQueryDefaultDatasetOutput() JobQueryDefaultDatasetOutput
	ToJobQueryDefaultDatasetOutputWithContext(context.Context) JobQueryDefaultDatasetOutput
}

type JobQueryDefaultDatasetArgs struct {
	// The dataset. Can be specified `{{dataset_id}}` if `projectId` is also set,
	// or of the form `projects/{{project}}/datasets/{{dataset_id}}` if not.
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (JobQueryDefaultDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueryDefaultDataset)(nil)).Elem()
}

func (i JobQueryDefaultDatasetArgs) ToJobQueryDefaultDatasetOutput() JobQueryDefaultDatasetOutput {
	return i.ToJobQueryDefaultDatasetOutputWithContext(context.Background())
}

func (i JobQueryDefaultDatasetArgs) ToJobQueryDefaultDatasetOutputWithContext(ctx context.Context) JobQueryDefaultDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryDefaultDatasetOutput)
}

func (i JobQueryDefaultDatasetArgs) ToJobQueryDefaultDatasetPtrOutput() JobQueryDefaultDatasetPtrOutput {
	return i.ToJobQueryDefaultDatasetPtrOutputWithContext(context.Background())
}

func (i JobQueryDefaultDatasetArgs) ToJobQueryDefaultDatasetPtrOutputWithContext(ctx context.Context) JobQueryDefaultDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryDefaultDatasetOutput).ToJobQueryDefaultDatasetPtrOutputWithContext(ctx)
}

// JobQueryDefaultDatasetPtrInput is an input type that accepts JobQueryDefaultDatasetArgs, JobQueryDefaultDatasetPtr and JobQueryDefaultDatasetPtrOutput values.
// You can construct a concrete instance of `JobQueryDefaultDatasetPtrInput` via:
//
//	        JobQueryDefaultDatasetArgs{...}
//
//	or:
//
//	        nil
type JobQueryDefaultDatasetPtrInput interface {
	pulumi.Input

	ToJobQueryDefaultDatasetPtrOutput() JobQueryDefaultDatasetPtrOutput
	ToJobQueryDefaultDatasetPtrOutputWithContext(context.Context) JobQueryDefaultDatasetPtrOutput
}

type jobQueryDefaultDatasetPtrType JobQueryDefaultDatasetArgs

func JobQueryDefaultDatasetPtr(v *JobQueryDefaultDatasetArgs) JobQueryDefaultDatasetPtrInput {
	return (*jobQueryDefaultDatasetPtrType)(v)
}

func (*jobQueryDefaultDatasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobQueryDefaultDataset)(nil)).Elem()
}

func (i *jobQueryDefaultDatasetPtrType) ToJobQueryDefaultDatasetPtrOutput() JobQueryDefaultDatasetPtrOutput {
	return i.ToJobQueryDefaultDatasetPtrOutputWithContext(context.Background())
}

func (i *jobQueryDefaultDatasetPtrType) ToJobQueryDefaultDatasetPtrOutputWithContext(ctx context.Context) JobQueryDefaultDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryDefaultDatasetPtrOutput)
}

type JobQueryDefaultDatasetOutput struct{ *pulumi.OutputState }

func (JobQueryDefaultDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueryDefaultDataset)(nil)).Elem()
}

func (o JobQueryDefaultDatasetOutput) ToJobQueryDefaultDatasetOutput() JobQueryDefaultDatasetOutput {
	return o
}

func (o JobQueryDefaultDatasetOutput) ToJobQueryDefaultDatasetOutputWithContext(ctx context.Context) JobQueryDefaultDatasetOutput {
	return o
}

func (o JobQueryDefaultDatasetOutput) ToJobQueryDefaultDatasetPtrOutput() JobQueryDefaultDatasetPtrOutput {
	return o.ToJobQueryDefaultDatasetPtrOutputWithContext(context.Background())
}

func (o JobQueryDefaultDatasetOutput) ToJobQueryDefaultDatasetPtrOutputWithContext(ctx context.Context) JobQueryDefaultDatasetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobQueryDefaultDataset) *JobQueryDefaultDataset {
		return &v
	}).(JobQueryDefaultDatasetPtrOutput)
}

// The dataset. Can be specified `{{dataset_id}}` if `projectId` is also set,
// or of the form `projects/{{project}}/datasets/{{dataset_id}}` if not.
func (o JobQueryDefaultDatasetOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v JobQueryDefaultDataset) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the project containing this table.
func (o JobQueryDefaultDatasetOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQueryDefaultDataset) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

type JobQueryDefaultDatasetPtrOutput struct{ *pulumi.OutputState }

func (JobQueryDefaultDatasetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobQueryDefaultDataset)(nil)).Elem()
}

func (o JobQueryDefaultDatasetPtrOutput) ToJobQueryDefaultDatasetPtrOutput() JobQueryDefaultDatasetPtrOutput {
	return o
}

func (o JobQueryDefaultDatasetPtrOutput) ToJobQueryDefaultDatasetPtrOutputWithContext(ctx context.Context) JobQueryDefaultDatasetPtrOutput {
	return o
}

func (o JobQueryDefaultDatasetPtrOutput) Elem() JobQueryDefaultDatasetOutput {
	return o.ApplyT(func(v *JobQueryDefaultDataset) JobQueryDefaultDataset {
		if v != nil {
			return *v
		}
		var ret JobQueryDefaultDataset
		return ret
	}).(JobQueryDefaultDatasetOutput)
}

// The dataset. Can be specified `{{dataset_id}}` if `projectId` is also set,
// or of the form `projects/{{project}}/datasets/{{dataset_id}}` if not.
func (o JobQueryDefaultDatasetPtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQueryDefaultDataset) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this table.
func (o JobQueryDefaultDatasetPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQueryDefaultDataset) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

type JobQueryDestinationEncryptionConfiguration struct {
	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
	// The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName string `pulumi:"kmsKeyName"`
	// Describes the Cloud KMS encryption key version used to protect destination BigQuery table.
	KmsKeyVersion *string `pulumi:"kmsKeyVersion"`
}

// JobQueryDestinationEncryptionConfigurationInput is an input type that accepts JobQueryDestinationEncryptionConfigurationArgs and JobQueryDestinationEncryptionConfigurationOutput values.
// You can construct a concrete instance of `JobQueryDestinationEncryptionConfigurationInput` via:
//
//	JobQueryDestinationEncryptionConfigurationArgs{...}
type JobQueryDestinationEncryptionConfigurationInput interface {
	pulumi.Input

	ToJobQueryDestinationEncryptionConfigurationOutput() JobQueryDestinationEncryptionConfigurationOutput
	ToJobQueryDestinationEncryptionConfigurationOutputWithContext(context.Context) JobQueryDestinationEncryptionConfigurationOutput
}

type JobQueryDestinationEncryptionConfigurationArgs struct {
	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
	// The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
	// Describes the Cloud KMS encryption key version used to protect destination BigQuery table.
	KmsKeyVersion pulumi.StringPtrInput `pulumi:"kmsKeyVersion"`
}

func (JobQueryDestinationEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueryDestinationEncryptionConfiguration)(nil)).Elem()
}

func (i JobQueryDestinationEncryptionConfigurationArgs) ToJobQueryDestinationEncryptionConfigurationOutput() JobQueryDestinationEncryptionConfigurationOutput {
	return i.ToJobQueryDestinationEncryptionConfigurationOutputWithContext(context.Background())
}

func (i JobQueryDestinationEncryptionConfigurationArgs) ToJobQueryDestinationEncryptionConfigurationOutputWithContext(ctx context.Context) JobQueryDestinationEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryDestinationEncryptionConfigurationOutput)
}

func (i JobQueryDestinationEncryptionConfigurationArgs) ToJobQueryDestinationEncryptionConfigurationPtrOutput() JobQueryDestinationEncryptionConfigurationPtrOutput {
	return i.ToJobQueryDestinationEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i JobQueryDestinationEncryptionConfigurationArgs) ToJobQueryDestinationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) JobQueryDestinationEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryDestinationEncryptionConfigurationOutput).ToJobQueryDestinationEncryptionConfigurationPtrOutputWithContext(ctx)
}

// JobQueryDestinationEncryptionConfigurationPtrInput is an input type that accepts JobQueryDestinationEncryptionConfigurationArgs, JobQueryDestinationEncryptionConfigurationPtr and JobQueryDestinationEncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `JobQueryDestinationEncryptionConfigurationPtrInput` via:
//
//	        JobQueryDestinationEncryptionConfigurationArgs{...}
//
//	or:
//
//	        nil
type JobQueryDestinationEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToJobQueryDestinationEncryptionConfigurationPtrOutput() JobQueryDestinationEncryptionConfigurationPtrOutput
	ToJobQueryDestinationEncryptionConfigurationPtrOutputWithContext(context.Context) JobQueryDestinationEncryptionConfigurationPtrOutput
}

type jobQueryDestinationEncryptionConfigurationPtrType JobQueryDestinationEncryptionConfigurationArgs

func JobQueryDestinationEncryptionConfigurationPtr(v *JobQueryDestinationEncryptionConfigurationArgs) JobQueryDestinationEncryptionConfigurationPtrInput {
	return (*jobQueryDestinationEncryptionConfigurationPtrType)(v)
}

func (*jobQueryDestinationEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobQueryDestinationEncryptionConfiguration)(nil)).Elem()
}

func (i *jobQueryDestinationEncryptionConfigurationPtrType) ToJobQueryDestinationEncryptionConfigurationPtrOutput() JobQueryDestinationEncryptionConfigurationPtrOutput {
	return i.ToJobQueryDestinationEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *jobQueryDestinationEncryptionConfigurationPtrType) ToJobQueryDestinationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) JobQueryDestinationEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryDestinationEncryptionConfigurationPtrOutput)
}

type JobQueryDestinationEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (JobQueryDestinationEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueryDestinationEncryptionConfiguration)(nil)).Elem()
}

func (o JobQueryDestinationEncryptionConfigurationOutput) ToJobQueryDestinationEncryptionConfigurationOutput() JobQueryDestinationEncryptionConfigurationOutput {
	return o
}

func (o JobQueryDestinationEncryptionConfigurationOutput) ToJobQueryDestinationEncryptionConfigurationOutputWithContext(ctx context.Context) JobQueryDestinationEncryptionConfigurationOutput {
	return o
}

func (o JobQueryDestinationEncryptionConfigurationOutput) ToJobQueryDestinationEncryptionConfigurationPtrOutput() JobQueryDestinationEncryptionConfigurationPtrOutput {
	return o.ToJobQueryDestinationEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o JobQueryDestinationEncryptionConfigurationOutput) ToJobQueryDestinationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) JobQueryDestinationEncryptionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobQueryDestinationEncryptionConfiguration) *JobQueryDestinationEncryptionConfiguration {
		return &v
	}).(JobQueryDestinationEncryptionConfigurationPtrOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
// The BigQuery Service Account associated with your project requires access to this encryption key.
func (o JobQueryDestinationEncryptionConfigurationOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v JobQueryDestinationEncryptionConfiguration) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// Describes the Cloud KMS encryption key version used to protect destination BigQuery table.
func (o JobQueryDestinationEncryptionConfigurationOutput) KmsKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQueryDestinationEncryptionConfiguration) *string { return v.KmsKeyVersion }).(pulumi.StringPtrOutput)
}

type JobQueryDestinationEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (JobQueryDestinationEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobQueryDestinationEncryptionConfiguration)(nil)).Elem()
}

func (o JobQueryDestinationEncryptionConfigurationPtrOutput) ToJobQueryDestinationEncryptionConfigurationPtrOutput() JobQueryDestinationEncryptionConfigurationPtrOutput {
	return o
}

func (o JobQueryDestinationEncryptionConfigurationPtrOutput) ToJobQueryDestinationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) JobQueryDestinationEncryptionConfigurationPtrOutput {
	return o
}

func (o JobQueryDestinationEncryptionConfigurationPtrOutput) Elem() JobQueryDestinationEncryptionConfigurationOutput {
	return o.ApplyT(func(v *JobQueryDestinationEncryptionConfiguration) JobQueryDestinationEncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret JobQueryDestinationEncryptionConfiguration
		return ret
	}).(JobQueryDestinationEncryptionConfigurationOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
// The BigQuery Service Account associated with your project requires access to this encryption key.
func (o JobQueryDestinationEncryptionConfigurationPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQueryDestinationEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Describes the Cloud KMS encryption key version used to protect destination BigQuery table.
func (o JobQueryDestinationEncryptionConfigurationPtrOutput) KmsKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQueryDestinationEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyVersion
	}).(pulumi.StringPtrOutput)
}

type JobQueryDestinationTable struct {
	// The ID of the dataset containing this table.
	DatasetId *string `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId *string `pulumi:"projectId"`
	// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
	// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
	TableId string `pulumi:"tableId"`
}

// JobQueryDestinationTableInput is an input type that accepts JobQueryDestinationTableArgs and JobQueryDestinationTableOutput values.
// You can construct a concrete instance of `JobQueryDestinationTableInput` via:
//
//	JobQueryDestinationTableArgs{...}
type JobQueryDestinationTableInput interface {
	pulumi.Input

	ToJobQueryDestinationTableOutput() JobQueryDestinationTableOutput
	ToJobQueryDestinationTableOutputWithContext(context.Context) JobQueryDestinationTableOutput
}

type JobQueryDestinationTableArgs struct {
	// The ID of the dataset containing this table.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
	// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
	TableId pulumi.StringInput `pulumi:"tableId"`
}

func (JobQueryDestinationTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueryDestinationTable)(nil)).Elem()
}

func (i JobQueryDestinationTableArgs) ToJobQueryDestinationTableOutput() JobQueryDestinationTableOutput {
	return i.ToJobQueryDestinationTableOutputWithContext(context.Background())
}

func (i JobQueryDestinationTableArgs) ToJobQueryDestinationTableOutputWithContext(ctx context.Context) JobQueryDestinationTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryDestinationTableOutput)
}

func (i JobQueryDestinationTableArgs) ToJobQueryDestinationTablePtrOutput() JobQueryDestinationTablePtrOutput {
	return i.ToJobQueryDestinationTablePtrOutputWithContext(context.Background())
}

func (i JobQueryDestinationTableArgs) ToJobQueryDestinationTablePtrOutputWithContext(ctx context.Context) JobQueryDestinationTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryDestinationTableOutput).ToJobQueryDestinationTablePtrOutputWithContext(ctx)
}

// JobQueryDestinationTablePtrInput is an input type that accepts JobQueryDestinationTableArgs, JobQueryDestinationTablePtr and JobQueryDestinationTablePtrOutput values.
// You can construct a concrete instance of `JobQueryDestinationTablePtrInput` via:
//
//	        JobQueryDestinationTableArgs{...}
//
//	or:
//
//	        nil
type JobQueryDestinationTablePtrInput interface {
	pulumi.Input

	ToJobQueryDestinationTablePtrOutput() JobQueryDestinationTablePtrOutput
	ToJobQueryDestinationTablePtrOutputWithContext(context.Context) JobQueryDestinationTablePtrOutput
}

type jobQueryDestinationTablePtrType JobQueryDestinationTableArgs

func JobQueryDestinationTablePtr(v *JobQueryDestinationTableArgs) JobQueryDestinationTablePtrInput {
	return (*jobQueryDestinationTablePtrType)(v)
}

func (*jobQueryDestinationTablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobQueryDestinationTable)(nil)).Elem()
}

func (i *jobQueryDestinationTablePtrType) ToJobQueryDestinationTablePtrOutput() JobQueryDestinationTablePtrOutput {
	return i.ToJobQueryDestinationTablePtrOutputWithContext(context.Background())
}

func (i *jobQueryDestinationTablePtrType) ToJobQueryDestinationTablePtrOutputWithContext(ctx context.Context) JobQueryDestinationTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryDestinationTablePtrOutput)
}

type JobQueryDestinationTableOutput struct{ *pulumi.OutputState }

func (JobQueryDestinationTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueryDestinationTable)(nil)).Elem()
}

func (o JobQueryDestinationTableOutput) ToJobQueryDestinationTableOutput() JobQueryDestinationTableOutput {
	return o
}

func (o JobQueryDestinationTableOutput) ToJobQueryDestinationTableOutputWithContext(ctx context.Context) JobQueryDestinationTableOutput {
	return o
}

func (o JobQueryDestinationTableOutput) ToJobQueryDestinationTablePtrOutput() JobQueryDestinationTablePtrOutput {
	return o.ToJobQueryDestinationTablePtrOutputWithContext(context.Background())
}

func (o JobQueryDestinationTableOutput) ToJobQueryDestinationTablePtrOutputWithContext(ctx context.Context) JobQueryDestinationTablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobQueryDestinationTable) *JobQueryDestinationTable {
		return &v
	}).(JobQueryDestinationTablePtrOutput)
}

// The ID of the dataset containing this table.
func (o JobQueryDestinationTableOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQueryDestinationTable) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

// The ID of the project containing this table.
func (o JobQueryDestinationTableOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQueryDestinationTable) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
func (o JobQueryDestinationTableOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v JobQueryDestinationTable) string { return v.TableId }).(pulumi.StringOutput)
}

type JobQueryDestinationTablePtrOutput struct{ *pulumi.OutputState }

func (JobQueryDestinationTablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobQueryDestinationTable)(nil)).Elem()
}

func (o JobQueryDestinationTablePtrOutput) ToJobQueryDestinationTablePtrOutput() JobQueryDestinationTablePtrOutput {
	return o
}

func (o JobQueryDestinationTablePtrOutput) ToJobQueryDestinationTablePtrOutputWithContext(ctx context.Context) JobQueryDestinationTablePtrOutput {
	return o
}

func (o JobQueryDestinationTablePtrOutput) Elem() JobQueryDestinationTableOutput {
	return o.ApplyT(func(v *JobQueryDestinationTable) JobQueryDestinationTable {
		if v != nil {
			return *v
		}
		var ret JobQueryDestinationTable
		return ret
	}).(JobQueryDestinationTableOutput)
}

// The ID of the dataset containing this table.
func (o JobQueryDestinationTablePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQueryDestinationTable) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this table.
func (o JobQueryDestinationTablePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQueryDestinationTable) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// The table. Can be specified `{{table_id}}` if `projectId` and `datasetId` are also set,
// or of the form `projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}` if not.
func (o JobQueryDestinationTablePtrOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQueryDestinationTable) *string {
		if v == nil {
			return nil
		}
		return &v.TableId
	}).(pulumi.StringPtrOutput)
}

type JobQueryScriptOptions struct {
	// Determines which statement in the script represents the "key result",
	// used to populate the schema and query results of the script job.
	// Possible values are `LAST` and `FIRST_SELECT`.
	KeyResultStatement *string `pulumi:"keyResultStatement"`
	// Limit on the number of bytes billed per statement. Exceeding this budget results in an error.
	StatementByteBudget *string `pulumi:"statementByteBudget"`
	// Timeout period for each statement in a script.
	StatementTimeoutMs *string `pulumi:"statementTimeoutMs"`
}

// JobQueryScriptOptionsInput is an input type that accepts JobQueryScriptOptionsArgs and JobQueryScriptOptionsOutput values.
// You can construct a concrete instance of `JobQueryScriptOptionsInput` via:
//
//	JobQueryScriptOptionsArgs{...}
type JobQueryScriptOptionsInput interface {
	pulumi.Input

	ToJobQueryScriptOptionsOutput() JobQueryScriptOptionsOutput
	ToJobQueryScriptOptionsOutputWithContext(context.Context) JobQueryScriptOptionsOutput
}

type JobQueryScriptOptionsArgs struct {
	// Determines which statement in the script represents the "key result",
	// used to populate the schema and query results of the script job.
	// Possible values are `LAST` and `FIRST_SELECT`.
	KeyResultStatement pulumi.StringPtrInput `pulumi:"keyResultStatement"`
	// Limit on the number of bytes billed per statement. Exceeding this budget results in an error.
	StatementByteBudget pulumi.StringPtrInput `pulumi:"statementByteBudget"`
	// Timeout period for each statement in a script.
	StatementTimeoutMs pulumi.StringPtrInput `pulumi:"statementTimeoutMs"`
}

func (JobQueryScriptOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueryScriptOptions)(nil)).Elem()
}

func (i JobQueryScriptOptionsArgs) ToJobQueryScriptOptionsOutput() JobQueryScriptOptionsOutput {
	return i.ToJobQueryScriptOptionsOutputWithContext(context.Background())
}

func (i JobQueryScriptOptionsArgs) ToJobQueryScriptOptionsOutputWithContext(ctx context.Context) JobQueryScriptOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryScriptOptionsOutput)
}

func (i JobQueryScriptOptionsArgs) ToJobQueryScriptOptionsPtrOutput() JobQueryScriptOptionsPtrOutput {
	return i.ToJobQueryScriptOptionsPtrOutputWithContext(context.Background())
}

func (i JobQueryScriptOptionsArgs) ToJobQueryScriptOptionsPtrOutputWithContext(ctx context.Context) JobQueryScriptOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryScriptOptionsOutput).ToJobQueryScriptOptionsPtrOutputWithContext(ctx)
}

// JobQueryScriptOptionsPtrInput is an input type that accepts JobQueryScriptOptionsArgs, JobQueryScriptOptionsPtr and JobQueryScriptOptionsPtrOutput values.
// You can construct a concrete instance of `JobQueryScriptOptionsPtrInput` via:
//
//	        JobQueryScriptOptionsArgs{...}
//
//	or:
//
//	        nil
type JobQueryScriptOptionsPtrInput interface {
	pulumi.Input

	ToJobQueryScriptOptionsPtrOutput() JobQueryScriptOptionsPtrOutput
	ToJobQueryScriptOptionsPtrOutputWithContext(context.Context) JobQueryScriptOptionsPtrOutput
}

type jobQueryScriptOptionsPtrType JobQueryScriptOptionsArgs

func JobQueryScriptOptionsPtr(v *JobQueryScriptOptionsArgs) JobQueryScriptOptionsPtrInput {
	return (*jobQueryScriptOptionsPtrType)(v)
}

func (*jobQueryScriptOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobQueryScriptOptions)(nil)).Elem()
}

func (i *jobQueryScriptOptionsPtrType) ToJobQueryScriptOptionsPtrOutput() JobQueryScriptOptionsPtrOutput {
	return i.ToJobQueryScriptOptionsPtrOutputWithContext(context.Background())
}

func (i *jobQueryScriptOptionsPtrType) ToJobQueryScriptOptionsPtrOutputWithContext(ctx context.Context) JobQueryScriptOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryScriptOptionsPtrOutput)
}

type JobQueryScriptOptionsOutput struct{ *pulumi.OutputState }

func (JobQueryScriptOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueryScriptOptions)(nil)).Elem()
}

func (o JobQueryScriptOptionsOutput) ToJobQueryScriptOptionsOutput() JobQueryScriptOptionsOutput {
	return o
}

func (o JobQueryScriptOptionsOutput) ToJobQueryScriptOptionsOutputWithContext(ctx context.Context) JobQueryScriptOptionsOutput {
	return o
}

func (o JobQueryScriptOptionsOutput) ToJobQueryScriptOptionsPtrOutput() JobQueryScriptOptionsPtrOutput {
	return o.ToJobQueryScriptOptionsPtrOutputWithContext(context.Background())
}

func (o JobQueryScriptOptionsOutput) ToJobQueryScriptOptionsPtrOutputWithContext(ctx context.Context) JobQueryScriptOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobQueryScriptOptions) *JobQueryScriptOptions {
		return &v
	}).(JobQueryScriptOptionsPtrOutput)
}

// Determines which statement in the script represents the "key result",
// used to populate the schema and query results of the script job.
// Possible values are `LAST` and `FIRST_SELECT`.
func (o JobQueryScriptOptionsOutput) KeyResultStatement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQueryScriptOptions) *string { return v.KeyResultStatement }).(pulumi.StringPtrOutput)
}

// Limit on the number of bytes billed per statement. Exceeding this budget results in an error.
func (o JobQueryScriptOptionsOutput) StatementByteBudget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQueryScriptOptions) *string { return v.StatementByteBudget }).(pulumi.StringPtrOutput)
}

// Timeout period for each statement in a script.
func (o JobQueryScriptOptionsOutput) StatementTimeoutMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQueryScriptOptions) *string { return v.StatementTimeoutMs }).(pulumi.StringPtrOutput)
}

type JobQueryScriptOptionsPtrOutput struct{ *pulumi.OutputState }

func (JobQueryScriptOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobQueryScriptOptions)(nil)).Elem()
}

func (o JobQueryScriptOptionsPtrOutput) ToJobQueryScriptOptionsPtrOutput() JobQueryScriptOptionsPtrOutput {
	return o
}

func (o JobQueryScriptOptionsPtrOutput) ToJobQueryScriptOptionsPtrOutputWithContext(ctx context.Context) JobQueryScriptOptionsPtrOutput {
	return o
}

func (o JobQueryScriptOptionsPtrOutput) Elem() JobQueryScriptOptionsOutput {
	return o.ApplyT(func(v *JobQueryScriptOptions) JobQueryScriptOptions {
		if v != nil {
			return *v
		}
		var ret JobQueryScriptOptions
		return ret
	}).(JobQueryScriptOptionsOutput)
}

// Determines which statement in the script represents the "key result",
// used to populate the schema and query results of the script job.
// Possible values are `LAST` and `FIRST_SELECT`.
func (o JobQueryScriptOptionsPtrOutput) KeyResultStatement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQueryScriptOptions) *string {
		if v == nil {
			return nil
		}
		return v.KeyResultStatement
	}).(pulumi.StringPtrOutput)
}

// Limit on the number of bytes billed per statement. Exceeding this budget results in an error.
func (o JobQueryScriptOptionsPtrOutput) StatementByteBudget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQueryScriptOptions) *string {
		if v == nil {
			return nil
		}
		return v.StatementByteBudget
	}).(pulumi.StringPtrOutput)
}

// Timeout period for each statement in a script.
func (o JobQueryScriptOptionsPtrOutput) StatementTimeoutMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobQueryScriptOptions) *string {
		if v == nil {
			return nil
		}
		return v.StatementTimeoutMs
	}).(pulumi.StringPtrOutput)
}

type JobQueryUserDefinedFunctionResource struct {
	// An inline resource that contains code for a user-defined function (UDF).
	// Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
	InlineCode *string `pulumi:"inlineCode"`
	// A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
	ResourceUri *string `pulumi:"resourceUri"`
}

// JobQueryUserDefinedFunctionResourceInput is an input type that accepts JobQueryUserDefinedFunctionResourceArgs and JobQueryUserDefinedFunctionResourceOutput values.
// You can construct a concrete instance of `JobQueryUserDefinedFunctionResourceInput` via:
//
//	JobQueryUserDefinedFunctionResourceArgs{...}
type JobQueryUserDefinedFunctionResourceInput interface {
	pulumi.Input

	ToJobQueryUserDefinedFunctionResourceOutput() JobQueryUserDefinedFunctionResourceOutput
	ToJobQueryUserDefinedFunctionResourceOutputWithContext(context.Context) JobQueryUserDefinedFunctionResourceOutput
}

type JobQueryUserDefinedFunctionResourceArgs struct {
	// An inline resource that contains code for a user-defined function (UDF).
	// Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
	InlineCode pulumi.StringPtrInput `pulumi:"inlineCode"`
	// A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
	ResourceUri pulumi.StringPtrInput `pulumi:"resourceUri"`
}

func (JobQueryUserDefinedFunctionResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueryUserDefinedFunctionResource)(nil)).Elem()
}

func (i JobQueryUserDefinedFunctionResourceArgs) ToJobQueryUserDefinedFunctionResourceOutput() JobQueryUserDefinedFunctionResourceOutput {
	return i.ToJobQueryUserDefinedFunctionResourceOutputWithContext(context.Background())
}

func (i JobQueryUserDefinedFunctionResourceArgs) ToJobQueryUserDefinedFunctionResourceOutputWithContext(ctx context.Context) JobQueryUserDefinedFunctionResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryUserDefinedFunctionResourceOutput)
}

// JobQueryUserDefinedFunctionResourceArrayInput is an input type that accepts JobQueryUserDefinedFunctionResourceArray and JobQueryUserDefinedFunctionResourceArrayOutput values.
// You can construct a concrete instance of `JobQueryUserDefinedFunctionResourceArrayInput` via:
//
//	JobQueryUserDefinedFunctionResourceArray{ JobQueryUserDefinedFunctionResourceArgs{...} }
type JobQueryUserDefinedFunctionResourceArrayInput interface {
	pulumi.Input

	ToJobQueryUserDefinedFunctionResourceArrayOutput() JobQueryUserDefinedFunctionResourceArrayOutput
	ToJobQueryUserDefinedFunctionResourceArrayOutputWithContext(context.Context) JobQueryUserDefinedFunctionResourceArrayOutput
}

type JobQueryUserDefinedFunctionResourceArray []JobQueryUserDefinedFunctionResourceInput

func (JobQueryUserDefinedFunctionResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobQueryUserDefinedFunctionResource)(nil)).Elem()
}

func (i JobQueryUserDefinedFunctionResourceArray) ToJobQueryUserDefinedFunctionResourceArrayOutput() JobQueryUserDefinedFunctionResourceArrayOutput {
	return i.ToJobQueryUserDefinedFunctionResourceArrayOutputWithContext(context.Background())
}

func (i JobQueryUserDefinedFunctionResourceArray) ToJobQueryUserDefinedFunctionResourceArrayOutputWithContext(ctx context.Context) JobQueryUserDefinedFunctionResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueryUserDefinedFunctionResourceArrayOutput)
}

type JobQueryUserDefinedFunctionResourceOutput struct{ *pulumi.OutputState }

func (JobQueryUserDefinedFunctionResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueryUserDefinedFunctionResource)(nil)).Elem()
}

func (o JobQueryUserDefinedFunctionResourceOutput) ToJobQueryUserDefinedFunctionResourceOutput() JobQueryUserDefinedFunctionResourceOutput {
	return o
}

func (o JobQueryUserDefinedFunctionResourceOutput) ToJobQueryUserDefinedFunctionResourceOutputWithContext(ctx context.Context) JobQueryUserDefinedFunctionResourceOutput {
	return o
}

// An inline resource that contains code for a user-defined function (UDF).
// Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
func (o JobQueryUserDefinedFunctionResourceOutput) InlineCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQueryUserDefinedFunctionResource) *string { return v.InlineCode }).(pulumi.StringPtrOutput)
}

// A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
func (o JobQueryUserDefinedFunctionResourceOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobQueryUserDefinedFunctionResource) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

type JobQueryUserDefinedFunctionResourceArrayOutput struct{ *pulumi.OutputState }

func (JobQueryUserDefinedFunctionResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobQueryUserDefinedFunctionResource)(nil)).Elem()
}

func (o JobQueryUserDefinedFunctionResourceArrayOutput) ToJobQueryUserDefinedFunctionResourceArrayOutput() JobQueryUserDefinedFunctionResourceArrayOutput {
	return o
}

func (o JobQueryUserDefinedFunctionResourceArrayOutput) ToJobQueryUserDefinedFunctionResourceArrayOutputWithContext(ctx context.Context) JobQueryUserDefinedFunctionResourceArrayOutput {
	return o
}

func (o JobQueryUserDefinedFunctionResourceArrayOutput) Index(i pulumi.IntInput) JobQueryUserDefinedFunctionResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobQueryUserDefinedFunctionResource {
		return vs[0].([]JobQueryUserDefinedFunctionResource)[vs[1].(int)]
	}).(JobQueryUserDefinedFunctionResourceOutput)
}

type JobStatus struct {
	// Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
	// Structure is documented below.
	ErrorResults []JobStatusErrorResult `pulumi:"errorResults"`
	// The first errors encountered during the running of the job. The final message
	// includes the number of errors that caused the process to stop. Errors here do
	// not necessarily mean that the job has not completed or was unsuccessful.
	// Structure is documented below.
	Errors []JobStatusError `pulumi:"errors"`
	// Running state of the job. Valid states include 'PENDING', 'RUNNING', and 'DONE'.
	State *string `pulumi:"state"`
}

// JobStatusInput is an input type that accepts JobStatusArgs and JobStatusOutput values.
// You can construct a concrete instance of `JobStatusInput` via:
//
//	JobStatusArgs{...}
type JobStatusInput interface {
	pulumi.Input

	ToJobStatusOutput() JobStatusOutput
	ToJobStatusOutputWithContext(context.Context) JobStatusOutput
}

type JobStatusArgs struct {
	// Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
	// Structure is documented below.
	ErrorResults JobStatusErrorResultArrayInput `pulumi:"errorResults"`
	// The first errors encountered during the running of the job. The final message
	// includes the number of errors that caused the process to stop. Errors here do
	// not necessarily mean that the job has not completed or was unsuccessful.
	// Structure is documented below.
	Errors JobStatusErrorArrayInput `pulumi:"errors"`
	// Running state of the job. Valid states include 'PENDING', 'RUNNING', and 'DONE'.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (JobStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatus)(nil)).Elem()
}

func (i JobStatusArgs) ToJobStatusOutput() JobStatusOutput {
	return i.ToJobStatusOutputWithContext(context.Background())
}

func (i JobStatusArgs) ToJobStatusOutputWithContext(ctx context.Context) JobStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusOutput)
}

// JobStatusArrayInput is an input type that accepts JobStatusArray and JobStatusArrayOutput values.
// You can construct a concrete instance of `JobStatusArrayInput` via:
//
//	JobStatusArray{ JobStatusArgs{...} }
type JobStatusArrayInput interface {
	pulumi.Input

	ToJobStatusArrayOutput() JobStatusArrayOutput
	ToJobStatusArrayOutputWithContext(context.Context) JobStatusArrayOutput
}

type JobStatusArray []JobStatusInput

func (JobStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobStatus)(nil)).Elem()
}

func (i JobStatusArray) ToJobStatusArrayOutput() JobStatusArrayOutput {
	return i.ToJobStatusArrayOutputWithContext(context.Background())
}

func (i JobStatusArray) ToJobStatusArrayOutputWithContext(ctx context.Context) JobStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusArrayOutput)
}

type JobStatusOutput struct{ *pulumi.OutputState }

func (JobStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatus)(nil)).Elem()
}

func (o JobStatusOutput) ToJobStatusOutput() JobStatusOutput {
	return o
}

func (o JobStatusOutput) ToJobStatusOutputWithContext(ctx context.Context) JobStatusOutput {
	return o
}

// Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
// Structure is documented below.
func (o JobStatusOutput) ErrorResults() JobStatusErrorResultArrayOutput {
	return o.ApplyT(func(v JobStatus) []JobStatusErrorResult { return v.ErrorResults }).(JobStatusErrorResultArrayOutput)
}

// The first errors encountered during the running of the job. The final message
// includes the number of errors that caused the process to stop. Errors here do
// not necessarily mean that the job has not completed or was unsuccessful.
// Structure is documented below.
func (o JobStatusOutput) Errors() JobStatusErrorArrayOutput {
	return o.ApplyT(func(v JobStatus) []JobStatusError { return v.Errors }).(JobStatusErrorArrayOutput)
}

// Running state of the job. Valid states include 'PENDING', 'RUNNING', and 'DONE'.
func (o JobStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type JobStatusArrayOutput struct{ *pulumi.OutputState }

func (JobStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobStatus)(nil)).Elem()
}

func (o JobStatusArrayOutput) ToJobStatusArrayOutput() JobStatusArrayOutput {
	return o
}

func (o JobStatusArrayOutput) ToJobStatusArrayOutputWithContext(ctx context.Context) JobStatusArrayOutput {
	return o
}

func (o JobStatusArrayOutput) Index(i pulumi.IntInput) JobStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobStatus {
		return vs[0].([]JobStatus)[vs[1].(int)]
	}).(JobStatusOutput)
}

type JobStatusError struct {
	// The geographic location of the job. The default value is US.
	Location *string `pulumi:"location"`
	// A human-readable description of the error.
	Message *string `pulumi:"message"`
	// A short error code that summarizes the error.
	Reason *string `pulumi:"reason"`
}

// JobStatusErrorInput is an input type that accepts JobStatusErrorArgs and JobStatusErrorOutput values.
// You can construct a concrete instance of `JobStatusErrorInput` via:
//
//	JobStatusErrorArgs{...}
type JobStatusErrorInput interface {
	pulumi.Input

	ToJobStatusErrorOutput() JobStatusErrorOutput
	ToJobStatusErrorOutputWithContext(context.Context) JobStatusErrorOutput
}

type JobStatusErrorArgs struct {
	// The geographic location of the job. The default value is US.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// A human-readable description of the error.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// A short error code that summarizes the error.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (JobStatusErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatusError)(nil)).Elem()
}

func (i JobStatusErrorArgs) ToJobStatusErrorOutput() JobStatusErrorOutput {
	return i.ToJobStatusErrorOutputWithContext(context.Background())
}

func (i JobStatusErrorArgs) ToJobStatusErrorOutputWithContext(ctx context.Context) JobStatusErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusErrorOutput)
}

// JobStatusErrorArrayInput is an input type that accepts JobStatusErrorArray and JobStatusErrorArrayOutput values.
// You can construct a concrete instance of `JobStatusErrorArrayInput` via:
//
//	JobStatusErrorArray{ JobStatusErrorArgs{...} }
type JobStatusErrorArrayInput interface {
	pulumi.Input

	ToJobStatusErrorArrayOutput() JobStatusErrorArrayOutput
	ToJobStatusErrorArrayOutputWithContext(context.Context) JobStatusErrorArrayOutput
}

type JobStatusErrorArray []JobStatusErrorInput

func (JobStatusErrorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobStatusError)(nil)).Elem()
}

func (i JobStatusErrorArray) ToJobStatusErrorArrayOutput() JobStatusErrorArrayOutput {
	return i.ToJobStatusErrorArrayOutputWithContext(context.Background())
}

func (i JobStatusErrorArray) ToJobStatusErrorArrayOutputWithContext(ctx context.Context) JobStatusErrorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusErrorArrayOutput)
}

type JobStatusErrorOutput struct{ *pulumi.OutputState }

func (JobStatusErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatusError)(nil)).Elem()
}

func (o JobStatusErrorOutput) ToJobStatusErrorOutput() JobStatusErrorOutput {
	return o
}

func (o JobStatusErrorOutput) ToJobStatusErrorOutputWithContext(ctx context.Context) JobStatusErrorOutput {
	return o
}

// The geographic location of the job. The default value is US.
func (o JobStatusErrorOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatusError) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// A human-readable description of the error.
func (o JobStatusErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatusError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// A short error code that summarizes the error.
func (o JobStatusErrorOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatusError) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type JobStatusErrorArrayOutput struct{ *pulumi.OutputState }

func (JobStatusErrorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobStatusError)(nil)).Elem()
}

func (o JobStatusErrorArrayOutput) ToJobStatusErrorArrayOutput() JobStatusErrorArrayOutput {
	return o
}

func (o JobStatusErrorArrayOutput) ToJobStatusErrorArrayOutputWithContext(ctx context.Context) JobStatusErrorArrayOutput {
	return o
}

func (o JobStatusErrorArrayOutput) Index(i pulumi.IntInput) JobStatusErrorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobStatusError {
		return vs[0].([]JobStatusError)[vs[1].(int)]
	}).(JobStatusErrorOutput)
}

type JobStatusErrorResult struct {
	// The geographic location of the job. The default value is US.
	Location *string `pulumi:"location"`
	// A human-readable description of the error.
	Message *string `pulumi:"message"`
	// A short error code that summarizes the error.
	Reason *string `pulumi:"reason"`
}

// JobStatusErrorResultInput is an input type that accepts JobStatusErrorResultArgs and JobStatusErrorResultOutput values.
// You can construct a concrete instance of `JobStatusErrorResultInput` via:
//
//	JobStatusErrorResultArgs{...}
type JobStatusErrorResultInput interface {
	pulumi.Input

	ToJobStatusErrorResultOutput() JobStatusErrorResultOutput
	ToJobStatusErrorResultOutputWithContext(context.Context) JobStatusErrorResultOutput
}

type JobStatusErrorResultArgs struct {
	// The geographic location of the job. The default value is US.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// A human-readable description of the error.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// A short error code that summarizes the error.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (JobStatusErrorResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatusErrorResult)(nil)).Elem()
}

func (i JobStatusErrorResultArgs) ToJobStatusErrorResultOutput() JobStatusErrorResultOutput {
	return i.ToJobStatusErrorResultOutputWithContext(context.Background())
}

func (i JobStatusErrorResultArgs) ToJobStatusErrorResultOutputWithContext(ctx context.Context) JobStatusErrorResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusErrorResultOutput)
}

// JobStatusErrorResultArrayInput is an input type that accepts JobStatusErrorResultArray and JobStatusErrorResultArrayOutput values.
// You can construct a concrete instance of `JobStatusErrorResultArrayInput` via:
//
//	JobStatusErrorResultArray{ JobStatusErrorResultArgs{...} }
type JobStatusErrorResultArrayInput interface {
	pulumi.Input

	ToJobStatusErrorResultArrayOutput() JobStatusErrorResultArrayOutput
	ToJobStatusErrorResultArrayOutputWithContext(context.Context) JobStatusErrorResultArrayOutput
}

type JobStatusErrorResultArray []JobStatusErrorResultInput

func (JobStatusErrorResultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobStatusErrorResult)(nil)).Elem()
}

func (i JobStatusErrorResultArray) ToJobStatusErrorResultArrayOutput() JobStatusErrorResultArrayOutput {
	return i.ToJobStatusErrorResultArrayOutputWithContext(context.Background())
}

func (i JobStatusErrorResultArray) ToJobStatusErrorResultArrayOutputWithContext(ctx context.Context) JobStatusErrorResultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusErrorResultArrayOutput)
}

type JobStatusErrorResultOutput struct{ *pulumi.OutputState }

func (JobStatusErrorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatusErrorResult)(nil)).Elem()
}

func (o JobStatusErrorResultOutput) ToJobStatusErrorResultOutput() JobStatusErrorResultOutput {
	return o
}

func (o JobStatusErrorResultOutput) ToJobStatusErrorResultOutputWithContext(ctx context.Context) JobStatusErrorResultOutput {
	return o
}

// The geographic location of the job. The default value is US.
func (o JobStatusErrorResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatusErrorResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// A human-readable description of the error.
func (o JobStatusErrorResultOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatusErrorResult) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// A short error code that summarizes the error.
func (o JobStatusErrorResultOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatusErrorResult) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type JobStatusErrorResultArrayOutput struct{ *pulumi.OutputState }

func (JobStatusErrorResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobStatusErrorResult)(nil)).Elem()
}

func (o JobStatusErrorResultArrayOutput) ToJobStatusErrorResultArrayOutput() JobStatusErrorResultArrayOutput {
	return o
}

func (o JobStatusErrorResultArrayOutput) ToJobStatusErrorResultArrayOutputWithContext(ctx context.Context) JobStatusErrorResultArrayOutput {
	return o
}

func (o JobStatusErrorResultArrayOutput) Index(i pulumi.IntInput) JobStatusErrorResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobStatusErrorResult {
		return vs[0].([]JobStatusErrorResult)[vs[1].(int)]
	}).(JobStatusErrorResultOutput)
}

type RoutineArgument struct {
	// Defaults to FIXED_TYPE.
	// Default value is `FIXED_TYPE`.
	// Possible values are `FIXED_TYPE` and `ANY_TYPE`.
	ArgumentKind *string `pulumi:"argumentKind"`
	// A JSON schema for the data type. Required unless argumentKind = ANY_TYPE.
	// ~>**NOTE**: Because this field expects a JSON string, any changes to the string
	// will create a diff, even if the JSON itself hasn't changed. If the API returns
	// a different value for the same schema, e.g. it switched the order of values
	// or replaced STRUCT field type with RECORD field type, we currently cannot
	// suppress the recurring diff this causes. As a workaround, we recommend using
	// the schema as returned by the API.
	DataType *string `pulumi:"dataType"`
	// Specifies whether the argument is input or output. Can be set for procedures only.
	// Possible values are `IN`, `OUT`, and `INOUT`.
	Mode *string `pulumi:"mode"`
	// The name of this argument. Can be absent for function return argument.
	Name *string `pulumi:"name"`
}

// RoutineArgumentInput is an input type that accepts RoutineArgumentArgs and RoutineArgumentOutput values.
// You can construct a concrete instance of `RoutineArgumentInput` via:
//
//	RoutineArgumentArgs{...}
type RoutineArgumentInput interface {
	pulumi.Input

	ToRoutineArgumentOutput() RoutineArgumentOutput
	ToRoutineArgumentOutputWithContext(context.Context) RoutineArgumentOutput
}

type RoutineArgumentArgs struct {
	// Defaults to FIXED_TYPE.
	// Default value is `FIXED_TYPE`.
	// Possible values are `FIXED_TYPE` and `ANY_TYPE`.
	ArgumentKind pulumi.StringPtrInput `pulumi:"argumentKind"`
	// A JSON schema for the data type. Required unless argumentKind = ANY_TYPE.
	// ~>**NOTE**: Because this field expects a JSON string, any changes to the string
	// will create a diff, even if the JSON itself hasn't changed. If the API returns
	// a different value for the same schema, e.g. it switched the order of values
	// or replaced STRUCT field type with RECORD field type, we currently cannot
	// suppress the recurring diff this causes. As a workaround, we recommend using
	// the schema as returned by the API.
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// Specifies whether the argument is input or output. Can be set for procedures only.
	// Possible values are `IN`, `OUT`, and `INOUT`.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The name of this argument. Can be absent for function return argument.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RoutineArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineArgument)(nil)).Elem()
}

func (i RoutineArgumentArgs) ToRoutineArgumentOutput() RoutineArgumentOutput {
	return i.ToRoutineArgumentOutputWithContext(context.Background())
}

func (i RoutineArgumentArgs) ToRoutineArgumentOutputWithContext(ctx context.Context) RoutineArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineArgumentOutput)
}

// RoutineArgumentArrayInput is an input type that accepts RoutineArgumentArray and RoutineArgumentArrayOutput values.
// You can construct a concrete instance of `RoutineArgumentArrayInput` via:
//
//	RoutineArgumentArray{ RoutineArgumentArgs{...} }
type RoutineArgumentArrayInput interface {
	pulumi.Input

	ToRoutineArgumentArrayOutput() RoutineArgumentArrayOutput
	ToRoutineArgumentArrayOutputWithContext(context.Context) RoutineArgumentArrayOutput
}

type RoutineArgumentArray []RoutineArgumentInput

func (RoutineArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutineArgument)(nil)).Elem()
}

func (i RoutineArgumentArray) ToRoutineArgumentArrayOutput() RoutineArgumentArrayOutput {
	return i.ToRoutineArgumentArrayOutputWithContext(context.Background())
}

func (i RoutineArgumentArray) ToRoutineArgumentArrayOutputWithContext(ctx context.Context) RoutineArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineArgumentArrayOutput)
}

type RoutineArgumentOutput struct{ *pulumi.OutputState }

func (RoutineArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineArgument)(nil)).Elem()
}

func (o RoutineArgumentOutput) ToRoutineArgumentOutput() RoutineArgumentOutput {
	return o
}

func (o RoutineArgumentOutput) ToRoutineArgumentOutputWithContext(ctx context.Context) RoutineArgumentOutput {
	return o
}

// Defaults to FIXED_TYPE.
// Default value is `FIXED_TYPE`.
// Possible values are `FIXED_TYPE` and `ANY_TYPE`.
func (o RoutineArgumentOutput) ArgumentKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutineArgument) *string { return v.ArgumentKind }).(pulumi.StringPtrOutput)
}

// A JSON schema for the data type. Required unless argumentKind = ANY_TYPE.
// ~>**NOTE**: Because this field expects a JSON string, any changes to the string
// will create a diff, even if the JSON itself hasn't changed. If the API returns
// a different value for the same schema, e.g. it switched the order of values
// or replaced STRUCT field type with RECORD field type, we currently cannot
// suppress the recurring diff this causes. As a workaround, we recommend using
// the schema as returned by the API.
func (o RoutineArgumentOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutineArgument) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Specifies whether the argument is input or output. Can be set for procedures only.
// Possible values are `IN`, `OUT`, and `INOUT`.
func (o RoutineArgumentOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutineArgument) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The name of this argument. Can be absent for function return argument.
func (o RoutineArgumentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutineArgument) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RoutineArgumentArrayOutput struct{ *pulumi.OutputState }

func (RoutineArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutineArgument)(nil)).Elem()
}

func (o RoutineArgumentArrayOutput) ToRoutineArgumentArrayOutput() RoutineArgumentArrayOutput {
	return o
}

func (o RoutineArgumentArrayOutput) ToRoutineArgumentArrayOutputWithContext(ctx context.Context) RoutineArgumentArrayOutput {
	return o
}

func (o RoutineArgumentArrayOutput) Index(i pulumi.IntInput) RoutineArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoutineArgument {
		return vs[0].([]RoutineArgument)[vs[1].(int)]
	}).(RoutineArgumentOutput)
}

type TableEncryptionConfiguration struct {
	// The self link or full name of a key which should be used to
	// encrypt this table.  Note that the default bigquery service account will need to have
	// encrypt/decrypt permissions on this key - you may want to see the
	// `bigquery.getDefaultServiceAccount` datasource and the
	// `kms.CryptoKeyIAMBinding` resource.
	KmsKeyName string `pulumi:"kmsKeyName"`
	// The self link or full name of the kms key version used to encrypt this table.
	KmsKeyVersion *string `pulumi:"kmsKeyVersion"`
}

// TableEncryptionConfigurationInput is an input type that accepts TableEncryptionConfigurationArgs and TableEncryptionConfigurationOutput values.
// You can construct a concrete instance of `TableEncryptionConfigurationInput` via:
//
//	TableEncryptionConfigurationArgs{...}
type TableEncryptionConfigurationInput interface {
	pulumi.Input

	ToTableEncryptionConfigurationOutput() TableEncryptionConfigurationOutput
	ToTableEncryptionConfigurationOutputWithContext(context.Context) TableEncryptionConfigurationOutput
}

type TableEncryptionConfigurationArgs struct {
	// The self link or full name of a key which should be used to
	// encrypt this table.  Note that the default bigquery service account will need to have
	// encrypt/decrypt permissions on this key - you may want to see the
	// `bigquery.getDefaultServiceAccount` datasource and the
	// `kms.CryptoKeyIAMBinding` resource.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
	// The self link or full name of the kms key version used to encrypt this table.
	KmsKeyVersion pulumi.StringPtrInput `pulumi:"kmsKeyVersion"`
}

func (TableEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableEncryptionConfiguration)(nil)).Elem()
}

func (i TableEncryptionConfigurationArgs) ToTableEncryptionConfigurationOutput() TableEncryptionConfigurationOutput {
	return i.ToTableEncryptionConfigurationOutputWithContext(context.Background())
}

func (i TableEncryptionConfigurationArgs) ToTableEncryptionConfigurationOutputWithContext(ctx context.Context) TableEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionConfigurationOutput)
}

func (i TableEncryptionConfigurationArgs) ToTableEncryptionConfigurationPtrOutput() TableEncryptionConfigurationPtrOutput {
	return i.ToTableEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i TableEncryptionConfigurationArgs) ToTableEncryptionConfigurationPtrOutputWithContext(ctx context.Context) TableEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionConfigurationOutput).ToTableEncryptionConfigurationPtrOutputWithContext(ctx)
}

// TableEncryptionConfigurationPtrInput is an input type that accepts TableEncryptionConfigurationArgs, TableEncryptionConfigurationPtr and TableEncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `TableEncryptionConfigurationPtrInput` via:
//
//	        TableEncryptionConfigurationArgs{...}
//
//	or:
//
//	        nil
type TableEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToTableEncryptionConfigurationPtrOutput() TableEncryptionConfigurationPtrOutput
	ToTableEncryptionConfigurationPtrOutputWithContext(context.Context) TableEncryptionConfigurationPtrOutput
}

type tableEncryptionConfigurationPtrType TableEncryptionConfigurationArgs

func TableEncryptionConfigurationPtr(v *TableEncryptionConfigurationArgs) TableEncryptionConfigurationPtrInput {
	return (*tableEncryptionConfigurationPtrType)(v)
}

func (*tableEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableEncryptionConfiguration)(nil)).Elem()
}

func (i *tableEncryptionConfigurationPtrType) ToTableEncryptionConfigurationPtrOutput() TableEncryptionConfigurationPtrOutput {
	return i.ToTableEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *tableEncryptionConfigurationPtrType) ToTableEncryptionConfigurationPtrOutputWithContext(ctx context.Context) TableEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionConfigurationPtrOutput)
}

type TableEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (TableEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableEncryptionConfiguration)(nil)).Elem()
}

func (o TableEncryptionConfigurationOutput) ToTableEncryptionConfigurationOutput() TableEncryptionConfigurationOutput {
	return o
}

func (o TableEncryptionConfigurationOutput) ToTableEncryptionConfigurationOutputWithContext(ctx context.Context) TableEncryptionConfigurationOutput {
	return o
}

func (o TableEncryptionConfigurationOutput) ToTableEncryptionConfigurationPtrOutput() TableEncryptionConfigurationPtrOutput {
	return o.ToTableEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o TableEncryptionConfigurationOutput) ToTableEncryptionConfigurationPtrOutputWithContext(ctx context.Context) TableEncryptionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableEncryptionConfiguration) *TableEncryptionConfiguration {
		return &v
	}).(TableEncryptionConfigurationPtrOutput)
}

// The self link or full name of a key which should be used to
// encrypt this table.  Note that the default bigquery service account will need to have
// encrypt/decrypt permissions on this key - you may want to see the
// `bigquery.getDefaultServiceAccount` datasource and the
// `kms.CryptoKeyIAMBinding` resource.
func (o TableEncryptionConfigurationOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v TableEncryptionConfiguration) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// The self link or full name of the kms key version used to encrypt this table.
func (o TableEncryptionConfigurationOutput) KmsKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableEncryptionConfiguration) *string { return v.KmsKeyVersion }).(pulumi.StringPtrOutput)
}

type TableEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TableEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableEncryptionConfiguration)(nil)).Elem()
}

func (o TableEncryptionConfigurationPtrOutput) ToTableEncryptionConfigurationPtrOutput() TableEncryptionConfigurationPtrOutput {
	return o
}

func (o TableEncryptionConfigurationPtrOutput) ToTableEncryptionConfigurationPtrOutputWithContext(ctx context.Context) TableEncryptionConfigurationPtrOutput {
	return o
}

func (o TableEncryptionConfigurationPtrOutput) Elem() TableEncryptionConfigurationOutput {
	return o.ApplyT(func(v *TableEncryptionConfiguration) TableEncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret TableEncryptionConfiguration
		return ret
	}).(TableEncryptionConfigurationOutput)
}

// The self link or full name of a key which should be used to
// encrypt this table.  Note that the default bigquery service account will need to have
// encrypt/decrypt permissions on this key - you may want to see the
// `bigquery.getDefaultServiceAccount` datasource and the
// `kms.CryptoKeyIAMBinding` resource.
func (o TableEncryptionConfigurationPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// The self link or full name of the kms key version used to encrypt this table.
func (o TableEncryptionConfigurationPtrOutput) KmsKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyVersion
	}).(pulumi.StringPtrOutput)
}

type TableExternalDataConfiguration struct {
	// Let BigQuery try to autodetect the schema
	// and format of the table.
	Autodetect bool `pulumi:"autodetect"`
	// Additional options if `sourceFormat` is set to\
	// "AVRO".  Structure is documented below.
	AvroOptions *TableExternalDataConfigurationAvroOptions `pulumi:"avroOptions"`
	// The compression type of the data source.
	// Valid values are "NONE" or "GZIP".
	Compression *string `pulumi:"compression"`
	// The connection specifying the credentials to be used to read
	// external storage, such as Azure Blob, Cloud Storage, or S3. The `connectionId` can have
	// the form `{{project}}.{{location}}.{{connection_id}}`
	// or `projects/{{project}}/locations/{{location}}/connections/{{connection_id}}`.
	ConnectionId *string `pulumi:"connectionId"`
	// Additional properties to set if
	// `sourceFormat` is set to "CSV". Structure is documented below.
	CsvOptions *TableExternalDataConfigurationCsvOptions `pulumi:"csvOptions"`
	// Additional options if
	// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
	// documented below.
	GoogleSheetsOptions *TableExternalDataConfigurationGoogleSheetsOptions `pulumi:"googleSheetsOptions"`
	// When set, configures hive partitioning
	// support. Not all storage formats support hive partitioning -- requesting hive
	// partitioning on an unsupported format will lead to an error, as will providing
	// an invalid specification. Structure is documented below.
	HivePartitioningOptions *TableExternalDataConfigurationHivePartitioningOptions `pulumi:"hivePartitioningOptions"`
	// Indicates if BigQuery should
	// allow extra values that are not represented in the table schema.
	// If true, the extra values are ignored. If false, records with
	// extra columns are treated as bad records, and if there are too
	// many bad records, an invalid error is returned in the job result.
	// The default value is false.
	IgnoreUnknownValues *bool `pulumi:"ignoreUnknownValues"`
	// The maximum number of bad records that
	// BigQuery can ignore when reading data.
	MaxBadRecords *int `pulumi:"maxBadRecords"`
	// When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.
	ReferenceFileSchemaUri *string `pulumi:"referenceFileSchemaUri"`
	// A JSON schema for the external table. Schema is required
	// for CSV and JSON formats if autodetect is not on. Schema is disallowed
	// for Google Cloud Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
	// ~>**NOTE:** Because this field expects a JSON string, any changes to the
	// string will create a diff, even if the JSON itself hasn't changed.
	// Furthermore drift for this field cannot not be detected because BigQuery
	// only uses this schema to compute the effective schema for the table, therefore
	// any changes on the configured value will force the table to be recreated.
	// This schema is effectively only applied when creating a table from an external
	// datasource, after creation the computed schema will be stored in
	// `google_bigquery_table.schema`
	Schema *string `pulumi:"schema"`
	// The data format. Supported values are:
	// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET", "ORC",
	// "DATSTORE_BACKUP", and "BIGTABLE". To use "GOOGLE_SHEETS"
	// the `scopes` must include
	// "https://www.googleapis.com/auth/drive.readonly".
	SourceFormat string `pulumi:"sourceFormat"`
	// A list of the fully-qualified URIs that point to
	// your data in Google Cloud.
	SourceUris []string `pulumi:"sourceUris"`
}

// TableExternalDataConfigurationInput is an input type that accepts TableExternalDataConfigurationArgs and TableExternalDataConfigurationOutput values.
// You can construct a concrete instance of `TableExternalDataConfigurationInput` via:
//
//	TableExternalDataConfigurationArgs{...}
type TableExternalDataConfigurationInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationOutput() TableExternalDataConfigurationOutput
	ToTableExternalDataConfigurationOutputWithContext(context.Context) TableExternalDataConfigurationOutput
}

type TableExternalDataConfigurationArgs struct {
	// Let BigQuery try to autodetect the schema
	// and format of the table.
	Autodetect pulumi.BoolInput `pulumi:"autodetect"`
	// Additional options if `sourceFormat` is set to\
	// "AVRO".  Structure is documented below.
	AvroOptions TableExternalDataConfigurationAvroOptionsPtrInput `pulumi:"avroOptions"`
	// The compression type of the data source.
	// Valid values are "NONE" or "GZIP".
	Compression pulumi.StringPtrInput `pulumi:"compression"`
	// The connection specifying the credentials to be used to read
	// external storage, such as Azure Blob, Cloud Storage, or S3. The `connectionId` can have
	// the form `{{project}}.{{location}}.{{connection_id}}`
	// or `projects/{{project}}/locations/{{location}}/connections/{{connection_id}}`.
	ConnectionId pulumi.StringPtrInput `pulumi:"connectionId"`
	// Additional properties to set if
	// `sourceFormat` is set to "CSV". Structure is documented below.
	CsvOptions TableExternalDataConfigurationCsvOptionsPtrInput `pulumi:"csvOptions"`
	// Additional options if
	// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
	// documented below.
	GoogleSheetsOptions TableExternalDataConfigurationGoogleSheetsOptionsPtrInput `pulumi:"googleSheetsOptions"`
	// When set, configures hive partitioning
	// support. Not all storage formats support hive partitioning -- requesting hive
	// partitioning on an unsupported format will lead to an error, as will providing
	// an invalid specification. Structure is documented below.
	HivePartitioningOptions TableExternalDataConfigurationHivePartitioningOptionsPtrInput `pulumi:"hivePartitioningOptions"`
	// Indicates if BigQuery should
	// allow extra values that are not represented in the table schema.
	// If true, the extra values are ignored. If false, records with
	// extra columns are treated as bad records, and if there are too
	// many bad records, an invalid error is returned in the job result.
	// The default value is false.
	IgnoreUnknownValues pulumi.BoolPtrInput `pulumi:"ignoreUnknownValues"`
	// The maximum number of bad records that
	// BigQuery can ignore when reading data.
	MaxBadRecords pulumi.IntPtrInput `pulumi:"maxBadRecords"`
	// When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.
	ReferenceFileSchemaUri pulumi.StringPtrInput `pulumi:"referenceFileSchemaUri"`
	// A JSON schema for the external table. Schema is required
	// for CSV and JSON formats if autodetect is not on. Schema is disallowed
	// for Google Cloud Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
	// ~>**NOTE:** Because this field expects a JSON string, any changes to the
	// string will create a diff, even if the JSON itself hasn't changed.
	// Furthermore drift for this field cannot not be detected because BigQuery
	// only uses this schema to compute the effective schema for the table, therefore
	// any changes on the configured value will force the table to be recreated.
	// This schema is effectively only applied when creating a table from an external
	// datasource, after creation the computed schema will be stored in
	// `google_bigquery_table.schema`
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// The data format. Supported values are:
	// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET", "ORC",
	// "DATSTORE_BACKUP", and "BIGTABLE". To use "GOOGLE_SHEETS"
	// the `scopes` must include
	// "https://www.googleapis.com/auth/drive.readonly".
	SourceFormat pulumi.StringInput `pulumi:"sourceFormat"`
	// A list of the fully-qualified URIs that point to
	// your data in Google Cloud.
	SourceUris pulumi.StringArrayInput `pulumi:"sourceUris"`
}

func (TableExternalDataConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfiguration)(nil)).Elem()
}

func (i TableExternalDataConfigurationArgs) ToTableExternalDataConfigurationOutput() TableExternalDataConfigurationOutput {
	return i.ToTableExternalDataConfigurationOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationArgs) ToTableExternalDataConfigurationOutputWithContext(ctx context.Context) TableExternalDataConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationOutput)
}

func (i TableExternalDataConfigurationArgs) ToTableExternalDataConfigurationPtrOutput() TableExternalDataConfigurationPtrOutput {
	return i.ToTableExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationArgs) ToTableExternalDataConfigurationPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationOutput).ToTableExternalDataConfigurationPtrOutputWithContext(ctx)
}

// TableExternalDataConfigurationPtrInput is an input type that accepts TableExternalDataConfigurationArgs, TableExternalDataConfigurationPtr and TableExternalDataConfigurationPtrOutput values.
// You can construct a concrete instance of `TableExternalDataConfigurationPtrInput` via:
//
//	        TableExternalDataConfigurationArgs{...}
//
//	or:
//
//	        nil
type TableExternalDataConfigurationPtrInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationPtrOutput() TableExternalDataConfigurationPtrOutput
	ToTableExternalDataConfigurationPtrOutputWithContext(context.Context) TableExternalDataConfigurationPtrOutput
}

type tableExternalDataConfigurationPtrType TableExternalDataConfigurationArgs

func TableExternalDataConfigurationPtr(v *TableExternalDataConfigurationArgs) TableExternalDataConfigurationPtrInput {
	return (*tableExternalDataConfigurationPtrType)(v)
}

func (*tableExternalDataConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfiguration)(nil)).Elem()
}

func (i *tableExternalDataConfigurationPtrType) ToTableExternalDataConfigurationPtrOutput() TableExternalDataConfigurationPtrOutput {
	return i.ToTableExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (i *tableExternalDataConfigurationPtrType) ToTableExternalDataConfigurationPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationPtrOutput)
}

type TableExternalDataConfigurationOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfiguration)(nil)).Elem()
}

func (o TableExternalDataConfigurationOutput) ToTableExternalDataConfigurationOutput() TableExternalDataConfigurationOutput {
	return o
}

func (o TableExternalDataConfigurationOutput) ToTableExternalDataConfigurationOutputWithContext(ctx context.Context) TableExternalDataConfigurationOutput {
	return o
}

func (o TableExternalDataConfigurationOutput) ToTableExternalDataConfigurationPtrOutput() TableExternalDataConfigurationPtrOutput {
	return o.ToTableExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (o TableExternalDataConfigurationOutput) ToTableExternalDataConfigurationPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableExternalDataConfiguration) *TableExternalDataConfiguration {
		return &v
	}).(TableExternalDataConfigurationPtrOutput)
}

// Let BigQuery try to autodetect the schema
// and format of the table.
func (o TableExternalDataConfigurationOutput) Autodetect() pulumi.BoolOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) bool { return v.Autodetect }).(pulumi.BoolOutput)
}

// Additional options if `sourceFormat` is set to\
// "AVRO".  Structure is documented below.
func (o TableExternalDataConfigurationOutput) AvroOptions() TableExternalDataConfigurationAvroOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *TableExternalDataConfigurationAvroOptions {
		return v.AvroOptions
	}).(TableExternalDataConfigurationAvroOptionsPtrOutput)
}

// The compression type of the data source.
// Valid values are "NONE" or "GZIP".
func (o TableExternalDataConfigurationOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *string { return v.Compression }).(pulumi.StringPtrOutput)
}

// The connection specifying the credentials to be used to read
// external storage, such as Azure Blob, Cloud Storage, or S3. The `connectionId` can have
// the form `{{project}}.{{location}}.{{connection_id}}`
// or `projects/{{project}}/locations/{{location}}/connections/{{connection_id}}`.
func (o TableExternalDataConfigurationOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *string { return v.ConnectionId }).(pulumi.StringPtrOutput)
}

// Additional properties to set if
// `sourceFormat` is set to "CSV". Structure is documented below.
func (o TableExternalDataConfigurationOutput) CsvOptions() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *TableExternalDataConfigurationCsvOptions { return v.CsvOptions }).(TableExternalDataConfigurationCsvOptionsPtrOutput)
}

// Additional options if
// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
// documented below.
func (o TableExternalDataConfigurationOutput) GoogleSheetsOptions() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *TableExternalDataConfigurationGoogleSheetsOptions {
		return v.GoogleSheetsOptions
	}).(TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput)
}

// When set, configures hive partitioning
// support. Not all storage formats support hive partitioning -- requesting hive
// partitioning on an unsupported format will lead to an error, as will providing
// an invalid specification. Structure is documented below.
func (o TableExternalDataConfigurationOutput) HivePartitioningOptions() TableExternalDataConfigurationHivePartitioningOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *TableExternalDataConfigurationHivePartitioningOptions {
		return v.HivePartitioningOptions
	}).(TableExternalDataConfigurationHivePartitioningOptionsPtrOutput)
}

// Indicates if BigQuery should
// allow extra values that are not represented in the table schema.
// If true, the extra values are ignored. If false, records with
// extra columns are treated as bad records, and if there are too
// many bad records, an invalid error is returned in the job result.
// The default value is false.
func (o TableExternalDataConfigurationOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *bool { return v.IgnoreUnknownValues }).(pulumi.BoolPtrOutput)
}

// The maximum number of bad records that
// BigQuery can ignore when reading data.
func (o TableExternalDataConfigurationOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *int { return v.MaxBadRecords }).(pulumi.IntPtrOutput)
}

// When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.
func (o TableExternalDataConfigurationOutput) ReferenceFileSchemaUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *string { return v.ReferenceFileSchemaUri }).(pulumi.StringPtrOutput)
}

// A JSON schema for the external table. Schema is required
// for CSV and JSON formats if autodetect is not on. Schema is disallowed
// for Google Cloud Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
// ~>**NOTE:** Because this field expects a JSON string, any changes to the
// string will create a diff, even if the JSON itself hasn't changed.
// Furthermore drift for this field cannot not be detected because BigQuery
// only uses this schema to compute the effective schema for the table, therefore
// any changes on the configured value will force the table to be recreated.
// This schema is effectively only applied when creating a table from an external
// datasource, after creation the computed schema will be stored in
// `google_bigquery_table.schema`
func (o TableExternalDataConfigurationOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// The data format. Supported values are:
// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET", "ORC",
// "DATSTORE_BACKUP", and "BIGTABLE". To use "GOOGLE_SHEETS"
// the `scopes` must include
// "https://www.googleapis.com/auth/drive.readonly".
func (o TableExternalDataConfigurationOutput) SourceFormat() pulumi.StringOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) string { return v.SourceFormat }).(pulumi.StringOutput)
}

// A list of the fully-qualified URIs that point to
// your data in Google Cloud.
func (o TableExternalDataConfigurationOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

type TableExternalDataConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfiguration)(nil)).Elem()
}

func (o TableExternalDataConfigurationPtrOutput) ToTableExternalDataConfigurationPtrOutput() TableExternalDataConfigurationPtrOutput {
	return o
}

func (o TableExternalDataConfigurationPtrOutput) ToTableExternalDataConfigurationPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationPtrOutput {
	return o
}

func (o TableExternalDataConfigurationPtrOutput) Elem() TableExternalDataConfigurationOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) TableExternalDataConfiguration {
		if v != nil {
			return *v
		}
		var ret TableExternalDataConfiguration
		return ret
	}).(TableExternalDataConfigurationOutput)
}

// Let BigQuery try to autodetect the schema
// and format of the table.
func (o TableExternalDataConfigurationPtrOutput) Autodetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.Autodetect
	}).(pulumi.BoolPtrOutput)
}

// Additional options if `sourceFormat` is set to\
// "AVRO".  Structure is documented below.
func (o TableExternalDataConfigurationPtrOutput) AvroOptions() TableExternalDataConfigurationAvroOptionsPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *TableExternalDataConfigurationAvroOptions {
		if v == nil {
			return nil
		}
		return v.AvroOptions
	}).(TableExternalDataConfigurationAvroOptionsPtrOutput)
}

// The compression type of the data source.
// Valid values are "NONE" or "GZIP".
func (o TableExternalDataConfigurationPtrOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(pulumi.StringPtrOutput)
}

// The connection specifying the credentials to be used to read
// external storage, such as Azure Blob, Cloud Storage, or S3. The `connectionId` can have
// the form `{{project}}.{{location}}.{{connection_id}}`
// or `projects/{{project}}/locations/{{location}}/connections/{{connection_id}}`.
func (o TableExternalDataConfigurationPtrOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionId
	}).(pulumi.StringPtrOutput)
}

// Additional properties to set if
// `sourceFormat` is set to "CSV". Structure is documented below.
func (o TableExternalDataConfigurationPtrOutput) CsvOptions() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *TableExternalDataConfigurationCsvOptions {
		if v == nil {
			return nil
		}
		return v.CsvOptions
	}).(TableExternalDataConfigurationCsvOptionsPtrOutput)
}

// Additional options if
// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
// documented below.
func (o TableExternalDataConfigurationPtrOutput) GoogleSheetsOptions() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *TableExternalDataConfigurationGoogleSheetsOptions {
		if v == nil {
			return nil
		}
		return v.GoogleSheetsOptions
	}).(TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput)
}

// When set, configures hive partitioning
// support. Not all storage formats support hive partitioning -- requesting hive
// partitioning on an unsupported format will lead to an error, as will providing
// an invalid specification. Structure is documented below.
func (o TableExternalDataConfigurationPtrOutput) HivePartitioningOptions() TableExternalDataConfigurationHivePartitioningOptionsPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *TableExternalDataConfigurationHivePartitioningOptions {
		if v == nil {
			return nil
		}
		return v.HivePartitioningOptions
	}).(TableExternalDataConfigurationHivePartitioningOptionsPtrOutput)
}

// Indicates if BigQuery should
// allow extra values that are not represented in the table schema.
// If true, the extra values are ignored. If false, records with
// extra columns are treated as bad records, and if there are too
// many bad records, an invalid error is returned in the job result.
// The default value is false.
func (o TableExternalDataConfigurationPtrOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreUnknownValues
	}).(pulumi.BoolPtrOutput)
}

// The maximum number of bad records that
// BigQuery can ignore when reading data.
func (o TableExternalDataConfigurationPtrOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxBadRecords
	}).(pulumi.IntPtrOutput)
}

// When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.
func (o TableExternalDataConfigurationPtrOutput) ReferenceFileSchemaUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ReferenceFileSchemaUri
	}).(pulumi.StringPtrOutput)
}

// A JSON schema for the external table. Schema is required
// for CSV and JSON formats if autodetect is not on. Schema is disallowed
// for Google Cloud Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
// ~>**NOTE:** Because this field expects a JSON string, any changes to the
// string will create a diff, even if the JSON itself hasn't changed.
// Furthermore drift for this field cannot not be detected because BigQuery
// only uses this schema to compute the effective schema for the table, therefore
// any changes on the configured value will force the table to be recreated.
// This schema is effectively only applied when creating a table from an external
// datasource, after creation the computed schema will be stored in
// `google_bigquery_table.schema`
func (o TableExternalDataConfigurationPtrOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(pulumi.StringPtrOutput)
}

// The data format. Supported values are:
// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET", "ORC",
// "DATSTORE_BACKUP", and "BIGTABLE". To use "GOOGLE_SHEETS"
// the `scopes` must include
// "https://www.googleapis.com/auth/drive.readonly".
func (o TableExternalDataConfigurationPtrOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.SourceFormat
	}).(pulumi.StringPtrOutput)
}

// A list of the fully-qualified URIs that point to
// your data in Google Cloud.
func (o TableExternalDataConfigurationPtrOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SourceUris
	}).(pulumi.StringArrayOutput)
}

type TableExternalDataConfigurationAvroOptions struct {
	// If is set to true, indicates whether\
	// to interpret logical types as the corresponding BigQuery data type
	// (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
	UseAvroLogicalTypes bool `pulumi:"useAvroLogicalTypes"`
}

// TableExternalDataConfigurationAvroOptionsInput is an input type that accepts TableExternalDataConfigurationAvroOptionsArgs and TableExternalDataConfigurationAvroOptionsOutput values.
// You can construct a concrete instance of `TableExternalDataConfigurationAvroOptionsInput` via:
//
//	TableExternalDataConfigurationAvroOptionsArgs{...}
type TableExternalDataConfigurationAvroOptionsInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationAvroOptionsOutput() TableExternalDataConfigurationAvroOptionsOutput
	ToTableExternalDataConfigurationAvroOptionsOutputWithContext(context.Context) TableExternalDataConfigurationAvroOptionsOutput
}

type TableExternalDataConfigurationAvroOptionsArgs struct {
	// If is set to true, indicates whether\
	// to interpret logical types as the corresponding BigQuery data type
	// (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
	UseAvroLogicalTypes pulumi.BoolInput `pulumi:"useAvroLogicalTypes"`
}

func (TableExternalDataConfigurationAvroOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationAvroOptions)(nil)).Elem()
}

func (i TableExternalDataConfigurationAvroOptionsArgs) ToTableExternalDataConfigurationAvroOptionsOutput() TableExternalDataConfigurationAvroOptionsOutput {
	return i.ToTableExternalDataConfigurationAvroOptionsOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationAvroOptionsArgs) ToTableExternalDataConfigurationAvroOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationAvroOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationAvroOptionsOutput)
}

func (i TableExternalDataConfigurationAvroOptionsArgs) ToTableExternalDataConfigurationAvroOptionsPtrOutput() TableExternalDataConfigurationAvroOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationAvroOptionsPtrOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationAvroOptionsArgs) ToTableExternalDataConfigurationAvroOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationAvroOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationAvroOptionsOutput).ToTableExternalDataConfigurationAvroOptionsPtrOutputWithContext(ctx)
}

// TableExternalDataConfigurationAvroOptionsPtrInput is an input type that accepts TableExternalDataConfigurationAvroOptionsArgs, TableExternalDataConfigurationAvroOptionsPtr and TableExternalDataConfigurationAvroOptionsPtrOutput values.
// You can construct a concrete instance of `TableExternalDataConfigurationAvroOptionsPtrInput` via:
//
//	        TableExternalDataConfigurationAvroOptionsArgs{...}
//
//	or:
//
//	        nil
type TableExternalDataConfigurationAvroOptionsPtrInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationAvroOptionsPtrOutput() TableExternalDataConfigurationAvroOptionsPtrOutput
	ToTableExternalDataConfigurationAvroOptionsPtrOutputWithContext(context.Context) TableExternalDataConfigurationAvroOptionsPtrOutput
}

type tableExternalDataConfigurationAvroOptionsPtrType TableExternalDataConfigurationAvroOptionsArgs

func TableExternalDataConfigurationAvroOptionsPtr(v *TableExternalDataConfigurationAvroOptionsArgs) TableExternalDataConfigurationAvroOptionsPtrInput {
	return (*tableExternalDataConfigurationAvroOptionsPtrType)(v)
}

func (*tableExternalDataConfigurationAvroOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationAvroOptions)(nil)).Elem()
}

func (i *tableExternalDataConfigurationAvroOptionsPtrType) ToTableExternalDataConfigurationAvroOptionsPtrOutput() TableExternalDataConfigurationAvroOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationAvroOptionsPtrOutputWithContext(context.Background())
}

func (i *tableExternalDataConfigurationAvroOptionsPtrType) ToTableExternalDataConfigurationAvroOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationAvroOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationAvroOptionsPtrOutput)
}

type TableExternalDataConfigurationAvroOptionsOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationAvroOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationAvroOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationAvroOptionsOutput) ToTableExternalDataConfigurationAvroOptionsOutput() TableExternalDataConfigurationAvroOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationAvroOptionsOutput) ToTableExternalDataConfigurationAvroOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationAvroOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationAvroOptionsOutput) ToTableExternalDataConfigurationAvroOptionsPtrOutput() TableExternalDataConfigurationAvroOptionsPtrOutput {
	return o.ToTableExternalDataConfigurationAvroOptionsPtrOutputWithContext(context.Background())
}

func (o TableExternalDataConfigurationAvroOptionsOutput) ToTableExternalDataConfigurationAvroOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationAvroOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableExternalDataConfigurationAvroOptions) *TableExternalDataConfigurationAvroOptions {
		return &v
	}).(TableExternalDataConfigurationAvroOptionsPtrOutput)
}

// If is set to true, indicates whether\
// to interpret logical types as the corresponding BigQuery data type
// (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
func (o TableExternalDataConfigurationAvroOptionsOutput) UseAvroLogicalTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationAvroOptions) bool { return v.UseAvroLogicalTypes }).(pulumi.BoolOutput)
}

type TableExternalDataConfigurationAvroOptionsPtrOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationAvroOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationAvroOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationAvroOptionsPtrOutput) ToTableExternalDataConfigurationAvroOptionsPtrOutput() TableExternalDataConfigurationAvroOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationAvroOptionsPtrOutput) ToTableExternalDataConfigurationAvroOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationAvroOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationAvroOptionsPtrOutput) Elem() TableExternalDataConfigurationAvroOptionsOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationAvroOptions) TableExternalDataConfigurationAvroOptions {
		if v != nil {
			return *v
		}
		var ret TableExternalDataConfigurationAvroOptions
		return ret
	}).(TableExternalDataConfigurationAvroOptionsOutput)
}

// If is set to true, indicates whether\
// to interpret logical types as the corresponding BigQuery data type
// (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
func (o TableExternalDataConfigurationAvroOptionsPtrOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationAvroOptions) *bool {
		if v == nil {
			return nil
		}
		return &v.UseAvroLogicalTypes
	}).(pulumi.BoolPtrOutput)
}

type TableExternalDataConfigurationCsvOptions struct {
	// Indicates if BigQuery should accept rows
	// that are missing trailing optional columns.
	AllowJaggedRows *bool `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow
	// quoted data sections that contain newline characters in a CSV file.
	// The default value is false.
	AllowQuotedNewlines *bool `pulumi:"allowQuotedNewlines"`
	// The character encoding of the data. The supported
	// values are UTF-8 or ISO-8859-1.
	Encoding *string `pulumi:"encoding"`
	// The separator for fields in a CSV file.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	Quote          string  `pulumi:"quote"`
	// The number of rows at the top of a CSV
	// file that BigQuery will skip when reading the data.
	SkipLeadingRows *int `pulumi:"skipLeadingRows"`
}

// TableExternalDataConfigurationCsvOptionsInput is an input type that accepts TableExternalDataConfigurationCsvOptionsArgs and TableExternalDataConfigurationCsvOptionsOutput values.
// You can construct a concrete instance of `TableExternalDataConfigurationCsvOptionsInput` via:
//
//	TableExternalDataConfigurationCsvOptionsArgs{...}
type TableExternalDataConfigurationCsvOptionsInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationCsvOptionsOutput() TableExternalDataConfigurationCsvOptionsOutput
	ToTableExternalDataConfigurationCsvOptionsOutputWithContext(context.Context) TableExternalDataConfigurationCsvOptionsOutput
}

type TableExternalDataConfigurationCsvOptionsArgs struct {
	// Indicates if BigQuery should accept rows
	// that are missing trailing optional columns.
	AllowJaggedRows pulumi.BoolPtrInput `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow
	// quoted data sections that contain newline characters in a CSV file.
	// The default value is false.
	AllowQuotedNewlines pulumi.BoolPtrInput `pulumi:"allowQuotedNewlines"`
	// The character encoding of the data. The supported
	// values are UTF-8 or ISO-8859-1.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The separator for fields in a CSV file.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	Quote          pulumi.StringInput    `pulumi:"quote"`
	// The number of rows at the top of a CSV
	// file that BigQuery will skip when reading the data.
	SkipLeadingRows pulumi.IntPtrInput `pulumi:"skipLeadingRows"`
}

func (TableExternalDataConfigurationCsvOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationCsvOptions)(nil)).Elem()
}

func (i TableExternalDataConfigurationCsvOptionsArgs) ToTableExternalDataConfigurationCsvOptionsOutput() TableExternalDataConfigurationCsvOptionsOutput {
	return i.ToTableExternalDataConfigurationCsvOptionsOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationCsvOptionsArgs) ToTableExternalDataConfigurationCsvOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationCsvOptionsOutput)
}

func (i TableExternalDataConfigurationCsvOptionsArgs) ToTableExternalDataConfigurationCsvOptionsPtrOutput() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationCsvOptionsArgs) ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationCsvOptionsOutput).ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(ctx)
}

// TableExternalDataConfigurationCsvOptionsPtrInput is an input type that accepts TableExternalDataConfigurationCsvOptionsArgs, TableExternalDataConfigurationCsvOptionsPtr and TableExternalDataConfigurationCsvOptionsPtrOutput values.
// You can construct a concrete instance of `TableExternalDataConfigurationCsvOptionsPtrInput` via:
//
//	        TableExternalDataConfigurationCsvOptionsArgs{...}
//
//	or:
//
//	        nil
type TableExternalDataConfigurationCsvOptionsPtrInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationCsvOptionsPtrOutput() TableExternalDataConfigurationCsvOptionsPtrOutput
	ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(context.Context) TableExternalDataConfigurationCsvOptionsPtrOutput
}

type tableExternalDataConfigurationCsvOptionsPtrType TableExternalDataConfigurationCsvOptionsArgs

func TableExternalDataConfigurationCsvOptionsPtr(v *TableExternalDataConfigurationCsvOptionsArgs) TableExternalDataConfigurationCsvOptionsPtrInput {
	return (*tableExternalDataConfigurationCsvOptionsPtrType)(v)
}

func (*tableExternalDataConfigurationCsvOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationCsvOptions)(nil)).Elem()
}

func (i *tableExternalDataConfigurationCsvOptionsPtrType) ToTableExternalDataConfigurationCsvOptionsPtrOutput() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(context.Background())
}

func (i *tableExternalDataConfigurationCsvOptionsPtrType) ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationCsvOptionsPtrOutput)
}

type TableExternalDataConfigurationCsvOptionsOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationCsvOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationCsvOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationCsvOptionsOutput) ToTableExternalDataConfigurationCsvOptionsOutput() TableExternalDataConfigurationCsvOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationCsvOptionsOutput) ToTableExternalDataConfigurationCsvOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationCsvOptionsOutput) ToTableExternalDataConfigurationCsvOptionsPtrOutput() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o.ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(context.Background())
}

func (o TableExternalDataConfigurationCsvOptionsOutput) ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableExternalDataConfigurationCsvOptions) *TableExternalDataConfigurationCsvOptions {
		return &v
	}).(TableExternalDataConfigurationCsvOptionsPtrOutput)
}

// Indicates if BigQuery should accept rows
// that are missing trailing optional columns.
func (o TableExternalDataConfigurationCsvOptionsOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *bool { return v.AllowJaggedRows }).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow
// quoted data sections that contain newline characters in a CSV file.
// The default value is false.
func (o TableExternalDataConfigurationCsvOptionsOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *bool { return v.AllowQuotedNewlines }).(pulumi.BoolPtrOutput)
}

// The character encoding of the data. The supported
// values are UTF-8 or ISO-8859-1.
func (o TableExternalDataConfigurationCsvOptionsOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The separator for fields in a CSV file.
func (o TableExternalDataConfigurationCsvOptionsOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

func (o TableExternalDataConfigurationCsvOptionsOutput) Quote() pulumi.StringOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) string { return v.Quote }).(pulumi.StringOutput)
}

// The number of rows at the top of a CSV
// file that BigQuery will skip when reading the data.
func (o TableExternalDataConfigurationCsvOptionsOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationCsvOptionsPtrOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationCsvOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationCsvOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationCsvOptionsPtrOutput) ToTableExternalDataConfigurationCsvOptionsPtrOutput() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationCsvOptionsPtrOutput) ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationCsvOptionsPtrOutput) Elem() TableExternalDataConfigurationCsvOptionsOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationCsvOptions) TableExternalDataConfigurationCsvOptions {
		if v != nil {
			return *v
		}
		var ret TableExternalDataConfigurationCsvOptions
		return ret
	}).(TableExternalDataConfigurationCsvOptionsOutput)
}

// Indicates if BigQuery should accept rows
// that are missing trailing optional columns.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationCsvOptions) *bool {
		if v == nil {
			return nil
		}
		return v.AllowJaggedRows
	}).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow
// quoted data sections that contain newline characters in a CSV file.
// The default value is false.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationCsvOptions) *bool {
		if v == nil {
			return nil
		}
		return v.AllowQuotedNewlines
	}).(pulumi.BoolPtrOutput)
}

// The character encoding of the data. The supported
// values are UTF-8 or ISO-8859-1.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationCsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// The separator for fields in a CSV file.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationCsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

func (o TableExternalDataConfigurationCsvOptionsPtrOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationCsvOptions) *string {
		if v == nil {
			return nil
		}
		return &v.Quote
	}).(pulumi.StringPtrOutput)
}

// The number of rows at the top of a CSV
// file that BigQuery will skip when reading the data.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationCsvOptions) *int {
		if v == nil {
			return nil
		}
		return v.SkipLeadingRows
	}).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationGoogleSheetsOptions struct {
	// Range of a sheet to query from. Only used when
	// non-empty. At least one of `range` or `skipLeadingRows` must be set.
	// Typical format: "sheet_name!top_left_cell_id:bottom_right_cell_id"
	// For example: "sheet1!A1:B20"
	Range *string `pulumi:"range"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows *int `pulumi:"skipLeadingRows"`
}

// TableExternalDataConfigurationGoogleSheetsOptionsInput is an input type that accepts TableExternalDataConfigurationGoogleSheetsOptionsArgs and TableExternalDataConfigurationGoogleSheetsOptionsOutput values.
// You can construct a concrete instance of `TableExternalDataConfigurationGoogleSheetsOptionsInput` via:
//
//	TableExternalDataConfigurationGoogleSheetsOptionsArgs{...}
type TableExternalDataConfigurationGoogleSheetsOptionsInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationGoogleSheetsOptionsOutput() TableExternalDataConfigurationGoogleSheetsOptionsOutput
	ToTableExternalDataConfigurationGoogleSheetsOptionsOutputWithContext(context.Context) TableExternalDataConfigurationGoogleSheetsOptionsOutput
}

type TableExternalDataConfigurationGoogleSheetsOptionsArgs struct {
	// Range of a sheet to query from. Only used when
	// non-empty. At least one of `range` or `skipLeadingRows` must be set.
	// Typical format: "sheet_name!top_left_cell_id:bottom_right_cell_id"
	// For example: "sheet1!A1:B20"
	Range pulumi.StringPtrInput `pulumi:"range"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows pulumi.IntPtrInput `pulumi:"skipLeadingRows"`
}

func (TableExternalDataConfigurationGoogleSheetsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationGoogleSheetsOptions)(nil)).Elem()
}

func (i TableExternalDataConfigurationGoogleSheetsOptionsArgs) ToTableExternalDataConfigurationGoogleSheetsOptionsOutput() TableExternalDataConfigurationGoogleSheetsOptionsOutput {
	return i.ToTableExternalDataConfigurationGoogleSheetsOptionsOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationGoogleSheetsOptionsArgs) ToTableExternalDataConfigurationGoogleSheetsOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationGoogleSheetsOptionsOutput)
}

func (i TableExternalDataConfigurationGoogleSheetsOptionsArgs) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationGoogleSheetsOptionsArgs) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationGoogleSheetsOptionsOutput).ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(ctx)
}

// TableExternalDataConfigurationGoogleSheetsOptionsPtrInput is an input type that accepts TableExternalDataConfigurationGoogleSheetsOptionsArgs, TableExternalDataConfigurationGoogleSheetsOptionsPtr and TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput values.
// You can construct a concrete instance of `TableExternalDataConfigurationGoogleSheetsOptionsPtrInput` via:
//
//	        TableExternalDataConfigurationGoogleSheetsOptionsArgs{...}
//
//	or:
//
//	        nil
type TableExternalDataConfigurationGoogleSheetsOptionsPtrInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput
	ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(context.Context) TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput
}

type tableExternalDataConfigurationGoogleSheetsOptionsPtrType TableExternalDataConfigurationGoogleSheetsOptionsArgs

func TableExternalDataConfigurationGoogleSheetsOptionsPtr(v *TableExternalDataConfigurationGoogleSheetsOptionsArgs) TableExternalDataConfigurationGoogleSheetsOptionsPtrInput {
	return (*tableExternalDataConfigurationGoogleSheetsOptionsPtrType)(v)
}

func (*tableExternalDataConfigurationGoogleSheetsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationGoogleSheetsOptions)(nil)).Elem()
}

func (i *tableExternalDataConfigurationGoogleSheetsOptionsPtrType) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (i *tableExternalDataConfigurationGoogleSheetsOptionsPtrType) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput)
}

type TableExternalDataConfigurationGoogleSheetsOptionsOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationGoogleSheetsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationGoogleSheetsOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsOutput() TableExternalDataConfigurationGoogleSheetsOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o.ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableExternalDataConfigurationGoogleSheetsOptions) *TableExternalDataConfigurationGoogleSheetsOptions {
		return &v
	}).(TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput)
}

// Range of a sheet to query from. Only used when
// non-empty. At least one of `range` or `skipLeadingRows` must be set.
// Typical format: "sheet_name!top_left_cell_id:bottom_right_cell_id"
// For example: "sheet1!A1:B20"
func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationGoogleSheetsOptions) *string { return v.Range }).(pulumi.StringPtrOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationGoogleSheetsOptions) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationGoogleSheetsOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) Elem() TableExternalDataConfigurationGoogleSheetsOptionsOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationGoogleSheetsOptions) TableExternalDataConfigurationGoogleSheetsOptions {
		if v != nil {
			return *v
		}
		var ret TableExternalDataConfigurationGoogleSheetsOptions
		return ret
	}).(TableExternalDataConfigurationGoogleSheetsOptionsOutput)
}

// Range of a sheet to query from. Only used when
// non-empty. At least one of `range` or `skipLeadingRows` must be set.
// Typical format: "sheet_name!top_left_cell_id:bottom_right_cell_id"
// For example: "sheet1!A1:B20"
func (o TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationGoogleSheetsOptions) *string {
		if v == nil {
			return nil
		}
		return v.Range
	}).(pulumi.StringPtrOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationGoogleSheetsOptions) *int {
		if v == nil {
			return nil
		}
		return v.SkipLeadingRows
	}).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationHivePartitioningOptions struct {
	// When set, what mode of hive partitioning to use when
	// reading data. The following modes are supported.
	// * AUTO: automatically infer partition key name(s) and type(s).
	// * STRINGS: automatically infer partition key name(s). All types are
	//   Not all storage formats support hive partitioning. Requesting hive
	//   partitioning on an unsupported format will lead to an error.
	//   Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.
	// * CUSTOM: when set to `CUSTOM`, you must encode the partition key schema within the `sourceUriPrefix` by setting `sourceUriPrefix` to `gs://bucket/path_to_table/{key1:TYPE1}/{key2:TYPE2}/{key3:TYPE3}`.
	Mode *string `pulumi:"mode"`
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter *bool `pulumi:"requirePartitionFilter"`
	// When hive partition detection is requested,
	// a common for all source uris must be required. The prefix must end immediately
	// before the partition key encoding begins. For example, consider files following
	// this data layout. `gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro`
	// `gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro` When hive
	// partitioning is requested with either AUTO or STRINGS detection, the common prefix
	// can be either of `gs://bucket/path_to_table` or `gs://bucket/path_to_table/`.
	// Note that when `mode` is set to `CUSTOM`, you must encode the partition key schema within the `sourceUriPrefix` by setting `sourceUriPrefix` to `gs://bucket/path_to_table/{key1:TYPE1}/{key2:TYPE2}/{key3:TYPE3}`.
	SourceUriPrefix *string `pulumi:"sourceUriPrefix"`
}

// TableExternalDataConfigurationHivePartitioningOptionsInput is an input type that accepts TableExternalDataConfigurationHivePartitioningOptionsArgs and TableExternalDataConfigurationHivePartitioningOptionsOutput values.
// You can construct a concrete instance of `TableExternalDataConfigurationHivePartitioningOptionsInput` via:
//
//	TableExternalDataConfigurationHivePartitioningOptionsArgs{...}
type TableExternalDataConfigurationHivePartitioningOptionsInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationHivePartitioningOptionsOutput() TableExternalDataConfigurationHivePartitioningOptionsOutput
	ToTableExternalDataConfigurationHivePartitioningOptionsOutputWithContext(context.Context) TableExternalDataConfigurationHivePartitioningOptionsOutput
}

type TableExternalDataConfigurationHivePartitioningOptionsArgs struct {
	// When set, what mode of hive partitioning to use when
	// reading data. The following modes are supported.
	// * AUTO: automatically infer partition key name(s) and type(s).
	// * STRINGS: automatically infer partition key name(s). All types are
	//   Not all storage formats support hive partitioning. Requesting hive
	//   partitioning on an unsupported format will lead to an error.
	//   Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.
	// * CUSTOM: when set to `CUSTOM`, you must encode the partition key schema within the `sourceUriPrefix` by setting `sourceUriPrefix` to `gs://bucket/path_to_table/{key1:TYPE1}/{key2:TYPE2}/{key3:TYPE3}`.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter pulumi.BoolPtrInput `pulumi:"requirePartitionFilter"`
	// When hive partition detection is requested,
	// a common for all source uris must be required. The prefix must end immediately
	// before the partition key encoding begins. For example, consider files following
	// this data layout. `gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro`
	// `gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro` When hive
	// partitioning is requested with either AUTO or STRINGS detection, the common prefix
	// can be either of `gs://bucket/path_to_table` or `gs://bucket/path_to_table/`.
	// Note that when `mode` is set to `CUSTOM`, you must encode the partition key schema within the `sourceUriPrefix` by setting `sourceUriPrefix` to `gs://bucket/path_to_table/{key1:TYPE1}/{key2:TYPE2}/{key3:TYPE3}`.
	SourceUriPrefix pulumi.StringPtrInput `pulumi:"sourceUriPrefix"`
}

func (TableExternalDataConfigurationHivePartitioningOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationHivePartitioningOptions)(nil)).Elem()
}

func (i TableExternalDataConfigurationHivePartitioningOptionsArgs) ToTableExternalDataConfigurationHivePartitioningOptionsOutput() TableExternalDataConfigurationHivePartitioningOptionsOutput {
	return i.ToTableExternalDataConfigurationHivePartitioningOptionsOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationHivePartitioningOptionsArgs) ToTableExternalDataConfigurationHivePartitioningOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationHivePartitioningOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationHivePartitioningOptionsOutput)
}

func (i TableExternalDataConfigurationHivePartitioningOptionsArgs) ToTableExternalDataConfigurationHivePartitioningOptionsPtrOutput() TableExternalDataConfigurationHivePartitioningOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationHivePartitioningOptionsPtrOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationHivePartitioningOptionsArgs) ToTableExternalDataConfigurationHivePartitioningOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationHivePartitioningOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationHivePartitioningOptionsOutput).ToTableExternalDataConfigurationHivePartitioningOptionsPtrOutputWithContext(ctx)
}

// TableExternalDataConfigurationHivePartitioningOptionsPtrInput is an input type that accepts TableExternalDataConfigurationHivePartitioningOptionsArgs, TableExternalDataConfigurationHivePartitioningOptionsPtr and TableExternalDataConfigurationHivePartitioningOptionsPtrOutput values.
// You can construct a concrete instance of `TableExternalDataConfigurationHivePartitioningOptionsPtrInput` via:
//
//	        TableExternalDataConfigurationHivePartitioningOptionsArgs{...}
//
//	or:
//
//	        nil
type TableExternalDataConfigurationHivePartitioningOptionsPtrInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationHivePartitioningOptionsPtrOutput() TableExternalDataConfigurationHivePartitioningOptionsPtrOutput
	ToTableExternalDataConfigurationHivePartitioningOptionsPtrOutputWithContext(context.Context) TableExternalDataConfigurationHivePartitioningOptionsPtrOutput
}

type tableExternalDataConfigurationHivePartitioningOptionsPtrType TableExternalDataConfigurationHivePartitioningOptionsArgs

func TableExternalDataConfigurationHivePartitioningOptionsPtr(v *TableExternalDataConfigurationHivePartitioningOptionsArgs) TableExternalDataConfigurationHivePartitioningOptionsPtrInput {
	return (*tableExternalDataConfigurationHivePartitioningOptionsPtrType)(v)
}

func (*tableExternalDataConfigurationHivePartitioningOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationHivePartitioningOptions)(nil)).Elem()
}

func (i *tableExternalDataConfigurationHivePartitioningOptionsPtrType) ToTableExternalDataConfigurationHivePartitioningOptionsPtrOutput() TableExternalDataConfigurationHivePartitioningOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationHivePartitioningOptionsPtrOutputWithContext(context.Background())
}

func (i *tableExternalDataConfigurationHivePartitioningOptionsPtrType) ToTableExternalDataConfigurationHivePartitioningOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationHivePartitioningOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationHivePartitioningOptionsPtrOutput)
}

type TableExternalDataConfigurationHivePartitioningOptionsOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationHivePartitioningOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationHivePartitioningOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationHivePartitioningOptionsOutput) ToTableExternalDataConfigurationHivePartitioningOptionsOutput() TableExternalDataConfigurationHivePartitioningOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationHivePartitioningOptionsOutput) ToTableExternalDataConfigurationHivePartitioningOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationHivePartitioningOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationHivePartitioningOptionsOutput) ToTableExternalDataConfigurationHivePartitioningOptionsPtrOutput() TableExternalDataConfigurationHivePartitioningOptionsPtrOutput {
	return o.ToTableExternalDataConfigurationHivePartitioningOptionsPtrOutputWithContext(context.Background())
}

func (o TableExternalDataConfigurationHivePartitioningOptionsOutput) ToTableExternalDataConfigurationHivePartitioningOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationHivePartitioningOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableExternalDataConfigurationHivePartitioningOptions) *TableExternalDataConfigurationHivePartitioningOptions {
		return &v
	}).(TableExternalDataConfigurationHivePartitioningOptionsPtrOutput)
}

// When set, what mode of hive partitioning to use when
// reading data. The following modes are supported.
//   - AUTO: automatically infer partition key name(s) and type(s).
//   - STRINGS: automatically infer partition key name(s). All types are
//     Not all storage formats support hive partitioning. Requesting hive
//     partitioning on an unsupported format will lead to an error.
//     Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.
//   - CUSTOM: when set to `CUSTOM`, you must encode the partition key schema within the `sourceUriPrefix` by setting `sourceUriPrefix` to `gs://bucket/path_to_table/{key1:TYPE1}/{key2:TYPE2}/{key3:TYPE3}`.
func (o TableExternalDataConfigurationHivePartitioningOptionsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationHivePartitioningOptions) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// If set to true, queries over this table
// require a partition filter that can be used for partition elimination to be
// specified.
func (o TableExternalDataConfigurationHivePartitioningOptionsOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationHivePartitioningOptions) *bool { return v.RequirePartitionFilter }).(pulumi.BoolPtrOutput)
}

// When hive partition detection is requested,
// a common for all source uris must be required. The prefix must end immediately
// before the partition key encoding begins. For example, consider files following
// this data layout. `gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro`
// `gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro` When hive
// partitioning is requested with either AUTO or STRINGS detection, the common prefix
// can be either of `gs://bucket/path_to_table` or `gs://bucket/path_to_table/`.
// Note that when `mode` is set to `CUSTOM`, you must encode the partition key schema within the `sourceUriPrefix` by setting `sourceUriPrefix` to `gs://bucket/path_to_table/{key1:TYPE1}/{key2:TYPE2}/{key3:TYPE3}`.
func (o TableExternalDataConfigurationHivePartitioningOptionsOutput) SourceUriPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationHivePartitioningOptions) *string { return v.SourceUriPrefix }).(pulumi.StringPtrOutput)
}

type TableExternalDataConfigurationHivePartitioningOptionsPtrOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationHivePartitioningOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationHivePartitioningOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationHivePartitioningOptionsPtrOutput) ToTableExternalDataConfigurationHivePartitioningOptionsPtrOutput() TableExternalDataConfigurationHivePartitioningOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationHivePartitioningOptionsPtrOutput) ToTableExternalDataConfigurationHivePartitioningOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationHivePartitioningOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationHivePartitioningOptionsPtrOutput) Elem() TableExternalDataConfigurationHivePartitioningOptionsOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationHivePartitioningOptions) TableExternalDataConfigurationHivePartitioningOptions {
		if v != nil {
			return *v
		}
		var ret TableExternalDataConfigurationHivePartitioningOptions
		return ret
	}).(TableExternalDataConfigurationHivePartitioningOptionsOutput)
}

// When set, what mode of hive partitioning to use when
// reading data. The following modes are supported.
//   - AUTO: automatically infer partition key name(s) and type(s).
//   - STRINGS: automatically infer partition key name(s). All types are
//     Not all storage formats support hive partitioning. Requesting hive
//     partitioning on an unsupported format will lead to an error.
//     Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.
//   - CUSTOM: when set to `CUSTOM`, you must encode the partition key schema within the `sourceUriPrefix` by setting `sourceUriPrefix` to `gs://bucket/path_to_table/{key1:TYPE1}/{key2:TYPE2}/{key3:TYPE3}`.
func (o TableExternalDataConfigurationHivePartitioningOptionsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationHivePartitioningOptions) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// If set to true, queries over this table
// require a partition filter that can be used for partition elimination to be
// specified.
func (o TableExternalDataConfigurationHivePartitioningOptionsPtrOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationHivePartitioningOptions) *bool {
		if v == nil {
			return nil
		}
		return v.RequirePartitionFilter
	}).(pulumi.BoolPtrOutput)
}

// When hive partition detection is requested,
// a common for all source uris must be required. The prefix must end immediately
// before the partition key encoding begins. For example, consider files following
// this data layout. `gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro`
// `gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro` When hive
// partitioning is requested with either AUTO or STRINGS detection, the common prefix
// can be either of `gs://bucket/path_to_table` or `gs://bucket/path_to_table/`.
// Note that when `mode` is set to `CUSTOM`, you must encode the partition key schema within the `sourceUriPrefix` by setting `sourceUriPrefix` to `gs://bucket/path_to_table/{key1:TYPE1}/{key2:TYPE2}/{key3:TYPE3}`.
func (o TableExternalDataConfigurationHivePartitioningOptionsPtrOutput) SourceUriPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationHivePartitioningOptions) *string {
		if v == nil {
			return nil
		}
		return v.SourceUriPrefix
	}).(pulumi.StringPtrOutput)
}

type TableMaterializedView struct {
	// Specifies whether to use BigQuery's automatic refresh for this materialized view when the base table is updated.
	// The default value is true.
	EnableRefresh *bool `pulumi:"enableRefresh"`
	// A query whose result is persisted.
	Query string `pulumi:"query"`
	// The maximum frequency at which this materialized view will be refreshed.
	// The default value is 1800000
	RefreshIntervalMs *int `pulumi:"refreshIntervalMs"`
}

// TableMaterializedViewInput is an input type that accepts TableMaterializedViewArgs and TableMaterializedViewOutput values.
// You can construct a concrete instance of `TableMaterializedViewInput` via:
//
//	TableMaterializedViewArgs{...}
type TableMaterializedViewInput interface {
	pulumi.Input

	ToTableMaterializedViewOutput() TableMaterializedViewOutput
	ToTableMaterializedViewOutputWithContext(context.Context) TableMaterializedViewOutput
}

type TableMaterializedViewArgs struct {
	// Specifies whether to use BigQuery's automatic refresh for this materialized view when the base table is updated.
	// The default value is true.
	EnableRefresh pulumi.BoolPtrInput `pulumi:"enableRefresh"`
	// A query whose result is persisted.
	Query pulumi.StringInput `pulumi:"query"`
	// The maximum frequency at which this materialized view will be refreshed.
	// The default value is 1800000
	RefreshIntervalMs pulumi.IntPtrInput `pulumi:"refreshIntervalMs"`
}

func (TableMaterializedViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMaterializedView)(nil)).Elem()
}

func (i TableMaterializedViewArgs) ToTableMaterializedViewOutput() TableMaterializedViewOutput {
	return i.ToTableMaterializedViewOutputWithContext(context.Background())
}

func (i TableMaterializedViewArgs) ToTableMaterializedViewOutputWithContext(ctx context.Context) TableMaterializedViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMaterializedViewOutput)
}

func (i TableMaterializedViewArgs) ToTableMaterializedViewPtrOutput() TableMaterializedViewPtrOutput {
	return i.ToTableMaterializedViewPtrOutputWithContext(context.Background())
}

func (i TableMaterializedViewArgs) ToTableMaterializedViewPtrOutputWithContext(ctx context.Context) TableMaterializedViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMaterializedViewOutput).ToTableMaterializedViewPtrOutputWithContext(ctx)
}

// TableMaterializedViewPtrInput is an input type that accepts TableMaterializedViewArgs, TableMaterializedViewPtr and TableMaterializedViewPtrOutput values.
// You can construct a concrete instance of `TableMaterializedViewPtrInput` via:
//
//	        TableMaterializedViewArgs{...}
//
//	or:
//
//	        nil
type TableMaterializedViewPtrInput interface {
	pulumi.Input

	ToTableMaterializedViewPtrOutput() TableMaterializedViewPtrOutput
	ToTableMaterializedViewPtrOutputWithContext(context.Context) TableMaterializedViewPtrOutput
}

type tableMaterializedViewPtrType TableMaterializedViewArgs

func TableMaterializedViewPtr(v *TableMaterializedViewArgs) TableMaterializedViewPtrInput {
	return (*tableMaterializedViewPtrType)(v)
}

func (*tableMaterializedViewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableMaterializedView)(nil)).Elem()
}

func (i *tableMaterializedViewPtrType) ToTableMaterializedViewPtrOutput() TableMaterializedViewPtrOutput {
	return i.ToTableMaterializedViewPtrOutputWithContext(context.Background())
}

func (i *tableMaterializedViewPtrType) ToTableMaterializedViewPtrOutputWithContext(ctx context.Context) TableMaterializedViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMaterializedViewPtrOutput)
}

type TableMaterializedViewOutput struct{ *pulumi.OutputState }

func (TableMaterializedViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMaterializedView)(nil)).Elem()
}

func (o TableMaterializedViewOutput) ToTableMaterializedViewOutput() TableMaterializedViewOutput {
	return o
}

func (o TableMaterializedViewOutput) ToTableMaterializedViewOutputWithContext(ctx context.Context) TableMaterializedViewOutput {
	return o
}

func (o TableMaterializedViewOutput) ToTableMaterializedViewPtrOutput() TableMaterializedViewPtrOutput {
	return o.ToTableMaterializedViewPtrOutputWithContext(context.Background())
}

func (o TableMaterializedViewOutput) ToTableMaterializedViewPtrOutputWithContext(ctx context.Context) TableMaterializedViewPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableMaterializedView) *TableMaterializedView {
		return &v
	}).(TableMaterializedViewPtrOutput)
}

// Specifies whether to use BigQuery's automatic refresh for this materialized view when the base table is updated.
// The default value is true.
func (o TableMaterializedViewOutput) EnableRefresh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableMaterializedView) *bool { return v.EnableRefresh }).(pulumi.BoolPtrOutput)
}

// A query whose result is persisted.
func (o TableMaterializedViewOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v TableMaterializedView) string { return v.Query }).(pulumi.StringOutput)
}

// The maximum frequency at which this materialized view will be refreshed.
// The default value is 1800000
func (o TableMaterializedViewOutput) RefreshIntervalMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableMaterializedView) *int { return v.RefreshIntervalMs }).(pulumi.IntPtrOutput)
}

type TableMaterializedViewPtrOutput struct{ *pulumi.OutputState }

func (TableMaterializedViewPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableMaterializedView)(nil)).Elem()
}

func (o TableMaterializedViewPtrOutput) ToTableMaterializedViewPtrOutput() TableMaterializedViewPtrOutput {
	return o
}

func (o TableMaterializedViewPtrOutput) ToTableMaterializedViewPtrOutputWithContext(ctx context.Context) TableMaterializedViewPtrOutput {
	return o
}

func (o TableMaterializedViewPtrOutput) Elem() TableMaterializedViewOutput {
	return o.ApplyT(func(v *TableMaterializedView) TableMaterializedView {
		if v != nil {
			return *v
		}
		var ret TableMaterializedView
		return ret
	}).(TableMaterializedViewOutput)
}

// Specifies whether to use BigQuery's automatic refresh for this materialized view when the base table is updated.
// The default value is true.
func (o TableMaterializedViewPtrOutput) EnableRefresh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableMaterializedView) *bool {
		if v == nil {
			return nil
		}
		return v.EnableRefresh
	}).(pulumi.BoolPtrOutput)
}

// A query whose result is persisted.
func (o TableMaterializedViewPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableMaterializedView) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

// The maximum frequency at which this materialized view will be refreshed.
// The default value is 1800000
func (o TableMaterializedViewPtrOutput) RefreshIntervalMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableMaterializedView) *int {
		if v == nil {
			return nil
		}
		return v.RefreshIntervalMs
	}).(pulumi.IntPtrOutput)
}

type TableRangePartitioning struct {
	// The field used to determine how to create a range-based
	// partition.
	Field string `pulumi:"field"`
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range TableRangePartitioningRange `pulumi:"range"`
}

// TableRangePartitioningInput is an input type that accepts TableRangePartitioningArgs and TableRangePartitioningOutput values.
// You can construct a concrete instance of `TableRangePartitioningInput` via:
//
//	TableRangePartitioningArgs{...}
type TableRangePartitioningInput interface {
	pulumi.Input

	ToTableRangePartitioningOutput() TableRangePartitioningOutput
	ToTableRangePartitioningOutputWithContext(context.Context) TableRangePartitioningOutput
}

type TableRangePartitioningArgs struct {
	// The field used to determine how to create a range-based
	// partition.
	Field pulumi.StringInput `pulumi:"field"`
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range TableRangePartitioningRangeInput `pulumi:"range"`
}

func (TableRangePartitioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioning)(nil)).Elem()
}

func (i TableRangePartitioningArgs) ToTableRangePartitioningOutput() TableRangePartitioningOutput {
	return i.ToTableRangePartitioningOutputWithContext(context.Background())
}

func (i TableRangePartitioningArgs) ToTableRangePartitioningOutputWithContext(ctx context.Context) TableRangePartitioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningOutput)
}

func (i TableRangePartitioningArgs) ToTableRangePartitioningPtrOutput() TableRangePartitioningPtrOutput {
	return i.ToTableRangePartitioningPtrOutputWithContext(context.Background())
}

func (i TableRangePartitioningArgs) ToTableRangePartitioningPtrOutputWithContext(ctx context.Context) TableRangePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningOutput).ToTableRangePartitioningPtrOutputWithContext(ctx)
}

// TableRangePartitioningPtrInput is an input type that accepts TableRangePartitioningArgs, TableRangePartitioningPtr and TableRangePartitioningPtrOutput values.
// You can construct a concrete instance of `TableRangePartitioningPtrInput` via:
//
//	        TableRangePartitioningArgs{...}
//
//	or:
//
//	        nil
type TableRangePartitioningPtrInput interface {
	pulumi.Input

	ToTableRangePartitioningPtrOutput() TableRangePartitioningPtrOutput
	ToTableRangePartitioningPtrOutputWithContext(context.Context) TableRangePartitioningPtrOutput
}

type tableRangePartitioningPtrType TableRangePartitioningArgs

func TableRangePartitioningPtr(v *TableRangePartitioningArgs) TableRangePartitioningPtrInput {
	return (*tableRangePartitioningPtrType)(v)
}

func (*tableRangePartitioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableRangePartitioning)(nil)).Elem()
}

func (i *tableRangePartitioningPtrType) ToTableRangePartitioningPtrOutput() TableRangePartitioningPtrOutput {
	return i.ToTableRangePartitioningPtrOutputWithContext(context.Background())
}

func (i *tableRangePartitioningPtrType) ToTableRangePartitioningPtrOutputWithContext(ctx context.Context) TableRangePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningPtrOutput)
}

type TableRangePartitioningOutput struct{ *pulumi.OutputState }

func (TableRangePartitioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioning)(nil)).Elem()
}

func (o TableRangePartitioningOutput) ToTableRangePartitioningOutput() TableRangePartitioningOutput {
	return o
}

func (o TableRangePartitioningOutput) ToTableRangePartitioningOutputWithContext(ctx context.Context) TableRangePartitioningOutput {
	return o
}

func (o TableRangePartitioningOutput) ToTableRangePartitioningPtrOutput() TableRangePartitioningPtrOutput {
	return o.ToTableRangePartitioningPtrOutputWithContext(context.Background())
}

func (o TableRangePartitioningOutput) ToTableRangePartitioningPtrOutputWithContext(ctx context.Context) TableRangePartitioningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableRangePartitioning) *TableRangePartitioning {
		return &v
	}).(TableRangePartitioningPtrOutput)
}

// The field used to determine how to create a range-based
// partition.
func (o TableRangePartitioningOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v TableRangePartitioning) string { return v.Field }).(pulumi.StringOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableRangePartitioningOutput) Range() TableRangePartitioningRangeOutput {
	return o.ApplyT(func(v TableRangePartitioning) TableRangePartitioningRange { return v.Range }).(TableRangePartitioningRangeOutput)
}

type TableRangePartitioningPtrOutput struct{ *pulumi.OutputState }

func (TableRangePartitioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableRangePartitioning)(nil)).Elem()
}

func (o TableRangePartitioningPtrOutput) ToTableRangePartitioningPtrOutput() TableRangePartitioningPtrOutput {
	return o
}

func (o TableRangePartitioningPtrOutput) ToTableRangePartitioningPtrOutputWithContext(ctx context.Context) TableRangePartitioningPtrOutput {
	return o
}

func (o TableRangePartitioningPtrOutput) Elem() TableRangePartitioningOutput {
	return o.ApplyT(func(v *TableRangePartitioning) TableRangePartitioning {
		if v != nil {
			return *v
		}
		var ret TableRangePartitioning
		return ret
	}).(TableRangePartitioningOutput)
}

// The field used to determine how to create a range-based
// partition.
func (o TableRangePartitioningPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableRangePartitioning) *string {
		if v == nil {
			return nil
		}
		return &v.Field
	}).(pulumi.StringPtrOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableRangePartitioningPtrOutput) Range() TableRangePartitioningRangePtrOutput {
	return o.ApplyT(func(v *TableRangePartitioning) *TableRangePartitioningRange {
		if v == nil {
			return nil
		}
		return &v.Range
	}).(TableRangePartitioningRangePtrOutput)
}

type TableRangePartitioningRange struct {
	// End of the range partitioning, exclusive.
	End int `pulumi:"end"`
	// The width of each range within the partition.
	Interval int `pulumi:"interval"`
	// Start of the range partitioning, inclusive.
	Start int `pulumi:"start"`
}

// TableRangePartitioningRangeInput is an input type that accepts TableRangePartitioningRangeArgs and TableRangePartitioningRangeOutput values.
// You can construct a concrete instance of `TableRangePartitioningRangeInput` via:
//
//	TableRangePartitioningRangeArgs{...}
type TableRangePartitioningRangeInput interface {
	pulumi.Input

	ToTableRangePartitioningRangeOutput() TableRangePartitioningRangeOutput
	ToTableRangePartitioningRangeOutputWithContext(context.Context) TableRangePartitioningRangeOutput
}

type TableRangePartitioningRangeArgs struct {
	// End of the range partitioning, exclusive.
	End pulumi.IntInput `pulumi:"end"`
	// The width of each range within the partition.
	Interval pulumi.IntInput `pulumi:"interval"`
	// Start of the range partitioning, inclusive.
	Start pulumi.IntInput `pulumi:"start"`
}

func (TableRangePartitioningRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioningRange)(nil)).Elem()
}

func (i TableRangePartitioningRangeArgs) ToTableRangePartitioningRangeOutput() TableRangePartitioningRangeOutput {
	return i.ToTableRangePartitioningRangeOutputWithContext(context.Background())
}

func (i TableRangePartitioningRangeArgs) ToTableRangePartitioningRangeOutputWithContext(ctx context.Context) TableRangePartitioningRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningRangeOutput)
}

func (i TableRangePartitioningRangeArgs) ToTableRangePartitioningRangePtrOutput() TableRangePartitioningRangePtrOutput {
	return i.ToTableRangePartitioningRangePtrOutputWithContext(context.Background())
}

func (i TableRangePartitioningRangeArgs) ToTableRangePartitioningRangePtrOutputWithContext(ctx context.Context) TableRangePartitioningRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningRangeOutput).ToTableRangePartitioningRangePtrOutputWithContext(ctx)
}

// TableRangePartitioningRangePtrInput is an input type that accepts TableRangePartitioningRangeArgs, TableRangePartitioningRangePtr and TableRangePartitioningRangePtrOutput values.
// You can construct a concrete instance of `TableRangePartitioningRangePtrInput` via:
//
//	        TableRangePartitioningRangeArgs{...}
//
//	or:
//
//	        nil
type TableRangePartitioningRangePtrInput interface {
	pulumi.Input

	ToTableRangePartitioningRangePtrOutput() TableRangePartitioningRangePtrOutput
	ToTableRangePartitioningRangePtrOutputWithContext(context.Context) TableRangePartitioningRangePtrOutput
}

type tableRangePartitioningRangePtrType TableRangePartitioningRangeArgs

func TableRangePartitioningRangePtr(v *TableRangePartitioningRangeArgs) TableRangePartitioningRangePtrInput {
	return (*tableRangePartitioningRangePtrType)(v)
}

func (*tableRangePartitioningRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableRangePartitioningRange)(nil)).Elem()
}

func (i *tableRangePartitioningRangePtrType) ToTableRangePartitioningRangePtrOutput() TableRangePartitioningRangePtrOutput {
	return i.ToTableRangePartitioningRangePtrOutputWithContext(context.Background())
}

func (i *tableRangePartitioningRangePtrType) ToTableRangePartitioningRangePtrOutputWithContext(ctx context.Context) TableRangePartitioningRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningRangePtrOutput)
}

type TableRangePartitioningRangeOutput struct{ *pulumi.OutputState }

func (TableRangePartitioningRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioningRange)(nil)).Elem()
}

func (o TableRangePartitioningRangeOutput) ToTableRangePartitioningRangeOutput() TableRangePartitioningRangeOutput {
	return o
}

func (o TableRangePartitioningRangeOutput) ToTableRangePartitioningRangeOutputWithContext(ctx context.Context) TableRangePartitioningRangeOutput {
	return o
}

func (o TableRangePartitioningRangeOutput) ToTableRangePartitioningRangePtrOutput() TableRangePartitioningRangePtrOutput {
	return o.ToTableRangePartitioningRangePtrOutputWithContext(context.Background())
}

func (o TableRangePartitioningRangeOutput) ToTableRangePartitioningRangePtrOutputWithContext(ctx context.Context) TableRangePartitioningRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableRangePartitioningRange) *TableRangePartitioningRange {
		return &v
	}).(TableRangePartitioningRangePtrOutput)
}

// End of the range partitioning, exclusive.
func (o TableRangePartitioningRangeOutput) End() pulumi.IntOutput {
	return o.ApplyT(func(v TableRangePartitioningRange) int { return v.End }).(pulumi.IntOutput)
}

// The width of each range within the partition.
func (o TableRangePartitioningRangeOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v TableRangePartitioningRange) int { return v.Interval }).(pulumi.IntOutput)
}

// Start of the range partitioning, inclusive.
func (o TableRangePartitioningRangeOutput) Start() pulumi.IntOutput {
	return o.ApplyT(func(v TableRangePartitioningRange) int { return v.Start }).(pulumi.IntOutput)
}

type TableRangePartitioningRangePtrOutput struct{ *pulumi.OutputState }

func (TableRangePartitioningRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableRangePartitioningRange)(nil)).Elem()
}

func (o TableRangePartitioningRangePtrOutput) ToTableRangePartitioningRangePtrOutput() TableRangePartitioningRangePtrOutput {
	return o
}

func (o TableRangePartitioningRangePtrOutput) ToTableRangePartitioningRangePtrOutputWithContext(ctx context.Context) TableRangePartitioningRangePtrOutput {
	return o
}

func (o TableRangePartitioningRangePtrOutput) Elem() TableRangePartitioningRangeOutput {
	return o.ApplyT(func(v *TableRangePartitioningRange) TableRangePartitioningRange {
		if v != nil {
			return *v
		}
		var ret TableRangePartitioningRange
		return ret
	}).(TableRangePartitioningRangeOutput)
}

// End of the range partitioning, exclusive.
func (o TableRangePartitioningRangePtrOutput) End() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableRangePartitioningRange) *int {
		if v == nil {
			return nil
		}
		return &v.End
	}).(pulumi.IntPtrOutput)
}

// The width of each range within the partition.
func (o TableRangePartitioningRangePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableRangePartitioningRange) *int {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.IntPtrOutput)
}

// Start of the range partitioning, inclusive.
func (o TableRangePartitioningRangePtrOutput) Start() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableRangePartitioningRange) *int {
		if v == nil {
			return nil
		}
		return &v.Start
	}).(pulumi.IntPtrOutput)
}

type TableTimePartitioning struct {
	// Number of milliseconds for which to keep the
	// storage for a partition.
	ExpirationMs *int `pulumi:"expirationMs"`
	// The field used to determine how to create a time-based
	// partition. If time-based partitioning is enabled without this value, the
	// table is partitioned based on the load time.
	Field *string `pulumi:"field"`
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter *bool `pulumi:"requirePartitionFilter"`
	// The supported types are DAY, HOUR, MONTH, and YEAR,
	// which will generate one partition per day, hour, month, and year, respectively.
	Type string `pulumi:"type"`
}

// TableTimePartitioningInput is an input type that accepts TableTimePartitioningArgs and TableTimePartitioningOutput values.
// You can construct a concrete instance of `TableTimePartitioningInput` via:
//
//	TableTimePartitioningArgs{...}
type TableTimePartitioningInput interface {
	pulumi.Input

	ToTableTimePartitioningOutput() TableTimePartitioningOutput
	ToTableTimePartitioningOutputWithContext(context.Context) TableTimePartitioningOutput
}

type TableTimePartitioningArgs struct {
	// Number of milliseconds for which to keep the
	// storage for a partition.
	ExpirationMs pulumi.IntPtrInput `pulumi:"expirationMs"`
	// The field used to determine how to create a time-based
	// partition. If time-based partitioning is enabled without this value, the
	// table is partitioned based on the load time.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter pulumi.BoolPtrInput `pulumi:"requirePartitionFilter"`
	// The supported types are DAY, HOUR, MONTH, and YEAR,
	// which will generate one partition per day, hour, month, and year, respectively.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableTimePartitioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTimePartitioning)(nil)).Elem()
}

func (i TableTimePartitioningArgs) ToTableTimePartitioningOutput() TableTimePartitioningOutput {
	return i.ToTableTimePartitioningOutputWithContext(context.Background())
}

func (i TableTimePartitioningArgs) ToTableTimePartitioningOutputWithContext(ctx context.Context) TableTimePartitioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTimePartitioningOutput)
}

func (i TableTimePartitioningArgs) ToTableTimePartitioningPtrOutput() TableTimePartitioningPtrOutput {
	return i.ToTableTimePartitioningPtrOutputWithContext(context.Background())
}

func (i TableTimePartitioningArgs) ToTableTimePartitioningPtrOutputWithContext(ctx context.Context) TableTimePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTimePartitioningOutput).ToTableTimePartitioningPtrOutputWithContext(ctx)
}

// TableTimePartitioningPtrInput is an input type that accepts TableTimePartitioningArgs, TableTimePartitioningPtr and TableTimePartitioningPtrOutput values.
// You can construct a concrete instance of `TableTimePartitioningPtrInput` via:
//
//	        TableTimePartitioningArgs{...}
//
//	or:
//
//	        nil
type TableTimePartitioningPtrInput interface {
	pulumi.Input

	ToTableTimePartitioningPtrOutput() TableTimePartitioningPtrOutput
	ToTableTimePartitioningPtrOutputWithContext(context.Context) TableTimePartitioningPtrOutput
}

type tableTimePartitioningPtrType TableTimePartitioningArgs

func TableTimePartitioningPtr(v *TableTimePartitioningArgs) TableTimePartitioningPtrInput {
	return (*tableTimePartitioningPtrType)(v)
}

func (*tableTimePartitioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTimePartitioning)(nil)).Elem()
}

func (i *tableTimePartitioningPtrType) ToTableTimePartitioningPtrOutput() TableTimePartitioningPtrOutput {
	return i.ToTableTimePartitioningPtrOutputWithContext(context.Background())
}

func (i *tableTimePartitioningPtrType) ToTableTimePartitioningPtrOutputWithContext(ctx context.Context) TableTimePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTimePartitioningPtrOutput)
}

type TableTimePartitioningOutput struct{ *pulumi.OutputState }

func (TableTimePartitioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTimePartitioning)(nil)).Elem()
}

func (o TableTimePartitioningOutput) ToTableTimePartitioningOutput() TableTimePartitioningOutput {
	return o
}

func (o TableTimePartitioningOutput) ToTableTimePartitioningOutputWithContext(ctx context.Context) TableTimePartitioningOutput {
	return o
}

func (o TableTimePartitioningOutput) ToTableTimePartitioningPtrOutput() TableTimePartitioningPtrOutput {
	return o.ToTableTimePartitioningPtrOutputWithContext(context.Background())
}

func (o TableTimePartitioningOutput) ToTableTimePartitioningPtrOutputWithContext(ctx context.Context) TableTimePartitioningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableTimePartitioning) *TableTimePartitioning {
		return &v
	}).(TableTimePartitioningPtrOutput)
}

// Number of milliseconds for which to keep the
// storage for a partition.
func (o TableTimePartitioningOutput) ExpirationMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableTimePartitioning) *int { return v.ExpirationMs }).(pulumi.IntPtrOutput)
}

// The field used to determine how to create a time-based
// partition. If time-based partitioning is enabled without this value, the
// table is partitioned based on the load time.
func (o TableTimePartitioningOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableTimePartitioning) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// If set to true, queries over this table
// require a partition filter that can be used for partition elimination to be
// specified.
func (o TableTimePartitioningOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableTimePartitioning) *bool { return v.RequirePartitionFilter }).(pulumi.BoolPtrOutput)
}

// The supported types are DAY, HOUR, MONTH, and YEAR,
// which will generate one partition per day, hour, month, and year, respectively.
func (o TableTimePartitioningOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableTimePartitioning) string { return v.Type }).(pulumi.StringOutput)
}

type TableTimePartitioningPtrOutput struct{ *pulumi.OutputState }

func (TableTimePartitioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTimePartitioning)(nil)).Elem()
}

func (o TableTimePartitioningPtrOutput) ToTableTimePartitioningPtrOutput() TableTimePartitioningPtrOutput {
	return o
}

func (o TableTimePartitioningPtrOutput) ToTableTimePartitioningPtrOutputWithContext(ctx context.Context) TableTimePartitioningPtrOutput {
	return o
}

func (o TableTimePartitioningPtrOutput) Elem() TableTimePartitioningOutput {
	return o.ApplyT(func(v *TableTimePartitioning) TableTimePartitioning {
		if v != nil {
			return *v
		}
		var ret TableTimePartitioning
		return ret
	}).(TableTimePartitioningOutput)
}

// Number of milliseconds for which to keep the
// storage for a partition.
func (o TableTimePartitioningPtrOutput) ExpirationMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableTimePartitioning) *int {
		if v == nil {
			return nil
		}
		return v.ExpirationMs
	}).(pulumi.IntPtrOutput)
}

// The field used to determine how to create a time-based
// partition. If time-based partitioning is enabled without this value, the
// table is partitioned based on the load time.
func (o TableTimePartitioningPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableTimePartitioning) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

// If set to true, queries over this table
// require a partition filter that can be used for partition elimination to be
// specified.
func (o TableTimePartitioningPtrOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableTimePartitioning) *bool {
		if v == nil {
			return nil
		}
		return v.RequirePartitionFilter
	}).(pulumi.BoolPtrOutput)
}

// The supported types are DAY, HOUR, MONTH, and YEAR,
// which will generate one partition per day, hour, month, and year, respectively.
func (o TableTimePartitioningPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableTimePartitioning) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type TableView struct {
	// A query that BigQuery executes when the view is referenced.
	Query string `pulumi:"query"`
	// Specifies whether to use BigQuery's legacy SQL for this view.
	// The default value is true. If set to false, the view will use BigQuery's standard SQL.
	UseLegacySql *bool `pulumi:"useLegacySql"`
}

// TableViewInput is an input type that accepts TableViewArgs and TableViewOutput values.
// You can construct a concrete instance of `TableViewInput` via:
//
//	TableViewArgs{...}
type TableViewInput interface {
	pulumi.Input

	ToTableViewOutput() TableViewOutput
	ToTableViewOutputWithContext(context.Context) TableViewOutput
}

type TableViewArgs struct {
	// A query that BigQuery executes when the view is referenced.
	Query pulumi.StringInput `pulumi:"query"`
	// Specifies whether to use BigQuery's legacy SQL for this view.
	// The default value is true. If set to false, the view will use BigQuery's standard SQL.
	UseLegacySql pulumi.BoolPtrInput `pulumi:"useLegacySql"`
}

func (TableViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableView)(nil)).Elem()
}

func (i TableViewArgs) ToTableViewOutput() TableViewOutput {
	return i.ToTableViewOutputWithContext(context.Background())
}

func (i TableViewArgs) ToTableViewOutputWithContext(ctx context.Context) TableViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableViewOutput)
}

func (i TableViewArgs) ToTableViewPtrOutput() TableViewPtrOutput {
	return i.ToTableViewPtrOutputWithContext(context.Background())
}

func (i TableViewArgs) ToTableViewPtrOutputWithContext(ctx context.Context) TableViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableViewOutput).ToTableViewPtrOutputWithContext(ctx)
}

// TableViewPtrInput is an input type that accepts TableViewArgs, TableViewPtr and TableViewPtrOutput values.
// You can construct a concrete instance of `TableViewPtrInput` via:
//
//	        TableViewArgs{...}
//
//	or:
//
//	        nil
type TableViewPtrInput interface {
	pulumi.Input

	ToTableViewPtrOutput() TableViewPtrOutput
	ToTableViewPtrOutputWithContext(context.Context) TableViewPtrOutput
}

type tableViewPtrType TableViewArgs

func TableViewPtr(v *TableViewArgs) TableViewPtrInput {
	return (*tableViewPtrType)(v)
}

func (*tableViewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableView)(nil)).Elem()
}

func (i *tableViewPtrType) ToTableViewPtrOutput() TableViewPtrOutput {
	return i.ToTableViewPtrOutputWithContext(context.Background())
}

func (i *tableViewPtrType) ToTableViewPtrOutputWithContext(ctx context.Context) TableViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableViewPtrOutput)
}

type TableViewOutput struct{ *pulumi.OutputState }

func (TableViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableView)(nil)).Elem()
}

func (o TableViewOutput) ToTableViewOutput() TableViewOutput {
	return o
}

func (o TableViewOutput) ToTableViewOutputWithContext(ctx context.Context) TableViewOutput {
	return o
}

func (o TableViewOutput) ToTableViewPtrOutput() TableViewPtrOutput {
	return o.ToTableViewPtrOutputWithContext(context.Background())
}

func (o TableViewOutput) ToTableViewPtrOutputWithContext(ctx context.Context) TableViewPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableView) *TableView {
		return &v
	}).(TableViewPtrOutput)
}

// A query that BigQuery executes when the view is referenced.
func (o TableViewOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v TableView) string { return v.Query }).(pulumi.StringOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view.
// The default value is true. If set to false, the view will use BigQuery's standard SQL.
func (o TableViewOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableView) *bool { return v.UseLegacySql }).(pulumi.BoolPtrOutput)
}

type TableViewPtrOutput struct{ *pulumi.OutputState }

func (TableViewPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableView)(nil)).Elem()
}

func (o TableViewPtrOutput) ToTableViewPtrOutput() TableViewPtrOutput {
	return o
}

func (o TableViewPtrOutput) ToTableViewPtrOutputWithContext(ctx context.Context) TableViewPtrOutput {
	return o
}

func (o TableViewPtrOutput) Elem() TableViewOutput {
	return o.ApplyT(func(v *TableView) TableView {
		if v != nil {
			return *v
		}
		var ret TableView
		return ret
	}).(TableViewOutput)
}

// A query that BigQuery executes when the view is referenced.
func (o TableViewPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableView) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view.
// The default value is true. If set to false, the view will use BigQuery's standard SQL.
func (o TableViewPtrOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableView) *bool {
		if v == nil {
			return nil
		}
		return v.UseLegacySql
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppProfileSingleClusterRoutingInput)(nil)).Elem(), AppProfileSingleClusterRoutingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppProfileSingleClusterRoutingPtrInput)(nil)).Elem(), AppProfileSingleClusterRoutingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionAwsInput)(nil)).Elem(), ConnectionAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionAwsPtrInput)(nil)).Elem(), ConnectionAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionAwsAccessRoleInput)(nil)).Elem(), ConnectionAwsAccessRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionAwsAccessRolePtrInput)(nil)).Elem(), ConnectionAwsAccessRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionAzureInput)(nil)).Elem(), ConnectionAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionAzurePtrInput)(nil)).Elem(), ConnectionAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionCloudResourceInput)(nil)).Elem(), ConnectionCloudResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionCloudResourcePtrInput)(nil)).Elem(), ConnectionCloudResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionCloudSpannerInput)(nil)).Elem(), ConnectionCloudSpannerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionCloudSpannerPtrInput)(nil)).Elem(), ConnectionCloudSpannerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionCloudSqlInput)(nil)).Elem(), ConnectionCloudSqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionCloudSqlPtrInput)(nil)).Elem(), ConnectionCloudSqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionCloudSqlCredentialInput)(nil)).Elem(), ConnectionCloudSqlCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionCloudSqlCredentialPtrInput)(nil)).Elem(), ConnectionCloudSqlCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionIamBindingConditionInput)(nil)).Elem(), ConnectionIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionIamBindingConditionPtrInput)(nil)).Elem(), ConnectionIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionIamMemberConditionInput)(nil)).Elem(), ConnectionIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionIamMemberConditionPtrInput)(nil)).Elem(), ConnectionIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataTransferConfigEmailPreferencesInput)(nil)).Elem(), DataTransferConfigEmailPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataTransferConfigEmailPreferencesPtrInput)(nil)).Elem(), DataTransferConfigEmailPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataTransferConfigScheduleOptionsInput)(nil)).Elem(), DataTransferConfigScheduleOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataTransferConfigScheduleOptionsPtrInput)(nil)).Elem(), DataTransferConfigScheduleOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataTransferConfigSensitiveParamsInput)(nil)).Elem(), DataTransferConfigSensitiveParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataTransferConfigSensitiveParamsPtrInput)(nil)).Elem(), DataTransferConfigSensitiveParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessTypeInput)(nil)).Elem(), DatasetAccessTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessTypeArrayInput)(nil)).Elem(), DatasetAccessTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessAuthorizedDatasetInput)(nil)).Elem(), DatasetAccessAuthorizedDatasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessAuthorizedDatasetPtrInput)(nil)).Elem(), DatasetAccessAuthorizedDatasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessAuthorizedDatasetDatasetInput)(nil)).Elem(), DatasetAccessAuthorizedDatasetDatasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessAuthorizedDatasetDatasetPtrInput)(nil)).Elem(), DatasetAccessAuthorizedDatasetDatasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessDatasetInput)(nil)).Elem(), DatasetAccessDatasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessDatasetPtrInput)(nil)).Elem(), DatasetAccessDatasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessDatasetDatasetInput)(nil)).Elem(), DatasetAccessDatasetDatasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessDatasetDatasetPtrInput)(nil)).Elem(), DatasetAccessDatasetDatasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessRoutineInput)(nil)).Elem(), DatasetAccessRoutineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessRoutinePtrInput)(nil)).Elem(), DatasetAccessRoutineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessViewInput)(nil)).Elem(), DatasetAccessViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessViewPtrInput)(nil)).Elem(), DatasetAccessViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetDefaultEncryptionConfigurationInput)(nil)).Elem(), DatasetDefaultEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetDefaultEncryptionConfigurationPtrInput)(nil)).Elem(), DatasetDefaultEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetIamBindingConditionInput)(nil)).Elem(), DatasetIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetIamBindingConditionPtrInput)(nil)).Elem(), DatasetIamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetIamMemberConditionInput)(nil)).Elem(), DatasetIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetIamMemberConditionPtrInput)(nil)).Elem(), DatasetIamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamBindingConditionInput)(nil)).Elem(), IamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamBindingConditionPtrInput)(nil)).Elem(), IamBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamMemberConditionInput)(nil)).Elem(), IamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamMemberConditionPtrInput)(nil)).Elem(), IamMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobCopyInput)(nil)).Elem(), JobCopyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobCopyPtrInput)(nil)).Elem(), JobCopyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobCopyDestinationEncryptionConfigurationInput)(nil)).Elem(), JobCopyDestinationEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobCopyDestinationEncryptionConfigurationPtrInput)(nil)).Elem(), JobCopyDestinationEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobCopyDestinationTableInput)(nil)).Elem(), JobCopyDestinationTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobCopyDestinationTablePtrInput)(nil)).Elem(), JobCopyDestinationTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobCopySourceTableInput)(nil)).Elem(), JobCopySourceTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobCopySourceTableArrayInput)(nil)).Elem(), JobCopySourceTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobExtractInput)(nil)).Elem(), JobExtractArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobExtractPtrInput)(nil)).Elem(), JobExtractArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobExtractSourceModelInput)(nil)).Elem(), JobExtractSourceModelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobExtractSourceModelPtrInput)(nil)).Elem(), JobExtractSourceModelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobExtractSourceTableInput)(nil)).Elem(), JobExtractSourceTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobExtractSourceTablePtrInput)(nil)).Elem(), JobExtractSourceTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobLoadInput)(nil)).Elem(), JobLoadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobLoadPtrInput)(nil)).Elem(), JobLoadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobLoadDestinationEncryptionConfigurationInput)(nil)).Elem(), JobLoadDestinationEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobLoadDestinationEncryptionConfigurationPtrInput)(nil)).Elem(), JobLoadDestinationEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobLoadDestinationTableInput)(nil)).Elem(), JobLoadDestinationTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobLoadDestinationTablePtrInput)(nil)).Elem(), JobLoadDestinationTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobLoadTimePartitioningInput)(nil)).Elem(), JobLoadTimePartitioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobLoadTimePartitioningPtrInput)(nil)).Elem(), JobLoadTimePartitioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueryInput)(nil)).Elem(), JobQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueryPtrInput)(nil)).Elem(), JobQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueryDefaultDatasetInput)(nil)).Elem(), JobQueryDefaultDatasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueryDefaultDatasetPtrInput)(nil)).Elem(), JobQueryDefaultDatasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueryDestinationEncryptionConfigurationInput)(nil)).Elem(), JobQueryDestinationEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueryDestinationEncryptionConfigurationPtrInput)(nil)).Elem(), JobQueryDestinationEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueryDestinationTableInput)(nil)).Elem(), JobQueryDestinationTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueryDestinationTablePtrInput)(nil)).Elem(), JobQueryDestinationTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueryScriptOptionsInput)(nil)).Elem(), JobQueryScriptOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueryScriptOptionsPtrInput)(nil)).Elem(), JobQueryScriptOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueryUserDefinedFunctionResourceInput)(nil)).Elem(), JobQueryUserDefinedFunctionResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueryUserDefinedFunctionResourceArrayInput)(nil)).Elem(), JobQueryUserDefinedFunctionResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobStatusInput)(nil)).Elem(), JobStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobStatusArrayInput)(nil)).Elem(), JobStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobStatusErrorInput)(nil)).Elem(), JobStatusErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobStatusErrorArrayInput)(nil)).Elem(), JobStatusErrorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobStatusErrorResultInput)(nil)).Elem(), JobStatusErrorResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobStatusErrorResultArrayInput)(nil)).Elem(), JobStatusErrorResultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineArgumentInput)(nil)).Elem(), RoutineArgumentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineArgumentArrayInput)(nil)).Elem(), RoutineArgumentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableEncryptionConfigurationInput)(nil)).Elem(), TableEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableEncryptionConfigurationPtrInput)(nil)).Elem(), TableEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableExternalDataConfigurationInput)(nil)).Elem(), TableExternalDataConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableExternalDataConfigurationPtrInput)(nil)).Elem(), TableExternalDataConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableExternalDataConfigurationAvroOptionsInput)(nil)).Elem(), TableExternalDataConfigurationAvroOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableExternalDataConfigurationAvroOptionsPtrInput)(nil)).Elem(), TableExternalDataConfigurationAvroOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableExternalDataConfigurationCsvOptionsInput)(nil)).Elem(), TableExternalDataConfigurationCsvOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableExternalDataConfigurationCsvOptionsPtrInput)(nil)).Elem(), TableExternalDataConfigurationCsvOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableExternalDataConfigurationGoogleSheetsOptionsInput)(nil)).Elem(), TableExternalDataConfigurationGoogleSheetsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableExternalDataConfigurationGoogleSheetsOptionsPtrInput)(nil)).Elem(), TableExternalDataConfigurationGoogleSheetsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableExternalDataConfigurationHivePartitioningOptionsInput)(nil)).Elem(), TableExternalDataConfigurationHivePartitioningOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableExternalDataConfigurationHivePartitioningOptionsPtrInput)(nil)).Elem(), TableExternalDataConfigurationHivePartitioningOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableMaterializedViewInput)(nil)).Elem(), TableMaterializedViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableMaterializedViewPtrInput)(nil)).Elem(), TableMaterializedViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableRangePartitioningInput)(nil)).Elem(), TableRangePartitioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableRangePartitioningPtrInput)(nil)).Elem(), TableRangePartitioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableRangePartitioningRangeInput)(nil)).Elem(), TableRangePartitioningRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableRangePartitioningRangePtrInput)(nil)).Elem(), TableRangePartitioningRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableTimePartitioningInput)(nil)).Elem(), TableTimePartitioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableTimePartitioningPtrInput)(nil)).Elem(), TableTimePartitioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableViewInput)(nil)).Elem(), TableViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableViewPtrInput)(nil)).Elem(), TableViewArgs{})
	pulumi.RegisterOutputType(AppProfileSingleClusterRoutingOutput{})
	pulumi.RegisterOutputType(AppProfileSingleClusterRoutingPtrOutput{})
	pulumi.RegisterOutputType(ConnectionAwsOutput{})
	pulumi.RegisterOutputType(ConnectionAwsPtrOutput{})
	pulumi.RegisterOutputType(ConnectionAwsAccessRoleOutput{})
	pulumi.RegisterOutputType(ConnectionAwsAccessRolePtrOutput{})
	pulumi.RegisterOutputType(ConnectionAzureOutput{})
	pulumi.RegisterOutputType(ConnectionAzurePtrOutput{})
	pulumi.RegisterOutputType(ConnectionCloudResourceOutput{})
	pulumi.RegisterOutputType(ConnectionCloudResourcePtrOutput{})
	pulumi.RegisterOutputType(ConnectionCloudSpannerOutput{})
	pulumi.RegisterOutputType(ConnectionCloudSpannerPtrOutput{})
	pulumi.RegisterOutputType(ConnectionCloudSqlOutput{})
	pulumi.RegisterOutputType(ConnectionCloudSqlPtrOutput{})
	pulumi.RegisterOutputType(ConnectionCloudSqlCredentialOutput{})
	pulumi.RegisterOutputType(ConnectionCloudSqlCredentialPtrOutput{})
	pulumi.RegisterOutputType(ConnectionIamBindingConditionOutput{})
	pulumi.RegisterOutputType(ConnectionIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(ConnectionIamMemberConditionOutput{})
	pulumi.RegisterOutputType(ConnectionIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(DataTransferConfigEmailPreferencesOutput{})
	pulumi.RegisterOutputType(DataTransferConfigEmailPreferencesPtrOutput{})
	pulumi.RegisterOutputType(DataTransferConfigScheduleOptionsOutput{})
	pulumi.RegisterOutputType(DataTransferConfigScheduleOptionsPtrOutput{})
	pulumi.RegisterOutputType(DataTransferConfigSensitiveParamsOutput{})
	pulumi.RegisterOutputType(DataTransferConfigSensitiveParamsPtrOutput{})
	pulumi.RegisterOutputType(DatasetAccessTypeOutput{})
	pulumi.RegisterOutputType(DatasetAccessTypeArrayOutput{})
	pulumi.RegisterOutputType(DatasetAccessAuthorizedDatasetOutput{})
	pulumi.RegisterOutputType(DatasetAccessAuthorizedDatasetPtrOutput{})
	pulumi.RegisterOutputType(DatasetAccessAuthorizedDatasetDatasetOutput{})
	pulumi.RegisterOutputType(DatasetAccessAuthorizedDatasetDatasetPtrOutput{})
	pulumi.RegisterOutputType(DatasetAccessDatasetOutput{})
	pulumi.RegisterOutputType(DatasetAccessDatasetPtrOutput{})
	pulumi.RegisterOutputType(DatasetAccessDatasetDatasetOutput{})
	pulumi.RegisterOutputType(DatasetAccessDatasetDatasetPtrOutput{})
	pulumi.RegisterOutputType(DatasetAccessRoutineOutput{})
	pulumi.RegisterOutputType(DatasetAccessRoutinePtrOutput{})
	pulumi.RegisterOutputType(DatasetAccessViewOutput{})
	pulumi.RegisterOutputType(DatasetAccessViewPtrOutput{})
	pulumi.RegisterOutputType(DatasetDefaultEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(DatasetDefaultEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DatasetIamBindingConditionOutput{})
	pulumi.RegisterOutputType(DatasetIamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(DatasetIamMemberConditionOutput{})
	pulumi.RegisterOutputType(DatasetIamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(IamBindingConditionOutput{})
	pulumi.RegisterOutputType(IamBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(IamMemberConditionOutput{})
	pulumi.RegisterOutputType(IamMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(JobCopyOutput{})
	pulumi.RegisterOutputType(JobCopyPtrOutput{})
	pulumi.RegisterOutputType(JobCopyDestinationEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(JobCopyDestinationEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(JobCopyDestinationTableOutput{})
	pulumi.RegisterOutputType(JobCopyDestinationTablePtrOutput{})
	pulumi.RegisterOutputType(JobCopySourceTableOutput{})
	pulumi.RegisterOutputType(JobCopySourceTableArrayOutput{})
	pulumi.RegisterOutputType(JobExtractOutput{})
	pulumi.RegisterOutputType(JobExtractPtrOutput{})
	pulumi.RegisterOutputType(JobExtractSourceModelOutput{})
	pulumi.RegisterOutputType(JobExtractSourceModelPtrOutput{})
	pulumi.RegisterOutputType(JobExtractSourceTableOutput{})
	pulumi.RegisterOutputType(JobExtractSourceTablePtrOutput{})
	pulumi.RegisterOutputType(JobLoadOutput{})
	pulumi.RegisterOutputType(JobLoadPtrOutput{})
	pulumi.RegisterOutputType(JobLoadDestinationEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(JobLoadDestinationEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(JobLoadDestinationTableOutput{})
	pulumi.RegisterOutputType(JobLoadDestinationTablePtrOutput{})
	pulumi.RegisterOutputType(JobLoadTimePartitioningOutput{})
	pulumi.RegisterOutputType(JobLoadTimePartitioningPtrOutput{})
	pulumi.RegisterOutputType(JobQueryOutput{})
	pulumi.RegisterOutputType(JobQueryPtrOutput{})
	pulumi.RegisterOutputType(JobQueryDefaultDatasetOutput{})
	pulumi.RegisterOutputType(JobQueryDefaultDatasetPtrOutput{})
	pulumi.RegisterOutputType(JobQueryDestinationEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(JobQueryDestinationEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(JobQueryDestinationTableOutput{})
	pulumi.RegisterOutputType(JobQueryDestinationTablePtrOutput{})
	pulumi.RegisterOutputType(JobQueryScriptOptionsOutput{})
	pulumi.RegisterOutputType(JobQueryScriptOptionsPtrOutput{})
	pulumi.RegisterOutputType(JobQueryUserDefinedFunctionResourceOutput{})
	pulumi.RegisterOutputType(JobQueryUserDefinedFunctionResourceArrayOutput{})
	pulumi.RegisterOutputType(JobStatusOutput{})
	pulumi.RegisterOutputType(JobStatusArrayOutput{})
	pulumi.RegisterOutputType(JobStatusErrorOutput{})
	pulumi.RegisterOutputType(JobStatusErrorArrayOutput{})
	pulumi.RegisterOutputType(JobStatusErrorResultOutput{})
	pulumi.RegisterOutputType(JobStatusErrorResultArrayOutput{})
	pulumi.RegisterOutputType(RoutineArgumentOutput{})
	pulumi.RegisterOutputType(RoutineArgumentArrayOutput{})
	pulumi.RegisterOutputType(TableEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(TableEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationAvroOptionsOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationAvroOptionsPtrOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationCsvOptionsOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationCsvOptionsPtrOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationGoogleSheetsOptionsOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationHivePartitioningOptionsOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationHivePartitioningOptionsPtrOutput{})
	pulumi.RegisterOutputType(TableMaterializedViewOutput{})
	pulumi.RegisterOutputType(TableMaterializedViewPtrOutput{})
	pulumi.RegisterOutputType(TableRangePartitioningOutput{})
	pulumi.RegisterOutputType(TableRangePartitioningPtrOutput{})
	pulumi.RegisterOutputType(TableRangePartitioningRangeOutput{})
	pulumi.RegisterOutputType(TableRangePartitioningRangePtrOutput{})
	pulumi.RegisterOutputType(TableTimePartitioningOutput{})
	pulumi.RegisterOutputType(TableTimePartitioningPtrOutput{})
	pulumi.RegisterOutputType(TableViewOutput{})
	pulumi.RegisterOutputType(TableViewPtrOutput{})
}
