// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AppProfileSingleClusterRouting struct {
	// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
	// It is unsafe to send these requests to the same table/row/column in multiple clusters.
	AllowTransactionalWrites *bool `pulumi:"allowTransactionalWrites"`
	// The cluster to which read/write requests should be routed.
	ClusterId string `pulumi:"clusterId"`
}

// AppProfileSingleClusterRoutingInput is an input type that accepts AppProfileSingleClusterRoutingArgs and AppProfileSingleClusterRoutingOutput values.
// You can construct a concrete instance of `AppProfileSingleClusterRoutingInput` via:
//
// 		 AppProfileSingleClusterRoutingArgs{...}
//
type AppProfileSingleClusterRoutingInput interface {
	pulumi.Input

	ToAppProfileSingleClusterRoutingOutput() AppProfileSingleClusterRoutingOutput
	ToAppProfileSingleClusterRoutingOutputWithContext(context.Context) AppProfileSingleClusterRoutingOutput
}

type AppProfileSingleClusterRoutingArgs struct {
	// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
	// It is unsafe to send these requests to the same table/row/column in multiple clusters.
	AllowTransactionalWrites pulumi.BoolPtrInput `pulumi:"allowTransactionalWrites"`
	// The cluster to which read/write requests should be routed.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
}

func (AppProfileSingleClusterRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProfileSingleClusterRouting)(nil)).Elem()
}

func (i AppProfileSingleClusterRoutingArgs) ToAppProfileSingleClusterRoutingOutput() AppProfileSingleClusterRoutingOutput {
	return i.ToAppProfileSingleClusterRoutingOutputWithContext(context.Background())
}

func (i AppProfileSingleClusterRoutingArgs) ToAppProfileSingleClusterRoutingOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProfileSingleClusterRoutingOutput)
}

func (i AppProfileSingleClusterRoutingArgs) ToAppProfileSingleClusterRoutingPtrOutput() AppProfileSingleClusterRoutingPtrOutput {
	return i.ToAppProfileSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (i AppProfileSingleClusterRoutingArgs) ToAppProfileSingleClusterRoutingPtrOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProfileSingleClusterRoutingOutput).ToAppProfileSingleClusterRoutingPtrOutputWithContext(ctx)
}

// AppProfileSingleClusterRoutingPtrInput is an input type that accepts AppProfileSingleClusterRoutingArgs, AppProfileSingleClusterRoutingPtr and AppProfileSingleClusterRoutingPtrOutput values.
// You can construct a concrete instance of `AppProfileSingleClusterRoutingPtrInput` via:
//
// 		 AppProfileSingleClusterRoutingArgs{...}
//
//  or:
//
// 		 nil
//
type AppProfileSingleClusterRoutingPtrInput interface {
	pulumi.Input

	ToAppProfileSingleClusterRoutingPtrOutput() AppProfileSingleClusterRoutingPtrOutput
	ToAppProfileSingleClusterRoutingPtrOutputWithContext(context.Context) AppProfileSingleClusterRoutingPtrOutput
}

type appProfileSingleClusterRoutingPtrType AppProfileSingleClusterRoutingArgs

func AppProfileSingleClusterRoutingPtr(v *AppProfileSingleClusterRoutingArgs) AppProfileSingleClusterRoutingPtrInput {
	return (*appProfileSingleClusterRoutingPtrType)(v)
}

func (*appProfileSingleClusterRoutingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProfileSingleClusterRouting)(nil)).Elem()
}

func (i *appProfileSingleClusterRoutingPtrType) ToAppProfileSingleClusterRoutingPtrOutput() AppProfileSingleClusterRoutingPtrOutput {
	return i.ToAppProfileSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (i *appProfileSingleClusterRoutingPtrType) ToAppProfileSingleClusterRoutingPtrOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProfileSingleClusterRoutingPtrOutput)
}

type AppProfileSingleClusterRoutingOutput struct{ *pulumi.OutputState }

func (AppProfileSingleClusterRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProfileSingleClusterRouting)(nil)).Elem()
}

func (o AppProfileSingleClusterRoutingOutput) ToAppProfileSingleClusterRoutingOutput() AppProfileSingleClusterRoutingOutput {
	return o
}

func (o AppProfileSingleClusterRoutingOutput) ToAppProfileSingleClusterRoutingOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingOutput {
	return o
}

func (o AppProfileSingleClusterRoutingOutput) ToAppProfileSingleClusterRoutingPtrOutput() AppProfileSingleClusterRoutingPtrOutput {
	return o.ToAppProfileSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (o AppProfileSingleClusterRoutingOutput) ToAppProfileSingleClusterRoutingPtrOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingPtrOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRouting) *AppProfileSingleClusterRouting {
		return &v
	}).(AppProfileSingleClusterRoutingPtrOutput)
}

// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
// It is unsafe to send these requests to the same table/row/column in multiple clusters.
func (o AppProfileSingleClusterRoutingOutput) AllowTransactionalWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRouting) *bool { return v.AllowTransactionalWrites }).(pulumi.BoolPtrOutput)
}

// The cluster to which read/write requests should be routed.
func (o AppProfileSingleClusterRoutingOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v AppProfileSingleClusterRouting) string { return v.ClusterId }).(pulumi.StringOutput)
}

type AppProfileSingleClusterRoutingPtrOutput struct{ *pulumi.OutputState }

func (AppProfileSingleClusterRoutingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProfileSingleClusterRouting)(nil)).Elem()
}

func (o AppProfileSingleClusterRoutingPtrOutput) ToAppProfileSingleClusterRoutingPtrOutput() AppProfileSingleClusterRoutingPtrOutput {
	return o
}

func (o AppProfileSingleClusterRoutingPtrOutput) ToAppProfileSingleClusterRoutingPtrOutputWithContext(ctx context.Context) AppProfileSingleClusterRoutingPtrOutput {
	return o
}

func (o AppProfileSingleClusterRoutingPtrOutput) Elem() AppProfileSingleClusterRoutingOutput {
	return o.ApplyT(func(v *AppProfileSingleClusterRouting) AppProfileSingleClusterRouting { return *v }).(AppProfileSingleClusterRoutingOutput)
}

// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
// It is unsafe to send these requests to the same table/row/column in multiple clusters.
func (o AppProfileSingleClusterRoutingPtrOutput) AllowTransactionalWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppProfileSingleClusterRouting) *bool {
		if v == nil {
			return nil
		}
		return v.AllowTransactionalWrites
	}).(pulumi.BoolPtrOutput)
}

// The cluster to which read/write requests should be routed.
func (o AppProfileSingleClusterRoutingPtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppProfileSingleClusterRouting) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterId
	}).(pulumi.StringPtrOutput)
}

type DatasetAccessType struct {
	// A domain to grant access to. Any users signed in with the
	// domain specified will be granted the specified access
	Domain *string `pulumi:"domain"`
	// An email address of a Google Group to grant access to.
	GroupByEmail *string `pulumi:"groupByEmail"`
	// Describes the rights granted to the user specified by the other
	// member of the access object. Primitive, Predefined and custom
	// roles are supported. Predefined roles that have equivalent
	// primitive roles are swapped by the API to their Primitive
	// counterparts, and will show a diff post-create. See
	// [official docs](https://cloud.google.com/bigquery/docs/access-control).
	Role *string `pulumi:"role"`
	// A special group to grant access to. Possible values include:
	SpecialGroup *string `pulumi:"specialGroup"`
	// An email address of a user to grant access to. For example:
	// fred@example.com
	UserByEmail *string `pulumi:"userByEmail"`
	// A view from a different dataset to grant access to. Queries
	// executed against that view will have read access to tables in
	// this dataset. The role field is not required when this field is
	// set. If that view is updated by any user, access to the view
	// needs to be granted again via an update operation.  Structure is documented below.
	View *DatasetAccessView `pulumi:"view"`
}

// DatasetAccessTypeInput is an input type that accepts DatasetAccessTypeArgs and DatasetAccessTypeOutput values.
// You can construct a concrete instance of `DatasetAccessTypeInput` via:
//
// 		 DatasetAccessTypeArgs{...}
//
type DatasetAccessTypeInput interface {
	pulumi.Input

	ToDatasetAccessTypeOutput() DatasetAccessTypeOutput
	ToDatasetAccessTypeOutputWithContext(context.Context) DatasetAccessTypeOutput
}

type DatasetAccessTypeArgs struct {
	// A domain to grant access to. Any users signed in with the
	// domain specified will be granted the specified access
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// An email address of a Google Group to grant access to.
	GroupByEmail pulumi.StringPtrInput `pulumi:"groupByEmail"`
	// Describes the rights granted to the user specified by the other
	// member of the access object. Primitive, Predefined and custom
	// roles are supported. Predefined roles that have equivalent
	// primitive roles are swapped by the API to their Primitive
	// counterparts, and will show a diff post-create. See
	// [official docs](https://cloud.google.com/bigquery/docs/access-control).
	Role pulumi.StringPtrInput `pulumi:"role"`
	// A special group to grant access to. Possible values include:
	SpecialGroup pulumi.StringPtrInput `pulumi:"specialGroup"`
	// An email address of a user to grant access to. For example:
	// fred@example.com
	UserByEmail pulumi.StringPtrInput `pulumi:"userByEmail"`
	// A view from a different dataset to grant access to. Queries
	// executed against that view will have read access to tables in
	// this dataset. The role field is not required when this field is
	// set. If that view is updated by any user, access to the view
	// needs to be granted again via an update operation.  Structure is documented below.
	View DatasetAccessViewPtrInput `pulumi:"view"`
}

func (DatasetAccessTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessType)(nil)).Elem()
}

func (i DatasetAccessTypeArgs) ToDatasetAccessTypeOutput() DatasetAccessTypeOutput {
	return i.ToDatasetAccessTypeOutputWithContext(context.Background())
}

func (i DatasetAccessTypeArgs) ToDatasetAccessTypeOutputWithContext(ctx context.Context) DatasetAccessTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessTypeOutput)
}

// DatasetAccessTypeArrayInput is an input type that accepts DatasetAccessTypeArray and DatasetAccessTypeArrayOutput values.
// You can construct a concrete instance of `DatasetAccessTypeArrayInput` via:
//
// 		 DatasetAccessTypeArray{ DatasetAccessTypeArgs{...} }
//
type DatasetAccessTypeArrayInput interface {
	pulumi.Input

	ToDatasetAccessTypeArrayOutput() DatasetAccessTypeArrayOutput
	ToDatasetAccessTypeArrayOutputWithContext(context.Context) DatasetAccessTypeArrayOutput
}

type DatasetAccessTypeArray []DatasetAccessTypeInput

func (DatasetAccessTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessType)(nil)).Elem()
}

func (i DatasetAccessTypeArray) ToDatasetAccessTypeArrayOutput() DatasetAccessTypeArrayOutput {
	return i.ToDatasetAccessTypeArrayOutputWithContext(context.Background())
}

func (i DatasetAccessTypeArray) ToDatasetAccessTypeArrayOutputWithContext(ctx context.Context) DatasetAccessTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessTypeArrayOutput)
}

type DatasetAccessTypeOutput struct{ *pulumi.OutputState }

func (DatasetAccessTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessType)(nil)).Elem()
}

func (o DatasetAccessTypeOutput) ToDatasetAccessTypeOutput() DatasetAccessTypeOutput {
	return o
}

func (o DatasetAccessTypeOutput) ToDatasetAccessTypeOutputWithContext(ctx context.Context) DatasetAccessTypeOutput {
	return o
}

// A domain to grant access to. Any users signed in with the
// domain specified will be granted the specified access
func (o DatasetAccessTypeOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessType) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// An email address of a Google Group to grant access to.
func (o DatasetAccessTypeOutput) GroupByEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessType) *string { return v.GroupByEmail }).(pulumi.StringPtrOutput)
}

// Describes the rights granted to the user specified by the other
// member of the access object. Primitive, Predefined and custom
// roles are supported. Predefined roles that have equivalent
// primitive roles are swapped by the API to their Primitive
// counterparts, and will show a diff post-create. See
// [official docs](https://cloud.google.com/bigquery/docs/access-control).
func (o DatasetAccessTypeOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessType) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// A special group to grant access to. Possible values include:
func (o DatasetAccessTypeOutput) SpecialGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessType) *string { return v.SpecialGroup }).(pulumi.StringPtrOutput)
}

// An email address of a user to grant access to. For example:
// fred@example.com
func (o DatasetAccessTypeOutput) UserByEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessType) *string { return v.UserByEmail }).(pulumi.StringPtrOutput)
}

// A view from a different dataset to grant access to. Queries
// executed against that view will have read access to tables in
// this dataset. The role field is not required when this field is
// set. If that view is updated by any user, access to the view
// needs to be granted again via an update operation.  Structure is documented below.
func (o DatasetAccessTypeOutput) View() DatasetAccessViewPtrOutput {
	return o.ApplyT(func(v DatasetAccessType) *DatasetAccessView { return v.View }).(DatasetAccessViewPtrOutput)
}

type DatasetAccessTypeArrayOutput struct{ *pulumi.OutputState }

func (DatasetAccessTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessType)(nil)).Elem()
}

func (o DatasetAccessTypeArrayOutput) ToDatasetAccessTypeArrayOutput() DatasetAccessTypeArrayOutput {
	return o
}

func (o DatasetAccessTypeArrayOutput) ToDatasetAccessTypeArrayOutputWithContext(ctx context.Context) DatasetAccessTypeArrayOutput {
	return o
}

func (o DatasetAccessTypeArrayOutput) Index(i pulumi.IntInput) DatasetAccessTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetAccessType {
		return vs[0].([]DatasetAccessType)[vs[1].(int)]
	}).(DatasetAccessTypeOutput)
}

type DatasetAccessView struct {
	// The ID of the dataset containing this table.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId string `pulumi:"projectId"`
	// The ID of the table. The ID must contain only letters (a-z,
	// A-Z), numbers (0-9), or underscores (_). The maximum length
	// is 1,024 characters.
	TableId string `pulumi:"tableId"`
}

// DatasetAccessViewInput is an input type that accepts DatasetAccessViewArgs and DatasetAccessViewOutput values.
// You can construct a concrete instance of `DatasetAccessViewInput` via:
//
// 		 DatasetAccessViewArgs{...}
//
type DatasetAccessViewInput interface {
	pulumi.Input

	ToDatasetAccessViewOutput() DatasetAccessViewOutput
	ToDatasetAccessViewOutputWithContext(context.Context) DatasetAccessViewOutput
}

type DatasetAccessViewArgs struct {
	// The ID of the dataset containing this table.
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	// The ID of the project containing this table.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The ID of the table. The ID must contain only letters (a-z,
	// A-Z), numbers (0-9), or underscores (_). The maximum length
	// is 1,024 characters.
	TableId pulumi.StringInput `pulumi:"tableId"`
}

func (DatasetAccessViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessView)(nil)).Elem()
}

func (i DatasetAccessViewArgs) ToDatasetAccessViewOutput() DatasetAccessViewOutput {
	return i.ToDatasetAccessViewOutputWithContext(context.Background())
}

func (i DatasetAccessViewArgs) ToDatasetAccessViewOutputWithContext(ctx context.Context) DatasetAccessViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessViewOutput)
}

func (i DatasetAccessViewArgs) ToDatasetAccessViewPtrOutput() DatasetAccessViewPtrOutput {
	return i.ToDatasetAccessViewPtrOutputWithContext(context.Background())
}

func (i DatasetAccessViewArgs) ToDatasetAccessViewPtrOutputWithContext(ctx context.Context) DatasetAccessViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessViewOutput).ToDatasetAccessViewPtrOutputWithContext(ctx)
}

// DatasetAccessViewPtrInput is an input type that accepts DatasetAccessViewArgs, DatasetAccessViewPtr and DatasetAccessViewPtrOutput values.
// You can construct a concrete instance of `DatasetAccessViewPtrInput` via:
//
// 		 DatasetAccessViewArgs{...}
//
//  or:
//
// 		 nil
//
type DatasetAccessViewPtrInput interface {
	pulumi.Input

	ToDatasetAccessViewPtrOutput() DatasetAccessViewPtrOutput
	ToDatasetAccessViewPtrOutputWithContext(context.Context) DatasetAccessViewPtrOutput
}

type datasetAccessViewPtrType DatasetAccessViewArgs

func DatasetAccessViewPtr(v *DatasetAccessViewArgs) DatasetAccessViewPtrInput {
	return (*datasetAccessViewPtrType)(v)
}

func (*datasetAccessViewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessView)(nil)).Elem()
}

func (i *datasetAccessViewPtrType) ToDatasetAccessViewPtrOutput() DatasetAccessViewPtrOutput {
	return i.ToDatasetAccessViewPtrOutputWithContext(context.Background())
}

func (i *datasetAccessViewPtrType) ToDatasetAccessViewPtrOutputWithContext(ctx context.Context) DatasetAccessViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessViewPtrOutput)
}

type DatasetAccessViewOutput struct{ *pulumi.OutputState }

func (DatasetAccessViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessView)(nil)).Elem()
}

func (o DatasetAccessViewOutput) ToDatasetAccessViewOutput() DatasetAccessViewOutput {
	return o
}

func (o DatasetAccessViewOutput) ToDatasetAccessViewOutputWithContext(ctx context.Context) DatasetAccessViewOutput {
	return o
}

func (o DatasetAccessViewOutput) ToDatasetAccessViewPtrOutput() DatasetAccessViewPtrOutput {
	return o.ToDatasetAccessViewPtrOutputWithContext(context.Background())
}

func (o DatasetAccessViewOutput) ToDatasetAccessViewPtrOutputWithContext(ctx context.Context) DatasetAccessViewPtrOutput {
	return o.ApplyT(func(v DatasetAccessView) *DatasetAccessView {
		return &v
	}).(DatasetAccessViewPtrOutput)
}

// The ID of the dataset containing this table.
func (o DatasetAccessViewOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessView) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the project containing this table.
func (o DatasetAccessViewOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessView) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The ID of the table. The ID must contain only letters (a-z,
// A-Z), numbers (0-9), or underscores (_). The maximum length
// is 1,024 characters.
func (o DatasetAccessViewOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessView) string { return v.TableId }).(pulumi.StringOutput)
}

type DatasetAccessViewPtrOutput struct{ *pulumi.OutputState }

func (DatasetAccessViewPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessView)(nil)).Elem()
}

func (o DatasetAccessViewPtrOutput) ToDatasetAccessViewPtrOutput() DatasetAccessViewPtrOutput {
	return o
}

func (o DatasetAccessViewPtrOutput) ToDatasetAccessViewPtrOutputWithContext(ctx context.Context) DatasetAccessViewPtrOutput {
	return o
}

func (o DatasetAccessViewPtrOutput) Elem() DatasetAccessViewOutput {
	return o.ApplyT(func(v *DatasetAccessView) DatasetAccessView { return *v }).(DatasetAccessViewOutput)
}

// The ID of the dataset containing this table.
func (o DatasetAccessViewPtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAccessView) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this table.
func (o DatasetAccessViewPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAccessView) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// The ID of the table. The ID must contain only letters (a-z,
// A-Z), numbers (0-9), or underscores (_). The maximum length
// is 1,024 characters.
func (o DatasetAccessViewPtrOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAccessView) *string {
		if v == nil {
			return nil
		}
		return &v.TableId
	}).(pulumi.StringPtrOutput)
}

type DatasetDefaultEncryptionConfiguration struct {
	// Describes the Cloud KMS encryption key that will be used to protect destination
	// BigQuery table. The BigQuery Service Account associated with your project requires
	// access to this encryption key.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// DatasetDefaultEncryptionConfigurationInput is an input type that accepts DatasetDefaultEncryptionConfigurationArgs and DatasetDefaultEncryptionConfigurationOutput values.
// You can construct a concrete instance of `DatasetDefaultEncryptionConfigurationInput` via:
//
// 		 DatasetDefaultEncryptionConfigurationArgs{...}
//
type DatasetDefaultEncryptionConfigurationInput interface {
	pulumi.Input

	ToDatasetDefaultEncryptionConfigurationOutput() DatasetDefaultEncryptionConfigurationOutput
	ToDatasetDefaultEncryptionConfigurationOutputWithContext(context.Context) DatasetDefaultEncryptionConfigurationOutput
}

type DatasetDefaultEncryptionConfigurationArgs struct {
	// Describes the Cloud KMS encryption key that will be used to protect destination
	// BigQuery table. The BigQuery Service Account associated with your project requires
	// access to this encryption key.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (DatasetDefaultEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDefaultEncryptionConfiguration)(nil)).Elem()
}

func (i DatasetDefaultEncryptionConfigurationArgs) ToDatasetDefaultEncryptionConfigurationOutput() DatasetDefaultEncryptionConfigurationOutput {
	return i.ToDatasetDefaultEncryptionConfigurationOutputWithContext(context.Background())
}

func (i DatasetDefaultEncryptionConfigurationArgs) ToDatasetDefaultEncryptionConfigurationOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefaultEncryptionConfigurationOutput)
}

func (i DatasetDefaultEncryptionConfigurationArgs) ToDatasetDefaultEncryptionConfigurationPtrOutput() DatasetDefaultEncryptionConfigurationPtrOutput {
	return i.ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i DatasetDefaultEncryptionConfigurationArgs) ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefaultEncryptionConfigurationOutput).ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(ctx)
}

// DatasetDefaultEncryptionConfigurationPtrInput is an input type that accepts DatasetDefaultEncryptionConfigurationArgs, DatasetDefaultEncryptionConfigurationPtr and DatasetDefaultEncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `DatasetDefaultEncryptionConfigurationPtrInput` via:
//
// 		 DatasetDefaultEncryptionConfigurationArgs{...}
//
//  or:
//
// 		 nil
//
type DatasetDefaultEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToDatasetDefaultEncryptionConfigurationPtrOutput() DatasetDefaultEncryptionConfigurationPtrOutput
	ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(context.Context) DatasetDefaultEncryptionConfigurationPtrOutput
}

type datasetDefaultEncryptionConfigurationPtrType DatasetDefaultEncryptionConfigurationArgs

func DatasetDefaultEncryptionConfigurationPtr(v *DatasetDefaultEncryptionConfigurationArgs) DatasetDefaultEncryptionConfigurationPtrInput {
	return (*datasetDefaultEncryptionConfigurationPtrType)(v)
}

func (*datasetDefaultEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDefaultEncryptionConfiguration)(nil)).Elem()
}

func (i *datasetDefaultEncryptionConfigurationPtrType) ToDatasetDefaultEncryptionConfigurationPtrOutput() DatasetDefaultEncryptionConfigurationPtrOutput {
	return i.ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *datasetDefaultEncryptionConfigurationPtrType) ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefaultEncryptionConfigurationPtrOutput)
}

type DatasetDefaultEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (DatasetDefaultEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDefaultEncryptionConfiguration)(nil)).Elem()
}

func (o DatasetDefaultEncryptionConfigurationOutput) ToDatasetDefaultEncryptionConfigurationOutput() DatasetDefaultEncryptionConfigurationOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationOutput) ToDatasetDefaultEncryptionConfigurationOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationOutput) ToDatasetDefaultEncryptionConfigurationPtrOutput() DatasetDefaultEncryptionConfigurationPtrOutput {
	return o.ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o DatasetDefaultEncryptionConfigurationOutput) ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v DatasetDefaultEncryptionConfiguration) *DatasetDefaultEncryptionConfiguration {
		return &v
	}).(DatasetDefaultEncryptionConfigurationPtrOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect destination
// BigQuery table. The BigQuery Service Account associated with your project requires
// access to this encryption key.
func (o DatasetDefaultEncryptionConfigurationOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDefaultEncryptionConfiguration) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type DatasetDefaultEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DatasetDefaultEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDefaultEncryptionConfiguration)(nil)).Elem()
}

func (o DatasetDefaultEncryptionConfigurationPtrOutput) ToDatasetDefaultEncryptionConfigurationPtrOutput() DatasetDefaultEncryptionConfigurationPtrOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationPtrOutput) ToDatasetDefaultEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DatasetDefaultEncryptionConfigurationPtrOutput {
	return o
}

func (o DatasetDefaultEncryptionConfigurationPtrOutput) Elem() DatasetDefaultEncryptionConfigurationOutput {
	return o.ApplyT(func(v *DatasetDefaultEncryptionConfiguration) DatasetDefaultEncryptionConfiguration { return *v }).(DatasetDefaultEncryptionConfigurationOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect destination
// BigQuery table. The BigQuery Service Account associated with your project requires
// access to this encryption key.
func (o DatasetDefaultEncryptionConfigurationPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDefaultEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

type TableEncryptionConfiguration struct {
	// The self link or full name of a key which should be used to
	// encrypt this table.  Note that the default bigquery service account will need to have
	// encrypt/decrypt permissions on this key - you may want to see the
	// `bigquery.getDefaultServiceAccount` datasource and the
	// `kms.CryptoKeyIAMBinding` resource.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// TableEncryptionConfigurationInput is an input type that accepts TableEncryptionConfigurationArgs and TableEncryptionConfigurationOutput values.
// You can construct a concrete instance of `TableEncryptionConfigurationInput` via:
//
// 		 TableEncryptionConfigurationArgs{...}
//
type TableEncryptionConfigurationInput interface {
	pulumi.Input

	ToTableEncryptionConfigurationOutput() TableEncryptionConfigurationOutput
	ToTableEncryptionConfigurationOutputWithContext(context.Context) TableEncryptionConfigurationOutput
}

type TableEncryptionConfigurationArgs struct {
	// The self link or full name of a key which should be used to
	// encrypt this table.  Note that the default bigquery service account will need to have
	// encrypt/decrypt permissions on this key - you may want to see the
	// `bigquery.getDefaultServiceAccount` datasource and the
	// `kms.CryptoKeyIAMBinding` resource.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (TableEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableEncryptionConfiguration)(nil)).Elem()
}

func (i TableEncryptionConfigurationArgs) ToTableEncryptionConfigurationOutput() TableEncryptionConfigurationOutput {
	return i.ToTableEncryptionConfigurationOutputWithContext(context.Background())
}

func (i TableEncryptionConfigurationArgs) ToTableEncryptionConfigurationOutputWithContext(ctx context.Context) TableEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionConfigurationOutput)
}

func (i TableEncryptionConfigurationArgs) ToTableEncryptionConfigurationPtrOutput() TableEncryptionConfigurationPtrOutput {
	return i.ToTableEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i TableEncryptionConfigurationArgs) ToTableEncryptionConfigurationPtrOutputWithContext(ctx context.Context) TableEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionConfigurationOutput).ToTableEncryptionConfigurationPtrOutputWithContext(ctx)
}

// TableEncryptionConfigurationPtrInput is an input type that accepts TableEncryptionConfigurationArgs, TableEncryptionConfigurationPtr and TableEncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `TableEncryptionConfigurationPtrInput` via:
//
// 		 TableEncryptionConfigurationArgs{...}
//
//  or:
//
// 		 nil
//
type TableEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToTableEncryptionConfigurationPtrOutput() TableEncryptionConfigurationPtrOutput
	ToTableEncryptionConfigurationPtrOutputWithContext(context.Context) TableEncryptionConfigurationPtrOutput
}

type tableEncryptionConfigurationPtrType TableEncryptionConfigurationArgs

func TableEncryptionConfigurationPtr(v *TableEncryptionConfigurationArgs) TableEncryptionConfigurationPtrInput {
	return (*tableEncryptionConfigurationPtrType)(v)
}

func (*tableEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableEncryptionConfiguration)(nil)).Elem()
}

func (i *tableEncryptionConfigurationPtrType) ToTableEncryptionConfigurationPtrOutput() TableEncryptionConfigurationPtrOutput {
	return i.ToTableEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *tableEncryptionConfigurationPtrType) ToTableEncryptionConfigurationPtrOutputWithContext(ctx context.Context) TableEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionConfigurationPtrOutput)
}

type TableEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (TableEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableEncryptionConfiguration)(nil)).Elem()
}

func (o TableEncryptionConfigurationOutput) ToTableEncryptionConfigurationOutput() TableEncryptionConfigurationOutput {
	return o
}

func (o TableEncryptionConfigurationOutput) ToTableEncryptionConfigurationOutputWithContext(ctx context.Context) TableEncryptionConfigurationOutput {
	return o
}

func (o TableEncryptionConfigurationOutput) ToTableEncryptionConfigurationPtrOutput() TableEncryptionConfigurationPtrOutput {
	return o.ToTableEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o TableEncryptionConfigurationOutput) ToTableEncryptionConfigurationPtrOutputWithContext(ctx context.Context) TableEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v TableEncryptionConfiguration) *TableEncryptionConfiguration {
		return &v
	}).(TableEncryptionConfigurationPtrOutput)
}

// The self link or full name of a key which should be used to
// encrypt this table.  Note that the default bigquery service account will need to have
// encrypt/decrypt permissions on this key - you may want to see the
// `bigquery.getDefaultServiceAccount` datasource and the
// `kms.CryptoKeyIAMBinding` resource.
func (o TableEncryptionConfigurationOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v TableEncryptionConfiguration) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type TableEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TableEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableEncryptionConfiguration)(nil)).Elem()
}

func (o TableEncryptionConfigurationPtrOutput) ToTableEncryptionConfigurationPtrOutput() TableEncryptionConfigurationPtrOutput {
	return o
}

func (o TableEncryptionConfigurationPtrOutput) ToTableEncryptionConfigurationPtrOutputWithContext(ctx context.Context) TableEncryptionConfigurationPtrOutput {
	return o
}

func (o TableEncryptionConfigurationPtrOutput) Elem() TableEncryptionConfigurationOutput {
	return o.ApplyT(func(v *TableEncryptionConfiguration) TableEncryptionConfiguration { return *v }).(TableEncryptionConfigurationOutput)
}

// The self link or full name of a key which should be used to
// encrypt this table.  Note that the default bigquery service account will need to have
// encrypt/decrypt permissions on this key - you may want to see the
// `bigquery.getDefaultServiceAccount` datasource and the
// `kms.CryptoKeyIAMBinding` resource.
func (o TableEncryptionConfigurationPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

type TableExternalDataConfiguration struct {
	// - Let BigQuery try to autodetect the schema
	// and format of the table.
	Autodetect bool `pulumi:"autodetect"`
	// The compression type of the data source.
	// Valid values are "NONE" or "GZIP".
	Compression *string `pulumi:"compression"`
	// Additional properties to set if
	// `sourceFormat` is set to "CSV". Structure is documented below.
	CsvOptions *TableExternalDataConfigurationCsvOptions `pulumi:"csvOptions"`
	// Additional options if
	// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
	// documented below.
	GoogleSheetsOptions *TableExternalDataConfigurationGoogleSheetsOptions `pulumi:"googleSheetsOptions"`
	// Indicates if BigQuery should
	// allow extra values that are not represented in the table schema.
	// If true, the extra values are ignored. If false, records with
	// extra columns are treated as bad records, and if there are too
	// many bad records, an invalid error is returned in the job result.
	// The default value is false.
	IgnoreUnknownValues *bool `pulumi:"ignoreUnknownValues"`
	// The maximum number of bad records that
	// BigQuery can ignore when reading data.
	MaxBadRecords *int `pulumi:"maxBadRecords"`
	// The data format. Supported values are:
	// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
	// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
	// the `scopes` must include
	// "https://www.googleapis.com/auth/drive.readonly".
	SourceFormat string `pulumi:"sourceFormat"`
	// A list of the fully-qualified URIs that point to
	// your data in Google Cloud.
	SourceUris []string `pulumi:"sourceUris"`
}

// TableExternalDataConfigurationInput is an input type that accepts TableExternalDataConfigurationArgs and TableExternalDataConfigurationOutput values.
// You can construct a concrete instance of `TableExternalDataConfigurationInput` via:
//
// 		 TableExternalDataConfigurationArgs{...}
//
type TableExternalDataConfigurationInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationOutput() TableExternalDataConfigurationOutput
	ToTableExternalDataConfigurationOutputWithContext(context.Context) TableExternalDataConfigurationOutput
}

type TableExternalDataConfigurationArgs struct {
	// - Let BigQuery try to autodetect the schema
	// and format of the table.
	Autodetect pulumi.BoolInput `pulumi:"autodetect"`
	// The compression type of the data source.
	// Valid values are "NONE" or "GZIP".
	Compression pulumi.StringPtrInput `pulumi:"compression"`
	// Additional properties to set if
	// `sourceFormat` is set to "CSV". Structure is documented below.
	CsvOptions TableExternalDataConfigurationCsvOptionsPtrInput `pulumi:"csvOptions"`
	// Additional options if
	// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
	// documented below.
	GoogleSheetsOptions TableExternalDataConfigurationGoogleSheetsOptionsPtrInput `pulumi:"googleSheetsOptions"`
	// Indicates if BigQuery should
	// allow extra values that are not represented in the table schema.
	// If true, the extra values are ignored. If false, records with
	// extra columns are treated as bad records, and if there are too
	// many bad records, an invalid error is returned in the job result.
	// The default value is false.
	IgnoreUnknownValues pulumi.BoolPtrInput `pulumi:"ignoreUnknownValues"`
	// The maximum number of bad records that
	// BigQuery can ignore when reading data.
	MaxBadRecords pulumi.IntPtrInput `pulumi:"maxBadRecords"`
	// The data format. Supported values are:
	// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
	// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
	// the `scopes` must include
	// "https://www.googleapis.com/auth/drive.readonly".
	SourceFormat pulumi.StringInput `pulumi:"sourceFormat"`
	// A list of the fully-qualified URIs that point to
	// your data in Google Cloud.
	SourceUris pulumi.StringArrayInput `pulumi:"sourceUris"`
}

func (TableExternalDataConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfiguration)(nil)).Elem()
}

func (i TableExternalDataConfigurationArgs) ToTableExternalDataConfigurationOutput() TableExternalDataConfigurationOutput {
	return i.ToTableExternalDataConfigurationOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationArgs) ToTableExternalDataConfigurationOutputWithContext(ctx context.Context) TableExternalDataConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationOutput)
}

func (i TableExternalDataConfigurationArgs) ToTableExternalDataConfigurationPtrOutput() TableExternalDataConfigurationPtrOutput {
	return i.ToTableExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationArgs) ToTableExternalDataConfigurationPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationOutput).ToTableExternalDataConfigurationPtrOutputWithContext(ctx)
}

// TableExternalDataConfigurationPtrInput is an input type that accepts TableExternalDataConfigurationArgs, TableExternalDataConfigurationPtr and TableExternalDataConfigurationPtrOutput values.
// You can construct a concrete instance of `TableExternalDataConfigurationPtrInput` via:
//
// 		 TableExternalDataConfigurationArgs{...}
//
//  or:
//
// 		 nil
//
type TableExternalDataConfigurationPtrInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationPtrOutput() TableExternalDataConfigurationPtrOutput
	ToTableExternalDataConfigurationPtrOutputWithContext(context.Context) TableExternalDataConfigurationPtrOutput
}

type tableExternalDataConfigurationPtrType TableExternalDataConfigurationArgs

func TableExternalDataConfigurationPtr(v *TableExternalDataConfigurationArgs) TableExternalDataConfigurationPtrInput {
	return (*tableExternalDataConfigurationPtrType)(v)
}

func (*tableExternalDataConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfiguration)(nil)).Elem()
}

func (i *tableExternalDataConfigurationPtrType) ToTableExternalDataConfigurationPtrOutput() TableExternalDataConfigurationPtrOutput {
	return i.ToTableExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (i *tableExternalDataConfigurationPtrType) ToTableExternalDataConfigurationPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationPtrOutput)
}

type TableExternalDataConfigurationOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfiguration)(nil)).Elem()
}

func (o TableExternalDataConfigurationOutput) ToTableExternalDataConfigurationOutput() TableExternalDataConfigurationOutput {
	return o
}

func (o TableExternalDataConfigurationOutput) ToTableExternalDataConfigurationOutputWithContext(ctx context.Context) TableExternalDataConfigurationOutput {
	return o
}

func (o TableExternalDataConfigurationOutput) ToTableExternalDataConfigurationPtrOutput() TableExternalDataConfigurationPtrOutput {
	return o.ToTableExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (o TableExternalDataConfigurationOutput) ToTableExternalDataConfigurationPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *TableExternalDataConfiguration {
		return &v
	}).(TableExternalDataConfigurationPtrOutput)
}

// - Let BigQuery try to autodetect the schema
// and format of the table.
func (o TableExternalDataConfigurationOutput) Autodetect() pulumi.BoolOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) bool { return v.Autodetect }).(pulumi.BoolOutput)
}

// The compression type of the data source.
// Valid values are "NONE" or "GZIP".
func (o TableExternalDataConfigurationOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *string { return v.Compression }).(pulumi.StringPtrOutput)
}

// Additional properties to set if
// `sourceFormat` is set to "CSV". Structure is documented below.
func (o TableExternalDataConfigurationOutput) CsvOptions() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *TableExternalDataConfigurationCsvOptions { return v.CsvOptions }).(TableExternalDataConfigurationCsvOptionsPtrOutput)
}

// Additional options if
// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
// documented below.
func (o TableExternalDataConfigurationOutput) GoogleSheetsOptions() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *TableExternalDataConfigurationGoogleSheetsOptions {
		return v.GoogleSheetsOptions
	}).(TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput)
}

// Indicates if BigQuery should
// allow extra values that are not represented in the table schema.
// If true, the extra values are ignored. If false, records with
// extra columns are treated as bad records, and if there are too
// many bad records, an invalid error is returned in the job result.
// The default value is false.
func (o TableExternalDataConfigurationOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *bool { return v.IgnoreUnknownValues }).(pulumi.BoolPtrOutput)
}

// The maximum number of bad records that
// BigQuery can ignore when reading data.
func (o TableExternalDataConfigurationOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) *int { return v.MaxBadRecords }).(pulumi.IntPtrOutput)
}

// The data format. Supported values are:
// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
// the `scopes` must include
// "https://www.googleapis.com/auth/drive.readonly".
func (o TableExternalDataConfigurationOutput) SourceFormat() pulumi.StringOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) string { return v.SourceFormat }).(pulumi.StringOutput)
}

// A list of the fully-qualified URIs that point to
// your data in Google Cloud.
func (o TableExternalDataConfigurationOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableExternalDataConfiguration) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

type TableExternalDataConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfiguration)(nil)).Elem()
}

func (o TableExternalDataConfigurationPtrOutput) ToTableExternalDataConfigurationPtrOutput() TableExternalDataConfigurationPtrOutput {
	return o
}

func (o TableExternalDataConfigurationPtrOutput) ToTableExternalDataConfigurationPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationPtrOutput {
	return o
}

func (o TableExternalDataConfigurationPtrOutput) Elem() TableExternalDataConfigurationOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) TableExternalDataConfiguration { return *v }).(TableExternalDataConfigurationOutput)
}

// - Let BigQuery try to autodetect the schema
// and format of the table.
func (o TableExternalDataConfigurationPtrOutput) Autodetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.Autodetect
	}).(pulumi.BoolPtrOutput)
}

// The compression type of the data source.
// Valid values are "NONE" or "GZIP".
func (o TableExternalDataConfigurationPtrOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(pulumi.StringPtrOutput)
}

// Additional properties to set if
// `sourceFormat` is set to "CSV". Structure is documented below.
func (o TableExternalDataConfigurationPtrOutput) CsvOptions() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *TableExternalDataConfigurationCsvOptions {
		if v == nil {
			return nil
		}
		return v.CsvOptions
	}).(TableExternalDataConfigurationCsvOptionsPtrOutput)
}

// Additional options if
// `sourceFormat` is set to "GOOGLE_SHEETS". Structure is
// documented below.
func (o TableExternalDataConfigurationPtrOutput) GoogleSheetsOptions() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *TableExternalDataConfigurationGoogleSheetsOptions {
		if v == nil {
			return nil
		}
		return v.GoogleSheetsOptions
	}).(TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput)
}

// Indicates if BigQuery should
// allow extra values that are not represented in the table schema.
// If true, the extra values are ignored. If false, records with
// extra columns are treated as bad records, and if there are too
// many bad records, an invalid error is returned in the job result.
// The default value is false.
func (o TableExternalDataConfigurationPtrOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreUnknownValues
	}).(pulumi.BoolPtrOutput)
}

// The maximum number of bad records that
// BigQuery can ignore when reading data.
func (o TableExternalDataConfigurationPtrOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxBadRecords
	}).(pulumi.IntPtrOutput)
}

// The data format. Supported values are:
// "CSV", "GOOGLE_SHEETS", "NEWLINE_DELIMITED_JSON", "AVRO", "PARQUET",
// and "DATSTORE_BACKUP". To use "GOOGLE_SHEETS"
// the `scopes` must include
// "https://www.googleapis.com/auth/drive.readonly".
func (o TableExternalDataConfigurationPtrOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.SourceFormat
	}).(pulumi.StringPtrOutput)
}

// A list of the fully-qualified URIs that point to
// your data in Google Cloud.
func (o TableExternalDataConfigurationPtrOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableExternalDataConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SourceUris
	}).(pulumi.StringArrayOutput)
}

type TableExternalDataConfigurationCsvOptions struct {
	// Indicates if BigQuery should accept rows
	// that are missing trailing optional columns.
	AllowJaggedRows *bool `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow
	// quoted data sections that contain newline characters in a CSV file.
	// The default value is false.
	AllowQuotedNewlines *bool `pulumi:"allowQuotedNewlines"`
	// The character encoding of the data. The supported
	// values are UTF-8 or ISO-8859-1.
	Encoding *string `pulumi:"encoding"`
	// The separator for fields in a CSV file.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The value that is used to quote data sections in a
	// CSV file. If your data does not contain quoted sections, set the
	// property value to an empty string. If your data contains quoted newline
	// characters, you must also set the `allowQuotedNewlines` property to true.
	// The API-side default is `"`, specified in the provider escaped as `\"`. Due to
	// limitations with default values, this value is required to be
	// explicitly set.
	Quote string `pulumi:"quote"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows *int `pulumi:"skipLeadingRows"`
}

// TableExternalDataConfigurationCsvOptionsInput is an input type that accepts TableExternalDataConfigurationCsvOptionsArgs and TableExternalDataConfigurationCsvOptionsOutput values.
// You can construct a concrete instance of `TableExternalDataConfigurationCsvOptionsInput` via:
//
// 		 TableExternalDataConfigurationCsvOptionsArgs{...}
//
type TableExternalDataConfigurationCsvOptionsInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationCsvOptionsOutput() TableExternalDataConfigurationCsvOptionsOutput
	ToTableExternalDataConfigurationCsvOptionsOutputWithContext(context.Context) TableExternalDataConfigurationCsvOptionsOutput
}

type TableExternalDataConfigurationCsvOptionsArgs struct {
	// Indicates if BigQuery should accept rows
	// that are missing trailing optional columns.
	AllowJaggedRows pulumi.BoolPtrInput `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow
	// quoted data sections that contain newline characters in a CSV file.
	// The default value is false.
	AllowQuotedNewlines pulumi.BoolPtrInput `pulumi:"allowQuotedNewlines"`
	// The character encoding of the data. The supported
	// values are UTF-8 or ISO-8859-1.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The separator for fields in a CSV file.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The value that is used to quote data sections in a
	// CSV file. If your data does not contain quoted sections, set the
	// property value to an empty string. If your data contains quoted newline
	// characters, you must also set the `allowQuotedNewlines` property to true.
	// The API-side default is `"`, specified in the provider escaped as `\"`. Due to
	// limitations with default values, this value is required to be
	// explicitly set.
	Quote pulumi.StringInput `pulumi:"quote"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows pulumi.IntPtrInput `pulumi:"skipLeadingRows"`
}

func (TableExternalDataConfigurationCsvOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationCsvOptions)(nil)).Elem()
}

func (i TableExternalDataConfigurationCsvOptionsArgs) ToTableExternalDataConfigurationCsvOptionsOutput() TableExternalDataConfigurationCsvOptionsOutput {
	return i.ToTableExternalDataConfigurationCsvOptionsOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationCsvOptionsArgs) ToTableExternalDataConfigurationCsvOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationCsvOptionsOutput)
}

func (i TableExternalDataConfigurationCsvOptionsArgs) ToTableExternalDataConfigurationCsvOptionsPtrOutput() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationCsvOptionsArgs) ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationCsvOptionsOutput).ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(ctx)
}

// TableExternalDataConfigurationCsvOptionsPtrInput is an input type that accepts TableExternalDataConfigurationCsvOptionsArgs, TableExternalDataConfigurationCsvOptionsPtr and TableExternalDataConfigurationCsvOptionsPtrOutput values.
// You can construct a concrete instance of `TableExternalDataConfigurationCsvOptionsPtrInput` via:
//
// 		 TableExternalDataConfigurationCsvOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type TableExternalDataConfigurationCsvOptionsPtrInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationCsvOptionsPtrOutput() TableExternalDataConfigurationCsvOptionsPtrOutput
	ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(context.Context) TableExternalDataConfigurationCsvOptionsPtrOutput
}

type tableExternalDataConfigurationCsvOptionsPtrType TableExternalDataConfigurationCsvOptionsArgs

func TableExternalDataConfigurationCsvOptionsPtr(v *TableExternalDataConfigurationCsvOptionsArgs) TableExternalDataConfigurationCsvOptionsPtrInput {
	return (*tableExternalDataConfigurationCsvOptionsPtrType)(v)
}

func (*tableExternalDataConfigurationCsvOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationCsvOptions)(nil)).Elem()
}

func (i *tableExternalDataConfigurationCsvOptionsPtrType) ToTableExternalDataConfigurationCsvOptionsPtrOutput() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(context.Background())
}

func (i *tableExternalDataConfigurationCsvOptionsPtrType) ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationCsvOptionsPtrOutput)
}

type TableExternalDataConfigurationCsvOptionsOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationCsvOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationCsvOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationCsvOptionsOutput) ToTableExternalDataConfigurationCsvOptionsOutput() TableExternalDataConfigurationCsvOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationCsvOptionsOutput) ToTableExternalDataConfigurationCsvOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationCsvOptionsOutput) ToTableExternalDataConfigurationCsvOptionsPtrOutput() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o.ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(context.Background())
}

func (o TableExternalDataConfigurationCsvOptionsOutput) ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *TableExternalDataConfigurationCsvOptions {
		return &v
	}).(TableExternalDataConfigurationCsvOptionsPtrOutput)
}

// Indicates if BigQuery should accept rows
// that are missing trailing optional columns.
func (o TableExternalDataConfigurationCsvOptionsOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *bool { return v.AllowJaggedRows }).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow
// quoted data sections that contain newline characters in a CSV file.
// The default value is false.
func (o TableExternalDataConfigurationCsvOptionsOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *bool { return v.AllowQuotedNewlines }).(pulumi.BoolPtrOutput)
}

// The character encoding of the data. The supported
// values are UTF-8 or ISO-8859-1.
func (o TableExternalDataConfigurationCsvOptionsOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The separator for fields in a CSV file.
func (o TableExternalDataConfigurationCsvOptionsOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The value that is used to quote data sections in a
// CSV file. If your data does not contain quoted sections, set the
// property value to an empty string. If your data contains quoted newline
// characters, you must also set the `allowQuotedNewlines` property to true.
// The API-side default is `"`, specified in the provider escaped as `\"`. Due to
// limitations with default values, this value is required to be
// explicitly set.
func (o TableExternalDataConfigurationCsvOptionsOutput) Quote() pulumi.StringOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) string { return v.Quote }).(pulumi.StringOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationCsvOptionsOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationCsvOptions) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationCsvOptionsPtrOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationCsvOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationCsvOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationCsvOptionsPtrOutput) ToTableExternalDataConfigurationCsvOptionsPtrOutput() TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationCsvOptionsPtrOutput) ToTableExternalDataConfigurationCsvOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationCsvOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationCsvOptionsPtrOutput) Elem() TableExternalDataConfigurationCsvOptionsOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationCsvOptions) TableExternalDataConfigurationCsvOptions { return *v }).(TableExternalDataConfigurationCsvOptionsOutput)
}

// Indicates if BigQuery should accept rows
// that are missing trailing optional columns.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationCsvOptions) *bool {
		if v == nil {
			return nil
		}
		return v.AllowJaggedRows
	}).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow
// quoted data sections that contain newline characters in a CSV file.
// The default value is false.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationCsvOptions) *bool {
		if v == nil {
			return nil
		}
		return v.AllowQuotedNewlines
	}).(pulumi.BoolPtrOutput)
}

// The character encoding of the data. The supported
// values are UTF-8 or ISO-8859-1.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationCsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// The separator for fields in a CSV file.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationCsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// The value that is used to quote data sections in a
// CSV file. If your data does not contain quoted sections, set the
// property value to an empty string. If your data contains quoted newline
// characters, you must also set the `allowQuotedNewlines` property to true.
// The API-side default is `"`, specified in the provider escaped as `\"`. Due to
// limitations with default values, this value is required to be
// explicitly set.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationCsvOptions) *string {
		if v == nil {
			return nil
		}
		return &v.Quote
	}).(pulumi.StringPtrOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationCsvOptionsPtrOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationCsvOptions) *int {
		if v == nil {
			return nil
		}
		return v.SkipLeadingRows
	}).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationGoogleSheetsOptions struct {
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range *string `pulumi:"range"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows *int `pulumi:"skipLeadingRows"`
}

// TableExternalDataConfigurationGoogleSheetsOptionsInput is an input type that accepts TableExternalDataConfigurationGoogleSheetsOptionsArgs and TableExternalDataConfigurationGoogleSheetsOptionsOutput values.
// You can construct a concrete instance of `TableExternalDataConfigurationGoogleSheetsOptionsInput` via:
//
// 		 TableExternalDataConfigurationGoogleSheetsOptionsArgs{...}
//
type TableExternalDataConfigurationGoogleSheetsOptionsInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationGoogleSheetsOptionsOutput() TableExternalDataConfigurationGoogleSheetsOptionsOutput
	ToTableExternalDataConfigurationGoogleSheetsOptionsOutputWithContext(context.Context) TableExternalDataConfigurationGoogleSheetsOptionsOutput
}

type TableExternalDataConfigurationGoogleSheetsOptionsArgs struct {
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range pulumi.StringPtrInput `pulumi:"range"`
	// The number of rows at the top of the sheet
	// that BigQuery will skip when reading the data. At least one of `range` or
	// `skipLeadingRows` must be set.
	SkipLeadingRows pulumi.IntPtrInput `pulumi:"skipLeadingRows"`
}

func (TableExternalDataConfigurationGoogleSheetsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationGoogleSheetsOptions)(nil)).Elem()
}

func (i TableExternalDataConfigurationGoogleSheetsOptionsArgs) ToTableExternalDataConfigurationGoogleSheetsOptionsOutput() TableExternalDataConfigurationGoogleSheetsOptionsOutput {
	return i.ToTableExternalDataConfigurationGoogleSheetsOptionsOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationGoogleSheetsOptionsArgs) ToTableExternalDataConfigurationGoogleSheetsOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationGoogleSheetsOptionsOutput)
}

func (i TableExternalDataConfigurationGoogleSheetsOptionsArgs) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (i TableExternalDataConfigurationGoogleSheetsOptionsArgs) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationGoogleSheetsOptionsOutput).ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(ctx)
}

// TableExternalDataConfigurationGoogleSheetsOptionsPtrInput is an input type that accepts TableExternalDataConfigurationGoogleSheetsOptionsArgs, TableExternalDataConfigurationGoogleSheetsOptionsPtr and TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput values.
// You can construct a concrete instance of `TableExternalDataConfigurationGoogleSheetsOptionsPtrInput` via:
//
// 		 TableExternalDataConfigurationGoogleSheetsOptionsArgs{...}
//
//  or:
//
// 		 nil
//
type TableExternalDataConfigurationGoogleSheetsOptionsPtrInput interface {
	pulumi.Input

	ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput
	ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(context.Context) TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput
}

type tableExternalDataConfigurationGoogleSheetsOptionsPtrType TableExternalDataConfigurationGoogleSheetsOptionsArgs

func TableExternalDataConfigurationGoogleSheetsOptionsPtr(v *TableExternalDataConfigurationGoogleSheetsOptionsArgs) TableExternalDataConfigurationGoogleSheetsOptionsPtrInput {
	return (*tableExternalDataConfigurationGoogleSheetsOptionsPtrType)(v)
}

func (*tableExternalDataConfigurationGoogleSheetsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationGoogleSheetsOptions)(nil)).Elem()
}

func (i *tableExternalDataConfigurationGoogleSheetsOptionsPtrType) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return i.ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (i *tableExternalDataConfigurationGoogleSheetsOptionsPtrType) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput)
}

type TableExternalDataConfigurationGoogleSheetsOptionsOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationGoogleSheetsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableExternalDataConfigurationGoogleSheetsOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsOutput() TableExternalDataConfigurationGoogleSheetsOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsOutput {
	return o
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o.ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationGoogleSheetsOptions) *TableExternalDataConfigurationGoogleSheetsOptions {
		return &v
	}).(TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationGoogleSheetsOptions) *string { return v.Range }).(pulumi.StringPtrOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationGoogleSheetsOptionsOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableExternalDataConfigurationGoogleSheetsOptions) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

type TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput struct{ *pulumi.OutputState }

func (TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableExternalDataConfigurationGoogleSheetsOptions)(nil)).Elem()
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutput() TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) ToTableExternalDataConfigurationGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput {
	return o
}

func (o TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) Elem() TableExternalDataConfigurationGoogleSheetsOptionsOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationGoogleSheetsOptions) TableExternalDataConfigurationGoogleSheetsOptions {
		return *v
	}).(TableExternalDataConfigurationGoogleSheetsOptionsOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationGoogleSheetsOptions) *string {
		if v == nil {
			return nil
		}
		return v.Range
	}).(pulumi.StringPtrOutput)
}

// The number of rows at the top of the sheet
// that BigQuery will skip when reading the data. At least one of `range` or
// `skipLeadingRows` must be set.
func (o TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableExternalDataConfigurationGoogleSheetsOptions) *int {
		if v == nil {
			return nil
		}
		return v.SkipLeadingRows
	}).(pulumi.IntPtrOutput)
}

type TableRangePartitioning struct {
	// The field used to determine how to create a range-based
	// partition.
	Field string `pulumi:"field"`
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range TableRangePartitioningRange `pulumi:"range"`
}

// TableRangePartitioningInput is an input type that accepts TableRangePartitioningArgs and TableRangePartitioningOutput values.
// You can construct a concrete instance of `TableRangePartitioningInput` via:
//
// 		 TableRangePartitioningArgs{...}
//
type TableRangePartitioningInput interface {
	pulumi.Input

	ToTableRangePartitioningOutput() TableRangePartitioningOutput
	ToTableRangePartitioningOutputWithContext(context.Context) TableRangePartitioningOutput
}

type TableRangePartitioningArgs struct {
	// The field used to determine how to create a range-based
	// partition.
	Field pulumi.StringInput `pulumi:"field"`
	// Information required to partition based on ranges.
	// Structure is documented below.
	Range TableRangePartitioningRangeInput `pulumi:"range"`
}

func (TableRangePartitioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioning)(nil)).Elem()
}

func (i TableRangePartitioningArgs) ToTableRangePartitioningOutput() TableRangePartitioningOutput {
	return i.ToTableRangePartitioningOutputWithContext(context.Background())
}

func (i TableRangePartitioningArgs) ToTableRangePartitioningOutputWithContext(ctx context.Context) TableRangePartitioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningOutput)
}

func (i TableRangePartitioningArgs) ToTableRangePartitioningPtrOutput() TableRangePartitioningPtrOutput {
	return i.ToTableRangePartitioningPtrOutputWithContext(context.Background())
}

func (i TableRangePartitioningArgs) ToTableRangePartitioningPtrOutputWithContext(ctx context.Context) TableRangePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningOutput).ToTableRangePartitioningPtrOutputWithContext(ctx)
}

// TableRangePartitioningPtrInput is an input type that accepts TableRangePartitioningArgs, TableRangePartitioningPtr and TableRangePartitioningPtrOutput values.
// You can construct a concrete instance of `TableRangePartitioningPtrInput` via:
//
// 		 TableRangePartitioningArgs{...}
//
//  or:
//
// 		 nil
//
type TableRangePartitioningPtrInput interface {
	pulumi.Input

	ToTableRangePartitioningPtrOutput() TableRangePartitioningPtrOutput
	ToTableRangePartitioningPtrOutputWithContext(context.Context) TableRangePartitioningPtrOutput
}

type tableRangePartitioningPtrType TableRangePartitioningArgs

func TableRangePartitioningPtr(v *TableRangePartitioningArgs) TableRangePartitioningPtrInput {
	return (*tableRangePartitioningPtrType)(v)
}

func (*tableRangePartitioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableRangePartitioning)(nil)).Elem()
}

func (i *tableRangePartitioningPtrType) ToTableRangePartitioningPtrOutput() TableRangePartitioningPtrOutput {
	return i.ToTableRangePartitioningPtrOutputWithContext(context.Background())
}

func (i *tableRangePartitioningPtrType) ToTableRangePartitioningPtrOutputWithContext(ctx context.Context) TableRangePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningPtrOutput)
}

type TableRangePartitioningOutput struct{ *pulumi.OutputState }

func (TableRangePartitioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioning)(nil)).Elem()
}

func (o TableRangePartitioningOutput) ToTableRangePartitioningOutput() TableRangePartitioningOutput {
	return o
}

func (o TableRangePartitioningOutput) ToTableRangePartitioningOutputWithContext(ctx context.Context) TableRangePartitioningOutput {
	return o
}

func (o TableRangePartitioningOutput) ToTableRangePartitioningPtrOutput() TableRangePartitioningPtrOutput {
	return o.ToTableRangePartitioningPtrOutputWithContext(context.Background())
}

func (o TableRangePartitioningOutput) ToTableRangePartitioningPtrOutputWithContext(ctx context.Context) TableRangePartitioningPtrOutput {
	return o.ApplyT(func(v TableRangePartitioning) *TableRangePartitioning {
		return &v
	}).(TableRangePartitioningPtrOutput)
}

// The field used to determine how to create a range-based
// partition.
func (o TableRangePartitioningOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v TableRangePartitioning) string { return v.Field }).(pulumi.StringOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableRangePartitioningOutput) Range() TableRangePartitioningRangeOutput {
	return o.ApplyT(func(v TableRangePartitioning) TableRangePartitioningRange { return v.Range }).(TableRangePartitioningRangeOutput)
}

type TableRangePartitioningPtrOutput struct{ *pulumi.OutputState }

func (TableRangePartitioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableRangePartitioning)(nil)).Elem()
}

func (o TableRangePartitioningPtrOutput) ToTableRangePartitioningPtrOutput() TableRangePartitioningPtrOutput {
	return o
}

func (o TableRangePartitioningPtrOutput) ToTableRangePartitioningPtrOutputWithContext(ctx context.Context) TableRangePartitioningPtrOutput {
	return o
}

func (o TableRangePartitioningPtrOutput) Elem() TableRangePartitioningOutput {
	return o.ApplyT(func(v *TableRangePartitioning) TableRangePartitioning { return *v }).(TableRangePartitioningOutput)
}

// The field used to determine how to create a range-based
// partition.
func (o TableRangePartitioningPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableRangePartitioning) *string {
		if v == nil {
			return nil
		}
		return &v.Field
	}).(pulumi.StringPtrOutput)
}

// Information required to partition based on ranges.
// Structure is documented below.
func (o TableRangePartitioningPtrOutput) Range() TableRangePartitioningRangePtrOutput {
	return o.ApplyT(func(v *TableRangePartitioning) *TableRangePartitioningRange {
		if v == nil {
			return nil
		}
		return &v.Range
	}).(TableRangePartitioningRangePtrOutput)
}

type TableRangePartitioningRange struct {
	// End of the range partitioning, exclusive.
	End int `pulumi:"end"`
	// The width of each range within the partition.
	Interval int `pulumi:"interval"`
	// Start of the range partitioning, inclusive.
	Start int `pulumi:"start"`
}

// TableRangePartitioningRangeInput is an input type that accepts TableRangePartitioningRangeArgs and TableRangePartitioningRangeOutput values.
// You can construct a concrete instance of `TableRangePartitioningRangeInput` via:
//
// 		 TableRangePartitioningRangeArgs{...}
//
type TableRangePartitioningRangeInput interface {
	pulumi.Input

	ToTableRangePartitioningRangeOutput() TableRangePartitioningRangeOutput
	ToTableRangePartitioningRangeOutputWithContext(context.Context) TableRangePartitioningRangeOutput
}

type TableRangePartitioningRangeArgs struct {
	// End of the range partitioning, exclusive.
	End pulumi.IntInput `pulumi:"end"`
	// The width of each range within the partition.
	Interval pulumi.IntInput `pulumi:"interval"`
	// Start of the range partitioning, inclusive.
	Start pulumi.IntInput `pulumi:"start"`
}

func (TableRangePartitioningRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioningRange)(nil)).Elem()
}

func (i TableRangePartitioningRangeArgs) ToTableRangePartitioningRangeOutput() TableRangePartitioningRangeOutput {
	return i.ToTableRangePartitioningRangeOutputWithContext(context.Background())
}

func (i TableRangePartitioningRangeArgs) ToTableRangePartitioningRangeOutputWithContext(ctx context.Context) TableRangePartitioningRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningRangeOutput)
}

func (i TableRangePartitioningRangeArgs) ToTableRangePartitioningRangePtrOutput() TableRangePartitioningRangePtrOutput {
	return i.ToTableRangePartitioningRangePtrOutputWithContext(context.Background())
}

func (i TableRangePartitioningRangeArgs) ToTableRangePartitioningRangePtrOutputWithContext(ctx context.Context) TableRangePartitioningRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningRangeOutput).ToTableRangePartitioningRangePtrOutputWithContext(ctx)
}

// TableRangePartitioningRangePtrInput is an input type that accepts TableRangePartitioningRangeArgs, TableRangePartitioningRangePtr and TableRangePartitioningRangePtrOutput values.
// You can construct a concrete instance of `TableRangePartitioningRangePtrInput` via:
//
// 		 TableRangePartitioningRangeArgs{...}
//
//  or:
//
// 		 nil
//
type TableRangePartitioningRangePtrInput interface {
	pulumi.Input

	ToTableRangePartitioningRangePtrOutput() TableRangePartitioningRangePtrOutput
	ToTableRangePartitioningRangePtrOutputWithContext(context.Context) TableRangePartitioningRangePtrOutput
}

type tableRangePartitioningRangePtrType TableRangePartitioningRangeArgs

func TableRangePartitioningRangePtr(v *TableRangePartitioningRangeArgs) TableRangePartitioningRangePtrInput {
	return (*tableRangePartitioningRangePtrType)(v)
}

func (*tableRangePartitioningRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableRangePartitioningRange)(nil)).Elem()
}

func (i *tableRangePartitioningRangePtrType) ToTableRangePartitioningRangePtrOutput() TableRangePartitioningRangePtrOutput {
	return i.ToTableRangePartitioningRangePtrOutputWithContext(context.Background())
}

func (i *tableRangePartitioningRangePtrType) ToTableRangePartitioningRangePtrOutputWithContext(ctx context.Context) TableRangePartitioningRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRangePartitioningRangePtrOutput)
}

type TableRangePartitioningRangeOutput struct{ *pulumi.OutputState }

func (TableRangePartitioningRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRangePartitioningRange)(nil)).Elem()
}

func (o TableRangePartitioningRangeOutput) ToTableRangePartitioningRangeOutput() TableRangePartitioningRangeOutput {
	return o
}

func (o TableRangePartitioningRangeOutput) ToTableRangePartitioningRangeOutputWithContext(ctx context.Context) TableRangePartitioningRangeOutput {
	return o
}

func (o TableRangePartitioningRangeOutput) ToTableRangePartitioningRangePtrOutput() TableRangePartitioningRangePtrOutput {
	return o.ToTableRangePartitioningRangePtrOutputWithContext(context.Background())
}

func (o TableRangePartitioningRangeOutput) ToTableRangePartitioningRangePtrOutputWithContext(ctx context.Context) TableRangePartitioningRangePtrOutput {
	return o.ApplyT(func(v TableRangePartitioningRange) *TableRangePartitioningRange {
		return &v
	}).(TableRangePartitioningRangePtrOutput)
}

// End of the range partitioning, exclusive.
func (o TableRangePartitioningRangeOutput) End() pulumi.IntOutput {
	return o.ApplyT(func(v TableRangePartitioningRange) int { return v.End }).(pulumi.IntOutput)
}

// The width of each range within the partition.
func (o TableRangePartitioningRangeOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v TableRangePartitioningRange) int { return v.Interval }).(pulumi.IntOutput)
}

// Start of the range partitioning, inclusive.
func (o TableRangePartitioningRangeOutput) Start() pulumi.IntOutput {
	return o.ApplyT(func(v TableRangePartitioningRange) int { return v.Start }).(pulumi.IntOutput)
}

type TableRangePartitioningRangePtrOutput struct{ *pulumi.OutputState }

func (TableRangePartitioningRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableRangePartitioningRange)(nil)).Elem()
}

func (o TableRangePartitioningRangePtrOutput) ToTableRangePartitioningRangePtrOutput() TableRangePartitioningRangePtrOutput {
	return o
}

func (o TableRangePartitioningRangePtrOutput) ToTableRangePartitioningRangePtrOutputWithContext(ctx context.Context) TableRangePartitioningRangePtrOutput {
	return o
}

func (o TableRangePartitioningRangePtrOutput) Elem() TableRangePartitioningRangeOutput {
	return o.ApplyT(func(v *TableRangePartitioningRange) TableRangePartitioningRange { return *v }).(TableRangePartitioningRangeOutput)
}

// End of the range partitioning, exclusive.
func (o TableRangePartitioningRangePtrOutput) End() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableRangePartitioningRange) *int {
		if v == nil {
			return nil
		}
		return &v.End
	}).(pulumi.IntPtrOutput)
}

// The width of each range within the partition.
func (o TableRangePartitioningRangePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableRangePartitioningRange) *int {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.IntPtrOutput)
}

// Start of the range partitioning, inclusive.
func (o TableRangePartitioningRangePtrOutput) Start() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableRangePartitioningRange) *int {
		if v == nil {
			return nil
		}
		return &v.Start
	}).(pulumi.IntPtrOutput)
}

type TableTimePartitioning struct {
	// Number of milliseconds for which to keep the
	// storage for a partition.
	ExpirationMs *int `pulumi:"expirationMs"`
	// The field used to determine how to create a range-based
	// partition.
	Field *string `pulumi:"field"`
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter *bool `pulumi:"requirePartitionFilter"`
	// The only type supported is DAY, which will generate
	// one partition per day based on data loading time.
	Type string `pulumi:"type"`
}

// TableTimePartitioningInput is an input type that accepts TableTimePartitioningArgs and TableTimePartitioningOutput values.
// You can construct a concrete instance of `TableTimePartitioningInput` via:
//
// 		 TableTimePartitioningArgs{...}
//
type TableTimePartitioningInput interface {
	pulumi.Input

	ToTableTimePartitioningOutput() TableTimePartitioningOutput
	ToTableTimePartitioningOutputWithContext(context.Context) TableTimePartitioningOutput
}

type TableTimePartitioningArgs struct {
	// Number of milliseconds for which to keep the
	// storage for a partition.
	ExpirationMs pulumi.IntPtrInput `pulumi:"expirationMs"`
	// The field used to determine how to create a range-based
	// partition.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// If set to true, queries over this table
	// require a partition filter that can be used for partition elimination to be
	// specified.
	RequirePartitionFilter pulumi.BoolPtrInput `pulumi:"requirePartitionFilter"`
	// The only type supported is DAY, which will generate
	// one partition per day based on data loading time.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableTimePartitioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTimePartitioning)(nil)).Elem()
}

func (i TableTimePartitioningArgs) ToTableTimePartitioningOutput() TableTimePartitioningOutput {
	return i.ToTableTimePartitioningOutputWithContext(context.Background())
}

func (i TableTimePartitioningArgs) ToTableTimePartitioningOutputWithContext(ctx context.Context) TableTimePartitioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTimePartitioningOutput)
}

func (i TableTimePartitioningArgs) ToTableTimePartitioningPtrOutput() TableTimePartitioningPtrOutput {
	return i.ToTableTimePartitioningPtrOutputWithContext(context.Background())
}

func (i TableTimePartitioningArgs) ToTableTimePartitioningPtrOutputWithContext(ctx context.Context) TableTimePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTimePartitioningOutput).ToTableTimePartitioningPtrOutputWithContext(ctx)
}

// TableTimePartitioningPtrInput is an input type that accepts TableTimePartitioningArgs, TableTimePartitioningPtr and TableTimePartitioningPtrOutput values.
// You can construct a concrete instance of `TableTimePartitioningPtrInput` via:
//
// 		 TableTimePartitioningArgs{...}
//
//  or:
//
// 		 nil
//
type TableTimePartitioningPtrInput interface {
	pulumi.Input

	ToTableTimePartitioningPtrOutput() TableTimePartitioningPtrOutput
	ToTableTimePartitioningPtrOutputWithContext(context.Context) TableTimePartitioningPtrOutput
}

type tableTimePartitioningPtrType TableTimePartitioningArgs

func TableTimePartitioningPtr(v *TableTimePartitioningArgs) TableTimePartitioningPtrInput {
	return (*tableTimePartitioningPtrType)(v)
}

func (*tableTimePartitioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTimePartitioning)(nil)).Elem()
}

func (i *tableTimePartitioningPtrType) ToTableTimePartitioningPtrOutput() TableTimePartitioningPtrOutput {
	return i.ToTableTimePartitioningPtrOutputWithContext(context.Background())
}

func (i *tableTimePartitioningPtrType) ToTableTimePartitioningPtrOutputWithContext(ctx context.Context) TableTimePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTimePartitioningPtrOutput)
}

type TableTimePartitioningOutput struct{ *pulumi.OutputState }

func (TableTimePartitioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTimePartitioning)(nil)).Elem()
}

func (o TableTimePartitioningOutput) ToTableTimePartitioningOutput() TableTimePartitioningOutput {
	return o
}

func (o TableTimePartitioningOutput) ToTableTimePartitioningOutputWithContext(ctx context.Context) TableTimePartitioningOutput {
	return o
}

func (o TableTimePartitioningOutput) ToTableTimePartitioningPtrOutput() TableTimePartitioningPtrOutput {
	return o.ToTableTimePartitioningPtrOutputWithContext(context.Background())
}

func (o TableTimePartitioningOutput) ToTableTimePartitioningPtrOutputWithContext(ctx context.Context) TableTimePartitioningPtrOutput {
	return o.ApplyT(func(v TableTimePartitioning) *TableTimePartitioning {
		return &v
	}).(TableTimePartitioningPtrOutput)
}

// Number of milliseconds for which to keep the
// storage for a partition.
func (o TableTimePartitioningOutput) ExpirationMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableTimePartitioning) *int { return v.ExpirationMs }).(pulumi.IntPtrOutput)
}

// The field used to determine how to create a range-based
// partition.
func (o TableTimePartitioningOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableTimePartitioning) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// If set to true, queries over this table
// require a partition filter that can be used for partition elimination to be
// specified.
func (o TableTimePartitioningOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableTimePartitioning) *bool { return v.RequirePartitionFilter }).(pulumi.BoolPtrOutput)
}

// The only type supported is DAY, which will generate
// one partition per day based on data loading time.
func (o TableTimePartitioningOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableTimePartitioning) string { return v.Type }).(pulumi.StringOutput)
}

type TableTimePartitioningPtrOutput struct{ *pulumi.OutputState }

func (TableTimePartitioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTimePartitioning)(nil)).Elem()
}

func (o TableTimePartitioningPtrOutput) ToTableTimePartitioningPtrOutput() TableTimePartitioningPtrOutput {
	return o
}

func (o TableTimePartitioningPtrOutput) ToTableTimePartitioningPtrOutputWithContext(ctx context.Context) TableTimePartitioningPtrOutput {
	return o
}

func (o TableTimePartitioningPtrOutput) Elem() TableTimePartitioningOutput {
	return o.ApplyT(func(v *TableTimePartitioning) TableTimePartitioning { return *v }).(TableTimePartitioningOutput)
}

// Number of milliseconds for which to keep the
// storage for a partition.
func (o TableTimePartitioningPtrOutput) ExpirationMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableTimePartitioning) *int {
		if v == nil {
			return nil
		}
		return v.ExpirationMs
	}).(pulumi.IntPtrOutput)
}

// The field used to determine how to create a range-based
// partition.
func (o TableTimePartitioningPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableTimePartitioning) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

// If set to true, queries over this table
// require a partition filter that can be used for partition elimination to be
// specified.
func (o TableTimePartitioningPtrOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableTimePartitioning) *bool {
		if v == nil {
			return nil
		}
		return v.RequirePartitionFilter
	}).(pulumi.BoolPtrOutput)
}

// The only type supported is DAY, which will generate
// one partition per day based on data loading time.
func (o TableTimePartitioningPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableTimePartitioning) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type TableView struct {
	// A query that BigQuery executes when the view is referenced.
	Query string `pulumi:"query"`
	// Specifies whether to use BigQuery's legacy SQL for this view.
	// The default value is true. If set to false, the view will use BigQuery's standard SQL.
	UseLegacySql *bool `pulumi:"useLegacySql"`
}

// TableViewInput is an input type that accepts TableViewArgs and TableViewOutput values.
// You can construct a concrete instance of `TableViewInput` via:
//
// 		 TableViewArgs{...}
//
type TableViewInput interface {
	pulumi.Input

	ToTableViewOutput() TableViewOutput
	ToTableViewOutputWithContext(context.Context) TableViewOutput
}

type TableViewArgs struct {
	// A query that BigQuery executes when the view is referenced.
	Query pulumi.StringInput `pulumi:"query"`
	// Specifies whether to use BigQuery's legacy SQL for this view.
	// The default value is true. If set to false, the view will use BigQuery's standard SQL.
	UseLegacySql pulumi.BoolPtrInput `pulumi:"useLegacySql"`
}

func (TableViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableView)(nil)).Elem()
}

func (i TableViewArgs) ToTableViewOutput() TableViewOutput {
	return i.ToTableViewOutputWithContext(context.Background())
}

func (i TableViewArgs) ToTableViewOutputWithContext(ctx context.Context) TableViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableViewOutput)
}

func (i TableViewArgs) ToTableViewPtrOutput() TableViewPtrOutput {
	return i.ToTableViewPtrOutputWithContext(context.Background())
}

func (i TableViewArgs) ToTableViewPtrOutputWithContext(ctx context.Context) TableViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableViewOutput).ToTableViewPtrOutputWithContext(ctx)
}

// TableViewPtrInput is an input type that accepts TableViewArgs, TableViewPtr and TableViewPtrOutput values.
// You can construct a concrete instance of `TableViewPtrInput` via:
//
// 		 TableViewArgs{...}
//
//  or:
//
// 		 nil
//
type TableViewPtrInput interface {
	pulumi.Input

	ToTableViewPtrOutput() TableViewPtrOutput
	ToTableViewPtrOutputWithContext(context.Context) TableViewPtrOutput
}

type tableViewPtrType TableViewArgs

func TableViewPtr(v *TableViewArgs) TableViewPtrInput {
	return (*tableViewPtrType)(v)
}

func (*tableViewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableView)(nil)).Elem()
}

func (i *tableViewPtrType) ToTableViewPtrOutput() TableViewPtrOutput {
	return i.ToTableViewPtrOutputWithContext(context.Background())
}

func (i *tableViewPtrType) ToTableViewPtrOutputWithContext(ctx context.Context) TableViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableViewPtrOutput)
}

type TableViewOutput struct{ *pulumi.OutputState }

func (TableViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableView)(nil)).Elem()
}

func (o TableViewOutput) ToTableViewOutput() TableViewOutput {
	return o
}

func (o TableViewOutput) ToTableViewOutputWithContext(ctx context.Context) TableViewOutput {
	return o
}

func (o TableViewOutput) ToTableViewPtrOutput() TableViewPtrOutput {
	return o.ToTableViewPtrOutputWithContext(context.Background())
}

func (o TableViewOutput) ToTableViewPtrOutputWithContext(ctx context.Context) TableViewPtrOutput {
	return o.ApplyT(func(v TableView) *TableView {
		return &v
	}).(TableViewPtrOutput)
}

// A query that BigQuery executes when the view is referenced.
func (o TableViewOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v TableView) string { return v.Query }).(pulumi.StringOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view.
// The default value is true. If set to false, the view will use BigQuery's standard SQL.
func (o TableViewOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableView) *bool { return v.UseLegacySql }).(pulumi.BoolPtrOutput)
}

type TableViewPtrOutput struct{ *pulumi.OutputState }

func (TableViewPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableView)(nil)).Elem()
}

func (o TableViewPtrOutput) ToTableViewPtrOutput() TableViewPtrOutput {
	return o
}

func (o TableViewPtrOutput) ToTableViewPtrOutputWithContext(ctx context.Context) TableViewPtrOutput {
	return o
}

func (o TableViewPtrOutput) Elem() TableViewOutput {
	return o.ApplyT(func(v *TableView) TableView { return *v }).(TableViewOutput)
}

// A query that BigQuery executes when the view is referenced.
func (o TableViewPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableView) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view.
// The default value is true. If set to false, the view will use BigQuery's standard SQL.
func (o TableViewPtrOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableView) *bool {
		if v == nil {
			return nil
		}
		return v.UseLegacySql
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AppProfileSingleClusterRoutingOutput{})
	pulumi.RegisterOutputType(AppProfileSingleClusterRoutingPtrOutput{})
	pulumi.RegisterOutputType(DatasetAccessTypeOutput{})
	pulumi.RegisterOutputType(DatasetAccessTypeArrayOutput{})
	pulumi.RegisterOutputType(DatasetAccessViewOutput{})
	pulumi.RegisterOutputType(DatasetAccessViewPtrOutput{})
	pulumi.RegisterOutputType(DatasetDefaultEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(DatasetDefaultEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TableEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(TableEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationCsvOptionsOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationCsvOptionsPtrOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationGoogleSheetsOptionsOutput{})
	pulumi.RegisterOutputType(TableExternalDataConfigurationGoogleSheetsOptionsPtrOutput{})
	pulumi.RegisterOutputType(TableRangePartitioningOutput{})
	pulumi.RegisterOutputType(TableRangePartitioningPtrOutput{})
	pulumi.RegisterOutputType(TableRangePartitioningRangeOutput{})
	pulumi.RegisterOutputType(TableRangePartitioningRangePtrOutput{})
	pulumi.RegisterOutputType(TableTimePartitioningOutput{})
	pulumi.RegisterOutputType(TableTimePartitioningPtrOutput{})
	pulumi.RegisterOutputType(TableViewOutput{})
	pulumi.RegisterOutputType(TableViewPtrOutput{})
}
