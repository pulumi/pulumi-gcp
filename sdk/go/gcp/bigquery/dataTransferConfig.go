// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Bigquerydatatransfer Config Scheduled Query
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/bigquery"
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		project, err := organizations.LookupProject(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		permissions, err := projects.NewIAMMember(ctx, "permissions", &projects.IAMMemberArgs{
// 			Project: pulumi.String(project.ProjectId),
// 			Role:    pulumi.String("roles/iam.serviceAccountShortTermTokenMinter"),
// 			Member:  pulumi.String(fmt.Sprintf("%v%v%v", "serviceAccount:service-", project.Number, "@gcp-sa-bigquerydatatransfer.iam.gserviceaccount.com")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		myDataset, err := bigquery.NewDataset(ctx, "myDataset", &bigquery.DatasetArgs{
// 			DatasetId:    pulumi.String("my_dataset"),
// 			FriendlyName: pulumi.String("foo"),
// 			Description:  pulumi.String("bar"),
// 			Location:     pulumi.String("asia-northeast1"),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			permissions,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = bigquery.NewDataTransferConfig(ctx, "queryConfig", &bigquery.DataTransferConfigArgs{
// 			DisplayName:          pulumi.String("my-query"),
// 			Location:             pulumi.String("asia-northeast1"),
// 			DataSourceId:         pulumi.String("scheduled_query"),
// 			Schedule:             pulumi.String("first sunday of quarter 00:00"),
// 			DestinationDatasetId: myDataset.DatasetId,
// 			Params: pulumi.StringMap{
// 				"destination_table_name_template": pulumi.String("my_table"),
// 				"write_disposition":               pulumi.String("WRITE_APPEND"),
// 				"query":                           pulumi.String("SELECT name FROM tabl WHERE x = 'y'"),
// 			},
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			permissions,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Config can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:bigquery/dataTransferConfig:DataTransferConfig default {{name}}
// ```
type DataTransferConfig struct {
	pulumi.CustomResourceState

	// The number of days to look back to automatically refresh the data.
	// For example, if dataRefreshWindowDays = 10, then every day BigQuery
	// reingests data for [today-10, today-1], rather than ingesting data for
	// just [today-1]. Only valid if the data source supports the feature.
	// Set the value to 0 to use the default value.
	DataRefreshWindowDays pulumi.IntPtrOutput `pulumi:"dataRefreshWindowDays"`
	// The data source id. Cannot be changed once the transfer config is created.
	DataSourceId pulumi.StringOutput `pulumi:"dataSourceId"`
	// The BigQuery target dataset id.
	DestinationDatasetId pulumi.StringPtrOutput `pulumi:"destinationDatasetId"`
	// When set to true, no runs are scheduled for a given transfer.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// The user specified display name for the transfer config.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Email notifications will be sent according to these preferences to the
	// email address of the user who owns this transfer config.
	// Structure is documented below.
	EmailPreferences DataTransferConfigEmailPreferencesPtrOutput `pulumi:"emailPreferences"`
	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The resource name of the transfer config. Transfer config names have the form
	// projects/{projectId}/locations/{location}/transferConfigs/{configId}. Where configId is usually a uuid, but this is not
	// required. The name is ignored when creating a transfer config.
	Name pulumi.StringOutput `pulumi:"name"`
	// Pub/Sub topic where notifications will be sent after transfer runs
	// associated with this transfer config finish.
	NotificationPubsubTopic pulumi.StringPtrOutput `pulumi:"notificationPubsubTopic"`
	// Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer'
	// section for each data source. For example the parameters for Cloud Storage transfers are listed here:
	// https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
	Params pulumi.StringMapOutput `pulumi:"params"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Data transfer schedule. If the data source does not support a custom
	// schedule, this should be empty. If it is empty, the default value for
	// the data source will be used. The specified times are in UTC. Examples
	// of valid format: 1st,3rd monday of month 15:30, every wed,fri of jan,
	// jun 13:15, and first sunday of quarter 00:00. See more explanation
	// about the format here:
	// https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
	// NOTE: the granularity should be at least 8 hours, or less frequent.
	Schedule pulumi.StringPtrOutput `pulumi:"schedule"`
	// Options customizing the data transfer schedule.
	// Structure is documented below.
	ScheduleOptions DataTransferConfigScheduleOptionsPtrOutput `pulumi:"scheduleOptions"`
	// Different parameters are configured primarily using the the `params` field on this
	// resource. This block contains the parameters which contain secrets or passwords so that they can be marked
	// sensitive and hidden from plan output. The name of the field, eg: secret_access_key, will be the key
	// in the `params` map in the api request.
	// Credentials may not be specified in both locations and will cause an error. Changing from one location
	// to a different credential configuration in the config will require an apply to update state.
	// Structure is documented below.
	SensitiveParams DataTransferConfigSensitiveParamsPtrOutput `pulumi:"sensitiveParams"`
	// Service account email. If this field is set, transfer config will
	// be created with this service account credentials. It requires that
	// requesting user calling this API has permissions to act as this service account.
	ServiceAccountName pulumi.StringPtrOutput `pulumi:"serviceAccountName"`
}

// NewDataTransferConfig registers a new resource with the given unique name, arguments, and options.
func NewDataTransferConfig(ctx *pulumi.Context,
	name string, args *DataTransferConfigArgs, opts ...pulumi.ResourceOption) (*DataTransferConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSourceId == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Params == nil {
		return nil, errors.New("invalid value for required argument 'Params'")
	}
	var resource DataTransferConfig
	err := ctx.RegisterResource("gcp:bigquery/dataTransferConfig:DataTransferConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataTransferConfig gets an existing DataTransferConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataTransferConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataTransferConfigState, opts ...pulumi.ResourceOption) (*DataTransferConfig, error) {
	var resource DataTransferConfig
	err := ctx.ReadResource("gcp:bigquery/dataTransferConfig:DataTransferConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataTransferConfig resources.
type dataTransferConfigState struct {
	// The number of days to look back to automatically refresh the data.
	// For example, if dataRefreshWindowDays = 10, then every day BigQuery
	// reingests data for [today-10, today-1], rather than ingesting data for
	// just [today-1]. Only valid if the data source supports the feature.
	// Set the value to 0 to use the default value.
	DataRefreshWindowDays *int `pulumi:"dataRefreshWindowDays"`
	// The data source id. Cannot be changed once the transfer config is created.
	DataSourceId *string `pulumi:"dataSourceId"`
	// The BigQuery target dataset id.
	DestinationDatasetId *string `pulumi:"destinationDatasetId"`
	// When set to true, no runs are scheduled for a given transfer.
	Disabled *bool `pulumi:"disabled"`
	// The user specified display name for the transfer config.
	DisplayName *string `pulumi:"displayName"`
	// Email notifications will be sent according to these preferences to the
	// email address of the user who owns this transfer config.
	// Structure is documented below.
	EmailPreferences *DataTransferConfigEmailPreferences `pulumi:"emailPreferences"`
	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	Location *string `pulumi:"location"`
	// The resource name of the transfer config. Transfer config names have the form
	// projects/{projectId}/locations/{location}/transferConfigs/{configId}. Where configId is usually a uuid, but this is not
	// required. The name is ignored when creating a transfer config.
	Name *string `pulumi:"name"`
	// Pub/Sub topic where notifications will be sent after transfer runs
	// associated with this transfer config finish.
	NotificationPubsubTopic *string `pulumi:"notificationPubsubTopic"`
	// Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer'
	// section for each data source. For example the parameters for Cloud Storage transfers are listed here:
	// https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
	Params map[string]string `pulumi:"params"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Data transfer schedule. If the data source does not support a custom
	// schedule, this should be empty. If it is empty, the default value for
	// the data source will be used. The specified times are in UTC. Examples
	// of valid format: 1st,3rd monday of month 15:30, every wed,fri of jan,
	// jun 13:15, and first sunday of quarter 00:00. See more explanation
	// about the format here:
	// https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
	// NOTE: the granularity should be at least 8 hours, or less frequent.
	Schedule *string `pulumi:"schedule"`
	// Options customizing the data transfer schedule.
	// Structure is documented below.
	ScheduleOptions *DataTransferConfigScheduleOptions `pulumi:"scheduleOptions"`
	// Different parameters are configured primarily using the the `params` field on this
	// resource. This block contains the parameters which contain secrets or passwords so that they can be marked
	// sensitive and hidden from plan output. The name of the field, eg: secret_access_key, will be the key
	// in the `params` map in the api request.
	// Credentials may not be specified in both locations and will cause an error. Changing from one location
	// to a different credential configuration in the config will require an apply to update state.
	// Structure is documented below.
	SensitiveParams *DataTransferConfigSensitiveParams `pulumi:"sensitiveParams"`
	// Service account email. If this field is set, transfer config will
	// be created with this service account credentials. It requires that
	// requesting user calling this API has permissions to act as this service account.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
}

type DataTransferConfigState struct {
	// The number of days to look back to automatically refresh the data.
	// For example, if dataRefreshWindowDays = 10, then every day BigQuery
	// reingests data for [today-10, today-1], rather than ingesting data for
	// just [today-1]. Only valid if the data source supports the feature.
	// Set the value to 0 to use the default value.
	DataRefreshWindowDays pulumi.IntPtrInput
	// The data source id. Cannot be changed once the transfer config is created.
	DataSourceId pulumi.StringPtrInput
	// The BigQuery target dataset id.
	DestinationDatasetId pulumi.StringPtrInput
	// When set to true, no runs are scheduled for a given transfer.
	Disabled pulumi.BoolPtrInput
	// The user specified display name for the transfer config.
	DisplayName pulumi.StringPtrInput
	// Email notifications will be sent according to these preferences to the
	// email address of the user who owns this transfer config.
	// Structure is documented below.
	EmailPreferences DataTransferConfigEmailPreferencesPtrInput
	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	Location pulumi.StringPtrInput
	// The resource name of the transfer config. Transfer config names have the form
	// projects/{projectId}/locations/{location}/transferConfigs/{configId}. Where configId is usually a uuid, but this is not
	// required. The name is ignored when creating a transfer config.
	Name pulumi.StringPtrInput
	// Pub/Sub topic where notifications will be sent after transfer runs
	// associated with this transfer config finish.
	NotificationPubsubTopic pulumi.StringPtrInput
	// Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer'
	// section for each data source. For example the parameters for Cloud Storage transfers are listed here:
	// https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
	Params pulumi.StringMapInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Data transfer schedule. If the data source does not support a custom
	// schedule, this should be empty. If it is empty, the default value for
	// the data source will be used. The specified times are in UTC. Examples
	// of valid format: 1st,3rd monday of month 15:30, every wed,fri of jan,
	// jun 13:15, and first sunday of quarter 00:00. See more explanation
	// about the format here:
	// https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
	// NOTE: the granularity should be at least 8 hours, or less frequent.
	Schedule pulumi.StringPtrInput
	// Options customizing the data transfer schedule.
	// Structure is documented below.
	ScheduleOptions DataTransferConfigScheduleOptionsPtrInput
	// Different parameters are configured primarily using the the `params` field on this
	// resource. This block contains the parameters which contain secrets or passwords so that they can be marked
	// sensitive and hidden from plan output. The name of the field, eg: secret_access_key, will be the key
	// in the `params` map in the api request.
	// Credentials may not be specified in both locations and will cause an error. Changing from one location
	// to a different credential configuration in the config will require an apply to update state.
	// Structure is documented below.
	SensitiveParams DataTransferConfigSensitiveParamsPtrInput
	// Service account email. If this field is set, transfer config will
	// be created with this service account credentials. It requires that
	// requesting user calling this API has permissions to act as this service account.
	ServiceAccountName pulumi.StringPtrInput
}

func (DataTransferConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataTransferConfigState)(nil)).Elem()
}

type dataTransferConfigArgs struct {
	// The number of days to look back to automatically refresh the data.
	// For example, if dataRefreshWindowDays = 10, then every day BigQuery
	// reingests data for [today-10, today-1], rather than ingesting data for
	// just [today-1]. Only valid if the data source supports the feature.
	// Set the value to 0 to use the default value.
	DataRefreshWindowDays *int `pulumi:"dataRefreshWindowDays"`
	// The data source id. Cannot be changed once the transfer config is created.
	DataSourceId string `pulumi:"dataSourceId"`
	// The BigQuery target dataset id.
	DestinationDatasetId *string `pulumi:"destinationDatasetId"`
	// When set to true, no runs are scheduled for a given transfer.
	Disabled *bool `pulumi:"disabled"`
	// The user specified display name for the transfer config.
	DisplayName string `pulumi:"displayName"`
	// Email notifications will be sent according to these preferences to the
	// email address of the user who owns this transfer config.
	// Structure is documented below.
	EmailPreferences *DataTransferConfigEmailPreferences `pulumi:"emailPreferences"`
	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	Location *string `pulumi:"location"`
	// Pub/Sub topic where notifications will be sent after transfer runs
	// associated with this transfer config finish.
	NotificationPubsubTopic *string `pulumi:"notificationPubsubTopic"`
	// Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer'
	// section for each data source. For example the parameters for Cloud Storage transfers are listed here:
	// https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
	Params map[string]string `pulumi:"params"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Data transfer schedule. If the data source does not support a custom
	// schedule, this should be empty. If it is empty, the default value for
	// the data source will be used. The specified times are in UTC. Examples
	// of valid format: 1st,3rd monday of month 15:30, every wed,fri of jan,
	// jun 13:15, and first sunday of quarter 00:00. See more explanation
	// about the format here:
	// https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
	// NOTE: the granularity should be at least 8 hours, or less frequent.
	Schedule *string `pulumi:"schedule"`
	// Options customizing the data transfer schedule.
	// Structure is documented below.
	ScheduleOptions *DataTransferConfigScheduleOptions `pulumi:"scheduleOptions"`
	// Different parameters are configured primarily using the the `params` field on this
	// resource. This block contains the parameters which contain secrets or passwords so that they can be marked
	// sensitive and hidden from plan output. The name of the field, eg: secret_access_key, will be the key
	// in the `params` map in the api request.
	// Credentials may not be specified in both locations and will cause an error. Changing from one location
	// to a different credential configuration in the config will require an apply to update state.
	// Structure is documented below.
	SensitiveParams *DataTransferConfigSensitiveParams `pulumi:"sensitiveParams"`
	// Service account email. If this field is set, transfer config will
	// be created with this service account credentials. It requires that
	// requesting user calling this API has permissions to act as this service account.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
}

// The set of arguments for constructing a DataTransferConfig resource.
type DataTransferConfigArgs struct {
	// The number of days to look back to automatically refresh the data.
	// For example, if dataRefreshWindowDays = 10, then every day BigQuery
	// reingests data for [today-10, today-1], rather than ingesting data for
	// just [today-1]. Only valid if the data source supports the feature.
	// Set the value to 0 to use the default value.
	DataRefreshWindowDays pulumi.IntPtrInput
	// The data source id. Cannot be changed once the transfer config is created.
	DataSourceId pulumi.StringInput
	// The BigQuery target dataset id.
	DestinationDatasetId pulumi.StringPtrInput
	// When set to true, no runs are scheduled for a given transfer.
	Disabled pulumi.BoolPtrInput
	// The user specified display name for the transfer config.
	DisplayName pulumi.StringInput
	// Email notifications will be sent according to these preferences to the
	// email address of the user who owns this transfer config.
	// Structure is documented below.
	EmailPreferences DataTransferConfigEmailPreferencesPtrInput
	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	Location pulumi.StringPtrInput
	// Pub/Sub topic where notifications will be sent after transfer runs
	// associated with this transfer config finish.
	NotificationPubsubTopic pulumi.StringPtrInput
	// Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer'
	// section for each data source. For example the parameters for Cloud Storage transfers are listed here:
	// https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
	Params pulumi.StringMapInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Data transfer schedule. If the data source does not support a custom
	// schedule, this should be empty. If it is empty, the default value for
	// the data source will be used. The specified times are in UTC. Examples
	// of valid format: 1st,3rd monday of month 15:30, every wed,fri of jan,
	// jun 13:15, and first sunday of quarter 00:00. See more explanation
	// about the format here:
	// https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
	// NOTE: the granularity should be at least 8 hours, or less frequent.
	Schedule pulumi.StringPtrInput
	// Options customizing the data transfer schedule.
	// Structure is documented below.
	ScheduleOptions DataTransferConfigScheduleOptionsPtrInput
	// Different parameters are configured primarily using the the `params` field on this
	// resource. This block contains the parameters which contain secrets or passwords so that they can be marked
	// sensitive and hidden from plan output. The name of the field, eg: secret_access_key, will be the key
	// in the `params` map in the api request.
	// Credentials may not be specified in both locations and will cause an error. Changing from one location
	// to a different credential configuration in the config will require an apply to update state.
	// Structure is documented below.
	SensitiveParams DataTransferConfigSensitiveParamsPtrInput
	// Service account email. If this field is set, transfer config will
	// be created with this service account credentials. It requires that
	// requesting user calling this API has permissions to act as this service account.
	ServiceAccountName pulumi.StringPtrInput
}

func (DataTransferConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataTransferConfigArgs)(nil)).Elem()
}

type DataTransferConfigInput interface {
	pulumi.Input

	ToDataTransferConfigOutput() DataTransferConfigOutput
	ToDataTransferConfigOutputWithContext(ctx context.Context) DataTransferConfigOutput
}

func (*DataTransferConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**DataTransferConfig)(nil)).Elem()
}

func (i *DataTransferConfig) ToDataTransferConfigOutput() DataTransferConfigOutput {
	return i.ToDataTransferConfigOutputWithContext(context.Background())
}

func (i *DataTransferConfig) ToDataTransferConfigOutputWithContext(ctx context.Context) DataTransferConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataTransferConfigOutput)
}

// DataTransferConfigArrayInput is an input type that accepts DataTransferConfigArray and DataTransferConfigArrayOutput values.
// You can construct a concrete instance of `DataTransferConfigArrayInput` via:
//
//          DataTransferConfigArray{ DataTransferConfigArgs{...} }
type DataTransferConfigArrayInput interface {
	pulumi.Input

	ToDataTransferConfigArrayOutput() DataTransferConfigArrayOutput
	ToDataTransferConfigArrayOutputWithContext(context.Context) DataTransferConfigArrayOutput
}

type DataTransferConfigArray []DataTransferConfigInput

func (DataTransferConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataTransferConfig)(nil)).Elem()
}

func (i DataTransferConfigArray) ToDataTransferConfigArrayOutput() DataTransferConfigArrayOutput {
	return i.ToDataTransferConfigArrayOutputWithContext(context.Background())
}

func (i DataTransferConfigArray) ToDataTransferConfigArrayOutputWithContext(ctx context.Context) DataTransferConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataTransferConfigArrayOutput)
}

// DataTransferConfigMapInput is an input type that accepts DataTransferConfigMap and DataTransferConfigMapOutput values.
// You can construct a concrete instance of `DataTransferConfigMapInput` via:
//
//          DataTransferConfigMap{ "key": DataTransferConfigArgs{...} }
type DataTransferConfigMapInput interface {
	pulumi.Input

	ToDataTransferConfigMapOutput() DataTransferConfigMapOutput
	ToDataTransferConfigMapOutputWithContext(context.Context) DataTransferConfigMapOutput
}

type DataTransferConfigMap map[string]DataTransferConfigInput

func (DataTransferConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataTransferConfig)(nil)).Elem()
}

func (i DataTransferConfigMap) ToDataTransferConfigMapOutput() DataTransferConfigMapOutput {
	return i.ToDataTransferConfigMapOutputWithContext(context.Background())
}

func (i DataTransferConfigMap) ToDataTransferConfigMapOutputWithContext(ctx context.Context) DataTransferConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataTransferConfigMapOutput)
}

type DataTransferConfigOutput struct{ *pulumi.OutputState }

func (DataTransferConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataTransferConfig)(nil)).Elem()
}

func (o DataTransferConfigOutput) ToDataTransferConfigOutput() DataTransferConfigOutput {
	return o
}

func (o DataTransferConfigOutput) ToDataTransferConfigOutputWithContext(ctx context.Context) DataTransferConfigOutput {
	return o
}

// The number of days to look back to automatically refresh the data.
// For example, if dataRefreshWindowDays = 10, then every day BigQuery
// reingests data for [today-10, today-1], rather than ingesting data for
// just [today-1]. Only valid if the data source supports the feature.
// Set the value to 0 to use the default value.
func (o DataTransferConfigOutput) DataRefreshWindowDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataTransferConfig) pulumi.IntPtrOutput { return v.DataRefreshWindowDays }).(pulumi.IntPtrOutput)
}

// The data source id. Cannot be changed once the transfer config is created.
func (o DataTransferConfigOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTransferConfig) pulumi.StringOutput { return v.DataSourceId }).(pulumi.StringOutput)
}

// The BigQuery target dataset id.
func (o DataTransferConfigOutput) DestinationDatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataTransferConfig) pulumi.StringPtrOutput { return v.DestinationDatasetId }).(pulumi.StringPtrOutput)
}

// When set to true, no runs are scheduled for a given transfer.
func (o DataTransferConfigOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataTransferConfig) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The user specified display name for the transfer config.
func (o DataTransferConfigOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTransferConfig) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Email notifications will be sent according to these preferences to the
// email address of the user who owns this transfer config.
// Structure is documented below.
func (o DataTransferConfigOutput) EmailPreferences() DataTransferConfigEmailPreferencesPtrOutput {
	return o.ApplyT(func(v *DataTransferConfig) DataTransferConfigEmailPreferencesPtrOutput { return v.EmailPreferences }).(DataTransferConfigEmailPreferencesPtrOutput)
}

// The geographic location where the transfer config should reside.
// Examples: US, EU, asia-northeast1. The default value is US.
func (o DataTransferConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataTransferConfig) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource name of the transfer config. Transfer config names have the form
// projects/{projectId}/locations/{location}/transferConfigs/{configId}. Where configId is usually a uuid, but this is not
// required. The name is ignored when creating a transfer config.
func (o DataTransferConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTransferConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Pub/Sub topic where notifications will be sent after transfer runs
// associated with this transfer config finish.
func (o DataTransferConfigOutput) NotificationPubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataTransferConfig) pulumi.StringPtrOutput { return v.NotificationPubsubTopic }).(pulumi.StringPtrOutput)
}

// Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer'
// section for each data source. For example the parameters for Cloud Storage transfers are listed here:
// https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
func (o DataTransferConfigOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataTransferConfig) pulumi.StringMapOutput { return v.Params }).(pulumi.StringMapOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o DataTransferConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTransferConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Data transfer schedule. If the data source does not support a custom
// schedule, this should be empty. If it is empty, the default value for
// the data source will be used. The specified times are in UTC. Examples
// of valid format: 1st,3rd monday of month 15:30, every wed,fri of jan,
// jun 13:15, and first sunday of quarter 00:00. See more explanation
// about the format here:
// https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
// NOTE: the granularity should be at least 8 hours, or less frequent.
func (o DataTransferConfigOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataTransferConfig) pulumi.StringPtrOutput { return v.Schedule }).(pulumi.StringPtrOutput)
}

// Options customizing the data transfer schedule.
// Structure is documented below.
func (o DataTransferConfigOutput) ScheduleOptions() DataTransferConfigScheduleOptionsPtrOutput {
	return o.ApplyT(func(v *DataTransferConfig) DataTransferConfigScheduleOptionsPtrOutput { return v.ScheduleOptions }).(DataTransferConfigScheduleOptionsPtrOutput)
}

// Different parameters are configured primarily using the the `params` field on this
// resource. This block contains the parameters which contain secrets or passwords so that they can be marked
// sensitive and hidden from plan output. The name of the field, eg: secret_access_key, will be the key
// in the `params` map in the api request.
// Credentials may not be specified in both locations and will cause an error. Changing from one location
// to a different credential configuration in the config will require an apply to update state.
// Structure is documented below.
func (o DataTransferConfigOutput) SensitiveParams() DataTransferConfigSensitiveParamsPtrOutput {
	return o.ApplyT(func(v *DataTransferConfig) DataTransferConfigSensitiveParamsPtrOutput { return v.SensitiveParams }).(DataTransferConfigSensitiveParamsPtrOutput)
}

// Service account email. If this field is set, transfer config will
// be created with this service account credentials. It requires that
// requesting user calling this API has permissions to act as this service account.
func (o DataTransferConfigOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataTransferConfig) pulumi.StringPtrOutput { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

type DataTransferConfigArrayOutput struct{ *pulumi.OutputState }

func (DataTransferConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataTransferConfig)(nil)).Elem()
}

func (o DataTransferConfigArrayOutput) ToDataTransferConfigArrayOutput() DataTransferConfigArrayOutput {
	return o
}

func (o DataTransferConfigArrayOutput) ToDataTransferConfigArrayOutputWithContext(ctx context.Context) DataTransferConfigArrayOutput {
	return o
}

func (o DataTransferConfigArrayOutput) Index(i pulumi.IntInput) DataTransferConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataTransferConfig {
		return vs[0].([]*DataTransferConfig)[vs[1].(int)]
	}).(DataTransferConfigOutput)
}

type DataTransferConfigMapOutput struct{ *pulumi.OutputState }

func (DataTransferConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataTransferConfig)(nil)).Elem()
}

func (o DataTransferConfigMapOutput) ToDataTransferConfigMapOutput() DataTransferConfigMapOutput {
	return o
}

func (o DataTransferConfigMapOutput) ToDataTransferConfigMapOutputWithContext(ctx context.Context) DataTransferConfigMapOutput {
	return o
}

func (o DataTransferConfigMapOutput) MapIndex(k pulumi.StringInput) DataTransferConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataTransferConfig {
		return vs[0].(map[string]*DataTransferConfig)[vs[1].(string)]
	}).(DataTransferConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataTransferConfigInput)(nil)).Elem(), &DataTransferConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataTransferConfigArrayInput)(nil)).Elem(), DataTransferConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataTransferConfigMapInput)(nil)).Elem(), DataTransferConfigMap{})
	pulumi.RegisterOutputType(DataTransferConfigOutput{})
	pulumi.RegisterOutputType(DataTransferConfigArrayOutput{})
	pulumi.RegisterOutputType(DataTransferConfigMapOutput{})
}
