// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for BigQuery Data Policy V2 DataPolicy. Each of these resources serves a different use case:
//
// * `bigquery.Datapolicyv2DataPolicyIamPolicy`: Authoritative. Sets the IAM policy for the datapolicy and replaces any existing policy already attached.
// * `bigquery.Datapolicyv2DataPolicyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the datapolicy are preserved.
// * `bigquery.Datapolicyv2DataPolicyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the datapolicy are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `bigquery.Datapolicyv2DataPolicyIamPolicy`: Retrieves the IAM policy for the datapolicy
//
// > **Note:** `bigquery.Datapolicyv2DataPolicyIamPolicy` **cannot** be used in conjunction with `bigquery.Datapolicyv2DataPolicyIamBinding` and `bigquery.Datapolicyv2DataPolicyIamMember` or they will fight over what your policy should be.
//
// > **Note:** `bigquery.Datapolicyv2DataPolicyIamBinding` resources **can be** used in conjunction with `bigquery.Datapolicyv2DataPolicyIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## bigquery.Datapolicyv2DataPolicyIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewDatapolicyv2DataPolicyIamPolicy(ctx, "policy", &bigquery.Datapolicyv2DataPolicyIamPolicyArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				PolicyData:   pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## bigquery.Datapolicyv2DataPolicyIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewDatapolicyv2DataPolicyIamBinding(ctx, "binding", &bigquery.Datapolicyv2DataPolicyIamBindingArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				Role:         pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## bigquery.Datapolicyv2DataPolicyIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewDatapolicyv2DataPolicyIamMember(ctx, "member", &bigquery.Datapolicyv2DataPolicyIamMemberArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				Role:         pulumi.String("roles/viewer"),
//				Member:       pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## This resource supports User Project Overrides.
//
// -
//
// # IAM policy for BigQuery Data Policy V2 DataPolicy
//
// Three different resources help you manage your IAM policy for BigQuery Data Policy V2 DataPolicy. Each of these resources serves a different use case:
//
// * `bigquery.Datapolicyv2DataPolicyIamPolicy`: Authoritative. Sets the IAM policy for the datapolicy and replaces any existing policy already attached.
// * `bigquery.Datapolicyv2DataPolicyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the datapolicy are preserved.
// * `bigquery.Datapolicyv2DataPolicyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the datapolicy are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `bigquery.Datapolicyv2DataPolicyIamPolicy`: Retrieves the IAM policy for the datapolicy
//
// > **Note:** `bigquery.Datapolicyv2DataPolicyIamPolicy` **cannot** be used in conjunction with `bigquery.Datapolicyv2DataPolicyIamBinding` and `bigquery.Datapolicyv2DataPolicyIamMember` or they will fight over what your policy should be.
//
// > **Note:** `bigquery.Datapolicyv2DataPolicyIamBinding` resources **can be** used in conjunction with `bigquery.Datapolicyv2DataPolicyIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## bigquery.Datapolicyv2DataPolicyIamPolicy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = bigquery.NewDatapolicyv2DataPolicyIamPolicy(ctx, "policy", &bigquery.Datapolicyv2DataPolicyIamPolicyArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				PolicyData:   pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## bigquery.Datapolicyv2DataPolicyIamBinding
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewDatapolicyv2DataPolicyIamBinding(ctx, "binding", &bigquery.Datapolicyv2DataPolicyIamBindingArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				Role:         pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## bigquery.Datapolicyv2DataPolicyIamMember
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewDatapolicyv2DataPolicyIamMember(ctx, "member", &bigquery.Datapolicyv2DataPolicyIamMemberArgs{
//				Project:      pulumi.Any(basicDataPolicy.Project),
//				Location:     pulumi.Any(basicDataPolicy.Location),
//				DataPolicyId: pulumi.Any(basicDataPolicy.DataPolicyId),
//				Role:         pulumi.String("roles/viewer"),
//				Member:       pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}}
//
// * {{project}}/{{location}}/{{data_policy_id}}
//
// * {{location}}/{{data_policy_id}}
//
// * {{data_policy_id}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// BigQuery Data Policy V2 datapolicy IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:bigquery/datapolicyv2DataPolicyIamMember:Datapolicyv2DataPolicyIamMember editor "projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:bigquery/datapolicyv2DataPolicyIamMember:Datapolicyv2DataPolicyIamMember editor "projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:bigquery/datapolicyv2DataPolicyIamMember:Datapolicyv2DataPolicyIamMember editor projects/{{project}}/locations/{{location}}/dataPolicies/{{data_policy_id}}
// ```
//
// -> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type Datapolicyv2DataPolicyIamMember struct {
	pulumi.CustomResourceState

	Condition Datapolicyv2DataPolicyIamMemberConditionPtrOutput `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	DataPolicyId pulumi.StringOutput `pulumi:"dataPolicyId"`
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringOutput `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Member pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `bigquery.Datapolicyv2DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewDatapolicyv2DataPolicyIamMember registers a new resource with the given unique name, arguments, and options.
func NewDatapolicyv2DataPolicyIamMember(ctx *pulumi.Context,
	name string, args *Datapolicyv2DataPolicyIamMemberArgs, opts ...pulumi.ResourceOption) (*Datapolicyv2DataPolicyIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'DataPolicyId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Datapolicyv2DataPolicyIamMember
	err := ctx.RegisterResource("gcp:bigquery/datapolicyv2DataPolicyIamMember:Datapolicyv2DataPolicyIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatapolicyv2DataPolicyIamMember gets an existing Datapolicyv2DataPolicyIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatapolicyv2DataPolicyIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Datapolicyv2DataPolicyIamMemberState, opts ...pulumi.ResourceOption) (*Datapolicyv2DataPolicyIamMember, error) {
	var resource Datapolicyv2DataPolicyIamMember
	err := ctx.ReadResource("gcp:bigquery/datapolicyv2DataPolicyIamMember:Datapolicyv2DataPolicyIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Datapolicyv2DataPolicyIamMember resources.
type datapolicyv2DataPolicyIamMemberState struct {
	Condition *Datapolicyv2DataPolicyIamMemberCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	DataPolicyId *string `pulumi:"dataPolicyId"`
	// (Computed) The etag of the IAM policy.
	Etag *string `pulumi:"etag"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Member *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `bigquery.Datapolicyv2DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type Datapolicyv2DataPolicyIamMemberState struct {
	Condition Datapolicyv2DataPolicyIamMemberConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	DataPolicyId pulumi.StringPtrInput
	// (Computed) The etag of the IAM policy.
	Etag pulumi.StringPtrInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Member pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `bigquery.Datapolicyv2DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (Datapolicyv2DataPolicyIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*datapolicyv2DataPolicyIamMemberState)(nil)).Elem()
}

type datapolicyv2DataPolicyIamMemberArgs struct {
	Condition *Datapolicyv2DataPolicyIamMemberCondition `pulumi:"condition"`
	// Used to find the parent resource to bind the IAM policy to
	DataPolicyId string `pulumi:"dataPolicyId"`
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location *string `pulumi:"location"`
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Member string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `bigquery.Datapolicyv2DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a Datapolicyv2DataPolicyIamMember resource.
type Datapolicyv2DataPolicyIamMemberArgs struct {
	Condition Datapolicyv2DataPolicyIamMemberConditionPtrInput
	// Used to find the parent resource to bind the IAM policy to
	DataPolicyId pulumi.StringInput
	// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
	// location is specified, it is taken from the provider configuration.
	Location pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`.
	// Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
	Member pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `bigquery.Datapolicyv2DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (Datapolicyv2DataPolicyIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datapolicyv2DataPolicyIamMemberArgs)(nil)).Elem()
}

type Datapolicyv2DataPolicyIamMemberInput interface {
	pulumi.Input

	ToDatapolicyv2DataPolicyIamMemberOutput() Datapolicyv2DataPolicyIamMemberOutput
	ToDatapolicyv2DataPolicyIamMemberOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamMemberOutput
}

func (*Datapolicyv2DataPolicyIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**Datapolicyv2DataPolicyIamMember)(nil)).Elem()
}

func (i *Datapolicyv2DataPolicyIamMember) ToDatapolicyv2DataPolicyIamMemberOutput() Datapolicyv2DataPolicyIamMemberOutput {
	return i.ToDatapolicyv2DataPolicyIamMemberOutputWithContext(context.Background())
}

func (i *Datapolicyv2DataPolicyIamMember) ToDatapolicyv2DataPolicyIamMemberOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Datapolicyv2DataPolicyIamMemberOutput)
}

// Datapolicyv2DataPolicyIamMemberArrayInput is an input type that accepts Datapolicyv2DataPolicyIamMemberArray and Datapolicyv2DataPolicyIamMemberArrayOutput values.
// You can construct a concrete instance of `Datapolicyv2DataPolicyIamMemberArrayInput` via:
//
//	Datapolicyv2DataPolicyIamMemberArray{ Datapolicyv2DataPolicyIamMemberArgs{...} }
type Datapolicyv2DataPolicyIamMemberArrayInput interface {
	pulumi.Input

	ToDatapolicyv2DataPolicyIamMemberArrayOutput() Datapolicyv2DataPolicyIamMemberArrayOutput
	ToDatapolicyv2DataPolicyIamMemberArrayOutputWithContext(context.Context) Datapolicyv2DataPolicyIamMemberArrayOutput
}

type Datapolicyv2DataPolicyIamMemberArray []Datapolicyv2DataPolicyIamMemberInput

func (Datapolicyv2DataPolicyIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datapolicyv2DataPolicyIamMember)(nil)).Elem()
}

func (i Datapolicyv2DataPolicyIamMemberArray) ToDatapolicyv2DataPolicyIamMemberArrayOutput() Datapolicyv2DataPolicyIamMemberArrayOutput {
	return i.ToDatapolicyv2DataPolicyIamMemberArrayOutputWithContext(context.Background())
}

func (i Datapolicyv2DataPolicyIamMemberArray) ToDatapolicyv2DataPolicyIamMemberArrayOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Datapolicyv2DataPolicyIamMemberArrayOutput)
}

// Datapolicyv2DataPolicyIamMemberMapInput is an input type that accepts Datapolicyv2DataPolicyIamMemberMap and Datapolicyv2DataPolicyIamMemberMapOutput values.
// You can construct a concrete instance of `Datapolicyv2DataPolicyIamMemberMapInput` via:
//
//	Datapolicyv2DataPolicyIamMemberMap{ "key": Datapolicyv2DataPolicyIamMemberArgs{...} }
type Datapolicyv2DataPolicyIamMemberMapInput interface {
	pulumi.Input

	ToDatapolicyv2DataPolicyIamMemberMapOutput() Datapolicyv2DataPolicyIamMemberMapOutput
	ToDatapolicyv2DataPolicyIamMemberMapOutputWithContext(context.Context) Datapolicyv2DataPolicyIamMemberMapOutput
}

type Datapolicyv2DataPolicyIamMemberMap map[string]Datapolicyv2DataPolicyIamMemberInput

func (Datapolicyv2DataPolicyIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datapolicyv2DataPolicyIamMember)(nil)).Elem()
}

func (i Datapolicyv2DataPolicyIamMemberMap) ToDatapolicyv2DataPolicyIamMemberMapOutput() Datapolicyv2DataPolicyIamMemberMapOutput {
	return i.ToDatapolicyv2DataPolicyIamMemberMapOutputWithContext(context.Background())
}

func (i Datapolicyv2DataPolicyIamMemberMap) ToDatapolicyv2DataPolicyIamMemberMapOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Datapolicyv2DataPolicyIamMemberMapOutput)
}

type Datapolicyv2DataPolicyIamMemberOutput struct{ *pulumi.OutputState }

func (Datapolicyv2DataPolicyIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Datapolicyv2DataPolicyIamMember)(nil)).Elem()
}

func (o Datapolicyv2DataPolicyIamMemberOutput) ToDatapolicyv2DataPolicyIamMemberOutput() Datapolicyv2DataPolicyIamMemberOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamMemberOutput) ToDatapolicyv2DataPolicyIamMemberOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamMemberOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamMemberOutput) Condition() Datapolicyv2DataPolicyIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamMember) Datapolicyv2DataPolicyIamMemberConditionPtrOutput {
		return v.Condition
	}).(Datapolicyv2DataPolicyIamMemberConditionPtrOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o Datapolicyv2DataPolicyIamMemberOutput) DataPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamMember) pulumi.StringOutput { return v.DataPolicyId }).(pulumi.StringOutput)
}

// (Computed) The etag of the IAM policy.
func (o Datapolicyv2DataPolicyIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
// location is specified, it is taken from the provider configuration.
func (o Datapolicyv2DataPolicyIamMemberOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamMember) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`.
// Each entry can have one of the following values:
// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
// * **Federated identities**: One or more federated identities in a workload or workforce identity pool, workload running on GKE, etc. Refer to the [Principal identifiers documentation](https://cloud.google.com/iam/docs/principal-identifiers#allow) for examples of targets and valid configuration. For example, "principal://iam.googleapis.com/locations/global/workforcePools/example-contractors/subject/joe@example.com"
func (o Datapolicyv2DataPolicyIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (o Datapolicyv2DataPolicyIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `bigquery.Datapolicyv2DataPolicyIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o Datapolicyv2DataPolicyIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *Datapolicyv2DataPolicyIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type Datapolicyv2DataPolicyIamMemberArrayOutput struct{ *pulumi.OutputState }

func (Datapolicyv2DataPolicyIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datapolicyv2DataPolicyIamMember)(nil)).Elem()
}

func (o Datapolicyv2DataPolicyIamMemberArrayOutput) ToDatapolicyv2DataPolicyIamMemberArrayOutput() Datapolicyv2DataPolicyIamMemberArrayOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamMemberArrayOutput) ToDatapolicyv2DataPolicyIamMemberArrayOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamMemberArrayOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamMemberArrayOutput) Index(i pulumi.IntInput) Datapolicyv2DataPolicyIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Datapolicyv2DataPolicyIamMember {
		return vs[0].([]*Datapolicyv2DataPolicyIamMember)[vs[1].(int)]
	}).(Datapolicyv2DataPolicyIamMemberOutput)
}

type Datapolicyv2DataPolicyIamMemberMapOutput struct{ *pulumi.OutputState }

func (Datapolicyv2DataPolicyIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datapolicyv2DataPolicyIamMember)(nil)).Elem()
}

func (o Datapolicyv2DataPolicyIamMemberMapOutput) ToDatapolicyv2DataPolicyIamMemberMapOutput() Datapolicyv2DataPolicyIamMemberMapOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamMemberMapOutput) ToDatapolicyv2DataPolicyIamMemberMapOutputWithContext(ctx context.Context) Datapolicyv2DataPolicyIamMemberMapOutput {
	return o
}

func (o Datapolicyv2DataPolicyIamMemberMapOutput) MapIndex(k pulumi.StringInput) Datapolicyv2DataPolicyIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Datapolicyv2DataPolicyIamMember {
		return vs[0].(map[string]*Datapolicyv2DataPolicyIamMember)[vs[1].(string)]
	}).(Datapolicyv2DataPolicyIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Datapolicyv2DataPolicyIamMemberInput)(nil)).Elem(), &Datapolicyv2DataPolicyIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*Datapolicyv2DataPolicyIamMemberArrayInput)(nil)).Elem(), Datapolicyv2DataPolicyIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Datapolicyv2DataPolicyIamMemberMapInput)(nil)).Elem(), Datapolicyv2DataPolicyIamMemberMap{})
	pulumi.RegisterOutputType(Datapolicyv2DataPolicyIamMemberOutput{})
	pulumi.RegisterOutputType(Datapolicyv2DataPolicyIamMemberArrayOutput{})
	pulumi.RegisterOutputType(Datapolicyv2DataPolicyIamMemberMapOutput{})
}
