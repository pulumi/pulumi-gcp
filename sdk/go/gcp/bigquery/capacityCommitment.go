// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Capacity commitment is a way to purchase compute capacity for BigQuery jobs (in the form of slots) with some committed period of usage. Annual commitments renew by default. Commitments can be removed after their commitment end time passes.
//
// In order to remove annual commitment, its plan needs to be changed to monthly or flex first.
//
// To get more information about CapacityCommitment, see:
//
// * [API documentation](https://cloud.google.com/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments)
// * How-to Guides
//   - [Introduction to Reservations](https://cloud.google.com/bigquery/docs/reservations-intro)
//
// ## Example Usage
// ### Bigquery Reservation Capacity Commitment Docs
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/bigquery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigquery.NewCapacityCommitment(ctx, "example", &bigquery.CapacityCommitmentArgs{
//				CapacityCommitmentId: pulumi.String("example-commitment"),
//				Edition:              pulumi.String("ENTERPRISE"),
//				Location:             pulumi.String("us-west2"),
//				Plan:                 pulumi.String("FLEX_FLAT_RATE"),
//				SlotCount:            pulumi.Int(100),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # CapacityCommitment can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:bigquery/capacityCommitment:CapacityCommitment default projects/{{project}}/locations/{{location}}/capacityCommitments/{{capacity_commitment_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:bigquery/capacityCommitment:CapacityCommitment default {{project}}/{{location}}/{{capacity_commitment_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:bigquery/capacityCommitment:CapacityCommitment default {{location}}/{{capacity_commitment_id}}
//
// ```
type CapacityCommitment struct {
	pulumi.CustomResourceState

	// The optional capacity commitment ID. Capacity commitment name will be generated automatically if this field is
	// empty. This field must only contain lower case alphanumeric characters or dashes. The first and last character
	// cannot be a dash. Max length is 64 characters. NOTE: this ID won't be kept if the capacity commitment is split
	// or merged.
	CapacityCommitmentId pulumi.StringPtrOutput `pulumi:"capacityCommitmentId"`
	// The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
	CommitmentEndTime pulumi.StringOutput `pulumi:"commitmentEndTime"`
	// The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
	CommitmentStartTime pulumi.StringOutput `pulumi:"commitmentStartTime"`
	// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
	Edition pulumi.StringPtrOutput `pulumi:"edition"`
	// If true, fail the request if another project in the organization has a capacity commitment.
	EnforceSingleAdminProjectPerOrg pulumi.StringPtrOutput `pulumi:"enforceSingleAdminProjectPerOrg"`
	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The resource name of the capacity commitment, e.g., projects/myproject/locations/US/capacityCommitments/123
	Name pulumi.StringOutput `pulumi:"name"`
	// Capacity commitment plan. Valid values are at https://cloud.google.com/bigquery/docs/reference/reservations/rpc/google.cloud.bigquery.reservation.v1#commitmentplan
	//
	// ***
	Plan pulumi.StringOutput `pulumi:"plan"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The plan this capacity commitment is converted to after commitmentEndTime passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable some commitment plans.
	RenewalPlan pulumi.StringPtrOutput `pulumi:"renewalPlan"`
	// Number of slots in this commitment.
	SlotCount pulumi.IntOutput `pulumi:"slotCount"`
	// State of the commitment
	State pulumi.StringOutput `pulumi:"state"`
}

// NewCapacityCommitment registers a new resource with the given unique name, arguments, and options.
func NewCapacityCommitment(ctx *pulumi.Context,
	name string, args *CapacityCommitmentArgs, opts ...pulumi.ResourceOption) (*CapacityCommitment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.SlotCount == nil {
		return nil, errors.New("invalid value for required argument 'SlotCount'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CapacityCommitment
	err := ctx.RegisterResource("gcp:bigquery/capacityCommitment:CapacityCommitment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCapacityCommitment gets an existing CapacityCommitment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCapacityCommitment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CapacityCommitmentState, opts ...pulumi.ResourceOption) (*CapacityCommitment, error) {
	var resource CapacityCommitment
	err := ctx.ReadResource("gcp:bigquery/capacityCommitment:CapacityCommitment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CapacityCommitment resources.
type capacityCommitmentState struct {
	// The optional capacity commitment ID. Capacity commitment name will be generated automatically if this field is
	// empty. This field must only contain lower case alphanumeric characters or dashes. The first and last character
	// cannot be a dash. Max length is 64 characters. NOTE: this ID won't be kept if the capacity commitment is split
	// or merged.
	CapacityCommitmentId *string `pulumi:"capacityCommitmentId"`
	// The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
	CommitmentEndTime *string `pulumi:"commitmentEndTime"`
	// The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
	CommitmentStartTime *string `pulumi:"commitmentStartTime"`
	// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
	Edition *string `pulumi:"edition"`
	// If true, fail the request if another project in the organization has a capacity commitment.
	EnforceSingleAdminProjectPerOrg *string `pulumi:"enforceSingleAdminProjectPerOrg"`
	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	Location *string `pulumi:"location"`
	// The resource name of the capacity commitment, e.g., projects/myproject/locations/US/capacityCommitments/123
	Name *string `pulumi:"name"`
	// Capacity commitment plan. Valid values are at https://cloud.google.com/bigquery/docs/reference/reservations/rpc/google.cloud.bigquery.reservation.v1#commitmentplan
	//
	// ***
	Plan *string `pulumi:"plan"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The plan this capacity commitment is converted to after commitmentEndTime passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable some commitment plans.
	RenewalPlan *string `pulumi:"renewalPlan"`
	// Number of slots in this commitment.
	SlotCount *int `pulumi:"slotCount"`
	// State of the commitment
	State *string `pulumi:"state"`
}

type CapacityCommitmentState struct {
	// The optional capacity commitment ID. Capacity commitment name will be generated automatically if this field is
	// empty. This field must only contain lower case alphanumeric characters or dashes. The first and last character
	// cannot be a dash. Max length is 64 characters. NOTE: this ID won't be kept if the capacity commitment is split
	// or merged.
	CapacityCommitmentId pulumi.StringPtrInput
	// The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
	CommitmentEndTime pulumi.StringPtrInput
	// The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
	CommitmentStartTime pulumi.StringPtrInput
	// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
	Edition pulumi.StringPtrInput
	// If true, fail the request if another project in the organization has a capacity commitment.
	EnforceSingleAdminProjectPerOrg pulumi.StringPtrInput
	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	Location pulumi.StringPtrInput
	// The resource name of the capacity commitment, e.g., projects/myproject/locations/US/capacityCommitments/123
	Name pulumi.StringPtrInput
	// Capacity commitment plan. Valid values are at https://cloud.google.com/bigquery/docs/reference/reservations/rpc/google.cloud.bigquery.reservation.v1#commitmentplan
	//
	// ***
	Plan pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The plan this capacity commitment is converted to after commitmentEndTime passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable some commitment plans.
	RenewalPlan pulumi.StringPtrInput
	// Number of slots in this commitment.
	SlotCount pulumi.IntPtrInput
	// State of the commitment
	State pulumi.StringPtrInput
}

func (CapacityCommitmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityCommitmentState)(nil)).Elem()
}

type capacityCommitmentArgs struct {
	// The optional capacity commitment ID. Capacity commitment name will be generated automatically if this field is
	// empty. This field must only contain lower case alphanumeric characters or dashes. The first and last character
	// cannot be a dash. Max length is 64 characters. NOTE: this ID won't be kept if the capacity commitment is split
	// or merged.
	CapacityCommitmentId *string `pulumi:"capacityCommitmentId"`
	// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
	Edition *string `pulumi:"edition"`
	// If true, fail the request if another project in the organization has a capacity commitment.
	EnforceSingleAdminProjectPerOrg *string `pulumi:"enforceSingleAdminProjectPerOrg"`
	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	Location *string `pulumi:"location"`
	// Capacity commitment plan. Valid values are at https://cloud.google.com/bigquery/docs/reference/reservations/rpc/google.cloud.bigquery.reservation.v1#commitmentplan
	//
	// ***
	Plan string `pulumi:"plan"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The plan this capacity commitment is converted to after commitmentEndTime passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable some commitment plans.
	RenewalPlan *string `pulumi:"renewalPlan"`
	// Number of slots in this commitment.
	SlotCount int `pulumi:"slotCount"`
}

// The set of arguments for constructing a CapacityCommitment resource.
type CapacityCommitmentArgs struct {
	// The optional capacity commitment ID. Capacity commitment name will be generated automatically if this field is
	// empty. This field must only contain lower case alphanumeric characters or dashes. The first and last character
	// cannot be a dash. Max length is 64 characters. NOTE: this ID won't be kept if the capacity commitment is split
	// or merged.
	CapacityCommitmentId pulumi.StringPtrInput
	// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
	Edition pulumi.StringPtrInput
	// If true, fail the request if another project in the organization has a capacity commitment.
	EnforceSingleAdminProjectPerOrg pulumi.StringPtrInput
	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	Location pulumi.StringPtrInput
	// Capacity commitment plan. Valid values are at https://cloud.google.com/bigquery/docs/reference/reservations/rpc/google.cloud.bigquery.reservation.v1#commitmentplan
	//
	// ***
	Plan pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The plan this capacity commitment is converted to after commitmentEndTime passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable some commitment plans.
	RenewalPlan pulumi.StringPtrInput
	// Number of slots in this commitment.
	SlotCount pulumi.IntInput
}

func (CapacityCommitmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityCommitmentArgs)(nil)).Elem()
}

type CapacityCommitmentInput interface {
	pulumi.Input

	ToCapacityCommitmentOutput() CapacityCommitmentOutput
	ToCapacityCommitmentOutputWithContext(ctx context.Context) CapacityCommitmentOutput
}

func (*CapacityCommitment) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityCommitment)(nil)).Elem()
}

func (i *CapacityCommitment) ToCapacityCommitmentOutput() CapacityCommitmentOutput {
	return i.ToCapacityCommitmentOutputWithContext(context.Background())
}

func (i *CapacityCommitment) ToCapacityCommitmentOutputWithContext(ctx context.Context) CapacityCommitmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityCommitmentOutput)
}

func (i *CapacityCommitment) ToOutput(ctx context.Context) pulumix.Output[*CapacityCommitment] {
	return pulumix.Output[*CapacityCommitment]{
		OutputState: i.ToCapacityCommitmentOutputWithContext(ctx).OutputState,
	}
}

// CapacityCommitmentArrayInput is an input type that accepts CapacityCommitmentArray and CapacityCommitmentArrayOutput values.
// You can construct a concrete instance of `CapacityCommitmentArrayInput` via:
//
//	CapacityCommitmentArray{ CapacityCommitmentArgs{...} }
type CapacityCommitmentArrayInput interface {
	pulumi.Input

	ToCapacityCommitmentArrayOutput() CapacityCommitmentArrayOutput
	ToCapacityCommitmentArrayOutputWithContext(context.Context) CapacityCommitmentArrayOutput
}

type CapacityCommitmentArray []CapacityCommitmentInput

func (CapacityCommitmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CapacityCommitment)(nil)).Elem()
}

func (i CapacityCommitmentArray) ToCapacityCommitmentArrayOutput() CapacityCommitmentArrayOutput {
	return i.ToCapacityCommitmentArrayOutputWithContext(context.Background())
}

func (i CapacityCommitmentArray) ToCapacityCommitmentArrayOutputWithContext(ctx context.Context) CapacityCommitmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityCommitmentArrayOutput)
}

func (i CapacityCommitmentArray) ToOutput(ctx context.Context) pulumix.Output[[]*CapacityCommitment] {
	return pulumix.Output[[]*CapacityCommitment]{
		OutputState: i.ToCapacityCommitmentArrayOutputWithContext(ctx).OutputState,
	}
}

// CapacityCommitmentMapInput is an input type that accepts CapacityCommitmentMap and CapacityCommitmentMapOutput values.
// You can construct a concrete instance of `CapacityCommitmentMapInput` via:
//
//	CapacityCommitmentMap{ "key": CapacityCommitmentArgs{...} }
type CapacityCommitmentMapInput interface {
	pulumi.Input

	ToCapacityCommitmentMapOutput() CapacityCommitmentMapOutput
	ToCapacityCommitmentMapOutputWithContext(context.Context) CapacityCommitmentMapOutput
}

type CapacityCommitmentMap map[string]CapacityCommitmentInput

func (CapacityCommitmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CapacityCommitment)(nil)).Elem()
}

func (i CapacityCommitmentMap) ToCapacityCommitmentMapOutput() CapacityCommitmentMapOutput {
	return i.ToCapacityCommitmentMapOutputWithContext(context.Background())
}

func (i CapacityCommitmentMap) ToCapacityCommitmentMapOutputWithContext(ctx context.Context) CapacityCommitmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityCommitmentMapOutput)
}

func (i CapacityCommitmentMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CapacityCommitment] {
	return pulumix.Output[map[string]*CapacityCommitment]{
		OutputState: i.ToCapacityCommitmentMapOutputWithContext(ctx).OutputState,
	}
}

type CapacityCommitmentOutput struct{ *pulumi.OutputState }

func (CapacityCommitmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityCommitment)(nil)).Elem()
}

func (o CapacityCommitmentOutput) ToCapacityCommitmentOutput() CapacityCommitmentOutput {
	return o
}

func (o CapacityCommitmentOutput) ToCapacityCommitmentOutputWithContext(ctx context.Context) CapacityCommitmentOutput {
	return o
}

func (o CapacityCommitmentOutput) ToOutput(ctx context.Context) pulumix.Output[*CapacityCommitment] {
	return pulumix.Output[*CapacityCommitment]{
		OutputState: o.OutputState,
	}
}

// The optional capacity commitment ID. Capacity commitment name will be generated automatically if this field is
// empty. This field must only contain lower case alphanumeric characters or dashes. The first and last character
// cannot be a dash. Max length is 64 characters. NOTE: this ID won't be kept if the capacity commitment is split
// or merged.
func (o CapacityCommitmentOutput) CapacityCommitmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityCommitment) pulumi.StringPtrOutput { return v.CapacityCommitmentId }).(pulumi.StringPtrOutput)
}

// The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
func (o CapacityCommitmentOutput) CommitmentEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityCommitment) pulumi.StringOutput { return v.CommitmentEndTime }).(pulumi.StringOutput)
}

// The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
func (o CapacityCommitmentOutput) CommitmentStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityCommitment) pulumi.StringOutput { return v.CommitmentStartTime }).(pulumi.StringOutput)
}

// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
func (o CapacityCommitmentOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityCommitment) pulumi.StringPtrOutput { return v.Edition }).(pulumi.StringPtrOutput)
}

// If true, fail the request if another project in the organization has a capacity commitment.
func (o CapacityCommitmentOutput) EnforceSingleAdminProjectPerOrg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityCommitment) pulumi.StringPtrOutput { return v.EnforceSingleAdminProjectPerOrg }).(pulumi.StringPtrOutput)
}

// The geographic location where the transfer config should reside.
// Examples: US, EU, asia-northeast1. The default value is US.
func (o CapacityCommitmentOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityCommitment) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource name of the capacity commitment, e.g., projects/myproject/locations/US/capacityCommitments/123
func (o CapacityCommitmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityCommitment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Capacity commitment plan. Valid values are at https://cloud.google.com/bigquery/docs/reference/reservations/rpc/google.cloud.bigquery.reservation.v1#commitmentplan
//
// ***
func (o CapacityCommitmentOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityCommitment) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o CapacityCommitmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityCommitment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The plan this capacity commitment is converted to after commitmentEndTime passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable some commitment plans.
func (o CapacityCommitmentOutput) RenewalPlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityCommitment) pulumi.StringPtrOutput { return v.RenewalPlan }).(pulumi.StringPtrOutput)
}

// Number of slots in this commitment.
func (o CapacityCommitmentOutput) SlotCount() pulumi.IntOutput {
	return o.ApplyT(func(v *CapacityCommitment) pulumi.IntOutput { return v.SlotCount }).(pulumi.IntOutput)
}

// State of the commitment
func (o CapacityCommitmentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityCommitment) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type CapacityCommitmentArrayOutput struct{ *pulumi.OutputState }

func (CapacityCommitmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CapacityCommitment)(nil)).Elem()
}

func (o CapacityCommitmentArrayOutput) ToCapacityCommitmentArrayOutput() CapacityCommitmentArrayOutput {
	return o
}

func (o CapacityCommitmentArrayOutput) ToCapacityCommitmentArrayOutputWithContext(ctx context.Context) CapacityCommitmentArrayOutput {
	return o
}

func (o CapacityCommitmentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CapacityCommitment] {
	return pulumix.Output[[]*CapacityCommitment]{
		OutputState: o.OutputState,
	}
}

func (o CapacityCommitmentArrayOutput) Index(i pulumi.IntInput) CapacityCommitmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CapacityCommitment {
		return vs[0].([]*CapacityCommitment)[vs[1].(int)]
	}).(CapacityCommitmentOutput)
}

type CapacityCommitmentMapOutput struct{ *pulumi.OutputState }

func (CapacityCommitmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CapacityCommitment)(nil)).Elem()
}

func (o CapacityCommitmentMapOutput) ToCapacityCommitmentMapOutput() CapacityCommitmentMapOutput {
	return o
}

func (o CapacityCommitmentMapOutput) ToCapacityCommitmentMapOutputWithContext(ctx context.Context) CapacityCommitmentMapOutput {
	return o
}

func (o CapacityCommitmentMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CapacityCommitment] {
	return pulumix.Output[map[string]*CapacityCommitment]{
		OutputState: o.OutputState,
	}
}

func (o CapacityCommitmentMapOutput) MapIndex(k pulumi.StringInput) CapacityCommitmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CapacityCommitment {
		return vs[0].(map[string]*CapacityCommitment)[vs[1].(string)]
	}).(CapacityCommitmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityCommitmentInput)(nil)).Elem(), &CapacityCommitment{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityCommitmentArrayInput)(nil)).Elem(), CapacityCommitmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityCommitmentMapInput)(nil)).Elem(), CapacityCommitmentMap{})
	pulumi.RegisterOutputType(CapacityCommitmentOutput{})
	pulumi.RegisterOutputType(CapacityCommitmentArrayOutput{})
	pulumi.RegisterOutputType(CapacityCommitmentMapOutput{})
}
