// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package integrationconnectors

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Integration connectors Connection.
//
// To get more information about Connection, see:
//
// * [API documentation](https://cloud.google.com/integration-connectors/docs/reference/rest/v1/projects.locations.connections)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/integration-connectors/docs/createconnection)
//
// ## Example Usage
//
// ### Integration Connectors Connection Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/integrationconnectors"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testProject, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = integrationconnectors.NewConnection(ctx, "pubsubconnection", &integrationconnectors.ConnectionArgs{
//				Name:             pulumi.String("test-pubsub"),
//				Location:         pulumi.String("us-central1"),
//				ConnectorVersion: pulumi.Sprintf("projects/%v/locations/global/providers/gcp/connectors/pubsub/versions/1", testProject.ProjectId),
//				Description:      pulumi.String("tf created description"),
//				ConfigVariables: integrationconnectors.ConnectionConfigVariableArray{
//					&integrationconnectors.ConnectionConfigVariableArgs{
//						Key:         pulumi.String("project_id"),
//						StringValue: pulumi.String("connectors-example"),
//					},
//					&integrationconnectors.ConnectionConfigVariableArgs{
//						Key:         pulumi.String("topic_id"),
//						StringValue: pulumi.String("test"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Integration Connectors Connection Advanced
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/integrationconnectors"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testProject, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecret(ctx, "secret-basic", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("test-secret"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					UserManaged: &secretmanager.SecretReplicationUserManagedArgs{
//						Replicas: secretmanager.SecretReplicationUserManagedReplicaArray{
//							&secretmanager.SecretReplicationUserManagedReplicaArgs{
//								Location: pulumi.String("us-central1"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretVersion(ctx, "secret-version-basic", &secretmanager.SecretVersionArgs{
//				Secret:     secret_basic.ID(),
//				SecretData: pulumi.String("dummypassword"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretIamMember(ctx, "secret_iam", &secretmanager.SecretIamMemberArgs{
//				SecretId: secret_basic.ID(),
//				Role:     pulumi.String("roles/secretmanager.admin"),
//				Member:   pulumi.Sprintf("serviceAccount:%v-compute@developer.gserviceaccount.com", testProject.Number),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				secret_version_basic,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = integrationconnectors.NewConnection(ctx, "zendeskconnection", &integrationconnectors.ConnectionArgs{
//				Name:             pulumi.String("test-zendesk"),
//				Description:      pulumi.String("tf updated description"),
//				Location:         pulumi.String("us-central1"),
//				ServiceAccount:   pulumi.Sprintf("%v-compute@developer.gserviceaccount.com", testProject.Number),
//				ConnectorVersion: pulumi.Sprintf("projects/%v/locations/global/providers/zendesk/connectors/zendesk/versions/1", testProject.ProjectId),
//				ConfigVariables: integrationconnectors.ConnectionConfigVariableArray{
//					&integrationconnectors.ConnectionConfigVariableArgs{
//						Key:          pulumi.String("proxy_enabled"),
//						BooleanValue: pulumi.Bool(false),
//					},
//					&integrationconnectors.ConnectionConfigVariableArgs{
//						Key:          pulumi.String("sample_integer_value"),
//						IntegerValue: pulumi.Int(1),
//					},
//					&integrationconnectors.ConnectionConfigVariableArgs{
//						Key: pulumi.String("sample_encryption_key_value"),
//						EncryptionKeyValue: &integrationconnectors.ConnectionConfigVariableEncryptionKeyValueArgs{
//							Type:       pulumi.String("GOOGLE_MANAGED"),
//							KmsKeyName: pulumi.String("sampleKMSKkey"),
//						},
//					},
//					&integrationconnectors.ConnectionConfigVariableArgs{
//						Key: pulumi.String("sample_secret_value"),
//						SecretValue: &integrationconnectors.ConnectionConfigVariableSecretValueArgs{
//							SecretVersion: secret_version_basic.Name,
//						},
//					},
//				},
//				Suspended: pulumi.Bool(false),
//				AuthConfig: &integrationconnectors.ConnectionAuthConfigArgs{
//					AdditionalVariables: integrationconnectors.ConnectionAuthConfigAdditionalVariableArray{
//						&integrationconnectors.ConnectionAuthConfigAdditionalVariableArgs{
//							Key:         pulumi.String("sample_string"),
//							StringValue: pulumi.String("sampleString"),
//						},
//						&integrationconnectors.ConnectionAuthConfigAdditionalVariableArgs{
//							Key:          pulumi.String("sample_boolean"),
//							BooleanValue: pulumi.Bool(false),
//						},
//						&integrationconnectors.ConnectionAuthConfigAdditionalVariableArgs{
//							Key:          pulumi.String("sample_integer"),
//							IntegerValue: pulumi.Int(1),
//						},
//						&integrationconnectors.ConnectionAuthConfigAdditionalVariableArgs{
//							Key: pulumi.String("sample_secret_value"),
//							SecretValue: &integrationconnectors.ConnectionAuthConfigAdditionalVariableSecretValueArgs{
//								SecretVersion: secret_version_basic.Name,
//							},
//						},
//						&integrationconnectors.ConnectionAuthConfigAdditionalVariableArgs{
//							Key: pulumi.String("sample_encryption_key_value"),
//							EncryptionKeyValue: &integrationconnectors.ConnectionAuthConfigAdditionalVariableEncryptionKeyValueArgs{
//								Type:       pulumi.String("GOOGLE_MANAGED"),
//								KmsKeyName: pulumi.String("sampleKMSKkey"),
//							},
//						},
//					},
//					AuthType: pulumi.String("USER_PASSWORD"),
//					AuthKey:  pulumi.String("sampleAuthKey"),
//					UserPassword: &integrationconnectors.ConnectionAuthConfigUserPasswordArgs{
//						Username: pulumi.String("user@xyz.com"),
//						Password: &integrationconnectors.ConnectionAuthConfigUserPasswordPasswordArgs{
//							SecretVersion: secret_version_basic.Name,
//						},
//					},
//				},
//				DestinationConfigs: integrationconnectors.ConnectionDestinationConfigArray{
//					&integrationconnectors.ConnectionDestinationConfigArgs{
//						Key: pulumi.String("url"),
//						Destinations: integrationconnectors.ConnectionDestinationConfigDestinationArray{
//							&integrationconnectors.ConnectionDestinationConfigDestinationArgs{
//								Host: pulumi.String("https://test.zendesk.com"),
//								Port: pulumi.Int(80),
//							},
//						},
//					},
//				},
//				LockConfig: &integrationconnectors.ConnectionLockConfigArgs{
//					Locked: pulumi.Bool(false),
//					Reason: pulumi.String("Its not locked"),
//				},
//				LogConfig: &integrationconnectors.ConnectionLogConfigArgs{
//					Enabled: pulumi.Bool(true),
//				},
//				NodeConfig: &integrationconnectors.ConnectionNodeConfigArgs{
//					MinNodeCount: pulumi.Int(2),
//					MaxNodeCount: pulumi.Int(50),
//				},
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				SslConfig: &integrationconnectors.ConnectionSslConfigArgs{
//					AdditionalVariables: integrationconnectors.ConnectionSslConfigAdditionalVariableArray{
//						&integrationconnectors.ConnectionSslConfigAdditionalVariableArgs{
//							Key:         pulumi.String("sample_string"),
//							StringValue: pulumi.String("sampleString"),
//						},
//						&integrationconnectors.ConnectionSslConfigAdditionalVariableArgs{
//							Key:          pulumi.String("sample_boolean"),
//							BooleanValue: pulumi.Bool(false),
//						},
//						&integrationconnectors.ConnectionSslConfigAdditionalVariableArgs{
//							Key:          pulumi.String("sample_integer"),
//							IntegerValue: pulumi.Int(1),
//						},
//						&integrationconnectors.ConnectionSslConfigAdditionalVariableArgs{
//							Key: pulumi.String("sample_secret_value"),
//							SecretValue: &integrationconnectors.ConnectionSslConfigAdditionalVariableSecretValueArgs{
//								SecretVersion: secret_version_basic.Name,
//							},
//						},
//						&integrationconnectors.ConnectionSslConfigAdditionalVariableArgs{
//							Key: pulumi.String("sample_encryption_key_value"),
//							EncryptionKeyValue: &integrationconnectors.ConnectionSslConfigAdditionalVariableEncryptionKeyValueArgs{
//								Type:       pulumi.String("GOOGLE_MANAGED"),
//								KmsKeyName: pulumi.String("sampleKMSKkey"),
//							},
//						},
//					},
//					ClientCertType: pulumi.String("PEM"),
//					ClientCertificate: &integrationconnectors.ConnectionSslConfigClientCertificateArgs{
//						SecretVersion: secret_version_basic.Name,
//					},
//					ClientPrivateKey: &integrationconnectors.ConnectionSslConfigClientPrivateKeyArgs{
//						SecretVersion: secret_version_basic.Name,
//					},
//					ClientPrivateKeyPass: &integrationconnectors.ConnectionSslConfigClientPrivateKeyPassArgs{
//						SecretVersion: secret_version_basic.Name,
//					},
//					PrivateServerCertificate: &integrationconnectors.ConnectionSslConfigPrivateServerCertificateArgs{
//						SecretVersion: secret_version_basic.Name,
//					},
//					ServerCertType: pulumi.String("PEM"),
//					TrustModel:     pulumi.String("PRIVATE"),
//					Type:           pulumi.String("TLS"),
//					UseSsl:         pulumi.Bool(true),
//				},
//				EventingEnablementType: pulumi.String("EVENTING_AND_CONNECTION"),
//				EventingConfig: &integrationconnectors.ConnectionEventingConfigArgs{
//					AdditionalVariables: integrationconnectors.ConnectionEventingConfigAdditionalVariableArray{
//						&integrationconnectors.ConnectionEventingConfigAdditionalVariableArgs{
//							Key:         pulumi.String("sample_string"),
//							StringValue: pulumi.String("sampleString"),
//						},
//						&integrationconnectors.ConnectionEventingConfigAdditionalVariableArgs{
//							Key:          pulumi.String("sample_boolean"),
//							BooleanValue: pulumi.Bool(false),
//						},
//						&integrationconnectors.ConnectionEventingConfigAdditionalVariableArgs{
//							Key:          pulumi.String("sample_integer"),
//							IntegerValue: pulumi.Int(1),
//						},
//						&integrationconnectors.ConnectionEventingConfigAdditionalVariableArgs{
//							Key: pulumi.String("sample_secret_value"),
//							SecretValue: &integrationconnectors.ConnectionEventingConfigAdditionalVariableSecretValueArgs{
//								SecretVersion: secret_version_basic.Name,
//							},
//						},
//						&integrationconnectors.ConnectionEventingConfigAdditionalVariableArgs{
//							Key: pulumi.String("sample_encryption_key_value"),
//							EncryptionKeyValue: &integrationconnectors.ConnectionEventingConfigAdditionalVariableEncryptionKeyValueArgs{
//								Type:       pulumi.String("GOOGLE_MANAGED"),
//								KmsKeyName: pulumi.String("sampleKMSKkey"),
//							},
//						},
//					},
//					RegistrationDestinationConfig: &integrationconnectors.ConnectionEventingConfigRegistrationDestinationConfigArgs{
//						Key: pulumi.String("registration_destination_config"),
//						Destinations: integrationconnectors.ConnectionEventingConfigRegistrationDestinationConfigDestinationArray{
//							&integrationconnectors.ConnectionEventingConfigRegistrationDestinationConfigDestinationArgs{
//								Host: pulumi.String("https://test.zendesk.com"),
//								Port: pulumi.Int(80),
//							},
//						},
//					},
//					AuthConfig: &integrationconnectors.ConnectionEventingConfigAuthConfigArgs{
//						AuthType: pulumi.String("USER_PASSWORD"),
//						AuthKey:  pulumi.String("sampleAuthKey"),
//						UserPassword: &integrationconnectors.ConnectionEventingConfigAuthConfigUserPasswordArgs{
//							Username: pulumi.String("user@xyz.com"),
//							Password: &integrationconnectors.ConnectionEventingConfigAuthConfigUserPasswordPasswordArgs{
//								SecretVersion: secret_version_basic.Name,
//							},
//						},
//						AdditionalVariables: integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableArray{
//							&integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableArgs{
//								Key:         pulumi.String("sample_string"),
//								StringValue: pulumi.String("sampleString"),
//							},
//							&integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableArgs{
//								Key:          pulumi.String("sample_boolean"),
//								BooleanValue: pulumi.Bool(false),
//							},
//							&integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableArgs{
//								Key:          pulumi.String("sample_integer"),
//								IntegerValue: pulumi.Int(1),
//							},
//							&integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableArgs{
//								Key: pulumi.String("sample_secret_value"),
//								SecretValue: &integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableSecretValueArgs{
//									SecretVersion: secret_version_basic.Name,
//								},
//							},
//							&integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableArgs{
//								Key: pulumi.String("sample_encryption_key_value"),
//								EncryptionKeyValue: &integrationconnectors.ConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueArgs{
//									Type:       pulumi.String("GOOGLE_MANAGED"),
//									KmsKeyName: pulumi.String("sampleKMSKkey"),
//								},
//							},
//						},
//					},
//					EnrichmentEnabled: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Connection can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/connections/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// When using the `pulumi import` command, Connection can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:integrationconnectors/connection:Connection default projects/{{project}}/locations/{{location}}/connections/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:integrationconnectors/connection:Connection default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:integrationconnectors/connection:Connection default {{location}}/{{name}}
// ```
type Connection struct {
	pulumi.CustomResourceState

	// authConfig for the connection.
	// Structure is documented below.
	AuthConfig ConnectionAuthConfigPtrOutput `pulumi:"authConfig"`
	// Config Variables for the connection.
	// Structure is documented below.
	ConfigVariables ConnectionConfigVariableArrayOutput `pulumi:"configVariables"`
	// Connection revision. This field is only updated when the connection is created or updated by User.
	ConnectionRevision pulumi.StringOutput `pulumi:"connectionRevision"`
	// connectorVersion of the Connector.
	ConnectorVersion pulumi.StringOutput `pulumi:"connectorVersion"`
	// This configuration provides infra configs like rate limit threshold which need to be configurable for every connector version.
	// Structure is documented below.
	ConnectorVersionInfraConfigs ConnectionConnectorVersionInfraConfigArrayOutput `pulumi:"connectorVersionInfraConfigs"`
	// Flag to mark the version indicating the launch stage.
	ConnectorVersionLaunchStage pulumi.StringOutput `pulumi:"connectorVersionLaunchStage"`
	// Time the Namespace was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// An arbitrary description for the Connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Define the Connectors target endpoint.
	// Structure is documented below.
	DestinationConfigs ConnectionDestinationConfigArrayOutput `pulumi:"destinationConfigs"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Eventing Configuration of a connection
	// Structure is documented below.
	EventingConfig ConnectionEventingConfigPtrOutput `pulumi:"eventingConfig"`
	// Eventing enablement type. Will be nil if eventing is not enabled.
	// Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
	EventingEnablementType pulumi.StringPtrOutput `pulumi:"eventingEnablementType"`
	// Eventing Runtime Data.
	// Structure is documented below.
	EventingRuntimeDatas ConnectionEventingRuntimeDataArrayOutput `pulumi:"eventingRuntimeDatas"`
	// Resource labels to represent user provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Location in which Connection needs to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Determines whether or no a connection is locked. If locked, a reason must be specified.
	// Structure is documented below.
	LockConfig ConnectionLockConfigPtrOutput `pulumi:"lockConfig"`
	// Log configuration for the connection.
	// Structure is documented below.
	LogConfig ConnectionLogConfigPtrOutput `pulumi:"logConfig"`
	// Name of Connection needs to be created.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// Node configuration for the connection.
	// Structure is documented below.
	NodeConfig ConnectionNodeConfigOutput `pulumi:"nodeConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Service account needed for runtime plane to access Google Cloud resources.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address.
	// e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
	ServiceDirectory pulumi.StringOutput `pulumi:"serviceDirectory"`
	// SSL Configuration of a connection
	// Structure is documented below.
	SslConfig ConnectionSslConfigPtrOutput `pulumi:"sslConfig"`
	// (Output)
	// Current status of eventing.
	// Structure is documented below.
	Statuses ConnectionStatusArrayOutput `pulumi:"statuses"`
	// This subscription type enum states the subscription type of the project.
	SubscriptionType pulumi.StringOutput `pulumi:"subscriptionType"`
	// Suspended indicates if a user has suspended a connection or not.
	Suspended pulumi.BoolPtrOutput `pulumi:"suspended"`
	// Time the Namespace was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectorVersion == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorVersion'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connection
	err := ctx.RegisterResource("gcp:integrationconnectors/connection:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("gcp:integrationconnectors/connection:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
	// authConfig for the connection.
	// Structure is documented below.
	AuthConfig *ConnectionAuthConfig `pulumi:"authConfig"`
	// Config Variables for the connection.
	// Structure is documented below.
	ConfigVariables []ConnectionConfigVariable `pulumi:"configVariables"`
	// Connection revision. This field is only updated when the connection is created or updated by User.
	ConnectionRevision *string `pulumi:"connectionRevision"`
	// connectorVersion of the Connector.
	ConnectorVersion *string `pulumi:"connectorVersion"`
	// This configuration provides infra configs like rate limit threshold which need to be configurable for every connector version.
	// Structure is documented below.
	ConnectorVersionInfraConfigs []ConnectionConnectorVersionInfraConfig `pulumi:"connectorVersionInfraConfigs"`
	// Flag to mark the version indicating the launch stage.
	ConnectorVersionLaunchStage *string `pulumi:"connectorVersionLaunchStage"`
	// Time the Namespace was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// An arbitrary description for the Connection.
	Description *string `pulumi:"description"`
	// Define the Connectors target endpoint.
	// Structure is documented below.
	DestinationConfigs []ConnectionDestinationConfig `pulumi:"destinationConfigs"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Eventing Configuration of a connection
	// Structure is documented below.
	EventingConfig *ConnectionEventingConfig `pulumi:"eventingConfig"`
	// Eventing enablement type. Will be nil if eventing is not enabled.
	// Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
	EventingEnablementType *string `pulumi:"eventingEnablementType"`
	// Eventing Runtime Data.
	// Structure is documented below.
	EventingRuntimeDatas []ConnectionEventingRuntimeData `pulumi:"eventingRuntimeDatas"`
	// Resource labels to represent user provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Location in which Connection needs to be created.
	Location *string `pulumi:"location"`
	// Determines whether or no a connection is locked. If locked, a reason must be specified.
	// Structure is documented below.
	LockConfig *ConnectionLockConfig `pulumi:"lockConfig"`
	// Log configuration for the connection.
	// Structure is documented below.
	LogConfig *ConnectionLogConfig `pulumi:"logConfig"`
	// Name of Connection needs to be created.
	//
	// ***
	Name *string `pulumi:"name"`
	// Node configuration for the connection.
	// Structure is documented below.
	NodeConfig *ConnectionNodeConfig `pulumi:"nodeConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Service account needed for runtime plane to access Google Cloud resources.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address.
	// e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
	ServiceDirectory *string `pulumi:"serviceDirectory"`
	// SSL Configuration of a connection
	// Structure is documented below.
	SslConfig *ConnectionSslConfig `pulumi:"sslConfig"`
	// (Output)
	// Current status of eventing.
	// Structure is documented below.
	Statuses []ConnectionStatus `pulumi:"statuses"`
	// This subscription type enum states the subscription type of the project.
	SubscriptionType *string `pulumi:"subscriptionType"`
	// Suspended indicates if a user has suspended a connection or not.
	Suspended *bool `pulumi:"suspended"`
	// Time the Namespace was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type ConnectionState struct {
	// authConfig for the connection.
	// Structure is documented below.
	AuthConfig ConnectionAuthConfigPtrInput
	// Config Variables for the connection.
	// Structure is documented below.
	ConfigVariables ConnectionConfigVariableArrayInput
	// Connection revision. This field is only updated when the connection is created or updated by User.
	ConnectionRevision pulumi.StringPtrInput
	// connectorVersion of the Connector.
	ConnectorVersion pulumi.StringPtrInput
	// This configuration provides infra configs like rate limit threshold which need to be configurable for every connector version.
	// Structure is documented below.
	ConnectorVersionInfraConfigs ConnectionConnectorVersionInfraConfigArrayInput
	// Flag to mark the version indicating the launch stage.
	ConnectorVersionLaunchStage pulumi.StringPtrInput
	// Time the Namespace was created in UTC.
	CreateTime pulumi.StringPtrInput
	// An arbitrary description for the Connection.
	Description pulumi.StringPtrInput
	// Define the Connectors target endpoint.
	// Structure is documented below.
	DestinationConfigs ConnectionDestinationConfigArrayInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Eventing Configuration of a connection
	// Structure is documented below.
	EventingConfig ConnectionEventingConfigPtrInput
	// Eventing enablement type. Will be nil if eventing is not enabled.
	// Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
	EventingEnablementType pulumi.StringPtrInput
	// Eventing Runtime Data.
	// Structure is documented below.
	EventingRuntimeDatas ConnectionEventingRuntimeDataArrayInput
	// Resource labels to represent user provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Location in which Connection needs to be created.
	Location pulumi.StringPtrInput
	// Determines whether or no a connection is locked. If locked, a reason must be specified.
	// Structure is documented below.
	LockConfig ConnectionLockConfigPtrInput
	// Log configuration for the connection.
	// Structure is documented below.
	LogConfig ConnectionLogConfigPtrInput
	// Name of Connection needs to be created.
	//
	// ***
	Name pulumi.StringPtrInput
	// Node configuration for the connection.
	// Structure is documented below.
	NodeConfig ConnectionNodeConfigPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Service account needed for runtime plane to access Google Cloud resources.
	ServiceAccount pulumi.StringPtrInput
	// The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address.
	// e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
	ServiceDirectory pulumi.StringPtrInput
	// SSL Configuration of a connection
	// Structure is documented below.
	SslConfig ConnectionSslConfigPtrInput
	// (Output)
	// Current status of eventing.
	// Structure is documented below.
	Statuses ConnectionStatusArrayInput
	// This subscription type enum states the subscription type of the project.
	SubscriptionType pulumi.StringPtrInput
	// Suspended indicates if a user has suspended a connection or not.
	Suspended pulumi.BoolPtrInput
	// Time the Namespace was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// authConfig for the connection.
	// Structure is documented below.
	AuthConfig *ConnectionAuthConfig `pulumi:"authConfig"`
	// Config Variables for the connection.
	// Structure is documented below.
	ConfigVariables []ConnectionConfigVariable `pulumi:"configVariables"`
	// connectorVersion of the Connector.
	ConnectorVersion string `pulumi:"connectorVersion"`
	// An arbitrary description for the Connection.
	Description *string `pulumi:"description"`
	// Define the Connectors target endpoint.
	// Structure is documented below.
	DestinationConfigs []ConnectionDestinationConfig `pulumi:"destinationConfigs"`
	// Eventing Configuration of a connection
	// Structure is documented below.
	EventingConfig *ConnectionEventingConfig `pulumi:"eventingConfig"`
	// Eventing enablement type. Will be nil if eventing is not enabled.
	// Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
	EventingEnablementType *string `pulumi:"eventingEnablementType"`
	// Resource labels to represent user provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Location in which Connection needs to be created.
	Location string `pulumi:"location"`
	// Determines whether or no a connection is locked. If locked, a reason must be specified.
	// Structure is documented below.
	LockConfig *ConnectionLockConfig `pulumi:"lockConfig"`
	// Log configuration for the connection.
	// Structure is documented below.
	LogConfig *ConnectionLogConfig `pulumi:"logConfig"`
	// Name of Connection needs to be created.
	//
	// ***
	Name *string `pulumi:"name"`
	// Node configuration for the connection.
	// Structure is documented below.
	NodeConfig *ConnectionNodeConfig `pulumi:"nodeConfig"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Service account needed for runtime plane to access Google Cloud resources.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// SSL Configuration of a connection
	// Structure is documented below.
	SslConfig *ConnectionSslConfig `pulumi:"sslConfig"`
	// Suspended indicates if a user has suspended a connection or not.
	Suspended *bool `pulumi:"suspended"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// authConfig for the connection.
	// Structure is documented below.
	AuthConfig ConnectionAuthConfigPtrInput
	// Config Variables for the connection.
	// Structure is documented below.
	ConfigVariables ConnectionConfigVariableArrayInput
	// connectorVersion of the Connector.
	ConnectorVersion pulumi.StringInput
	// An arbitrary description for the Connection.
	Description pulumi.StringPtrInput
	// Define the Connectors target endpoint.
	// Structure is documented below.
	DestinationConfigs ConnectionDestinationConfigArrayInput
	// Eventing Configuration of a connection
	// Structure is documented below.
	EventingConfig ConnectionEventingConfigPtrInput
	// Eventing enablement type. Will be nil if eventing is not enabled.
	// Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
	EventingEnablementType pulumi.StringPtrInput
	// Resource labels to represent user provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Location in which Connection needs to be created.
	Location pulumi.StringInput
	// Determines whether or no a connection is locked. If locked, a reason must be specified.
	// Structure is documented below.
	LockConfig ConnectionLockConfigPtrInput
	// Log configuration for the connection.
	// Structure is documented below.
	LogConfig ConnectionLogConfigPtrInput
	// Name of Connection needs to be created.
	//
	// ***
	Name pulumi.StringPtrInput
	// Node configuration for the connection.
	// Structure is documented below.
	NodeConfig ConnectionNodeConfigPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Service account needed for runtime plane to access Google Cloud resources.
	ServiceAccount pulumi.StringPtrInput
	// SSL Configuration of a connection
	// Structure is documented below.
	SslConfig ConnectionSslConfigPtrInput
	// Suspended indicates if a user has suspended a connection or not.
	Suspended pulumi.BoolPtrInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (*Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i *Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

// ConnectionArrayInput is an input type that accepts ConnectionArray and ConnectionArrayOutput values.
// You can construct a concrete instance of `ConnectionArrayInput` via:
//
//	ConnectionArray{ ConnectionArgs{...} }
type ConnectionArrayInput interface {
	pulumi.Input

	ToConnectionArrayOutput() ConnectionArrayOutput
	ToConnectionArrayOutputWithContext(context.Context) ConnectionArrayOutput
}

type ConnectionArray []ConnectionInput

func (ConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (i ConnectionArray) ToConnectionArrayOutput() ConnectionArrayOutput {
	return i.ToConnectionArrayOutputWithContext(context.Background())
}

func (i ConnectionArray) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionArrayOutput)
}

// ConnectionMapInput is an input type that accepts ConnectionMap and ConnectionMapOutput values.
// You can construct a concrete instance of `ConnectionMapInput` via:
//
//	ConnectionMap{ "key": ConnectionArgs{...} }
type ConnectionMapInput interface {
	pulumi.Input

	ToConnectionMapOutput() ConnectionMapOutput
	ToConnectionMapOutputWithContext(context.Context) ConnectionMapOutput
}

type ConnectionMap map[string]ConnectionInput

func (ConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (i ConnectionMap) ToConnectionMapOutput() ConnectionMapOutput {
	return i.ToConnectionMapOutputWithContext(context.Background())
}

func (i ConnectionMap) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionMapOutput)
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

// authConfig for the connection.
// Structure is documented below.
func (o ConnectionOutput) AuthConfig() ConnectionAuthConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionAuthConfigPtrOutput { return v.AuthConfig }).(ConnectionAuthConfigPtrOutput)
}

// Config Variables for the connection.
// Structure is documented below.
func (o ConnectionOutput) ConfigVariables() ConnectionConfigVariableArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionConfigVariableArrayOutput { return v.ConfigVariables }).(ConnectionConfigVariableArrayOutput)
}

// Connection revision. This field is only updated when the connection is created or updated by User.
func (o ConnectionOutput) ConnectionRevision() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.ConnectionRevision }).(pulumi.StringOutput)
}

// connectorVersion of the Connector.
func (o ConnectionOutput) ConnectorVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.ConnectorVersion }).(pulumi.StringOutput)
}

// This configuration provides infra configs like rate limit threshold which need to be configurable for every connector version.
// Structure is documented below.
func (o ConnectionOutput) ConnectorVersionInfraConfigs() ConnectionConnectorVersionInfraConfigArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionConnectorVersionInfraConfigArrayOutput {
		return v.ConnectorVersionInfraConfigs
	}).(ConnectionConnectorVersionInfraConfigArrayOutput)
}

// Flag to mark the version indicating the launch stage.
func (o ConnectionOutput) ConnectorVersionLaunchStage() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.ConnectorVersionLaunchStage }).(pulumi.StringOutput)
}

// Time the Namespace was created in UTC.
func (o ConnectionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// An arbitrary description for the Connection.
func (o ConnectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Define the Connectors target endpoint.
// Structure is documented below.
func (o ConnectionOutput) DestinationConfigs() ConnectionDestinationConfigArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionDestinationConfigArrayOutput { return v.DestinationConfigs }).(ConnectionDestinationConfigArrayOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o ConnectionOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Eventing Configuration of a connection
// Structure is documented below.
func (o ConnectionOutput) EventingConfig() ConnectionEventingConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionEventingConfigPtrOutput { return v.EventingConfig }).(ConnectionEventingConfigPtrOutput)
}

// Eventing enablement type. Will be nil if eventing is not enabled.
// Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
func (o ConnectionOutput) EventingEnablementType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.EventingEnablementType }).(pulumi.StringPtrOutput)
}

// Eventing Runtime Data.
// Structure is documented below.
func (o ConnectionOutput) EventingRuntimeDatas() ConnectionEventingRuntimeDataArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionEventingRuntimeDataArrayOutput { return v.EventingRuntimeDatas }).(ConnectionEventingRuntimeDataArrayOutput)
}

// Resource labels to represent user provided metadata.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o ConnectionOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Location in which Connection needs to be created.
func (o ConnectionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Determines whether or no a connection is locked. If locked, a reason must be specified.
// Structure is documented below.
func (o ConnectionOutput) LockConfig() ConnectionLockConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionLockConfigPtrOutput { return v.LockConfig }).(ConnectionLockConfigPtrOutput)
}

// Log configuration for the connection.
// Structure is documented below.
func (o ConnectionOutput) LogConfig() ConnectionLogConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionLogConfigPtrOutput { return v.LogConfig }).(ConnectionLogConfigPtrOutput)
}

// Name of Connection needs to be created.
//
// ***
func (o ConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Node configuration for the connection.
// Structure is documented below.
func (o ConnectionOutput) NodeConfig() ConnectionNodeConfigOutput {
	return o.ApplyT(func(v *Connection) ConnectionNodeConfigOutput { return v.NodeConfig }).(ConnectionNodeConfigOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ConnectionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o ConnectionOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Service account needed for runtime plane to access Google Cloud resources.
func (o ConnectionOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address.
// e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
func (o ConnectionOutput) ServiceDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.ServiceDirectory }).(pulumi.StringOutput)
}

// SSL Configuration of a connection
// Structure is documented below.
func (o ConnectionOutput) SslConfig() ConnectionSslConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionSslConfigPtrOutput { return v.SslConfig }).(ConnectionSslConfigPtrOutput)
}

// (Output)
// Current status of eventing.
// Structure is documented below.
func (o ConnectionOutput) Statuses() ConnectionStatusArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionStatusArrayOutput { return v.Statuses }).(ConnectionStatusArrayOutput)
}

// This subscription type enum states the subscription type of the project.
func (o ConnectionOutput) SubscriptionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.SubscriptionType }).(pulumi.StringOutput)
}

// Suspended indicates if a user has suspended a connection or not.
func (o ConnectionOutput) Suspended() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolPtrOutput { return v.Suspended }).(pulumi.BoolPtrOutput)
}

// Time the Namespace was updated in UTC.
func (o ConnectionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ConnectionArrayOutput struct{ *pulumi.OutputState }

func (ConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (o ConnectionArrayOutput) ToConnectionArrayOutput() ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) Index(i pulumi.IntInput) ConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].([]*Connection)[vs[1].(int)]
	}).(ConnectionOutput)
}

type ConnectionMapOutput struct{ *pulumi.OutputState }

func (ConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (o ConnectionMapOutput) ToConnectionMapOutput() ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) MapIndex(k pulumi.StringInput) ConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].(map[string]*Connection)[vs[1].(string)]
	}).(ConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), &Connection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionArrayInput)(nil)).Elem(), ConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionMapInput)(nil)).Elem(), ConnectionMap{})
	pulumi.RegisterOutputType(ConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionArrayOutput{})
	pulumi.RegisterOutputType(ConnectionMapOutput{})
}
