// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package integrationconnectors

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Integration connectors Endpoint Attachment.
//
// To get more information about EndpointAttachment, see:
//
// * [API documentation](https://cloud.google.com/integration-connectors/docs/reference/rest/v1/projects.locations.endpointAttachments)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/integration-connectors/docs/create-endpoint-attachment)
//
// ## Example Usage
// ### Integration Connectors Endpoint Attachment
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/integrationconnectors"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := integrationconnectors.NewEndpointAttachment(ctx, "sampleendpointattachment", &integrationconnectors.EndpointAttachmentArgs{
//				Description: pulumi.String("tf created description"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Location:          pulumi.String("us-central1"),
//				ServiceAttachment: pulumi.String("projects/connectors-example/regions/us-central1/serviceAttachments/test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EndpointAttachment can be imported using any of these accepted formats* `projects/{{project}}/locations/{{location}}/endpointAttachments/{{name}}` * `{{project}}/{{location}}/{{name}}` * `{{location}}/{{name}}` In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import EndpointAttachment using one of the formats above. For exampletf import {
//
//	id = "projects/{{project}}/locations/{{location}}/endpointAttachments/{{name}}"
//
//	to = google_integration_connectors_endpoint_attachment.default }
//
// ```sh
//
//	$ pulumi import gcp:integrationconnectors/endpointAttachment:EndpointAttachment When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), EndpointAttachment can be imported using one of the formats above. For example
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:integrationconnectors/endpointAttachment:EndpointAttachment default projects/{{project}}/locations/{{location}}/endpointAttachments/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:integrationconnectors/endpointAttachment:EndpointAttachment default {{project}}/{{location}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:integrationconnectors/endpointAttachment:EndpointAttachment default {{location}}/{{name}}
//
// ```
type EndpointAttachment struct {
	pulumi.CustomResourceState

	// Time the Namespace was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The Private Service Connect connection endpoint ip.
	EndpointIp pulumi.StringOutput `pulumi:"endpointIp"`
	// Resource labels to represent user provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Location in which Endpoint Attachment needs to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of Endpoint Attachment needs to be created.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The path of the service attachment.
	ServiceAttachment pulumi.StringOutput `pulumi:"serviceAttachment"`
	// Time the Namespace was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewEndpointAttachment registers a new resource with the given unique name, arguments, and options.
func NewEndpointAttachment(ctx *pulumi.Context,
	name string, args *EndpointAttachmentArgs, opts ...pulumi.ResourceOption) (*EndpointAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ServiceAttachment == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAttachment'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EndpointAttachment
	err := ctx.RegisterResource("gcp:integrationconnectors/endpointAttachment:EndpointAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpointAttachment gets an existing EndpointAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpointAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointAttachmentState, opts ...pulumi.ResourceOption) (*EndpointAttachment, error) {
	var resource EndpointAttachment
	err := ctx.ReadResource("gcp:integrationconnectors/endpointAttachment:EndpointAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EndpointAttachment resources.
type endpointAttachmentState struct {
	// Time the Namespace was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The Private Service Connect connection endpoint ip.
	EndpointIp *string `pulumi:"endpointIp"`
	// Resource labels to represent user provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Location in which Endpoint Attachment needs to be created.
	Location *string `pulumi:"location"`
	// Name of Endpoint Attachment needs to be created.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The path of the service attachment.
	ServiceAttachment *string `pulumi:"serviceAttachment"`
	// Time the Namespace was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type EndpointAttachmentState struct {
	// Time the Namespace was created in UTC.
	CreateTime pulumi.StringPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The Private Service Connect connection endpoint ip.
	EndpointIp pulumi.StringPtrInput
	// Resource labels to represent user provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Location in which Endpoint Attachment needs to be created.
	Location pulumi.StringPtrInput
	// Name of Endpoint Attachment needs to be created.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The path of the service attachment.
	ServiceAttachment pulumi.StringPtrInput
	// Time the Namespace was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (EndpointAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointAttachmentState)(nil)).Elem()
}

type endpointAttachmentArgs struct {
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Resource labels to represent user provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Location in which Endpoint Attachment needs to be created.
	Location string `pulumi:"location"`
	// Name of Endpoint Attachment needs to be created.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The path of the service attachment.
	ServiceAttachment string `pulumi:"serviceAttachment"`
}

// The set of arguments for constructing a EndpointAttachment resource.
type EndpointAttachmentArgs struct {
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Resource labels to represent user provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Location in which Endpoint Attachment needs to be created.
	Location pulumi.StringInput
	// Name of Endpoint Attachment needs to be created.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The path of the service attachment.
	ServiceAttachment pulumi.StringInput
}

func (EndpointAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointAttachmentArgs)(nil)).Elem()
}

type EndpointAttachmentInput interface {
	pulumi.Input

	ToEndpointAttachmentOutput() EndpointAttachmentOutput
	ToEndpointAttachmentOutputWithContext(ctx context.Context) EndpointAttachmentOutput
}

func (*EndpointAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAttachment)(nil)).Elem()
}

func (i *EndpointAttachment) ToEndpointAttachmentOutput() EndpointAttachmentOutput {
	return i.ToEndpointAttachmentOutputWithContext(context.Background())
}

func (i *EndpointAttachment) ToEndpointAttachmentOutputWithContext(ctx context.Context) EndpointAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAttachmentOutput)
}

// EndpointAttachmentArrayInput is an input type that accepts EndpointAttachmentArray and EndpointAttachmentArrayOutput values.
// You can construct a concrete instance of `EndpointAttachmentArrayInput` via:
//
//	EndpointAttachmentArray{ EndpointAttachmentArgs{...} }
type EndpointAttachmentArrayInput interface {
	pulumi.Input

	ToEndpointAttachmentArrayOutput() EndpointAttachmentArrayOutput
	ToEndpointAttachmentArrayOutputWithContext(context.Context) EndpointAttachmentArrayOutput
}

type EndpointAttachmentArray []EndpointAttachmentInput

func (EndpointAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndpointAttachment)(nil)).Elem()
}

func (i EndpointAttachmentArray) ToEndpointAttachmentArrayOutput() EndpointAttachmentArrayOutput {
	return i.ToEndpointAttachmentArrayOutputWithContext(context.Background())
}

func (i EndpointAttachmentArray) ToEndpointAttachmentArrayOutputWithContext(ctx context.Context) EndpointAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAttachmentArrayOutput)
}

// EndpointAttachmentMapInput is an input type that accepts EndpointAttachmentMap and EndpointAttachmentMapOutput values.
// You can construct a concrete instance of `EndpointAttachmentMapInput` via:
//
//	EndpointAttachmentMap{ "key": EndpointAttachmentArgs{...} }
type EndpointAttachmentMapInput interface {
	pulumi.Input

	ToEndpointAttachmentMapOutput() EndpointAttachmentMapOutput
	ToEndpointAttachmentMapOutputWithContext(context.Context) EndpointAttachmentMapOutput
}

type EndpointAttachmentMap map[string]EndpointAttachmentInput

func (EndpointAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndpointAttachment)(nil)).Elem()
}

func (i EndpointAttachmentMap) ToEndpointAttachmentMapOutput() EndpointAttachmentMapOutput {
	return i.ToEndpointAttachmentMapOutputWithContext(context.Background())
}

func (i EndpointAttachmentMap) ToEndpointAttachmentMapOutputWithContext(ctx context.Context) EndpointAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAttachmentMapOutput)
}

type EndpointAttachmentOutput struct{ *pulumi.OutputState }

func (EndpointAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAttachment)(nil)).Elem()
}

func (o EndpointAttachmentOutput) ToEndpointAttachmentOutput() EndpointAttachmentOutput {
	return o
}

func (o EndpointAttachmentOutput) ToEndpointAttachmentOutputWithContext(ctx context.Context) EndpointAttachmentOutput {
	return o
}

// Time the Namespace was created in UTC.
func (o EndpointAttachmentOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the resource.
func (o EndpointAttachmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o EndpointAttachmentOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The Private Service Connect connection endpoint ip.
func (o EndpointAttachmentOutput) EndpointIp() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringOutput { return v.EndpointIp }).(pulumi.StringOutput)
}

// Resource labels to represent user provided metadata.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o EndpointAttachmentOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Location in which Endpoint Attachment needs to be created.
func (o EndpointAttachmentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of Endpoint Attachment needs to be created.
//
// ***
func (o EndpointAttachmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o EndpointAttachmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o EndpointAttachmentOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The path of the service attachment.
func (o EndpointAttachmentOutput) ServiceAttachment() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringOutput { return v.ServiceAttachment }).(pulumi.StringOutput)
}

// Time the Namespace was updated in UTC.
func (o EndpointAttachmentOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAttachment) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type EndpointAttachmentArrayOutput struct{ *pulumi.OutputState }

func (EndpointAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndpointAttachment)(nil)).Elem()
}

func (o EndpointAttachmentArrayOutput) ToEndpointAttachmentArrayOutput() EndpointAttachmentArrayOutput {
	return o
}

func (o EndpointAttachmentArrayOutput) ToEndpointAttachmentArrayOutputWithContext(ctx context.Context) EndpointAttachmentArrayOutput {
	return o
}

func (o EndpointAttachmentArrayOutput) Index(i pulumi.IntInput) EndpointAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EndpointAttachment {
		return vs[0].([]*EndpointAttachment)[vs[1].(int)]
	}).(EndpointAttachmentOutput)
}

type EndpointAttachmentMapOutput struct{ *pulumi.OutputState }

func (EndpointAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndpointAttachment)(nil)).Elem()
}

func (o EndpointAttachmentMapOutput) ToEndpointAttachmentMapOutput() EndpointAttachmentMapOutput {
	return o
}

func (o EndpointAttachmentMapOutput) ToEndpointAttachmentMapOutputWithContext(ctx context.Context) EndpointAttachmentMapOutput {
	return o
}

func (o EndpointAttachmentMapOutput) MapIndex(k pulumi.StringInput) EndpointAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EndpointAttachment {
		return vs[0].(map[string]*EndpointAttachment)[vs[1].(string)]
	}).(EndpointAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAttachmentInput)(nil)).Elem(), &EndpointAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAttachmentArrayInput)(nil)).Elem(), EndpointAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAttachmentMapInput)(nil)).Elem(), EndpointAttachmentMap{})
	pulumi.RegisterOutputType(EndpointAttachmentOutput{})
	pulumi.RegisterOutputType(EndpointAttachmentArrayOutput{})
	pulumi.RegisterOutputType(EndpointAttachmentMapOutput{})
}
