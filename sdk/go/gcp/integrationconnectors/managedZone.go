// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package integrationconnectors

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Integration connectors Managed Zone.
//
// To get more information about ManagedZone, see:
//
// * [API documentation](https://cloud.google.com/integration-connectors/docs/reference/rest/v1/projects.locations.global.managedZones)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/integration-connectors/docs)
//
// ## Example Usage
//
// ### Integration Connectors Managed Zone
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dns"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/integrationconnectors"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			targetProject, err := organizations.NewProject(ctx, "target_project", &organizations.ProjectArgs{
//				ProjectId:      pulumi.String("tf-test_76044"),
//				Name:           pulumi.String("tf-test_69391"),
//				OrgId:          pulumi.String("123456789"),
//				BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
//				DeletionPolicy: pulumi.String("DELETE"),
//			})
//			if err != nil {
//				return err
//			}
//			testProject, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			dnsPeerBinding, err := projects.NewIAMMember(ctx, "dns_peer_binding", &projects.IAMMemberArgs{
//				Project: targetProject.ProjectId,
//				Role:    pulumi.String("roles/dns.peer"),
//				Member:  pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-connectors.iam.gserviceaccount.com", testProject.Number),
//			})
//			if err != nil {
//				return err
//			}
//			dns, err := projects.NewService(ctx, "dns", &projects.ServiceArgs{
//				Project: targetProject.ProjectId,
//				Service: pulumi.String("dns.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			compute, err := projects.NewService(ctx, "compute", &projects.ServiceArgs{
//				Project: targetProject.ProjectId,
//				Service: pulumi.String("compute.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
//				Project:               targetProject.ProjectId,
//				Name:                  pulumi.String("test"),
//				AutoCreateSubnetworks: pulumi.Bool(false),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				compute,
//			}))
//			if err != nil {
//				return err
//			}
//			zone, err := dns.NewManagedZone(ctx, "zone", &dns.ManagedZoneArgs{
//				Name:       pulumi.String("tf-test-dns_8270"),
//				DnsName:    pulumi.String("private_41150.example.com."),
//				Visibility: pulumi.String("private"),
//				PrivateVisibilityConfig: &dns.ManagedZonePrivateVisibilityConfigArgs{
//					Networks: dns.ManagedZonePrivateVisibilityConfigNetworkArray{
//						&dns.ManagedZonePrivateVisibilityConfigNetworkArgs{
//							NetworkUrl: network.ID(),
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				dns,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = integrationconnectors.NewManagedZone(ctx, "testmanagedzone", &integrationconnectors.ManagedZoneArgs{
//				Name:        pulumi.String("test"),
//				Description: pulumi.String("tf created description"),
//				Labels: pulumi.StringMap{
//					"intent": pulumi.String("example"),
//				},
//				TargetProject: targetProject.ProjectId,
//				TargetVpc:     pulumi.String("test"),
//				Dns:           zone.DnsName,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				dnsPeerBinding,
//				zone,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ManagedZone can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/global/managedZones/{{name}}`
//
// * `{{project}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, ManagedZone can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:integrationconnectors/managedZone:ManagedZone default projects/{{project}}/locations/global/managedZones/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:integrationconnectors/managedZone:ManagedZone default {{project}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:integrationconnectors/managedZone:ManagedZone default {{name}}
// ```
type ManagedZone struct {
	pulumi.CustomResourceState

	// Time the Namespace was created in UTC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// DNS Name of the resource.
	Dns pulumi.StringOutput `pulumi:"dns"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Resource labels to represent user provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of Managed Zone needs to be created.
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The name of the Target Project.
	TargetProject pulumi.StringOutput `pulumi:"targetProject"`
	// The name of the Target Project VPC Network.
	TargetVpc pulumi.StringOutput `pulumi:"targetVpc"`
	// Time the Namespace was updated in UTC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewManagedZone registers a new resource with the given unique name, arguments, and options.
func NewManagedZone(ctx *pulumi.Context,
	name string, args *ManagedZoneArgs, opts ...pulumi.ResourceOption) (*ManagedZone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dns == nil {
		return nil, errors.New("invalid value for required argument 'Dns'")
	}
	if args.TargetProject == nil {
		return nil, errors.New("invalid value for required argument 'TargetProject'")
	}
	if args.TargetVpc == nil {
		return nil, errors.New("invalid value for required argument 'TargetVpc'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedZone
	err := ctx.RegisterResource("gcp:integrationconnectors/managedZone:ManagedZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedZone gets an existing ManagedZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedZoneState, opts ...pulumi.ResourceOption) (*ManagedZone, error) {
	var resource ManagedZone
	err := ctx.ReadResource("gcp:integrationconnectors/managedZone:ManagedZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedZone resources.
type managedZoneState struct {
	// Time the Namespace was created in UTC.
	CreateTime *string `pulumi:"createTime"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// DNS Name of the resource.
	Dns *string `pulumi:"dns"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Resource labels to represent user provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of Managed Zone needs to be created.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The name of the Target Project.
	TargetProject *string `pulumi:"targetProject"`
	// The name of the Target Project VPC Network.
	TargetVpc *string `pulumi:"targetVpc"`
	// Time the Namespace was updated in UTC.
	UpdateTime *string `pulumi:"updateTime"`
}

type ManagedZoneState struct {
	// Time the Namespace was created in UTC.
	CreateTime pulumi.StringPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// DNS Name of the resource.
	Dns pulumi.StringPtrInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Resource labels to represent user provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of Managed Zone needs to be created.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The name of the Target Project.
	TargetProject pulumi.StringPtrInput
	// The name of the Target Project VPC Network.
	TargetVpc pulumi.StringPtrInput
	// Time the Namespace was updated in UTC.
	UpdateTime pulumi.StringPtrInput
}

func (ManagedZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedZoneState)(nil)).Elem()
}

type managedZoneArgs struct {
	// Description of the resource.
	Description *string `pulumi:"description"`
	// DNS Name of the resource.
	Dns string `pulumi:"dns"`
	// Resource labels to represent user provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of Managed Zone needs to be created.
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The name of the Target Project.
	TargetProject string `pulumi:"targetProject"`
	// The name of the Target Project VPC Network.
	TargetVpc string `pulumi:"targetVpc"`
}

// The set of arguments for constructing a ManagedZone resource.
type ManagedZoneArgs struct {
	// Description of the resource.
	Description pulumi.StringPtrInput
	// DNS Name of the resource.
	Dns pulumi.StringInput
	// Resource labels to represent user provided metadata.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Name of Managed Zone needs to be created.
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The name of the Target Project.
	TargetProject pulumi.StringInput
	// The name of the Target Project VPC Network.
	TargetVpc pulumi.StringInput
}

func (ManagedZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedZoneArgs)(nil)).Elem()
}

type ManagedZoneInput interface {
	pulumi.Input

	ToManagedZoneOutput() ManagedZoneOutput
	ToManagedZoneOutputWithContext(ctx context.Context) ManagedZoneOutput
}

func (*ManagedZone) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZone)(nil)).Elem()
}

func (i *ManagedZone) ToManagedZoneOutput() ManagedZoneOutput {
	return i.ToManagedZoneOutputWithContext(context.Background())
}

func (i *ManagedZone) ToManagedZoneOutputWithContext(ctx context.Context) ManagedZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneOutput)
}

// ManagedZoneArrayInput is an input type that accepts ManagedZoneArray and ManagedZoneArrayOutput values.
// You can construct a concrete instance of `ManagedZoneArrayInput` via:
//
//	ManagedZoneArray{ ManagedZoneArgs{...} }
type ManagedZoneArrayInput interface {
	pulumi.Input

	ToManagedZoneArrayOutput() ManagedZoneArrayOutput
	ToManagedZoneArrayOutputWithContext(context.Context) ManagedZoneArrayOutput
}

type ManagedZoneArray []ManagedZoneInput

func (ManagedZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedZone)(nil)).Elem()
}

func (i ManagedZoneArray) ToManagedZoneArrayOutput() ManagedZoneArrayOutput {
	return i.ToManagedZoneArrayOutputWithContext(context.Background())
}

func (i ManagedZoneArray) ToManagedZoneArrayOutputWithContext(ctx context.Context) ManagedZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneArrayOutput)
}

// ManagedZoneMapInput is an input type that accepts ManagedZoneMap and ManagedZoneMapOutput values.
// You can construct a concrete instance of `ManagedZoneMapInput` via:
//
//	ManagedZoneMap{ "key": ManagedZoneArgs{...} }
type ManagedZoneMapInput interface {
	pulumi.Input

	ToManagedZoneMapOutput() ManagedZoneMapOutput
	ToManagedZoneMapOutputWithContext(context.Context) ManagedZoneMapOutput
}

type ManagedZoneMap map[string]ManagedZoneInput

func (ManagedZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedZone)(nil)).Elem()
}

func (i ManagedZoneMap) ToManagedZoneMapOutput() ManagedZoneMapOutput {
	return i.ToManagedZoneMapOutputWithContext(context.Background())
}

func (i ManagedZoneMap) ToManagedZoneMapOutputWithContext(ctx context.Context) ManagedZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedZoneMapOutput)
}

type ManagedZoneOutput struct{ *pulumi.OutputState }

func (ManagedZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedZone)(nil)).Elem()
}

func (o ManagedZoneOutput) ToManagedZoneOutput() ManagedZoneOutput {
	return o
}

func (o ManagedZoneOutput) ToManagedZoneOutputWithContext(ctx context.Context) ManagedZoneOutput {
	return o
}

// Time the Namespace was created in UTC.
func (o ManagedZoneOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedZone) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the resource.
func (o ManagedZoneOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedZone) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// DNS Name of the resource.
func (o ManagedZoneOutput) Dns() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedZone) pulumi.StringOutput { return v.Dns }).(pulumi.StringOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o ManagedZoneOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ManagedZone) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Resource labels to represent user provided metadata.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o ManagedZoneOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ManagedZone) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of Managed Zone needs to be created.
//
// ***
func (o ManagedZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedZone) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ManagedZoneOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedZone) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o ManagedZoneOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ManagedZone) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The name of the Target Project.
func (o ManagedZoneOutput) TargetProject() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedZone) pulumi.StringOutput { return v.TargetProject }).(pulumi.StringOutput)
}

// The name of the Target Project VPC Network.
func (o ManagedZoneOutput) TargetVpc() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedZone) pulumi.StringOutput { return v.TargetVpc }).(pulumi.StringOutput)
}

// Time the Namespace was updated in UTC.
func (o ManagedZoneOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedZone) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ManagedZoneArrayOutput struct{ *pulumi.OutputState }

func (ManagedZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedZone)(nil)).Elem()
}

func (o ManagedZoneArrayOutput) ToManagedZoneArrayOutput() ManagedZoneArrayOutput {
	return o
}

func (o ManagedZoneArrayOutput) ToManagedZoneArrayOutputWithContext(ctx context.Context) ManagedZoneArrayOutput {
	return o
}

func (o ManagedZoneArrayOutput) Index(i pulumi.IntInput) ManagedZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedZone {
		return vs[0].([]*ManagedZone)[vs[1].(int)]
	}).(ManagedZoneOutput)
}

type ManagedZoneMapOutput struct{ *pulumi.OutputState }

func (ManagedZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedZone)(nil)).Elem()
}

func (o ManagedZoneMapOutput) ToManagedZoneMapOutput() ManagedZoneMapOutput {
	return o
}

func (o ManagedZoneMapOutput) ToManagedZoneMapOutputWithContext(ctx context.Context) ManagedZoneMapOutput {
	return o
}

func (o ManagedZoneMapOutput) MapIndex(k pulumi.StringInput) ManagedZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedZone {
		return vs[0].(map[string]*ManagedZone)[vs[1].(string)]
	}).(ManagedZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneInput)(nil)).Elem(), &ManagedZone{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneArrayInput)(nil)).Elem(), ManagedZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedZoneMapInput)(nil)).Elem(), ManagedZoneMap{})
	pulumi.RegisterOutputType(ManagedZoneOutput{})
	pulumi.RegisterOutputType(ManagedZoneArrayOutput{})
	pulumi.RegisterOutputType(ManagedZoneMapOutput{})
}
