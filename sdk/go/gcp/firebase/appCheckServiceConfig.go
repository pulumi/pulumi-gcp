// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The enforcement configuration for a service supported by App Check.
//
// To get more information about ServiceConfig, see:
//
// * [API documentation](https://firebase.google.com/docs/reference/appcheck/rest/v1/projects.services)
// * How-to Guides
//   - [Official Documentation](https://firebase.google.com/docs/app-check)
//
// ## Example Usage
// ### Firebase App Check Service Config Off
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := projects.NewService(ctx, "appcheck", &projects.ServiceArgs{
//				Project:          pulumi.String("my-project-name"),
//				Service:          pulumi.String("firebaseappcheck.googleapis.com"),
//				DisableOnDestroy: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppCheckServiceConfig(ctx, "default", &firebase.AppCheckServiceConfigArgs{
//				Project:   pulumi.String("my-project-name"),
//				ServiceId: pulumi.String("firestore.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebase App Check Service Config Enforced
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := projects.NewService(ctx, "appcheck", &projects.ServiceArgs{
//				Project:          pulumi.String("my-project-name"),
//				Service:          pulumi.String("firebaseappcheck.googleapis.com"),
//				DisableOnDestroy: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppCheckServiceConfig(ctx, "default", &firebase.AppCheckServiceConfigArgs{
//				Project:         pulumi.String("my-project-name"),
//				ServiceId:       pulumi.String("firebasestorage.googleapis.com"),
//				EnforcementMode: pulumi.String("ENFORCED"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebase App Check Service Config Unenforced
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := projects.NewService(ctx, "appcheck", &projects.ServiceArgs{
//				Project:          pulumi.String("my-project-name"),
//				Service:          pulumi.String("firebaseappcheck.googleapis.com"),
//				DisableOnDestroy: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppCheckServiceConfig(ctx, "default", &firebase.AppCheckServiceConfigArgs{
//				Project:         pulumi.String("my-project-name"),
//				ServiceId:       pulumi.String("firebasedatabase.googleapis.com"),
//				EnforcementMode: pulumi.String("UNENFORCED"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ServiceConfig can be imported using any of these accepted formats:
//
//   - `projects/{{project}}/services/{{service_id}}`
//
//   - `{{project}}/{{service_id}}`
//
//   - `{{service_id}}`
//
//     When using the `pulumi import` command, ServiceConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:firebase/appCheckServiceConfig:AppCheckServiceConfig default projects/{{project}}/services/{{service_id}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appCheckServiceConfig:AppCheckServiceConfig default {{project}}/{{service_id}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appCheckServiceConfig:AppCheckServiceConfig default {{service_id}}
// ```
type AppCheckServiceConfig struct {
	pulumi.CustomResourceState

	// The App Check enforcement mode for a service supported by App Check. Valid values are (Unset) Firebase App Check is not
	// enforced for the service, nor are App Check metrics collected. Though the service is not protected by App Check in this
	// mode, other applicable protections, such as user authorization, are still enforced. An unconfigured service is in this
	// mode by default. This is equivalent to OFF in the REST API. Deleting the Terraform resource will also switch the
	// enforcement to OFF for this service. UNENFORCED Firebase App Check is not enforced for the service. App Check metrics
	// are collected to help you decide when to turn on enforcement for the service. Though the service is not protected by App
	// Check in this mode, other applicable protections, such as user authorization, are still enforced. ENFORCED Firebase App
	// Check is enforced for the service. The service will reject any request that attempts to access your project's resources
	// if it does not have valid App Check token attached, with some exceptions depending on the service; for example, some
	// services will still allow requests bearing the developer's privileged service account credentials without an App Check
	// token. App Check metrics continue to be collected to help you detect issues with your App Check integration and monitor
	// the composition of your callers. While the service is protected by App Check, other applicable protections, such as user
	// authorization, continue to be enforced at the same time. Use caution when choosing to enforce App Check on a Firebase
	// service. If your users have not updated to an App Check capable version of your app, their apps will no longer be able
	// to use your Firebase services that are enforcing App Check. App Check metrics can help you decide whether to enforce App
	// Check on your Firebase services. If your app has not launched yet, you should enable enforcement immediately, since
	// there are no outdated clients in use. Possible values: ["UNENFORCED", "ENFORCED"]
	EnforcementMode pulumi.StringPtrOutput `pulumi:"enforcementMode"`
	// The fully-qualified resource name of the service enforcement configuration.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
	// firebasestorage.googleapis.com (Cloud Storage for Firebase)
	// firebasedatabase.googleapis.com (Firebase Realtime Database)
	// firestore.googleapis.com (Cloud Firestore)
	// identitytoolkit.googleapis.com (Authentication)
	//
	// ***
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewAppCheckServiceConfig registers a new resource with the given unique name, arguments, and options.
func NewAppCheckServiceConfig(ctx *pulumi.Context,
	name string, args *AppCheckServiceConfigArgs, opts ...pulumi.ResourceOption) (*AppCheckServiceConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppCheckServiceConfig
	err := ctx.RegisterResource("gcp:firebase/appCheckServiceConfig:AppCheckServiceConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppCheckServiceConfig gets an existing AppCheckServiceConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppCheckServiceConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppCheckServiceConfigState, opts ...pulumi.ResourceOption) (*AppCheckServiceConfig, error) {
	var resource AppCheckServiceConfig
	err := ctx.ReadResource("gcp:firebase/appCheckServiceConfig:AppCheckServiceConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppCheckServiceConfig resources.
type appCheckServiceConfigState struct {
	// The App Check enforcement mode for a service supported by App Check. Valid values are (Unset) Firebase App Check is not
	// enforced for the service, nor are App Check metrics collected. Though the service is not protected by App Check in this
	// mode, other applicable protections, such as user authorization, are still enforced. An unconfigured service is in this
	// mode by default. This is equivalent to OFF in the REST API. Deleting the Terraform resource will also switch the
	// enforcement to OFF for this service. UNENFORCED Firebase App Check is not enforced for the service. App Check metrics
	// are collected to help you decide when to turn on enforcement for the service. Though the service is not protected by App
	// Check in this mode, other applicable protections, such as user authorization, are still enforced. ENFORCED Firebase App
	// Check is enforced for the service. The service will reject any request that attempts to access your project's resources
	// if it does not have valid App Check token attached, with some exceptions depending on the service; for example, some
	// services will still allow requests bearing the developer's privileged service account credentials without an App Check
	// token. App Check metrics continue to be collected to help you detect issues with your App Check integration and monitor
	// the composition of your callers. While the service is protected by App Check, other applicable protections, such as user
	// authorization, continue to be enforced at the same time. Use caution when choosing to enforce App Check on a Firebase
	// service. If your users have not updated to an App Check capable version of your app, their apps will no longer be able
	// to use your Firebase services that are enforcing App Check. App Check metrics can help you decide whether to enforce App
	// Check on your Firebase services. If your app has not launched yet, you should enable enforcement immediately, since
	// there are no outdated clients in use. Possible values: ["UNENFORCED", "ENFORCED"]
	EnforcementMode *string `pulumi:"enforcementMode"`
	// The fully-qualified resource name of the service enforcement configuration.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
	// firebasestorage.googleapis.com (Cloud Storage for Firebase)
	// firebasedatabase.googleapis.com (Firebase Realtime Database)
	// firestore.googleapis.com (Cloud Firestore)
	// identitytoolkit.googleapis.com (Authentication)
	//
	// ***
	ServiceId *string `pulumi:"serviceId"`
}

type AppCheckServiceConfigState struct {
	// The App Check enforcement mode for a service supported by App Check. Valid values are (Unset) Firebase App Check is not
	// enforced for the service, nor are App Check metrics collected. Though the service is not protected by App Check in this
	// mode, other applicable protections, such as user authorization, are still enforced. An unconfigured service is in this
	// mode by default. This is equivalent to OFF in the REST API. Deleting the Terraform resource will also switch the
	// enforcement to OFF for this service. UNENFORCED Firebase App Check is not enforced for the service. App Check metrics
	// are collected to help you decide when to turn on enforcement for the service. Though the service is not protected by App
	// Check in this mode, other applicable protections, such as user authorization, are still enforced. ENFORCED Firebase App
	// Check is enforced for the service. The service will reject any request that attempts to access your project's resources
	// if it does not have valid App Check token attached, with some exceptions depending on the service; for example, some
	// services will still allow requests bearing the developer's privileged service account credentials without an App Check
	// token. App Check metrics continue to be collected to help you detect issues with your App Check integration and monitor
	// the composition of your callers. While the service is protected by App Check, other applicable protections, such as user
	// authorization, continue to be enforced at the same time. Use caution when choosing to enforce App Check on a Firebase
	// service. If your users have not updated to an App Check capable version of your app, their apps will no longer be able
	// to use your Firebase services that are enforcing App Check. App Check metrics can help you decide whether to enforce App
	// Check on your Firebase services. If your app has not launched yet, you should enable enforcement immediately, since
	// there are no outdated clients in use. Possible values: ["UNENFORCED", "ENFORCED"]
	EnforcementMode pulumi.StringPtrInput
	// The fully-qualified resource name of the service enforcement configuration.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
	// firebasestorage.googleapis.com (Cloud Storage for Firebase)
	// firebasedatabase.googleapis.com (Firebase Realtime Database)
	// firestore.googleapis.com (Cloud Firestore)
	// identitytoolkit.googleapis.com (Authentication)
	//
	// ***
	ServiceId pulumi.StringPtrInput
}

func (AppCheckServiceConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*appCheckServiceConfigState)(nil)).Elem()
}

type appCheckServiceConfigArgs struct {
	// The App Check enforcement mode for a service supported by App Check. Valid values are (Unset) Firebase App Check is not
	// enforced for the service, nor are App Check metrics collected. Though the service is not protected by App Check in this
	// mode, other applicable protections, such as user authorization, are still enforced. An unconfigured service is in this
	// mode by default. This is equivalent to OFF in the REST API. Deleting the Terraform resource will also switch the
	// enforcement to OFF for this service. UNENFORCED Firebase App Check is not enforced for the service. App Check metrics
	// are collected to help you decide when to turn on enforcement for the service. Though the service is not protected by App
	// Check in this mode, other applicable protections, such as user authorization, are still enforced. ENFORCED Firebase App
	// Check is enforced for the service. The service will reject any request that attempts to access your project's resources
	// if it does not have valid App Check token attached, with some exceptions depending on the service; for example, some
	// services will still allow requests bearing the developer's privileged service account credentials without an App Check
	// token. App Check metrics continue to be collected to help you detect issues with your App Check integration and monitor
	// the composition of your callers. While the service is protected by App Check, other applicable protections, such as user
	// authorization, continue to be enforced at the same time. Use caution when choosing to enforce App Check on a Firebase
	// service. If your users have not updated to an App Check capable version of your app, their apps will no longer be able
	// to use your Firebase services that are enforcing App Check. App Check metrics can help you decide whether to enforce App
	// Check on your Firebase services. If your app has not launched yet, you should enable enforcement immediately, since
	// there are no outdated clients in use. Possible values: ["UNENFORCED", "ENFORCED"]
	EnforcementMode *string `pulumi:"enforcementMode"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
	// firebasestorage.googleapis.com (Cloud Storage for Firebase)
	// firebasedatabase.googleapis.com (Firebase Realtime Database)
	// firestore.googleapis.com (Cloud Firestore)
	// identitytoolkit.googleapis.com (Authentication)
	//
	// ***
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a AppCheckServiceConfig resource.
type AppCheckServiceConfigArgs struct {
	// The App Check enforcement mode for a service supported by App Check. Valid values are (Unset) Firebase App Check is not
	// enforced for the service, nor are App Check metrics collected. Though the service is not protected by App Check in this
	// mode, other applicable protections, such as user authorization, are still enforced. An unconfigured service is in this
	// mode by default. This is equivalent to OFF in the REST API. Deleting the Terraform resource will also switch the
	// enforcement to OFF for this service. UNENFORCED Firebase App Check is not enforced for the service. App Check metrics
	// are collected to help you decide when to turn on enforcement for the service. Though the service is not protected by App
	// Check in this mode, other applicable protections, such as user authorization, are still enforced. ENFORCED Firebase App
	// Check is enforced for the service. The service will reject any request that attempts to access your project's resources
	// if it does not have valid App Check token attached, with some exceptions depending on the service; for example, some
	// services will still allow requests bearing the developer's privileged service account credentials without an App Check
	// token. App Check metrics continue to be collected to help you detect issues with your App Check integration and monitor
	// the composition of your callers. While the service is protected by App Check, other applicable protections, such as user
	// authorization, continue to be enforced at the same time. Use caution when choosing to enforce App Check on a Firebase
	// service. If your users have not updated to an App Check capable version of your app, their apps will no longer be able
	// to use your Firebase services that are enforcing App Check. App Check metrics can help you decide whether to enforce App
	// Check on your Firebase services. If your app has not launched yet, you should enable enforcement immediately, since
	// there are no outdated clients in use. Possible values: ["UNENFORCED", "ENFORCED"]
	EnforcementMode pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
	// firebasestorage.googleapis.com (Cloud Storage for Firebase)
	// firebasedatabase.googleapis.com (Firebase Realtime Database)
	// firestore.googleapis.com (Cloud Firestore)
	// identitytoolkit.googleapis.com (Authentication)
	//
	// ***
	ServiceId pulumi.StringInput
}

func (AppCheckServiceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appCheckServiceConfigArgs)(nil)).Elem()
}

type AppCheckServiceConfigInput interface {
	pulumi.Input

	ToAppCheckServiceConfigOutput() AppCheckServiceConfigOutput
	ToAppCheckServiceConfigOutputWithContext(ctx context.Context) AppCheckServiceConfigOutput
}

func (*AppCheckServiceConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AppCheckServiceConfig)(nil)).Elem()
}

func (i *AppCheckServiceConfig) ToAppCheckServiceConfigOutput() AppCheckServiceConfigOutput {
	return i.ToAppCheckServiceConfigOutputWithContext(context.Background())
}

func (i *AppCheckServiceConfig) ToAppCheckServiceConfigOutputWithContext(ctx context.Context) AppCheckServiceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCheckServiceConfigOutput)
}

// AppCheckServiceConfigArrayInput is an input type that accepts AppCheckServiceConfigArray and AppCheckServiceConfigArrayOutput values.
// You can construct a concrete instance of `AppCheckServiceConfigArrayInput` via:
//
//	AppCheckServiceConfigArray{ AppCheckServiceConfigArgs{...} }
type AppCheckServiceConfigArrayInput interface {
	pulumi.Input

	ToAppCheckServiceConfigArrayOutput() AppCheckServiceConfigArrayOutput
	ToAppCheckServiceConfigArrayOutputWithContext(context.Context) AppCheckServiceConfigArrayOutput
}

type AppCheckServiceConfigArray []AppCheckServiceConfigInput

func (AppCheckServiceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppCheckServiceConfig)(nil)).Elem()
}

func (i AppCheckServiceConfigArray) ToAppCheckServiceConfigArrayOutput() AppCheckServiceConfigArrayOutput {
	return i.ToAppCheckServiceConfigArrayOutputWithContext(context.Background())
}

func (i AppCheckServiceConfigArray) ToAppCheckServiceConfigArrayOutputWithContext(ctx context.Context) AppCheckServiceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCheckServiceConfigArrayOutput)
}

// AppCheckServiceConfigMapInput is an input type that accepts AppCheckServiceConfigMap and AppCheckServiceConfigMapOutput values.
// You can construct a concrete instance of `AppCheckServiceConfigMapInput` via:
//
//	AppCheckServiceConfigMap{ "key": AppCheckServiceConfigArgs{...} }
type AppCheckServiceConfigMapInput interface {
	pulumi.Input

	ToAppCheckServiceConfigMapOutput() AppCheckServiceConfigMapOutput
	ToAppCheckServiceConfigMapOutputWithContext(context.Context) AppCheckServiceConfigMapOutput
}

type AppCheckServiceConfigMap map[string]AppCheckServiceConfigInput

func (AppCheckServiceConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppCheckServiceConfig)(nil)).Elem()
}

func (i AppCheckServiceConfigMap) ToAppCheckServiceConfigMapOutput() AppCheckServiceConfigMapOutput {
	return i.ToAppCheckServiceConfigMapOutputWithContext(context.Background())
}

func (i AppCheckServiceConfigMap) ToAppCheckServiceConfigMapOutputWithContext(ctx context.Context) AppCheckServiceConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCheckServiceConfigMapOutput)
}

type AppCheckServiceConfigOutput struct{ *pulumi.OutputState }

func (AppCheckServiceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppCheckServiceConfig)(nil)).Elem()
}

func (o AppCheckServiceConfigOutput) ToAppCheckServiceConfigOutput() AppCheckServiceConfigOutput {
	return o
}

func (o AppCheckServiceConfigOutput) ToAppCheckServiceConfigOutputWithContext(ctx context.Context) AppCheckServiceConfigOutput {
	return o
}

// The App Check enforcement mode for a service supported by App Check. Valid values are (Unset) Firebase App Check is not
// enforced for the service, nor are App Check metrics collected. Though the service is not protected by App Check in this
// mode, other applicable protections, such as user authorization, are still enforced. An unconfigured service is in this
// mode by default. This is equivalent to OFF in the REST API. Deleting the Terraform resource will also switch the
// enforcement to OFF for this service. UNENFORCED Firebase App Check is not enforced for the service. App Check metrics
// are collected to help you decide when to turn on enforcement for the service. Though the service is not protected by App
// Check in this mode, other applicable protections, such as user authorization, are still enforced. ENFORCED Firebase App
// Check is enforced for the service. The service will reject any request that attempts to access your project's resources
// if it does not have valid App Check token attached, with some exceptions depending on the service; for example, some
// services will still allow requests bearing the developer's privileged service account credentials without an App Check
// token. App Check metrics continue to be collected to help you detect issues with your App Check integration and monitor
// the composition of your callers. While the service is protected by App Check, other applicable protections, such as user
// authorization, continue to be enforced at the same time. Use caution when choosing to enforce App Check on a Firebase
// service. If your users have not updated to an App Check capable version of your app, their apps will no longer be able
// to use your Firebase services that are enforcing App Check. App Check metrics can help you decide whether to enforce App
// Check on your Firebase services. If your app has not launched yet, you should enable enforcement immediately, since
// there are no outdated clients in use. Possible values: ["UNENFORCED", "ENFORCED"]
func (o AppCheckServiceConfigOutput) EnforcementMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppCheckServiceConfig) pulumi.StringPtrOutput { return v.EnforcementMode }).(pulumi.StringPtrOutput)
}

// The fully-qualified resource name of the service enforcement configuration.
func (o AppCheckServiceConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckServiceConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AppCheckServiceConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckServiceConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
// firebasestorage.googleapis.com (Cloud Storage for Firebase)
// firebasedatabase.googleapis.com (Firebase Realtime Database)
// firestore.googleapis.com (Cloud Firestore)
// identitytoolkit.googleapis.com (Authentication)
//
// ***
func (o AppCheckServiceConfigOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckServiceConfig) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

type AppCheckServiceConfigArrayOutput struct{ *pulumi.OutputState }

func (AppCheckServiceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppCheckServiceConfig)(nil)).Elem()
}

func (o AppCheckServiceConfigArrayOutput) ToAppCheckServiceConfigArrayOutput() AppCheckServiceConfigArrayOutput {
	return o
}

func (o AppCheckServiceConfigArrayOutput) ToAppCheckServiceConfigArrayOutputWithContext(ctx context.Context) AppCheckServiceConfigArrayOutput {
	return o
}

func (o AppCheckServiceConfigArrayOutput) Index(i pulumi.IntInput) AppCheckServiceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppCheckServiceConfig {
		return vs[0].([]*AppCheckServiceConfig)[vs[1].(int)]
	}).(AppCheckServiceConfigOutput)
}

type AppCheckServiceConfigMapOutput struct{ *pulumi.OutputState }

func (AppCheckServiceConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppCheckServiceConfig)(nil)).Elem()
}

func (o AppCheckServiceConfigMapOutput) ToAppCheckServiceConfigMapOutput() AppCheckServiceConfigMapOutput {
	return o
}

func (o AppCheckServiceConfigMapOutput) ToAppCheckServiceConfigMapOutputWithContext(ctx context.Context) AppCheckServiceConfigMapOutput {
	return o
}

func (o AppCheckServiceConfigMapOutput) MapIndex(k pulumi.StringInput) AppCheckServiceConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppCheckServiceConfig {
		return vs[0].(map[string]*AppCheckServiceConfig)[vs[1].(string)]
	}).(AppCheckServiceConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppCheckServiceConfigInput)(nil)).Elem(), &AppCheckServiceConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppCheckServiceConfigArrayInput)(nil)).Elem(), AppCheckServiceConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppCheckServiceConfigMapInput)(nil)).Elem(), AppCheckServiceConfigMap{})
	pulumi.RegisterOutputType(AppCheckServiceConfigOutput{})
	pulumi.RegisterOutputType(AppCheckServiceConfigArrayOutput{})
	pulumi.RegisterOutputType(AppCheckServiceConfigMapOutput{})
}
