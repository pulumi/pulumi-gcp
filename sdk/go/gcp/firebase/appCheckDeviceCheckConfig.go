// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An app's DeviceCheck configuration object. Note that the Team ID registered with your
// app is used as part of the validation process. Make sure your `firebase.AppleApp` has a teamId present.
//
// To get more information about DeviceCheckConfig, see:
//
// * [API documentation](https://firebase.google.com/docs/reference/appcheck/rest/v1/projects.apps.deviceCheckConfig)
// * How-to Guides
//   - [Official Documentation](https://firebase.google.com/docs/app-check)
//
// ## Example Usage
//
// ### Firebase App Check Device Check Config Full
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/firebase"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firebase.NewAppleApp(ctx, "default", &firebase.AppleAppArgs{
//				Project:     pulumi.String("my-project-name"),
//				DisplayName: pulumi.String("Apple app"),
//				BundleId:    pulumi.String("bundle.id.devicecheck"),
//				TeamId:      pulumi.String("9987654321"),
//			})
//			if err != nil {
//				return err
//			}
//			// It takes a while for App Check to recognize the new app
//			// If your app already exists, you don't have to wait 30 seconds.
//			_, err = time.NewSleep(ctx, "wait_30s", &time.SleepArgs{
//				CreateDuration: "30s",
//			})
//			if err != nil {
//				return err
//			}
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "path/to/private-key.p8",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppCheckDeviceCheckConfig(ctx, "default", &firebase.AppCheckDeviceCheckConfigArgs{
//				Project:    pulumi.String("my-project-name"),
//				AppId:      _default.AppId,
//				TokenTtl:   pulumi.String("7200s"),
//				KeyId:      pulumi.String("Key ID"),
//				PrivateKey: invokeFile.Result,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// DeviceCheckConfig can be imported using any of these accepted formats:
//
// * `projects/{{project}}/apps/{{app_id}}/deviceCheckConfig`
//
// * `{{project}}/{{app_id}}`
//
// * `{{app_id}}`
//
// When using the `pulumi import` command, DeviceCheckConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:firebase/appCheckDeviceCheckConfig:AppCheckDeviceCheckConfig default projects/{{project}}/apps/{{app_id}}/deviceCheckConfig
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appCheckDeviceCheckConfig:AppCheckDeviceCheckConfig default {{project}}/{{app_id}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appCheckDeviceCheckConfig:AppCheckDeviceCheckConfig default {{app_id}}
// ```
type AppCheckDeviceCheckConfig struct {
	pulumi.CustomResourceState

	// The ID of an
	// [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id).
	//
	// ***
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The key identifier of a private key enabled with DeviceCheck, created in your Apple Developer account.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// The relative resource name of the DeviceCheck configuration object
	Name pulumi.StringOutput `pulumi:"name"`
	// The contents of the private key (.p8) file associated with the key specified by keyId.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// Whether the privateKey field was previously set. Since App Check will never return the
	// privateKey field, this field is the only way to find out whether it was previously set.
	PrivateKeySet pulumi.BoolOutput `pulumi:"privateKeySet"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Specifies the duration for which App Check tokens exchanged from DeviceCheck artifacts will be valid.
	// If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	TokenTtl pulumi.StringOutput `pulumi:"tokenTtl"`
}

// NewAppCheckDeviceCheckConfig registers a new resource with the given unique name, arguments, and options.
func NewAppCheckDeviceCheckConfig(ctx *pulumi.Context,
	name string, args *AppCheckDeviceCheckConfigArgs, opts ...pulumi.ResourceOption) (*AppCheckDeviceCheckConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.KeyId == nil {
		return nil, errors.New("invalid value for required argument 'KeyId'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppCheckDeviceCheckConfig
	err := ctx.RegisterResource("gcp:firebase/appCheckDeviceCheckConfig:AppCheckDeviceCheckConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppCheckDeviceCheckConfig gets an existing AppCheckDeviceCheckConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppCheckDeviceCheckConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppCheckDeviceCheckConfigState, opts ...pulumi.ResourceOption) (*AppCheckDeviceCheckConfig, error) {
	var resource AppCheckDeviceCheckConfig
	err := ctx.ReadResource("gcp:firebase/appCheckDeviceCheckConfig:AppCheckDeviceCheckConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppCheckDeviceCheckConfig resources.
type appCheckDeviceCheckConfigState struct {
	// The ID of an
	// [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id).
	//
	// ***
	AppId *string `pulumi:"appId"`
	// The key identifier of a private key enabled with DeviceCheck, created in your Apple Developer account.
	KeyId *string `pulumi:"keyId"`
	// The relative resource name of the DeviceCheck configuration object
	Name *string `pulumi:"name"`
	// The contents of the private key (.p8) file associated with the key specified by keyId.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PrivateKey *string `pulumi:"privateKey"`
	// Whether the privateKey field was previously set. Since App Check will never return the
	// privateKey field, this field is the only way to find out whether it was previously set.
	PrivateKeySet *bool `pulumi:"privateKeySet"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Specifies the duration for which App Check tokens exchanged from DeviceCheck artifacts will be valid.
	// If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	TokenTtl *string `pulumi:"tokenTtl"`
}

type AppCheckDeviceCheckConfigState struct {
	// The ID of an
	// [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id).
	//
	// ***
	AppId pulumi.StringPtrInput
	// The key identifier of a private key enabled with DeviceCheck, created in your Apple Developer account.
	KeyId pulumi.StringPtrInput
	// The relative resource name of the DeviceCheck configuration object
	Name pulumi.StringPtrInput
	// The contents of the private key (.p8) file associated with the key specified by keyId.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PrivateKey pulumi.StringPtrInput
	// Whether the privateKey field was previously set. Since App Check will never return the
	// privateKey field, this field is the only way to find out whether it was previously set.
	PrivateKeySet pulumi.BoolPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Specifies the duration for which App Check tokens exchanged from DeviceCheck artifacts will be valid.
	// If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	TokenTtl pulumi.StringPtrInput
}

func (AppCheckDeviceCheckConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*appCheckDeviceCheckConfigState)(nil)).Elem()
}

type appCheckDeviceCheckConfigArgs struct {
	// The ID of an
	// [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id).
	//
	// ***
	AppId string `pulumi:"appId"`
	// The key identifier of a private key enabled with DeviceCheck, created in your Apple Developer account.
	KeyId string `pulumi:"keyId"`
	// The contents of the private key (.p8) file associated with the key specified by keyId.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PrivateKey string `pulumi:"privateKey"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Specifies the duration for which App Check tokens exchanged from DeviceCheck artifacts will be valid.
	// If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	TokenTtl *string `pulumi:"tokenTtl"`
}

// The set of arguments for constructing a AppCheckDeviceCheckConfig resource.
type AppCheckDeviceCheckConfigArgs struct {
	// The ID of an
	// [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id).
	//
	// ***
	AppId pulumi.StringInput
	// The key identifier of a private key enabled with DeviceCheck, created in your Apple Developer account.
	KeyId pulumi.StringInput
	// The contents of the private key (.p8) file associated with the key specified by keyId.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	PrivateKey pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Specifies the duration for which App Check tokens exchanged from DeviceCheck artifacts will be valid.
	// If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	TokenTtl pulumi.StringPtrInput
}

func (AppCheckDeviceCheckConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appCheckDeviceCheckConfigArgs)(nil)).Elem()
}

type AppCheckDeviceCheckConfigInput interface {
	pulumi.Input

	ToAppCheckDeviceCheckConfigOutput() AppCheckDeviceCheckConfigOutput
	ToAppCheckDeviceCheckConfigOutputWithContext(ctx context.Context) AppCheckDeviceCheckConfigOutput
}

func (*AppCheckDeviceCheckConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AppCheckDeviceCheckConfig)(nil)).Elem()
}

func (i *AppCheckDeviceCheckConfig) ToAppCheckDeviceCheckConfigOutput() AppCheckDeviceCheckConfigOutput {
	return i.ToAppCheckDeviceCheckConfigOutputWithContext(context.Background())
}

func (i *AppCheckDeviceCheckConfig) ToAppCheckDeviceCheckConfigOutputWithContext(ctx context.Context) AppCheckDeviceCheckConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCheckDeviceCheckConfigOutput)
}

// AppCheckDeviceCheckConfigArrayInput is an input type that accepts AppCheckDeviceCheckConfigArray and AppCheckDeviceCheckConfigArrayOutput values.
// You can construct a concrete instance of `AppCheckDeviceCheckConfigArrayInput` via:
//
//	AppCheckDeviceCheckConfigArray{ AppCheckDeviceCheckConfigArgs{...} }
type AppCheckDeviceCheckConfigArrayInput interface {
	pulumi.Input

	ToAppCheckDeviceCheckConfigArrayOutput() AppCheckDeviceCheckConfigArrayOutput
	ToAppCheckDeviceCheckConfigArrayOutputWithContext(context.Context) AppCheckDeviceCheckConfigArrayOutput
}

type AppCheckDeviceCheckConfigArray []AppCheckDeviceCheckConfigInput

func (AppCheckDeviceCheckConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppCheckDeviceCheckConfig)(nil)).Elem()
}

func (i AppCheckDeviceCheckConfigArray) ToAppCheckDeviceCheckConfigArrayOutput() AppCheckDeviceCheckConfigArrayOutput {
	return i.ToAppCheckDeviceCheckConfigArrayOutputWithContext(context.Background())
}

func (i AppCheckDeviceCheckConfigArray) ToAppCheckDeviceCheckConfigArrayOutputWithContext(ctx context.Context) AppCheckDeviceCheckConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCheckDeviceCheckConfigArrayOutput)
}

// AppCheckDeviceCheckConfigMapInput is an input type that accepts AppCheckDeviceCheckConfigMap and AppCheckDeviceCheckConfigMapOutput values.
// You can construct a concrete instance of `AppCheckDeviceCheckConfigMapInput` via:
//
//	AppCheckDeviceCheckConfigMap{ "key": AppCheckDeviceCheckConfigArgs{...} }
type AppCheckDeviceCheckConfigMapInput interface {
	pulumi.Input

	ToAppCheckDeviceCheckConfigMapOutput() AppCheckDeviceCheckConfigMapOutput
	ToAppCheckDeviceCheckConfigMapOutputWithContext(context.Context) AppCheckDeviceCheckConfigMapOutput
}

type AppCheckDeviceCheckConfigMap map[string]AppCheckDeviceCheckConfigInput

func (AppCheckDeviceCheckConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppCheckDeviceCheckConfig)(nil)).Elem()
}

func (i AppCheckDeviceCheckConfigMap) ToAppCheckDeviceCheckConfigMapOutput() AppCheckDeviceCheckConfigMapOutput {
	return i.ToAppCheckDeviceCheckConfigMapOutputWithContext(context.Background())
}

func (i AppCheckDeviceCheckConfigMap) ToAppCheckDeviceCheckConfigMapOutputWithContext(ctx context.Context) AppCheckDeviceCheckConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCheckDeviceCheckConfigMapOutput)
}

type AppCheckDeviceCheckConfigOutput struct{ *pulumi.OutputState }

func (AppCheckDeviceCheckConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppCheckDeviceCheckConfig)(nil)).Elem()
}

func (o AppCheckDeviceCheckConfigOutput) ToAppCheckDeviceCheckConfigOutput() AppCheckDeviceCheckConfigOutput {
	return o
}

func (o AppCheckDeviceCheckConfigOutput) ToAppCheckDeviceCheckConfigOutputWithContext(ctx context.Context) AppCheckDeviceCheckConfigOutput {
	return o
}

// The ID of an
// [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id).
//
// ***
func (o AppCheckDeviceCheckConfigOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckDeviceCheckConfig) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The key identifier of a private key enabled with DeviceCheck, created in your Apple Developer account.
func (o AppCheckDeviceCheckConfigOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckDeviceCheckConfig) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

// The relative resource name of the DeviceCheck configuration object
func (o AppCheckDeviceCheckConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckDeviceCheckConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The contents of the private key (.p8) file associated with the key specified by keyId.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o AppCheckDeviceCheckConfigOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckDeviceCheckConfig) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// Whether the privateKey field was previously set. Since App Check will never return the
// privateKey field, this field is the only way to find out whether it was previously set.
func (o AppCheckDeviceCheckConfigOutput) PrivateKeySet() pulumi.BoolOutput {
	return o.ApplyT(func(v *AppCheckDeviceCheckConfig) pulumi.BoolOutput { return v.PrivateKeySet }).(pulumi.BoolOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AppCheckDeviceCheckConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckDeviceCheckConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies the duration for which App Check tokens exchanged from DeviceCheck artifacts will be valid.
// If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
func (o AppCheckDeviceCheckConfigOutput) TokenTtl() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckDeviceCheckConfig) pulumi.StringOutput { return v.TokenTtl }).(pulumi.StringOutput)
}

type AppCheckDeviceCheckConfigArrayOutput struct{ *pulumi.OutputState }

func (AppCheckDeviceCheckConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppCheckDeviceCheckConfig)(nil)).Elem()
}

func (o AppCheckDeviceCheckConfigArrayOutput) ToAppCheckDeviceCheckConfigArrayOutput() AppCheckDeviceCheckConfigArrayOutput {
	return o
}

func (o AppCheckDeviceCheckConfigArrayOutput) ToAppCheckDeviceCheckConfigArrayOutputWithContext(ctx context.Context) AppCheckDeviceCheckConfigArrayOutput {
	return o
}

func (o AppCheckDeviceCheckConfigArrayOutput) Index(i pulumi.IntInput) AppCheckDeviceCheckConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppCheckDeviceCheckConfig {
		return vs[0].([]*AppCheckDeviceCheckConfig)[vs[1].(int)]
	}).(AppCheckDeviceCheckConfigOutput)
}

type AppCheckDeviceCheckConfigMapOutput struct{ *pulumi.OutputState }

func (AppCheckDeviceCheckConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppCheckDeviceCheckConfig)(nil)).Elem()
}

func (o AppCheckDeviceCheckConfigMapOutput) ToAppCheckDeviceCheckConfigMapOutput() AppCheckDeviceCheckConfigMapOutput {
	return o
}

func (o AppCheckDeviceCheckConfigMapOutput) ToAppCheckDeviceCheckConfigMapOutputWithContext(ctx context.Context) AppCheckDeviceCheckConfigMapOutput {
	return o
}

func (o AppCheckDeviceCheckConfigMapOutput) MapIndex(k pulumi.StringInput) AppCheckDeviceCheckConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppCheckDeviceCheckConfig {
		return vs[0].(map[string]*AppCheckDeviceCheckConfig)[vs[1].(string)]
	}).(AppCheckDeviceCheckConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppCheckDeviceCheckConfigInput)(nil)).Elem(), &AppCheckDeviceCheckConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppCheckDeviceCheckConfigArrayInput)(nil)).Elem(), AppCheckDeviceCheckConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppCheckDeviceCheckConfigMapInput)(nil)).Elem(), AppCheckDeviceCheckConfigMap{})
	pulumi.RegisterOutputType(AppCheckDeviceCheckConfigOutput{})
	pulumi.RegisterOutputType(AppCheckDeviceCheckConfigArrayOutput{})
	pulumi.RegisterOutputType(AppCheckDeviceCheckConfigMapOutput{})
}
