// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firebase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Firebasehosting Site Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/firebase"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firebase.NewHostingSite(ctx, "default", &firebase.HostingSiteArgs{
//				Project: pulumi.String("my-project-name"),
//				SiteId:  pulumi.String("site-no-app"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebasehosting Site Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/firebase"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firebase.NewWebApp(ctx, "default", &firebase.WebAppArgs{
//				Project:        pulumi.String("my-project-name"),
//				DisplayName:    pulumi.String("Test web app for Firebase Hosting"),
//				DeletionPolicy: pulumi.String("DELETE"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewHostingSite(ctx, "full", &firebase.HostingSiteArgs{
//				Project: pulumi.String("my-project-name"),
//				SiteId:  pulumi.String("site-with-app"),
//				AppId:   _default.AppId,
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Site can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:firebase/hostingSite:HostingSite default projects/{{project}}/sites/{{site_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:firebase/hostingSite:HostingSite default {{project}}/{{site_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:firebase/hostingSite:HostingSite default sites/{{site_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:firebase/hostingSite:HostingSite default {{site_id}}
//
// ```
type HostingSite struct {
	pulumi.CustomResourceState

	// Optional. The [ID of a Web App](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
	// associated with the Hosting site.
	AppId pulumi.StringPtrOutput `pulumi:"appId"`
	// The default URL for the site in the form of https://{name}.web.app
	DefaultUrl pulumi.StringOutput `pulumi:"defaultUrl"`
	// Output only. The fully-qualified resource name of the Hosting site, in the format:
	// projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project's
	// ['ProjectNumber'](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
	// ***(recommended)*** or its
	// ['ProjectId'](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id).
	// Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Required. Immutable. A globally unique identifier for the Hosting site. This identifier is
	// used to construct the Firebase-provisioned subdomains for the site, so it must also be a valid
	// domain name label.
	SiteId pulumi.StringPtrOutput `pulumi:"siteId"`
}

// NewHostingSite registers a new resource with the given unique name, arguments, and options.
func NewHostingSite(ctx *pulumi.Context,
	name string, args *HostingSiteArgs, opts ...pulumi.ResourceOption) (*HostingSite, error) {
	if args == nil {
		args = &HostingSiteArgs{}
	}

	var resource HostingSite
	err := ctx.RegisterResource("gcp:firebase/hostingSite:HostingSite", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostingSite gets an existing HostingSite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostingSite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostingSiteState, opts ...pulumi.ResourceOption) (*HostingSite, error) {
	var resource HostingSite
	err := ctx.ReadResource("gcp:firebase/hostingSite:HostingSite", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostingSite resources.
type hostingSiteState struct {
	// Optional. The [ID of a Web App](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
	// associated with the Hosting site.
	AppId *string `pulumi:"appId"`
	// The default URL for the site in the form of https://{name}.web.app
	DefaultUrl *string `pulumi:"defaultUrl"`
	// Output only. The fully-qualified resource name of the Hosting site, in the format:
	// projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project's
	// ['ProjectNumber'](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
	// ***(recommended)*** or its
	// ['ProjectId'](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id).
	// Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Required. Immutable. A globally unique identifier for the Hosting site. This identifier is
	// used to construct the Firebase-provisioned subdomains for the site, so it must also be a valid
	// domain name label.
	SiteId *string `pulumi:"siteId"`
}

type HostingSiteState struct {
	// Optional. The [ID of a Web App](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
	// associated with the Hosting site.
	AppId pulumi.StringPtrInput
	// The default URL for the site in the form of https://{name}.web.app
	DefaultUrl pulumi.StringPtrInput
	// Output only. The fully-qualified resource name of the Hosting site, in the format:
	// projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project's
	// ['ProjectNumber'](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
	// ***(recommended)*** or its
	// ['ProjectId'](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id).
	// Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Required. Immutable. A globally unique identifier for the Hosting site. This identifier is
	// used to construct the Firebase-provisioned subdomains for the site, so it must also be a valid
	// domain name label.
	SiteId pulumi.StringPtrInput
}

func (HostingSiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostingSiteState)(nil)).Elem()
}

type hostingSiteArgs struct {
	// Optional. The [ID of a Web App](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
	// associated with the Hosting site.
	AppId *string `pulumi:"appId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Required. Immutable. A globally unique identifier for the Hosting site. This identifier is
	// used to construct the Firebase-provisioned subdomains for the site, so it must also be a valid
	// domain name label.
	SiteId *string `pulumi:"siteId"`
}

// The set of arguments for constructing a HostingSite resource.
type HostingSiteArgs struct {
	// Optional. The [ID of a Web App](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
	// associated with the Hosting site.
	AppId pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Required. Immutable. A globally unique identifier for the Hosting site. This identifier is
	// used to construct the Firebase-provisioned subdomains for the site, so it must also be a valid
	// domain name label.
	SiteId pulumi.StringPtrInput
}

func (HostingSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostingSiteArgs)(nil)).Elem()
}

type HostingSiteInput interface {
	pulumi.Input

	ToHostingSiteOutput() HostingSiteOutput
	ToHostingSiteOutputWithContext(ctx context.Context) HostingSiteOutput
}

func (*HostingSite) ElementType() reflect.Type {
	return reflect.TypeOf((**HostingSite)(nil)).Elem()
}

func (i *HostingSite) ToHostingSiteOutput() HostingSiteOutput {
	return i.ToHostingSiteOutputWithContext(context.Background())
}

func (i *HostingSite) ToHostingSiteOutputWithContext(ctx context.Context) HostingSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostingSiteOutput)
}

// HostingSiteArrayInput is an input type that accepts HostingSiteArray and HostingSiteArrayOutput values.
// You can construct a concrete instance of `HostingSiteArrayInput` via:
//
//	HostingSiteArray{ HostingSiteArgs{...} }
type HostingSiteArrayInput interface {
	pulumi.Input

	ToHostingSiteArrayOutput() HostingSiteArrayOutput
	ToHostingSiteArrayOutputWithContext(context.Context) HostingSiteArrayOutput
}

type HostingSiteArray []HostingSiteInput

func (HostingSiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostingSite)(nil)).Elem()
}

func (i HostingSiteArray) ToHostingSiteArrayOutput() HostingSiteArrayOutput {
	return i.ToHostingSiteArrayOutputWithContext(context.Background())
}

func (i HostingSiteArray) ToHostingSiteArrayOutputWithContext(ctx context.Context) HostingSiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostingSiteArrayOutput)
}

// HostingSiteMapInput is an input type that accepts HostingSiteMap and HostingSiteMapOutput values.
// You can construct a concrete instance of `HostingSiteMapInput` via:
//
//	HostingSiteMap{ "key": HostingSiteArgs{...} }
type HostingSiteMapInput interface {
	pulumi.Input

	ToHostingSiteMapOutput() HostingSiteMapOutput
	ToHostingSiteMapOutputWithContext(context.Context) HostingSiteMapOutput
}

type HostingSiteMap map[string]HostingSiteInput

func (HostingSiteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostingSite)(nil)).Elem()
}

func (i HostingSiteMap) ToHostingSiteMapOutput() HostingSiteMapOutput {
	return i.ToHostingSiteMapOutputWithContext(context.Background())
}

func (i HostingSiteMap) ToHostingSiteMapOutputWithContext(ctx context.Context) HostingSiteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostingSiteMapOutput)
}

type HostingSiteOutput struct{ *pulumi.OutputState }

func (HostingSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostingSite)(nil)).Elem()
}

func (o HostingSiteOutput) ToHostingSiteOutput() HostingSiteOutput {
	return o
}

func (o HostingSiteOutput) ToHostingSiteOutputWithContext(ctx context.Context) HostingSiteOutput {
	return o
}

// Optional. The [ID of a Web App](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
// associated with the Hosting site.
func (o HostingSiteOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostingSite) pulumi.StringPtrOutput { return v.AppId }).(pulumi.StringPtrOutput)
}

// The default URL for the site in the form of https://{name}.web.app
func (o HostingSiteOutput) DefaultUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingSite) pulumi.StringOutput { return v.DefaultUrl }).(pulumi.StringOutput)
}

// Output only. The fully-qualified resource name of the Hosting site, in the format:
// projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project's
// ['ProjectNumber'](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
// ***(recommended)*** or its
// ['ProjectId'](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id).
// Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).
func (o HostingSiteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingSite) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o HostingSiteOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingSite) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Required. Immutable. A globally unique identifier for the Hosting site. This identifier is
// used to construct the Firebase-provisioned subdomains for the site, so it must also be a valid
// domain name label.
func (o HostingSiteOutput) SiteId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostingSite) pulumi.StringPtrOutput { return v.SiteId }).(pulumi.StringPtrOutput)
}

type HostingSiteArrayOutput struct{ *pulumi.OutputState }

func (HostingSiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostingSite)(nil)).Elem()
}

func (o HostingSiteArrayOutput) ToHostingSiteArrayOutput() HostingSiteArrayOutput {
	return o
}

func (o HostingSiteArrayOutput) ToHostingSiteArrayOutputWithContext(ctx context.Context) HostingSiteArrayOutput {
	return o
}

func (o HostingSiteArrayOutput) Index(i pulumi.IntInput) HostingSiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostingSite {
		return vs[0].([]*HostingSite)[vs[1].(int)]
	}).(HostingSiteOutput)
}

type HostingSiteMapOutput struct{ *pulumi.OutputState }

func (HostingSiteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostingSite)(nil)).Elem()
}

func (o HostingSiteMapOutput) ToHostingSiteMapOutput() HostingSiteMapOutput {
	return o
}

func (o HostingSiteMapOutput) ToHostingSiteMapOutputWithContext(ctx context.Context) HostingSiteMapOutput {
	return o
}

func (o HostingSiteMapOutput) MapIndex(k pulumi.StringInput) HostingSiteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostingSite {
		return vs[0].(map[string]*HostingSite)[vs[1].(string)]
	}).(HostingSiteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostingSiteInput)(nil)).Elem(), &HostingSite{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostingSiteArrayInput)(nil)).Elem(), HostingSiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostingSiteMapInput)(nil)).Elem(), HostingSiteMap{})
	pulumi.RegisterOutputType(HostingSiteOutput{})
	pulumi.RegisterOutputType(HostingSiteArrayOutput{})
	pulumi.RegisterOutputType(HostingSiteMapOutput{})
}
