// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A single build for a backend, at a specific point codebase reference tag
// and point in time. Encapsulates several resources, including an Artifact Registry
// container image, a Cloud Build invocation that built the image, and the
// Cloud Run revision that uses that image.
//
// ## Example Usage
//
// ### Firebase App Hosting Build Minimal
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// ## Include these blocks only once per project if you are starting from scratch ###
//			serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
//				Project:                   pulumi.String("my-project-name"),
//				AccountId:                 pulumi.String("firebase-app-hosting-compute"),
//				DisplayName:               pulumi.String("Firebase App Hosting compute service account"),
//				CreateIgnoreAlreadyExists: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			fah, err := projects.NewService(ctx, "fah", &projects.ServiceArgs{
//				Project:          pulumi.String("my-project-name"),
//				Service:          pulumi.String("firebaseapphosting.googleapis.com"),
//				DisableOnDestroy: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAppHostingBackend, err := firebase.NewAppHostingBackend(ctx, "example", &firebase.AppHostingBackendArgs{
//				Project:         pulumi.String("my-project-name"),
//				Location:        pulumi.String("us-central1"),
//				BackendId:       pulumi.String("mini"),
//				AppId:           pulumi.String("1:0000000000:web:674cde32020e16fbce9dbd"),
//				ServingLocality: pulumi.String("GLOBAL_ACCESS"),
//				ServiceAccount:  serviceAccount.Email,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				fah,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppHostingBuild(ctx, "example", &firebase.AppHostingBuildArgs{
//				Project:  exampleAppHostingBackend.Project,
//				Location: exampleAppHostingBackend.Location,
//				Backend:  exampleAppHostingBackend.BackendId,
//				BuildId:  pulumi.String("mini-build"),
//				Source: &firebase.AppHostingBuildSourceArgs{
//					Container: &firebase.AppHostingBuildSourceContainerArgs{
//						Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/hello"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMMember(ctx, "app_hosting_sa_runner", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/firebaseapphosting.computeRunner"),
//				Member:  serviceAccount.Member,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebase App Hosting Build Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// ## Include these blocks only once per project if you are starting from scratch ###
//			serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
//				Project:                   pulumi.String("my-project-name"),
//				AccountId:                 pulumi.String("firebase-app-hosting-compute"),
//				DisplayName:               pulumi.String("Firebase App Hosting compute service account"),
//				CreateIgnoreAlreadyExists: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			fah, err := projects.NewService(ctx, "fah", &projects.ServiceArgs{
//				Project:          pulumi.String("my-project-name"),
//				Service:          pulumi.String("firebaseapphosting.googleapis.com"),
//				DisableOnDestroy: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAppHostingBackend, err := firebase.NewAppHostingBackend(ctx, "example", &firebase.AppHostingBackendArgs{
//				Project:         pulumi.String("my-project-name"),
//				Location:        pulumi.String("us-central1"),
//				BackendId:       pulumi.String("full"),
//				AppId:           pulumi.String("1:0000000000:web:674cde32020e16fbce9dbd"),
//				ServingLocality: pulumi.String("GLOBAL_ACCESS"),
//				ServiceAccount:  serviceAccount.Email,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				fah,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppHostingBuild(ctx, "example", &firebase.AppHostingBuildArgs{
//				Project:     exampleAppHostingBackend.Project,
//				Location:    exampleAppHostingBackend.Location,
//				Backend:     exampleAppHostingBackend.BackendId,
//				BuildId:     pulumi.String("full-build"),
//				DisplayName: pulumi.String("My Build"),
//				Annotations: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//				Labels: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//				Source: &firebase.AppHostingBuildSourceArgs{
//					Container: &firebase.AppHostingBuildSourceContainerArgs{
//						Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/hello"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMMember(ctx, "app_hosting_sa_runner", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/firebaseapphosting.computeRunner"),
//				Member:  serviceAccount.Member,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Import
//
// Build can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/backends/{{backend}}/builds/{{build_id}}`
//
// * `{{project}}/{{location}}/{{backend}}/{{build_id}}`
//
// * `{{location}}/{{backend}}/{{build_id}}`
//
// When using the `pulumi import` command, Build can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:firebase/appHostingBuild:AppHostingBuild default projects/{{project}}/locations/{{location}}/backends/{{backend}}/builds/{{build_id}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appHostingBuild:AppHostingBuild default {{project}}/{{location}}/{{backend}}/{{build_id}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appHostingBuild:AppHostingBuild default {{location}}/{{backend}}/{{build_id}}
// ```
type AppHostingBuild struct {
	pulumi.CustomResourceState

	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
	// should be preserved when modifying objects. **Note**: This field is non-authoritative, and will only manage the
	// annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
	// present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// The ID of the Backend that this Build applies to
	Backend pulumi.StringOutput `pulumi:"backend"`
	// The user-specified ID of the build being created.
	BuildId pulumi.StringOutput `pulumi:"buildId"`
	// The location of the [Cloud Build
	// logs](https://cloud.google.com/build/docs/view-build-results) for the build
	// process.
	BuildLogsUri pulumi.StringOutput `pulumi:"buildLogsUri"`
	// Time at which the build was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Human-readable name. 63 character limit.
	DisplayName          pulumi.StringPtrOutput `pulumi:"displayName"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The environment name of the backend when this build was created.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The source of the error for the build, if in a `FAILED` state.
	// Possible values:
	// CLOUD_BUILD
	// CLOUD_RUN
	ErrorSource pulumi.StringOutput `pulumi:"errorSource"`
	// The `Status` type defines a logical error model that is suitable for
	// different programming environments, including REST APIs and RPC APIs. It is
	// used by [gRPC](https://github.com/grpc). Each `Status` message contains
	// three pieces of data: error code, error message, and error details.
	// You can find out more about this error model and how to work with it in the
	// [API Design Guide](https://cloud.google.com/apis/design/errors).
	// Structure is documented below.
	Errors AppHostingBuildErrorArrayOutput `pulumi:"errors"`
	// Server-computed checksum based on other values; may be sent
	// on update or delete to ensure operation is done on expected resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The Artifact Registry
	// [container
	// image](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages)
	// URI, used by the Cloud Run
	// [`revision`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services.revisions)
	// for this build.
	Image pulumi.StringOutput `pulumi:"image"`
	// Unstructured key value map that can be used to organize and categorize objects. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The location of the Backend that this Build applies to
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The resource name of the build.
	// Format:
	// `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The source for the build.
	// Structure is documented below.
	Source AppHostingBuildSourceOutput `pulumi:"source"`
	// The state of the build.
	// Possible values:
	// BUILDING
	// BUILT
	// DEPLOYING
	// READY
	// FAILED
	State pulumi.StringOutput `pulumi:"state"`
	// System-assigned, unique identifier.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time at which the build was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAppHostingBuild registers a new resource with the given unique name, arguments, and options.
func NewAppHostingBuild(ctx *pulumi.Context,
	name string, args *AppHostingBuildArgs, opts ...pulumi.ResourceOption) (*AppHostingBuild, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backend == nil {
		return nil, errors.New("invalid value for required argument 'Backend'")
	}
	if args.BuildId == nil {
		return nil, errors.New("invalid value for required argument 'BuildId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppHostingBuild
	err := ctx.RegisterResource("gcp:firebase/appHostingBuild:AppHostingBuild", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppHostingBuild gets an existing AppHostingBuild resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppHostingBuild(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppHostingBuildState, opts ...pulumi.ResourceOption) (*AppHostingBuild, error) {
	var resource AppHostingBuild
	err := ctx.ReadResource("gcp:firebase/appHostingBuild:AppHostingBuild", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppHostingBuild resources.
type appHostingBuildState struct {
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
	// should be preserved when modifying objects. **Note**: This field is non-authoritative, and will only manage the
	// annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
	// present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The ID of the Backend that this Build applies to
	Backend *string `pulumi:"backend"`
	// The user-specified ID of the build being created.
	BuildId *string `pulumi:"buildId"`
	// The location of the [Cloud Build
	// logs](https://cloud.google.com/build/docs/view-build-results) for the build
	// process.
	BuildLogsUri *string `pulumi:"buildLogsUri"`
	// Time at which the build was created.
	CreateTime *string `pulumi:"createTime"`
	// Human-readable name. 63 character limit.
	DisplayName          *string           `pulumi:"displayName"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The environment name of the backend when this build was created.
	Environment *string `pulumi:"environment"`
	// The source of the error for the build, if in a `FAILED` state.
	// Possible values:
	// CLOUD_BUILD
	// CLOUD_RUN
	ErrorSource *string `pulumi:"errorSource"`
	// The `Status` type defines a logical error model that is suitable for
	// different programming environments, including REST APIs and RPC APIs. It is
	// used by [gRPC](https://github.com/grpc). Each `Status` message contains
	// three pieces of data: error code, error message, and error details.
	// You can find out more about this error model and how to work with it in the
	// [API Design Guide](https://cloud.google.com/apis/design/errors).
	// Structure is documented below.
	Errors []AppHostingBuildError `pulumi:"errors"`
	// Server-computed checksum based on other values; may be sent
	// on update or delete to ensure operation is done on expected resource.
	Etag *string `pulumi:"etag"`
	// The Artifact Registry
	// [container
	// image](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages)
	// URI, used by the Cloud Run
	// [`revision`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services.revisions)
	// for this build.
	Image *string `pulumi:"image"`
	// Unstructured key value map that can be used to organize and categorize objects. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the Backend that this Build applies to
	Location *string `pulumi:"location"`
	// Identifier. The resource name of the build.
	// Format:
	// `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The source for the build.
	// Structure is documented below.
	Source *AppHostingBuildSource `pulumi:"source"`
	// The state of the build.
	// Possible values:
	// BUILDING
	// BUILT
	// DEPLOYING
	// READY
	// FAILED
	State *string `pulumi:"state"`
	// System-assigned, unique identifier.
	Uid *string `pulumi:"uid"`
	// Time at which the build was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type AppHostingBuildState struct {
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
	// should be preserved when modifying objects. **Note**: This field is non-authoritative, and will only manage the
	// annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
	// present on the resource.
	Annotations pulumi.StringMapInput
	// The ID of the Backend that this Build applies to
	Backend pulumi.StringPtrInput
	// The user-specified ID of the build being created.
	BuildId pulumi.StringPtrInput
	// The location of the [Cloud Build
	// logs](https://cloud.google.com/build/docs/view-build-results) for the build
	// process.
	BuildLogsUri pulumi.StringPtrInput
	// Time at which the build was created.
	CreateTime pulumi.StringPtrInput
	// Human-readable name. 63 character limit.
	DisplayName          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The environment name of the backend when this build was created.
	Environment pulumi.StringPtrInput
	// The source of the error for the build, if in a `FAILED` state.
	// Possible values:
	// CLOUD_BUILD
	// CLOUD_RUN
	ErrorSource pulumi.StringPtrInput
	// The `Status` type defines a logical error model that is suitable for
	// different programming environments, including REST APIs and RPC APIs. It is
	// used by [gRPC](https://github.com/grpc). Each `Status` message contains
	// three pieces of data: error code, error message, and error details.
	// You can find out more about this error model and how to work with it in the
	// [API Design Guide](https://cloud.google.com/apis/design/errors).
	// Structure is documented below.
	Errors AppHostingBuildErrorArrayInput
	// Server-computed checksum based on other values; may be sent
	// on update or delete to ensure operation is done on expected resource.
	Etag pulumi.StringPtrInput
	// The Artifact Registry
	// [container
	// image](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages)
	// URI, used by the Cloud Run
	// [`revision`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services.revisions)
	// for this build.
	Image pulumi.StringPtrInput
	// Unstructured key value map that can be used to organize and categorize objects. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the Backend that this Build applies to
	Location pulumi.StringPtrInput
	// Identifier. The resource name of the build.
	// Format:
	// `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The source for the build.
	// Structure is documented below.
	Source AppHostingBuildSourcePtrInput
	// The state of the build.
	// Possible values:
	// BUILDING
	// BUILT
	// DEPLOYING
	// READY
	// FAILED
	State pulumi.StringPtrInput
	// System-assigned, unique identifier.
	Uid pulumi.StringPtrInput
	// Time at which the build was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (AppHostingBuildState) ElementType() reflect.Type {
	return reflect.TypeOf((*appHostingBuildState)(nil)).Elem()
}

type appHostingBuildArgs struct {
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
	// should be preserved when modifying objects. **Note**: This field is non-authoritative, and will only manage the
	// annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
	// present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The ID of the Backend that this Build applies to
	Backend string `pulumi:"backend"`
	// The user-specified ID of the build being created.
	BuildId string `pulumi:"buildId"`
	// Human-readable name. 63 character limit.
	DisplayName *string `pulumi:"displayName"`
	// Unstructured key value map that can be used to organize and categorize objects. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The location of the Backend that this Build applies to
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// The source for the build.
	// Structure is documented below.
	Source AppHostingBuildSource `pulumi:"source"`
}

// The set of arguments for constructing a AppHostingBuild resource.
type AppHostingBuildArgs struct {
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
	// should be preserved when modifying objects. **Note**: This field is non-authoritative, and will only manage the
	// annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
	// present on the resource.
	Annotations pulumi.StringMapInput
	// The ID of the Backend that this Build applies to
	Backend pulumi.StringInput
	// The user-specified ID of the build being created.
	BuildId pulumi.StringInput
	// Human-readable name. 63 character limit.
	DisplayName pulumi.StringPtrInput
	// Unstructured key value map that can be used to organize and categorize objects. **Note**: This field is
	// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
	// 'effective_labels' for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The location of the Backend that this Build applies to
	Location pulumi.StringInput
	Project  pulumi.StringPtrInput
	// The source for the build.
	// Structure is documented below.
	Source AppHostingBuildSourceInput
}

func (AppHostingBuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appHostingBuildArgs)(nil)).Elem()
}

type AppHostingBuildInput interface {
	pulumi.Input

	ToAppHostingBuildOutput() AppHostingBuildOutput
	ToAppHostingBuildOutputWithContext(ctx context.Context) AppHostingBuildOutput
}

func (*AppHostingBuild) ElementType() reflect.Type {
	return reflect.TypeOf((**AppHostingBuild)(nil)).Elem()
}

func (i *AppHostingBuild) ToAppHostingBuildOutput() AppHostingBuildOutput {
	return i.ToAppHostingBuildOutputWithContext(context.Background())
}

func (i *AppHostingBuild) ToAppHostingBuildOutputWithContext(ctx context.Context) AppHostingBuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppHostingBuildOutput)
}

// AppHostingBuildArrayInput is an input type that accepts AppHostingBuildArray and AppHostingBuildArrayOutput values.
// You can construct a concrete instance of `AppHostingBuildArrayInput` via:
//
//	AppHostingBuildArray{ AppHostingBuildArgs{...} }
type AppHostingBuildArrayInput interface {
	pulumi.Input

	ToAppHostingBuildArrayOutput() AppHostingBuildArrayOutput
	ToAppHostingBuildArrayOutputWithContext(context.Context) AppHostingBuildArrayOutput
}

type AppHostingBuildArray []AppHostingBuildInput

func (AppHostingBuildArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppHostingBuild)(nil)).Elem()
}

func (i AppHostingBuildArray) ToAppHostingBuildArrayOutput() AppHostingBuildArrayOutput {
	return i.ToAppHostingBuildArrayOutputWithContext(context.Background())
}

func (i AppHostingBuildArray) ToAppHostingBuildArrayOutputWithContext(ctx context.Context) AppHostingBuildArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppHostingBuildArrayOutput)
}

// AppHostingBuildMapInput is an input type that accepts AppHostingBuildMap and AppHostingBuildMapOutput values.
// You can construct a concrete instance of `AppHostingBuildMapInput` via:
//
//	AppHostingBuildMap{ "key": AppHostingBuildArgs{...} }
type AppHostingBuildMapInput interface {
	pulumi.Input

	ToAppHostingBuildMapOutput() AppHostingBuildMapOutput
	ToAppHostingBuildMapOutputWithContext(context.Context) AppHostingBuildMapOutput
}

type AppHostingBuildMap map[string]AppHostingBuildInput

func (AppHostingBuildMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppHostingBuild)(nil)).Elem()
}

func (i AppHostingBuildMap) ToAppHostingBuildMapOutput() AppHostingBuildMapOutput {
	return i.ToAppHostingBuildMapOutputWithContext(context.Background())
}

func (i AppHostingBuildMap) ToAppHostingBuildMapOutputWithContext(ctx context.Context) AppHostingBuildMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppHostingBuildMapOutput)
}

type AppHostingBuildOutput struct{ *pulumi.OutputState }

func (AppHostingBuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppHostingBuild)(nil)).Elem()
}

func (o AppHostingBuildOutput) ToAppHostingBuildOutput() AppHostingBuildOutput {
	return o
}

func (o AppHostingBuildOutput) ToAppHostingBuildOutputWithContext(ctx context.Context) AppHostingBuildOutput {
	return o
}

// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
// should be preserved when modifying objects. **Note**: This field is non-authoritative, and will only manage the
// annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
// present on the resource.
func (o AppHostingBuildOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// The ID of the Backend that this Build applies to
func (o AppHostingBuildOutput) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringOutput { return v.Backend }).(pulumi.StringOutput)
}

// The user-specified ID of the build being created.
func (o AppHostingBuildOutput) BuildId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringOutput { return v.BuildId }).(pulumi.StringOutput)
}

// The location of the [Cloud Build
// logs](https://cloud.google.com/build/docs/view-build-results) for the build
// process.
func (o AppHostingBuildOutput) BuildLogsUri() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringOutput { return v.BuildLogsUri }).(pulumi.StringOutput)
}

// Time at which the build was created.
func (o AppHostingBuildOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Human-readable name. 63 character limit.
func (o AppHostingBuildOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o AppHostingBuildOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o AppHostingBuildOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The environment name of the backend when this build was created.
func (o AppHostingBuildOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The source of the error for the build, if in a `FAILED` state.
// Possible values:
// CLOUD_BUILD
// CLOUD_RUN
func (o AppHostingBuildOutput) ErrorSource() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringOutput { return v.ErrorSource }).(pulumi.StringOutput)
}

// The `Status` type defines a logical error model that is suitable for
// different programming environments, including REST APIs and RPC APIs. It is
// used by [gRPC](https://github.com/grpc). Each `Status` message contains
// three pieces of data: error code, error message, and error details.
// You can find out more about this error model and how to work with it in the
// [API Design Guide](https://cloud.google.com/apis/design/errors).
// Structure is documented below.
func (o AppHostingBuildOutput) Errors() AppHostingBuildErrorArrayOutput {
	return o.ApplyT(func(v *AppHostingBuild) AppHostingBuildErrorArrayOutput { return v.Errors }).(AppHostingBuildErrorArrayOutput)
}

// Server-computed checksum based on other values; may be sent
// on update or delete to ensure operation is done on expected resource.
func (o AppHostingBuildOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The Artifact Registry
// [container
// image](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages)
// URI, used by the Cloud Run
// [`revision`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services.revisions)
// for this build.
func (o AppHostingBuildOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringOutput { return v.Image }).(pulumi.StringOutput)
}

// Unstructured key value map that can be used to organize and categorize objects. **Note**: This field is
// non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
// 'effective_labels' for all of the labels present on the resource.
func (o AppHostingBuildOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The location of the Backend that this Build applies to
func (o AppHostingBuildOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name of the build.
// Format:
// `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
func (o AppHostingBuildOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AppHostingBuildOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o AppHostingBuildOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The source for the build.
// Structure is documented below.
func (o AppHostingBuildOutput) Source() AppHostingBuildSourceOutput {
	return o.ApplyT(func(v *AppHostingBuild) AppHostingBuildSourceOutput { return v.Source }).(AppHostingBuildSourceOutput)
}

// The state of the build.
// Possible values:
// BUILDING
// BUILT
// DEPLOYING
// READY
// FAILED
func (o AppHostingBuildOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// System-assigned, unique identifier.
func (o AppHostingBuildOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time at which the build was last updated.
func (o AppHostingBuildOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBuild) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AppHostingBuildArrayOutput struct{ *pulumi.OutputState }

func (AppHostingBuildArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppHostingBuild)(nil)).Elem()
}

func (o AppHostingBuildArrayOutput) ToAppHostingBuildArrayOutput() AppHostingBuildArrayOutput {
	return o
}

func (o AppHostingBuildArrayOutput) ToAppHostingBuildArrayOutputWithContext(ctx context.Context) AppHostingBuildArrayOutput {
	return o
}

func (o AppHostingBuildArrayOutput) Index(i pulumi.IntInput) AppHostingBuildOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppHostingBuild {
		return vs[0].([]*AppHostingBuild)[vs[1].(int)]
	}).(AppHostingBuildOutput)
}

type AppHostingBuildMapOutput struct{ *pulumi.OutputState }

func (AppHostingBuildMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppHostingBuild)(nil)).Elem()
}

func (o AppHostingBuildMapOutput) ToAppHostingBuildMapOutput() AppHostingBuildMapOutput {
	return o
}

func (o AppHostingBuildMapOutput) ToAppHostingBuildMapOutputWithContext(ctx context.Context) AppHostingBuildMapOutput {
	return o
}

func (o AppHostingBuildMapOutput) MapIndex(k pulumi.StringInput) AppHostingBuildOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppHostingBuild {
		return vs[0].(map[string]*AppHostingBuild)[vs[1].(string)]
	}).(AppHostingBuildOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppHostingBuildInput)(nil)).Elem(), &AppHostingBuild{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppHostingBuildArrayInput)(nil)).Elem(), AppHostingBuildArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppHostingBuildMapInput)(nil)).Elem(), AppHostingBuildMap{})
	pulumi.RegisterOutputType(AppHostingBuildOutput{})
	pulumi.RegisterOutputType(AppHostingBuildArrayOutput{})
	pulumi.RegisterOutputType(AppHostingBuildMapOutput{})
}
