// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A domain name that is associated with a backend.
//
// ## Example Usage
//
// ### Firebase App Hosting Default Domain Minimal
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
//				Project:                   pulumi.String("my-project-name"),
//				AccountId:                 pulumi.String("service-account"),
//				DisplayName:               pulumi.String("Firebase App Hosting compute service account"),
//				CreateIgnoreAlreadyExists: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAppHostingBackend, err := firebase.NewAppHostingBackend(ctx, "example", &firebase.AppHostingBackendArgs{
//				Project:         pulumi.String("my-project-name"),
//				Location:        pulumi.String("us-central1"),
//				BackendId:       pulumi.String("dd-mini"),
//				AppId:           pulumi.String("1:0000000000:web:674cde32020e16fbce9dbd"),
//				ServingLocality: pulumi.String("GLOBAL_ACCESS"),
//				ServiceAccount:  serviceAccount.Email,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppHostingDefaultDomain(ctx, "example", &firebase.AppHostingDefaultDomainArgs{
//				Project:  exampleAppHostingBackend.Project,
//				Location: exampleAppHostingBackend.Location,
//				Backend:  exampleAppHostingBackend.BackendId,
//				DomainId: exampleAppHostingBackend.Uri,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebase App Hosting Default Domain Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
//				Project:                   pulumi.String("my-project-name"),
//				AccountId:                 pulumi.String("service-account"),
//				DisplayName:               pulumi.String("Firebase App Hosting compute service account"),
//				CreateIgnoreAlreadyExists: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAppHostingBackend, err := firebase.NewAppHostingBackend(ctx, "example", &firebase.AppHostingBackendArgs{
//				Project:         pulumi.String("my-project-name"),
//				Location:        pulumi.String("us-central1"),
//				BackendId:       pulumi.String("dd-full"),
//				AppId:           pulumi.String("1:0000000000:web:674cde32020e16fbce9dbd"),
//				ServingLocality: pulumi.String("GLOBAL_ACCESS"),
//				ServiceAccount:  serviceAccount.Email,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppHostingDefaultDomain(ctx, "example", &firebase.AppHostingDefaultDomainArgs{
//				Project:  exampleAppHostingBackend.Project,
//				Location: exampleAppHostingBackend.Location,
//				Backend:  exampleAppHostingBackend.BackendId,
//				DomainId: exampleAppHostingBackend.Uri,
//				Disabled: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebase App Hosting Default Domain Disabled
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
//				Project:                   pulumi.String("my-project-name"),
//				AccountId:                 pulumi.String("service-account"),
//				DisplayName:               pulumi.String("Firebase App Hosting compute service account"),
//				CreateIgnoreAlreadyExists: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAppHostingBackend, err := firebase.NewAppHostingBackend(ctx, "example", &firebase.AppHostingBackendArgs{
//				Project:         pulumi.String("my-project-name"),
//				Location:        pulumi.String("us-central1"),
//				BackendId:       pulumi.String("dd-disabled"),
//				AppId:           pulumi.String("1:0000000000:web:674cde32020e16fbce9dbd"),
//				ServingLocality: pulumi.String("GLOBAL_ACCESS"),
//				ServiceAccount:  serviceAccount.Email,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppHostingDefaultDomain(ctx, "example", &firebase.AppHostingDefaultDomainArgs{
//				Project:  exampleAppHostingBackend.Project,
//				Location: exampleAppHostingBackend.Location,
//				Backend:  exampleAppHostingBackend.BackendId,
//				DomainId: exampleAppHostingBackend.Uri,
//				Disabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DefaultDomain can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/backends/{{backend}}/domains/{{domain_id}}`
//
// * `{{project}}/{{location}}/{{backend}}/{{domain_id}}`
//
// * `{{location}}/{{backend}}/{{domain_id}}`
//
// When using the `pulumi import` command, DefaultDomain can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:firebase/appHostingDefaultDomain:AppHostingDefaultDomain default projects/{{project}}/locations/{{location}}/backends/{{backend}}/domains/{{domain_id}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appHostingDefaultDomain:AppHostingDefaultDomain default {{project}}/{{location}}/{{backend}}/{{domain_id}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appHostingDefaultDomain:AppHostingDefaultDomain default {{location}}/{{backend}}/{{domain_id}}
// ```
type AppHostingDefaultDomain struct {
	pulumi.CustomResourceState

	// The ID of the Backend that this Domain is associated with
	Backend pulumi.StringOutput `pulumi:"backend"`
	// Time at which the domain was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Whether the domain is disabled. Defaults to false.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// Id of the domain. For default domain, it should be {{backend}}--{{project_id}}.{{location}}.hosted.app
	//
	// ***
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// Server-computed checksum based on other values; may be sent
	// on update or delete to ensure operation is done on expected resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location of the Backend that this Domain is associated with
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The resource name of the domain, e.g.
	// `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// System-assigned, unique identifier.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time at which the domain was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAppHostingDefaultDomain registers a new resource with the given unique name, arguments, and options.
func NewAppHostingDefaultDomain(ctx *pulumi.Context,
	name string, args *AppHostingDefaultDomainArgs, opts ...pulumi.ResourceOption) (*AppHostingDefaultDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backend == nil {
		return nil, errors.New("invalid value for required argument 'Backend'")
	}
	if args.DomainId == nil {
		return nil, errors.New("invalid value for required argument 'DomainId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppHostingDefaultDomain
	err := ctx.RegisterResource("gcp:firebase/appHostingDefaultDomain:AppHostingDefaultDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppHostingDefaultDomain gets an existing AppHostingDefaultDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppHostingDefaultDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppHostingDefaultDomainState, opts ...pulumi.ResourceOption) (*AppHostingDefaultDomain, error) {
	var resource AppHostingDefaultDomain
	err := ctx.ReadResource("gcp:firebase/appHostingDefaultDomain:AppHostingDefaultDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppHostingDefaultDomain resources.
type appHostingDefaultDomainState struct {
	// The ID of the Backend that this Domain is associated with
	Backend *string `pulumi:"backend"`
	// Time at which the domain was created.
	CreateTime *string `pulumi:"createTime"`
	// Whether the domain is disabled. Defaults to false.
	Disabled *bool `pulumi:"disabled"`
	// Id of the domain. For default domain, it should be {{backend}}--{{project_id}}.{{location}}.hosted.app
	//
	// ***
	DomainId *string `pulumi:"domainId"`
	// Server-computed checksum based on other values; may be sent
	// on update or delete to ensure operation is done on expected resource.
	Etag *string `pulumi:"etag"`
	// The location of the Backend that this Domain is associated with
	Location *string `pulumi:"location"`
	// Identifier. The resource name of the domain, e.g.
	// `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// System-assigned, unique identifier.
	Uid *string `pulumi:"uid"`
	// Time at which the domain was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type AppHostingDefaultDomainState struct {
	// The ID of the Backend that this Domain is associated with
	Backend pulumi.StringPtrInput
	// Time at which the domain was created.
	CreateTime pulumi.StringPtrInput
	// Whether the domain is disabled. Defaults to false.
	Disabled pulumi.BoolPtrInput
	// Id of the domain. For default domain, it should be {{backend}}--{{project_id}}.{{location}}.hosted.app
	//
	// ***
	DomainId pulumi.StringPtrInput
	// Server-computed checksum based on other values; may be sent
	// on update or delete to ensure operation is done on expected resource.
	Etag pulumi.StringPtrInput
	// The location of the Backend that this Domain is associated with
	Location pulumi.StringPtrInput
	// Identifier. The resource name of the domain, e.g.
	// `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// System-assigned, unique identifier.
	Uid pulumi.StringPtrInput
	// Time at which the domain was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (AppHostingDefaultDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*appHostingDefaultDomainState)(nil)).Elem()
}

type appHostingDefaultDomainArgs struct {
	// The ID of the Backend that this Domain is associated with
	Backend string `pulumi:"backend"`
	// Whether the domain is disabled. Defaults to false.
	Disabled *bool `pulumi:"disabled"`
	// Id of the domain. For default domain, it should be {{backend}}--{{project_id}}.{{location}}.hosted.app
	//
	// ***
	DomainId string `pulumi:"domainId"`
	// The location of the Backend that this Domain is associated with
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a AppHostingDefaultDomain resource.
type AppHostingDefaultDomainArgs struct {
	// The ID of the Backend that this Domain is associated with
	Backend pulumi.StringInput
	// Whether the domain is disabled. Defaults to false.
	Disabled pulumi.BoolPtrInput
	// Id of the domain. For default domain, it should be {{backend}}--{{project_id}}.{{location}}.hosted.app
	//
	// ***
	DomainId pulumi.StringInput
	// The location of the Backend that this Domain is associated with
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (AppHostingDefaultDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appHostingDefaultDomainArgs)(nil)).Elem()
}

type AppHostingDefaultDomainInput interface {
	pulumi.Input

	ToAppHostingDefaultDomainOutput() AppHostingDefaultDomainOutput
	ToAppHostingDefaultDomainOutputWithContext(ctx context.Context) AppHostingDefaultDomainOutput
}

func (*AppHostingDefaultDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**AppHostingDefaultDomain)(nil)).Elem()
}

func (i *AppHostingDefaultDomain) ToAppHostingDefaultDomainOutput() AppHostingDefaultDomainOutput {
	return i.ToAppHostingDefaultDomainOutputWithContext(context.Background())
}

func (i *AppHostingDefaultDomain) ToAppHostingDefaultDomainOutputWithContext(ctx context.Context) AppHostingDefaultDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppHostingDefaultDomainOutput)
}

// AppHostingDefaultDomainArrayInput is an input type that accepts AppHostingDefaultDomainArray and AppHostingDefaultDomainArrayOutput values.
// You can construct a concrete instance of `AppHostingDefaultDomainArrayInput` via:
//
//	AppHostingDefaultDomainArray{ AppHostingDefaultDomainArgs{...} }
type AppHostingDefaultDomainArrayInput interface {
	pulumi.Input

	ToAppHostingDefaultDomainArrayOutput() AppHostingDefaultDomainArrayOutput
	ToAppHostingDefaultDomainArrayOutputWithContext(context.Context) AppHostingDefaultDomainArrayOutput
}

type AppHostingDefaultDomainArray []AppHostingDefaultDomainInput

func (AppHostingDefaultDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppHostingDefaultDomain)(nil)).Elem()
}

func (i AppHostingDefaultDomainArray) ToAppHostingDefaultDomainArrayOutput() AppHostingDefaultDomainArrayOutput {
	return i.ToAppHostingDefaultDomainArrayOutputWithContext(context.Background())
}

func (i AppHostingDefaultDomainArray) ToAppHostingDefaultDomainArrayOutputWithContext(ctx context.Context) AppHostingDefaultDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppHostingDefaultDomainArrayOutput)
}

// AppHostingDefaultDomainMapInput is an input type that accepts AppHostingDefaultDomainMap and AppHostingDefaultDomainMapOutput values.
// You can construct a concrete instance of `AppHostingDefaultDomainMapInput` via:
//
//	AppHostingDefaultDomainMap{ "key": AppHostingDefaultDomainArgs{...} }
type AppHostingDefaultDomainMapInput interface {
	pulumi.Input

	ToAppHostingDefaultDomainMapOutput() AppHostingDefaultDomainMapOutput
	ToAppHostingDefaultDomainMapOutputWithContext(context.Context) AppHostingDefaultDomainMapOutput
}

type AppHostingDefaultDomainMap map[string]AppHostingDefaultDomainInput

func (AppHostingDefaultDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppHostingDefaultDomain)(nil)).Elem()
}

func (i AppHostingDefaultDomainMap) ToAppHostingDefaultDomainMapOutput() AppHostingDefaultDomainMapOutput {
	return i.ToAppHostingDefaultDomainMapOutputWithContext(context.Background())
}

func (i AppHostingDefaultDomainMap) ToAppHostingDefaultDomainMapOutputWithContext(ctx context.Context) AppHostingDefaultDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppHostingDefaultDomainMapOutput)
}

type AppHostingDefaultDomainOutput struct{ *pulumi.OutputState }

func (AppHostingDefaultDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppHostingDefaultDomain)(nil)).Elem()
}

func (o AppHostingDefaultDomainOutput) ToAppHostingDefaultDomainOutput() AppHostingDefaultDomainOutput {
	return o
}

func (o AppHostingDefaultDomainOutput) ToAppHostingDefaultDomainOutputWithContext(ctx context.Context) AppHostingDefaultDomainOutput {
	return o
}

// The ID of the Backend that this Domain is associated with
func (o AppHostingDefaultDomainOutput) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDefaultDomain) pulumi.StringOutput { return v.Backend }).(pulumi.StringOutput)
}

// Time at which the domain was created.
func (o AppHostingDefaultDomainOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDefaultDomain) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Whether the domain is disabled. Defaults to false.
func (o AppHostingDefaultDomainOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AppHostingDefaultDomain) pulumi.BoolOutput { return v.Disabled }).(pulumi.BoolOutput)
}

// Id of the domain. For default domain, it should be {{backend}}--{{project_id}}.{{location}}.hosted.app
//
// ***
func (o AppHostingDefaultDomainOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDefaultDomain) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// Server-computed checksum based on other values; may be sent
// on update or delete to ensure operation is done on expected resource.
func (o AppHostingDefaultDomainOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDefaultDomain) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location of the Backend that this Domain is associated with
func (o AppHostingDefaultDomainOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDefaultDomain) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name of the domain, e.g.
// `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`
func (o AppHostingDefaultDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDefaultDomain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AppHostingDefaultDomainOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDefaultDomain) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// System-assigned, unique identifier.
func (o AppHostingDefaultDomainOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDefaultDomain) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time at which the domain was last updated.
func (o AppHostingDefaultDomainOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDefaultDomain) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AppHostingDefaultDomainArrayOutput struct{ *pulumi.OutputState }

func (AppHostingDefaultDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppHostingDefaultDomain)(nil)).Elem()
}

func (o AppHostingDefaultDomainArrayOutput) ToAppHostingDefaultDomainArrayOutput() AppHostingDefaultDomainArrayOutput {
	return o
}

func (o AppHostingDefaultDomainArrayOutput) ToAppHostingDefaultDomainArrayOutputWithContext(ctx context.Context) AppHostingDefaultDomainArrayOutput {
	return o
}

func (o AppHostingDefaultDomainArrayOutput) Index(i pulumi.IntInput) AppHostingDefaultDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppHostingDefaultDomain {
		return vs[0].([]*AppHostingDefaultDomain)[vs[1].(int)]
	}).(AppHostingDefaultDomainOutput)
}

type AppHostingDefaultDomainMapOutput struct{ *pulumi.OutputState }

func (AppHostingDefaultDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppHostingDefaultDomain)(nil)).Elem()
}

func (o AppHostingDefaultDomainMapOutput) ToAppHostingDefaultDomainMapOutput() AppHostingDefaultDomainMapOutput {
	return o
}

func (o AppHostingDefaultDomainMapOutput) ToAppHostingDefaultDomainMapOutputWithContext(ctx context.Context) AppHostingDefaultDomainMapOutput {
	return o
}

func (o AppHostingDefaultDomainMapOutput) MapIndex(k pulumi.StringInput) AppHostingDefaultDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppHostingDefaultDomain {
		return vs[0].(map[string]*AppHostingDefaultDomain)[vs[1].(string)]
	}).(AppHostingDefaultDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppHostingDefaultDomainInput)(nil)).Elem(), &AppHostingDefaultDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppHostingDefaultDomainArrayInput)(nil)).Elem(), AppHostingDefaultDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppHostingDefaultDomainMapInput)(nil)).Elem(), AppHostingDefaultDomainMap{})
	pulumi.RegisterOutputType(AppHostingDefaultDomainOutput{})
	pulumi.RegisterOutputType(AppHostingDefaultDomainArrayOutput{})
	pulumi.RegisterOutputType(AppHostingDefaultDomainMapOutput{})
}
