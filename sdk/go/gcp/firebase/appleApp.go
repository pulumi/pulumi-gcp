// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firebase

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Firebase Apple App Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/firebase"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firebase.NewAppleApp(ctx, "default", &firebase.AppleAppArgs{
//				Project:     pulumi.String("my-project-name"),
//				DisplayName: pulumi.String("Display Name Basic"),
//				BundleId:    pulumi.String("apple.app.12345"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebase Apple App Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/firebase"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firebase.NewAppleApp(ctx, "full", &firebase.AppleAppArgs{
//				Project:     pulumi.String("my-project-name"),
//				DisplayName: pulumi.String("Display Name Full"),
//				BundleId:    pulumi.String("apple.app.12345"),
//				AppStoreId:  pulumi.String("12345"),
//				TeamId:      pulumi.String("9987654321"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # AppleApp can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:firebase/appleApp:AppleApp default projects/{{project}}/iosApps/{{appId}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:firebase/appleApp:AppleApp default {{project}}/{{appId}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:firebase/appleApp:AppleApp default iosApps/{{appId}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:firebase/appleApp:AppleApp default {{appId}}
//
// ```
type AppleApp struct {
	pulumi.CustomResourceState

	// The globally unique, Firebase-assigned identifier of the App.
	// This identifier should be treated as an opaque token, as the data format is not specified.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
	AppStoreId pulumi.StringPtrOutput `pulumi:"appStoreId"`
	// The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
	BundleId pulumi.StringPtrOutput `pulumi:"bundleId"`
	// (Optional) Set to 'ABANDON' to allow the AppleApp to be untracked from terraform state rather than deleted upon
	// 'terraform destroy'. This is useful because the AppleApp may be serving traffic. Set to 'DELETE' to delete the AppleApp.
	// Default to 'DELETE'.
	DeletionPolicy pulumi.StringPtrOutput `pulumi:"deletionPolicy"`
	// The user-assigned display name of the App.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The fully qualified resource name of the App, for example:
	// projects/projectId/iosApps/appId
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The Apple Developer Team ID associated with the App in the App Store.
	TeamId pulumi.StringPtrOutput `pulumi:"teamId"`
}

// NewAppleApp registers a new resource with the given unique name, arguments, and options.
func NewAppleApp(ctx *pulumi.Context,
	name string, args *AppleAppArgs, opts ...pulumi.ResourceOption) (*AppleApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	var resource AppleApp
	err := ctx.RegisterResource("gcp:firebase/appleApp:AppleApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppleApp gets an existing AppleApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppleApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppleAppState, opts ...pulumi.ResourceOption) (*AppleApp, error) {
	var resource AppleApp
	err := ctx.ReadResource("gcp:firebase/appleApp:AppleApp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppleApp resources.
type appleAppState struct {
	// The globally unique, Firebase-assigned identifier of the App.
	// This identifier should be treated as an opaque token, as the data format is not specified.
	AppId *string `pulumi:"appId"`
	// The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
	AppStoreId *string `pulumi:"appStoreId"`
	// The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
	BundleId *string `pulumi:"bundleId"`
	// (Optional) Set to 'ABANDON' to allow the AppleApp to be untracked from terraform state rather than deleted upon
	// 'terraform destroy'. This is useful because the AppleApp may be serving traffic. Set to 'DELETE' to delete the AppleApp.
	// Default to 'DELETE'.
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// The user-assigned display name of the App.
	DisplayName *string `pulumi:"displayName"`
	// The fully qualified resource name of the App, for example:
	// projects/projectId/iosApps/appId
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The Apple Developer Team ID associated with the App in the App Store.
	TeamId *string `pulumi:"teamId"`
}

type AppleAppState struct {
	// The globally unique, Firebase-assigned identifier of the App.
	// This identifier should be treated as an opaque token, as the data format is not specified.
	AppId pulumi.StringPtrInput
	// The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
	AppStoreId pulumi.StringPtrInput
	// The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
	BundleId pulumi.StringPtrInput
	// (Optional) Set to 'ABANDON' to allow the AppleApp to be untracked from terraform state rather than deleted upon
	// 'terraform destroy'. This is useful because the AppleApp may be serving traffic. Set to 'DELETE' to delete the AppleApp.
	// Default to 'DELETE'.
	DeletionPolicy pulumi.StringPtrInput
	// The user-assigned display name of the App.
	DisplayName pulumi.StringPtrInput
	// The fully qualified resource name of the App, for example:
	// projects/projectId/iosApps/appId
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The Apple Developer Team ID associated with the App in the App Store.
	TeamId pulumi.StringPtrInput
}

func (AppleAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*appleAppState)(nil)).Elem()
}

type appleAppArgs struct {
	// The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
	AppStoreId *string `pulumi:"appStoreId"`
	// The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
	BundleId *string `pulumi:"bundleId"`
	// (Optional) Set to 'ABANDON' to allow the AppleApp to be untracked from terraform state rather than deleted upon
	// 'terraform destroy'. This is useful because the AppleApp may be serving traffic. Set to 'DELETE' to delete the AppleApp.
	// Default to 'DELETE'.
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// The user-assigned display name of the App.
	DisplayName string `pulumi:"displayName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The Apple Developer Team ID associated with the App in the App Store.
	TeamId *string `pulumi:"teamId"`
}

// The set of arguments for constructing a AppleApp resource.
type AppleAppArgs struct {
	// The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
	AppStoreId pulumi.StringPtrInput
	// The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
	BundleId pulumi.StringPtrInput
	// (Optional) Set to 'ABANDON' to allow the AppleApp to be untracked from terraform state rather than deleted upon
	// 'terraform destroy'. This is useful because the AppleApp may be serving traffic. Set to 'DELETE' to delete the AppleApp.
	// Default to 'DELETE'.
	DeletionPolicy pulumi.StringPtrInput
	// The user-assigned display name of the App.
	DisplayName pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The Apple Developer Team ID associated with the App in the App Store.
	TeamId pulumi.StringPtrInput
}

func (AppleAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appleAppArgs)(nil)).Elem()
}

type AppleAppInput interface {
	pulumi.Input

	ToAppleAppOutput() AppleAppOutput
	ToAppleAppOutputWithContext(ctx context.Context) AppleAppOutput
}

func (*AppleApp) ElementType() reflect.Type {
	return reflect.TypeOf((**AppleApp)(nil)).Elem()
}

func (i *AppleApp) ToAppleAppOutput() AppleAppOutput {
	return i.ToAppleAppOutputWithContext(context.Background())
}

func (i *AppleApp) ToAppleAppOutputWithContext(ctx context.Context) AppleAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppleAppOutput)
}

// AppleAppArrayInput is an input type that accepts AppleAppArray and AppleAppArrayOutput values.
// You can construct a concrete instance of `AppleAppArrayInput` via:
//
//	AppleAppArray{ AppleAppArgs{...} }
type AppleAppArrayInput interface {
	pulumi.Input

	ToAppleAppArrayOutput() AppleAppArrayOutput
	ToAppleAppArrayOutputWithContext(context.Context) AppleAppArrayOutput
}

type AppleAppArray []AppleAppInput

func (AppleAppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppleApp)(nil)).Elem()
}

func (i AppleAppArray) ToAppleAppArrayOutput() AppleAppArrayOutput {
	return i.ToAppleAppArrayOutputWithContext(context.Background())
}

func (i AppleAppArray) ToAppleAppArrayOutputWithContext(ctx context.Context) AppleAppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppleAppArrayOutput)
}

// AppleAppMapInput is an input type that accepts AppleAppMap and AppleAppMapOutput values.
// You can construct a concrete instance of `AppleAppMapInput` via:
//
//	AppleAppMap{ "key": AppleAppArgs{...} }
type AppleAppMapInput interface {
	pulumi.Input

	ToAppleAppMapOutput() AppleAppMapOutput
	ToAppleAppMapOutputWithContext(context.Context) AppleAppMapOutput
}

type AppleAppMap map[string]AppleAppInput

func (AppleAppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppleApp)(nil)).Elem()
}

func (i AppleAppMap) ToAppleAppMapOutput() AppleAppMapOutput {
	return i.ToAppleAppMapOutputWithContext(context.Background())
}

func (i AppleAppMap) ToAppleAppMapOutputWithContext(ctx context.Context) AppleAppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppleAppMapOutput)
}

type AppleAppOutput struct{ *pulumi.OutputState }

func (AppleAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppleApp)(nil)).Elem()
}

func (o AppleAppOutput) ToAppleAppOutput() AppleAppOutput {
	return o
}

func (o AppleAppOutput) ToAppleAppOutputWithContext(ctx context.Context) AppleAppOutput {
	return o
}

// The globally unique, Firebase-assigned identifier of the App.
// This identifier should be treated as an opaque token, as the data format is not specified.
func (o AppleAppOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppleApp) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
func (o AppleAppOutput) AppStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppleApp) pulumi.StringPtrOutput { return v.AppStoreId }).(pulumi.StringPtrOutput)
}

// The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
func (o AppleAppOutput) BundleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppleApp) pulumi.StringPtrOutput { return v.BundleId }).(pulumi.StringPtrOutput)
}

// (Optional) Set to 'ABANDON' to allow the AppleApp to be untracked from terraform state rather than deleted upon
// 'terraform destroy'. This is useful because the AppleApp may be serving traffic. Set to 'DELETE' to delete the AppleApp.
// Default to 'DELETE'.
func (o AppleAppOutput) DeletionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppleApp) pulumi.StringPtrOutput { return v.DeletionPolicy }).(pulumi.StringPtrOutput)
}

// The user-assigned display name of the App.
func (o AppleAppOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *AppleApp) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The fully qualified resource name of the App, for example:
// projects/projectId/iosApps/appId
func (o AppleAppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppleApp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AppleAppOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AppleApp) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The Apple Developer Team ID associated with the App in the App Store.
func (o AppleAppOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppleApp) pulumi.StringPtrOutput { return v.TeamId }).(pulumi.StringPtrOutput)
}

type AppleAppArrayOutput struct{ *pulumi.OutputState }

func (AppleAppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppleApp)(nil)).Elem()
}

func (o AppleAppArrayOutput) ToAppleAppArrayOutput() AppleAppArrayOutput {
	return o
}

func (o AppleAppArrayOutput) ToAppleAppArrayOutputWithContext(ctx context.Context) AppleAppArrayOutput {
	return o
}

func (o AppleAppArrayOutput) Index(i pulumi.IntInput) AppleAppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppleApp {
		return vs[0].([]*AppleApp)[vs[1].(int)]
	}).(AppleAppOutput)
}

type AppleAppMapOutput struct{ *pulumi.OutputState }

func (AppleAppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppleApp)(nil)).Elem()
}

func (o AppleAppMapOutput) ToAppleAppMapOutput() AppleAppMapOutput {
	return o
}

func (o AppleAppMapOutput) ToAppleAppMapOutputWithContext(ctx context.Context) AppleAppMapOutput {
	return o
}

func (o AppleAppMapOutput) MapIndex(k pulumi.StringInput) AppleAppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppleApp {
		return vs[0].(map[string]*AppleApp)[vs[1].(string)]
	}).(AppleAppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppleAppInput)(nil)).Elem(), &AppleApp{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppleAppArrayInput)(nil)).Elem(), AppleAppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppleAppMapInput)(nil)).Elem(), AppleAppMap{})
	pulumi.RegisterOutputType(AppleAppOutput{})
	pulumi.RegisterOutputType(AppleAppArrayOutput{})
	pulumi.RegisterOutputType(AppleAppMapOutput{})
}
