// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A Google Cloud Firebase web application instance
//
// To get more information about WebApp, see:
//
// * [API documentation](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps)
// * How-to Guides
//   - [Official Documentation](https://firebase.google.com/)
//
// ## Example Usage
// ### Firebase Web App Basic
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultProject, err := organizations.NewProject(ctx, "defaultProject", &organizations.ProjectArgs{
//				ProjectId: pulumi.String("my-project"),
//				OrgId:     pulumi.String("123456789"),
//				Labels: pulumi.StringMap{
//					"firebase": pulumi.String("enabled"),
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewProject(ctx, "defaultFirebase/projectProject", &firebase.ProjectArgs{
//				Project: defaultProject.ProjectId,
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			basicWebApp, err := firebase.NewWebApp(ctx, "basicWebApp", &firebase.WebAppArgs{
//				Project:        defaultProject.ProjectId,
//				DisplayName:    pulumi.String("Display Name Basic"),
//				DeletionPolicy: pulumi.String("DELETE"),
//			}, pulumi.Provider(google_beta), pulumi.DependsOn([]pulumi.Resource{
//				defaultFirebase / projectProject,
//			}))
//			if err != nil {
//				return err
//			}
//			basicWebAppConfig := firebase.GetWebAppConfigOutput(ctx, firebase.GetWebAppConfigOutputArgs{
//				WebAppId: basicWebApp.AppId,
//			}, nil)
//			defaultBucket, err := storage.NewBucket(ctx, "defaultBucket", &storage.BucketArgs{
//				Location: pulumi.String("US"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewBucketObject(ctx, "defaultBucketObject", &storage.BucketObjectArgs{
//				Bucket: defaultBucket.Name,
//				Content: pulumi.All(basicWebApp.AppId, basicWebAppConfig, basicWebAppConfig, "TODO: Lookup", "TODO: Lookup", "TODO: Lookup", "TODO: Lookup").ApplyT(func(_args []interface{}) (string, error) {
//					appId := _args[0].(string)
//					basicWebAppConfig := _args[1].(firebase.GetWebAppConfigResult)
//					basicWebAppConfig1 := _args[2].(firebase.GetWebAppConfigResult)
//					s := _args[3].(*string)
//					s1 := _args[4].(*string)
//					s2 := _args[5].(*string)
//					s3 := _args[6].(*string)
//					var _zero string
//					tmpJSON0, err := json.Marshal(map[string]interface{}{
//						"appId":             appId,
//						"apiKey":            basicWebAppConfig.ApiKey,
//						"authDomain":        basicWebAppConfig1.AuthDomain,
//						"databaseURL":       s,
//						"storageBucket":     s1,
//						"messagingSenderId": s2,
//						"measurementId":     s3,
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json0 := string(tmpJSON0)
//					return json0, nil
//				}).(pulumi.StringOutput),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebase Web App Custom Api Key
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			web, err := projects.NewApiKey(ctx, "web", &projects.ApiKeyArgs{
//				Project:     pulumi.String("my-project-name"),
//				DisplayName: pulumi.String("Display Name"),
//				Restrictions: &projects.ApiKeyRestrictionsArgs{
//					BrowserKeyRestrictions: &projects.ApiKeyRestrictionsBrowserKeyRestrictionsArgs{
//						AllowedReferrers: pulumi.StringArray{
//							pulumi.String("*"),
//						},
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewWebApp(ctx, "default", &firebase.WebAppArgs{
//				Project:        pulumi.String("my-project-name"),
//				DisplayName:    pulumi.String("Display Name"),
//				ApiKeyId:       web.Uid,
//				DeletionPolicy: pulumi.String("DELETE"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # WebApp can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:firebase/webApp:WebApp default {{project}} projects/{{project}}/webApps/{{app_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:firebase/webApp:WebApp default projects/{{project}}/webApps/{{app_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:firebase/webApp:WebApp default {{project}}/{{project}}/{{app_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:firebase/webApp:WebApp default webApps/{{app_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:firebase/webApp:WebApp default {{app_id}}
//
// ```
type WebApp struct {
	pulumi.CustomResourceState

	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the WebApp.
	// If apiKeyId is not set during creation, then Firebase automatically associates an apiKeyId with the WebApp.
	// This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
	ApiKeyId pulumi.StringOutput `pulumi:"apiKeyId"`
	// The globally unique, Firebase-assigned identifier of the App.
	// This identifier should be treated as an opaque token, as the data format is not specified.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The URLs where the `WebApp` is hosted.
	AppUrls pulumi.StringArrayOutput `pulumi:"appUrls"`
	// Set to 'ABANDON' to allow the WebApp to be untracked from terraform state rather than deleted upon 'terraform destroy'.
	// This is useful becaue the WebApp may be serving traffic. Set to 'DELETE' to delete the WebApp. Default to 'ABANDON'
	DeletionPolicy pulumi.StringPtrOutput `pulumi:"deletionPolicy"`
	// The user-assigned display name of the App.
	//
	// ***
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The fully qualified resource name of the App, for example:
	// projects/projectId/webApps/appId
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewWebApp registers a new resource with the given unique name, arguments, and options.
func NewWebApp(ctx *pulumi.Context,
	name string, args *WebAppArgs, opts ...pulumi.ResourceOption) (*WebApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebApp
	err := ctx.RegisterResource("gcp:firebase/webApp:WebApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebApp gets an existing WebApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebAppState, opts ...pulumi.ResourceOption) (*WebApp, error) {
	var resource WebApp
	err := ctx.ReadResource("gcp:firebase/webApp:WebApp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebApp resources.
type webAppState struct {
	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the WebApp.
	// If apiKeyId is not set during creation, then Firebase automatically associates an apiKeyId with the WebApp.
	// This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
	ApiKeyId *string `pulumi:"apiKeyId"`
	// The globally unique, Firebase-assigned identifier of the App.
	// This identifier should be treated as an opaque token, as the data format is not specified.
	AppId *string `pulumi:"appId"`
	// The URLs where the `WebApp` is hosted.
	AppUrls []string `pulumi:"appUrls"`
	// Set to 'ABANDON' to allow the WebApp to be untracked from terraform state rather than deleted upon 'terraform destroy'.
	// This is useful becaue the WebApp may be serving traffic. Set to 'DELETE' to delete the WebApp. Default to 'ABANDON'
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// The user-assigned display name of the App.
	//
	// ***
	DisplayName *string `pulumi:"displayName"`
	// The fully qualified resource name of the App, for example:
	// projects/projectId/webApps/appId
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

type WebAppState struct {
	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the WebApp.
	// If apiKeyId is not set during creation, then Firebase automatically associates an apiKeyId with the WebApp.
	// This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
	ApiKeyId pulumi.StringPtrInput
	// The globally unique, Firebase-assigned identifier of the App.
	// This identifier should be treated as an opaque token, as the data format is not specified.
	AppId pulumi.StringPtrInput
	// The URLs where the `WebApp` is hosted.
	AppUrls pulumi.StringArrayInput
	// Set to 'ABANDON' to allow the WebApp to be untracked from terraform state rather than deleted upon 'terraform destroy'.
	// This is useful becaue the WebApp may be serving traffic. Set to 'DELETE' to delete the WebApp. Default to 'ABANDON'
	DeletionPolicy pulumi.StringPtrInput
	// The user-assigned display name of the App.
	//
	// ***
	DisplayName pulumi.StringPtrInput
	// The fully qualified resource name of the App, for example:
	// projects/projectId/webApps/appId
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (WebAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppState)(nil)).Elem()
}

type webAppArgs struct {
	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the WebApp.
	// If apiKeyId is not set during creation, then Firebase automatically associates an apiKeyId with the WebApp.
	// This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
	ApiKeyId *string `pulumi:"apiKeyId"`
	// Set to 'ABANDON' to allow the WebApp to be untracked from terraform state rather than deleted upon 'terraform destroy'.
	// This is useful becaue the WebApp may be serving traffic. Set to 'DELETE' to delete the WebApp. Default to 'ABANDON'
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// The user-assigned display name of the App.
	//
	// ***
	DisplayName string `pulumi:"displayName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a WebApp resource.
type WebAppArgs struct {
	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the WebApp.
	// If apiKeyId is not set during creation, then Firebase automatically associates an apiKeyId with the WebApp.
	// This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
	ApiKeyId pulumi.StringPtrInput
	// Set to 'ABANDON' to allow the WebApp to be untracked from terraform state rather than deleted upon 'terraform destroy'.
	// This is useful becaue the WebApp may be serving traffic. Set to 'DELETE' to delete the WebApp. Default to 'ABANDON'
	DeletionPolicy pulumi.StringPtrInput
	// The user-assigned display name of the App.
	//
	// ***
	DisplayName pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (WebAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppArgs)(nil)).Elem()
}

type WebAppInput interface {
	pulumi.Input

	ToWebAppOutput() WebAppOutput
	ToWebAppOutputWithContext(ctx context.Context) WebAppOutput
}

func (*WebApp) ElementType() reflect.Type {
	return reflect.TypeOf((**WebApp)(nil)).Elem()
}

func (i *WebApp) ToWebAppOutput() WebAppOutput {
	return i.ToWebAppOutputWithContext(context.Background())
}

func (i *WebApp) ToWebAppOutputWithContext(ctx context.Context) WebAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppOutput)
}

func (i *WebApp) ToOutput(ctx context.Context) pulumix.Output[*WebApp] {
	return pulumix.Output[*WebApp]{
		OutputState: i.ToWebAppOutputWithContext(ctx).OutputState,
	}
}

// WebAppArrayInput is an input type that accepts WebAppArray and WebAppArrayOutput values.
// You can construct a concrete instance of `WebAppArrayInput` via:
//
//	WebAppArray{ WebAppArgs{...} }
type WebAppArrayInput interface {
	pulumi.Input

	ToWebAppArrayOutput() WebAppArrayOutput
	ToWebAppArrayOutputWithContext(context.Context) WebAppArrayOutput
}

type WebAppArray []WebAppInput

func (WebAppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebApp)(nil)).Elem()
}

func (i WebAppArray) ToWebAppArrayOutput() WebAppArrayOutput {
	return i.ToWebAppArrayOutputWithContext(context.Background())
}

func (i WebAppArray) ToWebAppArrayOutputWithContext(ctx context.Context) WebAppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppArrayOutput)
}

func (i WebAppArray) ToOutput(ctx context.Context) pulumix.Output[[]*WebApp] {
	return pulumix.Output[[]*WebApp]{
		OutputState: i.ToWebAppArrayOutputWithContext(ctx).OutputState,
	}
}

// WebAppMapInput is an input type that accepts WebAppMap and WebAppMapOutput values.
// You can construct a concrete instance of `WebAppMapInput` via:
//
//	WebAppMap{ "key": WebAppArgs{...} }
type WebAppMapInput interface {
	pulumi.Input

	ToWebAppMapOutput() WebAppMapOutput
	ToWebAppMapOutputWithContext(context.Context) WebAppMapOutput
}

type WebAppMap map[string]WebAppInput

func (WebAppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebApp)(nil)).Elem()
}

func (i WebAppMap) ToWebAppMapOutput() WebAppMapOutput {
	return i.ToWebAppMapOutputWithContext(context.Background())
}

func (i WebAppMap) ToWebAppMapOutputWithContext(ctx context.Context) WebAppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppMapOutput)
}

func (i WebAppMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WebApp] {
	return pulumix.Output[map[string]*WebApp]{
		OutputState: i.ToWebAppMapOutputWithContext(ctx).OutputState,
	}
}

type WebAppOutput struct{ *pulumi.OutputState }

func (WebAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebApp)(nil)).Elem()
}

func (o WebAppOutput) ToWebAppOutput() WebAppOutput {
	return o
}

func (o WebAppOutput) ToWebAppOutputWithContext(ctx context.Context) WebAppOutput {
	return o
}

func (o WebAppOutput) ToOutput(ctx context.Context) pulumix.Output[*WebApp] {
	return pulumix.Output[*WebApp]{
		OutputState: o.OutputState,
	}
}

// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the WebApp.
// If apiKeyId is not set during creation, then Firebase automatically associates an apiKeyId with the WebApp.
// This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
func (o WebAppOutput) ApiKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *WebApp) pulumi.StringOutput { return v.ApiKeyId }).(pulumi.StringOutput)
}

// The globally unique, Firebase-assigned identifier of the App.
// This identifier should be treated as an opaque token, as the data format is not specified.
func (o WebAppOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *WebApp) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The URLs where the `WebApp` is hosted.
func (o WebAppOutput) AppUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WebApp) pulumi.StringArrayOutput { return v.AppUrls }).(pulumi.StringArrayOutput)
}

// Set to 'ABANDON' to allow the WebApp to be untracked from terraform state rather than deleted upon 'terraform destroy'.
// This is useful becaue the WebApp may be serving traffic. Set to 'DELETE' to delete the WebApp. Default to 'ABANDON'
func (o WebAppOutput) DeletionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebApp) pulumi.StringPtrOutput { return v.DeletionPolicy }).(pulumi.StringPtrOutput)
}

// The user-assigned display name of the App.
//
// ***
func (o WebAppOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *WebApp) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The fully qualified resource name of the App, for example:
// projects/projectId/webApps/appId
func (o WebAppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WebApp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o WebAppOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WebApp) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type WebAppArrayOutput struct{ *pulumi.OutputState }

func (WebAppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebApp)(nil)).Elem()
}

func (o WebAppArrayOutput) ToWebAppArrayOutput() WebAppArrayOutput {
	return o
}

func (o WebAppArrayOutput) ToWebAppArrayOutputWithContext(ctx context.Context) WebAppArrayOutput {
	return o
}

func (o WebAppArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WebApp] {
	return pulumix.Output[[]*WebApp]{
		OutputState: o.OutputState,
	}
}

func (o WebAppArrayOutput) Index(i pulumi.IntInput) WebAppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebApp {
		return vs[0].([]*WebApp)[vs[1].(int)]
	}).(WebAppOutput)
}

type WebAppMapOutput struct{ *pulumi.OutputState }

func (WebAppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebApp)(nil)).Elem()
}

func (o WebAppMapOutput) ToWebAppMapOutput() WebAppMapOutput {
	return o
}

func (o WebAppMapOutput) ToWebAppMapOutputWithContext(ctx context.Context) WebAppMapOutput {
	return o
}

func (o WebAppMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WebApp] {
	return pulumix.Output[map[string]*WebApp]{
		OutputState: o.OutputState,
	}
}

func (o WebAppMapOutput) MapIndex(k pulumi.StringInput) WebAppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebApp {
		return vs[0].(map[string]*WebApp)[vs[1].(string)]
	}).(WebAppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppInput)(nil)).Elem(), &WebApp{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppArrayInput)(nil)).Elem(), WebAppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppMapInput)(nil)).Elem(), WebAppMap{})
	pulumi.RegisterOutputType(WebAppOutput{})
	pulumi.RegisterOutputType(WebAppArrayOutput{})
	pulumi.RegisterOutputType(WebAppMapOutput{})
}
