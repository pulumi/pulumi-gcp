// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Firebasehosting Version Redirect
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/firebase"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultHostingSite, err := firebase.NewHostingSite(ctx, "defaultHostingSite", &firebase.HostingSiteArgs{
//				Project: pulumi.String("my-project-name"),
//				SiteId:  pulumi.String("site-id"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultHostingVersion, err := firebase.NewHostingVersion(ctx, "defaultHostingVersion", &firebase.HostingVersionArgs{
//				SiteId: defaultHostingSite.SiteId,
//				Config: &firebase.HostingVersionConfigArgs{
//					Redirects: firebase.HostingVersionConfigRedirectArray{
//						&firebase.HostingVersionConfigRedirectArgs{
//							Glob:       pulumi.String("/google/**"),
//							StatusCode: pulumi.Int(302),
//							Location:   pulumi.String("https://www.google.com"),
//						},
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewHostingRelease(ctx, "defaultHostingRelease", &firebase.HostingReleaseArgs{
//				SiteId:      defaultHostingSite.SiteId,
//				VersionName: defaultHostingVersion.Name,
//				Message:     pulumi.String("Redirect to Google"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebasehosting Version Cloud Run
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/firebase"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultHostingSite, err := firebase.NewHostingSite(ctx, "defaultHostingSite", &firebase.HostingSiteArgs{
//				Project: pulumi.String("my-project-name"),
//				SiteId:  pulumi.String("site-id"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultService, err := cloudrunv2.NewService(ctx, "defaultService", &cloudrunv2.ServiceArgs{
//				Project:  pulumi.String("my-project-name"),
//				Location: pulumi.String("us-central1"),
//				Ingress:  pulumi.String("INGRESS_TRAFFIC_ALL"),
//				Template: &cloudrunv2.ServiceTemplateArgs{
//					Containers: cloudrunv2.ServiceTemplateContainerArray{
//						&cloudrunv2.ServiceTemplateContainerArgs{
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/hello"),
//						},
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultHostingVersion, err := firebase.NewHostingVersion(ctx, "defaultHostingVersion", &firebase.HostingVersionArgs{
//				SiteId: defaultHostingSite.SiteId,
//				Config: &firebase.HostingVersionConfigArgs{
//					Rewrites: firebase.HostingVersionConfigRewriteArray{
//						&firebase.HostingVersionConfigRewriteArgs{
//							Glob: pulumi.String("/hello/**"),
//							Run: &firebase.HostingVersionConfigRewriteRunArgs{
//								ServiceId: defaultService.Name,
//								Region:    defaultService.Location,
//							},
//						},
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewHostingRelease(ctx, "defaultHostingRelease", &firebase.HostingReleaseArgs{
//				SiteId:      defaultHostingSite.SiteId,
//				VersionName: defaultHostingVersion.Name,
//				Message:     pulumi.String("Cloud Run Integration"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebasehosting Version Cloud Functions
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/cloudfunctions"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultHostingSite, err := firebase.NewHostingSite(ctx, "defaultHostingSite", &firebase.HostingSiteArgs{
//				Project: pulumi.String("my-project-name"),
//				SiteId:  pulumi.String("site-id"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
//				Project:                  pulumi.String("my-project-name"),
//				Location:                 pulumi.String("US"),
//				UniformBucketLevelAccess: pulumi.Bool(true),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			object, err := storage.NewBucketObject(ctx, "object", &storage.BucketObjectArgs{
//				Bucket: bucket.Name,
//				Source: pulumi.NewFileAsset("function-source.zip"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			function, err := cloudfunctions.NewFunction(ctx, "function", &cloudfunctions.FunctionArgs{
//				Project:             pulumi.String("my-project-name"),
//				Description:         pulumi.String("A Cloud Function connected to Firebase Hosing"),
//				Runtime:             pulumi.String("nodejs16"),
//				AvailableMemoryMb:   pulumi.Int(128),
//				SourceArchiveBucket: bucket.Name,
//				SourceArchiveObject: object.Name,
//				TriggerHttp:         pulumi.Bool(true),
//				EntryPoint:          pulumi.String("helloHttp"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			defaultHostingVersion, err := firebase.NewHostingVersion(ctx, "defaultHostingVersion", &firebase.HostingVersionArgs{
//				SiteId: defaultHostingSite.SiteId,
//				Config: &firebase.HostingVersionConfigArgs{
//					Rewrites: firebase.HostingVersionConfigRewriteArray{
//						&firebase.HostingVersionConfigRewriteArgs{
//							Glob:     pulumi.String("/hello/**"),
//							Function: function.Name,
//						},
//					},
//				},
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewHostingRelease(ctx, "defaultHostingRelease", &firebase.HostingReleaseArgs{
//				SiteId:      defaultHostingSite.SiteId,
//				VersionName: defaultHostingVersion.Name,
//				Message:     pulumi.String("Cloud Functions Integration"),
//			}, pulumi.Provider(google_beta))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Version can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:firebase/hostingVersion:HostingVersion default sites/{{site_id}}/versions/{{version_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:firebase/hostingVersion:HostingVersion default {{site_id}}/{{version_id}}
//
// ```
type HostingVersion struct {
	pulumi.CustomResourceState

	// The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
	// Structure is documented below.
	Config HostingVersionConfigPtrOutput `pulumi:"config"`
	// The fully-qualified resource name for the version, in the format:
	// sites/SITE_ID/versions/VERSION_ID
	Name pulumi.StringOutput `pulumi:"name"`
	// Required. The ID of the site in which to create this Version.
	//
	// ***
	SiteId pulumi.StringOutput `pulumi:"siteId"`
	// The ID for the version as in sites/SITE_ID/versions/VERSION_ID
	VersionId pulumi.StringOutput `pulumi:"versionId"`
}

// NewHostingVersion registers a new resource with the given unique name, arguments, and options.
func NewHostingVersion(ctx *pulumi.Context,
	name string, args *HostingVersionArgs, opts ...pulumi.ResourceOption) (*HostingVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	var resource HostingVersion
	err := ctx.RegisterResource("gcp:firebase/hostingVersion:HostingVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostingVersion gets an existing HostingVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostingVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostingVersionState, opts ...pulumi.ResourceOption) (*HostingVersion, error) {
	var resource HostingVersion
	err := ctx.ReadResource("gcp:firebase/hostingVersion:HostingVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostingVersion resources.
type hostingVersionState struct {
	// The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
	// Structure is documented below.
	Config *HostingVersionConfig `pulumi:"config"`
	// The fully-qualified resource name for the version, in the format:
	// sites/SITE_ID/versions/VERSION_ID
	Name *string `pulumi:"name"`
	// Required. The ID of the site in which to create this Version.
	//
	// ***
	SiteId *string `pulumi:"siteId"`
	// The ID for the version as in sites/SITE_ID/versions/VERSION_ID
	VersionId *string `pulumi:"versionId"`
}

type HostingVersionState struct {
	// The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
	// Structure is documented below.
	Config HostingVersionConfigPtrInput
	// The fully-qualified resource name for the version, in the format:
	// sites/SITE_ID/versions/VERSION_ID
	Name pulumi.StringPtrInput
	// Required. The ID of the site in which to create this Version.
	//
	// ***
	SiteId pulumi.StringPtrInput
	// The ID for the version as in sites/SITE_ID/versions/VERSION_ID
	VersionId pulumi.StringPtrInput
}

func (HostingVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostingVersionState)(nil)).Elem()
}

type hostingVersionArgs struct {
	// The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
	// Structure is documented below.
	Config *HostingVersionConfig `pulumi:"config"`
	// Required. The ID of the site in which to create this Version.
	//
	// ***
	SiteId string `pulumi:"siteId"`
}

// The set of arguments for constructing a HostingVersion resource.
type HostingVersionArgs struct {
	// The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
	// Structure is documented below.
	Config HostingVersionConfigPtrInput
	// Required. The ID of the site in which to create this Version.
	//
	// ***
	SiteId pulumi.StringInput
}

func (HostingVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostingVersionArgs)(nil)).Elem()
}

type HostingVersionInput interface {
	pulumi.Input

	ToHostingVersionOutput() HostingVersionOutput
	ToHostingVersionOutputWithContext(ctx context.Context) HostingVersionOutput
}

func (*HostingVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**HostingVersion)(nil)).Elem()
}

func (i *HostingVersion) ToHostingVersionOutput() HostingVersionOutput {
	return i.ToHostingVersionOutputWithContext(context.Background())
}

func (i *HostingVersion) ToHostingVersionOutputWithContext(ctx context.Context) HostingVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostingVersionOutput)
}

// HostingVersionArrayInput is an input type that accepts HostingVersionArray and HostingVersionArrayOutput values.
// You can construct a concrete instance of `HostingVersionArrayInput` via:
//
//	HostingVersionArray{ HostingVersionArgs{...} }
type HostingVersionArrayInput interface {
	pulumi.Input

	ToHostingVersionArrayOutput() HostingVersionArrayOutput
	ToHostingVersionArrayOutputWithContext(context.Context) HostingVersionArrayOutput
}

type HostingVersionArray []HostingVersionInput

func (HostingVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostingVersion)(nil)).Elem()
}

func (i HostingVersionArray) ToHostingVersionArrayOutput() HostingVersionArrayOutput {
	return i.ToHostingVersionArrayOutputWithContext(context.Background())
}

func (i HostingVersionArray) ToHostingVersionArrayOutputWithContext(ctx context.Context) HostingVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostingVersionArrayOutput)
}

// HostingVersionMapInput is an input type that accepts HostingVersionMap and HostingVersionMapOutput values.
// You can construct a concrete instance of `HostingVersionMapInput` via:
//
//	HostingVersionMap{ "key": HostingVersionArgs{...} }
type HostingVersionMapInput interface {
	pulumi.Input

	ToHostingVersionMapOutput() HostingVersionMapOutput
	ToHostingVersionMapOutputWithContext(context.Context) HostingVersionMapOutput
}

type HostingVersionMap map[string]HostingVersionInput

func (HostingVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostingVersion)(nil)).Elem()
}

func (i HostingVersionMap) ToHostingVersionMapOutput() HostingVersionMapOutput {
	return i.ToHostingVersionMapOutputWithContext(context.Background())
}

func (i HostingVersionMap) ToHostingVersionMapOutputWithContext(ctx context.Context) HostingVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostingVersionMapOutput)
}

type HostingVersionOutput struct{ *pulumi.OutputState }

func (HostingVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostingVersion)(nil)).Elem()
}

func (o HostingVersionOutput) ToHostingVersionOutput() HostingVersionOutput {
	return o
}

func (o HostingVersionOutput) ToHostingVersionOutputWithContext(ctx context.Context) HostingVersionOutput {
	return o
}

// The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
// Structure is documented below.
func (o HostingVersionOutput) Config() HostingVersionConfigPtrOutput {
	return o.ApplyT(func(v *HostingVersion) HostingVersionConfigPtrOutput { return v.Config }).(HostingVersionConfigPtrOutput)
}

// The fully-qualified resource name for the version, in the format:
// sites/SITE_ID/versions/VERSION_ID
func (o HostingVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingVersion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Required. The ID of the site in which to create this Version.
//
// ***
func (o HostingVersionOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingVersion) pulumi.StringOutput { return v.SiteId }).(pulumi.StringOutput)
}

// The ID for the version as in sites/SITE_ID/versions/VERSION_ID
func (o HostingVersionOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingVersion) pulumi.StringOutput { return v.VersionId }).(pulumi.StringOutput)
}

type HostingVersionArrayOutput struct{ *pulumi.OutputState }

func (HostingVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostingVersion)(nil)).Elem()
}

func (o HostingVersionArrayOutput) ToHostingVersionArrayOutput() HostingVersionArrayOutput {
	return o
}

func (o HostingVersionArrayOutput) ToHostingVersionArrayOutputWithContext(ctx context.Context) HostingVersionArrayOutput {
	return o
}

func (o HostingVersionArrayOutput) Index(i pulumi.IntInput) HostingVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostingVersion {
		return vs[0].([]*HostingVersion)[vs[1].(int)]
	}).(HostingVersionOutput)
}

type HostingVersionMapOutput struct{ *pulumi.OutputState }

func (HostingVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostingVersion)(nil)).Elem()
}

func (o HostingVersionMapOutput) ToHostingVersionMapOutput() HostingVersionMapOutput {
	return o
}

func (o HostingVersionMapOutput) ToHostingVersionMapOutputWithContext(ctx context.Context) HostingVersionMapOutput {
	return o
}

func (o HostingVersionMapOutput) MapIndex(k pulumi.StringInput) HostingVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostingVersion {
		return vs[0].(map[string]*HostingVersion)[vs[1].(string)]
	}).(HostingVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostingVersionInput)(nil)).Elem(), &HostingVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostingVersionArrayInput)(nil)).Elem(), HostingVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostingVersionMapInput)(nil)).Elem(), HostingVersionMap{})
	pulumi.RegisterOutputType(HostingVersionOutput{})
	pulumi.RegisterOutputType(HostingVersionArrayOutput{})
	pulumi.RegisterOutputType(HostingVersionMapOutput{})
}
