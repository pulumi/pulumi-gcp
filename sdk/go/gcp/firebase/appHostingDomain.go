// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A domain name that is associated with a backend.
//
// ## Example Usage
//
// ### Firebase App Hosting Domain Minimal
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
//				Project:                   pulumi.String("my-project-name"),
//				AccountId:                 pulumi.String("sa-id"),
//				DisplayName:               pulumi.String("Firebase App Hosting compute service account"),
//				CreateIgnoreAlreadyExists: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAppHostingBackend, err := firebase.NewAppHostingBackend(ctx, "example", &firebase.AppHostingBackendArgs{
//				Project:         pulumi.String("my-project-name"),
//				Location:        pulumi.String("us-central1"),
//				BackendId:       pulumi.String("domain-mini"),
//				AppId:           pulumi.String("1:0000000000:web:674cde32020e16fbce9dbd"),
//				ServingLocality: pulumi.String("GLOBAL_ACCESS"),
//				ServiceAccount:  serviceAccount.Email,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppHostingDomain(ctx, "example", &firebase.AppHostingDomainArgs{
//				Project:  exampleAppHostingBackend.Project,
//				Location: exampleAppHostingBackend.Location,
//				Backend:  exampleAppHostingBackend.BackendId,
//				DomainId: pulumi.String("example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebase App Hosting Domain Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
//				Project:                   pulumi.String("my-project-name"),
//				AccountId:                 pulumi.String("sa-id"),
//				DisplayName:               pulumi.String("Firebase App Hosting compute service account"),
//				CreateIgnoreAlreadyExists: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAppHostingBackend, err := firebase.NewAppHostingBackend(ctx, "example", &firebase.AppHostingBackendArgs{
//				Project:         pulumi.String("my-project-name"),
//				Location:        pulumi.String("us-central1"),
//				BackendId:       pulumi.String("domain-full"),
//				AppId:           pulumi.String("1:0000000000:web:674cde32020e16fbce9dbd"),
//				ServingLocality: pulumi.String("GLOBAL_ACCESS"),
//				ServiceAccount:  serviceAccount.Email,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppHostingDomain(ctx, "example", &firebase.AppHostingDomainArgs{
//				Project:  exampleAppHostingBackend.Project,
//				Location: exampleAppHostingBackend.Location,
//				Backend:  exampleAppHostingBackend.BackendId,
//				DomainId: pulumi.String("example.com"),
//				Serve: &firebase.AppHostingDomainServeArgs{
//					Redirect: &firebase.AppHostingDomainServeRedirectArgs{
//						Uri:    pulumi.String("google.com"),
//						Status: pulumi.String("302"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Domain can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/backends/{{backend}}/domains/{{domain_id}}`
//
// * `{{project}}/{{location}}/{{backend}}/{{domain_id}}`
//
// * `{{location}}/{{backend}}/{{domain_id}}`
//
// When using the `pulumi import` command, Domain can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:firebase/appHostingDomain:AppHostingDomain default projects/{{project}}/locations/{{location}}/backends/{{backend}}/domains/{{domain_id}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appHostingDomain:AppHostingDomain default {{project}}/{{location}}/{{backend}}/{{domain_id}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appHostingDomain:AppHostingDomain default {{location}}/{{backend}}/{{domain_id}}
// ```
type AppHostingDomain struct {
	pulumi.CustomResourceState

	// The ID of the Backend that this Domain is associated with
	Backend pulumi.StringOutput `pulumi:"backend"`
	// Time at which the domain was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The status of a custom domain's linkage to the Backend.
	// Structure is documented below.
	CustomDomainStatuses AppHostingDomainCustomDomainStatusArrayOutput `pulumi:"customDomainStatuses"`
	// Time at which the domain was deleted.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// Id of the domain to create.
	// Must be a valid domain name, such as "foo.com"
	//
	// ***
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// Server-computed checksum based on other values; may be sent
	// on update or delete to ensure operation is done on expected resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location of the Backend that this Domain is associated with
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The resource name of the domain, e.g.
	// `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Time at which a soft-deleted domain will be purged, rendering in
	// permanently deleted.
	PurgeTime pulumi.StringOutput `pulumi:"purgeTime"`
	// The serving behavior of the domain. If specified, the domain will
	// serve content other than its Backend's live content.
	// Structure is documented below.
	Serve AppHostingDomainServePtrOutput `pulumi:"serve"`
	// System-assigned, unique identifier.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time at which the domain was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAppHostingDomain registers a new resource with the given unique name, arguments, and options.
func NewAppHostingDomain(ctx *pulumi.Context,
	name string, args *AppHostingDomainArgs, opts ...pulumi.ResourceOption) (*AppHostingDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backend == nil {
		return nil, errors.New("invalid value for required argument 'Backend'")
	}
	if args.DomainId == nil {
		return nil, errors.New("invalid value for required argument 'DomainId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppHostingDomain
	err := ctx.RegisterResource("gcp:firebase/appHostingDomain:AppHostingDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppHostingDomain gets an existing AppHostingDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppHostingDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppHostingDomainState, opts ...pulumi.ResourceOption) (*AppHostingDomain, error) {
	var resource AppHostingDomain
	err := ctx.ReadResource("gcp:firebase/appHostingDomain:AppHostingDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppHostingDomain resources.
type appHostingDomainState struct {
	// The ID of the Backend that this Domain is associated with
	Backend *string `pulumi:"backend"`
	// Time at which the domain was created.
	CreateTime *string `pulumi:"createTime"`
	// The status of a custom domain's linkage to the Backend.
	// Structure is documented below.
	CustomDomainStatuses []AppHostingDomainCustomDomainStatus `pulumi:"customDomainStatuses"`
	// Time at which the domain was deleted.
	DeleteTime *string `pulumi:"deleteTime"`
	// Id of the domain to create.
	// Must be a valid domain name, such as "foo.com"
	//
	// ***
	DomainId *string `pulumi:"domainId"`
	// Server-computed checksum based on other values; may be sent
	// on update or delete to ensure operation is done on expected resource.
	Etag *string `pulumi:"etag"`
	// The location of the Backend that this Domain is associated with
	Location *string `pulumi:"location"`
	// Identifier. The resource name of the domain, e.g.
	// `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Time at which a soft-deleted domain will be purged, rendering in
	// permanently deleted.
	PurgeTime *string `pulumi:"purgeTime"`
	// The serving behavior of the domain. If specified, the domain will
	// serve content other than its Backend's live content.
	// Structure is documented below.
	Serve *AppHostingDomainServe `pulumi:"serve"`
	// System-assigned, unique identifier.
	Uid *string `pulumi:"uid"`
	// Time at which the domain was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type AppHostingDomainState struct {
	// The ID of the Backend that this Domain is associated with
	Backend pulumi.StringPtrInput
	// Time at which the domain was created.
	CreateTime pulumi.StringPtrInput
	// The status of a custom domain's linkage to the Backend.
	// Structure is documented below.
	CustomDomainStatuses AppHostingDomainCustomDomainStatusArrayInput
	// Time at which the domain was deleted.
	DeleteTime pulumi.StringPtrInput
	// Id of the domain to create.
	// Must be a valid domain name, such as "foo.com"
	//
	// ***
	DomainId pulumi.StringPtrInput
	// Server-computed checksum based on other values; may be sent
	// on update or delete to ensure operation is done on expected resource.
	Etag pulumi.StringPtrInput
	// The location of the Backend that this Domain is associated with
	Location pulumi.StringPtrInput
	// Identifier. The resource name of the domain, e.g.
	// `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Time at which a soft-deleted domain will be purged, rendering in
	// permanently deleted.
	PurgeTime pulumi.StringPtrInput
	// The serving behavior of the domain. If specified, the domain will
	// serve content other than its Backend's live content.
	// Structure is documented below.
	Serve AppHostingDomainServePtrInput
	// System-assigned, unique identifier.
	Uid pulumi.StringPtrInput
	// Time at which the domain was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (AppHostingDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*appHostingDomainState)(nil)).Elem()
}

type appHostingDomainArgs struct {
	// The ID of the Backend that this Domain is associated with
	Backend string `pulumi:"backend"`
	// Id of the domain to create.
	// Must be a valid domain name, such as "foo.com"
	//
	// ***
	DomainId string `pulumi:"domainId"`
	// The location of the Backend that this Domain is associated with
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The serving behavior of the domain. If specified, the domain will
	// serve content other than its Backend's live content.
	// Structure is documented below.
	Serve *AppHostingDomainServe `pulumi:"serve"`
}

// The set of arguments for constructing a AppHostingDomain resource.
type AppHostingDomainArgs struct {
	// The ID of the Backend that this Domain is associated with
	Backend pulumi.StringInput
	// Id of the domain to create.
	// Must be a valid domain name, such as "foo.com"
	//
	// ***
	DomainId pulumi.StringInput
	// The location of the Backend that this Domain is associated with
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The serving behavior of the domain. If specified, the domain will
	// serve content other than its Backend's live content.
	// Structure is documented below.
	Serve AppHostingDomainServePtrInput
}

func (AppHostingDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appHostingDomainArgs)(nil)).Elem()
}

type AppHostingDomainInput interface {
	pulumi.Input

	ToAppHostingDomainOutput() AppHostingDomainOutput
	ToAppHostingDomainOutputWithContext(ctx context.Context) AppHostingDomainOutput
}

func (*AppHostingDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**AppHostingDomain)(nil)).Elem()
}

func (i *AppHostingDomain) ToAppHostingDomainOutput() AppHostingDomainOutput {
	return i.ToAppHostingDomainOutputWithContext(context.Background())
}

func (i *AppHostingDomain) ToAppHostingDomainOutputWithContext(ctx context.Context) AppHostingDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppHostingDomainOutput)
}

// AppHostingDomainArrayInput is an input type that accepts AppHostingDomainArray and AppHostingDomainArrayOutput values.
// You can construct a concrete instance of `AppHostingDomainArrayInput` via:
//
//	AppHostingDomainArray{ AppHostingDomainArgs{...} }
type AppHostingDomainArrayInput interface {
	pulumi.Input

	ToAppHostingDomainArrayOutput() AppHostingDomainArrayOutput
	ToAppHostingDomainArrayOutputWithContext(context.Context) AppHostingDomainArrayOutput
}

type AppHostingDomainArray []AppHostingDomainInput

func (AppHostingDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppHostingDomain)(nil)).Elem()
}

func (i AppHostingDomainArray) ToAppHostingDomainArrayOutput() AppHostingDomainArrayOutput {
	return i.ToAppHostingDomainArrayOutputWithContext(context.Background())
}

func (i AppHostingDomainArray) ToAppHostingDomainArrayOutputWithContext(ctx context.Context) AppHostingDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppHostingDomainArrayOutput)
}

// AppHostingDomainMapInput is an input type that accepts AppHostingDomainMap and AppHostingDomainMapOutput values.
// You can construct a concrete instance of `AppHostingDomainMapInput` via:
//
//	AppHostingDomainMap{ "key": AppHostingDomainArgs{...} }
type AppHostingDomainMapInput interface {
	pulumi.Input

	ToAppHostingDomainMapOutput() AppHostingDomainMapOutput
	ToAppHostingDomainMapOutputWithContext(context.Context) AppHostingDomainMapOutput
}

type AppHostingDomainMap map[string]AppHostingDomainInput

func (AppHostingDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppHostingDomain)(nil)).Elem()
}

func (i AppHostingDomainMap) ToAppHostingDomainMapOutput() AppHostingDomainMapOutput {
	return i.ToAppHostingDomainMapOutputWithContext(context.Background())
}

func (i AppHostingDomainMap) ToAppHostingDomainMapOutputWithContext(ctx context.Context) AppHostingDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppHostingDomainMapOutput)
}

type AppHostingDomainOutput struct{ *pulumi.OutputState }

func (AppHostingDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppHostingDomain)(nil)).Elem()
}

func (o AppHostingDomainOutput) ToAppHostingDomainOutput() AppHostingDomainOutput {
	return o
}

func (o AppHostingDomainOutput) ToAppHostingDomainOutputWithContext(ctx context.Context) AppHostingDomainOutput {
	return o
}

// The ID of the Backend that this Domain is associated with
func (o AppHostingDomainOutput) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDomain) pulumi.StringOutput { return v.Backend }).(pulumi.StringOutput)
}

// Time at which the domain was created.
func (o AppHostingDomainOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDomain) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The status of a custom domain's linkage to the Backend.
// Structure is documented below.
func (o AppHostingDomainOutput) CustomDomainStatuses() AppHostingDomainCustomDomainStatusArrayOutput {
	return o.ApplyT(func(v *AppHostingDomain) AppHostingDomainCustomDomainStatusArrayOutput { return v.CustomDomainStatuses }).(AppHostingDomainCustomDomainStatusArrayOutput)
}

// Time at which the domain was deleted.
func (o AppHostingDomainOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDomain) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// Id of the domain to create.
// Must be a valid domain name, such as "foo.com"
//
// ***
func (o AppHostingDomainOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDomain) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// Server-computed checksum based on other values; may be sent
// on update or delete to ensure operation is done on expected resource.
func (o AppHostingDomainOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDomain) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location of the Backend that this Domain is associated with
func (o AppHostingDomainOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDomain) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name of the domain, e.g.
// `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`
func (o AppHostingDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDomain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AppHostingDomainOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDomain) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Time at which a soft-deleted domain will be purged, rendering in
// permanently deleted.
func (o AppHostingDomainOutput) PurgeTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDomain) pulumi.StringOutput { return v.PurgeTime }).(pulumi.StringOutput)
}

// The serving behavior of the domain. If specified, the domain will
// serve content other than its Backend's live content.
// Structure is documented below.
func (o AppHostingDomainOutput) Serve() AppHostingDomainServePtrOutput {
	return o.ApplyT(func(v *AppHostingDomain) AppHostingDomainServePtrOutput { return v.Serve }).(AppHostingDomainServePtrOutput)
}

// System-assigned, unique identifier.
func (o AppHostingDomainOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDomain) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time at which the domain was last updated.
func (o AppHostingDomainOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingDomain) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AppHostingDomainArrayOutput struct{ *pulumi.OutputState }

func (AppHostingDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppHostingDomain)(nil)).Elem()
}

func (o AppHostingDomainArrayOutput) ToAppHostingDomainArrayOutput() AppHostingDomainArrayOutput {
	return o
}

func (o AppHostingDomainArrayOutput) ToAppHostingDomainArrayOutputWithContext(ctx context.Context) AppHostingDomainArrayOutput {
	return o
}

func (o AppHostingDomainArrayOutput) Index(i pulumi.IntInput) AppHostingDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppHostingDomain {
		return vs[0].([]*AppHostingDomain)[vs[1].(int)]
	}).(AppHostingDomainOutput)
}

type AppHostingDomainMapOutput struct{ *pulumi.OutputState }

func (AppHostingDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppHostingDomain)(nil)).Elem()
}

func (o AppHostingDomainMapOutput) ToAppHostingDomainMapOutput() AppHostingDomainMapOutput {
	return o
}

func (o AppHostingDomainMapOutput) ToAppHostingDomainMapOutputWithContext(ctx context.Context) AppHostingDomainMapOutput {
	return o
}

func (o AppHostingDomainMapOutput) MapIndex(k pulumi.StringInput) AppHostingDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppHostingDomain {
		return vs[0].(map[string]*AppHostingDomain)[vs[1].(string)]
	}).(AppHostingDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppHostingDomainInput)(nil)).Elem(), &AppHostingDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppHostingDomainArrayInput)(nil)).Elem(), AppHostingDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppHostingDomainMapInput)(nil)).Elem(), AppHostingDomainMap{})
	pulumi.RegisterOutputType(AppHostingDomainOutput{})
	pulumi.RegisterOutputType(AppHostingDomainArrayOutput{})
	pulumi.RegisterOutputType(AppHostingDomainMapOutput{})
}
