// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Firebase Data Connect service.
//
// To get more information about Service, see:
//
// * [API documentation](https://firebase.google.com/docs/reference/data-connect/rest)
// * How-to Guides
//   - [Official Documentation](https://firebase.google.com/docs/data-connect)
//
// ## Example Usage
//
// ### Firebasedataconnect Service Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Enable Firebase Data Connect API
//			fdc, err := projects.NewService(ctx, "fdc", &projects.ServiceArgs{
//				Project: pulumi.String("my-project-name"),
//				Service: pulumi.String("firebasedataconnect.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a Firebase Data Connect service
//			_, err = firebase.NewDataConnectService(ctx, "default", &firebase.DataConnectServiceArgs{
//				Project:        pulumi.String("my-project-name"),
//				Location:       pulumi.String("us-central1"),
//				ServiceId:      pulumi.String("example-service"),
//				DeletionPolicy: pulumi.String("DEFAULT"),
//				Labels: pulumi.StringMap{
//					"label": pulumi.String("my-label"),
//				},
//				Annotations: pulumi.StringMap{
//					"key1": pulumi.String("value1"),
//					"key2": pulumi.String("value2"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				fdc,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebasedataconnect Service With Force Deletion
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Enable Firebase Data Connect API
//			fdc, err := projects.NewService(ctx, "fdc", &projects.ServiceArgs{
//				Project: pulumi.String("my-project-name"),
//				Service: pulumi.String("firebasedataconnect.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a Firebase Data Connect service
//			_, err = firebase.NewDataConnectService(ctx, "default", &firebase.DataConnectServiceArgs{
//				Project:        pulumi.String("my-project-name"),
//				Location:       pulumi.String("us-central1"),
//				ServiceId:      pulumi.String("example-service"),
//				DeletionPolicy: pulumi.String("FORCE"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				fdc,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Service can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/services/{{service_id}}`
//
// * `{{project}}/{{location}}/{{service_id}}`
//
// * `{{location}}/{{service_id}}`
//
// When using the `pulumi import` command, Service can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:firebase/dataConnectService:DataConnectService default projects/{{project}}/locations/{{location}}/services/{{service_id}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/dataConnectService:DataConnectService default {{project}}/{{location}}/{{service_id}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/dataConnectService:DataConnectService default {{location}}/{{service_id}}
// ```
type DataConnectService struct {
	pulumi.CustomResourceState

	// Optional. Stores small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Output only. [Output only] Create time stamp.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The deletion policy for the database. Setting the field to FORCE allows the
	// Service to be deleted even if a Schema or Connector is present. By default,
	// the Service deletion will only succeed when no Schema or Connectors are
	// present.
	// Possible values: DEFAULT, FORCE
	DeletionPolicy pulumi.StringPtrOutput `pulumi:"deletionPolicy"`
	// Optional. Mutable human-readable name. 63 character limit.
	DisplayName          pulumi.StringPtrOutput `pulumi:"displayName"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Output only. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	// [AIP-154](https://google.aip.dev/154)
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Optional. Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The region in which the service resides, e.g. "us-central1" or "asia-east1".
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The relative resource name of the Firebase Data Connect service, in the
	// format:
	//
	// Note that the service ID is specific to Firebase Data Connect and does not
	// correspond to any of the instance IDs of the underlying data source
	// connections.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Output only. A field that if true, indicates that the system is working update the
	// service.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// Required. The ID to use for the service, which will become the final component of the
	// service's resource name.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// Output only. System-assigned, unique identifier.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Output only. [Output only] Update time stamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDataConnectService registers a new resource with the given unique name, arguments, and options.
func NewDataConnectService(ctx *pulumi.Context,
	name string, args *DataConnectServiceArgs, opts ...pulumi.ResourceOption) (*DataConnectService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataConnectService
	err := ctx.RegisterResource("gcp:firebase/dataConnectService:DataConnectService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataConnectService gets an existing DataConnectService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataConnectService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataConnectServiceState, opts ...pulumi.ResourceOption) (*DataConnectService, error) {
	var resource DataConnectService
	err := ctx.ReadResource("gcp:firebase/dataConnectService:DataConnectService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataConnectService resources.
type dataConnectServiceState struct {
	// Optional. Stores small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Output only. [Output only] Create time stamp.
	CreateTime *string `pulumi:"createTime"`
	// The deletion policy for the database. Setting the field to FORCE allows the
	// Service to be deleted even if a Schema or Connector is present. By default,
	// the Service deletion will only succeed when no Schema or Connectors are
	// present.
	// Possible values: DEFAULT, FORCE
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// Optional. Mutable human-readable name. 63 character limit.
	DisplayName          *string           `pulumi:"displayName"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Output only. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	// [AIP-154](https://google.aip.dev/154)
	Etag *string `pulumi:"etag"`
	// Optional. Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The region in which the service resides, e.g. "us-central1" or "asia-east1".
	Location *string `pulumi:"location"`
	// Identifier. The relative resource name of the Firebase Data Connect service, in the
	// format:
	//
	// Note that the service ID is specific to Firebase Data Connect and does not
	// correspond to any of the instance IDs of the underlying data source
	// connections.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Output only. A field that if true, indicates that the system is working update the
	// service.
	Reconciling *bool `pulumi:"reconciling"`
	// Required. The ID to use for the service, which will become the final component of the
	// service's resource name.
	ServiceId *string `pulumi:"serviceId"`
	// Output only. System-assigned, unique identifier.
	Uid *string `pulumi:"uid"`
	// Output only. [Output only] Update time stamp.
	UpdateTime *string `pulumi:"updateTime"`
}

type DataConnectServiceState struct {
	// Optional. Stores small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Output only. [Output only] Create time stamp.
	CreateTime pulumi.StringPtrInput
	// The deletion policy for the database. Setting the field to FORCE allows the
	// Service to be deleted even if a Schema or Connector is present. By default,
	// the Service deletion will only succeed when no Schema or Connectors are
	// present.
	// Possible values: DEFAULT, FORCE
	DeletionPolicy pulumi.StringPtrInput
	// Optional. Mutable human-readable name. 63 character limit.
	DisplayName          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Output only. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	// [AIP-154](https://google.aip.dev/154)
	Etag pulumi.StringPtrInput
	// Optional. Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The region in which the service resides, e.g. "us-central1" or "asia-east1".
	Location pulumi.StringPtrInput
	// Identifier. The relative resource name of the Firebase Data Connect service, in the
	// format:
	//
	// Note that the service ID is specific to Firebase Data Connect and does not
	// correspond to any of the instance IDs of the underlying data source
	// connections.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Output only. A field that if true, indicates that the system is working update the
	// service.
	Reconciling pulumi.BoolPtrInput
	// Required. The ID to use for the service, which will become the final component of the
	// service's resource name.
	ServiceId pulumi.StringPtrInput
	// Output only. System-assigned, unique identifier.
	Uid pulumi.StringPtrInput
	// Output only. [Output only] Update time stamp.
	UpdateTime pulumi.StringPtrInput
}

func (DataConnectServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectServiceState)(nil)).Elem()
}

type dataConnectServiceArgs struct {
	// Optional. Stores small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The deletion policy for the database. Setting the field to FORCE allows the
	// Service to be deleted even if a Schema or Connector is present. By default,
	// the Service deletion will only succeed when no Schema or Connectors are
	// present.
	// Possible values: DEFAULT, FORCE
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// Optional. Mutable human-readable name. 63 character limit.
	DisplayName *string `pulumi:"displayName"`
	// Optional. Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The region in which the service resides, e.g. "us-central1" or "asia-east1".
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Required. The ID to use for the service, which will become the final component of the
	// service's resource name.
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a DataConnectService resource.
type DataConnectServiceArgs struct {
	// Optional. Stores small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The deletion policy for the database. Setting the field to FORCE allows the
	// Service to be deleted even if a Schema or Connector is present. By default,
	// the Service deletion will only succeed when no Schema or Connectors are
	// present.
	// Possible values: DEFAULT, FORCE
	DeletionPolicy pulumi.StringPtrInput
	// Optional. Mutable human-readable name. 63 character limit.
	DisplayName pulumi.StringPtrInput
	// Optional. Labels as key value pairs.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The region in which the service resides, e.g. "us-central1" or "asia-east1".
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Required. The ID to use for the service, which will become the final component of the
	// service's resource name.
	ServiceId pulumi.StringInput
}

func (DataConnectServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectServiceArgs)(nil)).Elem()
}

type DataConnectServiceInput interface {
	pulumi.Input

	ToDataConnectServiceOutput() DataConnectServiceOutput
	ToDataConnectServiceOutputWithContext(ctx context.Context) DataConnectServiceOutput
}

func (*DataConnectService) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectService)(nil)).Elem()
}

func (i *DataConnectService) ToDataConnectServiceOutput() DataConnectServiceOutput {
	return i.ToDataConnectServiceOutputWithContext(context.Background())
}

func (i *DataConnectService) ToDataConnectServiceOutputWithContext(ctx context.Context) DataConnectServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectServiceOutput)
}

// DataConnectServiceArrayInput is an input type that accepts DataConnectServiceArray and DataConnectServiceArrayOutput values.
// You can construct a concrete instance of `DataConnectServiceArrayInput` via:
//
//	DataConnectServiceArray{ DataConnectServiceArgs{...} }
type DataConnectServiceArrayInput interface {
	pulumi.Input

	ToDataConnectServiceArrayOutput() DataConnectServiceArrayOutput
	ToDataConnectServiceArrayOutputWithContext(context.Context) DataConnectServiceArrayOutput
}

type DataConnectServiceArray []DataConnectServiceInput

func (DataConnectServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectService)(nil)).Elem()
}

func (i DataConnectServiceArray) ToDataConnectServiceArrayOutput() DataConnectServiceArrayOutput {
	return i.ToDataConnectServiceArrayOutputWithContext(context.Background())
}

func (i DataConnectServiceArray) ToDataConnectServiceArrayOutputWithContext(ctx context.Context) DataConnectServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectServiceArrayOutput)
}

// DataConnectServiceMapInput is an input type that accepts DataConnectServiceMap and DataConnectServiceMapOutput values.
// You can construct a concrete instance of `DataConnectServiceMapInput` via:
//
//	DataConnectServiceMap{ "key": DataConnectServiceArgs{...} }
type DataConnectServiceMapInput interface {
	pulumi.Input

	ToDataConnectServiceMapOutput() DataConnectServiceMapOutput
	ToDataConnectServiceMapOutputWithContext(context.Context) DataConnectServiceMapOutput
}

type DataConnectServiceMap map[string]DataConnectServiceInput

func (DataConnectServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectService)(nil)).Elem()
}

func (i DataConnectServiceMap) ToDataConnectServiceMapOutput() DataConnectServiceMapOutput {
	return i.ToDataConnectServiceMapOutputWithContext(context.Background())
}

func (i DataConnectServiceMap) ToDataConnectServiceMapOutputWithContext(ctx context.Context) DataConnectServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectServiceMapOutput)
}

type DataConnectServiceOutput struct{ *pulumi.OutputState }

func (DataConnectServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectService)(nil)).Elem()
}

func (o DataConnectServiceOutput) ToDataConnectServiceOutput() DataConnectServiceOutput {
	return o
}

func (o DataConnectServiceOutput) ToDataConnectServiceOutputWithContext(ctx context.Context) DataConnectServiceOutput {
	return o
}

// Optional. Stores small amounts of arbitrary data.
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o DataConnectServiceOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataConnectService) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Output only. [Output only] Create time stamp.
func (o DataConnectServiceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectService) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The deletion policy for the database. Setting the field to FORCE allows the
// Service to be deleted even if a Schema or Connector is present. By default,
// the Service deletion will only succeed when no Schema or Connectors are
// present.
// Possible values: DEFAULT, FORCE
func (o DataConnectServiceOutput) DeletionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataConnectService) pulumi.StringPtrOutput { return v.DeletionPolicy }).(pulumi.StringPtrOutput)
}

// Optional. Mutable human-readable name. 63 character limit.
func (o DataConnectServiceOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataConnectService) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o DataConnectServiceOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataConnectService) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o DataConnectServiceOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataConnectService) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Output only. This checksum is computed by the server based on the value of other
// fields, and may be sent on update and delete requests to ensure the
// client has an up-to-date value before proceeding.
// [AIP-154](https://google.aip.dev/154)
func (o DataConnectServiceOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectService) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Optional. Labels as key value pairs.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o DataConnectServiceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataConnectService) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The region in which the service resides, e.g. "us-central1" or "asia-east1".
func (o DataConnectServiceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectService) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The relative resource name of the Firebase Data Connect service, in the
// format:
//
// Note that the service ID is specific to Firebase Data Connect and does not
// correspond to any of the instance IDs of the underlying data source
// connections.
func (o DataConnectServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o DataConnectServiceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectService) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o DataConnectServiceOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataConnectService) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Output only. A field that if true, indicates that the system is working update the
// service.
func (o DataConnectServiceOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *DataConnectService) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// Required. The ID to use for the service, which will become the final component of the
// service's resource name.
func (o DataConnectServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectService) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// Output only. System-assigned, unique identifier.
func (o DataConnectServiceOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectService) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Output only. [Output only] Update time stamp.
func (o DataConnectServiceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectService) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type DataConnectServiceArrayOutput struct{ *pulumi.OutputState }

func (DataConnectServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectService)(nil)).Elem()
}

func (o DataConnectServiceArrayOutput) ToDataConnectServiceArrayOutput() DataConnectServiceArrayOutput {
	return o
}

func (o DataConnectServiceArrayOutput) ToDataConnectServiceArrayOutputWithContext(ctx context.Context) DataConnectServiceArrayOutput {
	return o
}

func (o DataConnectServiceArrayOutput) Index(i pulumi.IntInput) DataConnectServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataConnectService {
		return vs[0].([]*DataConnectService)[vs[1].(int)]
	}).(DataConnectServiceOutput)
}

type DataConnectServiceMapOutput struct{ *pulumi.OutputState }

func (DataConnectServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectService)(nil)).Elem()
}

func (o DataConnectServiceMapOutput) ToDataConnectServiceMapOutput() DataConnectServiceMapOutput {
	return o
}

func (o DataConnectServiceMapOutput) ToDataConnectServiceMapOutputWithContext(ctx context.Context) DataConnectServiceMapOutput {
	return o
}

func (o DataConnectServiceMapOutput) MapIndex(k pulumi.StringInput) DataConnectServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataConnectService {
		return vs[0].(map[string]*DataConnectService)[vs[1].(string)]
	}).(DataConnectServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectServiceInput)(nil)).Elem(), &DataConnectService{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectServiceArrayInput)(nil)).Elem(), DataConnectServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectServiceMapInput)(nil)).Elem(), DataConnectServiceMap{})
	pulumi.RegisterOutputType(DataConnectServiceOutput{})
	pulumi.RegisterOutputType(DataConnectServiceArrayOutput{})
	pulumi.RegisterOutputType(DataConnectServiceMapOutput{})
}
