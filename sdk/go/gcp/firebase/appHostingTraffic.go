// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Controls traffic configuration for a backend.
//
// ## Example Usage
//
// ### Firebase App Hosting Traffic Target
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// ## Include these blocks only once per project if you are starting from scratch ###
//			serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
//				Project:                   pulumi.String("my-project-name"),
//				AccountId:                 pulumi.String("firebase-app-hosting-compute"),
//				DisplayName:               pulumi.String("Firebase App Hosting compute service account"),
//				CreateIgnoreAlreadyExists: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			fah, err := projects.NewService(ctx, "fah", &projects.ServiceArgs{
//				Project:          pulumi.String("my-project-name"),
//				Service:          pulumi.String("firebaseapphosting.googleapis.com"),
//				DisableOnDestroy: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAppHostingBackend, err := firebase.NewAppHostingBackend(ctx, "example", &firebase.AppHostingBackendArgs{
//				Project:         pulumi.String("my-project-name"),
//				Location:        pulumi.String("asia-east1"),
//				BackendId:       pulumi.String("traffic-tg"),
//				AppId:           pulumi.String("1:0000000000:web:674cde32020e16fbce9dbd"),
//				ServingLocality: pulumi.String("GLOBAL_ACCESS"),
//				ServiceAccount:  serviceAccount.Email,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				fah,
//			}))
//			if err != nil {
//				return err
//			}
//			exampleAppHostingBuild, err := firebase.NewAppHostingBuild(ctx, "example", &firebase.AppHostingBuildArgs{
//				Project:  exampleAppHostingBackend.Project,
//				Location: exampleAppHostingBackend.Location,
//				Backend:  exampleAppHostingBackend.BackendId,
//				BuildId:  pulumi.String("target-build"),
//				Source: &firebase.AppHostingBuildSourceArgs{
//					Container: &firebase.AppHostingBuildSourceContainerArgs{
//						Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/hello"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppHostingTraffic(ctx, "example", &firebase.AppHostingTrafficArgs{
//				Project:  exampleAppHostingBackend.Project,
//				Location: exampleAppHostingBackend.Location,
//				Backend:  exampleAppHostingBackend.BackendId,
//				Target: &firebase.AppHostingTrafficTargetArgs{
//					Splits: firebase.AppHostingTrafficTargetSplitArray{
//						&firebase.AppHostingTrafficTargetSplitArgs{
//							Build:   exampleAppHostingBuild.Name,
//							Percent: pulumi.Int(100),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMMember(ctx, "app_hosting_sa_runner", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/firebaseapphosting.computeRunner"),
//				Member:  serviceAccount.Member,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebase App Hosting Traffic Rollout Policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// ## Include these blocks only once per project if you are starting from scratch ###
//			serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
//				Project:                   pulumi.String("my-project-name"),
//				AccountId:                 pulumi.String("firebase-app-hosting-compute"),
//				DisplayName:               pulumi.String("Firebase App Hosting compute service account"),
//				CreateIgnoreAlreadyExists: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			fah, err := projects.NewService(ctx, "fah", &projects.ServiceArgs{
//				Project:          pulumi.String("my-project-name"),
//				Service:          pulumi.String("firebaseapphosting.googleapis.com"),
//				DisableOnDestroy: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAppHostingBackend, err := firebase.NewAppHostingBackend(ctx, "example", &firebase.AppHostingBackendArgs{
//				Project:         pulumi.String("my-project-name"),
//				Location:        pulumi.String("asia-east1"),
//				BackendId:       pulumi.String("traffic-rp"),
//				AppId:           pulumi.String("1:0000000000:web:674cde32020e16fbce9dbd"),
//				ServingLocality: pulumi.String("GLOBAL_ACCESS"),
//				ServiceAccount:  serviceAccount.Email,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				fah,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppHostingTraffic(ctx, "example", &firebase.AppHostingTrafficArgs{
//				Project:  exampleAppHostingBackend.Project,
//				Location: exampleAppHostingBackend.Location,
//				Backend:  exampleAppHostingBackend.BackendId,
//				RolloutPolicy: &firebase.AppHostingTrafficRolloutPolicyArgs{
//					CodebaseBranch: pulumi.String("main"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMMember(ctx, "app_hosting_sa_runner", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/firebaseapphosting.computeRunner"),
//				Member:  serviceAccount.Member,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebase App Hosting Traffic Rollout Policy Disabled
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// ## Include these blocks only once per project if you are starting from scratch ###
//			serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
//				Project:                   pulumi.String("my-project-name"),
//				AccountId:                 pulumi.String("firebase-app-hosting-compute"),
//				DisplayName:               pulumi.String("Firebase App Hosting compute service account"),
//				CreateIgnoreAlreadyExists: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			fah, err := projects.NewService(ctx, "fah", &projects.ServiceArgs{
//				Project:          pulumi.String("my-project-name"),
//				Service:          pulumi.String("firebaseapphosting.googleapis.com"),
//				DisableOnDestroy: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAppHostingBackend, err := firebase.NewAppHostingBackend(ctx, "example", &firebase.AppHostingBackendArgs{
//				Project:         pulumi.String("my-project-name"),
//				Location:        pulumi.String("asia-east1"),
//				BackendId:       pulumi.String("traffic-rpd"),
//				AppId:           pulumi.String("1:0000000000:web:674cde32020e16fbce9dbd"),
//				ServingLocality: pulumi.String("GLOBAL_ACCESS"),
//				ServiceAccount:  serviceAccount.Email,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				fah,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppHostingTraffic(ctx, "example", &firebase.AppHostingTrafficArgs{
//				Project:  exampleAppHostingBackend.Project,
//				Location: exampleAppHostingBackend.Location,
//				Backend:  exampleAppHostingBackend.BackendId,
//				RolloutPolicy: &firebase.AppHostingTrafficRolloutPolicyArgs{
//					Disabled:       pulumi.Bool(true),
//					CodebaseBranch: pulumi.String("main"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMMember(ctx, "app_hosting_sa_runner", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/firebaseapphosting.computeRunner"),
//				Member:  serviceAccount.Member,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Traffic can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/backends/{{backend}}/traffic`
//
// * `{{project}}/{{location}}/{{backend}}`
//
// * `{{location}}/{{backend}}`
//
// When using the `pulumi import` command, Traffic can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:firebase/appHostingTraffic:AppHostingTraffic default projects/{{project}}/locations/{{location}}/backends/{{backend}}/traffic
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appHostingTraffic:AppHostingTraffic default {{project}}/{{location}}/{{backend}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appHostingTraffic:AppHostingTraffic default {{location}}/{{backend}}
// ```
type AppHostingTraffic struct {
	pulumi.CustomResourceState

	// Id of the backend that this Traffic config applies to
	//
	// ***
	Backend pulumi.StringOutput `pulumi:"backend"`
	// Time at which the backend was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Current state of traffic allocation for the backend.
	// When setting `target`, this field may differ for some time until the desired state is reached.
	// Structure is documented below.
	Currents AppHostingTrafficCurrentArrayOutput `pulumi:"currents"`
	// Time at which the backend was deleted.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// Server-computed checksum based on other values; may be sent
	// on update or delete to ensure operation is done on expected resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The location the Backend that this Traffic config applies to
	Location pulumi.StringOutput `pulumi:"location"`
	// Identifier. The resource name of the backend traffic config
	// Format:
	// `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The policy for how builds and rollouts are triggered and rolled out.
	// Structure is documented below.
	RolloutPolicy AppHostingTrafficRolloutPolicyPtrOutput `pulumi:"rolloutPolicy"`
	// Set to manually control the desired traffic for the backend. This will
	// cause current to eventually match this value. The percentages must add
	// up to 100.
	// Structure is documented below.
	Target AppHostingTrafficTargetPtrOutput `pulumi:"target"`
	// System-assigned, unique identifier.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time at which the backend was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAppHostingTraffic registers a new resource with the given unique name, arguments, and options.
func NewAppHostingTraffic(ctx *pulumi.Context,
	name string, args *AppHostingTrafficArgs, opts ...pulumi.ResourceOption) (*AppHostingTraffic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backend == nil {
		return nil, errors.New("invalid value for required argument 'Backend'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppHostingTraffic
	err := ctx.RegisterResource("gcp:firebase/appHostingTraffic:AppHostingTraffic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppHostingTraffic gets an existing AppHostingTraffic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppHostingTraffic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppHostingTrafficState, opts ...pulumi.ResourceOption) (*AppHostingTraffic, error) {
	var resource AppHostingTraffic
	err := ctx.ReadResource("gcp:firebase/appHostingTraffic:AppHostingTraffic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppHostingTraffic resources.
type appHostingTrafficState struct {
	// Id of the backend that this Traffic config applies to
	//
	// ***
	Backend *string `pulumi:"backend"`
	// Time at which the backend was created.
	CreateTime *string `pulumi:"createTime"`
	// Current state of traffic allocation for the backend.
	// When setting `target`, this field may differ for some time until the desired state is reached.
	// Structure is documented below.
	Currents []AppHostingTrafficCurrent `pulumi:"currents"`
	// Time at which the backend was deleted.
	DeleteTime *string `pulumi:"deleteTime"`
	// Server-computed checksum based on other values; may be sent
	// on update or delete to ensure operation is done on expected resource.
	Etag *string `pulumi:"etag"`
	// The location the Backend that this Traffic config applies to
	Location *string `pulumi:"location"`
	// Identifier. The resource name of the backend traffic config
	// Format:
	// `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The policy for how builds and rollouts are triggered and rolled out.
	// Structure is documented below.
	RolloutPolicy *AppHostingTrafficRolloutPolicy `pulumi:"rolloutPolicy"`
	// Set to manually control the desired traffic for the backend. This will
	// cause current to eventually match this value. The percentages must add
	// up to 100.
	// Structure is documented below.
	Target *AppHostingTrafficTarget `pulumi:"target"`
	// System-assigned, unique identifier.
	Uid *string `pulumi:"uid"`
	// Time at which the backend was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type AppHostingTrafficState struct {
	// Id of the backend that this Traffic config applies to
	//
	// ***
	Backend pulumi.StringPtrInput
	// Time at which the backend was created.
	CreateTime pulumi.StringPtrInput
	// Current state of traffic allocation for the backend.
	// When setting `target`, this field may differ for some time until the desired state is reached.
	// Structure is documented below.
	Currents AppHostingTrafficCurrentArrayInput
	// Time at which the backend was deleted.
	DeleteTime pulumi.StringPtrInput
	// Server-computed checksum based on other values; may be sent
	// on update or delete to ensure operation is done on expected resource.
	Etag pulumi.StringPtrInput
	// The location the Backend that this Traffic config applies to
	Location pulumi.StringPtrInput
	// Identifier. The resource name of the backend traffic config
	// Format:
	// `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The policy for how builds and rollouts are triggered and rolled out.
	// Structure is documented below.
	RolloutPolicy AppHostingTrafficRolloutPolicyPtrInput
	// Set to manually control the desired traffic for the backend. This will
	// cause current to eventually match this value. The percentages must add
	// up to 100.
	// Structure is documented below.
	Target AppHostingTrafficTargetPtrInput
	// System-assigned, unique identifier.
	Uid pulumi.StringPtrInput
	// Time at which the backend was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (AppHostingTrafficState) ElementType() reflect.Type {
	return reflect.TypeOf((*appHostingTrafficState)(nil)).Elem()
}

type appHostingTrafficArgs struct {
	// Id of the backend that this Traffic config applies to
	//
	// ***
	Backend string `pulumi:"backend"`
	// The location the Backend that this Traffic config applies to
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The policy for how builds and rollouts are triggered and rolled out.
	// Structure is documented below.
	RolloutPolicy *AppHostingTrafficRolloutPolicy `pulumi:"rolloutPolicy"`
	// Set to manually control the desired traffic for the backend. This will
	// cause current to eventually match this value. The percentages must add
	// up to 100.
	// Structure is documented below.
	Target *AppHostingTrafficTarget `pulumi:"target"`
}

// The set of arguments for constructing a AppHostingTraffic resource.
type AppHostingTrafficArgs struct {
	// Id of the backend that this Traffic config applies to
	//
	// ***
	Backend pulumi.StringInput
	// The location the Backend that this Traffic config applies to
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The policy for how builds and rollouts are triggered and rolled out.
	// Structure is documented below.
	RolloutPolicy AppHostingTrafficRolloutPolicyPtrInput
	// Set to manually control the desired traffic for the backend. This will
	// cause current to eventually match this value. The percentages must add
	// up to 100.
	// Structure is documented below.
	Target AppHostingTrafficTargetPtrInput
}

func (AppHostingTrafficArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appHostingTrafficArgs)(nil)).Elem()
}

type AppHostingTrafficInput interface {
	pulumi.Input

	ToAppHostingTrafficOutput() AppHostingTrafficOutput
	ToAppHostingTrafficOutputWithContext(ctx context.Context) AppHostingTrafficOutput
}

func (*AppHostingTraffic) ElementType() reflect.Type {
	return reflect.TypeOf((**AppHostingTraffic)(nil)).Elem()
}

func (i *AppHostingTraffic) ToAppHostingTrafficOutput() AppHostingTrafficOutput {
	return i.ToAppHostingTrafficOutputWithContext(context.Background())
}

func (i *AppHostingTraffic) ToAppHostingTrafficOutputWithContext(ctx context.Context) AppHostingTrafficOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppHostingTrafficOutput)
}

// AppHostingTrafficArrayInput is an input type that accepts AppHostingTrafficArray and AppHostingTrafficArrayOutput values.
// You can construct a concrete instance of `AppHostingTrafficArrayInput` via:
//
//	AppHostingTrafficArray{ AppHostingTrafficArgs{...} }
type AppHostingTrafficArrayInput interface {
	pulumi.Input

	ToAppHostingTrafficArrayOutput() AppHostingTrafficArrayOutput
	ToAppHostingTrafficArrayOutputWithContext(context.Context) AppHostingTrafficArrayOutput
}

type AppHostingTrafficArray []AppHostingTrafficInput

func (AppHostingTrafficArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppHostingTraffic)(nil)).Elem()
}

func (i AppHostingTrafficArray) ToAppHostingTrafficArrayOutput() AppHostingTrafficArrayOutput {
	return i.ToAppHostingTrafficArrayOutputWithContext(context.Background())
}

func (i AppHostingTrafficArray) ToAppHostingTrafficArrayOutputWithContext(ctx context.Context) AppHostingTrafficArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppHostingTrafficArrayOutput)
}

// AppHostingTrafficMapInput is an input type that accepts AppHostingTrafficMap and AppHostingTrafficMapOutput values.
// You can construct a concrete instance of `AppHostingTrafficMapInput` via:
//
//	AppHostingTrafficMap{ "key": AppHostingTrafficArgs{...} }
type AppHostingTrafficMapInput interface {
	pulumi.Input

	ToAppHostingTrafficMapOutput() AppHostingTrafficMapOutput
	ToAppHostingTrafficMapOutputWithContext(context.Context) AppHostingTrafficMapOutput
}

type AppHostingTrafficMap map[string]AppHostingTrafficInput

func (AppHostingTrafficMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppHostingTraffic)(nil)).Elem()
}

func (i AppHostingTrafficMap) ToAppHostingTrafficMapOutput() AppHostingTrafficMapOutput {
	return i.ToAppHostingTrafficMapOutputWithContext(context.Background())
}

func (i AppHostingTrafficMap) ToAppHostingTrafficMapOutputWithContext(ctx context.Context) AppHostingTrafficMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppHostingTrafficMapOutput)
}

type AppHostingTrafficOutput struct{ *pulumi.OutputState }

func (AppHostingTrafficOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppHostingTraffic)(nil)).Elem()
}

func (o AppHostingTrafficOutput) ToAppHostingTrafficOutput() AppHostingTrafficOutput {
	return o
}

func (o AppHostingTrafficOutput) ToAppHostingTrafficOutputWithContext(ctx context.Context) AppHostingTrafficOutput {
	return o
}

// Id of the backend that this Traffic config applies to
//
// ***
func (o AppHostingTrafficOutput) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingTraffic) pulumi.StringOutput { return v.Backend }).(pulumi.StringOutput)
}

// Time at which the backend was created.
func (o AppHostingTrafficOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingTraffic) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Current state of traffic allocation for the backend.
// When setting `target`, this field may differ for some time until the desired state is reached.
// Structure is documented below.
func (o AppHostingTrafficOutput) Currents() AppHostingTrafficCurrentArrayOutput {
	return o.ApplyT(func(v *AppHostingTraffic) AppHostingTrafficCurrentArrayOutput { return v.Currents }).(AppHostingTrafficCurrentArrayOutput)
}

// Time at which the backend was deleted.
func (o AppHostingTrafficOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingTraffic) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// Server-computed checksum based on other values; may be sent
// on update or delete to ensure operation is done on expected resource.
func (o AppHostingTrafficOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingTraffic) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The location the Backend that this Traffic config applies to
func (o AppHostingTrafficOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingTraffic) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name of the backend traffic config
// Format:
// `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
func (o AppHostingTrafficOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingTraffic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AppHostingTrafficOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingTraffic) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The policy for how builds and rollouts are triggered and rolled out.
// Structure is documented below.
func (o AppHostingTrafficOutput) RolloutPolicy() AppHostingTrafficRolloutPolicyPtrOutput {
	return o.ApplyT(func(v *AppHostingTraffic) AppHostingTrafficRolloutPolicyPtrOutput { return v.RolloutPolicy }).(AppHostingTrafficRolloutPolicyPtrOutput)
}

// Set to manually control the desired traffic for the backend. This will
// cause current to eventually match this value. The percentages must add
// up to 100.
// Structure is documented below.
func (o AppHostingTrafficOutput) Target() AppHostingTrafficTargetPtrOutput {
	return o.ApplyT(func(v *AppHostingTraffic) AppHostingTrafficTargetPtrOutput { return v.Target }).(AppHostingTrafficTargetPtrOutput)
}

// System-assigned, unique identifier.
func (o AppHostingTrafficOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingTraffic) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time at which the backend was last updated.
func (o AppHostingTrafficOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingTraffic) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AppHostingTrafficArrayOutput struct{ *pulumi.OutputState }

func (AppHostingTrafficArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppHostingTraffic)(nil)).Elem()
}

func (o AppHostingTrafficArrayOutput) ToAppHostingTrafficArrayOutput() AppHostingTrafficArrayOutput {
	return o
}

func (o AppHostingTrafficArrayOutput) ToAppHostingTrafficArrayOutputWithContext(ctx context.Context) AppHostingTrafficArrayOutput {
	return o
}

func (o AppHostingTrafficArrayOutput) Index(i pulumi.IntInput) AppHostingTrafficOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppHostingTraffic {
		return vs[0].([]*AppHostingTraffic)[vs[1].(int)]
	}).(AppHostingTrafficOutput)
}

type AppHostingTrafficMapOutput struct{ *pulumi.OutputState }

func (AppHostingTrafficMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppHostingTraffic)(nil)).Elem()
}

func (o AppHostingTrafficMapOutput) ToAppHostingTrafficMapOutput() AppHostingTrafficMapOutput {
	return o
}

func (o AppHostingTrafficMapOutput) ToAppHostingTrafficMapOutputWithContext(ctx context.Context) AppHostingTrafficMapOutput {
	return o
}

func (o AppHostingTrafficMapOutput) MapIndex(k pulumi.StringInput) AppHostingTrafficOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppHostingTraffic {
		return vs[0].(map[string]*AppHostingTraffic)[vs[1].(string)]
	}).(AppHostingTrafficOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppHostingTrafficInput)(nil)).Elem(), &AppHostingTraffic{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppHostingTrafficArrayInput)(nil)).Elem(), AppHostingTrafficArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppHostingTrafficMapInput)(nil)).Elem(), AppHostingTrafficMap{})
	pulumi.RegisterOutputType(AppHostingTrafficOutput{})
	pulumi.RegisterOutputType(AppHostingTrafficArrayOutput{})
	pulumi.RegisterOutputType(AppHostingTrafficMapOutput{})
}
