// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Backend is the primary resource of App Hosting.
//
// ## Example Usage
//
// ### Firebase App Hosting Backend Minimal
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// ## Include these blocks only once per project if you are starting from scratch ###
//			serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
//				Project:                   pulumi.String("my-project-name"),
//				AccountId:                 pulumi.String("firebase-app-hosting-compute"),
//				DisplayName:               pulumi.String("Firebase App Hosting compute service account"),
//				CreateIgnoreAlreadyExists: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			fah, err := projects.NewService(ctx, "fah", &projects.ServiceArgs{
//				Project:          pulumi.String("my-project-name"),
//				Service:          pulumi.String("firebaseapphosting.googleapis.com"),
//				DisableOnDestroy: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppHostingBackend(ctx, "example", &firebase.AppHostingBackendArgs{
//				Project:         pulumi.String("my-project-name"),
//				Location:        pulumi.String("us-central1"),
//				BackendId:       pulumi.String("mini"),
//				AppId:           pulumi.String("1:0000000000:web:674cde32020e16fbce9dbd"),
//				ServingLocality: pulumi.String("GLOBAL_ACCESS"),
//				ServiceAccount:  serviceAccount.Email,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				fah,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMMember(ctx, "app_hosting_sa_runner", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/firebaseapphosting.computeRunner"),
//				Member:  serviceAccount.Member,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebase App Hosting Backend Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// ## Include these blocks only once per project if you are starting from scratch ###
//			serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
//				Project:                   pulumi.String("my-project-name"),
//				AccountId:                 pulumi.String("firebase-app-hosting-compute"),
//				DisplayName:               pulumi.String("Firebase App Hosting compute service account"),
//				CreateIgnoreAlreadyExists: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			fah, err := projects.NewService(ctx, "fah", &projects.ServiceArgs{
//				Project:          pulumi.String("my-project-name"),
//				Service:          pulumi.String("firebaseapphosting.googleapis.com"),
//				DisableOnDestroy: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppHostingBackend(ctx, "example", &firebase.AppHostingBackendArgs{
//				Project:         pulumi.String("my-project-name"),
//				Location:        pulumi.String("us-central1"),
//				BackendId:       pulumi.String("full"),
//				AppId:           pulumi.String("1:0000000000:web:674cde32020e16fbce9dbd"),
//				DisplayName:     pulumi.String("My Backend"),
//				ServingLocality: pulumi.String("GLOBAL_ACCESS"),
//				ServiceAccount:  serviceAccount.Email,
//				Environment:     pulumi.String("prod"),
//				Annotations: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//				Labels: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				fah,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMMember(ctx, "app_hosting_sa_developerconnect", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/developerconnect.readTokenAccessor"),
//				Member:  serviceAccount.Member,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMMember(ctx, "app_hosting_sa_adminsdk", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/firebase.sdkAdminServiceAgent"),
//				Member:  serviceAccount.Member,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = projects.NewIAMMember(ctx, "app_hosting_sa_runner", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/firebaseapphosting.computeRunner"),
//				Member:  serviceAccount.Member,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebase App Hosting Backend Github
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/developerconnect"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// ## Include these blocks only once per project if you are starting from scratch ###
//			devconnect_p4sa, err := projects.NewServiceIdentity(ctx, "devconnect-p4sa", &projects.ServiceIdentityArgs{
//				Project: pulumi.String("my-project-name"),
//				Service: pulumi.String("developerconnect.googleapis.com"),
//			})
//			if err != nil {
//				return err
//			}
//			devconnect_secret, err := projects.NewIAMMember(ctx, "devconnect-secret", &projects.IAMMemberArgs{
//				Project: pulumi.String("my-project-name"),
//				Role:    pulumi.String("roles/secretmanager.admin"),
//				Member:  devconnect_p4sa.Member,
//			})
//			if err != nil {
//				return err
//			}
//			// ## Include these blocks only once per Github account ###
//			my_connection, err := developerconnect.NewConnection(ctx, "my-connection", &developerconnect.ConnectionArgs{
//				Project:      pulumi.String("my-project-name"),
//				Location:     pulumi.String("us-central1"),
//				ConnectionId: pulumi.String("tf-test-connection-new"),
//				GithubConfig: &developerconnect.ConnectionGithubConfigArgs{
//					GithubApp: pulumi.String("FIREBASE"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				devconnect_secret,
//			}))
//			if err != nil {
//				return err
//			}
//			my_repository, err := developerconnect.NewGitRepositoryLink(ctx, "my-repository", &developerconnect.GitRepositoryLinkArgs{
//				Project:             pulumi.String("my-project-name"),
//				Location:            pulumi.String("us-central1"),
//				GitRepositoryLinkId: pulumi.String("my-repo"),
//				ParentConnection:    my_connection.ConnectionId,
//				CloneUri:            pulumi.String("https://github.com/myuser/myrepo.git"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppHostingBackend(ctx, "example", &firebase.AppHostingBackendArgs{
//				Project:         pulumi.String("my-project-name"),
//				Location:        pulumi.String("us-central1"),
//				BackendId:       pulumi.String("my-backend-gh"),
//				AppId:           pulumi.String("1:0000000000:web:674cde32020e16fbce9dbd"),
//				DisplayName:     pulumi.String("My Backend"),
//				ServingLocality: pulumi.String("GLOBAL_ACCESS"),
//				ServiceAccount:  pulumi.String("firebase-app-hosting-compute@my-project-name.iam.gserviceaccount.com"),
//				Environment:     pulumi.String("prod"),
//				Annotations: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//				Labels: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//				Codebase: &firebase.AppHostingBackendCodebaseArgs{
//					Repository:    my_repository.Name,
//					RootDirectory: pulumi.String("/"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("nextSteps", my_connection.InstallationStates)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Backend can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/backends/{{backend_id}}`
//
// * `{{project}}/{{location}}/{{backend_id}}`
//
// * `{{location}}/{{backend_id}}`
//
// When using the `pulumi import` command, Backend can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:firebase/appHostingBackend:AppHostingBackend default projects/{{project}}/locations/{{location}}/backends/{{backend_id}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appHostingBackend:AppHostingBackend default {{project}}/{{location}}/{{backend_id}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appHostingBackend:AppHostingBackend default {{location}}/{{backend_id}}
// ```
type AppHostingBackend struct {
	pulumi.CustomResourceState

	// Unstructured key value map that may be set by external tools to
	// store and arbitrary metadata. They are not queryable and should be
	// preserved when modifying objects.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// The [ID of a Web
	// App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
	// associated with the backend.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// Id of the backend. Also used as the service ID for Cloud Run, and as part
	// of the default domain name.
	//
	// ***
	BackendId pulumi.StringOutput `pulumi:"backendId"`
	// The connection to an external source repository to watch for event-driven
	// updates to the backend.
	// Structure is documented below.
	Codebase AppHostingBackendCodebasePtrOutput `pulumi:"codebase"`
	// Time at which the backend was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Time at which the backend was deleted.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// Human-readable name. 63 character limit.
	DisplayName          pulumi.StringPtrOutput `pulumi:"displayName"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// The environment name of the backend, used to load environment variables
	// from environment specific configuration.
	Environment pulumi.StringPtrOutput `pulumi:"environment"`
	// Server-computed checksum based on other values; may be sent
	// on update or delete to ensure operation is done on expected resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Unstructured key value map that can be used to organize and categorize
	// objects.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The canonical IDs of a Google Cloud location such as "us-east1".
	Location pulumi.StringOutput `pulumi:"location"`
	// A list of the resources managed by this backend.
	// Structure is documented below.
	ManagedResources AppHostingBackendManagedResourceArrayOutput `pulumi:"managedResources"`
	// Identifier. The resource name of the backend.
	// Format:
	// `projects/{project}/locations/{locationId}/backends/{backendId}`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// The name of the service account used for Cloud Build and Cloud Run.
	// Should have the role roles/firebaseapphosting.computeRunner
	// or equivalent permissions.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// Immutable. Specifies how App Hosting will serve the content for this backend. It will
	// either be contained to a single region (REGIONAL_STRICT) or allowed to use
	// App Hosting's global-replicated serving infrastructure (GLOBAL_ACCESS).
	// Possible values are: `REGIONAL_STRICT`, `GLOBAL_ACCESS`.
	ServingLocality pulumi.StringOutput `pulumi:"servingLocality"`
	// System-assigned, unique identifier.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time at which the backend was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The primary URI to communicate with the backend.
	Uri pulumi.StringOutput `pulumi:"uri"`
}

// NewAppHostingBackend registers a new resource with the given unique name, arguments, and options.
func NewAppHostingBackend(ctx *pulumi.Context,
	name string, args *AppHostingBackendArgs, opts ...pulumi.ResourceOption) (*AppHostingBackend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.BackendId == nil {
		return nil, errors.New("invalid value for required argument 'BackendId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ServiceAccount == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccount'")
	}
	if args.ServingLocality == nil {
		return nil, errors.New("invalid value for required argument 'ServingLocality'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppHostingBackend
	err := ctx.RegisterResource("gcp:firebase/appHostingBackend:AppHostingBackend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppHostingBackend gets an existing AppHostingBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppHostingBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppHostingBackendState, opts ...pulumi.ResourceOption) (*AppHostingBackend, error) {
	var resource AppHostingBackend
	err := ctx.ReadResource("gcp:firebase/appHostingBackend:AppHostingBackend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppHostingBackend resources.
type appHostingBackendState struct {
	// Unstructured key value map that may be set by external tools to
	// store and arbitrary metadata. They are not queryable and should be
	// preserved when modifying objects.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The [ID of a Web
	// App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
	// associated with the backend.
	AppId *string `pulumi:"appId"`
	// Id of the backend. Also used as the service ID for Cloud Run, and as part
	// of the default domain name.
	//
	// ***
	BackendId *string `pulumi:"backendId"`
	// The connection to an external source repository to watch for event-driven
	// updates to the backend.
	// Structure is documented below.
	Codebase *AppHostingBackendCodebase `pulumi:"codebase"`
	// Time at which the backend was created.
	CreateTime *string `pulumi:"createTime"`
	// Time at which the backend was deleted.
	DeleteTime *string `pulumi:"deleteTime"`
	// Human-readable name. 63 character limit.
	DisplayName          *string           `pulumi:"displayName"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// The environment name of the backend, used to load environment variables
	// from environment specific configuration.
	Environment *string `pulumi:"environment"`
	// Server-computed checksum based on other values; may be sent
	// on update or delete to ensure operation is done on expected resource.
	Etag *string `pulumi:"etag"`
	// Unstructured key value map that can be used to organize and categorize
	// objects.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The canonical IDs of a Google Cloud location such as "us-east1".
	Location *string `pulumi:"location"`
	// A list of the resources managed by this backend.
	// Structure is documented below.
	ManagedResources []AppHostingBackendManagedResource `pulumi:"managedResources"`
	// Identifier. The resource name of the backend.
	// Format:
	// `projects/{project}/locations/{locationId}/backends/{backendId}`.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// The name of the service account used for Cloud Build and Cloud Run.
	// Should have the role roles/firebaseapphosting.computeRunner
	// or equivalent permissions.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Immutable. Specifies how App Hosting will serve the content for this backend. It will
	// either be contained to a single region (REGIONAL_STRICT) or allowed to use
	// App Hosting's global-replicated serving infrastructure (GLOBAL_ACCESS).
	// Possible values are: `REGIONAL_STRICT`, `GLOBAL_ACCESS`.
	ServingLocality *string `pulumi:"servingLocality"`
	// System-assigned, unique identifier.
	Uid *string `pulumi:"uid"`
	// Time at which the backend was last updated.
	UpdateTime *string `pulumi:"updateTime"`
	// The primary URI to communicate with the backend.
	Uri *string `pulumi:"uri"`
}

type AppHostingBackendState struct {
	// Unstructured key value map that may be set by external tools to
	// store and arbitrary metadata. They are not queryable and should be
	// preserved when modifying objects.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The [ID of a Web
	// App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
	// associated with the backend.
	AppId pulumi.StringPtrInput
	// Id of the backend. Also used as the service ID for Cloud Run, and as part
	// of the default domain name.
	//
	// ***
	BackendId pulumi.StringPtrInput
	// The connection to an external source repository to watch for event-driven
	// updates to the backend.
	// Structure is documented below.
	Codebase AppHostingBackendCodebasePtrInput
	// Time at which the backend was created.
	CreateTime pulumi.StringPtrInput
	// Time at which the backend was deleted.
	DeleteTime pulumi.StringPtrInput
	// Human-readable name. 63 character limit.
	DisplayName          pulumi.StringPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// The environment name of the backend, used to load environment variables
	// from environment specific configuration.
	Environment pulumi.StringPtrInput
	// Server-computed checksum based on other values; may be sent
	// on update or delete to ensure operation is done on expected resource.
	Etag pulumi.StringPtrInput
	// Unstructured key value map that can be used to organize and categorize
	// objects.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The canonical IDs of a Google Cloud location such as "us-east1".
	Location pulumi.StringPtrInput
	// A list of the resources managed by this backend.
	// Structure is documented below.
	ManagedResources AppHostingBackendManagedResourceArrayInput
	// Identifier. The resource name of the backend.
	// Format:
	// `projects/{project}/locations/{locationId}/backends/{backendId}`.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// The name of the service account used for Cloud Build and Cloud Run.
	// Should have the role roles/firebaseapphosting.computeRunner
	// or equivalent permissions.
	ServiceAccount pulumi.StringPtrInput
	// Immutable. Specifies how App Hosting will serve the content for this backend. It will
	// either be contained to a single region (REGIONAL_STRICT) or allowed to use
	// App Hosting's global-replicated serving infrastructure (GLOBAL_ACCESS).
	// Possible values are: `REGIONAL_STRICT`, `GLOBAL_ACCESS`.
	ServingLocality pulumi.StringPtrInput
	// System-assigned, unique identifier.
	Uid pulumi.StringPtrInput
	// Time at which the backend was last updated.
	UpdateTime pulumi.StringPtrInput
	// The primary URI to communicate with the backend.
	Uri pulumi.StringPtrInput
}

func (AppHostingBackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*appHostingBackendState)(nil)).Elem()
}

type appHostingBackendArgs struct {
	// Unstructured key value map that may be set by external tools to
	// store and arbitrary metadata. They are not queryable and should be
	// preserved when modifying objects.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// The [ID of a Web
	// App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
	// associated with the backend.
	AppId string `pulumi:"appId"`
	// Id of the backend. Also used as the service ID for Cloud Run, and as part
	// of the default domain name.
	//
	// ***
	BackendId string `pulumi:"backendId"`
	// The connection to an external source repository to watch for event-driven
	// updates to the backend.
	// Structure is documented below.
	Codebase *AppHostingBackendCodebase `pulumi:"codebase"`
	// Human-readable name. 63 character limit.
	DisplayName *string `pulumi:"displayName"`
	// The environment name of the backend, used to load environment variables
	// from environment specific configuration.
	Environment *string `pulumi:"environment"`
	// Unstructured key value map that can be used to organize and categorize
	// objects.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// The canonical IDs of a Google Cloud location such as "us-east1".
	Location string `pulumi:"location"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The name of the service account used for Cloud Build and Cloud Run.
	// Should have the role roles/firebaseapphosting.computeRunner
	// or equivalent permissions.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Immutable. Specifies how App Hosting will serve the content for this backend. It will
	// either be contained to a single region (REGIONAL_STRICT) or allowed to use
	// App Hosting's global-replicated serving infrastructure (GLOBAL_ACCESS).
	// Possible values are: `REGIONAL_STRICT`, `GLOBAL_ACCESS`.
	ServingLocality string `pulumi:"servingLocality"`
}

// The set of arguments for constructing a AppHostingBackend resource.
type AppHostingBackendArgs struct {
	// Unstructured key value map that may be set by external tools to
	// store and arbitrary metadata. They are not queryable and should be
	// preserved when modifying objects.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// The [ID of a Web
	// App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
	// associated with the backend.
	AppId pulumi.StringInput
	// Id of the backend. Also used as the service ID for Cloud Run, and as part
	// of the default domain name.
	//
	// ***
	BackendId pulumi.StringInput
	// The connection to an external source repository to watch for event-driven
	// updates to the backend.
	// Structure is documented below.
	Codebase AppHostingBackendCodebasePtrInput
	// Human-readable name. 63 character limit.
	DisplayName pulumi.StringPtrInput
	// The environment name of the backend, used to load environment variables
	// from environment specific configuration.
	Environment pulumi.StringPtrInput
	// Unstructured key value map that can be used to organize and categorize
	// objects.
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// The canonical IDs of a Google Cloud location such as "us-east1".
	Location pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The name of the service account used for Cloud Build and Cloud Run.
	// Should have the role roles/firebaseapphosting.computeRunner
	// or equivalent permissions.
	ServiceAccount pulumi.StringInput
	// Immutable. Specifies how App Hosting will serve the content for this backend. It will
	// either be contained to a single region (REGIONAL_STRICT) or allowed to use
	// App Hosting's global-replicated serving infrastructure (GLOBAL_ACCESS).
	// Possible values are: `REGIONAL_STRICT`, `GLOBAL_ACCESS`.
	ServingLocality pulumi.StringInput
}

func (AppHostingBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appHostingBackendArgs)(nil)).Elem()
}

type AppHostingBackendInput interface {
	pulumi.Input

	ToAppHostingBackendOutput() AppHostingBackendOutput
	ToAppHostingBackendOutputWithContext(ctx context.Context) AppHostingBackendOutput
}

func (*AppHostingBackend) ElementType() reflect.Type {
	return reflect.TypeOf((**AppHostingBackend)(nil)).Elem()
}

func (i *AppHostingBackend) ToAppHostingBackendOutput() AppHostingBackendOutput {
	return i.ToAppHostingBackendOutputWithContext(context.Background())
}

func (i *AppHostingBackend) ToAppHostingBackendOutputWithContext(ctx context.Context) AppHostingBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppHostingBackendOutput)
}

// AppHostingBackendArrayInput is an input type that accepts AppHostingBackendArray and AppHostingBackendArrayOutput values.
// You can construct a concrete instance of `AppHostingBackendArrayInput` via:
//
//	AppHostingBackendArray{ AppHostingBackendArgs{...} }
type AppHostingBackendArrayInput interface {
	pulumi.Input

	ToAppHostingBackendArrayOutput() AppHostingBackendArrayOutput
	ToAppHostingBackendArrayOutputWithContext(context.Context) AppHostingBackendArrayOutput
}

type AppHostingBackendArray []AppHostingBackendInput

func (AppHostingBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppHostingBackend)(nil)).Elem()
}

func (i AppHostingBackendArray) ToAppHostingBackendArrayOutput() AppHostingBackendArrayOutput {
	return i.ToAppHostingBackendArrayOutputWithContext(context.Background())
}

func (i AppHostingBackendArray) ToAppHostingBackendArrayOutputWithContext(ctx context.Context) AppHostingBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppHostingBackendArrayOutput)
}

// AppHostingBackendMapInput is an input type that accepts AppHostingBackendMap and AppHostingBackendMapOutput values.
// You can construct a concrete instance of `AppHostingBackendMapInput` via:
//
//	AppHostingBackendMap{ "key": AppHostingBackendArgs{...} }
type AppHostingBackendMapInput interface {
	pulumi.Input

	ToAppHostingBackendMapOutput() AppHostingBackendMapOutput
	ToAppHostingBackendMapOutputWithContext(context.Context) AppHostingBackendMapOutput
}

type AppHostingBackendMap map[string]AppHostingBackendInput

func (AppHostingBackendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppHostingBackend)(nil)).Elem()
}

func (i AppHostingBackendMap) ToAppHostingBackendMapOutput() AppHostingBackendMapOutput {
	return i.ToAppHostingBackendMapOutputWithContext(context.Background())
}

func (i AppHostingBackendMap) ToAppHostingBackendMapOutputWithContext(ctx context.Context) AppHostingBackendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppHostingBackendMapOutput)
}

type AppHostingBackendOutput struct{ *pulumi.OutputState }

func (AppHostingBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppHostingBackend)(nil)).Elem()
}

func (o AppHostingBackendOutput) ToAppHostingBackendOutput() AppHostingBackendOutput {
	return o
}

func (o AppHostingBackendOutput) ToAppHostingBackendOutputWithContext(ctx context.Context) AppHostingBackendOutput {
	return o
}

// Unstructured key value map that may be set by external tools to
// store and arbitrary metadata. They are not queryable and should be
// preserved when modifying objects.
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o AppHostingBackendOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// The [ID of a Web
// App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
// associated with the backend.
func (o AppHostingBackendOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// Id of the backend. Also used as the service ID for Cloud Run, and as part
// of the default domain name.
//
// ***
func (o AppHostingBackendOutput) BackendId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringOutput { return v.BackendId }).(pulumi.StringOutput)
}

// The connection to an external source repository to watch for event-driven
// updates to the backend.
// Structure is documented below.
func (o AppHostingBackendOutput) Codebase() AppHostingBackendCodebasePtrOutput {
	return o.ApplyT(func(v *AppHostingBackend) AppHostingBackendCodebasePtrOutput { return v.Codebase }).(AppHostingBackendCodebasePtrOutput)
}

// Time at which the backend was created.
func (o AppHostingBackendOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Time at which the backend was deleted.
func (o AppHostingBackendOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// Human-readable name. 63 character limit.
func (o AppHostingBackendOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o AppHostingBackendOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o AppHostingBackendOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// The environment name of the backend, used to load environment variables
// from environment specific configuration.
func (o AppHostingBackendOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringPtrOutput { return v.Environment }).(pulumi.StringPtrOutput)
}

// Server-computed checksum based on other values; may be sent
// on update or delete to ensure operation is done on expected resource.
func (o AppHostingBackendOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Unstructured key value map that can be used to organize and categorize
// objects.
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o AppHostingBackendOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The canonical IDs of a Google Cloud location such as "us-east1".
func (o AppHostingBackendOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A list of the resources managed by this backend.
// Structure is documented below.
func (o AppHostingBackendOutput) ManagedResources() AppHostingBackendManagedResourceArrayOutput {
	return o.ApplyT(func(v *AppHostingBackend) AppHostingBackendManagedResourceArrayOutput { return v.ManagedResources }).(AppHostingBackendManagedResourceArrayOutput)
}

// Identifier. The resource name of the backend.
// Format:
// `projects/{project}/locations/{locationId}/backends/{backendId}`.
func (o AppHostingBackendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AppHostingBackendOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o AppHostingBackendOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// The name of the service account used for Cloud Build and Cloud Run.
// Should have the role roles/firebaseapphosting.computeRunner
// or equivalent permissions.
func (o AppHostingBackendOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Immutable. Specifies how App Hosting will serve the content for this backend. It will
// either be contained to a single region (REGIONAL_STRICT) or allowed to use
// App Hosting's global-replicated serving infrastructure (GLOBAL_ACCESS).
// Possible values are: `REGIONAL_STRICT`, `GLOBAL_ACCESS`.
func (o AppHostingBackendOutput) ServingLocality() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringOutput { return v.ServingLocality }).(pulumi.StringOutput)
}

// System-assigned, unique identifier.
func (o AppHostingBackendOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time at which the backend was last updated.
func (o AppHostingBackendOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The primary URI to communicate with the backend.
func (o AppHostingBackendOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *AppHostingBackend) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

type AppHostingBackendArrayOutput struct{ *pulumi.OutputState }

func (AppHostingBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppHostingBackend)(nil)).Elem()
}

func (o AppHostingBackendArrayOutput) ToAppHostingBackendArrayOutput() AppHostingBackendArrayOutput {
	return o
}

func (o AppHostingBackendArrayOutput) ToAppHostingBackendArrayOutputWithContext(ctx context.Context) AppHostingBackendArrayOutput {
	return o
}

func (o AppHostingBackendArrayOutput) Index(i pulumi.IntInput) AppHostingBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppHostingBackend {
		return vs[0].([]*AppHostingBackend)[vs[1].(int)]
	}).(AppHostingBackendOutput)
}

type AppHostingBackendMapOutput struct{ *pulumi.OutputState }

func (AppHostingBackendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppHostingBackend)(nil)).Elem()
}

func (o AppHostingBackendMapOutput) ToAppHostingBackendMapOutput() AppHostingBackendMapOutput {
	return o
}

func (o AppHostingBackendMapOutput) ToAppHostingBackendMapOutputWithContext(ctx context.Context) AppHostingBackendMapOutput {
	return o
}

func (o AppHostingBackendMapOutput) MapIndex(k pulumi.StringInput) AppHostingBackendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppHostingBackend {
		return vs[0].(map[string]*AppHostingBackend)[vs[1].(string)]
	}).(AppHostingBackendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppHostingBackendInput)(nil)).Elem(), &AppHostingBackend{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppHostingBackendArrayInput)(nil)).Elem(), AppHostingBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppHostingBackendMapInput)(nil)).Elem(), AppHostingBackendMap{})
	pulumi.RegisterOutputType(AppHostingBackendOutput{})
	pulumi.RegisterOutputType(AppHostingBackendArrayOutput{})
	pulumi.RegisterOutputType(AppHostingBackendMapOutput{})
}
