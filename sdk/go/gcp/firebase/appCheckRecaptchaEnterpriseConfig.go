// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An app's reCAPTCHA Enterprise configuration object.
//
// To get more information about RecaptchaEnterpriseConfig, see:
//
// * [API documentation](https://firebase.google.com/docs/reference/appcheck/rest/v1/projects.apps.recaptchaEnterpriseConfig)
// * How-to Guides
//   - [Official Documentation](https://firebase.google.com/docs/app-check)
//
// ## Example Usage
//
// ### Firebase App Check Recaptcha Enterprise Config Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Enables the reCAPTCHA Enterprise API
//			_, err := projects.NewService(ctx, "recaptcha_enterprise", &projects.ServiceArgs{
//				Project:          pulumi.String("my-project-name"),
//				Service:          pulumi.String("recaptchaenterprise.googleapis.com"),
//				DisableOnDestroy: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_default, err := firebase.NewWebApp(ctx, "default", &firebase.WebAppArgs{
//				Project:     pulumi.String("my-project-name"),
//				DisplayName: pulumi.String("Web App for reCAPTCHA Enterprise"),
//			})
//			if err != nil {
//				return err
//			}
//			// It takes a while for App Check to recognize the new app
//			// If your app already exists, you don't have to wait 30 seconds.
//			wait30s, err := time.NewSleep(ctx, "wait_30s", &time.SleepArgs{
//				CreateDuration: "30s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				_default,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppCheckRecaptchaEnterpriseConfig(ctx, "default", &firebase.AppCheckRecaptchaEnterpriseConfigArgs{
//				Project:  pulumi.String("my-project-name"),
//				AppId:    _default.AppId,
//				SiteKey:  pulumi.String("6LdpMXIpAAAAANkwWQPgEdjEhal7ugkH9RK9ytuw"),
//				TokenTtl: pulumi.String("7200s"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait30s,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RecaptchaEnterpriseConfig can be imported using any of these accepted formats:
//
// * `projects/{{project}}/apps/{{app_id}}/recaptchaEnterpriseConfig`
//
// * `{{project}}/{{app_id}}`
//
// * `{{app_id}}`
//
// When using the `pulumi import` command, RecaptchaEnterpriseConfig can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:firebase/appCheckRecaptchaEnterpriseConfig:AppCheckRecaptchaEnterpriseConfig default projects/{{project}}/apps/{{app_id}}/recaptchaEnterpriseConfig
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appCheckRecaptchaEnterpriseConfig:AppCheckRecaptchaEnterpriseConfig default {{project}}/{{app_id}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appCheckRecaptchaEnterpriseConfig:AppCheckRecaptchaEnterpriseConfig default {{app_id}}
// ```
type AppCheckRecaptchaEnterpriseConfig struct {
	pulumi.CustomResourceState

	// The ID of an
	// [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id).
	//
	// ***
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The relative resource name of the reCAPTCHA Enterprise configuration object
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The score-based site key created in reCAPTCHA Enterprise used to invoke reCAPTCHA and generate the reCAPTCHA tokens for your application.
	// **Important**: This is not the siteSecret (as it is in reCAPTCHA v3), but rather your score-based reCAPTCHA Enterprise site key.
	SiteKey pulumi.StringOutput `pulumi:"siteKey"`
	// Specifies the duration for which App Check tokens exchanged from reCAPTCHA Enterprise artifacts will be valid.
	// If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	TokenTtl pulumi.StringOutput `pulumi:"tokenTtl"`
}

// NewAppCheckRecaptchaEnterpriseConfig registers a new resource with the given unique name, arguments, and options.
func NewAppCheckRecaptchaEnterpriseConfig(ctx *pulumi.Context,
	name string, args *AppCheckRecaptchaEnterpriseConfigArgs, opts ...pulumi.ResourceOption) (*AppCheckRecaptchaEnterpriseConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.SiteKey == nil {
		return nil, errors.New("invalid value for required argument 'SiteKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppCheckRecaptchaEnterpriseConfig
	err := ctx.RegisterResource("gcp:firebase/appCheckRecaptchaEnterpriseConfig:AppCheckRecaptchaEnterpriseConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppCheckRecaptchaEnterpriseConfig gets an existing AppCheckRecaptchaEnterpriseConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppCheckRecaptchaEnterpriseConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppCheckRecaptchaEnterpriseConfigState, opts ...pulumi.ResourceOption) (*AppCheckRecaptchaEnterpriseConfig, error) {
	var resource AppCheckRecaptchaEnterpriseConfig
	err := ctx.ReadResource("gcp:firebase/appCheckRecaptchaEnterpriseConfig:AppCheckRecaptchaEnterpriseConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppCheckRecaptchaEnterpriseConfig resources.
type appCheckRecaptchaEnterpriseConfigState struct {
	// The ID of an
	// [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id).
	//
	// ***
	AppId *string `pulumi:"appId"`
	// The relative resource name of the reCAPTCHA Enterprise configuration object
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The score-based site key created in reCAPTCHA Enterprise used to invoke reCAPTCHA and generate the reCAPTCHA tokens for your application.
	// **Important**: This is not the siteSecret (as it is in reCAPTCHA v3), but rather your score-based reCAPTCHA Enterprise site key.
	SiteKey *string `pulumi:"siteKey"`
	// Specifies the duration for which App Check tokens exchanged from reCAPTCHA Enterprise artifacts will be valid.
	// If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	TokenTtl *string `pulumi:"tokenTtl"`
}

type AppCheckRecaptchaEnterpriseConfigState struct {
	// The ID of an
	// [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id).
	//
	// ***
	AppId pulumi.StringPtrInput
	// The relative resource name of the reCAPTCHA Enterprise configuration object
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The score-based site key created in reCAPTCHA Enterprise used to invoke reCAPTCHA and generate the reCAPTCHA tokens for your application.
	// **Important**: This is not the siteSecret (as it is in reCAPTCHA v3), but rather your score-based reCAPTCHA Enterprise site key.
	SiteKey pulumi.StringPtrInput
	// Specifies the duration for which App Check tokens exchanged from reCAPTCHA Enterprise artifacts will be valid.
	// If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	TokenTtl pulumi.StringPtrInput
}

func (AppCheckRecaptchaEnterpriseConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*appCheckRecaptchaEnterpriseConfigState)(nil)).Elem()
}

type appCheckRecaptchaEnterpriseConfigArgs struct {
	// The ID of an
	// [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id).
	//
	// ***
	AppId string `pulumi:"appId"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The score-based site key created in reCAPTCHA Enterprise used to invoke reCAPTCHA and generate the reCAPTCHA tokens for your application.
	// **Important**: This is not the siteSecret (as it is in reCAPTCHA v3), but rather your score-based reCAPTCHA Enterprise site key.
	SiteKey string `pulumi:"siteKey"`
	// Specifies the duration for which App Check tokens exchanged from reCAPTCHA Enterprise artifacts will be valid.
	// If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	TokenTtl *string `pulumi:"tokenTtl"`
}

// The set of arguments for constructing a AppCheckRecaptchaEnterpriseConfig resource.
type AppCheckRecaptchaEnterpriseConfigArgs struct {
	// The ID of an
	// [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id).
	//
	// ***
	AppId pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The score-based site key created in reCAPTCHA Enterprise used to invoke reCAPTCHA and generate the reCAPTCHA tokens for your application.
	// **Important**: This is not the siteSecret (as it is in reCAPTCHA v3), but rather your score-based reCAPTCHA Enterprise site key.
	SiteKey pulumi.StringInput
	// Specifies the duration for which App Check tokens exchanged from reCAPTCHA Enterprise artifacts will be valid.
	// If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	TokenTtl pulumi.StringPtrInput
}

func (AppCheckRecaptchaEnterpriseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appCheckRecaptchaEnterpriseConfigArgs)(nil)).Elem()
}

type AppCheckRecaptchaEnterpriseConfigInput interface {
	pulumi.Input

	ToAppCheckRecaptchaEnterpriseConfigOutput() AppCheckRecaptchaEnterpriseConfigOutput
	ToAppCheckRecaptchaEnterpriseConfigOutputWithContext(ctx context.Context) AppCheckRecaptchaEnterpriseConfigOutput
}

func (*AppCheckRecaptchaEnterpriseConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AppCheckRecaptchaEnterpriseConfig)(nil)).Elem()
}

func (i *AppCheckRecaptchaEnterpriseConfig) ToAppCheckRecaptchaEnterpriseConfigOutput() AppCheckRecaptchaEnterpriseConfigOutput {
	return i.ToAppCheckRecaptchaEnterpriseConfigOutputWithContext(context.Background())
}

func (i *AppCheckRecaptchaEnterpriseConfig) ToAppCheckRecaptchaEnterpriseConfigOutputWithContext(ctx context.Context) AppCheckRecaptchaEnterpriseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCheckRecaptchaEnterpriseConfigOutput)
}

// AppCheckRecaptchaEnterpriseConfigArrayInput is an input type that accepts AppCheckRecaptchaEnterpriseConfigArray and AppCheckRecaptchaEnterpriseConfigArrayOutput values.
// You can construct a concrete instance of `AppCheckRecaptchaEnterpriseConfigArrayInput` via:
//
//	AppCheckRecaptchaEnterpriseConfigArray{ AppCheckRecaptchaEnterpriseConfigArgs{...} }
type AppCheckRecaptchaEnterpriseConfigArrayInput interface {
	pulumi.Input

	ToAppCheckRecaptchaEnterpriseConfigArrayOutput() AppCheckRecaptchaEnterpriseConfigArrayOutput
	ToAppCheckRecaptchaEnterpriseConfigArrayOutputWithContext(context.Context) AppCheckRecaptchaEnterpriseConfigArrayOutput
}

type AppCheckRecaptchaEnterpriseConfigArray []AppCheckRecaptchaEnterpriseConfigInput

func (AppCheckRecaptchaEnterpriseConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppCheckRecaptchaEnterpriseConfig)(nil)).Elem()
}

func (i AppCheckRecaptchaEnterpriseConfigArray) ToAppCheckRecaptchaEnterpriseConfigArrayOutput() AppCheckRecaptchaEnterpriseConfigArrayOutput {
	return i.ToAppCheckRecaptchaEnterpriseConfigArrayOutputWithContext(context.Background())
}

func (i AppCheckRecaptchaEnterpriseConfigArray) ToAppCheckRecaptchaEnterpriseConfigArrayOutputWithContext(ctx context.Context) AppCheckRecaptchaEnterpriseConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCheckRecaptchaEnterpriseConfigArrayOutput)
}

// AppCheckRecaptchaEnterpriseConfigMapInput is an input type that accepts AppCheckRecaptchaEnterpriseConfigMap and AppCheckRecaptchaEnterpriseConfigMapOutput values.
// You can construct a concrete instance of `AppCheckRecaptchaEnterpriseConfigMapInput` via:
//
//	AppCheckRecaptchaEnterpriseConfigMap{ "key": AppCheckRecaptchaEnterpriseConfigArgs{...} }
type AppCheckRecaptchaEnterpriseConfigMapInput interface {
	pulumi.Input

	ToAppCheckRecaptchaEnterpriseConfigMapOutput() AppCheckRecaptchaEnterpriseConfigMapOutput
	ToAppCheckRecaptchaEnterpriseConfigMapOutputWithContext(context.Context) AppCheckRecaptchaEnterpriseConfigMapOutput
}

type AppCheckRecaptchaEnterpriseConfigMap map[string]AppCheckRecaptchaEnterpriseConfigInput

func (AppCheckRecaptchaEnterpriseConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppCheckRecaptchaEnterpriseConfig)(nil)).Elem()
}

func (i AppCheckRecaptchaEnterpriseConfigMap) ToAppCheckRecaptchaEnterpriseConfigMapOutput() AppCheckRecaptchaEnterpriseConfigMapOutput {
	return i.ToAppCheckRecaptchaEnterpriseConfigMapOutputWithContext(context.Background())
}

func (i AppCheckRecaptchaEnterpriseConfigMap) ToAppCheckRecaptchaEnterpriseConfigMapOutputWithContext(ctx context.Context) AppCheckRecaptchaEnterpriseConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCheckRecaptchaEnterpriseConfigMapOutput)
}

type AppCheckRecaptchaEnterpriseConfigOutput struct{ *pulumi.OutputState }

func (AppCheckRecaptchaEnterpriseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppCheckRecaptchaEnterpriseConfig)(nil)).Elem()
}

func (o AppCheckRecaptchaEnterpriseConfigOutput) ToAppCheckRecaptchaEnterpriseConfigOutput() AppCheckRecaptchaEnterpriseConfigOutput {
	return o
}

func (o AppCheckRecaptchaEnterpriseConfigOutput) ToAppCheckRecaptchaEnterpriseConfigOutputWithContext(ctx context.Context) AppCheckRecaptchaEnterpriseConfigOutput {
	return o
}

// The ID of an
// [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id).
//
// ***
func (o AppCheckRecaptchaEnterpriseConfigOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckRecaptchaEnterpriseConfig) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The relative resource name of the reCAPTCHA Enterprise configuration object
func (o AppCheckRecaptchaEnterpriseConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckRecaptchaEnterpriseConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AppCheckRecaptchaEnterpriseConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckRecaptchaEnterpriseConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The score-based site key created in reCAPTCHA Enterprise used to invoke reCAPTCHA and generate the reCAPTCHA tokens for your application.
// **Important**: This is not the siteSecret (as it is in reCAPTCHA v3), but rather your score-based reCAPTCHA Enterprise site key.
func (o AppCheckRecaptchaEnterpriseConfigOutput) SiteKey() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckRecaptchaEnterpriseConfig) pulumi.StringOutput { return v.SiteKey }).(pulumi.StringOutput)
}

// Specifies the duration for which App Check tokens exchanged from reCAPTCHA Enterprise artifacts will be valid.
// If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
func (o AppCheckRecaptchaEnterpriseConfigOutput) TokenTtl() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckRecaptchaEnterpriseConfig) pulumi.StringOutput { return v.TokenTtl }).(pulumi.StringOutput)
}

type AppCheckRecaptchaEnterpriseConfigArrayOutput struct{ *pulumi.OutputState }

func (AppCheckRecaptchaEnterpriseConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppCheckRecaptchaEnterpriseConfig)(nil)).Elem()
}

func (o AppCheckRecaptchaEnterpriseConfigArrayOutput) ToAppCheckRecaptchaEnterpriseConfigArrayOutput() AppCheckRecaptchaEnterpriseConfigArrayOutput {
	return o
}

func (o AppCheckRecaptchaEnterpriseConfigArrayOutput) ToAppCheckRecaptchaEnterpriseConfigArrayOutputWithContext(ctx context.Context) AppCheckRecaptchaEnterpriseConfigArrayOutput {
	return o
}

func (o AppCheckRecaptchaEnterpriseConfigArrayOutput) Index(i pulumi.IntInput) AppCheckRecaptchaEnterpriseConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppCheckRecaptchaEnterpriseConfig {
		return vs[0].([]*AppCheckRecaptchaEnterpriseConfig)[vs[1].(int)]
	}).(AppCheckRecaptchaEnterpriseConfigOutput)
}

type AppCheckRecaptchaEnterpriseConfigMapOutput struct{ *pulumi.OutputState }

func (AppCheckRecaptchaEnterpriseConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppCheckRecaptchaEnterpriseConfig)(nil)).Elem()
}

func (o AppCheckRecaptchaEnterpriseConfigMapOutput) ToAppCheckRecaptchaEnterpriseConfigMapOutput() AppCheckRecaptchaEnterpriseConfigMapOutput {
	return o
}

func (o AppCheckRecaptchaEnterpriseConfigMapOutput) ToAppCheckRecaptchaEnterpriseConfigMapOutputWithContext(ctx context.Context) AppCheckRecaptchaEnterpriseConfigMapOutput {
	return o
}

func (o AppCheckRecaptchaEnterpriseConfigMapOutput) MapIndex(k pulumi.StringInput) AppCheckRecaptchaEnterpriseConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppCheckRecaptchaEnterpriseConfig {
		return vs[0].(map[string]*AppCheckRecaptchaEnterpriseConfig)[vs[1].(string)]
	}).(AppCheckRecaptchaEnterpriseConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppCheckRecaptchaEnterpriseConfigInput)(nil)).Elem(), &AppCheckRecaptchaEnterpriseConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppCheckRecaptchaEnterpriseConfigArrayInput)(nil)).Elem(), AppCheckRecaptchaEnterpriseConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppCheckRecaptchaEnterpriseConfigMapInput)(nil)).Elem(), AppCheckRecaptchaEnterpriseConfigMap{})
	pulumi.RegisterOutputType(AppCheckRecaptchaEnterpriseConfigOutput{})
	pulumi.RegisterOutputType(AppCheckRecaptchaEnterpriseConfigArrayOutput{})
	pulumi.RegisterOutputType(AppCheckRecaptchaEnterpriseConfigMapOutput{})
}
