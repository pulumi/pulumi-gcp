// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firebase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupAppleApp(ctx *pulumi.Context, args *LookupAppleAppArgs, opts ...pulumi.InvokeOption) (*LookupAppleAppResult, error) {
	var rv LookupAppleAppResult
	err := ctx.Invoke("gcp:firebase/getAppleApp:getAppleApp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAppleApp.
type LookupAppleAppArgs struct {
	// The appId of name of the Firebase iosApp.
	AppId string `pulumi:"appId"`
}

// A collection of values returned by getAppleApp.
type LookupAppleAppResult struct {
	AppId          string `pulumi:"appId"`
	AppStoreId     string `pulumi:"appStoreId"`
	BundleId       string `pulumi:"bundleId"`
	DeletionPolicy string `pulumi:"deletionPolicy"`
	DisplayName    string `pulumi:"displayName"`
	// The provider-assigned unique ID for this managed resource.
	Id      string `pulumi:"id"`
	Name    string `pulumi:"name"`
	Project string `pulumi:"project"`
	TeamId  string `pulumi:"teamId"`
}

func LookupAppleAppOutput(ctx *pulumi.Context, args LookupAppleAppOutputArgs, opts ...pulumi.InvokeOption) LookupAppleAppResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAppleAppResult, error) {
			args := v.(LookupAppleAppArgs)
			r, err := LookupAppleApp(ctx, &args, opts...)
			var s LookupAppleAppResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAppleAppResultOutput)
}

// A collection of arguments for invoking getAppleApp.
type LookupAppleAppOutputArgs struct {
	// The appId of name of the Firebase iosApp.
	AppId pulumi.StringInput `pulumi:"appId"`
}

func (LookupAppleAppOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAppleAppArgs)(nil)).Elem()
}

// A collection of values returned by getAppleApp.
type LookupAppleAppResultOutput struct{ *pulumi.OutputState }

func (LookupAppleAppResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAppleAppResult)(nil)).Elem()
}

func (o LookupAppleAppResultOutput) ToLookupAppleAppResultOutput() LookupAppleAppResultOutput {
	return o
}

func (o LookupAppleAppResultOutput) ToLookupAppleAppResultOutputWithContext(ctx context.Context) LookupAppleAppResultOutput {
	return o
}

func (o LookupAppleAppResultOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppleAppResult) string { return v.AppId }).(pulumi.StringOutput)
}

func (o LookupAppleAppResultOutput) AppStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppleAppResult) string { return v.AppStoreId }).(pulumi.StringOutput)
}

func (o LookupAppleAppResultOutput) BundleId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppleAppResult) string { return v.BundleId }).(pulumi.StringOutput)
}

func (o LookupAppleAppResultOutput) DeletionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppleAppResult) string { return v.DeletionPolicy }).(pulumi.StringOutput)
}

func (o LookupAppleAppResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppleAppResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAppleAppResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppleAppResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupAppleAppResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppleAppResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupAppleAppResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppleAppResult) string { return v.Project }).(pulumi.StringOutput)
}

func (o LookupAppleAppResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppleAppResult) string { return v.TeamId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAppleAppResultOutput{})
}
