// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A debug token is a secret used during the development or integration testing of
// an app. It essentially allows the development or integration testing to bypass
// app attestation while still allowing App Check to enforce protection on supported
// production Firebase services.
//
// To get more information about DebugToken, see:
//
// * [API documentation](https://firebase.google.com/docs/reference/appcheck/rest/v1/projects.apps.debugTokens)
// * How-to Guides
//   - [Official Documentation](https://firebase.google.com/docs/app-check)
//
// ## Example Usage
//
// ### Firebase App Check Debug Token Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := firebase.NewWebApp(ctx, "default", &firebase.WebAppArgs{
//				Project:     pulumi.String("my-project-name"),
//				DisplayName: pulumi.String("Web App for debug token"),
//			})
//			if err != nil {
//				return err
//			}
//			// It takes a while for App Check to recognize the new app
//			// If your app already exists, you don't have to wait 30 seconds.
//			wait30s, err := time.NewSleep(ctx, "wait_30s", &time.SleepArgs{
//				CreateDuration: "30s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				_default,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewAppCheckDebugToken(ctx, "default", &firebase.AppCheckDebugTokenArgs{
//				Project:     pulumi.String("my-project-name"),
//				AppId:       _default.AppId,
//				DisplayName: pulumi.String("Debug Token"),
//				Token:       pulumi.String("00000000-AAAA-BBBB-CCCC-000000000000"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait30s,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DebugToken can be imported using any of these accepted formats:
//
// * `projects/{{project}}/apps/{{app_id}}/debugTokens/{{debug_token_id}}`
//
// * `{{project}}/{{app_id}}/{{debug_token_id}}`
//
// * `{{app_id}}/{{debug_token_id}}`
//
// When using the `pulumi import` command, DebugToken can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:firebase/appCheckDebugToken:AppCheckDebugToken default projects/{{project}}/apps/{{app_id}}/debugTokens/{{debug_token_id}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appCheckDebugToken:AppCheckDebugToken default {{project}}/{{app_id}}/{{debug_token_id}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/appCheckDebugToken:AppCheckDebugToken default {{app_id}}/{{debug_token_id}}
// ```
type AppCheckDebugToken struct {
	pulumi.CustomResourceState

	// The ID of a
	// [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id),
	// [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id),
	// or [Android App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.androidApps#AndroidApp.FIELDS.app_id)
	//
	// ***
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The last segment of the resource name of the debug token.
	DebugTokenId pulumi.StringOutput `pulumi:"debugTokenId"`
	// A human readable display name used to identify this debug token.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The secret token itself. Must be provided during creation, and must be a UUID4,
	// case insensitive. You may use a method of your choice such as random/random_uuid
	// to generate the token.
	// This field is immutable once set, and cannot be updated. You can, however, delete
	// this debug token to revoke it.
	// For security reasons, this field will never be populated in any response.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Token pulumi.StringOutput `pulumi:"token"`
}

// NewAppCheckDebugToken registers a new resource with the given unique name, arguments, and options.
func NewAppCheckDebugToken(ctx *pulumi.Context,
	name string, args *AppCheckDebugTokenArgs, opts ...pulumi.ResourceOption) (*AppCheckDebugToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppCheckDebugToken
	err := ctx.RegisterResource("gcp:firebase/appCheckDebugToken:AppCheckDebugToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppCheckDebugToken gets an existing AppCheckDebugToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppCheckDebugToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppCheckDebugTokenState, opts ...pulumi.ResourceOption) (*AppCheckDebugToken, error) {
	var resource AppCheckDebugToken
	err := ctx.ReadResource("gcp:firebase/appCheckDebugToken:AppCheckDebugToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppCheckDebugToken resources.
type appCheckDebugTokenState struct {
	// The ID of a
	// [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id),
	// [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id),
	// or [Android App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.androidApps#AndroidApp.FIELDS.app_id)
	//
	// ***
	AppId *string `pulumi:"appId"`
	// The last segment of the resource name of the debug token.
	DebugTokenId *string `pulumi:"debugTokenId"`
	// A human readable display name used to identify this debug token.
	DisplayName *string `pulumi:"displayName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The secret token itself. Must be provided during creation, and must be a UUID4,
	// case insensitive. You may use a method of your choice such as random/random_uuid
	// to generate the token.
	// This field is immutable once set, and cannot be updated. You can, however, delete
	// this debug token to revoke it.
	// For security reasons, this field will never be populated in any response.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Token *string `pulumi:"token"`
}

type AppCheckDebugTokenState struct {
	// The ID of a
	// [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id),
	// [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id),
	// or [Android App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.androidApps#AndroidApp.FIELDS.app_id)
	//
	// ***
	AppId pulumi.StringPtrInput
	// The last segment of the resource name of the debug token.
	DebugTokenId pulumi.StringPtrInput
	// A human readable display name used to identify this debug token.
	DisplayName pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The secret token itself. Must be provided during creation, and must be a UUID4,
	// case insensitive. You may use a method of your choice such as random/random_uuid
	// to generate the token.
	// This field is immutable once set, and cannot be updated. You can, however, delete
	// this debug token to revoke it.
	// For security reasons, this field will never be populated in any response.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Token pulumi.StringPtrInput
}

func (AppCheckDebugTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*appCheckDebugTokenState)(nil)).Elem()
}

type appCheckDebugTokenArgs struct {
	// The ID of a
	// [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id),
	// [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id),
	// or [Android App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.androidApps#AndroidApp.FIELDS.app_id)
	//
	// ***
	AppId string `pulumi:"appId"`
	// A human readable display name used to identify this debug token.
	DisplayName string `pulumi:"displayName"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The secret token itself. Must be provided during creation, and must be a UUID4,
	// case insensitive. You may use a method of your choice such as random/random_uuid
	// to generate the token.
	// This field is immutable once set, and cannot be updated. You can, however, delete
	// this debug token to revoke it.
	// For security reasons, this field will never be populated in any response.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Token string `pulumi:"token"`
}

// The set of arguments for constructing a AppCheckDebugToken resource.
type AppCheckDebugTokenArgs struct {
	// The ID of a
	// [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id),
	// [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id),
	// or [Android App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.androidApps#AndroidApp.FIELDS.app_id)
	//
	// ***
	AppId pulumi.StringInput
	// A human readable display name used to identify this debug token.
	DisplayName pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The secret token itself. Must be provided during creation, and must be a UUID4,
	// case insensitive. You may use a method of your choice such as random/random_uuid
	// to generate the token.
	// This field is immutable once set, and cannot be updated. You can, however, delete
	// this debug token to revoke it.
	// For security reasons, this field will never be populated in any response.
	// **Note**: This property is sensitive and will not be displayed in the plan.
	Token pulumi.StringInput
}

func (AppCheckDebugTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appCheckDebugTokenArgs)(nil)).Elem()
}

type AppCheckDebugTokenInput interface {
	pulumi.Input

	ToAppCheckDebugTokenOutput() AppCheckDebugTokenOutput
	ToAppCheckDebugTokenOutputWithContext(ctx context.Context) AppCheckDebugTokenOutput
}

func (*AppCheckDebugToken) ElementType() reflect.Type {
	return reflect.TypeOf((**AppCheckDebugToken)(nil)).Elem()
}

func (i *AppCheckDebugToken) ToAppCheckDebugTokenOutput() AppCheckDebugTokenOutput {
	return i.ToAppCheckDebugTokenOutputWithContext(context.Background())
}

func (i *AppCheckDebugToken) ToAppCheckDebugTokenOutputWithContext(ctx context.Context) AppCheckDebugTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCheckDebugTokenOutput)
}

// AppCheckDebugTokenArrayInput is an input type that accepts AppCheckDebugTokenArray and AppCheckDebugTokenArrayOutput values.
// You can construct a concrete instance of `AppCheckDebugTokenArrayInput` via:
//
//	AppCheckDebugTokenArray{ AppCheckDebugTokenArgs{...} }
type AppCheckDebugTokenArrayInput interface {
	pulumi.Input

	ToAppCheckDebugTokenArrayOutput() AppCheckDebugTokenArrayOutput
	ToAppCheckDebugTokenArrayOutputWithContext(context.Context) AppCheckDebugTokenArrayOutput
}

type AppCheckDebugTokenArray []AppCheckDebugTokenInput

func (AppCheckDebugTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppCheckDebugToken)(nil)).Elem()
}

func (i AppCheckDebugTokenArray) ToAppCheckDebugTokenArrayOutput() AppCheckDebugTokenArrayOutput {
	return i.ToAppCheckDebugTokenArrayOutputWithContext(context.Background())
}

func (i AppCheckDebugTokenArray) ToAppCheckDebugTokenArrayOutputWithContext(ctx context.Context) AppCheckDebugTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCheckDebugTokenArrayOutput)
}

// AppCheckDebugTokenMapInput is an input type that accepts AppCheckDebugTokenMap and AppCheckDebugTokenMapOutput values.
// You can construct a concrete instance of `AppCheckDebugTokenMapInput` via:
//
//	AppCheckDebugTokenMap{ "key": AppCheckDebugTokenArgs{...} }
type AppCheckDebugTokenMapInput interface {
	pulumi.Input

	ToAppCheckDebugTokenMapOutput() AppCheckDebugTokenMapOutput
	ToAppCheckDebugTokenMapOutputWithContext(context.Context) AppCheckDebugTokenMapOutput
}

type AppCheckDebugTokenMap map[string]AppCheckDebugTokenInput

func (AppCheckDebugTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppCheckDebugToken)(nil)).Elem()
}

func (i AppCheckDebugTokenMap) ToAppCheckDebugTokenMapOutput() AppCheckDebugTokenMapOutput {
	return i.ToAppCheckDebugTokenMapOutputWithContext(context.Background())
}

func (i AppCheckDebugTokenMap) ToAppCheckDebugTokenMapOutputWithContext(ctx context.Context) AppCheckDebugTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCheckDebugTokenMapOutput)
}

type AppCheckDebugTokenOutput struct{ *pulumi.OutputState }

func (AppCheckDebugTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppCheckDebugToken)(nil)).Elem()
}

func (o AppCheckDebugTokenOutput) ToAppCheckDebugTokenOutput() AppCheckDebugTokenOutput {
	return o
}

func (o AppCheckDebugTokenOutput) ToAppCheckDebugTokenOutputWithContext(ctx context.Context) AppCheckDebugTokenOutput {
	return o
}

// The ID of a
// [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id),
// [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id),
// or [Android App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.androidApps#AndroidApp.FIELDS.app_id)
//
// ***
func (o AppCheckDebugTokenOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckDebugToken) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The last segment of the resource name of the debug token.
func (o AppCheckDebugTokenOutput) DebugTokenId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckDebugToken) pulumi.StringOutput { return v.DebugTokenId }).(pulumi.StringOutput)
}

// A human readable display name used to identify this debug token.
func (o AppCheckDebugTokenOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckDebugToken) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AppCheckDebugTokenOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckDebugToken) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The secret token itself. Must be provided during creation, and must be a UUID4,
// case insensitive. You may use a method of your choice such as random/random_uuid
// to generate the token.
// This field is immutable once set, and cannot be updated. You can, however, delete
// this debug token to revoke it.
// For security reasons, this field will never be populated in any response.
// **Note**: This property is sensitive and will not be displayed in the plan.
func (o AppCheckDebugTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *AppCheckDebugToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

type AppCheckDebugTokenArrayOutput struct{ *pulumi.OutputState }

func (AppCheckDebugTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppCheckDebugToken)(nil)).Elem()
}

func (o AppCheckDebugTokenArrayOutput) ToAppCheckDebugTokenArrayOutput() AppCheckDebugTokenArrayOutput {
	return o
}

func (o AppCheckDebugTokenArrayOutput) ToAppCheckDebugTokenArrayOutputWithContext(ctx context.Context) AppCheckDebugTokenArrayOutput {
	return o
}

func (o AppCheckDebugTokenArrayOutput) Index(i pulumi.IntInput) AppCheckDebugTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppCheckDebugToken {
		return vs[0].([]*AppCheckDebugToken)[vs[1].(int)]
	}).(AppCheckDebugTokenOutput)
}

type AppCheckDebugTokenMapOutput struct{ *pulumi.OutputState }

func (AppCheckDebugTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppCheckDebugToken)(nil)).Elem()
}

func (o AppCheckDebugTokenMapOutput) ToAppCheckDebugTokenMapOutput() AppCheckDebugTokenMapOutput {
	return o
}

func (o AppCheckDebugTokenMapOutput) ToAppCheckDebugTokenMapOutputWithContext(ctx context.Context) AppCheckDebugTokenMapOutput {
	return o
}

func (o AppCheckDebugTokenMapOutput) MapIndex(k pulumi.StringInput) AppCheckDebugTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppCheckDebugToken {
		return vs[0].(map[string]*AppCheckDebugToken)[vs[1].(string)]
	}).(AppCheckDebugTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppCheckDebugTokenInput)(nil)).Elem(), &AppCheckDebugToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppCheckDebugTokenArrayInput)(nil)).Elem(), AppCheckDebugTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppCheckDebugTokenMapInput)(nil)).Elem(), AppCheckDebugTokenMap{})
	pulumi.RegisterOutputType(AppCheckDebugTokenOutput{})
	pulumi.RegisterOutputType(AppCheckDebugTokenArrayOutput{})
	pulumi.RegisterOutputType(AppCheckDebugTokenMapOutput{})
}
