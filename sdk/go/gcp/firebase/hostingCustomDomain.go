// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Firebasehosting Customdomain Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firebase.NewHostingCustomDomain(ctx, "default", &firebase.HostingCustomDomainArgs{
//				Project:      pulumi.String("my-project-name"),
//				SiteId:       pulumi.String("site-id"),
//				CustomDomain: pulumi.String("custom.domain.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebasehosting Customdomain Full
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firebase.NewHostingSite(ctx, "default", &firebase.HostingSiteArgs{
//				Project: pulumi.String("my-project-name"),
//				SiteId:  pulumi.String("site-id-full"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewHostingCustomDomain(ctx, "default", &firebase.HostingCustomDomainArgs{
//				Project:             pulumi.String("my-project-name"),
//				SiteId:              _default.SiteId,
//				CustomDomain:        pulumi.String("source.domain.com"),
//				CertPreference:      pulumi.String("GROUPED"),
//				RedirectTarget:      pulumi.String("destination.domain.com"),
//				WaitDnsVerification: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Firebasehosting Customdomain Cloud Run
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/cloudrunv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/firebase"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firebase.NewHostingSite(ctx, "default", &firebase.HostingSiteArgs{
//				Project: pulumi.String("my-project-name"),
//				SiteId:  pulumi.String("site-id"),
//			})
//			if err != nil {
//				return err
//			}
//			defaultService, err := cloudrunv2.NewService(ctx, "default", &cloudrunv2.ServiceArgs{
//				Project:  pulumi.String("my-project-name"),
//				Name:     pulumi.String("cloud-run-service-via-hosting"),
//				Location: pulumi.String("us-central1"),
//				Ingress:  pulumi.String("INGRESS_TRAFFIC_ALL"),
//				Template: &cloudrunv2.ServiceTemplateArgs{
//					Containers: cloudrunv2.ServiceTemplateContainerArray{
//						&cloudrunv2.ServiceTemplateContainerArgs{
//							Image: pulumi.String("us-docker.pkg.dev/cloudrun/container/hello"),
//						},
//					},
//				},
//				DeletionProtection: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			defaultHostingVersion, err := firebase.NewHostingVersion(ctx, "default", &firebase.HostingVersionArgs{
//				SiteId: _default.SiteId,
//				Config: &firebase.HostingVersionConfigArgs{
//					Rewrites: firebase.HostingVersionConfigRewriteArray{
//						&firebase.HostingVersionConfigRewriteArgs{
//							Glob: pulumi.String("/hello/**"),
//							Run: &firebase.HostingVersionConfigRewriteRunArgs{
//								ServiceId: defaultService.Name,
//								Region:    defaultService.Location,
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewHostingRelease(ctx, "default", &firebase.HostingReleaseArgs{
//				SiteId:      _default.SiteId,
//				VersionName: defaultHostingVersion.Name,
//				Message:     pulumi.String("Cloud Run Integration"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firebase.NewHostingCustomDomain(ctx, "default", &firebase.HostingCustomDomainArgs{
//				Project:             pulumi.String("my-project-name"),
//				SiteId:              _default.SiteId,
//				CustomDomain:        pulumi.String("run.custom.domain.com"),
//				WaitDnsVerification: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CustomDomain can be imported using any of these accepted formats:
//
// * `projects/{{project}}/sites/{{site_id}}/customDomains/{{custom_domain}}`
//
// * `sites/{{site_id}}/customDomains/{{custom_domain}}`
//
// * `{{project}}/{{site_id}}/{{custom_domain}}`
//
// * `{{site_id}}/{{custom_domain}}`
//
// When using the `pulumi import` command, CustomDomain can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:firebase/hostingCustomDomain:HostingCustomDomain default projects/{{project}}/sites/{{site_id}}/customDomains/{{custom_domain}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/hostingCustomDomain:HostingCustomDomain default sites/{{site_id}}/customDomains/{{custom_domain}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/hostingCustomDomain:HostingCustomDomain default {{project}}/{{site_id}}/{{custom_domain}}
// ```
//
// ```sh
// $ pulumi import gcp:firebase/hostingCustomDomain:HostingCustomDomain default {{site_id}}/{{custom_domain}}
// ```
type HostingCustomDomain struct {
	pulumi.CustomResourceState

	// A field that lets you specify which SSL certificate type Hosting creates
	// for your domain name. Spark plan `CustomDomain`s only have access to the
	// `GROUPED` cert type, while Blaze plan can select any option.
	// Possible values are: `GROUPED`, `PROJECT_GROUPED`, `DEDICATED`.
	CertPreference pulumi.StringOutput `pulumi:"certPreference"`
	// The SSL certificate Hosting has for this `CustomDomain`'s domain name.
	// For new `CustomDomain`s, this often represents Hosting's intent to create
	// a certificate, rather than an actual cert. Check the `state` field for
	// more.
	// Structure is documented below.
	Certs HostingCustomDomainCertArrayOutput `pulumi:"certs"`
	// The `CustomDomain`'s create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.
	//
	// ***
	CustomDomain pulumi.StringOutput `pulumi:"customDomain"`
	// The time the `CustomDomain` was deleted; null for `CustomDomains` that
	// haven't been deleted. Deleted `CustomDomains` persist for approximately 30
	// days, after which time Hosting removes them completely.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// A string that represents the current state of the `CustomDomain` and
	// allows you to confirm its initial state in requests that would modify it.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The minimum time before a soft-deleted `CustomDomain` is completely removed
	// from Hosting; null for `CustomDomains` that haven't been deleted.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// The host state of your domain name. Host state is determined by checking each
	// IP address associated with your domain name to see if it's serving
	// Hosting content.
	// HOST_UNHOSTED:
	// Your `CustomDomain`'s domain name isn't associated with any IP addresses.
	// HOST_UNREACHABLE:
	// Your `CustomDomain`'s domain name can't be reached. Hosting services' DNS
	// queries to find your domain name's IP addresses resulted in errors. See
	// your `CustomDomain`'s `issues` field for more details.
	// HOST_MISMATCH:
	// Your `CustomDomain`'s domain name has IP addresses that don't ultimately
	// resolve to Hosting.
	// HOST_CONFLICT:
	// Your `CustomDomain`'s domain name has IP addresses that resolve to both
	// Hosting and other services. To ensure consistent results, remove `A` and
	// `AAAA` records related to non-Hosting services.
	// HOST_ACTIVE:
	// All requests against your `CustomDomain`'s domain name are served by
	// Hosting. If the `CustomDomain`'s `OwnershipState` is also `ACTIVE`, Hosting
	// serves your Hosting Site's content on the domain name.
	HostState pulumi.StringOutput `pulumi:"hostState"`
	// A set of errors Hosting systems encountered when trying to establish
	// Hosting's ability to serve secure content for your domain name. Resolve
	// these issues to ensure your `CustomDomain` behaves properly.
	// Structure is documented below.
	Issues HostingCustomDomainIssueArrayOutput `pulumi:"issues"`
	// The fully-qualified name of the `CustomDomain`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ownership state of your domain name. Ownership is determined at a
	// Firebase project level, and established by adding `TXT` records to your
	// domain name's DNS records.
	// Ownership cascades to subdomains. Granting a project ownership of `foo.com`
	// also grants that project ownership over `bar.foo.com`, unless you add
	// specific `TXT` records to `bar.foo.com` that grant a different project
	// ownership.
	// If your `CustomDomain` is in an `OwnershipState` other than
	// `OWNERSHIP_ACTIVE` for more than 30 days and it hasn't been updated in at
	// least 30 days, Hosting's ownership systems delete the `CustomDomain`.
	// OWNERSHIP_MISSING:
	// Your `CustomDomain`'s domain name has no Hosting-related ownership records;
	// no Firebase project has permission to act on the domain name's behalf.
	// OWNERSHIP_UNREACHABLE:
	// Your `CustomDomain`'s domain name can't be reached. Hosting services' DNS
	// queries to find your domain name's ownership records resulted in errors.
	// See your `CustomDomain`'s `issues` field for more details.
	// OWNERSHIP_MISMATCH:
	// Your `CustomDomain`'s domain name is owned by another Firebase project.
	// Remove the conflicting `TXT` records and replace them with project-specific
	// records for your current Firebase project.
	// OWNERSHIP_CONFLICT:
	// Your `CustomDomain`'s domain name has conflicting `TXT` records that
	// indicate ownership by both your current Firebase project and another
	// project. Remove the other project's ownership records to grant the current
	// project ownership.
	// OWNERSHIP_PENDING:
	// Your `CustomDomain`'s DNS records are configured correctly. Hosting will
	// transfer ownership of your domain to this `CustomDomain` within 24 hours.
	// OWNERSHIP_ACTIVE:
	// Your `CustomDomain`'s domain name has `TXT` records that grant its project
	// permission to act on its behalf.
	OwnershipState pulumi.StringOutput `pulumi:"ownershipState"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// if true, indicates that Hosting's systems are attempting to
	// make the `CustomDomain`'s state match your preferred state. This is most
	// frequently `true` when initially provisioning a `CustomDomain` or when creating
	// a new SSL certificate to match an updated `certPreference`
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// A domain name that this CustomDomain should direct traffic towards. If
	// specified, Hosting will respond to requests against this CustomDomain
	// with an HTTP 301 code, and route traffic to the specified `redirectTarget`
	// instead.
	RedirectTarget pulumi.StringPtrOutput `pulumi:"redirectTarget"`
	// A set of updates you should make to the domain name's DNS records to
	// let Hosting serve secure content on its behalf.
	// Structure is documented below.
	RequiredDnsUpdates HostingCustomDomainRequiredDnsUpdateArrayOutput `pulumi:"requiredDnsUpdates"`
	// The ID of the site in which to create this custom domain association.
	SiteId pulumi.StringOutput `pulumi:"siteId"`
	// The last time the `CustomDomain` was updated.
	UpdateTime          pulumi.StringOutput  `pulumi:"updateTime"`
	WaitDnsVerification pulumi.BoolPtrOutput `pulumi:"waitDnsVerification"`
}

// NewHostingCustomDomain registers a new resource with the given unique name, arguments, and options.
func NewHostingCustomDomain(ctx *pulumi.Context,
	name string, args *HostingCustomDomainArgs, opts ...pulumi.ResourceOption) (*HostingCustomDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomDomain == nil {
		return nil, errors.New("invalid value for required argument 'CustomDomain'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostingCustomDomain
	err := ctx.RegisterResource("gcp:firebase/hostingCustomDomain:HostingCustomDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostingCustomDomain gets an existing HostingCustomDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostingCustomDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostingCustomDomainState, opts ...pulumi.ResourceOption) (*HostingCustomDomain, error) {
	var resource HostingCustomDomain
	err := ctx.ReadResource("gcp:firebase/hostingCustomDomain:HostingCustomDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostingCustomDomain resources.
type hostingCustomDomainState struct {
	// A field that lets you specify which SSL certificate type Hosting creates
	// for your domain name. Spark plan `CustomDomain`s only have access to the
	// `GROUPED` cert type, while Blaze plan can select any option.
	// Possible values are: `GROUPED`, `PROJECT_GROUPED`, `DEDICATED`.
	CertPreference *string `pulumi:"certPreference"`
	// The SSL certificate Hosting has for this `CustomDomain`'s domain name.
	// For new `CustomDomain`s, this often represents Hosting's intent to create
	// a certificate, rather than an actual cert. Check the `state` field for
	// more.
	// Structure is documented below.
	Certs []HostingCustomDomainCert `pulumi:"certs"`
	// The `CustomDomain`'s create time.
	CreateTime *string `pulumi:"createTime"`
	// The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.
	//
	// ***
	CustomDomain *string `pulumi:"customDomain"`
	// The time the `CustomDomain` was deleted; null for `CustomDomains` that
	// haven't been deleted. Deleted `CustomDomains` persist for approximately 30
	// days, after which time Hosting removes them completely.
	DeleteTime *string `pulumi:"deleteTime"`
	// A string that represents the current state of the `CustomDomain` and
	// allows you to confirm its initial state in requests that would modify it.
	Etag *string `pulumi:"etag"`
	// The minimum time before a soft-deleted `CustomDomain` is completely removed
	// from Hosting; null for `CustomDomains` that haven't been deleted.
	ExpireTime *string `pulumi:"expireTime"`
	// The host state of your domain name. Host state is determined by checking each
	// IP address associated with your domain name to see if it's serving
	// Hosting content.
	// HOST_UNHOSTED:
	// Your `CustomDomain`'s domain name isn't associated with any IP addresses.
	// HOST_UNREACHABLE:
	// Your `CustomDomain`'s domain name can't be reached. Hosting services' DNS
	// queries to find your domain name's IP addresses resulted in errors. See
	// your `CustomDomain`'s `issues` field for more details.
	// HOST_MISMATCH:
	// Your `CustomDomain`'s domain name has IP addresses that don't ultimately
	// resolve to Hosting.
	// HOST_CONFLICT:
	// Your `CustomDomain`'s domain name has IP addresses that resolve to both
	// Hosting and other services. To ensure consistent results, remove `A` and
	// `AAAA` records related to non-Hosting services.
	// HOST_ACTIVE:
	// All requests against your `CustomDomain`'s domain name are served by
	// Hosting. If the `CustomDomain`'s `OwnershipState` is also `ACTIVE`, Hosting
	// serves your Hosting Site's content on the domain name.
	HostState *string `pulumi:"hostState"`
	// A set of errors Hosting systems encountered when trying to establish
	// Hosting's ability to serve secure content for your domain name. Resolve
	// these issues to ensure your `CustomDomain` behaves properly.
	// Structure is documented below.
	Issues []HostingCustomDomainIssue `pulumi:"issues"`
	// The fully-qualified name of the `CustomDomain`.
	Name *string `pulumi:"name"`
	// The ownership state of your domain name. Ownership is determined at a
	// Firebase project level, and established by adding `TXT` records to your
	// domain name's DNS records.
	// Ownership cascades to subdomains. Granting a project ownership of `foo.com`
	// also grants that project ownership over `bar.foo.com`, unless you add
	// specific `TXT` records to `bar.foo.com` that grant a different project
	// ownership.
	// If your `CustomDomain` is in an `OwnershipState` other than
	// `OWNERSHIP_ACTIVE` for more than 30 days and it hasn't been updated in at
	// least 30 days, Hosting's ownership systems delete the `CustomDomain`.
	// OWNERSHIP_MISSING:
	// Your `CustomDomain`'s domain name has no Hosting-related ownership records;
	// no Firebase project has permission to act on the domain name's behalf.
	// OWNERSHIP_UNREACHABLE:
	// Your `CustomDomain`'s domain name can't be reached. Hosting services' DNS
	// queries to find your domain name's ownership records resulted in errors.
	// See your `CustomDomain`'s `issues` field for more details.
	// OWNERSHIP_MISMATCH:
	// Your `CustomDomain`'s domain name is owned by another Firebase project.
	// Remove the conflicting `TXT` records and replace them with project-specific
	// records for your current Firebase project.
	// OWNERSHIP_CONFLICT:
	// Your `CustomDomain`'s domain name has conflicting `TXT` records that
	// indicate ownership by both your current Firebase project and another
	// project. Remove the other project's ownership records to grant the current
	// project ownership.
	// OWNERSHIP_PENDING:
	// Your `CustomDomain`'s DNS records are configured correctly. Hosting will
	// transfer ownership of your domain to this `CustomDomain` within 24 hours.
	// OWNERSHIP_ACTIVE:
	// Your `CustomDomain`'s domain name has `TXT` records that grant its project
	// permission to act on its behalf.
	OwnershipState *string `pulumi:"ownershipState"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// if true, indicates that Hosting's systems are attempting to
	// make the `CustomDomain`'s state match your preferred state. This is most
	// frequently `true` when initially provisioning a `CustomDomain` or when creating
	// a new SSL certificate to match an updated `certPreference`
	Reconciling *bool `pulumi:"reconciling"`
	// A domain name that this CustomDomain should direct traffic towards. If
	// specified, Hosting will respond to requests against this CustomDomain
	// with an HTTP 301 code, and route traffic to the specified `redirectTarget`
	// instead.
	RedirectTarget *string `pulumi:"redirectTarget"`
	// A set of updates you should make to the domain name's DNS records to
	// let Hosting serve secure content on its behalf.
	// Structure is documented below.
	RequiredDnsUpdates []HostingCustomDomainRequiredDnsUpdate `pulumi:"requiredDnsUpdates"`
	// The ID of the site in which to create this custom domain association.
	SiteId *string `pulumi:"siteId"`
	// The last time the `CustomDomain` was updated.
	UpdateTime          *string `pulumi:"updateTime"`
	WaitDnsVerification *bool   `pulumi:"waitDnsVerification"`
}

type HostingCustomDomainState struct {
	// A field that lets you specify which SSL certificate type Hosting creates
	// for your domain name. Spark plan `CustomDomain`s only have access to the
	// `GROUPED` cert type, while Blaze plan can select any option.
	// Possible values are: `GROUPED`, `PROJECT_GROUPED`, `DEDICATED`.
	CertPreference pulumi.StringPtrInput
	// The SSL certificate Hosting has for this `CustomDomain`'s domain name.
	// For new `CustomDomain`s, this often represents Hosting's intent to create
	// a certificate, rather than an actual cert. Check the `state` field for
	// more.
	// Structure is documented below.
	Certs HostingCustomDomainCertArrayInput
	// The `CustomDomain`'s create time.
	CreateTime pulumi.StringPtrInput
	// The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.
	//
	// ***
	CustomDomain pulumi.StringPtrInput
	// The time the `CustomDomain` was deleted; null for `CustomDomains` that
	// haven't been deleted. Deleted `CustomDomains` persist for approximately 30
	// days, after which time Hosting removes them completely.
	DeleteTime pulumi.StringPtrInput
	// A string that represents the current state of the `CustomDomain` and
	// allows you to confirm its initial state in requests that would modify it.
	Etag pulumi.StringPtrInput
	// The minimum time before a soft-deleted `CustomDomain` is completely removed
	// from Hosting; null for `CustomDomains` that haven't been deleted.
	ExpireTime pulumi.StringPtrInput
	// The host state of your domain name. Host state is determined by checking each
	// IP address associated with your domain name to see if it's serving
	// Hosting content.
	// HOST_UNHOSTED:
	// Your `CustomDomain`'s domain name isn't associated with any IP addresses.
	// HOST_UNREACHABLE:
	// Your `CustomDomain`'s domain name can't be reached. Hosting services' DNS
	// queries to find your domain name's IP addresses resulted in errors. See
	// your `CustomDomain`'s `issues` field for more details.
	// HOST_MISMATCH:
	// Your `CustomDomain`'s domain name has IP addresses that don't ultimately
	// resolve to Hosting.
	// HOST_CONFLICT:
	// Your `CustomDomain`'s domain name has IP addresses that resolve to both
	// Hosting and other services. To ensure consistent results, remove `A` and
	// `AAAA` records related to non-Hosting services.
	// HOST_ACTIVE:
	// All requests against your `CustomDomain`'s domain name are served by
	// Hosting. If the `CustomDomain`'s `OwnershipState` is also `ACTIVE`, Hosting
	// serves your Hosting Site's content on the domain name.
	HostState pulumi.StringPtrInput
	// A set of errors Hosting systems encountered when trying to establish
	// Hosting's ability to serve secure content for your domain name. Resolve
	// these issues to ensure your `CustomDomain` behaves properly.
	// Structure is documented below.
	Issues HostingCustomDomainIssueArrayInput
	// The fully-qualified name of the `CustomDomain`.
	Name pulumi.StringPtrInput
	// The ownership state of your domain name. Ownership is determined at a
	// Firebase project level, and established by adding `TXT` records to your
	// domain name's DNS records.
	// Ownership cascades to subdomains. Granting a project ownership of `foo.com`
	// also grants that project ownership over `bar.foo.com`, unless you add
	// specific `TXT` records to `bar.foo.com` that grant a different project
	// ownership.
	// If your `CustomDomain` is in an `OwnershipState` other than
	// `OWNERSHIP_ACTIVE` for more than 30 days and it hasn't been updated in at
	// least 30 days, Hosting's ownership systems delete the `CustomDomain`.
	// OWNERSHIP_MISSING:
	// Your `CustomDomain`'s domain name has no Hosting-related ownership records;
	// no Firebase project has permission to act on the domain name's behalf.
	// OWNERSHIP_UNREACHABLE:
	// Your `CustomDomain`'s domain name can't be reached. Hosting services' DNS
	// queries to find your domain name's ownership records resulted in errors.
	// See your `CustomDomain`'s `issues` field for more details.
	// OWNERSHIP_MISMATCH:
	// Your `CustomDomain`'s domain name is owned by another Firebase project.
	// Remove the conflicting `TXT` records and replace them with project-specific
	// records for your current Firebase project.
	// OWNERSHIP_CONFLICT:
	// Your `CustomDomain`'s domain name has conflicting `TXT` records that
	// indicate ownership by both your current Firebase project and another
	// project. Remove the other project's ownership records to grant the current
	// project ownership.
	// OWNERSHIP_PENDING:
	// Your `CustomDomain`'s DNS records are configured correctly. Hosting will
	// transfer ownership of your domain to this `CustomDomain` within 24 hours.
	// OWNERSHIP_ACTIVE:
	// Your `CustomDomain`'s domain name has `TXT` records that grant its project
	// permission to act on its behalf.
	OwnershipState pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// if true, indicates that Hosting's systems are attempting to
	// make the `CustomDomain`'s state match your preferred state. This is most
	// frequently `true` when initially provisioning a `CustomDomain` or when creating
	// a new SSL certificate to match an updated `certPreference`
	Reconciling pulumi.BoolPtrInput
	// A domain name that this CustomDomain should direct traffic towards. If
	// specified, Hosting will respond to requests against this CustomDomain
	// with an HTTP 301 code, and route traffic to the specified `redirectTarget`
	// instead.
	RedirectTarget pulumi.StringPtrInput
	// A set of updates you should make to the domain name's DNS records to
	// let Hosting serve secure content on its behalf.
	// Structure is documented below.
	RequiredDnsUpdates HostingCustomDomainRequiredDnsUpdateArrayInput
	// The ID of the site in which to create this custom domain association.
	SiteId pulumi.StringPtrInput
	// The last time the `CustomDomain` was updated.
	UpdateTime          pulumi.StringPtrInput
	WaitDnsVerification pulumi.BoolPtrInput
}

func (HostingCustomDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostingCustomDomainState)(nil)).Elem()
}

type hostingCustomDomainArgs struct {
	// A field that lets you specify which SSL certificate type Hosting creates
	// for your domain name. Spark plan `CustomDomain`s only have access to the
	// `GROUPED` cert type, while Blaze plan can select any option.
	// Possible values are: `GROUPED`, `PROJECT_GROUPED`, `DEDICATED`.
	CertPreference *string `pulumi:"certPreference"`
	// The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.
	//
	// ***
	CustomDomain string `pulumi:"customDomain"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// A domain name that this CustomDomain should direct traffic towards. If
	// specified, Hosting will respond to requests against this CustomDomain
	// with an HTTP 301 code, and route traffic to the specified `redirectTarget`
	// instead.
	RedirectTarget *string `pulumi:"redirectTarget"`
	// The ID of the site in which to create this custom domain association.
	SiteId              string `pulumi:"siteId"`
	WaitDnsVerification *bool  `pulumi:"waitDnsVerification"`
}

// The set of arguments for constructing a HostingCustomDomain resource.
type HostingCustomDomainArgs struct {
	// A field that lets you specify which SSL certificate type Hosting creates
	// for your domain name. Spark plan `CustomDomain`s only have access to the
	// `GROUPED` cert type, while Blaze plan can select any option.
	// Possible values are: `GROUPED`, `PROJECT_GROUPED`, `DEDICATED`.
	CertPreference pulumi.StringPtrInput
	// The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.
	//
	// ***
	CustomDomain pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// A domain name that this CustomDomain should direct traffic towards. If
	// specified, Hosting will respond to requests against this CustomDomain
	// with an HTTP 301 code, and route traffic to the specified `redirectTarget`
	// instead.
	RedirectTarget pulumi.StringPtrInput
	// The ID of the site in which to create this custom domain association.
	SiteId              pulumi.StringInput
	WaitDnsVerification pulumi.BoolPtrInput
}

func (HostingCustomDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostingCustomDomainArgs)(nil)).Elem()
}

type HostingCustomDomainInput interface {
	pulumi.Input

	ToHostingCustomDomainOutput() HostingCustomDomainOutput
	ToHostingCustomDomainOutputWithContext(ctx context.Context) HostingCustomDomainOutput
}

func (*HostingCustomDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**HostingCustomDomain)(nil)).Elem()
}

func (i *HostingCustomDomain) ToHostingCustomDomainOutput() HostingCustomDomainOutput {
	return i.ToHostingCustomDomainOutputWithContext(context.Background())
}

func (i *HostingCustomDomain) ToHostingCustomDomainOutputWithContext(ctx context.Context) HostingCustomDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostingCustomDomainOutput)
}

// HostingCustomDomainArrayInput is an input type that accepts HostingCustomDomainArray and HostingCustomDomainArrayOutput values.
// You can construct a concrete instance of `HostingCustomDomainArrayInput` via:
//
//	HostingCustomDomainArray{ HostingCustomDomainArgs{...} }
type HostingCustomDomainArrayInput interface {
	pulumi.Input

	ToHostingCustomDomainArrayOutput() HostingCustomDomainArrayOutput
	ToHostingCustomDomainArrayOutputWithContext(context.Context) HostingCustomDomainArrayOutput
}

type HostingCustomDomainArray []HostingCustomDomainInput

func (HostingCustomDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostingCustomDomain)(nil)).Elem()
}

func (i HostingCustomDomainArray) ToHostingCustomDomainArrayOutput() HostingCustomDomainArrayOutput {
	return i.ToHostingCustomDomainArrayOutputWithContext(context.Background())
}

func (i HostingCustomDomainArray) ToHostingCustomDomainArrayOutputWithContext(ctx context.Context) HostingCustomDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostingCustomDomainArrayOutput)
}

// HostingCustomDomainMapInput is an input type that accepts HostingCustomDomainMap and HostingCustomDomainMapOutput values.
// You can construct a concrete instance of `HostingCustomDomainMapInput` via:
//
//	HostingCustomDomainMap{ "key": HostingCustomDomainArgs{...} }
type HostingCustomDomainMapInput interface {
	pulumi.Input

	ToHostingCustomDomainMapOutput() HostingCustomDomainMapOutput
	ToHostingCustomDomainMapOutputWithContext(context.Context) HostingCustomDomainMapOutput
}

type HostingCustomDomainMap map[string]HostingCustomDomainInput

func (HostingCustomDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostingCustomDomain)(nil)).Elem()
}

func (i HostingCustomDomainMap) ToHostingCustomDomainMapOutput() HostingCustomDomainMapOutput {
	return i.ToHostingCustomDomainMapOutputWithContext(context.Background())
}

func (i HostingCustomDomainMap) ToHostingCustomDomainMapOutputWithContext(ctx context.Context) HostingCustomDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostingCustomDomainMapOutput)
}

type HostingCustomDomainOutput struct{ *pulumi.OutputState }

func (HostingCustomDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostingCustomDomain)(nil)).Elem()
}

func (o HostingCustomDomainOutput) ToHostingCustomDomainOutput() HostingCustomDomainOutput {
	return o
}

func (o HostingCustomDomainOutput) ToHostingCustomDomainOutputWithContext(ctx context.Context) HostingCustomDomainOutput {
	return o
}

// A field that lets you specify which SSL certificate type Hosting creates
// for your domain name. Spark plan `CustomDomain`s only have access to the
// `GROUPED` cert type, while Blaze plan can select any option.
// Possible values are: `GROUPED`, `PROJECT_GROUPED`, `DEDICATED`.
func (o HostingCustomDomainOutput) CertPreference() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingCustomDomain) pulumi.StringOutput { return v.CertPreference }).(pulumi.StringOutput)
}

// The SSL certificate Hosting has for this `CustomDomain`'s domain name.
// For new `CustomDomain`s, this often represents Hosting's intent to create
// a certificate, rather than an actual cert. Check the `state` field for
// more.
// Structure is documented below.
func (o HostingCustomDomainOutput) Certs() HostingCustomDomainCertArrayOutput {
	return o.ApplyT(func(v *HostingCustomDomain) HostingCustomDomainCertArrayOutput { return v.Certs }).(HostingCustomDomainCertArrayOutput)
}

// The `CustomDomain`'s create time.
func (o HostingCustomDomainOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingCustomDomain) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.
//
// ***
func (o HostingCustomDomainOutput) CustomDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingCustomDomain) pulumi.StringOutput { return v.CustomDomain }).(pulumi.StringOutput)
}

// The time the `CustomDomain` was deleted; null for `CustomDomains` that
// haven't been deleted. Deleted `CustomDomains` persist for approximately 30
// days, after which time Hosting removes them completely.
func (o HostingCustomDomainOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingCustomDomain) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// A string that represents the current state of the `CustomDomain` and
// allows you to confirm its initial state in requests that would modify it.
func (o HostingCustomDomainOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingCustomDomain) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The minimum time before a soft-deleted `CustomDomain` is completely removed
// from Hosting; null for `CustomDomains` that haven't been deleted.
func (o HostingCustomDomainOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingCustomDomain) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

// The host state of your domain name. Host state is determined by checking each
// IP address associated with your domain name to see if it's serving
// Hosting content.
// HOST_UNHOSTED:
// Your `CustomDomain`'s domain name isn't associated with any IP addresses.
// HOST_UNREACHABLE:
// Your `CustomDomain`'s domain name can't be reached. Hosting services' DNS
// queries to find your domain name's IP addresses resulted in errors. See
// your `CustomDomain`'s `issues` field for more details.
// HOST_MISMATCH:
// Your `CustomDomain`'s domain name has IP addresses that don't ultimately
// resolve to Hosting.
// HOST_CONFLICT:
// Your `CustomDomain`'s domain name has IP addresses that resolve to both
// Hosting and other services. To ensure consistent results, remove `A` and
// `AAAA` records related to non-Hosting services.
// HOST_ACTIVE:
// All requests against your `CustomDomain`'s domain name are served by
// Hosting. If the `CustomDomain`'s `OwnershipState` is also `ACTIVE`, Hosting
// serves your Hosting Site's content on the domain name.
func (o HostingCustomDomainOutput) HostState() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingCustomDomain) pulumi.StringOutput { return v.HostState }).(pulumi.StringOutput)
}

// A set of errors Hosting systems encountered when trying to establish
// Hosting's ability to serve secure content for your domain name. Resolve
// these issues to ensure your `CustomDomain` behaves properly.
// Structure is documented below.
func (o HostingCustomDomainOutput) Issues() HostingCustomDomainIssueArrayOutput {
	return o.ApplyT(func(v *HostingCustomDomain) HostingCustomDomainIssueArrayOutput { return v.Issues }).(HostingCustomDomainIssueArrayOutput)
}

// The fully-qualified name of the `CustomDomain`.
func (o HostingCustomDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingCustomDomain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ownership state of your domain name. Ownership is determined at a
// Firebase project level, and established by adding `TXT` records to your
// domain name's DNS records.
// Ownership cascades to subdomains. Granting a project ownership of `foo.com`
// also grants that project ownership over `bar.foo.com`, unless you add
// specific `TXT` records to `bar.foo.com` that grant a different project
// ownership.
// If your `CustomDomain` is in an `OwnershipState` other than
// `OWNERSHIP_ACTIVE` for more than 30 days and it hasn't been updated in at
// least 30 days, Hosting's ownership systems delete the `CustomDomain`.
// OWNERSHIP_MISSING:
// Your `CustomDomain`'s domain name has no Hosting-related ownership records;
// no Firebase project has permission to act on the domain name's behalf.
// OWNERSHIP_UNREACHABLE:
// Your `CustomDomain`'s domain name can't be reached. Hosting services' DNS
// queries to find your domain name's ownership records resulted in errors.
// See your `CustomDomain`'s `issues` field for more details.
// OWNERSHIP_MISMATCH:
// Your `CustomDomain`'s domain name is owned by another Firebase project.
// Remove the conflicting `TXT` records and replace them with project-specific
// records for your current Firebase project.
// OWNERSHIP_CONFLICT:
// Your `CustomDomain`'s domain name has conflicting `TXT` records that
// indicate ownership by both your current Firebase project and another
// project. Remove the other project's ownership records to grant the current
// project ownership.
// OWNERSHIP_PENDING:
// Your `CustomDomain`'s DNS records are configured correctly. Hosting will
// transfer ownership of your domain to this `CustomDomain` within 24 hours.
// OWNERSHIP_ACTIVE:
// Your `CustomDomain`'s domain name has `TXT` records that grant its project
// permission to act on its behalf.
func (o HostingCustomDomainOutput) OwnershipState() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingCustomDomain) pulumi.StringOutput { return v.OwnershipState }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o HostingCustomDomainOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingCustomDomain) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// if true, indicates that Hosting's systems are attempting to
// make the `CustomDomain`'s state match your preferred state. This is most
// frequently `true` when initially provisioning a `CustomDomain` or when creating
// a new SSL certificate to match an updated `certPreference`
func (o HostingCustomDomainOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *HostingCustomDomain) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// A domain name that this CustomDomain should direct traffic towards. If
// specified, Hosting will respond to requests against this CustomDomain
// with an HTTP 301 code, and route traffic to the specified `redirectTarget`
// instead.
func (o HostingCustomDomainOutput) RedirectTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostingCustomDomain) pulumi.StringPtrOutput { return v.RedirectTarget }).(pulumi.StringPtrOutput)
}

// A set of updates you should make to the domain name's DNS records to
// let Hosting serve secure content on its behalf.
// Structure is documented below.
func (o HostingCustomDomainOutput) RequiredDnsUpdates() HostingCustomDomainRequiredDnsUpdateArrayOutput {
	return o.ApplyT(func(v *HostingCustomDomain) HostingCustomDomainRequiredDnsUpdateArrayOutput {
		return v.RequiredDnsUpdates
	}).(HostingCustomDomainRequiredDnsUpdateArrayOutput)
}

// The ID of the site in which to create this custom domain association.
func (o HostingCustomDomainOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingCustomDomain) pulumi.StringOutput { return v.SiteId }).(pulumi.StringOutput)
}

// The last time the `CustomDomain` was updated.
func (o HostingCustomDomainOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *HostingCustomDomain) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func (o HostingCustomDomainOutput) WaitDnsVerification() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostingCustomDomain) pulumi.BoolPtrOutput { return v.WaitDnsVerification }).(pulumi.BoolPtrOutput)
}

type HostingCustomDomainArrayOutput struct{ *pulumi.OutputState }

func (HostingCustomDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostingCustomDomain)(nil)).Elem()
}

func (o HostingCustomDomainArrayOutput) ToHostingCustomDomainArrayOutput() HostingCustomDomainArrayOutput {
	return o
}

func (o HostingCustomDomainArrayOutput) ToHostingCustomDomainArrayOutputWithContext(ctx context.Context) HostingCustomDomainArrayOutput {
	return o
}

func (o HostingCustomDomainArrayOutput) Index(i pulumi.IntInput) HostingCustomDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostingCustomDomain {
		return vs[0].([]*HostingCustomDomain)[vs[1].(int)]
	}).(HostingCustomDomainOutput)
}

type HostingCustomDomainMapOutput struct{ *pulumi.OutputState }

func (HostingCustomDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostingCustomDomain)(nil)).Elem()
}

func (o HostingCustomDomainMapOutput) ToHostingCustomDomainMapOutput() HostingCustomDomainMapOutput {
	return o
}

func (o HostingCustomDomainMapOutput) ToHostingCustomDomainMapOutputWithContext(ctx context.Context) HostingCustomDomainMapOutput {
	return o
}

func (o HostingCustomDomainMapOutput) MapIndex(k pulumi.StringInput) HostingCustomDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostingCustomDomain {
		return vs[0].(map[string]*HostingCustomDomain)[vs[1].(string)]
	}).(HostingCustomDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostingCustomDomainInput)(nil)).Elem(), &HostingCustomDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostingCustomDomainArrayInput)(nil)).Elem(), HostingCustomDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostingCustomDomainMapInput)(nil)).Elem(), HostingCustomDomainMap{})
	pulumi.RegisterOutputType(HostingCustomDomainOutput{})
	pulumi.RegisterOutputType(HostingCustomDomainArrayOutput{})
	pulumi.RegisterOutputType(HostingCustomDomainMapOutput{})
}
