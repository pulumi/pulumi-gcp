// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package biglake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Databases are containers of tables.
//
// To get more information about Database, see:
//
// * [API documentation](https://cloud.google.com/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases)
// * How-to Guides
//   - [Manage open source metadata with BigLake Metastore](https://cloud.google.com/bigquery/docs/manage-open-source-metadata#create_databases)
//
// ## Example Usage
//
// ## Import
//
// Database can be imported using any of these accepted formats:
//
// ```sh
//
//	$ pulumi import gcp:biglake/database:Database default {{catalog}}/databases/{{name}}
//
// ```
type Database struct {
	pulumi.CustomResourceState

	// The parent catalog.
	Catalog pulumi.StringOutput `pulumi:"catalog"`
	// Output only. The creation time of the database. A timestamp in RFC3339
	// UTC "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Output only. The deletion time of the database. Only set after the
	// database is deleted. A timestamp in RFC3339 UTC "Zulu" format, with
	// nanosecond resolution and up to nine fractional digits. Examples:
	// "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// Output only. The time when this database is considered expired. Only set
	// after the database is deleted. A timestamp in RFC3339 UTC "Zulu" format,
	// with nanosecond resolution and up to nine fractional digits. Examples:
	// "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// Options of a Hive database.
	// Structure is documented below.
	HiveOptions DatabaseHiveOptionsOutput `pulumi:"hiveOptions"`
	// The name of the database.
	Name pulumi.StringOutput `pulumi:"name"`
	// The database type.
	Type pulumi.StringOutput `pulumi:"type"`
	// Output only. The last modification time of the database. A timestamp in
	// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Catalog == nil {
		return nil, errors.New("invalid value for required argument 'Catalog'")
	}
	if args.HiveOptions == nil {
		return nil, errors.New("invalid value for required argument 'HiveOptions'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Database
	err := ctx.RegisterResource("gcp:biglake/database:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("gcp:biglake/database:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
	// The parent catalog.
	Catalog *string `pulumi:"catalog"`
	// Output only. The creation time of the database. A timestamp in RFC3339
	// UTC "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `pulumi:"createTime"`
	// Output only. The deletion time of the database. Only set after the
	// database is deleted. A timestamp in RFC3339 UTC "Zulu" format, with
	// nanosecond resolution and up to nine fractional digits. Examples:
	// "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	DeleteTime *string `pulumi:"deleteTime"`
	// Output only. The time when this database is considered expired. Only set
	// after the database is deleted. A timestamp in RFC3339 UTC "Zulu" format,
	// with nanosecond resolution and up to nine fractional digits. Examples:
	// "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	ExpireTime *string `pulumi:"expireTime"`
	// Options of a Hive database.
	// Structure is documented below.
	HiveOptions *DatabaseHiveOptions `pulumi:"hiveOptions"`
	// The name of the database.
	Name *string `pulumi:"name"`
	// The database type.
	Type *string `pulumi:"type"`
	// Output only. The last modification time of the database. A timestamp in
	// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `pulumi:"updateTime"`
}

type DatabaseState struct {
	// The parent catalog.
	Catalog pulumi.StringPtrInput
	// Output only. The creation time of the database. A timestamp in RFC3339
	// UTC "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z".
	CreateTime pulumi.StringPtrInput
	// Output only. The deletion time of the database. Only set after the
	// database is deleted. A timestamp in RFC3339 UTC "Zulu" format, with
	// nanosecond resolution and up to nine fractional digits. Examples:
	// "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	DeleteTime pulumi.StringPtrInput
	// Output only. The time when this database is considered expired. Only set
	// after the database is deleted. A timestamp in RFC3339 UTC "Zulu" format,
	// with nanosecond resolution and up to nine fractional digits. Examples:
	// "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	ExpireTime pulumi.StringPtrInput
	// Options of a Hive database.
	// Structure is documented below.
	HiveOptions DatabaseHiveOptionsPtrInput
	// The name of the database.
	Name pulumi.StringPtrInput
	// The database type.
	Type pulumi.StringPtrInput
	// Output only. The last modification time of the database. A timestamp in
	// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and
	// "2014-10-02T15:01:23.045123456Z".
	UpdateTime pulumi.StringPtrInput
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	// The parent catalog.
	Catalog string `pulumi:"catalog"`
	// Options of a Hive database.
	// Structure is documented below.
	HiveOptions DatabaseHiveOptions `pulumi:"hiveOptions"`
	// The name of the database.
	Name *string `pulumi:"name"`
	// The database type.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// The parent catalog.
	Catalog pulumi.StringInput
	// Options of a Hive database.
	// Structure is documented below.
	HiveOptions DatabaseHiveOptionsInput
	// The name of the database.
	Name pulumi.StringPtrInput
	// The database type.
	Type pulumi.StringInput
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}

type DatabaseInput interface {
	pulumi.Input

	ToDatabaseOutput() DatabaseOutput
	ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput
}

func (*Database) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (i *Database) ToDatabaseOutput() DatabaseOutput {
	return i.ToDatabaseOutputWithContext(context.Background())
}

func (i *Database) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOutput)
}

func (i *Database) ToOutput(ctx context.Context) pulumix.Output[*Database] {
	return pulumix.Output[*Database]{
		OutputState: i.ToDatabaseOutputWithContext(ctx).OutputState,
	}
}

// DatabaseArrayInput is an input type that accepts DatabaseArray and DatabaseArrayOutput values.
// You can construct a concrete instance of `DatabaseArrayInput` via:
//
//	DatabaseArray{ DatabaseArgs{...} }
type DatabaseArrayInput interface {
	pulumi.Input

	ToDatabaseArrayOutput() DatabaseArrayOutput
	ToDatabaseArrayOutputWithContext(context.Context) DatabaseArrayOutput
}

type DatabaseArray []DatabaseInput

func (DatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (i DatabaseArray) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return i.ToDatabaseArrayOutputWithContext(context.Background())
}

func (i DatabaseArray) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseArrayOutput)
}

func (i DatabaseArray) ToOutput(ctx context.Context) pulumix.Output[[]*Database] {
	return pulumix.Output[[]*Database]{
		OutputState: i.ToDatabaseArrayOutputWithContext(ctx).OutputState,
	}
}

// DatabaseMapInput is an input type that accepts DatabaseMap and DatabaseMapOutput values.
// You can construct a concrete instance of `DatabaseMapInput` via:
//
//	DatabaseMap{ "key": DatabaseArgs{...} }
type DatabaseMapInput interface {
	pulumi.Input

	ToDatabaseMapOutput() DatabaseMapOutput
	ToDatabaseMapOutputWithContext(context.Context) DatabaseMapOutput
}

type DatabaseMap map[string]DatabaseInput

func (DatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (i DatabaseMap) ToDatabaseMapOutput() DatabaseMapOutput {
	return i.ToDatabaseMapOutputWithContext(context.Background())
}

func (i DatabaseMap) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMapOutput)
}

func (i DatabaseMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Database] {
	return pulumix.Output[map[string]*Database]{
		OutputState: i.ToDatabaseMapOutputWithContext(ctx).OutputState,
	}
}

type DatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToOutput(ctx context.Context) pulumix.Output[*Database] {
	return pulumix.Output[*Database]{
		OutputState: o.OutputState,
	}
}

// The parent catalog.
func (o DatabaseOutput) Catalog() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Catalog }).(pulumi.StringOutput)
}

// Output only. The creation time of the database. A timestamp in RFC3339
// UTC "Zulu" format, with nanosecond resolution and up to nine fractional
// digits. Examples: "2014-10-02T15:01:23Z" and
// "2014-10-02T15:01:23.045123456Z".
func (o DatabaseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Output only. The deletion time of the database. Only set after the
// database is deleted. A timestamp in RFC3339 UTC "Zulu" format, with
// nanosecond resolution and up to nine fractional digits. Examples:
// "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o DatabaseOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// Output only. The time when this database is considered expired. Only set
// after the database is deleted. A timestamp in RFC3339 UTC "Zulu" format,
// with nanosecond resolution and up to nine fractional digits. Examples:
// "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
func (o DatabaseOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

// Options of a Hive database.
// Structure is documented below.
func (o DatabaseOutput) HiveOptions() DatabaseHiveOptionsOutput {
	return o.ApplyT(func(v *Database) DatabaseHiveOptionsOutput { return v.HiveOptions }).(DatabaseHiveOptionsOutput)
}

// The name of the database.
func (o DatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The database type.
func (o DatabaseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Output only. The last modification time of the database. A timestamp in
// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
// fractional digits. Examples: "2014-10-02T15:01:23Z" and
// "2014-10-02T15:01:23.045123456Z".
func (o DatabaseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type DatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Database] {
	return pulumix.Output[[]*Database]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseArrayOutput) Index(i pulumi.IntInput) DatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Database {
		return vs[0].([]*Database)[vs[1].(int)]
	}).(DatabaseOutput)
}

type DatabaseMapOutput struct{ *pulumi.OutputState }

func (DatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (o DatabaseMapOutput) ToDatabaseMapOutput() DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Database] {
	return pulumix.Output[map[string]*Database]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseMapOutput) MapIndex(k pulumi.StringInput) DatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Database {
		return vs[0].(map[string]*Database)[vs[1].(string)]
	}).(DatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInput)(nil)).Elem(), &Database{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseArrayInput)(nil)).Elem(), DatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMapInput)(nil)).Elem(), DatabaseMap{})
	pulumi.RegisterOutputType(DatabaseOutput{})
	pulumi.RegisterOutputType(DatabaseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMapOutput{})
}
