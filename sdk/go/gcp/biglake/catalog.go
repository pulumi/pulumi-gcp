// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package biglake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Catalogs are top-level containers for Databases and Tables.
//
// To get more information about Catalog, see:
//
// * [API documentation](https://cloud.google.com/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs)
// * How-to Guides
//   - [Manage open source metadata with BigLake Metastore](https://cloud.google.com/bigquery/docs/manage-open-source-metadata#create_catalogs)
//
// ## Example Usage
// ### Bigquery Biglake Catalog
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/biglake"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := biglake.NewCatalog(ctx, "default", &biglake.CatalogArgs{
//				Location: pulumi.String("US"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Catalog can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:biglake/catalog:Catalog default projects/{{project}}/locations/{{location}}/catalogs/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:biglake/catalog:Catalog default {{project}}/{{location}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:biglake/catalog:Catalog default {{location}}/{{name}}
//
// ```
type Catalog struct {
	pulumi.CustomResourceState

	// Output only. The creation time of the catalog. A timestamp in RFC3339 UTC
	// "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Output only. The deletion time of the catalog. Only set after the catalog
	// is deleted. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// Output only. The time when this catalog is considered expired. Only set
	// after the catalog is deleted. Only set after the catalog is deleted.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
	// up to nine fractional digits.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// The geographic location where the Catalog should reside.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the Catalog. Format:
	// projects/{project_id_or_number}/locations/{locationId}/catalogs/{catalogId}
	//
	// ***
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. The last modification time of the catalog. A timestamp in
	// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCatalog registers a new resource with the given unique name, arguments, and options.
func NewCatalog(ctx *pulumi.Context,
	name string, args *CatalogArgs, opts ...pulumi.ResourceOption) (*Catalog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Catalog
	err := ctx.RegisterResource("gcp:biglake/catalog:Catalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalog gets an existing Catalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogState, opts ...pulumi.ResourceOption) (*Catalog, error) {
	var resource Catalog
	err := ctx.ReadResource("gcp:biglake/catalog:Catalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Catalog resources.
type catalogState struct {
	// Output only. The creation time of the catalog. A timestamp in RFC3339 UTC
	// "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits.
	CreateTime *string `pulumi:"createTime"`
	// Output only. The deletion time of the catalog. Only set after the catalog
	// is deleted. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	DeleteTime *string `pulumi:"deleteTime"`
	// Output only. The time when this catalog is considered expired. Only set
	// after the catalog is deleted. Only set after the catalog is deleted.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
	// up to nine fractional digits.
	ExpireTime *string `pulumi:"expireTime"`
	// The geographic location where the Catalog should reside.
	Location *string `pulumi:"location"`
	// The name of the Catalog. Format:
	// projects/{project_id_or_number}/locations/{locationId}/catalogs/{catalogId}
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Output only. The last modification time of the catalog. A timestamp in
	// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits.
	UpdateTime *string `pulumi:"updateTime"`
}

type CatalogState struct {
	// Output only. The creation time of the catalog. A timestamp in RFC3339 UTC
	// "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits.
	CreateTime pulumi.StringPtrInput
	// Output only. The deletion time of the catalog. Only set after the catalog
	// is deleted. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	DeleteTime pulumi.StringPtrInput
	// Output only. The time when this catalog is considered expired. Only set
	// after the catalog is deleted. Only set after the catalog is deleted.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
	// up to nine fractional digits.
	ExpireTime pulumi.StringPtrInput
	// The geographic location where the Catalog should reside.
	Location pulumi.StringPtrInput
	// The name of the Catalog. Format:
	// projects/{project_id_or_number}/locations/{locationId}/catalogs/{catalogId}
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Output only. The last modification time of the catalog. A timestamp in
	// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits.
	UpdateTime pulumi.StringPtrInput
}

func (CatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogState)(nil)).Elem()
}

type catalogArgs struct {
	// The geographic location where the Catalog should reside.
	Location string `pulumi:"location"`
	// The name of the Catalog. Format:
	// projects/{project_id_or_number}/locations/{locationId}/catalogs/{catalogId}
	//
	// ***
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Catalog resource.
type CatalogArgs struct {
	// The geographic location where the Catalog should reside.
	Location pulumi.StringInput
	// The name of the Catalog. Format:
	// projects/{project_id_or_number}/locations/{locationId}/catalogs/{catalogId}
	//
	// ***
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (CatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogArgs)(nil)).Elem()
}

type CatalogInput interface {
	pulumi.Input

	ToCatalogOutput() CatalogOutput
	ToCatalogOutputWithContext(ctx context.Context) CatalogOutput
}

func (*Catalog) ElementType() reflect.Type {
	return reflect.TypeOf((**Catalog)(nil)).Elem()
}

func (i *Catalog) ToCatalogOutput() CatalogOutput {
	return i.ToCatalogOutputWithContext(context.Background())
}

func (i *Catalog) ToCatalogOutputWithContext(ctx context.Context) CatalogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogOutput)
}

func (i *Catalog) ToOutput(ctx context.Context) pulumix.Output[*Catalog] {
	return pulumix.Output[*Catalog]{
		OutputState: i.ToCatalogOutputWithContext(ctx).OutputState,
	}
}

// CatalogArrayInput is an input type that accepts CatalogArray and CatalogArrayOutput values.
// You can construct a concrete instance of `CatalogArrayInput` via:
//
//	CatalogArray{ CatalogArgs{...} }
type CatalogArrayInput interface {
	pulumi.Input

	ToCatalogArrayOutput() CatalogArrayOutput
	ToCatalogArrayOutputWithContext(context.Context) CatalogArrayOutput
}

type CatalogArray []CatalogInput

func (CatalogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Catalog)(nil)).Elem()
}

func (i CatalogArray) ToCatalogArrayOutput() CatalogArrayOutput {
	return i.ToCatalogArrayOutputWithContext(context.Background())
}

func (i CatalogArray) ToCatalogArrayOutputWithContext(ctx context.Context) CatalogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogArrayOutput)
}

func (i CatalogArray) ToOutput(ctx context.Context) pulumix.Output[[]*Catalog] {
	return pulumix.Output[[]*Catalog]{
		OutputState: i.ToCatalogArrayOutputWithContext(ctx).OutputState,
	}
}

// CatalogMapInput is an input type that accepts CatalogMap and CatalogMapOutput values.
// You can construct a concrete instance of `CatalogMapInput` via:
//
//	CatalogMap{ "key": CatalogArgs{...} }
type CatalogMapInput interface {
	pulumi.Input

	ToCatalogMapOutput() CatalogMapOutput
	ToCatalogMapOutputWithContext(context.Context) CatalogMapOutput
}

type CatalogMap map[string]CatalogInput

func (CatalogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Catalog)(nil)).Elem()
}

func (i CatalogMap) ToCatalogMapOutput() CatalogMapOutput {
	return i.ToCatalogMapOutputWithContext(context.Background())
}

func (i CatalogMap) ToCatalogMapOutputWithContext(ctx context.Context) CatalogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogMapOutput)
}

func (i CatalogMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Catalog] {
	return pulumix.Output[map[string]*Catalog]{
		OutputState: i.ToCatalogMapOutputWithContext(ctx).OutputState,
	}
}

type CatalogOutput struct{ *pulumi.OutputState }

func (CatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Catalog)(nil)).Elem()
}

func (o CatalogOutput) ToCatalogOutput() CatalogOutput {
	return o
}

func (o CatalogOutput) ToCatalogOutputWithContext(ctx context.Context) CatalogOutput {
	return o
}

func (o CatalogOutput) ToOutput(ctx context.Context) pulumix.Output[*Catalog] {
	return pulumix.Output[*Catalog]{
		OutputState: o.OutputState,
	}
}

// Output only. The creation time of the catalog. A timestamp in RFC3339 UTC
// "Zulu" format, with nanosecond resolution and up to nine fractional
// digits.
func (o CatalogOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Output only. The deletion time of the catalog. Only set after the catalog
// is deleted. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
// resolution and up to nine fractional digits.
func (o CatalogOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// Output only. The time when this catalog is considered expired. Only set
// after the catalog is deleted. Only set after the catalog is deleted.
// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
// up to nine fractional digits.
func (o CatalogOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

// The geographic location where the Catalog should reside.
func (o CatalogOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the Catalog. Format:
// projects/{project_id_or_number}/locations/{locationId}/catalogs/{catalogId}
//
// ***
func (o CatalogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o CatalogOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Output only. The last modification time of the catalog. A timestamp in
// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
// fractional digits.
func (o CatalogOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type CatalogArrayOutput struct{ *pulumi.OutputState }

func (CatalogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Catalog)(nil)).Elem()
}

func (o CatalogArrayOutput) ToCatalogArrayOutput() CatalogArrayOutput {
	return o
}

func (o CatalogArrayOutput) ToCatalogArrayOutputWithContext(ctx context.Context) CatalogArrayOutput {
	return o
}

func (o CatalogArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Catalog] {
	return pulumix.Output[[]*Catalog]{
		OutputState: o.OutputState,
	}
}

func (o CatalogArrayOutput) Index(i pulumi.IntInput) CatalogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Catalog {
		return vs[0].([]*Catalog)[vs[1].(int)]
	}).(CatalogOutput)
}

type CatalogMapOutput struct{ *pulumi.OutputState }

func (CatalogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Catalog)(nil)).Elem()
}

func (o CatalogMapOutput) ToCatalogMapOutput() CatalogMapOutput {
	return o
}

func (o CatalogMapOutput) ToCatalogMapOutputWithContext(ctx context.Context) CatalogMapOutput {
	return o
}

func (o CatalogMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Catalog] {
	return pulumix.Output[map[string]*Catalog]{
		OutputState: o.OutputState,
	}
}

func (o CatalogMapOutput) MapIndex(k pulumi.StringInput) CatalogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Catalog {
		return vs[0].(map[string]*Catalog)[vs[1].(string)]
	}).(CatalogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogInput)(nil)).Elem(), &Catalog{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogArrayInput)(nil)).Elem(), CatalogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogMapInput)(nil)).Elem(), CatalogMap{})
	pulumi.RegisterOutputType(CatalogOutput{})
	pulumi.RegisterOutputType(CatalogArrayOutput{})
	pulumi.RegisterOutputType(CatalogMapOutput{})
}
