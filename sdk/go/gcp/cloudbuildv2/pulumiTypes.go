// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudbuildv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConnectionGithubConfig struct {
	// GitHub App installation id.
	AppInstallationId *int `pulumi:"appInstallationId"`
	// OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
	AuthorizerCredential *ConnectionGithubConfigAuthorizerCredential `pulumi:"authorizerCredential"`
}

// ConnectionGithubConfigInput is an input type that accepts ConnectionGithubConfigArgs and ConnectionGithubConfigOutput values.
// You can construct a concrete instance of `ConnectionGithubConfigInput` via:
//
//	ConnectionGithubConfigArgs{...}
type ConnectionGithubConfigInput interface {
	pulumi.Input

	ToConnectionGithubConfigOutput() ConnectionGithubConfigOutput
	ToConnectionGithubConfigOutputWithContext(context.Context) ConnectionGithubConfigOutput
}

type ConnectionGithubConfigArgs struct {
	// GitHub App installation id.
	AppInstallationId pulumi.IntPtrInput `pulumi:"appInstallationId"`
	// OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
	AuthorizerCredential ConnectionGithubConfigAuthorizerCredentialPtrInput `pulumi:"authorizerCredential"`
}

func (ConnectionGithubConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubConfig)(nil)).Elem()
}

func (i ConnectionGithubConfigArgs) ToConnectionGithubConfigOutput() ConnectionGithubConfigOutput {
	return i.ToConnectionGithubConfigOutputWithContext(context.Background())
}

func (i ConnectionGithubConfigArgs) ToConnectionGithubConfigOutputWithContext(ctx context.Context) ConnectionGithubConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigOutput)
}

func (i ConnectionGithubConfigArgs) ToConnectionGithubConfigPtrOutput() ConnectionGithubConfigPtrOutput {
	return i.ToConnectionGithubConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionGithubConfigArgs) ToConnectionGithubConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigOutput).ToConnectionGithubConfigPtrOutputWithContext(ctx)
}

// ConnectionGithubConfigPtrInput is an input type that accepts ConnectionGithubConfigArgs, ConnectionGithubConfigPtr and ConnectionGithubConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionGithubConfigPtrInput` via:
//
//	        ConnectionGithubConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionGithubConfigPtrInput interface {
	pulumi.Input

	ToConnectionGithubConfigPtrOutput() ConnectionGithubConfigPtrOutput
	ToConnectionGithubConfigPtrOutputWithContext(context.Context) ConnectionGithubConfigPtrOutput
}

type connectionGithubConfigPtrType ConnectionGithubConfigArgs

func ConnectionGithubConfigPtr(v *ConnectionGithubConfigArgs) ConnectionGithubConfigPtrInput {
	return (*connectionGithubConfigPtrType)(v)
}

func (*connectionGithubConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubConfig)(nil)).Elem()
}

func (i *connectionGithubConfigPtrType) ToConnectionGithubConfigPtrOutput() ConnectionGithubConfigPtrOutput {
	return i.ToConnectionGithubConfigPtrOutputWithContext(context.Background())
}

func (i *connectionGithubConfigPtrType) ToConnectionGithubConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigPtrOutput)
}

type ConnectionGithubConfigOutput struct{ *pulumi.OutputState }

func (ConnectionGithubConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubConfig)(nil)).Elem()
}

func (o ConnectionGithubConfigOutput) ToConnectionGithubConfigOutput() ConnectionGithubConfigOutput {
	return o
}

func (o ConnectionGithubConfigOutput) ToConnectionGithubConfigOutputWithContext(ctx context.Context) ConnectionGithubConfigOutput {
	return o
}

func (o ConnectionGithubConfigOutput) ToConnectionGithubConfigPtrOutput() ConnectionGithubConfigPtrOutput {
	return o.ToConnectionGithubConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionGithubConfigOutput) ToConnectionGithubConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGithubConfig) *ConnectionGithubConfig {
		return &v
	}).(ConnectionGithubConfigPtrOutput)
}

// GitHub App installation id.
func (o ConnectionGithubConfigOutput) AppInstallationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionGithubConfig) *int { return v.AppInstallationId }).(pulumi.IntPtrOutput)
}

// OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
func (o ConnectionGithubConfigOutput) AuthorizerCredential() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o.ApplyT(func(v ConnectionGithubConfig) *ConnectionGithubConfigAuthorizerCredential {
		return v.AuthorizerCredential
	}).(ConnectionGithubConfigAuthorizerCredentialPtrOutput)
}

type ConnectionGithubConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGithubConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubConfig)(nil)).Elem()
}

func (o ConnectionGithubConfigPtrOutput) ToConnectionGithubConfigPtrOutput() ConnectionGithubConfigPtrOutput {
	return o
}

func (o ConnectionGithubConfigPtrOutput) ToConnectionGithubConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigPtrOutput {
	return o
}

func (o ConnectionGithubConfigPtrOutput) Elem() ConnectionGithubConfigOutput {
	return o.ApplyT(func(v *ConnectionGithubConfig) ConnectionGithubConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionGithubConfig
		return ret
	}).(ConnectionGithubConfigOutput)
}

// GitHub App installation id.
func (o ConnectionGithubConfigPtrOutput) AppInstallationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubConfig) *int {
		if v == nil {
			return nil
		}
		return v.AppInstallationId
	}).(pulumi.IntPtrOutput)
}

// OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
func (o ConnectionGithubConfigPtrOutput) AuthorizerCredential() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubConfig) *ConnectionGithubConfigAuthorizerCredential {
		if v == nil {
			return nil
		}
		return v.AuthorizerCredential
	}).(ConnectionGithubConfigAuthorizerCredentialPtrOutput)
}

type ConnectionGithubConfigAuthorizerCredential struct {
	// A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
	OauthTokenSecretVersion *string `pulumi:"oauthTokenSecretVersion"`
	// The username associated to this token.
	Username *string `pulumi:"username"`
}

// ConnectionGithubConfigAuthorizerCredentialInput is an input type that accepts ConnectionGithubConfigAuthorizerCredentialArgs and ConnectionGithubConfigAuthorizerCredentialOutput values.
// You can construct a concrete instance of `ConnectionGithubConfigAuthorizerCredentialInput` via:
//
//	ConnectionGithubConfigAuthorizerCredentialArgs{...}
type ConnectionGithubConfigAuthorizerCredentialInput interface {
	pulumi.Input

	ToConnectionGithubConfigAuthorizerCredentialOutput() ConnectionGithubConfigAuthorizerCredentialOutput
	ToConnectionGithubConfigAuthorizerCredentialOutputWithContext(context.Context) ConnectionGithubConfigAuthorizerCredentialOutput
}

type ConnectionGithubConfigAuthorizerCredentialArgs struct {
	// A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
	OauthTokenSecretVersion pulumi.StringPtrInput `pulumi:"oauthTokenSecretVersion"`
	// The username associated to this token.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ConnectionGithubConfigAuthorizerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubConfigAuthorizerCredential)(nil)).Elem()
}

func (i ConnectionGithubConfigAuthorizerCredentialArgs) ToConnectionGithubConfigAuthorizerCredentialOutput() ConnectionGithubConfigAuthorizerCredentialOutput {
	return i.ToConnectionGithubConfigAuthorizerCredentialOutputWithContext(context.Background())
}

func (i ConnectionGithubConfigAuthorizerCredentialArgs) ToConnectionGithubConfigAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigAuthorizerCredentialOutput)
}

func (i ConnectionGithubConfigAuthorizerCredentialArgs) ToConnectionGithubConfigAuthorizerCredentialPtrOutput() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return i.ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i ConnectionGithubConfigAuthorizerCredentialArgs) ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigAuthorizerCredentialOutput).ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(ctx)
}

// ConnectionGithubConfigAuthorizerCredentialPtrInput is an input type that accepts ConnectionGithubConfigAuthorizerCredentialArgs, ConnectionGithubConfigAuthorizerCredentialPtr and ConnectionGithubConfigAuthorizerCredentialPtrOutput values.
// You can construct a concrete instance of `ConnectionGithubConfigAuthorizerCredentialPtrInput` via:
//
//	        ConnectionGithubConfigAuthorizerCredentialArgs{...}
//
//	or:
//
//	        nil
type ConnectionGithubConfigAuthorizerCredentialPtrInput interface {
	pulumi.Input

	ToConnectionGithubConfigAuthorizerCredentialPtrOutput() ConnectionGithubConfigAuthorizerCredentialPtrOutput
	ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(context.Context) ConnectionGithubConfigAuthorizerCredentialPtrOutput
}

type connectionGithubConfigAuthorizerCredentialPtrType ConnectionGithubConfigAuthorizerCredentialArgs

func ConnectionGithubConfigAuthorizerCredentialPtr(v *ConnectionGithubConfigAuthorizerCredentialArgs) ConnectionGithubConfigAuthorizerCredentialPtrInput {
	return (*connectionGithubConfigAuthorizerCredentialPtrType)(v)
}

func (*connectionGithubConfigAuthorizerCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubConfigAuthorizerCredential)(nil)).Elem()
}

func (i *connectionGithubConfigAuthorizerCredentialPtrType) ToConnectionGithubConfigAuthorizerCredentialPtrOutput() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return i.ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i *connectionGithubConfigAuthorizerCredentialPtrType) ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigAuthorizerCredentialPtrOutput)
}

type ConnectionGithubConfigAuthorizerCredentialOutput struct{ *pulumi.OutputState }

func (ConnectionGithubConfigAuthorizerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubConfigAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGithubConfigAuthorizerCredentialOutput) ToConnectionGithubConfigAuthorizerCredentialOutput() ConnectionGithubConfigAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGithubConfigAuthorizerCredentialOutput) ToConnectionGithubConfigAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGithubConfigAuthorizerCredentialOutput) ToConnectionGithubConfigAuthorizerCredentialPtrOutput() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o.ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (o ConnectionGithubConfigAuthorizerCredentialOutput) ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGithubConfigAuthorizerCredential) *ConnectionGithubConfigAuthorizerCredential {
		return &v
	}).(ConnectionGithubConfigAuthorizerCredentialPtrOutput)
}

// A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubConfigAuthorizerCredentialOutput) OauthTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubConfigAuthorizerCredential) *string { return v.OauthTokenSecretVersion }).(pulumi.StringPtrOutput)
}

// The username associated to this token.
func (o ConnectionGithubConfigAuthorizerCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubConfigAuthorizerCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ConnectionGithubConfigAuthorizerCredentialPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGithubConfigAuthorizerCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubConfigAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGithubConfigAuthorizerCredentialPtrOutput) ToConnectionGithubConfigAuthorizerCredentialPtrOutput() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGithubConfigAuthorizerCredentialPtrOutput) ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGithubConfigAuthorizerCredentialPtrOutput) Elem() ConnectionGithubConfigAuthorizerCredentialOutput {
	return o.ApplyT(func(v *ConnectionGithubConfigAuthorizerCredential) ConnectionGithubConfigAuthorizerCredential {
		if v != nil {
			return *v
		}
		var ret ConnectionGithubConfigAuthorizerCredential
		return ret
	}).(ConnectionGithubConfigAuthorizerCredentialOutput)
}

// A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubConfigAuthorizerCredentialPtrOutput) OauthTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubConfigAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return v.OauthTokenSecretVersion
	}).(pulumi.StringPtrOutput)
}

// The username associated to this token.
func (o ConnectionGithubConfigAuthorizerCredentialPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubConfigAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionGithubEnterpriseConfig struct {
	// Id of the GitHub App created from the manifest.
	AppId *int `pulumi:"appId"`
	// ID of the installation of the GitHub App.
	AppInstallationId *int `pulumi:"appInstallationId"`
	// The URL-friendly name of the GitHub App.
	AppSlug *string `pulumi:"appSlug"`
	// Required. The URI of the GitHub Enterprise host this connection is for.
	HostUri string `pulumi:"hostUri"`
	// SecretManager resource containing the private key of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
	PrivateKeySecretVersion *string `pulumi:"privateKeySecretVersion"`
	// Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
	ServiceDirectoryConfig *ConnectionGithubEnterpriseConfigServiceDirectoryConfig `pulumi:"serviceDirectoryConfig"`
	// SSL certificate to use for requests to GitHub Enterprise.
	SslCa *string `pulumi:"sslCa"`
	// SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
	WebhookSecretSecretVersion *string `pulumi:"webhookSecretSecretVersion"`
}

// ConnectionGithubEnterpriseConfigInput is an input type that accepts ConnectionGithubEnterpriseConfigArgs and ConnectionGithubEnterpriseConfigOutput values.
// You can construct a concrete instance of `ConnectionGithubEnterpriseConfigInput` via:
//
//	ConnectionGithubEnterpriseConfigArgs{...}
type ConnectionGithubEnterpriseConfigInput interface {
	pulumi.Input

	ToConnectionGithubEnterpriseConfigOutput() ConnectionGithubEnterpriseConfigOutput
	ToConnectionGithubEnterpriseConfigOutputWithContext(context.Context) ConnectionGithubEnterpriseConfigOutput
}

type ConnectionGithubEnterpriseConfigArgs struct {
	// Id of the GitHub App created from the manifest.
	AppId pulumi.IntPtrInput `pulumi:"appId"`
	// ID of the installation of the GitHub App.
	AppInstallationId pulumi.IntPtrInput `pulumi:"appInstallationId"`
	// The URL-friendly name of the GitHub App.
	AppSlug pulumi.StringPtrInput `pulumi:"appSlug"`
	// Required. The URI of the GitHub Enterprise host this connection is for.
	HostUri pulumi.StringInput `pulumi:"hostUri"`
	// SecretManager resource containing the private key of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
	PrivateKeySecretVersion pulumi.StringPtrInput `pulumi:"privateKeySecretVersion"`
	// Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
	ServiceDirectoryConfig ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput `pulumi:"serviceDirectoryConfig"`
	// SSL certificate to use for requests to GitHub Enterprise.
	SslCa pulumi.StringPtrInput `pulumi:"sslCa"`
	// SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
	WebhookSecretSecretVersion pulumi.StringPtrInput `pulumi:"webhookSecretSecretVersion"`
}

func (ConnectionGithubEnterpriseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubEnterpriseConfig)(nil)).Elem()
}

func (i ConnectionGithubEnterpriseConfigArgs) ToConnectionGithubEnterpriseConfigOutput() ConnectionGithubEnterpriseConfigOutput {
	return i.ToConnectionGithubEnterpriseConfigOutputWithContext(context.Background())
}

func (i ConnectionGithubEnterpriseConfigArgs) ToConnectionGithubEnterpriseConfigOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigOutput)
}

func (i ConnectionGithubEnterpriseConfigArgs) ToConnectionGithubEnterpriseConfigPtrOutput() ConnectionGithubEnterpriseConfigPtrOutput {
	return i.ToConnectionGithubEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionGithubEnterpriseConfigArgs) ToConnectionGithubEnterpriseConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigOutput).ToConnectionGithubEnterpriseConfigPtrOutputWithContext(ctx)
}

// ConnectionGithubEnterpriseConfigPtrInput is an input type that accepts ConnectionGithubEnterpriseConfigArgs, ConnectionGithubEnterpriseConfigPtr and ConnectionGithubEnterpriseConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionGithubEnterpriseConfigPtrInput` via:
//
//	        ConnectionGithubEnterpriseConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionGithubEnterpriseConfigPtrInput interface {
	pulumi.Input

	ToConnectionGithubEnterpriseConfigPtrOutput() ConnectionGithubEnterpriseConfigPtrOutput
	ToConnectionGithubEnterpriseConfigPtrOutputWithContext(context.Context) ConnectionGithubEnterpriseConfigPtrOutput
}

type connectionGithubEnterpriseConfigPtrType ConnectionGithubEnterpriseConfigArgs

func ConnectionGithubEnterpriseConfigPtr(v *ConnectionGithubEnterpriseConfigArgs) ConnectionGithubEnterpriseConfigPtrInput {
	return (*connectionGithubEnterpriseConfigPtrType)(v)
}

func (*connectionGithubEnterpriseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubEnterpriseConfig)(nil)).Elem()
}

func (i *connectionGithubEnterpriseConfigPtrType) ToConnectionGithubEnterpriseConfigPtrOutput() ConnectionGithubEnterpriseConfigPtrOutput {
	return i.ToConnectionGithubEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (i *connectionGithubEnterpriseConfigPtrType) ToConnectionGithubEnterpriseConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigPtrOutput)
}

type ConnectionGithubEnterpriseConfigOutput struct{ *pulumi.OutputState }

func (ConnectionGithubEnterpriseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubEnterpriseConfig)(nil)).Elem()
}

func (o ConnectionGithubEnterpriseConfigOutput) ToConnectionGithubEnterpriseConfigOutput() ConnectionGithubEnterpriseConfigOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigOutput) ToConnectionGithubEnterpriseConfigOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigOutput) ToConnectionGithubEnterpriseConfigPtrOutput() ConnectionGithubEnterpriseConfigPtrOutput {
	return o.ToConnectionGithubEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionGithubEnterpriseConfigOutput) ToConnectionGithubEnterpriseConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGithubEnterpriseConfig) *ConnectionGithubEnterpriseConfig {
		return &v
	}).(ConnectionGithubEnterpriseConfigPtrOutput)
}

// Id of the GitHub App created from the manifest.
func (o ConnectionGithubEnterpriseConfigOutput) AppId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *int { return v.AppId }).(pulumi.IntPtrOutput)
}

// ID of the installation of the GitHub App.
func (o ConnectionGithubEnterpriseConfigOutput) AppInstallationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *int { return v.AppInstallationId }).(pulumi.IntPtrOutput)
}

// The URL-friendly name of the GitHub App.
func (o ConnectionGithubEnterpriseConfigOutput) AppSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *string { return v.AppSlug }).(pulumi.StringPtrOutput)
}

// Required. The URI of the GitHub Enterprise host this connection is for.
func (o ConnectionGithubEnterpriseConfigOutput) HostUri() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) string { return v.HostUri }).(pulumi.StringOutput)
}

// SecretManager resource containing the private key of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubEnterpriseConfigOutput) PrivateKeySecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *string { return v.PrivateKeySecretVersion }).(pulumi.StringPtrOutput)
}

// Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
func (o ConnectionGithubEnterpriseConfigOutput) ServiceDirectoryConfig() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *ConnectionGithubEnterpriseConfigServiceDirectoryConfig {
		return v.ServiceDirectoryConfig
	}).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput)
}

// SSL certificate to use for requests to GitHub Enterprise.
func (o ConnectionGithubEnterpriseConfigOutput) SslCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *string { return v.SslCa }).(pulumi.StringPtrOutput)
}

// SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubEnterpriseConfigOutput) WebhookSecretSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *string { return v.WebhookSecretSecretVersion }).(pulumi.StringPtrOutput)
}

type ConnectionGithubEnterpriseConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGithubEnterpriseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubEnterpriseConfig)(nil)).Elem()
}

func (o ConnectionGithubEnterpriseConfigPtrOutput) ToConnectionGithubEnterpriseConfigPtrOutput() ConnectionGithubEnterpriseConfigPtrOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigPtrOutput) ToConnectionGithubEnterpriseConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigPtrOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigPtrOutput) Elem() ConnectionGithubEnterpriseConfigOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) ConnectionGithubEnterpriseConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionGithubEnterpriseConfig
		return ret
	}).(ConnectionGithubEnterpriseConfigOutput)
}

// Id of the GitHub App created from the manifest.
func (o ConnectionGithubEnterpriseConfigPtrOutput) AppId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *int {
		if v == nil {
			return nil
		}
		return v.AppId
	}).(pulumi.IntPtrOutput)
}

// ID of the installation of the GitHub App.
func (o ConnectionGithubEnterpriseConfigPtrOutput) AppInstallationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *int {
		if v == nil {
			return nil
		}
		return v.AppInstallationId
	}).(pulumi.IntPtrOutput)
}

// The URL-friendly name of the GitHub App.
func (o ConnectionGithubEnterpriseConfigPtrOutput) AppSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.AppSlug
	}).(pulumi.StringPtrOutput)
}

// Required. The URI of the GitHub Enterprise host this connection is for.
func (o ConnectionGithubEnterpriseConfigPtrOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return &v.HostUri
	}).(pulumi.StringPtrOutput)
}

// SecretManager resource containing the private key of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubEnterpriseConfigPtrOutput) PrivateKeySecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKeySecretVersion
	}).(pulumi.StringPtrOutput)
}

// Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
func (o ConnectionGithubEnterpriseConfigPtrOutput) ServiceDirectoryConfig() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *ConnectionGithubEnterpriseConfigServiceDirectoryConfig {
		if v == nil {
			return nil
		}
		return v.ServiceDirectoryConfig
	}).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput)
}

// SSL certificate to use for requests to GitHub Enterprise.
func (o ConnectionGithubEnterpriseConfigPtrOutput) SslCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.SslCa
	}).(pulumi.StringPtrOutput)
}

// SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubEnterpriseConfigPtrOutput) WebhookSecretSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.WebhookSecretSecretVersion
	}).(pulumi.StringPtrOutput)
}

type ConnectionGithubEnterpriseConfigServiceDirectoryConfig struct {
	// Required. The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service string `pulumi:"service"`
}

// ConnectionGithubEnterpriseConfigServiceDirectoryConfigInput is an input type that accepts ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs and ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput values.
// You can construct a concrete instance of `ConnectionGithubEnterpriseConfigServiceDirectoryConfigInput` via:
//
//	ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs{...}
type ConnectionGithubEnterpriseConfigServiceDirectoryConfigInput interface {
	pulumi.Input

	ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput
	ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputWithContext(context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput
}

type ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs struct {
	// Required. The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service pulumi.StringInput `pulumi:"service"`
}

func (ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubEnterpriseConfigServiceDirectoryConfig)(nil)).Elem()
}

func (i ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput {
	return i.ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputWithContext(context.Background())
}

func (i ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput)
}

func (i ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return i.ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput).ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx)
}

// ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput is an input type that accepts ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs, ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtr and ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput` via:
//
//	        ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput interface {
	pulumi.Input

	ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput
	ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput
}

type connectionGithubEnterpriseConfigServiceDirectoryConfigPtrType ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs

func ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtr(v *ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput {
	return (*connectionGithubEnterpriseConfigServiceDirectoryConfigPtrType)(v)
}

func (*connectionGithubEnterpriseConfigServiceDirectoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubEnterpriseConfigServiceDirectoryConfig)(nil)).Elem()
}

func (i *connectionGithubEnterpriseConfigServiceDirectoryConfigPtrType) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return i.ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i *connectionGithubEnterpriseConfigServiceDirectoryConfigPtrType) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput)
}

type ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput struct{ *pulumi.OutputState }

func (ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubEnterpriseConfigServiceDirectoryConfig)(nil)).Elem()
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o.ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGithubEnterpriseConfigServiceDirectoryConfig) *ConnectionGithubEnterpriseConfigServiceDirectoryConfig {
		return &v
	}).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput)
}

// Required. The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfigServiceDirectoryConfig) string { return v.Service }).(pulumi.StringOutput)
}

type ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubEnterpriseConfigServiceDirectoryConfig)(nil)).Elem()
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput) Elem() ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfigServiceDirectoryConfig) ConnectionGithubEnterpriseConfigServiceDirectoryConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionGithubEnterpriseConfigServiceDirectoryConfig
		return ret
	}).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput)
}

// Required. The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfigServiceDirectoryConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

type ConnectionInstallationState struct {
	ActionUri *string `pulumi:"actionUri"`
	Message   *string `pulumi:"message"`
	Stage     *string `pulumi:"stage"`
}

// ConnectionInstallationStateInput is an input type that accepts ConnectionInstallationStateArgs and ConnectionInstallationStateOutput values.
// You can construct a concrete instance of `ConnectionInstallationStateInput` via:
//
//	ConnectionInstallationStateArgs{...}
type ConnectionInstallationStateInput interface {
	pulumi.Input

	ToConnectionInstallationStateOutput() ConnectionInstallationStateOutput
	ToConnectionInstallationStateOutputWithContext(context.Context) ConnectionInstallationStateOutput
}

type ConnectionInstallationStateArgs struct {
	ActionUri pulumi.StringPtrInput `pulumi:"actionUri"`
	Message   pulumi.StringPtrInput `pulumi:"message"`
	Stage     pulumi.StringPtrInput `pulumi:"stage"`
}

func (ConnectionInstallationStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionInstallationState)(nil)).Elem()
}

func (i ConnectionInstallationStateArgs) ToConnectionInstallationStateOutput() ConnectionInstallationStateOutput {
	return i.ToConnectionInstallationStateOutputWithContext(context.Background())
}

func (i ConnectionInstallationStateArgs) ToConnectionInstallationStateOutputWithContext(ctx context.Context) ConnectionInstallationStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInstallationStateOutput)
}

// ConnectionInstallationStateArrayInput is an input type that accepts ConnectionInstallationStateArray and ConnectionInstallationStateArrayOutput values.
// You can construct a concrete instance of `ConnectionInstallationStateArrayInput` via:
//
//	ConnectionInstallationStateArray{ ConnectionInstallationStateArgs{...} }
type ConnectionInstallationStateArrayInput interface {
	pulumi.Input

	ToConnectionInstallationStateArrayOutput() ConnectionInstallationStateArrayOutput
	ToConnectionInstallationStateArrayOutputWithContext(context.Context) ConnectionInstallationStateArrayOutput
}

type ConnectionInstallationStateArray []ConnectionInstallationStateInput

func (ConnectionInstallationStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionInstallationState)(nil)).Elem()
}

func (i ConnectionInstallationStateArray) ToConnectionInstallationStateArrayOutput() ConnectionInstallationStateArrayOutput {
	return i.ToConnectionInstallationStateArrayOutputWithContext(context.Background())
}

func (i ConnectionInstallationStateArray) ToConnectionInstallationStateArrayOutputWithContext(ctx context.Context) ConnectionInstallationStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInstallationStateArrayOutput)
}

type ConnectionInstallationStateOutput struct{ *pulumi.OutputState }

func (ConnectionInstallationStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionInstallationState)(nil)).Elem()
}

func (o ConnectionInstallationStateOutput) ToConnectionInstallationStateOutput() ConnectionInstallationStateOutput {
	return o
}

func (o ConnectionInstallationStateOutput) ToConnectionInstallationStateOutputWithContext(ctx context.Context) ConnectionInstallationStateOutput {
	return o
}

func (o ConnectionInstallationStateOutput) ActionUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInstallationState) *string { return v.ActionUri }).(pulumi.StringPtrOutput)
}

func (o ConnectionInstallationStateOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInstallationState) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o ConnectionInstallationStateOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInstallationState) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

type ConnectionInstallationStateArrayOutput struct{ *pulumi.OutputState }

func (ConnectionInstallationStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionInstallationState)(nil)).Elem()
}

func (o ConnectionInstallationStateArrayOutput) ToConnectionInstallationStateArrayOutput() ConnectionInstallationStateArrayOutput {
	return o
}

func (o ConnectionInstallationStateArrayOutput) ToConnectionInstallationStateArrayOutputWithContext(ctx context.Context) ConnectionInstallationStateArrayOutput {
	return o
}

func (o ConnectionInstallationStateArrayOutput) Index(i pulumi.IntInput) ConnectionInstallationStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectionInstallationState {
		return vs[0].([]ConnectionInstallationState)[vs[1].(int)]
	}).(ConnectionInstallationStateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubConfigInput)(nil)).Elem(), ConnectionGithubConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubConfigPtrInput)(nil)).Elem(), ConnectionGithubConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubConfigAuthorizerCredentialInput)(nil)).Elem(), ConnectionGithubConfigAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubConfigAuthorizerCredentialPtrInput)(nil)).Elem(), ConnectionGithubConfigAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubEnterpriseConfigInput)(nil)).Elem(), ConnectionGithubEnterpriseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubEnterpriseConfigPtrInput)(nil)).Elem(), ConnectionGithubEnterpriseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubEnterpriseConfigServiceDirectoryConfigInput)(nil)).Elem(), ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput)(nil)).Elem(), ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInstallationStateInput)(nil)).Elem(), ConnectionInstallationStateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInstallationStateArrayInput)(nil)).Elem(), ConnectionInstallationStateArray{})
	pulumi.RegisterOutputType(ConnectionGithubConfigOutput{})
	pulumi.RegisterOutputType(ConnectionGithubConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGithubConfigAuthorizerCredentialOutput{})
	pulumi.RegisterOutputType(ConnectionGithubConfigAuthorizerCredentialPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGithubEnterpriseConfigOutput{})
	pulumi.RegisterOutputType(ConnectionGithubEnterpriseConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput{})
	pulumi.RegisterOutputType(ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionInstallationStateOutput{})
	pulumi.RegisterOutputType(ConnectionInstallationStateArrayOutput{})
}
