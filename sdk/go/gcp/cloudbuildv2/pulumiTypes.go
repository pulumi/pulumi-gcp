// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudbuildv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ConnectionGithubConfig struct {
	// GitHub App installation id.
	AppInstallationId *int `pulumi:"appInstallationId"`
	// OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
	AuthorizerCredential *ConnectionGithubConfigAuthorizerCredential `pulumi:"authorizerCredential"`
}

// ConnectionGithubConfigInput is an input type that accepts ConnectionGithubConfigArgs and ConnectionGithubConfigOutput values.
// You can construct a concrete instance of `ConnectionGithubConfigInput` via:
//
//	ConnectionGithubConfigArgs{...}
type ConnectionGithubConfigInput interface {
	pulumi.Input

	ToConnectionGithubConfigOutput() ConnectionGithubConfigOutput
	ToConnectionGithubConfigOutputWithContext(context.Context) ConnectionGithubConfigOutput
}

type ConnectionGithubConfigArgs struct {
	// GitHub App installation id.
	AppInstallationId pulumi.IntPtrInput `pulumi:"appInstallationId"`
	// OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
	AuthorizerCredential ConnectionGithubConfigAuthorizerCredentialPtrInput `pulumi:"authorizerCredential"`
}

func (ConnectionGithubConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubConfig)(nil)).Elem()
}

func (i ConnectionGithubConfigArgs) ToConnectionGithubConfigOutput() ConnectionGithubConfigOutput {
	return i.ToConnectionGithubConfigOutputWithContext(context.Background())
}

func (i ConnectionGithubConfigArgs) ToConnectionGithubConfigOutputWithContext(ctx context.Context) ConnectionGithubConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigOutput)
}

func (i ConnectionGithubConfigArgs) ToConnectionGithubConfigPtrOutput() ConnectionGithubConfigPtrOutput {
	return i.ToConnectionGithubConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionGithubConfigArgs) ToConnectionGithubConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigOutput).ToConnectionGithubConfigPtrOutputWithContext(ctx)
}

// ConnectionGithubConfigPtrInput is an input type that accepts ConnectionGithubConfigArgs, ConnectionGithubConfigPtr and ConnectionGithubConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionGithubConfigPtrInput` via:
//
//	        ConnectionGithubConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionGithubConfigPtrInput interface {
	pulumi.Input

	ToConnectionGithubConfigPtrOutput() ConnectionGithubConfigPtrOutput
	ToConnectionGithubConfigPtrOutputWithContext(context.Context) ConnectionGithubConfigPtrOutput
}

type connectionGithubConfigPtrType ConnectionGithubConfigArgs

func ConnectionGithubConfigPtr(v *ConnectionGithubConfigArgs) ConnectionGithubConfigPtrInput {
	return (*connectionGithubConfigPtrType)(v)
}

func (*connectionGithubConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubConfig)(nil)).Elem()
}

func (i *connectionGithubConfigPtrType) ToConnectionGithubConfigPtrOutput() ConnectionGithubConfigPtrOutput {
	return i.ToConnectionGithubConfigPtrOutputWithContext(context.Background())
}

func (i *connectionGithubConfigPtrType) ToConnectionGithubConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigPtrOutput)
}

type ConnectionGithubConfigOutput struct{ *pulumi.OutputState }

func (ConnectionGithubConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubConfig)(nil)).Elem()
}

func (o ConnectionGithubConfigOutput) ToConnectionGithubConfigOutput() ConnectionGithubConfigOutput {
	return o
}

func (o ConnectionGithubConfigOutput) ToConnectionGithubConfigOutputWithContext(ctx context.Context) ConnectionGithubConfigOutput {
	return o
}

func (o ConnectionGithubConfigOutput) ToConnectionGithubConfigPtrOutput() ConnectionGithubConfigPtrOutput {
	return o.ToConnectionGithubConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionGithubConfigOutput) ToConnectionGithubConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGithubConfig) *ConnectionGithubConfig {
		return &v
	}).(ConnectionGithubConfigPtrOutput)
}

// GitHub App installation id.
func (o ConnectionGithubConfigOutput) AppInstallationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionGithubConfig) *int { return v.AppInstallationId }).(pulumi.IntPtrOutput)
}

// OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
func (o ConnectionGithubConfigOutput) AuthorizerCredential() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o.ApplyT(func(v ConnectionGithubConfig) *ConnectionGithubConfigAuthorizerCredential {
		return v.AuthorizerCredential
	}).(ConnectionGithubConfigAuthorizerCredentialPtrOutput)
}

type ConnectionGithubConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGithubConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubConfig)(nil)).Elem()
}

func (o ConnectionGithubConfigPtrOutput) ToConnectionGithubConfigPtrOutput() ConnectionGithubConfigPtrOutput {
	return o
}

func (o ConnectionGithubConfigPtrOutput) ToConnectionGithubConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigPtrOutput {
	return o
}

func (o ConnectionGithubConfigPtrOutput) Elem() ConnectionGithubConfigOutput {
	return o.ApplyT(func(v *ConnectionGithubConfig) ConnectionGithubConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionGithubConfig
		return ret
	}).(ConnectionGithubConfigOutput)
}

// GitHub App installation id.
func (o ConnectionGithubConfigPtrOutput) AppInstallationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubConfig) *int {
		if v == nil {
			return nil
		}
		return v.AppInstallationId
	}).(pulumi.IntPtrOutput)
}

// OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
func (o ConnectionGithubConfigPtrOutput) AuthorizerCredential() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubConfig) *ConnectionGithubConfigAuthorizerCredential {
		if v == nil {
			return nil
		}
		return v.AuthorizerCredential
	}).(ConnectionGithubConfigAuthorizerCredentialPtrOutput)
}

type ConnectionGithubConfigAuthorizerCredential struct {
	// A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
	OauthTokenSecretVersion *string `pulumi:"oauthTokenSecretVersion"`
	// Output only. The username associated to this token.
	Username *string `pulumi:"username"`
}

// ConnectionGithubConfigAuthorizerCredentialInput is an input type that accepts ConnectionGithubConfigAuthorizerCredentialArgs and ConnectionGithubConfigAuthorizerCredentialOutput values.
// You can construct a concrete instance of `ConnectionGithubConfigAuthorizerCredentialInput` via:
//
//	ConnectionGithubConfigAuthorizerCredentialArgs{...}
type ConnectionGithubConfigAuthorizerCredentialInput interface {
	pulumi.Input

	ToConnectionGithubConfigAuthorizerCredentialOutput() ConnectionGithubConfigAuthorizerCredentialOutput
	ToConnectionGithubConfigAuthorizerCredentialOutputWithContext(context.Context) ConnectionGithubConfigAuthorizerCredentialOutput
}

type ConnectionGithubConfigAuthorizerCredentialArgs struct {
	// A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
	OauthTokenSecretVersion pulumi.StringPtrInput `pulumi:"oauthTokenSecretVersion"`
	// Output only. The username associated to this token.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ConnectionGithubConfigAuthorizerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubConfigAuthorizerCredential)(nil)).Elem()
}

func (i ConnectionGithubConfigAuthorizerCredentialArgs) ToConnectionGithubConfigAuthorizerCredentialOutput() ConnectionGithubConfigAuthorizerCredentialOutput {
	return i.ToConnectionGithubConfigAuthorizerCredentialOutputWithContext(context.Background())
}

func (i ConnectionGithubConfigAuthorizerCredentialArgs) ToConnectionGithubConfigAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigAuthorizerCredentialOutput)
}

func (i ConnectionGithubConfigAuthorizerCredentialArgs) ToConnectionGithubConfigAuthorizerCredentialPtrOutput() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return i.ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i ConnectionGithubConfigAuthorizerCredentialArgs) ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigAuthorizerCredentialOutput).ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(ctx)
}

// ConnectionGithubConfigAuthorizerCredentialPtrInput is an input type that accepts ConnectionGithubConfigAuthorizerCredentialArgs, ConnectionGithubConfigAuthorizerCredentialPtr and ConnectionGithubConfigAuthorizerCredentialPtrOutput values.
// You can construct a concrete instance of `ConnectionGithubConfigAuthorizerCredentialPtrInput` via:
//
//	        ConnectionGithubConfigAuthorizerCredentialArgs{...}
//
//	or:
//
//	        nil
type ConnectionGithubConfigAuthorizerCredentialPtrInput interface {
	pulumi.Input

	ToConnectionGithubConfigAuthorizerCredentialPtrOutput() ConnectionGithubConfigAuthorizerCredentialPtrOutput
	ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(context.Context) ConnectionGithubConfigAuthorizerCredentialPtrOutput
}

type connectionGithubConfigAuthorizerCredentialPtrType ConnectionGithubConfigAuthorizerCredentialArgs

func ConnectionGithubConfigAuthorizerCredentialPtr(v *ConnectionGithubConfigAuthorizerCredentialArgs) ConnectionGithubConfigAuthorizerCredentialPtrInput {
	return (*connectionGithubConfigAuthorizerCredentialPtrType)(v)
}

func (*connectionGithubConfigAuthorizerCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubConfigAuthorizerCredential)(nil)).Elem()
}

func (i *connectionGithubConfigAuthorizerCredentialPtrType) ToConnectionGithubConfigAuthorizerCredentialPtrOutput() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return i.ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i *connectionGithubConfigAuthorizerCredentialPtrType) ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubConfigAuthorizerCredentialPtrOutput)
}

type ConnectionGithubConfigAuthorizerCredentialOutput struct{ *pulumi.OutputState }

func (ConnectionGithubConfigAuthorizerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubConfigAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGithubConfigAuthorizerCredentialOutput) ToConnectionGithubConfigAuthorizerCredentialOutput() ConnectionGithubConfigAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGithubConfigAuthorizerCredentialOutput) ToConnectionGithubConfigAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGithubConfigAuthorizerCredentialOutput) ToConnectionGithubConfigAuthorizerCredentialPtrOutput() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o.ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (o ConnectionGithubConfigAuthorizerCredentialOutput) ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGithubConfigAuthorizerCredential) *ConnectionGithubConfigAuthorizerCredential {
		return &v
	}).(ConnectionGithubConfigAuthorizerCredentialPtrOutput)
}

// A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubConfigAuthorizerCredentialOutput) OauthTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubConfigAuthorizerCredential) *string { return v.OauthTokenSecretVersion }).(pulumi.StringPtrOutput)
}

// Output only. The username associated to this token.
func (o ConnectionGithubConfigAuthorizerCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubConfigAuthorizerCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ConnectionGithubConfigAuthorizerCredentialPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGithubConfigAuthorizerCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubConfigAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGithubConfigAuthorizerCredentialPtrOutput) ToConnectionGithubConfigAuthorizerCredentialPtrOutput() ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGithubConfigAuthorizerCredentialPtrOutput) ToConnectionGithubConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGithubConfigAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGithubConfigAuthorizerCredentialPtrOutput) Elem() ConnectionGithubConfigAuthorizerCredentialOutput {
	return o.ApplyT(func(v *ConnectionGithubConfigAuthorizerCredential) ConnectionGithubConfigAuthorizerCredential {
		if v != nil {
			return *v
		}
		var ret ConnectionGithubConfigAuthorizerCredential
		return ret
	}).(ConnectionGithubConfigAuthorizerCredentialOutput)
}

// A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubConfigAuthorizerCredentialPtrOutput) OauthTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubConfigAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return v.OauthTokenSecretVersion
	}).(pulumi.StringPtrOutput)
}

// Output only. The username associated to this token.
func (o ConnectionGithubConfigAuthorizerCredentialPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubConfigAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionGithubEnterpriseConfig struct {
	// Id of the GitHub App created from the manifest.
	AppId *int `pulumi:"appId"`
	// ID of the installation of the GitHub App.
	AppInstallationId *int `pulumi:"appInstallationId"`
	// The URL-friendly name of the GitHub App.
	AppSlug *string `pulumi:"appSlug"`
	// Required. The URI of the GitHub Enterprise host this connection is for.
	HostUri string `pulumi:"hostUri"`
	// SecretManager resource containing the private key of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
	PrivateKeySecretVersion *string `pulumi:"privateKeySecretVersion"`
	// Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
	ServiceDirectoryConfig *ConnectionGithubEnterpriseConfigServiceDirectoryConfig `pulumi:"serviceDirectoryConfig"`
	// SSL certificate to use for requests to GitHub Enterprise.
	SslCa *string `pulumi:"sslCa"`
	// SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
	WebhookSecretSecretVersion *string `pulumi:"webhookSecretSecretVersion"`
}

// ConnectionGithubEnterpriseConfigInput is an input type that accepts ConnectionGithubEnterpriseConfigArgs and ConnectionGithubEnterpriseConfigOutput values.
// You can construct a concrete instance of `ConnectionGithubEnterpriseConfigInput` via:
//
//	ConnectionGithubEnterpriseConfigArgs{...}
type ConnectionGithubEnterpriseConfigInput interface {
	pulumi.Input

	ToConnectionGithubEnterpriseConfigOutput() ConnectionGithubEnterpriseConfigOutput
	ToConnectionGithubEnterpriseConfigOutputWithContext(context.Context) ConnectionGithubEnterpriseConfigOutput
}

type ConnectionGithubEnterpriseConfigArgs struct {
	// Id of the GitHub App created from the manifest.
	AppId pulumi.IntPtrInput `pulumi:"appId"`
	// ID of the installation of the GitHub App.
	AppInstallationId pulumi.IntPtrInput `pulumi:"appInstallationId"`
	// The URL-friendly name of the GitHub App.
	AppSlug pulumi.StringPtrInput `pulumi:"appSlug"`
	// Required. The URI of the GitHub Enterprise host this connection is for.
	HostUri pulumi.StringInput `pulumi:"hostUri"`
	// SecretManager resource containing the private key of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
	PrivateKeySecretVersion pulumi.StringPtrInput `pulumi:"privateKeySecretVersion"`
	// Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
	ServiceDirectoryConfig ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput `pulumi:"serviceDirectoryConfig"`
	// SSL certificate to use for requests to GitHub Enterprise.
	SslCa pulumi.StringPtrInput `pulumi:"sslCa"`
	// SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
	WebhookSecretSecretVersion pulumi.StringPtrInput `pulumi:"webhookSecretSecretVersion"`
}

func (ConnectionGithubEnterpriseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubEnterpriseConfig)(nil)).Elem()
}

func (i ConnectionGithubEnterpriseConfigArgs) ToConnectionGithubEnterpriseConfigOutput() ConnectionGithubEnterpriseConfigOutput {
	return i.ToConnectionGithubEnterpriseConfigOutputWithContext(context.Background())
}

func (i ConnectionGithubEnterpriseConfigArgs) ToConnectionGithubEnterpriseConfigOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigOutput)
}

func (i ConnectionGithubEnterpriseConfigArgs) ToConnectionGithubEnterpriseConfigPtrOutput() ConnectionGithubEnterpriseConfigPtrOutput {
	return i.ToConnectionGithubEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionGithubEnterpriseConfigArgs) ToConnectionGithubEnterpriseConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigOutput).ToConnectionGithubEnterpriseConfigPtrOutputWithContext(ctx)
}

// ConnectionGithubEnterpriseConfigPtrInput is an input type that accepts ConnectionGithubEnterpriseConfigArgs, ConnectionGithubEnterpriseConfigPtr and ConnectionGithubEnterpriseConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionGithubEnterpriseConfigPtrInput` via:
//
//	        ConnectionGithubEnterpriseConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionGithubEnterpriseConfigPtrInput interface {
	pulumi.Input

	ToConnectionGithubEnterpriseConfigPtrOutput() ConnectionGithubEnterpriseConfigPtrOutput
	ToConnectionGithubEnterpriseConfigPtrOutputWithContext(context.Context) ConnectionGithubEnterpriseConfigPtrOutput
}

type connectionGithubEnterpriseConfigPtrType ConnectionGithubEnterpriseConfigArgs

func ConnectionGithubEnterpriseConfigPtr(v *ConnectionGithubEnterpriseConfigArgs) ConnectionGithubEnterpriseConfigPtrInput {
	return (*connectionGithubEnterpriseConfigPtrType)(v)
}

func (*connectionGithubEnterpriseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubEnterpriseConfig)(nil)).Elem()
}

func (i *connectionGithubEnterpriseConfigPtrType) ToConnectionGithubEnterpriseConfigPtrOutput() ConnectionGithubEnterpriseConfigPtrOutput {
	return i.ToConnectionGithubEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (i *connectionGithubEnterpriseConfigPtrType) ToConnectionGithubEnterpriseConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigPtrOutput)
}

type ConnectionGithubEnterpriseConfigOutput struct{ *pulumi.OutputState }

func (ConnectionGithubEnterpriseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubEnterpriseConfig)(nil)).Elem()
}

func (o ConnectionGithubEnterpriseConfigOutput) ToConnectionGithubEnterpriseConfigOutput() ConnectionGithubEnterpriseConfigOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigOutput) ToConnectionGithubEnterpriseConfigOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigOutput) ToConnectionGithubEnterpriseConfigPtrOutput() ConnectionGithubEnterpriseConfigPtrOutput {
	return o.ToConnectionGithubEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionGithubEnterpriseConfigOutput) ToConnectionGithubEnterpriseConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGithubEnterpriseConfig) *ConnectionGithubEnterpriseConfig {
		return &v
	}).(ConnectionGithubEnterpriseConfigPtrOutput)
}

// Id of the GitHub App created from the manifest.
func (o ConnectionGithubEnterpriseConfigOutput) AppId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *int { return v.AppId }).(pulumi.IntPtrOutput)
}

// ID of the installation of the GitHub App.
func (o ConnectionGithubEnterpriseConfigOutput) AppInstallationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *int { return v.AppInstallationId }).(pulumi.IntPtrOutput)
}

// The URL-friendly name of the GitHub App.
func (o ConnectionGithubEnterpriseConfigOutput) AppSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *string { return v.AppSlug }).(pulumi.StringPtrOutput)
}

// Required. The URI of the GitHub Enterprise host this connection is for.
func (o ConnectionGithubEnterpriseConfigOutput) HostUri() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) string { return v.HostUri }).(pulumi.StringOutput)
}

// SecretManager resource containing the private key of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubEnterpriseConfigOutput) PrivateKeySecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *string { return v.PrivateKeySecretVersion }).(pulumi.StringPtrOutput)
}

// Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
func (o ConnectionGithubEnterpriseConfigOutput) ServiceDirectoryConfig() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *ConnectionGithubEnterpriseConfigServiceDirectoryConfig {
		return v.ServiceDirectoryConfig
	}).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput)
}

// SSL certificate to use for requests to GitHub Enterprise.
func (o ConnectionGithubEnterpriseConfigOutput) SslCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *string { return v.SslCa }).(pulumi.StringPtrOutput)
}

// SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubEnterpriseConfigOutput) WebhookSecretSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfig) *string { return v.WebhookSecretSecretVersion }).(pulumi.StringPtrOutput)
}

type ConnectionGithubEnterpriseConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGithubEnterpriseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubEnterpriseConfig)(nil)).Elem()
}

func (o ConnectionGithubEnterpriseConfigPtrOutput) ToConnectionGithubEnterpriseConfigPtrOutput() ConnectionGithubEnterpriseConfigPtrOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigPtrOutput) ToConnectionGithubEnterpriseConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigPtrOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigPtrOutput) Elem() ConnectionGithubEnterpriseConfigOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) ConnectionGithubEnterpriseConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionGithubEnterpriseConfig
		return ret
	}).(ConnectionGithubEnterpriseConfigOutput)
}

// Id of the GitHub App created from the manifest.
func (o ConnectionGithubEnterpriseConfigPtrOutput) AppId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *int {
		if v == nil {
			return nil
		}
		return v.AppId
	}).(pulumi.IntPtrOutput)
}

// ID of the installation of the GitHub App.
func (o ConnectionGithubEnterpriseConfigPtrOutput) AppInstallationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *int {
		if v == nil {
			return nil
		}
		return v.AppInstallationId
	}).(pulumi.IntPtrOutput)
}

// The URL-friendly name of the GitHub App.
func (o ConnectionGithubEnterpriseConfigPtrOutput) AppSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.AppSlug
	}).(pulumi.StringPtrOutput)
}

// Required. The URI of the GitHub Enterprise host this connection is for.
func (o ConnectionGithubEnterpriseConfigPtrOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return &v.HostUri
	}).(pulumi.StringPtrOutput)
}

// SecretManager resource containing the private key of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubEnterpriseConfigPtrOutput) PrivateKeySecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKeySecretVersion
	}).(pulumi.StringPtrOutput)
}

// Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
func (o ConnectionGithubEnterpriseConfigPtrOutput) ServiceDirectoryConfig() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *ConnectionGithubEnterpriseConfigServiceDirectoryConfig {
		if v == nil {
			return nil
		}
		return v.ServiceDirectoryConfig
	}).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput)
}

// SSL certificate to use for requests to GitHub Enterprise.
func (o ConnectionGithubEnterpriseConfigPtrOutput) SslCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.SslCa
	}).(pulumi.StringPtrOutput)
}

// SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
func (o ConnectionGithubEnterpriseConfigPtrOutput) WebhookSecretSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.WebhookSecretSecretVersion
	}).(pulumi.StringPtrOutput)
}

type ConnectionGithubEnterpriseConfigServiceDirectoryConfig struct {
	// Required. The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service string `pulumi:"service"`
}

// ConnectionGithubEnterpriseConfigServiceDirectoryConfigInput is an input type that accepts ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs and ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput values.
// You can construct a concrete instance of `ConnectionGithubEnterpriseConfigServiceDirectoryConfigInput` via:
//
//	ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs{...}
type ConnectionGithubEnterpriseConfigServiceDirectoryConfigInput interface {
	pulumi.Input

	ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput
	ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputWithContext(context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput
}

type ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs struct {
	// Required. The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service pulumi.StringInput `pulumi:"service"`
}

func (ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubEnterpriseConfigServiceDirectoryConfig)(nil)).Elem()
}

func (i ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput {
	return i.ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputWithContext(context.Background())
}

func (i ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput)
}

func (i ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return i.ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput).ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx)
}

// ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput is an input type that accepts ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs, ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtr and ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput` via:
//
//	        ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput interface {
	pulumi.Input

	ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput
	ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput
}

type connectionGithubEnterpriseConfigServiceDirectoryConfigPtrType ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs

func ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtr(v *ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput {
	return (*connectionGithubEnterpriseConfigServiceDirectoryConfigPtrType)(v)
}

func (*connectionGithubEnterpriseConfigServiceDirectoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubEnterpriseConfigServiceDirectoryConfig)(nil)).Elem()
}

func (i *connectionGithubEnterpriseConfigServiceDirectoryConfigPtrType) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return i.ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i *connectionGithubEnterpriseConfigServiceDirectoryConfigPtrType) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput)
}

type ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput struct{ *pulumi.OutputState }

func (ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGithubEnterpriseConfigServiceDirectoryConfig)(nil)).Elem()
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o.ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGithubEnterpriseConfigServiceDirectoryConfig) *ConnectionGithubEnterpriseConfigServiceDirectoryConfig {
		return &v
	}).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput)
}

// Required. The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGithubEnterpriseConfigServiceDirectoryConfig) string { return v.Service }).(pulumi.StringOutput)
}

type ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGithubEnterpriseConfigServiceDirectoryConfig)(nil)).Elem()
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput() ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput) ToConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput {
	return o
}

func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput) Elem() ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfigServiceDirectoryConfig) ConnectionGithubEnterpriseConfigServiceDirectoryConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionGithubEnterpriseConfigServiceDirectoryConfig
		return ret
	}).(ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput)
}

// Required. The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGithubEnterpriseConfigServiceDirectoryConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

type ConnectionGitlabConfig struct {
	// Required. A GitLab personal access token with the `api` scope access.
	AuthorizerCredential ConnectionGitlabConfigAuthorizerCredential `pulumi:"authorizerCredential"`
	// The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
	HostUri *string `pulumi:"hostUri"`
	// Required. A GitLab personal access token with the minimum `readApi` scope access.
	ReadAuthorizerCredential ConnectionGitlabConfigReadAuthorizerCredential `pulumi:"readAuthorizerCredential"`
	// Output only. Version of the GitLab Enterprise server running on the `hostUri`.
	ServerVersion *string `pulumi:"serverVersion"`
	// Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.
	ServiceDirectoryConfig *ConnectionGitlabConfigServiceDirectoryConfig `pulumi:"serviceDirectoryConfig"`
	// SSL certificate to use for requests to GitLab Enterprise.
	SslCa *string `pulumi:"sslCa"`
	// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*/secrets/*/versions/*`.
	WebhookSecretSecretVersion string `pulumi:"webhookSecretSecretVersion"`
}

// ConnectionGitlabConfigInput is an input type that accepts ConnectionGitlabConfigArgs and ConnectionGitlabConfigOutput values.
// You can construct a concrete instance of `ConnectionGitlabConfigInput` via:
//
//	ConnectionGitlabConfigArgs{...}
type ConnectionGitlabConfigInput interface {
	pulumi.Input

	ToConnectionGitlabConfigOutput() ConnectionGitlabConfigOutput
	ToConnectionGitlabConfigOutputWithContext(context.Context) ConnectionGitlabConfigOutput
}

type ConnectionGitlabConfigArgs struct {
	// Required. A GitLab personal access token with the `api` scope access.
	AuthorizerCredential ConnectionGitlabConfigAuthorizerCredentialInput `pulumi:"authorizerCredential"`
	// The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
	HostUri pulumi.StringPtrInput `pulumi:"hostUri"`
	// Required. A GitLab personal access token with the minimum `readApi` scope access.
	ReadAuthorizerCredential ConnectionGitlabConfigReadAuthorizerCredentialInput `pulumi:"readAuthorizerCredential"`
	// Output only. Version of the GitLab Enterprise server running on the `hostUri`.
	ServerVersion pulumi.StringPtrInput `pulumi:"serverVersion"`
	// Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.
	ServiceDirectoryConfig ConnectionGitlabConfigServiceDirectoryConfigPtrInput `pulumi:"serviceDirectoryConfig"`
	// SSL certificate to use for requests to GitLab Enterprise.
	SslCa pulumi.StringPtrInput `pulumi:"sslCa"`
	// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*/secrets/*/versions/*`.
	WebhookSecretSecretVersion pulumi.StringInput `pulumi:"webhookSecretSecretVersion"`
}

func (ConnectionGitlabConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabConfig)(nil)).Elem()
}

func (i ConnectionGitlabConfigArgs) ToConnectionGitlabConfigOutput() ConnectionGitlabConfigOutput {
	return i.ToConnectionGitlabConfigOutputWithContext(context.Background())
}

func (i ConnectionGitlabConfigArgs) ToConnectionGitlabConfigOutputWithContext(ctx context.Context) ConnectionGitlabConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigOutput)
}

func (i ConnectionGitlabConfigArgs) ToConnectionGitlabConfigPtrOutput() ConnectionGitlabConfigPtrOutput {
	return i.ToConnectionGitlabConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionGitlabConfigArgs) ToConnectionGitlabConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigOutput).ToConnectionGitlabConfigPtrOutputWithContext(ctx)
}

// ConnectionGitlabConfigPtrInput is an input type that accepts ConnectionGitlabConfigArgs, ConnectionGitlabConfigPtr and ConnectionGitlabConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionGitlabConfigPtrInput` via:
//
//	        ConnectionGitlabConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionGitlabConfigPtrInput interface {
	pulumi.Input

	ToConnectionGitlabConfigPtrOutput() ConnectionGitlabConfigPtrOutput
	ToConnectionGitlabConfigPtrOutputWithContext(context.Context) ConnectionGitlabConfigPtrOutput
}

type connectionGitlabConfigPtrType ConnectionGitlabConfigArgs

func ConnectionGitlabConfigPtr(v *ConnectionGitlabConfigArgs) ConnectionGitlabConfigPtrInput {
	return (*connectionGitlabConfigPtrType)(v)
}

func (*connectionGitlabConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabConfig)(nil)).Elem()
}

func (i *connectionGitlabConfigPtrType) ToConnectionGitlabConfigPtrOutput() ConnectionGitlabConfigPtrOutput {
	return i.ToConnectionGitlabConfigPtrOutputWithContext(context.Background())
}

func (i *connectionGitlabConfigPtrType) ToConnectionGitlabConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigPtrOutput)
}

type ConnectionGitlabConfigOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabConfig)(nil)).Elem()
}

func (o ConnectionGitlabConfigOutput) ToConnectionGitlabConfigOutput() ConnectionGitlabConfigOutput {
	return o
}

func (o ConnectionGitlabConfigOutput) ToConnectionGitlabConfigOutputWithContext(ctx context.Context) ConnectionGitlabConfigOutput {
	return o
}

func (o ConnectionGitlabConfigOutput) ToConnectionGitlabConfigPtrOutput() ConnectionGitlabConfigPtrOutput {
	return o.ToConnectionGitlabConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionGitlabConfigOutput) ToConnectionGitlabConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGitlabConfig) *ConnectionGitlabConfig {
		return &v
	}).(ConnectionGitlabConfigPtrOutput)
}

// Required. A GitLab personal access token with the `api` scope access.
func (o ConnectionGitlabConfigOutput) AuthorizerCredential() ConnectionGitlabConfigAuthorizerCredentialOutput {
	return o.ApplyT(func(v ConnectionGitlabConfig) ConnectionGitlabConfigAuthorizerCredential {
		return v.AuthorizerCredential
	}).(ConnectionGitlabConfigAuthorizerCredentialOutput)
}

// The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
func (o ConnectionGitlabConfigOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGitlabConfig) *string { return v.HostUri }).(pulumi.StringPtrOutput)
}

// Required. A GitLab personal access token with the minimum `readApi` scope access.
func (o ConnectionGitlabConfigOutput) ReadAuthorizerCredential() ConnectionGitlabConfigReadAuthorizerCredentialOutput {
	return o.ApplyT(func(v ConnectionGitlabConfig) ConnectionGitlabConfigReadAuthorizerCredential {
		return v.ReadAuthorizerCredential
	}).(ConnectionGitlabConfigReadAuthorizerCredentialOutput)
}

// Output only. Version of the GitLab Enterprise server running on the `hostUri`.
func (o ConnectionGitlabConfigOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGitlabConfig) *string { return v.ServerVersion }).(pulumi.StringPtrOutput)
}

// Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.
func (o ConnectionGitlabConfigOutput) ServiceDirectoryConfig() ConnectionGitlabConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v ConnectionGitlabConfig) *ConnectionGitlabConfigServiceDirectoryConfig {
		return v.ServiceDirectoryConfig
	}).(ConnectionGitlabConfigServiceDirectoryConfigPtrOutput)
}

// SSL certificate to use for requests to GitLab Enterprise.
func (o ConnectionGitlabConfigOutput) SslCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGitlabConfig) *string { return v.SslCa }).(pulumi.StringPtrOutput)
}

// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*/secrets/*/versions/*`.
func (o ConnectionGitlabConfigOutput) WebhookSecretSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGitlabConfig) string { return v.WebhookSecretSecretVersion }).(pulumi.StringOutput)
}

type ConnectionGitlabConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabConfig)(nil)).Elem()
}

func (o ConnectionGitlabConfigPtrOutput) ToConnectionGitlabConfigPtrOutput() ConnectionGitlabConfigPtrOutput {
	return o
}

func (o ConnectionGitlabConfigPtrOutput) ToConnectionGitlabConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigPtrOutput {
	return o
}

func (o ConnectionGitlabConfigPtrOutput) Elem() ConnectionGitlabConfigOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfig) ConnectionGitlabConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionGitlabConfig
		return ret
	}).(ConnectionGitlabConfigOutput)
}

// Required. A GitLab personal access token with the `api` scope access.
func (o ConnectionGitlabConfigPtrOutput) AuthorizerCredential() ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfig) *ConnectionGitlabConfigAuthorizerCredential {
		if v == nil {
			return nil
		}
		return &v.AuthorizerCredential
	}).(ConnectionGitlabConfigAuthorizerCredentialPtrOutput)
}

// The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
func (o ConnectionGitlabConfigPtrOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfig) *string {
		if v == nil {
			return nil
		}
		return v.HostUri
	}).(pulumi.StringPtrOutput)
}

// Required. A GitLab personal access token with the minimum `readApi` scope access.
func (o ConnectionGitlabConfigPtrOutput) ReadAuthorizerCredential() ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfig) *ConnectionGitlabConfigReadAuthorizerCredential {
		if v == nil {
			return nil
		}
		return &v.ReadAuthorizerCredential
	}).(ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput)
}

// Output only. Version of the GitLab Enterprise server running on the `hostUri`.
func (o ConnectionGitlabConfigPtrOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerVersion
	}).(pulumi.StringPtrOutput)
}

// Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.
func (o ConnectionGitlabConfigPtrOutput) ServiceDirectoryConfig() ConnectionGitlabConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfig) *ConnectionGitlabConfigServiceDirectoryConfig {
		if v == nil {
			return nil
		}
		return v.ServiceDirectoryConfig
	}).(ConnectionGitlabConfigServiceDirectoryConfigPtrOutput)
}

// SSL certificate to use for requests to GitLab Enterprise.
func (o ConnectionGitlabConfigPtrOutput) SslCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfig) *string {
		if v == nil {
			return nil
		}
		return v.SslCa
	}).(pulumi.StringPtrOutput)
}

// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*/secrets/*/versions/*`.
func (o ConnectionGitlabConfigPtrOutput) WebhookSecretSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfig) *string {
		if v == nil {
			return nil
		}
		return &v.WebhookSecretSecretVersion
	}).(pulumi.StringPtrOutput)
}

type ConnectionGitlabConfigAuthorizerCredential struct {
	// Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion string `pulumi:"userTokenSecretVersion"`
	// Output only. The username associated to this token.
	Username *string `pulumi:"username"`
}

// ConnectionGitlabConfigAuthorizerCredentialInput is an input type that accepts ConnectionGitlabConfigAuthorizerCredentialArgs and ConnectionGitlabConfigAuthorizerCredentialOutput values.
// You can construct a concrete instance of `ConnectionGitlabConfigAuthorizerCredentialInput` via:
//
//	ConnectionGitlabConfigAuthorizerCredentialArgs{...}
type ConnectionGitlabConfigAuthorizerCredentialInput interface {
	pulumi.Input

	ToConnectionGitlabConfigAuthorizerCredentialOutput() ConnectionGitlabConfigAuthorizerCredentialOutput
	ToConnectionGitlabConfigAuthorizerCredentialOutputWithContext(context.Context) ConnectionGitlabConfigAuthorizerCredentialOutput
}

type ConnectionGitlabConfigAuthorizerCredentialArgs struct {
	// Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion pulumi.StringInput `pulumi:"userTokenSecretVersion"`
	// Output only. The username associated to this token.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ConnectionGitlabConfigAuthorizerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabConfigAuthorizerCredential)(nil)).Elem()
}

func (i ConnectionGitlabConfigAuthorizerCredentialArgs) ToConnectionGitlabConfigAuthorizerCredentialOutput() ConnectionGitlabConfigAuthorizerCredentialOutput {
	return i.ToConnectionGitlabConfigAuthorizerCredentialOutputWithContext(context.Background())
}

func (i ConnectionGitlabConfigAuthorizerCredentialArgs) ToConnectionGitlabConfigAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGitlabConfigAuthorizerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigAuthorizerCredentialOutput)
}

func (i ConnectionGitlabConfigAuthorizerCredentialArgs) ToConnectionGitlabConfigAuthorizerCredentialPtrOutput() ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return i.ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i ConnectionGitlabConfigAuthorizerCredentialArgs) ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigAuthorizerCredentialOutput).ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(ctx)
}

// ConnectionGitlabConfigAuthorizerCredentialPtrInput is an input type that accepts ConnectionGitlabConfigAuthorizerCredentialArgs, ConnectionGitlabConfigAuthorizerCredentialPtr and ConnectionGitlabConfigAuthorizerCredentialPtrOutput values.
// You can construct a concrete instance of `ConnectionGitlabConfigAuthorizerCredentialPtrInput` via:
//
//	        ConnectionGitlabConfigAuthorizerCredentialArgs{...}
//
//	or:
//
//	        nil
type ConnectionGitlabConfigAuthorizerCredentialPtrInput interface {
	pulumi.Input

	ToConnectionGitlabConfigAuthorizerCredentialPtrOutput() ConnectionGitlabConfigAuthorizerCredentialPtrOutput
	ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(context.Context) ConnectionGitlabConfigAuthorizerCredentialPtrOutput
}

type connectionGitlabConfigAuthorizerCredentialPtrType ConnectionGitlabConfigAuthorizerCredentialArgs

func ConnectionGitlabConfigAuthorizerCredentialPtr(v *ConnectionGitlabConfigAuthorizerCredentialArgs) ConnectionGitlabConfigAuthorizerCredentialPtrInput {
	return (*connectionGitlabConfigAuthorizerCredentialPtrType)(v)
}

func (*connectionGitlabConfigAuthorizerCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabConfigAuthorizerCredential)(nil)).Elem()
}

func (i *connectionGitlabConfigAuthorizerCredentialPtrType) ToConnectionGitlabConfigAuthorizerCredentialPtrOutput() ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return i.ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i *connectionGitlabConfigAuthorizerCredentialPtrType) ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigAuthorizerCredentialPtrOutput)
}

type ConnectionGitlabConfigAuthorizerCredentialOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabConfigAuthorizerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabConfigAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGitlabConfigAuthorizerCredentialOutput) ToConnectionGitlabConfigAuthorizerCredentialOutput() ConnectionGitlabConfigAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGitlabConfigAuthorizerCredentialOutput) ToConnectionGitlabConfigAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGitlabConfigAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGitlabConfigAuthorizerCredentialOutput) ToConnectionGitlabConfigAuthorizerCredentialPtrOutput() ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return o.ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (o ConnectionGitlabConfigAuthorizerCredentialOutput) ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGitlabConfigAuthorizerCredential) *ConnectionGitlabConfigAuthorizerCredential {
		return &v
	}).(ConnectionGitlabConfigAuthorizerCredentialPtrOutput)
}

// Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
func (o ConnectionGitlabConfigAuthorizerCredentialOutput) UserTokenSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGitlabConfigAuthorizerCredential) string { return v.UserTokenSecretVersion }).(pulumi.StringOutput)
}

// Output only. The username associated to this token.
func (o ConnectionGitlabConfigAuthorizerCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGitlabConfigAuthorizerCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ConnectionGitlabConfigAuthorizerCredentialPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabConfigAuthorizerCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabConfigAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGitlabConfigAuthorizerCredentialPtrOutput) ToConnectionGitlabConfigAuthorizerCredentialPtrOutput() ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGitlabConfigAuthorizerCredentialPtrOutput) ToConnectionGitlabConfigAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGitlabConfigAuthorizerCredentialPtrOutput) Elem() ConnectionGitlabConfigAuthorizerCredentialOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfigAuthorizerCredential) ConnectionGitlabConfigAuthorizerCredential {
		if v != nil {
			return *v
		}
		var ret ConnectionGitlabConfigAuthorizerCredential
		return ret
	}).(ConnectionGitlabConfigAuthorizerCredentialOutput)
}

// Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
func (o ConnectionGitlabConfigAuthorizerCredentialPtrOutput) UserTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfigAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return &v.UserTokenSecretVersion
	}).(pulumi.StringPtrOutput)
}

// Output only. The username associated to this token.
func (o ConnectionGitlabConfigAuthorizerCredentialPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfigAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionGitlabConfigReadAuthorizerCredential struct {
	// Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion string `pulumi:"userTokenSecretVersion"`
	// Output only. The username associated to this token.
	//
	// ***
	Username *string `pulumi:"username"`
}

// ConnectionGitlabConfigReadAuthorizerCredentialInput is an input type that accepts ConnectionGitlabConfigReadAuthorizerCredentialArgs and ConnectionGitlabConfigReadAuthorizerCredentialOutput values.
// You can construct a concrete instance of `ConnectionGitlabConfigReadAuthorizerCredentialInput` via:
//
//	ConnectionGitlabConfigReadAuthorizerCredentialArgs{...}
type ConnectionGitlabConfigReadAuthorizerCredentialInput interface {
	pulumi.Input

	ToConnectionGitlabConfigReadAuthorizerCredentialOutput() ConnectionGitlabConfigReadAuthorizerCredentialOutput
	ToConnectionGitlabConfigReadAuthorizerCredentialOutputWithContext(context.Context) ConnectionGitlabConfigReadAuthorizerCredentialOutput
}

type ConnectionGitlabConfigReadAuthorizerCredentialArgs struct {
	// Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion pulumi.StringInput `pulumi:"userTokenSecretVersion"`
	// Output only. The username associated to this token.
	//
	// ***
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ConnectionGitlabConfigReadAuthorizerCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabConfigReadAuthorizerCredential)(nil)).Elem()
}

func (i ConnectionGitlabConfigReadAuthorizerCredentialArgs) ToConnectionGitlabConfigReadAuthorizerCredentialOutput() ConnectionGitlabConfigReadAuthorizerCredentialOutput {
	return i.ToConnectionGitlabConfigReadAuthorizerCredentialOutputWithContext(context.Background())
}

func (i ConnectionGitlabConfigReadAuthorizerCredentialArgs) ToConnectionGitlabConfigReadAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGitlabConfigReadAuthorizerCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigReadAuthorizerCredentialOutput)
}

func (i ConnectionGitlabConfigReadAuthorizerCredentialArgs) ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutput() ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return i.ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i ConnectionGitlabConfigReadAuthorizerCredentialArgs) ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigReadAuthorizerCredentialOutput).ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(ctx)
}

// ConnectionGitlabConfigReadAuthorizerCredentialPtrInput is an input type that accepts ConnectionGitlabConfigReadAuthorizerCredentialArgs, ConnectionGitlabConfigReadAuthorizerCredentialPtr and ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput values.
// You can construct a concrete instance of `ConnectionGitlabConfigReadAuthorizerCredentialPtrInput` via:
//
//	        ConnectionGitlabConfigReadAuthorizerCredentialArgs{...}
//
//	or:
//
//	        nil
type ConnectionGitlabConfigReadAuthorizerCredentialPtrInput interface {
	pulumi.Input

	ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutput() ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput
	ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(context.Context) ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput
}

type connectionGitlabConfigReadAuthorizerCredentialPtrType ConnectionGitlabConfigReadAuthorizerCredentialArgs

func ConnectionGitlabConfigReadAuthorizerCredentialPtr(v *ConnectionGitlabConfigReadAuthorizerCredentialArgs) ConnectionGitlabConfigReadAuthorizerCredentialPtrInput {
	return (*connectionGitlabConfigReadAuthorizerCredentialPtrType)(v)
}

func (*connectionGitlabConfigReadAuthorizerCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabConfigReadAuthorizerCredential)(nil)).Elem()
}

func (i *connectionGitlabConfigReadAuthorizerCredentialPtrType) ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutput() ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return i.ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (i *connectionGitlabConfigReadAuthorizerCredentialPtrType) ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput)
}

type ConnectionGitlabConfigReadAuthorizerCredentialOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabConfigReadAuthorizerCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabConfigReadAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGitlabConfigReadAuthorizerCredentialOutput) ToConnectionGitlabConfigReadAuthorizerCredentialOutput() ConnectionGitlabConfigReadAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGitlabConfigReadAuthorizerCredentialOutput) ToConnectionGitlabConfigReadAuthorizerCredentialOutputWithContext(ctx context.Context) ConnectionGitlabConfigReadAuthorizerCredentialOutput {
	return o
}

func (o ConnectionGitlabConfigReadAuthorizerCredentialOutput) ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutput() ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return o.ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(context.Background())
}

func (o ConnectionGitlabConfigReadAuthorizerCredentialOutput) ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGitlabConfigReadAuthorizerCredential) *ConnectionGitlabConfigReadAuthorizerCredential {
		return &v
	}).(ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput)
}

// Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
func (o ConnectionGitlabConfigReadAuthorizerCredentialOutput) UserTokenSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGitlabConfigReadAuthorizerCredential) string { return v.UserTokenSecretVersion }).(pulumi.StringOutput)
}

// Output only. The username associated to this token.
//
// ***
func (o ConnectionGitlabConfigReadAuthorizerCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionGitlabConfigReadAuthorizerCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabConfigReadAuthorizerCredential)(nil)).Elem()
}

func (o ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput) ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutput() ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput) ToConnectionGitlabConfigReadAuthorizerCredentialPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput {
	return o
}

func (o ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput) Elem() ConnectionGitlabConfigReadAuthorizerCredentialOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfigReadAuthorizerCredential) ConnectionGitlabConfigReadAuthorizerCredential {
		if v != nil {
			return *v
		}
		var ret ConnectionGitlabConfigReadAuthorizerCredential
		return ret
	}).(ConnectionGitlabConfigReadAuthorizerCredentialOutput)
}

// Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
func (o ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput) UserTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfigReadAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return &v.UserTokenSecretVersion
	}).(pulumi.StringPtrOutput)
}

// Output only. The username associated to this token.
//
// ***
func (o ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfigReadAuthorizerCredential) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionGitlabConfigServiceDirectoryConfig struct {
	// Required. The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service string `pulumi:"service"`
}

// ConnectionGitlabConfigServiceDirectoryConfigInput is an input type that accepts ConnectionGitlabConfigServiceDirectoryConfigArgs and ConnectionGitlabConfigServiceDirectoryConfigOutput values.
// You can construct a concrete instance of `ConnectionGitlabConfigServiceDirectoryConfigInput` via:
//
//	ConnectionGitlabConfigServiceDirectoryConfigArgs{...}
type ConnectionGitlabConfigServiceDirectoryConfigInput interface {
	pulumi.Input

	ToConnectionGitlabConfigServiceDirectoryConfigOutput() ConnectionGitlabConfigServiceDirectoryConfigOutput
	ToConnectionGitlabConfigServiceDirectoryConfigOutputWithContext(context.Context) ConnectionGitlabConfigServiceDirectoryConfigOutput
}

type ConnectionGitlabConfigServiceDirectoryConfigArgs struct {
	// Required. The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service pulumi.StringInput `pulumi:"service"`
}

func (ConnectionGitlabConfigServiceDirectoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabConfigServiceDirectoryConfig)(nil)).Elem()
}

func (i ConnectionGitlabConfigServiceDirectoryConfigArgs) ToConnectionGitlabConfigServiceDirectoryConfigOutput() ConnectionGitlabConfigServiceDirectoryConfigOutput {
	return i.ToConnectionGitlabConfigServiceDirectoryConfigOutputWithContext(context.Background())
}

func (i ConnectionGitlabConfigServiceDirectoryConfigArgs) ToConnectionGitlabConfigServiceDirectoryConfigOutputWithContext(ctx context.Context) ConnectionGitlabConfigServiceDirectoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigServiceDirectoryConfigOutput)
}

func (i ConnectionGitlabConfigServiceDirectoryConfigArgs) ToConnectionGitlabConfigServiceDirectoryConfigPtrOutput() ConnectionGitlabConfigServiceDirectoryConfigPtrOutput {
	return i.ToConnectionGitlabConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i ConnectionGitlabConfigServiceDirectoryConfigArgs) ToConnectionGitlabConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigServiceDirectoryConfigOutput).ToConnectionGitlabConfigServiceDirectoryConfigPtrOutputWithContext(ctx)
}

// ConnectionGitlabConfigServiceDirectoryConfigPtrInput is an input type that accepts ConnectionGitlabConfigServiceDirectoryConfigArgs, ConnectionGitlabConfigServiceDirectoryConfigPtr and ConnectionGitlabConfigServiceDirectoryConfigPtrOutput values.
// You can construct a concrete instance of `ConnectionGitlabConfigServiceDirectoryConfigPtrInput` via:
//
//	        ConnectionGitlabConfigServiceDirectoryConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectionGitlabConfigServiceDirectoryConfigPtrInput interface {
	pulumi.Input

	ToConnectionGitlabConfigServiceDirectoryConfigPtrOutput() ConnectionGitlabConfigServiceDirectoryConfigPtrOutput
	ToConnectionGitlabConfigServiceDirectoryConfigPtrOutputWithContext(context.Context) ConnectionGitlabConfigServiceDirectoryConfigPtrOutput
}

type connectionGitlabConfigServiceDirectoryConfigPtrType ConnectionGitlabConfigServiceDirectoryConfigArgs

func ConnectionGitlabConfigServiceDirectoryConfigPtr(v *ConnectionGitlabConfigServiceDirectoryConfigArgs) ConnectionGitlabConfigServiceDirectoryConfigPtrInput {
	return (*connectionGitlabConfigServiceDirectoryConfigPtrType)(v)
}

func (*connectionGitlabConfigServiceDirectoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabConfigServiceDirectoryConfig)(nil)).Elem()
}

func (i *connectionGitlabConfigServiceDirectoryConfigPtrType) ToConnectionGitlabConfigServiceDirectoryConfigPtrOutput() ConnectionGitlabConfigServiceDirectoryConfigPtrOutput {
	return i.ToConnectionGitlabConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i *connectionGitlabConfigServiceDirectoryConfigPtrType) ToConnectionGitlabConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionGitlabConfigServiceDirectoryConfigPtrOutput)
}

type ConnectionGitlabConfigServiceDirectoryConfigOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabConfigServiceDirectoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionGitlabConfigServiceDirectoryConfig)(nil)).Elem()
}

func (o ConnectionGitlabConfigServiceDirectoryConfigOutput) ToConnectionGitlabConfigServiceDirectoryConfigOutput() ConnectionGitlabConfigServiceDirectoryConfigOutput {
	return o
}

func (o ConnectionGitlabConfigServiceDirectoryConfigOutput) ToConnectionGitlabConfigServiceDirectoryConfigOutputWithContext(ctx context.Context) ConnectionGitlabConfigServiceDirectoryConfigOutput {
	return o
}

func (o ConnectionGitlabConfigServiceDirectoryConfigOutput) ToConnectionGitlabConfigServiceDirectoryConfigPtrOutput() ConnectionGitlabConfigServiceDirectoryConfigPtrOutput {
	return o.ToConnectionGitlabConfigServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (o ConnectionGitlabConfigServiceDirectoryConfigOutput) ToConnectionGitlabConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigServiceDirectoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionGitlabConfigServiceDirectoryConfig) *ConnectionGitlabConfigServiceDirectoryConfig {
		return &v
	}).(ConnectionGitlabConfigServiceDirectoryConfigPtrOutput)
}

// Required. The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o ConnectionGitlabConfigServiceDirectoryConfigOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionGitlabConfigServiceDirectoryConfig) string { return v.Service }).(pulumi.StringOutput)
}

type ConnectionGitlabConfigServiceDirectoryConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectionGitlabConfigServiceDirectoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionGitlabConfigServiceDirectoryConfig)(nil)).Elem()
}

func (o ConnectionGitlabConfigServiceDirectoryConfigPtrOutput) ToConnectionGitlabConfigServiceDirectoryConfigPtrOutput() ConnectionGitlabConfigServiceDirectoryConfigPtrOutput {
	return o
}

func (o ConnectionGitlabConfigServiceDirectoryConfigPtrOutput) ToConnectionGitlabConfigServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ConnectionGitlabConfigServiceDirectoryConfigPtrOutput {
	return o
}

func (o ConnectionGitlabConfigServiceDirectoryConfigPtrOutput) Elem() ConnectionGitlabConfigServiceDirectoryConfigOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfigServiceDirectoryConfig) ConnectionGitlabConfigServiceDirectoryConfig {
		if v != nil {
			return *v
		}
		var ret ConnectionGitlabConfigServiceDirectoryConfig
		return ret
	}).(ConnectionGitlabConfigServiceDirectoryConfigOutput)
}

// Required. The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o ConnectionGitlabConfigServiceDirectoryConfigPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionGitlabConfigServiceDirectoryConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

type ConnectionIAMBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// ConnectionIAMBindingConditionInput is an input type that accepts ConnectionIAMBindingConditionArgs and ConnectionIAMBindingConditionOutput values.
// You can construct a concrete instance of `ConnectionIAMBindingConditionInput` via:
//
//	ConnectionIAMBindingConditionArgs{...}
type ConnectionIAMBindingConditionInput interface {
	pulumi.Input

	ToConnectionIAMBindingConditionOutput() ConnectionIAMBindingConditionOutput
	ToConnectionIAMBindingConditionOutputWithContext(context.Context) ConnectionIAMBindingConditionOutput
}

type ConnectionIAMBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (ConnectionIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionIAMBindingCondition)(nil)).Elem()
}

func (i ConnectionIAMBindingConditionArgs) ToConnectionIAMBindingConditionOutput() ConnectionIAMBindingConditionOutput {
	return i.ToConnectionIAMBindingConditionOutputWithContext(context.Background())
}

func (i ConnectionIAMBindingConditionArgs) ToConnectionIAMBindingConditionOutputWithContext(ctx context.Context) ConnectionIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIAMBindingConditionOutput)
}

func (i ConnectionIAMBindingConditionArgs) ToConnectionIAMBindingConditionPtrOutput() ConnectionIAMBindingConditionPtrOutput {
	return i.ToConnectionIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i ConnectionIAMBindingConditionArgs) ToConnectionIAMBindingConditionPtrOutputWithContext(ctx context.Context) ConnectionIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIAMBindingConditionOutput).ToConnectionIAMBindingConditionPtrOutputWithContext(ctx)
}

// ConnectionIAMBindingConditionPtrInput is an input type that accepts ConnectionIAMBindingConditionArgs, ConnectionIAMBindingConditionPtr and ConnectionIAMBindingConditionPtrOutput values.
// You can construct a concrete instance of `ConnectionIAMBindingConditionPtrInput` via:
//
//	        ConnectionIAMBindingConditionArgs{...}
//
//	or:
//
//	        nil
type ConnectionIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToConnectionIAMBindingConditionPtrOutput() ConnectionIAMBindingConditionPtrOutput
	ToConnectionIAMBindingConditionPtrOutputWithContext(context.Context) ConnectionIAMBindingConditionPtrOutput
}

type connectionIAMBindingConditionPtrType ConnectionIAMBindingConditionArgs

func ConnectionIAMBindingConditionPtr(v *ConnectionIAMBindingConditionArgs) ConnectionIAMBindingConditionPtrInput {
	return (*connectionIAMBindingConditionPtrType)(v)
}

func (*connectionIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionIAMBindingCondition)(nil)).Elem()
}

func (i *connectionIAMBindingConditionPtrType) ToConnectionIAMBindingConditionPtrOutput() ConnectionIAMBindingConditionPtrOutput {
	return i.ToConnectionIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *connectionIAMBindingConditionPtrType) ToConnectionIAMBindingConditionPtrOutputWithContext(ctx context.Context) ConnectionIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIAMBindingConditionPtrOutput)
}

type ConnectionIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (ConnectionIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionIAMBindingCondition)(nil)).Elem()
}

func (o ConnectionIAMBindingConditionOutput) ToConnectionIAMBindingConditionOutput() ConnectionIAMBindingConditionOutput {
	return o
}

func (o ConnectionIAMBindingConditionOutput) ToConnectionIAMBindingConditionOutputWithContext(ctx context.Context) ConnectionIAMBindingConditionOutput {
	return o
}

func (o ConnectionIAMBindingConditionOutput) ToConnectionIAMBindingConditionPtrOutput() ConnectionIAMBindingConditionPtrOutput {
	return o.ToConnectionIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o ConnectionIAMBindingConditionOutput) ToConnectionIAMBindingConditionPtrOutputWithContext(ctx context.Context) ConnectionIAMBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionIAMBindingCondition) *ConnectionIAMBindingCondition {
		return &v
	}).(ConnectionIAMBindingConditionPtrOutput)
}

func (o ConnectionIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ConnectionIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o ConnectionIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type ConnectionIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (ConnectionIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionIAMBindingCondition)(nil)).Elem()
}

func (o ConnectionIAMBindingConditionPtrOutput) ToConnectionIAMBindingConditionPtrOutput() ConnectionIAMBindingConditionPtrOutput {
	return o
}

func (o ConnectionIAMBindingConditionPtrOutput) ToConnectionIAMBindingConditionPtrOutputWithContext(ctx context.Context) ConnectionIAMBindingConditionPtrOutput {
	return o
}

func (o ConnectionIAMBindingConditionPtrOutput) Elem() ConnectionIAMBindingConditionOutput {
	return o.ApplyT(func(v *ConnectionIAMBindingCondition) ConnectionIAMBindingCondition {
		if v != nil {
			return *v
		}
		var ret ConnectionIAMBindingCondition
		return ret
	}).(ConnectionIAMBindingConditionOutput)
}

func (o ConnectionIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionIAMBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionIAMBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type ConnectionIAMMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// ConnectionIAMMemberConditionInput is an input type that accepts ConnectionIAMMemberConditionArgs and ConnectionIAMMemberConditionOutput values.
// You can construct a concrete instance of `ConnectionIAMMemberConditionInput` via:
//
//	ConnectionIAMMemberConditionArgs{...}
type ConnectionIAMMemberConditionInput interface {
	pulumi.Input

	ToConnectionIAMMemberConditionOutput() ConnectionIAMMemberConditionOutput
	ToConnectionIAMMemberConditionOutputWithContext(context.Context) ConnectionIAMMemberConditionOutput
}

type ConnectionIAMMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (ConnectionIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionIAMMemberCondition)(nil)).Elem()
}

func (i ConnectionIAMMemberConditionArgs) ToConnectionIAMMemberConditionOutput() ConnectionIAMMemberConditionOutput {
	return i.ToConnectionIAMMemberConditionOutputWithContext(context.Background())
}

func (i ConnectionIAMMemberConditionArgs) ToConnectionIAMMemberConditionOutputWithContext(ctx context.Context) ConnectionIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIAMMemberConditionOutput)
}

func (i ConnectionIAMMemberConditionArgs) ToConnectionIAMMemberConditionPtrOutput() ConnectionIAMMemberConditionPtrOutput {
	return i.ToConnectionIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i ConnectionIAMMemberConditionArgs) ToConnectionIAMMemberConditionPtrOutputWithContext(ctx context.Context) ConnectionIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIAMMemberConditionOutput).ToConnectionIAMMemberConditionPtrOutputWithContext(ctx)
}

// ConnectionIAMMemberConditionPtrInput is an input type that accepts ConnectionIAMMemberConditionArgs, ConnectionIAMMemberConditionPtr and ConnectionIAMMemberConditionPtrOutput values.
// You can construct a concrete instance of `ConnectionIAMMemberConditionPtrInput` via:
//
//	        ConnectionIAMMemberConditionArgs{...}
//
//	or:
//
//	        nil
type ConnectionIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToConnectionIAMMemberConditionPtrOutput() ConnectionIAMMemberConditionPtrOutput
	ToConnectionIAMMemberConditionPtrOutputWithContext(context.Context) ConnectionIAMMemberConditionPtrOutput
}

type connectionIAMMemberConditionPtrType ConnectionIAMMemberConditionArgs

func ConnectionIAMMemberConditionPtr(v *ConnectionIAMMemberConditionArgs) ConnectionIAMMemberConditionPtrInput {
	return (*connectionIAMMemberConditionPtrType)(v)
}

func (*connectionIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionIAMMemberCondition)(nil)).Elem()
}

func (i *connectionIAMMemberConditionPtrType) ToConnectionIAMMemberConditionPtrOutput() ConnectionIAMMemberConditionPtrOutput {
	return i.ToConnectionIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *connectionIAMMemberConditionPtrType) ToConnectionIAMMemberConditionPtrOutputWithContext(ctx context.Context) ConnectionIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIAMMemberConditionPtrOutput)
}

type ConnectionIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (ConnectionIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionIAMMemberCondition)(nil)).Elem()
}

func (o ConnectionIAMMemberConditionOutput) ToConnectionIAMMemberConditionOutput() ConnectionIAMMemberConditionOutput {
	return o
}

func (o ConnectionIAMMemberConditionOutput) ToConnectionIAMMemberConditionOutputWithContext(ctx context.Context) ConnectionIAMMemberConditionOutput {
	return o
}

func (o ConnectionIAMMemberConditionOutput) ToConnectionIAMMemberConditionPtrOutput() ConnectionIAMMemberConditionPtrOutput {
	return o.ToConnectionIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o ConnectionIAMMemberConditionOutput) ToConnectionIAMMemberConditionPtrOutputWithContext(ctx context.Context) ConnectionIAMMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionIAMMemberCondition) *ConnectionIAMMemberCondition {
		return &v
	}).(ConnectionIAMMemberConditionPtrOutput)
}

func (o ConnectionIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ConnectionIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o ConnectionIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type ConnectionIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (ConnectionIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionIAMMemberCondition)(nil)).Elem()
}

func (o ConnectionIAMMemberConditionPtrOutput) ToConnectionIAMMemberConditionPtrOutput() ConnectionIAMMemberConditionPtrOutput {
	return o
}

func (o ConnectionIAMMemberConditionPtrOutput) ToConnectionIAMMemberConditionPtrOutputWithContext(ctx context.Context) ConnectionIAMMemberConditionPtrOutput {
	return o
}

func (o ConnectionIAMMemberConditionPtrOutput) Elem() ConnectionIAMMemberConditionOutput {
	return o.ApplyT(func(v *ConnectionIAMMemberCondition) ConnectionIAMMemberCondition {
		if v != nil {
			return *v
		}
		var ret ConnectionIAMMemberCondition
		return ret
	}).(ConnectionIAMMemberConditionOutput)
}

func (o ConnectionIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionIAMMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionIAMMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type ConnectionInstallationState struct {
	ActionUri *string `pulumi:"actionUri"`
	Message   *string `pulumi:"message"`
	Stage     *string `pulumi:"stage"`
}

// ConnectionInstallationStateInput is an input type that accepts ConnectionInstallationStateArgs and ConnectionInstallationStateOutput values.
// You can construct a concrete instance of `ConnectionInstallationStateInput` via:
//
//	ConnectionInstallationStateArgs{...}
type ConnectionInstallationStateInput interface {
	pulumi.Input

	ToConnectionInstallationStateOutput() ConnectionInstallationStateOutput
	ToConnectionInstallationStateOutputWithContext(context.Context) ConnectionInstallationStateOutput
}

type ConnectionInstallationStateArgs struct {
	ActionUri pulumi.StringPtrInput `pulumi:"actionUri"`
	Message   pulumi.StringPtrInput `pulumi:"message"`
	Stage     pulumi.StringPtrInput `pulumi:"stage"`
}

func (ConnectionInstallationStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionInstallationState)(nil)).Elem()
}

func (i ConnectionInstallationStateArgs) ToConnectionInstallationStateOutput() ConnectionInstallationStateOutput {
	return i.ToConnectionInstallationStateOutputWithContext(context.Background())
}

func (i ConnectionInstallationStateArgs) ToConnectionInstallationStateOutputWithContext(ctx context.Context) ConnectionInstallationStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInstallationStateOutput)
}

// ConnectionInstallationStateArrayInput is an input type that accepts ConnectionInstallationStateArray and ConnectionInstallationStateArrayOutput values.
// You can construct a concrete instance of `ConnectionInstallationStateArrayInput` via:
//
//	ConnectionInstallationStateArray{ ConnectionInstallationStateArgs{...} }
type ConnectionInstallationStateArrayInput interface {
	pulumi.Input

	ToConnectionInstallationStateArrayOutput() ConnectionInstallationStateArrayOutput
	ToConnectionInstallationStateArrayOutputWithContext(context.Context) ConnectionInstallationStateArrayOutput
}

type ConnectionInstallationStateArray []ConnectionInstallationStateInput

func (ConnectionInstallationStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionInstallationState)(nil)).Elem()
}

func (i ConnectionInstallationStateArray) ToConnectionInstallationStateArrayOutput() ConnectionInstallationStateArrayOutput {
	return i.ToConnectionInstallationStateArrayOutputWithContext(context.Background())
}

func (i ConnectionInstallationStateArray) ToConnectionInstallationStateArrayOutputWithContext(ctx context.Context) ConnectionInstallationStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInstallationStateArrayOutput)
}

type ConnectionInstallationStateOutput struct{ *pulumi.OutputState }

func (ConnectionInstallationStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionInstallationState)(nil)).Elem()
}

func (o ConnectionInstallationStateOutput) ToConnectionInstallationStateOutput() ConnectionInstallationStateOutput {
	return o
}

func (o ConnectionInstallationStateOutput) ToConnectionInstallationStateOutputWithContext(ctx context.Context) ConnectionInstallationStateOutput {
	return o
}

func (o ConnectionInstallationStateOutput) ActionUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInstallationState) *string { return v.ActionUri }).(pulumi.StringPtrOutput)
}

func (o ConnectionInstallationStateOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInstallationState) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o ConnectionInstallationStateOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInstallationState) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

type ConnectionInstallationStateArrayOutput struct{ *pulumi.OutputState }

func (ConnectionInstallationStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionInstallationState)(nil)).Elem()
}

func (o ConnectionInstallationStateArrayOutput) ToConnectionInstallationStateArrayOutput() ConnectionInstallationStateArrayOutput {
	return o
}

func (o ConnectionInstallationStateArrayOutput) ToConnectionInstallationStateArrayOutputWithContext(ctx context.Context) ConnectionInstallationStateArrayOutput {
	return o
}

func (o ConnectionInstallationStateArrayOutput) Index(i pulumi.IntInput) ConnectionInstallationStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectionInstallationState {
		return vs[0].([]ConnectionInstallationState)[vs[1].(int)]
	}).(ConnectionInstallationStateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubConfigInput)(nil)).Elem(), ConnectionGithubConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubConfigPtrInput)(nil)).Elem(), ConnectionGithubConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubConfigAuthorizerCredentialInput)(nil)).Elem(), ConnectionGithubConfigAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubConfigAuthorizerCredentialPtrInput)(nil)).Elem(), ConnectionGithubConfigAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubEnterpriseConfigInput)(nil)).Elem(), ConnectionGithubEnterpriseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubEnterpriseConfigPtrInput)(nil)).Elem(), ConnectionGithubEnterpriseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubEnterpriseConfigServiceDirectoryConfigInput)(nil)).Elem(), ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrInput)(nil)).Elem(), ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabConfigInput)(nil)).Elem(), ConnectionGitlabConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabConfigPtrInput)(nil)).Elem(), ConnectionGitlabConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabConfigAuthorizerCredentialInput)(nil)).Elem(), ConnectionGitlabConfigAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabConfigAuthorizerCredentialPtrInput)(nil)).Elem(), ConnectionGitlabConfigAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabConfigReadAuthorizerCredentialInput)(nil)).Elem(), ConnectionGitlabConfigReadAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabConfigReadAuthorizerCredentialPtrInput)(nil)).Elem(), ConnectionGitlabConfigReadAuthorizerCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabConfigServiceDirectoryConfigInput)(nil)).Elem(), ConnectionGitlabConfigServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionGitlabConfigServiceDirectoryConfigPtrInput)(nil)).Elem(), ConnectionGitlabConfigServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionIAMBindingConditionInput)(nil)).Elem(), ConnectionIAMBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionIAMBindingConditionPtrInput)(nil)).Elem(), ConnectionIAMBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionIAMMemberConditionInput)(nil)).Elem(), ConnectionIAMMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionIAMMemberConditionPtrInput)(nil)).Elem(), ConnectionIAMMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInstallationStateInput)(nil)).Elem(), ConnectionInstallationStateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInstallationStateArrayInput)(nil)).Elem(), ConnectionInstallationStateArray{})
	pulumi.RegisterOutputType(ConnectionGithubConfigOutput{})
	pulumi.RegisterOutputType(ConnectionGithubConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGithubConfigAuthorizerCredentialOutput{})
	pulumi.RegisterOutputType(ConnectionGithubConfigAuthorizerCredentialPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGithubEnterpriseConfigOutput{})
	pulumi.RegisterOutputType(ConnectionGithubEnterpriseConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutput{})
	pulumi.RegisterOutputType(ConnectionGithubEnterpriseConfigServiceDirectoryConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabConfigOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabConfigAuthorizerCredentialOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabConfigAuthorizerCredentialPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabConfigReadAuthorizerCredentialOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabConfigReadAuthorizerCredentialPtrOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabConfigServiceDirectoryConfigOutput{})
	pulumi.RegisterOutputType(ConnectionGitlabConfigServiceDirectoryConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectionIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(ConnectionIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(ConnectionIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(ConnectionIAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(ConnectionInstallationStateOutput{})
	pulumi.RegisterOutputType(ConnectionInstallationStateArrayOutput{})
}
