// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudbuildv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A connection to a SCM like GitHub, GitHub Enterprise, Bitbucket Data Center/Cloud or GitLab.
//
// To get more information about Connection, see:
//
// * [API documentation](https://cloud.google.com/build/docs/api/reference/rest)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/build/docs)
//
// ##
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/cloudbuildv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudbuildv2.NewConnection(ctx, "my-connection", &cloudbuildv2.ConnectionArgs{
//				Location: pulumi.String("us-central1"),
//				Name:     pulumi.String("tf-test-connection"),
//				GithubConfig: &cloudbuildv2.ConnectionGithubConfigArgs{
//					AppInstallationId: pulumi.Int(0),
//					AuthorizerCredential: &cloudbuildv2.ConnectionGithubConfigAuthorizerCredentialArgs{
//						OauthTokenSecretVersion: pulumi.String("projects/gcb-terraform-creds/secrets/github-pat/versions/1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Example Usage
//
// ### Cloudbuildv2 Connection Ghe
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/cloudbuildv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewSecret(ctx, "private-key-secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("ghe-pk-secret"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: nil,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "private-key.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretVersion(ctx, "private-key-secret-version", &secretmanager.SecretVersionArgs{
//				Secret:     private_key_secret.ID(),
//				SecretData: pulumi.String(invokeFile.Result),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecret(ctx, "webhook-secret-secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("github-token-secret"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: nil,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretVersion(ctx, "webhook-secret-secret-version", &secretmanager.SecretVersionArgs{
//				Secret:     webhook_secret_secret.ID(),
//				SecretData: pulumi.String("<webhook-secret-data>"),
//			})
//			if err != nil {
//				return err
//			}
//			p4sa_secretAccessor, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/secretmanager.secretAccessor",
//						Members: []string{
//							"serviceAccount:service-123456789@gcp-sa-cloudbuild.iam.gserviceaccount.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretIamPolicy(ctx, "policy-pk", &secretmanager.SecretIamPolicyArgs{
//				SecretId:   private_key_secret.SecretId,
//				PolicyData: pulumi.String(p4sa_secretAccessor.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretIamPolicy(ctx, "policy-whs", &secretmanager.SecretIamPolicyArgs{
//				SecretId:   webhook_secret_secret.SecretId,
//				PolicyData: pulumi.String(p4sa_secretAccessor.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudbuildv2.NewConnection(ctx, "my-connection", &cloudbuildv2.ConnectionArgs{
//				Location: pulumi.String("us-central1"),
//				Name:     pulumi.String("my-terraform-ghe-connection"),
//				GithubEnterpriseConfig: &cloudbuildv2.ConnectionGithubEnterpriseConfigArgs{
//					HostUri:                    pulumi.String("https://ghe.com"),
//					PrivateKeySecretVersion:    private_key_secret_version.ID(),
//					WebhookSecretSecretVersion: webhook_secret_secret_version.ID(),
//					AppId:                      pulumi.Int(200),
//					AppSlug:                    pulumi.String("gcb-app"),
//					AppInstallationId:          pulumi.Int(300),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				policy_pk,
//				policy_whs,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Cloudbuildv2 Connection Github
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/cloudbuildv2"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/secretmanager"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secretmanager.NewSecret(ctx, "github-token-secret", &secretmanager.SecretArgs{
//				SecretId: pulumi.String("github-token-secret"),
//				Replication: &secretmanager.SecretReplicationArgs{
//					Auto: nil,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "my-github-token.txt",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretVersion(ctx, "github-token-secret-version", &secretmanager.SecretVersionArgs{
//				Secret:     github_token_secret.ID(),
//				SecretData: pulumi.String(invokeFile.Result),
//			})
//			if err != nil {
//				return err
//			}
//			p4sa_secretAccessor, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/secretmanager.secretAccessor",
//						Members: []string{
//							"serviceAccount:service-123456789@gcp-sa-cloudbuild.iam.gserviceaccount.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = secretmanager.NewSecretIamPolicy(ctx, "policy", &secretmanager.SecretIamPolicyArgs{
//				SecretId:   github_token_secret.SecretId,
//				PolicyData: pulumi.String(p4sa_secretAccessor.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudbuildv2.NewConnection(ctx, "my-connection", &cloudbuildv2.ConnectionArgs{
//				Location: pulumi.String("us-central1"),
//				Name:     pulumi.String("my-connection"),
//				GithubConfig: &cloudbuildv2.ConnectionGithubConfigArgs{
//					AppInstallationId: pulumi.Int(123123),
//					AuthorizerCredential: &cloudbuildv2.ConnectionGithubConfigAuthorizerCredentialArgs{
//						OauthTokenSecretVersion: github_token_secret_version.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Connection can be imported using any of these accepted formats:
//
// * `projects/{{project}}/locations/{{location}}/connections/{{name}}`
//
// * `{{project}}/{{location}}/{{name}}`
//
// * `{{location}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, Connection can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:cloudbuildv2/connection:Connection default projects/{{project}}/locations/{{location}}/connections/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:cloudbuildv2/connection:Connection default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:cloudbuildv2/connection:Connection default {{location}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:cloudbuildv2/connection:Connection default {{name}}
// ```
type Connection struct {
	pulumi.CustomResourceState

	// Allows clients to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Configuration for connections to Bitbucket Cloud.
	// Structure is documented below.
	BitbucketCloudConfig ConnectionBitbucketCloudConfigPtrOutput `pulumi:"bitbucketCloudConfig"`
	// Configuration for connections to Bitbucket Data Center.
	// Structure is documented below.
	BitbucketDataCenterConfig ConnectionBitbucketDataCenterConfigPtrOutput `pulumi:"bitbucketDataCenterConfig"`
	// Output only. Server assigned timestamp for when the connection was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
	Disabled             pulumi.BoolPtrOutput   `pulumi:"disabled"`
	EffectiveAnnotations pulumi.StringMapOutput `pulumi:"effectiveAnnotations"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Configuration for connections to github.com.
	// Structure is documented below.
	GithubConfig ConnectionGithubConfigPtrOutput `pulumi:"githubConfig"`
	// Configuration for connections to an instance of GitHub Enterprise.
	// Structure is documented below.
	GithubEnterpriseConfig ConnectionGithubEnterpriseConfigPtrOutput `pulumi:"githubEnterpriseConfig"`
	// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
	// Structure is documented below.
	GitlabConfig ConnectionGitlabConfigPtrOutput `pulumi:"gitlabConfig"`
	// Output only. Installation state of the Connection.
	// Structure is documented below.
	InstallationStates ConnectionInstallationStateArrayOutput `pulumi:"installationStates"`
	// The location for the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// Immutable. The resource name of the connection.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// Output only. Set to true when the connection is being set up or updated in the background.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// Output only. Server assigned timestamp for when the connection was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connection
	err := ctx.RegisterResource("gcp:cloudbuildv2/connection:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("gcp:cloudbuildv2/connection:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
	// Allows clients to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Configuration for connections to Bitbucket Cloud.
	// Structure is documented below.
	BitbucketCloudConfig *ConnectionBitbucketCloudConfig `pulumi:"bitbucketCloudConfig"`
	// Configuration for connections to Bitbucket Data Center.
	// Structure is documented below.
	BitbucketDataCenterConfig *ConnectionBitbucketDataCenterConfig `pulumi:"bitbucketDataCenterConfig"`
	// Output only. Server assigned timestamp for when the connection was created.
	CreateTime *string `pulumi:"createTime"`
	// If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
	Disabled             *bool             `pulumi:"disabled"`
	EffectiveAnnotations map[string]string `pulumi:"effectiveAnnotations"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Configuration for connections to github.com.
	// Structure is documented below.
	GithubConfig *ConnectionGithubConfig `pulumi:"githubConfig"`
	// Configuration for connections to an instance of GitHub Enterprise.
	// Structure is documented below.
	GithubEnterpriseConfig *ConnectionGithubEnterpriseConfig `pulumi:"githubEnterpriseConfig"`
	// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
	// Structure is documented below.
	GitlabConfig *ConnectionGitlabConfig `pulumi:"gitlabConfig"`
	// Output only. Installation state of the Connection.
	// Structure is documented below.
	InstallationStates []ConnectionInstallationState `pulumi:"installationStates"`
	// The location for the resource
	Location *string `pulumi:"location"`
	// Immutable. The resource name of the connection.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Output only. Set to true when the connection is being set up or updated in the background.
	Reconciling *bool `pulumi:"reconciling"`
	// Output only. Server assigned timestamp for when the connection was updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type ConnectionState struct {
	// Allows clients to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Configuration for connections to Bitbucket Cloud.
	// Structure is documented below.
	BitbucketCloudConfig ConnectionBitbucketCloudConfigPtrInput
	// Configuration for connections to Bitbucket Data Center.
	// Structure is documented below.
	BitbucketDataCenterConfig ConnectionBitbucketDataCenterConfigPtrInput
	// Output only. Server assigned timestamp for when the connection was created.
	CreateTime pulumi.StringPtrInput
	// If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
	Disabled             pulumi.BoolPtrInput
	EffectiveAnnotations pulumi.StringMapInput
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Configuration for connections to github.com.
	// Structure is documented below.
	GithubConfig ConnectionGithubConfigPtrInput
	// Configuration for connections to an instance of GitHub Enterprise.
	// Structure is documented below.
	GithubEnterpriseConfig ConnectionGithubEnterpriseConfigPtrInput
	// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
	// Structure is documented below.
	GitlabConfig ConnectionGitlabConfigPtrInput
	// Output only. Installation state of the Connection.
	// Structure is documented below.
	InstallationStates ConnectionInstallationStateArrayInput
	// The location for the resource
	Location pulumi.StringPtrInput
	// Immutable. The resource name of the connection.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Output only. Set to true when the connection is being set up or updated in the background.
	Reconciling pulumi.BoolPtrInput
	// Output only. Server assigned timestamp for when the connection was updated.
	UpdateTime pulumi.StringPtrInput
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// Allows clients to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Configuration for connections to Bitbucket Cloud.
	// Structure is documented below.
	BitbucketCloudConfig *ConnectionBitbucketCloudConfig `pulumi:"bitbucketCloudConfig"`
	// Configuration for connections to Bitbucket Data Center.
	// Structure is documented below.
	BitbucketDataCenterConfig *ConnectionBitbucketDataCenterConfig `pulumi:"bitbucketDataCenterConfig"`
	// If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
	Disabled *bool `pulumi:"disabled"`
	// Configuration for connections to github.com.
	// Structure is documented below.
	GithubConfig *ConnectionGithubConfig `pulumi:"githubConfig"`
	// Configuration for connections to an instance of GitHub Enterprise.
	// Structure is documented below.
	GithubEnterpriseConfig *ConnectionGithubEnterpriseConfig `pulumi:"githubEnterpriseConfig"`
	// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
	// Structure is documented below.
	GitlabConfig *ConnectionGitlabConfig `pulumi:"gitlabConfig"`
	// The location for the resource
	Location string `pulumi:"location"`
	// Immutable. The resource name of the connection.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// Allows clients to store small amounts of arbitrary data.
	// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
	Annotations pulumi.StringMapInput
	// Configuration for connections to Bitbucket Cloud.
	// Structure is documented below.
	BitbucketCloudConfig ConnectionBitbucketCloudConfigPtrInput
	// Configuration for connections to Bitbucket Data Center.
	// Structure is documented below.
	BitbucketDataCenterConfig ConnectionBitbucketDataCenterConfigPtrInput
	// If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
	Disabled pulumi.BoolPtrInput
	// Configuration for connections to github.com.
	// Structure is documented below.
	GithubConfig ConnectionGithubConfigPtrInput
	// Configuration for connections to an instance of GitHub Enterprise.
	// Structure is documented below.
	GithubEnterpriseConfig ConnectionGithubEnterpriseConfigPtrInput
	// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
	// Structure is documented below.
	GitlabConfig ConnectionGitlabConfigPtrInput
	// The location for the resource
	Location pulumi.StringInput
	// Immutable. The resource name of the connection.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (*Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i *Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

// ConnectionArrayInput is an input type that accepts ConnectionArray and ConnectionArrayOutput values.
// You can construct a concrete instance of `ConnectionArrayInput` via:
//
//	ConnectionArray{ ConnectionArgs{...} }
type ConnectionArrayInput interface {
	pulumi.Input

	ToConnectionArrayOutput() ConnectionArrayOutput
	ToConnectionArrayOutputWithContext(context.Context) ConnectionArrayOutput
}

type ConnectionArray []ConnectionInput

func (ConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (i ConnectionArray) ToConnectionArrayOutput() ConnectionArrayOutput {
	return i.ToConnectionArrayOutputWithContext(context.Background())
}

func (i ConnectionArray) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionArrayOutput)
}

// ConnectionMapInput is an input type that accepts ConnectionMap and ConnectionMapOutput values.
// You can construct a concrete instance of `ConnectionMapInput` via:
//
//	ConnectionMap{ "key": ConnectionArgs{...} }
type ConnectionMapInput interface {
	pulumi.Input

	ToConnectionMapOutput() ConnectionMapOutput
	ToConnectionMapOutputWithContext(context.Context) ConnectionMapOutput
}

type ConnectionMap map[string]ConnectionInput

func (ConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (i ConnectionMap) ToConnectionMapOutput() ConnectionMapOutput {
	return i.ToConnectionMapOutputWithContext(context.Background())
}

func (i ConnectionMap) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionMapOutput)
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

// Allows clients to store small amounts of arbitrary data.
// **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
// Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
func (o ConnectionOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Configuration for connections to Bitbucket Cloud.
// Structure is documented below.
func (o ConnectionOutput) BitbucketCloudConfig() ConnectionBitbucketCloudConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionBitbucketCloudConfigPtrOutput { return v.BitbucketCloudConfig }).(ConnectionBitbucketCloudConfigPtrOutput)
}

// Configuration for connections to Bitbucket Data Center.
// Structure is documented below.
func (o ConnectionOutput) BitbucketDataCenterConfig() ConnectionBitbucketDataCenterConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionBitbucketDataCenterConfigPtrOutput { return v.BitbucketDataCenterConfig }).(ConnectionBitbucketDataCenterConfigPtrOutput)
}

// Output only. Server assigned timestamp for when the connection was created.
func (o ConnectionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
func (o ConnectionOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o ConnectionOutput) EffectiveAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.EffectiveAnnotations }).(pulumi.StringMapOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
func (o ConnectionOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Configuration for connections to github.com.
// Structure is documented below.
func (o ConnectionOutput) GithubConfig() ConnectionGithubConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionGithubConfigPtrOutput { return v.GithubConfig }).(ConnectionGithubConfigPtrOutput)
}

// Configuration for connections to an instance of GitHub Enterprise.
// Structure is documented below.
func (o ConnectionOutput) GithubEnterpriseConfig() ConnectionGithubEnterpriseConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionGithubEnterpriseConfigPtrOutput { return v.GithubEnterpriseConfig }).(ConnectionGithubEnterpriseConfigPtrOutput)
}

// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
// Structure is documented below.
func (o ConnectionOutput) GitlabConfig() ConnectionGitlabConfigPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionGitlabConfigPtrOutput { return v.GitlabConfig }).(ConnectionGitlabConfigPtrOutput)
}

// Output only. Installation state of the Connection.
// Structure is documented below.
func (o ConnectionOutput) InstallationStates() ConnectionInstallationStateArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionInstallationStateArrayOutput { return v.InstallationStates }).(ConnectionInstallationStateArrayOutput)
}

// The location for the resource
func (o ConnectionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Immutable. The resource name of the connection.
func (o ConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o ConnectionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Output only. Set to true when the connection is being set up or updated in the background.
func (o ConnectionOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// Output only. Server assigned timestamp for when the connection was updated.
func (o ConnectionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ConnectionArrayOutput struct{ *pulumi.OutputState }

func (ConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (o ConnectionArrayOutput) ToConnectionArrayOutput() ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) Index(i pulumi.IntInput) ConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].([]*Connection)[vs[1].(int)]
	}).(ConnectionOutput)
}

type ConnectionMapOutput struct{ *pulumi.OutputState }

func (ConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (o ConnectionMapOutput) ToConnectionMapOutput() ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) MapIndex(k pulumi.StringInput) ConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].(map[string]*Connection)[vs[1].(string)]
	}).(ConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), &Connection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionArrayInput)(nil)).Elem(), ConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionMapInput)(nil)).Elem(), ConnectionMap{})
	pulumi.RegisterOutputType(ConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionArrayOutput{})
	pulumi.RegisterOutputType(ConnectionMapOutput{})
}
