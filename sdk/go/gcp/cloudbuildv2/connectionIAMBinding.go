// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudbuildv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms* projects/{{project}}/locations/{{location}}/connections/{{name}} * {{project}}/{{location}}/{{name}} * {{location}}/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Cloud Build v2 connection IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
//
// ```sh
//
//	$ pulumi import gcp:cloudbuildv2/connectionIAMBinding:ConnectionIAMBinding editor "projects/{{project}}/locations/{{location}}/connections/{{connection}} roles/cloudbuild.connectionViewer user:jane@example.com"
//
// ```
//
//	IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
//
// ```sh
//
//	$ pulumi import gcp:cloudbuildv2/connectionIAMBinding:ConnectionIAMBinding editor "projects/{{project}}/locations/{{location}}/connections/{{connection}} roles/cloudbuild.connectionViewer"
//
// ```
//
//	IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
//
//	$ pulumi import gcp:cloudbuildv2/connectionIAMBinding:ConnectionIAMBinding editor projects/{{project}}/locations/{{location}}/connections/{{connection}}
//
// ```
//
//	-> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
//
// full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type ConnectionIAMBinding struct {
	pulumi.CustomResourceState

	Condition ConnectionIAMBindingConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag     pulumi.StringOutput      `pulumi:"etag"`
	Location pulumi.StringOutput      `pulumi:"location"`
	Members  pulumi.StringArrayOutput `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `cloudbuildv2.ConnectionIAMBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewConnectionIAMBinding registers a new resource with the given unique name, arguments, and options.
func NewConnectionIAMBinding(ctx *pulumi.Context,
	name string, args *ConnectionIAMBindingArgs, opts ...pulumi.ResourceOption) (*ConnectionIAMBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource ConnectionIAMBinding
	err := ctx.RegisterResource("gcp:cloudbuildv2/connectionIAMBinding:ConnectionIAMBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionIAMBinding gets an existing ConnectionIAMBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionIAMBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionIAMBindingState, opts ...pulumi.ResourceOption) (*ConnectionIAMBinding, error) {
	var resource ConnectionIAMBinding
	err := ctx.ReadResource("gcp:cloudbuildv2/connectionIAMBinding:ConnectionIAMBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionIAMBinding resources.
type connectionIAMBindingState struct {
	Condition *ConnectionIAMBindingCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag     *string  `pulumi:"etag"`
	Location *string  `pulumi:"location"`
	Members  []string `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `cloudbuildv2.ConnectionIAMBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
}

type ConnectionIAMBindingState struct {
	Condition ConnectionIAMBindingConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag     pulumi.StringPtrInput
	Location pulumi.StringPtrInput
	Members  pulumi.StringArrayInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `cloudbuildv2.ConnectionIAMBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
}

func (ConnectionIAMBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionIAMBindingState)(nil)).Elem()
}

type connectionIAMBindingArgs struct {
	Condition *ConnectionIAMBindingCondition `pulumi:"condition"`
	Location  *string                        `pulumi:"location"`
	Members   []string                       `pulumi:"members"`
	// Used to find the parent resource to bind the IAM policy to
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `cloudbuildv2.ConnectionIAMBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a ConnectionIAMBinding resource.
type ConnectionIAMBindingArgs struct {
	Condition ConnectionIAMBindingConditionPtrInput
	Location  pulumi.StringPtrInput
	Members   pulumi.StringArrayInput
	// Used to find the parent resource to bind the IAM policy to
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `cloudbuildv2.ConnectionIAMBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
}

func (ConnectionIAMBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionIAMBindingArgs)(nil)).Elem()
}

type ConnectionIAMBindingInput interface {
	pulumi.Input

	ToConnectionIAMBindingOutput() ConnectionIAMBindingOutput
	ToConnectionIAMBindingOutputWithContext(ctx context.Context) ConnectionIAMBindingOutput
}

func (*ConnectionIAMBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionIAMBinding)(nil)).Elem()
}

func (i *ConnectionIAMBinding) ToConnectionIAMBindingOutput() ConnectionIAMBindingOutput {
	return i.ToConnectionIAMBindingOutputWithContext(context.Background())
}

func (i *ConnectionIAMBinding) ToConnectionIAMBindingOutputWithContext(ctx context.Context) ConnectionIAMBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIAMBindingOutput)
}

// ConnectionIAMBindingArrayInput is an input type that accepts ConnectionIAMBindingArray and ConnectionIAMBindingArrayOutput values.
// You can construct a concrete instance of `ConnectionIAMBindingArrayInput` via:
//
//	ConnectionIAMBindingArray{ ConnectionIAMBindingArgs{...} }
type ConnectionIAMBindingArrayInput interface {
	pulumi.Input

	ToConnectionIAMBindingArrayOutput() ConnectionIAMBindingArrayOutput
	ToConnectionIAMBindingArrayOutputWithContext(context.Context) ConnectionIAMBindingArrayOutput
}

type ConnectionIAMBindingArray []ConnectionIAMBindingInput

func (ConnectionIAMBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionIAMBinding)(nil)).Elem()
}

func (i ConnectionIAMBindingArray) ToConnectionIAMBindingArrayOutput() ConnectionIAMBindingArrayOutput {
	return i.ToConnectionIAMBindingArrayOutputWithContext(context.Background())
}

func (i ConnectionIAMBindingArray) ToConnectionIAMBindingArrayOutputWithContext(ctx context.Context) ConnectionIAMBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIAMBindingArrayOutput)
}

// ConnectionIAMBindingMapInput is an input type that accepts ConnectionIAMBindingMap and ConnectionIAMBindingMapOutput values.
// You can construct a concrete instance of `ConnectionIAMBindingMapInput` via:
//
//	ConnectionIAMBindingMap{ "key": ConnectionIAMBindingArgs{...} }
type ConnectionIAMBindingMapInput interface {
	pulumi.Input

	ToConnectionIAMBindingMapOutput() ConnectionIAMBindingMapOutput
	ToConnectionIAMBindingMapOutputWithContext(context.Context) ConnectionIAMBindingMapOutput
}

type ConnectionIAMBindingMap map[string]ConnectionIAMBindingInput

func (ConnectionIAMBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionIAMBinding)(nil)).Elem()
}

func (i ConnectionIAMBindingMap) ToConnectionIAMBindingMapOutput() ConnectionIAMBindingMapOutput {
	return i.ToConnectionIAMBindingMapOutputWithContext(context.Background())
}

func (i ConnectionIAMBindingMap) ToConnectionIAMBindingMapOutputWithContext(ctx context.Context) ConnectionIAMBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionIAMBindingMapOutput)
}

type ConnectionIAMBindingOutput struct{ *pulumi.OutputState }

func (ConnectionIAMBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionIAMBinding)(nil)).Elem()
}

func (o ConnectionIAMBindingOutput) ToConnectionIAMBindingOutput() ConnectionIAMBindingOutput {
	return o
}

func (o ConnectionIAMBindingOutput) ToConnectionIAMBindingOutputWithContext(ctx context.Context) ConnectionIAMBindingOutput {
	return o
}

func (o ConnectionIAMBindingOutput) Condition() ConnectionIAMBindingConditionPtrOutput {
	return o.ApplyT(func(v *ConnectionIAMBinding) ConnectionIAMBindingConditionPtrOutput { return v.Condition }).(ConnectionIAMBindingConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o ConnectionIAMBindingOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionIAMBinding) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ConnectionIAMBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionIAMBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o ConnectionIAMBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectionIAMBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o ConnectionIAMBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionIAMBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o ConnectionIAMBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionIAMBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `cloudbuildv2.ConnectionIAMBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o ConnectionIAMBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionIAMBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type ConnectionIAMBindingArrayOutput struct{ *pulumi.OutputState }

func (ConnectionIAMBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionIAMBinding)(nil)).Elem()
}

func (o ConnectionIAMBindingArrayOutput) ToConnectionIAMBindingArrayOutput() ConnectionIAMBindingArrayOutput {
	return o
}

func (o ConnectionIAMBindingArrayOutput) ToConnectionIAMBindingArrayOutputWithContext(ctx context.Context) ConnectionIAMBindingArrayOutput {
	return o
}

func (o ConnectionIAMBindingArrayOutput) Index(i pulumi.IntInput) ConnectionIAMBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionIAMBinding {
		return vs[0].([]*ConnectionIAMBinding)[vs[1].(int)]
	}).(ConnectionIAMBindingOutput)
}

type ConnectionIAMBindingMapOutput struct{ *pulumi.OutputState }

func (ConnectionIAMBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionIAMBinding)(nil)).Elem()
}

func (o ConnectionIAMBindingMapOutput) ToConnectionIAMBindingMapOutput() ConnectionIAMBindingMapOutput {
	return o
}

func (o ConnectionIAMBindingMapOutput) ToConnectionIAMBindingMapOutputWithContext(ctx context.Context) ConnectionIAMBindingMapOutput {
	return o
}

func (o ConnectionIAMBindingMapOutput) MapIndex(k pulumi.StringInput) ConnectionIAMBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionIAMBinding {
		return vs[0].(map[string]*ConnectionIAMBinding)[vs[1].(string)]
	}).(ConnectionIAMBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionIAMBindingInput)(nil)).Elem(), &ConnectionIAMBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionIAMBindingArrayInput)(nil)).Elem(), ConnectionIAMBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionIAMBindingMapInput)(nil)).Elem(), ConnectionIAMBindingMap{})
	pulumi.RegisterOutputType(ConnectionIAMBindingOutput{})
	pulumi.RegisterOutputType(ConnectionIAMBindingArrayOutput{})
	pulumi.RegisterOutputType(ConnectionIAMBindingMapOutput{})
}
