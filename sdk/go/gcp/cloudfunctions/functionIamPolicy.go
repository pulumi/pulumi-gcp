// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfunctions

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FunctionIamPolicy struct {
	pulumi.CustomResourceState

	CloudFunction pulumi.StringOutput `pulumi:"cloudFunction"`
	Etag          pulumi.StringOutput `pulumi:"etag"`
	PolicyData    pulumi.StringOutput `pulumi:"policyData"`
	Project       pulumi.StringOutput `pulumi:"project"`
	Region        pulumi.StringOutput `pulumi:"region"`
}

// NewFunctionIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewFunctionIamPolicy(ctx *pulumi.Context,
	name string, args *FunctionIamPolicyArgs, opts ...pulumi.ResourceOption) (*FunctionIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudFunction == nil {
		return nil, errors.New("invalid value for required argument 'CloudFunction'")
	}
	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	var resource FunctionIamPolicy
	err := ctx.RegisterResource("gcp:cloudfunctions/functionIamPolicy:FunctionIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunctionIamPolicy gets an existing FunctionIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunctionIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionIamPolicyState, opts ...pulumi.ResourceOption) (*FunctionIamPolicy, error) {
	var resource FunctionIamPolicy
	err := ctx.ReadResource("gcp:cloudfunctions/functionIamPolicy:FunctionIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FunctionIamPolicy resources.
type functionIamPolicyState struct {
	CloudFunction *string `pulumi:"cloudFunction"`
	Etag          *string `pulumi:"etag"`
	PolicyData    *string `pulumi:"policyData"`
	Project       *string `pulumi:"project"`
	Region        *string `pulumi:"region"`
}

type FunctionIamPolicyState struct {
	CloudFunction pulumi.StringPtrInput
	Etag          pulumi.StringPtrInput
	PolicyData    pulumi.StringPtrInput
	Project       pulumi.StringPtrInput
	Region        pulumi.StringPtrInput
}

func (FunctionIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionIamPolicyState)(nil)).Elem()
}

type functionIamPolicyArgs struct {
	CloudFunction string  `pulumi:"cloudFunction"`
	PolicyData    string  `pulumi:"policyData"`
	Project       *string `pulumi:"project"`
	Region        *string `pulumi:"region"`
}

// The set of arguments for constructing a FunctionIamPolicy resource.
type FunctionIamPolicyArgs struct {
	CloudFunction pulumi.StringInput
	PolicyData    pulumi.StringInput
	Project       pulumi.StringPtrInput
	Region        pulumi.StringPtrInput
}

func (FunctionIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionIamPolicyArgs)(nil)).Elem()
}

type FunctionIamPolicyInput interface {
	pulumi.Input

	ToFunctionIamPolicyOutput() FunctionIamPolicyOutput
	ToFunctionIamPolicyOutputWithContext(ctx context.Context) FunctionIamPolicyOutput
}

func (*FunctionIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionIamPolicy)(nil))
}

func (i *FunctionIamPolicy) ToFunctionIamPolicyOutput() FunctionIamPolicyOutput {
	return i.ToFunctionIamPolicyOutputWithContext(context.Background())
}

func (i *FunctionIamPolicy) ToFunctionIamPolicyOutputWithContext(ctx context.Context) FunctionIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionIamPolicyOutput)
}

func (i *FunctionIamPolicy) ToFunctionIamPolicyPtrOutput() FunctionIamPolicyPtrOutput {
	return i.ToFunctionIamPolicyPtrOutputWithContext(context.Background())
}

func (i *FunctionIamPolicy) ToFunctionIamPolicyPtrOutputWithContext(ctx context.Context) FunctionIamPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionIamPolicyPtrOutput)
}

type FunctionIamPolicyPtrInput interface {
	pulumi.Input

	ToFunctionIamPolicyPtrOutput() FunctionIamPolicyPtrOutput
	ToFunctionIamPolicyPtrOutputWithContext(ctx context.Context) FunctionIamPolicyPtrOutput
}

type functionIamPolicyPtrType FunctionIamPolicyArgs

func (*functionIamPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionIamPolicy)(nil))
}

func (i *functionIamPolicyPtrType) ToFunctionIamPolicyPtrOutput() FunctionIamPolicyPtrOutput {
	return i.ToFunctionIamPolicyPtrOutputWithContext(context.Background())
}

func (i *functionIamPolicyPtrType) ToFunctionIamPolicyPtrOutputWithContext(ctx context.Context) FunctionIamPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionIamPolicyPtrOutput)
}

// FunctionIamPolicyArrayInput is an input type that accepts FunctionIamPolicyArray and FunctionIamPolicyArrayOutput values.
// You can construct a concrete instance of `FunctionIamPolicyArrayInput` via:
//
//          FunctionIamPolicyArray{ FunctionIamPolicyArgs{...} }
type FunctionIamPolicyArrayInput interface {
	pulumi.Input

	ToFunctionIamPolicyArrayOutput() FunctionIamPolicyArrayOutput
	ToFunctionIamPolicyArrayOutputWithContext(context.Context) FunctionIamPolicyArrayOutput
}

type FunctionIamPolicyArray []FunctionIamPolicyInput

func (FunctionIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*FunctionIamPolicy)(nil))
}

func (i FunctionIamPolicyArray) ToFunctionIamPolicyArrayOutput() FunctionIamPolicyArrayOutput {
	return i.ToFunctionIamPolicyArrayOutputWithContext(context.Background())
}

func (i FunctionIamPolicyArray) ToFunctionIamPolicyArrayOutputWithContext(ctx context.Context) FunctionIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionIamPolicyArrayOutput)
}

// FunctionIamPolicyMapInput is an input type that accepts FunctionIamPolicyMap and FunctionIamPolicyMapOutput values.
// You can construct a concrete instance of `FunctionIamPolicyMapInput` via:
//
//          FunctionIamPolicyMap{ "key": FunctionIamPolicyArgs{...} }
type FunctionIamPolicyMapInput interface {
	pulumi.Input

	ToFunctionIamPolicyMapOutput() FunctionIamPolicyMapOutput
	ToFunctionIamPolicyMapOutputWithContext(context.Context) FunctionIamPolicyMapOutput
}

type FunctionIamPolicyMap map[string]FunctionIamPolicyInput

func (FunctionIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*FunctionIamPolicy)(nil))
}

func (i FunctionIamPolicyMap) ToFunctionIamPolicyMapOutput() FunctionIamPolicyMapOutput {
	return i.ToFunctionIamPolicyMapOutputWithContext(context.Background())
}

func (i FunctionIamPolicyMap) ToFunctionIamPolicyMapOutputWithContext(ctx context.Context) FunctionIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionIamPolicyMapOutput)
}

type FunctionIamPolicyOutput struct {
	*pulumi.OutputState
}

func (FunctionIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionIamPolicy)(nil))
}

func (o FunctionIamPolicyOutput) ToFunctionIamPolicyOutput() FunctionIamPolicyOutput {
	return o
}

func (o FunctionIamPolicyOutput) ToFunctionIamPolicyOutputWithContext(ctx context.Context) FunctionIamPolicyOutput {
	return o
}

func (o FunctionIamPolicyOutput) ToFunctionIamPolicyPtrOutput() FunctionIamPolicyPtrOutput {
	return o.ToFunctionIamPolicyPtrOutputWithContext(context.Background())
}

func (o FunctionIamPolicyOutput) ToFunctionIamPolicyPtrOutputWithContext(ctx context.Context) FunctionIamPolicyPtrOutput {
	return o.ApplyT(func(v FunctionIamPolicy) *FunctionIamPolicy {
		return &v
	}).(FunctionIamPolicyPtrOutput)
}

type FunctionIamPolicyPtrOutput struct {
	*pulumi.OutputState
}

func (FunctionIamPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionIamPolicy)(nil))
}

func (o FunctionIamPolicyPtrOutput) ToFunctionIamPolicyPtrOutput() FunctionIamPolicyPtrOutput {
	return o
}

func (o FunctionIamPolicyPtrOutput) ToFunctionIamPolicyPtrOutputWithContext(ctx context.Context) FunctionIamPolicyPtrOutput {
	return o
}

type FunctionIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (FunctionIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionIamPolicy)(nil))
}

func (o FunctionIamPolicyArrayOutput) ToFunctionIamPolicyArrayOutput() FunctionIamPolicyArrayOutput {
	return o
}

func (o FunctionIamPolicyArrayOutput) ToFunctionIamPolicyArrayOutputWithContext(ctx context.Context) FunctionIamPolicyArrayOutput {
	return o
}

func (o FunctionIamPolicyArrayOutput) Index(i pulumi.IntInput) FunctionIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionIamPolicy {
		return vs[0].([]FunctionIamPolicy)[vs[1].(int)]
	}).(FunctionIamPolicyOutput)
}

type FunctionIamPolicyMapOutput struct{ *pulumi.OutputState }

func (FunctionIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FunctionIamPolicy)(nil))
}

func (o FunctionIamPolicyMapOutput) ToFunctionIamPolicyMapOutput() FunctionIamPolicyMapOutput {
	return o
}

func (o FunctionIamPolicyMapOutput) ToFunctionIamPolicyMapOutputWithContext(ctx context.Context) FunctionIamPolicyMapOutput {
	return o
}

func (o FunctionIamPolicyMapOutput) MapIndex(k pulumi.StringInput) FunctionIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FunctionIamPolicy {
		return vs[0].(map[string]FunctionIamPolicy)[vs[1].(string)]
	}).(FunctionIamPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(FunctionIamPolicyOutput{})
	pulumi.RegisterOutputType(FunctionIamPolicyPtrOutput{})
	pulumi.RegisterOutputType(FunctionIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(FunctionIamPolicyMapOutput{})
}
