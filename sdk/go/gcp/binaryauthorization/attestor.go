// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package binaryauthorization

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// An attestor that attests to container image artifacts.
//
// To get more information about Attestor, see:
//
// * [API documentation](https://cloud.google.com/binary-authorization/docs/reference/rest/)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/binary-authorization/)
//
// ## Example Usage
//
// ## Import
//
// # Attestor can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:binaryauthorization/attestor:Attestor default projects/{{project}}/attestors/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:binaryauthorization/attestor:Attestor default {{project}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:binaryauthorization/attestor:Attestor default {{name}}
//
// ```
type Attestor struct {
	pulumi.CustomResourceState

	// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
	// Structure is documented below.
	AttestationAuthorityNote AttestorAttestationAuthorityNoteOutput `pulumi:"attestationAuthorityNote"`
	// A descriptive comment. This field may be updated. The field may be
	// displayed in chooser dialogs.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewAttestor registers a new resource with the given unique name, arguments, and options.
func NewAttestor(ctx *pulumi.Context,
	name string, args *AttestorArgs, opts ...pulumi.ResourceOption) (*Attestor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttestationAuthorityNote == nil {
		return nil, errors.New("invalid value for required argument 'AttestationAuthorityNote'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Attestor
	err := ctx.RegisterResource("gcp:binaryauthorization/attestor:Attestor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttestor gets an existing Attestor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttestor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttestorState, opts ...pulumi.ResourceOption) (*Attestor, error) {
	var resource Attestor
	err := ctx.ReadResource("gcp:binaryauthorization/attestor:Attestor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Attestor resources.
type attestorState struct {
	// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
	// Structure is documented below.
	AttestationAuthorityNote *AttestorAttestationAuthorityNote `pulumi:"attestationAuthorityNote"`
	// A descriptive comment. This field may be updated. The field may be
	// displayed in chooser dialogs.
	Description *string `pulumi:"description"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

type AttestorState struct {
	// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
	// Structure is documented below.
	AttestationAuthorityNote AttestorAttestationAuthorityNotePtrInput
	// A descriptive comment. This field may be updated. The field may be
	// displayed in chooser dialogs.
	Description pulumi.StringPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (AttestorState) ElementType() reflect.Type {
	return reflect.TypeOf((*attestorState)(nil)).Elem()
}

type attestorArgs struct {
	// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
	// Structure is documented below.
	AttestationAuthorityNote AttestorAttestationAuthorityNote `pulumi:"attestationAuthorityNote"`
	// A descriptive comment. This field may be updated. The field may be
	// displayed in chooser dialogs.
	Description *string `pulumi:"description"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Attestor resource.
type AttestorArgs struct {
	// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
	// Structure is documented below.
	AttestationAuthorityNote AttestorAttestationAuthorityNoteInput
	// A descriptive comment. This field may be updated. The field may be
	// displayed in chooser dialogs.
	Description pulumi.StringPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (AttestorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attestorArgs)(nil)).Elem()
}

type AttestorInput interface {
	pulumi.Input

	ToAttestorOutput() AttestorOutput
	ToAttestorOutputWithContext(ctx context.Context) AttestorOutput
}

func (*Attestor) ElementType() reflect.Type {
	return reflect.TypeOf((**Attestor)(nil)).Elem()
}

func (i *Attestor) ToAttestorOutput() AttestorOutput {
	return i.ToAttestorOutputWithContext(context.Background())
}

func (i *Attestor) ToAttestorOutputWithContext(ctx context.Context) AttestorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestorOutput)
}

func (i *Attestor) ToOutput(ctx context.Context) pulumix.Output[*Attestor] {
	return pulumix.Output[*Attestor]{
		OutputState: i.ToAttestorOutputWithContext(ctx).OutputState,
	}
}

// AttestorArrayInput is an input type that accepts AttestorArray and AttestorArrayOutput values.
// You can construct a concrete instance of `AttestorArrayInput` via:
//
//	AttestorArray{ AttestorArgs{...} }
type AttestorArrayInput interface {
	pulumi.Input

	ToAttestorArrayOutput() AttestorArrayOutput
	ToAttestorArrayOutputWithContext(context.Context) AttestorArrayOutput
}

type AttestorArray []AttestorInput

func (AttestorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Attestor)(nil)).Elem()
}

func (i AttestorArray) ToAttestorArrayOutput() AttestorArrayOutput {
	return i.ToAttestorArrayOutputWithContext(context.Background())
}

func (i AttestorArray) ToAttestorArrayOutputWithContext(ctx context.Context) AttestorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestorArrayOutput)
}

func (i AttestorArray) ToOutput(ctx context.Context) pulumix.Output[[]*Attestor] {
	return pulumix.Output[[]*Attestor]{
		OutputState: i.ToAttestorArrayOutputWithContext(ctx).OutputState,
	}
}

// AttestorMapInput is an input type that accepts AttestorMap and AttestorMapOutput values.
// You can construct a concrete instance of `AttestorMapInput` via:
//
//	AttestorMap{ "key": AttestorArgs{...} }
type AttestorMapInput interface {
	pulumi.Input

	ToAttestorMapOutput() AttestorMapOutput
	ToAttestorMapOutputWithContext(context.Context) AttestorMapOutput
}

type AttestorMap map[string]AttestorInput

func (AttestorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Attestor)(nil)).Elem()
}

func (i AttestorMap) ToAttestorMapOutput() AttestorMapOutput {
	return i.ToAttestorMapOutputWithContext(context.Background())
}

func (i AttestorMap) ToAttestorMapOutputWithContext(ctx context.Context) AttestorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestorMapOutput)
}

func (i AttestorMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Attestor] {
	return pulumix.Output[map[string]*Attestor]{
		OutputState: i.ToAttestorMapOutputWithContext(ctx).OutputState,
	}
}

type AttestorOutput struct{ *pulumi.OutputState }

func (AttestorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Attestor)(nil)).Elem()
}

func (o AttestorOutput) ToAttestorOutput() AttestorOutput {
	return o
}

func (o AttestorOutput) ToAttestorOutputWithContext(ctx context.Context) AttestorOutput {
	return o
}

func (o AttestorOutput) ToOutput(ctx context.Context) pulumix.Output[*Attestor] {
	return pulumix.Output[*Attestor]{
		OutputState: o.OutputState,
	}
}

// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
// Structure is documented below.
func (o AttestorOutput) AttestationAuthorityNote() AttestorAttestationAuthorityNoteOutput {
	return o.ApplyT(func(v *Attestor) AttestorAttestationAuthorityNoteOutput { return v.AttestationAuthorityNote }).(AttestorAttestationAuthorityNoteOutput)
}

// A descriptive comment. This field may be updated. The field may be
// displayed in chooser dialogs.
func (o AttestorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Attestor) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The resource name.
func (o AttestorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Attestor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AttestorOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Attestor) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type AttestorArrayOutput struct{ *pulumi.OutputState }

func (AttestorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Attestor)(nil)).Elem()
}

func (o AttestorArrayOutput) ToAttestorArrayOutput() AttestorArrayOutput {
	return o
}

func (o AttestorArrayOutput) ToAttestorArrayOutputWithContext(ctx context.Context) AttestorArrayOutput {
	return o
}

func (o AttestorArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Attestor] {
	return pulumix.Output[[]*Attestor]{
		OutputState: o.OutputState,
	}
}

func (o AttestorArrayOutput) Index(i pulumi.IntInput) AttestorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Attestor {
		return vs[0].([]*Attestor)[vs[1].(int)]
	}).(AttestorOutput)
}

type AttestorMapOutput struct{ *pulumi.OutputState }

func (AttestorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Attestor)(nil)).Elem()
}

func (o AttestorMapOutput) ToAttestorMapOutput() AttestorMapOutput {
	return o
}

func (o AttestorMapOutput) ToAttestorMapOutputWithContext(ctx context.Context) AttestorMapOutput {
	return o
}

func (o AttestorMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Attestor] {
	return pulumix.Output[map[string]*Attestor]{
		OutputState: o.OutputState,
	}
}

func (o AttestorMapOutput) MapIndex(k pulumi.StringInput) AttestorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Attestor {
		return vs[0].(map[string]*Attestor)[vs[1].(string)]
	}).(AttestorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttestorInput)(nil)).Elem(), &Attestor{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttestorArrayInput)(nil)).Elem(), AttestorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttestorMapInput)(nil)).Elem(), AttestorMap{})
	pulumi.RegisterOutputType(AttestorOutput{})
	pulumi.RegisterOutputType(AttestorArrayOutput{})
	pulumi.RegisterOutputType(AttestorMapOutput{})
}
