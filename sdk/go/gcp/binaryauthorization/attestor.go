// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package binaryauthorization

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An attestor that attests to container image artifacts.
//
// To get more information about Attestor, see:
//
// * [API documentation](https://cloud.google.com/binary-authorization/docs/reference/rest/)
// * How-to Guides
//   - [Official Documentation](https://cloud.google.com/binary-authorization/)
//
// ## Example Usage
// ### Binary Authorization Attestor Basic
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/binaryauthorization"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/containeranalysis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			note, err := containeranalysis.NewNote(ctx, "note", &containeranalysis.NoteArgs{
//				AttestationAuthority: &containeranalysis.NoteAttestationAuthorityArgs{
//					Hint: &containeranalysis.NoteAttestationAuthorityHintArgs{
//						HumanReadableName: pulumi.String("Attestor Note"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = binaryauthorization.NewAttestor(ctx, "attestor", &binaryauthorization.AttestorArgs{
//				AttestationAuthorityNote: &binaryauthorization.AttestorAttestationAuthorityNoteArgs{
//					NoteReference: note.Name,
//					PublicKeys: binaryauthorization.AttestorAttestationAuthorityNotePublicKeyArray{
//						&binaryauthorization.AttestorAttestationAuthorityNotePublicKeyArgs{
//							AsciiArmoredPgpPublicKey: pulumi.String(fmt.Sprintf(`mQENBFtP0doBCADF+joTiXWKVuP8kJt3fgpBSjT9h8ezMfKA4aXZctYLx5wslWQl
//
// bB7Iu2ezkECNzoEeU7WxUe8a61pMCh9cisS9H5mB2K2uM4Jnf8tgFeXn3akJDVo0
// oR1IC+Dp9mXbRSK3MAvKkOwWlG99sx3uEdvmeBRHBOO+grchLx24EThXFOyP9Fk6
// V39j6xMjw4aggLD15B4V0v9JqBDdJiIYFzszZDL6pJwZrzcP0z8JO4rTZd+f64bD
// Mpj52j/pQfA8lZHOaAgb1OrthLdMrBAjoDjArV4Ek7vSbrcgYWcI6BhsQrFoxKdX
// 83TZKai55ZCfCLIskwUIzA1NLVwyzCS+fSN/ABEBAAG0KCJUZXN0IEF0dGVzdG9y
// IiA8ZGFuYWhvZmZtYW5AZ29vZ2xlLmNvbT6JAU4EEwEIADgWIQRfWkqHt6hpTA1L
// uY060eeM4dc66AUCW0/R2gIbLwULCQgHAgYVCgkICwIEFgIDAQIeAQIXgAAKCRA6
// 0eeM4dc66HdpCAC4ot3b0OyxPb0Ip+WT2U0PbpTBPJklesuwpIrM4Lh0N+1nVRLC
// 51WSmVbM8BiAFhLbN9LpdHhds1kUrHF7+wWAjdR8sqAj9otc6HGRM/3qfa2qgh+U
// WTEk/3us/rYSi7T7TkMuutRMIa1IkR13uKiW56csEMnbOQpn9rDqwIr5R8nlZP5h
// MAU9vdm1DIv567meMqTaVZgR3w7bck2P49AO8lO5ERFpVkErtu/98y+rUy9d789l
// +OPuS1NGnxI1YKsNaWJF4uJVuvQuZ1twrhCbGNtVorO2U12+cEq+YtUxj7kmdOC1
// qoIRW6y0+UlAc+MbqfL0ziHDOAmcqz1GnROg
// =6Bvm
// `)),
//
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Binary Authorization Attestor Kms
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/binaryauthorization"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/containeranalysis"
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			keyring, err := kms.NewKeyRing(ctx, "keyring", &kms.KeyRingArgs{
//				Location: pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewCryptoKey(ctx, "crypto-key", &kms.CryptoKeyArgs{
//				KeyRing: keyring.ID(),
//				Purpose: pulumi.String("ASYMMETRIC_SIGN"),
//				VersionTemplate: &kms.CryptoKeyVersionTemplateArgs{
//					Algorithm: pulumi.String("RSA_SIGN_PKCS1_4096_SHA512"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			version := kms.GetKMSCryptoKeyVersionOutput(ctx, kms.GetKMSCryptoKeyVersionOutputArgs{
//				CryptoKey: crypto_key.ID(),
//			}, nil)
//			note, err := containeranalysis.NewNote(ctx, "note", &containeranalysis.NoteArgs{
//				AttestationAuthority: &containeranalysis.NoteAttestationAuthorityArgs{
//					Hint: &containeranalysis.NoteAttestationAuthorityHintArgs{
//						HumanReadableName: pulumi.String("Attestor Note"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = binaryauthorization.NewAttestor(ctx, "attestor", &binaryauthorization.AttestorArgs{
//				AttestationAuthorityNote: &binaryauthorization.AttestorAttestationAuthorityNoteArgs{
//					NoteReference: note.Name,
//					PublicKeys: binaryauthorization.AttestorAttestationAuthorityNotePublicKeyArray{
//						&binaryauthorization.AttestorAttestationAuthorityNotePublicKeyArgs{
//							Id: version.ApplyT(func(version kms.GetKMSCryptoKeyVersionResult) (*string, error) {
//								return &version.Id, nil
//							}).(pulumi.StringPtrOutput),
//							PkixPublicKey: &binaryauthorization.AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs{
//								PublicKeyPem: version.ApplyT(func(version kms.GetKMSCryptoKeyVersionResult) (*string, error) {
//									return &version.PublicKeys[0].Pem, nil
//								}).(pulumi.StringPtrOutput),
//								SignatureAlgorithm: version.ApplyT(func(version kms.GetKMSCryptoKeyVersionResult) (*string, error) {
//									return &version.PublicKeys[0].Algorithm, nil
//								}).(pulumi.StringPtrOutput),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Attestor can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import gcp:binaryauthorization/attestor:Attestor default projects/{{project}}/attestors/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:binaryauthorization/attestor:Attestor default {{project}}/{{name}}
//
// ```
//
// ```sh
//
//	$ pulumi import gcp:binaryauthorization/attestor:Attestor default {{name}}
//
// ```
type Attestor struct {
	pulumi.CustomResourceState

	// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
	// Structure is documented below.
	AttestationAuthorityNote AttestorAttestationAuthorityNoteOutput `pulumi:"attestationAuthorityNote"`
	// A descriptive comment. This field may be updated. The field may be
	// displayed in chooser dialogs.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewAttestor registers a new resource with the given unique name, arguments, and options.
func NewAttestor(ctx *pulumi.Context,
	name string, args *AttestorArgs, opts ...pulumi.ResourceOption) (*Attestor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttestationAuthorityNote == nil {
		return nil, errors.New("invalid value for required argument 'AttestationAuthorityNote'")
	}
	var resource Attestor
	err := ctx.RegisterResource("gcp:binaryauthorization/attestor:Attestor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttestor gets an existing Attestor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttestor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttestorState, opts ...pulumi.ResourceOption) (*Attestor, error) {
	var resource Attestor
	err := ctx.ReadResource("gcp:binaryauthorization/attestor:Attestor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Attestor resources.
type attestorState struct {
	// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
	// Structure is documented below.
	AttestationAuthorityNote *AttestorAttestationAuthorityNote `pulumi:"attestationAuthorityNote"`
	// A descriptive comment. This field may be updated. The field may be
	// displayed in chooser dialogs.
	Description *string `pulumi:"description"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

type AttestorState struct {
	// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
	// Structure is documented below.
	AttestationAuthorityNote AttestorAttestationAuthorityNotePtrInput
	// A descriptive comment. This field may be updated. The field may be
	// displayed in chooser dialogs.
	Description pulumi.StringPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (AttestorState) ElementType() reflect.Type {
	return reflect.TypeOf((*attestorState)(nil)).Elem()
}

type attestorArgs struct {
	// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
	// Structure is documented below.
	AttestationAuthorityNote AttestorAttestationAuthorityNote `pulumi:"attestationAuthorityNote"`
	// A descriptive comment. This field may be updated. The field may be
	// displayed in chooser dialogs.
	Description *string `pulumi:"description"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Attestor resource.
type AttestorArgs struct {
	// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
	// Structure is documented below.
	AttestationAuthorityNote AttestorAttestationAuthorityNoteInput
	// A descriptive comment. This field may be updated. The field may be
	// displayed in chooser dialogs.
	Description pulumi.StringPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
}

func (AttestorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attestorArgs)(nil)).Elem()
}

type AttestorInput interface {
	pulumi.Input

	ToAttestorOutput() AttestorOutput
	ToAttestorOutputWithContext(ctx context.Context) AttestorOutput
}

func (*Attestor) ElementType() reflect.Type {
	return reflect.TypeOf((**Attestor)(nil)).Elem()
}

func (i *Attestor) ToAttestorOutput() AttestorOutput {
	return i.ToAttestorOutputWithContext(context.Background())
}

func (i *Attestor) ToAttestorOutputWithContext(ctx context.Context) AttestorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestorOutput)
}

// AttestorArrayInput is an input type that accepts AttestorArray and AttestorArrayOutput values.
// You can construct a concrete instance of `AttestorArrayInput` via:
//
//	AttestorArray{ AttestorArgs{...} }
type AttestorArrayInput interface {
	pulumi.Input

	ToAttestorArrayOutput() AttestorArrayOutput
	ToAttestorArrayOutputWithContext(context.Context) AttestorArrayOutput
}

type AttestorArray []AttestorInput

func (AttestorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Attestor)(nil)).Elem()
}

func (i AttestorArray) ToAttestorArrayOutput() AttestorArrayOutput {
	return i.ToAttestorArrayOutputWithContext(context.Background())
}

func (i AttestorArray) ToAttestorArrayOutputWithContext(ctx context.Context) AttestorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestorArrayOutput)
}

// AttestorMapInput is an input type that accepts AttestorMap and AttestorMapOutput values.
// You can construct a concrete instance of `AttestorMapInput` via:
//
//	AttestorMap{ "key": AttestorArgs{...} }
type AttestorMapInput interface {
	pulumi.Input

	ToAttestorMapOutput() AttestorMapOutput
	ToAttestorMapOutputWithContext(context.Context) AttestorMapOutput
}

type AttestorMap map[string]AttestorInput

func (AttestorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Attestor)(nil)).Elem()
}

func (i AttestorMap) ToAttestorMapOutput() AttestorMapOutput {
	return i.ToAttestorMapOutputWithContext(context.Background())
}

func (i AttestorMap) ToAttestorMapOutputWithContext(ctx context.Context) AttestorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestorMapOutput)
}

type AttestorOutput struct{ *pulumi.OutputState }

func (AttestorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Attestor)(nil)).Elem()
}

func (o AttestorOutput) ToAttestorOutput() AttestorOutput {
	return o
}

func (o AttestorOutput) ToAttestorOutputWithContext(ctx context.Context) AttestorOutput {
	return o
}

// A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
// Structure is documented below.
func (o AttestorOutput) AttestationAuthorityNote() AttestorAttestationAuthorityNoteOutput {
	return o.ApplyT(func(v *Attestor) AttestorAttestationAuthorityNoteOutput { return v.AttestationAuthorityNote }).(AttestorAttestationAuthorityNoteOutput)
}

// A descriptive comment. This field may be updated. The field may be
// displayed in chooser dialogs.
func (o AttestorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Attestor) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The resource name.
func (o AttestorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Attestor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o AttestorOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Attestor) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type AttestorArrayOutput struct{ *pulumi.OutputState }

func (AttestorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Attestor)(nil)).Elem()
}

func (o AttestorArrayOutput) ToAttestorArrayOutput() AttestorArrayOutput {
	return o
}

func (o AttestorArrayOutput) ToAttestorArrayOutputWithContext(ctx context.Context) AttestorArrayOutput {
	return o
}

func (o AttestorArrayOutput) Index(i pulumi.IntInput) AttestorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Attestor {
		return vs[0].([]*Attestor)[vs[1].(int)]
	}).(AttestorOutput)
}

type AttestorMapOutput struct{ *pulumi.OutputState }

func (AttestorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Attestor)(nil)).Elem()
}

func (o AttestorMapOutput) ToAttestorMapOutput() AttestorMapOutput {
	return o
}

func (o AttestorMapOutput) ToAttestorMapOutputWithContext(ctx context.Context) AttestorMapOutput {
	return o
}

func (o AttestorMapOutput) MapIndex(k pulumi.StringInput) AttestorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Attestor {
		return vs[0].(map[string]*Attestor)[vs[1].(string)]
	}).(AttestorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttestorInput)(nil)).Elem(), &Attestor{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttestorArrayInput)(nil)).Elem(), AttestorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttestorMapInput)(nil)).Elem(), AttestorMap{})
	pulumi.RegisterOutputType(AttestorOutput{})
	pulumi.RegisterOutputType(AttestorArrayOutput{})
	pulumi.RegisterOutputType(AttestorMapOutput{})
}
