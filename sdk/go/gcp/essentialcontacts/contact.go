// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package essentialcontacts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A contact that will receive notifications from Google Cloud.
//
// To get more information about Contact, see:
//
// * [API documentation](https://cloud.google.com/resource-manager/docs/reference/essentialcontacts/rest/v1/projects.contacts)
// * How-to Guides
//     * [Official Documentation](https://cloud.google.com/resource-manager/docs/managing-notification-contacts)
//
// > **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
// you must specify a `billingProject` and set `userProjectOverride` to true
// in the provider configuration. Otherwise the Essential Contacts API will return a 403 error.
// Your account must have the `serviceusage.services.use` permission on the
// `billingProject` you defined.
//
// ## Example Usage
// ### Essential Contact
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/essentialcontacts"
// 	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/organizations"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		project, err := organizations.LookupProject(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = essentialcontacts.NewContact(ctx, "contact", &essentialcontacts.ContactArgs{
// 			Parent:      pulumi.String(project.Id),
// 			Email:       pulumi.String("foo@bar.com"),
// 			LanguageTag: pulumi.String("en-GB"),
// 			NotificationCategorySubscriptions: pulumi.StringArray{
// 				pulumi.String("ALL"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Contact can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:essentialcontacts/contact:Contact default {{name}}
// ```
type Contact struct {
	pulumi.CustomResourceState

	// The email address to send notifications to. This does not need to be a Google account.
	Email pulumi.StringOutput `pulumi:"email"`
	// The preferred language for notifications, as a ISO 639-1 language code. See Supported languages for a list of supported languages.
	LanguageTag pulumi.StringOutput `pulumi:"languageTag"`
	// The identifier for the contact. Format: {resourceType}/{resource_id}/contacts/{contact_id}
	Name pulumi.StringOutput `pulumi:"name"`
	// The categories of notifications that the contact will receive communications for.
	NotificationCategorySubscriptions pulumi.StringArrayOutput `pulumi:"notificationCategorySubscriptions"`
	// The resource to save this contact for. Format: organizations/{organization_id}, folders/{folder_id} or projects/{project_id}
	Parent pulumi.StringOutput `pulumi:"parent"`
}

// NewContact registers a new resource with the given unique name, arguments, and options.
func NewContact(ctx *pulumi.Context,
	name string, args *ContactArgs, opts ...pulumi.ResourceOption) (*Contact, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.LanguageTag == nil {
		return nil, errors.New("invalid value for required argument 'LanguageTag'")
	}
	if args.NotificationCategorySubscriptions == nil {
		return nil, errors.New("invalid value for required argument 'NotificationCategorySubscriptions'")
	}
	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource Contact
	err := ctx.RegisterResource("gcp:essentialcontacts/contact:Contact", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContact gets an existing Contact resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContact(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContactState, opts ...pulumi.ResourceOption) (*Contact, error) {
	var resource Contact
	err := ctx.ReadResource("gcp:essentialcontacts/contact:Contact", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Contact resources.
type contactState struct {
	// The email address to send notifications to. This does not need to be a Google account.
	Email *string `pulumi:"email"`
	// The preferred language for notifications, as a ISO 639-1 language code. See Supported languages for a list of supported languages.
	LanguageTag *string `pulumi:"languageTag"`
	// The identifier for the contact. Format: {resourceType}/{resource_id}/contacts/{contact_id}
	Name *string `pulumi:"name"`
	// The categories of notifications that the contact will receive communications for.
	NotificationCategorySubscriptions []string `pulumi:"notificationCategorySubscriptions"`
	// The resource to save this contact for. Format: organizations/{organization_id}, folders/{folder_id} or projects/{project_id}
	Parent *string `pulumi:"parent"`
}

type ContactState struct {
	// The email address to send notifications to. This does not need to be a Google account.
	Email pulumi.StringPtrInput
	// The preferred language for notifications, as a ISO 639-1 language code. See Supported languages for a list of supported languages.
	LanguageTag pulumi.StringPtrInput
	// The identifier for the contact. Format: {resourceType}/{resource_id}/contacts/{contact_id}
	Name pulumi.StringPtrInput
	// The categories of notifications that the contact will receive communications for.
	NotificationCategorySubscriptions pulumi.StringArrayInput
	// The resource to save this contact for. Format: organizations/{organization_id}, folders/{folder_id} or projects/{project_id}
	Parent pulumi.StringPtrInput
}

func (ContactState) ElementType() reflect.Type {
	return reflect.TypeOf((*contactState)(nil)).Elem()
}

type contactArgs struct {
	// The email address to send notifications to. This does not need to be a Google account.
	Email string `pulumi:"email"`
	// The preferred language for notifications, as a ISO 639-1 language code. See Supported languages for a list of supported languages.
	LanguageTag string `pulumi:"languageTag"`
	// The categories of notifications that the contact will receive communications for.
	NotificationCategorySubscriptions []string `pulumi:"notificationCategorySubscriptions"`
	// The resource to save this contact for. Format: organizations/{organization_id}, folders/{folder_id} or projects/{project_id}
	Parent string `pulumi:"parent"`
}

// The set of arguments for constructing a Contact resource.
type ContactArgs struct {
	// The email address to send notifications to. This does not need to be a Google account.
	Email pulumi.StringInput
	// The preferred language for notifications, as a ISO 639-1 language code. See Supported languages for a list of supported languages.
	LanguageTag pulumi.StringInput
	// The categories of notifications that the contact will receive communications for.
	NotificationCategorySubscriptions pulumi.StringArrayInput
	// The resource to save this contact for. Format: organizations/{organization_id}, folders/{folder_id} or projects/{project_id}
	Parent pulumi.StringInput
}

func (ContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contactArgs)(nil)).Elem()
}

type ContactInput interface {
	pulumi.Input

	ToContactOutput() ContactOutput
	ToContactOutputWithContext(ctx context.Context) ContactOutput
}

func (*Contact) ElementType() reflect.Type {
	return reflect.TypeOf((*Contact)(nil))
}

func (i *Contact) ToContactOutput() ContactOutput {
	return i.ToContactOutputWithContext(context.Background())
}

func (i *Contact) ToContactOutputWithContext(ctx context.Context) ContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactOutput)
}

func (i *Contact) ToContactPtrOutput() ContactPtrOutput {
	return i.ToContactPtrOutputWithContext(context.Background())
}

func (i *Contact) ToContactPtrOutputWithContext(ctx context.Context) ContactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPtrOutput)
}

type ContactPtrInput interface {
	pulumi.Input

	ToContactPtrOutput() ContactPtrOutput
	ToContactPtrOutputWithContext(ctx context.Context) ContactPtrOutput
}

type contactPtrType ContactArgs

func (*contactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Contact)(nil))
}

func (i *contactPtrType) ToContactPtrOutput() ContactPtrOutput {
	return i.ToContactPtrOutputWithContext(context.Background())
}

func (i *contactPtrType) ToContactPtrOutputWithContext(ctx context.Context) ContactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPtrOutput)
}

// ContactArrayInput is an input type that accepts ContactArray and ContactArrayOutput values.
// You can construct a concrete instance of `ContactArrayInput` via:
//
//          ContactArray{ ContactArgs{...} }
type ContactArrayInput interface {
	pulumi.Input

	ToContactArrayOutput() ContactArrayOutput
	ToContactArrayOutputWithContext(context.Context) ContactArrayOutput
}

type ContactArray []ContactInput

func (ContactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Contact)(nil)).Elem()
}

func (i ContactArray) ToContactArrayOutput() ContactArrayOutput {
	return i.ToContactArrayOutputWithContext(context.Background())
}

func (i ContactArray) ToContactArrayOutputWithContext(ctx context.Context) ContactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactArrayOutput)
}

// ContactMapInput is an input type that accepts ContactMap and ContactMapOutput values.
// You can construct a concrete instance of `ContactMapInput` via:
//
//          ContactMap{ "key": ContactArgs{...} }
type ContactMapInput interface {
	pulumi.Input

	ToContactMapOutput() ContactMapOutput
	ToContactMapOutputWithContext(context.Context) ContactMapOutput
}

type ContactMap map[string]ContactInput

func (ContactMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Contact)(nil)).Elem()
}

func (i ContactMap) ToContactMapOutput() ContactMapOutput {
	return i.ToContactMapOutputWithContext(context.Background())
}

func (i ContactMap) ToContactMapOutputWithContext(ctx context.Context) ContactMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactMapOutput)
}

type ContactOutput struct{ *pulumi.OutputState }

func (ContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Contact)(nil))
}

func (o ContactOutput) ToContactOutput() ContactOutput {
	return o
}

func (o ContactOutput) ToContactOutputWithContext(ctx context.Context) ContactOutput {
	return o
}

func (o ContactOutput) ToContactPtrOutput() ContactPtrOutput {
	return o.ToContactPtrOutputWithContext(context.Background())
}

func (o ContactOutput) ToContactPtrOutputWithContext(ctx context.Context) ContactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Contact) *Contact {
		return &v
	}).(ContactPtrOutput)
}

type ContactPtrOutput struct{ *pulumi.OutputState }

func (ContactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Contact)(nil))
}

func (o ContactPtrOutput) ToContactPtrOutput() ContactPtrOutput {
	return o
}

func (o ContactPtrOutput) ToContactPtrOutputWithContext(ctx context.Context) ContactPtrOutput {
	return o
}

func (o ContactPtrOutput) Elem() ContactOutput {
	return o.ApplyT(func(v *Contact) Contact {
		if v != nil {
			return *v
		}
		var ret Contact
		return ret
	}).(ContactOutput)
}

type ContactArrayOutput struct{ *pulumi.OutputState }

func (ContactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Contact)(nil))
}

func (o ContactArrayOutput) ToContactArrayOutput() ContactArrayOutput {
	return o
}

func (o ContactArrayOutput) ToContactArrayOutputWithContext(ctx context.Context) ContactArrayOutput {
	return o
}

func (o ContactArrayOutput) Index(i pulumi.IntInput) ContactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Contact {
		return vs[0].([]Contact)[vs[1].(int)]
	}).(ContactOutput)
}

type ContactMapOutput struct{ *pulumi.OutputState }

func (ContactMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Contact)(nil))
}

func (o ContactMapOutput) ToContactMapOutput() ContactMapOutput {
	return o
}

func (o ContactMapOutput) ToContactMapOutputWithContext(ctx context.Context) ContactMapOutput {
	return o
}

func (o ContactMapOutput) MapIndex(k pulumi.StringInput) ContactOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Contact {
		return vs[0].(map[string]Contact)[vs[1].(string)]
	}).(ContactOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContactInput)(nil)).Elem(), &Contact{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPtrInput)(nil)).Elem(), &Contact{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactArrayInput)(nil)).Elem(), ContactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactMapInput)(nil)).Elem(), ContactMap{})
	pulumi.RegisterOutputType(ContactOutput{})
	pulumi.RegisterOutputType(ContactPtrOutput{})
	pulumi.RegisterOutputType(ContactArrayOutput{})
	pulumi.RegisterOutputType(ContactMapOutput{})
}
