// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pubsub

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A named resource to which messages are sent by publishers.
// 
// 
// To get more information about Topic, see:
// 
// * [API documentation](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics)
// * How-to Guides
//     * [Managing Topics](https://cloud.google.com/pubsub/docs/admin#managing_topics)
// 
// <div class = "oics-button" style="float: right; margin: 0 0 -15px">
//   <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=pubsub_topic_basic&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
//     <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
//   </a>
// </div>
type Topic struct {
	s *pulumi.ResourceState
}

// NewTopic registers a new resource with the given unique name, arguments, and options.
func NewTopic(ctx *pulumi.Context,
	name string, args *TopicArgs, opts ...pulumi.ResourceOpt) (*Topic, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
	} else {
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["project"] = args.Project
	}
	s, err := ctx.RegisterResource("gcp:pubsub/topic:Topic", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Topic{s: s}, nil
}

// GetTopic gets an existing Topic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopic(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TopicState, opts ...pulumi.ResourceOpt) (*Topic, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["project"] = state.Project
	}
	s, err := ctx.ReadResource("gcp:pubsub/topic:Topic", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Topic{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Topic) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Topic) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Topic) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

func (r *Topic) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Topic) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// Input properties used for looking up and filtering Topic resources.
type TopicState struct {
	Labels interface{}
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
}

// The set of arguments for constructing a Topic resource.
type TopicArgs struct {
	Labels interface{}
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
}
