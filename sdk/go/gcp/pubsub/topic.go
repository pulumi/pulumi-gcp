// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pubsub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A named resource to which messages are sent by publishers.
//
// To get more information about Topic, see:
//
// * [API documentation](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics)
// * How-to Guides
//   - [Managing Topics](https://cloud.google.com/pubsub/docs/admin#managing_topics)
//
// > **Note:** You can retrieve the email of the Google Managed Pub/Sub Service Account used for forwarding
// by using the `projects.ServiceIdentity` resource.
//
// ## Example Usage
//
// ### Pubsub Topic Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pubsub.NewTopic(ctx, "example", &pubsub.TopicArgs{
//				Name: pulumi.String("example-topic"),
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				MessageRetentionDuration: pulumi.String("86600s"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Pubsub Topic Cmek
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/kms"
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			keyRing, err := kms.NewKeyRing(ctx, "key_ring", &kms.KeyRingArgs{
//				Name:     pulumi.String("example-keyring"),
//				Location: pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			cryptoKey, err := kms.NewCryptoKey(ctx, "crypto_key", &kms.CryptoKeyArgs{
//				Name:    pulumi.String("example-key"),
//				KeyRing: keyRing.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = pubsub.NewTopic(ctx, "example", &pubsub.TopicArgs{
//				Name:       pulumi.String("example-topic"),
//				KmsKeyName: cryptoKey.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Pubsub Topic Geo Restricted
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pubsub.NewTopic(ctx, "example", &pubsub.TopicArgs{
//				Name: pulumi.String("example-topic"),
//				MessageStoragePolicy: &pubsub.TopicMessageStoragePolicyArgs{
//					AllowedPersistenceRegions: pulumi.StringArray{
//						pulumi.String("europe-west3"),
//					},
//					EnforceInTransit: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Pubsub Topic Schema Settings
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := pubsub.NewSchema(ctx, "example", &pubsub.SchemaArgs{
//				Name: pulumi.String("example"),
//				Type: pulumi.String("AVRO"),
//				Definition: pulumi.String(`{
//	  "type" : "record",
//	  "name" : "Avro",
//	  "fields" : [
//	    {
//	      "name" : "StringField",
//	      "type" : "string"
//	    },
//	    {
//	      "name" : "IntField",
//	      "type" : "int"
//	    }
//	  ]
//	}
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			_, err = pubsub.NewTopic(ctx, "example", &pubsub.TopicArgs{
//				Name: pulumi.String("example-topic"),
//				SchemaSettings: &pubsub.TopicSchemaSettingsArgs{
//					Schema:   pulumi.String("projects/my-project-name/schemas/example"),
//					Encoding: pulumi.String("JSON"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				example,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Pubsub Topic Ingestion Kinesis
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pubsub.NewTopic(ctx, "example", &pubsub.TopicArgs{
//				Name: pulumi.String("example-topic"),
//				IngestionDataSourceSettings: &pubsub.TopicIngestionDataSourceSettingsArgs{
//					AwsKinesis: &pubsub.TopicIngestionDataSourceSettingsAwsKinesisArgs{
//						StreamArn:         pulumi.String("arn:aws:kinesis:us-west-2:111111111111:stream/fake-stream-name"),
//						ConsumerArn:       pulumi.String("arn:aws:kinesis:us-west-2:111111111111:stream/fake-stream-name/consumer/consumer-1:1111111111"),
//						AwsRoleArn:        pulumi.String("arn:aws:iam::111111111111:role/fake-role-name"),
//						GcpServiceAccount: pulumi.String("fake-service-account@fake-gcp-project.iam.gserviceaccount.com"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Pubsub Topic Ingestion Cloud Storage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pubsub.NewTopic(ctx, "example", &pubsub.TopicArgs{
//				Name: pulumi.String("example-topic"),
//				IngestionDataSourceSettings: &pubsub.TopicIngestionDataSourceSettingsArgs{
//					CloudStorage: &pubsub.TopicIngestionDataSourceSettingsCloudStorageArgs{
//						Bucket: pulumi.String("test-bucket"),
//						TextFormat: &pubsub.TopicIngestionDataSourceSettingsCloudStorageTextFormatArgs{
//							Delimiter: pulumi.String(" "),
//						},
//						MinimumObjectCreateTime: pulumi.String("2024-01-01T00:00:00Z"),
//						MatchGlob:               pulumi.String("foo/**"),
//					},
//					PlatformLogsSettings: &pubsub.TopicIngestionDataSourceSettingsPlatformLogsSettingsArgs{
//						Severity: pulumi.String("WARNING"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Pubsub Topic Ingestion Azure Event Hubs
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pubsub.NewTopic(ctx, "example", &pubsub.TopicArgs{
//				Name: pulumi.String("example-topic"),
//				IngestionDataSourceSettings: &pubsub.TopicIngestionDataSourceSettingsArgs{
//					AzureEventHubs: &pubsub.TopicIngestionDataSourceSettingsAzureEventHubsArgs{
//						ResourceGroup:     pulumi.String("azure-ingestion-resource-group"),
//						Namespace:         pulumi.String("azure-ingestion-namespace"),
//						EventHub:          pulumi.String("azure-ingestion-event-hub"),
//						ClientId:          pulumi.String("aZZZZZZZ-YYYY-HHHH-GGGG-abcdef569123"),
//						TenantId:          pulumi.String("0XXXXXXX-YYYY-HHHH-GGGG-123456789123"),
//						SubscriptionId:    pulumi.String("bXXXXXXX-YYYY-HHHH-GGGG-123456789123"),
//						GcpServiceAccount: pulumi.String("fake-service-account@fake-gcp-project.iam.gserviceaccount.com"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Pubsub Topic Ingestion Aws Msk
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pubsub.NewTopic(ctx, "example", &pubsub.TopicArgs{
//				Name: pulumi.String("example-topic"),
//				IngestionDataSourceSettings: &pubsub.TopicIngestionDataSourceSettingsArgs{
//					AwsMsk: &pubsub.TopicIngestionDataSourceSettingsAwsMskArgs{
//						ClusterArn:        pulumi.String("arn:aws:kinesis:us-west-2:111111111111:stream/fake-stream-name"),
//						Topic:             pulumi.String("test-topic"),
//						AwsRoleArn:        pulumi.String("arn:aws:iam::111111111111:role/fake-role-name"),
//						GcpServiceAccount: pulumi.String("fake-service-account@fake-gcp-project.iam.gserviceaccount.com"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Pubsub Topic Ingestion Confluent Cloud
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pubsub.NewTopic(ctx, "example", &pubsub.TopicArgs{
//				Name: pulumi.String("example-topic"),
//				IngestionDataSourceSettings: &pubsub.TopicIngestionDataSourceSettingsArgs{
//					ConfluentCloud: &pubsub.TopicIngestionDataSourceSettingsConfluentCloudArgs{
//						BootstrapServer:   pulumi.String("test.us-west2.gcp.confluent.cloud:1111"),
//						ClusterId:         pulumi.String("1234"),
//						Topic:             pulumi.String("test-topic"),
//						IdentityPoolId:    pulumi.String("test-identity-pool-id"),
//						GcpServiceAccount: pulumi.String("fake-service-account@fake-gcp-project.iam.gserviceaccount.com"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Pubsub Topic Single Smt
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pubsub.NewTopic(ctx, "example", &pubsub.TopicArgs{
//				Name: pulumi.String("example-topic"),
//				MessageTransforms: pubsub.TopicMessageTransformArray{
//					&pubsub.TopicMessageTransformArgs{
//						JavascriptUdf: &pubsub.TopicMessageTransformJavascriptUdfArgs{
//							FunctionName: pulumi.String("isYearEven"),
//							Code:         pulumi.String("function isYearEven(message, metadata) {\n  const data = JSON.parse(message.data);\n  return message.year %2 === 0;\n}\n"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Pubsub Topic Multiple Smts
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v9/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pubsub.NewTopic(ctx, "example", &pubsub.TopicArgs{
//				Name: pulumi.String("example-topic"),
//				MessageTransforms: pubsub.TopicMessageTransformArray{
//					&pubsub.TopicMessageTransformArgs{
//						JavascriptUdf: &pubsub.TopicMessageTransformJavascriptUdfArgs{
//							FunctionName: pulumi.String("redactSSN"),
//							Code: pulumi.String(`function redactSSN(message, metadata) {
//	  const data = JSON.parse(message.data);
//	  delete data['ssn'];
//	  message.data = JSON.stringify(data);
//	  return message;
//	}
//
// `),
//
//						},
//					},
//					&pubsub.TopicMessageTransformArgs{
//						JavascriptUdf: &pubsub.TopicMessageTransformJavascriptUdfArgs{
//							FunctionName: pulumi.String("otherFunc"),
//							Code:         pulumi.String("function otherFunc(message, metadata) {\n  return null;\n}\n"),
//						},
//					},
//					&pubsub.TopicMessageTransformArgs{
//						Disabled: pulumi.Bool(true),
//						JavascriptUdf: &pubsub.TopicMessageTransformJavascriptUdfArgs{
//							FunctionName: pulumi.String("someSMTWeDisabled"),
//							Code:         pulumi.String("..."),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Topic can be imported using any of these accepted formats:
//
// * `projects/{{project}}/topics/{{name}}`
//
// * `{{project}}/{{name}}`
//
// * `{{name}}`
//
// When using the `pulumi import` command, Topic can be imported using one of the formats above. For example:
//
// ```sh
// $ pulumi import gcp:pubsub/topic:Topic default projects/{{project}}/topics/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:pubsub/topic:Topic default {{project}}/{{name}}
// ```
//
// ```sh
// $ pulumi import gcp:pubsub/topic:Topic default {{name}}
// ```
type Topic struct {
	pulumi.CustomResourceState

	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapOutput `pulumi:"effectiveLabels"`
	// Settings for ingestion from a data source into this topic.
	// Structure is documented below.
	IngestionDataSourceSettings TopicIngestionDataSourceSettingsPtrOutput `pulumi:"ingestionDataSourceSettings"`
	// The resource name of the Cloud KMS CryptoKey to be used to protect access
	// to messages published on this topic. Your project's PubSub service account
	// (`service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com`) must have
	// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
	// The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`
	KmsKeyName pulumi.StringPtrOutput `pulumi:"kmsKeyName"`
	// A set of key/value label pairs to assign to this Topic.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Indicates the minimum duration to retain a message after it is published
	// to the topic. If this field is set, messages published to the topic in
	// the last messageRetentionDuration are always available to subscribers.
	// For instance, it allows any attached subscription to seek to a timestamp
	// that is up to messageRetentionDuration in the past. If this field is not
	// set, message retention is controlled by settings on individual subscriptions.
	// The rotation period has the format of a decimal number, followed by the
	// letter `s` (seconds). Cannot be more than 31 days or less than 10 minutes.
	MessageRetentionDuration pulumi.StringPtrOutput `pulumi:"messageRetentionDuration"`
	// Policy constraining the set of Google Cloud Platform regions where
	// messages published to the topic may be stored. If not present, then no
	// constraints are in effect.
	// Structure is documented below.
	MessageStoragePolicy TopicMessageStoragePolicyOutput `pulumi:"messageStoragePolicy"`
	// Transforms to be applied to messages published to the topic. Transforms are applied in the
	// order specified.
	// Structure is documented below.
	MessageTransforms TopicMessageTransformArrayOutput `pulumi:"messageTransforms"`
	// Name of the topic.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapOutput `pulumi:"pulumiLabels"`
	// Settings for validating messages published against a schema.
	// Structure is documented below.
	SchemaSettings TopicSchemaSettingsPtrOutput `pulumi:"schemaSettings"`
}

// NewTopic registers a new resource with the given unique name, arguments, and options.
func NewTopic(ctx *pulumi.Context,
	name string, args *TopicArgs, opts ...pulumi.ResourceOption) (*Topic, error) {
	if args == nil {
		args = &TopicArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"effectiveLabels",
		"pulumiLabels",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Topic
	err := ctx.RegisterResource("gcp:pubsub/topic:Topic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopic gets an existing Topic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicState, opts ...pulumi.ResourceOption) (*Topic, error) {
	var resource Topic
	err := ctx.ReadResource("gcp:pubsub/topic:Topic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Topic resources.
type topicState struct {
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels map[string]string `pulumi:"effectiveLabels"`
	// Settings for ingestion from a data source into this topic.
	// Structure is documented below.
	IngestionDataSourceSettings *TopicIngestionDataSourceSettings `pulumi:"ingestionDataSourceSettings"`
	// The resource name of the Cloud KMS CryptoKey to be used to protect access
	// to messages published on this topic. Your project's PubSub service account
	// (`service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com`) must have
	// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
	// The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// A set of key/value label pairs to assign to this Topic.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Indicates the minimum duration to retain a message after it is published
	// to the topic. If this field is set, messages published to the topic in
	// the last messageRetentionDuration are always available to subscribers.
	// For instance, it allows any attached subscription to seek to a timestamp
	// that is up to messageRetentionDuration in the past. If this field is not
	// set, message retention is controlled by settings on individual subscriptions.
	// The rotation period has the format of a decimal number, followed by the
	// letter `s` (seconds). Cannot be more than 31 days or less than 10 minutes.
	MessageRetentionDuration *string `pulumi:"messageRetentionDuration"`
	// Policy constraining the set of Google Cloud Platform regions where
	// messages published to the topic may be stored. If not present, then no
	// constraints are in effect.
	// Structure is documented below.
	MessageStoragePolicy *TopicMessageStoragePolicy `pulumi:"messageStoragePolicy"`
	// Transforms to be applied to messages published to the topic. Transforms are applied in the
	// order specified.
	// Structure is documented below.
	MessageTransforms []TopicMessageTransform `pulumi:"messageTransforms"`
	// Name of the topic.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels map[string]string `pulumi:"pulumiLabels"`
	// Settings for validating messages published against a schema.
	// Structure is documented below.
	SchemaSettings *TopicSchemaSettings `pulumi:"schemaSettings"`
}

type TopicState struct {
	// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
	EffectiveLabels pulumi.StringMapInput
	// Settings for ingestion from a data source into this topic.
	// Structure is documented below.
	IngestionDataSourceSettings TopicIngestionDataSourceSettingsPtrInput
	// The resource name of the Cloud KMS CryptoKey to be used to protect access
	// to messages published on this topic. Your project's PubSub service account
	// (`service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com`) must have
	// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
	// The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`
	KmsKeyName pulumi.StringPtrInput
	// A set of key/value label pairs to assign to this Topic.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Indicates the minimum duration to retain a message after it is published
	// to the topic. If this field is set, messages published to the topic in
	// the last messageRetentionDuration are always available to subscribers.
	// For instance, it allows any attached subscription to seek to a timestamp
	// that is up to messageRetentionDuration in the past. If this field is not
	// set, message retention is controlled by settings on individual subscriptions.
	// The rotation period has the format of a decimal number, followed by the
	// letter `s` (seconds). Cannot be more than 31 days or less than 10 minutes.
	MessageRetentionDuration pulumi.StringPtrInput
	// Policy constraining the set of Google Cloud Platform regions where
	// messages published to the topic may be stored. If not present, then no
	// constraints are in effect.
	// Structure is documented below.
	MessageStoragePolicy TopicMessageStoragePolicyPtrInput
	// Transforms to be applied to messages published to the topic. Transforms are applied in the
	// order specified.
	// Structure is documented below.
	MessageTransforms TopicMessageTransformArrayInput
	// Name of the topic.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	PulumiLabels pulumi.StringMapInput
	// Settings for validating messages published against a schema.
	// Structure is documented below.
	SchemaSettings TopicSchemaSettingsPtrInput
}

func (TopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicState)(nil)).Elem()
}

type topicArgs struct {
	// Settings for ingestion from a data source into this topic.
	// Structure is documented below.
	IngestionDataSourceSettings *TopicIngestionDataSourceSettings `pulumi:"ingestionDataSourceSettings"`
	// The resource name of the Cloud KMS CryptoKey to be used to protect access
	// to messages published on this topic. Your project's PubSub service account
	// (`service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com`) must have
	// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
	// The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// A set of key/value label pairs to assign to this Topic.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels map[string]string `pulumi:"labels"`
	// Indicates the minimum duration to retain a message after it is published
	// to the topic. If this field is set, messages published to the topic in
	// the last messageRetentionDuration are always available to subscribers.
	// For instance, it allows any attached subscription to seek to a timestamp
	// that is up to messageRetentionDuration in the past. If this field is not
	// set, message retention is controlled by settings on individual subscriptions.
	// The rotation period has the format of a decimal number, followed by the
	// letter `s` (seconds). Cannot be more than 31 days or less than 10 minutes.
	MessageRetentionDuration *string `pulumi:"messageRetentionDuration"`
	// Policy constraining the set of Google Cloud Platform regions where
	// messages published to the topic may be stored. If not present, then no
	// constraints are in effect.
	// Structure is documented below.
	MessageStoragePolicy *TopicMessageStoragePolicy `pulumi:"messageStoragePolicy"`
	// Transforms to be applied to messages published to the topic. Transforms are applied in the
	// order specified.
	// Structure is documented below.
	MessageTransforms []TopicMessageTransform `pulumi:"messageTransforms"`
	// Name of the topic.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// Settings for validating messages published against a schema.
	// Structure is documented below.
	SchemaSettings *TopicSchemaSettings `pulumi:"schemaSettings"`
}

// The set of arguments for constructing a Topic resource.
type TopicArgs struct {
	// Settings for ingestion from a data source into this topic.
	// Structure is documented below.
	IngestionDataSourceSettings TopicIngestionDataSourceSettingsPtrInput
	// The resource name of the Cloud KMS CryptoKey to be used to protect access
	// to messages published on this topic. Your project's PubSub service account
	// (`service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com`) must have
	// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
	// The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`
	KmsKeyName pulumi.StringPtrInput
	// A set of key/value label pairs to assign to this Topic.
	//
	// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
	Labels pulumi.StringMapInput
	// Indicates the minimum duration to retain a message after it is published
	// to the topic. If this field is set, messages published to the topic in
	// the last messageRetentionDuration are always available to subscribers.
	// For instance, it allows any attached subscription to seek to a timestamp
	// that is up to messageRetentionDuration in the past. If this field is not
	// set, message retention is controlled by settings on individual subscriptions.
	// The rotation period has the format of a decimal number, followed by the
	// letter `s` (seconds). Cannot be more than 31 days or less than 10 minutes.
	MessageRetentionDuration pulumi.StringPtrInput
	// Policy constraining the set of Google Cloud Platform regions where
	// messages published to the topic may be stored. If not present, then no
	// constraints are in effect.
	// Structure is documented below.
	MessageStoragePolicy TopicMessageStoragePolicyPtrInput
	// Transforms to be applied to messages published to the topic. Transforms are applied in the
	// order specified.
	// Structure is documented below.
	MessageTransforms TopicMessageTransformArrayInput
	// Name of the topic.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// Settings for validating messages published against a schema.
	// Structure is documented below.
	SchemaSettings TopicSchemaSettingsPtrInput
}

func (TopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicArgs)(nil)).Elem()
}

type TopicInput interface {
	pulumi.Input

	ToTopicOutput() TopicOutput
	ToTopicOutputWithContext(ctx context.Context) TopicOutput
}

func (*Topic) ElementType() reflect.Type {
	return reflect.TypeOf((**Topic)(nil)).Elem()
}

func (i *Topic) ToTopicOutput() TopicOutput {
	return i.ToTopicOutputWithContext(context.Background())
}

func (i *Topic) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicOutput)
}

// TopicArrayInput is an input type that accepts TopicArray and TopicArrayOutput values.
// You can construct a concrete instance of `TopicArrayInput` via:
//
//	TopicArray{ TopicArgs{...} }
type TopicArrayInput interface {
	pulumi.Input

	ToTopicArrayOutput() TopicArrayOutput
	ToTopicArrayOutputWithContext(context.Context) TopicArrayOutput
}

type TopicArray []TopicInput

func (TopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Topic)(nil)).Elem()
}

func (i TopicArray) ToTopicArrayOutput() TopicArrayOutput {
	return i.ToTopicArrayOutputWithContext(context.Background())
}

func (i TopicArray) ToTopicArrayOutputWithContext(ctx context.Context) TopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicArrayOutput)
}

// TopicMapInput is an input type that accepts TopicMap and TopicMapOutput values.
// You can construct a concrete instance of `TopicMapInput` via:
//
//	TopicMap{ "key": TopicArgs{...} }
type TopicMapInput interface {
	pulumi.Input

	ToTopicMapOutput() TopicMapOutput
	ToTopicMapOutputWithContext(context.Context) TopicMapOutput
}

type TopicMap map[string]TopicInput

func (TopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Topic)(nil)).Elem()
}

func (i TopicMap) ToTopicMapOutput() TopicMapOutput {
	return i.ToTopicMapOutputWithContext(context.Background())
}

func (i TopicMap) ToTopicMapOutputWithContext(ctx context.Context) TopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicMapOutput)
}

type TopicOutput struct{ *pulumi.OutputState }

func (TopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Topic)(nil)).Elem()
}

func (o TopicOutput) ToTopicOutput() TopicOutput {
	return o
}

func (o TopicOutput) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return o
}

// All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
func (o TopicOutput) EffectiveLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringMapOutput { return v.EffectiveLabels }).(pulumi.StringMapOutput)
}

// Settings for ingestion from a data source into this topic.
// Structure is documented below.
func (o TopicOutput) IngestionDataSourceSettings() TopicIngestionDataSourceSettingsPtrOutput {
	return o.ApplyT(func(v *Topic) TopicIngestionDataSourceSettingsPtrOutput { return v.IngestionDataSourceSettings }).(TopicIngestionDataSourceSettingsPtrOutput)
}

// The resource name of the Cloud KMS CryptoKey to be used to protect access
// to messages published on this topic. Your project's PubSub service account
// (`service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com`) must have
// `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
// The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`
func (o TopicOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringPtrOutput { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

// A set of key/value label pairs to assign to this Topic.
//
// **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
// Please refer to the field `effectiveLabels` for all of the labels present on the resource.
func (o TopicOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Indicates the minimum duration to retain a message after it is published
// to the topic. If this field is set, messages published to the topic in
// the last messageRetentionDuration are always available to subscribers.
// For instance, it allows any attached subscription to seek to a timestamp
// that is up to messageRetentionDuration in the past. If this field is not
// set, message retention is controlled by settings on individual subscriptions.
// The rotation period has the format of a decimal number, followed by the
// letter `s` (seconds). Cannot be more than 31 days or less than 10 minutes.
func (o TopicOutput) MessageRetentionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringPtrOutput { return v.MessageRetentionDuration }).(pulumi.StringPtrOutput)
}

// Policy constraining the set of Google Cloud Platform regions where
// messages published to the topic may be stored. If not present, then no
// constraints are in effect.
// Structure is documented below.
func (o TopicOutput) MessageStoragePolicy() TopicMessageStoragePolicyOutput {
	return o.ApplyT(func(v *Topic) TopicMessageStoragePolicyOutput { return v.MessageStoragePolicy }).(TopicMessageStoragePolicyOutput)
}

// Transforms to be applied to messages published to the topic. Transforms are applied in the
// order specified.
// Structure is documented below.
func (o TopicOutput) MessageTransforms() TopicMessageTransformArrayOutput {
	return o.ApplyT(func(v *Topic) TopicMessageTransformArrayOutput { return v.MessageTransforms }).(TopicMessageTransformArrayOutput)
}

// Name of the topic.
func (o TopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (o TopicOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The combination of labels configured directly on the resource
// and default labels configured on the provider.
func (o TopicOutput) PulumiLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringMapOutput { return v.PulumiLabels }).(pulumi.StringMapOutput)
}

// Settings for validating messages published against a schema.
// Structure is documented below.
func (o TopicOutput) SchemaSettings() TopicSchemaSettingsPtrOutput {
	return o.ApplyT(func(v *Topic) TopicSchemaSettingsPtrOutput { return v.SchemaSettings }).(TopicSchemaSettingsPtrOutput)
}

type TopicArrayOutput struct{ *pulumi.OutputState }

func (TopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Topic)(nil)).Elem()
}

func (o TopicArrayOutput) ToTopicArrayOutput() TopicArrayOutput {
	return o
}

func (o TopicArrayOutput) ToTopicArrayOutputWithContext(ctx context.Context) TopicArrayOutput {
	return o
}

func (o TopicArrayOutput) Index(i pulumi.IntInput) TopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Topic {
		return vs[0].([]*Topic)[vs[1].(int)]
	}).(TopicOutput)
}

type TopicMapOutput struct{ *pulumi.OutputState }

func (TopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Topic)(nil)).Elem()
}

func (o TopicMapOutput) ToTopicMapOutput() TopicMapOutput {
	return o
}

func (o TopicMapOutput) ToTopicMapOutputWithContext(ctx context.Context) TopicMapOutput {
	return o
}

func (o TopicMapOutput) MapIndex(k pulumi.StringInput) TopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Topic {
		return vs[0].(map[string]*Topic)[vs[1].(string)]
	}).(TopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicInput)(nil)).Elem(), &Topic{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicArrayInput)(nil)).Elem(), TopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicMapInput)(nil)).Elem(), TopicMap{})
	pulumi.RegisterOutputType(TopicOutput{})
	pulumi.RegisterOutputType(TopicArrayOutput{})
	pulumi.RegisterOutputType(TopicMapOutput{})
}
