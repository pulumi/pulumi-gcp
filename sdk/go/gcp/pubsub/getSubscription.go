// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pubsub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Google Cloud Pub/Sub Subscription. For more information see
// the [official documentation](https://cloud.google.com/pubsub/docs/)
// and [API](https://cloud.google.com/pubsub/docs/apis).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err = pubsub.LookupSubscription(ctx, &pubsub.LookupSubscriptionArgs{
//				Name: "my-pubsub-subscription",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSubscription(ctx *pulumi.Context, args *LookupSubscriptionArgs, opts ...pulumi.InvokeOption) (*LookupSubscriptionResult, error) {
	var rv LookupSubscriptionResult
	err := ctx.Invoke("gcp:pubsub/getSubscription:getSubscription", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubscription.
type LookupSubscriptionArgs struct {
	// The name of the Cloud Pub/Sub Subscription.
	Name string `pulumi:"name"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project *string `pulumi:"project"`
}

// A collection of values returned by getSubscription.
type LookupSubscriptionResult struct {
	AckDeadlineSeconds        int                               `pulumi:"ackDeadlineSeconds"`
	BigqueryConfigs           []GetSubscriptionBigqueryConfig   `pulumi:"bigqueryConfigs"`
	DeadLetterPolicies        []GetSubscriptionDeadLetterPolicy `pulumi:"deadLetterPolicies"`
	EnableExactlyOnceDelivery bool                              `pulumi:"enableExactlyOnceDelivery"`
	EnableMessageOrdering     bool                              `pulumi:"enableMessageOrdering"`
	ExpirationPolicies        []GetSubscriptionExpirationPolicy `pulumi:"expirationPolicies"`
	Filter                    string                            `pulumi:"filter"`
	// The provider-assigned unique ID for this managed resource.
	Id                       string                       `pulumi:"id"`
	Labels                   map[string]string            `pulumi:"labels"`
	MessageRetentionDuration string                       `pulumi:"messageRetentionDuration"`
	Name                     string                       `pulumi:"name"`
	Project                  *string                      `pulumi:"project"`
	PushConfigs              []GetSubscriptionPushConfig  `pulumi:"pushConfigs"`
	RetainAckedMessages      bool                         `pulumi:"retainAckedMessages"`
	RetryPolicies            []GetSubscriptionRetryPolicy `pulumi:"retryPolicies"`
	Topic                    string                       `pulumi:"topic"`
}

func LookupSubscriptionOutput(ctx *pulumi.Context, args LookupSubscriptionOutputArgs, opts ...pulumi.InvokeOption) LookupSubscriptionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSubscriptionResult, error) {
			args := v.(LookupSubscriptionArgs)
			r, err := LookupSubscription(ctx, &args, opts...)
			var s LookupSubscriptionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSubscriptionResultOutput)
}

// A collection of arguments for invoking getSubscription.
type LookupSubscriptionOutputArgs struct {
	// The name of the Cloud Pub/Sub Subscription.
	Name pulumi.StringInput `pulumi:"name"`
	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupSubscriptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubscriptionArgs)(nil)).Elem()
}

// A collection of values returned by getSubscription.
type LookupSubscriptionResultOutput struct{ *pulumi.OutputState }

func (LookupSubscriptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubscriptionResult)(nil)).Elem()
}

func (o LookupSubscriptionResultOutput) ToLookupSubscriptionResultOutput() LookupSubscriptionResultOutput {
	return o
}

func (o LookupSubscriptionResultOutput) ToLookupSubscriptionResultOutputWithContext(ctx context.Context) LookupSubscriptionResultOutput {
	return o
}

func (o LookupSubscriptionResultOutput) AckDeadlineSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubscriptionResult) int { return v.AckDeadlineSeconds }).(pulumi.IntOutput)
}

func (o LookupSubscriptionResultOutput) BigqueryConfigs() GetSubscriptionBigqueryConfigArrayOutput {
	return o.ApplyT(func(v LookupSubscriptionResult) []GetSubscriptionBigqueryConfig { return v.BigqueryConfigs }).(GetSubscriptionBigqueryConfigArrayOutput)
}

func (o LookupSubscriptionResultOutput) DeadLetterPolicies() GetSubscriptionDeadLetterPolicyArrayOutput {
	return o.ApplyT(func(v LookupSubscriptionResult) []GetSubscriptionDeadLetterPolicy { return v.DeadLetterPolicies }).(GetSubscriptionDeadLetterPolicyArrayOutput)
}

func (o LookupSubscriptionResultOutput) EnableExactlyOnceDelivery() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubscriptionResult) bool { return v.EnableExactlyOnceDelivery }).(pulumi.BoolOutput)
}

func (o LookupSubscriptionResultOutput) EnableMessageOrdering() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubscriptionResult) bool { return v.EnableMessageOrdering }).(pulumi.BoolOutput)
}

func (o LookupSubscriptionResultOutput) ExpirationPolicies() GetSubscriptionExpirationPolicyArrayOutput {
	return o.ApplyT(func(v LookupSubscriptionResult) []GetSubscriptionExpirationPolicy { return v.ExpirationPolicies }).(GetSubscriptionExpirationPolicyArrayOutput)
}

func (o LookupSubscriptionResultOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscriptionResult) string { return v.Filter }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSubscriptionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscriptionResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSubscriptionResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSubscriptionResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupSubscriptionResultOutput) MessageRetentionDuration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscriptionResult) string { return v.MessageRetentionDuration }).(pulumi.StringOutput)
}

func (o LookupSubscriptionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscriptionResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSubscriptionResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscriptionResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o LookupSubscriptionResultOutput) PushConfigs() GetSubscriptionPushConfigArrayOutput {
	return o.ApplyT(func(v LookupSubscriptionResult) []GetSubscriptionPushConfig { return v.PushConfigs }).(GetSubscriptionPushConfigArrayOutput)
}

func (o LookupSubscriptionResultOutput) RetainAckedMessages() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubscriptionResult) bool { return v.RetainAckedMessages }).(pulumi.BoolOutput)
}

func (o LookupSubscriptionResultOutput) RetryPolicies() GetSubscriptionRetryPolicyArrayOutput {
	return o.ApplyT(func(v LookupSubscriptionResult) []GetSubscriptionRetryPolicy { return v.RetryPolicies }).(GetSubscriptionRetryPolicyArrayOutput)
}

func (o LookupSubscriptionResultOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscriptionResult) string { return v.Topic }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubscriptionResultOutput{})
}
