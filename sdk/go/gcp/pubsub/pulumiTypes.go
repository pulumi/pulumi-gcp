// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pubsub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v6/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type LiteSubscriptionDeliveryConfig struct {
	// When this subscription should send messages to subscribers relative to messages persistence in storage.
	// Possible values are: `DELIVER_IMMEDIATELY`, `DELIVER_AFTER_STORED`, `DELIVERY_REQUIREMENT_UNSPECIFIED`.
	DeliveryRequirement string `pulumi:"deliveryRequirement"`
}

// LiteSubscriptionDeliveryConfigInput is an input type that accepts LiteSubscriptionDeliveryConfigArgs and LiteSubscriptionDeliveryConfigOutput values.
// You can construct a concrete instance of `LiteSubscriptionDeliveryConfigInput` via:
//
//	LiteSubscriptionDeliveryConfigArgs{...}
type LiteSubscriptionDeliveryConfigInput interface {
	pulumi.Input

	ToLiteSubscriptionDeliveryConfigOutput() LiteSubscriptionDeliveryConfigOutput
	ToLiteSubscriptionDeliveryConfigOutputWithContext(context.Context) LiteSubscriptionDeliveryConfigOutput
}

type LiteSubscriptionDeliveryConfigArgs struct {
	// When this subscription should send messages to subscribers relative to messages persistence in storage.
	// Possible values are: `DELIVER_IMMEDIATELY`, `DELIVER_AFTER_STORED`, `DELIVERY_REQUIREMENT_UNSPECIFIED`.
	DeliveryRequirement pulumi.StringInput `pulumi:"deliveryRequirement"`
}

func (LiteSubscriptionDeliveryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteSubscriptionDeliveryConfig)(nil)).Elem()
}

func (i LiteSubscriptionDeliveryConfigArgs) ToLiteSubscriptionDeliveryConfigOutput() LiteSubscriptionDeliveryConfigOutput {
	return i.ToLiteSubscriptionDeliveryConfigOutputWithContext(context.Background())
}

func (i LiteSubscriptionDeliveryConfigArgs) ToLiteSubscriptionDeliveryConfigOutputWithContext(ctx context.Context) LiteSubscriptionDeliveryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteSubscriptionDeliveryConfigOutput)
}

func (i LiteSubscriptionDeliveryConfigArgs) ToOutput(ctx context.Context) pulumix.Output[LiteSubscriptionDeliveryConfig] {
	return pulumix.Output[LiteSubscriptionDeliveryConfig]{
		OutputState: i.ToLiteSubscriptionDeliveryConfigOutputWithContext(ctx).OutputState,
	}
}

func (i LiteSubscriptionDeliveryConfigArgs) ToLiteSubscriptionDeliveryConfigPtrOutput() LiteSubscriptionDeliveryConfigPtrOutput {
	return i.ToLiteSubscriptionDeliveryConfigPtrOutputWithContext(context.Background())
}

func (i LiteSubscriptionDeliveryConfigArgs) ToLiteSubscriptionDeliveryConfigPtrOutputWithContext(ctx context.Context) LiteSubscriptionDeliveryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteSubscriptionDeliveryConfigOutput).ToLiteSubscriptionDeliveryConfigPtrOutputWithContext(ctx)
}

// LiteSubscriptionDeliveryConfigPtrInput is an input type that accepts LiteSubscriptionDeliveryConfigArgs, LiteSubscriptionDeliveryConfigPtr and LiteSubscriptionDeliveryConfigPtrOutput values.
// You can construct a concrete instance of `LiteSubscriptionDeliveryConfigPtrInput` via:
//
//	        LiteSubscriptionDeliveryConfigArgs{...}
//
//	or:
//
//	        nil
type LiteSubscriptionDeliveryConfigPtrInput interface {
	pulumi.Input

	ToLiteSubscriptionDeliveryConfigPtrOutput() LiteSubscriptionDeliveryConfigPtrOutput
	ToLiteSubscriptionDeliveryConfigPtrOutputWithContext(context.Context) LiteSubscriptionDeliveryConfigPtrOutput
}

type liteSubscriptionDeliveryConfigPtrType LiteSubscriptionDeliveryConfigArgs

func LiteSubscriptionDeliveryConfigPtr(v *LiteSubscriptionDeliveryConfigArgs) LiteSubscriptionDeliveryConfigPtrInput {
	return (*liteSubscriptionDeliveryConfigPtrType)(v)
}

func (*liteSubscriptionDeliveryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiteSubscriptionDeliveryConfig)(nil)).Elem()
}

func (i *liteSubscriptionDeliveryConfigPtrType) ToLiteSubscriptionDeliveryConfigPtrOutput() LiteSubscriptionDeliveryConfigPtrOutput {
	return i.ToLiteSubscriptionDeliveryConfigPtrOutputWithContext(context.Background())
}

func (i *liteSubscriptionDeliveryConfigPtrType) ToLiteSubscriptionDeliveryConfigPtrOutputWithContext(ctx context.Context) LiteSubscriptionDeliveryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteSubscriptionDeliveryConfigPtrOutput)
}

func (i *liteSubscriptionDeliveryConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*LiteSubscriptionDeliveryConfig] {
	return pulumix.Output[*LiteSubscriptionDeliveryConfig]{
		OutputState: i.ToLiteSubscriptionDeliveryConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type LiteSubscriptionDeliveryConfigOutput struct{ *pulumi.OutputState }

func (LiteSubscriptionDeliveryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteSubscriptionDeliveryConfig)(nil)).Elem()
}

func (o LiteSubscriptionDeliveryConfigOutput) ToLiteSubscriptionDeliveryConfigOutput() LiteSubscriptionDeliveryConfigOutput {
	return o
}

func (o LiteSubscriptionDeliveryConfigOutput) ToLiteSubscriptionDeliveryConfigOutputWithContext(ctx context.Context) LiteSubscriptionDeliveryConfigOutput {
	return o
}

func (o LiteSubscriptionDeliveryConfigOutput) ToLiteSubscriptionDeliveryConfigPtrOutput() LiteSubscriptionDeliveryConfigPtrOutput {
	return o.ToLiteSubscriptionDeliveryConfigPtrOutputWithContext(context.Background())
}

func (o LiteSubscriptionDeliveryConfigOutput) ToLiteSubscriptionDeliveryConfigPtrOutputWithContext(ctx context.Context) LiteSubscriptionDeliveryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiteSubscriptionDeliveryConfig) *LiteSubscriptionDeliveryConfig {
		return &v
	}).(LiteSubscriptionDeliveryConfigPtrOutput)
}

func (o LiteSubscriptionDeliveryConfigOutput) ToOutput(ctx context.Context) pulumix.Output[LiteSubscriptionDeliveryConfig] {
	return pulumix.Output[LiteSubscriptionDeliveryConfig]{
		OutputState: o.OutputState,
	}
}

// When this subscription should send messages to subscribers relative to messages persistence in storage.
// Possible values are: `DELIVER_IMMEDIATELY`, `DELIVER_AFTER_STORED`, `DELIVERY_REQUIREMENT_UNSPECIFIED`.
func (o LiteSubscriptionDeliveryConfigOutput) DeliveryRequirement() pulumi.StringOutput {
	return o.ApplyT(func(v LiteSubscriptionDeliveryConfig) string { return v.DeliveryRequirement }).(pulumi.StringOutput)
}

type LiteSubscriptionDeliveryConfigPtrOutput struct{ *pulumi.OutputState }

func (LiteSubscriptionDeliveryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiteSubscriptionDeliveryConfig)(nil)).Elem()
}

func (o LiteSubscriptionDeliveryConfigPtrOutput) ToLiteSubscriptionDeliveryConfigPtrOutput() LiteSubscriptionDeliveryConfigPtrOutput {
	return o
}

func (o LiteSubscriptionDeliveryConfigPtrOutput) ToLiteSubscriptionDeliveryConfigPtrOutputWithContext(ctx context.Context) LiteSubscriptionDeliveryConfigPtrOutput {
	return o
}

func (o LiteSubscriptionDeliveryConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiteSubscriptionDeliveryConfig] {
	return pulumix.Output[*LiteSubscriptionDeliveryConfig]{
		OutputState: o.OutputState,
	}
}

func (o LiteSubscriptionDeliveryConfigPtrOutput) Elem() LiteSubscriptionDeliveryConfigOutput {
	return o.ApplyT(func(v *LiteSubscriptionDeliveryConfig) LiteSubscriptionDeliveryConfig {
		if v != nil {
			return *v
		}
		var ret LiteSubscriptionDeliveryConfig
		return ret
	}).(LiteSubscriptionDeliveryConfigOutput)
}

// When this subscription should send messages to subscribers relative to messages persistence in storage.
// Possible values are: `DELIVER_IMMEDIATELY`, `DELIVER_AFTER_STORED`, `DELIVERY_REQUIREMENT_UNSPECIFIED`.
func (o LiteSubscriptionDeliveryConfigPtrOutput) DeliveryRequirement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiteSubscriptionDeliveryConfig) *string {
		if v == nil {
			return nil
		}
		return &v.DeliveryRequirement
	}).(pulumi.StringPtrOutput)
}

type LiteTopicPartitionConfig struct {
	// The capacity configuration.
	// Structure is documented below.
	Capacity *LiteTopicPartitionConfigCapacity `pulumi:"capacity"`
	// The number of partitions in the topic. Must be at least 1.
	Count int `pulumi:"count"`
}

// LiteTopicPartitionConfigInput is an input type that accepts LiteTopicPartitionConfigArgs and LiteTopicPartitionConfigOutput values.
// You can construct a concrete instance of `LiteTopicPartitionConfigInput` via:
//
//	LiteTopicPartitionConfigArgs{...}
type LiteTopicPartitionConfigInput interface {
	pulumi.Input

	ToLiteTopicPartitionConfigOutput() LiteTopicPartitionConfigOutput
	ToLiteTopicPartitionConfigOutputWithContext(context.Context) LiteTopicPartitionConfigOutput
}

type LiteTopicPartitionConfigArgs struct {
	// The capacity configuration.
	// Structure is documented below.
	Capacity LiteTopicPartitionConfigCapacityPtrInput `pulumi:"capacity"`
	// The number of partitions in the topic. Must be at least 1.
	Count pulumi.IntInput `pulumi:"count"`
}

func (LiteTopicPartitionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteTopicPartitionConfig)(nil)).Elem()
}

func (i LiteTopicPartitionConfigArgs) ToLiteTopicPartitionConfigOutput() LiteTopicPartitionConfigOutput {
	return i.ToLiteTopicPartitionConfigOutputWithContext(context.Background())
}

func (i LiteTopicPartitionConfigArgs) ToLiteTopicPartitionConfigOutputWithContext(ctx context.Context) LiteTopicPartitionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteTopicPartitionConfigOutput)
}

func (i LiteTopicPartitionConfigArgs) ToOutput(ctx context.Context) pulumix.Output[LiteTopicPartitionConfig] {
	return pulumix.Output[LiteTopicPartitionConfig]{
		OutputState: i.ToLiteTopicPartitionConfigOutputWithContext(ctx).OutputState,
	}
}

func (i LiteTopicPartitionConfigArgs) ToLiteTopicPartitionConfigPtrOutput() LiteTopicPartitionConfigPtrOutput {
	return i.ToLiteTopicPartitionConfigPtrOutputWithContext(context.Background())
}

func (i LiteTopicPartitionConfigArgs) ToLiteTopicPartitionConfigPtrOutputWithContext(ctx context.Context) LiteTopicPartitionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteTopicPartitionConfigOutput).ToLiteTopicPartitionConfigPtrOutputWithContext(ctx)
}

// LiteTopicPartitionConfigPtrInput is an input type that accepts LiteTopicPartitionConfigArgs, LiteTopicPartitionConfigPtr and LiteTopicPartitionConfigPtrOutput values.
// You can construct a concrete instance of `LiteTopicPartitionConfigPtrInput` via:
//
//	        LiteTopicPartitionConfigArgs{...}
//
//	or:
//
//	        nil
type LiteTopicPartitionConfigPtrInput interface {
	pulumi.Input

	ToLiteTopicPartitionConfigPtrOutput() LiteTopicPartitionConfigPtrOutput
	ToLiteTopicPartitionConfigPtrOutputWithContext(context.Context) LiteTopicPartitionConfigPtrOutput
}

type liteTopicPartitionConfigPtrType LiteTopicPartitionConfigArgs

func LiteTopicPartitionConfigPtr(v *LiteTopicPartitionConfigArgs) LiteTopicPartitionConfigPtrInput {
	return (*liteTopicPartitionConfigPtrType)(v)
}

func (*liteTopicPartitionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiteTopicPartitionConfig)(nil)).Elem()
}

func (i *liteTopicPartitionConfigPtrType) ToLiteTopicPartitionConfigPtrOutput() LiteTopicPartitionConfigPtrOutput {
	return i.ToLiteTopicPartitionConfigPtrOutputWithContext(context.Background())
}

func (i *liteTopicPartitionConfigPtrType) ToLiteTopicPartitionConfigPtrOutputWithContext(ctx context.Context) LiteTopicPartitionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteTopicPartitionConfigPtrOutput)
}

func (i *liteTopicPartitionConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*LiteTopicPartitionConfig] {
	return pulumix.Output[*LiteTopicPartitionConfig]{
		OutputState: i.ToLiteTopicPartitionConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type LiteTopicPartitionConfigOutput struct{ *pulumi.OutputState }

func (LiteTopicPartitionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteTopicPartitionConfig)(nil)).Elem()
}

func (o LiteTopicPartitionConfigOutput) ToLiteTopicPartitionConfigOutput() LiteTopicPartitionConfigOutput {
	return o
}

func (o LiteTopicPartitionConfigOutput) ToLiteTopicPartitionConfigOutputWithContext(ctx context.Context) LiteTopicPartitionConfigOutput {
	return o
}

func (o LiteTopicPartitionConfigOutput) ToLiteTopicPartitionConfigPtrOutput() LiteTopicPartitionConfigPtrOutput {
	return o.ToLiteTopicPartitionConfigPtrOutputWithContext(context.Background())
}

func (o LiteTopicPartitionConfigOutput) ToLiteTopicPartitionConfigPtrOutputWithContext(ctx context.Context) LiteTopicPartitionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiteTopicPartitionConfig) *LiteTopicPartitionConfig {
		return &v
	}).(LiteTopicPartitionConfigPtrOutput)
}

func (o LiteTopicPartitionConfigOutput) ToOutput(ctx context.Context) pulumix.Output[LiteTopicPartitionConfig] {
	return pulumix.Output[LiteTopicPartitionConfig]{
		OutputState: o.OutputState,
	}
}

// The capacity configuration.
// Structure is documented below.
func (o LiteTopicPartitionConfigOutput) Capacity() LiteTopicPartitionConfigCapacityPtrOutput {
	return o.ApplyT(func(v LiteTopicPartitionConfig) *LiteTopicPartitionConfigCapacity { return v.Capacity }).(LiteTopicPartitionConfigCapacityPtrOutput)
}

// The number of partitions in the topic. Must be at least 1.
func (o LiteTopicPartitionConfigOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v LiteTopicPartitionConfig) int { return v.Count }).(pulumi.IntOutput)
}

type LiteTopicPartitionConfigPtrOutput struct{ *pulumi.OutputState }

func (LiteTopicPartitionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiteTopicPartitionConfig)(nil)).Elem()
}

func (o LiteTopicPartitionConfigPtrOutput) ToLiteTopicPartitionConfigPtrOutput() LiteTopicPartitionConfigPtrOutput {
	return o
}

func (o LiteTopicPartitionConfigPtrOutput) ToLiteTopicPartitionConfigPtrOutputWithContext(ctx context.Context) LiteTopicPartitionConfigPtrOutput {
	return o
}

func (o LiteTopicPartitionConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiteTopicPartitionConfig] {
	return pulumix.Output[*LiteTopicPartitionConfig]{
		OutputState: o.OutputState,
	}
}

func (o LiteTopicPartitionConfigPtrOutput) Elem() LiteTopicPartitionConfigOutput {
	return o.ApplyT(func(v *LiteTopicPartitionConfig) LiteTopicPartitionConfig {
		if v != nil {
			return *v
		}
		var ret LiteTopicPartitionConfig
		return ret
	}).(LiteTopicPartitionConfigOutput)
}

// The capacity configuration.
// Structure is documented below.
func (o LiteTopicPartitionConfigPtrOutput) Capacity() LiteTopicPartitionConfigCapacityPtrOutput {
	return o.ApplyT(func(v *LiteTopicPartitionConfig) *LiteTopicPartitionConfigCapacity {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(LiteTopicPartitionConfigCapacityPtrOutput)
}

// The number of partitions in the topic. Must be at least 1.
func (o LiteTopicPartitionConfigPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiteTopicPartitionConfig) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

type LiteTopicPartitionConfigCapacity struct {
	// Subscribe throughput capacity per partition in MiB/s. Must be >= 4 and <= 16.
	PublishMibPerSec int `pulumi:"publishMibPerSec"`
	// Publish throughput capacity per partition in MiB/s. Must be >= 4 and <= 16.
	SubscribeMibPerSec int `pulumi:"subscribeMibPerSec"`
}

// LiteTopicPartitionConfigCapacityInput is an input type that accepts LiteTopicPartitionConfigCapacityArgs and LiteTopicPartitionConfigCapacityOutput values.
// You can construct a concrete instance of `LiteTopicPartitionConfigCapacityInput` via:
//
//	LiteTopicPartitionConfigCapacityArgs{...}
type LiteTopicPartitionConfigCapacityInput interface {
	pulumi.Input

	ToLiteTopicPartitionConfigCapacityOutput() LiteTopicPartitionConfigCapacityOutput
	ToLiteTopicPartitionConfigCapacityOutputWithContext(context.Context) LiteTopicPartitionConfigCapacityOutput
}

type LiteTopicPartitionConfigCapacityArgs struct {
	// Subscribe throughput capacity per partition in MiB/s. Must be >= 4 and <= 16.
	PublishMibPerSec pulumi.IntInput `pulumi:"publishMibPerSec"`
	// Publish throughput capacity per partition in MiB/s. Must be >= 4 and <= 16.
	SubscribeMibPerSec pulumi.IntInput `pulumi:"subscribeMibPerSec"`
}

func (LiteTopicPartitionConfigCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteTopicPartitionConfigCapacity)(nil)).Elem()
}

func (i LiteTopicPartitionConfigCapacityArgs) ToLiteTopicPartitionConfigCapacityOutput() LiteTopicPartitionConfigCapacityOutput {
	return i.ToLiteTopicPartitionConfigCapacityOutputWithContext(context.Background())
}

func (i LiteTopicPartitionConfigCapacityArgs) ToLiteTopicPartitionConfigCapacityOutputWithContext(ctx context.Context) LiteTopicPartitionConfigCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteTopicPartitionConfigCapacityOutput)
}

func (i LiteTopicPartitionConfigCapacityArgs) ToOutput(ctx context.Context) pulumix.Output[LiteTopicPartitionConfigCapacity] {
	return pulumix.Output[LiteTopicPartitionConfigCapacity]{
		OutputState: i.ToLiteTopicPartitionConfigCapacityOutputWithContext(ctx).OutputState,
	}
}

func (i LiteTopicPartitionConfigCapacityArgs) ToLiteTopicPartitionConfigCapacityPtrOutput() LiteTopicPartitionConfigCapacityPtrOutput {
	return i.ToLiteTopicPartitionConfigCapacityPtrOutputWithContext(context.Background())
}

func (i LiteTopicPartitionConfigCapacityArgs) ToLiteTopicPartitionConfigCapacityPtrOutputWithContext(ctx context.Context) LiteTopicPartitionConfigCapacityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteTopicPartitionConfigCapacityOutput).ToLiteTopicPartitionConfigCapacityPtrOutputWithContext(ctx)
}

// LiteTopicPartitionConfigCapacityPtrInput is an input type that accepts LiteTopicPartitionConfigCapacityArgs, LiteTopicPartitionConfigCapacityPtr and LiteTopicPartitionConfigCapacityPtrOutput values.
// You can construct a concrete instance of `LiteTopicPartitionConfigCapacityPtrInput` via:
//
//	        LiteTopicPartitionConfigCapacityArgs{...}
//
//	or:
//
//	        nil
type LiteTopicPartitionConfigCapacityPtrInput interface {
	pulumi.Input

	ToLiteTopicPartitionConfigCapacityPtrOutput() LiteTopicPartitionConfigCapacityPtrOutput
	ToLiteTopicPartitionConfigCapacityPtrOutputWithContext(context.Context) LiteTopicPartitionConfigCapacityPtrOutput
}

type liteTopicPartitionConfigCapacityPtrType LiteTopicPartitionConfigCapacityArgs

func LiteTopicPartitionConfigCapacityPtr(v *LiteTopicPartitionConfigCapacityArgs) LiteTopicPartitionConfigCapacityPtrInput {
	return (*liteTopicPartitionConfigCapacityPtrType)(v)
}

func (*liteTopicPartitionConfigCapacityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiteTopicPartitionConfigCapacity)(nil)).Elem()
}

func (i *liteTopicPartitionConfigCapacityPtrType) ToLiteTopicPartitionConfigCapacityPtrOutput() LiteTopicPartitionConfigCapacityPtrOutput {
	return i.ToLiteTopicPartitionConfigCapacityPtrOutputWithContext(context.Background())
}

func (i *liteTopicPartitionConfigCapacityPtrType) ToLiteTopicPartitionConfigCapacityPtrOutputWithContext(ctx context.Context) LiteTopicPartitionConfigCapacityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteTopicPartitionConfigCapacityPtrOutput)
}

func (i *liteTopicPartitionConfigCapacityPtrType) ToOutput(ctx context.Context) pulumix.Output[*LiteTopicPartitionConfigCapacity] {
	return pulumix.Output[*LiteTopicPartitionConfigCapacity]{
		OutputState: i.ToLiteTopicPartitionConfigCapacityPtrOutputWithContext(ctx).OutputState,
	}
}

type LiteTopicPartitionConfigCapacityOutput struct{ *pulumi.OutputState }

func (LiteTopicPartitionConfigCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteTopicPartitionConfigCapacity)(nil)).Elem()
}

func (o LiteTopicPartitionConfigCapacityOutput) ToLiteTopicPartitionConfigCapacityOutput() LiteTopicPartitionConfigCapacityOutput {
	return o
}

func (o LiteTopicPartitionConfigCapacityOutput) ToLiteTopicPartitionConfigCapacityOutputWithContext(ctx context.Context) LiteTopicPartitionConfigCapacityOutput {
	return o
}

func (o LiteTopicPartitionConfigCapacityOutput) ToLiteTopicPartitionConfigCapacityPtrOutput() LiteTopicPartitionConfigCapacityPtrOutput {
	return o.ToLiteTopicPartitionConfigCapacityPtrOutputWithContext(context.Background())
}

func (o LiteTopicPartitionConfigCapacityOutput) ToLiteTopicPartitionConfigCapacityPtrOutputWithContext(ctx context.Context) LiteTopicPartitionConfigCapacityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiteTopicPartitionConfigCapacity) *LiteTopicPartitionConfigCapacity {
		return &v
	}).(LiteTopicPartitionConfigCapacityPtrOutput)
}

func (o LiteTopicPartitionConfigCapacityOutput) ToOutput(ctx context.Context) pulumix.Output[LiteTopicPartitionConfigCapacity] {
	return pulumix.Output[LiteTopicPartitionConfigCapacity]{
		OutputState: o.OutputState,
	}
}

// Subscribe throughput capacity per partition in MiB/s. Must be >= 4 and <= 16.
func (o LiteTopicPartitionConfigCapacityOutput) PublishMibPerSec() pulumi.IntOutput {
	return o.ApplyT(func(v LiteTopicPartitionConfigCapacity) int { return v.PublishMibPerSec }).(pulumi.IntOutput)
}

// Publish throughput capacity per partition in MiB/s. Must be >= 4 and <= 16.
func (o LiteTopicPartitionConfigCapacityOutput) SubscribeMibPerSec() pulumi.IntOutput {
	return o.ApplyT(func(v LiteTopicPartitionConfigCapacity) int { return v.SubscribeMibPerSec }).(pulumi.IntOutput)
}

type LiteTopicPartitionConfigCapacityPtrOutput struct{ *pulumi.OutputState }

func (LiteTopicPartitionConfigCapacityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiteTopicPartitionConfigCapacity)(nil)).Elem()
}

func (o LiteTopicPartitionConfigCapacityPtrOutput) ToLiteTopicPartitionConfigCapacityPtrOutput() LiteTopicPartitionConfigCapacityPtrOutput {
	return o
}

func (o LiteTopicPartitionConfigCapacityPtrOutput) ToLiteTopicPartitionConfigCapacityPtrOutputWithContext(ctx context.Context) LiteTopicPartitionConfigCapacityPtrOutput {
	return o
}

func (o LiteTopicPartitionConfigCapacityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiteTopicPartitionConfigCapacity] {
	return pulumix.Output[*LiteTopicPartitionConfigCapacity]{
		OutputState: o.OutputState,
	}
}

func (o LiteTopicPartitionConfigCapacityPtrOutput) Elem() LiteTopicPartitionConfigCapacityOutput {
	return o.ApplyT(func(v *LiteTopicPartitionConfigCapacity) LiteTopicPartitionConfigCapacity {
		if v != nil {
			return *v
		}
		var ret LiteTopicPartitionConfigCapacity
		return ret
	}).(LiteTopicPartitionConfigCapacityOutput)
}

// Subscribe throughput capacity per partition in MiB/s. Must be >= 4 and <= 16.
func (o LiteTopicPartitionConfigCapacityPtrOutput) PublishMibPerSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiteTopicPartitionConfigCapacity) *int {
		if v == nil {
			return nil
		}
		return &v.PublishMibPerSec
	}).(pulumi.IntPtrOutput)
}

// Publish throughput capacity per partition in MiB/s. Must be >= 4 and <= 16.
func (o LiteTopicPartitionConfigCapacityPtrOutput) SubscribeMibPerSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiteTopicPartitionConfigCapacity) *int {
		if v == nil {
			return nil
		}
		return &v.SubscribeMibPerSec
	}).(pulumi.IntPtrOutput)
}

type LiteTopicReservationConfig struct {
	// The Reservation to use for this topic's throughput capacity.
	ThroughputReservation *string `pulumi:"throughputReservation"`
}

// LiteTopicReservationConfigInput is an input type that accepts LiteTopicReservationConfigArgs and LiteTopicReservationConfigOutput values.
// You can construct a concrete instance of `LiteTopicReservationConfigInput` via:
//
//	LiteTopicReservationConfigArgs{...}
type LiteTopicReservationConfigInput interface {
	pulumi.Input

	ToLiteTopicReservationConfigOutput() LiteTopicReservationConfigOutput
	ToLiteTopicReservationConfigOutputWithContext(context.Context) LiteTopicReservationConfigOutput
}

type LiteTopicReservationConfigArgs struct {
	// The Reservation to use for this topic's throughput capacity.
	ThroughputReservation pulumi.StringPtrInput `pulumi:"throughputReservation"`
}

func (LiteTopicReservationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteTopicReservationConfig)(nil)).Elem()
}

func (i LiteTopicReservationConfigArgs) ToLiteTopicReservationConfigOutput() LiteTopicReservationConfigOutput {
	return i.ToLiteTopicReservationConfigOutputWithContext(context.Background())
}

func (i LiteTopicReservationConfigArgs) ToLiteTopicReservationConfigOutputWithContext(ctx context.Context) LiteTopicReservationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteTopicReservationConfigOutput)
}

func (i LiteTopicReservationConfigArgs) ToOutput(ctx context.Context) pulumix.Output[LiteTopicReservationConfig] {
	return pulumix.Output[LiteTopicReservationConfig]{
		OutputState: i.ToLiteTopicReservationConfigOutputWithContext(ctx).OutputState,
	}
}

func (i LiteTopicReservationConfigArgs) ToLiteTopicReservationConfigPtrOutput() LiteTopicReservationConfigPtrOutput {
	return i.ToLiteTopicReservationConfigPtrOutputWithContext(context.Background())
}

func (i LiteTopicReservationConfigArgs) ToLiteTopicReservationConfigPtrOutputWithContext(ctx context.Context) LiteTopicReservationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteTopicReservationConfigOutput).ToLiteTopicReservationConfigPtrOutputWithContext(ctx)
}

// LiteTopicReservationConfigPtrInput is an input type that accepts LiteTopicReservationConfigArgs, LiteTopicReservationConfigPtr and LiteTopicReservationConfigPtrOutput values.
// You can construct a concrete instance of `LiteTopicReservationConfigPtrInput` via:
//
//	        LiteTopicReservationConfigArgs{...}
//
//	or:
//
//	        nil
type LiteTopicReservationConfigPtrInput interface {
	pulumi.Input

	ToLiteTopicReservationConfigPtrOutput() LiteTopicReservationConfigPtrOutput
	ToLiteTopicReservationConfigPtrOutputWithContext(context.Context) LiteTopicReservationConfigPtrOutput
}

type liteTopicReservationConfigPtrType LiteTopicReservationConfigArgs

func LiteTopicReservationConfigPtr(v *LiteTopicReservationConfigArgs) LiteTopicReservationConfigPtrInput {
	return (*liteTopicReservationConfigPtrType)(v)
}

func (*liteTopicReservationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiteTopicReservationConfig)(nil)).Elem()
}

func (i *liteTopicReservationConfigPtrType) ToLiteTopicReservationConfigPtrOutput() LiteTopicReservationConfigPtrOutput {
	return i.ToLiteTopicReservationConfigPtrOutputWithContext(context.Background())
}

func (i *liteTopicReservationConfigPtrType) ToLiteTopicReservationConfigPtrOutputWithContext(ctx context.Context) LiteTopicReservationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteTopicReservationConfigPtrOutput)
}

func (i *liteTopicReservationConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*LiteTopicReservationConfig] {
	return pulumix.Output[*LiteTopicReservationConfig]{
		OutputState: i.ToLiteTopicReservationConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type LiteTopicReservationConfigOutput struct{ *pulumi.OutputState }

func (LiteTopicReservationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteTopicReservationConfig)(nil)).Elem()
}

func (o LiteTopicReservationConfigOutput) ToLiteTopicReservationConfigOutput() LiteTopicReservationConfigOutput {
	return o
}

func (o LiteTopicReservationConfigOutput) ToLiteTopicReservationConfigOutputWithContext(ctx context.Context) LiteTopicReservationConfigOutput {
	return o
}

func (o LiteTopicReservationConfigOutput) ToLiteTopicReservationConfigPtrOutput() LiteTopicReservationConfigPtrOutput {
	return o.ToLiteTopicReservationConfigPtrOutputWithContext(context.Background())
}

func (o LiteTopicReservationConfigOutput) ToLiteTopicReservationConfigPtrOutputWithContext(ctx context.Context) LiteTopicReservationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiteTopicReservationConfig) *LiteTopicReservationConfig {
		return &v
	}).(LiteTopicReservationConfigPtrOutput)
}

func (o LiteTopicReservationConfigOutput) ToOutput(ctx context.Context) pulumix.Output[LiteTopicReservationConfig] {
	return pulumix.Output[LiteTopicReservationConfig]{
		OutputState: o.OutputState,
	}
}

// The Reservation to use for this topic's throughput capacity.
func (o LiteTopicReservationConfigOutput) ThroughputReservation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiteTopicReservationConfig) *string { return v.ThroughputReservation }).(pulumi.StringPtrOutput)
}

type LiteTopicReservationConfigPtrOutput struct{ *pulumi.OutputState }

func (LiteTopicReservationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiteTopicReservationConfig)(nil)).Elem()
}

func (o LiteTopicReservationConfigPtrOutput) ToLiteTopicReservationConfigPtrOutput() LiteTopicReservationConfigPtrOutput {
	return o
}

func (o LiteTopicReservationConfigPtrOutput) ToLiteTopicReservationConfigPtrOutputWithContext(ctx context.Context) LiteTopicReservationConfigPtrOutput {
	return o
}

func (o LiteTopicReservationConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiteTopicReservationConfig] {
	return pulumix.Output[*LiteTopicReservationConfig]{
		OutputState: o.OutputState,
	}
}

func (o LiteTopicReservationConfigPtrOutput) Elem() LiteTopicReservationConfigOutput {
	return o.ApplyT(func(v *LiteTopicReservationConfig) LiteTopicReservationConfig {
		if v != nil {
			return *v
		}
		var ret LiteTopicReservationConfig
		return ret
	}).(LiteTopicReservationConfigOutput)
}

// The Reservation to use for this topic's throughput capacity.
func (o LiteTopicReservationConfigPtrOutput) ThroughputReservation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiteTopicReservationConfig) *string {
		if v == nil {
			return nil
		}
		return v.ThroughputReservation
	}).(pulumi.StringPtrOutput)
}

type LiteTopicRetentionConfig struct {
	// The provisioned storage, in bytes, per partition. If the number of bytes stored
	// in any of the topic's partitions grows beyond this value, older messages will be
	// dropped to make room for newer ones, regardless of the value of period.
	PerPartitionBytes string `pulumi:"perPartitionBytes"`
	// How long a published message is retained. If unset, messages will be retained as
	// long as the bytes retained for each partition is below perPartitionBytes. A
	// duration in seconds with up to nine fractional digits, terminated by 's'.
	// Example: "3.5s".
	Period *string `pulumi:"period"`
}

// LiteTopicRetentionConfigInput is an input type that accepts LiteTopicRetentionConfigArgs and LiteTopicRetentionConfigOutput values.
// You can construct a concrete instance of `LiteTopicRetentionConfigInput` via:
//
//	LiteTopicRetentionConfigArgs{...}
type LiteTopicRetentionConfigInput interface {
	pulumi.Input

	ToLiteTopicRetentionConfigOutput() LiteTopicRetentionConfigOutput
	ToLiteTopicRetentionConfigOutputWithContext(context.Context) LiteTopicRetentionConfigOutput
}

type LiteTopicRetentionConfigArgs struct {
	// The provisioned storage, in bytes, per partition. If the number of bytes stored
	// in any of the topic's partitions grows beyond this value, older messages will be
	// dropped to make room for newer ones, regardless of the value of period.
	PerPartitionBytes pulumi.StringInput `pulumi:"perPartitionBytes"`
	// How long a published message is retained. If unset, messages will be retained as
	// long as the bytes retained for each partition is below perPartitionBytes. A
	// duration in seconds with up to nine fractional digits, terminated by 's'.
	// Example: "3.5s".
	Period pulumi.StringPtrInput `pulumi:"period"`
}

func (LiteTopicRetentionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteTopicRetentionConfig)(nil)).Elem()
}

func (i LiteTopicRetentionConfigArgs) ToLiteTopicRetentionConfigOutput() LiteTopicRetentionConfigOutput {
	return i.ToLiteTopicRetentionConfigOutputWithContext(context.Background())
}

func (i LiteTopicRetentionConfigArgs) ToLiteTopicRetentionConfigOutputWithContext(ctx context.Context) LiteTopicRetentionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteTopicRetentionConfigOutput)
}

func (i LiteTopicRetentionConfigArgs) ToOutput(ctx context.Context) pulumix.Output[LiteTopicRetentionConfig] {
	return pulumix.Output[LiteTopicRetentionConfig]{
		OutputState: i.ToLiteTopicRetentionConfigOutputWithContext(ctx).OutputState,
	}
}

func (i LiteTopicRetentionConfigArgs) ToLiteTopicRetentionConfigPtrOutput() LiteTopicRetentionConfigPtrOutput {
	return i.ToLiteTopicRetentionConfigPtrOutputWithContext(context.Background())
}

func (i LiteTopicRetentionConfigArgs) ToLiteTopicRetentionConfigPtrOutputWithContext(ctx context.Context) LiteTopicRetentionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteTopicRetentionConfigOutput).ToLiteTopicRetentionConfigPtrOutputWithContext(ctx)
}

// LiteTopicRetentionConfigPtrInput is an input type that accepts LiteTopicRetentionConfigArgs, LiteTopicRetentionConfigPtr and LiteTopicRetentionConfigPtrOutput values.
// You can construct a concrete instance of `LiteTopicRetentionConfigPtrInput` via:
//
//	        LiteTopicRetentionConfigArgs{...}
//
//	or:
//
//	        nil
type LiteTopicRetentionConfigPtrInput interface {
	pulumi.Input

	ToLiteTopicRetentionConfigPtrOutput() LiteTopicRetentionConfigPtrOutput
	ToLiteTopicRetentionConfigPtrOutputWithContext(context.Context) LiteTopicRetentionConfigPtrOutput
}

type liteTopicRetentionConfigPtrType LiteTopicRetentionConfigArgs

func LiteTopicRetentionConfigPtr(v *LiteTopicRetentionConfigArgs) LiteTopicRetentionConfigPtrInput {
	return (*liteTopicRetentionConfigPtrType)(v)
}

func (*liteTopicRetentionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiteTopicRetentionConfig)(nil)).Elem()
}

func (i *liteTopicRetentionConfigPtrType) ToLiteTopicRetentionConfigPtrOutput() LiteTopicRetentionConfigPtrOutput {
	return i.ToLiteTopicRetentionConfigPtrOutputWithContext(context.Background())
}

func (i *liteTopicRetentionConfigPtrType) ToLiteTopicRetentionConfigPtrOutputWithContext(ctx context.Context) LiteTopicRetentionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteTopicRetentionConfigPtrOutput)
}

func (i *liteTopicRetentionConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*LiteTopicRetentionConfig] {
	return pulumix.Output[*LiteTopicRetentionConfig]{
		OutputState: i.ToLiteTopicRetentionConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type LiteTopicRetentionConfigOutput struct{ *pulumi.OutputState }

func (LiteTopicRetentionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteTopicRetentionConfig)(nil)).Elem()
}

func (o LiteTopicRetentionConfigOutput) ToLiteTopicRetentionConfigOutput() LiteTopicRetentionConfigOutput {
	return o
}

func (o LiteTopicRetentionConfigOutput) ToLiteTopicRetentionConfigOutputWithContext(ctx context.Context) LiteTopicRetentionConfigOutput {
	return o
}

func (o LiteTopicRetentionConfigOutput) ToLiteTopicRetentionConfigPtrOutput() LiteTopicRetentionConfigPtrOutput {
	return o.ToLiteTopicRetentionConfigPtrOutputWithContext(context.Background())
}

func (o LiteTopicRetentionConfigOutput) ToLiteTopicRetentionConfigPtrOutputWithContext(ctx context.Context) LiteTopicRetentionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiteTopicRetentionConfig) *LiteTopicRetentionConfig {
		return &v
	}).(LiteTopicRetentionConfigPtrOutput)
}

func (o LiteTopicRetentionConfigOutput) ToOutput(ctx context.Context) pulumix.Output[LiteTopicRetentionConfig] {
	return pulumix.Output[LiteTopicRetentionConfig]{
		OutputState: o.OutputState,
	}
}

// The provisioned storage, in bytes, per partition. If the number of bytes stored
// in any of the topic's partitions grows beyond this value, older messages will be
// dropped to make room for newer ones, regardless of the value of period.
func (o LiteTopicRetentionConfigOutput) PerPartitionBytes() pulumi.StringOutput {
	return o.ApplyT(func(v LiteTopicRetentionConfig) string { return v.PerPartitionBytes }).(pulumi.StringOutput)
}

// How long a published message is retained. If unset, messages will be retained as
// long as the bytes retained for each partition is below perPartitionBytes. A
// duration in seconds with up to nine fractional digits, terminated by 's'.
// Example: "3.5s".
func (o LiteTopicRetentionConfigOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiteTopicRetentionConfig) *string { return v.Period }).(pulumi.StringPtrOutput)
}

type LiteTopicRetentionConfigPtrOutput struct{ *pulumi.OutputState }

func (LiteTopicRetentionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiteTopicRetentionConfig)(nil)).Elem()
}

func (o LiteTopicRetentionConfigPtrOutput) ToLiteTopicRetentionConfigPtrOutput() LiteTopicRetentionConfigPtrOutput {
	return o
}

func (o LiteTopicRetentionConfigPtrOutput) ToLiteTopicRetentionConfigPtrOutputWithContext(ctx context.Context) LiteTopicRetentionConfigPtrOutput {
	return o
}

func (o LiteTopicRetentionConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiteTopicRetentionConfig] {
	return pulumix.Output[*LiteTopicRetentionConfig]{
		OutputState: o.OutputState,
	}
}

func (o LiteTopicRetentionConfigPtrOutput) Elem() LiteTopicRetentionConfigOutput {
	return o.ApplyT(func(v *LiteTopicRetentionConfig) LiteTopicRetentionConfig {
		if v != nil {
			return *v
		}
		var ret LiteTopicRetentionConfig
		return ret
	}).(LiteTopicRetentionConfigOutput)
}

// The provisioned storage, in bytes, per partition. If the number of bytes stored
// in any of the topic's partitions grows beyond this value, older messages will be
// dropped to make room for newer ones, regardless of the value of period.
func (o LiteTopicRetentionConfigPtrOutput) PerPartitionBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiteTopicRetentionConfig) *string {
		if v == nil {
			return nil
		}
		return &v.PerPartitionBytes
	}).(pulumi.StringPtrOutput)
}

// How long a published message is retained. If unset, messages will be retained as
// long as the bytes retained for each partition is below perPartitionBytes. A
// duration in seconds with up to nine fractional digits, terminated by 's'.
// Example: "3.5s".
func (o LiteTopicRetentionConfigPtrOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiteTopicRetentionConfig) *string {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.StringPtrOutput)
}

type SubscriptionBigqueryConfig struct {
	// When true and useTopicSchema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery.
	// Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
	DropUnknownFields *bool `pulumi:"dropUnknownFields"`
	// The name of the table to which to write data, of the form {projectId}:{datasetId}.{tableId}
	Table string `pulumi:"table"`
	// When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
	UseTopicSchema *bool `pulumi:"useTopicSchema"`
	// When true, write the subscription name, messageId, publishTime, attributes, and orderingKey to additional columns in the table.
	// The subscription name, messageId, and publishTime fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
	WriteMetadata *bool `pulumi:"writeMetadata"`
}

// SubscriptionBigqueryConfigInput is an input type that accepts SubscriptionBigqueryConfigArgs and SubscriptionBigqueryConfigOutput values.
// You can construct a concrete instance of `SubscriptionBigqueryConfigInput` via:
//
//	SubscriptionBigqueryConfigArgs{...}
type SubscriptionBigqueryConfigInput interface {
	pulumi.Input

	ToSubscriptionBigqueryConfigOutput() SubscriptionBigqueryConfigOutput
	ToSubscriptionBigqueryConfigOutputWithContext(context.Context) SubscriptionBigqueryConfigOutput
}

type SubscriptionBigqueryConfigArgs struct {
	// When true and useTopicSchema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery.
	// Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
	DropUnknownFields pulumi.BoolPtrInput `pulumi:"dropUnknownFields"`
	// The name of the table to which to write data, of the form {projectId}:{datasetId}.{tableId}
	Table pulumi.StringInput `pulumi:"table"`
	// When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
	UseTopicSchema pulumi.BoolPtrInput `pulumi:"useTopicSchema"`
	// When true, write the subscription name, messageId, publishTime, attributes, and orderingKey to additional columns in the table.
	// The subscription name, messageId, and publishTime fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
	WriteMetadata pulumi.BoolPtrInput `pulumi:"writeMetadata"`
}

func (SubscriptionBigqueryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionBigqueryConfig)(nil)).Elem()
}

func (i SubscriptionBigqueryConfigArgs) ToSubscriptionBigqueryConfigOutput() SubscriptionBigqueryConfigOutput {
	return i.ToSubscriptionBigqueryConfigOutputWithContext(context.Background())
}

func (i SubscriptionBigqueryConfigArgs) ToSubscriptionBigqueryConfigOutputWithContext(ctx context.Context) SubscriptionBigqueryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionBigqueryConfigOutput)
}

func (i SubscriptionBigqueryConfigArgs) ToOutput(ctx context.Context) pulumix.Output[SubscriptionBigqueryConfig] {
	return pulumix.Output[SubscriptionBigqueryConfig]{
		OutputState: i.ToSubscriptionBigqueryConfigOutputWithContext(ctx).OutputState,
	}
}

func (i SubscriptionBigqueryConfigArgs) ToSubscriptionBigqueryConfigPtrOutput() SubscriptionBigqueryConfigPtrOutput {
	return i.ToSubscriptionBigqueryConfigPtrOutputWithContext(context.Background())
}

func (i SubscriptionBigqueryConfigArgs) ToSubscriptionBigqueryConfigPtrOutputWithContext(ctx context.Context) SubscriptionBigqueryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionBigqueryConfigOutput).ToSubscriptionBigqueryConfigPtrOutputWithContext(ctx)
}

// SubscriptionBigqueryConfigPtrInput is an input type that accepts SubscriptionBigqueryConfigArgs, SubscriptionBigqueryConfigPtr and SubscriptionBigqueryConfigPtrOutput values.
// You can construct a concrete instance of `SubscriptionBigqueryConfigPtrInput` via:
//
//	        SubscriptionBigqueryConfigArgs{...}
//
//	or:
//
//	        nil
type SubscriptionBigqueryConfigPtrInput interface {
	pulumi.Input

	ToSubscriptionBigqueryConfigPtrOutput() SubscriptionBigqueryConfigPtrOutput
	ToSubscriptionBigqueryConfigPtrOutputWithContext(context.Context) SubscriptionBigqueryConfigPtrOutput
}

type subscriptionBigqueryConfigPtrType SubscriptionBigqueryConfigArgs

func SubscriptionBigqueryConfigPtr(v *SubscriptionBigqueryConfigArgs) SubscriptionBigqueryConfigPtrInput {
	return (*subscriptionBigqueryConfigPtrType)(v)
}

func (*subscriptionBigqueryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionBigqueryConfig)(nil)).Elem()
}

func (i *subscriptionBigqueryConfigPtrType) ToSubscriptionBigqueryConfigPtrOutput() SubscriptionBigqueryConfigPtrOutput {
	return i.ToSubscriptionBigqueryConfigPtrOutputWithContext(context.Background())
}

func (i *subscriptionBigqueryConfigPtrType) ToSubscriptionBigqueryConfigPtrOutputWithContext(ctx context.Context) SubscriptionBigqueryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionBigqueryConfigPtrOutput)
}

func (i *subscriptionBigqueryConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionBigqueryConfig] {
	return pulumix.Output[*SubscriptionBigqueryConfig]{
		OutputState: i.ToSubscriptionBigqueryConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type SubscriptionBigqueryConfigOutput struct{ *pulumi.OutputState }

func (SubscriptionBigqueryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionBigqueryConfig)(nil)).Elem()
}

func (o SubscriptionBigqueryConfigOutput) ToSubscriptionBigqueryConfigOutput() SubscriptionBigqueryConfigOutput {
	return o
}

func (o SubscriptionBigqueryConfigOutput) ToSubscriptionBigqueryConfigOutputWithContext(ctx context.Context) SubscriptionBigqueryConfigOutput {
	return o
}

func (o SubscriptionBigqueryConfigOutput) ToSubscriptionBigqueryConfigPtrOutput() SubscriptionBigqueryConfigPtrOutput {
	return o.ToSubscriptionBigqueryConfigPtrOutputWithContext(context.Background())
}

func (o SubscriptionBigqueryConfigOutput) ToSubscriptionBigqueryConfigPtrOutputWithContext(ctx context.Context) SubscriptionBigqueryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionBigqueryConfig) *SubscriptionBigqueryConfig {
		return &v
	}).(SubscriptionBigqueryConfigPtrOutput)
}

func (o SubscriptionBigqueryConfigOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionBigqueryConfig] {
	return pulumix.Output[SubscriptionBigqueryConfig]{
		OutputState: o.OutputState,
	}
}

// When true and useTopicSchema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery.
// Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
func (o SubscriptionBigqueryConfigOutput) DropUnknownFields() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionBigqueryConfig) *bool { return v.DropUnknownFields }).(pulumi.BoolPtrOutput)
}

// The name of the table to which to write data, of the form {projectId}:{datasetId}.{tableId}
func (o SubscriptionBigqueryConfigOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionBigqueryConfig) string { return v.Table }).(pulumi.StringOutput)
}

// When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
func (o SubscriptionBigqueryConfigOutput) UseTopicSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionBigqueryConfig) *bool { return v.UseTopicSchema }).(pulumi.BoolPtrOutput)
}

// When true, write the subscription name, messageId, publishTime, attributes, and orderingKey to additional columns in the table.
// The subscription name, messageId, and publishTime fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
func (o SubscriptionBigqueryConfigOutput) WriteMetadata() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionBigqueryConfig) *bool { return v.WriteMetadata }).(pulumi.BoolPtrOutput)
}

type SubscriptionBigqueryConfigPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionBigqueryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionBigqueryConfig)(nil)).Elem()
}

func (o SubscriptionBigqueryConfigPtrOutput) ToSubscriptionBigqueryConfigPtrOutput() SubscriptionBigqueryConfigPtrOutput {
	return o
}

func (o SubscriptionBigqueryConfigPtrOutput) ToSubscriptionBigqueryConfigPtrOutputWithContext(ctx context.Context) SubscriptionBigqueryConfigPtrOutput {
	return o
}

func (o SubscriptionBigqueryConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionBigqueryConfig] {
	return pulumix.Output[*SubscriptionBigqueryConfig]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionBigqueryConfigPtrOutput) Elem() SubscriptionBigqueryConfigOutput {
	return o.ApplyT(func(v *SubscriptionBigqueryConfig) SubscriptionBigqueryConfig {
		if v != nil {
			return *v
		}
		var ret SubscriptionBigqueryConfig
		return ret
	}).(SubscriptionBigqueryConfigOutput)
}

// When true and useTopicSchema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery.
// Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
func (o SubscriptionBigqueryConfigPtrOutput) DropUnknownFields() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionBigqueryConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DropUnknownFields
	}).(pulumi.BoolPtrOutput)
}

// The name of the table to which to write data, of the form {projectId}:{datasetId}.{tableId}
func (o SubscriptionBigqueryConfigPtrOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionBigqueryConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Table
	}).(pulumi.StringPtrOutput)
}

// When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
func (o SubscriptionBigqueryConfigPtrOutput) UseTopicSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionBigqueryConfig) *bool {
		if v == nil {
			return nil
		}
		return v.UseTopicSchema
	}).(pulumi.BoolPtrOutput)
}

// When true, write the subscription name, messageId, publishTime, attributes, and orderingKey to additional columns in the table.
// The subscription name, messageId, and publishTime fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
func (o SubscriptionBigqueryConfigPtrOutput) WriteMetadata() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionBigqueryConfig) *bool {
		if v == nil {
			return nil
		}
		return v.WriteMetadata
	}).(pulumi.BoolPtrOutput)
}

type SubscriptionCloudStorageConfig struct {
	// If set, message data will be written to Cloud Storage in Avro format.
	// Structure is documented below.
	AvroConfig *SubscriptionCloudStorageConfigAvroConfig `pulumi:"avroConfig"`
	// User-provided name for the Cloud Storage bucket. The bucket must be created by the user. The bucket name must be without any prefix like "gs://".
	Bucket string `pulumi:"bucket"`
	// User-provided prefix for Cloud Storage filename.
	FilenamePrefix *string `pulumi:"filenamePrefix"`
	// User-provided suffix for Cloud Storage filename. Must not end in "/".
	FilenameSuffix *string `pulumi:"filenameSuffix"`
	// The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB.
	// The maxBytes limit may be exceeded in cases where messages are larger than the limit.
	MaxBytes *int `pulumi:"maxBytes"`
	// The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes.
	// May not exceed the subscription's acknowledgement deadline.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	MaxDuration *string `pulumi:"maxDuration"`
	// (Output)
	// An output-only field that indicates whether or not the subscription can receive messages.
	State *string `pulumi:"state"`
}

// SubscriptionCloudStorageConfigInput is an input type that accepts SubscriptionCloudStorageConfigArgs and SubscriptionCloudStorageConfigOutput values.
// You can construct a concrete instance of `SubscriptionCloudStorageConfigInput` via:
//
//	SubscriptionCloudStorageConfigArgs{...}
type SubscriptionCloudStorageConfigInput interface {
	pulumi.Input

	ToSubscriptionCloudStorageConfigOutput() SubscriptionCloudStorageConfigOutput
	ToSubscriptionCloudStorageConfigOutputWithContext(context.Context) SubscriptionCloudStorageConfigOutput
}

type SubscriptionCloudStorageConfigArgs struct {
	// If set, message data will be written to Cloud Storage in Avro format.
	// Structure is documented below.
	AvroConfig SubscriptionCloudStorageConfigAvroConfigPtrInput `pulumi:"avroConfig"`
	// User-provided name for the Cloud Storage bucket. The bucket must be created by the user. The bucket name must be without any prefix like "gs://".
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// User-provided prefix for Cloud Storage filename.
	FilenamePrefix pulumi.StringPtrInput `pulumi:"filenamePrefix"`
	// User-provided suffix for Cloud Storage filename. Must not end in "/".
	FilenameSuffix pulumi.StringPtrInput `pulumi:"filenameSuffix"`
	// The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB.
	// The maxBytes limit may be exceeded in cases where messages are larger than the limit.
	MaxBytes pulumi.IntPtrInput `pulumi:"maxBytes"`
	// The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes.
	// May not exceed the subscription's acknowledgement deadline.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	MaxDuration pulumi.StringPtrInput `pulumi:"maxDuration"`
	// (Output)
	// An output-only field that indicates whether or not the subscription can receive messages.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (SubscriptionCloudStorageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionCloudStorageConfig)(nil)).Elem()
}

func (i SubscriptionCloudStorageConfigArgs) ToSubscriptionCloudStorageConfigOutput() SubscriptionCloudStorageConfigOutput {
	return i.ToSubscriptionCloudStorageConfigOutputWithContext(context.Background())
}

func (i SubscriptionCloudStorageConfigArgs) ToSubscriptionCloudStorageConfigOutputWithContext(ctx context.Context) SubscriptionCloudStorageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCloudStorageConfigOutput)
}

func (i SubscriptionCloudStorageConfigArgs) ToOutput(ctx context.Context) pulumix.Output[SubscriptionCloudStorageConfig] {
	return pulumix.Output[SubscriptionCloudStorageConfig]{
		OutputState: i.ToSubscriptionCloudStorageConfigOutputWithContext(ctx).OutputState,
	}
}

func (i SubscriptionCloudStorageConfigArgs) ToSubscriptionCloudStorageConfigPtrOutput() SubscriptionCloudStorageConfigPtrOutput {
	return i.ToSubscriptionCloudStorageConfigPtrOutputWithContext(context.Background())
}

func (i SubscriptionCloudStorageConfigArgs) ToSubscriptionCloudStorageConfigPtrOutputWithContext(ctx context.Context) SubscriptionCloudStorageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCloudStorageConfigOutput).ToSubscriptionCloudStorageConfigPtrOutputWithContext(ctx)
}

// SubscriptionCloudStorageConfigPtrInput is an input type that accepts SubscriptionCloudStorageConfigArgs, SubscriptionCloudStorageConfigPtr and SubscriptionCloudStorageConfigPtrOutput values.
// You can construct a concrete instance of `SubscriptionCloudStorageConfigPtrInput` via:
//
//	        SubscriptionCloudStorageConfigArgs{...}
//
//	or:
//
//	        nil
type SubscriptionCloudStorageConfigPtrInput interface {
	pulumi.Input

	ToSubscriptionCloudStorageConfigPtrOutput() SubscriptionCloudStorageConfigPtrOutput
	ToSubscriptionCloudStorageConfigPtrOutputWithContext(context.Context) SubscriptionCloudStorageConfigPtrOutput
}

type subscriptionCloudStorageConfigPtrType SubscriptionCloudStorageConfigArgs

func SubscriptionCloudStorageConfigPtr(v *SubscriptionCloudStorageConfigArgs) SubscriptionCloudStorageConfigPtrInput {
	return (*subscriptionCloudStorageConfigPtrType)(v)
}

func (*subscriptionCloudStorageConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionCloudStorageConfig)(nil)).Elem()
}

func (i *subscriptionCloudStorageConfigPtrType) ToSubscriptionCloudStorageConfigPtrOutput() SubscriptionCloudStorageConfigPtrOutput {
	return i.ToSubscriptionCloudStorageConfigPtrOutputWithContext(context.Background())
}

func (i *subscriptionCloudStorageConfigPtrType) ToSubscriptionCloudStorageConfigPtrOutputWithContext(ctx context.Context) SubscriptionCloudStorageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCloudStorageConfigPtrOutput)
}

func (i *subscriptionCloudStorageConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionCloudStorageConfig] {
	return pulumix.Output[*SubscriptionCloudStorageConfig]{
		OutputState: i.ToSubscriptionCloudStorageConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type SubscriptionCloudStorageConfigOutput struct{ *pulumi.OutputState }

func (SubscriptionCloudStorageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionCloudStorageConfig)(nil)).Elem()
}

func (o SubscriptionCloudStorageConfigOutput) ToSubscriptionCloudStorageConfigOutput() SubscriptionCloudStorageConfigOutput {
	return o
}

func (o SubscriptionCloudStorageConfigOutput) ToSubscriptionCloudStorageConfigOutputWithContext(ctx context.Context) SubscriptionCloudStorageConfigOutput {
	return o
}

func (o SubscriptionCloudStorageConfigOutput) ToSubscriptionCloudStorageConfigPtrOutput() SubscriptionCloudStorageConfigPtrOutput {
	return o.ToSubscriptionCloudStorageConfigPtrOutputWithContext(context.Background())
}

func (o SubscriptionCloudStorageConfigOutput) ToSubscriptionCloudStorageConfigPtrOutputWithContext(ctx context.Context) SubscriptionCloudStorageConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionCloudStorageConfig) *SubscriptionCloudStorageConfig {
		return &v
	}).(SubscriptionCloudStorageConfigPtrOutput)
}

func (o SubscriptionCloudStorageConfigOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionCloudStorageConfig] {
	return pulumix.Output[SubscriptionCloudStorageConfig]{
		OutputState: o.OutputState,
	}
}

// If set, message data will be written to Cloud Storage in Avro format.
// Structure is documented below.
func (o SubscriptionCloudStorageConfigOutput) AvroConfig() SubscriptionCloudStorageConfigAvroConfigPtrOutput {
	return o.ApplyT(func(v SubscriptionCloudStorageConfig) *SubscriptionCloudStorageConfigAvroConfig { return v.AvroConfig }).(SubscriptionCloudStorageConfigAvroConfigPtrOutput)
}

// User-provided name for the Cloud Storage bucket. The bucket must be created by the user. The bucket name must be without any prefix like "gs://".
func (o SubscriptionCloudStorageConfigOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionCloudStorageConfig) string { return v.Bucket }).(pulumi.StringOutput)
}

// User-provided prefix for Cloud Storage filename.
func (o SubscriptionCloudStorageConfigOutput) FilenamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionCloudStorageConfig) *string { return v.FilenamePrefix }).(pulumi.StringPtrOutput)
}

// User-provided suffix for Cloud Storage filename. Must not end in "/".
func (o SubscriptionCloudStorageConfigOutput) FilenameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionCloudStorageConfig) *string { return v.FilenameSuffix }).(pulumi.StringPtrOutput)
}

// The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB.
// The maxBytes limit may be exceeded in cases where messages are larger than the limit.
func (o SubscriptionCloudStorageConfigOutput) MaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SubscriptionCloudStorageConfig) *int { return v.MaxBytes }).(pulumi.IntPtrOutput)
}

// The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes.
// May not exceed the subscription's acknowledgement deadline.
// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
func (o SubscriptionCloudStorageConfigOutput) MaxDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionCloudStorageConfig) *string { return v.MaxDuration }).(pulumi.StringPtrOutput)
}

// (Output)
// An output-only field that indicates whether or not the subscription can receive messages.
func (o SubscriptionCloudStorageConfigOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionCloudStorageConfig) *string { return v.State }).(pulumi.StringPtrOutput)
}

type SubscriptionCloudStorageConfigPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionCloudStorageConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionCloudStorageConfig)(nil)).Elem()
}

func (o SubscriptionCloudStorageConfigPtrOutput) ToSubscriptionCloudStorageConfigPtrOutput() SubscriptionCloudStorageConfigPtrOutput {
	return o
}

func (o SubscriptionCloudStorageConfigPtrOutput) ToSubscriptionCloudStorageConfigPtrOutputWithContext(ctx context.Context) SubscriptionCloudStorageConfigPtrOutput {
	return o
}

func (o SubscriptionCloudStorageConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionCloudStorageConfig] {
	return pulumix.Output[*SubscriptionCloudStorageConfig]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionCloudStorageConfigPtrOutput) Elem() SubscriptionCloudStorageConfigOutput {
	return o.ApplyT(func(v *SubscriptionCloudStorageConfig) SubscriptionCloudStorageConfig {
		if v != nil {
			return *v
		}
		var ret SubscriptionCloudStorageConfig
		return ret
	}).(SubscriptionCloudStorageConfigOutput)
}

// If set, message data will be written to Cloud Storage in Avro format.
// Structure is documented below.
func (o SubscriptionCloudStorageConfigPtrOutput) AvroConfig() SubscriptionCloudStorageConfigAvroConfigPtrOutput {
	return o.ApplyT(func(v *SubscriptionCloudStorageConfig) *SubscriptionCloudStorageConfigAvroConfig {
		if v == nil {
			return nil
		}
		return v.AvroConfig
	}).(SubscriptionCloudStorageConfigAvroConfigPtrOutput)
}

// User-provided name for the Cloud Storage bucket. The bucket must be created by the user. The bucket name must be without any prefix like "gs://".
func (o SubscriptionCloudStorageConfigPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionCloudStorageConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// User-provided prefix for Cloud Storage filename.
func (o SubscriptionCloudStorageConfigPtrOutput) FilenamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionCloudStorageConfig) *string {
		if v == nil {
			return nil
		}
		return v.FilenamePrefix
	}).(pulumi.StringPtrOutput)
}

// User-provided suffix for Cloud Storage filename. Must not end in "/".
func (o SubscriptionCloudStorageConfigPtrOutput) FilenameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionCloudStorageConfig) *string {
		if v == nil {
			return nil
		}
		return v.FilenameSuffix
	}).(pulumi.StringPtrOutput)
}

// The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB.
// The maxBytes limit may be exceeded in cases where messages are larger than the limit.
func (o SubscriptionCloudStorageConfigPtrOutput) MaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SubscriptionCloudStorageConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxBytes
	}).(pulumi.IntPtrOutput)
}

// The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes.
// May not exceed the subscription's acknowledgement deadline.
// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
func (o SubscriptionCloudStorageConfigPtrOutput) MaxDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionCloudStorageConfig) *string {
		if v == nil {
			return nil
		}
		return v.MaxDuration
	}).(pulumi.StringPtrOutput)
}

// (Output)
// An output-only field that indicates whether or not the subscription can receive messages.
func (o SubscriptionCloudStorageConfigPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionCloudStorageConfig) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

type SubscriptionCloudStorageConfigAvroConfig struct {
	// When true, write the subscription name, messageId, publishTime, attributes, and orderingKey as additional fields in the output.
	WriteMetadata *bool `pulumi:"writeMetadata"`
}

// SubscriptionCloudStorageConfigAvroConfigInput is an input type that accepts SubscriptionCloudStorageConfigAvroConfigArgs and SubscriptionCloudStorageConfigAvroConfigOutput values.
// You can construct a concrete instance of `SubscriptionCloudStorageConfigAvroConfigInput` via:
//
//	SubscriptionCloudStorageConfigAvroConfigArgs{...}
type SubscriptionCloudStorageConfigAvroConfigInput interface {
	pulumi.Input

	ToSubscriptionCloudStorageConfigAvroConfigOutput() SubscriptionCloudStorageConfigAvroConfigOutput
	ToSubscriptionCloudStorageConfigAvroConfigOutputWithContext(context.Context) SubscriptionCloudStorageConfigAvroConfigOutput
}

type SubscriptionCloudStorageConfigAvroConfigArgs struct {
	// When true, write the subscription name, messageId, publishTime, attributes, and orderingKey as additional fields in the output.
	WriteMetadata pulumi.BoolPtrInput `pulumi:"writeMetadata"`
}

func (SubscriptionCloudStorageConfigAvroConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionCloudStorageConfigAvroConfig)(nil)).Elem()
}

func (i SubscriptionCloudStorageConfigAvroConfigArgs) ToSubscriptionCloudStorageConfigAvroConfigOutput() SubscriptionCloudStorageConfigAvroConfigOutput {
	return i.ToSubscriptionCloudStorageConfigAvroConfigOutputWithContext(context.Background())
}

func (i SubscriptionCloudStorageConfigAvroConfigArgs) ToSubscriptionCloudStorageConfigAvroConfigOutputWithContext(ctx context.Context) SubscriptionCloudStorageConfigAvroConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCloudStorageConfigAvroConfigOutput)
}

func (i SubscriptionCloudStorageConfigAvroConfigArgs) ToOutput(ctx context.Context) pulumix.Output[SubscriptionCloudStorageConfigAvroConfig] {
	return pulumix.Output[SubscriptionCloudStorageConfigAvroConfig]{
		OutputState: i.ToSubscriptionCloudStorageConfigAvroConfigOutputWithContext(ctx).OutputState,
	}
}

func (i SubscriptionCloudStorageConfigAvroConfigArgs) ToSubscriptionCloudStorageConfigAvroConfigPtrOutput() SubscriptionCloudStorageConfigAvroConfigPtrOutput {
	return i.ToSubscriptionCloudStorageConfigAvroConfigPtrOutputWithContext(context.Background())
}

func (i SubscriptionCloudStorageConfigAvroConfigArgs) ToSubscriptionCloudStorageConfigAvroConfigPtrOutputWithContext(ctx context.Context) SubscriptionCloudStorageConfigAvroConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCloudStorageConfigAvroConfigOutput).ToSubscriptionCloudStorageConfigAvroConfigPtrOutputWithContext(ctx)
}

// SubscriptionCloudStorageConfigAvroConfigPtrInput is an input type that accepts SubscriptionCloudStorageConfigAvroConfigArgs, SubscriptionCloudStorageConfigAvroConfigPtr and SubscriptionCloudStorageConfigAvroConfigPtrOutput values.
// You can construct a concrete instance of `SubscriptionCloudStorageConfigAvroConfigPtrInput` via:
//
//	        SubscriptionCloudStorageConfigAvroConfigArgs{...}
//
//	or:
//
//	        nil
type SubscriptionCloudStorageConfigAvroConfigPtrInput interface {
	pulumi.Input

	ToSubscriptionCloudStorageConfigAvroConfigPtrOutput() SubscriptionCloudStorageConfigAvroConfigPtrOutput
	ToSubscriptionCloudStorageConfigAvroConfigPtrOutputWithContext(context.Context) SubscriptionCloudStorageConfigAvroConfigPtrOutput
}

type subscriptionCloudStorageConfigAvroConfigPtrType SubscriptionCloudStorageConfigAvroConfigArgs

func SubscriptionCloudStorageConfigAvroConfigPtr(v *SubscriptionCloudStorageConfigAvroConfigArgs) SubscriptionCloudStorageConfigAvroConfigPtrInput {
	return (*subscriptionCloudStorageConfigAvroConfigPtrType)(v)
}

func (*subscriptionCloudStorageConfigAvroConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionCloudStorageConfigAvroConfig)(nil)).Elem()
}

func (i *subscriptionCloudStorageConfigAvroConfigPtrType) ToSubscriptionCloudStorageConfigAvroConfigPtrOutput() SubscriptionCloudStorageConfigAvroConfigPtrOutput {
	return i.ToSubscriptionCloudStorageConfigAvroConfigPtrOutputWithContext(context.Background())
}

func (i *subscriptionCloudStorageConfigAvroConfigPtrType) ToSubscriptionCloudStorageConfigAvroConfigPtrOutputWithContext(ctx context.Context) SubscriptionCloudStorageConfigAvroConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCloudStorageConfigAvroConfigPtrOutput)
}

func (i *subscriptionCloudStorageConfigAvroConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionCloudStorageConfigAvroConfig] {
	return pulumix.Output[*SubscriptionCloudStorageConfigAvroConfig]{
		OutputState: i.ToSubscriptionCloudStorageConfigAvroConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type SubscriptionCloudStorageConfigAvroConfigOutput struct{ *pulumi.OutputState }

func (SubscriptionCloudStorageConfigAvroConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionCloudStorageConfigAvroConfig)(nil)).Elem()
}

func (o SubscriptionCloudStorageConfigAvroConfigOutput) ToSubscriptionCloudStorageConfigAvroConfigOutput() SubscriptionCloudStorageConfigAvroConfigOutput {
	return o
}

func (o SubscriptionCloudStorageConfigAvroConfigOutput) ToSubscriptionCloudStorageConfigAvroConfigOutputWithContext(ctx context.Context) SubscriptionCloudStorageConfigAvroConfigOutput {
	return o
}

func (o SubscriptionCloudStorageConfigAvroConfigOutput) ToSubscriptionCloudStorageConfigAvroConfigPtrOutput() SubscriptionCloudStorageConfigAvroConfigPtrOutput {
	return o.ToSubscriptionCloudStorageConfigAvroConfigPtrOutputWithContext(context.Background())
}

func (o SubscriptionCloudStorageConfigAvroConfigOutput) ToSubscriptionCloudStorageConfigAvroConfigPtrOutputWithContext(ctx context.Context) SubscriptionCloudStorageConfigAvroConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionCloudStorageConfigAvroConfig) *SubscriptionCloudStorageConfigAvroConfig {
		return &v
	}).(SubscriptionCloudStorageConfigAvroConfigPtrOutput)
}

func (o SubscriptionCloudStorageConfigAvroConfigOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionCloudStorageConfigAvroConfig] {
	return pulumix.Output[SubscriptionCloudStorageConfigAvroConfig]{
		OutputState: o.OutputState,
	}
}

// When true, write the subscription name, messageId, publishTime, attributes, and orderingKey as additional fields in the output.
func (o SubscriptionCloudStorageConfigAvroConfigOutput) WriteMetadata() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionCloudStorageConfigAvroConfig) *bool { return v.WriteMetadata }).(pulumi.BoolPtrOutput)
}

type SubscriptionCloudStorageConfigAvroConfigPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionCloudStorageConfigAvroConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionCloudStorageConfigAvroConfig)(nil)).Elem()
}

func (o SubscriptionCloudStorageConfigAvroConfigPtrOutput) ToSubscriptionCloudStorageConfigAvroConfigPtrOutput() SubscriptionCloudStorageConfigAvroConfigPtrOutput {
	return o
}

func (o SubscriptionCloudStorageConfigAvroConfigPtrOutput) ToSubscriptionCloudStorageConfigAvroConfigPtrOutputWithContext(ctx context.Context) SubscriptionCloudStorageConfigAvroConfigPtrOutput {
	return o
}

func (o SubscriptionCloudStorageConfigAvroConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionCloudStorageConfigAvroConfig] {
	return pulumix.Output[*SubscriptionCloudStorageConfigAvroConfig]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionCloudStorageConfigAvroConfigPtrOutput) Elem() SubscriptionCloudStorageConfigAvroConfigOutput {
	return o.ApplyT(func(v *SubscriptionCloudStorageConfigAvroConfig) SubscriptionCloudStorageConfigAvroConfig {
		if v != nil {
			return *v
		}
		var ret SubscriptionCloudStorageConfigAvroConfig
		return ret
	}).(SubscriptionCloudStorageConfigAvroConfigOutput)
}

// When true, write the subscription name, messageId, publishTime, attributes, and orderingKey as additional fields in the output.
func (o SubscriptionCloudStorageConfigAvroConfigPtrOutput) WriteMetadata() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionCloudStorageConfigAvroConfig) *bool {
		if v == nil {
			return nil
		}
		return v.WriteMetadata
	}).(pulumi.BoolPtrOutput)
}

type SubscriptionDeadLetterPolicy struct {
	// The name of the topic to which dead letter messages should be published.
	// Format is `projects/{project}/topics/{topic}`.
	// The Cloud Pub/Sub service account associated with the enclosing subscription's
	// parent project (i.e.,
	// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
	// permission to Publish() to this topic.
	// The operation will fail if the topic does not exist.
	// Users should ensure that there is a subscription attached to this topic
	// since messages published to a topic with no subscriptions are lost.
	DeadLetterTopic *string `pulumi:"deadLetterTopic"`
	// The maximum number of delivery attempts for any message. The value must be
	// between 5 and 100.
	// The number of delivery attempts is defined as 1 + (the sum of number of
	// NACKs and number of times the acknowledgement deadline has been exceeded for the message).
	// A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
	// client libraries may automatically extend ack_deadlines.
	// This field will be honored on a best effort basis.
	// If this parameter is 0, a default value of 5 is used.
	MaxDeliveryAttempts *int `pulumi:"maxDeliveryAttempts"`
}

// SubscriptionDeadLetterPolicyInput is an input type that accepts SubscriptionDeadLetterPolicyArgs and SubscriptionDeadLetterPolicyOutput values.
// You can construct a concrete instance of `SubscriptionDeadLetterPolicyInput` via:
//
//	SubscriptionDeadLetterPolicyArgs{...}
type SubscriptionDeadLetterPolicyInput interface {
	pulumi.Input

	ToSubscriptionDeadLetterPolicyOutput() SubscriptionDeadLetterPolicyOutput
	ToSubscriptionDeadLetterPolicyOutputWithContext(context.Context) SubscriptionDeadLetterPolicyOutput
}

type SubscriptionDeadLetterPolicyArgs struct {
	// The name of the topic to which dead letter messages should be published.
	// Format is `projects/{project}/topics/{topic}`.
	// The Cloud Pub/Sub service account associated with the enclosing subscription's
	// parent project (i.e.,
	// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
	// permission to Publish() to this topic.
	// The operation will fail if the topic does not exist.
	// Users should ensure that there is a subscription attached to this topic
	// since messages published to a topic with no subscriptions are lost.
	DeadLetterTopic pulumi.StringPtrInput `pulumi:"deadLetterTopic"`
	// The maximum number of delivery attempts for any message. The value must be
	// between 5 and 100.
	// The number of delivery attempts is defined as 1 + (the sum of number of
	// NACKs and number of times the acknowledgement deadline has been exceeded for the message).
	// A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
	// client libraries may automatically extend ack_deadlines.
	// This field will be honored on a best effort basis.
	// If this parameter is 0, a default value of 5 is used.
	MaxDeliveryAttempts pulumi.IntPtrInput `pulumi:"maxDeliveryAttempts"`
}

func (SubscriptionDeadLetterPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionDeadLetterPolicy)(nil)).Elem()
}

func (i SubscriptionDeadLetterPolicyArgs) ToSubscriptionDeadLetterPolicyOutput() SubscriptionDeadLetterPolicyOutput {
	return i.ToSubscriptionDeadLetterPolicyOutputWithContext(context.Background())
}

func (i SubscriptionDeadLetterPolicyArgs) ToSubscriptionDeadLetterPolicyOutputWithContext(ctx context.Context) SubscriptionDeadLetterPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionDeadLetterPolicyOutput)
}

func (i SubscriptionDeadLetterPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[SubscriptionDeadLetterPolicy] {
	return pulumix.Output[SubscriptionDeadLetterPolicy]{
		OutputState: i.ToSubscriptionDeadLetterPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i SubscriptionDeadLetterPolicyArgs) ToSubscriptionDeadLetterPolicyPtrOutput() SubscriptionDeadLetterPolicyPtrOutput {
	return i.ToSubscriptionDeadLetterPolicyPtrOutputWithContext(context.Background())
}

func (i SubscriptionDeadLetterPolicyArgs) ToSubscriptionDeadLetterPolicyPtrOutputWithContext(ctx context.Context) SubscriptionDeadLetterPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionDeadLetterPolicyOutput).ToSubscriptionDeadLetterPolicyPtrOutputWithContext(ctx)
}

// SubscriptionDeadLetterPolicyPtrInput is an input type that accepts SubscriptionDeadLetterPolicyArgs, SubscriptionDeadLetterPolicyPtr and SubscriptionDeadLetterPolicyPtrOutput values.
// You can construct a concrete instance of `SubscriptionDeadLetterPolicyPtrInput` via:
//
//	        SubscriptionDeadLetterPolicyArgs{...}
//
//	or:
//
//	        nil
type SubscriptionDeadLetterPolicyPtrInput interface {
	pulumi.Input

	ToSubscriptionDeadLetterPolicyPtrOutput() SubscriptionDeadLetterPolicyPtrOutput
	ToSubscriptionDeadLetterPolicyPtrOutputWithContext(context.Context) SubscriptionDeadLetterPolicyPtrOutput
}

type subscriptionDeadLetterPolicyPtrType SubscriptionDeadLetterPolicyArgs

func SubscriptionDeadLetterPolicyPtr(v *SubscriptionDeadLetterPolicyArgs) SubscriptionDeadLetterPolicyPtrInput {
	return (*subscriptionDeadLetterPolicyPtrType)(v)
}

func (*subscriptionDeadLetterPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionDeadLetterPolicy)(nil)).Elem()
}

func (i *subscriptionDeadLetterPolicyPtrType) ToSubscriptionDeadLetterPolicyPtrOutput() SubscriptionDeadLetterPolicyPtrOutput {
	return i.ToSubscriptionDeadLetterPolicyPtrOutputWithContext(context.Background())
}

func (i *subscriptionDeadLetterPolicyPtrType) ToSubscriptionDeadLetterPolicyPtrOutputWithContext(ctx context.Context) SubscriptionDeadLetterPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionDeadLetterPolicyPtrOutput)
}

func (i *subscriptionDeadLetterPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionDeadLetterPolicy] {
	return pulumix.Output[*SubscriptionDeadLetterPolicy]{
		OutputState: i.ToSubscriptionDeadLetterPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type SubscriptionDeadLetterPolicyOutput struct{ *pulumi.OutputState }

func (SubscriptionDeadLetterPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionDeadLetterPolicy)(nil)).Elem()
}

func (o SubscriptionDeadLetterPolicyOutput) ToSubscriptionDeadLetterPolicyOutput() SubscriptionDeadLetterPolicyOutput {
	return o
}

func (o SubscriptionDeadLetterPolicyOutput) ToSubscriptionDeadLetterPolicyOutputWithContext(ctx context.Context) SubscriptionDeadLetterPolicyOutput {
	return o
}

func (o SubscriptionDeadLetterPolicyOutput) ToSubscriptionDeadLetterPolicyPtrOutput() SubscriptionDeadLetterPolicyPtrOutput {
	return o.ToSubscriptionDeadLetterPolicyPtrOutputWithContext(context.Background())
}

func (o SubscriptionDeadLetterPolicyOutput) ToSubscriptionDeadLetterPolicyPtrOutputWithContext(ctx context.Context) SubscriptionDeadLetterPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionDeadLetterPolicy) *SubscriptionDeadLetterPolicy {
		return &v
	}).(SubscriptionDeadLetterPolicyPtrOutput)
}

func (o SubscriptionDeadLetterPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionDeadLetterPolicy] {
	return pulumix.Output[SubscriptionDeadLetterPolicy]{
		OutputState: o.OutputState,
	}
}

// The name of the topic to which dead letter messages should be published.
// Format is `projects/{project}/topics/{topic}`.
// The Cloud Pub/Sub service account associated with the enclosing subscription's
// parent project (i.e.,
// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
// permission to Publish() to this topic.
// The operation will fail if the topic does not exist.
// Users should ensure that there is a subscription attached to this topic
// since messages published to a topic with no subscriptions are lost.
func (o SubscriptionDeadLetterPolicyOutput) DeadLetterTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionDeadLetterPolicy) *string { return v.DeadLetterTopic }).(pulumi.StringPtrOutput)
}

// The maximum number of delivery attempts for any message. The value must be
// between 5 and 100.
// The number of delivery attempts is defined as 1 + (the sum of number of
// NACKs and number of times the acknowledgement deadline has been exceeded for the message).
// A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
// client libraries may automatically extend ack_deadlines.
// This field will be honored on a best effort basis.
// If this parameter is 0, a default value of 5 is used.
func (o SubscriptionDeadLetterPolicyOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SubscriptionDeadLetterPolicy) *int { return v.MaxDeliveryAttempts }).(pulumi.IntPtrOutput)
}

type SubscriptionDeadLetterPolicyPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionDeadLetterPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionDeadLetterPolicy)(nil)).Elem()
}

func (o SubscriptionDeadLetterPolicyPtrOutput) ToSubscriptionDeadLetterPolicyPtrOutput() SubscriptionDeadLetterPolicyPtrOutput {
	return o
}

func (o SubscriptionDeadLetterPolicyPtrOutput) ToSubscriptionDeadLetterPolicyPtrOutputWithContext(ctx context.Context) SubscriptionDeadLetterPolicyPtrOutput {
	return o
}

func (o SubscriptionDeadLetterPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionDeadLetterPolicy] {
	return pulumix.Output[*SubscriptionDeadLetterPolicy]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionDeadLetterPolicyPtrOutput) Elem() SubscriptionDeadLetterPolicyOutput {
	return o.ApplyT(func(v *SubscriptionDeadLetterPolicy) SubscriptionDeadLetterPolicy {
		if v != nil {
			return *v
		}
		var ret SubscriptionDeadLetterPolicy
		return ret
	}).(SubscriptionDeadLetterPolicyOutput)
}

// The name of the topic to which dead letter messages should be published.
// Format is `projects/{project}/topics/{topic}`.
// The Cloud Pub/Sub service account associated with the enclosing subscription's
// parent project (i.e.,
// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
// permission to Publish() to this topic.
// The operation will fail if the topic does not exist.
// Users should ensure that there is a subscription attached to this topic
// since messages published to a topic with no subscriptions are lost.
func (o SubscriptionDeadLetterPolicyPtrOutput) DeadLetterTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionDeadLetterPolicy) *string {
		if v == nil {
			return nil
		}
		return v.DeadLetterTopic
	}).(pulumi.StringPtrOutput)
}

// The maximum number of delivery attempts for any message. The value must be
// between 5 and 100.
// The number of delivery attempts is defined as 1 + (the sum of number of
// NACKs and number of times the acknowledgement deadline has been exceeded for the message).
// A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
// client libraries may automatically extend ack_deadlines.
// This field will be honored on a best effort basis.
// If this parameter is 0, a default value of 5 is used.
func (o SubscriptionDeadLetterPolicyPtrOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SubscriptionDeadLetterPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryAttempts
	}).(pulumi.IntPtrOutput)
}

type SubscriptionExpirationPolicy struct {
	// Specifies the "time-to-live" duration for an associated resource. The
	// resource expires if it is not active for a period of ttl.
	// If ttl is set to "", the associated resource never expires.
	// A duration in seconds with up to nine fractional digits, terminated by 's'.
	// Example - "3.5s".
	Ttl string `pulumi:"ttl"`
}

// SubscriptionExpirationPolicyInput is an input type that accepts SubscriptionExpirationPolicyArgs and SubscriptionExpirationPolicyOutput values.
// You can construct a concrete instance of `SubscriptionExpirationPolicyInput` via:
//
//	SubscriptionExpirationPolicyArgs{...}
type SubscriptionExpirationPolicyInput interface {
	pulumi.Input

	ToSubscriptionExpirationPolicyOutput() SubscriptionExpirationPolicyOutput
	ToSubscriptionExpirationPolicyOutputWithContext(context.Context) SubscriptionExpirationPolicyOutput
}

type SubscriptionExpirationPolicyArgs struct {
	// Specifies the "time-to-live" duration for an associated resource. The
	// resource expires if it is not active for a period of ttl.
	// If ttl is set to "", the associated resource never expires.
	// A duration in seconds with up to nine fractional digits, terminated by 's'.
	// Example - "3.5s".
	Ttl pulumi.StringInput `pulumi:"ttl"`
}

func (SubscriptionExpirationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionExpirationPolicy)(nil)).Elem()
}

func (i SubscriptionExpirationPolicyArgs) ToSubscriptionExpirationPolicyOutput() SubscriptionExpirationPolicyOutput {
	return i.ToSubscriptionExpirationPolicyOutputWithContext(context.Background())
}

func (i SubscriptionExpirationPolicyArgs) ToSubscriptionExpirationPolicyOutputWithContext(ctx context.Context) SubscriptionExpirationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionExpirationPolicyOutput)
}

func (i SubscriptionExpirationPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[SubscriptionExpirationPolicy] {
	return pulumix.Output[SubscriptionExpirationPolicy]{
		OutputState: i.ToSubscriptionExpirationPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i SubscriptionExpirationPolicyArgs) ToSubscriptionExpirationPolicyPtrOutput() SubscriptionExpirationPolicyPtrOutput {
	return i.ToSubscriptionExpirationPolicyPtrOutputWithContext(context.Background())
}

func (i SubscriptionExpirationPolicyArgs) ToSubscriptionExpirationPolicyPtrOutputWithContext(ctx context.Context) SubscriptionExpirationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionExpirationPolicyOutput).ToSubscriptionExpirationPolicyPtrOutputWithContext(ctx)
}

// SubscriptionExpirationPolicyPtrInput is an input type that accepts SubscriptionExpirationPolicyArgs, SubscriptionExpirationPolicyPtr and SubscriptionExpirationPolicyPtrOutput values.
// You can construct a concrete instance of `SubscriptionExpirationPolicyPtrInput` via:
//
//	        SubscriptionExpirationPolicyArgs{...}
//
//	or:
//
//	        nil
type SubscriptionExpirationPolicyPtrInput interface {
	pulumi.Input

	ToSubscriptionExpirationPolicyPtrOutput() SubscriptionExpirationPolicyPtrOutput
	ToSubscriptionExpirationPolicyPtrOutputWithContext(context.Context) SubscriptionExpirationPolicyPtrOutput
}

type subscriptionExpirationPolicyPtrType SubscriptionExpirationPolicyArgs

func SubscriptionExpirationPolicyPtr(v *SubscriptionExpirationPolicyArgs) SubscriptionExpirationPolicyPtrInput {
	return (*subscriptionExpirationPolicyPtrType)(v)
}

func (*subscriptionExpirationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionExpirationPolicy)(nil)).Elem()
}

func (i *subscriptionExpirationPolicyPtrType) ToSubscriptionExpirationPolicyPtrOutput() SubscriptionExpirationPolicyPtrOutput {
	return i.ToSubscriptionExpirationPolicyPtrOutputWithContext(context.Background())
}

func (i *subscriptionExpirationPolicyPtrType) ToSubscriptionExpirationPolicyPtrOutputWithContext(ctx context.Context) SubscriptionExpirationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionExpirationPolicyPtrOutput)
}

func (i *subscriptionExpirationPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionExpirationPolicy] {
	return pulumix.Output[*SubscriptionExpirationPolicy]{
		OutputState: i.ToSubscriptionExpirationPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type SubscriptionExpirationPolicyOutput struct{ *pulumi.OutputState }

func (SubscriptionExpirationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionExpirationPolicy)(nil)).Elem()
}

func (o SubscriptionExpirationPolicyOutput) ToSubscriptionExpirationPolicyOutput() SubscriptionExpirationPolicyOutput {
	return o
}

func (o SubscriptionExpirationPolicyOutput) ToSubscriptionExpirationPolicyOutputWithContext(ctx context.Context) SubscriptionExpirationPolicyOutput {
	return o
}

func (o SubscriptionExpirationPolicyOutput) ToSubscriptionExpirationPolicyPtrOutput() SubscriptionExpirationPolicyPtrOutput {
	return o.ToSubscriptionExpirationPolicyPtrOutputWithContext(context.Background())
}

func (o SubscriptionExpirationPolicyOutput) ToSubscriptionExpirationPolicyPtrOutputWithContext(ctx context.Context) SubscriptionExpirationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionExpirationPolicy) *SubscriptionExpirationPolicy {
		return &v
	}).(SubscriptionExpirationPolicyPtrOutput)
}

func (o SubscriptionExpirationPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionExpirationPolicy] {
	return pulumix.Output[SubscriptionExpirationPolicy]{
		OutputState: o.OutputState,
	}
}

// Specifies the "time-to-live" duration for an associated resource. The
// resource expires if it is not active for a period of ttl.
// If ttl is set to "", the associated resource never expires.
// A duration in seconds with up to nine fractional digits, terminated by 's'.
// Example - "3.5s".
func (o SubscriptionExpirationPolicyOutput) Ttl() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionExpirationPolicy) string { return v.Ttl }).(pulumi.StringOutput)
}

type SubscriptionExpirationPolicyPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionExpirationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionExpirationPolicy)(nil)).Elem()
}

func (o SubscriptionExpirationPolicyPtrOutput) ToSubscriptionExpirationPolicyPtrOutput() SubscriptionExpirationPolicyPtrOutput {
	return o
}

func (o SubscriptionExpirationPolicyPtrOutput) ToSubscriptionExpirationPolicyPtrOutputWithContext(ctx context.Context) SubscriptionExpirationPolicyPtrOutput {
	return o
}

func (o SubscriptionExpirationPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionExpirationPolicy] {
	return pulumix.Output[*SubscriptionExpirationPolicy]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionExpirationPolicyPtrOutput) Elem() SubscriptionExpirationPolicyOutput {
	return o.ApplyT(func(v *SubscriptionExpirationPolicy) SubscriptionExpirationPolicy {
		if v != nil {
			return *v
		}
		var ret SubscriptionExpirationPolicy
		return ret
	}).(SubscriptionExpirationPolicyOutput)
}

// Specifies the "time-to-live" duration for an associated resource. The
// resource expires if it is not active for a period of ttl.
// If ttl is set to "", the associated resource never expires.
// A duration in seconds with up to nine fractional digits, terminated by 's'.
// Example - "3.5s".
func (o SubscriptionExpirationPolicyPtrOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionExpirationPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Ttl
	}).(pulumi.StringPtrOutput)
}

type SubscriptionIAMBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// SubscriptionIAMBindingConditionInput is an input type that accepts SubscriptionIAMBindingConditionArgs and SubscriptionIAMBindingConditionOutput values.
// You can construct a concrete instance of `SubscriptionIAMBindingConditionInput` via:
//
//	SubscriptionIAMBindingConditionArgs{...}
type SubscriptionIAMBindingConditionInput interface {
	pulumi.Input

	ToSubscriptionIAMBindingConditionOutput() SubscriptionIAMBindingConditionOutput
	ToSubscriptionIAMBindingConditionOutputWithContext(context.Context) SubscriptionIAMBindingConditionOutput
}

type SubscriptionIAMBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (SubscriptionIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionIAMBindingCondition)(nil)).Elem()
}

func (i SubscriptionIAMBindingConditionArgs) ToSubscriptionIAMBindingConditionOutput() SubscriptionIAMBindingConditionOutput {
	return i.ToSubscriptionIAMBindingConditionOutputWithContext(context.Background())
}

func (i SubscriptionIAMBindingConditionArgs) ToSubscriptionIAMBindingConditionOutputWithContext(ctx context.Context) SubscriptionIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIAMBindingConditionOutput)
}

func (i SubscriptionIAMBindingConditionArgs) ToOutput(ctx context.Context) pulumix.Output[SubscriptionIAMBindingCondition] {
	return pulumix.Output[SubscriptionIAMBindingCondition]{
		OutputState: i.ToSubscriptionIAMBindingConditionOutputWithContext(ctx).OutputState,
	}
}

func (i SubscriptionIAMBindingConditionArgs) ToSubscriptionIAMBindingConditionPtrOutput() SubscriptionIAMBindingConditionPtrOutput {
	return i.ToSubscriptionIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i SubscriptionIAMBindingConditionArgs) ToSubscriptionIAMBindingConditionPtrOutputWithContext(ctx context.Context) SubscriptionIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIAMBindingConditionOutput).ToSubscriptionIAMBindingConditionPtrOutputWithContext(ctx)
}

// SubscriptionIAMBindingConditionPtrInput is an input type that accepts SubscriptionIAMBindingConditionArgs, SubscriptionIAMBindingConditionPtr and SubscriptionIAMBindingConditionPtrOutput values.
// You can construct a concrete instance of `SubscriptionIAMBindingConditionPtrInput` via:
//
//	        SubscriptionIAMBindingConditionArgs{...}
//
//	or:
//
//	        nil
type SubscriptionIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToSubscriptionIAMBindingConditionPtrOutput() SubscriptionIAMBindingConditionPtrOutput
	ToSubscriptionIAMBindingConditionPtrOutputWithContext(context.Context) SubscriptionIAMBindingConditionPtrOutput
}

type subscriptionIAMBindingConditionPtrType SubscriptionIAMBindingConditionArgs

func SubscriptionIAMBindingConditionPtr(v *SubscriptionIAMBindingConditionArgs) SubscriptionIAMBindingConditionPtrInput {
	return (*subscriptionIAMBindingConditionPtrType)(v)
}

func (*subscriptionIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionIAMBindingCondition)(nil)).Elem()
}

func (i *subscriptionIAMBindingConditionPtrType) ToSubscriptionIAMBindingConditionPtrOutput() SubscriptionIAMBindingConditionPtrOutput {
	return i.ToSubscriptionIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *subscriptionIAMBindingConditionPtrType) ToSubscriptionIAMBindingConditionPtrOutputWithContext(ctx context.Context) SubscriptionIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIAMBindingConditionPtrOutput)
}

func (i *subscriptionIAMBindingConditionPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionIAMBindingCondition] {
	return pulumix.Output[*SubscriptionIAMBindingCondition]{
		OutputState: i.ToSubscriptionIAMBindingConditionPtrOutputWithContext(ctx).OutputState,
	}
}

type SubscriptionIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (SubscriptionIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionIAMBindingCondition)(nil)).Elem()
}

func (o SubscriptionIAMBindingConditionOutput) ToSubscriptionIAMBindingConditionOutput() SubscriptionIAMBindingConditionOutput {
	return o
}

func (o SubscriptionIAMBindingConditionOutput) ToSubscriptionIAMBindingConditionOutputWithContext(ctx context.Context) SubscriptionIAMBindingConditionOutput {
	return o
}

func (o SubscriptionIAMBindingConditionOutput) ToSubscriptionIAMBindingConditionPtrOutput() SubscriptionIAMBindingConditionPtrOutput {
	return o.ToSubscriptionIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o SubscriptionIAMBindingConditionOutput) ToSubscriptionIAMBindingConditionPtrOutputWithContext(ctx context.Context) SubscriptionIAMBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionIAMBindingCondition) *SubscriptionIAMBindingCondition {
		return &v
	}).(SubscriptionIAMBindingConditionPtrOutput)
}

func (o SubscriptionIAMBindingConditionOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionIAMBindingCondition] {
	return pulumix.Output[SubscriptionIAMBindingCondition]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SubscriptionIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o SubscriptionIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type SubscriptionIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionIAMBindingCondition)(nil)).Elem()
}

func (o SubscriptionIAMBindingConditionPtrOutput) ToSubscriptionIAMBindingConditionPtrOutput() SubscriptionIAMBindingConditionPtrOutput {
	return o
}

func (o SubscriptionIAMBindingConditionPtrOutput) ToSubscriptionIAMBindingConditionPtrOutputWithContext(ctx context.Context) SubscriptionIAMBindingConditionPtrOutput {
	return o
}

func (o SubscriptionIAMBindingConditionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionIAMBindingCondition] {
	return pulumix.Output[*SubscriptionIAMBindingCondition]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionIAMBindingConditionPtrOutput) Elem() SubscriptionIAMBindingConditionOutput {
	return o.ApplyT(func(v *SubscriptionIAMBindingCondition) SubscriptionIAMBindingCondition {
		if v != nil {
			return *v
		}
		var ret SubscriptionIAMBindingCondition
		return ret
	}).(SubscriptionIAMBindingConditionOutput)
}

func (o SubscriptionIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o SubscriptionIAMBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o SubscriptionIAMBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type SubscriptionIAMMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// SubscriptionIAMMemberConditionInput is an input type that accepts SubscriptionIAMMemberConditionArgs and SubscriptionIAMMemberConditionOutput values.
// You can construct a concrete instance of `SubscriptionIAMMemberConditionInput` via:
//
//	SubscriptionIAMMemberConditionArgs{...}
type SubscriptionIAMMemberConditionInput interface {
	pulumi.Input

	ToSubscriptionIAMMemberConditionOutput() SubscriptionIAMMemberConditionOutput
	ToSubscriptionIAMMemberConditionOutputWithContext(context.Context) SubscriptionIAMMemberConditionOutput
}

type SubscriptionIAMMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (SubscriptionIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionIAMMemberCondition)(nil)).Elem()
}

func (i SubscriptionIAMMemberConditionArgs) ToSubscriptionIAMMemberConditionOutput() SubscriptionIAMMemberConditionOutput {
	return i.ToSubscriptionIAMMemberConditionOutputWithContext(context.Background())
}

func (i SubscriptionIAMMemberConditionArgs) ToSubscriptionIAMMemberConditionOutputWithContext(ctx context.Context) SubscriptionIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIAMMemberConditionOutput)
}

func (i SubscriptionIAMMemberConditionArgs) ToOutput(ctx context.Context) pulumix.Output[SubscriptionIAMMemberCondition] {
	return pulumix.Output[SubscriptionIAMMemberCondition]{
		OutputState: i.ToSubscriptionIAMMemberConditionOutputWithContext(ctx).OutputState,
	}
}

func (i SubscriptionIAMMemberConditionArgs) ToSubscriptionIAMMemberConditionPtrOutput() SubscriptionIAMMemberConditionPtrOutput {
	return i.ToSubscriptionIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i SubscriptionIAMMemberConditionArgs) ToSubscriptionIAMMemberConditionPtrOutputWithContext(ctx context.Context) SubscriptionIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIAMMemberConditionOutput).ToSubscriptionIAMMemberConditionPtrOutputWithContext(ctx)
}

// SubscriptionIAMMemberConditionPtrInput is an input type that accepts SubscriptionIAMMemberConditionArgs, SubscriptionIAMMemberConditionPtr and SubscriptionIAMMemberConditionPtrOutput values.
// You can construct a concrete instance of `SubscriptionIAMMemberConditionPtrInput` via:
//
//	        SubscriptionIAMMemberConditionArgs{...}
//
//	or:
//
//	        nil
type SubscriptionIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToSubscriptionIAMMemberConditionPtrOutput() SubscriptionIAMMemberConditionPtrOutput
	ToSubscriptionIAMMemberConditionPtrOutputWithContext(context.Context) SubscriptionIAMMemberConditionPtrOutput
}

type subscriptionIAMMemberConditionPtrType SubscriptionIAMMemberConditionArgs

func SubscriptionIAMMemberConditionPtr(v *SubscriptionIAMMemberConditionArgs) SubscriptionIAMMemberConditionPtrInput {
	return (*subscriptionIAMMemberConditionPtrType)(v)
}

func (*subscriptionIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionIAMMemberCondition)(nil)).Elem()
}

func (i *subscriptionIAMMemberConditionPtrType) ToSubscriptionIAMMemberConditionPtrOutput() SubscriptionIAMMemberConditionPtrOutput {
	return i.ToSubscriptionIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *subscriptionIAMMemberConditionPtrType) ToSubscriptionIAMMemberConditionPtrOutputWithContext(ctx context.Context) SubscriptionIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIAMMemberConditionPtrOutput)
}

func (i *subscriptionIAMMemberConditionPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionIAMMemberCondition] {
	return pulumix.Output[*SubscriptionIAMMemberCondition]{
		OutputState: i.ToSubscriptionIAMMemberConditionPtrOutputWithContext(ctx).OutputState,
	}
}

type SubscriptionIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (SubscriptionIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionIAMMemberCondition)(nil)).Elem()
}

func (o SubscriptionIAMMemberConditionOutput) ToSubscriptionIAMMemberConditionOutput() SubscriptionIAMMemberConditionOutput {
	return o
}

func (o SubscriptionIAMMemberConditionOutput) ToSubscriptionIAMMemberConditionOutputWithContext(ctx context.Context) SubscriptionIAMMemberConditionOutput {
	return o
}

func (o SubscriptionIAMMemberConditionOutput) ToSubscriptionIAMMemberConditionPtrOutput() SubscriptionIAMMemberConditionPtrOutput {
	return o.ToSubscriptionIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o SubscriptionIAMMemberConditionOutput) ToSubscriptionIAMMemberConditionPtrOutputWithContext(ctx context.Context) SubscriptionIAMMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionIAMMemberCondition) *SubscriptionIAMMemberCondition {
		return &v
	}).(SubscriptionIAMMemberConditionPtrOutput)
}

func (o SubscriptionIAMMemberConditionOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionIAMMemberCondition] {
	return pulumix.Output[SubscriptionIAMMemberCondition]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SubscriptionIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o SubscriptionIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type SubscriptionIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionIAMMemberCondition)(nil)).Elem()
}

func (o SubscriptionIAMMemberConditionPtrOutput) ToSubscriptionIAMMemberConditionPtrOutput() SubscriptionIAMMemberConditionPtrOutput {
	return o
}

func (o SubscriptionIAMMemberConditionPtrOutput) ToSubscriptionIAMMemberConditionPtrOutputWithContext(ctx context.Context) SubscriptionIAMMemberConditionPtrOutput {
	return o
}

func (o SubscriptionIAMMemberConditionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionIAMMemberCondition] {
	return pulumix.Output[*SubscriptionIAMMemberCondition]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionIAMMemberConditionPtrOutput) Elem() SubscriptionIAMMemberConditionOutput {
	return o.ApplyT(func(v *SubscriptionIAMMemberCondition) SubscriptionIAMMemberCondition {
		if v != nil {
			return *v
		}
		var ret SubscriptionIAMMemberCondition
		return ret
	}).(SubscriptionIAMMemberConditionOutput)
}

func (o SubscriptionIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o SubscriptionIAMMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o SubscriptionIAMMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type SubscriptionPushConfig struct {
	// Endpoint configuration attributes.
	// Every endpoint has a set of API supported attributes that can
	// be used to control different aspects of the message delivery.
	// The currently supported attribute is x-goog-version, which you
	// can use to change the format of the pushed message. This
	// attribute indicates the version of the data expected by
	// the endpoint. This controls the shape of the pushed message
	// (i.e., its fields and metadata). The endpoint version is
	// based on the version of the Pub/Sub API.
	// If not present during the subscriptions.create call,
	// it will default to the version of the API used to make
	// such call. If not present during a subscriptions.modifyPushConfig
	// call, its value will not be changed. subscriptions.get
	// calls will always return a valid version, even if the
	// subscription was created without this attribute.
	// The possible values for this attribute are:
	// - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
	// - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
	Attributes map[string]string `pulumi:"attributes"`
	// When set, the payload to the push endpoint is not wrapped.Sets the
	// `data` field as the HTTP body for delivery.
	// Structure is documented below.
	NoWrapper *SubscriptionPushConfigNoWrapper `pulumi:"noWrapper"`
	// If specified, Pub/Sub will generate and attach an OIDC JWT token as
	// an Authorization header in the HTTP request for every pushed message.
	// Structure is documented below.
	OidcToken *SubscriptionPushConfigOidcToken `pulumi:"oidcToken"`
	// A URL locating the endpoint to which messages should be pushed.
	// For example, a Webhook endpoint might use
	// "https://example.com/push".
	PushEndpoint string `pulumi:"pushEndpoint"`
}

// SubscriptionPushConfigInput is an input type that accepts SubscriptionPushConfigArgs and SubscriptionPushConfigOutput values.
// You can construct a concrete instance of `SubscriptionPushConfigInput` via:
//
//	SubscriptionPushConfigArgs{...}
type SubscriptionPushConfigInput interface {
	pulumi.Input

	ToSubscriptionPushConfigOutput() SubscriptionPushConfigOutput
	ToSubscriptionPushConfigOutputWithContext(context.Context) SubscriptionPushConfigOutput
}

type SubscriptionPushConfigArgs struct {
	// Endpoint configuration attributes.
	// Every endpoint has a set of API supported attributes that can
	// be used to control different aspects of the message delivery.
	// The currently supported attribute is x-goog-version, which you
	// can use to change the format of the pushed message. This
	// attribute indicates the version of the data expected by
	// the endpoint. This controls the shape of the pushed message
	// (i.e., its fields and metadata). The endpoint version is
	// based on the version of the Pub/Sub API.
	// If not present during the subscriptions.create call,
	// it will default to the version of the API used to make
	// such call. If not present during a subscriptions.modifyPushConfig
	// call, its value will not be changed. subscriptions.get
	// calls will always return a valid version, even if the
	// subscription was created without this attribute.
	// The possible values for this attribute are:
	// - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
	// - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
	Attributes pulumi.StringMapInput `pulumi:"attributes"`
	// When set, the payload to the push endpoint is not wrapped.Sets the
	// `data` field as the HTTP body for delivery.
	// Structure is documented below.
	NoWrapper SubscriptionPushConfigNoWrapperPtrInput `pulumi:"noWrapper"`
	// If specified, Pub/Sub will generate and attach an OIDC JWT token as
	// an Authorization header in the HTTP request for every pushed message.
	// Structure is documented below.
	OidcToken SubscriptionPushConfigOidcTokenPtrInput `pulumi:"oidcToken"`
	// A URL locating the endpoint to which messages should be pushed.
	// For example, a Webhook endpoint might use
	// "https://example.com/push".
	PushEndpoint pulumi.StringInput `pulumi:"pushEndpoint"`
}

func (SubscriptionPushConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionPushConfig)(nil)).Elem()
}

func (i SubscriptionPushConfigArgs) ToSubscriptionPushConfigOutput() SubscriptionPushConfigOutput {
	return i.ToSubscriptionPushConfigOutputWithContext(context.Background())
}

func (i SubscriptionPushConfigArgs) ToSubscriptionPushConfigOutputWithContext(ctx context.Context) SubscriptionPushConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPushConfigOutput)
}

func (i SubscriptionPushConfigArgs) ToOutput(ctx context.Context) pulumix.Output[SubscriptionPushConfig] {
	return pulumix.Output[SubscriptionPushConfig]{
		OutputState: i.ToSubscriptionPushConfigOutputWithContext(ctx).OutputState,
	}
}

func (i SubscriptionPushConfigArgs) ToSubscriptionPushConfigPtrOutput() SubscriptionPushConfigPtrOutput {
	return i.ToSubscriptionPushConfigPtrOutputWithContext(context.Background())
}

func (i SubscriptionPushConfigArgs) ToSubscriptionPushConfigPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPushConfigOutput).ToSubscriptionPushConfigPtrOutputWithContext(ctx)
}

// SubscriptionPushConfigPtrInput is an input type that accepts SubscriptionPushConfigArgs, SubscriptionPushConfigPtr and SubscriptionPushConfigPtrOutput values.
// You can construct a concrete instance of `SubscriptionPushConfigPtrInput` via:
//
//	        SubscriptionPushConfigArgs{...}
//
//	or:
//
//	        nil
type SubscriptionPushConfigPtrInput interface {
	pulumi.Input

	ToSubscriptionPushConfigPtrOutput() SubscriptionPushConfigPtrOutput
	ToSubscriptionPushConfigPtrOutputWithContext(context.Context) SubscriptionPushConfigPtrOutput
}

type subscriptionPushConfigPtrType SubscriptionPushConfigArgs

func SubscriptionPushConfigPtr(v *SubscriptionPushConfigArgs) SubscriptionPushConfigPtrInput {
	return (*subscriptionPushConfigPtrType)(v)
}

func (*subscriptionPushConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPushConfig)(nil)).Elem()
}

func (i *subscriptionPushConfigPtrType) ToSubscriptionPushConfigPtrOutput() SubscriptionPushConfigPtrOutput {
	return i.ToSubscriptionPushConfigPtrOutputWithContext(context.Background())
}

func (i *subscriptionPushConfigPtrType) ToSubscriptionPushConfigPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPushConfigPtrOutput)
}

func (i *subscriptionPushConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionPushConfig] {
	return pulumix.Output[*SubscriptionPushConfig]{
		OutputState: i.ToSubscriptionPushConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type SubscriptionPushConfigOutput struct{ *pulumi.OutputState }

func (SubscriptionPushConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionPushConfig)(nil)).Elem()
}

func (o SubscriptionPushConfigOutput) ToSubscriptionPushConfigOutput() SubscriptionPushConfigOutput {
	return o
}

func (o SubscriptionPushConfigOutput) ToSubscriptionPushConfigOutputWithContext(ctx context.Context) SubscriptionPushConfigOutput {
	return o
}

func (o SubscriptionPushConfigOutput) ToSubscriptionPushConfigPtrOutput() SubscriptionPushConfigPtrOutput {
	return o.ToSubscriptionPushConfigPtrOutputWithContext(context.Background())
}

func (o SubscriptionPushConfigOutput) ToSubscriptionPushConfigPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionPushConfig) *SubscriptionPushConfig {
		return &v
	}).(SubscriptionPushConfigPtrOutput)
}

func (o SubscriptionPushConfigOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionPushConfig] {
	return pulumix.Output[SubscriptionPushConfig]{
		OutputState: o.OutputState,
	}
}

// Endpoint configuration attributes.
// Every endpoint has a set of API supported attributes that can
// be used to control different aspects of the message delivery.
// The currently supported attribute is x-goog-version, which you
// can use to change the format of the pushed message. This
// attribute indicates the version of the data expected by
// the endpoint. This controls the shape of the pushed message
// (i.e., its fields and metadata). The endpoint version is
// based on the version of the Pub/Sub API.
// If not present during the subscriptions.create call,
// it will default to the version of the API used to make
// such call. If not present during a subscriptions.modifyPushConfig
// call, its value will not be changed. subscriptions.get
// calls will always return a valid version, even if the
// subscription was created without this attribute.
// The possible values for this attribute are:
// - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
// - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
func (o SubscriptionPushConfigOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v SubscriptionPushConfig) map[string]string { return v.Attributes }).(pulumi.StringMapOutput)
}

// When set, the payload to the push endpoint is not wrapped.Sets the
// `data` field as the HTTP body for delivery.
// Structure is documented below.
func (o SubscriptionPushConfigOutput) NoWrapper() SubscriptionPushConfigNoWrapperPtrOutput {
	return o.ApplyT(func(v SubscriptionPushConfig) *SubscriptionPushConfigNoWrapper { return v.NoWrapper }).(SubscriptionPushConfigNoWrapperPtrOutput)
}

// If specified, Pub/Sub will generate and attach an OIDC JWT token as
// an Authorization header in the HTTP request for every pushed message.
// Structure is documented below.
func (o SubscriptionPushConfigOutput) OidcToken() SubscriptionPushConfigOidcTokenPtrOutput {
	return o.ApplyT(func(v SubscriptionPushConfig) *SubscriptionPushConfigOidcToken { return v.OidcToken }).(SubscriptionPushConfigOidcTokenPtrOutput)
}

// A URL locating the endpoint to which messages should be pushed.
// For example, a Webhook endpoint might use
// "https://example.com/push".
func (o SubscriptionPushConfigOutput) PushEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionPushConfig) string { return v.PushEndpoint }).(pulumi.StringOutput)
}

type SubscriptionPushConfigPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionPushConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPushConfig)(nil)).Elem()
}

func (o SubscriptionPushConfigPtrOutput) ToSubscriptionPushConfigPtrOutput() SubscriptionPushConfigPtrOutput {
	return o
}

func (o SubscriptionPushConfigPtrOutput) ToSubscriptionPushConfigPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigPtrOutput {
	return o
}

func (o SubscriptionPushConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionPushConfig] {
	return pulumix.Output[*SubscriptionPushConfig]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionPushConfigPtrOutput) Elem() SubscriptionPushConfigOutput {
	return o.ApplyT(func(v *SubscriptionPushConfig) SubscriptionPushConfig {
		if v != nil {
			return *v
		}
		var ret SubscriptionPushConfig
		return ret
	}).(SubscriptionPushConfigOutput)
}

// Endpoint configuration attributes.
// Every endpoint has a set of API supported attributes that can
// be used to control different aspects of the message delivery.
// The currently supported attribute is x-goog-version, which you
// can use to change the format of the pushed message. This
// attribute indicates the version of the data expected by
// the endpoint. This controls the shape of the pushed message
// (i.e., its fields and metadata). The endpoint version is
// based on the version of the Pub/Sub API.
// If not present during the subscriptions.create call,
// it will default to the version of the API used to make
// such call. If not present during a subscriptions.modifyPushConfig
// call, its value will not be changed. subscriptions.get
// calls will always return a valid version, even if the
// subscription was created without this attribute.
// The possible values for this attribute are:
// - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
// - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
func (o SubscriptionPushConfigPtrOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SubscriptionPushConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(pulumi.StringMapOutput)
}

// When set, the payload to the push endpoint is not wrapped.Sets the
// `data` field as the HTTP body for delivery.
// Structure is documented below.
func (o SubscriptionPushConfigPtrOutput) NoWrapper() SubscriptionPushConfigNoWrapperPtrOutput {
	return o.ApplyT(func(v *SubscriptionPushConfig) *SubscriptionPushConfigNoWrapper {
		if v == nil {
			return nil
		}
		return v.NoWrapper
	}).(SubscriptionPushConfigNoWrapperPtrOutput)
}

// If specified, Pub/Sub will generate and attach an OIDC JWT token as
// an Authorization header in the HTTP request for every pushed message.
// Structure is documented below.
func (o SubscriptionPushConfigPtrOutput) OidcToken() SubscriptionPushConfigOidcTokenPtrOutput {
	return o.ApplyT(func(v *SubscriptionPushConfig) *SubscriptionPushConfigOidcToken {
		if v == nil {
			return nil
		}
		return v.OidcToken
	}).(SubscriptionPushConfigOidcTokenPtrOutput)
}

// A URL locating the endpoint to which messages should be pushed.
// For example, a Webhook endpoint might use
// "https://example.com/push".
func (o SubscriptionPushConfigPtrOutput) PushEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPushConfig) *string {
		if v == nil {
			return nil
		}
		return &v.PushEndpoint
	}).(pulumi.StringPtrOutput)
}

type SubscriptionPushConfigNoWrapper struct {
	// When true, writes the Pub/Sub message metadata to
	// `x-goog-pubsub-<KEY>:<VAL>` headers of the HTTP request. Writes the
	// Pub/Sub message attributes to `<KEY>:<VAL>` headers of the HTTP request.
	WriteMetadata bool `pulumi:"writeMetadata"`
}

// SubscriptionPushConfigNoWrapperInput is an input type that accepts SubscriptionPushConfigNoWrapperArgs and SubscriptionPushConfigNoWrapperOutput values.
// You can construct a concrete instance of `SubscriptionPushConfigNoWrapperInput` via:
//
//	SubscriptionPushConfigNoWrapperArgs{...}
type SubscriptionPushConfigNoWrapperInput interface {
	pulumi.Input

	ToSubscriptionPushConfigNoWrapperOutput() SubscriptionPushConfigNoWrapperOutput
	ToSubscriptionPushConfigNoWrapperOutputWithContext(context.Context) SubscriptionPushConfigNoWrapperOutput
}

type SubscriptionPushConfigNoWrapperArgs struct {
	// When true, writes the Pub/Sub message metadata to
	// `x-goog-pubsub-<KEY>:<VAL>` headers of the HTTP request. Writes the
	// Pub/Sub message attributes to `<KEY>:<VAL>` headers of the HTTP request.
	WriteMetadata pulumi.BoolInput `pulumi:"writeMetadata"`
}

func (SubscriptionPushConfigNoWrapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionPushConfigNoWrapper)(nil)).Elem()
}

func (i SubscriptionPushConfigNoWrapperArgs) ToSubscriptionPushConfigNoWrapperOutput() SubscriptionPushConfigNoWrapperOutput {
	return i.ToSubscriptionPushConfigNoWrapperOutputWithContext(context.Background())
}

func (i SubscriptionPushConfigNoWrapperArgs) ToSubscriptionPushConfigNoWrapperOutputWithContext(ctx context.Context) SubscriptionPushConfigNoWrapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPushConfigNoWrapperOutput)
}

func (i SubscriptionPushConfigNoWrapperArgs) ToOutput(ctx context.Context) pulumix.Output[SubscriptionPushConfigNoWrapper] {
	return pulumix.Output[SubscriptionPushConfigNoWrapper]{
		OutputState: i.ToSubscriptionPushConfigNoWrapperOutputWithContext(ctx).OutputState,
	}
}

func (i SubscriptionPushConfigNoWrapperArgs) ToSubscriptionPushConfigNoWrapperPtrOutput() SubscriptionPushConfigNoWrapperPtrOutput {
	return i.ToSubscriptionPushConfigNoWrapperPtrOutputWithContext(context.Background())
}

func (i SubscriptionPushConfigNoWrapperArgs) ToSubscriptionPushConfigNoWrapperPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigNoWrapperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPushConfigNoWrapperOutput).ToSubscriptionPushConfigNoWrapperPtrOutputWithContext(ctx)
}

// SubscriptionPushConfigNoWrapperPtrInput is an input type that accepts SubscriptionPushConfigNoWrapperArgs, SubscriptionPushConfigNoWrapperPtr and SubscriptionPushConfigNoWrapperPtrOutput values.
// You can construct a concrete instance of `SubscriptionPushConfigNoWrapperPtrInput` via:
//
//	        SubscriptionPushConfigNoWrapperArgs{...}
//
//	or:
//
//	        nil
type SubscriptionPushConfigNoWrapperPtrInput interface {
	pulumi.Input

	ToSubscriptionPushConfigNoWrapperPtrOutput() SubscriptionPushConfigNoWrapperPtrOutput
	ToSubscriptionPushConfigNoWrapperPtrOutputWithContext(context.Context) SubscriptionPushConfigNoWrapperPtrOutput
}

type subscriptionPushConfigNoWrapperPtrType SubscriptionPushConfigNoWrapperArgs

func SubscriptionPushConfigNoWrapperPtr(v *SubscriptionPushConfigNoWrapperArgs) SubscriptionPushConfigNoWrapperPtrInput {
	return (*subscriptionPushConfigNoWrapperPtrType)(v)
}

func (*subscriptionPushConfigNoWrapperPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPushConfigNoWrapper)(nil)).Elem()
}

func (i *subscriptionPushConfigNoWrapperPtrType) ToSubscriptionPushConfigNoWrapperPtrOutput() SubscriptionPushConfigNoWrapperPtrOutput {
	return i.ToSubscriptionPushConfigNoWrapperPtrOutputWithContext(context.Background())
}

func (i *subscriptionPushConfigNoWrapperPtrType) ToSubscriptionPushConfigNoWrapperPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigNoWrapperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPushConfigNoWrapperPtrOutput)
}

func (i *subscriptionPushConfigNoWrapperPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionPushConfigNoWrapper] {
	return pulumix.Output[*SubscriptionPushConfigNoWrapper]{
		OutputState: i.ToSubscriptionPushConfigNoWrapperPtrOutputWithContext(ctx).OutputState,
	}
}

type SubscriptionPushConfigNoWrapperOutput struct{ *pulumi.OutputState }

func (SubscriptionPushConfigNoWrapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionPushConfigNoWrapper)(nil)).Elem()
}

func (o SubscriptionPushConfigNoWrapperOutput) ToSubscriptionPushConfigNoWrapperOutput() SubscriptionPushConfigNoWrapperOutput {
	return o
}

func (o SubscriptionPushConfigNoWrapperOutput) ToSubscriptionPushConfigNoWrapperOutputWithContext(ctx context.Context) SubscriptionPushConfigNoWrapperOutput {
	return o
}

func (o SubscriptionPushConfigNoWrapperOutput) ToSubscriptionPushConfigNoWrapperPtrOutput() SubscriptionPushConfigNoWrapperPtrOutput {
	return o.ToSubscriptionPushConfigNoWrapperPtrOutputWithContext(context.Background())
}

func (o SubscriptionPushConfigNoWrapperOutput) ToSubscriptionPushConfigNoWrapperPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigNoWrapperPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionPushConfigNoWrapper) *SubscriptionPushConfigNoWrapper {
		return &v
	}).(SubscriptionPushConfigNoWrapperPtrOutput)
}

func (o SubscriptionPushConfigNoWrapperOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionPushConfigNoWrapper] {
	return pulumix.Output[SubscriptionPushConfigNoWrapper]{
		OutputState: o.OutputState,
	}
}

// When true, writes the Pub/Sub message metadata to
// `x-goog-pubsub-<KEY>:<VAL>` headers of the HTTP request. Writes the
// Pub/Sub message attributes to `<KEY>:<VAL>` headers of the HTTP request.
func (o SubscriptionPushConfigNoWrapperOutput) WriteMetadata() pulumi.BoolOutput {
	return o.ApplyT(func(v SubscriptionPushConfigNoWrapper) bool { return v.WriteMetadata }).(pulumi.BoolOutput)
}

type SubscriptionPushConfigNoWrapperPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionPushConfigNoWrapperPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPushConfigNoWrapper)(nil)).Elem()
}

func (o SubscriptionPushConfigNoWrapperPtrOutput) ToSubscriptionPushConfigNoWrapperPtrOutput() SubscriptionPushConfigNoWrapperPtrOutput {
	return o
}

func (o SubscriptionPushConfigNoWrapperPtrOutput) ToSubscriptionPushConfigNoWrapperPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigNoWrapperPtrOutput {
	return o
}

func (o SubscriptionPushConfigNoWrapperPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionPushConfigNoWrapper] {
	return pulumix.Output[*SubscriptionPushConfigNoWrapper]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionPushConfigNoWrapperPtrOutput) Elem() SubscriptionPushConfigNoWrapperOutput {
	return o.ApplyT(func(v *SubscriptionPushConfigNoWrapper) SubscriptionPushConfigNoWrapper {
		if v != nil {
			return *v
		}
		var ret SubscriptionPushConfigNoWrapper
		return ret
	}).(SubscriptionPushConfigNoWrapperOutput)
}

// When true, writes the Pub/Sub message metadata to
// `x-goog-pubsub-<KEY>:<VAL>` headers of the HTTP request. Writes the
// Pub/Sub message attributes to `<KEY>:<VAL>` headers of the HTTP request.
func (o SubscriptionPushConfigNoWrapperPtrOutput) WriteMetadata() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionPushConfigNoWrapper) *bool {
		if v == nil {
			return nil
		}
		return &v.WriteMetadata
	}).(pulumi.BoolPtrOutput)
}

type SubscriptionPushConfigOidcToken struct {
	// Audience to be used when generating OIDC token. The audience claim
	// identifies the recipients that the JWT is intended for. The audience
	// value is a single case-sensitive string. Having multiple values (array)
	// for the audience field is not supported. More info about the OIDC JWT
	// token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
	// Note: if not specified, the Push endpoint URL will be used.
	Audience *string `pulumi:"audience"`
	// Service account email to be used for generating the OIDC token.
	// The caller (for subscriptions.create, subscriptions.patch, and
	// subscriptions.modifyPushConfig RPCs) must have the
	// iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail string `pulumi:"serviceAccountEmail"`
}

// SubscriptionPushConfigOidcTokenInput is an input type that accepts SubscriptionPushConfigOidcTokenArgs and SubscriptionPushConfigOidcTokenOutput values.
// You can construct a concrete instance of `SubscriptionPushConfigOidcTokenInput` via:
//
//	SubscriptionPushConfigOidcTokenArgs{...}
type SubscriptionPushConfigOidcTokenInput interface {
	pulumi.Input

	ToSubscriptionPushConfigOidcTokenOutput() SubscriptionPushConfigOidcTokenOutput
	ToSubscriptionPushConfigOidcTokenOutputWithContext(context.Context) SubscriptionPushConfigOidcTokenOutput
}

type SubscriptionPushConfigOidcTokenArgs struct {
	// Audience to be used when generating OIDC token. The audience claim
	// identifies the recipients that the JWT is intended for. The audience
	// value is a single case-sensitive string. Having multiple values (array)
	// for the audience field is not supported. More info about the OIDC JWT
	// token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
	// Note: if not specified, the Push endpoint URL will be used.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// Service account email to be used for generating the OIDC token.
	// The caller (for subscriptions.create, subscriptions.patch, and
	// subscriptions.modifyPushConfig RPCs) must have the
	// iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail pulumi.StringInput `pulumi:"serviceAccountEmail"`
}

func (SubscriptionPushConfigOidcTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionPushConfigOidcToken)(nil)).Elem()
}

func (i SubscriptionPushConfigOidcTokenArgs) ToSubscriptionPushConfigOidcTokenOutput() SubscriptionPushConfigOidcTokenOutput {
	return i.ToSubscriptionPushConfigOidcTokenOutputWithContext(context.Background())
}

func (i SubscriptionPushConfigOidcTokenArgs) ToSubscriptionPushConfigOidcTokenOutputWithContext(ctx context.Context) SubscriptionPushConfigOidcTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPushConfigOidcTokenOutput)
}

func (i SubscriptionPushConfigOidcTokenArgs) ToOutput(ctx context.Context) pulumix.Output[SubscriptionPushConfigOidcToken] {
	return pulumix.Output[SubscriptionPushConfigOidcToken]{
		OutputState: i.ToSubscriptionPushConfigOidcTokenOutputWithContext(ctx).OutputState,
	}
}

func (i SubscriptionPushConfigOidcTokenArgs) ToSubscriptionPushConfigOidcTokenPtrOutput() SubscriptionPushConfigOidcTokenPtrOutput {
	return i.ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(context.Background())
}

func (i SubscriptionPushConfigOidcTokenArgs) ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigOidcTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPushConfigOidcTokenOutput).ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(ctx)
}

// SubscriptionPushConfigOidcTokenPtrInput is an input type that accepts SubscriptionPushConfigOidcTokenArgs, SubscriptionPushConfigOidcTokenPtr and SubscriptionPushConfigOidcTokenPtrOutput values.
// You can construct a concrete instance of `SubscriptionPushConfigOidcTokenPtrInput` via:
//
//	        SubscriptionPushConfigOidcTokenArgs{...}
//
//	or:
//
//	        nil
type SubscriptionPushConfigOidcTokenPtrInput interface {
	pulumi.Input

	ToSubscriptionPushConfigOidcTokenPtrOutput() SubscriptionPushConfigOidcTokenPtrOutput
	ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(context.Context) SubscriptionPushConfigOidcTokenPtrOutput
}

type subscriptionPushConfigOidcTokenPtrType SubscriptionPushConfigOidcTokenArgs

func SubscriptionPushConfigOidcTokenPtr(v *SubscriptionPushConfigOidcTokenArgs) SubscriptionPushConfigOidcTokenPtrInput {
	return (*subscriptionPushConfigOidcTokenPtrType)(v)
}

func (*subscriptionPushConfigOidcTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPushConfigOidcToken)(nil)).Elem()
}

func (i *subscriptionPushConfigOidcTokenPtrType) ToSubscriptionPushConfigOidcTokenPtrOutput() SubscriptionPushConfigOidcTokenPtrOutput {
	return i.ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(context.Background())
}

func (i *subscriptionPushConfigOidcTokenPtrType) ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigOidcTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPushConfigOidcTokenPtrOutput)
}

func (i *subscriptionPushConfigOidcTokenPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionPushConfigOidcToken] {
	return pulumix.Output[*SubscriptionPushConfigOidcToken]{
		OutputState: i.ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(ctx).OutputState,
	}
}

type SubscriptionPushConfigOidcTokenOutput struct{ *pulumi.OutputState }

func (SubscriptionPushConfigOidcTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionPushConfigOidcToken)(nil)).Elem()
}

func (o SubscriptionPushConfigOidcTokenOutput) ToSubscriptionPushConfigOidcTokenOutput() SubscriptionPushConfigOidcTokenOutput {
	return o
}

func (o SubscriptionPushConfigOidcTokenOutput) ToSubscriptionPushConfigOidcTokenOutputWithContext(ctx context.Context) SubscriptionPushConfigOidcTokenOutput {
	return o
}

func (o SubscriptionPushConfigOidcTokenOutput) ToSubscriptionPushConfigOidcTokenPtrOutput() SubscriptionPushConfigOidcTokenPtrOutput {
	return o.ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(context.Background())
}

func (o SubscriptionPushConfigOidcTokenOutput) ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigOidcTokenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionPushConfigOidcToken) *SubscriptionPushConfigOidcToken {
		return &v
	}).(SubscriptionPushConfigOidcTokenPtrOutput)
}

func (o SubscriptionPushConfigOidcTokenOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionPushConfigOidcToken] {
	return pulumix.Output[SubscriptionPushConfigOidcToken]{
		OutputState: o.OutputState,
	}
}

// Audience to be used when generating OIDC token. The audience claim
// identifies the recipients that the JWT is intended for. The audience
// value is a single case-sensitive string. Having multiple values (array)
// for the audience field is not supported. More info about the OIDC JWT
// token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
// Note: if not specified, the Push endpoint URL will be used.
func (o SubscriptionPushConfigOidcTokenOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionPushConfigOidcToken) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

// Service account email to be used for generating the OIDC token.
// The caller (for subscriptions.create, subscriptions.patch, and
// subscriptions.modifyPushConfig RPCs) must have the
// iam.serviceAccounts.actAs permission for the service account.
func (o SubscriptionPushConfigOidcTokenOutput) ServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionPushConfigOidcToken) string { return v.ServiceAccountEmail }).(pulumi.StringOutput)
}

type SubscriptionPushConfigOidcTokenPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionPushConfigOidcTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPushConfigOidcToken)(nil)).Elem()
}

func (o SubscriptionPushConfigOidcTokenPtrOutput) ToSubscriptionPushConfigOidcTokenPtrOutput() SubscriptionPushConfigOidcTokenPtrOutput {
	return o
}

func (o SubscriptionPushConfigOidcTokenPtrOutput) ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigOidcTokenPtrOutput {
	return o
}

func (o SubscriptionPushConfigOidcTokenPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionPushConfigOidcToken] {
	return pulumix.Output[*SubscriptionPushConfigOidcToken]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionPushConfigOidcTokenPtrOutput) Elem() SubscriptionPushConfigOidcTokenOutput {
	return o.ApplyT(func(v *SubscriptionPushConfigOidcToken) SubscriptionPushConfigOidcToken {
		if v != nil {
			return *v
		}
		var ret SubscriptionPushConfigOidcToken
		return ret
	}).(SubscriptionPushConfigOidcTokenOutput)
}

// Audience to be used when generating OIDC token. The audience claim
// identifies the recipients that the JWT is intended for. The audience
// value is a single case-sensitive string. Having multiple values (array)
// for the audience field is not supported. More info about the OIDC JWT
// token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
// Note: if not specified, the Push endpoint URL will be used.
func (o SubscriptionPushConfigOidcTokenPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPushConfigOidcToken) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// Service account email to be used for generating the OIDC token.
// The caller (for subscriptions.create, subscriptions.patch, and
// subscriptions.modifyPushConfig RPCs) must have the
// iam.serviceAccounts.actAs permission for the service account.
func (o SubscriptionPushConfigOidcTokenPtrOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPushConfigOidcToken) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

type SubscriptionRetryPolicy struct {
	// The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	MaximumBackoff *string `pulumi:"maximumBackoff"`
	// The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	MinimumBackoff *string `pulumi:"minimumBackoff"`
}

// SubscriptionRetryPolicyInput is an input type that accepts SubscriptionRetryPolicyArgs and SubscriptionRetryPolicyOutput values.
// You can construct a concrete instance of `SubscriptionRetryPolicyInput` via:
//
//	SubscriptionRetryPolicyArgs{...}
type SubscriptionRetryPolicyInput interface {
	pulumi.Input

	ToSubscriptionRetryPolicyOutput() SubscriptionRetryPolicyOutput
	ToSubscriptionRetryPolicyOutputWithContext(context.Context) SubscriptionRetryPolicyOutput
}

type SubscriptionRetryPolicyArgs struct {
	// The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	MaximumBackoff pulumi.StringPtrInput `pulumi:"maximumBackoff"`
	// The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	MinimumBackoff pulumi.StringPtrInput `pulumi:"minimumBackoff"`
}

func (SubscriptionRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionRetryPolicy)(nil)).Elem()
}

func (i SubscriptionRetryPolicyArgs) ToSubscriptionRetryPolicyOutput() SubscriptionRetryPolicyOutput {
	return i.ToSubscriptionRetryPolicyOutputWithContext(context.Background())
}

func (i SubscriptionRetryPolicyArgs) ToSubscriptionRetryPolicyOutputWithContext(ctx context.Context) SubscriptionRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRetryPolicyOutput)
}

func (i SubscriptionRetryPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[SubscriptionRetryPolicy] {
	return pulumix.Output[SubscriptionRetryPolicy]{
		OutputState: i.ToSubscriptionRetryPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i SubscriptionRetryPolicyArgs) ToSubscriptionRetryPolicyPtrOutput() SubscriptionRetryPolicyPtrOutput {
	return i.ToSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i SubscriptionRetryPolicyArgs) ToSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) SubscriptionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRetryPolicyOutput).ToSubscriptionRetryPolicyPtrOutputWithContext(ctx)
}

// SubscriptionRetryPolicyPtrInput is an input type that accepts SubscriptionRetryPolicyArgs, SubscriptionRetryPolicyPtr and SubscriptionRetryPolicyPtrOutput values.
// You can construct a concrete instance of `SubscriptionRetryPolicyPtrInput` via:
//
//	        SubscriptionRetryPolicyArgs{...}
//
//	or:
//
//	        nil
type SubscriptionRetryPolicyPtrInput interface {
	pulumi.Input

	ToSubscriptionRetryPolicyPtrOutput() SubscriptionRetryPolicyPtrOutput
	ToSubscriptionRetryPolicyPtrOutputWithContext(context.Context) SubscriptionRetryPolicyPtrOutput
}

type subscriptionRetryPolicyPtrType SubscriptionRetryPolicyArgs

func SubscriptionRetryPolicyPtr(v *SubscriptionRetryPolicyArgs) SubscriptionRetryPolicyPtrInput {
	return (*subscriptionRetryPolicyPtrType)(v)
}

func (*subscriptionRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionRetryPolicy)(nil)).Elem()
}

func (i *subscriptionRetryPolicyPtrType) ToSubscriptionRetryPolicyPtrOutput() SubscriptionRetryPolicyPtrOutput {
	return i.ToSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *subscriptionRetryPolicyPtrType) ToSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) SubscriptionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRetryPolicyPtrOutput)
}

func (i *subscriptionRetryPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionRetryPolicy] {
	return pulumix.Output[*SubscriptionRetryPolicy]{
		OutputState: i.ToSubscriptionRetryPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type SubscriptionRetryPolicyOutput struct{ *pulumi.OutputState }

func (SubscriptionRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionRetryPolicy)(nil)).Elem()
}

func (o SubscriptionRetryPolicyOutput) ToSubscriptionRetryPolicyOutput() SubscriptionRetryPolicyOutput {
	return o
}

func (o SubscriptionRetryPolicyOutput) ToSubscriptionRetryPolicyOutputWithContext(ctx context.Context) SubscriptionRetryPolicyOutput {
	return o
}

func (o SubscriptionRetryPolicyOutput) ToSubscriptionRetryPolicyPtrOutput() SubscriptionRetryPolicyPtrOutput {
	return o.ToSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (o SubscriptionRetryPolicyOutput) ToSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) SubscriptionRetryPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionRetryPolicy) *SubscriptionRetryPolicy {
		return &v
	}).(SubscriptionRetryPolicyPtrOutput)
}

func (o SubscriptionRetryPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionRetryPolicy] {
	return pulumix.Output[SubscriptionRetryPolicy]{
		OutputState: o.OutputState,
	}
}

// The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
func (o SubscriptionRetryPolicyOutput) MaximumBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRetryPolicy) *string { return v.MaximumBackoff }).(pulumi.StringPtrOutput)
}

// The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
func (o SubscriptionRetryPolicyOutput) MinimumBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRetryPolicy) *string { return v.MinimumBackoff }).(pulumi.StringPtrOutput)
}

type SubscriptionRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionRetryPolicy)(nil)).Elem()
}

func (o SubscriptionRetryPolicyPtrOutput) ToSubscriptionRetryPolicyPtrOutput() SubscriptionRetryPolicyPtrOutput {
	return o
}

func (o SubscriptionRetryPolicyPtrOutput) ToSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) SubscriptionRetryPolicyPtrOutput {
	return o
}

func (o SubscriptionRetryPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionRetryPolicy] {
	return pulumix.Output[*SubscriptionRetryPolicy]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionRetryPolicyPtrOutput) Elem() SubscriptionRetryPolicyOutput {
	return o.ApplyT(func(v *SubscriptionRetryPolicy) SubscriptionRetryPolicy {
		if v != nil {
			return *v
		}
		var ret SubscriptionRetryPolicy
		return ret
	}).(SubscriptionRetryPolicyOutput)
}

// The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
func (o SubscriptionRetryPolicyPtrOutput) MaximumBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRetryPolicy) *string {
		if v == nil {
			return nil
		}
		return v.MaximumBackoff
	}).(pulumi.StringPtrOutput)
}

// The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
func (o SubscriptionRetryPolicyPtrOutput) MinimumBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRetryPolicy) *string {
		if v == nil {
			return nil
		}
		return v.MinimumBackoff
	}).(pulumi.StringPtrOutput)
}

type TopicIAMBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// TopicIAMBindingConditionInput is an input type that accepts TopicIAMBindingConditionArgs and TopicIAMBindingConditionOutput values.
// You can construct a concrete instance of `TopicIAMBindingConditionInput` via:
//
//	TopicIAMBindingConditionArgs{...}
type TopicIAMBindingConditionInput interface {
	pulumi.Input

	ToTopicIAMBindingConditionOutput() TopicIAMBindingConditionOutput
	ToTopicIAMBindingConditionOutputWithContext(context.Context) TopicIAMBindingConditionOutput
}

type TopicIAMBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (TopicIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicIAMBindingCondition)(nil)).Elem()
}

func (i TopicIAMBindingConditionArgs) ToTopicIAMBindingConditionOutput() TopicIAMBindingConditionOutput {
	return i.ToTopicIAMBindingConditionOutputWithContext(context.Background())
}

func (i TopicIAMBindingConditionArgs) ToTopicIAMBindingConditionOutputWithContext(ctx context.Context) TopicIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMBindingConditionOutput)
}

func (i TopicIAMBindingConditionArgs) ToOutput(ctx context.Context) pulumix.Output[TopicIAMBindingCondition] {
	return pulumix.Output[TopicIAMBindingCondition]{
		OutputState: i.ToTopicIAMBindingConditionOutputWithContext(ctx).OutputState,
	}
}

func (i TopicIAMBindingConditionArgs) ToTopicIAMBindingConditionPtrOutput() TopicIAMBindingConditionPtrOutput {
	return i.ToTopicIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i TopicIAMBindingConditionArgs) ToTopicIAMBindingConditionPtrOutputWithContext(ctx context.Context) TopicIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMBindingConditionOutput).ToTopicIAMBindingConditionPtrOutputWithContext(ctx)
}

// TopicIAMBindingConditionPtrInput is an input type that accepts TopicIAMBindingConditionArgs, TopicIAMBindingConditionPtr and TopicIAMBindingConditionPtrOutput values.
// You can construct a concrete instance of `TopicIAMBindingConditionPtrInput` via:
//
//	        TopicIAMBindingConditionArgs{...}
//
//	or:
//
//	        nil
type TopicIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToTopicIAMBindingConditionPtrOutput() TopicIAMBindingConditionPtrOutput
	ToTopicIAMBindingConditionPtrOutputWithContext(context.Context) TopicIAMBindingConditionPtrOutput
}

type topicIAMBindingConditionPtrType TopicIAMBindingConditionArgs

func TopicIAMBindingConditionPtr(v *TopicIAMBindingConditionArgs) TopicIAMBindingConditionPtrInput {
	return (*topicIAMBindingConditionPtrType)(v)
}

func (*topicIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicIAMBindingCondition)(nil)).Elem()
}

func (i *topicIAMBindingConditionPtrType) ToTopicIAMBindingConditionPtrOutput() TopicIAMBindingConditionPtrOutput {
	return i.ToTopicIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *topicIAMBindingConditionPtrType) ToTopicIAMBindingConditionPtrOutputWithContext(ctx context.Context) TopicIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMBindingConditionPtrOutput)
}

func (i *topicIAMBindingConditionPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicIAMBindingCondition] {
	return pulumix.Output[*TopicIAMBindingCondition]{
		OutputState: i.ToTopicIAMBindingConditionPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (TopicIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicIAMBindingCondition)(nil)).Elem()
}

func (o TopicIAMBindingConditionOutput) ToTopicIAMBindingConditionOutput() TopicIAMBindingConditionOutput {
	return o
}

func (o TopicIAMBindingConditionOutput) ToTopicIAMBindingConditionOutputWithContext(ctx context.Context) TopicIAMBindingConditionOutput {
	return o
}

func (o TopicIAMBindingConditionOutput) ToTopicIAMBindingConditionPtrOutput() TopicIAMBindingConditionPtrOutput {
	return o.ToTopicIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o TopicIAMBindingConditionOutput) ToTopicIAMBindingConditionPtrOutputWithContext(ctx context.Context) TopicIAMBindingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicIAMBindingCondition) *TopicIAMBindingCondition {
		return &v
	}).(TopicIAMBindingConditionPtrOutput)
}

func (o TopicIAMBindingConditionOutput) ToOutput(ctx context.Context) pulumix.Output[TopicIAMBindingCondition] {
	return pulumix.Output[TopicIAMBindingCondition]{
		OutputState: o.OutputState,
	}
}

func (o TopicIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TopicIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TopicIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o TopicIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TopicIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type TopicIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (TopicIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicIAMBindingCondition)(nil)).Elem()
}

func (o TopicIAMBindingConditionPtrOutput) ToTopicIAMBindingConditionPtrOutput() TopicIAMBindingConditionPtrOutput {
	return o
}

func (o TopicIAMBindingConditionPtrOutput) ToTopicIAMBindingConditionPtrOutputWithContext(ctx context.Context) TopicIAMBindingConditionPtrOutput {
	return o
}

func (o TopicIAMBindingConditionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicIAMBindingCondition] {
	return pulumix.Output[*TopicIAMBindingCondition]{
		OutputState: o.OutputState,
	}
}

func (o TopicIAMBindingConditionPtrOutput) Elem() TopicIAMBindingConditionOutput {
	return o.ApplyT(func(v *TopicIAMBindingCondition) TopicIAMBindingCondition {
		if v != nil {
			return *v
		}
		var ret TopicIAMBindingCondition
		return ret
	}).(TopicIAMBindingConditionOutput)
}

func (o TopicIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o TopicIAMBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o TopicIAMBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type TopicIAMMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// TopicIAMMemberConditionInput is an input type that accepts TopicIAMMemberConditionArgs and TopicIAMMemberConditionOutput values.
// You can construct a concrete instance of `TopicIAMMemberConditionInput` via:
//
//	TopicIAMMemberConditionArgs{...}
type TopicIAMMemberConditionInput interface {
	pulumi.Input

	ToTopicIAMMemberConditionOutput() TopicIAMMemberConditionOutput
	ToTopicIAMMemberConditionOutputWithContext(context.Context) TopicIAMMemberConditionOutput
}

type TopicIAMMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (TopicIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicIAMMemberCondition)(nil)).Elem()
}

func (i TopicIAMMemberConditionArgs) ToTopicIAMMemberConditionOutput() TopicIAMMemberConditionOutput {
	return i.ToTopicIAMMemberConditionOutputWithContext(context.Background())
}

func (i TopicIAMMemberConditionArgs) ToTopicIAMMemberConditionOutputWithContext(ctx context.Context) TopicIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMMemberConditionOutput)
}

func (i TopicIAMMemberConditionArgs) ToOutput(ctx context.Context) pulumix.Output[TopicIAMMemberCondition] {
	return pulumix.Output[TopicIAMMemberCondition]{
		OutputState: i.ToTopicIAMMemberConditionOutputWithContext(ctx).OutputState,
	}
}

func (i TopicIAMMemberConditionArgs) ToTopicIAMMemberConditionPtrOutput() TopicIAMMemberConditionPtrOutput {
	return i.ToTopicIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i TopicIAMMemberConditionArgs) ToTopicIAMMemberConditionPtrOutputWithContext(ctx context.Context) TopicIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMMemberConditionOutput).ToTopicIAMMemberConditionPtrOutputWithContext(ctx)
}

// TopicIAMMemberConditionPtrInput is an input type that accepts TopicIAMMemberConditionArgs, TopicIAMMemberConditionPtr and TopicIAMMemberConditionPtrOutput values.
// You can construct a concrete instance of `TopicIAMMemberConditionPtrInput` via:
//
//	        TopicIAMMemberConditionArgs{...}
//
//	or:
//
//	        nil
type TopicIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToTopicIAMMemberConditionPtrOutput() TopicIAMMemberConditionPtrOutput
	ToTopicIAMMemberConditionPtrOutputWithContext(context.Context) TopicIAMMemberConditionPtrOutput
}

type topicIAMMemberConditionPtrType TopicIAMMemberConditionArgs

func TopicIAMMemberConditionPtr(v *TopicIAMMemberConditionArgs) TopicIAMMemberConditionPtrInput {
	return (*topicIAMMemberConditionPtrType)(v)
}

func (*topicIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicIAMMemberCondition)(nil)).Elem()
}

func (i *topicIAMMemberConditionPtrType) ToTopicIAMMemberConditionPtrOutput() TopicIAMMemberConditionPtrOutput {
	return i.ToTopicIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *topicIAMMemberConditionPtrType) ToTopicIAMMemberConditionPtrOutputWithContext(ctx context.Context) TopicIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMMemberConditionPtrOutput)
}

func (i *topicIAMMemberConditionPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicIAMMemberCondition] {
	return pulumix.Output[*TopicIAMMemberCondition]{
		OutputState: i.ToTopicIAMMemberConditionPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (TopicIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicIAMMemberCondition)(nil)).Elem()
}

func (o TopicIAMMemberConditionOutput) ToTopicIAMMemberConditionOutput() TopicIAMMemberConditionOutput {
	return o
}

func (o TopicIAMMemberConditionOutput) ToTopicIAMMemberConditionOutputWithContext(ctx context.Context) TopicIAMMemberConditionOutput {
	return o
}

func (o TopicIAMMemberConditionOutput) ToTopicIAMMemberConditionPtrOutput() TopicIAMMemberConditionPtrOutput {
	return o.ToTopicIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o TopicIAMMemberConditionOutput) ToTopicIAMMemberConditionPtrOutputWithContext(ctx context.Context) TopicIAMMemberConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicIAMMemberCondition) *TopicIAMMemberCondition {
		return &v
	}).(TopicIAMMemberConditionPtrOutput)
}

func (o TopicIAMMemberConditionOutput) ToOutput(ctx context.Context) pulumix.Output[TopicIAMMemberCondition] {
	return pulumix.Output[TopicIAMMemberCondition]{
		OutputState: o.OutputState,
	}
}

func (o TopicIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TopicIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TopicIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o TopicIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TopicIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type TopicIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (TopicIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicIAMMemberCondition)(nil)).Elem()
}

func (o TopicIAMMemberConditionPtrOutput) ToTopicIAMMemberConditionPtrOutput() TopicIAMMemberConditionPtrOutput {
	return o
}

func (o TopicIAMMemberConditionPtrOutput) ToTopicIAMMemberConditionPtrOutputWithContext(ctx context.Context) TopicIAMMemberConditionPtrOutput {
	return o
}

func (o TopicIAMMemberConditionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicIAMMemberCondition] {
	return pulumix.Output[*TopicIAMMemberCondition]{
		OutputState: o.OutputState,
	}
}

func (o TopicIAMMemberConditionPtrOutput) Elem() TopicIAMMemberConditionOutput {
	return o.ApplyT(func(v *TopicIAMMemberCondition) TopicIAMMemberCondition {
		if v != nil {
			return *v
		}
		var ret TopicIAMMemberCondition
		return ret
	}).(TopicIAMMemberConditionOutput)
}

func (o TopicIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o TopicIAMMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o TopicIAMMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type TopicMessageStoragePolicy struct {
	// A list of IDs of GCP regions where messages that are published to
	// the topic may be persisted in storage. Messages published by
	// publishers running in non-allowed GCP regions (or running outside
	// of GCP altogether) will be routed for storage in one of the
	// allowed regions. An empty list means that no regions are allowed,
	// and is not a valid configuration.
	AllowedPersistenceRegions []string `pulumi:"allowedPersistenceRegions"`
}

// TopicMessageStoragePolicyInput is an input type that accepts TopicMessageStoragePolicyArgs and TopicMessageStoragePolicyOutput values.
// You can construct a concrete instance of `TopicMessageStoragePolicyInput` via:
//
//	TopicMessageStoragePolicyArgs{...}
type TopicMessageStoragePolicyInput interface {
	pulumi.Input

	ToTopicMessageStoragePolicyOutput() TopicMessageStoragePolicyOutput
	ToTopicMessageStoragePolicyOutputWithContext(context.Context) TopicMessageStoragePolicyOutput
}

type TopicMessageStoragePolicyArgs struct {
	// A list of IDs of GCP regions where messages that are published to
	// the topic may be persisted in storage. Messages published by
	// publishers running in non-allowed GCP regions (or running outside
	// of GCP altogether) will be routed for storage in one of the
	// allowed regions. An empty list means that no regions are allowed,
	// and is not a valid configuration.
	AllowedPersistenceRegions pulumi.StringArrayInput `pulumi:"allowedPersistenceRegions"`
}

func (TopicMessageStoragePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicMessageStoragePolicy)(nil)).Elem()
}

func (i TopicMessageStoragePolicyArgs) ToTopicMessageStoragePolicyOutput() TopicMessageStoragePolicyOutput {
	return i.ToTopicMessageStoragePolicyOutputWithContext(context.Background())
}

func (i TopicMessageStoragePolicyArgs) ToTopicMessageStoragePolicyOutputWithContext(ctx context.Context) TopicMessageStoragePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicMessageStoragePolicyOutput)
}

func (i TopicMessageStoragePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[TopicMessageStoragePolicy] {
	return pulumix.Output[TopicMessageStoragePolicy]{
		OutputState: i.ToTopicMessageStoragePolicyOutputWithContext(ctx).OutputState,
	}
}

func (i TopicMessageStoragePolicyArgs) ToTopicMessageStoragePolicyPtrOutput() TopicMessageStoragePolicyPtrOutput {
	return i.ToTopicMessageStoragePolicyPtrOutputWithContext(context.Background())
}

func (i TopicMessageStoragePolicyArgs) ToTopicMessageStoragePolicyPtrOutputWithContext(ctx context.Context) TopicMessageStoragePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicMessageStoragePolicyOutput).ToTopicMessageStoragePolicyPtrOutputWithContext(ctx)
}

// TopicMessageStoragePolicyPtrInput is an input type that accepts TopicMessageStoragePolicyArgs, TopicMessageStoragePolicyPtr and TopicMessageStoragePolicyPtrOutput values.
// You can construct a concrete instance of `TopicMessageStoragePolicyPtrInput` via:
//
//	        TopicMessageStoragePolicyArgs{...}
//
//	or:
//
//	        nil
type TopicMessageStoragePolicyPtrInput interface {
	pulumi.Input

	ToTopicMessageStoragePolicyPtrOutput() TopicMessageStoragePolicyPtrOutput
	ToTopicMessageStoragePolicyPtrOutputWithContext(context.Context) TopicMessageStoragePolicyPtrOutput
}

type topicMessageStoragePolicyPtrType TopicMessageStoragePolicyArgs

func TopicMessageStoragePolicyPtr(v *TopicMessageStoragePolicyArgs) TopicMessageStoragePolicyPtrInput {
	return (*topicMessageStoragePolicyPtrType)(v)
}

func (*topicMessageStoragePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicMessageStoragePolicy)(nil)).Elem()
}

func (i *topicMessageStoragePolicyPtrType) ToTopicMessageStoragePolicyPtrOutput() TopicMessageStoragePolicyPtrOutput {
	return i.ToTopicMessageStoragePolicyPtrOutputWithContext(context.Background())
}

func (i *topicMessageStoragePolicyPtrType) ToTopicMessageStoragePolicyPtrOutputWithContext(ctx context.Context) TopicMessageStoragePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicMessageStoragePolicyPtrOutput)
}

func (i *topicMessageStoragePolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicMessageStoragePolicy] {
	return pulumix.Output[*TopicMessageStoragePolicy]{
		OutputState: i.ToTopicMessageStoragePolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicMessageStoragePolicyOutput struct{ *pulumi.OutputState }

func (TopicMessageStoragePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicMessageStoragePolicy)(nil)).Elem()
}

func (o TopicMessageStoragePolicyOutput) ToTopicMessageStoragePolicyOutput() TopicMessageStoragePolicyOutput {
	return o
}

func (o TopicMessageStoragePolicyOutput) ToTopicMessageStoragePolicyOutputWithContext(ctx context.Context) TopicMessageStoragePolicyOutput {
	return o
}

func (o TopicMessageStoragePolicyOutput) ToTopicMessageStoragePolicyPtrOutput() TopicMessageStoragePolicyPtrOutput {
	return o.ToTopicMessageStoragePolicyPtrOutputWithContext(context.Background())
}

func (o TopicMessageStoragePolicyOutput) ToTopicMessageStoragePolicyPtrOutputWithContext(ctx context.Context) TopicMessageStoragePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicMessageStoragePolicy) *TopicMessageStoragePolicy {
		return &v
	}).(TopicMessageStoragePolicyPtrOutput)
}

func (o TopicMessageStoragePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[TopicMessageStoragePolicy] {
	return pulumix.Output[TopicMessageStoragePolicy]{
		OutputState: o.OutputState,
	}
}

// A list of IDs of GCP regions where messages that are published to
// the topic may be persisted in storage. Messages published by
// publishers running in non-allowed GCP regions (or running outside
// of GCP altogether) will be routed for storage in one of the
// allowed regions. An empty list means that no regions are allowed,
// and is not a valid configuration.
func (o TopicMessageStoragePolicyOutput) AllowedPersistenceRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicMessageStoragePolicy) []string { return v.AllowedPersistenceRegions }).(pulumi.StringArrayOutput)
}

type TopicMessageStoragePolicyPtrOutput struct{ *pulumi.OutputState }

func (TopicMessageStoragePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicMessageStoragePolicy)(nil)).Elem()
}

func (o TopicMessageStoragePolicyPtrOutput) ToTopicMessageStoragePolicyPtrOutput() TopicMessageStoragePolicyPtrOutput {
	return o
}

func (o TopicMessageStoragePolicyPtrOutput) ToTopicMessageStoragePolicyPtrOutputWithContext(ctx context.Context) TopicMessageStoragePolicyPtrOutput {
	return o
}

func (o TopicMessageStoragePolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicMessageStoragePolicy] {
	return pulumix.Output[*TopicMessageStoragePolicy]{
		OutputState: o.OutputState,
	}
}

func (o TopicMessageStoragePolicyPtrOutput) Elem() TopicMessageStoragePolicyOutput {
	return o.ApplyT(func(v *TopicMessageStoragePolicy) TopicMessageStoragePolicy {
		if v != nil {
			return *v
		}
		var ret TopicMessageStoragePolicy
		return ret
	}).(TopicMessageStoragePolicyOutput)
}

// A list of IDs of GCP regions where messages that are published to
// the topic may be persisted in storage. Messages published by
// publishers running in non-allowed GCP regions (or running outside
// of GCP altogether) will be routed for storage in one of the
// allowed regions. An empty list means that no regions are allowed,
// and is not a valid configuration.
func (o TopicMessageStoragePolicyPtrOutput) AllowedPersistenceRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TopicMessageStoragePolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowedPersistenceRegions
	}).(pulumi.StringArrayOutput)
}

type TopicSchemaSettings struct {
	// The encoding of messages validated against schema.
	// Default value is `ENCODING_UNSPECIFIED`.
	// Possible values are: `ENCODING_UNSPECIFIED`, `JSON`, `BINARY`.
	Encoding *string `pulumi:"encoding"`
	// The name of the schema that messages published should be
	// validated against. Format is projects/{project}/schemas/{schema}.
	// The value of this field will be _deleted-schema_
	// if the schema has been deleted.
	Schema string `pulumi:"schema"`
}

// TopicSchemaSettingsInput is an input type that accepts TopicSchemaSettingsArgs and TopicSchemaSettingsOutput values.
// You can construct a concrete instance of `TopicSchemaSettingsInput` via:
//
//	TopicSchemaSettingsArgs{...}
type TopicSchemaSettingsInput interface {
	pulumi.Input

	ToTopicSchemaSettingsOutput() TopicSchemaSettingsOutput
	ToTopicSchemaSettingsOutputWithContext(context.Context) TopicSchemaSettingsOutput
}

type TopicSchemaSettingsArgs struct {
	// The encoding of messages validated against schema.
	// Default value is `ENCODING_UNSPECIFIED`.
	// Possible values are: `ENCODING_UNSPECIFIED`, `JSON`, `BINARY`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The name of the schema that messages published should be
	// validated against. Format is projects/{project}/schemas/{schema}.
	// The value of this field will be _deleted-schema_
	// if the schema has been deleted.
	Schema pulumi.StringInput `pulumi:"schema"`
}

func (TopicSchemaSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSchemaSettings)(nil)).Elem()
}

func (i TopicSchemaSettingsArgs) ToTopicSchemaSettingsOutput() TopicSchemaSettingsOutput {
	return i.ToTopicSchemaSettingsOutputWithContext(context.Background())
}

func (i TopicSchemaSettingsArgs) ToTopicSchemaSettingsOutputWithContext(ctx context.Context) TopicSchemaSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSchemaSettingsOutput)
}

func (i TopicSchemaSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[TopicSchemaSettings] {
	return pulumix.Output[TopicSchemaSettings]{
		OutputState: i.ToTopicSchemaSettingsOutputWithContext(ctx).OutputState,
	}
}

func (i TopicSchemaSettingsArgs) ToTopicSchemaSettingsPtrOutput() TopicSchemaSettingsPtrOutput {
	return i.ToTopicSchemaSettingsPtrOutputWithContext(context.Background())
}

func (i TopicSchemaSettingsArgs) ToTopicSchemaSettingsPtrOutputWithContext(ctx context.Context) TopicSchemaSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSchemaSettingsOutput).ToTopicSchemaSettingsPtrOutputWithContext(ctx)
}

// TopicSchemaSettingsPtrInput is an input type that accepts TopicSchemaSettingsArgs, TopicSchemaSettingsPtr and TopicSchemaSettingsPtrOutput values.
// You can construct a concrete instance of `TopicSchemaSettingsPtrInput` via:
//
//	        TopicSchemaSettingsArgs{...}
//
//	or:
//
//	        nil
type TopicSchemaSettingsPtrInput interface {
	pulumi.Input

	ToTopicSchemaSettingsPtrOutput() TopicSchemaSettingsPtrOutput
	ToTopicSchemaSettingsPtrOutputWithContext(context.Context) TopicSchemaSettingsPtrOutput
}

type topicSchemaSettingsPtrType TopicSchemaSettingsArgs

func TopicSchemaSettingsPtr(v *TopicSchemaSettingsArgs) TopicSchemaSettingsPtrInput {
	return (*topicSchemaSettingsPtrType)(v)
}

func (*topicSchemaSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSchemaSettings)(nil)).Elem()
}

func (i *topicSchemaSettingsPtrType) ToTopicSchemaSettingsPtrOutput() TopicSchemaSettingsPtrOutput {
	return i.ToTopicSchemaSettingsPtrOutputWithContext(context.Background())
}

func (i *topicSchemaSettingsPtrType) ToTopicSchemaSettingsPtrOutputWithContext(ctx context.Context) TopicSchemaSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSchemaSettingsPtrOutput)
}

func (i *topicSchemaSettingsPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicSchemaSettings] {
	return pulumix.Output[*TopicSchemaSettings]{
		OutputState: i.ToTopicSchemaSettingsPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicSchemaSettingsOutput struct{ *pulumi.OutputState }

func (TopicSchemaSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSchemaSettings)(nil)).Elem()
}

func (o TopicSchemaSettingsOutput) ToTopicSchemaSettingsOutput() TopicSchemaSettingsOutput {
	return o
}

func (o TopicSchemaSettingsOutput) ToTopicSchemaSettingsOutputWithContext(ctx context.Context) TopicSchemaSettingsOutput {
	return o
}

func (o TopicSchemaSettingsOutput) ToTopicSchemaSettingsPtrOutput() TopicSchemaSettingsPtrOutput {
	return o.ToTopicSchemaSettingsPtrOutputWithContext(context.Background())
}

func (o TopicSchemaSettingsOutput) ToTopicSchemaSettingsPtrOutputWithContext(ctx context.Context) TopicSchemaSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicSchemaSettings) *TopicSchemaSettings {
		return &v
	}).(TopicSchemaSettingsPtrOutput)
}

func (o TopicSchemaSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[TopicSchemaSettings] {
	return pulumix.Output[TopicSchemaSettings]{
		OutputState: o.OutputState,
	}
}

// The encoding of messages validated against schema.
// Default value is `ENCODING_UNSPECIFIED`.
// Possible values are: `ENCODING_UNSPECIFIED`, `JSON`, `BINARY`.
func (o TopicSchemaSettingsOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSchemaSettings) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The name of the schema that messages published should be
// validated against. Format is projects/{project}/schemas/{schema}.
// The value of this field will be _deleted-schema_
// if the schema has been deleted.
func (o TopicSchemaSettingsOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v TopicSchemaSettings) string { return v.Schema }).(pulumi.StringOutput)
}

type TopicSchemaSettingsPtrOutput struct{ *pulumi.OutputState }

func (TopicSchemaSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSchemaSettings)(nil)).Elem()
}

func (o TopicSchemaSettingsPtrOutput) ToTopicSchemaSettingsPtrOutput() TopicSchemaSettingsPtrOutput {
	return o
}

func (o TopicSchemaSettingsPtrOutput) ToTopicSchemaSettingsPtrOutputWithContext(ctx context.Context) TopicSchemaSettingsPtrOutput {
	return o
}

func (o TopicSchemaSettingsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicSchemaSettings] {
	return pulumix.Output[*TopicSchemaSettings]{
		OutputState: o.OutputState,
	}
}

func (o TopicSchemaSettingsPtrOutput) Elem() TopicSchemaSettingsOutput {
	return o.ApplyT(func(v *TopicSchemaSettings) TopicSchemaSettings {
		if v != nil {
			return *v
		}
		var ret TopicSchemaSettings
		return ret
	}).(TopicSchemaSettingsOutput)
}

// The encoding of messages validated against schema.
// Default value is `ENCODING_UNSPECIFIED`.
// Possible values are: `ENCODING_UNSPECIFIED`, `JSON`, `BINARY`.
func (o TopicSchemaSettingsPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSchemaSettings) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// The name of the schema that messages published should be
// validated against. Format is projects/{project}/schemas/{schema}.
// The value of this field will be _deleted-schema_
// if the schema has been deleted.
func (o TopicSchemaSettingsPtrOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSchemaSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Schema
	}).(pulumi.StringPtrOutput)
}

type GetSubscriptionBigqueryConfig struct {
	DropUnknownFields bool   `pulumi:"dropUnknownFields"`
	Table             string `pulumi:"table"`
	UseTopicSchema    bool   `pulumi:"useTopicSchema"`
	WriteMetadata     bool   `pulumi:"writeMetadata"`
}

// GetSubscriptionBigqueryConfigInput is an input type that accepts GetSubscriptionBigqueryConfigArgs and GetSubscriptionBigqueryConfigOutput values.
// You can construct a concrete instance of `GetSubscriptionBigqueryConfigInput` via:
//
//	GetSubscriptionBigqueryConfigArgs{...}
type GetSubscriptionBigqueryConfigInput interface {
	pulumi.Input

	ToGetSubscriptionBigqueryConfigOutput() GetSubscriptionBigqueryConfigOutput
	ToGetSubscriptionBigqueryConfigOutputWithContext(context.Context) GetSubscriptionBigqueryConfigOutput
}

type GetSubscriptionBigqueryConfigArgs struct {
	DropUnknownFields pulumi.BoolInput   `pulumi:"dropUnknownFields"`
	Table             pulumi.StringInput `pulumi:"table"`
	UseTopicSchema    pulumi.BoolInput   `pulumi:"useTopicSchema"`
	WriteMetadata     pulumi.BoolInput   `pulumi:"writeMetadata"`
}

func (GetSubscriptionBigqueryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionBigqueryConfig)(nil)).Elem()
}

func (i GetSubscriptionBigqueryConfigArgs) ToGetSubscriptionBigqueryConfigOutput() GetSubscriptionBigqueryConfigOutput {
	return i.ToGetSubscriptionBigqueryConfigOutputWithContext(context.Background())
}

func (i GetSubscriptionBigqueryConfigArgs) ToGetSubscriptionBigqueryConfigOutputWithContext(ctx context.Context) GetSubscriptionBigqueryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionBigqueryConfigOutput)
}

func (i GetSubscriptionBigqueryConfigArgs) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionBigqueryConfig] {
	return pulumix.Output[GetSubscriptionBigqueryConfig]{
		OutputState: i.ToGetSubscriptionBigqueryConfigOutputWithContext(ctx).OutputState,
	}
}

// GetSubscriptionBigqueryConfigArrayInput is an input type that accepts GetSubscriptionBigqueryConfigArray and GetSubscriptionBigqueryConfigArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionBigqueryConfigArrayInput` via:
//
//	GetSubscriptionBigqueryConfigArray{ GetSubscriptionBigqueryConfigArgs{...} }
type GetSubscriptionBigqueryConfigArrayInput interface {
	pulumi.Input

	ToGetSubscriptionBigqueryConfigArrayOutput() GetSubscriptionBigqueryConfigArrayOutput
	ToGetSubscriptionBigqueryConfigArrayOutputWithContext(context.Context) GetSubscriptionBigqueryConfigArrayOutput
}

type GetSubscriptionBigqueryConfigArray []GetSubscriptionBigqueryConfigInput

func (GetSubscriptionBigqueryConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionBigqueryConfig)(nil)).Elem()
}

func (i GetSubscriptionBigqueryConfigArray) ToGetSubscriptionBigqueryConfigArrayOutput() GetSubscriptionBigqueryConfigArrayOutput {
	return i.ToGetSubscriptionBigqueryConfigArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionBigqueryConfigArray) ToGetSubscriptionBigqueryConfigArrayOutputWithContext(ctx context.Context) GetSubscriptionBigqueryConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionBigqueryConfigArrayOutput)
}

func (i GetSubscriptionBigqueryConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionBigqueryConfig] {
	return pulumix.Output[[]GetSubscriptionBigqueryConfig]{
		OutputState: i.ToGetSubscriptionBigqueryConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSubscriptionBigqueryConfigOutput struct{ *pulumi.OutputState }

func (GetSubscriptionBigqueryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionBigqueryConfig)(nil)).Elem()
}

func (o GetSubscriptionBigqueryConfigOutput) ToGetSubscriptionBigqueryConfigOutput() GetSubscriptionBigqueryConfigOutput {
	return o
}

func (o GetSubscriptionBigqueryConfigOutput) ToGetSubscriptionBigqueryConfigOutputWithContext(ctx context.Context) GetSubscriptionBigqueryConfigOutput {
	return o
}

func (o GetSubscriptionBigqueryConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionBigqueryConfig] {
	return pulumix.Output[GetSubscriptionBigqueryConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionBigqueryConfigOutput) DropUnknownFields() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubscriptionBigqueryConfig) bool { return v.DropUnknownFields }).(pulumi.BoolOutput)
}

func (o GetSubscriptionBigqueryConfigOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionBigqueryConfig) string { return v.Table }).(pulumi.StringOutput)
}

func (o GetSubscriptionBigqueryConfigOutput) UseTopicSchema() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubscriptionBigqueryConfig) bool { return v.UseTopicSchema }).(pulumi.BoolOutput)
}

func (o GetSubscriptionBigqueryConfigOutput) WriteMetadata() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubscriptionBigqueryConfig) bool { return v.WriteMetadata }).(pulumi.BoolOutput)
}

type GetSubscriptionBigqueryConfigArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionBigqueryConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionBigqueryConfig)(nil)).Elem()
}

func (o GetSubscriptionBigqueryConfigArrayOutput) ToGetSubscriptionBigqueryConfigArrayOutput() GetSubscriptionBigqueryConfigArrayOutput {
	return o
}

func (o GetSubscriptionBigqueryConfigArrayOutput) ToGetSubscriptionBigqueryConfigArrayOutputWithContext(ctx context.Context) GetSubscriptionBigqueryConfigArrayOutput {
	return o
}

func (o GetSubscriptionBigqueryConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionBigqueryConfig] {
	return pulumix.Output[[]GetSubscriptionBigqueryConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionBigqueryConfigArrayOutput) Index(i pulumi.IntInput) GetSubscriptionBigqueryConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionBigqueryConfig {
		return vs[0].([]GetSubscriptionBigqueryConfig)[vs[1].(int)]
	}).(GetSubscriptionBigqueryConfigOutput)
}

type GetSubscriptionCloudStorageConfig struct {
	AvroConfigs    []GetSubscriptionCloudStorageConfigAvroConfig `pulumi:"avroConfigs"`
	Bucket         string                                        `pulumi:"bucket"`
	FilenamePrefix string                                        `pulumi:"filenamePrefix"`
	FilenameSuffix string                                        `pulumi:"filenameSuffix"`
	MaxBytes       int                                           `pulumi:"maxBytes"`
	MaxDuration    string                                        `pulumi:"maxDuration"`
	State          string                                        `pulumi:"state"`
}

// GetSubscriptionCloudStorageConfigInput is an input type that accepts GetSubscriptionCloudStorageConfigArgs and GetSubscriptionCloudStorageConfigOutput values.
// You can construct a concrete instance of `GetSubscriptionCloudStorageConfigInput` via:
//
//	GetSubscriptionCloudStorageConfigArgs{...}
type GetSubscriptionCloudStorageConfigInput interface {
	pulumi.Input

	ToGetSubscriptionCloudStorageConfigOutput() GetSubscriptionCloudStorageConfigOutput
	ToGetSubscriptionCloudStorageConfigOutputWithContext(context.Context) GetSubscriptionCloudStorageConfigOutput
}

type GetSubscriptionCloudStorageConfigArgs struct {
	AvroConfigs    GetSubscriptionCloudStorageConfigAvroConfigArrayInput `pulumi:"avroConfigs"`
	Bucket         pulumi.StringInput                                    `pulumi:"bucket"`
	FilenamePrefix pulumi.StringInput                                    `pulumi:"filenamePrefix"`
	FilenameSuffix pulumi.StringInput                                    `pulumi:"filenameSuffix"`
	MaxBytes       pulumi.IntInput                                       `pulumi:"maxBytes"`
	MaxDuration    pulumi.StringInput                                    `pulumi:"maxDuration"`
	State          pulumi.StringInput                                    `pulumi:"state"`
}

func (GetSubscriptionCloudStorageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionCloudStorageConfig)(nil)).Elem()
}

func (i GetSubscriptionCloudStorageConfigArgs) ToGetSubscriptionCloudStorageConfigOutput() GetSubscriptionCloudStorageConfigOutput {
	return i.ToGetSubscriptionCloudStorageConfigOutputWithContext(context.Background())
}

func (i GetSubscriptionCloudStorageConfigArgs) ToGetSubscriptionCloudStorageConfigOutputWithContext(ctx context.Context) GetSubscriptionCloudStorageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionCloudStorageConfigOutput)
}

func (i GetSubscriptionCloudStorageConfigArgs) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionCloudStorageConfig] {
	return pulumix.Output[GetSubscriptionCloudStorageConfig]{
		OutputState: i.ToGetSubscriptionCloudStorageConfigOutputWithContext(ctx).OutputState,
	}
}

// GetSubscriptionCloudStorageConfigArrayInput is an input type that accepts GetSubscriptionCloudStorageConfigArray and GetSubscriptionCloudStorageConfigArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionCloudStorageConfigArrayInput` via:
//
//	GetSubscriptionCloudStorageConfigArray{ GetSubscriptionCloudStorageConfigArgs{...} }
type GetSubscriptionCloudStorageConfigArrayInput interface {
	pulumi.Input

	ToGetSubscriptionCloudStorageConfigArrayOutput() GetSubscriptionCloudStorageConfigArrayOutput
	ToGetSubscriptionCloudStorageConfigArrayOutputWithContext(context.Context) GetSubscriptionCloudStorageConfigArrayOutput
}

type GetSubscriptionCloudStorageConfigArray []GetSubscriptionCloudStorageConfigInput

func (GetSubscriptionCloudStorageConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionCloudStorageConfig)(nil)).Elem()
}

func (i GetSubscriptionCloudStorageConfigArray) ToGetSubscriptionCloudStorageConfigArrayOutput() GetSubscriptionCloudStorageConfigArrayOutput {
	return i.ToGetSubscriptionCloudStorageConfigArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionCloudStorageConfigArray) ToGetSubscriptionCloudStorageConfigArrayOutputWithContext(ctx context.Context) GetSubscriptionCloudStorageConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionCloudStorageConfigArrayOutput)
}

func (i GetSubscriptionCloudStorageConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionCloudStorageConfig] {
	return pulumix.Output[[]GetSubscriptionCloudStorageConfig]{
		OutputState: i.ToGetSubscriptionCloudStorageConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSubscriptionCloudStorageConfigOutput struct{ *pulumi.OutputState }

func (GetSubscriptionCloudStorageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionCloudStorageConfig)(nil)).Elem()
}

func (o GetSubscriptionCloudStorageConfigOutput) ToGetSubscriptionCloudStorageConfigOutput() GetSubscriptionCloudStorageConfigOutput {
	return o
}

func (o GetSubscriptionCloudStorageConfigOutput) ToGetSubscriptionCloudStorageConfigOutputWithContext(ctx context.Context) GetSubscriptionCloudStorageConfigOutput {
	return o
}

func (o GetSubscriptionCloudStorageConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionCloudStorageConfig] {
	return pulumix.Output[GetSubscriptionCloudStorageConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionCloudStorageConfigOutput) AvroConfigs() GetSubscriptionCloudStorageConfigAvroConfigArrayOutput {
	return o.ApplyT(func(v GetSubscriptionCloudStorageConfig) []GetSubscriptionCloudStorageConfigAvroConfig {
		return v.AvroConfigs
	}).(GetSubscriptionCloudStorageConfigAvroConfigArrayOutput)
}

func (o GetSubscriptionCloudStorageConfigOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionCloudStorageConfig) string { return v.Bucket }).(pulumi.StringOutput)
}

func (o GetSubscriptionCloudStorageConfigOutput) FilenamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionCloudStorageConfig) string { return v.FilenamePrefix }).(pulumi.StringOutput)
}

func (o GetSubscriptionCloudStorageConfigOutput) FilenameSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionCloudStorageConfig) string { return v.FilenameSuffix }).(pulumi.StringOutput)
}

func (o GetSubscriptionCloudStorageConfigOutput) MaxBytes() pulumi.IntOutput {
	return o.ApplyT(func(v GetSubscriptionCloudStorageConfig) int { return v.MaxBytes }).(pulumi.IntOutput)
}

func (o GetSubscriptionCloudStorageConfigOutput) MaxDuration() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionCloudStorageConfig) string { return v.MaxDuration }).(pulumi.StringOutput)
}

func (o GetSubscriptionCloudStorageConfigOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionCloudStorageConfig) string { return v.State }).(pulumi.StringOutput)
}

type GetSubscriptionCloudStorageConfigArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionCloudStorageConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionCloudStorageConfig)(nil)).Elem()
}

func (o GetSubscriptionCloudStorageConfigArrayOutput) ToGetSubscriptionCloudStorageConfigArrayOutput() GetSubscriptionCloudStorageConfigArrayOutput {
	return o
}

func (o GetSubscriptionCloudStorageConfigArrayOutput) ToGetSubscriptionCloudStorageConfigArrayOutputWithContext(ctx context.Context) GetSubscriptionCloudStorageConfigArrayOutput {
	return o
}

func (o GetSubscriptionCloudStorageConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionCloudStorageConfig] {
	return pulumix.Output[[]GetSubscriptionCloudStorageConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionCloudStorageConfigArrayOutput) Index(i pulumi.IntInput) GetSubscriptionCloudStorageConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionCloudStorageConfig {
		return vs[0].([]GetSubscriptionCloudStorageConfig)[vs[1].(int)]
	}).(GetSubscriptionCloudStorageConfigOutput)
}

type GetSubscriptionCloudStorageConfigAvroConfig struct {
	WriteMetadata bool `pulumi:"writeMetadata"`
}

// GetSubscriptionCloudStorageConfigAvroConfigInput is an input type that accepts GetSubscriptionCloudStorageConfigAvroConfigArgs and GetSubscriptionCloudStorageConfigAvroConfigOutput values.
// You can construct a concrete instance of `GetSubscriptionCloudStorageConfigAvroConfigInput` via:
//
//	GetSubscriptionCloudStorageConfigAvroConfigArgs{...}
type GetSubscriptionCloudStorageConfigAvroConfigInput interface {
	pulumi.Input

	ToGetSubscriptionCloudStorageConfigAvroConfigOutput() GetSubscriptionCloudStorageConfigAvroConfigOutput
	ToGetSubscriptionCloudStorageConfigAvroConfigOutputWithContext(context.Context) GetSubscriptionCloudStorageConfigAvroConfigOutput
}

type GetSubscriptionCloudStorageConfigAvroConfigArgs struct {
	WriteMetadata pulumi.BoolInput `pulumi:"writeMetadata"`
}

func (GetSubscriptionCloudStorageConfigAvroConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionCloudStorageConfigAvroConfig)(nil)).Elem()
}

func (i GetSubscriptionCloudStorageConfigAvroConfigArgs) ToGetSubscriptionCloudStorageConfigAvroConfigOutput() GetSubscriptionCloudStorageConfigAvroConfigOutput {
	return i.ToGetSubscriptionCloudStorageConfigAvroConfigOutputWithContext(context.Background())
}

func (i GetSubscriptionCloudStorageConfigAvroConfigArgs) ToGetSubscriptionCloudStorageConfigAvroConfigOutputWithContext(ctx context.Context) GetSubscriptionCloudStorageConfigAvroConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionCloudStorageConfigAvroConfigOutput)
}

func (i GetSubscriptionCloudStorageConfigAvroConfigArgs) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionCloudStorageConfigAvroConfig] {
	return pulumix.Output[GetSubscriptionCloudStorageConfigAvroConfig]{
		OutputState: i.ToGetSubscriptionCloudStorageConfigAvroConfigOutputWithContext(ctx).OutputState,
	}
}

// GetSubscriptionCloudStorageConfigAvroConfigArrayInput is an input type that accepts GetSubscriptionCloudStorageConfigAvroConfigArray and GetSubscriptionCloudStorageConfigAvroConfigArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionCloudStorageConfigAvroConfigArrayInput` via:
//
//	GetSubscriptionCloudStorageConfigAvroConfigArray{ GetSubscriptionCloudStorageConfigAvroConfigArgs{...} }
type GetSubscriptionCloudStorageConfigAvroConfigArrayInput interface {
	pulumi.Input

	ToGetSubscriptionCloudStorageConfigAvroConfigArrayOutput() GetSubscriptionCloudStorageConfigAvroConfigArrayOutput
	ToGetSubscriptionCloudStorageConfigAvroConfigArrayOutputWithContext(context.Context) GetSubscriptionCloudStorageConfigAvroConfigArrayOutput
}

type GetSubscriptionCloudStorageConfigAvroConfigArray []GetSubscriptionCloudStorageConfigAvroConfigInput

func (GetSubscriptionCloudStorageConfigAvroConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionCloudStorageConfigAvroConfig)(nil)).Elem()
}

func (i GetSubscriptionCloudStorageConfigAvroConfigArray) ToGetSubscriptionCloudStorageConfigAvroConfigArrayOutput() GetSubscriptionCloudStorageConfigAvroConfigArrayOutput {
	return i.ToGetSubscriptionCloudStorageConfigAvroConfigArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionCloudStorageConfigAvroConfigArray) ToGetSubscriptionCloudStorageConfigAvroConfigArrayOutputWithContext(ctx context.Context) GetSubscriptionCloudStorageConfigAvroConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionCloudStorageConfigAvroConfigArrayOutput)
}

func (i GetSubscriptionCloudStorageConfigAvroConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionCloudStorageConfigAvroConfig] {
	return pulumix.Output[[]GetSubscriptionCloudStorageConfigAvroConfig]{
		OutputState: i.ToGetSubscriptionCloudStorageConfigAvroConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSubscriptionCloudStorageConfigAvroConfigOutput struct{ *pulumi.OutputState }

func (GetSubscriptionCloudStorageConfigAvroConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionCloudStorageConfigAvroConfig)(nil)).Elem()
}

func (o GetSubscriptionCloudStorageConfigAvroConfigOutput) ToGetSubscriptionCloudStorageConfigAvroConfigOutput() GetSubscriptionCloudStorageConfigAvroConfigOutput {
	return o
}

func (o GetSubscriptionCloudStorageConfigAvroConfigOutput) ToGetSubscriptionCloudStorageConfigAvroConfigOutputWithContext(ctx context.Context) GetSubscriptionCloudStorageConfigAvroConfigOutput {
	return o
}

func (o GetSubscriptionCloudStorageConfigAvroConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionCloudStorageConfigAvroConfig] {
	return pulumix.Output[GetSubscriptionCloudStorageConfigAvroConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionCloudStorageConfigAvroConfigOutput) WriteMetadata() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubscriptionCloudStorageConfigAvroConfig) bool { return v.WriteMetadata }).(pulumi.BoolOutput)
}

type GetSubscriptionCloudStorageConfigAvroConfigArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionCloudStorageConfigAvroConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionCloudStorageConfigAvroConfig)(nil)).Elem()
}

func (o GetSubscriptionCloudStorageConfigAvroConfigArrayOutput) ToGetSubscriptionCloudStorageConfigAvroConfigArrayOutput() GetSubscriptionCloudStorageConfigAvroConfigArrayOutput {
	return o
}

func (o GetSubscriptionCloudStorageConfigAvroConfigArrayOutput) ToGetSubscriptionCloudStorageConfigAvroConfigArrayOutputWithContext(ctx context.Context) GetSubscriptionCloudStorageConfigAvroConfigArrayOutput {
	return o
}

func (o GetSubscriptionCloudStorageConfigAvroConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionCloudStorageConfigAvroConfig] {
	return pulumix.Output[[]GetSubscriptionCloudStorageConfigAvroConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionCloudStorageConfigAvroConfigArrayOutput) Index(i pulumi.IntInput) GetSubscriptionCloudStorageConfigAvroConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionCloudStorageConfigAvroConfig {
		return vs[0].([]GetSubscriptionCloudStorageConfigAvroConfig)[vs[1].(int)]
	}).(GetSubscriptionCloudStorageConfigAvroConfigOutput)
}

type GetSubscriptionDeadLetterPolicy struct {
	DeadLetterTopic     string `pulumi:"deadLetterTopic"`
	MaxDeliveryAttempts int    `pulumi:"maxDeliveryAttempts"`
}

// GetSubscriptionDeadLetterPolicyInput is an input type that accepts GetSubscriptionDeadLetterPolicyArgs and GetSubscriptionDeadLetterPolicyOutput values.
// You can construct a concrete instance of `GetSubscriptionDeadLetterPolicyInput` via:
//
//	GetSubscriptionDeadLetterPolicyArgs{...}
type GetSubscriptionDeadLetterPolicyInput interface {
	pulumi.Input

	ToGetSubscriptionDeadLetterPolicyOutput() GetSubscriptionDeadLetterPolicyOutput
	ToGetSubscriptionDeadLetterPolicyOutputWithContext(context.Context) GetSubscriptionDeadLetterPolicyOutput
}

type GetSubscriptionDeadLetterPolicyArgs struct {
	DeadLetterTopic     pulumi.StringInput `pulumi:"deadLetterTopic"`
	MaxDeliveryAttempts pulumi.IntInput    `pulumi:"maxDeliveryAttempts"`
}

func (GetSubscriptionDeadLetterPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionDeadLetterPolicy)(nil)).Elem()
}

func (i GetSubscriptionDeadLetterPolicyArgs) ToGetSubscriptionDeadLetterPolicyOutput() GetSubscriptionDeadLetterPolicyOutput {
	return i.ToGetSubscriptionDeadLetterPolicyOutputWithContext(context.Background())
}

func (i GetSubscriptionDeadLetterPolicyArgs) ToGetSubscriptionDeadLetterPolicyOutputWithContext(ctx context.Context) GetSubscriptionDeadLetterPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionDeadLetterPolicyOutput)
}

func (i GetSubscriptionDeadLetterPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionDeadLetterPolicy] {
	return pulumix.Output[GetSubscriptionDeadLetterPolicy]{
		OutputState: i.ToGetSubscriptionDeadLetterPolicyOutputWithContext(ctx).OutputState,
	}
}

// GetSubscriptionDeadLetterPolicyArrayInput is an input type that accepts GetSubscriptionDeadLetterPolicyArray and GetSubscriptionDeadLetterPolicyArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionDeadLetterPolicyArrayInput` via:
//
//	GetSubscriptionDeadLetterPolicyArray{ GetSubscriptionDeadLetterPolicyArgs{...} }
type GetSubscriptionDeadLetterPolicyArrayInput interface {
	pulumi.Input

	ToGetSubscriptionDeadLetterPolicyArrayOutput() GetSubscriptionDeadLetterPolicyArrayOutput
	ToGetSubscriptionDeadLetterPolicyArrayOutputWithContext(context.Context) GetSubscriptionDeadLetterPolicyArrayOutput
}

type GetSubscriptionDeadLetterPolicyArray []GetSubscriptionDeadLetterPolicyInput

func (GetSubscriptionDeadLetterPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionDeadLetterPolicy)(nil)).Elem()
}

func (i GetSubscriptionDeadLetterPolicyArray) ToGetSubscriptionDeadLetterPolicyArrayOutput() GetSubscriptionDeadLetterPolicyArrayOutput {
	return i.ToGetSubscriptionDeadLetterPolicyArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionDeadLetterPolicyArray) ToGetSubscriptionDeadLetterPolicyArrayOutputWithContext(ctx context.Context) GetSubscriptionDeadLetterPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionDeadLetterPolicyArrayOutput)
}

func (i GetSubscriptionDeadLetterPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionDeadLetterPolicy] {
	return pulumix.Output[[]GetSubscriptionDeadLetterPolicy]{
		OutputState: i.ToGetSubscriptionDeadLetterPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSubscriptionDeadLetterPolicyOutput struct{ *pulumi.OutputState }

func (GetSubscriptionDeadLetterPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionDeadLetterPolicy)(nil)).Elem()
}

func (o GetSubscriptionDeadLetterPolicyOutput) ToGetSubscriptionDeadLetterPolicyOutput() GetSubscriptionDeadLetterPolicyOutput {
	return o
}

func (o GetSubscriptionDeadLetterPolicyOutput) ToGetSubscriptionDeadLetterPolicyOutputWithContext(ctx context.Context) GetSubscriptionDeadLetterPolicyOutput {
	return o
}

func (o GetSubscriptionDeadLetterPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionDeadLetterPolicy] {
	return pulumix.Output[GetSubscriptionDeadLetterPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionDeadLetterPolicyOutput) DeadLetterTopic() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionDeadLetterPolicy) string { return v.DeadLetterTopic }).(pulumi.StringOutput)
}

func (o GetSubscriptionDeadLetterPolicyOutput) MaxDeliveryAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v GetSubscriptionDeadLetterPolicy) int { return v.MaxDeliveryAttempts }).(pulumi.IntOutput)
}

type GetSubscriptionDeadLetterPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionDeadLetterPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionDeadLetterPolicy)(nil)).Elem()
}

func (o GetSubscriptionDeadLetterPolicyArrayOutput) ToGetSubscriptionDeadLetterPolicyArrayOutput() GetSubscriptionDeadLetterPolicyArrayOutput {
	return o
}

func (o GetSubscriptionDeadLetterPolicyArrayOutput) ToGetSubscriptionDeadLetterPolicyArrayOutputWithContext(ctx context.Context) GetSubscriptionDeadLetterPolicyArrayOutput {
	return o
}

func (o GetSubscriptionDeadLetterPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionDeadLetterPolicy] {
	return pulumix.Output[[]GetSubscriptionDeadLetterPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionDeadLetterPolicyArrayOutput) Index(i pulumi.IntInput) GetSubscriptionDeadLetterPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionDeadLetterPolicy {
		return vs[0].([]GetSubscriptionDeadLetterPolicy)[vs[1].(int)]
	}).(GetSubscriptionDeadLetterPolicyOutput)
}

type GetSubscriptionExpirationPolicy struct {
	Ttl string `pulumi:"ttl"`
}

// GetSubscriptionExpirationPolicyInput is an input type that accepts GetSubscriptionExpirationPolicyArgs and GetSubscriptionExpirationPolicyOutput values.
// You can construct a concrete instance of `GetSubscriptionExpirationPolicyInput` via:
//
//	GetSubscriptionExpirationPolicyArgs{...}
type GetSubscriptionExpirationPolicyInput interface {
	pulumi.Input

	ToGetSubscriptionExpirationPolicyOutput() GetSubscriptionExpirationPolicyOutput
	ToGetSubscriptionExpirationPolicyOutputWithContext(context.Context) GetSubscriptionExpirationPolicyOutput
}

type GetSubscriptionExpirationPolicyArgs struct {
	Ttl pulumi.StringInput `pulumi:"ttl"`
}

func (GetSubscriptionExpirationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionExpirationPolicy)(nil)).Elem()
}

func (i GetSubscriptionExpirationPolicyArgs) ToGetSubscriptionExpirationPolicyOutput() GetSubscriptionExpirationPolicyOutput {
	return i.ToGetSubscriptionExpirationPolicyOutputWithContext(context.Background())
}

func (i GetSubscriptionExpirationPolicyArgs) ToGetSubscriptionExpirationPolicyOutputWithContext(ctx context.Context) GetSubscriptionExpirationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionExpirationPolicyOutput)
}

func (i GetSubscriptionExpirationPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionExpirationPolicy] {
	return pulumix.Output[GetSubscriptionExpirationPolicy]{
		OutputState: i.ToGetSubscriptionExpirationPolicyOutputWithContext(ctx).OutputState,
	}
}

// GetSubscriptionExpirationPolicyArrayInput is an input type that accepts GetSubscriptionExpirationPolicyArray and GetSubscriptionExpirationPolicyArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionExpirationPolicyArrayInput` via:
//
//	GetSubscriptionExpirationPolicyArray{ GetSubscriptionExpirationPolicyArgs{...} }
type GetSubscriptionExpirationPolicyArrayInput interface {
	pulumi.Input

	ToGetSubscriptionExpirationPolicyArrayOutput() GetSubscriptionExpirationPolicyArrayOutput
	ToGetSubscriptionExpirationPolicyArrayOutputWithContext(context.Context) GetSubscriptionExpirationPolicyArrayOutput
}

type GetSubscriptionExpirationPolicyArray []GetSubscriptionExpirationPolicyInput

func (GetSubscriptionExpirationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionExpirationPolicy)(nil)).Elem()
}

func (i GetSubscriptionExpirationPolicyArray) ToGetSubscriptionExpirationPolicyArrayOutput() GetSubscriptionExpirationPolicyArrayOutput {
	return i.ToGetSubscriptionExpirationPolicyArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionExpirationPolicyArray) ToGetSubscriptionExpirationPolicyArrayOutputWithContext(ctx context.Context) GetSubscriptionExpirationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionExpirationPolicyArrayOutput)
}

func (i GetSubscriptionExpirationPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionExpirationPolicy] {
	return pulumix.Output[[]GetSubscriptionExpirationPolicy]{
		OutputState: i.ToGetSubscriptionExpirationPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSubscriptionExpirationPolicyOutput struct{ *pulumi.OutputState }

func (GetSubscriptionExpirationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionExpirationPolicy)(nil)).Elem()
}

func (o GetSubscriptionExpirationPolicyOutput) ToGetSubscriptionExpirationPolicyOutput() GetSubscriptionExpirationPolicyOutput {
	return o
}

func (o GetSubscriptionExpirationPolicyOutput) ToGetSubscriptionExpirationPolicyOutputWithContext(ctx context.Context) GetSubscriptionExpirationPolicyOutput {
	return o
}

func (o GetSubscriptionExpirationPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionExpirationPolicy] {
	return pulumix.Output[GetSubscriptionExpirationPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionExpirationPolicyOutput) Ttl() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionExpirationPolicy) string { return v.Ttl }).(pulumi.StringOutput)
}

type GetSubscriptionExpirationPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionExpirationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionExpirationPolicy)(nil)).Elem()
}

func (o GetSubscriptionExpirationPolicyArrayOutput) ToGetSubscriptionExpirationPolicyArrayOutput() GetSubscriptionExpirationPolicyArrayOutput {
	return o
}

func (o GetSubscriptionExpirationPolicyArrayOutput) ToGetSubscriptionExpirationPolicyArrayOutputWithContext(ctx context.Context) GetSubscriptionExpirationPolicyArrayOutput {
	return o
}

func (o GetSubscriptionExpirationPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionExpirationPolicy] {
	return pulumix.Output[[]GetSubscriptionExpirationPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionExpirationPolicyArrayOutput) Index(i pulumi.IntInput) GetSubscriptionExpirationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionExpirationPolicy {
		return vs[0].([]GetSubscriptionExpirationPolicy)[vs[1].(int)]
	}).(GetSubscriptionExpirationPolicyOutput)
}

type GetSubscriptionPushConfig struct {
	Attributes   map[string]string                    `pulumi:"attributes"`
	NoWrappers   []GetSubscriptionPushConfigNoWrapper `pulumi:"noWrappers"`
	OidcTokens   []GetSubscriptionPushConfigOidcToken `pulumi:"oidcTokens"`
	PushEndpoint string                               `pulumi:"pushEndpoint"`
}

// GetSubscriptionPushConfigInput is an input type that accepts GetSubscriptionPushConfigArgs and GetSubscriptionPushConfigOutput values.
// You can construct a concrete instance of `GetSubscriptionPushConfigInput` via:
//
//	GetSubscriptionPushConfigArgs{...}
type GetSubscriptionPushConfigInput interface {
	pulumi.Input

	ToGetSubscriptionPushConfigOutput() GetSubscriptionPushConfigOutput
	ToGetSubscriptionPushConfigOutputWithContext(context.Context) GetSubscriptionPushConfigOutput
}

type GetSubscriptionPushConfigArgs struct {
	Attributes   pulumi.StringMapInput                        `pulumi:"attributes"`
	NoWrappers   GetSubscriptionPushConfigNoWrapperArrayInput `pulumi:"noWrappers"`
	OidcTokens   GetSubscriptionPushConfigOidcTokenArrayInput `pulumi:"oidcTokens"`
	PushEndpoint pulumi.StringInput                           `pulumi:"pushEndpoint"`
}

func (GetSubscriptionPushConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionPushConfig)(nil)).Elem()
}

func (i GetSubscriptionPushConfigArgs) ToGetSubscriptionPushConfigOutput() GetSubscriptionPushConfigOutput {
	return i.ToGetSubscriptionPushConfigOutputWithContext(context.Background())
}

func (i GetSubscriptionPushConfigArgs) ToGetSubscriptionPushConfigOutputWithContext(ctx context.Context) GetSubscriptionPushConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionPushConfigOutput)
}

func (i GetSubscriptionPushConfigArgs) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionPushConfig] {
	return pulumix.Output[GetSubscriptionPushConfig]{
		OutputState: i.ToGetSubscriptionPushConfigOutputWithContext(ctx).OutputState,
	}
}

// GetSubscriptionPushConfigArrayInput is an input type that accepts GetSubscriptionPushConfigArray and GetSubscriptionPushConfigArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionPushConfigArrayInput` via:
//
//	GetSubscriptionPushConfigArray{ GetSubscriptionPushConfigArgs{...} }
type GetSubscriptionPushConfigArrayInput interface {
	pulumi.Input

	ToGetSubscriptionPushConfigArrayOutput() GetSubscriptionPushConfigArrayOutput
	ToGetSubscriptionPushConfigArrayOutputWithContext(context.Context) GetSubscriptionPushConfigArrayOutput
}

type GetSubscriptionPushConfigArray []GetSubscriptionPushConfigInput

func (GetSubscriptionPushConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionPushConfig)(nil)).Elem()
}

func (i GetSubscriptionPushConfigArray) ToGetSubscriptionPushConfigArrayOutput() GetSubscriptionPushConfigArrayOutput {
	return i.ToGetSubscriptionPushConfigArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionPushConfigArray) ToGetSubscriptionPushConfigArrayOutputWithContext(ctx context.Context) GetSubscriptionPushConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionPushConfigArrayOutput)
}

func (i GetSubscriptionPushConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionPushConfig] {
	return pulumix.Output[[]GetSubscriptionPushConfig]{
		OutputState: i.ToGetSubscriptionPushConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSubscriptionPushConfigOutput struct{ *pulumi.OutputState }

func (GetSubscriptionPushConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionPushConfig)(nil)).Elem()
}

func (o GetSubscriptionPushConfigOutput) ToGetSubscriptionPushConfigOutput() GetSubscriptionPushConfigOutput {
	return o
}

func (o GetSubscriptionPushConfigOutput) ToGetSubscriptionPushConfigOutputWithContext(ctx context.Context) GetSubscriptionPushConfigOutput {
	return o
}

func (o GetSubscriptionPushConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionPushConfig] {
	return pulumix.Output[GetSubscriptionPushConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionPushConfigOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSubscriptionPushConfig) map[string]string { return v.Attributes }).(pulumi.StringMapOutput)
}

func (o GetSubscriptionPushConfigOutput) NoWrappers() GetSubscriptionPushConfigNoWrapperArrayOutput {
	return o.ApplyT(func(v GetSubscriptionPushConfig) []GetSubscriptionPushConfigNoWrapper { return v.NoWrappers }).(GetSubscriptionPushConfigNoWrapperArrayOutput)
}

func (o GetSubscriptionPushConfigOutput) OidcTokens() GetSubscriptionPushConfigOidcTokenArrayOutput {
	return o.ApplyT(func(v GetSubscriptionPushConfig) []GetSubscriptionPushConfigOidcToken { return v.OidcTokens }).(GetSubscriptionPushConfigOidcTokenArrayOutput)
}

func (o GetSubscriptionPushConfigOutput) PushEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPushConfig) string { return v.PushEndpoint }).(pulumi.StringOutput)
}

type GetSubscriptionPushConfigArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionPushConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionPushConfig)(nil)).Elem()
}

func (o GetSubscriptionPushConfigArrayOutput) ToGetSubscriptionPushConfigArrayOutput() GetSubscriptionPushConfigArrayOutput {
	return o
}

func (o GetSubscriptionPushConfigArrayOutput) ToGetSubscriptionPushConfigArrayOutputWithContext(ctx context.Context) GetSubscriptionPushConfigArrayOutput {
	return o
}

func (o GetSubscriptionPushConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionPushConfig] {
	return pulumix.Output[[]GetSubscriptionPushConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionPushConfigArrayOutput) Index(i pulumi.IntInput) GetSubscriptionPushConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionPushConfig {
		return vs[0].([]GetSubscriptionPushConfig)[vs[1].(int)]
	}).(GetSubscriptionPushConfigOutput)
}

type GetSubscriptionPushConfigNoWrapper struct {
	WriteMetadata bool `pulumi:"writeMetadata"`
}

// GetSubscriptionPushConfigNoWrapperInput is an input type that accepts GetSubscriptionPushConfigNoWrapperArgs and GetSubscriptionPushConfigNoWrapperOutput values.
// You can construct a concrete instance of `GetSubscriptionPushConfigNoWrapperInput` via:
//
//	GetSubscriptionPushConfigNoWrapperArgs{...}
type GetSubscriptionPushConfigNoWrapperInput interface {
	pulumi.Input

	ToGetSubscriptionPushConfigNoWrapperOutput() GetSubscriptionPushConfigNoWrapperOutput
	ToGetSubscriptionPushConfigNoWrapperOutputWithContext(context.Context) GetSubscriptionPushConfigNoWrapperOutput
}

type GetSubscriptionPushConfigNoWrapperArgs struct {
	WriteMetadata pulumi.BoolInput `pulumi:"writeMetadata"`
}

func (GetSubscriptionPushConfigNoWrapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionPushConfigNoWrapper)(nil)).Elem()
}

func (i GetSubscriptionPushConfigNoWrapperArgs) ToGetSubscriptionPushConfigNoWrapperOutput() GetSubscriptionPushConfigNoWrapperOutput {
	return i.ToGetSubscriptionPushConfigNoWrapperOutputWithContext(context.Background())
}

func (i GetSubscriptionPushConfigNoWrapperArgs) ToGetSubscriptionPushConfigNoWrapperOutputWithContext(ctx context.Context) GetSubscriptionPushConfigNoWrapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionPushConfigNoWrapperOutput)
}

func (i GetSubscriptionPushConfigNoWrapperArgs) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionPushConfigNoWrapper] {
	return pulumix.Output[GetSubscriptionPushConfigNoWrapper]{
		OutputState: i.ToGetSubscriptionPushConfigNoWrapperOutputWithContext(ctx).OutputState,
	}
}

// GetSubscriptionPushConfigNoWrapperArrayInput is an input type that accepts GetSubscriptionPushConfigNoWrapperArray and GetSubscriptionPushConfigNoWrapperArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionPushConfigNoWrapperArrayInput` via:
//
//	GetSubscriptionPushConfigNoWrapperArray{ GetSubscriptionPushConfigNoWrapperArgs{...} }
type GetSubscriptionPushConfigNoWrapperArrayInput interface {
	pulumi.Input

	ToGetSubscriptionPushConfigNoWrapperArrayOutput() GetSubscriptionPushConfigNoWrapperArrayOutput
	ToGetSubscriptionPushConfigNoWrapperArrayOutputWithContext(context.Context) GetSubscriptionPushConfigNoWrapperArrayOutput
}

type GetSubscriptionPushConfigNoWrapperArray []GetSubscriptionPushConfigNoWrapperInput

func (GetSubscriptionPushConfigNoWrapperArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionPushConfigNoWrapper)(nil)).Elem()
}

func (i GetSubscriptionPushConfigNoWrapperArray) ToGetSubscriptionPushConfigNoWrapperArrayOutput() GetSubscriptionPushConfigNoWrapperArrayOutput {
	return i.ToGetSubscriptionPushConfigNoWrapperArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionPushConfigNoWrapperArray) ToGetSubscriptionPushConfigNoWrapperArrayOutputWithContext(ctx context.Context) GetSubscriptionPushConfigNoWrapperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionPushConfigNoWrapperArrayOutput)
}

func (i GetSubscriptionPushConfigNoWrapperArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionPushConfigNoWrapper] {
	return pulumix.Output[[]GetSubscriptionPushConfigNoWrapper]{
		OutputState: i.ToGetSubscriptionPushConfigNoWrapperArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSubscriptionPushConfigNoWrapperOutput struct{ *pulumi.OutputState }

func (GetSubscriptionPushConfigNoWrapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionPushConfigNoWrapper)(nil)).Elem()
}

func (o GetSubscriptionPushConfigNoWrapperOutput) ToGetSubscriptionPushConfigNoWrapperOutput() GetSubscriptionPushConfigNoWrapperOutput {
	return o
}

func (o GetSubscriptionPushConfigNoWrapperOutput) ToGetSubscriptionPushConfigNoWrapperOutputWithContext(ctx context.Context) GetSubscriptionPushConfigNoWrapperOutput {
	return o
}

func (o GetSubscriptionPushConfigNoWrapperOutput) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionPushConfigNoWrapper] {
	return pulumix.Output[GetSubscriptionPushConfigNoWrapper]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionPushConfigNoWrapperOutput) WriteMetadata() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubscriptionPushConfigNoWrapper) bool { return v.WriteMetadata }).(pulumi.BoolOutput)
}

type GetSubscriptionPushConfigNoWrapperArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionPushConfigNoWrapperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionPushConfigNoWrapper)(nil)).Elem()
}

func (o GetSubscriptionPushConfigNoWrapperArrayOutput) ToGetSubscriptionPushConfigNoWrapperArrayOutput() GetSubscriptionPushConfigNoWrapperArrayOutput {
	return o
}

func (o GetSubscriptionPushConfigNoWrapperArrayOutput) ToGetSubscriptionPushConfigNoWrapperArrayOutputWithContext(ctx context.Context) GetSubscriptionPushConfigNoWrapperArrayOutput {
	return o
}

func (o GetSubscriptionPushConfigNoWrapperArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionPushConfigNoWrapper] {
	return pulumix.Output[[]GetSubscriptionPushConfigNoWrapper]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionPushConfigNoWrapperArrayOutput) Index(i pulumi.IntInput) GetSubscriptionPushConfigNoWrapperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionPushConfigNoWrapper {
		return vs[0].([]GetSubscriptionPushConfigNoWrapper)[vs[1].(int)]
	}).(GetSubscriptionPushConfigNoWrapperOutput)
}

type GetSubscriptionPushConfigOidcToken struct {
	Audience            string `pulumi:"audience"`
	ServiceAccountEmail string `pulumi:"serviceAccountEmail"`
}

// GetSubscriptionPushConfigOidcTokenInput is an input type that accepts GetSubscriptionPushConfigOidcTokenArgs and GetSubscriptionPushConfigOidcTokenOutput values.
// You can construct a concrete instance of `GetSubscriptionPushConfigOidcTokenInput` via:
//
//	GetSubscriptionPushConfigOidcTokenArgs{...}
type GetSubscriptionPushConfigOidcTokenInput interface {
	pulumi.Input

	ToGetSubscriptionPushConfigOidcTokenOutput() GetSubscriptionPushConfigOidcTokenOutput
	ToGetSubscriptionPushConfigOidcTokenOutputWithContext(context.Context) GetSubscriptionPushConfigOidcTokenOutput
}

type GetSubscriptionPushConfigOidcTokenArgs struct {
	Audience            pulumi.StringInput `pulumi:"audience"`
	ServiceAccountEmail pulumi.StringInput `pulumi:"serviceAccountEmail"`
}

func (GetSubscriptionPushConfigOidcTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionPushConfigOidcToken)(nil)).Elem()
}

func (i GetSubscriptionPushConfigOidcTokenArgs) ToGetSubscriptionPushConfigOidcTokenOutput() GetSubscriptionPushConfigOidcTokenOutput {
	return i.ToGetSubscriptionPushConfigOidcTokenOutputWithContext(context.Background())
}

func (i GetSubscriptionPushConfigOidcTokenArgs) ToGetSubscriptionPushConfigOidcTokenOutputWithContext(ctx context.Context) GetSubscriptionPushConfigOidcTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionPushConfigOidcTokenOutput)
}

func (i GetSubscriptionPushConfigOidcTokenArgs) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionPushConfigOidcToken] {
	return pulumix.Output[GetSubscriptionPushConfigOidcToken]{
		OutputState: i.ToGetSubscriptionPushConfigOidcTokenOutputWithContext(ctx).OutputState,
	}
}

// GetSubscriptionPushConfigOidcTokenArrayInput is an input type that accepts GetSubscriptionPushConfigOidcTokenArray and GetSubscriptionPushConfigOidcTokenArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionPushConfigOidcTokenArrayInput` via:
//
//	GetSubscriptionPushConfigOidcTokenArray{ GetSubscriptionPushConfigOidcTokenArgs{...} }
type GetSubscriptionPushConfigOidcTokenArrayInput interface {
	pulumi.Input

	ToGetSubscriptionPushConfigOidcTokenArrayOutput() GetSubscriptionPushConfigOidcTokenArrayOutput
	ToGetSubscriptionPushConfigOidcTokenArrayOutputWithContext(context.Context) GetSubscriptionPushConfigOidcTokenArrayOutput
}

type GetSubscriptionPushConfigOidcTokenArray []GetSubscriptionPushConfigOidcTokenInput

func (GetSubscriptionPushConfigOidcTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionPushConfigOidcToken)(nil)).Elem()
}

func (i GetSubscriptionPushConfigOidcTokenArray) ToGetSubscriptionPushConfigOidcTokenArrayOutput() GetSubscriptionPushConfigOidcTokenArrayOutput {
	return i.ToGetSubscriptionPushConfigOidcTokenArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionPushConfigOidcTokenArray) ToGetSubscriptionPushConfigOidcTokenArrayOutputWithContext(ctx context.Context) GetSubscriptionPushConfigOidcTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionPushConfigOidcTokenArrayOutput)
}

func (i GetSubscriptionPushConfigOidcTokenArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionPushConfigOidcToken] {
	return pulumix.Output[[]GetSubscriptionPushConfigOidcToken]{
		OutputState: i.ToGetSubscriptionPushConfigOidcTokenArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSubscriptionPushConfigOidcTokenOutput struct{ *pulumi.OutputState }

func (GetSubscriptionPushConfigOidcTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionPushConfigOidcToken)(nil)).Elem()
}

func (o GetSubscriptionPushConfigOidcTokenOutput) ToGetSubscriptionPushConfigOidcTokenOutput() GetSubscriptionPushConfigOidcTokenOutput {
	return o
}

func (o GetSubscriptionPushConfigOidcTokenOutput) ToGetSubscriptionPushConfigOidcTokenOutputWithContext(ctx context.Context) GetSubscriptionPushConfigOidcTokenOutput {
	return o
}

func (o GetSubscriptionPushConfigOidcTokenOutput) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionPushConfigOidcToken] {
	return pulumix.Output[GetSubscriptionPushConfigOidcToken]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionPushConfigOidcTokenOutput) Audience() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPushConfigOidcToken) string { return v.Audience }).(pulumi.StringOutput)
}

func (o GetSubscriptionPushConfigOidcTokenOutput) ServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPushConfigOidcToken) string { return v.ServiceAccountEmail }).(pulumi.StringOutput)
}

type GetSubscriptionPushConfigOidcTokenArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionPushConfigOidcTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionPushConfigOidcToken)(nil)).Elem()
}

func (o GetSubscriptionPushConfigOidcTokenArrayOutput) ToGetSubscriptionPushConfigOidcTokenArrayOutput() GetSubscriptionPushConfigOidcTokenArrayOutput {
	return o
}

func (o GetSubscriptionPushConfigOidcTokenArrayOutput) ToGetSubscriptionPushConfigOidcTokenArrayOutputWithContext(ctx context.Context) GetSubscriptionPushConfigOidcTokenArrayOutput {
	return o
}

func (o GetSubscriptionPushConfigOidcTokenArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionPushConfigOidcToken] {
	return pulumix.Output[[]GetSubscriptionPushConfigOidcToken]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionPushConfigOidcTokenArrayOutput) Index(i pulumi.IntInput) GetSubscriptionPushConfigOidcTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionPushConfigOidcToken {
		return vs[0].([]GetSubscriptionPushConfigOidcToken)[vs[1].(int)]
	}).(GetSubscriptionPushConfigOidcTokenOutput)
}

type GetSubscriptionRetryPolicy struct {
	MaximumBackoff string `pulumi:"maximumBackoff"`
	MinimumBackoff string `pulumi:"minimumBackoff"`
}

// GetSubscriptionRetryPolicyInput is an input type that accepts GetSubscriptionRetryPolicyArgs and GetSubscriptionRetryPolicyOutput values.
// You can construct a concrete instance of `GetSubscriptionRetryPolicyInput` via:
//
//	GetSubscriptionRetryPolicyArgs{...}
type GetSubscriptionRetryPolicyInput interface {
	pulumi.Input

	ToGetSubscriptionRetryPolicyOutput() GetSubscriptionRetryPolicyOutput
	ToGetSubscriptionRetryPolicyOutputWithContext(context.Context) GetSubscriptionRetryPolicyOutput
}

type GetSubscriptionRetryPolicyArgs struct {
	MaximumBackoff pulumi.StringInput `pulumi:"maximumBackoff"`
	MinimumBackoff pulumi.StringInput `pulumi:"minimumBackoff"`
}

func (GetSubscriptionRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRetryPolicy)(nil)).Elem()
}

func (i GetSubscriptionRetryPolicyArgs) ToGetSubscriptionRetryPolicyOutput() GetSubscriptionRetryPolicyOutput {
	return i.ToGetSubscriptionRetryPolicyOutputWithContext(context.Background())
}

func (i GetSubscriptionRetryPolicyArgs) ToGetSubscriptionRetryPolicyOutputWithContext(ctx context.Context) GetSubscriptionRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRetryPolicyOutput)
}

func (i GetSubscriptionRetryPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionRetryPolicy] {
	return pulumix.Output[GetSubscriptionRetryPolicy]{
		OutputState: i.ToGetSubscriptionRetryPolicyOutputWithContext(ctx).OutputState,
	}
}

// GetSubscriptionRetryPolicyArrayInput is an input type that accepts GetSubscriptionRetryPolicyArray and GetSubscriptionRetryPolicyArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRetryPolicyArrayInput` via:
//
//	GetSubscriptionRetryPolicyArray{ GetSubscriptionRetryPolicyArgs{...} }
type GetSubscriptionRetryPolicyArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRetryPolicyArrayOutput() GetSubscriptionRetryPolicyArrayOutput
	ToGetSubscriptionRetryPolicyArrayOutputWithContext(context.Context) GetSubscriptionRetryPolicyArrayOutput
}

type GetSubscriptionRetryPolicyArray []GetSubscriptionRetryPolicyInput

func (GetSubscriptionRetryPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRetryPolicy)(nil)).Elem()
}

func (i GetSubscriptionRetryPolicyArray) ToGetSubscriptionRetryPolicyArrayOutput() GetSubscriptionRetryPolicyArrayOutput {
	return i.ToGetSubscriptionRetryPolicyArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRetryPolicyArray) ToGetSubscriptionRetryPolicyArrayOutputWithContext(ctx context.Context) GetSubscriptionRetryPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRetryPolicyArrayOutput)
}

func (i GetSubscriptionRetryPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionRetryPolicy] {
	return pulumix.Output[[]GetSubscriptionRetryPolicy]{
		OutputState: i.ToGetSubscriptionRetryPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSubscriptionRetryPolicyOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRetryPolicy)(nil)).Elem()
}

func (o GetSubscriptionRetryPolicyOutput) ToGetSubscriptionRetryPolicyOutput() GetSubscriptionRetryPolicyOutput {
	return o
}

func (o GetSubscriptionRetryPolicyOutput) ToGetSubscriptionRetryPolicyOutputWithContext(ctx context.Context) GetSubscriptionRetryPolicyOutput {
	return o
}

func (o GetSubscriptionRetryPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionRetryPolicy] {
	return pulumix.Output[GetSubscriptionRetryPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionRetryPolicyOutput) MaximumBackoff() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRetryPolicy) string { return v.MaximumBackoff }).(pulumi.StringOutput)
}

func (o GetSubscriptionRetryPolicyOutput) MinimumBackoff() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRetryPolicy) string { return v.MinimumBackoff }).(pulumi.StringOutput)
}

type GetSubscriptionRetryPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRetryPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRetryPolicy)(nil)).Elem()
}

func (o GetSubscriptionRetryPolicyArrayOutput) ToGetSubscriptionRetryPolicyArrayOutput() GetSubscriptionRetryPolicyArrayOutput {
	return o
}

func (o GetSubscriptionRetryPolicyArrayOutput) ToGetSubscriptionRetryPolicyArrayOutputWithContext(ctx context.Context) GetSubscriptionRetryPolicyArrayOutput {
	return o
}

func (o GetSubscriptionRetryPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSubscriptionRetryPolicy] {
	return pulumix.Output[[]GetSubscriptionRetryPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetSubscriptionRetryPolicyArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRetryPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRetryPolicy {
		return vs[0].([]GetSubscriptionRetryPolicy)[vs[1].(int)]
	}).(GetSubscriptionRetryPolicyOutput)
}

type GetTopicMessageStoragePolicy struct {
	AllowedPersistenceRegions []string `pulumi:"allowedPersistenceRegions"`
}

// GetTopicMessageStoragePolicyInput is an input type that accepts GetTopicMessageStoragePolicyArgs and GetTopicMessageStoragePolicyOutput values.
// You can construct a concrete instance of `GetTopicMessageStoragePolicyInput` via:
//
//	GetTopicMessageStoragePolicyArgs{...}
type GetTopicMessageStoragePolicyInput interface {
	pulumi.Input

	ToGetTopicMessageStoragePolicyOutput() GetTopicMessageStoragePolicyOutput
	ToGetTopicMessageStoragePolicyOutputWithContext(context.Context) GetTopicMessageStoragePolicyOutput
}

type GetTopicMessageStoragePolicyArgs struct {
	AllowedPersistenceRegions pulumi.StringArrayInput `pulumi:"allowedPersistenceRegions"`
}

func (GetTopicMessageStoragePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicMessageStoragePolicy)(nil)).Elem()
}

func (i GetTopicMessageStoragePolicyArgs) ToGetTopicMessageStoragePolicyOutput() GetTopicMessageStoragePolicyOutput {
	return i.ToGetTopicMessageStoragePolicyOutputWithContext(context.Background())
}

func (i GetTopicMessageStoragePolicyArgs) ToGetTopicMessageStoragePolicyOutputWithContext(ctx context.Context) GetTopicMessageStoragePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicMessageStoragePolicyOutput)
}

func (i GetTopicMessageStoragePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[GetTopicMessageStoragePolicy] {
	return pulumix.Output[GetTopicMessageStoragePolicy]{
		OutputState: i.ToGetTopicMessageStoragePolicyOutputWithContext(ctx).OutputState,
	}
}

// GetTopicMessageStoragePolicyArrayInput is an input type that accepts GetTopicMessageStoragePolicyArray and GetTopicMessageStoragePolicyArrayOutput values.
// You can construct a concrete instance of `GetTopicMessageStoragePolicyArrayInput` via:
//
//	GetTopicMessageStoragePolicyArray{ GetTopicMessageStoragePolicyArgs{...} }
type GetTopicMessageStoragePolicyArrayInput interface {
	pulumi.Input

	ToGetTopicMessageStoragePolicyArrayOutput() GetTopicMessageStoragePolicyArrayOutput
	ToGetTopicMessageStoragePolicyArrayOutputWithContext(context.Context) GetTopicMessageStoragePolicyArrayOutput
}

type GetTopicMessageStoragePolicyArray []GetTopicMessageStoragePolicyInput

func (GetTopicMessageStoragePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicMessageStoragePolicy)(nil)).Elem()
}

func (i GetTopicMessageStoragePolicyArray) ToGetTopicMessageStoragePolicyArrayOutput() GetTopicMessageStoragePolicyArrayOutput {
	return i.ToGetTopicMessageStoragePolicyArrayOutputWithContext(context.Background())
}

func (i GetTopicMessageStoragePolicyArray) ToGetTopicMessageStoragePolicyArrayOutputWithContext(ctx context.Context) GetTopicMessageStoragePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicMessageStoragePolicyArrayOutput)
}

func (i GetTopicMessageStoragePolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetTopicMessageStoragePolicy] {
	return pulumix.Output[[]GetTopicMessageStoragePolicy]{
		OutputState: i.ToGetTopicMessageStoragePolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetTopicMessageStoragePolicyOutput struct{ *pulumi.OutputState }

func (GetTopicMessageStoragePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicMessageStoragePolicy)(nil)).Elem()
}

func (o GetTopicMessageStoragePolicyOutput) ToGetTopicMessageStoragePolicyOutput() GetTopicMessageStoragePolicyOutput {
	return o
}

func (o GetTopicMessageStoragePolicyOutput) ToGetTopicMessageStoragePolicyOutputWithContext(ctx context.Context) GetTopicMessageStoragePolicyOutput {
	return o
}

func (o GetTopicMessageStoragePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetTopicMessageStoragePolicy] {
	return pulumix.Output[GetTopicMessageStoragePolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetTopicMessageStoragePolicyOutput) AllowedPersistenceRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTopicMessageStoragePolicy) []string { return v.AllowedPersistenceRegions }).(pulumi.StringArrayOutput)
}

type GetTopicMessageStoragePolicyArrayOutput struct{ *pulumi.OutputState }

func (GetTopicMessageStoragePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicMessageStoragePolicy)(nil)).Elem()
}

func (o GetTopicMessageStoragePolicyArrayOutput) ToGetTopicMessageStoragePolicyArrayOutput() GetTopicMessageStoragePolicyArrayOutput {
	return o
}

func (o GetTopicMessageStoragePolicyArrayOutput) ToGetTopicMessageStoragePolicyArrayOutputWithContext(ctx context.Context) GetTopicMessageStoragePolicyArrayOutput {
	return o
}

func (o GetTopicMessageStoragePolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetTopicMessageStoragePolicy] {
	return pulumix.Output[[]GetTopicMessageStoragePolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetTopicMessageStoragePolicyArrayOutput) Index(i pulumi.IntInput) GetTopicMessageStoragePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTopicMessageStoragePolicy {
		return vs[0].([]GetTopicMessageStoragePolicy)[vs[1].(int)]
	}).(GetTopicMessageStoragePolicyOutput)
}

type GetTopicSchemaSetting struct {
	Encoding string `pulumi:"encoding"`
	Schema   string `pulumi:"schema"`
}

// GetTopicSchemaSettingInput is an input type that accepts GetTopicSchemaSettingArgs and GetTopicSchemaSettingOutput values.
// You can construct a concrete instance of `GetTopicSchemaSettingInput` via:
//
//	GetTopicSchemaSettingArgs{...}
type GetTopicSchemaSettingInput interface {
	pulumi.Input

	ToGetTopicSchemaSettingOutput() GetTopicSchemaSettingOutput
	ToGetTopicSchemaSettingOutputWithContext(context.Context) GetTopicSchemaSettingOutput
}

type GetTopicSchemaSettingArgs struct {
	Encoding pulumi.StringInput `pulumi:"encoding"`
	Schema   pulumi.StringInput `pulumi:"schema"`
}

func (GetTopicSchemaSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicSchemaSetting)(nil)).Elem()
}

func (i GetTopicSchemaSettingArgs) ToGetTopicSchemaSettingOutput() GetTopicSchemaSettingOutput {
	return i.ToGetTopicSchemaSettingOutputWithContext(context.Background())
}

func (i GetTopicSchemaSettingArgs) ToGetTopicSchemaSettingOutputWithContext(ctx context.Context) GetTopicSchemaSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicSchemaSettingOutput)
}

func (i GetTopicSchemaSettingArgs) ToOutput(ctx context.Context) pulumix.Output[GetTopicSchemaSetting] {
	return pulumix.Output[GetTopicSchemaSetting]{
		OutputState: i.ToGetTopicSchemaSettingOutputWithContext(ctx).OutputState,
	}
}

// GetTopicSchemaSettingArrayInput is an input type that accepts GetTopicSchemaSettingArray and GetTopicSchemaSettingArrayOutput values.
// You can construct a concrete instance of `GetTopicSchemaSettingArrayInput` via:
//
//	GetTopicSchemaSettingArray{ GetTopicSchemaSettingArgs{...} }
type GetTopicSchemaSettingArrayInput interface {
	pulumi.Input

	ToGetTopicSchemaSettingArrayOutput() GetTopicSchemaSettingArrayOutput
	ToGetTopicSchemaSettingArrayOutputWithContext(context.Context) GetTopicSchemaSettingArrayOutput
}

type GetTopicSchemaSettingArray []GetTopicSchemaSettingInput

func (GetTopicSchemaSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicSchemaSetting)(nil)).Elem()
}

func (i GetTopicSchemaSettingArray) ToGetTopicSchemaSettingArrayOutput() GetTopicSchemaSettingArrayOutput {
	return i.ToGetTopicSchemaSettingArrayOutputWithContext(context.Background())
}

func (i GetTopicSchemaSettingArray) ToGetTopicSchemaSettingArrayOutputWithContext(ctx context.Context) GetTopicSchemaSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicSchemaSettingArrayOutput)
}

func (i GetTopicSchemaSettingArray) ToOutput(ctx context.Context) pulumix.Output[[]GetTopicSchemaSetting] {
	return pulumix.Output[[]GetTopicSchemaSetting]{
		OutputState: i.ToGetTopicSchemaSettingArrayOutputWithContext(ctx).OutputState,
	}
}

type GetTopicSchemaSettingOutput struct{ *pulumi.OutputState }

func (GetTopicSchemaSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicSchemaSetting)(nil)).Elem()
}

func (o GetTopicSchemaSettingOutput) ToGetTopicSchemaSettingOutput() GetTopicSchemaSettingOutput {
	return o
}

func (o GetTopicSchemaSettingOutput) ToGetTopicSchemaSettingOutputWithContext(ctx context.Context) GetTopicSchemaSettingOutput {
	return o
}

func (o GetTopicSchemaSettingOutput) ToOutput(ctx context.Context) pulumix.Output[GetTopicSchemaSetting] {
	return pulumix.Output[GetTopicSchemaSetting]{
		OutputState: o.OutputState,
	}
}

func (o GetTopicSchemaSettingOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicSchemaSetting) string { return v.Encoding }).(pulumi.StringOutput)
}

func (o GetTopicSchemaSettingOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicSchemaSetting) string { return v.Schema }).(pulumi.StringOutput)
}

type GetTopicSchemaSettingArrayOutput struct{ *pulumi.OutputState }

func (GetTopicSchemaSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicSchemaSetting)(nil)).Elem()
}

func (o GetTopicSchemaSettingArrayOutput) ToGetTopicSchemaSettingArrayOutput() GetTopicSchemaSettingArrayOutput {
	return o
}

func (o GetTopicSchemaSettingArrayOutput) ToGetTopicSchemaSettingArrayOutputWithContext(ctx context.Context) GetTopicSchemaSettingArrayOutput {
	return o
}

func (o GetTopicSchemaSettingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetTopicSchemaSetting] {
	return pulumix.Output[[]GetTopicSchemaSetting]{
		OutputState: o.OutputState,
	}
}

func (o GetTopicSchemaSettingArrayOutput) Index(i pulumi.IntInput) GetTopicSchemaSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTopicSchemaSetting {
		return vs[0].([]GetTopicSchemaSetting)[vs[1].(int)]
	}).(GetTopicSchemaSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LiteSubscriptionDeliveryConfigInput)(nil)).Elem(), LiteSubscriptionDeliveryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiteSubscriptionDeliveryConfigPtrInput)(nil)).Elem(), LiteSubscriptionDeliveryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiteTopicPartitionConfigInput)(nil)).Elem(), LiteTopicPartitionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiteTopicPartitionConfigPtrInput)(nil)).Elem(), LiteTopicPartitionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiteTopicPartitionConfigCapacityInput)(nil)).Elem(), LiteTopicPartitionConfigCapacityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiteTopicPartitionConfigCapacityPtrInput)(nil)).Elem(), LiteTopicPartitionConfigCapacityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiteTopicReservationConfigInput)(nil)).Elem(), LiteTopicReservationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiteTopicReservationConfigPtrInput)(nil)).Elem(), LiteTopicReservationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiteTopicRetentionConfigInput)(nil)).Elem(), LiteTopicRetentionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiteTopicRetentionConfigPtrInput)(nil)).Elem(), LiteTopicRetentionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionBigqueryConfigInput)(nil)).Elem(), SubscriptionBigqueryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionBigqueryConfigPtrInput)(nil)).Elem(), SubscriptionBigqueryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionCloudStorageConfigInput)(nil)).Elem(), SubscriptionCloudStorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionCloudStorageConfigPtrInput)(nil)).Elem(), SubscriptionCloudStorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionCloudStorageConfigAvroConfigInput)(nil)).Elem(), SubscriptionCloudStorageConfigAvroConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionCloudStorageConfigAvroConfigPtrInput)(nil)).Elem(), SubscriptionCloudStorageConfigAvroConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionDeadLetterPolicyInput)(nil)).Elem(), SubscriptionDeadLetterPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionDeadLetterPolicyPtrInput)(nil)).Elem(), SubscriptionDeadLetterPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionExpirationPolicyInput)(nil)).Elem(), SubscriptionExpirationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionExpirationPolicyPtrInput)(nil)).Elem(), SubscriptionExpirationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionIAMBindingConditionInput)(nil)).Elem(), SubscriptionIAMBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionIAMBindingConditionPtrInput)(nil)).Elem(), SubscriptionIAMBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionIAMMemberConditionInput)(nil)).Elem(), SubscriptionIAMMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionIAMMemberConditionPtrInput)(nil)).Elem(), SubscriptionIAMMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionPushConfigInput)(nil)).Elem(), SubscriptionPushConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionPushConfigPtrInput)(nil)).Elem(), SubscriptionPushConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionPushConfigNoWrapperInput)(nil)).Elem(), SubscriptionPushConfigNoWrapperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionPushConfigNoWrapperPtrInput)(nil)).Elem(), SubscriptionPushConfigNoWrapperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionPushConfigOidcTokenInput)(nil)).Elem(), SubscriptionPushConfigOidcTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionPushConfigOidcTokenPtrInput)(nil)).Elem(), SubscriptionPushConfigOidcTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionRetryPolicyInput)(nil)).Elem(), SubscriptionRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionRetryPolicyPtrInput)(nil)).Elem(), SubscriptionRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicIAMBindingConditionInput)(nil)).Elem(), TopicIAMBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicIAMBindingConditionPtrInput)(nil)).Elem(), TopicIAMBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicIAMMemberConditionInput)(nil)).Elem(), TopicIAMMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicIAMMemberConditionPtrInput)(nil)).Elem(), TopicIAMMemberConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicMessageStoragePolicyInput)(nil)).Elem(), TopicMessageStoragePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicMessageStoragePolicyPtrInput)(nil)).Elem(), TopicMessageStoragePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSchemaSettingsInput)(nil)).Elem(), TopicSchemaSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSchemaSettingsPtrInput)(nil)).Elem(), TopicSchemaSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionBigqueryConfigInput)(nil)).Elem(), GetSubscriptionBigqueryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionBigqueryConfigArrayInput)(nil)).Elem(), GetSubscriptionBigqueryConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionCloudStorageConfigInput)(nil)).Elem(), GetSubscriptionCloudStorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionCloudStorageConfigArrayInput)(nil)).Elem(), GetSubscriptionCloudStorageConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionCloudStorageConfigAvroConfigInput)(nil)).Elem(), GetSubscriptionCloudStorageConfigAvroConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionCloudStorageConfigAvroConfigArrayInput)(nil)).Elem(), GetSubscriptionCloudStorageConfigAvroConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionDeadLetterPolicyInput)(nil)).Elem(), GetSubscriptionDeadLetterPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionDeadLetterPolicyArrayInput)(nil)).Elem(), GetSubscriptionDeadLetterPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionExpirationPolicyInput)(nil)).Elem(), GetSubscriptionExpirationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionExpirationPolicyArrayInput)(nil)).Elem(), GetSubscriptionExpirationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionPushConfigInput)(nil)).Elem(), GetSubscriptionPushConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionPushConfigArrayInput)(nil)).Elem(), GetSubscriptionPushConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionPushConfigNoWrapperInput)(nil)).Elem(), GetSubscriptionPushConfigNoWrapperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionPushConfigNoWrapperArrayInput)(nil)).Elem(), GetSubscriptionPushConfigNoWrapperArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionPushConfigOidcTokenInput)(nil)).Elem(), GetSubscriptionPushConfigOidcTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionPushConfigOidcTokenArrayInput)(nil)).Elem(), GetSubscriptionPushConfigOidcTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRetryPolicyInput)(nil)).Elem(), GetSubscriptionRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRetryPolicyArrayInput)(nil)).Elem(), GetSubscriptionRetryPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicMessageStoragePolicyInput)(nil)).Elem(), GetTopicMessageStoragePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicMessageStoragePolicyArrayInput)(nil)).Elem(), GetTopicMessageStoragePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicSchemaSettingInput)(nil)).Elem(), GetTopicSchemaSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicSchemaSettingArrayInput)(nil)).Elem(), GetTopicSchemaSettingArray{})
	pulumi.RegisterOutputType(LiteSubscriptionDeliveryConfigOutput{})
	pulumi.RegisterOutputType(LiteSubscriptionDeliveryConfigPtrOutput{})
	pulumi.RegisterOutputType(LiteTopicPartitionConfigOutput{})
	pulumi.RegisterOutputType(LiteTopicPartitionConfigPtrOutput{})
	pulumi.RegisterOutputType(LiteTopicPartitionConfigCapacityOutput{})
	pulumi.RegisterOutputType(LiteTopicPartitionConfigCapacityPtrOutput{})
	pulumi.RegisterOutputType(LiteTopicReservationConfigOutput{})
	pulumi.RegisterOutputType(LiteTopicReservationConfigPtrOutput{})
	pulumi.RegisterOutputType(LiteTopicRetentionConfigOutput{})
	pulumi.RegisterOutputType(LiteTopicRetentionConfigPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionBigqueryConfigOutput{})
	pulumi.RegisterOutputType(SubscriptionBigqueryConfigPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionCloudStorageConfigOutput{})
	pulumi.RegisterOutputType(SubscriptionCloudStorageConfigPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionCloudStorageConfigAvroConfigOutput{})
	pulumi.RegisterOutputType(SubscriptionCloudStorageConfigAvroConfigPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionDeadLetterPolicyOutput{})
	pulumi.RegisterOutputType(SubscriptionDeadLetterPolicyPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionExpirationPolicyOutput{})
	pulumi.RegisterOutputType(SubscriptionExpirationPolicyPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(SubscriptionIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(SubscriptionIAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionPushConfigOutput{})
	pulumi.RegisterOutputType(SubscriptionPushConfigPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionPushConfigNoWrapperOutput{})
	pulumi.RegisterOutputType(SubscriptionPushConfigNoWrapperPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionPushConfigOidcTokenOutput{})
	pulumi.RegisterOutputType(SubscriptionPushConfigOidcTokenPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionRetryPolicyOutput{})
	pulumi.RegisterOutputType(SubscriptionRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(TopicIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(TopicIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(TopicIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(TopicIAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(TopicMessageStoragePolicyOutput{})
	pulumi.RegisterOutputType(TopicMessageStoragePolicyPtrOutput{})
	pulumi.RegisterOutputType(TopicSchemaSettingsOutput{})
	pulumi.RegisterOutputType(TopicSchemaSettingsPtrOutput{})
	pulumi.RegisterOutputType(GetSubscriptionBigqueryConfigOutput{})
	pulumi.RegisterOutputType(GetSubscriptionBigqueryConfigArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionCloudStorageConfigOutput{})
	pulumi.RegisterOutputType(GetSubscriptionCloudStorageConfigArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionCloudStorageConfigAvroConfigOutput{})
	pulumi.RegisterOutputType(GetSubscriptionCloudStorageConfigAvroConfigArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionDeadLetterPolicyOutput{})
	pulumi.RegisterOutputType(GetSubscriptionDeadLetterPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionExpirationPolicyOutput{})
	pulumi.RegisterOutputType(GetSubscriptionExpirationPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionPushConfigOutput{})
	pulumi.RegisterOutputType(GetSubscriptionPushConfigArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionPushConfigNoWrapperOutput{})
	pulumi.RegisterOutputType(GetSubscriptionPushConfigNoWrapperArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionPushConfigOidcTokenOutput{})
	pulumi.RegisterOutputType(GetSubscriptionPushConfigOidcTokenArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRetryPolicyOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRetryPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetTopicMessageStoragePolicyOutput{})
	pulumi.RegisterOutputType(GetTopicMessageStoragePolicyArrayOutput{})
	pulumi.RegisterOutputType(GetTopicSchemaSettingOutput{})
	pulumi.RegisterOutputType(GetTopicSchemaSettingArrayOutput{})
}
