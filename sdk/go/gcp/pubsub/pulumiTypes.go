// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pubsub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type SubscriptionDeadLetterPolicy struct {
	// The name of the topic to which dead letter messages should be published.
	// Format is `projects/{project}/topics/{topic}`.
	// The Cloud Pub/Sub service\naccount associated with the enclosing subscription's
	// parent project (i.e.,
	// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
	// permission to Publish() to this topic.
	// The operation will fail if the topic does not exist.
	// Users should ensure that there is a subscription attached to this topic
	// since messages published to a topic with no subscriptions are lost.
	DeadLetterTopic *string `pulumi:"deadLetterTopic"`
	// The maximum number of delivery attempts for any message. The value must be
	// between 5 and 100.
	// The number of delivery attempts is defined as 1 + (the sum of number of
	// NACKs and number of times the acknowledgement deadline has been exceeded for the message).
	// A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
	// client libraries may automatically extend ack_deadlines.
	// This field will be honored on a best effort basis.
	// If this parameter is 0, a default value of 5 is used.
	MaxDeliveryAttempts *int `pulumi:"maxDeliveryAttempts"`
}

// SubscriptionDeadLetterPolicyInput is an input type that accepts SubscriptionDeadLetterPolicyArgs and SubscriptionDeadLetterPolicyOutput values.
// You can construct a concrete instance of `SubscriptionDeadLetterPolicyInput` via:
//
// 		 SubscriptionDeadLetterPolicyArgs{...}
//
type SubscriptionDeadLetterPolicyInput interface {
	pulumi.Input

	ToSubscriptionDeadLetterPolicyOutput() SubscriptionDeadLetterPolicyOutput
	ToSubscriptionDeadLetterPolicyOutputWithContext(context.Context) SubscriptionDeadLetterPolicyOutput
}

type SubscriptionDeadLetterPolicyArgs struct {
	// The name of the topic to which dead letter messages should be published.
	// Format is `projects/{project}/topics/{topic}`.
	// The Cloud Pub/Sub service\naccount associated with the enclosing subscription's
	// parent project (i.e.,
	// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
	// permission to Publish() to this topic.
	// The operation will fail if the topic does not exist.
	// Users should ensure that there is a subscription attached to this topic
	// since messages published to a topic with no subscriptions are lost.
	DeadLetterTopic pulumi.StringPtrInput `pulumi:"deadLetterTopic"`
	// The maximum number of delivery attempts for any message. The value must be
	// between 5 and 100.
	// The number of delivery attempts is defined as 1 + (the sum of number of
	// NACKs and number of times the acknowledgement deadline has been exceeded for the message).
	// A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
	// client libraries may automatically extend ack_deadlines.
	// This field will be honored on a best effort basis.
	// If this parameter is 0, a default value of 5 is used.
	MaxDeliveryAttempts pulumi.IntPtrInput `pulumi:"maxDeliveryAttempts"`
}

func (SubscriptionDeadLetterPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionDeadLetterPolicy)(nil)).Elem()
}

func (i SubscriptionDeadLetterPolicyArgs) ToSubscriptionDeadLetterPolicyOutput() SubscriptionDeadLetterPolicyOutput {
	return i.ToSubscriptionDeadLetterPolicyOutputWithContext(context.Background())
}

func (i SubscriptionDeadLetterPolicyArgs) ToSubscriptionDeadLetterPolicyOutputWithContext(ctx context.Context) SubscriptionDeadLetterPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionDeadLetterPolicyOutput)
}

func (i SubscriptionDeadLetterPolicyArgs) ToSubscriptionDeadLetterPolicyPtrOutput() SubscriptionDeadLetterPolicyPtrOutput {
	return i.ToSubscriptionDeadLetterPolicyPtrOutputWithContext(context.Background())
}

func (i SubscriptionDeadLetterPolicyArgs) ToSubscriptionDeadLetterPolicyPtrOutputWithContext(ctx context.Context) SubscriptionDeadLetterPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionDeadLetterPolicyOutput).ToSubscriptionDeadLetterPolicyPtrOutputWithContext(ctx)
}

// SubscriptionDeadLetterPolicyPtrInput is an input type that accepts SubscriptionDeadLetterPolicyArgs, SubscriptionDeadLetterPolicyPtr and SubscriptionDeadLetterPolicyPtrOutput values.
// You can construct a concrete instance of `SubscriptionDeadLetterPolicyPtrInput` via:
//
// 		 SubscriptionDeadLetterPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type SubscriptionDeadLetterPolicyPtrInput interface {
	pulumi.Input

	ToSubscriptionDeadLetterPolicyPtrOutput() SubscriptionDeadLetterPolicyPtrOutput
	ToSubscriptionDeadLetterPolicyPtrOutputWithContext(context.Context) SubscriptionDeadLetterPolicyPtrOutput
}

type subscriptionDeadLetterPolicyPtrType SubscriptionDeadLetterPolicyArgs

func SubscriptionDeadLetterPolicyPtr(v *SubscriptionDeadLetterPolicyArgs) SubscriptionDeadLetterPolicyPtrInput {
	return (*subscriptionDeadLetterPolicyPtrType)(v)
}

func (*subscriptionDeadLetterPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionDeadLetterPolicy)(nil)).Elem()
}

func (i *subscriptionDeadLetterPolicyPtrType) ToSubscriptionDeadLetterPolicyPtrOutput() SubscriptionDeadLetterPolicyPtrOutput {
	return i.ToSubscriptionDeadLetterPolicyPtrOutputWithContext(context.Background())
}

func (i *subscriptionDeadLetterPolicyPtrType) ToSubscriptionDeadLetterPolicyPtrOutputWithContext(ctx context.Context) SubscriptionDeadLetterPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionDeadLetterPolicyPtrOutput)
}

type SubscriptionDeadLetterPolicyOutput struct{ *pulumi.OutputState }

func (SubscriptionDeadLetterPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionDeadLetterPolicy)(nil)).Elem()
}

func (o SubscriptionDeadLetterPolicyOutput) ToSubscriptionDeadLetterPolicyOutput() SubscriptionDeadLetterPolicyOutput {
	return o
}

func (o SubscriptionDeadLetterPolicyOutput) ToSubscriptionDeadLetterPolicyOutputWithContext(ctx context.Context) SubscriptionDeadLetterPolicyOutput {
	return o
}

func (o SubscriptionDeadLetterPolicyOutput) ToSubscriptionDeadLetterPolicyPtrOutput() SubscriptionDeadLetterPolicyPtrOutput {
	return o.ToSubscriptionDeadLetterPolicyPtrOutputWithContext(context.Background())
}

func (o SubscriptionDeadLetterPolicyOutput) ToSubscriptionDeadLetterPolicyPtrOutputWithContext(ctx context.Context) SubscriptionDeadLetterPolicyPtrOutput {
	return o.ApplyT(func(v SubscriptionDeadLetterPolicy) *SubscriptionDeadLetterPolicy {
		return &v
	}).(SubscriptionDeadLetterPolicyPtrOutput)
}

// The name of the topic to which dead letter messages should be published.
// Format is `projects/{project}/topics/{topic}`.
// The Cloud Pub/Sub service\naccount associated with the enclosing subscription's
// parent project (i.e.,
// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
// permission to Publish() to this topic.
// The operation will fail if the topic does not exist.
// Users should ensure that there is a subscription attached to this topic
// since messages published to a topic with no subscriptions are lost.
func (o SubscriptionDeadLetterPolicyOutput) DeadLetterTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionDeadLetterPolicy) *string { return v.DeadLetterTopic }).(pulumi.StringPtrOutput)
}

// The maximum number of delivery attempts for any message. The value must be
// between 5 and 100.
// The number of delivery attempts is defined as 1 + (the sum of number of
// NACKs and number of times the acknowledgement deadline has been exceeded for the message).
// A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
// client libraries may automatically extend ack_deadlines.
// This field will be honored on a best effort basis.
// If this parameter is 0, a default value of 5 is used.
func (o SubscriptionDeadLetterPolicyOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SubscriptionDeadLetterPolicy) *int { return v.MaxDeliveryAttempts }).(pulumi.IntPtrOutput)
}

type SubscriptionDeadLetterPolicyPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionDeadLetterPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionDeadLetterPolicy)(nil)).Elem()
}

func (o SubscriptionDeadLetterPolicyPtrOutput) ToSubscriptionDeadLetterPolicyPtrOutput() SubscriptionDeadLetterPolicyPtrOutput {
	return o
}

func (o SubscriptionDeadLetterPolicyPtrOutput) ToSubscriptionDeadLetterPolicyPtrOutputWithContext(ctx context.Context) SubscriptionDeadLetterPolicyPtrOutput {
	return o
}

func (o SubscriptionDeadLetterPolicyPtrOutput) Elem() SubscriptionDeadLetterPolicyOutput {
	return o.ApplyT(func(v *SubscriptionDeadLetterPolicy) SubscriptionDeadLetterPolicy { return *v }).(SubscriptionDeadLetterPolicyOutput)
}

// The name of the topic to which dead letter messages should be published.
// Format is `projects/{project}/topics/{topic}`.
// The Cloud Pub/Sub service\naccount associated with the enclosing subscription's
// parent project (i.e.,
// service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
// permission to Publish() to this topic.
// The operation will fail if the topic does not exist.
// Users should ensure that there is a subscription attached to this topic
// since messages published to a topic with no subscriptions are lost.
func (o SubscriptionDeadLetterPolicyPtrOutput) DeadLetterTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionDeadLetterPolicy) *string {
		if v == nil {
			return nil
		}
		return v.DeadLetterTopic
	}).(pulumi.StringPtrOutput)
}

// The maximum number of delivery attempts for any message. The value must be
// between 5 and 100.
// The number of delivery attempts is defined as 1 + (the sum of number of
// NACKs and number of times the acknowledgement deadline has been exceeded for the message).
// A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
// client libraries may automatically extend ack_deadlines.
// This field will be honored on a best effort basis.
// If this parameter is 0, a default value of 5 is used.
func (o SubscriptionDeadLetterPolicyPtrOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SubscriptionDeadLetterPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryAttempts
	}).(pulumi.IntPtrOutput)
}

type SubscriptionExpirationPolicy struct {
	// Specifies the "time-to-live" duration for an associated resource. The
	// resource expires if it is not active for a period of ttl.
	// If ttl is not set, the associated resource never expires.
	// A duration in seconds with up to nine fractional digits, terminated by 's'.
	// Example - "3.5s".
	Ttl string `pulumi:"ttl"`
}

// SubscriptionExpirationPolicyInput is an input type that accepts SubscriptionExpirationPolicyArgs and SubscriptionExpirationPolicyOutput values.
// You can construct a concrete instance of `SubscriptionExpirationPolicyInput` via:
//
// 		 SubscriptionExpirationPolicyArgs{...}
//
type SubscriptionExpirationPolicyInput interface {
	pulumi.Input

	ToSubscriptionExpirationPolicyOutput() SubscriptionExpirationPolicyOutput
	ToSubscriptionExpirationPolicyOutputWithContext(context.Context) SubscriptionExpirationPolicyOutput
}

type SubscriptionExpirationPolicyArgs struct {
	// Specifies the "time-to-live" duration for an associated resource. The
	// resource expires if it is not active for a period of ttl.
	// If ttl is not set, the associated resource never expires.
	// A duration in seconds with up to nine fractional digits, terminated by 's'.
	// Example - "3.5s".
	Ttl pulumi.StringInput `pulumi:"ttl"`
}

func (SubscriptionExpirationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionExpirationPolicy)(nil)).Elem()
}

func (i SubscriptionExpirationPolicyArgs) ToSubscriptionExpirationPolicyOutput() SubscriptionExpirationPolicyOutput {
	return i.ToSubscriptionExpirationPolicyOutputWithContext(context.Background())
}

func (i SubscriptionExpirationPolicyArgs) ToSubscriptionExpirationPolicyOutputWithContext(ctx context.Context) SubscriptionExpirationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionExpirationPolicyOutput)
}

func (i SubscriptionExpirationPolicyArgs) ToSubscriptionExpirationPolicyPtrOutput() SubscriptionExpirationPolicyPtrOutput {
	return i.ToSubscriptionExpirationPolicyPtrOutputWithContext(context.Background())
}

func (i SubscriptionExpirationPolicyArgs) ToSubscriptionExpirationPolicyPtrOutputWithContext(ctx context.Context) SubscriptionExpirationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionExpirationPolicyOutput).ToSubscriptionExpirationPolicyPtrOutputWithContext(ctx)
}

// SubscriptionExpirationPolicyPtrInput is an input type that accepts SubscriptionExpirationPolicyArgs, SubscriptionExpirationPolicyPtr and SubscriptionExpirationPolicyPtrOutput values.
// You can construct a concrete instance of `SubscriptionExpirationPolicyPtrInput` via:
//
// 		 SubscriptionExpirationPolicyArgs{...}
//
//  or:
//
// 		 nil
//
type SubscriptionExpirationPolicyPtrInput interface {
	pulumi.Input

	ToSubscriptionExpirationPolicyPtrOutput() SubscriptionExpirationPolicyPtrOutput
	ToSubscriptionExpirationPolicyPtrOutputWithContext(context.Context) SubscriptionExpirationPolicyPtrOutput
}

type subscriptionExpirationPolicyPtrType SubscriptionExpirationPolicyArgs

func SubscriptionExpirationPolicyPtr(v *SubscriptionExpirationPolicyArgs) SubscriptionExpirationPolicyPtrInput {
	return (*subscriptionExpirationPolicyPtrType)(v)
}

func (*subscriptionExpirationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionExpirationPolicy)(nil)).Elem()
}

func (i *subscriptionExpirationPolicyPtrType) ToSubscriptionExpirationPolicyPtrOutput() SubscriptionExpirationPolicyPtrOutput {
	return i.ToSubscriptionExpirationPolicyPtrOutputWithContext(context.Background())
}

func (i *subscriptionExpirationPolicyPtrType) ToSubscriptionExpirationPolicyPtrOutputWithContext(ctx context.Context) SubscriptionExpirationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionExpirationPolicyPtrOutput)
}

type SubscriptionExpirationPolicyOutput struct{ *pulumi.OutputState }

func (SubscriptionExpirationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionExpirationPolicy)(nil)).Elem()
}

func (o SubscriptionExpirationPolicyOutput) ToSubscriptionExpirationPolicyOutput() SubscriptionExpirationPolicyOutput {
	return o
}

func (o SubscriptionExpirationPolicyOutput) ToSubscriptionExpirationPolicyOutputWithContext(ctx context.Context) SubscriptionExpirationPolicyOutput {
	return o
}

func (o SubscriptionExpirationPolicyOutput) ToSubscriptionExpirationPolicyPtrOutput() SubscriptionExpirationPolicyPtrOutput {
	return o.ToSubscriptionExpirationPolicyPtrOutputWithContext(context.Background())
}

func (o SubscriptionExpirationPolicyOutput) ToSubscriptionExpirationPolicyPtrOutputWithContext(ctx context.Context) SubscriptionExpirationPolicyPtrOutput {
	return o.ApplyT(func(v SubscriptionExpirationPolicy) *SubscriptionExpirationPolicy {
		return &v
	}).(SubscriptionExpirationPolicyPtrOutput)
}

// Specifies the "time-to-live" duration for an associated resource. The
// resource expires if it is not active for a period of ttl.
// If ttl is not set, the associated resource never expires.
// A duration in seconds with up to nine fractional digits, terminated by 's'.
// Example - "3.5s".
func (o SubscriptionExpirationPolicyOutput) Ttl() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionExpirationPolicy) string { return v.Ttl }).(pulumi.StringOutput)
}

type SubscriptionExpirationPolicyPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionExpirationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionExpirationPolicy)(nil)).Elem()
}

func (o SubscriptionExpirationPolicyPtrOutput) ToSubscriptionExpirationPolicyPtrOutput() SubscriptionExpirationPolicyPtrOutput {
	return o
}

func (o SubscriptionExpirationPolicyPtrOutput) ToSubscriptionExpirationPolicyPtrOutputWithContext(ctx context.Context) SubscriptionExpirationPolicyPtrOutput {
	return o
}

func (o SubscriptionExpirationPolicyPtrOutput) Elem() SubscriptionExpirationPolicyOutput {
	return o.ApplyT(func(v *SubscriptionExpirationPolicy) SubscriptionExpirationPolicy { return *v }).(SubscriptionExpirationPolicyOutput)
}

// Specifies the "time-to-live" duration for an associated resource. The
// resource expires if it is not active for a period of ttl.
// If ttl is not set, the associated resource never expires.
// A duration in seconds with up to nine fractional digits, terminated by 's'.
// Example - "3.5s".
func (o SubscriptionExpirationPolicyPtrOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionExpirationPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Ttl
	}).(pulumi.StringPtrOutput)
}

type SubscriptionIAMBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// SubscriptionIAMBindingConditionInput is an input type that accepts SubscriptionIAMBindingConditionArgs and SubscriptionIAMBindingConditionOutput values.
// You can construct a concrete instance of `SubscriptionIAMBindingConditionInput` via:
//
// 		 SubscriptionIAMBindingConditionArgs{...}
//
type SubscriptionIAMBindingConditionInput interface {
	pulumi.Input

	ToSubscriptionIAMBindingConditionOutput() SubscriptionIAMBindingConditionOutput
	ToSubscriptionIAMBindingConditionOutputWithContext(context.Context) SubscriptionIAMBindingConditionOutput
}

type SubscriptionIAMBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (SubscriptionIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionIAMBindingCondition)(nil)).Elem()
}

func (i SubscriptionIAMBindingConditionArgs) ToSubscriptionIAMBindingConditionOutput() SubscriptionIAMBindingConditionOutput {
	return i.ToSubscriptionIAMBindingConditionOutputWithContext(context.Background())
}

func (i SubscriptionIAMBindingConditionArgs) ToSubscriptionIAMBindingConditionOutputWithContext(ctx context.Context) SubscriptionIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIAMBindingConditionOutput)
}

func (i SubscriptionIAMBindingConditionArgs) ToSubscriptionIAMBindingConditionPtrOutput() SubscriptionIAMBindingConditionPtrOutput {
	return i.ToSubscriptionIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i SubscriptionIAMBindingConditionArgs) ToSubscriptionIAMBindingConditionPtrOutputWithContext(ctx context.Context) SubscriptionIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIAMBindingConditionOutput).ToSubscriptionIAMBindingConditionPtrOutputWithContext(ctx)
}

// SubscriptionIAMBindingConditionPtrInput is an input type that accepts SubscriptionIAMBindingConditionArgs, SubscriptionIAMBindingConditionPtr and SubscriptionIAMBindingConditionPtrOutput values.
// You can construct a concrete instance of `SubscriptionIAMBindingConditionPtrInput` via:
//
// 		 SubscriptionIAMBindingConditionArgs{...}
//
//  or:
//
// 		 nil
//
type SubscriptionIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToSubscriptionIAMBindingConditionPtrOutput() SubscriptionIAMBindingConditionPtrOutput
	ToSubscriptionIAMBindingConditionPtrOutputWithContext(context.Context) SubscriptionIAMBindingConditionPtrOutput
}

type subscriptionIAMBindingConditionPtrType SubscriptionIAMBindingConditionArgs

func SubscriptionIAMBindingConditionPtr(v *SubscriptionIAMBindingConditionArgs) SubscriptionIAMBindingConditionPtrInput {
	return (*subscriptionIAMBindingConditionPtrType)(v)
}

func (*subscriptionIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionIAMBindingCondition)(nil)).Elem()
}

func (i *subscriptionIAMBindingConditionPtrType) ToSubscriptionIAMBindingConditionPtrOutput() SubscriptionIAMBindingConditionPtrOutput {
	return i.ToSubscriptionIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *subscriptionIAMBindingConditionPtrType) ToSubscriptionIAMBindingConditionPtrOutputWithContext(ctx context.Context) SubscriptionIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIAMBindingConditionPtrOutput)
}

type SubscriptionIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (SubscriptionIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionIAMBindingCondition)(nil)).Elem()
}

func (o SubscriptionIAMBindingConditionOutput) ToSubscriptionIAMBindingConditionOutput() SubscriptionIAMBindingConditionOutput {
	return o
}

func (o SubscriptionIAMBindingConditionOutput) ToSubscriptionIAMBindingConditionOutputWithContext(ctx context.Context) SubscriptionIAMBindingConditionOutput {
	return o
}

func (o SubscriptionIAMBindingConditionOutput) ToSubscriptionIAMBindingConditionPtrOutput() SubscriptionIAMBindingConditionPtrOutput {
	return o.ToSubscriptionIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o SubscriptionIAMBindingConditionOutput) ToSubscriptionIAMBindingConditionPtrOutputWithContext(ctx context.Context) SubscriptionIAMBindingConditionPtrOutput {
	return o.ApplyT(func(v SubscriptionIAMBindingCondition) *SubscriptionIAMBindingCondition {
		return &v
	}).(SubscriptionIAMBindingConditionPtrOutput)
}
func (o SubscriptionIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SubscriptionIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o SubscriptionIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type SubscriptionIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionIAMBindingCondition)(nil)).Elem()
}

func (o SubscriptionIAMBindingConditionPtrOutput) ToSubscriptionIAMBindingConditionPtrOutput() SubscriptionIAMBindingConditionPtrOutput {
	return o
}

func (o SubscriptionIAMBindingConditionPtrOutput) ToSubscriptionIAMBindingConditionPtrOutputWithContext(ctx context.Context) SubscriptionIAMBindingConditionPtrOutput {
	return o
}

func (o SubscriptionIAMBindingConditionPtrOutput) Elem() SubscriptionIAMBindingConditionOutput {
	return o.ApplyT(func(v *SubscriptionIAMBindingCondition) SubscriptionIAMBindingCondition { return *v }).(SubscriptionIAMBindingConditionOutput)
}

func (o SubscriptionIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o SubscriptionIAMBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o SubscriptionIAMBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type SubscriptionIAMMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// SubscriptionIAMMemberConditionInput is an input type that accepts SubscriptionIAMMemberConditionArgs and SubscriptionIAMMemberConditionOutput values.
// You can construct a concrete instance of `SubscriptionIAMMemberConditionInput` via:
//
// 		 SubscriptionIAMMemberConditionArgs{...}
//
type SubscriptionIAMMemberConditionInput interface {
	pulumi.Input

	ToSubscriptionIAMMemberConditionOutput() SubscriptionIAMMemberConditionOutput
	ToSubscriptionIAMMemberConditionOutputWithContext(context.Context) SubscriptionIAMMemberConditionOutput
}

type SubscriptionIAMMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (SubscriptionIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionIAMMemberCondition)(nil)).Elem()
}

func (i SubscriptionIAMMemberConditionArgs) ToSubscriptionIAMMemberConditionOutput() SubscriptionIAMMemberConditionOutput {
	return i.ToSubscriptionIAMMemberConditionOutputWithContext(context.Background())
}

func (i SubscriptionIAMMemberConditionArgs) ToSubscriptionIAMMemberConditionOutputWithContext(ctx context.Context) SubscriptionIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIAMMemberConditionOutput)
}

func (i SubscriptionIAMMemberConditionArgs) ToSubscriptionIAMMemberConditionPtrOutput() SubscriptionIAMMemberConditionPtrOutput {
	return i.ToSubscriptionIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i SubscriptionIAMMemberConditionArgs) ToSubscriptionIAMMemberConditionPtrOutputWithContext(ctx context.Context) SubscriptionIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIAMMemberConditionOutput).ToSubscriptionIAMMemberConditionPtrOutputWithContext(ctx)
}

// SubscriptionIAMMemberConditionPtrInput is an input type that accepts SubscriptionIAMMemberConditionArgs, SubscriptionIAMMemberConditionPtr and SubscriptionIAMMemberConditionPtrOutput values.
// You can construct a concrete instance of `SubscriptionIAMMemberConditionPtrInput` via:
//
// 		 SubscriptionIAMMemberConditionArgs{...}
//
//  or:
//
// 		 nil
//
type SubscriptionIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToSubscriptionIAMMemberConditionPtrOutput() SubscriptionIAMMemberConditionPtrOutput
	ToSubscriptionIAMMemberConditionPtrOutputWithContext(context.Context) SubscriptionIAMMemberConditionPtrOutput
}

type subscriptionIAMMemberConditionPtrType SubscriptionIAMMemberConditionArgs

func SubscriptionIAMMemberConditionPtr(v *SubscriptionIAMMemberConditionArgs) SubscriptionIAMMemberConditionPtrInput {
	return (*subscriptionIAMMemberConditionPtrType)(v)
}

func (*subscriptionIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionIAMMemberCondition)(nil)).Elem()
}

func (i *subscriptionIAMMemberConditionPtrType) ToSubscriptionIAMMemberConditionPtrOutput() SubscriptionIAMMemberConditionPtrOutput {
	return i.ToSubscriptionIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *subscriptionIAMMemberConditionPtrType) ToSubscriptionIAMMemberConditionPtrOutputWithContext(ctx context.Context) SubscriptionIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIAMMemberConditionPtrOutput)
}

type SubscriptionIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (SubscriptionIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionIAMMemberCondition)(nil)).Elem()
}

func (o SubscriptionIAMMemberConditionOutput) ToSubscriptionIAMMemberConditionOutput() SubscriptionIAMMemberConditionOutput {
	return o
}

func (o SubscriptionIAMMemberConditionOutput) ToSubscriptionIAMMemberConditionOutputWithContext(ctx context.Context) SubscriptionIAMMemberConditionOutput {
	return o
}

func (o SubscriptionIAMMemberConditionOutput) ToSubscriptionIAMMemberConditionPtrOutput() SubscriptionIAMMemberConditionPtrOutput {
	return o.ToSubscriptionIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o SubscriptionIAMMemberConditionOutput) ToSubscriptionIAMMemberConditionPtrOutputWithContext(ctx context.Context) SubscriptionIAMMemberConditionPtrOutput {
	return o.ApplyT(func(v SubscriptionIAMMemberCondition) *SubscriptionIAMMemberCondition {
		return &v
	}).(SubscriptionIAMMemberConditionPtrOutput)
}
func (o SubscriptionIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SubscriptionIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o SubscriptionIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type SubscriptionIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionIAMMemberCondition)(nil)).Elem()
}

func (o SubscriptionIAMMemberConditionPtrOutput) ToSubscriptionIAMMemberConditionPtrOutput() SubscriptionIAMMemberConditionPtrOutput {
	return o
}

func (o SubscriptionIAMMemberConditionPtrOutput) ToSubscriptionIAMMemberConditionPtrOutputWithContext(ctx context.Context) SubscriptionIAMMemberConditionPtrOutput {
	return o
}

func (o SubscriptionIAMMemberConditionPtrOutput) Elem() SubscriptionIAMMemberConditionOutput {
	return o.ApplyT(func(v *SubscriptionIAMMemberCondition) SubscriptionIAMMemberCondition { return *v }).(SubscriptionIAMMemberConditionOutput)
}

func (o SubscriptionIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o SubscriptionIAMMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o SubscriptionIAMMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type SubscriptionPushConfig struct {
	// Endpoint configuration attributes.
	// Every endpoint has a set of API supported attributes that can
	// be used to control different aspects of the message delivery.
	// The currently supported attribute is x-goog-version, which you
	// can use to change the format of the pushed message. This
	// attribute indicates the version of the data expected by
	// the endpoint. This controls the shape of the pushed message
	// (i.e., its fields and metadata). The endpoint version is
	// based on the version of the Pub/Sub API.
	// If not present during the subscriptions.create call,
	// it will default to the version of the API used to make
	// such call. If not present during a subscriptions.modifyPushConfig
	// call, its value will not be changed. subscriptions.get
	// calls will always return a valid version, even if the
	// subscription was created without this attribute.
	// The possible values for this attribute are:
	// - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
	// - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
	Attributes map[string]string `pulumi:"attributes"`
	// If specified, Pub/Sub will generate and attach an OIDC JWT token as
	// an Authorization header in the HTTP request for every pushed message.  Structure is documented below.
	OidcToken *SubscriptionPushConfigOidcToken `pulumi:"oidcToken"`
	// A URL locating the endpoint to which messages should be pushed.
	// For example, a Webhook endpoint might use
	// "https://example.com/push".
	PushEndpoint string `pulumi:"pushEndpoint"`
}

// SubscriptionPushConfigInput is an input type that accepts SubscriptionPushConfigArgs and SubscriptionPushConfigOutput values.
// You can construct a concrete instance of `SubscriptionPushConfigInput` via:
//
// 		 SubscriptionPushConfigArgs{...}
//
type SubscriptionPushConfigInput interface {
	pulumi.Input

	ToSubscriptionPushConfigOutput() SubscriptionPushConfigOutput
	ToSubscriptionPushConfigOutputWithContext(context.Context) SubscriptionPushConfigOutput
}

type SubscriptionPushConfigArgs struct {
	// Endpoint configuration attributes.
	// Every endpoint has a set of API supported attributes that can
	// be used to control different aspects of the message delivery.
	// The currently supported attribute is x-goog-version, which you
	// can use to change the format of the pushed message. This
	// attribute indicates the version of the data expected by
	// the endpoint. This controls the shape of the pushed message
	// (i.e., its fields and metadata). The endpoint version is
	// based on the version of the Pub/Sub API.
	// If not present during the subscriptions.create call,
	// it will default to the version of the API used to make
	// such call. If not present during a subscriptions.modifyPushConfig
	// call, its value will not be changed. subscriptions.get
	// calls will always return a valid version, even if the
	// subscription was created without this attribute.
	// The possible values for this attribute are:
	// - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
	// - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
	Attributes pulumi.StringMapInput `pulumi:"attributes"`
	// If specified, Pub/Sub will generate and attach an OIDC JWT token as
	// an Authorization header in the HTTP request for every pushed message.  Structure is documented below.
	OidcToken SubscriptionPushConfigOidcTokenPtrInput `pulumi:"oidcToken"`
	// A URL locating the endpoint to which messages should be pushed.
	// For example, a Webhook endpoint might use
	// "https://example.com/push".
	PushEndpoint pulumi.StringInput `pulumi:"pushEndpoint"`
}

func (SubscriptionPushConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionPushConfig)(nil)).Elem()
}

func (i SubscriptionPushConfigArgs) ToSubscriptionPushConfigOutput() SubscriptionPushConfigOutput {
	return i.ToSubscriptionPushConfigOutputWithContext(context.Background())
}

func (i SubscriptionPushConfigArgs) ToSubscriptionPushConfigOutputWithContext(ctx context.Context) SubscriptionPushConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPushConfigOutput)
}

func (i SubscriptionPushConfigArgs) ToSubscriptionPushConfigPtrOutput() SubscriptionPushConfigPtrOutput {
	return i.ToSubscriptionPushConfigPtrOutputWithContext(context.Background())
}

func (i SubscriptionPushConfigArgs) ToSubscriptionPushConfigPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPushConfigOutput).ToSubscriptionPushConfigPtrOutputWithContext(ctx)
}

// SubscriptionPushConfigPtrInput is an input type that accepts SubscriptionPushConfigArgs, SubscriptionPushConfigPtr and SubscriptionPushConfigPtrOutput values.
// You can construct a concrete instance of `SubscriptionPushConfigPtrInput` via:
//
// 		 SubscriptionPushConfigArgs{...}
//
//  or:
//
// 		 nil
//
type SubscriptionPushConfigPtrInput interface {
	pulumi.Input

	ToSubscriptionPushConfigPtrOutput() SubscriptionPushConfigPtrOutput
	ToSubscriptionPushConfigPtrOutputWithContext(context.Context) SubscriptionPushConfigPtrOutput
}

type subscriptionPushConfigPtrType SubscriptionPushConfigArgs

func SubscriptionPushConfigPtr(v *SubscriptionPushConfigArgs) SubscriptionPushConfigPtrInput {
	return (*subscriptionPushConfigPtrType)(v)
}

func (*subscriptionPushConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPushConfig)(nil)).Elem()
}

func (i *subscriptionPushConfigPtrType) ToSubscriptionPushConfigPtrOutput() SubscriptionPushConfigPtrOutput {
	return i.ToSubscriptionPushConfigPtrOutputWithContext(context.Background())
}

func (i *subscriptionPushConfigPtrType) ToSubscriptionPushConfigPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPushConfigPtrOutput)
}

type SubscriptionPushConfigOutput struct{ *pulumi.OutputState }

func (SubscriptionPushConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionPushConfig)(nil)).Elem()
}

func (o SubscriptionPushConfigOutput) ToSubscriptionPushConfigOutput() SubscriptionPushConfigOutput {
	return o
}

func (o SubscriptionPushConfigOutput) ToSubscriptionPushConfigOutputWithContext(ctx context.Context) SubscriptionPushConfigOutput {
	return o
}

func (o SubscriptionPushConfigOutput) ToSubscriptionPushConfigPtrOutput() SubscriptionPushConfigPtrOutput {
	return o.ToSubscriptionPushConfigPtrOutputWithContext(context.Background())
}

func (o SubscriptionPushConfigOutput) ToSubscriptionPushConfigPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigPtrOutput {
	return o.ApplyT(func(v SubscriptionPushConfig) *SubscriptionPushConfig {
		return &v
	}).(SubscriptionPushConfigPtrOutput)
}

// Endpoint configuration attributes.
// Every endpoint has a set of API supported attributes that can
// be used to control different aspects of the message delivery.
// The currently supported attribute is x-goog-version, which you
// can use to change the format of the pushed message. This
// attribute indicates the version of the data expected by
// the endpoint. This controls the shape of the pushed message
// (i.e., its fields and metadata). The endpoint version is
// based on the version of the Pub/Sub API.
// If not present during the subscriptions.create call,
// it will default to the version of the API used to make
// such call. If not present during a subscriptions.modifyPushConfig
// call, its value will not be changed. subscriptions.get
// calls will always return a valid version, even if the
// subscription was created without this attribute.
// The possible values for this attribute are:
// - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
// - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
func (o SubscriptionPushConfigOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v SubscriptionPushConfig) map[string]string { return v.Attributes }).(pulumi.StringMapOutput)
}

// If specified, Pub/Sub will generate and attach an OIDC JWT token as
// an Authorization header in the HTTP request for every pushed message.  Structure is documented below.
func (o SubscriptionPushConfigOutput) OidcToken() SubscriptionPushConfigOidcTokenPtrOutput {
	return o.ApplyT(func(v SubscriptionPushConfig) *SubscriptionPushConfigOidcToken { return v.OidcToken }).(SubscriptionPushConfigOidcTokenPtrOutput)
}

// A URL locating the endpoint to which messages should be pushed.
// For example, a Webhook endpoint might use
// "https://example.com/push".
func (o SubscriptionPushConfigOutput) PushEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionPushConfig) string { return v.PushEndpoint }).(pulumi.StringOutput)
}

type SubscriptionPushConfigPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionPushConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPushConfig)(nil)).Elem()
}

func (o SubscriptionPushConfigPtrOutput) ToSubscriptionPushConfigPtrOutput() SubscriptionPushConfigPtrOutput {
	return o
}

func (o SubscriptionPushConfigPtrOutput) ToSubscriptionPushConfigPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigPtrOutput {
	return o
}

func (o SubscriptionPushConfigPtrOutput) Elem() SubscriptionPushConfigOutput {
	return o.ApplyT(func(v *SubscriptionPushConfig) SubscriptionPushConfig { return *v }).(SubscriptionPushConfigOutput)
}

// Endpoint configuration attributes.
// Every endpoint has a set of API supported attributes that can
// be used to control different aspects of the message delivery.
// The currently supported attribute is x-goog-version, which you
// can use to change the format of the pushed message. This
// attribute indicates the version of the data expected by
// the endpoint. This controls the shape of the pushed message
// (i.e., its fields and metadata). The endpoint version is
// based on the version of the Pub/Sub API.
// If not present during the subscriptions.create call,
// it will default to the version of the API used to make
// such call. If not present during a subscriptions.modifyPushConfig
// call, its value will not be changed. subscriptions.get
// calls will always return a valid version, even if the
// subscription was created without this attribute.
// The possible values for this attribute are:
// - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
// - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
func (o SubscriptionPushConfigPtrOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SubscriptionPushConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(pulumi.StringMapOutput)
}

// If specified, Pub/Sub will generate and attach an OIDC JWT token as
// an Authorization header in the HTTP request for every pushed message.  Structure is documented below.
func (o SubscriptionPushConfigPtrOutput) OidcToken() SubscriptionPushConfigOidcTokenPtrOutput {
	return o.ApplyT(func(v *SubscriptionPushConfig) *SubscriptionPushConfigOidcToken {
		if v == nil {
			return nil
		}
		return v.OidcToken
	}).(SubscriptionPushConfigOidcTokenPtrOutput)
}

// A URL locating the endpoint to which messages should be pushed.
// For example, a Webhook endpoint might use
// "https://example.com/push".
func (o SubscriptionPushConfigPtrOutput) PushEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPushConfig) *string {
		if v == nil {
			return nil
		}
		return &v.PushEndpoint
	}).(pulumi.StringPtrOutput)
}

type SubscriptionPushConfigOidcToken struct {
	// Audience to be used when generating OIDC token. The audience claim
	// identifies the recipients that the JWT is intended for. The audience
	// value is a single case-sensitive string. Having multiple values (array)
	// for the audience field is not supported. More info about the OIDC JWT
	// token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
	// Note: if not specified, the Push endpoint URL will be used.
	Audience *string `pulumi:"audience"`
	// Service account email to be used for generating the OIDC token.
	// The caller (for subscriptions.create, subscriptions.patch, and
	// subscriptions.modifyPushConfig RPCs) must have the
	// iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail string `pulumi:"serviceAccountEmail"`
}

// SubscriptionPushConfigOidcTokenInput is an input type that accepts SubscriptionPushConfigOidcTokenArgs and SubscriptionPushConfigOidcTokenOutput values.
// You can construct a concrete instance of `SubscriptionPushConfigOidcTokenInput` via:
//
// 		 SubscriptionPushConfigOidcTokenArgs{...}
//
type SubscriptionPushConfigOidcTokenInput interface {
	pulumi.Input

	ToSubscriptionPushConfigOidcTokenOutput() SubscriptionPushConfigOidcTokenOutput
	ToSubscriptionPushConfigOidcTokenOutputWithContext(context.Context) SubscriptionPushConfigOidcTokenOutput
}

type SubscriptionPushConfigOidcTokenArgs struct {
	// Audience to be used when generating OIDC token. The audience claim
	// identifies the recipients that the JWT is intended for. The audience
	// value is a single case-sensitive string. Having multiple values (array)
	// for the audience field is not supported. More info about the OIDC JWT
	// token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
	// Note: if not specified, the Push endpoint URL will be used.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// Service account email to be used for generating the OIDC token.
	// The caller (for subscriptions.create, subscriptions.patch, and
	// subscriptions.modifyPushConfig RPCs) must have the
	// iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail pulumi.StringInput `pulumi:"serviceAccountEmail"`
}

func (SubscriptionPushConfigOidcTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionPushConfigOidcToken)(nil)).Elem()
}

func (i SubscriptionPushConfigOidcTokenArgs) ToSubscriptionPushConfigOidcTokenOutput() SubscriptionPushConfigOidcTokenOutput {
	return i.ToSubscriptionPushConfigOidcTokenOutputWithContext(context.Background())
}

func (i SubscriptionPushConfigOidcTokenArgs) ToSubscriptionPushConfigOidcTokenOutputWithContext(ctx context.Context) SubscriptionPushConfigOidcTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPushConfigOidcTokenOutput)
}

func (i SubscriptionPushConfigOidcTokenArgs) ToSubscriptionPushConfigOidcTokenPtrOutput() SubscriptionPushConfigOidcTokenPtrOutput {
	return i.ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(context.Background())
}

func (i SubscriptionPushConfigOidcTokenArgs) ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigOidcTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPushConfigOidcTokenOutput).ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(ctx)
}

// SubscriptionPushConfigOidcTokenPtrInput is an input type that accepts SubscriptionPushConfigOidcTokenArgs, SubscriptionPushConfigOidcTokenPtr and SubscriptionPushConfigOidcTokenPtrOutput values.
// You can construct a concrete instance of `SubscriptionPushConfigOidcTokenPtrInput` via:
//
// 		 SubscriptionPushConfigOidcTokenArgs{...}
//
//  or:
//
// 		 nil
//
type SubscriptionPushConfigOidcTokenPtrInput interface {
	pulumi.Input

	ToSubscriptionPushConfigOidcTokenPtrOutput() SubscriptionPushConfigOidcTokenPtrOutput
	ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(context.Context) SubscriptionPushConfigOidcTokenPtrOutput
}

type subscriptionPushConfigOidcTokenPtrType SubscriptionPushConfigOidcTokenArgs

func SubscriptionPushConfigOidcTokenPtr(v *SubscriptionPushConfigOidcTokenArgs) SubscriptionPushConfigOidcTokenPtrInput {
	return (*subscriptionPushConfigOidcTokenPtrType)(v)
}

func (*subscriptionPushConfigOidcTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPushConfigOidcToken)(nil)).Elem()
}

func (i *subscriptionPushConfigOidcTokenPtrType) ToSubscriptionPushConfigOidcTokenPtrOutput() SubscriptionPushConfigOidcTokenPtrOutput {
	return i.ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(context.Background())
}

func (i *subscriptionPushConfigOidcTokenPtrType) ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigOidcTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPushConfigOidcTokenPtrOutput)
}

type SubscriptionPushConfigOidcTokenOutput struct{ *pulumi.OutputState }

func (SubscriptionPushConfigOidcTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionPushConfigOidcToken)(nil)).Elem()
}

func (o SubscriptionPushConfigOidcTokenOutput) ToSubscriptionPushConfigOidcTokenOutput() SubscriptionPushConfigOidcTokenOutput {
	return o
}

func (o SubscriptionPushConfigOidcTokenOutput) ToSubscriptionPushConfigOidcTokenOutputWithContext(ctx context.Context) SubscriptionPushConfigOidcTokenOutput {
	return o
}

func (o SubscriptionPushConfigOidcTokenOutput) ToSubscriptionPushConfigOidcTokenPtrOutput() SubscriptionPushConfigOidcTokenPtrOutput {
	return o.ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(context.Background())
}

func (o SubscriptionPushConfigOidcTokenOutput) ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigOidcTokenPtrOutput {
	return o.ApplyT(func(v SubscriptionPushConfigOidcToken) *SubscriptionPushConfigOidcToken {
		return &v
	}).(SubscriptionPushConfigOidcTokenPtrOutput)
}

// Audience to be used when generating OIDC token. The audience claim
// identifies the recipients that the JWT is intended for. The audience
// value is a single case-sensitive string. Having multiple values (array)
// for the audience field is not supported. More info about the OIDC JWT
// token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
// Note: if not specified, the Push endpoint URL will be used.
func (o SubscriptionPushConfigOidcTokenOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionPushConfigOidcToken) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

// Service account email to be used for generating the OIDC token.
// The caller (for subscriptions.create, subscriptions.patch, and
// subscriptions.modifyPushConfig RPCs) must have the
// iam.serviceAccounts.actAs permission for the service account.
func (o SubscriptionPushConfigOidcTokenOutput) ServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionPushConfigOidcToken) string { return v.ServiceAccountEmail }).(pulumi.StringOutput)
}

type SubscriptionPushConfigOidcTokenPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionPushConfigOidcTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPushConfigOidcToken)(nil)).Elem()
}

func (o SubscriptionPushConfigOidcTokenPtrOutput) ToSubscriptionPushConfigOidcTokenPtrOutput() SubscriptionPushConfigOidcTokenPtrOutput {
	return o
}

func (o SubscriptionPushConfigOidcTokenPtrOutput) ToSubscriptionPushConfigOidcTokenPtrOutputWithContext(ctx context.Context) SubscriptionPushConfigOidcTokenPtrOutput {
	return o
}

func (o SubscriptionPushConfigOidcTokenPtrOutput) Elem() SubscriptionPushConfigOidcTokenOutput {
	return o.ApplyT(func(v *SubscriptionPushConfigOidcToken) SubscriptionPushConfigOidcToken { return *v }).(SubscriptionPushConfigOidcTokenOutput)
}

// Audience to be used when generating OIDC token. The audience claim
// identifies the recipients that the JWT is intended for. The audience
// value is a single case-sensitive string. Having multiple values (array)
// for the audience field is not supported. More info about the OIDC JWT
// token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
// Note: if not specified, the Push endpoint URL will be used.
func (o SubscriptionPushConfigOidcTokenPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPushConfigOidcToken) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// Service account email to be used for generating the OIDC token.
// The caller (for subscriptions.create, subscriptions.patch, and
// subscriptions.modifyPushConfig RPCs) must have the
// iam.serviceAccounts.actAs permission for the service account.
func (o SubscriptionPushConfigOidcTokenPtrOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPushConfigOidcToken) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

type TopicIAMBindingCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// TopicIAMBindingConditionInput is an input type that accepts TopicIAMBindingConditionArgs and TopicIAMBindingConditionOutput values.
// You can construct a concrete instance of `TopicIAMBindingConditionInput` via:
//
// 		 TopicIAMBindingConditionArgs{...}
//
type TopicIAMBindingConditionInput interface {
	pulumi.Input

	ToTopicIAMBindingConditionOutput() TopicIAMBindingConditionOutput
	ToTopicIAMBindingConditionOutputWithContext(context.Context) TopicIAMBindingConditionOutput
}

type TopicIAMBindingConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (TopicIAMBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicIAMBindingCondition)(nil)).Elem()
}

func (i TopicIAMBindingConditionArgs) ToTopicIAMBindingConditionOutput() TopicIAMBindingConditionOutput {
	return i.ToTopicIAMBindingConditionOutputWithContext(context.Background())
}

func (i TopicIAMBindingConditionArgs) ToTopicIAMBindingConditionOutputWithContext(ctx context.Context) TopicIAMBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMBindingConditionOutput)
}

func (i TopicIAMBindingConditionArgs) ToTopicIAMBindingConditionPtrOutput() TopicIAMBindingConditionPtrOutput {
	return i.ToTopicIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i TopicIAMBindingConditionArgs) ToTopicIAMBindingConditionPtrOutputWithContext(ctx context.Context) TopicIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMBindingConditionOutput).ToTopicIAMBindingConditionPtrOutputWithContext(ctx)
}

// TopicIAMBindingConditionPtrInput is an input type that accepts TopicIAMBindingConditionArgs, TopicIAMBindingConditionPtr and TopicIAMBindingConditionPtrOutput values.
// You can construct a concrete instance of `TopicIAMBindingConditionPtrInput` via:
//
// 		 TopicIAMBindingConditionArgs{...}
//
//  or:
//
// 		 nil
//
type TopicIAMBindingConditionPtrInput interface {
	pulumi.Input

	ToTopicIAMBindingConditionPtrOutput() TopicIAMBindingConditionPtrOutput
	ToTopicIAMBindingConditionPtrOutputWithContext(context.Context) TopicIAMBindingConditionPtrOutput
}

type topicIAMBindingConditionPtrType TopicIAMBindingConditionArgs

func TopicIAMBindingConditionPtr(v *TopicIAMBindingConditionArgs) TopicIAMBindingConditionPtrInput {
	return (*topicIAMBindingConditionPtrType)(v)
}

func (*topicIAMBindingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicIAMBindingCondition)(nil)).Elem()
}

func (i *topicIAMBindingConditionPtrType) ToTopicIAMBindingConditionPtrOutput() TopicIAMBindingConditionPtrOutput {
	return i.ToTopicIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (i *topicIAMBindingConditionPtrType) ToTopicIAMBindingConditionPtrOutputWithContext(ctx context.Context) TopicIAMBindingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMBindingConditionPtrOutput)
}

type TopicIAMBindingConditionOutput struct{ *pulumi.OutputState }

func (TopicIAMBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicIAMBindingCondition)(nil)).Elem()
}

func (o TopicIAMBindingConditionOutput) ToTopicIAMBindingConditionOutput() TopicIAMBindingConditionOutput {
	return o
}

func (o TopicIAMBindingConditionOutput) ToTopicIAMBindingConditionOutputWithContext(ctx context.Context) TopicIAMBindingConditionOutput {
	return o
}

func (o TopicIAMBindingConditionOutput) ToTopicIAMBindingConditionPtrOutput() TopicIAMBindingConditionPtrOutput {
	return o.ToTopicIAMBindingConditionPtrOutputWithContext(context.Background())
}

func (o TopicIAMBindingConditionOutput) ToTopicIAMBindingConditionPtrOutputWithContext(ctx context.Context) TopicIAMBindingConditionPtrOutput {
	return o.ApplyT(func(v TopicIAMBindingCondition) *TopicIAMBindingCondition {
		return &v
	}).(TopicIAMBindingConditionPtrOutput)
}
func (o TopicIAMBindingConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicIAMBindingCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TopicIAMBindingConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TopicIAMBindingCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o TopicIAMBindingConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TopicIAMBindingCondition) string { return v.Title }).(pulumi.StringOutput)
}

type TopicIAMBindingConditionPtrOutput struct{ *pulumi.OutputState }

func (TopicIAMBindingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicIAMBindingCondition)(nil)).Elem()
}

func (o TopicIAMBindingConditionPtrOutput) ToTopicIAMBindingConditionPtrOutput() TopicIAMBindingConditionPtrOutput {
	return o
}

func (o TopicIAMBindingConditionPtrOutput) ToTopicIAMBindingConditionPtrOutputWithContext(ctx context.Context) TopicIAMBindingConditionPtrOutput {
	return o
}

func (o TopicIAMBindingConditionPtrOutput) Elem() TopicIAMBindingConditionOutput {
	return o.ApplyT(func(v *TopicIAMBindingCondition) TopicIAMBindingCondition { return *v }).(TopicIAMBindingConditionOutput)
}

func (o TopicIAMBindingConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o TopicIAMBindingConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o TopicIAMBindingConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicIAMBindingCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type TopicIAMMemberCondition struct {
	Description *string `pulumi:"description"`
	Expression  string  `pulumi:"expression"`
	Title       string  `pulumi:"title"`
}

// TopicIAMMemberConditionInput is an input type that accepts TopicIAMMemberConditionArgs and TopicIAMMemberConditionOutput values.
// You can construct a concrete instance of `TopicIAMMemberConditionInput` via:
//
// 		 TopicIAMMemberConditionArgs{...}
//
type TopicIAMMemberConditionInput interface {
	pulumi.Input

	ToTopicIAMMemberConditionOutput() TopicIAMMemberConditionOutput
	ToTopicIAMMemberConditionOutputWithContext(context.Context) TopicIAMMemberConditionOutput
}

type TopicIAMMemberConditionArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Expression  pulumi.StringInput    `pulumi:"expression"`
	Title       pulumi.StringInput    `pulumi:"title"`
}

func (TopicIAMMemberConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicIAMMemberCondition)(nil)).Elem()
}

func (i TopicIAMMemberConditionArgs) ToTopicIAMMemberConditionOutput() TopicIAMMemberConditionOutput {
	return i.ToTopicIAMMemberConditionOutputWithContext(context.Background())
}

func (i TopicIAMMemberConditionArgs) ToTopicIAMMemberConditionOutputWithContext(ctx context.Context) TopicIAMMemberConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMMemberConditionOutput)
}

func (i TopicIAMMemberConditionArgs) ToTopicIAMMemberConditionPtrOutput() TopicIAMMemberConditionPtrOutput {
	return i.ToTopicIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i TopicIAMMemberConditionArgs) ToTopicIAMMemberConditionPtrOutputWithContext(ctx context.Context) TopicIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMMemberConditionOutput).ToTopicIAMMemberConditionPtrOutputWithContext(ctx)
}

// TopicIAMMemberConditionPtrInput is an input type that accepts TopicIAMMemberConditionArgs, TopicIAMMemberConditionPtr and TopicIAMMemberConditionPtrOutput values.
// You can construct a concrete instance of `TopicIAMMemberConditionPtrInput` via:
//
// 		 TopicIAMMemberConditionArgs{...}
//
//  or:
//
// 		 nil
//
type TopicIAMMemberConditionPtrInput interface {
	pulumi.Input

	ToTopicIAMMemberConditionPtrOutput() TopicIAMMemberConditionPtrOutput
	ToTopicIAMMemberConditionPtrOutputWithContext(context.Context) TopicIAMMemberConditionPtrOutput
}

type topicIAMMemberConditionPtrType TopicIAMMemberConditionArgs

func TopicIAMMemberConditionPtr(v *TopicIAMMemberConditionArgs) TopicIAMMemberConditionPtrInput {
	return (*topicIAMMemberConditionPtrType)(v)
}

func (*topicIAMMemberConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicIAMMemberCondition)(nil)).Elem()
}

func (i *topicIAMMemberConditionPtrType) ToTopicIAMMemberConditionPtrOutput() TopicIAMMemberConditionPtrOutput {
	return i.ToTopicIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (i *topicIAMMemberConditionPtrType) ToTopicIAMMemberConditionPtrOutputWithContext(ctx context.Context) TopicIAMMemberConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicIAMMemberConditionPtrOutput)
}

type TopicIAMMemberConditionOutput struct{ *pulumi.OutputState }

func (TopicIAMMemberConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicIAMMemberCondition)(nil)).Elem()
}

func (o TopicIAMMemberConditionOutput) ToTopicIAMMemberConditionOutput() TopicIAMMemberConditionOutput {
	return o
}

func (o TopicIAMMemberConditionOutput) ToTopicIAMMemberConditionOutputWithContext(ctx context.Context) TopicIAMMemberConditionOutput {
	return o
}

func (o TopicIAMMemberConditionOutput) ToTopicIAMMemberConditionPtrOutput() TopicIAMMemberConditionPtrOutput {
	return o.ToTopicIAMMemberConditionPtrOutputWithContext(context.Background())
}

func (o TopicIAMMemberConditionOutput) ToTopicIAMMemberConditionPtrOutputWithContext(ctx context.Context) TopicIAMMemberConditionPtrOutput {
	return o.ApplyT(func(v TopicIAMMemberCondition) *TopicIAMMemberCondition {
		return &v
	}).(TopicIAMMemberConditionPtrOutput)
}
func (o TopicIAMMemberConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicIAMMemberCondition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TopicIAMMemberConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TopicIAMMemberCondition) string { return v.Expression }).(pulumi.StringOutput)
}

func (o TopicIAMMemberConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TopicIAMMemberCondition) string { return v.Title }).(pulumi.StringOutput)
}

type TopicIAMMemberConditionPtrOutput struct{ *pulumi.OutputState }

func (TopicIAMMemberConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicIAMMemberCondition)(nil)).Elem()
}

func (o TopicIAMMemberConditionPtrOutput) ToTopicIAMMemberConditionPtrOutput() TopicIAMMemberConditionPtrOutput {
	return o
}

func (o TopicIAMMemberConditionPtrOutput) ToTopicIAMMemberConditionPtrOutputWithContext(ctx context.Context) TopicIAMMemberConditionPtrOutput {
	return o
}

func (o TopicIAMMemberConditionPtrOutput) Elem() TopicIAMMemberConditionOutput {
	return o.ApplyT(func(v *TopicIAMMemberCondition) TopicIAMMemberCondition { return *v }).(TopicIAMMemberConditionOutput)
}

func (o TopicIAMMemberConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o TopicIAMMemberConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o TopicIAMMemberConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicIAMMemberCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type TopicMessageStoragePolicy struct {
	// A list of IDs of GCP regions where messages that are published to
	// the topic may be persisted in storage. Messages published by
	// publishers running in non-allowed GCP regions (or running outside
	// of GCP altogether) will be routed for storage in one of the
	// allowed regions. An empty list means that no regions are allowed,
	// and is not a valid configuration.
	AllowedPersistenceRegions []string `pulumi:"allowedPersistenceRegions"`
}

// TopicMessageStoragePolicyInput is an input type that accepts TopicMessageStoragePolicyArgs and TopicMessageStoragePolicyOutput values.
// You can construct a concrete instance of `TopicMessageStoragePolicyInput` via:
//
// 		 TopicMessageStoragePolicyArgs{...}
//
type TopicMessageStoragePolicyInput interface {
	pulumi.Input

	ToTopicMessageStoragePolicyOutput() TopicMessageStoragePolicyOutput
	ToTopicMessageStoragePolicyOutputWithContext(context.Context) TopicMessageStoragePolicyOutput
}

type TopicMessageStoragePolicyArgs struct {
	// A list of IDs of GCP regions where messages that are published to
	// the topic may be persisted in storage. Messages published by
	// publishers running in non-allowed GCP regions (or running outside
	// of GCP altogether) will be routed for storage in one of the
	// allowed regions. An empty list means that no regions are allowed,
	// and is not a valid configuration.
	AllowedPersistenceRegions pulumi.StringArrayInput `pulumi:"allowedPersistenceRegions"`
}

func (TopicMessageStoragePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicMessageStoragePolicy)(nil)).Elem()
}

func (i TopicMessageStoragePolicyArgs) ToTopicMessageStoragePolicyOutput() TopicMessageStoragePolicyOutput {
	return i.ToTopicMessageStoragePolicyOutputWithContext(context.Background())
}

func (i TopicMessageStoragePolicyArgs) ToTopicMessageStoragePolicyOutputWithContext(ctx context.Context) TopicMessageStoragePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicMessageStoragePolicyOutput)
}

func (i TopicMessageStoragePolicyArgs) ToTopicMessageStoragePolicyPtrOutput() TopicMessageStoragePolicyPtrOutput {
	return i.ToTopicMessageStoragePolicyPtrOutputWithContext(context.Background())
}

func (i TopicMessageStoragePolicyArgs) ToTopicMessageStoragePolicyPtrOutputWithContext(ctx context.Context) TopicMessageStoragePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicMessageStoragePolicyOutput).ToTopicMessageStoragePolicyPtrOutputWithContext(ctx)
}

// TopicMessageStoragePolicyPtrInput is an input type that accepts TopicMessageStoragePolicyArgs, TopicMessageStoragePolicyPtr and TopicMessageStoragePolicyPtrOutput values.
// You can construct a concrete instance of `TopicMessageStoragePolicyPtrInput` via:
//
// 		 TopicMessageStoragePolicyArgs{...}
//
//  or:
//
// 		 nil
//
type TopicMessageStoragePolicyPtrInput interface {
	pulumi.Input

	ToTopicMessageStoragePolicyPtrOutput() TopicMessageStoragePolicyPtrOutput
	ToTopicMessageStoragePolicyPtrOutputWithContext(context.Context) TopicMessageStoragePolicyPtrOutput
}

type topicMessageStoragePolicyPtrType TopicMessageStoragePolicyArgs

func TopicMessageStoragePolicyPtr(v *TopicMessageStoragePolicyArgs) TopicMessageStoragePolicyPtrInput {
	return (*topicMessageStoragePolicyPtrType)(v)
}

func (*topicMessageStoragePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicMessageStoragePolicy)(nil)).Elem()
}

func (i *topicMessageStoragePolicyPtrType) ToTopicMessageStoragePolicyPtrOutput() TopicMessageStoragePolicyPtrOutput {
	return i.ToTopicMessageStoragePolicyPtrOutputWithContext(context.Background())
}

func (i *topicMessageStoragePolicyPtrType) ToTopicMessageStoragePolicyPtrOutputWithContext(ctx context.Context) TopicMessageStoragePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicMessageStoragePolicyPtrOutput)
}

type TopicMessageStoragePolicyOutput struct{ *pulumi.OutputState }

func (TopicMessageStoragePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicMessageStoragePolicy)(nil)).Elem()
}

func (o TopicMessageStoragePolicyOutput) ToTopicMessageStoragePolicyOutput() TopicMessageStoragePolicyOutput {
	return o
}

func (o TopicMessageStoragePolicyOutput) ToTopicMessageStoragePolicyOutputWithContext(ctx context.Context) TopicMessageStoragePolicyOutput {
	return o
}

func (o TopicMessageStoragePolicyOutput) ToTopicMessageStoragePolicyPtrOutput() TopicMessageStoragePolicyPtrOutput {
	return o.ToTopicMessageStoragePolicyPtrOutputWithContext(context.Background())
}

func (o TopicMessageStoragePolicyOutput) ToTopicMessageStoragePolicyPtrOutputWithContext(ctx context.Context) TopicMessageStoragePolicyPtrOutput {
	return o.ApplyT(func(v TopicMessageStoragePolicy) *TopicMessageStoragePolicy {
		return &v
	}).(TopicMessageStoragePolicyPtrOutput)
}

// A list of IDs of GCP regions where messages that are published to
// the topic may be persisted in storage. Messages published by
// publishers running in non-allowed GCP regions (or running outside
// of GCP altogether) will be routed for storage in one of the
// allowed regions. An empty list means that no regions are allowed,
// and is not a valid configuration.
func (o TopicMessageStoragePolicyOutput) AllowedPersistenceRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicMessageStoragePolicy) []string { return v.AllowedPersistenceRegions }).(pulumi.StringArrayOutput)
}

type TopicMessageStoragePolicyPtrOutput struct{ *pulumi.OutputState }

func (TopicMessageStoragePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicMessageStoragePolicy)(nil)).Elem()
}

func (o TopicMessageStoragePolicyPtrOutput) ToTopicMessageStoragePolicyPtrOutput() TopicMessageStoragePolicyPtrOutput {
	return o
}

func (o TopicMessageStoragePolicyPtrOutput) ToTopicMessageStoragePolicyPtrOutputWithContext(ctx context.Context) TopicMessageStoragePolicyPtrOutput {
	return o
}

func (o TopicMessageStoragePolicyPtrOutput) Elem() TopicMessageStoragePolicyOutput {
	return o.ApplyT(func(v *TopicMessageStoragePolicy) TopicMessageStoragePolicy { return *v }).(TopicMessageStoragePolicyOutput)
}

// A list of IDs of GCP regions where messages that are published to
// the topic may be persisted in storage. Messages published by
// publishers running in non-allowed GCP regions (or running outside
// of GCP altogether) will be routed for storage in one of the
// allowed regions. An empty list means that no regions are allowed,
// and is not a valid configuration.
func (o TopicMessageStoragePolicyPtrOutput) AllowedPersistenceRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TopicMessageStoragePolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowedPersistenceRegions
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(SubscriptionDeadLetterPolicyOutput{})
	pulumi.RegisterOutputType(SubscriptionDeadLetterPolicyPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionExpirationPolicyOutput{})
	pulumi.RegisterOutputType(SubscriptionExpirationPolicyPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(SubscriptionIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(SubscriptionIAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionPushConfigOutput{})
	pulumi.RegisterOutputType(SubscriptionPushConfigPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionPushConfigOidcTokenOutput{})
	pulumi.RegisterOutputType(SubscriptionPushConfigOidcTokenPtrOutput{})
	pulumi.RegisterOutputType(TopicIAMBindingConditionOutput{})
	pulumi.RegisterOutputType(TopicIAMBindingConditionPtrOutput{})
	pulumi.RegisterOutputType(TopicIAMMemberConditionOutput{})
	pulumi.RegisterOutputType(TopicIAMMemberConditionPtrOutput{})
	pulumi.RegisterOutputType(TopicMessageStoragePolicyOutput{})
	pulumi.RegisterOutputType(TopicMessageStoragePolicyPtrOutput{})
}
