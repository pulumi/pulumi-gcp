// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pubsub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Three different resources help you manage your IAM policy for Cloud Pub/Sub Schema. Each of these resources serves a different use case:
//
// * `pubsub.SchemaIamPolicy`: Authoritative. Sets the IAM policy for the schema and replaces any existing policy already attached.
// * `pubsub.SchemaIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the schema are preserved.
// * `pubsub.SchemaIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the schema are preserved.
//
// # A data source can be used to retrieve policy data in advent you do not need creation
//
// * `pubsub.SchemaIamPolicy`: Retrieves the IAM policy for the schema
//
// > **Note:** `pubsub.SchemaIamPolicy` **cannot** be used in conjunction with `pubsub.SchemaIamBinding` and `pubsub.SchemaIamMember` or they will fight over what your policy should be.
//
// > **Note:** `pubsub.SchemaIamBinding` resources **can be** used in conjunction with `pubsub.SchemaIamMember` resources **only if** they do not grant privilege to the same role.
//
// ## google\_pubsub\_schema\_iam\_policy
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/organizations"
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
//				Bindings: []organizations.GetIAMPolicyBinding{
//					{
//						Role: "roles/viewer",
//						Members: []string{
//							"user:jane@example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = pubsub.NewSchemaIamPolicy(ctx, "policy", &pubsub.SchemaIamPolicyArgs{
//				Project:    pulumi.Any(example.Project),
//				Schema:     pulumi.Any(example.Name),
//				PolicyData: *pulumi.String(admin.PolicyData),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## google\_pubsub\_schema\_iam\_binding
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pubsub.NewSchemaIamBinding(ctx, "binding", &pubsub.SchemaIamBindingArgs{
//				Project: pulumi.Any(example.Project),
//				Schema:  pulumi.Any(example.Name),
//				Role:    pulumi.String("roles/viewer"),
//				Members: pulumi.StringArray{
//					pulumi.String("user:jane@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## google\_pubsub\_schema\_iam\_member
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v7/go/gcp/pubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pubsub.NewSchemaIamMember(ctx, "member", &pubsub.SchemaIamMemberArgs{
//				Project: pulumi.Any(example.Project),
//				Schema:  pulumi.Any(example.Name),
//				Role:    pulumi.String("roles/viewer"),
//				Member:  pulumi.String("user:jane@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// For all import syntaxes, the "resource in question" can take any of the following forms:
//
// * projects/{{project}}/schemas/{{name}}
//
// * {{project}}/{{name}}
//
// * {{name}}
//
// Any variables not passed in the import command will be taken from the provider configuration.
//
// Cloud Pub/Sub schema IAM resources can be imported using the resource identifiers, role, and member.
//
// IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.
//
// ```sh
// $ pulumi import gcp:pubsub/schemaIamMember:SchemaIamMember editor "projects/{{project}}/schemas/{{schema}} roles/viewer user:jane@example.com"
// ```
//
// IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.
//
// ```sh
// $ pulumi import gcp:pubsub/schemaIamMember:SchemaIamMember editor "projects/{{project}}/schemas/{{schema}} roles/viewer"
// ```
//
// IAM policy imports use the identifier of the resource in question, e.g.
//
// ```sh
// $ pulumi import gcp:pubsub/schemaIamMember:SchemaIamMember editor projects/{{project}}/schemas/{{schema}}
// ```
//
// -> **Custom Roles**: If you're importing a IAM resource with a custom role, make sure to use the
//
//	full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
type SchemaIamMember struct {
	pulumi.CustomResourceState

	Condition SchemaIamMemberConditionPtrOutput `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringOutput `pulumi:"etag"`
	Member pulumi.StringOutput `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringOutput `pulumi:"project"`
	// The role that should be applied. Only one
	// `pubsub.SchemaIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringOutput `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	Schema pulumi.StringOutput `pulumi:"schema"`
}

// NewSchemaIamMember registers a new resource with the given unique name, arguments, and options.
func NewSchemaIamMember(ctx *pulumi.Context,
	name string, args *SchemaIamMemberArgs, opts ...pulumi.ResourceOption) (*SchemaIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SchemaIamMember
	err := ctx.RegisterResource("gcp:pubsub/schemaIamMember:SchemaIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchemaIamMember gets an existing SchemaIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchemaIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaIamMemberState, opts ...pulumi.ResourceOption) (*SchemaIamMember, error) {
	var resource SchemaIamMember
	err := ctx.ReadResource("gcp:pubsub/schemaIamMember:SchemaIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchemaIamMember resources.
type schemaIamMemberState struct {
	Condition *SchemaIamMemberCondition `pulumi:"condition"`
	// (Computed) The etag of the IAM policy.
	Etag   *string `pulumi:"etag"`
	Member *string `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `pubsub.SchemaIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role *string `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	Schema *string `pulumi:"schema"`
}

type SchemaIamMemberState struct {
	Condition SchemaIamMemberConditionPtrInput
	// (Computed) The etag of the IAM policy.
	Etag   pulumi.StringPtrInput
	Member pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `pubsub.SchemaIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringPtrInput
	// Used to find the parent resource to bind the IAM policy to
	Schema pulumi.StringPtrInput
}

func (SchemaIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaIamMemberState)(nil)).Elem()
}

type schemaIamMemberArgs struct {
	Condition *SchemaIamMemberCondition `pulumi:"condition"`
	Member    string                    `pulumi:"member"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project *string `pulumi:"project"`
	// The role that should be applied. Only one
	// `pubsub.SchemaIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role string `pulumi:"role"`
	// Used to find the parent resource to bind the IAM policy to
	Schema string `pulumi:"schema"`
}

// The set of arguments for constructing a SchemaIamMember resource.
type SchemaIamMemberArgs struct {
	Condition SchemaIamMemberConditionPtrInput
	Member    pulumi.StringInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	//
	// * `member/members` - (Required) Identities that will be granted the privilege in `role`.
	//   Each entry can have one of the following values:
	// * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
	// * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	// * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	// * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
	// * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
	// * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
	// * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
	Project pulumi.StringPtrInput
	// The role that should be applied. Only one
	// `pubsub.SchemaIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role pulumi.StringInput
	// Used to find the parent resource to bind the IAM policy to
	Schema pulumi.StringInput
}

func (SchemaIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaIamMemberArgs)(nil)).Elem()
}

type SchemaIamMemberInput interface {
	pulumi.Input

	ToSchemaIamMemberOutput() SchemaIamMemberOutput
	ToSchemaIamMemberOutputWithContext(ctx context.Context) SchemaIamMemberOutput
}

func (*SchemaIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaIamMember)(nil)).Elem()
}

func (i *SchemaIamMember) ToSchemaIamMemberOutput() SchemaIamMemberOutput {
	return i.ToSchemaIamMemberOutputWithContext(context.Background())
}

func (i *SchemaIamMember) ToSchemaIamMemberOutputWithContext(ctx context.Context) SchemaIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaIamMemberOutput)
}

// SchemaIamMemberArrayInput is an input type that accepts SchemaIamMemberArray and SchemaIamMemberArrayOutput values.
// You can construct a concrete instance of `SchemaIamMemberArrayInput` via:
//
//	SchemaIamMemberArray{ SchemaIamMemberArgs{...} }
type SchemaIamMemberArrayInput interface {
	pulumi.Input

	ToSchemaIamMemberArrayOutput() SchemaIamMemberArrayOutput
	ToSchemaIamMemberArrayOutputWithContext(context.Context) SchemaIamMemberArrayOutput
}

type SchemaIamMemberArray []SchemaIamMemberInput

func (SchemaIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaIamMember)(nil)).Elem()
}

func (i SchemaIamMemberArray) ToSchemaIamMemberArrayOutput() SchemaIamMemberArrayOutput {
	return i.ToSchemaIamMemberArrayOutputWithContext(context.Background())
}

func (i SchemaIamMemberArray) ToSchemaIamMemberArrayOutputWithContext(ctx context.Context) SchemaIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaIamMemberArrayOutput)
}

// SchemaIamMemberMapInput is an input type that accepts SchemaIamMemberMap and SchemaIamMemberMapOutput values.
// You can construct a concrete instance of `SchemaIamMemberMapInput` via:
//
//	SchemaIamMemberMap{ "key": SchemaIamMemberArgs{...} }
type SchemaIamMemberMapInput interface {
	pulumi.Input

	ToSchemaIamMemberMapOutput() SchemaIamMemberMapOutput
	ToSchemaIamMemberMapOutputWithContext(context.Context) SchemaIamMemberMapOutput
}

type SchemaIamMemberMap map[string]SchemaIamMemberInput

func (SchemaIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaIamMember)(nil)).Elem()
}

func (i SchemaIamMemberMap) ToSchemaIamMemberMapOutput() SchemaIamMemberMapOutput {
	return i.ToSchemaIamMemberMapOutputWithContext(context.Background())
}

func (i SchemaIamMemberMap) ToSchemaIamMemberMapOutputWithContext(ctx context.Context) SchemaIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaIamMemberMapOutput)
}

type SchemaIamMemberOutput struct{ *pulumi.OutputState }

func (SchemaIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaIamMember)(nil)).Elem()
}

func (o SchemaIamMemberOutput) ToSchemaIamMemberOutput() SchemaIamMemberOutput {
	return o
}

func (o SchemaIamMemberOutput) ToSchemaIamMemberOutputWithContext(ctx context.Context) SchemaIamMemberOutput {
	return o
}

func (o SchemaIamMemberOutput) Condition() SchemaIamMemberConditionPtrOutput {
	return o.ApplyT(func(v *SchemaIamMember) SchemaIamMemberConditionPtrOutput { return v.Condition }).(SchemaIamMemberConditionPtrOutput)
}

// (Computed) The etag of the IAM policy.
func (o SchemaIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o SchemaIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
//
//   - `member/members` - (Required) Identities that will be granted the privilege in `role`.
//     Each entry can have one of the following values:
//   - **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
//   - **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
//   - **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
//   - **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
//   - **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
//   - **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
//   - **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
//   - **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
//   - **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
func (o SchemaIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role that should be applied. Only one
// `pubsub.SchemaIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (o SchemaIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Used to find the parent resource to bind the IAM policy to
func (o SchemaIamMemberOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaIamMember) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

type SchemaIamMemberArrayOutput struct{ *pulumi.OutputState }

func (SchemaIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaIamMember)(nil)).Elem()
}

func (o SchemaIamMemberArrayOutput) ToSchemaIamMemberArrayOutput() SchemaIamMemberArrayOutput {
	return o
}

func (o SchemaIamMemberArrayOutput) ToSchemaIamMemberArrayOutputWithContext(ctx context.Context) SchemaIamMemberArrayOutput {
	return o
}

func (o SchemaIamMemberArrayOutput) Index(i pulumi.IntInput) SchemaIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SchemaIamMember {
		return vs[0].([]*SchemaIamMember)[vs[1].(int)]
	}).(SchemaIamMemberOutput)
}

type SchemaIamMemberMapOutput struct{ *pulumi.OutputState }

func (SchemaIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaIamMember)(nil)).Elem()
}

func (o SchemaIamMemberMapOutput) ToSchemaIamMemberMapOutput() SchemaIamMemberMapOutput {
	return o
}

func (o SchemaIamMemberMapOutput) ToSchemaIamMemberMapOutputWithContext(ctx context.Context) SchemaIamMemberMapOutput {
	return o
}

func (o SchemaIamMemberMapOutput) MapIndex(k pulumi.StringInput) SchemaIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SchemaIamMember {
		return vs[0].(map[string]*SchemaIamMember)[vs[1].(string)]
	}).(SchemaIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaIamMemberInput)(nil)).Elem(), &SchemaIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaIamMemberArrayInput)(nil)).Elem(), SchemaIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaIamMemberMapInput)(nil)).Elem(), SchemaIamMemberMap{})
	pulumi.RegisterOutputType(SchemaIamMemberOutput{})
	pulumi.RegisterOutputType(SchemaIamMemberArrayOutput{})
	pulumi.RegisterOutputType(SchemaIamMemberMapOutput{})
}
