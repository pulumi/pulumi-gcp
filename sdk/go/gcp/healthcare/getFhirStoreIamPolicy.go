// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package healthcare

import (
	"context"
	"errors"
	"reflect"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves the current IAM policy data for a Google Cloud Healthcare FHIR store.
//
// ## example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/healthcare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := healthcare.LookupFhirStoreIamPolicy(ctx, &healthcare.LookupFhirStoreIamPolicyArgs{
//				FhirStoreId: fhirStore.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFhirStoreIamPolicy(ctx *pulumi.Context, args *LookupFhirStoreIamPolicyArgs, opts ...pulumi.InvokeOption) (*LookupFhirStoreIamPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	invokeOpts, optsErr := pulumi.NewInvokeOptions(opts...)
	if optsErr != nil {
		return &LookupFhirStoreIamPolicyResult{}, optsErr
	}
	if len(invokeOpts.DependsOn) > 0 {
		return &LookupFhirStoreIamPolicyResult{}, errors.New("DependsOn is not supported for direct form invoke LookupFhirStoreIamPolicy, use LookupFhirStoreIamPolicyOutput instead")
	}
	if len(invokeOpts.DependsOnInputs) > 0 {
		return &LookupFhirStoreIamPolicyResult{}, errors.New("DependsOnInputs is not supported for direct form invoke LookupFhirStoreIamPolicy, use LookupFhirStoreIamPolicyOutput instead")
	}
	var rv LookupFhirStoreIamPolicyResult
	err := ctx.Invoke("gcp:healthcare/getFhirStoreIamPolicy:getFhirStoreIamPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFhirStoreIamPolicy.
type LookupFhirStoreIamPolicyArgs struct {
	// The FHIR store ID, in the form
	// `{project_id}/{location_name}/{dataset_name}/{fhir_store_name}` or
	// `{location_name}/{dataset_name}/{fhir_store_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	FhirStoreId string `pulumi:"fhirStoreId"`
}

// A collection of values returned by getFhirStoreIamPolicy.
type LookupFhirStoreIamPolicyResult struct {
	// (Computed) The etag of the IAM policy.
	Etag        string `pulumi:"etag"`
	FhirStoreId string `pulumi:"fhirStoreId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (Computed) The policy data
	PolicyData string `pulumi:"policyData"`
}

func LookupFhirStoreIamPolicyOutput(ctx *pulumi.Context, args LookupFhirStoreIamPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupFhirStoreIamPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupFhirStoreIamPolicyResultOutput, error) {
			args := v.(LookupFhirStoreIamPolicyArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupFhirStoreIamPolicyResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("gcp:healthcare/getFhirStoreIamPolicy:getFhirStoreIamPolicy", args, &rv, "", opts...)
			if err != nil {
				return LookupFhirStoreIamPolicyResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupFhirStoreIamPolicyResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(LookupFhirStoreIamPolicyResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupFhirStoreIamPolicyResultOutput), nil
			}
			return output, nil
		}).(LookupFhirStoreIamPolicyResultOutput)
}

// A collection of arguments for invoking getFhirStoreIamPolicy.
type LookupFhirStoreIamPolicyOutputArgs struct {
	// The FHIR store ID, in the form
	// `{project_id}/{location_name}/{dataset_name}/{fhir_store_name}` or
	// `{location_name}/{dataset_name}/{fhir_store_name}`. In the second form, the provider's
	// project setting will be used as a fallback.
	FhirStoreId pulumi.StringInput `pulumi:"fhirStoreId"`
}

func (LookupFhirStoreIamPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFhirStoreIamPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getFhirStoreIamPolicy.
type LookupFhirStoreIamPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupFhirStoreIamPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFhirStoreIamPolicyResult)(nil)).Elem()
}

func (o LookupFhirStoreIamPolicyResultOutput) ToLookupFhirStoreIamPolicyResultOutput() LookupFhirStoreIamPolicyResultOutput {
	return o
}

func (o LookupFhirStoreIamPolicyResultOutput) ToLookupFhirStoreIamPolicyResultOutputWithContext(ctx context.Context) LookupFhirStoreIamPolicyResultOutput {
	return o
}

// (Computed) The etag of the IAM policy.
func (o LookupFhirStoreIamPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFhirStoreIamPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

func (o LookupFhirStoreIamPolicyResultOutput) FhirStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFhirStoreIamPolicyResult) string { return v.FhirStoreId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupFhirStoreIamPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFhirStoreIamPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// (Computed) The policy data
func (o LookupFhirStoreIamPolicyResultOutput) PolicyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFhirStoreIamPolicyResult) string { return v.PolicyData }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFhirStoreIamPolicyResultOutput{})
}
