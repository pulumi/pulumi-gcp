// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package healthcare

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A Healthcare `Dataset` is a toplevel logical grouping of `dicomStores`, `fhirStores` and `hl7V2Stores`.
//
// To get more information about Dataset, see:
//
// * [API documentation](https://cloud.google.com/healthcare/docs/reference/rest/v1/projects.locations.datasets)
// * How-to Guides
//     * [Creating a dataset](https://cloud.google.com/healthcare/docs/how-tos/datasets)
//
// ## Example Usage
// ### Healthcare Dataset Basic
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-gcp/sdk/v4/go/gcp/healthcare"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := healthcare.NewDataset(ctx, "_default", &healthcare.DatasetArgs{
// 			Location: pulumi.String("us-central1"),
// 			TimeZone: pulumi.String("UTC"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Dataset can be imported using any of these accepted formats
//
// ```sh
//  $ pulumi import gcp:healthcare/dataset:Dataset default projects/{{project}}/locations/{{location}}/datasets/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:healthcare/dataset:Dataset default {{project}}/{{location}}/{{name}}
// ```
//
// ```sh
//  $ pulumi import gcp:healthcare/dataset:Dataset default {{location}}/{{name}}
// ```
type Dataset struct {
	pulumi.CustomResourceState

	// The location for the Dataset.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name for the Dataset.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringOutput `pulumi:"project"`
	// The fully qualified name of this dataset
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The default timezone used by this dataset. Must be a either a valid IANA time zone name such as
	// "America/New_York" or empty, which defaults to UTC. This is used for parsing times in resources
	// (e.g., HL7 messages) where no explicit timezone is specified.
	TimeZone pulumi.StringOutput `pulumi:"timeZone"`
}

// NewDataset registers a new resource with the given unique name, arguments, and options.
func NewDataset(ctx *pulumi.Context,
	name string, args *DatasetArgs, opts ...pulumi.ResourceOption) (*Dataset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	var resource Dataset
	err := ctx.RegisterResource("gcp:healthcare/dataset:Dataset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataset gets an existing Dataset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetState, opts ...pulumi.ResourceOption) (*Dataset, error) {
	var resource Dataset
	err := ctx.ReadResource("gcp:healthcare/dataset:Dataset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dataset resources.
type datasetState struct {
	// The location for the Dataset.
	Location *string `pulumi:"location"`
	// The resource name for the Dataset.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The fully qualified name of this dataset
	SelfLink *string `pulumi:"selfLink"`
	// The default timezone used by this dataset. Must be a either a valid IANA time zone name such as
	// "America/New_York" or empty, which defaults to UTC. This is used for parsing times in resources
	// (e.g., HL7 messages) where no explicit timezone is specified.
	TimeZone *string `pulumi:"timeZone"`
}

type DatasetState struct {
	// The location for the Dataset.
	Location pulumi.StringPtrInput
	// The resource name for the Dataset.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The fully qualified name of this dataset
	SelfLink pulumi.StringPtrInput
	// The default timezone used by this dataset. Must be a either a valid IANA time zone name such as
	// "America/New_York" or empty, which defaults to UTC. This is used for parsing times in resources
	// (e.g., HL7 messages) where no explicit timezone is specified.
	TimeZone pulumi.StringPtrInput
}

func (DatasetState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetState)(nil)).Elem()
}

type datasetArgs struct {
	// The location for the Dataset.
	Location string `pulumi:"location"`
	// The resource name for the Dataset.
	Name *string `pulumi:"name"`
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `pulumi:"project"`
	// The default timezone used by this dataset. Must be a either a valid IANA time zone name such as
	// "America/New_York" or empty, which defaults to UTC. This is used for parsing times in resources
	// (e.g., HL7 messages) where no explicit timezone is specified.
	TimeZone *string `pulumi:"timeZone"`
}

// The set of arguments for constructing a Dataset resource.
type DatasetArgs struct {
	// The location for the Dataset.
	Location pulumi.StringInput
	// The resource name for the Dataset.
	Name pulumi.StringPtrInput
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project pulumi.StringPtrInput
	// The default timezone used by this dataset. Must be a either a valid IANA time zone name such as
	// "America/New_York" or empty, which defaults to UTC. This is used for parsing times in resources
	// (e.g., HL7 messages) where no explicit timezone is specified.
	TimeZone pulumi.StringPtrInput
}

func (DatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetArgs)(nil)).Elem()
}

type DatasetInput interface {
	pulumi.Input

	ToDatasetOutput() DatasetOutput
	ToDatasetOutputWithContext(ctx context.Context) DatasetOutput
}

func (*Dataset) ElementType() reflect.Type {
	return reflect.TypeOf((*Dataset)(nil))
}

func (i *Dataset) ToDatasetOutput() DatasetOutput {
	return i.ToDatasetOutputWithContext(context.Background())
}

func (i *Dataset) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetOutput)
}

func (i *Dataset) ToDatasetPtrOutput() DatasetPtrOutput {
	return i.ToDatasetPtrOutputWithContext(context.Background())
}

func (i *Dataset) ToDatasetPtrOutputWithContext(ctx context.Context) DatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetPtrOutput)
}

type DatasetPtrInput interface {
	pulumi.Input

	ToDatasetPtrOutput() DatasetPtrOutput
	ToDatasetPtrOutputWithContext(ctx context.Context) DatasetPtrOutput
}

type datasetPtrType DatasetArgs

func (*datasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Dataset)(nil))
}

func (i *datasetPtrType) ToDatasetPtrOutput() DatasetPtrOutput {
	return i.ToDatasetPtrOutputWithContext(context.Background())
}

func (i *datasetPtrType) ToDatasetPtrOutputWithContext(ctx context.Context) DatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetPtrOutput)
}

// DatasetArrayInput is an input type that accepts DatasetArray and DatasetArrayOutput values.
// You can construct a concrete instance of `DatasetArrayInput` via:
//
//          DatasetArray{ DatasetArgs{...} }
type DatasetArrayInput interface {
	pulumi.Input

	ToDatasetArrayOutput() DatasetArrayOutput
	ToDatasetArrayOutputWithContext(context.Context) DatasetArrayOutput
}

type DatasetArray []DatasetInput

func (DatasetArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Dataset)(nil))
}

func (i DatasetArray) ToDatasetArrayOutput() DatasetArrayOutput {
	return i.ToDatasetArrayOutputWithContext(context.Background())
}

func (i DatasetArray) ToDatasetArrayOutputWithContext(ctx context.Context) DatasetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetArrayOutput)
}

// DatasetMapInput is an input type that accepts DatasetMap and DatasetMapOutput values.
// You can construct a concrete instance of `DatasetMapInput` via:
//
//          DatasetMap{ "key": DatasetArgs{...} }
type DatasetMapInput interface {
	pulumi.Input

	ToDatasetMapOutput() DatasetMapOutput
	ToDatasetMapOutputWithContext(context.Context) DatasetMapOutput
}

type DatasetMap map[string]DatasetInput

func (DatasetMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Dataset)(nil))
}

func (i DatasetMap) ToDatasetMapOutput() DatasetMapOutput {
	return i.ToDatasetMapOutputWithContext(context.Background())
}

func (i DatasetMap) ToDatasetMapOutputWithContext(ctx context.Context) DatasetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetMapOutput)
}

type DatasetOutput struct {
	*pulumi.OutputState
}

func (DatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dataset)(nil))
}

func (o DatasetOutput) ToDatasetOutput() DatasetOutput {
	return o
}

func (o DatasetOutput) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return o
}

func (o DatasetOutput) ToDatasetPtrOutput() DatasetPtrOutput {
	return o.ToDatasetPtrOutputWithContext(context.Background())
}

func (o DatasetOutput) ToDatasetPtrOutputWithContext(ctx context.Context) DatasetPtrOutput {
	return o.ApplyT(func(v Dataset) *Dataset {
		return &v
	}).(DatasetPtrOutput)
}

type DatasetPtrOutput struct {
	*pulumi.OutputState
}

func (DatasetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dataset)(nil))
}

func (o DatasetPtrOutput) ToDatasetPtrOutput() DatasetPtrOutput {
	return o
}

func (o DatasetPtrOutput) ToDatasetPtrOutputWithContext(ctx context.Context) DatasetPtrOutput {
	return o
}

type DatasetArrayOutput struct{ *pulumi.OutputState }

func (DatasetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Dataset)(nil))
}

func (o DatasetArrayOutput) ToDatasetArrayOutput() DatasetArrayOutput {
	return o
}

func (o DatasetArrayOutput) ToDatasetArrayOutputWithContext(ctx context.Context) DatasetArrayOutput {
	return o
}

func (o DatasetArrayOutput) Index(i pulumi.IntInput) DatasetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Dataset {
		return vs[0].([]Dataset)[vs[1].(int)]
	}).(DatasetOutput)
}

type DatasetMapOutput struct{ *pulumi.OutputState }

func (DatasetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Dataset)(nil))
}

func (o DatasetMapOutput) ToDatasetMapOutput() DatasetMapOutput {
	return o
}

func (o DatasetMapOutput) ToDatasetMapOutputWithContext(ctx context.Context) DatasetMapOutput {
	return o
}

func (o DatasetMapOutput) MapIndex(k pulumi.StringInput) DatasetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Dataset {
		return vs[0].(map[string]Dataset)[vs[1].(string)]
	}).(DatasetOutput)
}

func init() {
	pulumi.RegisterOutputType(DatasetOutput{})
	pulumi.RegisterOutputType(DatasetPtrOutput{})
	pulumi.RegisterOutputType(DatasetArrayOutput{})
	pulumi.RegisterOutputType(DatasetMapOutput{})
}
