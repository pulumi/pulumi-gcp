// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package healthcare

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// A Healthcare `Dataset` is a toplevel logical grouping of `dicomStores`, `fhirStores` and `hl7V2Stores`.
// 
// To get more information about Dataset, see:
// 
// * [API documentation](https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets)
// * How-to Guides
//     * [Creating a dataset](https://cloud.google.com/healthcare/docs/how-tos/datasets)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/healthcare_dataset.html.markdown.
type Dataset struct {
	s *pulumi.ResourceState
}

// NewDataset registers a new resource with the given unique name, arguments, and options.
func NewDataset(ctx *pulumi.Context,
	name string, args *DatasetArgs, opts ...pulumi.ResourceOpt) (*Dataset, error) {
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["timeZone"] = nil
	} else {
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["timeZone"] = args.TimeZone
	}
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:healthcare/dataset:Dataset", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Dataset{s: s}, nil
}

// GetDataset gets an existing Dataset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataset(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DatasetState, opts ...pulumi.ResourceOpt) (*Dataset, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
		inputs["timeZone"] = state.TimeZone
	}
	s, err := ctx.ReadResource("gcp:healthcare/dataset:Dataset", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Dataset{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Dataset) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Dataset) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Dataset) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

func (r *Dataset) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Dataset) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *Dataset) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

func (r *Dataset) TimeZone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["timeZone"])
}

// Input properties used for looking up and filtering Dataset resources.
type DatasetState struct {
	Location interface{}
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	SelfLink interface{}
	TimeZone interface{}
}

// The set of arguments for constructing a Dataset resource.
type DatasetArgs struct {
	Location interface{}
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	TimeZone interface{}
}
